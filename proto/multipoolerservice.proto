/*
Copyright 2025 Supabase, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file contains the RPC service definition for multipooler.

syntax = "proto3";

package multipoolerservice;

import "mtrpc.proto";
import "query.proto";

option go_package = "github.com/multigres/multigres/go/pb/multipoolerservice";

// MultiPoolerService provides connection pooling and query execution
service MultiPoolerService {
  // ExecuteQuery executes a SQL query and returns the result
  // This should be used sparingly only when we know the result set is small,
  // otherwise StreamExecute should be used.
  rpc ExecuteQuery(ExecuteQueryRequest) returns (ExecuteQueryResponse);

  // StreamExecute executes a SQL query and streams the results back
  rpc StreamExecute(StreamExecuteRequest) returns (stream StreamExecuteResponse);
}

// ExecuteQueryRequest represents a request to execute a SQL query
message ExecuteQueryRequest {
  string query = 1;

  // target specifies the routing destination (tablegroup, shard, pooler type)
  query.Target target = 2;

  uint64 max_rows = 3;

  // caller_id identifies the caller. This is the effective caller ID,
  // set by the application to further identify the caller.
  mtrpc.CallerID caller_id = 4;
}

// ExecuteQueryResponse represents the response from executing a SQL query
message ExecuteQueryResponse {
  query.QueryResult result = 1;
}

// StreamExecuteRequest represents a request to execute a SQL query with streaming results
message StreamExecuteRequest {
  // query is the SQL query to execute
  string query = 1;

  // target specifies the routing destination (tablegroup, shard, pooler type)
  query.Target target = 2;

  // caller_id identifies the caller. This is the effective caller ID,
  // set by the application to further identify the caller.
  mtrpc.CallerID caller_id = 3;
}

// StreamExecuteResponse represents a single response in the stream of query results
message StreamExecuteResponse {
  // result contains the query result data (rows, fields, etc.)
  query.QueryResult result = 1;
}