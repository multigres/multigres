// Copyright 2025 Supabase, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package pgctldservice;

import "google/protobuf/duration.proto";

option go_package = "github.com/multigres/multigres/go/pb/pgctldservice";

// PostgreSQL Control Service
service PgCtld {

  // Bootstrap and lifecycle Methods

  // Start PostgreSQL server
  rpc Start(StartRequest) returns (StartResponse);

  // Stop PostgreSQL server
  rpc Stop(StopRequest) returns (StopResponse);

  // Restart PostgreSQL server
  rpc Restart(RestartRequest) returns (RestartResponse);

  // Reload PostgreSQL configuration
  rpc ReloadConfig(ReloadConfigRequest) returns (ReloadConfigResponse);

  // Get PostgreSQL server status
  rpc Status(StatusRequest) returns (StatusResponse);

  // Get server version information
  rpc Version(VersionRequest) returns (VersionResponse);

  // Initialize data directory
  rpc InitDataDir(InitDataDirRequest) returns (InitDataDirResponse);

  // PgRewind rewinds a PostgreSQL data directory to an earlier point in the timeline
  // This is used to resynchronize a server that diverged from the primary after a failback
  rpc PgRewind(PgRewindRequest) returns (PgRewindResponse);

  // HA and Replication Methods. Main consumer of this is MultiOrch
}

// Start PostgreSQL server
message StartRequest {
  // Override the default port
  int32 port = 1;

  // Additional postgres command line arguments
  repeated string extra_args = 2;
}

message StartResponse {
  // Process ID of started PostgreSQL server
  int32 pid = 1;

  // Status message
  string message = 2;
}

// Stop PostgreSQL server
message StopRequest {
  // Shutdown mode: smart, fast, immediate
  string mode = 1;

  // Timeout
  google.protobuf.Duration timeout = 2;
}

message StopResponse {
  // Status message
  string message = 1;
}

// Restart PostgreSQL server
message RestartRequest {
  // Shutdown mode for stop phase: smart, fast, immediate
  string mode = 1;

  // Timeout for stop phase
  google.protobuf.Duration timeout = 2;

  // Override default port for start phase
  int32 port = 3;

  repeated string extra_args = 4;
}

message RestartResponse {
  // Process ID of restarted PostgreSQL server
  int32 pid = 1;

  // Status message
  string message = 2;
}

// Reload PostgreSQL configuration
message ReloadConfigRequest {
}

message ReloadConfigResponse {
  // Status message
  string message = 1;
}

// Get PostgreSQL server status
message StatusRequest {
}

message StatusResponse {
  // Server status
  ServerStatus status = 1;

  // Process ID (if running)
  int32 pid = 2;

  // Server version (if available)
  string version = 3;

  // Uptime (if running)
  google.protobuf.Duration uptime = 4;

  // Data directory path
  string data_dir = 5;

  // Port number
  int32 port = 6;

  // Host address
  string host = 7;

  // Is server ready to accept connections
  bool ready = 8;

  // Additional status information
  string message = 9;
}

// Server status enumeration
enum ServerStatus {
  UNKNOWN = 0;
  STOPPED = 1;
  STARTING = 2;
  RUNNING = 3;
  STOPPING = 4;
  NOT_INITIALIZED = 5;
}

// Get server version information
message VersionRequest {
  // Override default connection parameters
  string host = 1;
  int32 port = 2;
  string database = 3;
  string user = 4;
}

message VersionResponse {
  // PostgreSQL version string
  string version = 1;

  // Status message
  string message = 2;
}

// Initialize data directory
message InitDataDirRequest {
  // Authentication method for local connections
  string auth_local = 1;

  // Authentication method for host connections
  string auth_host = 2;

  // Additional initdb arguments
  repeated string extra_args = 3;
}

message InitDataDirResponse {
  // Status message
  string message = 1;
}

// PgRewind rewinds a PostgreSQL data directory to an earlier point in the timeline
message PgRewindRequest {
  // Source server connection string (--source-server)
  // Format: "host=<hostname> port=<port> user=<user> dbname=<dbname>"
  string source_server = 1;

  // Perform a dry run without making changes (--dry-run)
  bool dry_run = 2;

  // Additional pg_rewind command line arguments
  repeated string extra_args = 3;
}

message PgRewindResponse {
}