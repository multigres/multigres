// Copyright 2025 Supabase, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package multiadmin;

import "clustermetadata.proto";

option go_package = "github.com/multigres/multigres/go/pb/multiadmin";

// MultiAdminService provides administrative gRPC APIs for querying cluster metadata
service MultiAdminService {
  // GetCell retrieves information about a specific cell
  rpc GetCell(GetCellRequest) returns (GetCellResponse);

  // GetDatabase retrieves information about a specific database
  rpc GetDatabase(GetDatabaseRequest) returns (GetDatabaseResponse);

  // GetCellNames retrieves all cell names in the cluster
  rpc GetCellNames(GetCellNamesRequest) returns (GetCellNamesResponse);

  // GetDatabaseNames retrieves all database names in the cluster
  rpc GetDatabaseNames(GetDatabaseNamesRequest) returns (GetDatabaseNamesResponse);

  // GetGateways retrieves gateways filtered by cells
  rpc GetGateways(GetGatewaysRequest) returns (GetGatewaysResponse);

  // GetPoolers retrieves poolers filtered by cells and/or database
  rpc GetPoolers(GetPoolersRequest) returns (GetPoolersResponse);

  // GetOrchs retrieves orchestrators filtered by cells
  rpc GetOrchs(GetOrchsRequest) returns (GetOrchsResponse);
}

// GetCellRequest specifies the cell to retrieve
message GetCellRequest {
  // name is the name of the cell to retrieve
  string name = 1;
}

// GetCellResponse contains the cell information
message GetCellResponse {
  // cell contains the Cell protobuf object
  clustermetadata.Cell cell = 1;
}

// GetDatabaseRequest specifies the database to retrieve
message GetDatabaseRequest {
  // name is the name of the database to retrieve
  string name = 1;
}

// GetDatabaseResponse contains the database information
message GetDatabaseResponse {
  // database contains the Database protobuf object
  clustermetadata.Database database = 1;
}

// GetCellNamesRequest requests all cell names
message GetCellNamesRequest {
}

// GetCellNamesResponse contains all cell names
message GetCellNamesResponse {
  repeated string names = 1;
}

// GetDatabaseNamesRequest requests all database names
message GetDatabaseNamesRequest {
}

// GetDatabaseNamesResponse contains all database names
message GetDatabaseNamesResponse {
  repeated string names = 1;
}

// GetGatewaysRequest requests gateways with optional filtering
message GetGatewaysRequest {
  // cells is a comma-separated list of cell names to filter by (optional)
  repeated string cells = 1;
}

// GetGatewaysResponse contains the filtered gateways
message GetGatewaysResponse {
  repeated clustermetadata.MultiGateway gateways = 1;
}

// GetPoolersRequest requests poolers with optional filtering
message GetPoolersRequest {
  // cells is a comma-separated list of cell names to filter by (optional)
  repeated string cells = 1;
  // database name to filter by (optional)
  string database = 2;
  // shard name to filter by (optional)
  string shard = 3;
}

// GetPoolersResponse contains the filtered poolers
message GetPoolersResponse {
  repeated clustermetadata.MultiPooler poolers = 1;
}

// GetOrchsRequest requests orchestrators with optional filtering
message GetOrchsRequest {
  // cells is a comma-separated list of cell names to filter by (optional)
  repeated string cells = 1;
}

// GetOrchsResponse contains the filtered orchestrators
message GetOrchsResponse {
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated clustermetadata.MultiOrch orchs = 1;
}
