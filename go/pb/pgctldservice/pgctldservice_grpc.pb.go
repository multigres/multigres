// Copyright 2025 The Multigres Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: pgctldservice.proto

package pgctldservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PgCtld_Start_FullMethodName        = "/pgctldservice.PgCtld/Start"
	PgCtld_Stop_FullMethodName         = "/pgctldservice.PgCtld/Stop"
	PgCtld_Restart_FullMethodName      = "/pgctldservice.PgCtld/Restart"
	PgCtld_ReloadConfig_FullMethodName = "/pgctldservice.PgCtld/ReloadConfig"
	PgCtld_Status_FullMethodName       = "/pgctldservice.PgCtld/Status"
	PgCtld_Version_FullMethodName      = "/pgctldservice.PgCtld/Version"
	PgCtld_InitDataDir_FullMethodName  = "/pgctldservice.PgCtld/InitDataDir"
)

// PgCtldClient is the client API for PgCtld service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PostgreSQL Control Service
type PgCtldClient interface {
	// Start PostgreSQL server
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	// Stop PostgreSQL server
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// Restart PostgreSQL server
	Restart(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*RestartResponse, error)
	// Reload PostgreSQL configuration
	ReloadConfig(ctx context.Context, in *ReloadConfigRequest, opts ...grpc.CallOption) (*ReloadConfigResponse, error)
	// Get PostgreSQL server status
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Get server version information
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	// Initialize data directory
	InitDataDir(ctx context.Context, in *InitDataDirRequest, opts ...grpc.CallOption) (*InitDataDirResponse, error)
}

type pgCtldClient struct {
	cc grpc.ClientConnInterface
}

func NewPgCtldClient(cc grpc.ClientConnInterface) PgCtldClient {
	return &pgCtldClient{cc}
}

func (c *pgCtldClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, PgCtld_Start_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pgCtldClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, PgCtld_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pgCtldClient) Restart(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*RestartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestartResponse)
	err := c.cc.Invoke(ctx, PgCtld_Restart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pgCtldClient) ReloadConfig(ctx context.Context, in *ReloadConfigRequest, opts ...grpc.CallOption) (*ReloadConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReloadConfigResponse)
	err := c.cc.Invoke(ctx, PgCtld_ReloadConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pgCtldClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, PgCtld_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pgCtldClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, PgCtld_Version_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pgCtldClient) InitDataDir(ctx context.Context, in *InitDataDirRequest, opts ...grpc.CallOption) (*InitDataDirResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitDataDirResponse)
	err := c.cc.Invoke(ctx, PgCtld_InitDataDir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PgCtldServer is the server API for PgCtld service.
// All implementations must embed UnimplementedPgCtldServer
// for forward compatibility.
//
// PostgreSQL Control Service
type PgCtldServer interface {
	// Start PostgreSQL server
	Start(context.Context, *StartRequest) (*StartResponse, error)
	// Stop PostgreSQL server
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	// Restart PostgreSQL server
	Restart(context.Context, *RestartRequest) (*RestartResponse, error)
	// Reload PostgreSQL configuration
	ReloadConfig(context.Context, *ReloadConfigRequest) (*ReloadConfigResponse, error)
	// Get PostgreSQL server status
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	// Get server version information
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	// Initialize data directory
	InitDataDir(context.Context, *InitDataDirRequest) (*InitDataDirResponse, error)
	mustEmbedUnimplementedPgCtldServer()
}

// UnimplementedPgCtldServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPgCtldServer struct{}

func (UnimplementedPgCtldServer) Start(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedPgCtldServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedPgCtldServer) Restart(context.Context, *RestartRequest) (*RestartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedPgCtldServer) ReloadConfig(context.Context, *ReloadConfigRequest) (*ReloadConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadConfig not implemented")
}
func (UnimplementedPgCtldServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedPgCtldServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedPgCtldServer) InitDataDir(context.Context, *InitDataDirRequest) (*InitDataDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDataDir not implemented")
}
func (UnimplementedPgCtldServer) mustEmbedUnimplementedPgCtldServer() {}
func (UnimplementedPgCtldServer) testEmbeddedByValue()                {}

// UnsafePgCtldServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PgCtldServer will
// result in compilation errors.
type UnsafePgCtldServer interface {
	mustEmbedUnimplementedPgCtldServer()
}

func RegisterPgCtldServer(s grpc.ServiceRegistrar, srv PgCtldServer) {
	// If the following call pancis, it indicates UnimplementedPgCtldServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PgCtld_ServiceDesc, srv)
}

func _PgCtld_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PgCtldServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PgCtld_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PgCtldServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PgCtld_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PgCtldServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PgCtld_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PgCtldServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PgCtld_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PgCtldServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PgCtld_Restart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PgCtldServer).Restart(ctx, req.(*RestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PgCtld_ReloadConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PgCtldServer).ReloadConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PgCtld_ReloadConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PgCtldServer).ReloadConfig(ctx, req.(*ReloadConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PgCtld_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PgCtldServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PgCtld_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PgCtldServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PgCtld_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PgCtldServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PgCtld_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PgCtldServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PgCtld_InitDataDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitDataDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PgCtldServer).InitDataDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PgCtld_InitDataDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PgCtldServer).InitDataDir(ctx, req.(*InitDataDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PgCtld_ServiceDesc is the grpc.ServiceDesc for PgCtld service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PgCtld_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pgctldservice.PgCtld",
	HandlerType: (*PgCtldServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _PgCtld_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _PgCtld_Stop_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _PgCtld_Restart_Handler,
		},
		{
			MethodName: "ReloadConfig",
			Handler:    _PgCtld_ReloadConfig_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _PgCtld_Status_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _PgCtld_Version_Handler,
		},
		{
			MethodName: "InitDataDir",
			Handler:    _PgCtld_InitDataDir_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pgctldservice.proto",
}
