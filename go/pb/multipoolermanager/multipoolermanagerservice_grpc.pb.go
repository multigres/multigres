// Copyright 2025 Supabase, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: multipoolermanagerservice.proto

package multipoolermanager

import (
	context "context"
	multipoolermanagerdata "github.com/multigres/multigres/go/pb/multipoolermanagerdata"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MultiPoolerManager_WaitForLSN_FullMethodName                      = "/multipoolermanager.MultiPoolerManager/WaitForLSN"
	MultiPoolerManager_SetReadOnly_FullMethodName                     = "/multipoolermanager.MultiPoolerManager/SetReadOnly"
	MultiPoolerManager_IsReadOnly_FullMethodName                      = "/multipoolermanager.MultiPoolerManager/IsReadOnly"
	MultiPoolerManager_SetPrimaryConnInfo_FullMethodName              = "/multipoolermanager.MultiPoolerManager/SetPrimaryConnInfo"
	MultiPoolerManager_StartReplication_FullMethodName                = "/multipoolermanager.MultiPoolerManager/StartReplication"
	MultiPoolerManager_StopReplication_FullMethodName                 = "/multipoolermanager.MultiPoolerManager/StopReplication"
	MultiPoolerManager_ReplicationStatus_FullMethodName               = "/multipoolermanager.MultiPoolerManager/ReplicationStatus"
	MultiPoolerManager_ResetReplication_FullMethodName                = "/multipoolermanager.MultiPoolerManager/ResetReplication"
	MultiPoolerManager_ConfigureSynchronousReplication_FullMethodName = "/multipoolermanager.MultiPoolerManager/ConfigureSynchronousReplication"
	MultiPoolerManager_PrimaryStatus_FullMethodName                   = "/multipoolermanager.MultiPoolerManager/PrimaryStatus"
	MultiPoolerManager_PrimaryPosition_FullMethodName                 = "/multipoolermanager.MultiPoolerManager/PrimaryPosition"
	MultiPoolerManager_StopReplicationAndGetStatus_FullMethodName     = "/multipoolermanager.MultiPoolerManager/StopReplicationAndGetStatus"
	MultiPoolerManager_ChangeType_FullMethodName                      = "/multipoolermanager.MultiPoolerManager/ChangeType"
	MultiPoolerManager_GetFollowers_FullMethodName                    = "/multipoolermanager.MultiPoolerManager/GetFollowers"
	MultiPoolerManager_Demote_FullMethodName                          = "/multipoolermanager.MultiPoolerManager/Demote"
	MultiPoolerManager_UndoDemote_FullMethodName                      = "/multipoolermanager.MultiPoolerManager/UndoDemote"
	MultiPoolerManager_Promote_FullMethodName                         = "/multipoolermanager.MultiPoolerManager/Promote"
	MultiPoolerManager_Status_FullMethodName                          = "/multipoolermanager.MultiPoolerManager/Status"
)

// MultiPoolerManagerClient is the client API for MultiPoolerManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultiPoolerManagerClient interface {
	// WaitForLSN waits for PostgreSQL server to reach a specific LSN position
	WaitForLSN(ctx context.Context, in *multipoolermanagerdata.WaitForLSNRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.WaitForLSNResponse, error)
	// SetReadOnly makes the PostgreSQL instance read-only
	SetReadOnly(ctx context.Context, in *multipoolermanagerdata.SetReadOnlyRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.SetReadOnlyResponse, error)
	// IsReadOnly checks if PostgreSQL instance is in read-only mode
	IsReadOnly(ctx context.Context, in *multipoolermanagerdata.IsReadOnlyRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.IsReadOnlyResponse, error)
	// SetPrimaryConnInfo sets the primary connection info for a standby server
	SetPrimaryConnInfo(ctx context.Context, in *multipoolermanagerdata.SetPrimaryConnInfoRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.SetPrimaryConnInfoResponse, error)
	// StartReplication starts WAL replay on standby (calls pg_wal_replay_resume)
	StartReplication(ctx context.Context, in *multipoolermanagerdata.StartReplicationRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.StartReplicationResponse, error)
	// StopReplication stops WAL replay on standby (calls pg_wal_replay_pause)
	StopReplication(ctx context.Context, in *multipoolermanagerdata.StopReplicationRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.StopReplicationResponse, error)
	// ReplicationStatus gets the current replication status of the standby
	ReplicationStatus(ctx context.Context, in *multipoolermanagerdata.ReplicationStatusRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.ReplicationStatusResponse, error)
	// ResetReplication resets the standby's connection to its primary by clearing primary_conninfo,
	// reloading PostgreSQL configuration, and terminating the WAL receiver process. This effectively
	// disconnects the replica from the primary and prevents it from acknowledging commits, making it
	// unavailable for synchronous replication until reconfigured.
	ResetReplication(ctx context.Context, in *multipoolermanagerdata.ResetReplicationRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.ResetReplicationResponse, error)
	// ConfigureSynchronousReplication configures PostgreSQL synchronous replication settings
	// including synchronous_commit, synchronous_standby_names, and synchronization method (ANY/FIRST/quorum)
	ConfigureSynchronousReplication(ctx context.Context, in *multipoolermanagerdata.ConfigureSynchronousReplicationRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.ConfigureSynchronousReplicationResponse, error)
	// PrimaryStatus gets the status of the leader server
	PrimaryStatus(ctx context.Context, in *multipoolermanagerdata.PrimaryStatusRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.PrimaryStatusResponse, error)
	// PrimaryPosition gets the current LSN position of the leader
	PrimaryPosition(ctx context.Context, in *multipoolermanagerdata.PrimaryPositionRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.PrimaryPositionResponse, error)
	// StopReplicationAndGetStatus stops PostgreSQL replication and returns the status
	StopReplicationAndGetStatus(ctx context.Context, in *multipoolermanagerdata.StopReplicationAndGetStatusRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.StopReplicationAndGetStatusResponse, error)
	// ChangeType changes the pooler type (LEADER/FOLLOWER)
	ChangeType(ctx context.Context, in *multipoolermanagerdata.ChangeTypeRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.ChangeTypeResponse, error)
	// GetFollowers gets the list of follower servers
	GetFollowers(ctx context.Context, in *multipoolermanagerdata.GetFollowersRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.GetFollowersResponse, error)
	// Demote demotes the current leader server
	Demote(ctx context.Context, in *multipoolermanagerdata.DemoteRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.DemoteResponse, error)
	// UndoDemote undoes a demotion
	UndoDemote(ctx context.Context, in *multipoolermanagerdata.UndoDemoteRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.UndoDemoteResponse, error)
	// Promote promotes a replica to leader (Multigres-level operation)
	Promote(ctx context.Context, in *multipoolermanagerdata.PromoteRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.PromoteResponse, error)
	// Status gets the current status of the manager
	Status(ctx context.Context, in *multipoolermanagerdata.StatusRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.StatusResponse, error)
}

type multiPoolerManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewMultiPoolerManagerClient(cc grpc.ClientConnInterface) MultiPoolerManagerClient {
	return &multiPoolerManagerClient{cc}
}

func (c *multiPoolerManagerClient) WaitForLSN(ctx context.Context, in *multipoolermanagerdata.WaitForLSNRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.WaitForLSNResponse, error) {
	out := new(multipoolermanagerdata.WaitForLSNResponse)
	err := c.cc.Invoke(ctx, MultiPoolerManager_WaitForLSN_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiPoolerManagerClient) SetReadOnly(ctx context.Context, in *multipoolermanagerdata.SetReadOnlyRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.SetReadOnlyResponse, error) {
	out := new(multipoolermanagerdata.SetReadOnlyResponse)
	err := c.cc.Invoke(ctx, MultiPoolerManager_SetReadOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiPoolerManagerClient) IsReadOnly(ctx context.Context, in *multipoolermanagerdata.IsReadOnlyRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.IsReadOnlyResponse, error) {
	out := new(multipoolermanagerdata.IsReadOnlyResponse)
	err := c.cc.Invoke(ctx, MultiPoolerManager_IsReadOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiPoolerManagerClient) SetPrimaryConnInfo(ctx context.Context, in *multipoolermanagerdata.SetPrimaryConnInfoRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.SetPrimaryConnInfoResponse, error) {
	out := new(multipoolermanagerdata.SetPrimaryConnInfoResponse)
	err := c.cc.Invoke(ctx, MultiPoolerManager_SetPrimaryConnInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiPoolerManagerClient) StartReplication(ctx context.Context, in *multipoolermanagerdata.StartReplicationRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.StartReplicationResponse, error) {
	out := new(multipoolermanagerdata.StartReplicationResponse)
	err := c.cc.Invoke(ctx, MultiPoolerManager_StartReplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiPoolerManagerClient) StopReplication(ctx context.Context, in *multipoolermanagerdata.StopReplicationRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.StopReplicationResponse, error) {
	out := new(multipoolermanagerdata.StopReplicationResponse)
	err := c.cc.Invoke(ctx, MultiPoolerManager_StopReplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiPoolerManagerClient) ReplicationStatus(ctx context.Context, in *multipoolermanagerdata.ReplicationStatusRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.ReplicationStatusResponse, error) {
	out := new(multipoolermanagerdata.ReplicationStatusResponse)
	err := c.cc.Invoke(ctx, MultiPoolerManager_ReplicationStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiPoolerManagerClient) ResetReplication(ctx context.Context, in *multipoolermanagerdata.ResetReplicationRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.ResetReplicationResponse, error) {
	out := new(multipoolermanagerdata.ResetReplicationResponse)
	err := c.cc.Invoke(ctx, MultiPoolerManager_ResetReplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiPoolerManagerClient) ConfigureSynchronousReplication(ctx context.Context, in *multipoolermanagerdata.ConfigureSynchronousReplicationRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.ConfigureSynchronousReplicationResponse, error) {
	out := new(multipoolermanagerdata.ConfigureSynchronousReplicationResponse)
	err := c.cc.Invoke(ctx, MultiPoolerManager_ConfigureSynchronousReplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiPoolerManagerClient) PrimaryStatus(ctx context.Context, in *multipoolermanagerdata.PrimaryStatusRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.PrimaryStatusResponse, error) {
	out := new(multipoolermanagerdata.PrimaryStatusResponse)
	err := c.cc.Invoke(ctx, MultiPoolerManager_PrimaryStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiPoolerManagerClient) PrimaryPosition(ctx context.Context, in *multipoolermanagerdata.PrimaryPositionRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.PrimaryPositionResponse, error) {
	out := new(multipoolermanagerdata.PrimaryPositionResponse)
	err := c.cc.Invoke(ctx, MultiPoolerManager_PrimaryPosition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiPoolerManagerClient) StopReplicationAndGetStatus(ctx context.Context, in *multipoolermanagerdata.StopReplicationAndGetStatusRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.StopReplicationAndGetStatusResponse, error) {
	out := new(multipoolermanagerdata.StopReplicationAndGetStatusResponse)
	err := c.cc.Invoke(ctx, MultiPoolerManager_StopReplicationAndGetStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiPoolerManagerClient) ChangeType(ctx context.Context, in *multipoolermanagerdata.ChangeTypeRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.ChangeTypeResponse, error) {
	out := new(multipoolermanagerdata.ChangeTypeResponse)
	err := c.cc.Invoke(ctx, MultiPoolerManager_ChangeType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiPoolerManagerClient) GetFollowers(ctx context.Context, in *multipoolermanagerdata.GetFollowersRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.GetFollowersResponse, error) {
	out := new(multipoolermanagerdata.GetFollowersResponse)
	err := c.cc.Invoke(ctx, MultiPoolerManager_GetFollowers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiPoolerManagerClient) Demote(ctx context.Context, in *multipoolermanagerdata.DemoteRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.DemoteResponse, error) {
	out := new(multipoolermanagerdata.DemoteResponse)
	err := c.cc.Invoke(ctx, MultiPoolerManager_Demote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiPoolerManagerClient) UndoDemote(ctx context.Context, in *multipoolermanagerdata.UndoDemoteRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.UndoDemoteResponse, error) {
	out := new(multipoolermanagerdata.UndoDemoteResponse)
	err := c.cc.Invoke(ctx, MultiPoolerManager_UndoDemote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiPoolerManagerClient) Promote(ctx context.Context, in *multipoolermanagerdata.PromoteRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.PromoteResponse, error) {
	out := new(multipoolermanagerdata.PromoteResponse)
	err := c.cc.Invoke(ctx, MultiPoolerManager_Promote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiPoolerManagerClient) Status(ctx context.Context, in *multipoolermanagerdata.StatusRequest, opts ...grpc.CallOption) (*multipoolermanagerdata.StatusResponse, error) {
	out := new(multipoolermanagerdata.StatusResponse)
	err := c.cc.Invoke(ctx, MultiPoolerManager_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultiPoolerManagerServer is the server API for MultiPoolerManager service.
// All implementations must embed UnimplementedMultiPoolerManagerServer
// for forward compatibility
type MultiPoolerManagerServer interface {
	// WaitForLSN waits for PostgreSQL server to reach a specific LSN position
	WaitForLSN(context.Context, *multipoolermanagerdata.WaitForLSNRequest) (*multipoolermanagerdata.WaitForLSNResponse, error)
	// SetReadOnly makes the PostgreSQL instance read-only
	SetReadOnly(context.Context, *multipoolermanagerdata.SetReadOnlyRequest) (*multipoolermanagerdata.SetReadOnlyResponse, error)
	// IsReadOnly checks if PostgreSQL instance is in read-only mode
	IsReadOnly(context.Context, *multipoolermanagerdata.IsReadOnlyRequest) (*multipoolermanagerdata.IsReadOnlyResponse, error)
	// SetPrimaryConnInfo sets the primary connection info for a standby server
	SetPrimaryConnInfo(context.Context, *multipoolermanagerdata.SetPrimaryConnInfoRequest) (*multipoolermanagerdata.SetPrimaryConnInfoResponse, error)
	// StartReplication starts WAL replay on standby (calls pg_wal_replay_resume)
	StartReplication(context.Context, *multipoolermanagerdata.StartReplicationRequest) (*multipoolermanagerdata.StartReplicationResponse, error)
	// StopReplication stops WAL replay on standby (calls pg_wal_replay_pause)
	StopReplication(context.Context, *multipoolermanagerdata.StopReplicationRequest) (*multipoolermanagerdata.StopReplicationResponse, error)
	// ReplicationStatus gets the current replication status of the standby
	ReplicationStatus(context.Context, *multipoolermanagerdata.ReplicationStatusRequest) (*multipoolermanagerdata.ReplicationStatusResponse, error)
	// ResetReplication resets the standby's connection to its primary by clearing primary_conninfo,
	// reloading PostgreSQL configuration, and terminating the WAL receiver process. This effectively
	// disconnects the replica from the primary and prevents it from acknowledging commits, making it
	// unavailable for synchronous replication until reconfigured.
	ResetReplication(context.Context, *multipoolermanagerdata.ResetReplicationRequest) (*multipoolermanagerdata.ResetReplicationResponse, error)
	// ConfigureSynchronousReplication configures PostgreSQL synchronous replication settings
	// including synchronous_commit, synchronous_standby_names, and synchronization method (ANY/FIRST/quorum)
	ConfigureSynchronousReplication(context.Context, *multipoolermanagerdata.ConfigureSynchronousReplicationRequest) (*multipoolermanagerdata.ConfigureSynchronousReplicationResponse, error)
	// PrimaryStatus gets the status of the leader server
	PrimaryStatus(context.Context, *multipoolermanagerdata.PrimaryStatusRequest) (*multipoolermanagerdata.PrimaryStatusResponse, error)
	// PrimaryPosition gets the current LSN position of the leader
	PrimaryPosition(context.Context, *multipoolermanagerdata.PrimaryPositionRequest) (*multipoolermanagerdata.PrimaryPositionResponse, error)
	// StopReplicationAndGetStatus stops PostgreSQL replication and returns the status
	StopReplicationAndGetStatus(context.Context, *multipoolermanagerdata.StopReplicationAndGetStatusRequest) (*multipoolermanagerdata.StopReplicationAndGetStatusResponse, error)
	// ChangeType changes the pooler type (LEADER/FOLLOWER)
	ChangeType(context.Context, *multipoolermanagerdata.ChangeTypeRequest) (*multipoolermanagerdata.ChangeTypeResponse, error)
	// GetFollowers gets the list of follower servers
	GetFollowers(context.Context, *multipoolermanagerdata.GetFollowersRequest) (*multipoolermanagerdata.GetFollowersResponse, error)
	// Demote demotes the current leader server
	Demote(context.Context, *multipoolermanagerdata.DemoteRequest) (*multipoolermanagerdata.DemoteResponse, error)
	// UndoDemote undoes a demotion
	UndoDemote(context.Context, *multipoolermanagerdata.UndoDemoteRequest) (*multipoolermanagerdata.UndoDemoteResponse, error)
	// Promote promotes a replica to leader (Multigres-level operation)
	Promote(context.Context, *multipoolermanagerdata.PromoteRequest) (*multipoolermanagerdata.PromoteResponse, error)
	// Status gets the current status of the manager
	Status(context.Context, *multipoolermanagerdata.StatusRequest) (*multipoolermanagerdata.StatusResponse, error)
	mustEmbedUnimplementedMultiPoolerManagerServer()
}

// UnimplementedMultiPoolerManagerServer must be embedded to have forward compatible implementations.
type UnimplementedMultiPoolerManagerServer struct {
}

func (UnimplementedMultiPoolerManagerServer) WaitForLSN(context.Context, *multipoolermanagerdata.WaitForLSNRequest) (*multipoolermanagerdata.WaitForLSNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForLSN not implemented")
}
func (UnimplementedMultiPoolerManagerServer) SetReadOnly(context.Context, *multipoolermanagerdata.SetReadOnlyRequest) (*multipoolermanagerdata.SetReadOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetReadOnly not implemented")
}
func (UnimplementedMultiPoolerManagerServer) IsReadOnly(context.Context, *multipoolermanagerdata.IsReadOnlyRequest) (*multipoolermanagerdata.IsReadOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReadOnly not implemented")
}
func (UnimplementedMultiPoolerManagerServer) SetPrimaryConnInfo(context.Context, *multipoolermanagerdata.SetPrimaryConnInfoRequest) (*multipoolermanagerdata.SetPrimaryConnInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPrimaryConnInfo not implemented")
}
func (UnimplementedMultiPoolerManagerServer) StartReplication(context.Context, *multipoolermanagerdata.StartReplicationRequest) (*multipoolermanagerdata.StartReplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartReplication not implemented")
}
func (UnimplementedMultiPoolerManagerServer) StopReplication(context.Context, *multipoolermanagerdata.StopReplicationRequest) (*multipoolermanagerdata.StopReplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopReplication not implemented")
}
func (UnimplementedMultiPoolerManagerServer) ReplicationStatus(context.Context, *multipoolermanagerdata.ReplicationStatusRequest) (*multipoolermanagerdata.ReplicationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicationStatus not implemented")
}
func (UnimplementedMultiPoolerManagerServer) ResetReplication(context.Context, *multipoolermanagerdata.ResetReplicationRequest) (*multipoolermanagerdata.ResetReplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetReplication not implemented")
}
func (UnimplementedMultiPoolerManagerServer) ConfigureSynchronousReplication(context.Context, *multipoolermanagerdata.ConfigureSynchronousReplicationRequest) (*multipoolermanagerdata.ConfigureSynchronousReplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureSynchronousReplication not implemented")
}
func (UnimplementedMultiPoolerManagerServer) PrimaryStatus(context.Context, *multipoolermanagerdata.PrimaryStatusRequest) (*multipoolermanagerdata.PrimaryStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrimaryStatus not implemented")
}
func (UnimplementedMultiPoolerManagerServer) PrimaryPosition(context.Context, *multipoolermanagerdata.PrimaryPositionRequest) (*multipoolermanagerdata.PrimaryPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrimaryPosition not implemented")
}
func (UnimplementedMultiPoolerManagerServer) StopReplicationAndGetStatus(context.Context, *multipoolermanagerdata.StopReplicationAndGetStatusRequest) (*multipoolermanagerdata.StopReplicationAndGetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopReplicationAndGetStatus not implemented")
}
func (UnimplementedMultiPoolerManagerServer) ChangeType(context.Context, *multipoolermanagerdata.ChangeTypeRequest) (*multipoolermanagerdata.ChangeTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeType not implemented")
}
func (UnimplementedMultiPoolerManagerServer) GetFollowers(context.Context, *multipoolermanagerdata.GetFollowersRequest) (*multipoolermanagerdata.GetFollowersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowers not implemented")
}
func (UnimplementedMultiPoolerManagerServer) Demote(context.Context, *multipoolermanagerdata.DemoteRequest) (*multipoolermanagerdata.DemoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Demote not implemented")
}
func (UnimplementedMultiPoolerManagerServer) UndoDemote(context.Context, *multipoolermanagerdata.UndoDemoteRequest) (*multipoolermanagerdata.UndoDemoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndoDemote not implemented")
}
func (UnimplementedMultiPoolerManagerServer) Promote(context.Context, *multipoolermanagerdata.PromoteRequest) (*multipoolermanagerdata.PromoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Promote not implemented")
}
func (UnimplementedMultiPoolerManagerServer) Status(context.Context, *multipoolermanagerdata.StatusRequest) (*multipoolermanagerdata.StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedMultiPoolerManagerServer) mustEmbedUnimplementedMultiPoolerManagerServer() {}

// UnsafeMultiPoolerManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultiPoolerManagerServer will
// result in compilation errors.
type UnsafeMultiPoolerManagerServer interface {
	mustEmbedUnimplementedMultiPoolerManagerServer()
}

func RegisterMultiPoolerManagerServer(s grpc.ServiceRegistrar, srv MultiPoolerManagerServer) {
	s.RegisterService(&MultiPoolerManager_ServiceDesc, srv)
}

func _MultiPoolerManager_WaitForLSN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(multipoolermanagerdata.WaitForLSNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiPoolerManagerServer).WaitForLSN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiPoolerManager_WaitForLSN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiPoolerManagerServer).WaitForLSN(ctx, req.(*multipoolermanagerdata.WaitForLSNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiPoolerManager_SetReadOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(multipoolermanagerdata.SetReadOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiPoolerManagerServer).SetReadOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiPoolerManager_SetReadOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiPoolerManagerServer).SetReadOnly(ctx, req.(*multipoolermanagerdata.SetReadOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiPoolerManager_IsReadOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(multipoolermanagerdata.IsReadOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiPoolerManagerServer).IsReadOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiPoolerManager_IsReadOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiPoolerManagerServer).IsReadOnly(ctx, req.(*multipoolermanagerdata.IsReadOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiPoolerManager_SetPrimaryConnInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(multipoolermanagerdata.SetPrimaryConnInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiPoolerManagerServer).SetPrimaryConnInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiPoolerManager_SetPrimaryConnInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiPoolerManagerServer).SetPrimaryConnInfo(ctx, req.(*multipoolermanagerdata.SetPrimaryConnInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiPoolerManager_StartReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(multipoolermanagerdata.StartReplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiPoolerManagerServer).StartReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiPoolerManager_StartReplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiPoolerManagerServer).StartReplication(ctx, req.(*multipoolermanagerdata.StartReplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiPoolerManager_StopReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(multipoolermanagerdata.StopReplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiPoolerManagerServer).StopReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiPoolerManager_StopReplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiPoolerManagerServer).StopReplication(ctx, req.(*multipoolermanagerdata.StopReplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiPoolerManager_ReplicationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(multipoolermanagerdata.ReplicationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiPoolerManagerServer).ReplicationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiPoolerManager_ReplicationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiPoolerManagerServer).ReplicationStatus(ctx, req.(*multipoolermanagerdata.ReplicationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiPoolerManager_ResetReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(multipoolermanagerdata.ResetReplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiPoolerManagerServer).ResetReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiPoolerManager_ResetReplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiPoolerManagerServer).ResetReplication(ctx, req.(*multipoolermanagerdata.ResetReplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiPoolerManager_ConfigureSynchronousReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(multipoolermanagerdata.ConfigureSynchronousReplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiPoolerManagerServer).ConfigureSynchronousReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiPoolerManager_ConfigureSynchronousReplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiPoolerManagerServer).ConfigureSynchronousReplication(ctx, req.(*multipoolermanagerdata.ConfigureSynchronousReplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiPoolerManager_PrimaryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(multipoolermanagerdata.PrimaryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiPoolerManagerServer).PrimaryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiPoolerManager_PrimaryStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiPoolerManagerServer).PrimaryStatus(ctx, req.(*multipoolermanagerdata.PrimaryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiPoolerManager_PrimaryPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(multipoolermanagerdata.PrimaryPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiPoolerManagerServer).PrimaryPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiPoolerManager_PrimaryPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiPoolerManagerServer).PrimaryPosition(ctx, req.(*multipoolermanagerdata.PrimaryPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiPoolerManager_StopReplicationAndGetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(multipoolermanagerdata.StopReplicationAndGetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiPoolerManagerServer).StopReplicationAndGetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiPoolerManager_StopReplicationAndGetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiPoolerManagerServer).StopReplicationAndGetStatus(ctx, req.(*multipoolermanagerdata.StopReplicationAndGetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiPoolerManager_ChangeType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(multipoolermanagerdata.ChangeTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiPoolerManagerServer).ChangeType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiPoolerManager_ChangeType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiPoolerManagerServer).ChangeType(ctx, req.(*multipoolermanagerdata.ChangeTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiPoolerManager_GetFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(multipoolermanagerdata.GetFollowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiPoolerManagerServer).GetFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiPoolerManager_GetFollowers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiPoolerManagerServer).GetFollowers(ctx, req.(*multipoolermanagerdata.GetFollowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiPoolerManager_Demote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(multipoolermanagerdata.DemoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiPoolerManagerServer).Demote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiPoolerManager_Demote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiPoolerManagerServer).Demote(ctx, req.(*multipoolermanagerdata.DemoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiPoolerManager_UndoDemote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(multipoolermanagerdata.UndoDemoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiPoolerManagerServer).UndoDemote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiPoolerManager_UndoDemote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiPoolerManagerServer).UndoDemote(ctx, req.(*multipoolermanagerdata.UndoDemoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiPoolerManager_Promote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(multipoolermanagerdata.PromoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiPoolerManagerServer).Promote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiPoolerManager_Promote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiPoolerManagerServer).Promote(ctx, req.(*multipoolermanagerdata.PromoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiPoolerManager_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(multipoolermanagerdata.StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiPoolerManagerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiPoolerManager_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiPoolerManagerServer).Status(ctx, req.(*multipoolermanagerdata.StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MultiPoolerManager_ServiceDesc is the grpc.ServiceDesc for MultiPoolerManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MultiPoolerManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "multipoolermanager.MultiPoolerManager",
	HandlerType: (*MultiPoolerManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WaitForLSN",
			Handler:    _MultiPoolerManager_WaitForLSN_Handler,
		},
		{
			MethodName: "SetReadOnly",
			Handler:    _MultiPoolerManager_SetReadOnly_Handler,
		},
		{
			MethodName: "IsReadOnly",
			Handler:    _MultiPoolerManager_IsReadOnly_Handler,
		},
		{
			MethodName: "SetPrimaryConnInfo",
			Handler:    _MultiPoolerManager_SetPrimaryConnInfo_Handler,
		},
		{
			MethodName: "StartReplication",
			Handler:    _MultiPoolerManager_StartReplication_Handler,
		},
		{
			MethodName: "StopReplication",
			Handler:    _MultiPoolerManager_StopReplication_Handler,
		},
		{
			MethodName: "ReplicationStatus",
			Handler:    _MultiPoolerManager_ReplicationStatus_Handler,
		},
		{
			MethodName: "ResetReplication",
			Handler:    _MultiPoolerManager_ResetReplication_Handler,
		},
		{
			MethodName: "ConfigureSynchronousReplication",
			Handler:    _MultiPoolerManager_ConfigureSynchronousReplication_Handler,
		},
		{
			MethodName: "PrimaryStatus",
			Handler:    _MultiPoolerManager_PrimaryStatus_Handler,
		},
		{
			MethodName: "PrimaryPosition",
			Handler:    _MultiPoolerManager_PrimaryPosition_Handler,
		},
		{
			MethodName: "StopReplicationAndGetStatus",
			Handler:    _MultiPoolerManager_StopReplicationAndGetStatus_Handler,
		},
		{
			MethodName: "ChangeType",
			Handler:    _MultiPoolerManager_ChangeType_Handler,
		},
		{
			MethodName: "GetFollowers",
			Handler:    _MultiPoolerManager_GetFollowers_Handler,
		},
		{
			MethodName: "Demote",
			Handler:    _MultiPoolerManager_Demote_Handler,
		},
		{
			MethodName: "UndoDemote",
			Handler:    _MultiPoolerManager_UndoDemote_Handler,
		},
		{
			MethodName: "Promote",
			Handler:    _MultiPoolerManager_Promote_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _MultiPoolerManager_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "multipoolermanagerservice.proto",
}
