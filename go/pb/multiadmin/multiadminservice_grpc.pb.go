// Copyright 2025 Supabase, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: multiadminservice.proto

package multiadmin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MultiAdminService_GetCell_FullMethodName          = "/multiadmin.MultiAdminService/GetCell"
	MultiAdminService_GetDatabase_FullMethodName      = "/multiadmin.MultiAdminService/GetDatabase"
	MultiAdminService_GetCellNames_FullMethodName     = "/multiadmin.MultiAdminService/GetCellNames"
	MultiAdminService_GetDatabaseNames_FullMethodName = "/multiadmin.MultiAdminService/GetDatabaseNames"
	MultiAdminService_GetGateways_FullMethodName      = "/multiadmin.MultiAdminService/GetGateways"
	MultiAdminService_GetPoolers_FullMethodName       = "/multiadmin.MultiAdminService/GetPoolers"
	MultiAdminService_GetOrchs_FullMethodName         = "/multiadmin.MultiAdminService/GetOrchs"
)

// MultiAdminServiceClient is the client API for MultiAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultiAdminServiceClient interface {
	// GetCell retrieves information about a specific cell
	GetCell(ctx context.Context, in *GetCellRequest, opts ...grpc.CallOption) (*GetCellResponse, error)
	// GetDatabase retrieves information about a specific database
	GetDatabase(ctx context.Context, in *GetDatabaseRequest, opts ...grpc.CallOption) (*GetDatabaseResponse, error)
	// GetCellNames retrieves all cell names in the cluster
	GetCellNames(ctx context.Context, in *GetCellNamesRequest, opts ...grpc.CallOption) (*GetCellNamesResponse, error)
	// GetDatabaseNames retrieves all database names in the cluster
	GetDatabaseNames(ctx context.Context, in *GetDatabaseNamesRequest, opts ...grpc.CallOption) (*GetDatabaseNamesResponse, error)
	// GetGateways retrieves gateways filtered by cells
	GetGateways(ctx context.Context, in *GetGatewaysRequest, opts ...grpc.CallOption) (*GetGatewaysResponse, error)
	// GetPoolers retrieves poolers filtered by cells and/or database
	GetPoolers(ctx context.Context, in *GetPoolersRequest, opts ...grpc.CallOption) (*GetPoolersResponse, error)
	// GetOrchs retrieves orchestrators filtered by cells
	GetOrchs(ctx context.Context, in *GetOrchsRequest, opts ...grpc.CallOption) (*GetOrchsResponse, error)
}

type multiAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMultiAdminServiceClient(cc grpc.ClientConnInterface) MultiAdminServiceClient {
	return &multiAdminServiceClient{cc}
}

func (c *multiAdminServiceClient) GetCell(ctx context.Context, in *GetCellRequest, opts ...grpc.CallOption) (*GetCellResponse, error) {
	out := new(GetCellResponse)
	err := c.cc.Invoke(ctx, MultiAdminService_GetCell_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiAdminServiceClient) GetDatabase(ctx context.Context, in *GetDatabaseRequest, opts ...grpc.CallOption) (*GetDatabaseResponse, error) {
	out := new(GetDatabaseResponse)
	err := c.cc.Invoke(ctx, MultiAdminService_GetDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiAdminServiceClient) GetCellNames(ctx context.Context, in *GetCellNamesRequest, opts ...grpc.CallOption) (*GetCellNamesResponse, error) {
	out := new(GetCellNamesResponse)
	err := c.cc.Invoke(ctx, MultiAdminService_GetCellNames_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiAdminServiceClient) GetDatabaseNames(ctx context.Context, in *GetDatabaseNamesRequest, opts ...grpc.CallOption) (*GetDatabaseNamesResponse, error) {
	out := new(GetDatabaseNamesResponse)
	err := c.cc.Invoke(ctx, MultiAdminService_GetDatabaseNames_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiAdminServiceClient) GetGateways(ctx context.Context, in *GetGatewaysRequest, opts ...grpc.CallOption) (*GetGatewaysResponse, error) {
	out := new(GetGatewaysResponse)
	err := c.cc.Invoke(ctx, MultiAdminService_GetGateways_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiAdminServiceClient) GetPoolers(ctx context.Context, in *GetPoolersRequest, opts ...grpc.CallOption) (*GetPoolersResponse, error) {
	out := new(GetPoolersResponse)
	err := c.cc.Invoke(ctx, MultiAdminService_GetPoolers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiAdminServiceClient) GetOrchs(ctx context.Context, in *GetOrchsRequest, opts ...grpc.CallOption) (*GetOrchsResponse, error) {
	out := new(GetOrchsResponse)
	err := c.cc.Invoke(ctx, MultiAdminService_GetOrchs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultiAdminServiceServer is the server API for MultiAdminService service.
// All implementations must embed UnimplementedMultiAdminServiceServer
// for forward compatibility
type MultiAdminServiceServer interface {
	// GetCell retrieves information about a specific cell
	GetCell(context.Context, *GetCellRequest) (*GetCellResponse, error)
	// GetDatabase retrieves information about a specific database
	GetDatabase(context.Context, *GetDatabaseRequest) (*GetDatabaseResponse, error)
	// GetCellNames retrieves all cell names in the cluster
	GetCellNames(context.Context, *GetCellNamesRequest) (*GetCellNamesResponse, error)
	// GetDatabaseNames retrieves all database names in the cluster
	GetDatabaseNames(context.Context, *GetDatabaseNamesRequest) (*GetDatabaseNamesResponse, error)
	// GetGateways retrieves gateways filtered by cells
	GetGateways(context.Context, *GetGatewaysRequest) (*GetGatewaysResponse, error)
	// GetPoolers retrieves poolers filtered by cells and/or database
	GetPoolers(context.Context, *GetPoolersRequest) (*GetPoolersResponse, error)
	// GetOrchs retrieves orchestrators filtered by cells
	GetOrchs(context.Context, *GetOrchsRequest) (*GetOrchsResponse, error)
	mustEmbedUnimplementedMultiAdminServiceServer()
}

// UnimplementedMultiAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMultiAdminServiceServer struct {
}

func (UnimplementedMultiAdminServiceServer) GetCell(context.Context, *GetCellRequest) (*GetCellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCell not implemented")
}
func (UnimplementedMultiAdminServiceServer) GetDatabase(context.Context, *GetDatabaseRequest) (*GetDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatabase not implemented")
}
func (UnimplementedMultiAdminServiceServer) GetCellNames(context.Context, *GetCellNamesRequest) (*GetCellNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCellNames not implemented")
}
func (UnimplementedMultiAdminServiceServer) GetDatabaseNames(context.Context, *GetDatabaseNamesRequest) (*GetDatabaseNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatabaseNames not implemented")
}
func (UnimplementedMultiAdminServiceServer) GetGateways(context.Context, *GetGatewaysRequest) (*GetGatewaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGateways not implemented")
}
func (UnimplementedMultiAdminServiceServer) GetPoolers(context.Context, *GetPoolersRequest) (*GetPoolersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoolers not implemented")
}
func (UnimplementedMultiAdminServiceServer) GetOrchs(context.Context, *GetOrchsRequest) (*GetOrchsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrchs not implemented")
}
func (UnimplementedMultiAdminServiceServer) mustEmbedUnimplementedMultiAdminServiceServer() {}

// UnsafeMultiAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultiAdminServiceServer will
// result in compilation errors.
type UnsafeMultiAdminServiceServer interface {
	mustEmbedUnimplementedMultiAdminServiceServer()
}

func RegisterMultiAdminServiceServer(s grpc.ServiceRegistrar, srv MultiAdminServiceServer) {
	s.RegisterService(&MultiAdminService_ServiceDesc, srv)
}

func _MultiAdminService_GetCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiAdminServiceServer).GetCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiAdminService_GetCell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiAdminServiceServer).GetCell(ctx, req.(*GetCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiAdminService_GetDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiAdminServiceServer).GetDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiAdminService_GetDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiAdminServiceServer).GetDatabase(ctx, req.(*GetDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiAdminService_GetCellNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCellNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiAdminServiceServer).GetCellNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiAdminService_GetCellNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiAdminServiceServer).GetCellNames(ctx, req.(*GetCellNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiAdminService_GetDatabaseNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatabaseNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiAdminServiceServer).GetDatabaseNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiAdminService_GetDatabaseNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiAdminServiceServer).GetDatabaseNames(ctx, req.(*GetDatabaseNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiAdminService_GetGateways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiAdminServiceServer).GetGateways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiAdminService_GetGateways_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiAdminServiceServer).GetGateways(ctx, req.(*GetGatewaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiAdminService_GetPoolers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPoolersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiAdminServiceServer).GetPoolers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiAdminService_GetPoolers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiAdminServiceServer).GetPoolers(ctx, req.(*GetPoolersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiAdminService_GetOrchs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrchsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiAdminServiceServer).GetOrchs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiAdminService_GetOrchs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiAdminServiceServer).GetOrchs(ctx, req.(*GetOrchsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MultiAdminService_ServiceDesc is the grpc.ServiceDesc for MultiAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MultiAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "multiadmin.MultiAdminService",
	HandlerType: (*MultiAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCell",
			Handler:    _MultiAdminService_GetCell_Handler,
		},
		{
			MethodName: "GetDatabase",
			Handler:    _MultiAdminService_GetDatabase_Handler,
		},
		{
			MethodName: "GetCellNames",
			Handler:    _MultiAdminService_GetCellNames_Handler,
		},
		{
			MethodName: "GetDatabaseNames",
			Handler:    _MultiAdminService_GetDatabaseNames_Handler,
		},
		{
			MethodName: "GetGateways",
			Handler:    _MultiAdminService_GetGateways_Handler,
		},
		{
			MethodName: "GetPoolers",
			Handler:    _MultiAdminService_GetPoolers_Handler,
		},
		{
			MethodName: "GetOrchs",
			Handler:    _MultiAdminService_GetOrchs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "multiadminservice.proto",
}
