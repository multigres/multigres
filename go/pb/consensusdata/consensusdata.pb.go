// Copyright 2025 Supabase, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v4.25.1
// source: consensusdata.proto

package consensusdata

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// WAL position for tracking replication state
type WALPosition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// For primary: current write position from pg_current_wal_lsn()
	// For standby: empty (use last_receive_lsn and last_replay_lsn instead)
	CurrentLsn string `protobuf:"bytes,1,opt,name=current_lsn,json=currentLsn,proto3" json:"current_lsn,omitempty"`
	// For standby: last WAL position received from pg_last_wal_receive_lsn()
	// For primary: empty
	LastReceiveLsn string `protobuf:"bytes,2,opt,name=last_receive_lsn,json=lastReceiveLsn,proto3" json:"last_receive_lsn,omitempty"`
	// For standby: last WAL position replayed from pg_last_wal_replay_lsn()
	// For primary: empty
	LastReplayLsn string `protobuf:"bytes,3,opt,name=last_replay_lsn,json=lastReplayLsn,proto3" json:"last_replay_lsn,omitempty"`
	// Timestamp when this position was recorded
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WALPosition) Reset() {
	*x = WALPosition{}
	mi := &file_consensusdata_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WALPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WALPosition) ProtoMessage() {}

func (x *WALPosition) ProtoReflect() protoreflect.Message {
	mi := &file_consensusdata_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WALPosition.ProtoReflect.Descriptor instead.
func (*WALPosition) Descriptor() ([]byte, []int) {
	return file_consensusdata_proto_rawDescGZIP(), []int{0}
}

func (x *WALPosition) GetCurrentLsn() string {
	if x != nil {
		return x.CurrentLsn
	}
	return ""
}

func (x *WALPosition) GetLastReceiveLsn() string {
	if x != nil {
		return x.LastReceiveLsn
	}
	return ""
}

func (x *WALPosition) GetLastReplayLsn() string {
	if x != nil {
		return x.LastReplayLsn
	}
	return ""
}

func (x *WALPosition) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// BeginTerm is sent by coordinators during leader appointments
type BeginTermRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Term of the candidate
	Term int64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// ID of the candidate for appointment
	CandidateId string `protobuf:"bytes,2,opt,name=candidate_id,json=candidateId,proto3" json:"candidate_id,omitempty"`
	// Shard ID for this appointment
	ShardId string `protobuf:"bytes,3,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	// Version of the durability policy
	PolicyVersion int64 `protobuf:"varint,4,opt,name=policy_version,json=policyVersion,proto3" json:"policy_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BeginTermRequest) Reset() {
	*x = BeginTermRequest{}
	mi := &file_consensusdata_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeginTermRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginTermRequest) ProtoMessage() {}

func (x *BeginTermRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensusdata_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginTermRequest.ProtoReflect.Descriptor instead.
func (*BeginTermRequest) Descriptor() ([]byte, []int) {
	return file_consensusdata_proto_rawDescGZIP(), []int{1}
}

func (x *BeginTermRequest) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *BeginTermRequest) GetCandidateId() string {
	if x != nil {
		return x.CandidateId
	}
	return ""
}

func (x *BeginTermRequest) GetShardId() string {
	if x != nil {
		return x.ShardId
	}
	return ""
}

func (x *BeginTermRequest) GetPolicyVersion() int64 {
	if x != nil {
		return x.PolicyVersion
	}
	return 0
}

type BeginTermResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current term, for candidate to update itself
	Term int64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// True if the term was accepted
	Accepted bool `protobuf:"varint,2,opt,name=accepted,proto3" json:"accepted,omitempty"`
	// ID of the responding pooler
	PoolerId      string `protobuf:"bytes,3,opt,name=pooler_id,json=poolerId,proto3" json:"pooler_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BeginTermResponse) Reset() {
	*x = BeginTermResponse{}
	mi := &file_consensusdata_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeginTermResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginTermResponse) ProtoMessage() {}

func (x *BeginTermResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensusdata_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginTermResponse.ProtoReflect.Descriptor instead.
func (*BeginTermResponse) Descriptor() ([]byte, []int) {
	return file_consensusdata_proto_rawDescGZIP(), []int{2}
}

func (x *BeginTermResponse) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *BeginTermResponse) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

func (x *BeginTermResponse) GetPoolerId() string {
	if x != nil {
		return x.PoolerId
	}
	return ""
}

// Status returns the current status of a node
type StatusRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional term to include in response
	Term int64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// Shard ID to query status for
	ShardId       string `protobuf:"bytes,2,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	mi := &file_consensusdata_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensusdata_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_consensusdata_proto_rawDescGZIP(), []int{3}
}

func (x *StatusRequest) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *StatusRequest) GetShardId() string {
	if x != nil {
		return x.ShardId
	}
	return ""
}

type StatusResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Pooler ID
	PoolerId string `protobuf:"bytes,1,opt,name=pooler_id,json=poolerId,proto3" json:"pooler_id,omitempty"`
	// Current term from local file
	CurrentTerm int64 `protobuf:"varint,2,opt,name=current_term,json=currentTerm,proto3" json:"current_term,omitempty"`
	// Last successful leader term from Postgres
	LeaderTerm int64 `protobuf:"varint,3,opt,name=leader_term,json=leaderTerm,proto3" json:"leader_term,omitempty"`
	// Current WAL position
	WalPosition *WALPosition `protobuf:"bytes,4,opt,name=wal_position,json=walPosition,proto3" json:"wal_position,omitempty"`
	// Whether Postgres is healthy and reachable
	IsHealthy bool `protobuf:"varint,5,opt,name=is_healthy,json=isHealthy,proto3" json:"is_healthy,omitempty"`
	// Whether this pooler is eligible to be a leader
	IsEligible bool `protobuf:"varint,6,opt,name=is_eligible,json=isEligible,proto3" json:"is_eligible,omitempty"`
	// Cell identifier
	Cell string `protobuf:"bytes,7,opt,name=cell,proto3" json:"cell,omitempty"`
	// Current role (primary/replica)
	Role          string `protobuf:"bytes,9,opt,name=role,proto3" json:"role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	mi := &file_consensusdata_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensusdata_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_consensusdata_proto_rawDescGZIP(), []int{4}
}

func (x *StatusResponse) GetPoolerId() string {
	if x != nil {
		return x.PoolerId
	}
	return ""
}

func (x *StatusResponse) GetCurrentTerm() int64 {
	if x != nil {
		return x.CurrentTerm
	}
	return 0
}

func (x *StatusResponse) GetLeaderTerm() int64 {
	if x != nil {
		return x.LeaderTerm
	}
	return 0
}

func (x *StatusResponse) GetWalPosition() *WALPosition {
	if x != nil {
		return x.WalPosition
	}
	return nil
}

func (x *StatusResponse) GetIsHealthy() bool {
	if x != nil {
		return x.IsHealthy
	}
	return false
}

func (x *StatusResponse) GetIsEligible() bool {
	if x != nil {
		return x.IsEligible
	}
	return false
}

func (x *StatusResponse) GetCell() string {
	if x != nil {
		return x.Cell
	}
	return ""
}

func (x *StatusResponse) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

// GetLeadershipView returns leadership information from the heartbeat table
type LeadershipViewRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Shard ID to query
	ShardId       string `protobuf:"bytes,1,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeadershipViewRequest) Reset() {
	*x = LeadershipViewRequest{}
	mi := &file_consensusdata_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeadershipViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeadershipViewRequest) ProtoMessage() {}

func (x *LeadershipViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensusdata_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeadershipViewRequest.ProtoReflect.Descriptor instead.
func (*LeadershipViewRequest) Descriptor() ([]byte, []int) {
	return file_consensusdata_proto_rawDescGZIP(), []int{5}
}

func (x *LeadershipViewRequest) GetShardId() string {
	if x != nil {
		return x.ShardId
	}
	return ""
}

type LeadershipViewResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the current leader
	LeaderId string `protobuf:"bytes,1,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
	// Leader's consensus term
	LeaderTerm int64 `protobuf:"varint,2,opt,name=leader_term,json=leaderTerm,proto3" json:"leader_term,omitempty"`
	// Last heartbeat timestamp
	LastHeartbeat *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_heartbeat,json=lastHeartbeat,proto3" json:"last_heartbeat,omitempty"`
	// Calculated replication lag in nanoseconds
	ReplicationLagNs int64 `protobuf:"varint,5,opt,name=replication_lag_ns,json=replicationLagNs,proto3" json:"replication_lag_ns,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *LeadershipViewResponse) Reset() {
	*x = LeadershipViewResponse{}
	mi := &file_consensusdata_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeadershipViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeadershipViewResponse) ProtoMessage() {}

func (x *LeadershipViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensusdata_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeadershipViewResponse.ProtoReflect.Descriptor instead.
func (*LeadershipViewResponse) Descriptor() ([]byte, []int) {
	return file_consensusdata_proto_rawDescGZIP(), []int{6}
}

func (x *LeadershipViewResponse) GetLeaderId() string {
	if x != nil {
		return x.LeaderId
	}
	return ""
}

func (x *LeadershipViewResponse) GetLeaderTerm() int64 {
	if x != nil {
		return x.LeaderTerm
	}
	return 0
}

func (x *LeadershipViewResponse) GetLastHeartbeat() *timestamppb.Timestamp {
	if x != nil {
		return x.LastHeartbeat
	}
	return nil
}

func (x *LeadershipViewResponse) GetReplicationLagNs() int64 {
	if x != nil {
		return x.ReplicationLagNs
	}
	return 0
}

// GetWALPosition returns the current WAL position
type GetWALPositionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWALPositionRequest) Reset() {
	*x = GetWALPositionRequest{}
	mi := &file_consensusdata_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWALPositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWALPositionRequest) ProtoMessage() {}

func (x *GetWALPositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensusdata_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWALPositionRequest.ProtoReflect.Descriptor instead.
func (*GetWALPositionRequest) Descriptor() ([]byte, []int) {
	return file_consensusdata_proto_rawDescGZIP(), []int{7}
}

type GetWALPositionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current WAL position
	WalPosition   *WALPosition `protobuf:"bytes,1,opt,name=wal_position,json=walPosition,proto3" json:"wal_position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWALPositionResponse) Reset() {
	*x = GetWALPositionResponse{}
	mi := &file_consensusdata_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWALPositionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWALPositionResponse) ProtoMessage() {}

func (x *GetWALPositionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensusdata_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWALPositionResponse.ProtoReflect.Descriptor instead.
func (*GetWALPositionResponse) Descriptor() ([]byte, []int) {
	return file_consensusdata_proto_rawDescGZIP(), []int{8}
}

func (x *GetWALPositionResponse) GetWalPosition() *WALPosition {
	if x != nil {
		return x.WalPosition
	}
	return nil
}

// CanReachPrimary checks if this node can reach the primary
type CanReachPrimaryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Primary host
	PrimaryHost string `protobuf:"bytes,1,opt,name=primary_host,json=primaryHost,proto3" json:"primary_host,omitempty"`
	// Primary port
	PrimaryPort   int32 `protobuf:"varint,2,opt,name=primary_port,json=primaryPort,proto3" json:"primary_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CanReachPrimaryRequest) Reset() {
	*x = CanReachPrimaryRequest{}
	mi := &file_consensusdata_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CanReachPrimaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanReachPrimaryRequest) ProtoMessage() {}

func (x *CanReachPrimaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensusdata_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanReachPrimaryRequest.ProtoReflect.Descriptor instead.
func (*CanReachPrimaryRequest) Descriptor() ([]byte, []int) {
	return file_consensusdata_proto_rawDescGZIP(), []int{9}
}

func (x *CanReachPrimaryRequest) GetPrimaryHost() string {
	if x != nil {
		return x.PrimaryHost
	}
	return ""
}

func (x *CanReachPrimaryRequest) GetPrimaryPort() int32 {
	if x != nil {
		return x.PrimaryPort
	}
	return 0
}

type CanReachPrimaryResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether primary is reachable
	Reachable bool `protobuf:"varint,1,opt,name=reachable,proto3" json:"reachable,omitempty"`
	// Error message if not reachable
	ErrorMessage  string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CanReachPrimaryResponse) Reset() {
	*x = CanReachPrimaryResponse{}
	mi := &file_consensusdata_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CanReachPrimaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanReachPrimaryResponse) ProtoMessage() {}

func (x *CanReachPrimaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensusdata_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanReachPrimaryResponse.ProtoReflect.Descriptor instead.
func (*CanReachPrimaryResponse) Descriptor() ([]byte, []int) {
	return file_consensusdata_proto_rawDescGZIP(), []int{10}
}

func (x *CanReachPrimaryResponse) GetReachable() bool {
	if x != nil {
		return x.Reachable
	}
	return false
}

func (x *CanReachPrimaryResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_consensusdata_proto protoreflect.FileDescriptor

const file_consensusdata_proto_rawDesc = "" +
	"\n" +
	"\x13consensusdata.proto\x12\rconsensusdata\x1a\x1fgoogle/protobuf/timestamp.proto\"\xba\x01\n" +
	"\vWALPosition\x12\x1f\n" +
	"\vcurrent_lsn\x18\x01 \x01(\tR\n" +
	"currentLsn\x12(\n" +
	"\x10last_receive_lsn\x18\x02 \x01(\tR\x0elastReceiveLsn\x12&\n" +
	"\x0flast_replay_lsn\x18\x03 \x01(\tR\rlastReplayLsn\x128\n" +
	"\ttimestamp\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\"\x8b\x01\n" +
	"\x10BeginTermRequest\x12\x12\n" +
	"\x04term\x18\x01 \x01(\x03R\x04term\x12!\n" +
	"\fcandidate_id\x18\x02 \x01(\tR\vcandidateId\x12\x19\n" +
	"\bshard_id\x18\x03 \x01(\tR\ashardId\x12%\n" +
	"\x0epolicy_version\x18\x04 \x01(\x03R\rpolicyVersion\"`\n" +
	"\x11BeginTermResponse\x12\x12\n" +
	"\x04term\x18\x01 \x01(\x03R\x04term\x12\x1a\n" +
	"\baccepted\x18\x02 \x01(\bR\baccepted\x12\x1b\n" +
	"\tpooler_id\x18\x03 \x01(\tR\bpoolerId\">\n" +
	"\rStatusRequest\x12\x12\n" +
	"\x04term\x18\x01 \x01(\x03R\x04term\x12\x19\n" +
	"\bshard_id\x18\x02 \x01(\tR\ashardId\"\x98\x02\n" +
	"\x0eStatusResponse\x12\x1b\n" +
	"\tpooler_id\x18\x01 \x01(\tR\bpoolerId\x12!\n" +
	"\fcurrent_term\x18\x02 \x01(\x03R\vcurrentTerm\x12\x1f\n" +
	"\vleader_term\x18\x03 \x01(\x03R\n" +
	"leaderTerm\x12=\n" +
	"\fwal_position\x18\x04 \x01(\v2\x1a.consensusdata.WALPositionR\vwalPosition\x12\x1d\n" +
	"\n" +
	"is_healthy\x18\x05 \x01(\bR\tisHealthy\x12\x1f\n" +
	"\vis_eligible\x18\x06 \x01(\bR\n" +
	"isEligible\x12\x12\n" +
	"\x04cell\x18\a \x01(\tR\x04cell\x12\x12\n" +
	"\x04role\x18\t \x01(\tR\x04role\"2\n" +
	"\x15LeadershipViewRequest\x12\x19\n" +
	"\bshard_id\x18\x01 \x01(\tR\ashardId\"\xc7\x01\n" +
	"\x16LeadershipViewResponse\x12\x1b\n" +
	"\tleader_id\x18\x01 \x01(\tR\bleaderId\x12\x1f\n" +
	"\vleader_term\x18\x02 \x01(\x03R\n" +
	"leaderTerm\x12A\n" +
	"\x0elast_heartbeat\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\rlastHeartbeat\x12,\n" +
	"\x12replication_lag_ns\x18\x05 \x01(\x03R\x10replicationLagNs\"\x17\n" +
	"\x15GetWALPositionRequest\"W\n" +
	"\x16GetWALPositionResponse\x12=\n" +
	"\fwal_position\x18\x01 \x01(\v2\x1a.consensusdata.WALPositionR\vwalPosition\"^\n" +
	"\x16CanReachPrimaryRequest\x12!\n" +
	"\fprimary_host\x18\x01 \x01(\tR\vprimaryHost\x12!\n" +
	"\fprimary_port\x18\x02 \x01(\x05R\vprimaryPort\"\\\n" +
	"\x17CanReachPrimaryResponse\x12\x1c\n" +
	"\treachable\x18\x01 \x01(\bR\treachable\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessageB4Z2github.com/multigres/multigres/go/pb/consensusdatab\x06proto3"

var (
	file_consensusdata_proto_rawDescOnce sync.Once
	file_consensusdata_proto_rawDescData []byte
)

func file_consensusdata_proto_rawDescGZIP() []byte {
	file_consensusdata_proto_rawDescOnce.Do(func() {
		file_consensusdata_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_consensusdata_proto_rawDesc), len(file_consensusdata_proto_rawDesc)))
	})
	return file_consensusdata_proto_rawDescData
}

var file_consensusdata_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_consensusdata_proto_goTypes = []any{
	(*WALPosition)(nil),             // 0: consensusdata.WALPosition
	(*BeginTermRequest)(nil),        // 1: consensusdata.BeginTermRequest
	(*BeginTermResponse)(nil),       // 2: consensusdata.BeginTermResponse
	(*StatusRequest)(nil),           // 3: consensusdata.StatusRequest
	(*StatusResponse)(nil),          // 4: consensusdata.StatusResponse
	(*LeadershipViewRequest)(nil),   // 5: consensusdata.LeadershipViewRequest
	(*LeadershipViewResponse)(nil),  // 6: consensusdata.LeadershipViewResponse
	(*GetWALPositionRequest)(nil),   // 7: consensusdata.GetWALPositionRequest
	(*GetWALPositionResponse)(nil),  // 8: consensusdata.GetWALPositionResponse
	(*CanReachPrimaryRequest)(nil),  // 9: consensusdata.CanReachPrimaryRequest
	(*CanReachPrimaryResponse)(nil), // 10: consensusdata.CanReachPrimaryResponse
	(*timestamppb.Timestamp)(nil),   // 11: google.protobuf.Timestamp
}
var file_consensusdata_proto_depIdxs = []int32{
	11, // 0: consensusdata.WALPosition.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 1: consensusdata.StatusResponse.wal_position:type_name -> consensusdata.WALPosition
	11, // 2: consensusdata.LeadershipViewResponse.last_heartbeat:type_name -> google.protobuf.Timestamp
	0,  // 3: consensusdata.GetWALPositionResponse.wal_position:type_name -> consensusdata.WALPosition
	4,  // [4:4] is the sub-list for method output_type
	4,  // [4:4] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_consensusdata_proto_init() }
func file_consensusdata_proto_init() {
	if File_consensusdata_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_consensusdata_proto_rawDesc), len(file_consensusdata_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_consensusdata_proto_goTypes,
		DependencyIndexes: file_consensusdata_proto_depIdxs,
		MessageInfos:      file_consensusdata_proto_msgTypes,
	}.Build()
	File_consensusdata_proto = out.File
	file_consensusdata_proto_goTypes = nil
	file_consensusdata_proto_depIdxs = nil
}
