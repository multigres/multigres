//
//Copyright 2025 Supabase, Inc.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file contains the RPC service definition for multipooler.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v4.25.1
// source: multipoolerservice.proto

package multipoolerservice

import (
	mtrpc "github.com/multigres/multigres/go/pb/mtrpc"
	query "github.com/multigres/multigres/go/pb/query"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ExecuteQueryRequest represents a request to execute a SQL query
type ExecuteQueryRequest struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Query   []byte                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	MaxRows uint64                 `protobuf:"varint,2,opt,name=max_rows,json=maxRows,proto3" json:"max_rows,omitempty"`
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId      *mtrpc.CallerID `protobuf:"bytes,3,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteQueryRequest) Reset() {
	*x = ExecuteQueryRequest{}
	mi := &file_multipoolerservice_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteQueryRequest) ProtoMessage() {}

func (x *ExecuteQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolerservice_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteQueryRequest.ProtoReflect.Descriptor instead.
func (*ExecuteQueryRequest) Descriptor() ([]byte, []int) {
	return file_multipoolerservice_proto_rawDescGZIP(), []int{0}
}

func (x *ExecuteQueryRequest) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ExecuteQueryRequest) GetMaxRows() uint64 {
	if x != nil {
		return x.MaxRows
	}
	return 0
}

func (x *ExecuteQueryRequest) GetCallerId() *mtrpc.CallerID {
	if x != nil {
		return x.CallerId
	}
	return nil
}

// ExecuteQueryResponse represents the response from executing a SQL query
type ExecuteQueryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *query.QueryResult     `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteQueryResponse) Reset() {
	*x = ExecuteQueryResponse{}
	mi := &file_multipoolerservice_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteQueryResponse) ProtoMessage() {}

func (x *ExecuteQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolerservice_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteQueryResponse.ProtoReflect.Descriptor instead.
func (*ExecuteQueryResponse) Descriptor() ([]byte, []int) {
	return file_multipoolerservice_proto_rawDescGZIP(), []int{1}
}

func (x *ExecuteQueryResponse) GetResult() *query.QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_multipoolerservice_proto protoreflect.FileDescriptor

const file_multipoolerservice_proto_rawDesc = "" +
	"\n" +
	"\x18multipoolerservice.proto\x12\x12multipoolerservice\x1a\vmtrpc.proto\x1a\vquery.proto\"t\n" +
	"\x13ExecuteQueryRequest\x12\x14\n" +
	"\x05query\x18\x01 \x01(\fR\x05query\x12\x19\n" +
	"\bmax_rows\x18\x02 \x01(\x04R\amaxRows\x12,\n" +
	"\tcaller_id\x18\x03 \x01(\v2\x0f.mtrpc.CallerIDR\bcallerId\"B\n" +
	"\x14ExecuteQueryResponse\x12*\n" +
	"\x06result\x18\x01 \x01(\v2\x12.query.QueryResultR\x06result2w\n" +
	"\x12MultiPoolerService\x12a\n" +
	"\fExecuteQuery\x12'.multipoolerservice.ExecuteQueryRequest\x1a(.multipoolerservice.ExecuteQueryResponseB9Z7github.com/multigres/multigres/go/pb/multipoolerserviceb\x06proto3"

var (
	file_multipoolerservice_proto_rawDescOnce sync.Once
	file_multipoolerservice_proto_rawDescData []byte
)

func file_multipoolerservice_proto_rawDescGZIP() []byte {
	file_multipoolerservice_proto_rawDescOnce.Do(func() {
		file_multipoolerservice_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_multipoolerservice_proto_rawDesc), len(file_multipoolerservice_proto_rawDesc)))
	})
	return file_multipoolerservice_proto_rawDescData
}

var file_multipoolerservice_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_multipoolerservice_proto_goTypes = []any{
	(*ExecuteQueryRequest)(nil),  // 0: multipoolerservice.ExecuteQueryRequest
	(*ExecuteQueryResponse)(nil), // 1: multipoolerservice.ExecuteQueryResponse
	(*mtrpc.CallerID)(nil),       // 2: mtrpc.CallerID
	(*query.QueryResult)(nil),    // 3: query.QueryResult
}
var file_multipoolerservice_proto_depIdxs = []int32{
	2, // 0: multipoolerservice.ExecuteQueryRequest.caller_id:type_name -> mtrpc.CallerID
	3, // 1: multipoolerservice.ExecuteQueryResponse.result:type_name -> query.QueryResult
	0, // 2: multipoolerservice.MultiPoolerService.ExecuteQuery:input_type -> multipoolerservice.ExecuteQueryRequest
	1, // 3: multipoolerservice.MultiPoolerService.ExecuteQuery:output_type -> multipoolerservice.ExecuteQueryResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_multipoolerservice_proto_init() }
func file_multipoolerservice_proto_init() {
	if File_multipoolerservice_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_multipoolerservice_proto_rawDesc), len(file_multipoolerservice_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_multipoolerservice_proto_goTypes,
		DependencyIndexes: file_multipoolerservice_proto_depIdxs,
		MessageInfos:      file_multipoolerservice_proto_msgTypes,
	}.Build()
	File_multipoolerservice_proto = out.File
	file_multipoolerservice_proto_goTypes = nil
	file_multipoolerservice_proto_depIdxs = nil
}
