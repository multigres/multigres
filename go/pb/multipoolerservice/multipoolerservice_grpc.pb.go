//
//Copyright 2025 Supabase, Inc.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file contains the RPC service definition for multipooler.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: multipoolerservice.proto

package multipoolerservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MultiPoolerService_ExecuteQuery_FullMethodName = "/multipoolerservice.MultiPoolerService/ExecuteQuery"
)

// MultiPoolerServiceClient is the client API for MultiPoolerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultiPoolerServiceClient interface {
	// ExecuteQuery executes a SQL query and returns the result
	ExecuteQuery(ctx context.Context, in *ExecuteQueryRequest, opts ...grpc.CallOption) (*ExecuteQueryResponse, error)
}

type multiPoolerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMultiPoolerServiceClient(cc grpc.ClientConnInterface) MultiPoolerServiceClient {
	return &multiPoolerServiceClient{cc}
}

func (c *multiPoolerServiceClient) ExecuteQuery(ctx context.Context, in *ExecuteQueryRequest, opts ...grpc.CallOption) (*ExecuteQueryResponse, error) {
	out := new(ExecuteQueryResponse)
	err := c.cc.Invoke(ctx, MultiPoolerService_ExecuteQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultiPoolerServiceServer is the server API for MultiPoolerService service.
// All implementations must embed UnimplementedMultiPoolerServiceServer
// for forward compatibility
type MultiPoolerServiceServer interface {
	// ExecuteQuery executes a SQL query and returns the result
	ExecuteQuery(context.Context, *ExecuteQueryRequest) (*ExecuteQueryResponse, error)
	mustEmbedUnimplementedMultiPoolerServiceServer()
}

// UnimplementedMultiPoolerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMultiPoolerServiceServer struct {
}

func (UnimplementedMultiPoolerServiceServer) ExecuteQuery(context.Context, *ExecuteQueryRequest) (*ExecuteQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteQuery not implemented")
}
func (UnimplementedMultiPoolerServiceServer) mustEmbedUnimplementedMultiPoolerServiceServer() {}

// UnsafeMultiPoolerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultiPoolerServiceServer will
// result in compilation errors.
type UnsafeMultiPoolerServiceServer interface {
	mustEmbedUnimplementedMultiPoolerServiceServer()
}

func RegisterMultiPoolerServiceServer(s grpc.ServiceRegistrar, srv MultiPoolerServiceServer) {
	s.RegisterService(&MultiPoolerService_ServiceDesc, srv)
}

func _MultiPoolerService_ExecuteQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiPoolerServiceServer).ExecuteQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiPoolerService_ExecuteQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiPoolerServiceServer).ExecuteQuery(ctx, req.(*ExecuteQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MultiPoolerService_ServiceDesc is the grpc.ServiceDesc for MultiPoolerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MultiPoolerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "multipoolerservice.MultiPoolerService",
	HandlerType: (*MultiPoolerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteQuery",
			Handler:    _MultiPoolerService_ExecuteQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "multipoolerservice.proto",
}
