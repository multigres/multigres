// Copyright 2025 Supabase, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: consensusservice.proto

package consensus

import (
	context "context"
	consensusdata "github.com/multigres/multigres/go/pb/consensusdata"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MultiPoolerConsensus_BeginTerm_FullMethodName         = "/consensus.MultiPoolerConsensus/BeginTerm"
	MultiPoolerConsensus_Status_FullMethodName            = "/consensus.MultiPoolerConsensus/Status"
	MultiPoolerConsensus_GetLeadershipView_FullMethodName = "/consensus.MultiPoolerConsensus/GetLeadershipView"
	MultiPoolerConsensus_GetWALPosition_FullMethodName    = "/consensus.MultiPoolerConsensus/GetWALPosition"
	MultiPoolerConsensus_CanReachPrimary_FullMethodName   = "/consensus.MultiPoolerConsensus/CanReachPrimary"
)

// MultiPoolerConsensusClient is the client API for MultiPoolerConsensus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultiPoolerConsensusClient interface {
	// Election Protocol
	BeginTerm(ctx context.Context, in *consensusdata.BeginTermRequest, opts ...grpc.CallOption) (*consensusdata.BeginTermResponse, error)
	// Status and Health
	Status(ctx context.Context, in *consensusdata.StatusRequest, opts ...grpc.CallOption) (*consensusdata.StatusResponse, error)
	GetLeadershipView(ctx context.Context, in *consensusdata.LeadershipViewRequest, opts ...grpc.CallOption) (*consensusdata.LeadershipViewResponse, error)
	// WAL and Replication
	GetWALPosition(ctx context.Context, in *consensusdata.GetWALPositionRequest, opts ...grpc.CallOption) (*consensusdata.GetWALPositionResponse, error)
	CanReachPrimary(ctx context.Context, in *consensusdata.CanReachPrimaryRequest, opts ...grpc.CallOption) (*consensusdata.CanReachPrimaryResponse, error)
}

type multiPoolerConsensusClient struct {
	cc grpc.ClientConnInterface
}

func NewMultiPoolerConsensusClient(cc grpc.ClientConnInterface) MultiPoolerConsensusClient {
	return &multiPoolerConsensusClient{cc}
}

func (c *multiPoolerConsensusClient) BeginTerm(ctx context.Context, in *consensusdata.BeginTermRequest, opts ...grpc.CallOption) (*consensusdata.BeginTermResponse, error) {
	out := new(consensusdata.BeginTermResponse)
	err := c.cc.Invoke(ctx, MultiPoolerConsensus_BeginTerm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiPoolerConsensusClient) Status(ctx context.Context, in *consensusdata.StatusRequest, opts ...grpc.CallOption) (*consensusdata.StatusResponse, error) {
	out := new(consensusdata.StatusResponse)
	err := c.cc.Invoke(ctx, MultiPoolerConsensus_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiPoolerConsensusClient) GetLeadershipView(ctx context.Context, in *consensusdata.LeadershipViewRequest, opts ...grpc.CallOption) (*consensusdata.LeadershipViewResponse, error) {
	out := new(consensusdata.LeadershipViewResponse)
	err := c.cc.Invoke(ctx, MultiPoolerConsensus_GetLeadershipView_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiPoolerConsensusClient) GetWALPosition(ctx context.Context, in *consensusdata.GetWALPositionRequest, opts ...grpc.CallOption) (*consensusdata.GetWALPositionResponse, error) {
	out := new(consensusdata.GetWALPositionResponse)
	err := c.cc.Invoke(ctx, MultiPoolerConsensus_GetWALPosition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiPoolerConsensusClient) CanReachPrimary(ctx context.Context, in *consensusdata.CanReachPrimaryRequest, opts ...grpc.CallOption) (*consensusdata.CanReachPrimaryResponse, error) {
	out := new(consensusdata.CanReachPrimaryResponse)
	err := c.cc.Invoke(ctx, MultiPoolerConsensus_CanReachPrimary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultiPoolerConsensusServer is the server API for MultiPoolerConsensus service.
// All implementations must embed UnimplementedMultiPoolerConsensusServer
// for forward compatibility
type MultiPoolerConsensusServer interface {
	// Election Protocol
	BeginTerm(context.Context, *consensusdata.BeginTermRequest) (*consensusdata.BeginTermResponse, error)
	// Status and Health
	Status(context.Context, *consensusdata.StatusRequest) (*consensusdata.StatusResponse, error)
	GetLeadershipView(context.Context, *consensusdata.LeadershipViewRequest) (*consensusdata.LeadershipViewResponse, error)
	// WAL and Replication
	GetWALPosition(context.Context, *consensusdata.GetWALPositionRequest) (*consensusdata.GetWALPositionResponse, error)
	CanReachPrimary(context.Context, *consensusdata.CanReachPrimaryRequest) (*consensusdata.CanReachPrimaryResponse, error)
	mustEmbedUnimplementedMultiPoolerConsensusServer()
}

// UnimplementedMultiPoolerConsensusServer must be embedded to have forward compatible implementations.
type UnimplementedMultiPoolerConsensusServer struct {
}

func (UnimplementedMultiPoolerConsensusServer) BeginTerm(context.Context, *consensusdata.BeginTermRequest) (*consensusdata.BeginTermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginTerm not implemented")
}
func (UnimplementedMultiPoolerConsensusServer) Status(context.Context, *consensusdata.StatusRequest) (*consensusdata.StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedMultiPoolerConsensusServer) GetLeadershipView(context.Context, *consensusdata.LeadershipViewRequest) (*consensusdata.LeadershipViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeadershipView not implemented")
}
func (UnimplementedMultiPoolerConsensusServer) GetWALPosition(context.Context, *consensusdata.GetWALPositionRequest) (*consensusdata.GetWALPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWALPosition not implemented")
}
func (UnimplementedMultiPoolerConsensusServer) CanReachPrimary(context.Context, *consensusdata.CanReachPrimaryRequest) (*consensusdata.CanReachPrimaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanReachPrimary not implemented")
}
func (UnimplementedMultiPoolerConsensusServer) mustEmbedUnimplementedMultiPoolerConsensusServer() {}

// UnsafeMultiPoolerConsensusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultiPoolerConsensusServer will
// result in compilation errors.
type UnsafeMultiPoolerConsensusServer interface {
	mustEmbedUnimplementedMultiPoolerConsensusServer()
}

func RegisterMultiPoolerConsensusServer(s grpc.ServiceRegistrar, srv MultiPoolerConsensusServer) {
	s.RegisterService(&MultiPoolerConsensus_ServiceDesc, srv)
}

func _MultiPoolerConsensus_BeginTerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(consensusdata.BeginTermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiPoolerConsensusServer).BeginTerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiPoolerConsensus_BeginTerm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiPoolerConsensusServer).BeginTerm(ctx, req.(*consensusdata.BeginTermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiPoolerConsensus_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(consensusdata.StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiPoolerConsensusServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiPoolerConsensus_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiPoolerConsensusServer).Status(ctx, req.(*consensusdata.StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiPoolerConsensus_GetLeadershipView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(consensusdata.LeadershipViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiPoolerConsensusServer).GetLeadershipView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiPoolerConsensus_GetLeadershipView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiPoolerConsensusServer).GetLeadershipView(ctx, req.(*consensusdata.LeadershipViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiPoolerConsensus_GetWALPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(consensusdata.GetWALPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiPoolerConsensusServer).GetWALPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiPoolerConsensus_GetWALPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiPoolerConsensusServer).GetWALPosition(ctx, req.(*consensusdata.GetWALPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiPoolerConsensus_CanReachPrimary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(consensusdata.CanReachPrimaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiPoolerConsensusServer).CanReachPrimary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiPoolerConsensus_CanReachPrimary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiPoolerConsensusServer).CanReachPrimary(ctx, req.(*consensusdata.CanReachPrimaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MultiPoolerConsensus_ServiceDesc is the grpc.ServiceDesc for MultiPoolerConsensus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MultiPoolerConsensus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "consensus.MultiPoolerConsensus",
	HandlerType: (*MultiPoolerConsensusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BeginTerm",
			Handler:    _MultiPoolerConsensus_BeginTerm_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _MultiPoolerConsensus_Status_Handler,
		},
		{
			MethodName: "GetLeadershipView",
			Handler:    _MultiPoolerConsensus_GetLeadershipView_Handler,
		},
		{
			MethodName: "GetWALPosition",
			Handler:    _MultiPoolerConsensus_GetWALPosition_Handler,
		},
		{
			MethodName: "CanReachPrimary",
			Handler:    _MultiPoolerConsensus_CanReachPrimary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "consensusservice.proto",
}
