// Copyright 2025 Supabase, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v4.25.1
// source: multipoolermanagerdata.proto

package multipoolermanagerdata

import (
	clustermetadata "github.com/multigres/multigres/go/pb/clustermetadata"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Synchronization method for standby servers
type SynchronousMethod int32

const (
	// UNSPECIFIED means no synchronous replication (empty synchronous_standby_names)
	SynchronousMethod_SYNCHRONOUS_METHOD_UNSPECIFIED SynchronousMethod = 0
	// FIRST means wait for the first N standby servers (PostgreSQL default)
	SynchronousMethod_SYNCHRONOUS_METHOD_FIRST SynchronousMethod = 1
	// ANY means wait for any N standby servers
	SynchronousMethod_SYNCHRONOUS_METHOD_ANY SynchronousMethod = 2
)

// Enum value maps for SynchronousMethod.
var (
	SynchronousMethod_name = map[int32]string{
		0: "SYNCHRONOUS_METHOD_UNSPECIFIED",
		1: "SYNCHRONOUS_METHOD_FIRST",
		2: "SYNCHRONOUS_METHOD_ANY",
	}
	SynchronousMethod_value = map[string]int32{
		"SYNCHRONOUS_METHOD_UNSPECIFIED": 0,
		"SYNCHRONOUS_METHOD_FIRST":       1,
		"SYNCHRONOUS_METHOD_ANY":         2,
	}
)

func (x SynchronousMethod) Enum() *SynchronousMethod {
	p := new(SynchronousMethod)
	*p = x
	return p
}

func (x SynchronousMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SynchronousMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_multipoolermanagerdata_proto_enumTypes[0].Descriptor()
}

func (SynchronousMethod) Type() protoreflect.EnumType {
	return &file_multipoolermanagerdata_proto_enumTypes[0]
}

func (x SynchronousMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SynchronousMethod.Descriptor instead.
func (SynchronousMethod) EnumDescriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{0}
}

// Enum representing the type of standby list modification
type StandbyUpdateOperation int32

const (
	StandbyUpdateOperation_STANDBY_UPDATE_OPERATION_UNSPECIFIED StandbyUpdateOperation = 0
	StandbyUpdateOperation_STANDBY_UPDATE_OPERATION_ADD         StandbyUpdateOperation = 1
	StandbyUpdateOperation_STANDBY_UPDATE_OPERATION_REMOVE      StandbyUpdateOperation = 2
	StandbyUpdateOperation_STANDBY_UPDATE_OPERATION_REPLACE     StandbyUpdateOperation = 3
)

// Enum value maps for StandbyUpdateOperation.
var (
	StandbyUpdateOperation_name = map[int32]string{
		0: "STANDBY_UPDATE_OPERATION_UNSPECIFIED",
		1: "STANDBY_UPDATE_OPERATION_ADD",
		2: "STANDBY_UPDATE_OPERATION_REMOVE",
		3: "STANDBY_UPDATE_OPERATION_REPLACE",
	}
	StandbyUpdateOperation_value = map[string]int32{
		"STANDBY_UPDATE_OPERATION_UNSPECIFIED": 0,
		"STANDBY_UPDATE_OPERATION_ADD":         1,
		"STANDBY_UPDATE_OPERATION_REMOVE":      2,
		"STANDBY_UPDATE_OPERATION_REPLACE":     3,
	}
)

func (x StandbyUpdateOperation) Enum() *StandbyUpdateOperation {
	p := new(StandbyUpdateOperation)
	*p = x
	return p
}

func (x StandbyUpdateOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StandbyUpdateOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_multipoolermanagerdata_proto_enumTypes[1].Descriptor()
}

func (StandbyUpdateOperation) Type() protoreflect.EnumType {
	return &file_multipoolermanagerdata_proto_enumTypes[1]
}

func (x StandbyUpdateOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StandbyUpdateOperation.Descriptor instead.
func (StandbyUpdateOperation) EnumDescriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{1}
}

// Synchronous commit level
type SynchronousCommitLevel int32

const (
	// OFF disables synchronous commit
	SynchronousCommitLevel_SYNCHRONOUS_COMMIT_OFF SynchronousCommitLevel = 0
	// LOCAL waits for local flush to disk
	SynchronousCommitLevel_SYNCHRONOUS_COMMIT_LOCAL SynchronousCommitLevel = 1
	// REMOTE_WRITE waits for standby to receive and write WAL
	SynchronousCommitLevel_SYNCHRONOUS_COMMIT_REMOTE_WRITE SynchronousCommitLevel = 2
	// ON waits for standby to receive, write, and flush WAL (same as remote_apply in newer versions)
	SynchronousCommitLevel_SYNCHRONOUS_COMMIT_ON SynchronousCommitLevel = 3
	// REMOTE_APPLY waits for standby to receive, write, flush, and apply WAL
	SynchronousCommitLevel_SYNCHRONOUS_COMMIT_REMOTE_APPLY SynchronousCommitLevel = 4
)

// Enum value maps for SynchronousCommitLevel.
var (
	SynchronousCommitLevel_name = map[int32]string{
		0: "SYNCHRONOUS_COMMIT_OFF",
		1: "SYNCHRONOUS_COMMIT_LOCAL",
		2: "SYNCHRONOUS_COMMIT_REMOTE_WRITE",
		3: "SYNCHRONOUS_COMMIT_ON",
		4: "SYNCHRONOUS_COMMIT_REMOTE_APPLY",
	}
	SynchronousCommitLevel_value = map[string]int32{
		"SYNCHRONOUS_COMMIT_OFF":          0,
		"SYNCHRONOUS_COMMIT_LOCAL":        1,
		"SYNCHRONOUS_COMMIT_REMOTE_WRITE": 2,
		"SYNCHRONOUS_COMMIT_ON":           3,
		"SYNCHRONOUS_COMMIT_REMOTE_APPLY": 4,
	}
)

func (x SynchronousCommitLevel) Enum() *SynchronousCommitLevel {
	p := new(SynchronousCommitLevel)
	*p = x
	return p
}

func (x SynchronousCommitLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SynchronousCommitLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_multipoolermanagerdata_proto_enumTypes[2].Descriptor()
}

func (SynchronousCommitLevel) Type() protoreflect.EnumType {
	return &file_multipoolermanagerdata_proto_enumTypes[2]
}

func (x SynchronousCommitLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SynchronousCommitLevel.Descriptor instead.
func (SynchronousCommitLevel) EnumDescriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{2}
}

// Primary connection information parsed from PostgreSQL's primary_conninfo setting
type PrimaryConnInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Primary server hostname
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Primary server port
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Database user for replication connection
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	// Application name for this standby
	ApplicationName string `protobuf:"bytes,4,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	// Raw connection string (includes all parameters)
	Raw           string `protobuf:"bytes,5,opt,name=raw,proto3" json:"raw,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrimaryConnInfo) Reset() {
	*x = PrimaryConnInfo{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrimaryConnInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryConnInfo) ProtoMessage() {}

func (x *PrimaryConnInfo) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryConnInfo.ProtoReflect.Descriptor instead.
func (*PrimaryConnInfo) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{0}
}

func (x *PrimaryConnInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PrimaryConnInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PrimaryConnInfo) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *PrimaryConnInfo) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *PrimaryConnInfo) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

// PostgreSQL replication status information
type ReplicationStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current replication LSN position (PostgreSQL format: X/XXXXXXXX)
	Lsn string `protobuf:"bytes,1,opt,name=lsn,proto3" json:"lsn,omitempty"`
	// Result of pg_is_wal_replay_paused()
	IsWalReplayPaused bool `protobuf:"varint,2,opt,name=is_wal_replay_paused,json=isWalReplayPaused,proto3" json:"is_wal_replay_paused,omitempty"`
	// Result of pg_get_wal_replay_pause_state()
	WalReplayPauseState string `protobuf:"bytes,3,opt,name=wal_replay_pause_state,json=walReplayPauseState,proto3" json:"wal_replay_pause_state,omitempty"`
	// Replication lag (optional, may not always be available)
	Lag *durationpb.Duration `protobuf:"bytes,4,opt,name=lag,proto3" json:"lag,omitempty"`
	// Result of pg_last_xact_replay_timestamp()
	LastXactReplayTimestamp string `protobuf:"bytes,5,opt,name=last_xact_replay_timestamp,json=lastXactReplayTimestamp,proto3" json:"last_xact_replay_timestamp,omitempty"`
	// Primary connection info parsed from primary_conninfo setting
	PrimaryConnInfo *PrimaryConnInfo `protobuf:"bytes,6,opt,name=primary_conn_info,json=primaryConnInfo,proto3" json:"primary_conn_info,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ReplicationStatus) Reset() {
	*x = ReplicationStatus{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationStatus) ProtoMessage() {}

func (x *ReplicationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationStatus.ProtoReflect.Descriptor instead.
func (*ReplicationStatus) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{1}
}

func (x *ReplicationStatus) GetLsn() string {
	if x != nil {
		return x.Lsn
	}
	return ""
}

func (x *ReplicationStatus) GetIsWalReplayPaused() bool {
	if x != nil {
		return x.IsWalReplayPaused
	}
	return false
}

func (x *ReplicationStatus) GetWalReplayPauseState() string {
	if x != nil {
		return x.WalReplayPauseState
	}
	return ""
}

func (x *ReplicationStatus) GetLag() *durationpb.Duration {
	if x != nil {
		return x.Lag
	}
	return nil
}

func (x *ReplicationStatus) GetLastXactReplayTimestamp() string {
	if x != nil {
		return x.LastXactReplayTimestamp
	}
	return ""
}

func (x *ReplicationStatus) GetPrimaryConnInfo() *PrimaryConnInfo {
	if x != nil {
		return x.PrimaryConnInfo
	}
	return nil
}

// Wait for PostgreSQL server to reach a specific LSN position
type WaitForLSNRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Target LSN position to wait for (PostgreSQL LSN format: X/XXXXXXXX)
	TargetLsn string `protobuf:"bytes,1,opt,name=target_lsn,json=targetLsn,proto3" json:"target_lsn,omitempty"`
	// Timeout (zero duration means no timeout)
	Timeout       *durationpb.Duration `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WaitForLSNRequest) Reset() {
	*x = WaitForLSNRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaitForLSNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForLSNRequest) ProtoMessage() {}

func (x *WaitForLSNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForLSNRequest.ProtoReflect.Descriptor instead.
func (*WaitForLSNRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{2}
}

func (x *WaitForLSNRequest) GetTargetLsn() string {
	if x != nil {
		return x.TargetLsn
	}
	return ""
}

func (x *WaitForLSNRequest) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type WaitForLSNResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WaitForLSNResponse) Reset() {
	*x = WaitForLSNResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaitForLSNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForLSNResponse) ProtoMessage() {}

func (x *WaitForLSNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForLSNResponse.ProtoReflect.Descriptor instead.
func (*WaitForLSNResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{3}
}

// Start PostgreSQL replication (calls pg_wal_replay_resume)
type StartReplicationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartReplicationRequest) Reset() {
	*x = StartReplicationRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartReplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartReplicationRequest) ProtoMessage() {}

func (x *StartReplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartReplicationRequest.ProtoReflect.Descriptor instead.
func (*StartReplicationRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{4}
}

type StartReplicationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartReplicationResponse) Reset() {
	*x = StartReplicationResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartReplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartReplicationResponse) ProtoMessage() {}

func (x *StartReplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartReplicationResponse.ProtoReflect.Descriptor instead.
func (*StartReplicationResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{5}
}

// SetPrimaryConnInfo sets the primary connection info for a standby server
type SetPrimaryConnInfoRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Primary server hostname
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Primary server port
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Whether to stop replication before making changes
	StopReplicationBefore bool `protobuf:"varint,3,opt,name=stop_replication_before,json=stopReplicationBefore,proto3" json:"stop_replication_before,omitempty"`
	// Whether to start replication after making changes
	StartReplicationAfter bool `protobuf:"varint,4,opt,name=start_replication_after,json=startReplicationAfter,proto3" json:"start_replication_after,omitempty"`
	// Current term for consensus (used by MultiOrch during initialization)
	CurrentTerm int64 `protobuf:"varint,5,opt,name=current_term,json=currentTerm,proto3" json:"current_term,omitempty"`
	// Force the operation even if the term doesn't match
	Force         bool `protobuf:"varint,6,opt,name=force,proto3" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetPrimaryConnInfoRequest) Reset() {
	*x = SetPrimaryConnInfoRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPrimaryConnInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPrimaryConnInfoRequest) ProtoMessage() {}

func (x *SetPrimaryConnInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPrimaryConnInfoRequest.ProtoReflect.Descriptor instead.
func (*SetPrimaryConnInfoRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{6}
}

func (x *SetPrimaryConnInfoRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SetPrimaryConnInfoRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SetPrimaryConnInfoRequest) GetStopReplicationBefore() bool {
	if x != nil {
		return x.StopReplicationBefore
	}
	return false
}

func (x *SetPrimaryConnInfoRequest) GetStartReplicationAfter() bool {
	if x != nil {
		return x.StartReplicationAfter
	}
	return false
}

func (x *SetPrimaryConnInfoRequest) GetCurrentTerm() int64 {
	if x != nil {
		return x.CurrentTerm
	}
	return 0
}

func (x *SetPrimaryConnInfoRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type SetPrimaryConnInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetPrimaryConnInfoResponse) Reset() {
	*x = SetPrimaryConnInfoResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPrimaryConnInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPrimaryConnInfoResponse) ProtoMessage() {}

func (x *SetPrimaryConnInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPrimaryConnInfoResponse.ProtoReflect.Descriptor instead.
func (*SetPrimaryConnInfoResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{7}
}

// StopReplication stops WAL replay on standby
type StopReplicationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopReplicationRequest) Reset() {
	*x = StopReplicationRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopReplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopReplicationRequest) ProtoMessage() {}

func (x *StopReplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopReplicationRequest.ProtoReflect.Descriptor instead.
func (*StopReplicationRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{8}
}

type StopReplicationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Replication status when replication was stopped
	Status        *ReplicationStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopReplicationResponse) Reset() {
	*x = StopReplicationResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopReplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopReplicationResponse) ProtoMessage() {}

func (x *StopReplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopReplicationResponse.ProtoReflect.Descriptor instead.
func (*StopReplicationResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{9}
}

func (x *StopReplicationResponse) GetStatus() *ReplicationStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// ReplicationStatus gets the current replication status
type ReplicationStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicationStatusRequest) Reset() {
	*x = ReplicationStatusRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationStatusRequest) ProtoMessage() {}

func (x *ReplicationStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationStatusRequest.ProtoReflect.Descriptor instead.
func (*ReplicationStatusRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{10}
}

type ReplicationStatusResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current replication status
	Status        *ReplicationStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicationStatusResponse) Reset() {
	*x = ReplicationStatusResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationStatusResponse) ProtoMessage() {}

func (x *ReplicationStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationStatusResponse.ProtoReflect.Descriptor instead.
func (*ReplicationStatusResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{11}
}

func (x *ReplicationStatusResponse) GetStatus() *ReplicationStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Synchronous replication configuration
type SynchronousReplicationConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Synchronous commit level
	SynchronousCommit SynchronousCommitLevel `protobuf:"varint,1,opt,name=synchronous_commit,json=synchronousCommit,proto3,enum=multipoolermanagerdata.SynchronousCommitLevel" json:"synchronous_commit,omitempty"`
	// Synchronous method (FIRST or ANY)
	SynchronousMethod SynchronousMethod `protobuf:"varint,2,opt,name=synchronous_method,json=synchronousMethod,proto3,enum=multipoolermanagerdata.SynchronousMethod" json:"synchronous_method,omitempty"`
	// Number of synchronous standbys
	NumSync int32 `protobuf:"varint,3,opt,name=num_sync,json=numSync,proto3" json:"num_sync,omitempty"`
	// List of standby IDs that can participate in synchronous replication
	StandbyIds    []*clustermetadata.ID `protobuf:"bytes,4,rep,name=standby_ids,json=standbyIds,proto3" json:"standby_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SynchronousReplicationConfiguration) Reset() {
	*x = SynchronousReplicationConfiguration{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SynchronousReplicationConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynchronousReplicationConfiguration) ProtoMessage() {}

func (x *SynchronousReplicationConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynchronousReplicationConfiguration.ProtoReflect.Descriptor instead.
func (*SynchronousReplicationConfiguration) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{12}
}

func (x *SynchronousReplicationConfiguration) GetSynchronousCommit() SynchronousCommitLevel {
	if x != nil {
		return x.SynchronousCommit
	}
	return SynchronousCommitLevel_SYNCHRONOUS_COMMIT_OFF
}

func (x *SynchronousReplicationConfiguration) GetSynchronousMethod() SynchronousMethod {
	if x != nil {
		return x.SynchronousMethod
	}
	return SynchronousMethod_SYNCHRONOUS_METHOD_UNSPECIFIED
}

func (x *SynchronousReplicationConfiguration) GetNumSync() int32 {
	if x != nil {
		return x.NumSync
	}
	return 0
}

func (x *SynchronousReplicationConfiguration) GetStandbyIds() []*clustermetadata.ID {
	if x != nil {
		return x.StandbyIds
	}
	return nil
}

// PostgreSQL primary server status
type PrimaryStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current WAL LSN position (PostgreSQL format: X/XXXXXXXX)
	Lsn string `protobuf:"bytes,1,opt,name=lsn,proto3" json:"lsn,omitempty"`
	// Whether server is accepting connections
	Ready bool `protobuf:"varint,2,opt,name=ready,proto3" json:"ready,omitempty"`
	// Follower servers that are currently connected to the primary (parsed from pg_stat_replication).
	// This only includes followers that have an active replication connection, not all configured standbys.
	// For a complete view of all configured standbys (connected and disconnected), use GetFollowers.
	ConnectedFollowers []*clustermetadata.ID `protobuf:"bytes,3,rep,name=connected_followers,json=connectedFollowers,proto3" json:"connected_followers,omitempty"`
	// Synchronous replication configuration (parsed from synchronous_standby_names and synchronous_commit)
	SyncReplicationConfig *SynchronousReplicationConfiguration `protobuf:"bytes,4,opt,name=sync_replication_config,json=syncReplicationConfig,proto3" json:"sync_replication_config,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PrimaryStatus) Reset() {
	*x = PrimaryStatus{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrimaryStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryStatus) ProtoMessage() {}

func (x *PrimaryStatus) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryStatus.ProtoReflect.Descriptor instead.
func (*PrimaryStatus) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{13}
}

func (x *PrimaryStatus) GetLsn() string {
	if x != nil {
		return x.Lsn
	}
	return ""
}

func (x *PrimaryStatus) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *PrimaryStatus) GetConnectedFollowers() []*clustermetadata.ID {
	if x != nil {
		return x.ConnectedFollowers
	}
	return nil
}

func (x *PrimaryStatus) GetSyncReplicationConfig() *SynchronousReplicationConfiguration {
	if x != nil {
		return x.SyncReplicationConfig
	}
	return nil
}

// PrimaryStatus gets the status of the primary server
type PrimaryStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrimaryStatusRequest) Reset() {
	*x = PrimaryStatusRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrimaryStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryStatusRequest) ProtoMessage() {}

func (x *PrimaryStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryStatusRequest.ProtoReflect.Descriptor instead.
func (*PrimaryStatusRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{14}
}

type PrimaryStatusResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Primary server status
	Status        *PrimaryStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrimaryStatusResponse) Reset() {
	*x = PrimaryStatusResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrimaryStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryStatusResponse) ProtoMessage() {}

func (x *PrimaryStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryStatusResponse.ProtoReflect.Descriptor instead.
func (*PrimaryStatusResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{15}
}

func (x *PrimaryStatusResponse) GetStatus() *PrimaryStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// PrimaryPosition gets the current LSN position of the primary
type PrimaryPositionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrimaryPositionRequest) Reset() {
	*x = PrimaryPositionRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrimaryPositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryPositionRequest) ProtoMessage() {}

func (x *PrimaryPositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryPositionRequest.ProtoReflect.Descriptor instead.
func (*PrimaryPositionRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{16}
}

type PrimaryPositionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current primary LSN position
	LsnPosition   string `protobuf:"bytes,1,opt,name=lsn_position,json=lsnPosition,proto3" json:"lsn_position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrimaryPositionResponse) Reset() {
	*x = PrimaryPositionResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrimaryPositionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryPositionResponse) ProtoMessage() {}

func (x *PrimaryPositionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryPositionResponse.ProtoReflect.Descriptor instead.
func (*PrimaryPositionResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{17}
}

func (x *PrimaryPositionResponse) GetLsnPosition() string {
	if x != nil {
		return x.LsnPosition
	}
	return ""
}

// Replication statistics for a connected follower from pg_stat_replication
type ReplicationStats struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PostgreSQL backend process ID for this replication connection
	Pid int32 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	// Client IP address of the follower
	ClientAddr string `protobuf:"bytes,2,opt,name=client_addr,json=clientAddr,proto3" json:"client_addr,omitempty"`
	// Current WAL sender state (startup, catchup, streaming, backup, stopping)
	State string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// Synchronous state (async, potential, sync, quorum)
	SyncState string `protobuf:"bytes,4,opt,name=sync_state,json=syncState,proto3" json:"sync_state,omitempty"`
	// LSN of the last WAL location sent to this standby
	SentLsn string `protobuf:"bytes,5,opt,name=sent_lsn,json=sentLsn,proto3" json:"sent_lsn,omitempty"`
	// LSN of the last WAL location written to disk on this standby
	WriteLsn string `protobuf:"bytes,6,opt,name=write_lsn,json=writeLsn,proto3" json:"write_lsn,omitempty"`
	// LSN of the last WAL location flushed to disk on this standby
	FlushLsn string `protobuf:"bytes,7,opt,name=flush_lsn,json=flushLsn,proto3" json:"flush_lsn,omitempty"`
	// LSN of the last WAL location replayed on this standby
	ReplayLsn string `protobuf:"bytes,8,opt,name=replay_lsn,json=replayLsn,proto3" json:"replay_lsn,omitempty"`
	// Time taken to write recent WAL locally (may be null)
	WriteLag *durationpb.Duration `protobuf:"bytes,9,opt,name=write_lag,json=writeLag,proto3" json:"write_lag,omitempty"`
	// Time taken to flush recent WAL locally (may be null)
	FlushLag *durationpb.Duration `protobuf:"bytes,10,opt,name=flush_lag,json=flushLag,proto3" json:"flush_lag,omitempty"`
	// Time taken to replay recent WAL on standby (may be null)
	ReplayLag     *durationpb.Duration `protobuf:"bytes,11,opt,name=replay_lag,json=replayLag,proto3" json:"replay_lag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicationStats) Reset() {
	*x = ReplicationStats{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationStats) ProtoMessage() {}

func (x *ReplicationStats) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationStats.ProtoReflect.Descriptor instead.
func (*ReplicationStats) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{18}
}

func (x *ReplicationStats) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ReplicationStats) GetClientAddr() string {
	if x != nil {
		return x.ClientAddr
	}
	return ""
}

func (x *ReplicationStats) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ReplicationStats) GetSyncState() string {
	if x != nil {
		return x.SyncState
	}
	return ""
}

func (x *ReplicationStats) GetSentLsn() string {
	if x != nil {
		return x.SentLsn
	}
	return ""
}

func (x *ReplicationStats) GetWriteLsn() string {
	if x != nil {
		return x.WriteLsn
	}
	return ""
}

func (x *ReplicationStats) GetFlushLsn() string {
	if x != nil {
		return x.FlushLsn
	}
	return ""
}

func (x *ReplicationStats) GetReplayLsn() string {
	if x != nil {
		return x.ReplayLsn
	}
	return ""
}

func (x *ReplicationStats) GetWriteLag() *durationpb.Duration {
	if x != nil {
		return x.WriteLag
	}
	return nil
}

func (x *ReplicationStats) GetFlushLag() *durationpb.Duration {
	if x != nil {
		return x.FlushLag
	}
	return nil
}

func (x *ReplicationStats) GetReplayLag() *durationpb.Duration {
	if x != nil {
		return x.ReplayLag
	}
	return nil
}

// Information about a follower that is part of the current cohort (configured in
// synchronous_standby_names). Includes connection status and replication stats if connected.
type FollowerInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cluster ID of the follower from synchronous_standby_names configuration
	FollowerId *clustermetadata.ID `protobuf:"bytes,1,opt,name=follower_id,json=followerId,proto3" json:"follower_id,omitempty"`
	// Application name (format: {cell}_{name})
	ApplicationName string `protobuf:"bytes,2,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	// Whether this follower is currently connected to the primary
	IsConnected bool `protobuf:"varint,3,opt,name=is_connected,json=isConnected,proto3" json:"is_connected,omitempty"`
	// Replication statistics (only populated if is_connected is true)
	ReplicationStats *ReplicationStats `protobuf:"bytes,4,opt,name=replication_stats,json=replicationStats,proto3" json:"replication_stats,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *FollowerInfo) Reset() {
	*x = FollowerInfo{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FollowerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowerInfo) ProtoMessage() {}

func (x *FollowerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowerInfo.ProtoReflect.Descriptor instead.
func (*FollowerInfo) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{19}
}

func (x *FollowerInfo) GetFollowerId() *clustermetadata.ID {
	if x != nil {
		return x.FollowerId
	}
	return nil
}

func (x *FollowerInfo) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *FollowerInfo) GetIsConnected() bool {
	if x != nil {
		return x.IsConnected
	}
	return false
}

func (x *FollowerInfo) GetReplicationStats() *ReplicationStats {
	if x != nil {
		return x.ReplicationStats
	}
	return nil
}

// GetFollowers gets the list of follower servers with detailed replication status
type GetFollowersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFollowersRequest) Reset() {
	*x = GetFollowersRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFollowersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFollowersRequest) ProtoMessage() {}

func (x *GetFollowersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFollowersRequest.ProtoReflect.Descriptor instead.
func (*GetFollowersRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{20}
}

type GetFollowersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Information about all followers configured in synchronous_standby_names.
	// Each entry indicates whether the follower is connected and includes replication
	// statistics if available. This provides a complete view of the expected cohort.
	Followers []*FollowerInfo `protobuf:"bytes,1,rep,name=followers,proto3" json:"followers,omitempty"`
	// Current synchronous replication configuration for context
	SyncConfig    *SynchronousReplicationConfiguration `protobuf:"bytes,2,opt,name=sync_config,json=syncConfig,proto3" json:"sync_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFollowersResponse) Reset() {
	*x = GetFollowersResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFollowersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFollowersResponse) ProtoMessage() {}

func (x *GetFollowersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFollowersResponse.ProtoReflect.Descriptor instead.
func (*GetFollowersResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{21}
}

func (x *GetFollowersResponse) GetFollowers() []*FollowerInfo {
	if x != nil {
		return x.Followers
	}
	return nil
}

func (x *GetFollowersResponse) GetSyncConfig() *SynchronousReplicationConfiguration {
	if x != nil {
		return x.SyncConfig
	}
	return nil
}

// Demote demotes the current leader server
// This is called during the Revocation stage of generalized consensus to safely
// transition a primary to read-only mode and prevent it from making further progress.
type DemoteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Consensus term for this demotion operation
	ConsensusTerm int64 `protobuf:"varint,1,opt,name=consensus_term,json=consensusTerm,proto3" json:"consensus_term,omitempty"`
	// Drain timeout - how long to wait for in-flight queries (default: 5s)
	DrainTimeout *durationpb.Duration `protobuf:"bytes,2,opt,name=drain_timeout,json=drainTimeout,proto3" json:"drain_timeout,omitempty"`
	// Force the operation even if term validation fails
	Force         bool `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DemoteRequest) Reset() {
	*x = DemoteRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DemoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemoteRequest) ProtoMessage() {}

func (x *DemoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemoteRequest.ProtoReflect.Descriptor instead.
func (*DemoteRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{22}
}

func (x *DemoteRequest) GetConsensusTerm() int64 {
	if x != nil {
		return x.ConsensusTerm
	}
	return 0
}

func (x *DemoteRequest) GetDrainTimeout() *durationpb.Duration {
	if x != nil {
		return x.DrainTimeout
	}
	return nil
}

func (x *DemoteRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type DemoteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the node was already demoted (idempotent check)
	WasAlreadyDemoted bool `protobuf:"varint,1,opt,name=was_already_demoted,json=wasAlreadyDemoted,proto3" json:"was_already_demoted,omitempty"`
	// Consensus term at the time of demotion
	ConsensusTerm int64 `protobuf:"varint,2,opt,name=consensus_term,json=consensusTerm,proto3" json:"consensus_term,omitempty"`
	// LSN position at the time of demotion (final position as primary)
	LsnPosition string `protobuf:"bytes,3,opt,name=lsn_position,json=lsnPosition,proto3" json:"lsn_position,omitempty"`
	// Number of connections that were terminated
	ConnectionsTerminated int32 `protobuf:"varint,4,opt,name=connections_terminated,json=connectionsTerminated,proto3" json:"connections_terminated,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *DemoteResponse) Reset() {
	*x = DemoteResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DemoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemoteResponse) ProtoMessage() {}

func (x *DemoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemoteResponse.ProtoReflect.Descriptor instead.
func (*DemoteResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{23}
}

func (x *DemoteResponse) GetWasAlreadyDemoted() bool {
	if x != nil {
		return x.WasAlreadyDemoted
	}
	return false
}

func (x *DemoteResponse) GetConsensusTerm() int64 {
	if x != nil {
		return x.ConsensusTerm
	}
	return 0
}

func (x *DemoteResponse) GetLsnPosition() string {
	if x != nil {
		return x.LsnPosition
	}
	return ""
}

func (x *DemoteResponse) GetConnectionsTerminated() int32 {
	if x != nil {
		return x.ConnectionsTerminated
	}
	return 0
}

// UndoDemote undoes a demotion
type UndoDemoteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UndoDemoteRequest) Reset() {
	*x = UndoDemoteRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UndoDemoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoDemoteRequest) ProtoMessage() {}

func (x *UndoDemoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoDemoteRequest.ProtoReflect.Descriptor instead.
func (*UndoDemoteRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{24}
}

type UndoDemoteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UndoDemoteResponse) Reset() {
	*x = UndoDemoteResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UndoDemoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoDemoteResponse) ProtoMessage() {}

func (x *UndoDemoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoDemoteResponse.ProtoReflect.Descriptor instead.
func (*UndoDemoteResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{25}
}

// StopReplicationAndGetStatus stops PostgreSQL replication and returns the status
type StopReplicationAndGetStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopReplicationAndGetStatusRequest) Reset() {
	*x = StopReplicationAndGetStatusRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopReplicationAndGetStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopReplicationAndGetStatusRequest) ProtoMessage() {}

func (x *StopReplicationAndGetStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopReplicationAndGetStatusRequest.ProtoReflect.Descriptor instead.
func (*StopReplicationAndGetStatusRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{26}
}

type StopReplicationAndGetStatusResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Replication status before and after stopping
	Status        *ReplicationStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopReplicationAndGetStatusResponse) Reset() {
	*x = StopReplicationAndGetStatusResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopReplicationAndGetStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopReplicationAndGetStatusResponse) ProtoMessage() {}

func (x *StopReplicationAndGetStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopReplicationAndGetStatusResponse.ProtoReflect.Descriptor instead.
func (*StopReplicationAndGetStatusResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{27}
}

func (x *StopReplicationAndGetStatusResponse) GetStatus() *ReplicationStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// ChangeType changes the pooler type
type ChangeTypeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// New pooler type (PRIMARY or REPLICA - maps to LEADER/FOLLOWER)
	PoolerType    clustermetadata.PoolerType `protobuf:"varint,1,opt,name=pooler_type,json=poolerType,proto3,enum=clustermetadata.PoolerType" json:"pooler_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeTypeRequest) Reset() {
	*x = ChangeTypeRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeTypeRequest) ProtoMessage() {}

func (x *ChangeTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeTypeRequest.ProtoReflect.Descriptor instead.
func (*ChangeTypeRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{28}
}

func (x *ChangeTypeRequest) GetPoolerType() clustermetadata.PoolerType {
	if x != nil {
		return x.PoolerType
	}
	return clustermetadata.PoolerType(0)
}

type ChangeTypeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeTypeResponse) Reset() {
	*x = ChangeTypeResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeTypeResponse) ProtoMessage() {}

func (x *ChangeTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeTypeResponse.ProtoReflect.Descriptor instead.
func (*ChangeTypeResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{29}
}

// Promote promotes a replica to leader (Multigres-level operation)
// This is called during the Propagate stage of generalized consensus
// to safely transition a standby to primary and reconfigure replication.
type PromoteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Consensus term for this promotion operation
	// Used to ensure this promotion corresponds to the correct term
	ConsensusTerm int64 `protobuf:"varint,1,opt,name=consensus_term,json=consensusTerm,proto3" json:"consensus_term,omitempty"`
	// Expected LSN position before promotion (optional, for validation)
	// By the Propagate stage, replication should already be stopped and the LSN frozen.
	// This is an assertion to verify the node has the expected durable state.
	// If the actual LSN doesn't match, this indicates an error in an earlier consensus stage.
	// If empty, skip LSN validation.
	ExpectedLsn string `protobuf:"bytes,2,opt,name=expected_lsn,json=expectedLsn,proto3" json:"expected_lsn,omitempty"`
	// Synchronous replication configuration to apply after promotion
	// This rewires the cohort for the new topology
	SyncReplicationConfig *ConfigureSynchronousReplicationRequest `protobuf:"bytes,3,opt,name=sync_replication_config,json=syncReplicationConfig,proto3" json:"sync_replication_config,omitempty"`
	// Force the operation even if term validation fails
	// Should only be used in recovery scenarios
	Force         bool `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PromoteRequest) Reset() {
	*x = PromoteRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PromoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteRequest) ProtoMessage() {}

func (x *PromoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteRequest.ProtoReflect.Descriptor instead.
func (*PromoteRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{30}
}

func (x *PromoteRequest) GetConsensusTerm() int64 {
	if x != nil {
		return x.ConsensusTerm
	}
	return 0
}

func (x *PromoteRequest) GetExpectedLsn() string {
	if x != nil {
		return x.ExpectedLsn
	}
	return ""
}

func (x *PromoteRequest) GetSyncReplicationConfig() *ConfigureSynchronousReplicationRequest {
	if x != nil {
		return x.SyncReplicationConfig
	}
	return nil
}

func (x *PromoteRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type PromoteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// LSN position after promotion
	LsnPosition string `protobuf:"bytes,1,opt,name=lsn_position,json=lsnPosition,proto3" json:"lsn_position,omitempty"`
	// Whether the node was already promoted (idempotent check)
	WasAlreadyPrimary bool `protobuf:"varint,2,opt,name=was_already_primary,json=wasAlreadyPrimary,proto3" json:"was_already_primary,omitempty"`
	// Consensus term at the time of promotion
	ConsensusTerm int64 `protobuf:"varint,3,opt,name=consensus_term,json=consensusTerm,proto3" json:"consensus_term,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PromoteResponse) Reset() {
	*x = PromoteResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PromoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteResponse) ProtoMessage() {}

func (x *PromoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteResponse.ProtoReflect.Descriptor instead.
func (*PromoteResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{31}
}

func (x *PromoteResponse) GetLsnPosition() string {
	if x != nil {
		return x.LsnPosition
	}
	return ""
}

func (x *PromoteResponse) GetWasAlreadyPrimary() bool {
	if x != nil {
		return x.WasAlreadyPrimary
	}
	return false
}

func (x *PromoteResponse) GetConsensusTerm() int64 {
	if x != nil {
		return x.ConsensusTerm
	}
	return 0
}

// ResetReplication resets the standby's connection to its primary
type ResetReplicationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResetReplicationRequest) Reset() {
	*x = ResetReplicationRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetReplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetReplicationRequest) ProtoMessage() {}

func (x *ResetReplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetReplicationRequest.ProtoReflect.Descriptor instead.
func (*ResetReplicationRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{32}
}

type ResetReplicationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Replication status when replication was reset
	Status        *ReplicationStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResetReplicationResponse) Reset() {
	*x = ResetReplicationResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetReplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetReplicationResponse) ProtoMessage() {}

func (x *ResetReplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetReplicationResponse.ProtoReflect.Descriptor instead.
func (*ResetReplicationResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{33}
}

func (x *ResetReplicationResponse) GetStatus() *ReplicationStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// ConfigureSynchronousReplication configures PostgreSQL synchronous replication settings
type ConfigureSynchronousReplicationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Synchronous commit level (synchronous_commit setting)
	SynchronousCommit SynchronousCommitLevel `protobuf:"varint,1,opt,name=synchronous_commit,json=synchronousCommit,proto3,enum=multipoolermanagerdata.SynchronousCommitLevel" json:"synchronous_commit,omitempty"`
	// Synchronization method (FIRST, ANY)
	SynchronousMethod SynchronousMethod `protobuf:"varint,2,opt,name=synchronous_method,json=synchronousMethod,proto3,enum=multipoolermanagerdata.SynchronousMethod" json:"synchronous_method,omitempty"`
	// Number of standby servers to wait for (quorum count)
	NumSync int32 `protobuf:"varint,3,opt,name=num_sync,json=numSync,proto3" json:"num_sync,omitempty"`
	// List of standby multipooler IDs that can participate in synchronous replication
	// The application names will be generated as {cell}_{name} from these IDs
	StandbyIds []*clustermetadata.ID `protobuf:"bytes,4,rep,name=standby_ids,json=standbyIds,proto3" json:"standby_ids,omitempty"`
	// Whether to reload configuration immediately
	ReloadConfig  bool `protobuf:"varint,5,opt,name=reload_config,json=reloadConfig,proto3" json:"reload_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigureSynchronousReplicationRequest) Reset() {
	*x = ConfigureSynchronousReplicationRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureSynchronousReplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureSynchronousReplicationRequest) ProtoMessage() {}

func (x *ConfigureSynchronousReplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureSynchronousReplicationRequest.ProtoReflect.Descriptor instead.
func (*ConfigureSynchronousReplicationRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{34}
}

func (x *ConfigureSynchronousReplicationRequest) GetSynchronousCommit() SynchronousCommitLevel {
	if x != nil {
		return x.SynchronousCommit
	}
	return SynchronousCommitLevel_SYNCHRONOUS_COMMIT_OFF
}

func (x *ConfigureSynchronousReplicationRequest) GetSynchronousMethod() SynchronousMethod {
	if x != nil {
		return x.SynchronousMethod
	}
	return SynchronousMethod_SYNCHRONOUS_METHOD_UNSPECIFIED
}

func (x *ConfigureSynchronousReplicationRequest) GetNumSync() int32 {
	if x != nil {
		return x.NumSync
	}
	return 0
}

func (x *ConfigureSynchronousReplicationRequest) GetStandbyIds() []*clustermetadata.ID {
	if x != nil {
		return x.StandbyIds
	}
	return nil
}

func (x *ConfigureSynchronousReplicationRequest) GetReloadConfig() bool {
	if x != nil {
		return x.ReloadConfig
	}
	return false
}

type ConfigureSynchronousReplicationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigureSynchronousReplicationResponse) Reset() {
	*x = ConfigureSynchronousReplicationResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureSynchronousReplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureSynchronousReplicationResponse) ProtoMessage() {}

func (x *ConfigureSynchronousReplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureSynchronousReplicationResponse.ProtoReflect.Descriptor instead.
func (*ConfigureSynchronousReplicationResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{35}
}

// Status gets the current status of the manager
type StatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{36}
}

type StatusResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Manager state (starting, ready, error)
	State string `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	// Error message if state is error
	ErrorMessage  string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{37}
}

func (x *StatusResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *StatusResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// SetTerm sets the consensus term information
type SetTermRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Consensus term information to set
	Term          *ConsensusTerm `protobuf:"bytes,1,opt,name=term,proto3" json:"term,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetTermRequest) Reset() {
	*x = SetTermRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTermRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTermRequest) ProtoMessage() {}

func (x *SetTermRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTermRequest.ProtoReflect.Descriptor instead.
func (*SetTermRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{38}
}

func (x *SetTermRequest) GetTerm() *ConsensusTerm {
	if x != nil {
		return x.Term
	}
	return nil
}

type SetTermResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetTermResponse) Reset() {
	*x = SetTermResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTermResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTermResponse) ProtoMessage() {}

func (x *SetTermResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTermResponse.ProtoReflect.Descriptor instead.
func (*SetTermResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{39}
}

// UpdateSynchronousStandbyList updates the synchronous standby list
type UpdateSynchronousStandbyListRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Operation to perform (add, remove, or replace)
	Operation StandbyUpdateOperation `protobuf:"varint,1,opt,name=operation,proto3,enum=multipoolermanagerdata.StandbyUpdateOperation" json:"operation,omitempty"`
	// List of standby multipooler IDs to add/remove/replace
	// The application names will be generated as {cell}_{name} from these IDs
	StandbyIds []*clustermetadata.ID `protobuf:"bytes,2,rep,name=standby_ids,json=standbyIds,proto3" json:"standby_ids,omitempty"`
	// Whether to reload configuration immediately
	ReloadConfig bool `protobuf:"varint,3,opt,name=reload_config,json=reloadConfig,proto3" json:"reload_config,omitempty"`
	// Consensus term (used by MultiOrch for term validation)
	ConsensusTerm int64 `protobuf:"varint,4,opt,name=consensus_term,json=consensusTerm,proto3" json:"consensus_term,omitempty"`
	// Force the operation even if the term doesn't match
	Force         bool `protobuf:"varint,5,opt,name=force,proto3" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSynchronousStandbyListRequest) Reset() {
	*x = UpdateSynchronousStandbyListRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSynchronousStandbyListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSynchronousStandbyListRequest) ProtoMessage() {}

func (x *UpdateSynchronousStandbyListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSynchronousStandbyListRequest.ProtoReflect.Descriptor instead.
func (*UpdateSynchronousStandbyListRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{40}
}

func (x *UpdateSynchronousStandbyListRequest) GetOperation() StandbyUpdateOperation {
	if x != nil {
		return x.Operation
	}
	return StandbyUpdateOperation_STANDBY_UPDATE_OPERATION_UNSPECIFIED
}

func (x *UpdateSynchronousStandbyListRequest) GetStandbyIds() []*clustermetadata.ID {
	if x != nil {
		return x.StandbyIds
	}
	return nil
}

func (x *UpdateSynchronousStandbyListRequest) GetReloadConfig() bool {
	if x != nil {
		return x.ReloadConfig
	}
	return false
}

func (x *UpdateSynchronousStandbyListRequest) GetConsensusTerm() int64 {
	if x != nil {
		return x.ConsensusTerm
	}
	return 0
}

func (x *UpdateSynchronousStandbyListRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type UpdateSynchronousStandbyListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSynchronousStandbyListResponse) Reset() {
	*x = UpdateSynchronousStandbyListResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSynchronousStandbyListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSynchronousStandbyListResponse) ProtoMessage() {}

func (x *UpdateSynchronousStandbyListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSynchronousStandbyListResponse.ProtoReflect.Descriptor instead.
func (*UpdateSynchronousStandbyListResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{41}
}

// ConsensusTerm represents the consensus term information for the pooler
// This is persisted to disk at $PGDATA/consensus/consensus_term.json
type ConsensusTerm struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current consensus term
	CurrentTerm int64 `protobuf:"varint,1,opt,name=current_term,json=currentTerm,proto3" json:"current_term,omitempty"`
	// ID of the pooler this replica voted for
	VotedFor *clustermetadata.ID `protobuf:"bytes,2,opt,name=voted_for,json=votedFor,proto3" json:"voted_for,omitempty"`
	// Timestamp of the last vote
	LastVoteTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_vote_time,json=lastVoteTime,proto3" json:"last_vote_time,omitempty"`
	// ID of the leader of the current term
	LeaderId      *clustermetadata.ID `protobuf:"bytes,4,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsensusTerm) Reset() {
	*x = ConsensusTerm{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsensusTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusTerm) ProtoMessage() {}

func (x *ConsensusTerm) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusTerm.ProtoReflect.Descriptor instead.
func (*ConsensusTerm) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{42}
}

func (x *ConsensusTerm) GetCurrentTerm() int64 {
	if x != nil {
		return x.CurrentTerm
	}
	return 0
}

func (x *ConsensusTerm) GetVotedFor() *clustermetadata.ID {
	if x != nil {
		return x.VotedFor
	}
	return nil
}

func (x *ConsensusTerm) GetLastVoteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastVoteTime
	}
	return nil
}

func (x *ConsensusTerm) GetLeaderId() *clustermetadata.ID {
	if x != nil {
		return x.LeaderId
	}
	return nil
}

var File_multipoolermanagerdata_proto protoreflect.FileDescriptor

const file_multipoolermanagerdata_proto_rawDesc = "" +
	"\n" +
	"\x1cmultipoolermanagerdata.proto\x12\x16multipoolermanagerdata\x1a\x15clustermetadata.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x8a\x01\n" +
	"\x0fPrimaryConnInfo\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x02 \x01(\x05R\x04port\x12\x12\n" +
	"\x04user\x18\x03 \x01(\tR\x04user\x12)\n" +
	"\x10application_name\x18\x04 \x01(\tR\x0fapplicationName\x12\x10\n" +
	"\x03raw\x18\x05 \x01(\tR\x03raw\"\xca\x02\n" +
	"\x11ReplicationStatus\x12\x10\n" +
	"\x03lsn\x18\x01 \x01(\tR\x03lsn\x12/\n" +
	"\x14is_wal_replay_paused\x18\x02 \x01(\bR\x11isWalReplayPaused\x123\n" +
	"\x16wal_replay_pause_state\x18\x03 \x01(\tR\x13walReplayPauseState\x12+\n" +
	"\x03lag\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\x03lag\x12;\n" +
	"\x1alast_xact_replay_timestamp\x18\x05 \x01(\tR\x17lastXactReplayTimestamp\x12S\n" +
	"\x11primary_conn_info\x18\x06 \x01(\v2'.multipoolermanagerdata.PrimaryConnInfoR\x0fprimaryConnInfo\"g\n" +
	"\x11WaitForLSNRequest\x12\x1d\n" +
	"\n" +
	"target_lsn\x18\x01 \x01(\tR\ttargetLsn\x123\n" +
	"\atimeout\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\atimeout\"\x14\n" +
	"\x12WaitForLSNResponse\"\x19\n" +
	"\x17StartReplicationRequest\"\x1a\n" +
	"\x18StartReplicationResponse\"\xec\x01\n" +
	"\x19SetPrimaryConnInfoRequest\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x02 \x01(\x05R\x04port\x126\n" +
	"\x17stop_replication_before\x18\x03 \x01(\bR\x15stopReplicationBefore\x126\n" +
	"\x17start_replication_after\x18\x04 \x01(\bR\x15startReplicationAfter\x12!\n" +
	"\fcurrent_term\x18\x05 \x01(\x03R\vcurrentTerm\x12\x14\n" +
	"\x05force\x18\x06 \x01(\bR\x05force\"\x1c\n" +
	"\x1aSetPrimaryConnInfoResponse\"\x18\n" +
	"\x16StopReplicationRequest\"\\\n" +
	"\x17StopReplicationResponse\x12A\n" +
	"\x06status\x18\x01 \x01(\v2).multipoolermanagerdata.ReplicationStatusR\x06status\"\x1a\n" +
	"\x18ReplicationStatusRequest\"^\n" +
	"\x19ReplicationStatusResponse\x12A\n" +
	"\x06status\x18\x01 \x01(\v2).multipoolermanagerdata.ReplicationStatusR\x06status\"\xaf\x02\n" +
	"#SynchronousReplicationConfiguration\x12]\n" +
	"\x12synchronous_commit\x18\x01 \x01(\x0e2..multipoolermanagerdata.SynchronousCommitLevelR\x11synchronousCommit\x12X\n" +
	"\x12synchronous_method\x18\x02 \x01(\x0e2).multipoolermanagerdata.SynchronousMethodR\x11synchronousMethod\x12\x19\n" +
	"\bnum_sync\x18\x03 \x01(\x05R\anumSync\x124\n" +
	"\vstandby_ids\x18\x04 \x03(\v2\x13.clustermetadata.IDR\n" +
	"standbyIds\"\xf2\x01\n" +
	"\rPrimaryStatus\x12\x10\n" +
	"\x03lsn\x18\x01 \x01(\tR\x03lsn\x12\x14\n" +
	"\x05ready\x18\x02 \x01(\bR\x05ready\x12D\n" +
	"\x13connected_followers\x18\x03 \x03(\v2\x13.clustermetadata.IDR\x12connectedFollowers\x12s\n" +
	"\x17sync_replication_config\x18\x04 \x01(\v2;.multipoolermanagerdata.SynchronousReplicationConfigurationR\x15syncReplicationConfig\"\x16\n" +
	"\x14PrimaryStatusRequest\"V\n" +
	"\x15PrimaryStatusResponse\x12=\n" +
	"\x06status\x18\x01 \x01(\v2%.multipoolermanagerdata.PrimaryStatusR\x06status\"\x18\n" +
	"\x16PrimaryPositionRequest\"<\n" +
	"\x17PrimaryPositionResponse\x12!\n" +
	"\flsn_position\x18\x01 \x01(\tR\vlsnPosition\"\x98\x03\n" +
	"\x10ReplicationStats\x12\x10\n" +
	"\x03pid\x18\x01 \x01(\x05R\x03pid\x12\x1f\n" +
	"\vclient_addr\x18\x02 \x01(\tR\n" +
	"clientAddr\x12\x14\n" +
	"\x05state\x18\x03 \x01(\tR\x05state\x12\x1d\n" +
	"\n" +
	"sync_state\x18\x04 \x01(\tR\tsyncState\x12\x19\n" +
	"\bsent_lsn\x18\x05 \x01(\tR\asentLsn\x12\x1b\n" +
	"\twrite_lsn\x18\x06 \x01(\tR\bwriteLsn\x12\x1b\n" +
	"\tflush_lsn\x18\a \x01(\tR\bflushLsn\x12\x1d\n" +
	"\n" +
	"replay_lsn\x18\b \x01(\tR\treplayLsn\x126\n" +
	"\twrite_lag\x18\t \x01(\v2\x19.google.protobuf.DurationR\bwriteLag\x126\n" +
	"\tflush_lag\x18\n" +
	" \x01(\v2\x19.google.protobuf.DurationR\bflushLag\x128\n" +
	"\n" +
	"replay_lag\x18\v \x01(\v2\x19.google.protobuf.DurationR\treplayLag\"\xe9\x01\n" +
	"\fFollowerInfo\x124\n" +
	"\vfollower_id\x18\x01 \x01(\v2\x13.clustermetadata.IDR\n" +
	"followerId\x12)\n" +
	"\x10application_name\x18\x02 \x01(\tR\x0fapplicationName\x12!\n" +
	"\fis_connected\x18\x03 \x01(\bR\visConnected\x12U\n" +
	"\x11replication_stats\x18\x04 \x01(\v2(.multipoolermanagerdata.ReplicationStatsR\x10replicationStats\"\x15\n" +
	"\x13GetFollowersRequest\"\xb8\x01\n" +
	"\x14GetFollowersResponse\x12B\n" +
	"\tfollowers\x18\x01 \x03(\v2$.multipoolermanagerdata.FollowerInfoR\tfollowers\x12\\\n" +
	"\vsync_config\x18\x02 \x01(\v2;.multipoolermanagerdata.SynchronousReplicationConfigurationR\n" +
	"syncConfig\"\x8c\x01\n" +
	"\rDemoteRequest\x12%\n" +
	"\x0econsensus_term\x18\x01 \x01(\x03R\rconsensusTerm\x12>\n" +
	"\rdrain_timeout\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\fdrainTimeout\x12\x14\n" +
	"\x05force\x18\x03 \x01(\bR\x05force\"\xc1\x01\n" +
	"\x0eDemoteResponse\x12.\n" +
	"\x13was_already_demoted\x18\x01 \x01(\bR\x11wasAlreadyDemoted\x12%\n" +
	"\x0econsensus_term\x18\x02 \x01(\x03R\rconsensusTerm\x12!\n" +
	"\flsn_position\x18\x03 \x01(\tR\vlsnPosition\x125\n" +
	"\x16connections_terminated\x18\x04 \x01(\x05R\x15connectionsTerminated\"\x13\n" +
	"\x11UndoDemoteRequest\"\x14\n" +
	"\x12UndoDemoteResponse\"$\n" +
	"\"StopReplicationAndGetStatusRequest\"h\n" +
	"#StopReplicationAndGetStatusResponse\x12A\n" +
	"\x06status\x18\x01 \x01(\v2).multipoolermanagerdata.ReplicationStatusR\x06status\"Q\n" +
	"\x11ChangeTypeRequest\x12<\n" +
	"\vpooler_type\x18\x01 \x01(\x0e2\x1b.clustermetadata.PoolerTypeR\n" +
	"poolerType\"\x14\n" +
	"\x12ChangeTypeResponse\"\xe8\x01\n" +
	"\x0ePromoteRequest\x12%\n" +
	"\x0econsensus_term\x18\x01 \x01(\x03R\rconsensusTerm\x12!\n" +
	"\fexpected_lsn\x18\x02 \x01(\tR\vexpectedLsn\x12v\n" +
	"\x17sync_replication_config\x18\x03 \x01(\v2>.multipoolermanagerdata.ConfigureSynchronousReplicationRequestR\x15syncReplicationConfig\x12\x14\n" +
	"\x05force\x18\x04 \x01(\bR\x05force\"\x8b\x01\n" +
	"\x0fPromoteResponse\x12!\n" +
	"\flsn_position\x18\x01 \x01(\tR\vlsnPosition\x12.\n" +
	"\x13was_already_primary\x18\x02 \x01(\bR\x11wasAlreadyPrimary\x12%\n" +
	"\x0econsensus_term\x18\x03 \x01(\x03R\rconsensusTerm\"\x19\n" +
	"\x17ResetReplicationRequest\"]\n" +
	"\x18ResetReplicationResponse\x12A\n" +
	"\x06status\x18\x01 \x01(\v2).multipoolermanagerdata.ReplicationStatusR\x06status\"\xd7\x02\n" +
	"&ConfigureSynchronousReplicationRequest\x12]\n" +
	"\x12synchronous_commit\x18\x01 \x01(\x0e2..multipoolermanagerdata.SynchronousCommitLevelR\x11synchronousCommit\x12X\n" +
	"\x12synchronous_method\x18\x02 \x01(\x0e2).multipoolermanagerdata.SynchronousMethodR\x11synchronousMethod\x12\x19\n" +
	"\bnum_sync\x18\x03 \x01(\x05R\anumSync\x124\n" +
	"\vstandby_ids\x18\x04 \x03(\v2\x13.clustermetadata.IDR\n" +
	"standbyIds\x12#\n" +
	"\rreload_config\x18\x05 \x01(\bR\freloadConfig\")\n" +
	"'ConfigureSynchronousReplicationResponse\"\x0f\n" +
	"\rStatusRequest\"K\n" +
	"\x0eStatusResponse\x12\x14\n" +
	"\x05state\x18\x01 \x01(\tR\x05state\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\"K\n" +
	"\x0eSetTermRequest\x129\n" +
	"\x04term\x18\x01 \x01(\v2%.multipoolermanagerdata.ConsensusTermR\x04term\"\x11\n" +
	"\x0fSetTermResponse\"\x8b\x02\n" +
	"#UpdateSynchronousStandbyListRequest\x12L\n" +
	"\toperation\x18\x01 \x01(\x0e2..multipoolermanagerdata.StandbyUpdateOperationR\toperation\x124\n" +
	"\vstandby_ids\x18\x02 \x03(\v2\x13.clustermetadata.IDR\n" +
	"standbyIds\x12#\n" +
	"\rreload_config\x18\x03 \x01(\bR\freloadConfig\x12%\n" +
	"\x0econsensus_term\x18\x04 \x01(\x03R\rconsensusTerm\x12\x14\n" +
	"\x05force\x18\x05 \x01(\bR\x05force\"&\n" +
	"$UpdateSynchronousStandbyListResponse\"\xd8\x01\n" +
	"\rConsensusTerm\x12!\n" +
	"\fcurrent_term\x18\x01 \x01(\x03R\vcurrentTerm\x120\n" +
	"\tvoted_for\x18\x02 \x01(\v2\x13.clustermetadata.IDR\bvotedFor\x12@\n" +
	"\x0elast_vote_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\flastVoteTime\x120\n" +
	"\tleader_id\x18\x04 \x01(\v2\x13.clustermetadata.IDR\bleaderId*q\n" +
	"\x11SynchronousMethod\x12\"\n" +
	"\x1eSYNCHRONOUS_METHOD_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18SYNCHRONOUS_METHOD_FIRST\x10\x01\x12\x1a\n" +
	"\x16SYNCHRONOUS_METHOD_ANY\x10\x02*\xaf\x01\n" +
	"\x16StandbyUpdateOperation\x12(\n" +
	"$STANDBY_UPDATE_OPERATION_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cSTANDBY_UPDATE_OPERATION_ADD\x10\x01\x12#\n" +
	"\x1fSTANDBY_UPDATE_OPERATION_REMOVE\x10\x02\x12$\n" +
	" STANDBY_UPDATE_OPERATION_REPLACE\x10\x03*\xb7\x01\n" +
	"\x16SynchronousCommitLevel\x12\x1a\n" +
	"\x16SYNCHRONOUS_COMMIT_OFF\x10\x00\x12\x1c\n" +
	"\x18SYNCHRONOUS_COMMIT_LOCAL\x10\x01\x12#\n" +
	"\x1fSYNCHRONOUS_COMMIT_REMOTE_WRITE\x10\x02\x12\x19\n" +
	"\x15SYNCHRONOUS_COMMIT_ON\x10\x03\x12#\n" +
	"\x1fSYNCHRONOUS_COMMIT_REMOTE_APPLY\x10\x04B=Z;github.com/multigres/multigres/go/pb/multipoolermanagerdatab\x06proto3"

var (
	file_multipoolermanagerdata_proto_rawDescOnce sync.Once
	file_multipoolermanagerdata_proto_rawDescData []byte
)

func file_multipoolermanagerdata_proto_rawDescGZIP() []byte {
	file_multipoolermanagerdata_proto_rawDescOnce.Do(func() {
		file_multipoolermanagerdata_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_multipoolermanagerdata_proto_rawDesc), len(file_multipoolermanagerdata_proto_rawDesc)))
	})
	return file_multipoolermanagerdata_proto_rawDescData
}

var file_multipoolermanagerdata_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_multipoolermanagerdata_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_multipoolermanagerdata_proto_goTypes = []any{
	(SynchronousMethod)(0),                          // 0: multipoolermanagerdata.SynchronousMethod
	(StandbyUpdateOperation)(0),                     // 1: multipoolermanagerdata.StandbyUpdateOperation
	(SynchronousCommitLevel)(0),                     // 2: multipoolermanagerdata.SynchronousCommitLevel
	(*PrimaryConnInfo)(nil),                         // 3: multipoolermanagerdata.PrimaryConnInfo
	(*ReplicationStatus)(nil),                       // 4: multipoolermanagerdata.ReplicationStatus
	(*WaitForLSNRequest)(nil),                       // 5: multipoolermanagerdata.WaitForLSNRequest
	(*WaitForLSNResponse)(nil),                      // 6: multipoolermanagerdata.WaitForLSNResponse
	(*StartReplicationRequest)(nil),                 // 7: multipoolermanagerdata.StartReplicationRequest
	(*StartReplicationResponse)(nil),                // 8: multipoolermanagerdata.StartReplicationResponse
	(*SetPrimaryConnInfoRequest)(nil),               // 9: multipoolermanagerdata.SetPrimaryConnInfoRequest
	(*SetPrimaryConnInfoResponse)(nil),              // 10: multipoolermanagerdata.SetPrimaryConnInfoResponse
	(*StopReplicationRequest)(nil),                  // 11: multipoolermanagerdata.StopReplicationRequest
	(*StopReplicationResponse)(nil),                 // 12: multipoolermanagerdata.StopReplicationResponse
	(*ReplicationStatusRequest)(nil),                // 13: multipoolermanagerdata.ReplicationStatusRequest
	(*ReplicationStatusResponse)(nil),               // 14: multipoolermanagerdata.ReplicationStatusResponse
	(*SynchronousReplicationConfiguration)(nil),     // 15: multipoolermanagerdata.SynchronousReplicationConfiguration
	(*PrimaryStatus)(nil),                           // 16: multipoolermanagerdata.PrimaryStatus
	(*PrimaryStatusRequest)(nil),                    // 17: multipoolermanagerdata.PrimaryStatusRequest
	(*PrimaryStatusResponse)(nil),                   // 18: multipoolermanagerdata.PrimaryStatusResponse
	(*PrimaryPositionRequest)(nil),                  // 19: multipoolermanagerdata.PrimaryPositionRequest
	(*PrimaryPositionResponse)(nil),                 // 20: multipoolermanagerdata.PrimaryPositionResponse
	(*ReplicationStats)(nil),                        // 21: multipoolermanagerdata.ReplicationStats
	(*FollowerInfo)(nil),                            // 22: multipoolermanagerdata.FollowerInfo
	(*GetFollowersRequest)(nil),                     // 23: multipoolermanagerdata.GetFollowersRequest
	(*GetFollowersResponse)(nil),                    // 24: multipoolermanagerdata.GetFollowersResponse
	(*DemoteRequest)(nil),                           // 25: multipoolermanagerdata.DemoteRequest
	(*DemoteResponse)(nil),                          // 26: multipoolermanagerdata.DemoteResponse
	(*UndoDemoteRequest)(nil),                       // 27: multipoolermanagerdata.UndoDemoteRequest
	(*UndoDemoteResponse)(nil),                      // 28: multipoolermanagerdata.UndoDemoteResponse
	(*StopReplicationAndGetStatusRequest)(nil),      // 29: multipoolermanagerdata.StopReplicationAndGetStatusRequest
	(*StopReplicationAndGetStatusResponse)(nil),     // 30: multipoolermanagerdata.StopReplicationAndGetStatusResponse
	(*ChangeTypeRequest)(nil),                       // 31: multipoolermanagerdata.ChangeTypeRequest
	(*ChangeTypeResponse)(nil),                      // 32: multipoolermanagerdata.ChangeTypeResponse
	(*PromoteRequest)(nil),                          // 33: multipoolermanagerdata.PromoteRequest
	(*PromoteResponse)(nil),                         // 34: multipoolermanagerdata.PromoteResponse
	(*ResetReplicationRequest)(nil),                 // 35: multipoolermanagerdata.ResetReplicationRequest
	(*ResetReplicationResponse)(nil),                // 36: multipoolermanagerdata.ResetReplicationResponse
	(*ConfigureSynchronousReplicationRequest)(nil),  // 37: multipoolermanagerdata.ConfigureSynchronousReplicationRequest
	(*ConfigureSynchronousReplicationResponse)(nil), // 38: multipoolermanagerdata.ConfigureSynchronousReplicationResponse
	(*StatusRequest)(nil),                           // 39: multipoolermanagerdata.StatusRequest
	(*StatusResponse)(nil),                          // 40: multipoolermanagerdata.StatusResponse
	(*SetTermRequest)(nil),                          // 41: multipoolermanagerdata.SetTermRequest
	(*SetTermResponse)(nil),                         // 42: multipoolermanagerdata.SetTermResponse
	(*UpdateSynchronousStandbyListRequest)(nil),     // 43: multipoolermanagerdata.UpdateSynchronousStandbyListRequest
	(*UpdateSynchronousStandbyListResponse)(nil),    // 44: multipoolermanagerdata.UpdateSynchronousStandbyListResponse
	(*ConsensusTerm)(nil),                           // 45: multipoolermanagerdata.ConsensusTerm
	(*durationpb.Duration)(nil),                     // 46: google.protobuf.Duration
	(*clustermetadata.ID)(nil),                      // 47: clustermetadata.ID
	(clustermetadata.PoolerType)(0),                 // 48: clustermetadata.PoolerType
	(*timestamppb.Timestamp)(nil),                   // 49: google.protobuf.Timestamp
}
var file_multipoolermanagerdata_proto_depIdxs = []int32{
	46, // 0: multipoolermanagerdata.ReplicationStatus.lag:type_name -> google.protobuf.Duration
	3,  // 1: multipoolermanagerdata.ReplicationStatus.primary_conn_info:type_name -> multipoolermanagerdata.PrimaryConnInfo
	46, // 2: multipoolermanagerdata.WaitForLSNRequest.timeout:type_name -> google.protobuf.Duration
	4,  // 3: multipoolermanagerdata.StopReplicationResponse.status:type_name -> multipoolermanagerdata.ReplicationStatus
	4,  // 4: multipoolermanagerdata.ReplicationStatusResponse.status:type_name -> multipoolermanagerdata.ReplicationStatus
	2,  // 5: multipoolermanagerdata.SynchronousReplicationConfiguration.synchronous_commit:type_name -> multipoolermanagerdata.SynchronousCommitLevel
	0,  // 6: multipoolermanagerdata.SynchronousReplicationConfiguration.synchronous_method:type_name -> multipoolermanagerdata.SynchronousMethod
	47, // 7: multipoolermanagerdata.SynchronousReplicationConfiguration.standby_ids:type_name -> clustermetadata.ID
	47, // 8: multipoolermanagerdata.PrimaryStatus.connected_followers:type_name -> clustermetadata.ID
	15, // 9: multipoolermanagerdata.PrimaryStatus.sync_replication_config:type_name -> multipoolermanagerdata.SynchronousReplicationConfiguration
	16, // 10: multipoolermanagerdata.PrimaryStatusResponse.status:type_name -> multipoolermanagerdata.PrimaryStatus
	46, // 11: multipoolermanagerdata.ReplicationStats.write_lag:type_name -> google.protobuf.Duration
	46, // 12: multipoolermanagerdata.ReplicationStats.flush_lag:type_name -> google.protobuf.Duration
	46, // 13: multipoolermanagerdata.ReplicationStats.replay_lag:type_name -> google.protobuf.Duration
	47, // 14: multipoolermanagerdata.FollowerInfo.follower_id:type_name -> clustermetadata.ID
	21, // 15: multipoolermanagerdata.FollowerInfo.replication_stats:type_name -> multipoolermanagerdata.ReplicationStats
	22, // 16: multipoolermanagerdata.GetFollowersResponse.followers:type_name -> multipoolermanagerdata.FollowerInfo
	15, // 17: multipoolermanagerdata.GetFollowersResponse.sync_config:type_name -> multipoolermanagerdata.SynchronousReplicationConfiguration
	46, // 18: multipoolermanagerdata.DemoteRequest.drain_timeout:type_name -> google.protobuf.Duration
	4,  // 19: multipoolermanagerdata.StopReplicationAndGetStatusResponse.status:type_name -> multipoolermanagerdata.ReplicationStatus
	48, // 20: multipoolermanagerdata.ChangeTypeRequest.pooler_type:type_name -> clustermetadata.PoolerType
	37, // 21: multipoolermanagerdata.PromoteRequest.sync_replication_config:type_name -> multipoolermanagerdata.ConfigureSynchronousReplicationRequest
	4,  // 22: multipoolermanagerdata.ResetReplicationResponse.status:type_name -> multipoolermanagerdata.ReplicationStatus
	2,  // 23: multipoolermanagerdata.ConfigureSynchronousReplicationRequest.synchronous_commit:type_name -> multipoolermanagerdata.SynchronousCommitLevel
	0,  // 24: multipoolermanagerdata.ConfigureSynchronousReplicationRequest.synchronous_method:type_name -> multipoolermanagerdata.SynchronousMethod
	47, // 25: multipoolermanagerdata.ConfigureSynchronousReplicationRequest.standby_ids:type_name -> clustermetadata.ID
	45, // 26: multipoolermanagerdata.SetTermRequest.term:type_name -> multipoolermanagerdata.ConsensusTerm
	1,  // 27: multipoolermanagerdata.UpdateSynchronousStandbyListRequest.operation:type_name -> multipoolermanagerdata.StandbyUpdateOperation
	47, // 28: multipoolermanagerdata.UpdateSynchronousStandbyListRequest.standby_ids:type_name -> clustermetadata.ID
	47, // 29: multipoolermanagerdata.ConsensusTerm.voted_for:type_name -> clustermetadata.ID
	49, // 30: multipoolermanagerdata.ConsensusTerm.last_vote_time:type_name -> google.protobuf.Timestamp
	47, // 31: multipoolermanagerdata.ConsensusTerm.leader_id:type_name -> clustermetadata.ID
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_multipoolermanagerdata_proto_init() }
func file_multipoolermanagerdata_proto_init() {
	if File_multipoolermanagerdata_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_multipoolermanagerdata_proto_rawDesc), len(file_multipoolermanagerdata_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_multipoolermanagerdata_proto_goTypes,
		DependencyIndexes: file_multipoolermanagerdata_proto_depIdxs,
		EnumInfos:         file_multipoolermanagerdata_proto_enumTypes,
		MessageInfos:      file_multipoolermanagerdata_proto_msgTypes,
	}.Build()
	File_multipoolermanagerdata_proto = out.File
	file_multipoolermanagerdata_proto_goTypes = nil
	file_multipoolermanagerdata_proto_depIdxs = nil
}
