// Copyright 2025 Supabase, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v4.25.1
// source: multipoolermanagerdata.proto

package multipoolermanagerdata

import (
	clustermetadata "github.com/multigres/multigres/go/pb/clustermetadata"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Synchronization method for standby servers
type SynchronousMethod int32

const (
	// UNSPECIFIED means no synchronous replication (empty synchronous_standby_names)
	SynchronousMethod_SYNCHRONOUS_METHOD_UNSPECIFIED SynchronousMethod = 0
	// FIRST means wait for the first N standby servers (PostgreSQL default)
	SynchronousMethod_SYNCHRONOUS_METHOD_FIRST SynchronousMethod = 1
	// ANY means wait for any N standby servers
	SynchronousMethod_SYNCHRONOUS_METHOD_ANY SynchronousMethod = 2
)

// Enum value maps for SynchronousMethod.
var (
	SynchronousMethod_name = map[int32]string{
		0: "SYNCHRONOUS_METHOD_UNSPECIFIED",
		1: "SYNCHRONOUS_METHOD_FIRST",
		2: "SYNCHRONOUS_METHOD_ANY",
	}
	SynchronousMethod_value = map[string]int32{
		"SYNCHRONOUS_METHOD_UNSPECIFIED": 0,
		"SYNCHRONOUS_METHOD_FIRST":       1,
		"SYNCHRONOUS_METHOD_ANY":         2,
	}
)

func (x SynchronousMethod) Enum() *SynchronousMethod {
	p := new(SynchronousMethod)
	*p = x
	return p
}

func (x SynchronousMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SynchronousMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_multipoolermanagerdata_proto_enumTypes[0].Descriptor()
}

func (SynchronousMethod) Type() protoreflect.EnumType {
	return &file_multipoolermanagerdata_proto_enumTypes[0]
}

func (x SynchronousMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SynchronousMethod.Descriptor instead.
func (SynchronousMethod) EnumDescriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{0}
}

// Synchronous commit level
type SynchronousCommitLevel int32

const (
	// OFF disables synchronous commit
	SynchronousCommitLevel_SYNCHRONOUS_COMMIT_OFF SynchronousCommitLevel = 0
	// LOCAL waits for local flush to disk
	SynchronousCommitLevel_SYNCHRONOUS_COMMIT_LOCAL SynchronousCommitLevel = 1
	// REMOTE_WRITE waits for standby to receive and write WAL
	SynchronousCommitLevel_SYNCHRONOUS_COMMIT_REMOTE_WRITE SynchronousCommitLevel = 2
	// ON waits for standby to receive, write, and flush WAL (same as remote_apply in newer versions)
	SynchronousCommitLevel_SYNCHRONOUS_COMMIT_ON SynchronousCommitLevel = 3
	// REMOTE_APPLY waits for standby to receive, write, flush, and apply WAL
	SynchronousCommitLevel_SYNCHRONOUS_COMMIT_REMOTE_APPLY SynchronousCommitLevel = 4
)

// Enum value maps for SynchronousCommitLevel.
var (
	SynchronousCommitLevel_name = map[int32]string{
		0: "SYNCHRONOUS_COMMIT_OFF",
		1: "SYNCHRONOUS_COMMIT_LOCAL",
		2: "SYNCHRONOUS_COMMIT_REMOTE_WRITE",
		3: "SYNCHRONOUS_COMMIT_ON",
		4: "SYNCHRONOUS_COMMIT_REMOTE_APPLY",
	}
	SynchronousCommitLevel_value = map[string]int32{
		"SYNCHRONOUS_COMMIT_OFF":          0,
		"SYNCHRONOUS_COMMIT_LOCAL":        1,
		"SYNCHRONOUS_COMMIT_REMOTE_WRITE": 2,
		"SYNCHRONOUS_COMMIT_ON":           3,
		"SYNCHRONOUS_COMMIT_REMOTE_APPLY": 4,
	}
)

func (x SynchronousCommitLevel) Enum() *SynchronousCommitLevel {
	p := new(SynchronousCommitLevel)
	*p = x
	return p
}

func (x SynchronousCommitLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SynchronousCommitLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_multipoolermanagerdata_proto_enumTypes[1].Descriptor()
}

func (SynchronousCommitLevel) Type() protoreflect.EnumType {
	return &file_multipoolermanagerdata_proto_enumTypes[1]
}

func (x SynchronousCommitLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SynchronousCommitLevel.Descriptor instead.
func (SynchronousCommitLevel) EnumDescriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{1}
}

// PostgreSQL replication status information
type ReplicationStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current replication LSN position (PostgreSQL format: X/XXXXXXXX)
	Lsn string `protobuf:"bytes,1,opt,name=lsn,proto3" json:"lsn,omitempty"`
	// Result of pg_is_wal_replay_paused()
	IsWalReplayPaused bool `protobuf:"varint,2,opt,name=is_wal_replay_paused,json=isWalReplayPaused,proto3" json:"is_wal_replay_paused,omitempty"`
	// Result of pg_get_wal_replay_pause_state()
	WalReplayPauseState string `protobuf:"bytes,3,opt,name=wal_replay_pause_state,json=walReplayPauseState,proto3" json:"wal_replay_pause_state,omitempty"`
	// Replication lag (optional, may not always be available)
	Lag *durationpb.Duration `protobuf:"bytes,4,opt,name=lag,proto3" json:"lag,omitempty"`
	// Result of pg_last_xact_replay_timestamp()
	LastXactReplayTimestamp string `protobuf:"bytes,5,opt,name=last_xact_replay_timestamp,json=lastXactReplayTimestamp,proto3" json:"last_xact_replay_timestamp,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ReplicationStatus) Reset() {
	*x = ReplicationStatus{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationStatus) ProtoMessage() {}

func (x *ReplicationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationStatus.ProtoReflect.Descriptor instead.
func (*ReplicationStatus) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{0}
}

func (x *ReplicationStatus) GetLsn() string {
	if x != nil {
		return x.Lsn
	}
	return ""
}

func (x *ReplicationStatus) GetIsWalReplayPaused() bool {
	if x != nil {
		return x.IsWalReplayPaused
	}
	return false
}

func (x *ReplicationStatus) GetWalReplayPauseState() string {
	if x != nil {
		return x.WalReplayPauseState
	}
	return ""
}

func (x *ReplicationStatus) GetLag() *durationpb.Duration {
	if x != nil {
		return x.Lag
	}
	return nil
}

func (x *ReplicationStatus) GetLastXactReplayTimestamp() string {
	if x != nil {
		return x.LastXactReplayTimestamp
	}
	return ""
}

// Wait for PostgreSQL server to reach a specific LSN position
type WaitForLSNRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Target LSN position to wait for (PostgreSQL LSN format: X/XXXXXXXX)
	TargetLsn string `protobuf:"bytes,1,opt,name=target_lsn,json=targetLsn,proto3" json:"target_lsn,omitempty"`
	// Timeout (zero duration means no timeout)
	Timeout       *durationpb.Duration `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WaitForLSNRequest) Reset() {
	*x = WaitForLSNRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaitForLSNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForLSNRequest) ProtoMessage() {}

func (x *WaitForLSNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForLSNRequest.ProtoReflect.Descriptor instead.
func (*WaitForLSNRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{1}
}

func (x *WaitForLSNRequest) GetTargetLsn() string {
	if x != nil {
		return x.TargetLsn
	}
	return ""
}

func (x *WaitForLSNRequest) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type WaitForLSNResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WaitForLSNResponse) Reset() {
	*x = WaitForLSNResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaitForLSNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForLSNResponse) ProtoMessage() {}

func (x *WaitForLSNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForLSNResponse.ProtoReflect.Descriptor instead.
func (*WaitForLSNResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{2}
}

// Start PostgreSQL replication (calls pg_wal_replay_resume)
type StartReplicationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartReplicationRequest) Reset() {
	*x = StartReplicationRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartReplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartReplicationRequest) ProtoMessage() {}

func (x *StartReplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartReplicationRequest.ProtoReflect.Descriptor instead.
func (*StartReplicationRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{3}
}

type StartReplicationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartReplicationResponse) Reset() {
	*x = StartReplicationResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartReplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartReplicationResponse) ProtoMessage() {}

func (x *StartReplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartReplicationResponse.ProtoReflect.Descriptor instead.
func (*StartReplicationResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{4}
}

// SetReadOnly makes the PostgreSQL instance read-only
type SetReadOnlyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetReadOnlyRequest) Reset() {
	*x = SetReadOnlyRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetReadOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetReadOnlyRequest) ProtoMessage() {}

func (x *SetReadOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetReadOnlyRequest.ProtoReflect.Descriptor instead.
func (*SetReadOnlyRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{5}
}

type SetReadOnlyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetReadOnlyResponse) Reset() {
	*x = SetReadOnlyResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetReadOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetReadOnlyResponse) ProtoMessage() {}

func (x *SetReadOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetReadOnlyResponse.ProtoReflect.Descriptor instead.
func (*SetReadOnlyResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{6}
}

// IsReadOnly checks if PostgreSQL instance is in read-only mode
type IsReadOnlyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsReadOnlyRequest) Reset() {
	*x = IsReadOnlyRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsReadOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsReadOnlyRequest) ProtoMessage() {}

func (x *IsReadOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsReadOnlyRequest.ProtoReflect.Descriptor instead.
func (*IsReadOnlyRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{7}
}

type IsReadOnlyResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the instance is in read-only mode
	ReadOnly      bool `protobuf:"varint,1,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsReadOnlyResponse) Reset() {
	*x = IsReadOnlyResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsReadOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsReadOnlyResponse) ProtoMessage() {}

func (x *IsReadOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsReadOnlyResponse.ProtoReflect.Descriptor instead.
func (*IsReadOnlyResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{8}
}

func (x *IsReadOnlyResponse) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

// SetPrimaryConnInfo sets the primary connection info for a standby server
type SetPrimaryConnInfoRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Primary server hostname
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Primary server port
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Heartbeat interval
	HeartbeatInterval *durationpb.Duration `protobuf:"bytes,3,opt,name=heartbeat_interval,json=heartbeatInterval,proto3" json:"heartbeat_interval,omitempty"`
	// Whether to stop replication before making changes
	StopReplicationBefore bool `protobuf:"varint,4,opt,name=stop_replication_before,json=stopReplicationBefore,proto3" json:"stop_replication_before,omitempty"`
	// Whether to start replication after making changes
	StartReplicationAfter bool `protobuf:"varint,5,opt,name=start_replication_after,json=startReplicationAfter,proto3" json:"start_replication_after,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SetPrimaryConnInfoRequest) Reset() {
	*x = SetPrimaryConnInfoRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPrimaryConnInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPrimaryConnInfoRequest) ProtoMessage() {}

func (x *SetPrimaryConnInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPrimaryConnInfoRequest.ProtoReflect.Descriptor instead.
func (*SetPrimaryConnInfoRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{9}
}

func (x *SetPrimaryConnInfoRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SetPrimaryConnInfoRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SetPrimaryConnInfoRequest) GetHeartbeatInterval() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatInterval
	}
	return nil
}

func (x *SetPrimaryConnInfoRequest) GetStopReplicationBefore() bool {
	if x != nil {
		return x.StopReplicationBefore
	}
	return false
}

func (x *SetPrimaryConnInfoRequest) GetStartReplicationAfter() bool {
	if x != nil {
		return x.StartReplicationAfter
	}
	return false
}

type SetPrimaryConnInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetPrimaryConnInfoResponse) Reset() {
	*x = SetPrimaryConnInfoResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPrimaryConnInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPrimaryConnInfoResponse) ProtoMessage() {}

func (x *SetPrimaryConnInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPrimaryConnInfoResponse.ProtoReflect.Descriptor instead.
func (*SetPrimaryConnInfoResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{10}
}

// StopReplication stops WAL replay on standby
type StopReplicationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopReplicationRequest) Reset() {
	*x = StopReplicationRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopReplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopReplicationRequest) ProtoMessage() {}

func (x *StopReplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopReplicationRequest.ProtoReflect.Descriptor instead.
func (*StopReplicationRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{11}
}

type StopReplicationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Replication status when replication was stopped
	Status        *ReplicationStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopReplicationResponse) Reset() {
	*x = StopReplicationResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopReplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopReplicationResponse) ProtoMessage() {}

func (x *StopReplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopReplicationResponse.ProtoReflect.Descriptor instead.
func (*StopReplicationResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{12}
}

func (x *StopReplicationResponse) GetStatus() *ReplicationStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// ReplicationStatus gets the current replication status
type ReplicationStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicationStatusRequest) Reset() {
	*x = ReplicationStatusRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationStatusRequest) ProtoMessage() {}

func (x *ReplicationStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationStatusRequest.ProtoReflect.Descriptor instead.
func (*ReplicationStatusRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{13}
}

type ReplicationStatusResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current replication status
	Status        *ReplicationStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicationStatusResponse) Reset() {
	*x = ReplicationStatusResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationStatusResponse) ProtoMessage() {}

func (x *ReplicationStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationStatusResponse.ProtoReflect.Descriptor instead.
func (*ReplicationStatusResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{14}
}

func (x *ReplicationStatusResponse) GetStatus() *ReplicationStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// PostgreSQL primary server status
type PrimaryStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current WAL LSN position (PostgreSQL format: X/XXXXXXXX)
	Lsn string `protobuf:"bytes,1,opt,name=lsn,proto3" json:"lsn,omitempty"`
	// Whether server is accepting connections
	Ready bool `protobuf:"varint,2,opt,name=ready,proto3" json:"ready,omitempty"`
	// Connected follower servers
	Followers     []string `protobuf:"bytes,3,rep,name=followers,proto3" json:"followers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrimaryStatus) Reset() {
	*x = PrimaryStatus{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrimaryStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryStatus) ProtoMessage() {}

func (x *PrimaryStatus) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryStatus.ProtoReflect.Descriptor instead.
func (*PrimaryStatus) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{15}
}

func (x *PrimaryStatus) GetLsn() string {
	if x != nil {
		return x.Lsn
	}
	return ""
}

func (x *PrimaryStatus) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *PrimaryStatus) GetFollowers() []string {
	if x != nil {
		return x.Followers
	}
	return nil
}

// PrimaryStatus gets the status of the primary server
type PrimaryStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrimaryStatusRequest) Reset() {
	*x = PrimaryStatusRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrimaryStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryStatusRequest) ProtoMessage() {}

func (x *PrimaryStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryStatusRequest.ProtoReflect.Descriptor instead.
func (*PrimaryStatusRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{16}
}

type PrimaryStatusResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Primary server status
	Status        *PrimaryStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrimaryStatusResponse) Reset() {
	*x = PrimaryStatusResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrimaryStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryStatusResponse) ProtoMessage() {}

func (x *PrimaryStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryStatusResponse.ProtoReflect.Descriptor instead.
func (*PrimaryStatusResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{17}
}

func (x *PrimaryStatusResponse) GetStatus() *PrimaryStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// PrimaryPosition gets the current LSN position of the primary
type PrimaryPositionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrimaryPositionRequest) Reset() {
	*x = PrimaryPositionRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrimaryPositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryPositionRequest) ProtoMessage() {}

func (x *PrimaryPositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryPositionRequest.ProtoReflect.Descriptor instead.
func (*PrimaryPositionRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{18}
}

type PrimaryPositionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current primary LSN position
	LsnPosition   string `protobuf:"bytes,1,opt,name=lsn_position,json=lsnPosition,proto3" json:"lsn_position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrimaryPositionResponse) Reset() {
	*x = PrimaryPositionResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrimaryPositionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryPositionResponse) ProtoMessage() {}

func (x *PrimaryPositionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryPositionResponse.ProtoReflect.Descriptor instead.
func (*PrimaryPositionResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{19}
}

func (x *PrimaryPositionResponse) GetLsnPosition() string {
	if x != nil {
		return x.LsnPosition
	}
	return ""
}

// GetFollowers gets the list of follower servers
type GetFollowersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFollowersRequest) Reset() {
	*x = GetFollowersRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFollowersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFollowersRequest) ProtoMessage() {}

func (x *GetFollowersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFollowersRequest.ProtoReflect.Descriptor instead.
func (*GetFollowersRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{20}
}

type GetFollowersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of follower server addresses
	FollowerAddresses []string `protobuf:"bytes,1,rep,name=follower_addresses,json=followerAddresses,proto3" json:"follower_addresses,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetFollowersResponse) Reset() {
	*x = GetFollowersResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFollowersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFollowersResponse) ProtoMessage() {}

func (x *GetFollowersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFollowersResponse.ProtoReflect.Descriptor instead.
func (*GetFollowersResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{21}
}

func (x *GetFollowersResponse) GetFollowerAddresses() []string {
	if x != nil {
		return x.FollowerAddresses
	}
	return nil
}

// Demote demotes the current leader server
type DemoteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DemoteRequest) Reset() {
	*x = DemoteRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DemoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemoteRequest) ProtoMessage() {}

func (x *DemoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemoteRequest.ProtoReflect.Descriptor instead.
func (*DemoteRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{22}
}

type DemoteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Leader status after demotion
	LeaderStatus  *PrimaryStatus `protobuf:"bytes,1,opt,name=leader_status,json=leaderStatus,proto3" json:"leader_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DemoteResponse) Reset() {
	*x = DemoteResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DemoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemoteResponse) ProtoMessage() {}

func (x *DemoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemoteResponse.ProtoReflect.Descriptor instead.
func (*DemoteResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{23}
}

func (x *DemoteResponse) GetLeaderStatus() *PrimaryStatus {
	if x != nil {
		return x.LeaderStatus
	}
	return nil
}

// UndoDemote undoes a demotion
type UndoDemoteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UndoDemoteRequest) Reset() {
	*x = UndoDemoteRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UndoDemoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoDemoteRequest) ProtoMessage() {}

func (x *UndoDemoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoDemoteRequest.ProtoReflect.Descriptor instead.
func (*UndoDemoteRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{24}
}

type UndoDemoteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UndoDemoteResponse) Reset() {
	*x = UndoDemoteResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UndoDemoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoDemoteResponse) ProtoMessage() {}

func (x *UndoDemoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoDemoteResponse.ProtoReflect.Descriptor instead.
func (*UndoDemoteResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{25}
}

// StopReplicationAndGetStatus stops PostgreSQL replication and returns the status
type StopReplicationAndGetStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopReplicationAndGetStatusRequest) Reset() {
	*x = StopReplicationAndGetStatusRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopReplicationAndGetStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopReplicationAndGetStatusRequest) ProtoMessage() {}

func (x *StopReplicationAndGetStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopReplicationAndGetStatusRequest.ProtoReflect.Descriptor instead.
func (*StopReplicationAndGetStatusRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{26}
}

type StopReplicationAndGetStatusResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Replication status before and after stopping
	Status        *ReplicationStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopReplicationAndGetStatusResponse) Reset() {
	*x = StopReplicationAndGetStatusResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopReplicationAndGetStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopReplicationAndGetStatusResponse) ProtoMessage() {}

func (x *StopReplicationAndGetStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopReplicationAndGetStatusResponse.ProtoReflect.Descriptor instead.
func (*StopReplicationAndGetStatusResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{27}
}

func (x *StopReplicationAndGetStatusResponse) GetStatus() *ReplicationStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// ChangeType changes the pooler type
type ChangeTypeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// New pooler type (PRIMARY or REPLICA - maps to LEADER/FOLLOWER)
	PoolerType    clustermetadata.PoolerType `protobuf:"varint,1,opt,name=pooler_type,json=poolerType,proto3,enum=clustermetadata.PoolerType" json:"pooler_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeTypeRequest) Reset() {
	*x = ChangeTypeRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeTypeRequest) ProtoMessage() {}

func (x *ChangeTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeTypeRequest.ProtoReflect.Descriptor instead.
func (*ChangeTypeRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{28}
}

func (x *ChangeTypeRequest) GetPoolerType() clustermetadata.PoolerType {
	if x != nil {
		return x.PoolerType
	}
	return clustermetadata.PoolerType(0)
}

type ChangeTypeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeTypeResponse) Reset() {
	*x = ChangeTypeResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeTypeResponse) ProtoMessage() {}

func (x *ChangeTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeTypeResponse.ProtoReflect.Descriptor instead.
func (*ChangeTypeResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{29}
}

// Promote promotes a replica to leader (Multigres-level operation)
type PromoteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PromoteRequest) Reset() {
	*x = PromoteRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PromoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteRequest) ProtoMessage() {}

func (x *PromoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteRequest.ProtoReflect.Descriptor instead.
func (*PromoteRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{30}
}

type PromoteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// LSN position after promotion
	LsnPosition   string `protobuf:"bytes,1,opt,name=lsn_position,json=lsnPosition,proto3" json:"lsn_position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PromoteResponse) Reset() {
	*x = PromoteResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PromoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteResponse) ProtoMessage() {}

func (x *PromoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteResponse.ProtoReflect.Descriptor instead.
func (*PromoteResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{31}
}

func (x *PromoteResponse) GetLsnPosition() string {
	if x != nil {
		return x.LsnPosition
	}
	return ""
}

// ResetReplication resets the standby's connection to its primary
type ResetReplicationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResetReplicationRequest) Reset() {
	*x = ResetReplicationRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetReplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetReplicationRequest) ProtoMessage() {}

func (x *ResetReplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetReplicationRequest.ProtoReflect.Descriptor instead.
func (*ResetReplicationRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{32}
}

type ResetReplicationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Replication status when replication was reset
	Status        *ReplicationStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResetReplicationResponse) Reset() {
	*x = ResetReplicationResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetReplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetReplicationResponse) ProtoMessage() {}

func (x *ResetReplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetReplicationResponse.ProtoReflect.Descriptor instead.
func (*ResetReplicationResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{33}
}

func (x *ResetReplicationResponse) GetStatus() *ReplicationStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// ConfigureSynchronousReplication configures PostgreSQL synchronous replication settings
type ConfigureSynchronousReplicationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Synchronous commit level (synchronous_commit setting)
	SynchronousCommit SynchronousCommitLevel `protobuf:"varint,1,opt,name=synchronous_commit,json=synchronousCommit,proto3,enum=multipoolermanagerdata.SynchronousCommitLevel" json:"synchronous_commit,omitempty"`
	// Synchronization method (FIRST, ANY)
	SynchronousMethod SynchronousMethod `protobuf:"varint,2,opt,name=synchronous_method,json=synchronousMethod,proto3,enum=multipoolermanagerdata.SynchronousMethod" json:"synchronous_method,omitempty"`
	// Number of standby servers to wait for (quorum count)
	NumSync int32 `protobuf:"varint,3,opt,name=num_sync,json=numSync,proto3" json:"num_sync,omitempty"`
	// List of standby server names that can participate in synchronous replication
	StandbyNames []string `protobuf:"bytes,4,rep,name=standby_names,json=standbyNames,proto3" json:"standby_names,omitempty"`
	// Whether to reload configuration immediately
	ReloadConfig  bool `protobuf:"varint,5,opt,name=reload_config,json=reloadConfig,proto3" json:"reload_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigureSynchronousReplicationRequest) Reset() {
	*x = ConfigureSynchronousReplicationRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureSynchronousReplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureSynchronousReplicationRequest) ProtoMessage() {}

func (x *ConfigureSynchronousReplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureSynchronousReplicationRequest.ProtoReflect.Descriptor instead.
func (*ConfigureSynchronousReplicationRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{34}
}

func (x *ConfigureSynchronousReplicationRequest) GetSynchronousCommit() SynchronousCommitLevel {
	if x != nil {
		return x.SynchronousCommit
	}
	return SynchronousCommitLevel_SYNCHRONOUS_COMMIT_OFF
}

func (x *ConfigureSynchronousReplicationRequest) GetSynchronousMethod() SynchronousMethod {
	if x != nil {
		return x.SynchronousMethod
	}
	return SynchronousMethod_SYNCHRONOUS_METHOD_UNSPECIFIED
}

func (x *ConfigureSynchronousReplicationRequest) GetNumSync() int32 {
	if x != nil {
		return x.NumSync
	}
	return 0
}

func (x *ConfigureSynchronousReplicationRequest) GetStandbyNames() []string {
	if x != nil {
		return x.StandbyNames
	}
	return nil
}

func (x *ConfigureSynchronousReplicationRequest) GetReloadConfig() bool {
	if x != nil {
		return x.ReloadConfig
	}
	return false
}

type ConfigureSynchronousReplicationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigureSynchronousReplicationResponse) Reset() {
	*x = ConfigureSynchronousReplicationResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureSynchronousReplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureSynchronousReplicationResponse) ProtoMessage() {}

func (x *ConfigureSynchronousReplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureSynchronousReplicationResponse.ProtoReflect.Descriptor instead.
func (*ConfigureSynchronousReplicationResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{35}
}

// Status gets the current status of the manager
type StatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{36}
}

type StatusResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Manager state (starting, ready, error)
	State string `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	// Error message if state is error
	ErrorMessage  string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	mi := &file_multipoolermanagerdata_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multipoolermanagerdata_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_multipoolermanagerdata_proto_rawDescGZIP(), []int{37}
}

func (x *StatusResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *StatusResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_multipoolermanagerdata_proto protoreflect.FileDescriptor

const file_multipoolermanagerdata_proto_rawDesc = "" +
	"\n" +
	"\x1cmultipoolermanagerdata.proto\x12\x16multipoolermanagerdata\x1a\x15clustermetadata.proto\x1a\x1egoogle/protobuf/duration.proto\"\xf5\x01\n" +
	"\x11ReplicationStatus\x12\x10\n" +
	"\x03lsn\x18\x01 \x01(\tR\x03lsn\x12/\n" +
	"\x14is_wal_replay_paused\x18\x02 \x01(\bR\x11isWalReplayPaused\x123\n" +
	"\x16wal_replay_pause_state\x18\x03 \x01(\tR\x13walReplayPauseState\x12+\n" +
	"\x03lag\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\x03lag\x12;\n" +
	"\x1alast_xact_replay_timestamp\x18\x05 \x01(\tR\x17lastXactReplayTimestamp\"g\n" +
	"\x11WaitForLSNRequest\x12\x1d\n" +
	"\n" +
	"target_lsn\x18\x01 \x01(\tR\ttargetLsn\x123\n" +
	"\atimeout\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\atimeout\"\x14\n" +
	"\x12WaitForLSNResponse\"\x19\n" +
	"\x17StartReplicationRequest\"\x1a\n" +
	"\x18StartReplicationResponse\"\x14\n" +
	"\x12SetReadOnlyRequest\"\x15\n" +
	"\x13SetReadOnlyResponse\"\x13\n" +
	"\x11IsReadOnlyRequest\"1\n" +
	"\x12IsReadOnlyResponse\x12\x1b\n" +
	"\tread_only\x18\x01 \x01(\bR\breadOnly\"\xfd\x01\n" +
	"\x19SetPrimaryConnInfoRequest\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x02 \x01(\x05R\x04port\x12H\n" +
	"\x12heartbeat_interval\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\x11heartbeatInterval\x126\n" +
	"\x17stop_replication_before\x18\x04 \x01(\bR\x15stopReplicationBefore\x126\n" +
	"\x17start_replication_after\x18\x05 \x01(\bR\x15startReplicationAfter\"\x1c\n" +
	"\x1aSetPrimaryConnInfoResponse\"\x18\n" +
	"\x16StopReplicationRequest\"\\\n" +
	"\x17StopReplicationResponse\x12A\n" +
	"\x06status\x18\x01 \x01(\v2).multipoolermanagerdata.ReplicationStatusR\x06status\"\x1a\n" +
	"\x18ReplicationStatusRequest\"^\n" +
	"\x19ReplicationStatusResponse\x12A\n" +
	"\x06status\x18\x01 \x01(\v2).multipoolermanagerdata.ReplicationStatusR\x06status\"U\n" +
	"\rPrimaryStatus\x12\x10\n" +
	"\x03lsn\x18\x01 \x01(\tR\x03lsn\x12\x14\n" +
	"\x05ready\x18\x02 \x01(\bR\x05ready\x12\x1c\n" +
	"\tfollowers\x18\x03 \x03(\tR\tfollowers\"\x16\n" +
	"\x14PrimaryStatusRequest\"V\n" +
	"\x15PrimaryStatusResponse\x12=\n" +
	"\x06status\x18\x01 \x01(\v2%.multipoolermanagerdata.PrimaryStatusR\x06status\"\x18\n" +
	"\x16PrimaryPositionRequest\"<\n" +
	"\x17PrimaryPositionResponse\x12!\n" +
	"\flsn_position\x18\x01 \x01(\tR\vlsnPosition\"\x15\n" +
	"\x13GetFollowersRequest\"E\n" +
	"\x14GetFollowersResponse\x12-\n" +
	"\x12follower_addresses\x18\x01 \x03(\tR\x11followerAddresses\"\x0f\n" +
	"\rDemoteRequest\"\\\n" +
	"\x0eDemoteResponse\x12J\n" +
	"\rleader_status\x18\x01 \x01(\v2%.multipoolermanagerdata.PrimaryStatusR\fleaderStatus\"\x13\n" +
	"\x11UndoDemoteRequest\"\x14\n" +
	"\x12UndoDemoteResponse\"$\n" +
	"\"StopReplicationAndGetStatusRequest\"h\n" +
	"#StopReplicationAndGetStatusResponse\x12A\n" +
	"\x06status\x18\x01 \x01(\v2).multipoolermanagerdata.ReplicationStatusR\x06status\"Q\n" +
	"\x11ChangeTypeRequest\x12<\n" +
	"\vpooler_type\x18\x01 \x01(\x0e2\x1b.clustermetadata.PoolerTypeR\n" +
	"poolerType\"\x14\n" +
	"\x12ChangeTypeResponse\"\x10\n" +
	"\x0ePromoteRequest\"4\n" +
	"\x0fPromoteResponse\x12!\n" +
	"\flsn_position\x18\x01 \x01(\tR\vlsnPosition\"\x19\n" +
	"\x17ResetReplicationRequest\"]\n" +
	"\x18ResetReplicationResponse\x12A\n" +
	"\x06status\x18\x01 \x01(\v2).multipoolermanagerdata.ReplicationStatusR\x06status\"\xc6\x02\n" +
	"&ConfigureSynchronousReplicationRequest\x12]\n" +
	"\x12synchronous_commit\x18\x01 \x01(\x0e2..multipoolermanagerdata.SynchronousCommitLevelR\x11synchronousCommit\x12X\n" +
	"\x12synchronous_method\x18\x02 \x01(\x0e2).multipoolermanagerdata.SynchronousMethodR\x11synchronousMethod\x12\x19\n" +
	"\bnum_sync\x18\x03 \x01(\x05R\anumSync\x12#\n" +
	"\rstandby_names\x18\x04 \x03(\tR\fstandbyNames\x12#\n" +
	"\rreload_config\x18\x05 \x01(\bR\freloadConfig\")\n" +
	"'ConfigureSynchronousReplicationResponse\"\x0f\n" +
	"\rStatusRequest\"K\n" +
	"\x0eStatusResponse\x12\x14\n" +
	"\x05state\x18\x01 \x01(\tR\x05state\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage*q\n" +
	"\x11SynchronousMethod\x12\"\n" +
	"\x1eSYNCHRONOUS_METHOD_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18SYNCHRONOUS_METHOD_FIRST\x10\x01\x12\x1a\n" +
	"\x16SYNCHRONOUS_METHOD_ANY\x10\x02*\xb7\x01\n" +
	"\x16SynchronousCommitLevel\x12\x1a\n" +
	"\x16SYNCHRONOUS_COMMIT_OFF\x10\x00\x12\x1c\n" +
	"\x18SYNCHRONOUS_COMMIT_LOCAL\x10\x01\x12#\n" +
	"\x1fSYNCHRONOUS_COMMIT_REMOTE_WRITE\x10\x02\x12\x19\n" +
	"\x15SYNCHRONOUS_COMMIT_ON\x10\x03\x12#\n" +
	"\x1fSYNCHRONOUS_COMMIT_REMOTE_APPLY\x10\x04B=Z;github.com/multigres/multigres/go/pb/multipoolermanagerdatab\x06proto3"

var (
	file_multipoolermanagerdata_proto_rawDescOnce sync.Once
	file_multipoolermanagerdata_proto_rawDescData []byte
)

func file_multipoolermanagerdata_proto_rawDescGZIP() []byte {
	file_multipoolermanagerdata_proto_rawDescOnce.Do(func() {
		file_multipoolermanagerdata_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_multipoolermanagerdata_proto_rawDesc), len(file_multipoolermanagerdata_proto_rawDesc)))
	})
	return file_multipoolermanagerdata_proto_rawDescData
}

var file_multipoolermanagerdata_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_multipoolermanagerdata_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_multipoolermanagerdata_proto_goTypes = []any{
	(SynchronousMethod)(0),                          // 0: multipoolermanagerdata.SynchronousMethod
	(SynchronousCommitLevel)(0),                     // 1: multipoolermanagerdata.SynchronousCommitLevel
	(*ReplicationStatus)(nil),                       // 2: multipoolermanagerdata.ReplicationStatus
	(*WaitForLSNRequest)(nil),                       // 3: multipoolermanagerdata.WaitForLSNRequest
	(*WaitForLSNResponse)(nil),                      // 4: multipoolermanagerdata.WaitForLSNResponse
	(*StartReplicationRequest)(nil),                 // 5: multipoolermanagerdata.StartReplicationRequest
	(*StartReplicationResponse)(nil),                // 6: multipoolermanagerdata.StartReplicationResponse
	(*SetReadOnlyRequest)(nil),                      // 7: multipoolermanagerdata.SetReadOnlyRequest
	(*SetReadOnlyResponse)(nil),                     // 8: multipoolermanagerdata.SetReadOnlyResponse
	(*IsReadOnlyRequest)(nil),                       // 9: multipoolermanagerdata.IsReadOnlyRequest
	(*IsReadOnlyResponse)(nil),                      // 10: multipoolermanagerdata.IsReadOnlyResponse
	(*SetPrimaryConnInfoRequest)(nil),               // 11: multipoolermanagerdata.SetPrimaryConnInfoRequest
	(*SetPrimaryConnInfoResponse)(nil),              // 12: multipoolermanagerdata.SetPrimaryConnInfoResponse
	(*StopReplicationRequest)(nil),                  // 13: multipoolermanagerdata.StopReplicationRequest
	(*StopReplicationResponse)(nil),                 // 14: multipoolermanagerdata.StopReplicationResponse
	(*ReplicationStatusRequest)(nil),                // 15: multipoolermanagerdata.ReplicationStatusRequest
	(*ReplicationStatusResponse)(nil),               // 16: multipoolermanagerdata.ReplicationStatusResponse
	(*PrimaryStatus)(nil),                           // 17: multipoolermanagerdata.PrimaryStatus
	(*PrimaryStatusRequest)(nil),                    // 18: multipoolermanagerdata.PrimaryStatusRequest
	(*PrimaryStatusResponse)(nil),                   // 19: multipoolermanagerdata.PrimaryStatusResponse
	(*PrimaryPositionRequest)(nil),                  // 20: multipoolermanagerdata.PrimaryPositionRequest
	(*PrimaryPositionResponse)(nil),                 // 21: multipoolermanagerdata.PrimaryPositionResponse
	(*GetFollowersRequest)(nil),                     // 22: multipoolermanagerdata.GetFollowersRequest
	(*GetFollowersResponse)(nil),                    // 23: multipoolermanagerdata.GetFollowersResponse
	(*DemoteRequest)(nil),                           // 24: multipoolermanagerdata.DemoteRequest
	(*DemoteResponse)(nil),                          // 25: multipoolermanagerdata.DemoteResponse
	(*UndoDemoteRequest)(nil),                       // 26: multipoolermanagerdata.UndoDemoteRequest
	(*UndoDemoteResponse)(nil),                      // 27: multipoolermanagerdata.UndoDemoteResponse
	(*StopReplicationAndGetStatusRequest)(nil),      // 28: multipoolermanagerdata.StopReplicationAndGetStatusRequest
	(*StopReplicationAndGetStatusResponse)(nil),     // 29: multipoolermanagerdata.StopReplicationAndGetStatusResponse
	(*ChangeTypeRequest)(nil),                       // 30: multipoolermanagerdata.ChangeTypeRequest
	(*ChangeTypeResponse)(nil),                      // 31: multipoolermanagerdata.ChangeTypeResponse
	(*PromoteRequest)(nil),                          // 32: multipoolermanagerdata.PromoteRequest
	(*PromoteResponse)(nil),                         // 33: multipoolermanagerdata.PromoteResponse
	(*ResetReplicationRequest)(nil),                 // 34: multipoolermanagerdata.ResetReplicationRequest
	(*ResetReplicationResponse)(nil),                // 35: multipoolermanagerdata.ResetReplicationResponse
	(*ConfigureSynchronousReplicationRequest)(nil),  // 36: multipoolermanagerdata.ConfigureSynchronousReplicationRequest
	(*ConfigureSynchronousReplicationResponse)(nil), // 37: multipoolermanagerdata.ConfigureSynchronousReplicationResponse
	(*StatusRequest)(nil),                           // 38: multipoolermanagerdata.StatusRequest
	(*StatusResponse)(nil),                          // 39: multipoolermanagerdata.StatusResponse
	(*durationpb.Duration)(nil),                     // 40: google.protobuf.Duration
	(clustermetadata.PoolerType)(0),                 // 41: clustermetadata.PoolerType
}
var file_multipoolermanagerdata_proto_depIdxs = []int32{
	40, // 0: multipoolermanagerdata.ReplicationStatus.lag:type_name -> google.protobuf.Duration
	40, // 1: multipoolermanagerdata.WaitForLSNRequest.timeout:type_name -> google.protobuf.Duration
	40, // 2: multipoolermanagerdata.SetPrimaryConnInfoRequest.heartbeat_interval:type_name -> google.protobuf.Duration
	2,  // 3: multipoolermanagerdata.StopReplicationResponse.status:type_name -> multipoolermanagerdata.ReplicationStatus
	2,  // 4: multipoolermanagerdata.ReplicationStatusResponse.status:type_name -> multipoolermanagerdata.ReplicationStatus
	17, // 5: multipoolermanagerdata.PrimaryStatusResponse.status:type_name -> multipoolermanagerdata.PrimaryStatus
	17, // 6: multipoolermanagerdata.DemoteResponse.leader_status:type_name -> multipoolermanagerdata.PrimaryStatus
	2,  // 7: multipoolermanagerdata.StopReplicationAndGetStatusResponse.status:type_name -> multipoolermanagerdata.ReplicationStatus
	41, // 8: multipoolermanagerdata.ChangeTypeRequest.pooler_type:type_name -> clustermetadata.PoolerType
	2,  // 9: multipoolermanagerdata.ResetReplicationResponse.status:type_name -> multipoolermanagerdata.ReplicationStatus
	1,  // 10: multipoolermanagerdata.ConfigureSynchronousReplicationRequest.synchronous_commit:type_name -> multipoolermanagerdata.SynchronousCommitLevel
	0,  // 11: multipoolermanagerdata.ConfigureSynchronousReplicationRequest.synchronous_method:type_name -> multipoolermanagerdata.SynchronousMethod
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_multipoolermanagerdata_proto_init() }
func file_multipoolermanagerdata_proto_init() {
	if File_multipoolermanagerdata_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_multipoolermanagerdata_proto_rawDesc), len(file_multipoolermanagerdata_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_multipoolermanagerdata_proto_goTypes,
		DependencyIndexes: file_multipoolermanagerdata_proto_depIdxs,
		EnumInfos:         file_multipoolermanagerdata_proto_enumTypes,
		MessageInfos:      file_multipoolermanagerdata_proto_msgTypes,
	}.Build()
	File_multipoolermanagerdata_proto = out.File
	file_multipoolermanagerdata_proto_goTypes = nil
	file_multipoolermanagerdata_proto_depIdxs = nil
}
