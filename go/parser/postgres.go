// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
	"strings"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// SelectLimit - Private struct for the result of opt_select_limit production
// Mirrors PostgreSQL's SelectLimit from gram.y:126-132
type selectLimit struct {
	limitOffset ast.Node
	limitCount  ast.Node
	limitOption ast.LimitOption
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// PrivTarget - represents a privilege target for GRANT/REVOKE statements
// Internal struct for handling privilege_target grammar rule
type PrivTarget struct {
	targtype ast.GrantTargetType
	objtype  ast.ObjectType
	objs     *ast.NodeList
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:51
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node        ast.Node
	stmt        ast.Stmt
	stmtList    []ast.Stmt
	list        *ast.NodeList
	groupClause *ast.GroupClause
	selectLimit *selectLimit

	// Specific AST node types
	into          *ast.IntoClause
	onconflict    *ast.OnConflictClause
	windef        *ast.WindowDef
	createStmt    *ast.CreateStmt
	indexStmt     *ast.IndexStmt
	alterStmt     *ast.AlterTableStmt
	dropStmt      *ast.DropStmt
	columnDef     *ast.ColumnDef
	constraint    *ast.Constraint
	indexElem     *ast.IndexElem
	alterCmd      *ast.AlterTableCmd
	with          *ast.WithClause
	rangevar      *ast.RangeVar
	objType       ast.ObjectType
	dropBehav     ast.DropBehavior
	setquant      ast.SetQuantifier
	typnam        *ast.TypeName
	partspec      *ast.PartitionSpec
	partboundspec *ast.PartitionBoundSpec
	oncommit      ast.OnCommitAction
	defelt        *ast.DefElem
	target        *ast.ResTarget            // For select targets, insert columns
	alias         *ast.Alias                // For table and column aliases
	jtype         ast.JoinType              // For join type specifications
	jexpr         *ast.JoinExpr             // For joined table expressions
	keyaction     *ast.KeyAction            // For foreign key actions
	keyactions    *ast.KeyActions           // For foreign key action sets
	funparam      *ast.FunctionParameter    // For function parameters
	funparammode  ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt      *ast.VariableSetStmt      // For SET/RESET statements
	rolespec      *ast.RoleSpec
	objwithargs   *ast.ObjectWithArgs
	statelem      *ast.StatsElem
	accesspriv    *ast.AccessPriv     // For privilege specifications
	privtarget    *PrivTarget         // For privilege target specifications
	vacrel        *ast.VacuumRelation // For vacuum relation specifications

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const VALUES = 57428
const SEARCH = 57429
const BREADTH = 57430
const DEPTH = 57431
const CYCLE = 57432
const FIRST_P = 57433
const LAST_P = 57434
const SET = 57435
const ASC = 57436
const DESC = 57437
const INSERT = 57438
const UPDATE = 57439
const DELETE_P = 57440
const MERGE = 57441
const RETURNING = 57442
const CONFLICT = 57443
const OVERRIDING = 57444
const USER = 57445
const SYSTEM_P = 57446
const MATCHED = 57447
const THEN = 57448
const SOURCE = 57449
const TARGET = 57450
const DO = 57451
const NOTHING = 57452
const COPY = 57453
const PROGRAM = 57454
const STDIN = 57455
const STDOUT = 57456
const BINARY = 57457
const FREEZE = 57458
const CONSTRAINT = 57459
const VERBOSE = 57460
const ANALYZE = 57461
const CURRENT_P = 57462
const CURSOR = 57463
const OF = 57464
const COLUMNS = 57465
const ORDINALITY = 57466
const XMLTABLE = 57467
const JSON_TABLE = 57468
const ROWS = 57469
const PATH = 57470
const PASSING = 57471
const FOR = 57472
const NESTED = 57473
const REF_P = 57474
const XMLNAMESPACES = 57475
const ARRAY = 57476
const ERROR = 57477
const ERROR_P = 57478
const EMPTY = 57479
const EMPTY_P = 57480
const OBJECT_P = 57481
const WRAPPER = 57482
const CONDITIONAL = 57483
const UNCONDITIONAL = 57484
const QUOTES = 57485
const OMIT = 57486
const KEEP = 57487
const SCALAR = 57488
const STRING_P = 57489
const ENCODING = 57490
const DELIMITER = 57491
const DELIMITERS = 57492
const HEADER_P = 57493
const QUOTE = 57494
const FORCE = 57495
const CSV = 57496
const VALUE_P = 57497
const JSON_QUERY = 57498
const JSON_VALUE = 57499
const JSON_SERIALIZE = 57500
const JSON_OBJECT = 57501
const JSON_ARRAY = 57502
const JSON_OBJECTAGG = 57503
const JSON_ARRAYAGG = 57504
const JSON_EXISTS = 57505
const JSON_SCALAR = 57506
const FORMAT = 57507
const JSON = 57508
const UTF8 = 57509
const WITHOUT = 57510
const BIT = 57511
const NUMERIC = 57512
const INTEGER = 57513
const SMALLINT = 57514
const BIGINT = 57515
const REAL = 57516
const FLOAT_P = 57517
const DOUBLE_P = 57518
const PRECISION = 57519
const CHARACTER = 57520
const CHAR_P = 57521
const VARCHAR = 57522
const NATIONAL = 57523
const NCHAR = 57524
const VARYING = 57525
const TIMESTAMP = 57526
const INTERVAL = 57527
const INT_P = 57528
const DECIMAL_P = 57529
const DEC = 57530
const BOOLEAN_P = 57531
const VARIADIC = 57532
const ABORT_P = 57533
const ABSENT = 57534
const ABSOLUTE_P = 57535
const ACCESS = 57536
const ACTION = 57537
const ADD_P = 57538
const ADMIN = 57539
const AFTER = 57540
const AGGREGATE = 57541
const ALSO = 57542
const ALWAYS = 57543
const ANALYSE = 57544
const ASENSITIVE = 57545
const ASSERTION = 57546
const ASSIGNMENT = 57547
const ATOMIC = 57548
const ATTACH = 57549
const ATTRIBUTE = 57550
const AUTHORIZATION = 57551
const BACKWARD = 57552
const BEFORE = 57553
const BEGIN_P = 57554
const CACHE = 57555
const CALL = 57556
const CALLED = 57557
const CASCADED = 57558
const CATALOG_P = 57559
const CHAIN = 57560
const CHARACTERISTICS = 57561
const CHECKPOINT = 57562
const CLASS = 57563
const CLOSE = 57564
const CLUSTER = 57565
const COALESCE = 57566
const COLLATION = 57567
const COMMENT = 57568
const COMMENTS = 57569
const COMMIT = 57570
const COMMITTED = 57571
const COMPRESSION = 57572
const CONFIGURATION = 57573
const CONNECTION = 57574
const CONSTRAINTS = 57575
const CONTENT_P = 57576
const CONTINUE_P = 57577
const CONVERSION_P = 57578
const COST = 57579
const CUBE = 57580
const CURRENT_CATALOG = 57581
const CURRENT_DATE = 57582
const CURRENT_ROLE = 57583
const CURRENT_SCHEMA = 57584
const CURRENT_TIME = 57585
const CURRENT_TIMESTAMP = 57586
const CURRENT_USER = 57587
const DATA_P = 57588
const DATABASE = 57589
const DAY_P = 57590
const DEALLOCATE = 57591
const DECLARE = 57592
const DEFAULTS = 57593
const DEFERRABLE = 57594
const DEFERRED = 57595
const DEFINER = 57596
const DEPENDS = 57597
const DETACH = 57598
const DICTIONARY = 57599
const DISABLE_P = 57600
const DISCARD = 57601
const DOCUMENT_P = 57602
const DOMAIN_P = 57603
const EACH = 57604
const ELSE = 57605
const ENABLE_P = 57606
const ENCRYPTED = 57607
const END_P = 57608
const ENUM_P = 57609
const EVENT = 57610
const EXCEPT = 57611
const EXCLUDE = 57612
const EXCLUDING = 57613
const EXCLUSIVE = 57614
const EXECUTE = 57615
const EXPLAIN = 57616
const EXPRESSION = 57617
const EXTENSION = 57618
const EXTERNAL = 57619
const EXTRACT = 57620
const FAMILY = 57621
const FETCH = 57622
const FILTER = 57623
const FINALIZE = 57624
const FOLLOWING = 57625
const FOREIGN = 57626
const FORWARD = 57627
const FUNCTION = 57628
const FUNCTIONS = 57629
const GENERATED = 57630
const GLOBAL = 57631
const GRANT = 57632
const GRANTED = 57633
const GREATEST = 57634
const GROUPING = 57635
const GROUPS = 57636
const HANDLER = 57637
const HOLD = 57638
const HOUR_P = 57639
const IDENTITY_P = 57640
const IMMEDIATE = 57641
const IMMUTABLE = 57642
const IMPLICIT_P = 57643
const IMPORT_P = 57644
const INCLUDE = 57645
const INCLUDING = 57646
const INCREMENT = 57647
const INDENT = 57648
const INDEX = 57649
const INDEXES = 57650
const INHERIT = 57651
const INHERITS = 57652
const INITIALLY = 57653
const INLINE_P = 57654
const INPUT_P = 57655
const INSENSITIVE = 57656
const INSTEAD = 57657
const INTERSECT = 57658
const INVOKER = 57659
const ISOLATION = 57660
const KEYS = 57661
const LABEL = 57662
const LANGUAGE = 57663
const LARGE_P = 57664
const LATERAL_P = 57665
const LEAKPROOF = 57666
const LEAST = 57667
const LEADING = 57668
const LEVEL = 57669
const LISTEN = 57670
const LOAD = 57671
const LOCALTIME = 57672
const LOCALTIMESTAMP = 57673
const LOCATION = 57674
const LOCK_P = 57675
const LOCKED = 57676
const LOGGED = 57677
const MAPPING = 57678
const MATCH = 57679
const MAXVALUE = 57680
const MERGE_ACTION = 57681
const METHOD = 57682
const MINUTE_P = 57683
const MINVALUE = 57684
const MODE = 57685
const MONTH_P = 57686
const MOVE = 57687
const NAME_P = 57688
const NAMES = 57689
const NEW = 57690
const NEXT = 57691
const NFC = 57692
const NFD = 57693
const NFKC = 57694
const NFKD = 57695
const NO = 57696
const NONE = 57697
const NORMALIZE = 57698
const NORMALIZED = 57699
const NOTIFY = 57700
const NOWAIT = 57701
const NULLIF = 57702
const OUT_P = 57703
const OVERLAY = 57704
const OVERLAPS = 57705
const OWNED = 57706
const OWNER = 57707
const PARALLEL = 57708
const PARAMETER = 57709
const PARSER = 57710
const PARTIAL = 57711
const PARTITION = 57712
const PASSWORD = 57713
const PLACING = 57714
const PLAN = 57715
const PLANS = 57716
const POLICY = 57717
const POSITION = 57718
const PRECEDING = 57719
const PREPARE = 57720
const PREPARED = 57721
const PRESERVE = 57722
const PRIMARY = 57723
const PRIOR = 57724
const PRIVILEGES = 57725
const PROCEDURAL = 57726
const PROCEDURE = 57727
const PROCEDURES = 57728
const PUBLICATION = 57729
const RANGE = 57730
const READ = 57731
const REASSIGN = 57732
const RECHECK = 57733
const REFERENCES = 57734
const REFERENCING = 57735
const REFRESH = 57736
const REINDEX = 57737
const RELATIVE_P = 57738
const RELEASE = 57739
const RENAME = 57740
const REPEATABLE = 57741
const REPLICA = 57742
const RESET = 57743
const RESTART = 57744
const RETURN = 57745
const RETURNS = 57746
const REVOKE = 57747
const ROLE = 57748
const ROLLBACK = 57749
const ROLLUP = 57750
const ROUTINE = 57751
const ROUTINES = 57752
const ROW = 57753
const RULE = 57754
const SAVEPOINT = 57755
const SCHEMA = 57756
const SCHEMAS = 57757
const SCROLL = 57758
const SECOND_P = 57759
const SECURITY = 57760
const SEQUENCE = 57761
const SEQUENCES = 57762
const SERIALIZABLE = 57763
const SERVER = 57764
const SESSION = 57765
const SESSION_USER = 57766
const SETS = 57767
const SETOF = 57768
const SHARE = 57769
const SHOW = 57770
const SIMPLE = 57771
const SKIP = 57772
const SNAPSHOT = 57773
const SOME = 57774
const SQL_P = 57775
const STABLE = 57776
const STANDALONE_P = 57777
const START = 57778
const STATEMENT = 57779
const STATISTICS = 57780
const STORAGE = 57781
const STORED = 57782
const STRICT_P = 57783
const STRIP_P = 57784
const SUBSCRIPTION = 57785
const SUBSTRING = 57786
const SUPPORT = 57787
const SYSID = 57788
const SYSTEM_USER = 57789
const TABLES = 57790
const TABLESPACE = 57791
const TABLESAMPLE = 57792
const TEMP = 57793
const TEMPLATE = 57794
const TEMPORARY = 57795
const TEXT_P = 57796
const TIES = 57797
const TRAILING = 57798
const TRANSACTION = 57799
const TRANSFORM = 57800
const TREAT = 57801
const TRIGGER = 57802
const TRIM = 57803
const TRUNCATE = 57804
const TRUSTED = 57805
const TYPE_P = 57806
const TYPES_P = 57807
const UESCAPE = 57808
const UNBOUNDED = 57809
const UNCOMMITTED = 57810
const UNENCRYPTED = 57811
const UNION = 57812
const UNIQUE = 57813
const UNLISTEN = 57814
const UNLOGGED = 57815
const UNTIL = 57816
const VACUUM = 57817
const VALID = 57818
const VALIDATE = 57819
const VALIDATOR = 57820
const VERSION_P = 57821
const VIEW = 57822
const VIEWS = 57823
const VOLATILE = 57824
const WHITESPACE_P = 57825
const WINDOW = 57826
const WITHIN = 57827
const WORK = 57828
const WRITE = 57829
const XML_P = 57830
const XMLATTRIBUTES = 57831
const XMLCONCAT = 57832
const XMLELEMENT = 57833
const XMLEXISTS = 57834
const XMLFOREST = 57835
const XMLPARSE = 57836
const XMLPI = 57837
const XMLROOT = 57838
const XMLSERIALIZE = 57839
const YEAR_P = 57840
const YES_P = 57841
const INOUT = 57842
const OTHERS = 57843
const OLD = 57844
const KEY = 57845
const OFF = 57846
const OIDS = 57847
const OPTION = 57848
const OPTIONS = 57849
const OVER = 57850
const ORDER = 57851
const ANY = 57852
const BOTH = 57853
const CAST = 57854
const CHECK = 57855
const COLUMN = 57856
const FORMAT_LA = 57857
const NOT_LA = 57858
const NULLS_LA = 57859
const WITH_LA = 57860
const WITHOUT_LA = 57861
const MODE_TYPE_NAME = 57862
const MODE_PLPGSQL_EXPR = 57863
const MODE_PLPGSQL_ASSIGN1 = 57864
const MODE_PLPGSQL_ASSIGN2 = 57865
const MODE_PLPGSQL_ASSIGN3 = 57866
const UMINUS = 57867

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ANALYSE",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:13758

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 93,
	540, 93,
	-2, 1585,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 96,
	1, 1499,
	26, 1499,
	36, 1499,
	74, 1499,
	100, 1499,
	532, 1499,
	540, 1499,
	-2, 1503,
	-1, 99,
	67, 1915,
	84, 1915,
	85, 2597,
	236, 2784,
	307, 2082,
	419, 1915,
	480, 1915,
	-2, 106,
	-1, 128,
	68, 1502,
	69, 1502,
	130, 1502,
	269, 1502,
	280, 1502,
	316, 1502,
	470, 1502,
	509, 1502,
	-2, 1504,
	-1, 140,
	1, 93,
	540, 93,
	-2, 1585,
	-1, 182,
	85, 2596,
	-2, 1914,
	-1, 259,
	61, 311,
	64, 311,
	527, 311,
	533, 311,
	-2, 2640,
	-1, 725,
	1, 314,
	540, 314,
	-2, 3111,
	-1, 726,
	1, 355,
	540, 355,
	-2, 3111,
	-1, 727,
	1, 246,
	540, 246,
	-2, 3111,
	-1, 728,
	1, 288,
	540, 288,
	-2, 3111,
	-1, 733,
	1, 250,
	540, 250,
	-2, 3111,
	-1, 734,
	1, 167,
	540, 167,
	-2, 3111,
	-1, 748,
	68, 1488,
	69, 1488,
	130, 1488,
	280, 1488,
	-2, 1505,
	-1, 754,
	68, 1489,
	69, 1489,
	130, 1489,
	280, 1489,
	-2, 1508,
	-1, 811,
	84, 1915,
	480, 1915,
	-2, 105,
	-1, 813,
	209, 94,
	-2, 2603,
	-1, 917,
	7, 1416,
	16, 1416,
	17, 1416,
	531, 1416,
	-2, 112,
	-1, 918,
	7, 1417,
	16, 1417,
	17, 1417,
	531, 1417,
	-2, 113,
	-1, 926,
	531, 1418,
	-2, 3063,
	-1, 945,
	93, 2920,
	398, 2118,
	401, 2920,
	-2, 2011,
	-1, 949,
	93, 2920,
	398, 2118,
	401, 2920,
	-2, 2011,
	-1, 1096,
	74, 122,
	-2, 127,
	-1, 1145,
	68, 1488,
	69, 1488,
	130, 1488,
	280, 1488,
	-2, 1509,
	-1, 1199,
	7, 1218,
	531, 1218,
	-2, 492,
	-1, 1214,
	7, 543,
	16, 543,
	17, 543,
	531, 543,
	-2, 1266,
	-1, 1236,
	7, 1460,
	-2, 493,
	-1, 1244,
	7, 1430,
	-2, 476,
	-1, 1245,
	7, 1465,
	531, 1465,
	-2, 477,
	-1, 1246,
	7, 1437,
	-2, 478,
	-1, 1247,
	7, 1465,
	531, 1465,
	-2, 479,
	-1, 1248,
	7, 1465,
	531, 1465,
	-2, 480,
	-1, 1249,
	7, 1424,
	-2, 482,
	-1, 1250,
	7, 1424,
	-2, 483,
	-1, 1251,
	7, 1467,
	-2, 486,
	-1, 1252,
	7, 1427,
	-2, 490,
	-1, 1253,
	7, 1428,
	-2, 491,
	-1, 1255,
	7, 1465,
	531, 1465,
	-2, 507,
	-1, 1256,
	7, 1424,
	-2, 511,
	-1, 1257,
	7, 1431,
	-2, 516,
	-1, 1258,
	7, 1429,
	-2, 519,
	-1, 1259,
	7, 1463,
	-2, 521,
	-1, 1260,
	7, 1463,
	-2, 522,
	-1, 1261,
	7, 1448,
	531, 1448,
	-2, 526,
	-1, 1414,
	6, 2011,
	12, 2011,
	534, 2011,
	535, 2011,
	-2, 2004,
	-1, 1463,
	531, 1353,
	-2, 3065,
	-1, 1712,
	127, 2882,
	411, 2882,
	-2, 1091,
	-1, 1746,
	21, 1390,
	432, 1390,
	510, 1390,
	-2, 853,
	-1, 1748,
	21, 1392,
	432, 1392,
	510, 1392,
	-2, 800,
	-1, 1753,
	1, 669,
	26, 669,
	36, 669,
	64, 669,
	65, 669,
	68, 669,
	69, 669,
	71, 669,
	72, 669,
	73, 669,
	74, 669,
	100, 669,
	130, 669,
	269, 669,
	280, 669,
	316, 669,
	470, 669,
	484, 669,
	509, 669,
	515, 669,
	532, 669,
	540, 669,
	541, 669,
	-2, 1494,
	-1, 1758,
	21, 1472,
	432, 1472,
	510, 1472,
	-2, 1468,
	-1, 2215,
	68, 1503,
	69, 1503,
	130, 1503,
	269, 1503,
	280, 1503,
	316, 1503,
	470, 1503,
	509, 1503,
	-2, 1187,
	-1, 2224,
	7, 1353,
	531, 1353,
	-2, 1236,
	-1, 2442,
	117, 106,
	307, 2082,
	460, 106,
	-2, 1915,
	-1, 2492,
	536, 127,
	-2, 2468,
	-1, 2520,
	531, 2084,
	-2, 235,
	-1, 2596,
	40, 1424,
	509, 1424,
	527, 1424,
	532, 1424,
	541, 1424,
	-2, 1420,
	-1, 2830,
	36, 2887,
	66, 2887,
	-2, 517,
	-1, 2831,
	36, 2888,
	66, 2888,
	-2, 390,
	-1, 2837,
	127, 2885,
	411, 2885,
	-2, 1200,
	-1, 2838,
	127, 2886,
	411, 2886,
	-2, 1201,
	-1, 2854,
	1, 435,
	26, 435,
	36, 435,
	64, 435,
	65, 435,
	68, 435,
	69, 435,
	71, 435,
	72, 435,
	74, 435,
	100, 435,
	130, 435,
	269, 435,
	280, 435,
	316, 435,
	470, 435,
	484, 435,
	509, 435,
	515, 435,
	529, 435,
	532, 435,
	533, 435,
	540, 435,
	-2, 134,
	-1, 2855,
	1, 433,
	26, 433,
	36, 433,
	64, 433,
	65, 433,
	68, 433,
	69, 433,
	71, 433,
	72, 433,
	74, 433,
	100, 433,
	130, 433,
	269, 433,
	280, 433,
	316, 433,
	470, 433,
	484, 433,
	509, 433,
	515, 433,
	529, 433,
	532, 433,
	533, 433,
	540, 433,
	-2, 134,
	-1, 2858,
	1, 452,
	26, 452,
	36, 452,
	64, 452,
	65, 452,
	68, 452,
	69, 452,
	71, 452,
	72, 452,
	74, 452,
	100, 452,
	130, 452,
	269, 452,
	280, 452,
	316, 452,
	470, 452,
	484, 452,
	509, 452,
	515, 452,
	529, 452,
	532, 452,
	533, 452,
	540, 452,
	-2, 134,
	-1, 2872,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1104,
	-1, 2873,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1105,
	-1, 2874,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1106,
	-1, 2875,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1107,
	-1, 2876,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1108,
	-1, 2877,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1109,
	-1, 2881,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1116,
	-1, 2887,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1120,
	-1, 2932,
	363, 1380,
	-2, 1383,
	-1, 2942,
	16, 1420,
	17, 1420,
	-2, 1352,
	-1, 3027,
	68, 1503,
	69, 1503,
	130, 1503,
	269, 1503,
	280, 1503,
	316, 1503,
	470, 1503,
	509, 1503,
	-2, 1187,
	-1, 3151,
	209, 94,
	-2, 2603,
	-1, 3224,
	536, 128,
	-2, 2468,
	-1, 3327,
	507, 2543,
	-2, 2536,
	-1, 3520,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1118,
	-1, 3521,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1122,
	-1, 3527,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1124,
	-1, 3562,
	363, 1379,
	-2, 1382,
	-1, 3716,
	75, 1607,
	76, 1607,
	77, 1607,
	78, 1607,
	79, 1607,
	81, 1607,
	82, 1607,
	-2, 1503,
	-1, 3730,
	531, 1353,
	-2, 128,
	-1, 3737,
	150, 1847,
	-2, 1782,
	-1, 3917,
	6, 2011,
	12, 2011,
	534, 2011,
	535, 2011,
	-2, 1985,
	-1, 4085,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1117,
	-1, 4088,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1126,
	-1, 4091,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1121,
	-1, 4096,
	52, 0,
	53, 0,
	54, 0,
	-2, 1139,
	-1, 4103,
	21, 1389,
	432, 1389,
	510, 1389,
	-2, 1469,
	-1, 4107,
	363, 1381,
	-2, 1384,
	-1, 4153,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1169,
	-1, 4154,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1170,
	-1, 4155,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1171,
	-1, 4156,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1172,
	-1, 4157,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1173,
	-1, 4158,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1174,
	-1, 4535,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1119,
	-1, 4536,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1123,
	-1, 4540,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1125,
	-1, 4541,
	52, 0,
	53, 0,
	54, 0,
	-2, 1140,
	-1, 4544,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1141,
	-1, 4545,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1143,
	-1, 4673,
	540, 93,
	-2, 1585,
	-1, 4819,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1127,
	-1, 4820,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1142,
	-1, 4821,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1144,
	-1, 4830,
	52, 0,
	-2, 1177,
	-1, 5084,
	52, 0,
	-2, 1178,
	-1, 5267,
	37, 0,
	44, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 475,
	-1, 5596,
	7, 1732,
	-2, 312,
	-1, 5622,
	7, 1460,
	-2, 493,
}

const yyPrivate = 57344

const yyLast = 101616

var yyAct = [...]int16{
	1178, 5593, 5099, 5644, 749, 5645, 5277, 3506, 4655, 1164,
	5660, 5100, 2985, 3596, 5594, 4345, 3052, 5170, 4849, 5457,
	4607, 885, 5344, 5118, 3901, 5089, 2767, 4746, 3744, 2210,
	5266, 5190, 4663, 2393, 3102, 5332, 3106, 5033, 3055, 4263,
	5327, 5445, 5066, 3655, 4982, 5219, 1589, 5490, 3504, 4254,
	5119, 3833, 4456, 3092, 5067, 1402, 3458, 4606, 5064, 3584,
	5413, 5397, 2846, 3887, 2415, 5197, 817, 5191, 4912, 5192,
	1067, 4598, 3453, 3760, 4847, 1320, 4888, 4978, 5242, 5265,
	4499, 1619, 4745, 4039, 95, 1359, 3160, 3295, 2531, 5005,
	3068, 4960, 1530, 3741, 3290, 4670, 3010, 3113, 4250, 1124,
	3247, 3836, 4628, 3152, 262, 262, 2785, 4320, 4462, 3725,
	666, 671, 674, 683, 687, 4457, 3422, 5013, 262, 4349,
	4466, 1079, 116, 674, 674, 674, 674, 674, 674, 4395,
	849, 3810, 3098, 759, 130, 3070, 767, 1760, 674, 674,
	4258, 2282, 3761, 1622, 4, 3814, 4635, 767, 4918, 698,
	22, 767, 4895, 4614, 4639, 3078, 3683, 813, 816, 821,
	816, 675, 816, 674, 1139, 674, 4182, 3069, 4815, 674,
	674, 4313, 816, 674, 674, 1461, 64, 3213, 3989, 3390,
	3096, 696, 10, 697, 21, 3796, 767, 767, 767, 767,
	1318, 3708, 3476, 916, 816, 816, 674, 816, 927, 3136,
	4528, 1720, 674, 927, 674, 927, 674, 674, 674, 674,
	674, 969, 695, 9, 674, 816, 757, 816, 674, 3813,
	3459, 816, 674, 674, 924, 1389, 2939, 3408, 3289, 935,
	3262, 937, 3895, 694, 8, 3214, 689, 2591, 693, 7,
	2441, 20, 2477, 1006, 3916, 2440, 19, 1598, 130, 3139,
	4379, 262, 262, 2439, 13, 2438, 12, 2468, 3140, 3337,
	2462, 3161, 116, 3127, 3141, 3123, 2414, 3095, 3879, 3700,
	3719, 764, 791, 2472, 130, 684, 3056, 1150, 1338, 2395,
	3711, 4223, 788, 130, 3539, 4074, 3664, 3595, 3011, 2219,
	22, 1621, 723, 692, 6, 3565, 820, 3509, 2960, 2775,
	2897, 1551, 2611, 781, 3914, 1594, 3294, 2949, 3178, 1437,
	3243, 2489, 1541, 2515, 766, 2448, 64, 1345, 2941, 3126,
	4621, 898, 10, 1301, 21, 1278, 3115, 3733, 3073, 3077,
	2504, 796, 1306, 3076, 3075, 2394, 3588, 1367, 3066, 2362,
	3000, 2957, 2212, 2953, 3019, 2898, 2907, 1721, 2904, 2826,
	1662, 1709, 1085, 9, 913, 780, 2836, 1523, 1588, 3190,
	249, 2589, 795, 2275, 154, 1368, 847, 152, 3177, 3176,
	3089, 731, 731, 1432, 8, 1370, 959, 812, 960, 7,
	1612, 20, 2851, 794, 2983, 2234, 19, 1160, 793, 1151,
	1690, 1040, 1710, 1692, 13, 1087, 12, 2766, 688, 1075,
	966, 221, 220, 2794, 2668, 2616, 2669, 253, 175, 2421,
	1725, 1324, 1192, 2476, 772, 720, 1132, 1134, 742, 1693,
	1133, 678, 1586, 1556, 128, 748, 3120, 2469, 703, 1465,
	129, 1430, 648, 1443, 6, 1691, 255, 770, 1500, 2488,
	787, 777, 1074, 792, 241, 779, 254, 1531, 1531, 785,
	1531, 3666, 3589, 1531, 5712, 753, 5710, 3781, 1532, 1532,
	5708, 1532, 3507, 5629, 1532, 5669, 5668, 2786, 4041, 5629,
	5590, 1009, 1011, 5589, 1758, 5669, 1604, 1728, 1595, 1034,
	3780, 1740, 1741, 1742, 740, 5656, 5653, 3611, 5434, 3782,
	5637, 2787, 5628, 5240, 5299, 2368, 2787, 822, 1361, 2368,
	2378, 5629, 2370, 5037, 833, 834, 835, 2375, 2379, 2374,
	4889, 2376, 1606, 3613, 1644, 1609, 676, 686, 2371, 5605,
	5598, 1608, 5580, 1361, 5562, 2380, 5520, 4848, 5606, 3688,
	1607, 5259, 1107, 4869, 2787, 2368, 815, 5035, 836, 5002,
	838, 652, 962, 892, 893, 199, 1610, 712, 3503, 5519,
	887, 5507, 753, 5469, 706, 755, 3558, 1728, 2368, 3557,
	2789, 754, 5470, 1726, 3870, 928, 1039, 3559, 1270, 3484,
	2368, 5466, 920, 921, 5442, 923, 774, 5404, 944, 947,
	5467, 5403, 2370, 3822, 3564, 5402, 2758, 1058, 2852, 3039,
	2758, 5382, 5381, 952, 2758, 955, 3667, 3590, 2371, 3061,
	2368, 2368, 4784, 5567, 1758, 5378, 5376, 1728, 1026, 5298,
	1175, 1021, 1023, 3613, 5379, 5377, 1070, 5296, 5299, 5566,
	5295, 1191, 5275, 2789, 5274, 1002, 2368, 5164, 1728, 1534,
	2378, 3652, 2370, 2368, 5149, 5139, 4869, 2375, 2379, 2374,
	5122, 2376, 3698, 2761, 5140, 5114, 5303, 5113, 2371, 5121,
	4987, 3003, 2368, 2370, 3822, 2380, 1534, 4976, 4966, 4988,
	4950, 3629, 5259, 4882, 4881, 4880, 2789, 3782, 5257, 4949,
	784, 1053, 4883, 3822, 3822, 5092, 1570, 1758, 4878, 4868,
	1728, 4837, 4835, 2844, 1740, 1741, 1742, 1534, 4869, 1758,
	2368, 4836, 1728, 4802, 1534, 4804, 2372, 4742, 4741, 2373,
	4740, 4788, 4803, 2378, 767, 2370, 4743, 2789, 4632, 2789,
	2375, 2379, 2374, 1096, 2376, 4734, 1727, 2370, 2377, 1751,
	1752, 2371, 2787, 4681, 2789, 674, 4650, 4590, 2380, 4547,
	4525, 2502, 3782, 2371, 4323, 4651, 782, 4282, 2368, 2368,
	2380, 4040, 3616, 3617, 3618, 3619, 1570, 674, 4273, 4281,
	1062, 1064, 1065, 4184, 4173, 1179, 4106, 2789, 1175, 1146,
	4069, 3613, 4185, 4174, 4101, 3623, 3624, 3625, 4033, 767,
	4013, 3940, 674, 2368, 3927, 4045, 757, 2368, 3822, 4012,
	3941, 3739, 3675, 3928, 4054, 3784, 3674, 767, 3673, 1293,
	767, 767, 3770, 3611, 3785, 1758, 2761, 1008, 1728, 767,
	767, 3771, 767, 3693, 916, 916, 674, 783, 916, 3629,
	1059, 1529, 3694, 3468, 3465, 3221, 3687, 2924, 3678, 816,
	816, 3659, 1078, 2370, 130, 3688, 4537, 2368, 3651, 3649,
	3611, 3648, 1078, 2824, 3647, 1078, 2753, 3652, 2368, 2371,
	2368, 3646, 1078, 2368, 767, 1078, 2380, 3562, 3560, 2697,
	2368, 1276, 1657, 3479, 769, 1728, 2368, 2368, 1733, 1734,
	1735, 1736, 2789, 3441, 3329, 3154, 3045, 3041, 1298, 2820,
	5168, 740, 2368, 3330, 3155, 1534, 2368, 2791, 2368, 737,
	737, 2790, 674, 140, 2759, 674, 2789, 2369, 1668, 1661,
	2789, 1659, 816, 2758, 1656, 1650, 2368, 1651, 1651, 1543,
	1651, 2445, 2445, 1651, 1651, 3619, 3973, 4449, 2445, 767,
	767, 1736, 262, 262, 1268, 740, 1142, 1143, 2789, 4268,
	1175, 2789, 3469, 3613, 1029, 788, 788, 3623, 3624, 3625,
	5701, 674, 816, 816, 1595, 2407, 2789, 5263, 3061, 4539,
	740, 1570, 1323, 3392, 674, 3665, 3661, 1328, 1543, 1272,
	1323, 1570, 1029, 1271, 1272, 1028, 1063, 3244, 1271, 1284,
	4747, 3627, 3929, 848, 4040, 1529, 1031, 1538, 3930, 1401,
	1534, 3629, 1570, 4040, 848, 848, 1611, 1112, 1113, 1747,
	1272, 1117, 1120, 1148, 1271, 1570, 5675, 5527, 1737, 1738,
	1739, 1543, 4268, 2445, 4984, 1034, 929, 1731, 1732, 1733,
	1734, 1735, 1736, 1534, 2454, 816, 1596, 1597, 5511, 945,
	949, 830, 831, 832, 5502, 5289, 3871, 1106, 740, 4331,
	824, 825, 826, 827, 828, 829, 5264, 1121, 3221, 1552,
	1553, 1727, 1601, 3614, 3615, 3616, 3617, 3618, 3619, 1266,
	2407, 3871, 1550, 2221, 137, 1423, 1059, 5252, 1552, 1553,
	1145, 736, 1617, 5251, 5250, 1535, 4208, 5210, 767, 1539,
	683, 1554, 1643, 5243, 1643, 3061, 5101, 1059, 134, 767,
	735, 134, 135, 5094, 5077, 135, 1322, 1731, 1732, 1733,
	1734, 1735, 1736, 5055, 1285, 4991, 4967, 4939, 740, 1073,
	4892, 139, 4844, 1059, 139, 1564, 5460, 1118, 4841, 4827,
	4826, 4814, 1046, 4604, 1048, 4597, 1050, 1047, 674, 1747,
	674, 674, 674, 4594, 4580, 674, 674, 674, 1072, 4575,
	674, 736, 4567, 1653, 4566, 2455, 1350, 1731, 1732, 1733,
	1734, 1735, 1736, 3614, 3615, 3616, 3617, 3618, 3619, 4556,
	735, 1269, 5461, 4554, 1084, 4553, 3828, 1089, 1731, 1732,
	1733, 1734, 1735, 1736, 1093, 4552, 1040, 1104, 5458, 4551,
	1040, 1040, 4322, 4235, 4197, 1484, 4196, 4269, 4180, 1128,
	4170, 1365, 1366, 4169, 4168, 1590, 1590, 4109, 1605, 1315,
	4330, 2655, 1747, 2408, 755, 1129, 4103, 3883, 3841, 3821,
	754, 1737, 1738, 1739, 3779, 3738, 3669, 1326, 1327, 3662,
	1731, 1732, 1733, 1734, 1735, 1736, 130, 1040, 3592, 1277,
	1034, 1357, 1731, 1732, 1733, 1734, 1735, 1736, 1758, 3642,
	3634, 1728, 1654, 3633, 1499, 3612, 137, 4985, 1505, 3609,
	1295, 1296, 3608, 3604, 3602, 1542, 3601, 3600, 1193, 1393,
	4269, 3599, 1399, 3577, 1417, 3566, 2370, 3561, 1329, 4092,
	1335, 757, 2526, 134, 1314, 3448, 3446, 135, 3443, 1109,
	1110, 1111, 2371, 3442, 1114, 1115, 1116, 1119, 2453, 2380,
	1364, 3040, 3620, 3621, 3622, 767, 139, 674, 2529, 2917,
	674, 3614, 3615, 3616, 3617, 3618, 3619, 3031, 2408, 1034,
	2466, 1297, 4211, 2397, 1555, 2398, 1547, 1548, 1549, 1336,
	1148, 1463, 1639, 2220, 767, 131, 5709, 2420, 1147, 705,
	1469, 1470, 674, 1071, 1647, 1330, 705, 1060, 1731, 1732,
	1733, 1734, 1735, 1736, 702, 1325, 5697, 5693, 5358, 821,
	1285, 1582, 816, 816, 816, 816, 1063, 816, 1063, 151,
	5608, 5574, 5549, 674, 4689, 1428, 5544, 5537, 1427, 652,
	5479, 1444, 767, 1579, 2597, 5412, 767, 1462, 1426, 2277,
	1645, 2492, 1444, 3586, 1444, 5198, 5375, 1483, 5349, 1474,
	2409, 1480, 4203, 2412, 2513, 1731, 1732, 1733, 1734, 1735,
	1736, 1566, 767, 5346, 816, 1502, 1526, 5262, 1506, 1507,
	1030, 5261, 767, 738, 739, 2452, 1031, 2532, 767, 2918,
	1675, 4267, 1676, 1677, 1678, 3903, 5228, 1681, 1682, 1683,
	5224, 2277, 1686, 2449, 1658, 3742, 1125, 767, 1030, 2527,
	767, 1559, 1560, 5151, 1031, 1563, 674, 1280, 5117, 5051,
	1665, 1666, 1667, 5050, 3620, 3621, 3622, 738, 739, 5049,
	4763, 5027, 5011, 3614, 3615, 3616, 3617, 3618, 3619, 2406,
	1272, 2465, 2220, 1599, 1271, 5010, 5009, 2559, 816, 3772,
	2628, 262, 1596, 1597, 4022, 1061, 820, 5000, 4997, 4641,
	1269, 1649, 767, 674, 4876, 2548, 4873, 2492, 2492, 2492,
	4838, 1640, 4666, 4645, 4631, 737, 737, 4623, 4620, 737,
	737, 4468, 4368, 4326, 1122, 1123, 767, 767, 4071, 4310,
	4300, 4297, 4278, 4240, 4238, 4230, 2512, 2222, 4022, 3906,
	3905, 1655, 3900, 4207, 816, 816, 816, 816, 816, 5655,
	1279, 2264, 3731, 3729, 3728, 3681, 138, 2552, 3497, 816,
	816, 3583, 3576, 2530, 674, 674, 131, 816, 674, 131,
	738, 739, 3552, 2216, 3550, 2909, 3419, 3350, 1694, 3241,
	1702, 2564, 2224, 1701, 2509, 2567, 2568, 2528, 1325, 3163,
	3108, 1555, 1548, 1547, 755, 2915, 1723, 755, 755, 1549,
	1717, 2965, 2959, 1718, 1719, 131, 1642, 2738, 968, 968,
	767, 2696, 1724, 2551, 2388, 2431, 2422, 5459, 2382, 2273,
	1543, 1545, 2271, 2270, 2269, 2268, 2267, 2266, 2680, 2681,
	2367, 2625, 2626, 2265, 2263, 2262, 2261, 3786, 2260, 2259,
	738, 739, 2258, 1325, 2257, 2532, 2563, 2756, 2256, 2255,
	2254, 2253, 2252, 2251, 767, 767, 2250, 927, 927, 927,
	674, 816, 674, 2249, 2776, 674, 674, 816, 2248, 2247,
	2246, 2245, 1643, 2244, 2243, 1679, 1680, 683, 2242, 683,
	1684, 1685, 2241, 1687, 1688, 2240, 2239, 767, 767, 2743,
	767, 2237, 767, 699, 674, 767, 767, 674, 2420, 2236,
	2223, 1560, 1559, 137, 2221, 2493, 2671, 2272, 2671, 1563,
	674, 674, 2671, 2671, 2418, 674, 674, 2446, 674, 674,
	775, 2365, 2571, 2572, 1641, 1558, 2588, 1431, 1275, 1056,
	134, 890, 714, 4214, 135, 2521, 2523, 4014, 138, 2650,
	2456, 2457, 2458, 2459, 3156, 2460, 3062, 767, 3726, 2423,
	4445, 131, 711, 139, 1552, 1553, 3505, 767, 1339, 704,
	816, 4693, 1339, 3597, 2229, 2450, 5662, 1501, 3947, 3898,
	3804, 1731, 1732, 1733, 1734, 1735, 1736, 3800, 4440, 2575,
	2590, 3957, 130, 2519, 2795, 149, 1175, 2524, 2577, 3613,
	2522, 2581, 2545, 3623, 3624, 3625, 1325, 2762, 2763, 5162,
	2613, 3322, 5161, 2496, 4791, 1181, 701, 1689, 2675, 2500,
	2501, 2613, 1078, 753, 130, 737, 737, 2913, 737, 4945,
	3628, 2493, 2493, 2493, 3949, 2503, 1758, 3627, 3318, 1728,
	796, 2958, 1175, 2574, 1404, 3613, 3909, 3629, 2793, 3623,
	3624, 3625, 4406, 2226, 5123, 2748, 2749, 2750, 2214, 3594,
	3834, 2607, 752, 1325, 2370, 3799, 4933, 4087, 1390, 5342,
	5341, 795, 737, 3798, 3804, 5663, 2627, 5160, 2274, 5399,
	2371, 3800, 2745, 3627, 2914, 1482, 4810, 2380, 4026, 3258,
	2518, 2505, 794, 3629, 2725, 2731, 2610, 793, 1069, 1042,
	2843, 1187, 4266, 4309, 4962, 3246, 3245, 1697, 2629, 751,
	2617, 1406, 3910, 4058, 2822, 5582, 4722, 1287, 2233, 4057,
	2640, 4816, 4582, 5088, 665, 1697, 2647, 4581, 2642, 663,
	143, 2757, 2684, 2685, 2686, 2687, 2688, 3146, 2435, 2654,
	3179, 2617, 1351, 3174, 1303, 2723, 2660, 2617, 2724, 2673,
	2676, 3795, 792, 2677, 2678, 2727, 2643, 2644, 2645, 142,
	3791, 1020, 798, 1013, 699, 908, 1485, 2364, 2711, 2701,
	3179, 4973, 1758, 1485, 137, 1728, 4187, 800, 5183, 800,
	2517, 2730, 1438, 3173, 3838, 4735, 3773, 4944, 180, 3858,
	2770, 1081, 2772, 4098, 1390, 2777, 2778, 4097, 4956, 3180,
	2370, 134, 143, 4086, 3048, 135, 2742, 143, 4779, 1311,
	4492, 1758, 2814, 2815, 1728, 3912, 2371, 2816, 2817, 4448,
	2818, 2819, 2516, 2380, 139, 2740, 2741, 4416, 3806, 3180,
	4283, 142, 1346, 3271, 1405, 3820, 142, 2484, 1018, 2370,
	3269, 2274, 3526, 3325, 806, 943, 4501, 2771, 1439, 2801,
	881, 4380, 2803, 2779, 2752, 2371, 690, 132, 4963, 3128,
	3130, 3129, 2380, 750, 661, 2768, 2769, 4403, 5087, 2541,
	2540, 102, 2274, 1033, 1035, 1037, 1041, 4524, 4066, 1578,
	3515, 3270, 3514, 155, 4228, 2809, 3807, 2946, 3268, 2797,
	715, 2798, 2796, 2802, 914, 4972, 4407, 4656, 5396, 925,
	2833, 5523, 753, 5359, 925, 1576, 925, 3219, 180, 4405,
	137, 2839, 5237, 3513, 2391, 3512, 5236, 4774, 2539, 4433,
	4430, 3802, 3806, 3181, 5497, 897, 1407, 896, 2973, 3896,
	4723, 1034, 3805, 895, 3321, 894, 2947, 134, 4418, 2825,
	133, 135, 2557, 2553, 4000, 3808, 5351, 2683, 2863, 4842,
	5522, 1440, 5652, 3181, 2849, 2436, 1408, 2861, 2850, 1409,
	139, 5651, 4969, 1410, 1698, 1517, 2823, 3839, 1027, 4502,
	4458, 3257, 5352, 5500, 4505, 2416, 2389, 4968, 5372, 4503,
	2948, 4424, 1698, 2945, 4990, 1411, 2473, 4711, 1334, 4705,
	5194, 1515, 2482, 4121, 2506, 138, 2788, 2506, 4509, 1696,
	3199, 737, 2384, 3451, 2841, 737, 737, 4500, 131, 4736,
	3387, 3801, 2385, 2506, 1332, 3802, 1575, 3187, 3939, 181,
	3911, 3917, 3936, 1414, 4504, 2764, 3805, 3935, 2535, 2621,
	2813, 2506, 2950, 5176, 2386, 2732, 4052, 1699, 2912, 1758,
	1412, 2506, 1728, 3047, 2506, 806, 1740, 1741, 1742, 4051,
	1340, 737, 737, 3803, 1340, 1699, 2950, 1413, 2372, 4408,
	3896, 2373, 3597, 821, 2506, 2378, 5581, 2370, 3762, 2950,
	785, 4050, 2375, 2379, 2374, 2842, 2376, 4049, 4048, 2933,
	2377, 1751, 1752, 2371, 4943, 1363, 3877, 3433, 2506, 5565,
	2380, 2506, 2612, 5418, 1415, 2835, 2506, 2782, 3280, 3202,
	1577, 5400, 1514, 2612, 4118, 3801, 5441, 2550, 4415, 3435,
	3620, 3621, 3622, 1700, 801, 3017, 2911, 3852, 3381, 3614,
	3615, 3616, 3617, 3618, 3619, 1331, 1390, 807, 1509, 2930,
	2670, 1700, 102, 3171, 2434, 4469, 4678, 2944, 1288, 181,
	1512, 2733, 2473, 2666, 2721, 911, 2734, 3803, 4119, 2665,
	2737, 3984, 2532, 1436, 2739, 3987, 3620, 3621, 3622, 1731,
	1732, 1733, 1734, 1735, 1736, 3614, 3615, 3616, 3617, 3618,
	3619, 1175, 2976, 799, 3613, 799, 4056, 3365, 3623, 3624,
	3625, 179, 3397, 178, 5525, 3396, 1516, 805, 3024, 3395,
	4538, 3394, 1122, 1123, 4459, 3378, 2783, 3377, 3172, 2634,
	820, 2765, 1503, 1316, 1498, 5016, 2473, 1481, 2747, 1333,
	1464, 816, 3627, 1435, 803, 1434, 1433, 1429, 3049, 5398,
	2784, 2977, 3629, 3227, 2950, 3131, 2659, 2536, 3200, 2722,
	2781, 3057, 1441, 3059, 2658, 2657, 219, 2397, 2538, 2537,
	5080, 3082, 3082, 718, 4346, 1101, 957, 3094, 816, 3856,
	785, 1620, 1478, 3855, 4256, 2209, 138, 5417, 2780, 3763,
	4558, 3196, 4936, 2555, 2508, 2978, 2507, 4442, 2975, 691,
	1354, 3336, 5034, 4094, 674, 767, 3538, 4037, 4117, 1049,
	5195, 1052, 1102, 2663, 3151, 5524, 5189, 2534, 1054, 719,
	3015, 784, 674, 3009, 3162, 1731, 1732, 1733, 1734, 1735,
	1736, 179, 816, 178, 674, 3198, 2513, 3953, 3950, 2837,
	2837, 2559, 674, 804, 1282, 757, 2570, 3380, 1476, 1707,
	716, 183, 717, 1316, 3986, 1758, 3215, 816, 1728, 4386,
	3259, 767, 1017, 4937, 1731, 1732, 1733, 1734, 1735, 1736,
	5196, 2979, 884, 4347, 674, 674, 674, 4460, 767, 767,
	2928, 5416, 2513, 2370, 4983, 674, 3519, 782, 3499, 3182,
	3937, 3125, 3249, 674, 3253, 674, 674, 3195, 2481, 2371,
	4861, 674, 3287, 2277, 674, 674, 2380, 5177, 674, 2834,
	674, 674, 3278, 3273, 767, 4038, 808, 3242, 805, 2719,
	3205, 810, 138, 1660, 674, 674, 767, 1524, 674, 674,
	1670, 3020, 1520, 3225, 3226, 2390, 1669, 5081, 3206, 3088,
	816, 816, 3434, 1615, 3220, 674, 674, 3917, 4862, 1286,
	767, 1477, 2974, 4498, 767, 1103, 674, 2624, 783, 2216,
	3143, 2560, 4453, 1508, 4543, 2433, 1510, 2916, 104, 1019,
	674, 674, 674, 674, 674, 1511, 930, 674, 3025, 4542,
	1283, 674, 3851, 912, 1091, 674, 674, 4386, 2955, 3356,
	3263, 2899, 2900, 2901, 2902, 3197, 3222, 3147, 1521, 1044,
	1027, 784, 3201, 2994, 751, 3981, 674, 674, 3313, 3013,
	674, 3216, 674, 4686, 2426, 1100, 4251, 674, 1672, 674,
	674, 5360, 3035, 4739, 674, 3036, 674, 2425, 5187, 674,
	674, 5079, 3212, 2544, 2720, 1308, 1309, 2622, 2432, 1312,
	3938, 262, 5102, 674, 3363, 2444, 3064, 5493, 3902, 802,
	674, 5345, 3357, 674, 2560, 5014, 3985, 3124, 5492, 5233,
	674, 674, 3237, 5217, 3162, 4647, 3406, 782, 4443, 3413,
	2549, 674, 816, 916, 1747, 4738, 927, 821, 927, 927,
	4387, 3306, 3489, 1737, 1738, 1739, 5354, 3309, 3310, 3324,
	683, 683, 1731, 1732, 1733, 1734, 1735, 1736, 4646, 3658,
	2623, 1519, 3421, 4400, 3426, 3427, 4316, 1708, 3954, 3951,
	3065, 2590, 2604, 3374, 3488, 816, 5494, 2544, 3869, 2863,
	2590, 4737, 1098, 2787, 3788, 4513, 4413, 4463, 2987, 1671,
	4928, 2427, 767, 5687, 5686, 2963, 674, 5356, 783, 4388,
	5355, 4724, 1307, 3425, 3091, 4938, 3060, 4710, 3185, 1135,
	1137, 2922, 4317, 1475, 3409, 2274, 3100, 2235, 5201, 5216,
	3480, 3026, 3028, 2274, 3030, 4716, 3032, 3033, 3034, 1674,
	767, 1041, 1135, 1584, 931, 1041, 1041, 3149, 1603, 3153,
	3148, 3864, 4389, 3085, 3085, 5650, 3436, 5348, 3437, 2543,
	3438, 3150, 4661, 3440, 3105, 5414, 4126, 3332, 3334, 5485,
	1135, 1137, 5173, 2954, 4307, 3449, 1289, 4570, 4387, 2561,
	3169, 3134, 1015, 2562, 820, 3620, 3621, 3622, 1454, 3481,
	1614, 2672, 1041, 3082, 3614, 3615, 3616, 3617, 3618, 3619,
	767, 1673, 932, 4994, 909, 3218, 3224, 3164, 3165, 3166,
	3167, 3168, 2925, 2929, 3477, 2931, 1613, 3359, 3230, 843,
	4510, 3430, 3431, 4403, 1040, 3844, 4161, 891, 3483, 1362,
	3296, 4380, 1131, 2729, 3302, 968, 4160, 4388, 3085, 1590,
	4657, 2381, 3211, 2543, 3005, 3006, 3007, 3008, 3331, 3319,
	1460, 3311, 1025, 3323, 3316, 4481, 821, 757, 3297, 3467,
	968, 2689, 1580, 3792, 1025, 3037, 3133, 1317, 4480, 1092,
	1045, 3391, 2561, 1518, 2694, 2692, 2562, 2695, 3563, 2693,
	4389, 2698, 4279, 3508, 1456, 1467, 5569, 1467, 3307, 3308,
	3568, 3569, 3333, 3327, 3326, 3403, 4315, 1524, 1546, 3585,
	1557, 5091, 3412, 2225, 2227, 2228, 4919, 3745, 3666, 4920,
	1561, 1562, 4921, 3589, 4140, 5682, 3373, 4401, 5597, 3375,
	3376, 4464, 3551, 3502, 5276, 2951, 4871, 2695, 2693, 4843,
	4922, 1136, 4370, 3540, 757, 2966, 2967, 2968, 2969, 3358,
	4402, 1491, 2811, 4586, 3686, 3591, 4643, 5491, 1731, 1732,
	1733, 1734, 1735, 1736, 1136, 2691, 4565, 1525, 5585, 5136,
	5618, 1014, 3083, 3083, 5617, 5584, 4587, 4924, 3383, 3891,
	5425, 3384, 1445, 3863, 3382, 5137, 3383, 4923, 4715, 4306,
	5424, 3386, 1136, 910, 3677, 3580, 5430, 4925, 5279, 5278,
	5531, 5530, 5431, 820, 1455, 3410, 4571, 3418, 842, 3,
	5619, 5097, 2397, 5428, 5281, 3501, 5098, 1487, 2690, 5429,
	5280, 3710, 3710, 916, 5427, 3082, 3722, 3710, 3710, 5426,
	3417, 5207, 5283, 2862, 4332, 3463, 3464, 4314, 5282, 5284,
	5285, 1574, 1425, 5090, 1451, 1342, 5433, 3650, 5432, 3746,
	767, 2773, 767, 3657, 674, 767, 674, 3083, 3455, 1643,
	767, 767, 3456, 3667, 1466, 4162, 1466, 1448, 3590, 5288,
	3889, 3450, 2470, 1569, 4371, 3541, 5243, 3543, 1349, 4958,
	1361, 3411, 3544, 4675, 2812, 4507, 1404, 3867, 2497, 3545,
	5135, 1453, 3847, 3769, 674, 3487, 3452, 767, 3542, 3428,
	3157, 1131, 3485, 3511, 2499, 3486, 3516, 1175, 2238, 757,
	3613, 1695, 1648, 3567, 3623, 3624, 3625, 1646, 1504, 1313,
	1490, 3656, 674, 4599, 5663, 3492, 3491, 4926, 4927, 5633,
	674, 5155, 674, 1459, 767, 767, 2839, 5154, 674, 5681,
	722, 3535, 3500, 5659, 5451, 4239, 3752, 5705, 3627, 3774,
	776, 5592, 5453, 1406, 1154, 1108, 1488, 4886, 3629, 4708,
	3888, 4660, 4216, 3777, 3183, 1479, 3789, 2800, 104, 3132,
	5446, 1446, 2492, 3695, 1360, 1568, 3101, 2546, 674, 1716,
	1348, 1585, 1493, 3525, 3523, 1452, 3536, 705, 1492, 4608,
	3862, 2614, 3718, 2449, 3865, 2605, 3755, 5448, 1040, 674,
	2602, 1449, 2525, 1034, 2604, 1083, 5447, 3090, 1447, 5456,
	3925, 2651, 1457, 5449, 2656, 3085, 3555, 3720, 4866, 674,
	674, 674, 674, 5454, 4605, 4851, 3919, 3250, 4856, 5310,
	5311, 4867, 4854, 3840, 4855, 4857, 5129, 141, 5314, 5680,
	5127, 5309, 4899, 3876, 3502, 3878, 3579, 3582, 3812, 1450,
	5130, 5313, 1066, 1040, 1040, 3874, 2603, 2633, 3532, 5461,
	3530, 3685, 3668, 3670, 3528, 741, 3529, 3531, 3021, 674,
	674, 737, 674, 674, 674, 5636, 1405, 737, 737, 724,
	724, 2606, 5462, 5463, 4638, 3285, 3053, 3054, 3639, 3640,
	3641, 3684, 3793, 5366, 5450, 3281, 3921, 5365, 3923, 3490,
	3759, 3707, 5365, 5366, 5104, 3660, 5455, 3723, 3724, 3735,
	3736, 674, 145, 146, 147, 148, 4898, 767, 1489, 2559,
	5107, 4853, 1486, 4858, 3284, 3672, 3980, 4016, 3286, 3679,
	674, 3918, 144, 3684, 2847, 2848, 3942, 3943, 674, 3393,
	3447, 4072, 4073, 660, 3811, 662, 664, 3691, 1292, 3690,
	3689, 2216, 3715, 3717, 1494, 3283, 3714, 3713, 5293, 5292,
	5106, 5105, 4865, 1016, 954, 3546, 3547, 837, 1407, 3737,
	5461, 5548, 4375, 3767, 816, 816, 3058, 3044, 3749, 3682,
	848, 4354, 880, 2903, 674, 248, 3849, 3850, 3976, 737,
	816, 3764, 5688, 2211, 3103, 4979, 3859, 5235, 1408, 3248,
	3990, 1409, 674, 3778, 3832, 1410, 3730, 4700, 5587, 3993,
	4495, 3994, 3995, 4494, 674, 848, 927, 2416, 4249, 2776,
	4047, 3809, 848, 4355, 3083, 3915, 1663, 1411, 3830, 3831,
	5588, 3043, 2636, 767, 3498, 3085, 3835, 3085, 925, 925,
	925, 2635, 4044, 4224, 3244, 3881, 4009, 3860, 2451, 4011,
	3630, 3631, 3632, 2401, 3845, 2400, 4356, 4357, 4358, 737,
	767, 4617, 767, 4219, 3776, 1414, 4218, 767, 3732, 3701,
	3706, 3704, 3705, 3703, 3776, 3699, 3702, 3533, 4264, 737,
	5586, 5193, 1412, 3875, 5529, 5528, 2493, 4222, 3706, 3704,
	3705, 3703, 5364, 4034, 3873, 5362, 1040, 5290, 3882, 1413,
	4070, 5095, 3969, 5061, 3897, 4290, 3904, 4908, 3460, 3908,
	4667, 3548, 4904, 4363, 4194, 3775, 4193, 4135, 3890, 3971,
	3553, 3972, 4112, 4113, 4114, 4134, 4025, 4024, 3482, 3439,
	3366, 3827, 4053, 3355, 3495, 3495, 1415, 4131, 4060, 1726,
	3460, 3110, 3051, 2619, 2533, 3970, 2485, 2480, 3974, 1664,
	3944, 1536, 1496, 4616, 3701, 3706, 3704, 3705, 3703, 3991,
	3699, 3702, 4615, 1495, 1471, 1355, 1267, 2899, 2900, 2901,
	2902, 1068, 1057, 3753, 3534, 790, 786, 4529, 4075, 3948,
	4901, 4902, 2956, 5516, 2922, 757, 3835, 5436, 5435, 3084,
	3084, 5315, 4584, 4825, 4775, 5496, 4649, 4530, 3958, 2590,
	2731, 4434, 3978, 4431, 3644, 4291, 4139, 3783, 3961, 3478,
	2569, 2566, 3966, 4910, 4903, 1144, 4906, 4907, 4909, 4905,
	1137, 3620, 3621, 3622, 3857, 3510, 2821, 3507, 4028, 4029,
	3614, 3615, 3616, 3617, 3618, 3619, 3880, 3067, 3587, 3057,
	4065, 4726, 5611, 3494, 3083, 2397, 3083, 5406, 4684, 3082,
	4727, 4683, 3082, 4965, 4831, 3701, 3706, 3704, 3705, 3703,
	4229, 3699, 3702, 3710, 3722, 3710, 3710, 3710, 4015, 4728,
	4064, 4017, 4236, 3493, 3084, 4807, 4036, 2405, 4062, 4725,
	2404, 736, 4569, 4522, 4093, 3727, 3605, 3537, 2852, 2792,
	2513, 4176, 789, 4261, 4244, 4031, 778, 5171, 4032, 5610,
	735, 5505, 5042, 5039, 4027, 4806, 4793, 674, 4770, 1285,
	4765, 4764, 4455, 4454, 4444, 4439, 4352, 4006, 4046, 4005,
	4004, 4003, 4002, 4001, 4061, 3997, 767, 1051, 1643, 3996,
	3988, 4063, 3975, 3968, 4043, 3956, 3955, 3952, 3886, 674,
	3885, 4111, 767, 2274, 3884, 3575, 674, 3574, 3573, 816,
	3572, 3522, 4019, 4020, 3524, 2906, 767, 3415, 3379, 3360,
	4079, 4080, 4081, 4082, 2888, 130, 2905, 2906, 4030, 2409,
	2760, 4095, 2682, 3162, 2679, 2674, 4299, 2667, 2653, 816,
	2649, 4308, 2648, 2646, 4265, 2641, 2639, 4262, 4111, 2632,
	2615, 2601, 2600, 2599, 2585, 2558, 2554, 4213, 2547, 4108,
	4271, 2402, 2864, 3228, 2865, 4277, 4275, 3518, 3445, 3444,
	1090, 1043, 767, 796, 1032, 4350, 4217, 2736, 3239, 4220,
	674, 3082, 3215, 4133, 2735, 4260, 2954, 5571, 4365, 4129,
	4138, 4120, 4122, 4123, 5570, 1034, 674, 674, 5541, 5322,
	4298, 1034, 4307, 2513, 795, 4754, 4750, 4381, 4334, 4344,
	4596, 1643, 2885, 674, 1643, 3720, 1643, 4397, 4144, 2883,
	2886, 2882, 737, 2884, 4595, 794, 4562, 4561, 4296, 3982,
	793, 4419, 3354, 674, 3502, 3854, 3351, 4396, 3812, 4392,
	3348, 2652, 3344, 4342, 2620, 4717, 4329, 3474, 3473, 674,
	4328, 4175, 3472, 3471, 3470, 4188, 3223, 3848, 674, 674,
	674, 4190, 2580, 674, 4204, 1501, 674, 674, 674, 674,
	4189, 4360, 4205, 4202, 1398, 4212, 4404, 1392, 4369, 674,
	1140, 4359, 4221, 3554, 4215, 792, 674, 1034, 674, 5654,
	4209, 4210, 2921, 4293, 4232, 2608, 4225, 4226, 762, 674,
	1141, 4747, 2920, 4231, 2607, 4233, 4234, 674, 674, 4409,
	4412, 4699, 674, 674, 674, 674, 674, 4252, 763, 4191,
	1038, 4483, 4246, 4195, 184, 4321, 3263, 5672, 4423, 5671,
	2980, 4274, 3107, 4664, 3811, 3454, 1361, 3216, 1531, 5181,
	5180, 4467, 4292, 4744, 4089, 4090, 3124, 4284, 4653, 1532,
	4288, 811, 2211, 4690, 4294, 4272, 4008, 3893, 3236, 674,
	674, 674, 674, 674, 3204, 3111, 2475, 2467, 2417, 3420,
	2410, 4422, 4398, 1358, 1347, 3429, 1341, 3502, 1337, 1319,
	5526, 3812, 821, 4376, 4896, 778, 5026, 5025, 4977, 4482,
	767, 767, 767, 767, 4319, 4377, 4010, 3977, 3922, 3920,
	2590, 3084, 3892, 4325, 3861, 4336, 4337, 4327, 3756, 3188,
	3409, 2590, 2590, 4333, 4343, 4340, 4506, 4361, 3184, 3109,
	3104, 3085, 2746, 3457, 3085, 2744, 2583, 2579, 2486, 4136,
	4137, 4335, 2471, 4508, 2922, 4147, 4148, 4149, 4150, 4151,
	4152, 4153, 4154, 4155, 4156, 4157, 4158, 4159, 4527, 4163,
	2463, 2461, 3477, 4410, 2443, 4364, 4511, 4367, 1573, 4067,
	1572, 1571, 3502, 4521, 1565, 1540, 4488, 1537, 4414, 4421,
	4490, 4411, 1533, 1528, 1513, 1472, 1419, 3811, 1416, 4523,
	4426, 1397, 1391, 4752, 4751, 3402, 2442, 4305, 1307, 1004,
	4473, 5439, 5369, 5357, 1321, 5258, 5006, 5093, 5028, 4946,
	4885, 4514, 4755, 4192, 4712, 4698, 4417, 4687, 4493, 4270,
	3751, 3209, 3203, 1581, 4104, 2498, 2411, 4324, 4397, 820,
	2392, 2366, 1618, 3570, 3571, 2755, 2754, 674, 3496, 3082,
	3082, 740, 740, 3082, 740, 4472, 740, 1034, 4609, 916,
	5679, 674, 5664, 5503, 4489, 5213, 3710, 3207, 3162, 4626,
	4484, 916, 4295, 3868, 5172, 2565, 4248, 4520, 3391, 4633,
	2473, 1198, 4487, 1196, 1195, 1188, 2383, 4243, 2922, 4042,
	264, 4512, 3086, 3086, 1036, 1602, 4673, 4964, 3094, 816,
	5483, 4600, 4601, 4959, 4677, 3229, 4059, 5175, 4961, 5350,
	4957, 2424, 4953, 3085, 3085, 4630, 3765, 4486, 3407, 4648,
	3768, 767, 4289, 4441, 3114, 4171, 3757, 3121, 4446, 2274,
	4644, 1643, 1458, 647, 2609, 3138, 2430, 1404, 2429, 4971,
	4665, 3084, 4970, 3084, 4685, 4311, 5200, 4682, 4461, 3085,
	3083, 4658, 816, 3083, 4624, 4625, 4654, 3210, 3364, 4351,
	4353, 2513, 4124, 674, 3866, 809, 3208, 4550, 1353, 2664,
	5212, 4564, 1712, 4348, 4662, 3414, 916, 3086, 4583, 3170,
	2699, 4668, 3825, 4713, 3824, 42, 41, 40, 39, 38,
	37, 36, 35, 4398, 3215, 4652, 62, 61, 60, 4515,
	4516, 4517, 4518, 4519, 1406, 59, 3663, 58, 2513, 57,
	56, 4731, 55, 4697, 4707, 54, 4612, 4613, 53, 52,
	4618, 51, 50, 4706, 4694, 4695, 4629, 49, 48, 47,
	46, 45, 44, 4603, 43, 34, 33, 32, 4733, 31,
	30, 29, 28, 4602, 27, 4384, 26, 25, 4391, 24,
	4393, 4704, 23, 2717, 4055, 3475, 854, 4622, 1527, 713,
	4730, 674, 1099, 1097, 674, 1652, 1076, 854, 854, 1086,
	674, 674, 674, 2718, 3189, 674, 674, 674, 77, 3239,
	76, 75, 74, 918, 73, 674, 674, 72, 918, 854,
	71, 70, 69, 918, 68, 918, 67, 3400, 66, 5,
	3404, 4404, 854, 854, 65, 80, 82, 4781, 4560, 81,
	79, 4748, 78, 4563, 994, 994, 63, 854, 854, 854,
	4692, 4680, 3083, 3083, 4691, 674, 674, 1405, 18, 674,
	17, 1522, 2437, 166, 1290, 2447, 2853, 3913, 683, 4611,
	674, 4703, 4761, 4762, 3894, 4378, 222, 3823, 2700, 3216,
	1394, 854, 5560, 3261, 5331, 4255, 4642, 153, 3083, 1041,
	4718, 5188, 3797, 4593, 3794, 4385, 4253, 5218, 4394, 4259,
	3097, 4720, 737, 4257, 4780, 3093, 5632, 4852, 3593, 3018,
	3023, 4846, 5125, 4887, 5444, 4823, 4669, 4884, 4729, 4627,
	3159, 136, 4824, 4759, 914, 5103, 674, 925, 4864, 925,
	925, 4794, 4405, 3042, 1122, 1123, 4797, 4753, 2399, 4811,
	97, 761, 760, 5438, 1149, 4757, 5141, 5326, 4756, 1407,
	4303, 4911, 4640, 4900, 4247, 150, 4719, 4671, 4760, 1055,
	2810, 1105, 700, 2799, 1082, 2403, 4637, 4636, 5312, 674,
	2590, 5308, 4850, 737, 5307, 4206, 4812, 3050, 3082, 1408,
	3085, 674, 1409, 4634, 4626, 3063, 1410, 2387, 92, 91,
	90, 3085, 3085, 89, 88, 3085, 87, 86, 2416, 85,
	84, 83, 16, 15, 14, 2473, 767, 4659, 1411, 11,
	4931, 5072, 4261, 3085, 5070, 5071, 3391, 674, 5069, 2910,
	823, 767, 674, 1755, 2840, 1138, 3391, 4397, 767, 4808,
	1715, 1130, 5078, 4130, 4557, 4767, 5063, 4930, 4769, 4916,
	2232, 5440, 4227, 2943, 972, 737, 1414, 674, 973, 1544,
	2513, 970, 1189, 996, 4021, 4818, 4589, 4186, 4860, 4177,
	4701, 674, 2986, 1412, 4934, 2982, 674, 2971, 2993, 767,
	4879, 4577, 674, 2926, 3086, 1173, 1172, 4350, 2952, 3578,
	1413, 2230, 1167, 927, 4947, 1168, 816, 1163, 1706, 4913,
	1703, 4998, 3466, 2774, 2586, 3282, 3924, 3945, 3288, 5234,
	3401, 1762, 2972, 1757, 4397, 821, 2, 816, 816, 5004,
	1, 0, 4839, 4940, 0, 0, 737, 1415, 0, 0,
	0, 4993, 0, 0, 4396, 674, 674, 4872, 5021, 0,
	737, 674, 4863, 4980, 4018, 674, 3085, 0, 0, 0,
	0, 4894, 0, 4023, 4260, 4875, 821, 927, 4974, 4917,
	4897, 4893, 4932, 0, 674, 116, 4929, 4914, 0, 0,
	0, 737, 0, 4948, 0, 0, 5036, 130, 0, 0,
	0, 5019, 0, 5046, 5007, 4688, 4955, 5065, 4954, 0,
	0, 0, 4398, 22, 0, 0, 4578, 0, 0, 3083,
	0, 0, 0, 0, 5012, 0, 4999, 0, 3460, 5001,
	3083, 3083, 0, 0, 3083, 0, 0, 0, 0, 64,
	0, 0, 5044, 0, 0, 10, 0, 21, 5015, 0,
	5017, 0, 3083, 5059, 5060, 3734, 5029, 3734, 0, 0,
	4397, 0, 0, 5018, 674, 0, 5108, 0, 0, 0,
	0, 0, 820, 0, 916, 0, 9, 5120, 0, 0,
	5109, 0, 3766, 1041, 0, 5030, 0, 5048, 0, 4398,
	5043, 3502, 5045, 0, 0, 3812, 5054, 8, 0, 4951,
	0, 2827, 7, 0, 20, 0, 0, 0, 5062, 19,
	0, 0, 5147, 820, 0, 0, 0, 13, 0, 12,
	0, 0, 3815, 0, 3086, 5086, 3086, 3084, 0, 3826,
	3084, 4877, 0, 4845, 4877, 5148, 4859, 0, 1041, 1041,
	0, 0, 854, 0, 0, 0, 0, 0, 4142, 0,
	5142, 0, 854, 0, 0, 854, 767, 6, 4146, 5153,
	5150, 3853, 854, 674, 0, 854, 0, 0, 767, 5131,
	5132, 4975, 0, 5133, 5134, 3083, 5116, 0, 0, 5178,
	5157, 674, 5115, 4167, 0, 0, 0, 0, 0, 916,
	0, 3811, 0, 3082, 0, 0, 4996, 0, 5184, 0,
	0, 0, 0, 5185, 0, 0, 0, 767, 0, 5041,
	0, 918, 918, 0, 0, 4398, 0, 0, 0, 0,
	3085, 0, 0, 0, 0, 5158, 918, 5152, 5156, 4629,
	674, 5203, 5159, 674, 1040, 5166, 0, 5208, 5167, 5165,
	0, 5174, 0, 0, 0, 0, 0, 0, 0, 5143,
	0, 0, 0, 0, 918, 918, 0, 0, 918, 5209,
	3946, 0, 0, 0, 5182, 0, 0, 0, 5239, 3085,
	4830, 0, 0, 5202, 5229, 0, 5206, 0, 0, 0,
	5205, 0, 0, 5214, 5215, 0, 0, 0, 0, 5223,
	0, 5225, 0, 5227, 5008, 1643, 0, 5231, 2397, 3084,
	3084, 5230, 0, 0, 0, 0, 0, 0, 3162, 0,
	0, 0, 0, 0, 5244, 5022, 5023, 5306, 0, 5245,
	0, 5246, 5247, 0, 0, 0, 1643, 0, 1643, 0,
	5220, 5294, 5255, 5253, 0, 3084, 0, 5249, 0, 0,
	0, 994, 5333, 5254, 0, 5256, 3085, 0, 757, 5330,
	5271, 5272, 0, 0, 737, 5110, 0, 5286, 0, 0,
	0, 0, 0, 737, 737, 4318, 0, 4007, 0, 0,
	0, 5287, 5336, 0, 0, 0, 0, 0, 5329, 0,
	0, 1041, 5338, 5328, 5111, 0, 5343, 5305, 5302, 0,
	0, 0, 816, 0, 5297, 0, 5337, 0, 674, 5325,
	0, 5304, 0, 0, 4785, 4786, 0, 0, 0, 4789,
	4790, 0, 5339, 0, 0, 1643, 0, 0, 4913, 821,
	0, 0, 5340, 0, 0, 0, 0, 674, 674, 3083,
	5163, 5347, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 5353, 0, 0, 0, 0, 5371, 0, 5065, 0,
	5363, 5361, 0, 5367, 0, 0, 0, 0, 4671, 0,
	5373, 0, 0, 0, 0, 0, 0, 1040, 5389, 0,
	5423, 0, 3085, 0, 0, 0, 854, 0, 3083, 0,
	854, 854, 0, 5390, 0, 5388, 3085, 5386, 5415, 5392,
	5120, 5383, 5437, 5385, 0, 5387, 5401, 5334, 0, 0,
	0, 0, 0, 0, 5409, 0, 5407, 994, 5408, 854,
	3460, 0, 0, 1643, 0, 0, 0, 925, 0, 0,
	0, 854, 5421, 5422, 0, 0, 0, 854, 5468, 0,
	0, 0, 5084, 0, 0, 0, 0, 4397, 0, 0,
	5443, 0, 0, 4125, 5484, 0, 927, 927, 0, 2513,
	674, 5471, 5472, 0, 5481, 3083, 820, 5476, 0, 0,
	0, 0, 5475, 674, 5478, 0, 5474, 4496, 0, 0,
	0, 0, 5486, 5487, 0, 0, 918, 0, 0, 5477,
	0, 0, 0, 0, 0, 5510, 918, 674, 918, 0,
	0, 5124, 0, 927, 5480, 918, 0, 0, 5506, 0,
	5508, 0, 4658, 0, 5495, 3085, 918, 918, 918, 918,
	918, 0, 5498, 2559, 0, 5504, 5501, 918, 0, 5517,
	0, 5509, 5513, 5514, 0, 5533, 1643, 1643, 0, 5512,
	5536, 2961, 0, 0, 5532, 0, 3084, 0, 0, 0,
	0, 918, 2988, 0, 0, 5521, 2397, 3084, 3084, 0,
	3057, 3084, 0, 5518, 3014, 0, 0, 2961, 0, 0,
	0, 5333, 816, 816, 0, 5546, 0, 5082, 0, 3084,
	4397, 0, 916, 5555, 0, 0, 5538, 0, 5085, 5545,
	0, 3083, 0, 5552, 5553, 0, 5543, 0, 5547, 0,
	5561, 674, 4398, 0, 5556, 3083, 5551, 0, 5550, 0,
	5220, 0, 5558, 0, 5328, 5559, 5557, 816, 0, 737,
	0, 5568, 0, 0, 0, 0, 0, 0, 5112, 0,
	0, 0, 2279, 918, 0, 5576, 918, 0, 0, 0,
	0, 5575, 0, 0, 0, 5595, 0, 0, 0, 0,
	0, 5572, 0, 5577, 0, 0, 0, 5583, 0, 0,
	3086, 0, 3815, 3086, 3085, 0, 5602, 0, 5604, 0,
	0, 0, 0, 0, 994, 0, 0, 0, 854, 0,
	5370, 994, 5600, 5609, 2279, 5607, 2279, 5603, 916, 5623,
	5624, 5625, 0, 5120, 0, 0, 5601, 5620, 1040, 0,
	5616, 816, 3084, 0, 3460, 3460, 0, 4397, 0, 854,
	5639, 5579, 5641, 0, 0, 854, 5627, 5634, 5635, 5291,
	0, 0, 5638, 0, 3083, 5614, 5334, 5642, 0, 0,
	5595, 4338, 4339, 0, 4341, 4398, 0, 5643, 4676, 0,
	4850, 5612, 5613, 5640, 5658, 5661, 0, 5657, 0, 5666,
	5320, 5488, 5323, 5665, 0, 916, 0, 0, 0, 0,
	4372, 0, 5221, 5222, 5673, 994, 5670, 0, 5674, 737,
	0, 916, 5677, 5678, 0, 5684, 5683, 0, 0, 5689,
	5667, 0, 674, 5690, 0, 0, 5676, 927, 927, 5700,
	4850, 5696, 994, 5702, 5595, 5704, 5649, 5692, 5703, 0,
	0, 5706, 5695, 5691, 0, 3815, 5707, 0, 0, 0,
	5595, 5711, 0, 5698, 5699, 0, 0, 0, 2890, 0,
	0, 0, 0, 0, 0, 2214, 0, 0, 2894, 0,
	2892, 0, 3086, 3086, 2889, 0, 2891, 2893, 0, 5384,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5649, 0, 3085,
	0, 0, 4398, 0, 0, 854, 0, 0, 3086, 0,
	0, 4758, 0, 3083, 0, 0, 0, 0, 0, 0,
	0, 0, 4479, 0, 0, 5649, 0, 0, 0, 0,
	4491, 0, 0, 0, 0, 0, 0, 0, 0, 994,
	0, 994, 0, 0, 918, 0, 0, 0, 0, 0,
	0, 1175, 0, 0, 3613, 4787, 0, 0, 3623, 3624,
	3625, 0, 0, 0, 0, 0, 994, 0, 0, 854,
	4100, 854, 854, 854, 854, 1758, 0, 5464, 1728, 0,
	0, 0, 1740, 1741, 1742, 0, 0, 4798, 4799, 0,
	887, 887, 3627, 2903, 2372, 0, 3084, 2373, 0, 0,
	0, 2378, 3629, 2370, 0, 0, 0, 0, 2375, 2379,
	2374, 0, 2376, 0, 0, 0, 2377, 1751, 1752, 2371,
	0, 0, 0, 3085, 0, 4549, 2380, 918, 918, 918,
	0, 0, 3085, 0, 0, 5578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3084, 0, 0, 0, 0,
	0, 0, 854, 5410, 5411, 1175, 0, 0, 3613, 0,
	0, 0, 3623, 3624, 3625, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4099, 0, 0, 0, 0, 0,
	0, 0, 0, 1374, 0, 0, 0, 2895, 1375, 0,
	5534, 5535, 1384, 0, 0, 0, 3627, 5539, 5540, 0,
	0, 5542, 0, 0, 0, 0, 3629, 918, 3083, 0,
	0, 0, 0, 0, 918, 918, 5380, 0, 0, 887,
	0, 3823, 3084, 0, 0, 0, 0, 0, 918, 994,
	0, 0, 918, 918, 918, 918, 918, 918, 918, 918,
	918, 918, 918, 918, 918, 918, 918, 918, 0, 918,
	0, 0, 0, 0, 1377, 0, 0, 2279, 0, 3085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2899, 2900, 2901,
	2902, 0, 0, 1383, 2896, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4674, 0, 0,
	0, 0, 0, 1758, 0, 0, 1728, 0, 0, 3086,
	1740, 1741, 1742, 0, 1388, 0, 0, 0, 0, 0,
	3086, 3086, 2372, 0, 3086, 2373, 0, 0, 0, 2378,
	4619, 2370, 3083, 0, 0, 0, 2375, 2379, 2374, 4702,
	2376, 3083, 3086, 0, 2377, 1751, 1752, 2371, 3084, 2988,
	2988, 0, 0, 0, 2380, 0, 0, 1373, 0, 0,
	0, 0, 3084, 0, 0, 0, 0, 1758, 1371, 0,
	1728, 0, 0, 0, 1740, 1741, 1742, 0, 0, 0,
	0, 0, 0, 0, 1378, 0, 2372, 0, 0, 2373,
	0, 0, 0, 2378, 0, 2370, 0, 0, 5056, 5058,
	2375, 2379, 2374, 0, 2376, 0, 0, 0, 2377, 1751,
	1752, 2371, 0, 0, 0, 0, 0, 1372, 2380, 1380,
	0, 0, 0, 0, 0, 1379, 0, 0, 0, 0,
	0, 0, 0, 0, 2988, 2988, 2988, 0, 3199, 2845,
	0, 5599, 0, 0, 3460, 0, 0, 4714, 0, 1758,
	2847, 2848, 1728, 0, 0, 0, 1740, 1741, 1742, 0,
	0, 0, 0, 0, 0, 3086, 5615, 0, 3083, 0,
	1381, 0, 0, 0, 0, 2378, 0, 2370, 0, 3194,
	0, 3084, 2375, 2379, 2374, 0, 2376, 0, 0, 0,
	2377, 1751, 1752, 2371, 0, 0, 4795, 4796, 0, 0,
	2380, 1758, 0, 0, 1728, 0, 0, 0, 1740, 1741,
	1742, 0, 0, 0, 0, 1382, 0, 0, 0, 0,
	2372, 0, 0, 2373, 0, 0, 1385, 2378, 0, 2370,
	0, 0, 0, 0, 2375, 2379, 2374, 3202, 2376, 0,
	0, 0, 2377, 1751, 1752, 2371, 0, 0, 0, 0,
	0, 5169, 2380, 0, 0, 0, 0, 0, 0, 3298,
	0, 1387, 1386, 0, 0, 3620, 3621, 3622, 0, 0,
	0, 0, 0, 0, 3614, 3615, 3616, 3617, 3618, 3619,
	1747, 0, 0, 0, 0, 0, 0, 0, 0, 1737,
	1738, 1739, 0, 0, 0, 0, 3606, 0, 1731, 1732,
	1733, 1734, 1735, 1736, 5646, 3607, 0, 0, 0, 0,
	0, 0, 0, 1758, 0, 0, 1728, 0, 0, 0,
	1740, 1741, 1742, 0, 0, 0, 0, 0, 0, 0,
	3084, 3192, 2372, 0, 0, 2373, 0, 0, 1376, 2378,
	0, 2370, 1620, 0, 1620, 1620, 2375, 2379, 2374, 0,
	2376, 0, 0, 0, 2377, 1751, 1752, 2371, 0, 4915,
	0, 0, 0, 0, 2380, 5646, 3200, 0, 1390, 3620,
	3621, 3622, 0, 0, 0, 0, 0, 0, 3614, 3615,
	3616, 3617, 3618, 3619, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5646, 0, 0, 0, 0, 0, 3196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 5300, 0, 0, 0, 3086,
	0, 918, 918, 0, 918, 0, 0, 918, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 918, 918, 0,
	0, 0, 0, 3198, 918, 0, 918, 918, 918, 918,
	918, 918, 918, 918, 918, 918, 918, 0, 918, 0,
	918, 0, 918, 918, 918, 918, 918, 918, 3086, 918,
	918, 918, 0, 5420, 918, 0, 0, 0, 0, 3815,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3195, 0, 0, 1747, 0,
	0, 0, 0, 1758, 0, 0, 1728, 1737, 1738, 1739,
	1740, 1741, 1742, 0, 925, 3084, 1731, 1732, 1733, 1734,
	1735, 1736, 2372, 3645, 0, 2373, 0, 0, 0, 2378,
	3193, 2370, 0, 0, 0, 3086, 2375, 2379, 2374, 0,
	2376, 0, 0, 0, 2377, 1751, 1752, 2371, 0, 0,
	0, 0, 0, 0, 2380, 0, 0, 5419, 0, 918,
	0, 0, 1747, 918, 918, 918, 918, 0, 0, 0,
	3191, 1737, 1738, 1739, 0, 0, 0, 0, 925, 0,
	1731, 1732, 1733, 1734, 1735, 1736, 0, 0, 0, 0,
	0, 918, 918, 3197, 0, 0, 0, 0, 0, 0,
	3201, 0, 0, 0, 0, 0, 0, 1404, 0, 0,
	0, 0, 0, 994, 0, 0, 5138, 0, 0, 1041,
	0, 0, 994, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2279, 0, 0, 3084,
	0, 0, 0, 0, 1747, 0, 0, 0, 3084, 0,
	0, 0, 0, 1737, 1738, 1739, 0, 0, 2988, 2988,
	0, 3086, 1731, 1732, 1733, 1734, 1735, 1736, 0, 0,
	0, 2279, 4178, 0, 1406, 3086, 918, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 994,
	0, 0, 0, 0, 0, 0, 1747, 0, 0, 0,
	0, 0, 0, 0, 994, 1737, 1738, 1739, 0, 0,
	0, 0, 0, 0, 1731, 1732, 1733, 1734, 1735, 1736,
	0, 0, 0, 2279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4179, 0, 0, 0, 854, 0,
	0, 0, 2279, 0, 0, 0, 0, 0, 0, 2988,
	2988, 2988, 2988, 2988, 2988, 2988, 2988, 2988, 2988, 2988,
	2988, 2988, 0, 2988, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3084, 0, 0, 0, 0,
	994, 994, 0, 0, 0, 0, 0, 0, 0, 994,
	5211, 4181, 0, 0, 3086, 0, 2961, 1405, 918, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1747, 0,
	0, 0, 0, 0, 0, 0, 0, 1737, 1738, 1739,
	0, 0, 0, 854, 854, 0, 1731, 1732, 1733, 1734,
	1735, 1736, 0, 0, 0, 0, 0, 5316, 5317, 5318,
	5319, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1041, 0, 0, 0, 0, 0, 854, 0,
	0, 0, 0, 4241, 0, 854, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	5631, 0, 0, 0, 0, 0, 0, 2279, 0, 1407,
	0, 0, 0, 918, 0, 994, 918, 0, 918, 918,
	0, 994, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1408,
	0, 0, 1409, 0, 0, 0, 1410, 0, 1758, 918,
	0, 1728, 0, 0, 0, 1740, 1741, 1742, 2416, 2988,
	0, 0, 0, 3086, 854, 0, 0, 2372, 1411, 994,
	2373, 854, 0, 0, 2378, 0, 2370, 0, 0, 0,
	0, 2375, 2379, 2374, 0, 3635, 0, 0, 0, 2377,
	1751, 1752, 2371, 0, 0, 0, 0, 2279, 0, 2380,
	0, 3636, 0, 854, 0, 0, 1414, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1412, 0, 0, 0, 0, 1747, 0,
	0, 0, 0, 0, 0, 918, 0, 1737, 1738, 1739,
	1413, 0, 0, 918, 5626, 0, 1731, 1732, 1733, 1734,
	1735, 1736, 0, 1374, 0, 918, 0, 0, 1375, 0,
	0, 0, 1384, 918, 0, 0, 0, 3637, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1415, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 918, 918, 0, 0, 0, 0, 918,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3116, 0, 0, 0, 918, 918, 0, 0, 1454,
	918, 0, 0, 0, 1377, 0, 0, 0, 0, 918,
	0, 0, 0, 0, 0, 918, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 918, 918, 918,
	0, 0, 0, 1383, 1758, 0, 0, 1728, 3086, 0,
	0, 1740, 1741, 1742, 0, 918, 0, 925, 925, 0,
	0, 0, 0, 2372, 0, 0, 918, 0, 0, 0,
	2378, 1460, 2370, 0, 1388, 0, 0, 2375, 2379, 2374,
	0, 2376, 0, 1041, 0, 2377, 1751, 1752, 2371, 0,
	918, 918, 918, 0, 0, 2380, 0, 0, 918, 918,
	918, 0, 0, 918, 925, 1456, 0, 0, 0, 0,
	2279, 0, 0, 0, 918, 0, 2279, 1373, 0, 0,
	0, 0, 994, 0, 0, 0, 0, 0, 1371, 0,
	0, 0, 0, 1374, 0, 0, 918, 0, 1375, 0,
	918, 0, 1384, 0, 1378, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 918, 0, 0, 0, 0, 918, 0,
	0, 0, 3086, 918, 0, 918, 0, 1372, 0, 1380,
	0, 3086, 0, 5563, 0, 1379, 0, 0, 0, 0,
	0, 0, 0, 1445, 0, 994, 0, 0, 0, 0,
	0, 0, 0, 0, 1377, 0, 0, 0, 0, 0,
	0, 0, 0, 994, 0, 1455, 0, 0, 854, 0,
	0, 0, 0, 0, 5648, 0, 0, 4585, 0, 0,
	1381, 0, 0, 1383, 0, 0, 0, 2225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1451, 2279, 994, 0, 0,
	0, 0, 0, 994, 1388, 0, 0, 0, 0, 0,
	0, 0, 0, 854, 854, 1382, 0, 0, 1448, 963,
	0, 0, 0, 0, 0, 5648, 1385, 0, 0, 5621,
	0, 0, 1281, 854, 854, 0, 0, 0, 0, 3117,
	0, 0, 1453, 854, 0, 0, 0, 1373, 3086, 0,
	0, 0, 0, 5648, 0, 0, 0, 4549, 918, 1369,
	0, 1387, 1386, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1378, 0, 0, 0, 0, 0,
	0, 0, 918, 1747, 1459, 0, 0, 0, 0, 0,
	0, 0, 1737, 1738, 1739, 0, 5621, 0, 0, 0,
	0, 1731, 1732, 1733, 1734, 1735, 1736, 0, 0, 1380,
	0, 0, 5685, 0, 0, 1379, 0, 0, 0, 104,
	0, 0, 1446, 0, 0, 0, 0, 0, 925, 925,
	0, 673, 2279, 2279, 2279, 0, 1452, 0, 1376, 0,
	0, 0, 721, 721, 721, 721, 744, 745, 0, 0,
	0, 0, 1449, 0, 0, 0, 0, 773, 773, 1447,
	1381, 0, 0, 1457, 0, 0, 0, 0, 1390, 0,
	0, 994, 994, 0, 994, 0, 3118, 0, 0, 0,
	0, 0, 840, 0, 844, 0, 0, 0, 882, 883,
	0, 918, 888, 889, 0, 0, 0, 0, 0, 0,
	1450, 0, 3119, 0, 0, 1382, 854, 0, 0, 0,
	0, 0, 0, 0, 0, 922, 1385, 0, 0, 0,
	0, 933, 0, 936, 0, 938, 939, 940, 941, 942,
	0, 0, 0, 951, 0, 0, 0, 956, 0, 0,
	0, 0, 964, 0, 0, 0, 0, 0, 0, 3967,
	0, 1387, 1386, 0, 0, 0, 854, 0, 0, 0,
	994, 0, 0, 0, 0, 0, 0, 0, 0, 994,
	0, 0, 0, 0, 0, 854, 854, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1747,
	0, 0, 0, 854, 0, 0, 0, 0, 1737, 1738,
	1739, 0, 854, 0, 0, 0, 918, 1731, 1732, 1733,
	1734, 1735, 1736, 0, 0, 0, 0, 0, 0, 854,
	0, 0, 0, 0, 0, 854, 0, 0, 1376, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 918, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 918, 0,
	0, 0, 0, 0, 2988, 0, 0, 0, 1390, 918,
	918, 0, 0, 918, 918, 918, 0, 918, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 918, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 918, 0, 918, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 918, 0, 0, 0, 0,
	0, 918, 918, 0, 0, 0, 2988, 0, 0, 0,
	2706, 918, 0, 0, 0, 229, 0, 0, 918, 0,
	0, 0, 918, 918, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 232, 994, 0, 918, 0, 0, 0,
	0, 918, 918, 0, 994, 918, 918, 918, 918, 918,
	918, 918, 918, 918, 918, 918, 918, 918, 0, 918,
	0, 0, 0, 0, 0, 0, 918, 918, 918, 994,
	0, 0, 0, 0, 918, 0, 918, 0, 0, 0,
	0, 0, 0, 918, 2279, 0, 0, 918, 155, 0,
	0, 0, 918, 0, 0, 184, 918, 0, 0, 0,
	0, 0, 0, 0, 918, 918, 918, 0, 0, 0,
	0, 0, 0, 180, 0, 918, 0, 158, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 0, 0, 918,
	0, 0, 918, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 238, 0, 0, 0, 0, 2702, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 918,
	918, 0, 918, 918, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 234, 0, 0, 0, 0, 0, 0,
	0, 0, 3116, 0, 235, 0, 0, 0, 0, 0,
	1454, 0, 0, 0, 918, 2712, 0, 0, 0, 0,
	0, 0, 994, 918, 918, 0, 2988, 0, 0, 2704,
	0, 0, 0, 994, 994, 0, 239, 994, 0, 0,
	0, 0, 0, 854, 240, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 2705, 918, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 170,
	0, 994, 1460, 0, 0, 2716, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2988, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 854, 0,
	161, 0, 854, 854, 0, 0, 1456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 918, 918, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 0, 1095, 167, 0, 0, 0, 0, 0, 0,
	0, 162, 219, 2707, 721, 242, 0, 918, 0, 163,
	0, 0, 0, 0, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2713, 0, 1126, 2708, 0, 2279,
	994, 2279, 243, 0, 0, 0, 0, 230, 0, 0,
	244, 0, 2279, 0, 1445, 0, 0, 0, 0, 0,
	0, 773, 0, 1152, 1152, 0, 236, 0, 0, 0,
	0, 2714, 0, 0, 0, 0, 1455, 2715, 0, 0,
	0, 0, 237, 0, 0, 0, 2709, 0, 0, 0,
	0, 0, 2710, 1758, 0, 1310, 1728, 0, 0, 0,
	1740, 1741, 1742, 0, 0, 0, 0, 0, 231, 0,
	169, 0, 2372, 0, 0, 2373, 1451, 0, 0, 2378,
	0, 2370, 172, 2279, 0, 994, 2375, 2379, 2374, 0,
	2376, 0, 0, 994, 2377, 1751, 1752, 2371, 0, 1448,
	2703, 176, 0, 0, 2380, 0, 0, 0, 0, 156,
	0, 854, 0, 0, 0, 0, 0, 164, 0, 0,
	3117, 0, 0, 1453, 0, 2279, 0, 0, 0, 0,
	0, 1352, 0, 171, 1356, 0, 2988, 0, 173, 0,
	918, 0, 0, 0, 168, 0, 179, 0, 178, 160,
	0, 0, 0, 0, 0, 0, 0, 918, 918, 159,
	0, 0, 0, 918, 918, 1459, 183, 0, 182, 0,
	918, 918, 0, 0, 0, 0, 0, 918, 0, 0,
	1468, 918, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1497, 0, 0, 0, 0, 0, 918,
	104, 0, 0, 3112, 0, 0, 0, 174, 0, 0,
	918, 0, 0, 0, 0, 0, 0, 1452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 1449, 0, 0, 99, 101, 0, 0,
	1447, 0, 0, 0, 1457, 918, 137, 0, 0, 0,
	0, 0, 0, 918, 0, 0, 918, 3118, 918, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 994, 134, 0, 0, 0, 135, 918, 0,
	0, 1450, 0, 3119, 0, 918, 0, 0, 0, 918,
	918, 0, 0, 918, 0, 0, 139, 1758, 0, 918,
	1728, 0, 0, 103, 1740, 1741, 1742, 0, 0, 0,
	0, 918, 0, 0, 0, 1374, 2372, 0, 5452, 2373,
	1375, 98, 0, 2378, 1384, 2370, 0, 0, 0, 132,
	2375, 2379, 2374, 0, 2376, 0, 0, 0, 2377, 1751,
	1752, 2371, 0, 0, 0, 0, 0, 0, 2380, 994,
	0, 0, 0, 0, 994, 0, 0, 721, 0, 721,
	721, 721, 994, 0, 721, 721, 721, 0, 0, 721,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 918, 0, 0, 0, 0, 1377, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2279, 1704, 0,
	1711, 105, 0, 0, 0, 0, 0, 1722, 0, 0,
	0, 0, 133, 0, 0, 1383, 918, 0, 2204, 2205,
	2206, 2207, 2208, 854, 0, 0, 0, 0, 0, 2213,
	120, 0, 125, 118, 918, 0, 0, 0, 107, 918,
	0, 0, 0, 0, 0, 0, 1388, 0, 0, 0,
	0, 0, 0, 2231, 0, 0, 0, 0, 0, 127,
	122, 2988, 2988, 0, 0, 2988, 0, 0, 0, 121,
	918, 0, 0, 0, 0, 0, 4952, 0, 0, 0,
	0, 0, 0, 126, 114, 0, 0, 994, 0, 1373,
	123, 0, 0, 0, 1374, 0, 0, 0, 0, 1375,
	112, 0, 854, 1384, 0, 854, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 773, 0, 0, 0,
	0, 994, 0, 0, 0, 2361, 0, 0, 0, 918,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1380, 0, 0, 0, 124, 0, 1379, 1747, 0,
	0, 2428, 0, 994, 994, 1377, 0, 1737, 1738, 1739,
	0, 0, 0, 0, 5564, 0, 1731, 1732, 1733, 1734,
	1735, 1736, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 2464, 854, 1383, 0, 0, 0, 0, 0,
	918, 0, 1381, 0, 102, 119, 0, 110, 918, 918,
	918, 104, 0, 3763, 0, 113, 0, 108, 0, 0,
	0, 0, 0, 109, 0, 1388, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 117, 918,
	918, 0, 0, 918, 918, 918, 106, 1382, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1385, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1373, 0,
	918, 0, 0, 0, 0, 2584, 0, 0, 0, 1396,
	0, 0, 0, 0, 0, 115, 0, 918, 918, 0,
	0, 3962, 0, 1387, 1386, 1378, 0, 994, 0, 0,
	0, 0, 918, 918, 0, 0, 0, 0, 0, 0,
	0, 0, 2279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2638, 0, 1758, 0, 0, 1728, 138, 0,
	1380, 1740, 1741, 1742, 0, 0, 1379, 918, 0, 0,
	0, 131, 994, 2372, 0, 0, 2373, 0, 0, 0,
	2378, 0, 2370, 0, 0, 0, 0, 2375, 2379, 2374,
	0, 2376, 0, 0, 0, 2377, 1751, 1752, 2371, 0,
	1376, 0, 0, 0, 0, 2380, 0, 0, 0, 0,
	0, 1381, 0, 0, 2726, 0, 0, 2728, 0, 0,
	0, 0, 0, 918, 0, 0, 0, 0, 0, 0,
	1390, 0, 1747, 0, 0, 0, 0, 0, 0, 0,
	0, 1737, 1738, 1739, 918, 0, 0, 0, 5554, 0,
	1731, 1732, 1733, 1734, 1735, 1736, 1382, 0, 0, 0,
	0, 0, 0, 0, 994, 0, 0, 1385, 0, 0,
	0, 0, 0, 0, 0, 0, 854, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 918, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1395, 0, 1387, 1386, 994, 994, 0, 854, 854, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 918,
	0, 0, 0, 0, 0, 0, 918, 0, 0, 0,
	0, 0, 918, 1169, 96, 0, 0, 918, 0, 918,
	0, 0, 0, 2805, 0, 0, 2808, 0, 0, 0,
	0, 0, 918, 0, 0, 0, 0, 0, 0, 721,
	721, 0, 0, 0, 721, 721, 0, 721, 721, 0,
	918, 0, 0, 0, 0, 0, 0, 918, 0, 1376,
	0, 0, 0, 0, 918, 0, 0, 0, 0, 0,
	0, 918, 0, 0, 0, 0, 0, 918, 0, 100,
	0, 0, 0, 99, 101, 0, 2204, 2205, 0, 1390,
	0, 0, 0, 137, 854, 0, 0, 0, 0, 0,
	1152, 0, 0, 0, 2866, 2867, 2868, 2869, 2870, 2871,
	2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2880, 2881,
	134, 2887, 0, 0, 135, 0, 0, 0, 96, 0,
	994, 0, 0, 0, 0, 0, 0, 994, 0, 0,
	0, 0, 0, 139, 756, 758, 0, 0, 0, 0,
	103, 0, 1758, 0, 96, 1728, 0, 0, 0, 1740,
	1741, 1742, 0, 96, 0, 0, 918, 0, 98, 2279,
	0, 2372, 0, 0, 2373, 0, 132, 0, 2378, 918,
	2370, 0, 0, 918, 0, 2375, 2379, 2374, 0, 2376,
	854, 918, 918, 2377, 1751, 1752, 2371, 0, 0, 0,
	919, 0, 0, 2380, 0, 0, 0, 0, 918, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 994, 0,
	994, 994, 918, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 918, 0, 0, 0, 0, 133,
	918, 918, 918, 0, 918, 0, 0, 0, 0, 94,
	0, 0, 0, 918, 2279, 0, 0, 120, 0, 125,
	118, 0, 0, 0, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 994, 918, 0, 2279, 0, 127, 122, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
	0, 2279, 0, 93, 0, 0, 0, 854, 0, 0,
	126, 114, 918, 0, 0, 0, 0, 123, 0, 1747,
	0, 0, 0, 0, 0, 0, 0, 112, 1737, 1738,
	1739, 0, 0, 0, 0, 5405, 0, 1731, 1732, 1733,
	1734, 1735, 1736, 0, 229, 0, 856, 0, 228, 0,
	0, 0, 0, 0, 0, 0, 0, 856, 856, 0,
	0, 0, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 926, 856,
	226, 0, 124, 926, 0, 926, 0, 0, 0, 0,
	0, 0, 856, 856, 0, 0, 918, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 856, 856, 856,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	918, 0, 918, 918, 0, 0, 0, 0, 918, 0,
	0, 102, 119, 0, 110, 0, 0, 0, 104, 0,
	0, 856, 113, 0, 108, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 918, 117, 0, 0, 0, 0,
	0, 238, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 918, 0, 0, 0,
	0, 0, 234, 0, 0, 0, 0, 918, 0, 0,
	918, 0, 115, 235, 0, 0, 918, 918, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 0,
	854, 0, 0, 0, 0, 239, 0, 0, 0, 0,
	0, 0, 0, 240, 0, 138, 0, 0, 0, 0,
	0, 233, 0, 918, 0, 0, 0, 854, 131, 0,
	0, 0, 0, 918, 0, 0, 0, 0, 0, 2940,
	0, 0, 0, 0, 225, 0, 0, 0, 0, 2962,
	2964, 0, 0, 0, 0, 0, 2970, 0, 2981, 2984,
	0, 2995, 2996, 3001, 3004, 0, 0, 918, 918, 0,
	3012, 918, 0, 0, 3016, 3022, 2964, 2964, 3029, 2964,
	0, 2964, 2964, 2964, 0, 0, 0, 0, 854, 0,
	0, 918, 0, 0, 0, 0, 0, 1747, 0, 0,
	918, 0, 918, 0, 0, 0, 1737, 1738, 1739, 0,
	0, 0, 245, 5391, 0, 1731, 1732, 1733, 1734, 1735,
	1736, 219, 0, 0, 242, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 227, 96, 758, 0, 918, 0, 246,
	0, 243, 0, 0, 0, 0, 230, 0, 918, 244,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	918, 0, 0, 0, 0, 236, 0, 0, 0, 0,
	0, 3046, 0, 0, 0, 2879, 2880, 2881, 2887, 1374,
	0, 237, 0, 0, 1375, 918, 0, 247, 1384, 0,
	0, 223, 0, 0, 0, 0, 0, 0, 918, 0,
	0, 0, 0, 756, 0, 1758, 994, 231, 1728, 0,
	0, 0, 1740, 1741, 1742, 0, 0, 918, 0, 2279,
	0, 1374, 0, 3144, 2372, 0, 1375, 2373, 0, 0,
	1384, 2378, 0, 2370, 0, 0, 0, 0, 2375, 2379,
	2374, 3158, 2376, 0, 0, 0, 2377, 1751, 1752, 2371,
	1377, 0, 0, 3175, 0, 0, 2380, 0, 0, 0,
	0, 3186, 0, 1374, 0, 918, 918, 0, 1375, 0,
	0, 0, 1384, 0, 0, 0, 0, 0, 0, 1383,
	2279, 918, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1377, 3231, 3232, 3233, 0, 918, 918, 0,
	0, 0, 0, 0, 3240, 0, 0, 0, 2279, 0,
	1388, 0, 3251, 0, 3255, 3256, 0, 0, 0, 0,
	3260, 1383, 856, 3264, 3265, 0, 0, 3272, 0, 3274,
	3277, 0, 856, 0, 1377, 856, 0, 0, 0, 0,
	0, 0, 856, 3299, 3300, 856, 0, 3304, 3305, 0,
	0, 0, 1388, 1373, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1383, 3314, 3315, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3328, 0, 0, 0, 0,
	1378, 0, 0, 1157, 0, 0, 0, 0, 0, 3339,
	3340, 3341, 3342, 3343, 1388, 1373, 3345, 0, 0, 0,
	3349, 0, 0, 0, 3352, 3353, 0, 0, 0, 0,
	3347, 0, 0, 0, 0, 1380, 0, 0, 0, 0,
	0, 1379, 1378, 0, 0, 3361, 3362, 0, 0, 3367,
	0, 3368, 0, 0, 0, 0, 3369, 1373, 3370, 3371,
	0, 0, 0, 3372, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 0, 0, 0, 1380, 0, 0,
	0, 0, 3385, 1379, 1378, 0, 1381, 0, 0, 3388,
	0, 0, 3389, 0, 0, 0, 0, 0, 0, 3398,
	3399, 0, 0, 0, 1758, 0, 0, 1728, 0, 0,
	3416, 1740, 1741, 1742, 0, 0, 5126, 0, 0, 1380,
	0, 0, 0, 2372, 0, 1379, 2373, 0, 1381, 0,
	2378, 1382, 2370, 0, 0, 0, 96, 2375, 2379, 2374,
	0, 2376, 1385, 0, 0, 2377, 1751, 1752, 2371, 0,
	0, 0, 0, 0, 0, 2380, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1381, 0, 0, 1382, 0, 3317, 0, 1387, 1386, 0,
	0, 0, 0, 0, 1385, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 756, 0, 0, 756, 756, 0, 0,
	0, 0, 0, 0, 0, 1382, 0, 3303, 0, 1387,
	1386, 0, 0, 0, 0, 0, 1385, 0, 0, 0,
	2215, 0, 0, 0, 2217, 2218, 0, 0, 0, 855,
	0, 0, 0, 0, 0, 0, 0, 1711, 0, 0,
	855, 855, 0, 0, 1376, 2213, 0, 0, 0, 2582,
	0, 1387, 1386, 0, 0, 0, 0, 1722, 0, 0,
	0, 0, 855, 0, 0, 0, 856, 0, 0, 0,
	856, 856, 0, 0, 1390, 855, 855, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1376, 0, 0, 0,
	855, 855, 855, 0, 0, 3520, 3521, 0, 0, 856,
	0, 3527, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 856, 0, 0, 0, 0, 1390, 856, 0, 0,
	1747, 0, 0, 0, 855, 0, 0, 0, 1376, 1737,
	1738, 1739, 0, 0, 0, 0, 5368, 3556, 1731, 1732,
	1733, 1734, 1735, 1736, 96, 0, 0, 0, 0, 2940,
	2940, 2940, 0, 0, 0, 0, 0, 1758, 1390, 0,
	1728, 0, 0, 0, 1740, 1741, 1742, 3581, 0, 0,
	0, 0, 0, 0, 0, 0, 2372, 0, 3598, 2373,
	0, 0, 0, 2378, 0, 2370, 0, 0, 0, 0,
	2375, 2379, 2374, 0, 2376, 0, 0, 0, 2377, 1751,
	1752, 2371, 0, 0, 0, 0, 0, 0, 2380, 0,
	3001, 3001, 3001, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3654, 0, 1758, 0,
	0, 1728, 0, 0, 0, 1740, 1741, 1742, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2372, 3676, 0,
	2373, 0, 3680, 0, 2378, 0, 2370, 0, 0, 0,
	0, 2375, 2379, 2374, 0, 2376, 0, 0, 0, 2377,
	1751, 1752, 2371, 0, 0, 3692, 5083, 0, 0, 2380,
	3696, 0, 0, 0, 0, 0, 0, 1758, 0, 0,
	1728, 0, 0, 0, 1740, 1741, 1742, 0, 0, 0,
	0, 0, 0, 3747, 0, 3750, 2372, 0, 0, 2373,
	0, 0, 2281, 2378, 0, 2370, 0, 0, 0, 0,
	2375, 2379, 2374, 0, 2376, 0, 0, 0, 2377, 1751,
	1752, 2371, 0, 0, 0, 0, 0, 0, 2380, 0,
	0, 0, 0, 3787, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 856, 0,
	0, 0, 0, 0, 2281, 0, 2281, 0, 0, 0,
	0, 3829, 0, 0, 0, 0, 0, 0, 0, 3837,
	0, 3837, 0, 0, 0, 0, 0, 3846, 0, 856,
	0, 0, 0, 0, 0, 856, 0, 0, 0, 1747,
	0, 0, 0, 0, 0, 0, 0, 0, 1737, 1738,
	1739, 0, 0, 0, 0, 0, 0, 1731, 1732, 1733,
	1734, 1735, 1736, 0, 0, 0, 0, 0, 0, 0,
	3872, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3907, 0,
	0, 0, 0, 1374, 3899, 0, 1758, 0, 1375, 1728,
	0, 0, 1384, 1740, 1741, 1742, 0, 0, 3931, 3932,
	3933, 3934, 96, 0, 0, 2372, 0, 0, 2373, 0,
	0, 0, 2378, 0, 2370, 0, 0, 0, 1263, 2375,
	2379, 2374, 0, 2376, 0, 0, 0, 2377, 1751, 1752,
	2371, 0, 0, 0, 96, 0, 1758, 2380, 0, 1728,
	0, 0, 0, 1740, 1741, 1742, 0, 0, 3959, 3960,
	0, 3963, 3964, 3965, 1377, 2372, 0, 0, 2373, 0,
	0, 0, 2378, 0, 2370, 0, 0, 0, 0, 2375,
	2379, 2374, 0, 2376, 0, 856, 0, 2377, 1751, 1752,
	2371, 0, 0, 1383, 0, 855, 0, 2380, 0, 0,
	3983, 0, 0, 3979, 0, 855, 0, 0, 855, 0,
	0, 0, 0, 0, 0, 855, 0, 0, 855, 3998,
	0, 0, 0, 0, 1388, 0, 0, 3999, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2908, 856,
	0, 856, 856, 856, 856, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1373, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4035, 0, 0, 1378, 0, 0, 0, 0, 0,
	0, 0, 1747, 0, 0, 0, 0, 926, 926, 926,
	0, 1737, 1738, 1739, 0, 0, 0, 0, 0, 0,
	1731, 1732, 1733, 1734, 1735, 1736, 0, 0, 0, 1380,
	0, 0, 856, 0, 0, 1379, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 988, 988, 0, 0, 0, 0, 0, 0,
	4076, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4084, 4085, 1747, 0, 4088, 0, 0, 0, 4091,
	1381, 0, 1737, 1738, 1739, 0, 0, 0, 0, 5052,
	4096, 1731, 1732, 1733, 1734, 1735, 1736, 0, 0, 0,
	0, 0, 0, 4102, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2940, 0, 0,
	0, 0, 0, 4115, 4116, 1382, 0, 0, 0, 0,
	0, 0, 1747, 4127, 0, 0, 1385, 2281, 0, 0,
	4132, 1737, 1738, 1739, 2964, 2964, 0, 0, 5024, 0,
	1731, 1732, 1733, 1734, 1735, 1736, 0, 0, 4143, 1758,
	0, 0, 1728, 4145, 2940, 0, 1740, 1741, 1742, 2578,
	0, 1387, 1386, 0, 0, 0, 0, 0, 2372, 0,
	0, 2373, 0, 0, 0, 2378, 0, 2370, 4164, 4165,
	4166, 0, 2375, 2379, 2374, 0, 2376, 0, 4172, 0,
	2377, 1751, 1752, 2371, 0, 3012, 0, 0, 0, 0,
	2380, 0, 0, 0, 2962, 0, 0, 0, 2964, 0,
	0, 0, 0, 0, 0, 0, 4198, 4199, 4200, 855,
	0, 0, 0, 855, 855, 0, 0, 1152, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1454, 1376, 0,
	0, 2618, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 855, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 855, 0, 0, 0, 1390, 0,
	855, 0, 2964, 0, 2940, 4245, 1743, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4276, 0, 0, 0,
	0, 1747, 0, 0, 0, 0, 0, 0, 0, 1460,
	1737, 1738, 1739, 0, 0, 0, 4280, 5003, 0, 1731,
	1732, 1733, 1734, 1735, 1736, 4285, 4286, 0, 3837, 0,
	0, 0, 0, 0, 0, 4304, 0, 0, 0, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 0,
	0, 1747, 0, 0, 0, 0, 0, 0, 0, 0,
	1737, 1738, 1739, 0, 0, 0, 915, 4981, 0, 1731,
	1732, 1733, 1734, 1735, 1736, 0, 0, 1758, 0, 0,
	1728, 0, 0, 0, 1740, 1741, 1742, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2372, 0, 0, 2373,
	0, 0, 0, 2378, 2919, 2370, 0, 0, 0, 3837,
	2375, 2379, 2374, 0, 2376, 1743, 0, 0, 2377, 1751,
	1752, 2371, 0, 0, 0, 4373, 4374, 0, 2380, 0,
	1758, 1445, 0, 1728, 0, 0, 0, 1740, 1741, 1742,
	0, 0, 4390, 0, 0, 0, 0, 0, 0, 2372,
	0, 0, 2373, 1455, 0, 0, 2378, 3027, 2370, 0,
	0, 0, 4420, 2375, 2379, 2374, 0, 2376, 0, 0,
	0, 2377, 1751, 1752, 2371, 2280, 0, 0, 4425, 0,
	0, 2380, 0, 0, 0, 0, 0, 4427, 4428, 4429,
	0, 0, 4432, 1451, 0, 4435, 4436, 4437, 4438, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4447, 0,
	0, 0, 0, 0, 0, 4450, 1448, 4451, 0, 0,
	0, 855, 0, 0, 0, 0, 0, 2280, 4465, 2280,
	0, 0, 0, 0, 0, 0, 4470, 4471, 0, 0,
	1453, 4474, 4475, 4476, 4477, 4478, 0, 0, 0, 0,
	0, 0, 855, 0, 0, 0, 0, 0, 855, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2908, 0, 0, 0, 0, 0, 0,
	0, 0, 1459, 0, 758, 0, 0, 0, 0, 0,
	975, 975, 0, 0, 3071, 3071, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	1446, 0, 4526, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1452, 0, 0, 0, 0, 4535,
	4536, 0, 0, 0, 0, 4540, 4541, 0, 0, 0,
	1449, 0, 4544, 4545, 0, 0, 0, 1447, 0, 4548,
	0, 1457, 0, 2940, 1747, 0, 0, 0, 0, 0,
	0, 0, 0, 1737, 1738, 1739, 0, 0, 0, 0,
	4840, 4555, 1731, 1732, 1733, 1734, 1735, 1736, 1758, 0,
	0, 1728, 1722, 0, 0, 1740, 1741, 1742, 1450, 0,
	0, 0, 0, 0, 0, 0, 0, 2372, 855, 0,
	2373, 0, 0, 0, 2378, 0, 2370, 0, 0, 988,
	0, 2375, 2379, 2374, 0, 2376, 0, 0, 4638, 2377,
	1751, 1752, 2371, 0, 0, 0, 1374, 0, 4588, 2380,
	4591, 1375, 0, 0, 0, 1384, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 721, 0, 0, 0,
	0, 0, 1758, 0, 0, 1728, 0, 4610, 0, 1740,
	1741, 1742, 855, 0, 855, 855, 855, 855, 0, 0,
	0, 2372, 0, 0, 2373, 0, 0, 0, 2378, 0,
	2370, 0, 0, 0, 0, 2375, 2379, 2374, 0, 2376,
	0, 0, 0, 2377, 1751, 1752, 2371, 1377, 0, 0,
	0, 0, 0, 2380, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1383, 0, 1743, 1262,
	0, 0, 0, 0, 0, 1743, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 855, 1743, 0, 0, 0,
	0, 2281, 0, 4696, 0, 0, 0, 1388, 0, 0,
	0, 0, 4709, 0, 0, 0, 0, 0, 0, 0,
	4599, 0, 1747, 0, 0, 988, 0, 0, 0, 0,
	0, 1737, 1738, 1739, 0, 0, 0, 0, 4822, 0,
	1731, 1732, 1733, 1734, 1735, 1736, 0, 0, 0, 0,
	1373, 0, 0, 2281, 0, 0, 0, 0, 0, 0,
	0, 4721, 0, 0, 0, 0, 0, 0, 856, 0,
	0, 0, 2281, 0, 0, 1747, 0, 1378, 0, 0,
	0, 0, 0, 0, 1737, 1738, 1739, 0, 0, 1454,
	0, 4813, 4749, 1731, 1732, 1733, 1734, 1735, 1736, 0,
	2280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4766, 0, 1380, 4768, 0, 0, 0, 0, 1379, 4771,
	4772, 4773, 0, 0, 4776, 4777, 4778, 0, 0, 0,
	0, 0, 0, 0, 4782, 4783, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1460, 0, 856, 856, 0, 0, 0, 0, 0,
	0, 4792, 0, 1381, 0, 0, 2215, 0, 0, 0,
	0, 0, 0, 0, 4800, 4801, 0, 0, 4805, 0,
	0, 0, 0, 0, 0, 1456, 3071, 0, 856, 4809,
	0, 0, 0, 0, 0, 856, 0, 0, 0, 0,
	0, 0, 0, 987, 987, 0, 0, 0, 1382, 0,
	0, 0, 0, 0, 0, 0, 0, 2281, 0, 1385,
	2908, 0, 4817, 0, 0, 0, 926, 0, 926, 926,
	4819, 4820, 4821, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2215, 3549, 4828, 0, 0, 0, 0,
	0, 0, 1418, 0, 1387, 1386, 0, 0, 0, 0,
	0, 4829, 0, 0, 0, 4832, 4833, 4834, 0, 0,
	0, 0, 0, 1445, 856, 0, 0, 1758, 0, 0,
	1728, 856, 988, 0, 1740, 1741, 1742, 0, 4870, 988,
	0, 0, 2964, 0, 0, 1455, 2372, 0, 0, 2373,
	0, 0, 0, 2378, 0, 2370, 0, 2281, 0, 4874,
	2375, 2379, 2374, 856, 2376, 0, 0, 0, 2377, 1751,
	1752, 2371, 0, 0, 0, 4891, 0, 0, 2380, 0,
	0, 1376, 0, 1747, 0, 1451, 4935, 0, 0, 0,
	0, 4942, 1737, 1738, 1739, 0, 0, 0, 0, 0,
	0, 1731, 1732, 1733, 1734, 1735, 1736, 0, 1448, 0,
	0, 1390, 0, 0, 0, 0, 3837, 0, 0, 0,
	0, 0, 0, 988, 0, 1197, 0, 0, 0, 0,
	4986, 0, 1453, 0, 0, 4989, 0, 0, 0, 0,
	0, 4995, 0, 0, 0, 0, 0, 975, 0, 0,
	988, 0, 0, 0, 0, 0, 3712, 1747, 3716, 0,
	0, 0, 0, 0, 0, 0, 1737, 1738, 1739, 0,
	0, 0, 0, 0, 1459, 1731, 1732, 1733, 1734, 1735,
	1736, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5031, 5032, 0, 1265, 0, 0,
	5038, 0, 0, 0, 5040, 0, 1473, 0, 0, 104,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5053, 0, 0, 1452, 0, 1743, 1743,
	1743, 1743, 1743, 0, 0, 0, 0, 1743, 0, 0,
	0, 0, 1449, 0, 0, 0, 0, 0, 0, 1447,
	0, 0, 0, 1457, 0, 1743, 0, 988, 0, 988,
	0, 5068, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2991, 0, 0, 0, 0, 0, 0, 0, 0,
	2281, 3012, 0, 0, 988, 0, 2281, 96, 0, 1758,
	1450, 0, 1728, 0, 5096, 0, 1740, 1741, 1742, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2372, 0,
	0, 2373, 0, 975, 0, 2378, 0, 2370, 0, 0,
	0, 0, 2375, 2379, 2374, 0, 2376, 0, 0, 0,
	2377, 1751, 1752, 2371, 0, 0, 0, 0, 0, 5128,
	2380, 0, 4574, 0, 0, 0, 0, 0, 0, 974,
	974, 1264, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1374, 0, 0, 0,
	0, 1375, 0, 0, 0, 1384, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1743, 0, 0, 856, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3837, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	5204, 990, 990, 0, 0, 0, 2281, 0, 5199, 0,
	0, 0, 0, 0, 0, 0, 0, 1377, 0, 0,
	0, 0, 0, 856, 856, 0, 0, 988, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 856, 856, 0, 1383, 0, 0, 5238,
	5232, 0, 5241, 856, 0, 0, 1758, 0, 0, 1728,
	0, 0, 0, 1740, 1741, 1742, 0, 0, 0, 0,
	0, 0, 0, 0, 5248, 2372, 0, 1388, 2373, 0,
	0, 0, 2378, 0, 2370, 0, 0, 0, 0, 2375,
	2379, 2374, 0, 2376, 0, 0, 2213, 2377, 1751, 1752,
	2371, 0, 5270, 5270, 5270, 0, 5273, 2380, 0, 0,
	0, 0, 1747, 0, 0, 2964, 0, 0, 0, 2280,
	1373, 1737, 1738, 1739, 0, 0, 0, 0, 4576, 0,
	1731, 1732, 1733, 1734, 1735, 1736, 0, 0, 0, 0,
	0, 0, 2281, 2281, 2281, 0, 0, 1378, 0, 0,
	975, 96, 0, 0, 2280, 989, 989, 975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4573, 0, 0, 0, 0,
	0, 0, 1380, 0, 0, 0, 0, 0, 1379, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	987, 1758, 0, 0, 1728, 0, 2280, 0, 1740, 1741,
	1742, 0, 0, 0, 2215, 0, 856, 5374, 0, 0,
	2372, 855, 0, 2373, 0, 2280, 0, 2378, 0, 2370,
	0, 0, 4572, 1381, 2375, 2379, 2374, 0, 2376, 0,
	0, 975, 2377, 1751, 1752, 2371, 5394, 5395, 0, 0,
	0, 0, 2380, 0, 0, 0, 0, 0, 5393, 0,
	0, 0, 0, 0, 0, 0, 856, 0, 2596, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1382, 0,
	0, 0, 5068, 0, 0, 856, 856, 0, 0, 1385,
	5270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 856, 0, 0, 855, 855, 0, 1454,
	0, 0, 856, 0, 0, 0, 926, 0, 0, 0,
	0, 0, 0, 0, 1387, 1386, 0, 0, 0, 856,
	0, 0, 0, 0, 0, 856, 0, 0, 0, 0,
	0, 855, 0, 0, 0, 96, 0, 0, 855, 0,
	96, 96, 0, 0, 0, 0, 0, 0, 5473, 0,
	0, 0, 3071, 0, 0, 3071, 987, 0, 0, 5489,
	2280, 1460, 5482, 0, 1747, 975, 0, 975, 0, 0,
	0, 0, 5499, 1737, 1738, 1739, 0, 0, 0, 0,
	0, 0, 1731, 1732, 1733, 1734, 1735, 1736, 0, 0,
	0, 1376, 975, 0, 1758, 1456, 5515, 1728, 0, 0,
	0, 1740, 1741, 1742, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 2372, 0, 0, 2373, 855, 0, 0,
	2378, 1390, 2370, 0, 855, 5068, 0, 2375, 2379, 2374,
	0, 2376, 0, 0, 0, 2377, 1751, 1752, 2371, 0,
	0, 0, 0, 0, 0, 2380, 0, 4568, 0, 0,
	2280, 0, 0, 0, 0, 0, 855, 0, 0, 0,
	1743, 1743, 1743, 1743, 1743, 1743, 1743, 1743, 1743, 1743,
	1743, 1743, 1743, 1743, 1743, 1743, 0, 0, 0, 0,
	0, 1743, 0, 1445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2281, 0, 0, 0, 2991, 2991,
	5573, 0, 0, 0, 1194, 1455, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3071, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1743, 0, 0, 0, 0, 5270,
	0, 0, 0, 0, 0, 1451, 0, 0, 0, 0,
	5591, 1747, 0, 0, 0, 975, 1743, 0, 1743, 0,
	1737, 1738, 1739, 0, 1743, 0, 0, 0, 1448, 1731,
	1732, 1733, 1734, 1735, 1736, 1743, 0, 0, 1743, 0,
	0, 3626, 0, 2991, 2991, 2991, 974, 0, 0, 1743,
	1743, 0, 1453, 0, 0, 1743, 0, 0, 1743, 0,
	0, 0, 0, 0, 0, 0, 1743, 0, 0, 0,
	1743, 0, 0, 987, 0, 0, 1743, 0, 0, 0,
	987, 0, 0, 1743, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 856, 1459, 0, 0, 0, 0, 0,
	1743, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 990, 0,
	0, 0, 0, 0, 0, 0, 1442, 0, 2940, 104,
	0, 0, 1446, 2280, 0, 0, 0, 0, 0, 2280,
	0, 5694, 0, 0, 0, 0, 1452, 0, 856, 0,
	0, 0, 856, 856, 0, 0, 1747, 0, 0, 0,
	0, 0, 1449, 0, 987, 1737, 1738, 1739, 0, 1447,
	0, 988, 0, 1457, 1731, 1732, 1733, 1734, 1735, 1736,
	988, 0, 0, 0, 0, 0, 0, 0, 971, 971,
	0, 987, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1450, 0, 974, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2281,
	0, 2281, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 855, 2281, 0, 0, 0, 0, 988, 1758, 0,
	0, 1728, 0, 0, 0, 1740, 1741, 1742, 0, 0,
	0, 0, 988, 0, 0, 0, 0, 2372, 0, 0,
	2373, 0, 989, 0, 2378, 0, 2370, 0, 0, 2280,
	0, 2375, 2379, 2374, 990, 2376, 0, 0, 0, 2377,
	1751, 1752, 2371, 0, 0, 0, 855, 855, 987, 2380,
	987, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2281, 0, 0, 855, 855, 0, 0,
	0, 0, 0, 0, 0, 987, 855, 0, 0, 0,
	0, 0, 3071, 3071, 0, 0, 3071, 0, 988, 988,
	0, 856, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2281, 0, 0, 0, 1747,
	0, 0, 0, 0, 0, 0, 0, 0, 1737, 1738,
	1739, 0, 0, 0, 0, 0, 0, 1731, 1732, 1733,
	1734, 1735, 1736, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1743, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2280, 2280, 2280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 989, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 988, 0, 0, 0, 0, 0, 988,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 974,
	0, 0, 0, 0, 0, 0, 974, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 987, 855,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1758, 0, 0, 1728, 988, 0, 0,
	1740, 1741, 1742, 2942, 0, 0, 0, 0, 0, 0,
	0, 0, 2372, 0, 0, 2373, 0, 0, 0, 2378,
	0, 2370, 0, 2942, 0, 2942, 2375, 2379, 2374, 855,
	2376, 990, 0, 0, 2377, 1751, 1752, 2371, 990, 2942,
	0, 0, 0, 0, 2380, 0, 0, 0, 855, 855,
	974, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1743, 1743, 855, 2991, 2991, 0,
	0, 1743, 0, 0, 0, 855, 0, 974, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3626, 3626, 855, 0, 0, 0, 0, 0, 855, 0,
	1743, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2281, 0, 0,
	0, 0, 990, 0, 0, 1743, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1743, 856, 0, 0, 0, 0, 0, 990,
	0, 0, 0, 0, 0, 0, 0, 0, 2991, 2991,
	2991, 2991, 2991, 2991, 2991, 2991, 2991, 2991, 2991, 2991,
	2991, 0, 2991, 0, 3626, 3626, 3626, 0, 0, 0,
	0, 0, 0, 0, 974, 989, 974, 0, 0, 0,
	0, 0, 989, 0, 0, 0, 0, 0, 1743, 2596,
	0, 0, 0, 0, 0, 0, 0, 0, 2596, 0,
	0, 974, 0, 0, 0, 0, 0, 0, 0, 0,
	1743, 3071, 856, 0, 1743, 856, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1743, 0, 0, 0,
	1743, 0, 0, 1747, 0, 0, 0, 0, 0, 0,
	0, 0, 1737, 1738, 1739, 0, 990, 0, 990, 4559,
	988, 1731, 1732, 1733, 1734, 1735, 1736, 2280, 0, 0,
	0, 0, 0, 0, 0, 975, 989, 96, 0, 0,
	0, 0, 0, 990, 0, 0, 0, 0, 0, 0,
	975, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 989, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 856, 0, 0, 96, 0, 0, 0,
	0, 1758, 0, 0, 1728, 0, 0, 0, 1740, 1741,
	1742, 0, 0, 988, 0, 0, 0, 0, 0, 0,
	2372, 0, 0, 2373, 0, 971, 0, 2378, 2991, 2370,
	0, 988, 0, 0, 2375, 2379, 2374, 0, 2376, 0,
	0, 0, 2377, 1751, 1752, 2371, 2596, 3335, 0, 0,
	0, 0, 2380, 0, 974, 3338, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1758, 0, 0, 1728, 0,
	0, 0, 1740, 1741, 1742, 988, 0, 0, 0, 0,
	0, 988, 0, 0, 2372, 0, 855, 2373, 0, 0,
	989, 2378, 989, 2370, 0, 0, 1743, 0, 2375, 2379,
	2374, 0, 2376, 0, 0, 0, 2377, 1751, 1752, 2371,
	0, 0, 2281, 0, 0, 0, 2380, 989, 0, 0,
	0, 0, 0, 1743, 0, 0, 990, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 855, 0, 0, 0, 855, 855, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 975, 0, 0, 0, 0, 0, 975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1747, 0,
	0, 0, 0, 0, 0, 0, 0, 1737, 1738, 1739,
	0, 971, 0, 926, 4546, 0, 1731, 1732, 1733, 1734,
	1735, 1736, 0, 1743, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 975, 0, 0, 0, 0,
	0, 0, 2280, 0, 2280, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 2280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 856, 0, 0, 988,
	988, 0, 988, 0, 0, 0, 0, 926, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 856, 856, 0,
	989, 0, 0, 0, 0, 0, 3071, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1743, 0, 0, 0, 0, 0, 2280, 0, 1743, 1743,
	0, 0, 1743, 3626, 3626, 1743, 0, 0, 0, 0,
	1743, 0, 0, 0, 0, 0, 1743, 0, 0, 0,
	0, 0, 0, 0, 855, 0, 0, 0, 988, 1743,
	1743, 0, 0, 0, 0, 0, 0, 988, 2280, 0,
	0, 1743, 987, 0, 0, 0, 1743, 2215, 0, 0,
	0, 987, 3610, 0, 0, 0, 0, 1743, 0, 1743,
	0, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
	3626, 3626, 3626, 3626, 856, 0, 0, 3626, 1743, 1743,
	1743, 0, 0, 2942, 2942, 2942, 1743, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1743, 1743, 1743, 0, 0, 0, 987, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1758, 987, 0, 1728, 0, 0, 971, 1740,
	1741, 1742, 0, 0, 0, 971, 0, 0, 0, 2281,
	0, 2372, 0, 0, 2373, 0, 0, 0, 2378, 1743,
	2370, 0, 0, 0, 0, 2375, 2379, 2374, 975, 2376,
	856, 0, 0, 2377, 1751, 1752, 2371, 0, 0, 0,
	0, 0, 0, 2380, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1743, 0, 1747, 0, 0, 1743,
	1743, 0, 0, 0, 0, 1737, 1738, 1739, 0, 987,
	987, 0, 988, 0, 1731, 1732, 1733, 1734, 1735, 1736,
	0, 0, 988, 0, 0, 3626, 0, 0, 0, 971,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 975, 0, 0, 0, 0, 0, 988, 0, 0,
	0, 0, 0, 0, 2281, 0, 971, 0, 0, 3335,
	1747, 0, 0, 0, 0, 0, 0, 0, 0, 1737,
	1738, 1739, 0, 0, 0, 0, 4452, 0, 1731, 1732,
	1733, 1734, 1735, 1736, 2281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2281, 0, 3335, 0, 0, 0, 856, 0, 975,
	2280, 0, 0, 1758, 0, 0, 1728, 0, 0, 0,
	1740, 1741, 1742, 0, 987, 0, 0, 0, 0, 0,
	987, 96, 2372, 0, 0, 2373, 855, 0, 0, 2378,
	0, 2370, 0, 0, 0, 0, 2375, 2379, 2374, 0,
	2376, 0, 0, 0, 2377, 1751, 1752, 2371, 0, 0,
	0, 0, 0, 971, 2380, 971, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 987, 0,
	988, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 988, 988, 0, 0, 988, 0, 0, 0, 0,
	1758, 0, 0, 1728, 0, 0, 0, 1740, 1741, 1742,
	765, 0, 4201, 0, 0, 855, 0, 0, 855, 2372,
	0, 0, 2373, 0, 0, 0, 2378, 0, 2370, 988,
	0, 0, 0, 2375, 2379, 2374, 0, 2376, 974, 0,
	1743, 2377, 1751, 1752, 2371, 0, 0, 974, 0, 1743,
	1743, 2380, 0, 0, 1743, 1743, 0, 0, 1743, 1743,
	0, 0, 1743, 0, 0, 0, 0, 0, 0, 1743,
	0, 0, 0, 0, 0, 0, 0, 2596, 3335, 0,
	3335, 0, 0, 2991, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1743, 0, 0, 1743, 855, 0, 0, 0,
	990, 0, 0, 0, 974, 0, 926, 926, 0, 990,
	0, 0, 0, 0, 1743, 0, 0, 0, 0, 974,
	0, 0, 0, 0, 0, 0, 0, 0, 988, 0,
	856, 0, 0, 0, 0, 2991, 0, 0, 0, 0,
	0, 0, 0, 971, 0, 0, 0, 0, 0, 0,
	0, 797, 0, 926, 0, 0, 975, 856, 0, 0,
	0, 0, 0, 0, 0, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 990, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 901, 904, 906,
	0, 990, 0, 0, 0, 974, 974, 0, 0, 0,
	1743, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 988, 0, 2280, 0, 0, 856, 0,
	0, 988, 0, 0, 0, 1743, 0, 1747, 0, 0,
	0, 987, 0, 0, 0, 0, 1737, 1738, 1739, 0,
	0, 0, 0, 4383, 0, 1731, 1732, 1733, 1734, 1735,
	1736, 0, 0, 1743, 989, 0, 0, 0, 0, 0,
	0, 0, 0, 989, 0, 0, 0, 990, 990, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1743, 0, 0, 0,
	0, 2942, 0, 0, 987, 0, 0, 0, 0, 0,
	974, 0, 0, 0, 0, 0, 974, 0, 0, 0,
	0, 1743, 987, 1743, 1743, 1743, 0, 0, 0, 0,
	989, 0, 0, 1743, 3626, 2991, 1743, 1743, 1743, 0,
	975, 0, 0, 0, 0, 989, 0, 0, 2942, 855,
	975, 0, 0, 0, 0, 0, 0, 0, 0, 2281,
	0, 0, 0, 0, 974, 0, 987, 0, 0, 0,
	0, 0, 987, 0, 0, 975, 0, 0, 1743, 0,
	855, 855, 990, 0, 0, 0, 0, 0, 990, 0,
	0, 0, 0, 3626, 2991, 1743, 0, 0, 0, 0,
	988, 0, 0, 0, 0, 0, 0, 0, 1747, 0,
	0, 0, 0, 0, 0, 0, 0, 1737, 1738, 1739,
	2281, 989, 989, 0, 4362, 0, 1731, 1732, 1733, 1734,
	1735, 1736, 0, 0, 0, 0, 990, 926, 926, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2942, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 988, 0, 0, 0, 0, 855, 0, 0,
	988, 0, 0, 0, 0, 1747, 0, 0, 0, 0,
	0, 0, 0, 0, 1737, 1738, 1739, 0, 2596, 0,
	0, 0, 0, 1731, 1732, 1733, 1734, 1735, 1736, 2596,
	2596, 0, 0, 3335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 989, 0, 0, 0,
	987, 987, 989, 987, 0, 0, 0, 0, 0, 0,
	0, 0, 1758, 0, 0, 1728, 0, 975, 0, 1740,
	1741, 1742, 2280, 0, 0, 0, 0, 0, 0, 0,
	0, 2372, 1743, 0, 2373, 0, 0, 0, 2378, 0,
	2370, 0, 0, 855, 0, 2375, 2379, 2374, 3626, 2376,
	989, 0, 0, 2377, 1751, 1752, 2371, 0, 0, 0,
	1743, 0, 0, 2380, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 988, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2991, 0, 974, 3626, 987,
	0, 0, 1743, 0, 0, 0, 0, 0, 987, 0,
	0, 0, 0, 1758, 0, 0, 1728, 0, 0, 0,
	1740, 1741, 1742, 0, 0, 0, 0, 0, 0, 988,
	0, 0, 2372, 0, 0, 2373, 3335, 2280, 0, 2378,
	0, 2370, 0, 0, 0, 0, 2375, 2379, 2374, 0,
	2376, 0, 0, 0, 2377, 1751, 1752, 2371, 0, 0,
	0, 988, 988, 0, 2380, 0, 0, 2280, 0, 990,
	974, 0, 0, 1743, 1088, 0, 0, 0, 0, 0,
	0, 0, 0, 1094, 2280, 0, 0, 0, 974, 0,
	855, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1743, 0, 4128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3335, 1743, 0, 0, 0, 0, 0, 0, 975,
	0, 0, 974, 0, 0, 0, 0, 0, 974, 1273,
	0, 0, 990, 0, 1743, 0, 0, 1743, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1291, 0, 0,
	990, 0, 0, 0, 0, 0, 0, 0, 0, 1299,
	1302, 0, 1304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 987, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 987, 0, 988, 0, 0, 0, 0,
	0, 0, 0, 0, 990, 0, 0, 971, 0, 0,
	990, 0, 0, 0, 1343, 0, 971, 2942, 987, 0,
	0, 0, 0, 989, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	988, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1743, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 0, 971, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 989, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 974, 974, 975, 974,
	0, 0, 0, 0, 989, 0, 0, 0, 0, 0,
	2991, 2991, 0, 855, 2991, 0, 0, 0, 0, 0,
	0, 0, 988, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1743, 0, 0,
	855, 987, 0, 0, 0, 0, 1743, 0, 989, 0,
	0, 0, 987, 987, 989, 0, 987, 0, 0, 0,
	0, 0, 988, 988, 971, 971, 0, 0, 990, 990,
	0, 990, 0, 0, 0, 4672, 0, 0, 0, 0,
	975, 0, 0, 0, 0, 974, 0, 0, 2596, 0,
	987, 0, 0, 0, 974, 0, 0, 0, 0, 0,
	0, 855, 0, 3626, 3626, 0, 3626, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1747, 1638, 0,
	0, 0, 0, 0, 0, 0, 1737, 1738, 1739, 1638,
	0, 0, 0, 4141, 0, 1731, 1732, 1733, 1734, 1735,
	1736, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1743, 0, 990, 0, 0,
	0, 0, 0, 0, 0, 0, 990, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 971,
	0, 0, 0, 0, 0, 971, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 987,
	0, 0, 0, 0, 0, 0, 0, 0, 1747, 0,
	0, 0, 0, 975, 0, 988, 0, 1737, 1738, 1739,
	0, 0, 989, 989, 0, 989, 1731, 1732, 1733, 1734,
	1735, 1736, 0, 971, 0, 0, 0, 0, 0, 0,
	0, 0, 2280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 974,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 974,
	0, 0, 0, 0, 987, 0, 0, 0, 0, 975,
	975, 0, 987, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2280, 974, 0, 988, 0, 988, 988,
	0, 989, 0, 0, 0, 0, 0, 0, 0, 0,
	989, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2280, 0, 0, 0, 2363, 0, 0, 0, 0,
	0, 990, 0, 0, 0, 0, 0, 1758, 0, 0,
	1728, 990, 0, 0, 1740, 1741, 1742, 0, 0, 0,
	0, 0, 0, 0, 2413, 0, 2372, 0, 0, 2373,
	0, 0, 0, 2378, 0, 2370, 990, 0, 0, 988,
	2375, 2379, 2374, 0, 2376, 0, 0, 0, 2377, 1751,
	1752, 2371, 0, 0, 0, 0, 0, 0, 2380, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2479, 0, 0, 0, 2483, 0, 0, 0,
	0, 2495, 0, 975, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 974, 0, 0,
	0, 0, 2542, 0, 0, 0, 0, 0, 974, 974,
	0, 0, 974, 0, 0, 0, 1758, 0, 2556, 1728,
	0, 0, 0, 1740, 1741, 1742, 0, 0, 3335, 0,
	0, 987, 0, 0, 0, 2372, 0, 2573, 2373, 0,
	2576, 0, 2378, 0, 2370, 0, 974, 0, 0, 2375,
	2379, 2374, 0, 2376, 0, 989, 971, 2377, 1751, 1752,
	2371, 0, 0, 0, 0, 989, 0, 2380, 0, 990,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	990, 990, 0, 0, 990, 0, 0, 0, 0, 0,
	989, 0, 2637, 0, 0, 0, 0, 2495, 2495, 2495,
	1758, 0, 0, 1728, 0, 0, 0, 1740, 1741, 1742,
	0, 0, 3653, 987, 0, 0, 2661, 2662, 990, 2372,
	3335, 987, 2373, 0, 0, 0, 2378, 0, 2370, 971,
	0, 0, 0, 2375, 2379, 2374, 0, 2376, 0, 0,
	0, 2377, 1751, 1752, 2371, 0, 0, 971, 0, 0,
	0, 2380, 0, 0, 0, 974, 0, 0, 0, 0,
	975, 975, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1758, 0, 0, 1728, 0, 0, 0,
	1740, 1741, 1742, 0, 0, 0, 0, 0, 0, 0,
	0, 971, 2372, 0, 0, 2373, 0, 971, 0, 2378,
	2751, 2370, 0, 0, 0, 0, 2375, 2379, 2374, 0,
	2376, 0, 0, 0, 2377, 1751, 1752, 2371, 0, 0,
	0, 0, 0, 989, 2380, 0, 3643, 990, 0, 0,
	0, 0, 0, 0, 989, 989, 0, 0, 989, 0,
	974, 0, 0, 0, 1638, 1638, 987, 0, 974, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 989, 0, 0, 0, 0, 1088, 1088, 0,
	1088, 0, 2804, 0, 0, 2806, 2807, 0, 0, 0,
	987, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4672, 0, 1758, 0,
	0, 1728, 990, 975, 0, 1740, 1741, 1742, 0, 0,
	990, 0, 987, 987, 0, 0, 0, 2372, 0, 0,
	2373, 0, 0, 0, 2378, 0, 2370, 1638, 0, 0,
	0, 2375, 2379, 2374, 0, 2376, 0, 2860, 0, 2377,
	1751, 1752, 2371, 0, 0, 0, 0, 0, 0, 2380,
	0, 0, 0, 0, 0, 971, 971, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 989, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 975, 0, 975, 975, 0, 0,
	0, 0, 1747, 0, 988, 0, 0, 0, 0, 0,
	0, 1737, 1738, 1739, 0, 0, 0, 974, 4107, 0,
	1731, 1732, 1733, 1734, 1735, 1736, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 971, 0, 987, 0, 0, 0,
	0, 0, 0, 971, 0, 0, 989, 0, 0, 0,
	0, 0, 0, 0, 989, 0, 0, 975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 990,
	0, 987, 0, 0, 0, 0, 0, 0, 0, 974,
	0, 0, 0, 0, 0, 0, 0, 974, 0, 0,
	0, 1747, 0, 0, 0, 0, 0, 0, 0, 0,
	1737, 1738, 1739, 0, 0, 0, 0, 3671, 0, 1731,
	1732, 1733, 1734, 1735, 1736, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1758, 0, 0,
	1728, 0, 0, 0, 1740, 1741, 1742, 0, 0, 3638,
	0, 0, 0, 0, 0, 0, 2372, 0, 0, 2373,
	0, 990, 0, 2378, 0, 2370, 0, 0, 0, 990,
	2375, 2379, 2374, 987, 2376, 0, 0, 0, 2377, 1751,
	1752, 2371, 0, 0, 0, 1747, 0, 0, 2380, 0,
	0, 0, 0, 0, 1737, 1738, 1739, 0, 0, 0,
	0, 0, 0, 1731, 1732, 1733, 1734, 1735, 1736, 0,
	0, 0, 0, 987, 987, 0, 0, 0, 971, 0,
	0, 0, 974, 0, 0, 0, 0, 0, 971, 0,
	0, 0, 0, 989, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 971, 0, 0, 0, 0, 1747, 0,
	0, 0, 0, 0, 0, 0, 974, 1737, 1738, 1739,
	0, 0, 0, 0, 0, 0, 1731, 1732, 1733, 1734,
	1735, 1736, 0, 1758, 0, 0, 1728, 0, 0, 0,
	1740, 1741, 1742, 0, 990, 3603, 0, 0, 974, 974,
	0, 0, 2372, 0, 0, 2373, 0, 0, 0, 2378,
	0, 2370, 0, 0, 0, 989, 2375, 2379, 2374, 0,
	2376, 0, 0, 989, 2377, 1751, 1752, 2371, 0, 0,
	0, 0, 0, 0, 2380, 0, 0, 0, 990, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 987, 0, 0, 0,
	990, 990, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 971, 0, 0, 0,
	0, 0, 3597, 1747, 0, 0, 0, 971, 971, 0,
	0, 971, 1737, 1738, 1739, 0, 0, 0, 0, 0,
	0, 1731, 1732, 1733, 1734, 1735, 1736, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1758, 0, 974, 1728, 0, 971, 0, 1740, 1741, 1742,
	0, 0, 0, 0, 0, 0, 0, 0, 989, 2372,
	0, 0, 2373, 0, 0, 0, 2378, 987, 2370, 987,
	987, 0, 0, 2375, 2379, 2374, 0, 2376, 0, 0,
	0, 2377, 1751, 1752, 2371, 0, 0, 974, 0, 0,
	0, 2380, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 989, 0, 1758, 0, 0, 1728, 0, 0,
	0, 1740, 1741, 1742, 990, 0, 0, 0, 0, 0,
	0, 0, 0, 2372, 0, 0, 2373, 0, 0, 0,
	2378, 0, 2370, 0, 989, 989, 0, 2375, 2379, 2374,
	987, 2376, 975, 0, 0, 2377, 1751, 1752, 2371, 1758,
	0, 0, 1728, 0, 971, 2380, 1740, 1741, 1742, 990,
	0, 0, 0, 0, 0, 0, 0, 0, 2372, 0,
	0, 2373, 0, 0, 0, 2378, 0, 2370, 0, 974,
	0, 0, 2375, 2379, 2374, 0, 2376, 0, 0, 0,
	2377, 1751, 1752, 2371, 0, 0, 0, 0, 0, 0,
	2380, 0, 2942, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 974,
	974, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 971,
	0, 0, 0, 0, 0, 3145, 0, 971, 0, 0,
	0, 990, 1747, 0, 0, 0, 0, 0, 0, 0,
	0, 1737, 1738, 1739, 0, 0, 0, 0, 989, 0,
	1731, 1732, 1733, 1734, 1735, 1736, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 990, 990, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 989, 0, 0, 0, 0, 3234, 3235,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3301, 0, 0, 0,
	1374, 1404, 974, 0, 0, 1375, 0, 0, 0, 1384,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3320, 0, 0, 0, 0, 0, 0, 0, 1747, 0,
	0, 0, 0, 0, 0, 989, 0, 1737, 1738, 1739,
	0, 0, 0, 0, 0, 0, 1731, 1732, 1733, 1734,
	1735, 1736, 0, 0, 0, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1406, 0,
	0, 1377, 0, 0, 990, 989, 989, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 974, 0, 974, 974, 0, 0, 0,
	1383, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1388, 0, 0, 0, 0, 0, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 1374, 1404, 0, 0, 0, 1375,
	0, 0, 0, 1384, 0, 990, 974, 990, 990, 0,
	0, 0, 0, 0, 1373, 1747, 0, 0, 0, 0,
	0, 0, 0, 0, 1737, 1738, 1739, 0, 0, 3038,
	0, 1405, 0, 1731, 1732, 1733, 1734, 1735, 1736, 0,
	0, 1378, 3462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1406, 0, 0, 1377, 0, 0, 989, 0,
	0, 0, 0, 0, 0, 0, 1380, 0, 990, 1747,
	1088, 0, 1379, 0, 0, 987, 0, 218, 1737, 1738,
	1739, 0, 0, 0, 1383, 2923, 0, 1731, 1732, 1733,
	1734, 1735, 1736, 0, 0, 0, 0, 0, 0, 200,
	0, 971, 0, 0, 185, 0, 0, 0, 198, 0,
	0, 0, 0, 1407, 1747, 1388, 0, 1381, 0, 0,
	0, 0, 189, 1737, 1738, 1739, 0, 0, 0, 0,
	3517, 0, 1731, 1732, 1733, 1734, 1735, 1736, 0, 0,
	212, 191, 0, 1408, 0, 971, 1409, 0, 0, 989,
	1410, 989, 989, 0, 0, 0, 0, 0, 1373, 0,
	0, 0, 1403, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1411, 1385, 0, 1405, 0, 971, 971, 0,
	0, 0, 0, 0, 0, 1378, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3312, 0, 1387, 1386,
	1414, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1380, 0, 989, 0, 0, 0, 1379, 1412, 0, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 0, 0, 0, 1413, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 1407, 0, 0,
	0, 1381, 0, 194, 0, 0, 0, 0, 0, 0,
	0, 1415, 0, 0, 195, 1376, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1408, 196, 0,
	1409, 0, 0, 0, 1410, 210, 0, 0, 0, 0,
	0, 971, 0, 217, 0, 1390, 1403, 0, 0, 0,
	0, 190, 0, 197, 0, 0, 1411, 1385, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 971, 0, 0, 0,
	1400, 0, 1387, 1386, 1414, 0, 0, 0, 0, 0,
	3740, 0, 3743, 0, 0, 3748, 0, 0, 0, 0,
	3754, 1412, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1413, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 201, 0, 0, 0, 0, 3790, 0, 0,
	0, 219, 202, 0, 203, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1415, 0, 0, 0, 1376,
	0, 0, 0, 211, 0, 0, 204, 0, 971, 208,
	0, 205, 0, 0, 3842, 3843, 187, 0, 0, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1390,
	0, 974, 0, 0, 0, 214, 0, 0, 0, 0,
	207, 0, 0, 0, 0, 0, 213, 0, 971, 971,
	0, 215, 2495, 0, 0, 0, 0, 209, 0, 0,
	0, 216, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 990, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3992, 0, 0,
	0, 971, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 989, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 971, 0, 971, 971, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4077, 0, 4078, 0, 0, 0, 0, 4083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 971, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4287, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4531, 4532, 4533, 4534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2278, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2283, 276, 2289, 293, 860,
	2299, 342, 379, 594, 2286, 2331, 439, 2336, 492, 496,
	2360, 585, 2293, 2296, 2306, 2309, 350, 2314, 865, 2322,
	871, 2332, 877, 2351, 561, 2357, 867, 868, 873, 281,
	669, 584, 655, 2345, 2291, 2349, 446, 2342, 2318, 2358,
	2335, 2347, 2328, 2333, 289, 2320, 2321, 2325, 2334, 869,
	866, 870, 876, 864, 874, 861, 872, 2355, 483, 417,
	634, 510, 288, 334, 321, 363, 405, 517, 2290, 2308,
	395, 565, 330, 419, 2341, 309, 452, 2354, 541, 416,
	2348, 524, 544, 2310, 436, 315, 475, 531, 532, 858,
	863, 2298, 879, 2285, 319, 320, 441, 301, 449, 646,
	612, 504, 462, 460, 2316, 427, 484, 641, 2288, 0,
	349, 0, 344, 440, 580, 307, 559, 478, 445, 399,
	507, 536, 346, 331, 332, 375, 477, 365, 317, 570,
	609, 613, 611, 607, 604, 608, 605, 606, 610, 366,
	603, 4679, 578, 587, 621, 601, 629, 586, 626, 596,
	341, 625, 590, 589, 635, 616, 617, 571, 631, 602,
	600, 593, 592, 588, 2356, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 277, 2284, 278, 279, 280,
	282, 283, 284, 857, 285, 286, 287, 290, 291, 292,
	294, 654, 295, 296, 297, 298, 299, 300, 591, 859,
	302, 303, 304, 305, 306, 308, 310, 311, 312, 313,
	314, 316, 318, 2300, 2301, 2302, 862, 2303, 2304, 2305,
	322, 323, 324, 325, 326, 327, 2307, 328, 329, 333,
	335, 336, 337, 338, 339, 340, 343, 2311, 345, 347,
	2312, 348, 351, 2313, 352, 353, 354, 355, 356, 357,
	358, 359, 595, 360, 2315, 361, 362, 364, 2317, 367,
	368, 369, 370, 371, 2319, 372, 597, 598, 373, 374,
	376, 377, 378, 380, 381, 382, 383, 384, 385, 386,
	387, 388, 389, 390, 391, 2323, 392, 393, 394, 396,
	2324, 397, 398, 401, 402, 403, 404, 2326, 406, 614,
	2327, 407, 408, 409, 2329, 2330, 410, 411, 412, 413,
	414, 415, 418, 615, 420, 421, 422, 423, 424, 425,
	426, 656, 428, 429, 430, 431, 432, 433, 434, 618,
	619, 435, 437, 438, 620, 622, 623, 875, 453, 454,
	455, 456, 457, 458, 459, 461, 2338, 463, 464, 465,
	624, 466, 467, 468, 469, 2339, 470, 471, 472, 473,
	474, 476, 479, 480, 481, 482, 2340, 485, 486, 487,
	488, 489, 490, 491, 493, 494, 495, 497, 498, 499,
	657, 500, 501, 502, 503, 627, 505, 506, 658, 508,
	509, 511, 512, 513, 514, 515, 516, 667, 2343, 518,
	628, 519, 520, 521, 522, 523, 2344, 525, 526, 527,
	528, 529, 530, 533, 534, 535, 537, 538, 630, 539,
	540, 2346, 542, 543, 878, 545, 546, 547, 548, 549,
	2350, 668, 550, 632, 551, 633, 552, 553, 554, 555,
	556, 557, 558, 560, 2352, 2353, 562, 563, 564, 566,
	567, 568, 569, 572, 573, 574, 575, 576, 2359, 577,
	579, 581, 659, 636, 637, 638, 639, 640, 642, 643,
	644, 645, 582, 583, 599, 450, 444, 400, 442, 443,
	447, 448, 451, 2337, 2287, 2292, 2294, 2295, 2297, 0,
	0, 0, 0, 0, 0, 0, 1638, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2276, 4941, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4992,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5179, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 5186, 0,
	0, 0, 0, 0, 0, 1761, 0, 0, 0, 0,
	0, 0, 1758, 0, 0, 1728, 0, 0, 0, 1740,
	1741, 1742, 1772, 1774, 1756, 1801, 1822, 0, 1873, 1919,
	1889, 1744, 2006, 2012, 1745, 2073, 2077, 5226, 1753, 1803,
	1729, 1853, 1868, 1883, 1895, 1748, 1754, 1746, 2010, 1749,
	2154, 2165, 2185, 1750, 1751, 1752, 1730, 2146, 2203, 1972,
	2131, 1783, 0, 1759, 2097, 0, 0, 2020, 2135, 0,
	0, 1797, 0, 0, 0, 0, 1945, 1934, 1968, 2081,
	1906, 2026, 1834, 1993, 2171, 2063, 1982, 2177, 2095, 1796,
	1862, 1846, 1898, 1963, 2104, 1779, 1863, 1938, 2169, 1858,
	1984, 0, 1825, 2028, 2170, 2133, 1981, 2144, 2114, 2139,
	1869, 2007, 1832, 2054, 2121, 2122, 1792, 1905, 1827, 2180,
	1777, 1837, 1845, 2015, 1816, 2023, 2201, 1955, 2088, 2038,
	2036, 0, 1995, 2064, 2196, 0, 0, 1882, 0, 1876,
	2014, 2188, 1823, 2162, 2057, 2019, 1957, 2091, 2126, 1878,
	1859, 1860, 1916, 2056, 1901, 1835, 2176, 1952, 1956, 1954,
	1950, 1947, 1951, 1948, 1949, 1953, 1903, 1946, 0, 0,
	1793, 2013, 1941, 2111, 1791, 2060, 1899, 1872, 0, 0,
	0, 2178, 1992, 1994, 0, 2147, 1942, 1940, 1851, 1850,
	1794, 2179, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770,
	1771, 1773, 1775, 1776, 1780, 1781, 1782, 1784, 1785, 1786,
	1787, 1788, 1789, 1790, 1798, 1799, 1800, 1802, 1805, 1806,
	1807, 1809, 1810, 1811, 1812, 1813, 1814, 1817, 1818, 1819,
	1820, 1821, 1824, 1826, 1828, 1829, 1830, 1831, 1833, 1836,
	1838, 1839, 1840, 1841, 1842, 1843, 1844, 1847, 1848, 0,
	1849, 1852, 1854, 1855, 1856, 1857, 1861, 1864, 1865, 1866,
	1867, 1870, 1871, 1874, 1875, 1877, 1879, 1880, 1881, 1884,
	0, 1885, 1886, 1887, 1888, 1890, 1891, 1892, 1893, 1894,
	1896, 0, 0, 1897, 1900, 1902, 1904, 1907, 1908, 1909,
	1910, 0, 1911, 1912, 1913, 1914, 1915, 1917, 0, 1918,
	1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929,
	1930, 1931, 1932, 1933, 1936, 1937, 1939, 0, 1943, 1944,
	1959, 1960, 1961, 1962, 1964, 1966, 1967, 1965, 1969, 1970,
	1971, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1983,
	1985, 1986, 0, 1987, 1988, 0, 1989, 1990, 1991, 1996,
	1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2008,
	2009, 2011, 2025, 2027, 0, 2029, 2030, 2031, 2032, 2033,
	2034, 2035, 2037, 2039, 2040, 2041, 2042, 2043, 2044, 2045,
	2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2055, 2058,
	2059, 2061, 2062, 2065, 2066, 2067, 2068, 2069, 2070, 2071,
	2072, 2074, 2075, 2076, 2078, 2079, 2080, 2082, 2083, 2084,
	2085, 2086, 2087, 2089, 2090, 2092, 2093, 2094, 0, 2096,
	2098, 2099, 2100, 2101, 2102, 2103, 2106, 2105, 2107, 2108,
	2109, 2110, 2112, 2113, 2115, 2116, 2117, 2118, 2119, 2120,
	2123, 2124, 2125, 2127, 2128, 2129, 2130, 2132, 2134, 2136,
	2138, 2137, 2140, 2141, 2142, 2143, 2145, 2148, 2149, 2150,
	2151, 2152, 2153, 2155, 2156, 2157, 2158, 2159, 2160, 2161,
	2163, 0, 2164, 2166, 2167, 2168, 2172, 2173, 2174, 2175,
	2181, 2182, 2183, 2184, 2186, 0, 0, 2187, 2189, 2190,
	2191, 2192, 2193, 2194, 2195, 2197, 2198, 2199, 2200, 0,
	2202, 1935, 2024, 2018, 1958, 2016, 2017, 2021, 2022, 0,
	0, 1778, 1795, 1804, 1808, 1815, 0, 1747, 0, 0,
	0, 0, 0, 0, 0, 0, 1737, 1738, 1739, 0,
	0, 0, 0, 0, 0, 1731, 1732, 1733, 1734, 1735,
	1736, 2278, 0, 5647, 1034, 0, 0, 0, 0, 740,
	0, 0, 0, 0, 0, 0, 0, 0, 2283, 276,
	2289, 293, 860, 2299, 342, 379, 594, 2286, 2331, 439,
	2336, 492, 496, 2360, 585, 2293, 2296, 2306, 2309, 350,
	2314, 865, 2322, 871, 2332, 877, 2351, 561, 2357, 867,
	868, 873, 281, 669, 584, 655, 2345, 2291, 2349, 446,
	2342, 2318, 2358, 2335, 2347, 2328, 2333, 289, 2320, 2321,
	2325, 2334, 869, 866, 870, 876, 864, 874, 861, 872,
	2355, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 2290, 2308, 395, 565, 330, 419, 2341, 309, 452,
	2354, 541, 416, 2348, 524, 544, 2310, 436, 315, 475,
	531, 532, 858, 863, 2298, 879, 2285, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 2316, 427, 484,
	641, 2288, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 2356, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 2284,
	278, 279, 280, 282, 283, 284, 857, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 859, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 2300, 2301, 2302, 862,
	2303, 2304, 2305, 322, 323, 324, 325, 326, 327, 2307,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	2311, 345, 347, 2312, 348, 351, 2313, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 2315, 361, 362,
	364, 2317, 367, 368, 369, 370, 371, 2319, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 2323, 392,
	393, 394, 396, 2324, 397, 398, 401, 402, 403, 404,
	2326, 406, 614, 2327, 407, 408, 409, 2329, 2330, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	875, 453, 454, 455, 456, 457, 458, 459, 461, 2338,
	463, 464, 465, 624, 466, 467, 468, 469, 2339, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 2340,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 2343, 518, 628, 519, 520, 521, 522, 523, 2344,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 2346, 542, 543, 878, 545, 546,
	547, 548, 549, 2350, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 2352, 2353, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 2359, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 2337, 2287, 2292, 2294,
	2295, 2297, 2278, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2283,
	276, 2289, 293, 860, 2299, 342, 379, 594, 2286, 2331,
	439, 2336, 492, 496, 2360, 585, 2293, 2296, 2306, 2309,
	350, 2314, 865, 2322, 871, 2332, 877, 2351, 561, 2357,
	867, 868, 873, 281, 669, 584, 655, 2345, 2291, 2349,
	446, 2342, 2318, 2358, 2335, 2347, 2328, 2333, 289, 2320,
	2321, 2325, 2334, 869, 866, 870, 876, 864, 874, 861,
	872, 2355, 483, 417, 634, 510, 288, 334, 321, 363,
	405, 517, 2290, 2308, 395, 565, 330, 419, 2341, 309,
	452, 2354, 541, 416, 2348, 524, 544, 2310, 436, 315,
	475, 531, 532, 858, 863, 2298, 879, 2285, 319, 320,
	441, 301, 449, 646, 612, 504, 462, 460, 2316, 427,
	484, 641, 2288, 0, 349, 0, 344, 440, 580, 307,
	559, 478, 445, 399, 507, 536, 346, 331, 332, 375,
	477, 365, 317, 570, 609, 613, 611, 607, 604, 608,
	605, 606, 610, 366, 603, 0, 578, 587, 621, 601,
	629, 586, 626, 596, 341, 625, 590, 589, 635, 616,
	617, 571, 631, 602, 600, 593, 592, 588, 2356, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 277,
	2284, 278, 279, 280, 282, 283, 284, 857, 285, 286,
	287, 290, 291, 292, 294, 654, 295, 296, 297, 298,
	299, 300, 591, 859, 302, 303, 304, 305, 306, 308,
	310, 311, 312, 313, 314, 316, 318, 2300, 2301, 2302,
	862, 2303, 2304, 2305, 322, 323, 324, 325, 326, 327,
	2307, 328, 329, 333, 335, 336, 337, 338, 339, 340,
	343, 2311, 345, 347, 2312, 348, 351, 2313, 352, 353,
	354, 355, 356, 357, 358, 359, 595, 360, 2315, 361,
	362, 364, 2317, 367, 368, 369, 370, 371, 2319, 372,
	597, 598, 373, 374, 376, 377, 378, 380, 381, 382,
	383, 384, 385, 386, 387, 388, 389, 390, 391, 2323,
	392, 393, 394, 396, 2324, 397, 398, 401, 402, 403,
	404, 2326, 406, 614, 2327, 407, 408, 409, 2329, 2330,
	410, 411, 412, 413, 414, 415, 418, 615, 420, 421,
	422, 423, 424, 425, 426, 656, 428, 429, 430, 431,
	432, 433, 434, 618, 619, 435, 437, 438, 620, 622,
	623, 875, 453, 454, 455, 456, 457, 458, 459, 461,
	2338, 463, 464, 465, 624, 466, 467, 468, 469, 2339,
	470, 471, 472, 473, 474, 476, 479, 480, 481, 482,
	2340, 485, 486, 487, 488, 489, 490, 491, 493, 494,
	495, 497, 498, 499, 657, 500, 501, 502, 503, 627,
	505, 506, 658, 508, 509, 511, 512, 513, 514, 515,
	516, 667, 2343, 518, 628, 519, 520, 521, 522, 523,
	2344, 525, 526, 527, 528, 529, 530, 533, 534, 535,
	537, 538, 630, 539, 540, 2346, 542, 543, 878, 545,
	546, 547, 548, 549, 2350, 668, 550, 632, 551, 633,
	552, 553, 554, 555, 556, 557, 558, 560, 2352, 2353,
	562, 563, 564, 566, 567, 568, 569, 572, 573, 574,
	575, 576, 2359, 577, 579, 581, 659, 636, 637, 638,
	639, 640, 642, 643, 644, 645, 582, 583, 599, 450,
	444, 400, 442, 443, 447, 448, 451, 2337, 2287, 2292,
	2294, 2295, 2297, 2278, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2283, 276, 2289, 293, 860, 2299, 3293, 379, 594, 2286,
	2331, 439, 2336, 492, 496, 2360, 585, 2293, 2296, 2306,
	2309, 350, 2314, 865, 2322, 871, 2332, 877, 2351, 561,
	2357, 867, 868, 873, 281, 669, 584, 655, 2345, 2291,
	2349, 446, 2342, 2318, 2358, 2335, 2347, 2328, 2333, 289,
	2320, 2321, 2325, 2334, 869, 866, 870, 876, 864, 874,
	861, 872, 2355, 483, 417, 634, 510, 288, 334, 321,
	363, 405, 3291, 2290, 2308, 395, 565, 330, 419, 2341,
	309, 452, 2354, 541, 416, 2348, 524, 544, 2310, 436,
	315, 475, 531, 532, 858, 863, 2298, 879, 2285, 319,
	320, 441, 301, 449, 646, 612, 504, 462, 460, 2316,
	427, 484, 641, 2288, 0, 349, 0, 344, 440, 580,
	307, 559, 478, 445, 399, 507, 536, 346, 331, 332,
	375, 477, 365, 317, 570, 609, 613, 611, 607, 604,
	608, 605, 606, 610, 366, 603, 0, 578, 587, 621,
	601, 629, 586, 626, 596, 341, 625, 590, 589, 635,
	616, 617, 571, 631, 602, 600, 593, 592, 588, 2356,
	266, 267, 268, 269, 270, 3292, 272, 273, 274, 275,
	277, 2284, 278, 279, 280, 282, 283, 284, 857, 285,
	286, 287, 290, 291, 292, 294, 654, 295, 296, 297,
	298, 299, 300, 591, 859, 302, 303, 304, 305, 306,
	308, 310, 311, 312, 313, 314, 316, 318, 2300, 2301,
	2302, 862, 2303, 2304, 2305, 322, 323, 324, 325, 326,
	327, 2307, 328, 329, 333, 335, 336, 337, 338, 339,
	340, 343, 2311, 345, 347, 2312, 348, 351, 2313, 352,
	353, 354, 355, 356, 357, 358, 359, 595, 360, 2315,
	361, 362, 364, 2317, 367, 368, 369, 370, 371, 2319,
	372, 597, 598, 373, 374, 376, 377, 378, 380, 381,
	382, 383, 384, 385, 386, 387, 388, 389, 390, 391,
	2323, 392, 393, 394, 396, 2324, 397, 398, 401, 402,
	403, 404, 2326, 406, 614, 2327, 407, 408, 409, 2329,
	2330, 410, 411, 412, 413, 414, 415, 418, 615, 420,
	421, 422, 423, 424, 425, 426, 656, 428, 429, 430,
	431, 432, 433, 434, 618, 619, 435, 437, 438, 620,
	622, 623, 875, 453, 454, 455, 456, 457, 458, 459,
	461, 2338, 463, 464, 465, 624, 466, 467, 468, 469,
	2339, 470, 471, 472, 473, 474, 476, 479, 480, 481,
	482, 2340, 485, 486, 487, 488, 489, 490, 491, 493,
	494, 495, 497, 498, 499, 657, 500, 501, 502, 503,
	627, 505, 506, 658, 508, 509, 511, 512, 513, 514,
	515, 516, 667, 2343, 518, 628, 519, 520, 521, 522,
	523, 2344, 525, 526, 527, 528, 529, 530, 533, 534,
	535, 537, 538, 630, 539, 540, 2346, 542, 543, 878,
	545, 546, 547, 548, 549, 2350, 668, 550, 632, 551,
	633, 552, 553, 554, 555, 556, 557, 558, 560, 2352,
	2353, 562, 563, 564, 566, 567, 568, 569, 572, 573,
	574, 575, 576, 2359, 577, 579, 581, 659, 636, 637,
	638, 639, 640, 642, 643, 644, 645, 582, 583, 599,
	450, 444, 400, 442, 443, 447, 448, 451, 2337, 2287,
	2292, 2294, 2295, 2297, 993, 0, 1595, 1034, 0, 0,
	0, 822, 740, 0, 0, 0, 0, 0, 833, 834,
	835, 2283, 276, 2289, 293, 860, 2299, 342, 379, 0,
	2286, 2331, 439, 2336, 492, 496, 2360, 0, 2293, 2296,
	2306, 2309, 350, 2314, 865, 2322, 871, 2332, 877, 2351,
	561, 2357, 867, 868, 873, 281, 992, 584, 655, 2345,
	2291, 2349, 3817, 2342, 2318, 2358, 2335, 2347, 2328, 2333,
	289, 2320, 2321, 2325, 2334, 869, 866, 870, 876, 864,
	874, 861, 872, 2355, 483, 417, 0, 510, 288, 334,
	321, 363, 405, 517, 2290, 2308, 395, 565, 330, 419,
	2341, 309, 452, 2354, 541, 416, 2348, 524, 544, 2310,
	436, 315, 475, 531, 532, 858, 863, 2298, 879, 2285,
	319, 320, 441, 301, 449, 0, 0, 504, 462, 460,
	2316, 427, 484, 0, 2288, 0, 349, 0, 344, 440,
	580, 307, 559, 478, 445, 399, 507, 536, 346, 331,
	332, 375, 477, 365, 317, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 366, 0, 0, 578, 995,
	985, 977, 978, 979, 980, 981, 982, 0, 997, 998,
	999, 1000, 1001, 571, 991, 0, 976, 983, 984, 986,
	2356, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 277, 2284, 278, 279, 280, 282, 283, 284, 857,
	285, 286, 287, 290, 291, 292, 294, 654, 295, 296,
	297, 298, 299, 300, 0, 859, 302, 303, 304, 305,
	306, 308, 310, 311, 312, 313, 314, 316, 318, 2300,
	2301, 2302, 862, 2303, 2304, 2305, 322, 323, 324, 325,
	326, 327, 2307, 328, 329, 333, 335, 336, 337, 338,
	339, 340, 343, 2311, 345, 347, 2312, 348, 351, 2313,
	352, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	2315, 361, 362, 364, 2317, 367, 368, 369, 370, 371,
	2319, 372, 0, 0, 373, 374, 376, 377, 378, 380,
	381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
	391, 2323, 392, 393, 394, 396, 2324, 397, 398, 401,
	402, 403, 404, 2326, 406, 0, 2327, 407, 408, 409,
	2329, 2330, 410, 411, 412, 413, 414, 415, 418, 0,
	420, 421, 422, 423, 424, 425, 426, 656, 428, 429,
	430, 431, 432, 433, 434, 3816, 0, 435, 437, 438,
	0, 0, 0, 875, 453, 454, 455, 456, 457, 458,
	459, 461, 2338, 463, 464, 465, 0, 466, 467, 468,
	469, 2339, 470, 471, 472, 473, 474, 476, 479, 480,
	481, 482, 2340, 485, 486, 487, 488, 489, 490, 491,
	493, 494, 495, 497, 498, 499, 657, 500, 501, 502,
	503, 0, 505, 506, 658, 508, 509, 511, 512, 513,
	514, 515, 516, 667, 2343, 518, 2598, 519, 520, 521,
	522, 523, 2344, 525, 526, 527, 528, 529, 530, 533,
	534, 535, 537, 538, 0, 539, 540, 2346, 542, 543,
	878, 545, 546, 547, 548, 549, 2350, 668, 550, 0,
	551, 0, 552, 553, 554, 555, 556, 557, 558, 560,
	2352, 2353, 562, 563, 564, 566, 567, 568, 569, 572,
	573, 574, 575, 576, 2359, 577, 579, 581, 659, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 582, 583,
	0, 450, 444, 400, 442, 443, 447, 448, 451, 2337,
	2287, 2292, 2294, 2295, 2297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 830, 831, 832, 0, 0,
	0, 0, 0, 0, 3818, 3819, 826, 827, 828, 829,
	993, 0, 1595, 1034, 0, 0, 0, 822, 740, 0,
	0, 0, 0, 0, 833, 834, 835, 2283, 276, 2289,
	293, 860, 2299, 342, 379, 0, 2286, 2331, 439, 2336,
	492, 496, 2360, 0, 2293, 2296, 2306, 2309, 350, 2314,
	865, 2322, 871, 2332, 877, 2351, 561, 2357, 867, 868,
	873, 281, 992, 584, 655, 2345, 2291, 2349, 3817, 2342,
	2318, 2358, 2335, 2347, 2328, 2333, 289, 2320, 2321, 2325,
	2334, 869, 866, 870, 876, 864, 874, 861, 872, 2355,
	483, 417, 0, 510, 288, 334, 321, 363, 405, 517,
	2290, 2308, 395, 565, 330, 419, 2341, 309, 452, 2354,
	541, 416, 2348, 524, 544, 2310, 436, 315, 475, 531,
	532, 858, 863, 2298, 879, 2285, 319, 320, 441, 301,
	449, 0, 0, 504, 462, 460, 2316, 427, 484, 0,
	2288, 0, 349, 0, 344, 440, 580, 307, 559, 478,
	445, 399, 507, 536, 346, 331, 332, 375, 477, 365,
	317, 570, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 366, 0, 0, 578, 995, 985, 977, 978, 979,
	980, 981, 982, 0, 997, 998, 999, 1000, 1001, 571,
	991, 0, 976, 983, 984, 986, 2356, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 277, 2284, 278,
	279, 280, 282, 283, 284, 857, 285, 286, 287, 290,
	291, 292, 294, 654, 295, 296, 297, 298, 299, 300,
	0, 859, 302, 303, 304, 305, 306, 308, 310, 311,
	312, 313, 314, 316, 318, 2300, 2301, 2302, 862, 2303,
	2304, 2305, 322, 323, 324, 325, 326, 327, 2307, 328,
	329, 333, 335, 336, 337, 338, 339, 340, 343, 2311,
	345, 347, 2312, 348, 351, 2313, 352, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 2315, 361, 362, 364,
	2317, 367, 368, 369, 370, 371, 2319, 372, 0, 0,
	373, 374, 376, 377, 378, 380, 381, 382, 383, 384,
	385, 386, 387, 388, 389, 390, 391, 2323, 392, 393,
	394, 396, 2324, 397, 398, 401, 402, 403, 404, 2326,
	406, 0, 2327, 407, 408, 409, 2329, 2330, 410, 411,
	412, 413, 414, 415, 418, 0, 420, 421, 422, 423,
	424, 425, 426, 656, 428, 429, 430, 431, 432, 433,
	434, 4485, 0, 435, 437, 438, 0, 0, 0, 875,
	453, 454, 455, 456, 457, 458, 459, 461, 2338, 463,
	464, 465, 0, 466, 467, 468, 469, 2339, 470, 471,
	472, 473, 474, 476, 479, 480, 481, 482, 2340, 485,
	486, 487, 488, 489, 490, 491, 493, 494, 495, 497,
	498, 499, 657, 500, 501, 502, 503, 0, 505, 506,
	658, 508, 509, 511, 512, 513, 514, 515, 516, 667,
	2343, 518, 2598, 519, 520, 521, 522, 523, 2344, 525,
	526, 527, 528, 529, 530, 533, 534, 535, 537, 538,
	0, 539, 540, 2346, 542, 543, 878, 545, 546, 547,
	548, 549, 2350, 668, 550, 0, 551, 0, 552, 553,
	554, 555, 556, 557, 558, 560, 2352, 2353, 562, 563,
	564, 566, 567, 568, 569, 572, 573, 574, 575, 576,
	2359, 577, 579, 581, 659, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 582, 583, 0, 450, 444, 400,
	442, 443, 447, 448, 451, 2337, 2287, 2292, 2294, 2295,
	2297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 830, 831, 832, 0, 0, 0, 0, 0, 0,
	3818, 3819, 826, 827, 828, 829, 917, 0, 1180, 1034,
	0, 1185, 1186, 1175, 740, 1165, 0, 0, 0, 0,
	0, 0, 0, 2937, 276, 0, 293, 860, 0, 342,
	379, 1170, 0, 1158, 439, 0, 492, 496, 0, 585,
	1190, 0, 1162, 2938, 350, 1183, 865, 0, 871, 1184,
	877, 1182, 561, 0, 867, 868, 873, 281, 1259, 584,
	655, 0, 0, 0, 1176, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 869, 866, 870,
	876, 864, 874, 861, 872, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 1212, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 858, 863, 0,
	879, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 1171, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 1240, 1242,
	1238, 1234, 1235, 1200, 1201, 1241, 1237, 366, 1236, 0,
	578, 1245, 1256, 1253, 1258, 1244, 1257, 1251, 982, 625,
	1248, 1247, 1261, 1254, 1255, 571, 1260, 1199, 1252, 1250,
	1249, 1246, 2936, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 857, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 1224, 1202, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 1213, 1203, 1208, 1214, 1204, 1205, 1209, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	1216, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 1225, 1174, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 1226, 0, 407,
	408, 409, 1206, 1207, 410, 411, 412, 413, 414, 415,
	418, 1239, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 1217, 435,
	437, 438, 1223, 622, 1218, 875, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 1219, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 1177, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 1210, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 1220, 539, 540, 1211,
	542, 543, 878, 545, 546, 547, 548, 549, 0, 668,
	550, 1221, 551, 1222, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 1161, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 1227, 1228, 1231, 1229, 1230, 1232, 1233, 1243,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 0, 0, 0, 1215, 0, 0, 0, 1159, 0,
	0, 917, 0, 1180, 1034, 0, 1185, 1186, 1175, 740,
	1165, 0, 0, 1166, 2934, 0, 1155, 1156, 2935, 276,
	0, 293, 860, 0, 342, 379, 1170, 0, 1158, 439,
	0, 492, 496, 137, 585, 1190, 0, 1162, 0, 350,
	1183, 865, 0, 871, 1184, 877, 1182, 561, 0, 867,
	868, 873, 281, 1259, 584, 655, 0, 0, 0, 1176,
	134, 0, 0, 0, 135, 0, 0, 289, 0, 0,
	0, 0, 869, 866, 870, 876, 864, 874, 861, 872,
	0, 483, 417, 1077, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	1212, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 858, 863, 0, 879, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 1171, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 1240, 1242, 1238, 1234, 1235, 1200, 1201,
	1241, 1237, 366, 1236, 0, 578, 1245, 1256, 1253, 1258,
	1244, 1257, 1251, 982, 625, 1248, 1247, 1261, 1254, 1255,
	571, 1260, 1199, 1252, 1250, 1249, 1246, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 857, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 1224, 1202, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 1213, 1203, 1208, 1214,
	1204, 1205, 1209, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 1216, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 1225,
	1174, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 1226, 0, 407, 408, 409, 1206, 1207, 410,
	411, 412, 413, 414, 415, 418, 1239, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 1217, 435, 437, 438, 1223, 622, 1218,
	875, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 1219, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 1177, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 1210, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 1220, 539, 540, 1211, 542, 543, 878, 545, 546,
	547, 548, 549, 0, 668, 550, 1221, 551, 1222, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 1161, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 1227, 1228, 1231,
	1229, 1230, 1232, 1233, 1243, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 0, 0, 0, 1215,
	0, 0, 0, 1159, 0, 138, 917, 0, 1180, 1034,
	0, 1185, 1186, 1175, 740, 1165, 0, 0, 1166, 5260,
	0, 1155, 1156, 0, 276, 0, 293, 860, 0, 342,
	379, 1170, 0, 1158, 439, 0, 492, 496, 137, 585,
	1190, 0, 1162, 0, 350, 1183, 865, 0, 871, 1184,
	877, 1182, 561, 0, 867, 868, 873, 281, 1259, 584,
	655, 0, 0, 0, 1176, 134, 0, 0, 0, 135,
	0, 0, 289, 0, 0, 0, 0, 869, 866, 870,
	876, 864, 874, 861, 872, 0, 483, 417, 1077, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 3021, 309, 452, 1212, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 858, 863, 0,
	879, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 1171, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 1240, 1242,
	1238, 1234, 1235, 1200, 1201, 1241, 1237, 366, 1236, 0,
	578, 1245, 1256, 1253, 1258, 1244, 1257, 1251, 982, 625,
	1248, 1247, 1261, 1254, 1255, 571, 1260, 1199, 1252, 1250,
	1249, 1246, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 857, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 1224, 1202, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 1213, 1203, 1208, 1214, 1204, 1205, 1209, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	1216, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 1225, 1174, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 1226, 0, 407,
	408, 409, 1206, 1207, 410, 411, 412, 413, 414, 415,
	418, 1239, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 1217, 435,
	437, 438, 1223, 622, 1218, 875, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 1219, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 1177, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 1210, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 1220, 539, 540, 1211,
	542, 543, 878, 545, 546, 547, 548, 549, 0, 668,
	550, 1221, 551, 1222, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 1161, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 1227, 1228, 1231, 1229, 1230, 1232, 1233, 1243,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 0, 0, 0, 1215, 0, 0, 0, 1159, 0,
	138, 917, 0, 1180, 1034, 0, 1185, 1186, 1175, 740,
	1165, 0, 0, 1166, 0, 0, 1155, 1156, 0, 276,
	0, 293, 860, 0, 342, 379, 1170, 0, 1158, 439,
	0, 492, 496, 137, 585, 1190, 0, 1162, 0, 350,
	1183, 865, 0, 871, 1184, 877, 1182, 561, 0, 867,
	868, 873, 281, 1259, 584, 655, 0, 0, 0, 1176,
	134, 0, 0, 0, 135, 0, 0, 289, 0, 0,
	0, 0, 869, 866, 870, 876, 864, 874, 861, 872,
	0, 483, 417, 1077, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	1212, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 858, 863, 0, 879, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 1171, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 1240, 1242, 1238, 1234, 1235, 1200, 1201,
	1241, 1237, 366, 1236, 0, 578, 1245, 1256, 1253, 1258,
	1244, 1257, 1251, 982, 625, 1248, 1247, 1261, 1254, 1255,
	571, 1260, 1199, 1252, 1250, 1249, 1246, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 857, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 1224, 1202, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 1213, 1203, 1208, 1214,
	1204, 1205, 1209, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 1216, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 1225,
	1174, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 1226, 0, 407, 408, 409, 1206, 1207, 410,
	411, 412, 413, 414, 415, 418, 1239, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 1217, 435, 437, 438, 1223, 622, 1218,
	875, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 1219, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 1177, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 1210, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 1220, 539, 540, 1211, 542, 543, 878, 545, 546,
	547, 548, 549, 0, 668, 550, 1221, 551, 1222, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 1161, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 1227, 1228, 1231,
	1229, 1230, 1232, 1233, 1243, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 0, 0, 0, 1215,
	0, 0, 0, 1159, 0, 138, 917, 0, 1180, 1034,
	0, 1185, 1186, 1175, 740, 1165, 0, 0, 1166, 0,
	0, 1155, 1156, 0, 276, 0, 293, 860, 0, 342,
	379, 1170, 0, 1158, 439, 0, 492, 496, 0, 585,
	1190, 0, 1162, 0, 350, 1183, 865, 0, 871, 1184,
	877, 1182, 561, 0, 867, 868, 873, 281, 1259, 584,
	655, 0, 0, 0, 1176, 0, 3002, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 869, 866, 870,
	876, 864, 874, 861, 872, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 1212, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 858, 863, 0,
	879, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 1171, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 1240, 1242,
	1238, 1234, 1235, 1200, 1201, 1241, 1237, 366, 1236, 0,
	578, 1245, 1256, 1253, 1258, 1244, 1257, 1251, 982, 625,
	1248, 1247, 1261, 1254, 1255, 571, 1260, 1199, 1252, 1250,
	1249, 1246, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 857, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 1224, 1202, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 1213, 1203, 1208, 1214, 1204, 1205, 1209, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	1216, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 1225, 1174, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 1226, 2998, 407,
	408, 409, 1206, 1207, 410, 411, 412, 413, 414, 415,
	418, 1239, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 1217, 435,
	437, 438, 1223, 622, 1218, 875, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 1219, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 1177, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 1210, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 1220, 539, 540, 1211,
	542, 543, 878, 545, 546, 547, 548, 549, 2999, 668,
	550, 1221, 551, 1222, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 1161, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 1227, 1228, 1231, 1229, 1230, 1232, 1233, 1243,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 0, 0, 2997, 1215, 0, 0, 0, 1159, 0,
	917, 0, 1180, 1034, 0, 1185, 1186, 1175, 740, 1165,
	0, 0, 0, 1166, 0, 0, 1155, 1156, 276, 0,
	293, 860, 0, 342, 379, 1170, 0, 1158, 439, 0,
	492, 496, 0, 585, 1190, 0, 1162, 0, 350, 1183,
	865, 0, 871, 1184, 877, 1182, 561, 0, 867, 868,
	873, 281, 1259, 584, 655, 0, 0, 0, 1176, 0,
	0, 0, 0, 0, 0, 0, 289, 0, 0, 0,
	0, 869, 866, 870, 876, 864, 874, 861, 872, 0,
	483, 417, 634, 510, 288, 334, 321, 363, 405, 517,
	0, 0, 395, 565, 330, 419, 0, 309, 452, 1212,
	541, 416, 0, 524, 544, 0, 436, 315, 475, 531,
	532, 858, 863, 0, 879, 0, 319, 320, 441, 301,
	449, 646, 612, 504, 462, 460, 0, 427, 484, 641,
	1171, 0, 349, 0, 344, 440, 580, 307, 559, 478,
	445, 399, 507, 536, 346, 331, 332, 375, 477, 365,
	317, 570, 1240, 1242, 1238, 1234, 1235, 1200, 1201, 1241,
	1237, 366, 1236, 0, 578, 1245, 1256, 1253, 1258, 1244,
	1257, 1251, 982, 625, 1248, 1247, 1261, 1254, 1255, 571,
	1260, 1199, 1252, 1250, 1249, 1246, 0, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 277, 0, 278,
	279, 280, 282, 283, 284, 857, 285, 286, 287, 290,
	291, 292, 294, 654, 295, 296, 297, 298, 299, 300,
	1224, 1202, 302, 303, 304, 305, 306, 308, 310, 311,
	312, 313, 314, 316, 318, 1213, 1203, 1208, 1214, 1204,
	1205, 1209, 322, 323, 324, 325, 326, 327, 0, 328,
	329, 333, 335, 336, 337, 338, 339, 340, 343, 0,
	345, 347, 0, 348, 351, 0, 352, 353, 354, 355,
	356, 357, 358, 359, 1216, 360, 0, 361, 362, 364,
	0, 367, 368, 369, 370, 371, 0, 372, 1225, 1174,
	373, 374, 376, 377, 378, 380, 381, 382, 383, 384,
	385, 386, 387, 388, 389, 390, 391, 0, 392, 393,
	394, 396, 0, 397, 398, 401, 402, 403, 404, 0,
	406, 1226, 0, 407, 408, 409, 1206, 1207, 410, 411,
	412, 413, 414, 415, 418, 1239, 420, 421, 422, 423,
	424, 425, 426, 656, 428, 429, 430, 431, 432, 433,
	434, 618, 1217, 435, 437, 438, 1223, 622, 1218, 875,
	453, 454, 455, 456, 457, 458, 459, 461, 0, 463,
	464, 465, 1219, 466, 467, 468, 469, 0, 470, 471,
	472, 473, 474, 476, 479, 480, 481, 482, 0, 485,
	486, 487, 488, 489, 490, 491, 493, 494, 495, 497,
	498, 499, 657, 500, 501, 502, 503, 1177, 505, 506,
	658, 508, 509, 511, 512, 513, 514, 515, 516, 667,
	1210, 518, 628, 519, 520, 521, 522, 523, 0, 525,
	526, 527, 528, 529, 530, 533, 534, 535, 537, 538,
	1220, 539, 540, 1211, 542, 543, 878, 545, 546, 547,
	548, 549, 0, 668, 550, 1221, 551, 1222, 552, 553,
	554, 555, 556, 557, 558, 560, 0, 1161, 562, 563,
	564, 566, 567, 568, 569, 572, 573, 574, 575, 576,
	0, 577, 579, 581, 659, 636, 1227, 1228, 1231, 1229,
	1230, 1232, 1233, 1243, 582, 583, 599, 450, 444, 400,
	442, 443, 447, 448, 451, 0, 0, 0, 1215, 0,
	0, 0, 1159, 0, 0, 917, 0, 1180, 1034, 0,
	1185, 1186, 1175, 740, 1165, 0, 0, 1166, 0, 0,
	1155, 1156, 1153, 276, 0, 293, 860, 0, 342, 379,
	1170, 0, 1158, 439, 0, 492, 496, 0, 585, 1190,
	0, 1162, 0, 350, 1183, 865, 0, 871, 1184, 877,
	1182, 561, 0, 867, 868, 873, 281, 1259, 584, 655,
	0, 0, 0, 1176, 0, 0, 0, 0, 0, 0,
	0, 289, 0, 0, 0, 0, 869, 866, 870, 876,
	864, 874, 861, 872, 0, 483, 417, 634, 510, 288,
	334, 321, 363, 405, 517, 0, 0, 395, 565, 330,
	419, 0, 309, 452, 1212, 541, 416, 0, 524, 544,
	0, 436, 315, 475, 531, 532, 858, 863, 0, 879,
	0, 319, 320, 441, 301, 449, 646, 612, 504, 462,
	460, 0, 427, 484, 641, 1171, 0, 349, 0, 344,
	440, 580, 307, 559, 478, 445, 399, 507, 536, 346,
	331, 332, 375, 477, 365, 317, 570, 1240, 1242, 1238,
	1234, 1235, 1200, 1201, 1241, 1237, 366, 1236, 0, 578,
	1245, 1256, 1253, 1258, 1244, 1257, 1251, 982, 625, 1248,
	1247, 1261, 1254, 1255, 571, 1260, 1199, 1252, 1250, 1249,
	1246, 0, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 277, 0, 278, 279, 280, 282, 283, 284,
	857, 285, 286, 287, 290, 291, 292, 294, 654, 295,
	296, 297, 298, 299, 300, 1224, 1202, 302, 303, 304,
	305, 306, 308, 310, 311, 312, 313, 314, 316, 318,
	1213, 1203, 1208, 1214, 1204, 1205, 1209, 322, 323, 324,
	325, 326, 327, 0, 328, 329, 333, 335, 336, 337,
	338, 339, 340, 343, 0, 345, 347, 0, 348, 351,
	0, 352, 353, 354, 355, 356, 357, 358, 359, 1216,
	360, 0, 361, 362, 364, 0, 367, 368, 369, 370,
	371, 0, 372, 1225, 1174, 373, 374, 376, 377, 378,
	380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
	390, 391, 0, 392, 393, 394, 396, 0, 397, 398,
	401, 402, 403, 404, 0, 406, 1226, 0, 407, 408,
	409, 1206, 1207, 410, 411, 412, 413, 414, 415, 418,
	1239, 420, 421, 422, 423, 424, 425, 426, 656, 428,
	429, 430, 431, 432, 433, 434, 618, 1217, 435, 437,
	438, 1223, 622, 1218, 875, 453, 454, 455, 456, 457,
	458, 459, 461, 0, 463, 464, 465, 1219, 466, 467,
	468, 469, 0, 470, 471, 472, 473, 474, 476, 479,
	480, 481, 482, 0, 485, 486, 487, 488, 489, 490,
	491, 493, 494, 495, 497, 498, 499, 657, 500, 501,
	502, 503, 1177, 505, 506, 658, 508, 509, 511, 512,
	513, 514, 515, 516, 667, 1210, 518, 628, 519, 520,
	521, 522, 523, 0, 525, 526, 527, 528, 529, 530,
	533, 534, 535, 537, 538, 1220, 539, 540, 1211, 542,
	543, 878, 545, 546, 547, 548, 549, 0, 668, 550,
	1221, 551, 1222, 552, 553, 554, 555, 556, 557, 558,
	560, 0, 1161, 562, 563, 564, 566, 567, 568, 569,
	572, 573, 574, 575, 576, 0, 577, 579, 581, 659,
	636, 1227, 1228, 1231, 1229, 1230, 1232, 1233, 1243, 582,
	583, 599, 450, 444, 400, 442, 443, 447, 448, 451,
	0, 0, 0, 1215, 0, 0, 0, 1159, 0, 917,
	0, 1180, 1034, 0, 1185, 1186, 1175, 740, 1165, 0,
	2220, 2927, 1166, 0, 0, 1155, 1156, 276, 0, 293,
	860, 0, 342, 379, 1170, 0, 1158, 439, 0, 492,
	496, 0, 585, 1190, 0, 1162, 0, 350, 1183, 865,
	0, 871, 1184, 877, 1182, 561, 0, 867, 868, 873,
	281, 1259, 584, 655, 0, 0, 2888, 1176, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 0,
	869, 866, 870, 876, 864, 874, 861, 872, 0, 483,
	417, 634, 510, 288, 334, 321, 363, 405, 517, 0,
	0, 395, 565, 330, 419, 0, 309, 452, 1212, 541,
	416, 0, 524, 544, 0, 436, 315, 475, 531, 532,
	858, 863, 0, 879, 0, 319, 320, 441, 301, 449,
	646, 612, 504, 462, 460, 0, 427, 484, 641, 1171,
	0, 349, 0, 344, 440, 580, 307, 559, 478, 445,
	399, 507, 536, 346, 331, 332, 375, 477, 365, 317,
	570, 1240, 1242, 1238, 1234, 1235, 1200, 1201, 1241, 1237,
	366, 1236, 0, 578, 1245, 1256, 1253, 1258, 1244, 1257,
	1251, 982, 625, 1248, 1247, 1261, 1254, 1255, 571, 1260,
	1199, 1252, 1250, 1249, 1246, 0, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 277, 0, 278, 279,
	280, 282, 283, 284, 857, 285, 286, 287, 290, 291,
	292, 294, 654, 295, 296, 297, 298, 299, 300, 1224,
	1202, 302, 303, 304, 305, 306, 308, 310, 311, 312,
	313, 314, 316, 318, 1213, 1203, 1208, 1214, 1204, 1205,
	1209, 322, 323, 324, 325, 326, 327, 0, 328, 329,
	333, 335, 336, 337, 338, 339, 340, 343, 0, 345,
	347, 0, 348, 351, 0, 352, 353, 354, 355, 356,
	357, 358, 359, 1216, 360, 0, 361, 362, 364, 0,
	367, 368, 369, 370, 371, 0, 372, 1225, 1174, 373,
	374, 376, 377, 378, 380, 381, 382, 383, 384, 385,
	386, 387, 388, 389, 390, 391, 0, 392, 393, 394,
	396, 0, 397, 398, 401, 402, 403, 404, 0, 406,
	1226, 0, 407, 408, 409, 1206, 1207, 410, 411, 412,
	413, 414, 415, 418, 1239, 420, 421, 422, 423, 424,
	425, 426, 656, 428, 429, 430, 431, 432, 433, 434,
	618, 1217, 435, 437, 438, 1223, 622, 1218, 875, 453,
	454, 455, 456, 457, 458, 459, 461, 0, 463, 464,
	465, 1219, 466, 467, 468, 469, 0, 470, 471, 472,
	473, 474, 476, 479, 480, 481, 482, 0, 485, 486,
	487, 488, 489, 490, 491, 493, 494, 495, 497, 498,
	499, 657, 500, 501, 502, 503, 1177, 505, 506, 658,
	508, 509, 511, 512, 513, 514, 515, 516, 667, 1210,
	518, 628, 519, 520, 521, 522, 523, 0, 525, 526,
	527, 528, 529, 530, 533, 534, 535, 537, 538, 1220,
	539, 540, 1211, 542, 543, 878, 545, 546, 547, 548,
	549, 0, 668, 550, 1221, 551, 1222, 552, 553, 554,
	555, 556, 557, 558, 560, 0, 1161, 562, 563, 564,
	566, 567, 568, 569, 572, 573, 574, 575, 576, 0,
	577, 579, 581, 659, 636, 1227, 1228, 1231, 1229, 1230,
	1232, 1233, 1243, 582, 583, 599, 450, 444, 400, 442,
	443, 447, 448, 451, 0, 0, 0, 1215, 0, 0,
	0, 1159, 0, 917, 0, 1180, 1034, 0, 1185, 1186,
	1175, 740, 1165, 0, 0, 0, 1166, 0, 0, 1155,
	1156, 276, 0, 293, 860, 0, 342, 379, 1170, 0,
	1158, 439, 0, 492, 496, 0, 585, 1190, 0, 1162,
	0, 350, 1183, 865, 0, 871, 1184, 877, 1182, 561,
	0, 867, 868, 873, 281, 1259, 584, 655, 0, 0,
	0, 1176, 0, 0, 0, 0, 0, 0, 0, 289,
	0, 0, 0, 0, 869, 866, 870, 876, 864, 874,
	861, 872, 0, 483, 417, 634, 510, 288, 334, 321,
	363, 405, 517, 0, 0, 395, 565, 330, 419, 0,
	309, 452, 1212, 541, 416, 0, 524, 544, 0, 436,
	315, 475, 531, 532, 858, 863, 0, 879, 0, 319,
	320, 441, 301, 449, 646, 612, 504, 462, 460, 0,
	427, 484, 641, 1171, 0, 349, 0, 344, 440, 580,
	307, 559, 478, 445, 399, 507, 536, 346, 331, 332,
	375, 477, 365, 317, 570, 1240, 1242, 1238, 1234, 1235,
	1200, 1201, 1241, 1237, 366, 1236, 0, 578, 1245, 1256,
	1253, 1258, 1244, 1257, 1251, 982, 625, 1248, 1247, 1261,
	1254, 1255, 571, 1260, 1199, 1252, 1250, 1249, 1246, 4110,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	277, 0, 278, 279, 280, 282, 283, 284, 857, 285,
	286, 287, 290, 291, 292, 294, 654, 295, 296, 297,
	298, 299, 300, 1224, 1202, 302, 303, 304, 305, 306,
	308, 310, 311, 312, 313, 314, 316, 318, 1213, 1203,
	1208, 1214, 1204, 1205, 1209, 322, 323, 324, 325, 326,
	327, 0, 328, 329, 333, 335, 336, 337, 338, 339,
	340, 343, 0, 345, 347, 0, 348, 351, 0, 352,
	353, 354, 355, 356, 357, 358, 359, 1216, 360, 0,
	361, 362, 364, 0, 367, 368, 369, 370, 371, 0,
	372, 1225, 1174, 373, 374, 376, 377, 378, 380, 381,
	382, 383, 384, 385, 386, 387, 388, 389, 390, 391,
	0, 392, 393, 394, 396, 0, 397, 398, 401, 402,
	403, 404, 0, 406, 1226, 0, 407, 408, 409, 1206,
	1207, 410, 411, 412, 413, 414, 415, 418, 1239, 420,
	421, 422, 423, 424, 425, 426, 656, 428, 429, 430,
	431, 432, 433, 434, 618, 1217, 435, 437, 438, 1223,
	622, 1218, 875, 453, 454, 455, 456, 457, 458, 459,
	461, 0, 463, 464, 465, 1219, 466, 467, 468, 469,
	0, 470, 471, 472, 473, 474, 476, 479, 480, 481,
	482, 0, 485, 486, 487, 488, 489, 490, 491, 493,
	494, 495, 497, 498, 499, 657, 500, 501, 502, 503,
	1177, 505, 506, 658, 508, 509, 511, 512, 513, 514,
	515, 516, 667, 1210, 518, 628, 519, 520, 521, 522,
	523, 0, 525, 526, 527, 528, 529, 530, 533, 534,
	535, 537, 538, 1220, 539, 540, 1211, 542, 543, 878,
	545, 546, 547, 548, 549, 0, 668, 550, 1221, 551,
	1222, 552, 553, 554, 555, 556, 557, 558, 560, 0,
	1161, 562, 563, 564, 566, 567, 568, 569, 572, 573,
	574, 575, 576, 0, 577, 579, 581, 659, 636, 1227,
	1228, 1231, 1229, 1230, 1232, 1233, 1243, 582, 583, 599,
	450, 444, 400, 442, 443, 447, 448, 451, 0, 0,
	0, 1215, 0, 0, 0, 1159, 0, 917, 0, 1180,
	1034, 0, 1185, 1186, 1175, 740, 1165, 0, 0, 0,
	1166, 0, 0, 1155, 1156, 276, 0, 293, 860, 0,
	342, 379, 1170, 0, 1158, 439, 0, 492, 496, 0,
	585, 1190, 0, 1162, 0, 350, 1183, 865, 0, 871,
	1184, 877, 1182, 561, 0, 867, 868, 873, 281, 1259,
	584, 655, 0, 0, 0, 1176, 0, 0, 0, 0,
	0, 0, 0, 289, 0, 0, 0, 0, 869, 866,
	870, 876, 864, 874, 861, 872, 0, 483, 417, 634,
	510, 288, 334, 321, 363, 405, 517, 0, 0, 395,
	565, 330, 419, 0, 309, 452, 1212, 541, 416, 0,
	524, 544, 0, 436, 315, 475, 531, 532, 858, 863,
	0, 879, 0, 319, 320, 441, 301, 449, 646, 612,
	504, 462, 460, 0, 427, 484, 641, 1171, 0, 349,
	0, 344, 440, 580, 307, 559, 478, 445, 399, 507,
	536, 346, 331, 332, 375, 477, 365, 317, 570, 1240,
	1242, 1238, 1234, 1235, 1200, 1201, 1241, 1237, 366, 1236,
	0, 578, 1245, 1256, 1253, 1258, 1244, 1257, 1251, 982,
	625, 1248, 1247, 1261, 1254, 1255, 571, 1260, 1199, 1252,
	1250, 1249, 1246, 0, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 277, 0, 278, 279, 280, 282,
	283, 284, 857, 285, 286, 287, 290, 291, 292, 294,
	654, 295, 296, 297, 298, 299, 300, 1224, 1202, 302,
	303, 304, 305, 306, 308, 310, 311, 312, 313, 314,
	316, 318, 1213, 1203, 1208, 1214, 1204, 1205, 1209, 322,
	323, 324, 325, 326, 327, 0, 328, 329, 333, 335,
	336, 337, 338, 339, 340, 343, 0, 345, 347, 0,
	348, 351, 0, 352, 353, 354, 355, 356, 357, 358,
	359, 1216, 360, 0, 361, 362, 364, 0, 367, 368,
	369, 370, 371, 0, 372, 1225, 1174, 373, 374, 376,
	377, 378, 380, 381, 382, 383, 384, 385, 386, 387,
	388, 389, 390, 391, 0, 392, 393, 394, 396, 0,
	397, 398, 401, 402, 403, 404, 0, 406, 1226, 0,
	407, 408, 409, 1206, 1207, 410, 411, 412, 413, 414,
	415, 418, 1239, 420, 421, 422, 423, 424, 425, 426,
	656, 428, 429, 430, 431, 432, 433, 434, 618, 1217,
	435, 437, 438, 1223, 622, 1218, 875, 453, 454, 455,
	456, 457, 458, 459, 461, 0, 463, 464, 465, 1219,
	466, 467, 468, 469, 0, 470, 471, 472, 473, 474,
	476, 479, 480, 481, 482, 0, 485, 486, 487, 488,
	489, 490, 491, 493, 494, 495, 497, 498, 499, 657,
	500, 501, 502, 503, 1177, 505, 506, 658, 508, 509,
	511, 512, 513, 514, 515, 516, 667, 1210, 518, 628,
	519, 520, 521, 522, 523, 0, 525, 526, 527, 528,
	529, 530, 533, 534, 535, 537, 538, 1220, 539, 540,
	1211, 542, 543, 878, 545, 546, 547, 548, 549, 0,
	668, 550, 1221, 551, 1222, 552, 553, 554, 555, 556,
	557, 558, 560, 0, 1161, 562, 563, 564, 566, 567,
	568, 569, 572, 573, 574, 575, 576, 0, 577, 579,
	581, 659, 636, 1227, 1228, 1231, 1229, 1230, 1232, 1233,
	1243, 582, 583, 599, 450, 444, 400, 442, 443, 447,
	448, 451, 0, 0, 0, 1215, 0, 0, 0, 1159,
	0, 917, 0, 1180, 1034, 0, 1185, 1186, 1175, 740,
	1165, 0, 0, 0, 1166, 4105, 0, 1155, 1156, 276,
	0, 293, 860, 0, 342, 379, 1170, 0, 1158, 439,
	0, 492, 496, 0, 585, 1190, 0, 1162, 0, 350,
	1183, 865, 0, 871, 1184, 877, 1182, 561, 0, 867,
	868, 873, 281, 1259, 584, 655, 0, 0, 0, 1176,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 869, 866, 870, 876, 864, 874, 861, 872,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	1212, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 858, 863, 0, 879, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 1171, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 1240, 1242, 1238, 1234, 1235, 1200, 1201,
	1241, 1237, 366, 1236, 0, 578, 1245, 1256, 1253, 1258,
	1244, 1257, 1251, 982, 625, 1248, 1247, 1261, 1254, 1255,
	571, 1260, 1199, 1252, 1250, 1249, 1246, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 857, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 1224, 1202, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 1213, 1203, 1208, 1214,
	1204, 1205, 1209, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 1216, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 1225,
	1174, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 1226, 0, 407, 408, 409, 1206, 1207, 410,
	411, 412, 413, 414, 415, 418, 1239, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 1217, 435, 437, 438, 1223, 622, 1218,
	875, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 1219, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 1177, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 1210, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 1220, 539, 540, 1211, 542, 543, 878, 545, 546,
	547, 548, 549, 0, 668, 550, 1221, 551, 1222, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 1161, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 1227, 1228, 1231,
	1229, 1230, 1232, 1233, 1243, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 0, 0, 0, 1215,
	0, 0, 0, 1159, 0, 917, 0, 1180, 1034, 0,
	1185, 1186, 1175, 740, 1165, 0, 0, 0, 1166, 4068,
	0, 1155, 1156, 276, 0, 293, 860, 0, 342, 379,
	1170, 0, 1158, 439, 0, 492, 496, 0, 585, 1190,
	0, 1162, 0, 350, 1183, 865, 0, 871, 1184, 877,
	1182, 561, 0, 867, 868, 873, 281, 1259, 584, 655,
	0, 0, 0, 1176, 0, 3002, 0, 0, 0, 0,
	0, 289, 0, 0, 0, 0, 869, 866, 870, 876,
	864, 874, 861, 872, 0, 483, 417, 634, 510, 288,
	334, 321, 363, 405, 517, 0, 0, 395, 565, 330,
	419, 0, 309, 452, 1212, 541, 416, 0, 524, 544,
	0, 436, 315, 475, 531, 532, 858, 863, 0, 879,
	0, 319, 320, 441, 301, 449, 646, 612, 504, 462,
	460, 0, 427, 484, 641, 1171, 0, 349, 0, 344,
	440, 580, 307, 559, 478, 445, 399, 507, 536, 346,
	331, 332, 375, 477, 365, 317, 570, 1240, 1242, 1238,
	1234, 1235, 1200, 1201, 1241, 1237, 366, 1236, 0, 578,
	1245, 1256, 1253, 1258, 1244, 1257, 1251, 982, 625, 1248,
	1247, 1261, 1254, 1255, 571, 1260, 1199, 1252, 1250, 1249,
	1246, 0, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 277, 0, 278, 279, 280, 282, 283, 284,
	857, 285, 286, 287, 290, 291, 292, 294, 654, 295,
	296, 297, 298, 299, 300, 1224, 1202, 302, 303, 304,
	305, 306, 308, 310, 311, 312, 313, 314, 316, 318,
	1213, 1203, 1208, 1214, 1204, 1205, 1209, 322, 323, 324,
	325, 326, 327, 0, 328, 329, 333, 335, 336, 337,
	338, 339, 340, 343, 0, 345, 347, 0, 348, 351,
	0, 352, 353, 354, 355, 356, 357, 358, 359, 1216,
	360, 0, 361, 362, 364, 0, 367, 368, 369, 370,
	371, 0, 372, 1225, 1174, 373, 374, 376, 377, 378,
	380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
	390, 391, 0, 392, 393, 394, 396, 0, 397, 398,
	401, 402, 403, 404, 0, 406, 1226, 0, 407, 408,
	409, 1206, 1207, 410, 411, 412, 413, 414, 415, 418,
	1239, 420, 421, 422, 423, 424, 425, 426, 656, 428,
	429, 430, 431, 432, 433, 434, 618, 1217, 435, 437,
	438, 1223, 622, 1218, 875, 453, 454, 455, 456, 457,
	458, 459, 461, 0, 463, 464, 465, 1219, 466, 467,
	468, 469, 0, 470, 471, 472, 473, 474, 476, 479,
	480, 481, 482, 0, 485, 486, 487, 488, 489, 490,
	491, 493, 494, 495, 497, 498, 499, 657, 500, 501,
	502, 503, 1177, 505, 506, 658, 508, 509, 511, 512,
	513, 514, 515, 516, 667, 1210, 518, 628, 519, 520,
	521, 522, 523, 0, 525, 526, 527, 528, 529, 530,
	533, 534, 535, 537, 538, 1220, 539, 540, 1211, 542,
	543, 878, 545, 546, 547, 548, 549, 0, 668, 550,
	1221, 551, 1222, 552, 553, 554, 555, 556, 557, 558,
	560, 0, 1161, 562, 563, 564, 566, 567, 568, 569,
	572, 573, 574, 575, 576, 0, 577, 579, 581, 659,
	636, 1227, 1228, 1231, 1229, 1230, 1232, 1233, 1243, 582,
	583, 599, 450, 444, 400, 442, 443, 447, 448, 451,
	0, 0, 0, 1215, 0, 0, 0, 1159, 0, 917,
	0, 1180, 1034, 0, 1185, 1186, 1175, 740, 1165, 0,
	0, 0, 1166, 0, 0, 1155, 1156, 276, 0, 293,
	860, 0, 342, 379, 1170, 0, 1158, 439, 0, 492,
	496, 0, 585, 1190, 0, 1162, 0, 350, 1183, 865,
	0, 871, 1184, 877, 1182, 561, 0, 867, 868, 873,
	281, 1259, 584, 655, 0, 0, 0, 1176, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 0,
	869, 866, 870, 876, 864, 874, 861, 872, 0, 483,
	417, 634, 510, 288, 334, 321, 363, 405, 517, 0,
	0, 395, 565, 330, 419, 3021, 309, 452, 1212, 541,
	416, 0, 524, 544, 0, 436, 315, 475, 531, 532,
	858, 863, 0, 879, 0, 319, 320, 441, 301, 449,
	646, 612, 504, 462, 460, 0, 427, 484, 641, 1171,
	0, 349, 0, 344, 440, 580, 307, 559, 478, 445,
	399, 507, 536, 346, 331, 332, 375, 477, 365, 317,
	570, 1240, 1242, 1238, 1234, 1235, 1200, 1201, 1241, 1237,
	366, 1236, 0, 578, 1245, 1256, 1253, 1258, 1244, 1257,
	1251, 982, 625, 1248, 1247, 1261, 1254, 1255, 571, 1260,
	1199, 1252, 1250, 1249, 1246, 0, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 277, 0, 278, 279,
	280, 282, 283, 284, 857, 285, 286, 287, 290, 291,
	292, 294, 654, 295, 296, 297, 298, 299, 300, 1224,
	1202, 302, 303, 304, 305, 306, 308, 310, 311, 312,
	313, 314, 316, 318, 1213, 1203, 1208, 1214, 1204, 1205,
	1209, 322, 323, 324, 325, 326, 327, 0, 328, 329,
	333, 335, 336, 337, 338, 339, 340, 343, 0, 345,
	347, 0, 348, 351, 0, 352, 353, 354, 355, 356,
	357, 358, 359, 1216, 360, 0, 361, 362, 364, 0,
	367, 368, 369, 370, 371, 0, 372, 1225, 1174, 373,
	374, 376, 377, 378, 380, 381, 382, 383, 384, 385,
	386, 387, 388, 389, 390, 391, 0, 392, 393, 394,
	396, 0, 397, 398, 401, 402, 403, 404, 0, 406,
	1226, 0, 407, 408, 409, 1206, 1207, 410, 411, 412,
	413, 414, 415, 418, 1239, 420, 421, 422, 423, 424,
	425, 426, 656, 428, 429, 430, 431, 432, 433, 434,
	618, 1217, 435, 437, 438, 1223, 622, 1218, 875, 453,
	454, 455, 456, 457, 458, 459, 461, 0, 463, 464,
	465, 1219, 466, 467, 468, 469, 0, 470, 471, 472,
	473, 474, 476, 479, 480, 481, 482, 0, 485, 486,
	487, 488, 489, 490, 491, 493, 494, 495, 497, 498,
	499, 657, 500, 501, 502, 503, 1177, 505, 506, 658,
	508, 509, 511, 512, 513, 514, 515, 516, 667, 1210,
	518, 628, 519, 520, 521, 522, 523, 0, 525, 526,
	527, 528, 529, 530, 533, 534, 535, 537, 538, 1220,
	539, 540, 1211, 542, 543, 878, 545, 546, 547, 548,
	549, 0, 668, 550, 1221, 551, 1222, 552, 553, 554,
	555, 556, 557, 558, 560, 0, 1161, 562, 563, 564,
	566, 567, 568, 569, 572, 573, 574, 575, 576, 0,
	577, 579, 581, 659, 636, 1227, 1228, 1231, 1229, 1230,
	1232, 1233, 1243, 582, 583, 599, 450, 444, 400, 442,
	443, 447, 448, 451, 0, 0, 0, 1215, 0, 0,
	0, 1159, 0, 917, 0, 1180, 1034, 0, 1185, 1186,
	1175, 740, 1165, 0, 0, 0, 1166, 0, 0, 1155,
	1156, 276, 0, 293, 860, 0, 342, 379, 1170, 0,
	1158, 439, 0, 492, 496, 0, 585, 1190, 0, 1162,
	0, 350, 1183, 865, 0, 871, 1184, 877, 1182, 561,
	0, 867, 868, 873, 281, 1259, 584, 655, 0, 0,
	0, 1176, 0, 0, 0, 0, 0, 0, 0, 289,
	0, 0, 0, 0, 869, 866, 870, 876, 864, 874,
	861, 872, 0, 483, 417, 634, 510, 288, 334, 321,
	363, 405, 517, 0, 0, 395, 565, 330, 419, 0,
	309, 452, 1212, 541, 416, 0, 524, 544, 0, 436,
	315, 475, 531, 532, 858, 863, 0, 879, 0, 319,
	320, 441, 301, 449, 646, 612, 504, 462, 460, 0,
	427, 484, 641, 1171, 0, 349, 0, 344, 440, 580,
	307, 559, 478, 445, 399, 507, 536, 346, 331, 332,
	375, 477, 365, 317, 570, 1240, 1242, 1238, 1234, 1235,
	1200, 1201, 1241, 1237, 366, 1236, 0, 578, 1245, 1256,
	1253, 1258, 1244, 1257, 1251, 982, 625, 1248, 1247, 1261,
	1254, 1255, 571, 1260, 1199, 1252, 1250, 1249, 1246, 0,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	277, 0, 278, 279, 280, 282, 283, 284, 857, 285,
	286, 287, 290, 291, 292, 294, 654, 295, 296, 297,
	298, 299, 300, 1224, 1202, 302, 303, 304, 305, 306,
	308, 310, 311, 312, 313, 314, 316, 318, 1213, 1203,
	1208, 1214, 1204, 1205, 1209, 322, 323, 324, 325, 326,
	327, 0, 328, 329, 333, 335, 336, 337, 338, 339,
	340, 343, 0, 345, 347, 0, 348, 351, 0, 352,
	353, 354, 355, 356, 357, 358, 359, 1216, 360, 0,
	361, 362, 364, 0, 367, 368, 369, 370, 371, 0,
	372, 1225, 1174, 373, 374, 376, 377, 378, 380, 381,
	382, 383, 384, 385, 386, 387, 388, 389, 390, 391,
	0, 392, 393, 394, 396, 0, 397, 398, 401, 402,
	403, 404, 0, 406, 1226, 0, 407, 408, 409, 1206,
	1207, 410, 411, 412, 413, 414, 415, 418, 1239, 420,
	421, 422, 423, 424, 425, 426, 656, 428, 429, 430,
	431, 432, 433, 434, 618, 1217, 435, 437, 438, 1223,
	622, 1218, 875, 453, 454, 455, 456, 457, 458, 459,
	461, 0, 463, 464, 465, 1219, 466, 467, 468, 469,
	0, 470, 471, 472, 473, 474, 476, 479, 480, 481,
	482, 0, 485, 486, 487, 488, 489, 490, 491, 493,
	494, 495, 497, 498, 499, 657, 500, 501, 502, 503,
	1177, 505, 506, 658, 508, 509, 511, 512, 513, 514,
	515, 516, 667, 1210, 518, 628, 519, 520, 521, 522,
	523, 0, 525, 526, 527, 528, 529, 530, 533, 534,
	535, 537, 538, 1220, 539, 540, 1211, 542, 543, 878,
	545, 546, 547, 548, 549, 0, 668, 550, 1221, 551,
	1222, 552, 553, 554, 555, 556, 557, 558, 560, 0,
	1161, 562, 563, 564, 566, 567, 568, 569, 572, 573,
	574, 575, 576, 0, 577, 579, 581, 659, 636, 1227,
	1228, 1231, 1229, 1230, 1232, 1233, 1243, 582, 583, 599,
	450, 444, 400, 442, 443, 447, 448, 451, 0, 0,
	0, 1215, 0, 0, 0, 1159, 0, 0, 917, 0,
	1180, 1034, 0, 1185, 1186, 1175, 740, 1165, 0, 0,
	1166, 2932, 0, 1155, 1156, 1705, 276, 0, 293, 860,
	0, 342, 379, 1170, 0, 1158, 439, 0, 492, 496,
	0, 585, 1190, 0, 1162, 0, 350, 1183, 865, 0,
	871, 1184, 877, 1182, 561, 0, 867, 868, 873, 281,
	1259, 584, 655, 0, 0, 0, 1176, 0, 0, 0,
	0, 0, 0, 0, 289, 0, 0, 0, 0, 869,
	866, 870, 876, 864, 874, 861, 872, 0, 483, 417,
	634, 510, 288, 334, 321, 363, 405, 517, 0, 0,
	395, 565, 330, 419, 0, 309, 452, 1212, 541, 416,
	0, 524, 544, 0, 436, 315, 475, 531, 532, 858,
	863, 0, 879, 0, 319, 320, 441, 301, 449, 646,
	612, 504, 462, 460, 0, 427, 484, 641, 1171, 0,
	349, 0, 344, 440, 580, 307, 559, 478, 445, 399,
	507, 536, 346, 331, 332, 375, 477, 365, 317, 570,
	1240, 1242, 1238, 1234, 1235, 1200, 1201, 1241, 1237, 366,
	1236, 0, 578, 1245, 1256, 1253, 1258, 1244, 1257, 1251,
	982, 625, 1248, 1247, 1261, 1254, 1255, 571, 1260, 1199,
	1252, 1250, 1249, 1246, 0, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 277, 0, 278, 279, 280,
	282, 283, 284, 857, 285, 286, 287, 290, 291, 292,
	294, 654, 295, 296, 297, 298, 299, 300, 1224, 1202,
	302, 303, 304, 305, 306, 308, 310, 311, 312, 313,
	314, 316, 318, 1213, 1203, 1208, 1214, 1204, 1205, 1209,
	322, 323, 324, 325, 326, 327, 0, 328, 329, 333,
	335, 336, 337, 338, 339, 340, 343, 0, 345, 347,
	0, 348, 351, 0, 352, 353, 354, 355, 356, 357,
	358, 359, 1216, 360, 0, 361, 362, 364, 0, 367,
	368, 369, 370, 371, 0, 372, 1225, 1174, 373, 374,
	376, 377, 378, 380, 381, 382, 383, 384, 385, 386,
	387, 388, 389, 390, 391, 0, 392, 393, 394, 396,
	0, 397, 398, 401, 402, 403, 404, 0, 406, 1226,
	0, 407, 408, 409, 1206, 1207, 410, 411, 412, 413,
	414, 415, 418, 1239, 420, 421, 422, 423, 424, 425,
	426, 656, 428, 429, 430, 431, 432, 433, 434, 618,
	1217, 435, 437, 438, 1223, 622, 1218, 875, 453, 454,
	455, 456, 457, 458, 459, 461, 0, 463, 464, 465,
	1219, 466, 467, 468, 469, 0, 470, 471, 472, 473,
	474, 476, 479, 480, 481, 482, 0, 485, 486, 487,
	488, 489, 490, 491, 493, 494, 495, 497, 498, 499,
	657, 500, 501, 502, 503, 1177, 505, 506, 658, 508,
	509, 511, 512, 513, 514, 515, 516, 667, 1210, 518,
	628, 519, 520, 521, 522, 523, 0, 525, 526, 527,
	528, 529, 530, 533, 534, 535, 537, 538, 1220, 539,
	540, 1211, 542, 543, 878, 545, 546, 547, 548, 549,
	0, 668, 550, 1221, 551, 1222, 552, 553, 554, 555,
	556, 557, 558, 560, 0, 1161, 562, 563, 564, 566,
	567, 568, 569, 572, 573, 574, 575, 576, 0, 577,
	579, 581, 659, 636, 1227, 1228, 1231, 1229, 1230, 1232,
	1233, 1243, 582, 583, 599, 450, 444, 400, 442, 443,
	447, 448, 451, 0, 0, 0, 1215, 0, 0, 0,
	1159, 0, 917, 0, 1180, 1034, 0, 1185, 1186, 1175,
	740, 1165, 0, 0, 0, 1166, 0, 0, 1155, 1156,
	276, 0, 293, 860, 0, 342, 379, 1170, 0, 1158,
	439, 0, 492, 496, 0, 585, 1190, 0, 1162, 0,
	350, 1183, 865, 0, 871, 1184, 877, 1182, 561, 0,
	867, 868, 873, 281, 1259, 584, 655, 0, 0, 0,
	1176, 0, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 0, 869, 866, 870, 876, 864, 874, 861,
	872, 0, 483, 417, 634, 510, 288, 334, 321, 363,
	405, 517, 0, 0, 395, 565, 330, 419, 0, 309,
	452, 1212, 541, 416, 0, 524, 544, 0, 436, 315,
	475, 531, 532, 858, 863, 0, 879, 0, 319, 320,
	441, 301, 449, 646, 612, 504, 462, 460, 0, 427,
	484, 641, 1171, 0, 349, 0, 344, 440, 580, 307,
	559, 478, 445, 399, 507, 536, 346, 331, 332, 375,
	477, 365, 317, 570, 1240, 1242, 1238, 1234, 1235, 1200,
	1201, 1241, 1237, 366, 1236, 0, 578, 1245, 1256, 1253,
	1258, 1244, 1257, 1251, 982, 625, 1248, 1247, 1261, 1254,
	1255, 571, 1260, 1199, 1252, 1250, 1249, 1246, 0, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 277,
	0, 278, 279, 280, 282, 283, 284, 857, 285, 286,
	287, 290, 291, 292, 294, 654, 295, 296, 297, 298,
	299, 300, 1224, 1202, 302, 303, 304, 305, 306, 308,
	310, 311, 312, 313, 314, 316, 318, 1213, 1203, 1208,
	1214, 1204, 1205, 1209, 322, 323, 324, 325, 326, 327,
	0, 328, 329, 333, 335, 336, 337, 338, 339, 340,
	343, 0, 345, 347, 0, 348, 351, 0, 352, 353,
	354, 355, 356, 357, 358, 359, 1216, 360, 0, 361,
	362, 364, 0, 367, 368, 369, 370, 371, 0, 372,
	1225, 1174, 373, 374, 376, 377, 378, 380, 381, 382,
	383, 384, 385, 386, 387, 388, 389, 390, 391, 0,
	392, 393, 394, 396, 0, 397, 398, 401, 402, 403,
	404, 0, 406, 1226, 0, 407, 408, 409, 1206, 1207,
	410, 411, 412, 413, 414, 415, 418, 1239, 420, 421,
	422, 423, 424, 425, 426, 656, 428, 429, 430, 431,
	432, 433, 434, 618, 1217, 435, 437, 438, 1223, 622,
	1218, 875, 453, 454, 455, 456, 457, 458, 459, 461,
	0, 463, 464, 465, 1219, 466, 467, 468, 469, 0,
	470, 471, 472, 473, 474, 476, 479, 480, 481, 482,
	0, 485, 486, 487, 488, 489, 490, 491, 493, 494,
	495, 497, 498, 499, 657, 500, 501, 502, 503, 1177,
	505, 506, 658, 508, 509, 511, 512, 513, 514, 515,
	516, 667, 1210, 518, 628, 519, 520, 521, 522, 523,
	0, 525, 526, 527, 528, 529, 530, 533, 534, 535,
	537, 538, 1220, 539, 540, 1211, 542, 543, 878, 545,
	546, 547, 548, 549, 0, 668, 550, 1221, 551, 1222,
	552, 553, 554, 555, 556, 557, 558, 560, 0, 1161,
	562, 563, 564, 566, 567, 568, 569, 572, 573, 574,
	575, 576, 0, 577, 579, 581, 659, 636, 1227, 1228,
	1231, 1229, 1230, 1232, 1233, 1243, 582, 583, 599, 450,
	444, 400, 442, 443, 447, 448, 451, 0, 0, 0,
	1215, 0, 0, 0, 1159, 0, 917, 0, 1180, 1034,
	0, 1185, 1186, 1175, 740, 1165, 0, 0, 0, 1166,
	0, 0, 1155, 1156, 276, 0, 293, 860, 0, 342,
	379, 1170, 0, 1158, 439, 0, 492, 496, 0, 585,
	1190, 0, 1162, 0, 350, 1183, 865, 0, 871, 1184,
	877, 1182, 561, 0, 867, 868, 873, 281, 1259, 584,
	655, 0, 0, 0, 1176, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 869, 866, 870,
	876, 864, 874, 861, 872, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 1212, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 858, 863, 0,
	879, 0, 5269, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 1171, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 1240, 1242,
	1238, 1234, 1235, 1200, 1201, 1241, 1237, 366, 1236, 0,
	578, 1245, 1256, 1253, 1258, 1244, 1257, 1251, 982, 625,
	1248, 1247, 1261, 1254, 1255, 571, 1260, 1199, 1252, 1250,
	1249, 1246, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 857, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 1224, 1202, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 1213, 1203, 1208, 1214, 1204, 1205, 1209, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	1216, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 1225, 1174, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 1226, 0, 407,
	408, 409, 1206, 1207, 410, 411, 412, 413, 414, 415,
	418, 1239, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 1217, 435,
	437, 438, 1223, 622, 1218, 875, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 1219, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 1177, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 1210, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 1220, 539, 540, 1211,
	542, 543, 878, 545, 546, 547, 548, 549, 0, 668,
	550, 1221, 551, 1222, 552, 553, 554, 555, 556, 5268,
	558, 560, 0, 1161, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 1227, 1228, 1231, 1229, 1230, 1232, 1233, 1243,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 0, 0, 0, 1215, 0, 0, 0, 1159, 0,
	917, 0, 1180, 1034, 0, 1185, 1186, 1175, 740, 1165,
	0, 0, 0, 1166, 0, 0, 1155, 1156, 276, 0,
	293, 860, 0, 342, 379, 1170, 0, 1158, 439, 0,
	492, 496, 0, 585, 1190, 0, 1162, 0, 350, 1183,
	865, 0, 871, 1184, 877, 1182, 561, 0, 867, 868,
	873, 281, 1259, 584, 655, 0, 0, 0, 1176, 0,
	0, 0, 0, 0, 0, 0, 289, 0, 0, 0,
	0, 869, 866, 870, 876, 864, 874, 861, 872, 0,
	483, 417, 634, 510, 288, 334, 321, 363, 405, 517,
	0, 0, 395, 565, 330, 419, 0, 309, 452, 1212,
	541, 416, 0, 524, 544, 0, 436, 315, 475, 531,
	532, 858, 863, 0, 879, 0, 319, 320, 441, 301,
	449, 646, 612, 504, 462, 460, 0, 427, 484, 641,
	1171, 0, 349, 0, 344, 440, 580, 307, 559, 478,
	445, 399, 507, 536, 346, 331, 332, 375, 477, 365,
	317, 570, 1240, 1242, 1238, 1234, 1235, 1200, 1201, 1241,
	1237, 366, 1236, 0, 578, 1245, 1256, 1253, 1258, 1244,
	1257, 1251, 982, 625, 1248, 1247, 1261, 1254, 1255, 571,
	1260, 1199, 1252, 1250, 1249, 1246, 0, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 277, 0, 278,
	279, 280, 282, 283, 284, 857, 285, 286, 287, 290,
	291, 292, 294, 654, 295, 296, 297, 298, 299, 300,
	1224, 1202, 302, 303, 304, 305, 306, 308, 310, 311,
	312, 313, 314, 316, 5074, 1213, 1203, 1208, 1214, 1204,
	1205, 1209, 322, 323, 324, 325, 326, 327, 0, 328,
	329, 333, 335, 336, 337, 338, 339, 340, 343, 0,
	345, 347, 0, 348, 351, 0, 352, 353, 354, 355,
	356, 357, 358, 359, 1216, 360, 0, 361, 362, 364,
	0, 367, 368, 369, 370, 371, 0, 372, 1225, 5076,
	373, 374, 376, 377, 378, 380, 381, 382, 383, 384,
	385, 386, 387, 388, 389, 390, 391, 0, 392, 393,
	394, 396, 0, 397, 398, 401, 402, 403, 404, 0,
	406, 1226, 0, 407, 408, 409, 1206, 1207, 410, 411,
	412, 413, 414, 415, 418, 1239, 420, 421, 422, 423,
	424, 425, 426, 656, 428, 429, 430, 431, 432, 433,
	434, 618, 1217, 435, 437, 438, 1223, 622, 1218, 875,
	453, 454, 455, 456, 457, 458, 459, 461, 0, 463,
	464, 465, 1219, 466, 467, 468, 469, 0, 470, 471,
	472, 473, 474, 476, 479, 480, 481, 482, 0, 485,
	486, 487, 488, 489, 490, 491, 493, 494, 495, 497,
	498, 499, 657, 500, 5075, 502, 503, 1177, 505, 506,
	658, 508, 509, 511, 512, 513, 514, 515, 516, 667,
	1210, 518, 628, 519, 520, 521, 522, 523, 0, 525,
	526, 527, 528, 529, 530, 533, 534, 535, 537, 538,
	1220, 539, 540, 1211, 542, 543, 878, 545, 546, 547,
	548, 549, 0, 668, 550, 1221, 551, 1222, 552, 553,
	554, 555, 556, 557, 558, 560, 0, 1161, 562, 563,
	564, 566, 567, 568, 569, 572, 573, 574, 575, 576,
	0, 577, 579, 581, 659, 636, 1227, 1228, 1231, 1229,
	1230, 1232, 1233, 1243, 582, 583, 599, 450, 444, 400,
	442, 443, 447, 448, 451, 0, 0, 0, 1215, 0,
	0, 0, 1159, 0, 917, 0, 1180, 1034, 0, 1185,
	1186, 1175, 740, 1165, 0, 0, 0, 5073, 0, 0,
	1155, 1156, 276, 0, 293, 860, 0, 342, 379, 1170,
	0, 1158, 439, 0, 492, 496, 0, 5267, 1190, 0,
	1162, 0, 350, 1183, 865, 0, 871, 1184, 877, 1182,
	561, 0, 867, 868, 873, 281, 1259, 584, 655, 0,
	0, 0, 1176, 0, 0, 0, 0, 0, 0, 0,
	289, 0, 0, 0, 0, 869, 866, 870, 876, 864,
	874, 861, 872, 0, 483, 417, 634, 510, 288, 334,
	321, 363, 405, 517, 0, 0, 395, 565, 330, 419,
	0, 309, 452, 1212, 541, 416, 0, 524, 544, 0,
	436, 315, 475, 531, 532, 858, 863, 0, 879, 0,
	5269, 320, 441, 301, 449, 646, 612, 504, 462, 460,
	0, 427, 484, 641, 1171, 0, 349, 0, 344, 440,
	580, 307, 559, 478, 445, 399, 507, 536, 346, 331,
	332, 375, 477, 365, 317, 570, 1240, 1242, 1238, 1234,
	1235, 1200, 1201, 1241, 1237, 366, 1236, 0, 578, 1245,
	1256, 1253, 1258, 1244, 1257, 1251, 982, 625, 1248, 1247,
	1261, 1254, 1255, 571, 1260, 1199, 1252, 1250, 1249, 1246,
	0, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 277, 0, 278, 279, 280, 282, 283, 284, 857,
	285, 286, 287, 290, 291, 292, 294, 654, 295, 296,
	297, 298, 299, 300, 1224, 1202, 302, 303, 304, 305,
	306, 308, 310, 311, 312, 313, 314, 316, 318, 1213,
	1203, 1208, 1214, 1204, 1205, 1209, 322, 323, 324, 325,
	326, 327, 0, 328, 329, 333, 335, 336, 337, 338,
	339, 340, 343, 0, 345, 347, 0, 348, 351, 0,
	352, 353, 354, 355, 356, 357, 358, 359, 1216, 360,
	0, 361, 362, 364, 0, 367, 368, 369, 370, 371,
	0, 372, 1225, 1174, 373, 374, 376, 377, 378, 380,
	381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
	391, 0, 392, 393, 394, 396, 0, 397, 398, 401,
	402, 403, 404, 0, 406, 1226, 0, 407, 408, 409,
	1206, 1207, 410, 411, 412, 413, 414, 415, 418, 1239,
	420, 421, 422, 423, 424, 425, 426, 656, 428, 429,
	430, 431, 432, 433, 434, 618, 1217, 435, 437, 438,
	1223, 622, 1218, 875, 453, 454, 455, 456, 457, 458,
	459, 461, 0, 463, 464, 465, 1219, 466, 467, 468,
	469, 0, 470, 471, 472, 473, 474, 476, 479, 480,
	481, 482, 0, 485, 486, 487, 488, 489, 490, 491,
	493, 494, 495, 497, 498, 499, 657, 500, 501, 502,
	503, 1177, 505, 506, 658, 508, 509, 511, 512, 513,
	514, 515, 516, 667, 1210, 518, 628, 519, 520, 521,
	522, 523, 0, 525, 526, 527, 528, 529, 530, 533,
	534, 535, 537, 538, 1220, 539, 540, 1211, 542, 543,
	878, 545, 546, 547, 548, 549, 0, 668, 550, 1221,
	551, 1222, 552, 553, 554, 555, 556, 5268, 558, 560,
	0, 1161, 562, 563, 564, 566, 567, 568, 569, 572,
	573, 574, 575, 576, 0, 577, 579, 581, 659, 636,
	1227, 1228, 1231, 1229, 1230, 1232, 1233, 1243, 582, 583,
	599, 450, 444, 400, 442, 443, 447, 448, 451, 0,
	0, 0, 1215, 0, 0, 0, 1159, 0, 917, 0,
	1180, 1034, 0, 1185, 1186, 1175, 740, 1165, 0, 0,
	0, 1166, 0, 0, 1155, 1156, 276, 0, 293, 860,
	0, 342, 379, 1170, 0, 1158, 439, 0, 492, 496,
	0, 585, 1190, 0, 1162, 0, 350, 1183, 865, 0,
	871, 1184, 877, 1182, 561, 0, 867, 868, 873, 281,
	1259, 584, 655, 0, 0, 0, 1176, 0, 0, 0,
	0, 0, 0, 0, 289, 0, 0, 0, 0, 869,
	866, 870, 876, 864, 874, 861, 872, 0, 483, 417,
	634, 510, 288, 334, 321, 363, 405, 517, 0, 0,
	395, 565, 330, 419, 0, 309, 452, 1212, 541, 416,
	0, 524, 544, 0, 436, 315, 475, 531, 532, 858,
	863, 0, 879, 0, 319, 320, 441, 301, 449, 646,
	612, 504, 462, 460, 0, 427, 484, 641, 1171, 0,
	349, 0, 344, 440, 580, 307, 559, 478, 445, 399,
	507, 536, 346, 331, 332, 375, 477, 365, 317, 570,
	1240, 1242, 1238, 1234, 1235, 1200, 1201, 1241, 1237, 366,
	1236, 0, 578, 1245, 1256, 1253, 1258, 1244, 1257, 1251,
	982, 625, 1248, 1247, 1261, 1254, 1255, 571, 1260, 1199,
	1252, 1250, 1249, 1246, 0, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 277, 0, 278, 279, 280,
	282, 283, 284, 857, 285, 286, 287, 290, 291, 292,
	294, 654, 295, 296, 297, 298, 299, 300, 1224, 1202,
	302, 303, 304, 305, 306, 308, 310, 311, 312, 313,
	314, 316, 318, 1213, 1203, 1208, 1214, 1204, 1205, 1209,
	322, 323, 324, 325, 326, 327, 0, 328, 329, 333,
	335, 336, 337, 338, 339, 340, 343, 0, 345, 347,
	0, 348, 351, 0, 352, 353, 354, 355, 356, 357,
	358, 359, 1216, 360, 0, 361, 362, 364, 0, 367,
	368, 369, 370, 371, 0, 372, 1225, 1174, 373, 374,
	376, 377, 378, 380, 381, 382, 383, 384, 385, 386,
	387, 388, 389, 390, 391, 0, 392, 393, 394, 396,
	0, 397, 398, 401, 402, 403, 404, 0, 406, 1226,
	0, 407, 408, 409, 1206, 1207, 410, 411, 412, 413,
	414, 415, 418, 1239, 420, 421, 422, 423, 424, 425,
	426, 656, 428, 429, 430, 431, 432, 433, 4592, 618,
	1217, 435, 437, 438, 1223, 622, 1218, 875, 453, 454,
	455, 456, 457, 458, 459, 461, 0, 463, 464, 465,
	1219, 466, 467, 468, 469, 0, 470, 471, 472, 473,
	474, 476, 479, 480, 481, 482, 0, 485, 486, 487,
	488, 489, 490, 491, 493, 494, 495, 497, 498, 499,
	657, 500, 501, 502, 503, 1177, 505, 506, 658, 508,
	509, 511, 512, 513, 514, 515, 516, 667, 1210, 518,
	628, 519, 520, 521, 522, 523, 0, 525, 526, 527,
	528, 529, 530, 533, 534, 535, 537, 538, 1220, 539,
	540, 1211, 542, 543, 878, 545, 546, 547, 548, 549,
	0, 668, 550, 1221, 551, 1222, 552, 553, 554, 555,
	556, 557, 558, 560, 0, 1161, 562, 563, 564, 566,
	567, 568, 569, 572, 573, 574, 575, 576, 0, 577,
	579, 581, 659, 636, 1227, 1228, 1231, 1229, 1230, 1232,
	1233, 1243, 582, 583, 599, 450, 444, 400, 442, 443,
	447, 448, 451, 0, 0, 0, 1215, 0, 0, 0,
	1159, 0, 917, 0, 1180, 1034, 0, 1185, 1186, 1175,
	740, 1165, 0, 0, 0, 1166, 0, 0, 1155, 1156,
	276, 0, 293, 860, 0, 342, 379, 1170, 0, 1158,
	439, 0, 492, 496, 0, 585, 1190, 0, 1162, 0,
	350, 1183, 865, 0, 871, 1184, 877, 1182, 561, 0,
	867, 868, 873, 281, 1259, 584, 655, 0, 0, 0,
	1176, 0, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 0, 869, 866, 870, 876, 864, 874, 861,
	872, 0, 483, 417, 634, 510, 288, 334, 321, 363,
	405, 517, 0, 0, 395, 565, 330, 419, 0, 309,
	452, 1212, 541, 416, 0, 524, 544, 0, 436, 315,
	475, 531, 532, 858, 863, 0, 879, 0, 319, 320,
	441, 301, 449, 646, 612, 504, 462, 460, 0, 427,
	484, 641, 1171, 0, 349, 0, 344, 440, 580, 307,
	559, 478, 445, 399, 507, 536, 346, 331, 332, 375,
	477, 365, 317, 570, 1240, 1242, 1238, 1234, 1235, 1200,
	1201, 1241, 1237, 366, 1236, 0, 578, 1245, 1256, 1253,
	1258, 1244, 1257, 1251, 982, 625, 1248, 1247, 1261, 1254,
	1255, 571, 1260, 1199, 1252, 1250, 1249, 1246, 0, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 277,
	0, 278, 279, 280, 282, 283, 284, 857, 285, 286,
	287, 290, 291, 292, 294, 654, 295, 296, 297, 298,
	299, 300, 1224, 1202, 302, 303, 304, 305, 306, 308,
	310, 311, 312, 313, 314, 316, 318, 1213, 1203, 1208,
	1214, 1204, 1205, 1209, 322, 323, 324, 325, 326, 327,
	0, 328, 329, 333, 335, 336, 337, 338, 339, 340,
	343, 0, 345, 347, 0, 348, 351, 0, 352, 353,
	354, 355, 356, 357, 358, 359, 1216, 360, 0, 361,
	362, 364, 0, 367, 368, 369, 370, 371, 0, 372,
	1225, 1174, 373, 374, 376, 377, 378, 380, 381, 382,
	383, 384, 385, 386, 387, 388, 389, 390, 391, 0,
	392, 393, 394, 396, 0, 397, 398, 401, 402, 403,
	404, 0, 406, 1226, 0, 407, 408, 409, 1206, 1207,
	410, 411, 412, 413, 414, 415, 418, 1239, 420, 421,
	422, 423, 424, 425, 426, 656, 428, 429, 430, 431,
	432, 433, 434, 618, 1217, 435, 437, 438, 1223, 622,
	1218, 875, 453, 454, 455, 456, 457, 458, 459, 461,
	0, 463, 464, 465, 1219, 466, 467, 468, 469, 0,
	470, 471, 472, 473, 474, 476, 479, 480, 481, 482,
	0, 485, 486, 487, 488, 489, 490, 491, 493, 494,
	495, 497, 498, 499, 657, 500, 501, 502, 503, 1177,
	505, 506, 658, 508, 509, 511, 512, 513, 514, 515,
	516, 667, 1210, 518, 628, 519, 520, 521, 522, 523,
	0, 525, 526, 527, 528, 529, 530, 533, 534, 535,
	537, 538, 1220, 539, 540, 1211, 542, 543, 878, 545,
	546, 547, 548, 549, 0, 668, 550, 1221, 551, 1222,
	552, 553, 554, 555, 556, 557, 558, 560, 0, 1161,
	562, 563, 564, 566, 567, 568, 569, 572, 573, 574,
	575, 576, 0, 577, 579, 581, 659, 4579, 1227, 1228,
	1231, 1229, 1230, 1232, 1233, 1243, 582, 583, 599, 450,
	444, 400, 442, 443, 447, 448, 451, 0, 0, 0,
	1215, 0, 0, 0, 1159, 0, 917, 0, 1180, 1034,
	0, 1185, 1186, 1175, 740, 1165, 0, 0, 0, 1166,
	0, 0, 1155, 1156, 276, 0, 293, 860, 0, 342,
	379, 1170, 0, 1158, 439, 0, 492, 496, 0, 585,
	1190, 0, 1162, 0, 350, 1183, 865, 0, 871, 1184,
	877, 1182, 561, 0, 867, 868, 873, 281, 1259, 584,
	655, 0, 0, 0, 1176, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 869, 866, 870,
	876, 864, 874, 861, 872, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 1212, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 858, 863, 0,
	879, 0, 3697, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 1171, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 1240, 1242,
	1238, 1234, 1235, 1200, 1201, 1241, 1237, 366, 1236, 0,
	578, 1245, 1256, 1253, 1258, 1244, 1257, 1251, 982, 625,
	1248, 1247, 1261, 1254, 1255, 571, 1260, 1199, 1252, 1250,
	1249, 1246, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 857, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 1224, 1202, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 1213, 1203, 1208, 1214, 1204, 1205, 1209, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	1216, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 1225, 1174, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 1226, 0, 407,
	408, 409, 1206, 1207, 410, 411, 412, 413, 414, 415,
	418, 1239, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 1217, 435,
	437, 438, 1223, 622, 1218, 875, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 1219, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 1177, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 1210, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 1220, 539, 540, 1211,
	542, 543, 878, 545, 546, 547, 548, 549, 0, 668,
	550, 1221, 551, 1222, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 1161, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 1227, 1228, 1231, 1229, 1230, 1232, 1233, 1243,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 0, 0, 0, 1215, 0, 0, 0, 1159, 0,
	917, 0, 2838, 1034, 0, 1185, 1186, 1175, 740, 1165,
	0, 0, 0, 1166, 0, 0, 1155, 1156, 276, 0,
	293, 860, 0, 342, 379, 1170, 0, 1158, 439, 0,
	492, 496, 0, 585, 1190, 0, 1162, 0, 350, 1183,
	865, 0, 871, 1184, 877, 1182, 561, 0, 867, 868,
	873, 281, 1259, 584, 655, 0, 0, 0, 1176, 0,
	0, 0, 0, 0, 0, 0, 289, 0, 0, 0,
	0, 869, 866, 870, 876, 864, 874, 861, 872, 0,
	483, 417, 634, 510, 288, 334, 321, 363, 405, 517,
	0, 0, 395, 565, 330, 419, 0, 309, 452, 1212,
	541, 416, 0, 524, 544, 0, 436, 315, 475, 531,
	532, 858, 863, 0, 879, 0, 319, 320, 441, 301,
	449, 646, 612, 504, 462, 460, 0, 427, 484, 641,
	1171, 0, 349, 0, 344, 440, 580, 307, 559, 478,
	445, 399, 507, 536, 346, 331, 332, 375, 477, 365,
	317, 570, 1240, 1242, 1238, 1234, 1235, 1200, 1201, 1241,
	1237, 366, 1236, 0, 578, 1245, 1256, 1253, 1258, 1244,
	1257, 1251, 982, 625, 1248, 1247, 1261, 1254, 1255, 571,
	1260, 1199, 1252, 1250, 1249, 1246, 0, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 277, 0, 278,
	279, 280, 282, 283, 284, 857, 285, 286, 287, 290,
	291, 292, 294, 654, 295, 296, 297, 298, 299, 300,
	1224, 1202, 302, 303, 304, 305, 306, 308, 310, 311,
	312, 313, 314, 316, 318, 1213, 1203, 1208, 1214, 1204,
	1205, 1209, 322, 323, 324, 325, 326, 327, 0, 328,
	329, 333, 335, 336, 337, 338, 339, 340, 343, 0,
	345, 347, 0, 348, 351, 0, 352, 353, 354, 355,
	356, 357, 358, 359, 1216, 360, 0, 361, 362, 364,
	0, 367, 368, 369, 370, 371, 0, 372, 1225, 1174,
	373, 374, 376, 377, 378, 380, 381, 382, 383, 384,
	385, 386, 387, 388, 389, 390, 391, 0, 392, 393,
	394, 396, 0, 397, 398, 401, 402, 403, 404, 0,
	406, 1226, 0, 407, 408, 409, 1206, 1207, 410, 411,
	412, 413, 414, 415, 418, 1239, 420, 421, 422, 423,
	424, 425, 426, 656, 428, 429, 430, 431, 432, 433,
	434, 618, 1217, 435, 437, 438, 1223, 622, 1218, 875,
	453, 454, 455, 456, 457, 458, 459, 461, 0, 463,
	464, 465, 1219, 466, 467, 468, 469, 0, 470, 471,
	472, 473, 474, 476, 479, 480, 481, 482, 0, 485,
	486, 487, 488, 489, 490, 491, 493, 494, 495, 497,
	498, 499, 657, 500, 501, 502, 503, 1177, 505, 506,
	658, 508, 509, 511, 512, 513, 514, 515, 516, 667,
	1210, 518, 628, 519, 520, 521, 522, 523, 0, 525,
	526, 527, 528, 529, 530, 533, 534, 535, 537, 538,
	1220, 539, 540, 1211, 542, 543, 878, 545, 546, 547,
	548, 549, 0, 668, 550, 1221, 551, 1222, 552, 553,
	554, 555, 556, 557, 558, 560, 0, 1161, 562, 563,
	564, 566, 567, 568, 569, 572, 573, 574, 575, 576,
	0, 577, 579, 581, 659, 636, 1227, 1228, 1231, 1229,
	1230, 1232, 1233, 1243, 582, 583, 599, 450, 444, 400,
	442, 443, 447, 448, 451, 0, 0, 0, 1215, 0,
	0, 0, 1159, 0, 917, 0, 1180, 1034, 0, 1185,
	1186, 1175, 740, 1165, 0, 0, 0, 1166, 0, 0,
	1155, 1156, 276, 0, 293, 860, 0, 342, 379, 1170,
	0, 1158, 439, 0, 492, 496, 0, 585, 1190, 0,
	1162, 0, 350, 1183, 865, 0, 871, 1184, 877, 1182,
	561, 0, 867, 868, 873, 281, 1259, 584, 655, 0,
	0, 0, 1176, 0, 0, 0, 0, 0, 0, 0,
	289, 0, 0, 0, 0, 869, 866, 870, 876, 864,
	874, 861, 872, 0, 483, 417, 634, 510, 288, 334,
	321, 363, 405, 517, 0, 0, 395, 565, 330, 419,
	0, 309, 452, 1212, 541, 416, 0, 524, 544, 0,
	436, 315, 475, 531, 532, 858, 863, 0, 879, 0,
	319, 320, 441, 301, 449, 646, 612, 504, 462, 460,
	0, 427, 484, 641, 1171, 0, 349, 0, 344, 440,
	580, 307, 559, 478, 445, 399, 507, 536, 346, 331,
	332, 375, 477, 365, 317, 570, 1240, 1242, 1238, 1234,
	1235, 1200, 1201, 1241, 1237, 366, 1236, 0, 578, 1245,
	1256, 1253, 1258, 1244, 1257, 1251, 982, 625, 1248, 1247,
	1261, 1254, 1255, 571, 1260, 1199, 1252, 1250, 1249, 1246,
	0, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 277, 0, 278, 279, 280, 282, 283, 284, 857,
	285, 286, 287, 290, 291, 292, 294, 654, 295, 296,
	297, 298, 299, 300, 1224, 1202, 302, 303, 304, 305,
	306, 308, 310, 311, 312, 313, 314, 316, 318, 1213,
	1203, 1208, 1214, 1204, 1205, 1209, 322, 323, 324, 325,
	326, 327, 0, 328, 329, 333, 335, 336, 337, 338,
	339, 340, 343, 0, 345, 347, 0, 348, 351, 0,
	352, 353, 354, 355, 356, 357, 358, 359, 1216, 360,
	0, 361, 362, 364, 0, 367, 368, 369, 370, 371,
	0, 372, 1225, 1174, 373, 374, 376, 377, 378, 380,
	381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
	391, 0, 392, 393, 394, 396, 0, 397, 398, 401,
	402, 403, 404, 0, 406, 1226, 0, 407, 408, 409,
	1206, 1207, 410, 411, 412, 413, 414, 415, 418, 1239,
	420, 421, 422, 423, 424, 425, 426, 656, 428, 429,
	430, 431, 432, 433, 434, 618, 1217, 435, 437, 438,
	1223, 622, 1218, 875, 453, 454, 455, 456, 457, 458,
	459, 461, 0, 463, 464, 465, 1219, 466, 467, 468,
	469, 0, 470, 471, 472, 473, 474, 476, 479, 480,
	481, 482, 0, 485, 486, 487, 488, 489, 490, 491,
	493, 494, 495, 497, 498, 499, 657, 500, 501, 502,
	503, 1177, 505, 506, 658, 508, 509, 511, 512, 513,
	514, 515, 516, 667, 1210, 518, 628, 519, 520, 521,
	522, 523, 0, 525, 526, 527, 528, 529, 530, 533,
	534, 535, 537, 538, 1220, 539, 540, 1211, 542, 543,
	878, 545, 546, 547, 548, 549, 0, 668, 550, 1221,
	551, 1222, 552, 553, 554, 555, 556, 557, 558, 560,
	0, 1161, 562, 563, 564, 566, 567, 568, 569, 572,
	573, 574, 575, 576, 0, 577, 579, 581, 659, 636,
	1227, 1228, 1231, 1229, 1230, 1232, 1233, 1243, 582, 583,
	599, 450, 444, 400, 442, 443, 447, 448, 451, 0,
	0, 0, 1215, 0, 0, 0, 1159, 0, 917, 0,
	1180, 1034, 0, 1185, 1186, 1175, 740, 1165, 0, 0,
	0, 1166, 0, 0, 1713, 1714, 276, 0, 293, 860,
	0, 342, 379, 1170, 0, 0, 439, 0, 492, 496,
	0, 585, 1190, 0, 4890, 0, 350, 1183, 865, 0,
	871, 1184, 877, 1182, 561, 0, 867, 868, 873, 281,
	1259, 584, 655, 0, 0, 0, 1176, 0, 0, 0,
	0, 0, 0, 0, 289, 0, 0, 0, 0, 869,
	866, 870, 876, 864, 874, 861, 872, 0, 483, 417,
	634, 510, 288, 334, 321, 363, 405, 517, 0, 0,
	395, 565, 330, 419, 0, 309, 452, 1212, 541, 416,
	0, 524, 544, 0, 436, 315, 475, 531, 532, 858,
	863, 0, 879, 0, 319, 320, 441, 301, 449, 646,
	612, 504, 462, 460, 0, 427, 484, 641, 1171, 0,
	349, 0, 344, 440, 580, 307, 559, 478, 445, 399,
	507, 536, 346, 331, 332, 375, 477, 365, 317, 570,
	1240, 1242, 1238, 1234, 1235, 1200, 1201, 1241, 1237, 366,
	1236, 0, 578, 1245, 1256, 1253, 1258, 1244, 1257, 1251,
	982, 625, 1248, 1247, 1261, 1254, 1255, 571, 1260, 1199,
	1252, 1250, 1249, 1246, 0, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 277, 0, 278, 279, 280,
	282, 283, 284, 857, 285, 286, 287, 290, 291, 292,
	294, 654, 295, 296, 297, 298, 299, 300, 1224, 1202,
	302, 303, 304, 305, 306, 308, 310, 311, 312, 313,
	314, 316, 318, 1213, 1203, 1208, 1214, 1204, 1205, 1209,
	322, 323, 324, 325, 326, 327, 0, 328, 329, 333,
	335, 336, 337, 338, 339, 340, 343, 0, 345, 347,
	0, 348, 351, 0, 352, 353, 354, 355, 356, 357,
	358, 359, 1216, 360, 0, 361, 362, 364, 0, 367,
	368, 369, 370, 371, 0, 372, 1225, 1174, 373, 374,
	376, 377, 378, 380, 381, 382, 383, 384, 385, 386,
	387, 388, 389, 390, 391, 0, 392, 393, 394, 396,
	0, 397, 398, 401, 402, 403, 404, 0, 406, 1226,
	0, 407, 408, 409, 1206, 1207, 410, 411, 412, 413,
	414, 415, 418, 1239, 420, 421, 422, 423, 424, 425,
	426, 656, 428, 429, 430, 431, 432, 433, 434, 618,
	1217, 435, 437, 438, 1223, 622, 1218, 875, 453, 454,
	455, 456, 457, 458, 459, 461, 0, 463, 464, 465,
	1219, 466, 467, 468, 469, 0, 470, 471, 472, 473,
	474, 476, 479, 480, 481, 482, 0, 485, 486, 487,
	488, 489, 490, 491, 493, 494, 495, 497, 498, 499,
	657, 500, 501, 502, 503, 2992, 505, 506, 658, 508,
	509, 511, 512, 513, 514, 515, 516, 667, 1210, 518,
	628, 519, 520, 521, 522, 523, 0, 525, 526, 527,
	528, 529, 530, 533, 534, 535, 537, 538, 1220, 539,
	540, 1211, 542, 543, 878, 545, 546, 547, 548, 549,
	0, 668, 550, 1221, 551, 1222, 552, 553, 554, 555,
	556, 557, 558, 560, 0, 0, 562, 563, 564, 566,
	567, 568, 569, 572, 573, 574, 575, 576, 0, 577,
	579, 581, 659, 636, 1227, 1228, 1231, 1229, 1230, 1232,
	1233, 1243, 582, 583, 599, 450, 444, 400, 442, 443,
	447, 448, 451, 0, 0, 0, 1215, 0, 0, 0,
	0, 0, 917, 0, 1180, 1034, 0, 1185, 1186, 1175,
	740, 1165, 0, 0, 0, 2832, 0, 0, 2989, 2990,
	276, 0, 293, 860, 0, 342, 379, 1170, 0, 0,
	439, 0, 492, 496, 0, 585, 1190, 0, 0, 0,
	350, 1183, 865, 0, 871, 1184, 877, 1182, 561, 0,
	867, 868, 873, 281, 1259, 584, 655, 0, 0, 0,
	1176, 0, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 0, 869, 866, 870, 876, 864, 874, 861,
	872, 0, 483, 417, 634, 510, 288, 334, 321, 363,
	405, 517, 0, 0, 395, 565, 330, 419, 0, 309,
	452, 1212, 541, 416, 0, 524, 544, 0, 436, 315,
	475, 531, 532, 858, 863, 0, 879, 0, 319, 320,
	441, 301, 449, 646, 612, 504, 462, 460, 0, 427,
	484, 641, 1171, 0, 349, 0, 344, 440, 580, 307,
	559, 478, 445, 399, 507, 536, 346, 331, 332, 375,
	477, 365, 317, 570, 1240, 1242, 1238, 1234, 1235, 1200,
	1201, 1241, 1237, 366, 1236, 0, 578, 1245, 1256, 1253,
	1258, 1244, 1257, 1251, 982, 625, 1248, 1247, 1261, 1254,
	1255, 571, 1260, 1199, 1252, 1250, 1249, 1246, 0, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 277,
	0, 278, 279, 280, 282, 283, 284, 857, 285, 286,
	287, 290, 291, 292, 294, 654, 295, 296, 297, 298,
	299, 300, 1224, 1202, 302, 303, 304, 305, 306, 308,
	310, 311, 312, 313, 314, 316, 318, 1213, 1203, 1208,
	1214, 1204, 1205, 1209, 322, 323, 324, 325, 326, 327,
	0, 328, 329, 333, 335, 336, 337, 338, 339, 340,
	343, 0, 345, 347, 0, 348, 351, 0, 352, 353,
	354, 355, 356, 357, 358, 359, 1216, 360, 0, 361,
	362, 364, 0, 367, 368, 369, 370, 371, 0, 372,
	1225, 1174, 373, 374, 376, 377, 378, 380, 381, 382,
	383, 384, 385, 386, 387, 388, 389, 390, 391, 0,
	392, 393, 394, 396, 0, 397, 398, 401, 402, 403,
	404, 0, 406, 1226, 0, 407, 408, 409, 1206, 1207,
	410, 411, 412, 413, 414, 415, 418, 1239, 420, 421,
	422, 423, 424, 425, 426, 656, 428, 429, 430, 431,
	432, 433, 434, 618, 1217, 435, 437, 438, 1223, 622,
	1218, 875, 453, 454, 455, 456, 457, 458, 459, 461,
	0, 463, 464, 465, 1219, 466, 467, 468, 469, 0,
	470, 471, 472, 473, 474, 476, 479, 480, 481, 482,
	0, 485, 486, 487, 488, 489, 490, 491, 493, 494,
	495, 497, 498, 499, 657, 500, 501, 502, 503, 2992,
	505, 506, 658, 508, 509, 511, 512, 513, 514, 515,
	516, 667, 1210, 518, 628, 519, 520, 521, 522, 523,
	0, 525, 526, 527, 528, 529, 530, 533, 534, 535,
	537, 538, 1220, 539, 540, 1211, 542, 543, 878, 545,
	546, 547, 548, 549, 0, 668, 550, 1221, 551, 1222,
	552, 553, 554, 555, 556, 557, 558, 560, 0, 0,
	562, 563, 564, 566, 567, 568, 569, 572, 573, 574,
	575, 576, 0, 577, 579, 581, 659, 636, 1227, 1228,
	1231, 1229, 1230, 1232, 1233, 1243, 582, 583, 599, 450,
	444, 400, 442, 443, 447, 448, 451, 0, 0, 0,
	1215, 0, 0, 0, 0, 0, 917, 0, 1180, 1034,
	0, 1185, 1186, 0, 740, 1165, 0, 0, 0, 2832,
	0, 0, 2989, 2990, 276, 0, 293, 860, 0, 342,
	379, 1170, 0, 0, 439, 0, 492, 496, 0, 585,
	1190, 0, 0, 0, 350, 1183, 865, 0, 871, 1184,
	877, 1182, 561, 0, 867, 868, 873, 281, 1259, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 869, 866, 870,
	876, 864, 874, 861, 872, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 1212, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 858, 863, 0,
	879, 0, 319, 320, 441, 301, 449, 646, 612, 2831,
	462, 460, 0, 427, 484, 641, 1171, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 1240, 1242,
	1238, 1234, 1235, 1200, 1201, 1241, 1237, 366, 1236, 0,
	578, 1245, 1256, 1253, 1258, 1244, 1257, 1251, 982, 625,
	1248, 1247, 1261, 1254, 1255, 571, 1260, 1199, 1252, 1250,
	1249, 1246, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 857, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 1224, 1202, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 1213, 1203, 1208, 1214, 1204, 1205, 1209, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	1216, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 1225, 1174, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 1226, 0, 407,
	408, 409, 1206, 1207, 410, 411, 412, 413, 414, 415,
	418, 1239, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 1217, 435,
	437, 438, 1223, 622, 1218, 875, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 1219, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 2830, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 1210, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 1220, 539, 540, 1211,
	542, 543, 878, 545, 546, 547, 548, 549, 0, 668,
	550, 1221, 551, 1222, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 1227, 1228, 1231, 1229, 1230, 1232, 1233, 1243,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 0, 0, 0, 1215, 0, 0, 0, 0, 0,
	917, 0, 1180, 1034, 0, 1185, 1186, 1175, 740, 1165,
	0, 0, 0, 2832, 0, 0, 2828, 2829, 276, 0,
	293, 860, 0, 342, 379, 1170, 0, 1158, 439, 0,
	492, 496, 0, 0, 1190, 0, 1162, 0, 350, 1183,
	0, 0, 0, 1184, 0, 1182, 561, 0, 0, 0,
	0, 281, 1259, 584, 655, 0, 0, 0, 1176, 0,
	0, 0, 0, 0, 0, 0, 289, 0, 0, 0,
	0, 869, 866, 870, 876, 864, 874, 861, 872, 0,
	483, 417, 634, 510, 288, 334, 321, 363, 405, 517,
	0, 0, 395, 565, 330, 419, 0, 309, 452, 1212,
	541, 416, 0, 524, 544, 0, 436, 315, 475, 531,
	532, 858, 863, 0, 879, 0, 5269, 320, 441, 301,
	449, 646, 612, 504, 462, 460, 0, 427, 484, 641,
	1171, 0, 349, 0, 344, 440, 580, 307, 559, 478,
	445, 399, 507, 536, 346, 331, 332, 375, 477, 365,
	317, 570, 1240, 1242, 1238, 1234, 1235, 1200, 1201, 1241,
	1237, 366, 1236, 0, 578, 1245, 1256, 1253, 1258, 1244,
	1257, 1251, 982, 625, 1248, 1247, 1261, 1254, 1255, 571,
	1260, 1199, 1252, 1250, 1249, 1246, 0, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 277, 0, 278,
	279, 280, 282, 283, 284, 857, 285, 286, 287, 290,
	291, 292, 294, 654, 295, 296, 297, 298, 299, 300,
	1224, 1202, 302, 303, 304, 305, 306, 308, 310, 311,
	312, 313, 314, 316, 318, 1213, 1203, 1208, 1214, 1204,
	1205, 1209, 322, 323, 324, 325, 326, 327, 0, 328,
	329, 333, 335, 336, 337, 338, 339, 340, 343, 0,
	345, 347, 0, 348, 351, 0, 352, 353, 354, 355,
	356, 357, 358, 359, 1216, 360, 0, 361, 362, 364,
	0, 367, 368, 369, 370, 371, 0, 372, 1225, 1174,
	373, 374, 376, 377, 378, 380, 381, 382, 383, 384,
	385, 386, 387, 388, 389, 390, 391, 0, 392, 393,
	394, 396, 0, 397, 398, 401, 402, 403, 404, 0,
	406, 1226, 0, 407, 408, 409, 1206, 1207, 410, 411,
	412, 413, 414, 415, 418, 1239, 420, 421, 422, 423,
	424, 425, 426, 656, 428, 429, 430, 431, 432, 433,
	434, 618, 1217, 435, 437, 438, 1223, 622, 1218, 875,
	453, 454, 455, 456, 457, 458, 459, 461, 0, 463,
	464, 465, 1219, 466, 467, 468, 469, 0, 470, 471,
	472, 473, 474, 476, 479, 480, 481, 482, 0, 485,
	486, 487, 488, 489, 490, 491, 493, 494, 495, 497,
	498, 499, 657, 500, 501, 502, 503, 1177, 505, 506,
	658, 508, 509, 511, 512, 513, 514, 515, 516, 667,
	1210, 518, 628, 519, 520, 521, 522, 523, 0, 525,
	526, 527, 528, 529, 530, 533, 534, 535, 537, 538,
	1220, 539, 540, 1211, 542, 543, 878, 545, 546, 547,
	548, 549, 0, 668, 550, 1221, 551, 1222, 552, 553,
	554, 555, 556, 5268, 558, 560, 0, 1161, 562, 563,
	564, 566, 567, 568, 569, 572, 573, 574, 575, 576,
	0, 577, 579, 581, 659, 636, 1227, 1228, 1231, 1229,
	1230, 1232, 1233, 1243, 582, 583, 599, 450, 444, 400,
	442, 443, 447, 448, 451, 0, 0, 0, 1215, 0,
	0, 0, 0, 0, 917, 0, 1180, 1034, 0, 1185,
	1186, 0, 740, 1165, 0, 0, 0, 1166, 0, 0,
	1155, 1156, 276, 0, 293, 860, 0, 342, 379, 1170,
	0, 0, 439, 0, 492, 496, 0, 585, 1190, 0,
	0, 0, 350, 1183, 865, 0, 871, 1184, 877, 1182,
	561, 0, 867, 868, 873, 281, 1259, 584, 655, 0,
	0, 0, 446, 0, 0, 0, 0, 0, 0, 0,
	289, 0, 0, 0, 0, 869, 866, 870, 876, 864,
	874, 861, 872, 0, 483, 417, 634, 510, 288, 334,
	321, 363, 405, 517, 0, 0, 395, 565, 330, 419,
	0, 309, 452, 1212, 541, 416, 0, 524, 544, 0,
	436, 315, 475, 531, 532, 858, 863, 0, 879, 0,
	319, 320, 441, 301, 449, 646, 612, 504, 462, 460,
	0, 427, 484, 641, 1171, 0, 349, 0, 344, 440,
	580, 307, 559, 478, 445, 399, 507, 536, 346, 331,
	332, 375, 477, 365, 317, 570, 1240, 1242, 1238, 1234,
	1235, 1200, 1201, 1241, 1237, 366, 1236, 0, 578, 1245,
	1256, 1253, 1258, 1244, 1257, 1251, 982, 625, 1248, 1247,
	1261, 1254, 1255, 571, 1260, 1199, 1252, 1250, 1249, 1246,
	0, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 277, 0, 278, 279, 280, 282, 283, 284, 857,
	285, 286, 287, 290, 291, 292, 294, 654, 295, 296,
	297, 298, 299, 300, 1224, 1202, 302, 303, 304, 305,
	306, 308, 310, 311, 312, 313, 314, 316, 318, 1213,
	1203, 1208, 1214, 1204, 1205, 1209, 322, 323, 324, 325,
	326, 327, 0, 328, 329, 333, 335, 336, 337, 338,
	339, 340, 343, 0, 345, 347, 0, 348, 351, 0,
	352, 353, 354, 355, 356, 357, 358, 359, 1216, 360,
	0, 361, 362, 364, 0, 367, 368, 369, 370, 371,
	0, 372, 1225, 1174, 373, 374, 376, 377, 378, 380,
	381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
	391, 0, 392, 393, 394, 396, 0, 397, 398, 401,
	402, 403, 404, 0, 406, 1226, 0, 407, 408, 409,
	1206, 1207, 410, 411, 412, 413, 414, 415, 418, 1239,
	420, 421, 422, 423, 424, 425, 426, 656, 428, 429,
	430, 431, 432, 433, 434, 618, 1217, 435, 437, 438,
	1223, 622, 1218, 875, 453, 454, 455, 456, 457, 458,
	459, 461, 0, 463, 464, 465, 1219, 466, 467, 468,
	469, 0, 470, 471, 472, 473, 474, 476, 479, 480,
	481, 482, 0, 485, 486, 487, 488, 489, 490, 491,
	493, 494, 495, 497, 498, 499, 657, 500, 501, 502,
	503, 2992, 505, 506, 658, 508, 509, 511, 512, 513,
	514, 515, 516, 667, 1210, 518, 628, 519, 520, 521,
	522, 523, 0, 525, 526, 527, 528, 529, 530, 533,
	534, 535, 537, 538, 1220, 539, 540, 1211, 542, 543,
	878, 545, 546, 547, 548, 549, 0, 668, 550, 1221,
	551, 1222, 552, 553, 554, 555, 556, 557, 558, 560,
	0, 0, 562, 563, 564, 566, 567, 568, 569, 572,
	573, 574, 575, 576, 0, 577, 579, 581, 659, 636,
	1227, 1228, 1231, 1229, 1230, 1232, 1233, 1243, 582, 583,
	599, 450, 444, 400, 442, 443, 447, 448, 451, 0,
	0, 0, 1215, 0, 917, 0, 1180, 1034, 0, 1185,
	1186, 0, 740, 1165, 0, 0, 0, 0, 0, 0,
	0, 2832, 276, 0, 293, 860, 0, 342, 379, 1170,
	0, 0, 439, 0, 492, 496, 0, 585, 1190, 0,
	0, 0, 350, 1183, 865, 0, 871, 1184, 877, 1182,
	561, 0, 867, 868, 873, 281, 1259, 584, 655, 0,
	0, 0, 446, 0, 0, 0, 0, 0, 0, 0,
	289, 0, 0, 0, 0, 869, 866, 870, 876, 864,
	874, 861, 872, 0, 483, 417, 634, 510, 288, 334,
	321, 363, 405, 517, 0, 0, 395, 565, 330, 419,
	0, 309, 452, 1212, 541, 416, 0, 524, 544, 0,
	436, 315, 475, 531, 532, 858, 863, 0, 879, 0,
	319, 320, 441, 301, 449, 646, 612, 504, 462, 460,
	0, 427, 484, 4242, 1171, 0, 349, 0, 344, 440,
	580, 307, 559, 478, 445, 399, 507, 536, 346, 331,
	332, 375, 477, 365, 317, 570, 1240, 1242, 1238, 1234,
	1235, 1200, 1201, 1241, 1237, 366, 1236, 0, 578, 1245,
	1256, 1253, 1258, 1244, 1257, 1251, 982, 625, 1248, 1247,
	1261, 1254, 1255, 571, 1260, 1199, 1252, 1250, 1249, 1246,
	0, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 277, 0, 278, 279, 280, 282, 283, 284, 857,
	285, 286, 287, 290, 291, 292, 294, 654, 295, 296,
	297, 298, 299, 300, 1224, 1202, 302, 303, 304, 305,
	306, 308, 310, 311, 312, 313, 314, 316, 318, 1213,
	1203, 1208, 1214, 1204, 1205, 1209, 322, 323, 324, 325,
	326, 327, 0, 328, 329, 333, 335, 336, 337, 338,
	339, 340, 343, 0, 345, 347, 0, 348, 351, 0,
	352, 353, 354, 355, 356, 357, 358, 359, 1216, 360,
	0, 361, 362, 364, 0, 367, 368, 369, 370, 371,
	0, 372, 1225, 1174, 373, 374, 376, 377, 378, 380,
	381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
	391, 0, 392, 393, 394, 396, 0, 397, 398, 401,
	402, 403, 404, 0, 406, 1226, 0, 407, 408, 409,
	1206, 1207, 410, 411, 412, 413, 414, 415, 418, 1239,
	420, 421, 422, 423, 424, 425, 426, 656, 428, 429,
	430, 431, 432, 433, 434, 618, 1217, 435, 437, 438,
	1223, 622, 1218, 875, 453, 454, 455, 456, 457, 458,
	459, 461, 0, 463, 464, 465, 1219, 466, 467, 468,
	469, 0, 470, 471, 472, 473, 474, 476, 479, 480,
	481, 482, 0, 485, 486, 487, 488, 489, 490, 491,
	493, 494, 495, 497, 498, 499, 657, 500, 501, 502,
	503, 2992, 505, 506, 658, 508, 509, 511, 512, 513,
	514, 515, 516, 667, 1210, 518, 628, 519, 520, 521,
	522, 523, 0, 525, 526, 527, 528, 529, 530, 533,
	534, 535, 537, 538, 1220, 539, 540, 1211, 542, 543,
	878, 545, 546, 547, 548, 549, 0, 668, 550, 1221,
	551, 1222, 552, 553, 554, 555, 556, 557, 558, 560,
	0, 0, 562, 563, 564, 566, 567, 568, 569, 572,
	573, 574, 575, 576, 0, 577, 579, 581, 659, 636,
	1227, 1228, 1231, 1229, 1230, 1232, 1233, 1243, 582, 583,
	599, 450, 444, 400, 442, 443, 447, 448, 451, 0,
	0, 0, 1215, 0, 917, 0, 1180, 1034, 0, 1185,
	1186, 0, 740, 1165, 0, 0, 0, 0, 0, 0,
	0, 2832, 276, 0, 293, 860, 0, 342, 379, 1170,
	0, 0, 439, 0, 492, 496, 0, 585, 1190, 0,
	0, 0, 350, 1183, 865, 0, 871, 1184, 877, 1182,
	561, 0, 867, 868, 873, 281, 1259, 584, 655, 0,
	0, 0, 446, 0, 0, 0, 0, 0, 0, 0,
	4183, 0, 0, 0, 0, 869, 866, 870, 876, 864,
	874, 861, 872, 0, 483, 417, 634, 510, 288, 334,
	321, 363, 405, 517, 0, 0, 395, 565, 330, 419,
	0, 309, 452, 1212, 541, 416, 0, 524, 544, 0,
	436, 315, 475, 531, 532, 858, 863, 0, 879, 0,
	319, 320, 441, 301, 449, 646, 612, 504, 462, 460,
	0, 427, 484, 641, 1171, 0, 349, 0, 344, 440,
	580, 307, 559, 478, 445, 399, 507, 536, 346, 331,
	332, 375, 477, 365, 317, 570, 1240, 1242, 1238, 1234,
	1235, 1200, 1201, 1241, 1237, 366, 1236, 0, 578, 1245,
	1256, 1253, 1258, 1244, 1257, 1251, 982, 625, 1248, 1247,
	1261, 1254, 1255, 571, 1260, 1199, 1252, 1250, 1249, 1246,
	0, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 277, 0, 278, 279, 280, 282, 283, 284, 857,
	285, 286, 287, 290, 291, 292, 294, 654, 295, 296,
	297, 298, 299, 300, 1224, 1202, 302, 303, 304, 305,
	306, 308, 310, 311, 312, 313, 314, 316, 318, 1213,
	1203, 1208, 1214, 1204, 1205, 1209, 322, 323, 324, 325,
	326, 327, 0, 328, 329, 333, 335, 336, 337, 338,
	339, 340, 343, 0, 345, 347, 0, 348, 351, 0,
	352, 353, 354, 355, 356, 357, 358, 359, 1216, 360,
	0, 361, 362, 364, 0, 367, 368, 369, 370, 371,
	0, 372, 1225, 1174, 373, 374, 376, 377, 378, 380,
	381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
	391, 0, 392, 393, 394, 396, 0, 397, 398, 401,
	402, 403, 404, 0, 406, 1226, 0, 407, 408, 409,
	1206, 1207, 410, 411, 412, 413, 414, 415, 418, 1239,
	420, 421, 422, 423, 424, 425, 426, 656, 428, 429,
	430, 431, 432, 433, 434, 618, 1217, 435, 437, 438,
	1223, 622, 1218, 875, 453, 454, 455, 456, 457, 458,
	459, 461, 0, 463, 464, 465, 1219, 466, 467, 468,
	469, 0, 470, 471, 472, 473, 474, 476, 479, 480,
	481, 482, 0, 485, 486, 487, 488, 489, 490, 491,
	493, 494, 495, 497, 498, 499, 657, 500, 501, 502,
	503, 2992, 505, 506, 658, 508, 509, 511, 512, 513,
	514, 515, 516, 667, 1210, 518, 628, 519, 520, 521,
	522, 523, 0, 525, 526, 527, 528, 529, 530, 533,
	534, 535, 537, 538, 1220, 539, 540, 1211, 542, 543,
	878, 545, 546, 547, 548, 549, 0, 668, 550, 1221,
	551, 1222, 552, 553, 554, 555, 556, 557, 558, 560,
	0, 0, 562, 563, 564, 566, 567, 568, 569, 572,
	573, 574, 575, 576, 0, 577, 579, 581, 659, 636,
	1227, 1228, 1231, 1229, 1230, 1232, 1233, 1243, 582, 583,
	599, 450, 444, 400, 442, 443, 447, 448, 451, 917,
	0, 0, 1215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 276, 0, 293,
	860, 2832, 342, 379, 594, 0, 0, 439, 0, 492,
	496, 137, 585, 0, 0, 0, 0, 350, 0, 865,
	0, 871, 0, 877, 0, 561, 0, 867, 868, 873,
	281, 669, 584, 655, 0, 0, 0, 446, 134, 0,
	0, 768, 135, 0, 0, 289, 0, 0, 0, 0,
	869, 866, 870, 876, 864, 874, 861, 872, 0, 483,
	417, 1077, 510, 288, 334, 321, 363, 405, 517, 0,
	0, 395, 565, 330, 419, 0, 309, 452, 1212, 541,
	416, 0, 524, 544, 0, 436, 315, 475, 531, 532,
	858, 863, 0, 879, 0, 319, 320, 441, 301, 449,
	3080, 3081, 3079, 462, 460, 0, 427, 484, 641, 0,
	0, 349, 0, 344, 440, 580, 307, 559, 478, 445,
	399, 507, 536, 346, 331, 332, 375, 477, 365, 317,
	570, 1240, 1242, 1238, 1234, 1235, 1200, 1201, 1241, 1237,
	366, 3087, 0, 578, 587, 621, 601, 629, 586, 626,
	596, 341, 625, 590, 589, 635, 616, 617, 571, 631,
	602, 600, 593, 592, 588, 0, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 277, 0, 278, 279,
	280, 282, 283, 284, 857, 285, 286, 287, 290, 291,
	292, 294, 654, 295, 296, 297, 298, 299, 300, 1224,
	1202, 302, 303, 304, 305, 306, 308, 310, 311, 312,
	313, 314, 316, 318, 1213, 1203, 1208, 1214, 1204, 1205,
	1209, 322, 323, 324, 325, 326, 327, 0, 328, 329,
	333, 335, 336, 337, 338, 339, 340, 343, 0, 345,
	347, 0, 348, 351, 0, 352, 353, 354, 355, 356,
	357, 358, 359, 1216, 360, 0, 361, 362, 364, 0,
	367, 368, 369, 370, 371, 0, 372, 1225, 598, 373,
	374, 376, 377, 378, 380, 381, 382, 383, 384, 385,
	386, 387, 388, 389, 390, 391, 0, 392, 393, 394,
	396, 0, 397, 398, 401, 402, 403, 404, 3072, 406,
	1226, 0, 407, 408, 409, 1206, 1207, 410, 411, 412,
	413, 414, 415, 418, 1239, 420, 421, 422, 423, 424,
	425, 426, 656, 428, 429, 430, 431, 432, 433, 434,
	618, 1217, 435, 437, 438, 1223, 622, 1218, 875, 453,
	454, 455, 456, 457, 458, 459, 461, 0, 463, 464,
	465, 1219, 466, 467, 468, 469, 0, 470, 471, 472,
	473, 474, 476, 479, 480, 481, 482, 0, 485, 486,
	487, 488, 489, 490, 491, 493, 494, 495, 497, 498,
	499, 657, 500, 501, 502, 503, 627, 505, 506, 658,
	508, 509, 511, 512, 513, 514, 515, 516, 667, 1210,
	518, 628, 519, 520, 521, 522, 523, 0, 525, 526,
	527, 528, 529, 530, 533, 534, 535, 537, 538, 1220,
	539, 540, 1211, 542, 543, 878, 545, 546, 547, 548,
	549, 0, 668, 550, 1221, 551, 1222, 552, 553, 554,
	555, 556, 557, 558, 560, 0, 0, 562, 563, 564,
	566, 567, 568, 569, 572, 573, 574, 575, 576, 0,
	577, 579, 581, 659, 636, 1227, 1228, 1231, 1229, 1230,
	1232, 1233, 1243, 582, 583, 599, 450, 444, 400, 442,
	443, 447, 448, 451, 0, 0, 0, 1215, 0, 853,
	0, 1595, 1034, 138, 0, 0, 0, 740, 0, 0,
	0, 0, 0, 0, 0, 0, 3074, 276, 0, 293,
	860, 0, 342, 379, 594, 0, 0, 439, 0, 492,
	496, 0, 585, 0, 0, 5145, 0, 350, 1592, 865,
	0, 871, 0, 877, 1591, 561, 0, 867, 868, 873,
	281, 669, 584, 655, 0, 0, 0, 446, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 1593,
	869, 866, 870, 876, 864, 874, 861, 872, 0, 483,
	417, 634, 510, 288, 334, 321, 363, 405, 517, 0,
	0, 395, 565, 330, 419, 0, 309, 452, 0, 541,
	416, 0, 524, 544, 0, 436, 315, 475, 531, 532,
	858, 863, 0, 879, 0, 319, 320, 441, 301, 449,
	646, 612, 504, 462, 460, 0, 427, 484, 641, 0,
	0, 349, 0, 344, 440, 580, 307, 559, 478, 445,
	399, 507, 536, 346, 331, 332, 375, 477, 365, 317,
	570, 609, 613, 611, 607, 604, 608, 605, 606, 610,
	366, 603, 0, 578, 587, 621, 601, 629, 586, 626,
	596, 341, 625, 590, 589, 635, 616, 617, 571, 631,
	602, 600, 593, 592, 588, 0, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 277, 0, 278, 279,
	280, 282, 283, 284, 857, 285, 286, 287, 290, 291,
	292, 294, 654, 295, 296, 297, 298, 299, 300, 591,
	859, 302, 303, 304, 305, 306, 308, 310, 311, 312,
	313, 314, 316, 318, 0, 0, 0, 862, 0, 0,
	0, 322, 323, 324, 325, 326, 327, 0, 328, 329,
	333, 335, 336, 337, 338, 339, 340, 343, 0, 345,
	347, 0, 348, 351, 0, 352, 353, 354, 355, 356,
	357, 358, 359, 595, 360, 0, 361, 362, 364, 0,
	367, 368, 369, 370, 371, 0, 372, 597, 598, 373,
	374, 376, 377, 378, 380, 381, 382, 383, 384, 385,
	386, 387, 388, 389, 390, 391, 0, 392, 393, 394,
	396, 0, 397, 398, 401, 402, 403, 404, 0, 406,
	614, 0, 407, 408, 409, 0, 0, 410, 411, 412,
	413, 414, 415, 418, 615, 420, 421, 422, 423, 424,
	425, 426, 656, 428, 429, 430, 431, 432, 433, 434,
	618, 619, 435, 437, 438, 620, 622, 623, 875, 453,
	454, 455, 456, 457, 458, 459, 461, 0, 463, 464,
	465, 624, 466, 467, 468, 469, 0, 470, 471, 472,
	473, 474, 476, 479, 480, 481, 482, 0, 485, 486,
	487, 488, 489, 490, 491, 493, 494, 495, 497, 498,
	499, 657, 500, 501, 502, 503, 627, 505, 506, 658,
	508, 509, 511, 512, 513, 514, 515, 516, 667, 0,
	518, 628, 519, 520, 521, 522, 523, 0, 525, 526,
	527, 528, 529, 530, 533, 534, 535, 537, 538, 630,
	539, 540, 0, 542, 543, 878, 545, 546, 547, 548,
	549, 0, 668, 550, 632, 551, 633, 552, 553, 554,
	555, 556, 557, 558, 560, 0, 0, 562, 563, 564,
	566, 567, 568, 569, 572, 573, 574, 575, 576, 0,
	577, 579, 581, 659, 636, 637, 638, 639, 640, 642,
	643, 644, 645, 582, 583, 599, 450, 444, 400, 442,
	443, 447, 448, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 917, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5146, 0, 0, 1596,
	1597, 5144, 276, 0, 293, 860, 0, 342, 379, 594,
	0, 0, 439, 0, 492, 496, 0, 585, 0, 0,
	0, 0, 350, 0, 865, 0, 871, 0, 877, 0,
	561, 0, 867, 868, 873, 281, 669, 584, 655, 0,
	0, 0, 446, 0, 0, 0, 768, 0, 0, 0,
	289, 0, 0, 0, 0, 869, 866, 870, 876, 864,
	874, 861, 872, 0, 483, 417, 634, 510, 288, 334,
	321, 363, 405, 517, 0, 0, 395, 565, 330, 419,
	0, 309, 452, 1212, 541, 416, 0, 524, 544, 0,
	436, 315, 475, 531, 532, 858, 863, 0, 879, 0,
	319, 320, 441, 301, 449, 3080, 3081, 3079, 462, 460,
	0, 427, 484, 641, 0, 0, 349, 0, 344, 440,
	580, 307, 559, 478, 445, 399, 507, 536, 346, 331,
	332, 375, 477, 365, 317, 570, 1240, 1242, 1238, 1234,
	1235, 1200, 1201, 1241, 1237, 366, 3087, 0, 578, 587,
	621, 601, 629, 586, 626, 596, 341, 625, 590, 589,
	635, 616, 617, 571, 631, 602, 600, 593, 592, 588,
	0, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 277, 0, 278, 279, 280, 282, 283, 284, 857,
	285, 286, 287, 290, 291, 292, 294, 654, 295, 296,
	297, 298, 299, 300, 1224, 1202, 302, 303, 304, 305,
	306, 308, 310, 311, 312, 313, 314, 316, 318, 1213,
	1203, 1208, 1214, 1204, 1205, 1209, 322, 323, 324, 325,
	326, 327, 0, 328, 329, 333, 335, 336, 337, 338,
	339, 340, 343, 0, 345, 347, 0, 348, 351, 0,
	352, 353, 354, 355, 356, 357, 358, 359, 1216, 360,
	0, 361, 362, 364, 0, 367, 368, 369, 370, 371,
	0, 372, 1225, 598, 373, 374, 376, 377, 378, 380,
	381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
	391, 0, 392, 393, 394, 396, 0, 397, 398, 401,
	402, 403, 404, 3072, 406, 1226, 0, 407, 408, 409,
	1206, 1207, 410, 411, 412, 413, 414, 415, 418, 1239,
	420, 421, 422, 423, 424, 425, 426, 656, 428, 429,
	430, 431, 432, 433, 434, 618, 1217, 435, 437, 438,
	1223, 622, 1218, 875, 453, 454, 455, 456, 457, 458,
	459, 461, 0, 463, 464, 465, 1219, 466, 467, 468,
	469, 0, 470, 471, 472, 473, 474, 476, 479, 480,
	481, 482, 0, 485, 486, 487, 488, 489, 490, 491,
	493, 494, 495, 497, 498, 499, 657, 500, 501, 502,
	503, 627, 505, 506, 658, 508, 509, 511, 512, 513,
	514, 515, 516, 667, 1210, 518, 628, 519, 520, 521,
	522, 523, 0, 525, 526, 527, 528, 529, 530, 533,
	534, 535, 537, 538, 1220, 539, 540, 1211, 542, 543,
	878, 545, 546, 547, 548, 549, 0, 668, 550, 1221,
	551, 1222, 552, 553, 554, 555, 556, 557, 558, 560,
	0, 0, 562, 563, 564, 566, 567, 568, 569, 572,
	573, 574, 575, 576, 0, 577, 579, 581, 659, 636,
	1227, 1228, 1231, 1229, 1230, 1232, 1233, 1243, 582, 583,
	599, 450, 444, 400, 442, 443, 447, 448, 451, 917,
	0, 0, 1215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 276, 0, 293,
	860, 3074, 342, 379, 594, 0, 0, 439, 0, 492,
	496, 0, 585, 0, 0, 0, 0, 350, 0, 865,
	0, 871, 0, 877, 0, 561, 0, 867, 868, 873,
	281, 669, 584, 655, 0, 0, 0, 446, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 0,
	869, 866, 870, 876, 864, 874, 861, 872, 0, 483,
	417, 634, 510, 288, 334, 321, 363, 405, 517, 0,
	0, 395, 565, 330, 419, 0, 309, 452, 1212, 541,
	416, 0, 524, 544, 0, 436, 315, 475, 531, 532,
	858, 863, 0, 879, 0, 319, 320, 441, 301, 449,
	646, 612, 504, 462, 460, 0, 427, 484, 641, 0,
	0, 349, 0, 344, 440, 580, 307, 559, 478, 445,
	399, 507, 536, 346, 331, 332, 375, 477, 365, 317,
	570, 1240, 1242, 1238, 1234, 1235, 1200, 1201, 1241, 1237,
	366, 3087, 0, 578, 587, 621, 601, 629, 586, 626,
	596, 341, 625, 590, 589, 635, 616, 617, 571, 631,
	602, 600, 593, 592, 588, 0, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 277, 0, 278, 279,
	280, 282, 283, 284, 857, 285, 286, 287, 290, 291,
	292, 294, 654, 295, 296, 297, 298, 299, 300, 1224,
	1202, 302, 303, 304, 305, 306, 308, 310, 311, 312,
	313, 314, 316, 318, 1213, 1203, 1208, 1214, 1204, 1205,
	1209, 322, 323, 324, 325, 326, 327, 0, 328, 329,
	333, 335, 336, 337, 338, 339, 340, 343, 0, 345,
	347, 0, 348, 351, 0, 352, 353, 354, 355, 356,
	357, 358, 359, 1216, 360, 0, 361, 362, 364, 0,
	367, 368, 369, 370, 371, 0, 372, 1225, 598, 373,
	374, 376, 377, 378, 380, 381, 382, 383, 384, 385,
	386, 387, 388, 389, 390, 391, 0, 392, 393, 394,
	396, 0, 397, 398, 401, 402, 403, 404, 0, 406,
	1226, 0, 407, 408, 409, 1206, 1207, 410, 411, 412,
	413, 414, 415, 418, 1239, 420, 421, 422, 423, 424,
	425, 426, 656, 428, 429, 430, 431, 432, 433, 434,
	618, 1217, 435, 437, 438, 1223, 622, 1218, 875, 453,
	454, 455, 456, 457, 458, 459, 461, 0, 463, 464,
	465, 1219, 466, 467, 468, 469, 0, 470, 471, 472,
	473, 474, 476, 479, 480, 481, 482, 0, 485, 486,
	487, 488, 489, 490, 491, 493, 494, 495, 497, 498,
	499, 657, 500, 501, 502, 503, 627, 505, 506, 658,
	508, 509, 511, 512, 513, 514, 515, 516, 667, 1210,
	518, 628, 519, 520, 521, 522, 523, 0, 525, 526,
	527, 528, 529, 530, 533, 534, 535, 537, 538, 1220,
	539, 540, 1211, 542, 543, 878, 545, 546, 547, 548,
	549, 0, 668, 550, 1221, 551, 1222, 552, 553, 554,
	555, 556, 557, 558, 560, 0, 0, 562, 563, 564,
	566, 567, 568, 569, 572, 573, 574, 575, 576, 0,
	577, 579, 581, 659, 636, 1227, 1228, 1231, 1229, 1230,
	1232, 1233, 1243, 582, 583, 599, 450, 444, 400, 442,
	443, 447, 448, 451, 917, 0, 0, 1215, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 276, 0, 293, 860, 4399, 342, 379, 594,
	0, 0, 439, 0, 492, 496, 0, 585, 0, 0,
	0, 0, 350, 0, 865, 0, 871, 0, 877, 0,
	561, 0, 867, 868, 873, 281, 669, 584, 655, 0,
	0, 0, 446, 0, 0, 0, 0, 0, 0, 0,
	289, 0, 0, 0, 0, 869, 866, 870, 876, 864,
	874, 861, 872, 0, 483, 417, 634, 510, 288, 334,
	321, 363, 405, 517, 0, 0, 395, 565, 330, 419,
	0, 309, 452, 1212, 541, 416, 0, 524, 544, 0,
	436, 315, 475, 531, 532, 858, 863, 0, 879, 0,
	319, 320, 441, 301, 449, 646, 612, 504, 462, 460,
	0, 427, 484, 641, 0, 0, 349, 0, 344, 440,
	580, 307, 559, 478, 445, 399, 507, 536, 346, 331,
	332, 375, 477, 365, 317, 570, 1240, 1242, 1238, 1234,
	1235, 1200, 1201, 1241, 1237, 366, 3087, 0, 578, 587,
	621, 601, 629, 586, 626, 596, 341, 625, 590, 589,
	635, 616, 617, 571, 631, 602, 600, 593, 592, 588,
	0, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 277, 0, 278, 279, 280, 282, 283, 284, 857,
	285, 286, 287, 290, 291, 292, 294, 654, 295, 296,
	297, 298, 299, 300, 1224, 1202, 302, 303, 304, 305,
	306, 308, 310, 311, 312, 313, 314, 316, 318, 1213,
	1203, 1208, 1214, 1204, 1205, 1209, 322, 323, 324, 325,
	326, 327, 0, 328, 329, 333, 335, 336, 337, 338,
	339, 340, 343, 0, 345, 347, 0, 348, 351, 0,
	352, 353, 354, 355, 356, 357, 358, 359, 1216, 360,
	0, 361, 362, 364, 0, 367, 368, 369, 370, 371,
	0, 372, 1225, 598, 373, 374, 376, 377, 378, 380,
	381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
	391, 0, 392, 393, 394, 396, 0, 397, 398, 401,
	402, 403, 404, 0, 406, 1226, 0, 407, 408, 409,
	1206, 1207, 410, 411, 412, 413, 414, 415, 418, 1239,
	420, 421, 422, 423, 424, 425, 426, 656, 428, 429,
	430, 431, 432, 433, 434, 618, 1217, 435, 437, 438,
	1223, 622, 1218, 875, 453, 454, 455, 456, 457, 458,
	459, 461, 0, 463, 464, 465, 1219, 466, 467, 468,
	469, 0, 470, 471, 472, 473, 474, 476, 479, 480,
	481, 482, 0, 485, 486, 487, 488, 489, 490, 491,
	493, 494, 495, 497, 498, 499, 657, 500, 501, 502,
	503, 627, 505, 506, 658, 508, 509, 511, 512, 513,
	514, 515, 516, 667, 1210, 518, 628, 519, 520, 521,
	522, 523, 0, 525, 526, 527, 528, 529, 530, 533,
	534, 535, 537, 538, 1220, 539, 540, 1211, 542, 543,
	878, 545, 546, 547, 548, 549, 0, 668, 550, 1221,
	551, 1222, 552, 553, 554, 555, 556, 557, 558, 560,
	0, 0, 562, 563, 564, 566, 567, 568, 569, 572,
	573, 574, 575, 576, 0, 577, 579, 581, 659, 636,
	1227, 1228, 1231, 1229, 1230, 1232, 1233, 1243, 582, 583,
	599, 450, 444, 400, 442, 443, 447, 448, 451, 917,
	0, 0, 1215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 276, 0, 293,
	860, 5335, 342, 379, 594, 0, 0, 439, 0, 492,
	496, 0, 585, 0, 0, 0, 0, 350, 0, 865,
	0, 871, 0, 877, 0, 561, 0, 867, 868, 873,
	281, 669, 584, 655, 0, 0, 0, 446, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 0,
	869, 866, 870, 876, 864, 874, 861, 872, 0, 483,
	417, 634, 510, 288, 334, 321, 363, 405, 517, 0,
	0, 395, 565, 330, 419, 0, 309, 452, 1212, 541,
	416, 0, 524, 544, 0, 436, 315, 475, 531, 532,
	858, 863, 0, 879, 0, 319, 320, 441, 301, 449,
	646, 612, 504, 462, 460, 0, 427, 484, 641, 0,
	0, 349, 0, 344, 440, 580, 307, 559, 478, 445,
	399, 507, 536, 346, 331, 332, 375, 477, 365, 317,
	570, 1240, 1242, 1238, 1234, 1235, 1200, 1201, 1241, 1237,
	366, 3087, 0, 578, 587, 621, 601, 629, 586, 626,
	596, 341, 625, 590, 589, 635, 616, 617, 571, 631,
	602, 600, 593, 592, 588, 0, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 277, 0, 278, 279,
	280, 282, 283, 284, 857, 285, 286, 287, 290, 291,
	292, 294, 654, 295, 296, 297, 298, 299, 300, 1224,
	1202, 302, 303, 304, 305, 306, 308, 310, 311, 312,
	313, 314, 316, 318, 1213, 1203, 1208, 1214, 1204, 1205,
	1209, 322, 323, 324, 325, 326, 327, 0, 328, 329,
	333, 335, 336, 337, 338, 339, 340, 343, 0, 345,
	347, 0, 348, 351, 0, 352, 353, 354, 355, 356,
	357, 358, 359, 1216, 360, 0, 361, 362, 364, 0,
	367, 368, 369, 370, 371, 0, 372, 1225, 598, 373,
	374, 376, 377, 378, 380, 381, 382, 383, 384, 385,
	386, 387, 388, 389, 390, 391, 0, 392, 393, 394,
	396, 0, 397, 398, 401, 402, 403, 404, 0, 406,
	1226, 0, 407, 408, 409, 1206, 1207, 410, 411, 412,
	413, 414, 415, 418, 1239, 420, 421, 422, 423, 424,
	425, 426, 656, 428, 429, 430, 431, 432, 433, 434,
	618, 1217, 435, 437, 438, 1223, 622, 1218, 875, 453,
	454, 455, 456, 457, 458, 459, 461, 0, 463, 464,
	465, 1219, 466, 467, 468, 469, 0, 470, 471, 472,
	473, 474, 476, 479, 480, 481, 482, 0, 485, 486,
	487, 488, 489, 490, 491, 493, 494, 495, 497, 498,
	499, 657, 500, 501, 502, 503, 627, 505, 506, 658,
	508, 509, 511, 512, 513, 514, 515, 516, 667, 1210,
	518, 628, 519, 520, 521, 522, 523, 0, 525, 526,
	527, 528, 529, 530, 533, 534, 535, 537, 538, 1220,
	539, 540, 1211, 542, 543, 878, 545, 546, 547, 548,
	549, 0, 668, 550, 1221, 551, 1222, 552, 553, 554,
	555, 556, 557, 558, 560, 0, 0, 562, 563, 564,
	566, 567, 568, 569, 572, 573, 574, 575, 576, 0,
	577, 579, 581, 659, 636, 1227, 1228, 1231, 1229, 1230,
	1232, 1233, 1243, 582, 583, 599, 450, 444, 400, 442,
	443, 447, 448, 451, 917, 0, 0, 1215, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 276, 0, 293, 860, 3217, 342, 379, 594,
	0, 0, 439, 0, 492, 496, 0, 585, 0, 0,
	0, 0, 350, 0, 865, 0, 871, 0, 877, 0,
	561, 0, 867, 868, 873, 281, 669, 584, 655, 0,
	0, 0, 446, 0, 0, 0, 0, 0, 0, 0,
	289, 0, 0, 0, 0, 869, 866, 870, 876, 864,
	874, 861, 872, 0, 483, 417, 634, 510, 288, 334,
	321, 363, 405, 517, 0, 0, 395, 565, 330, 419,
	0, 309, 452, 1212, 541, 416, 0, 524, 544, 0,
	436, 315, 475, 531, 532, 858, 863, 0, 879, 0,
	319, 320, 441, 301, 449, 3080, 3081, 3079, 462, 460,
	0, 427, 484, 641, 0, 0, 349, 0, 344, 440,
	580, 307, 559, 478, 445, 399, 507, 536, 346, 331,
	332, 375, 477, 365, 317, 570, 1240, 1242, 1238, 1234,
	1235, 1200, 1201, 1241, 1237, 366, 3087, 0, 578, 587,
	621, 601, 629, 586, 626, 596, 341, 625, 590, 589,
	635, 616, 617, 571, 631, 602, 600, 593, 592, 588,
	0, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 277, 0, 278, 279, 280, 282, 283, 284, 857,
	285, 286, 287, 290, 291, 292, 294, 654, 295, 296,
	297, 298, 299, 300, 1224, 1202, 302, 303, 304, 305,
	306, 308, 310, 311, 312, 313, 314, 316, 318, 1213,
	1203, 1208, 1214, 1204, 1205, 1209, 322, 323, 324, 325,
	326, 327, 0, 328, 329, 333, 335, 336, 337, 338,
	339, 340, 343, 0, 345, 347, 0, 348, 351, 0,
	352, 353, 354, 355, 356, 357, 358, 359, 1216, 360,
	0, 361, 362, 364, 0, 367, 368, 369, 370, 371,
	0, 372, 1225, 598, 373, 374, 376, 377, 378, 380,
	381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
	391, 0, 392, 393, 394, 396, 0, 397, 398, 401,
	402, 403, 404, 0, 406, 1226, 0, 407, 408, 409,
	1206, 1207, 410, 411, 412, 413, 414, 415, 418, 1239,
	420, 421, 422, 423, 424, 425, 426, 656, 428, 429,
	430, 431, 432, 433, 434, 618, 1217, 435, 437, 438,
	1223, 622, 1218, 875, 453, 454, 455, 456, 457, 458,
	459, 461, 0, 463, 464, 465, 1219, 466, 467, 468,
	469, 0, 470, 471, 472, 473, 474, 476, 479, 480,
	481, 482, 0, 485, 486, 487, 488, 489, 490, 491,
	493, 494, 495, 497, 498, 499, 657, 500, 501, 502,
	503, 627, 505, 506, 658, 508, 509, 511, 512, 513,
	514, 515, 516, 667, 1210, 518, 628, 519, 520, 521,
	522, 523, 0, 525, 526, 527, 528, 529, 530, 533,
	534, 535, 537, 538, 1220, 539, 540, 1211, 542, 543,
	878, 545, 546, 547, 548, 549, 0, 668, 550, 1221,
	551, 1222, 552, 553, 554, 555, 556, 557, 558, 560,
	0, 0, 562, 563, 564, 566, 567, 568, 569, 572,
	573, 574, 575, 576, 0, 577, 579, 581, 659, 636,
	1227, 1228, 1231, 1229, 1230, 1232, 1233, 1243, 582, 583,
	599, 450, 444, 400, 442, 443, 447, 448, 451, 0,
	0, 0, 1215, 0, 853, 0, 1595, 1034, 0, 0,
	0, 0, 740, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 276, 0, 293, 860, 0, 342, 379, 594,
	0, 0, 439, 0, 492, 496, 0, 585, 0, 0,
	1600, 0, 350, 1592, 865, 0, 871, 0, 877, 1591,
	561, 0, 867, 868, 873, 281, 669, 584, 655, 0,
	0, 0, 446, 0, 0, 0, 0, 0, 0, 0,
	289, 0, 0, 0, 1593, 869, 866, 870, 876, 864,
	874, 861, 872, 0, 483, 417, 634, 510, 288, 334,
	321, 363, 405, 517, 0, 0, 395, 565, 330, 419,
	0, 309, 452, 0, 541, 416, 0, 524, 544, 0,
	436, 315, 475, 531, 532, 858, 863, 0, 879, 0,
	319, 320, 441, 301, 449, 646, 612, 504, 462, 460,
	0, 427, 484, 641, 0, 0, 349, 0, 344, 440,
	580, 307, 559, 478, 445, 399, 507, 536, 346, 331,
	332, 375, 477, 365, 317, 570, 609, 613, 611, 607,
	604, 608, 605, 606, 610, 366, 603, 0, 578, 587,
	621, 601, 629, 586, 626, 596, 341, 625, 590, 589,
	635, 616, 617, 571, 631, 602, 600, 593, 592, 588,
	0, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 277, 0, 278, 279, 280, 282, 283, 284, 857,
	285, 286, 287, 290, 291, 292, 294, 654, 295, 296,
	297, 298, 299, 300, 591, 859, 302, 303, 304, 305,
	306, 308, 310, 311, 312, 313, 314, 316, 318, 0,
	0, 0, 862, 0, 0, 0, 322, 323, 324, 325,
	326, 327, 0, 328, 329, 333, 335, 336, 337, 338,
	339, 340, 343, 0, 345, 347, 0, 348, 351, 0,
	352, 353, 354, 355, 356, 357, 358, 359, 595, 360,
	0, 361, 362, 364, 0, 367, 368, 369, 370, 371,
	0, 372, 597, 598, 373, 374, 376, 377, 378, 380,
	381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
	391, 0, 392, 393, 394, 396, 0, 397, 398, 401,
	402, 403, 404, 0, 406, 614, 0, 407, 408, 409,
	0, 0, 410, 411, 412, 413, 414, 415, 418, 615,
	420, 421, 422, 423, 424, 425, 426, 656, 428, 429,
	430, 431, 432, 433, 434, 618, 619, 435, 437, 438,
	620, 622, 623, 875, 453, 454, 455, 456, 457, 458,
	459, 461, 0, 463, 464, 465, 624, 466, 467, 468,
	469, 0, 470, 471, 472, 473, 474, 476, 479, 480,
	481, 482, 0, 485, 486, 487, 488, 489, 490, 491,
	493, 494, 495, 497, 498, 499, 657, 500, 501, 502,
	503, 627, 505, 506, 658, 508, 509, 511, 512, 513,
	514, 515, 516, 667, 0, 518, 628, 519, 520, 521,
	522, 523, 0, 525, 526, 527, 528, 529, 530, 533,
	534, 535, 537, 538, 630, 539, 540, 0, 542, 543,
	878, 545, 546, 547, 548, 549, 0, 668, 550, 632,
	551, 633, 552, 553, 554, 555, 556, 557, 558, 560,
	0, 0, 562, 563, 564, 566, 567, 568, 569, 572,
	573, 574, 575, 576, 0, 577, 579, 581, 659, 636,
	637, 638, 639, 640, 642, 643, 644, 645, 582, 583,
	599, 450, 444, 400, 442, 443, 447, 448, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 853, 0,
	1595, 1034, 0, 0, 0, 0, 740, 0, 0, 0,
	0, 0, 0, 0, 1596, 1597, 276, 0, 293, 860,
	0, 342, 379, 594, 0, 0, 439, 0, 492, 496,
	0, 585, 0, 0, 1587, 0, 350, 1592, 865, 0,
	871, 0, 877, 1591, 561, 0, 867, 868, 873, 281,
	669, 584, 655, 0, 0, 0, 446, 0, 0, 0,
	0, 0, 0, 0, 289, 0, 0, 0, 1593, 869,
	866, 870, 876, 864, 874, 861, 872, 0, 483, 417,
	634, 510, 288, 334, 321, 363, 405, 517, 0, 0,
	395, 565, 330, 419, 0, 309, 452, 0, 541, 416,
	0, 524, 544, 0, 436, 315, 475, 531, 532, 858,
	863, 0, 879, 0, 319, 320, 441, 301, 449, 646,
	612, 504, 462, 460, 0, 427, 484, 641, 0, 0,
	349, 0, 344, 440, 580, 307, 559, 478, 445, 399,
	507, 536, 346, 331, 332, 375, 477, 365, 317, 570,
	609, 613, 611, 607, 604, 608, 605, 606, 610, 366,
	603, 0, 578, 587, 621, 601, 629, 586, 626, 596,
	341, 625, 590, 589, 635, 616, 617, 571, 631, 602,
	600, 593, 592, 588, 0, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 277, 0, 278, 279, 280,
	282, 283, 284, 857, 285, 286, 287, 290, 291, 292,
	294, 654, 295, 296, 297, 298, 299, 300, 591, 859,
	302, 303, 304, 305, 306, 308, 310, 311, 312, 313,
	314, 316, 318, 0, 0, 0, 862, 0, 0, 0,
	322, 323, 324, 325, 326, 327, 0, 328, 329, 333,
	335, 336, 337, 338, 339, 340, 343, 0, 345, 347,
	0, 348, 351, 0, 352, 353, 354, 355, 356, 357,
	358, 359, 595, 360, 0, 361, 362, 364, 0, 367,
	368, 369, 370, 371, 0, 372, 597, 598, 373, 374,
	376, 377, 378, 380, 381, 382, 383, 384, 385, 386,
	387, 388, 389, 390, 391, 0, 392, 393, 394, 396,
	0, 397, 398, 401, 402, 403, 404, 0, 406, 614,
	0, 407, 408, 409, 0, 0, 410, 411, 412, 413,
	414, 415, 418, 615, 420, 421, 422, 423, 424, 425,
	426, 656, 428, 429, 430, 431, 432, 433, 434, 618,
	619, 435, 437, 438, 620, 622, 623, 875, 453, 454,
	455, 456, 457, 458, 459, 461, 0, 463, 464, 465,
	624, 466, 467, 468, 469, 0, 470, 471, 472, 473,
	474, 476, 479, 480, 481, 482, 0, 485, 486, 487,
	488, 489, 490, 491, 493, 494, 495, 497, 498, 499,
	657, 500, 501, 502, 503, 627, 505, 506, 658, 508,
	509, 511, 512, 513, 514, 515, 516, 667, 0, 518,
	628, 519, 520, 521, 522, 523, 0, 525, 526, 527,
	528, 529, 530, 533, 534, 535, 537, 538, 630, 539,
	540, 0, 542, 543, 878, 545, 546, 547, 548, 549,
	0, 668, 550, 632, 551, 633, 552, 553, 554, 555,
	556, 557, 558, 560, 0, 0, 562, 563, 564, 566,
	567, 568, 569, 572, 573, 574, 575, 576, 0, 577,
	579, 581, 659, 636, 637, 638, 639, 640, 642, 643,
	644, 645, 582, 583, 599, 450, 444, 400, 442, 443,
	447, 448, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 853, 0, 1595, 1034, 0, 0, 0, 0,
	740, 0, 0, 0, 0, 0, 0, 0, 1596, 1597,
	276, 0, 293, 860, 0, 342, 379, 594, 0, 0,
	439, 0, 492, 496, 0, 585, 0, 0, 0, 0,
	350, 1592, 865, 0, 871, 0, 877, 1591, 561, 0,
	867, 868, 873, 281, 669, 584, 655, 0, 0, 0,
	446, 0, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 1593, 869, 866, 870, 876, 864, 874, 861,
	872, 0, 483, 417, 634, 510, 288, 334, 321, 363,
	405, 517, 0, 0, 395, 565, 330, 419, 0, 309,
	452, 0, 541, 416, 0, 524, 544, 0, 436, 315,
	475, 531, 532, 858, 863, 0, 879, 0, 319, 320,
	441, 301, 449, 646, 612, 504, 462, 460, 0, 427,
	484, 641, 0, 0, 349, 0, 344, 440, 580, 307,
	559, 478, 445, 399, 507, 536, 346, 331, 332, 375,
	477, 365, 317, 570, 609, 613, 611, 607, 604, 608,
	605, 606, 610, 366, 603, 0, 578, 587, 621, 601,
	629, 586, 626, 596, 341, 625, 590, 589, 635, 616,
	617, 571, 631, 602, 600, 593, 592, 588, 0, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 277,
	0, 278, 279, 280, 282, 283, 284, 857, 285, 286,
	287, 290, 291, 292, 294, 654, 295, 296, 297, 298,
	299, 300, 591, 859, 302, 303, 304, 305, 306, 308,
	310, 311, 312, 313, 314, 316, 318, 0, 0, 0,
	862, 0, 0, 0, 322, 323, 324, 325, 326, 327,
	0, 328, 329, 333, 335, 336, 337, 338, 339, 340,
	343, 0, 345, 347, 0, 348, 351, 0, 352, 353,
	354, 355, 356, 357, 358, 359, 595, 360, 0, 361,
	362, 364, 0, 367, 368, 369, 370, 371, 0, 372,
	597, 598, 373, 374, 376, 377, 378, 380, 381, 382,
	383, 384, 385, 386, 387, 388, 389, 390, 391, 0,
	392, 393, 394, 396, 0, 397, 398, 401, 402, 403,
	404, 0, 406, 614, 0, 407, 408, 409, 0, 0,
	410, 411, 412, 413, 414, 415, 418, 615, 420, 421,
	422, 423, 424, 425, 426, 656, 428, 429, 430, 431,
	432, 433, 434, 618, 619, 435, 437, 438, 620, 622,
	623, 875, 453, 454, 455, 456, 457, 458, 459, 461,
	0, 463, 464, 465, 624, 466, 467, 468, 469, 0,
	470, 471, 472, 473, 474, 476, 479, 480, 481, 482,
	0, 485, 486, 487, 488, 489, 490, 491, 493, 494,
	495, 497, 498, 499, 657, 500, 501, 502, 503, 627,
	505, 506, 658, 508, 509, 511, 512, 513, 514, 515,
	516, 667, 0, 518, 628, 519, 520, 521, 522, 523,
	0, 525, 526, 527, 528, 529, 530, 533, 534, 535,
	537, 538, 630, 539, 540, 0, 542, 543, 878, 545,
	546, 547, 548, 549, 0, 668, 550, 632, 551, 633,
	552, 553, 554, 555, 556, 557, 558, 560, 0, 0,
	562, 563, 564, 566, 567, 568, 569, 572, 573, 574,
	575, 576, 0, 577, 579, 581, 659, 636, 637, 638,
	639, 640, 642, 643, 644, 645, 582, 583, 599, 450,
	444, 400, 442, 443, 447, 448, 451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 853, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1596, 1597, 276, 0, 293, 860, 0, 342,
	379, 594, 0, 0, 439, 0, 492, 496, 137, 585,
	0, 0, 0, 0, 350, 0, 865, 0, 871, 0,
	877, 0, 561, 0, 867, 868, 873, 281, 669, 584,
	655, 0, 0, 0, 446, 134, 0, 0, 0, 135,
	0, 0, 289, 0, 0, 0, 0, 869, 866, 870,
	876, 864, 874, 861, 872, 0, 483, 417, 1077, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 858, 863, 0,
	879, 132, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 133, 278, 279, 280, 282, 283,
	284, 857, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 859, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 862, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 875, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 878, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 917, 0, 0, 0, 0, 0, 1080, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 860, 131, 342, 379, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 865, 0, 871, 0, 877, 0, 561, 0, 867,
	868, 873, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 869, 866, 870, 876, 864, 874, 861, 872,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 858, 863, 0, 879, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 857, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 859, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 862,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	875, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 878, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 0, 0,
	833, 834, 835, 0, 276, 0, 293, 0, 5047, 342,
	379, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 830, 831, 832,
	0, 0, 0, 0, 0, 263, 824, 825, 826, 827,
	828, 829, 822, 0, 0, 0, 0, 0, 0, 833,
	834, 835, 0, 276, 0, 293, 0, 0, 342, 379,
	594, 0, 0, 439, 0, 492, 496, 0, 585, 0,
	0, 0, 0, 350, 0, 0, 0, 0, 0, 0,
	0, 561, 0, 0, 0, 0, 281, 669, 584, 655,
	0, 0, 0, 5020, 0, 0, 0, 0, 0, 0,
	0, 289, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 483, 417, 634, 510, 288,
	334, 321, 363, 405, 517, 0, 0, 395, 565, 330,
	419, 0, 309, 452, 0, 541, 416, 0, 524, 544,
	0, 436, 315, 475, 531, 532, 0, 0, 0, 0,
	0, 319, 320, 441, 301, 449, 646, 612, 504, 462,
	460, 0, 427, 484, 641, 0, 0, 349, 0, 344,
	440, 580, 307, 559, 478, 445, 399, 507, 536, 346,
	331, 332, 375, 477, 365, 317, 570, 609, 613, 611,
	607, 604, 608, 605, 606, 610, 366, 603, 0, 578,
	587, 621, 601, 629, 586, 626, 596, 341, 625, 590,
	589, 635, 616, 617, 571, 631, 602, 600, 593, 592,
	588, 0, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 277, 0, 278, 279, 280, 282, 283, 284,
	0, 285, 286, 287, 290, 291, 292, 294, 654, 295,
	296, 297, 298, 299, 300, 591, 0, 302, 303, 304,
	305, 306, 308, 310, 311, 312, 313, 314, 316, 318,
	0, 0, 0, 0, 0, 0, 0, 322, 323, 324,
	325, 326, 327, 0, 328, 329, 333, 335, 336, 337,
	338, 339, 340, 343, 0, 345, 347, 0, 348, 351,
	0, 352, 353, 354, 355, 356, 357, 358, 359, 595,
	360, 0, 361, 362, 364, 0, 367, 368, 369, 370,
	371, 0, 372, 597, 598, 373, 374, 376, 377, 378,
	380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
	390, 391, 0, 392, 393, 394, 396, 0, 397, 398,
	401, 402, 403, 404, 0, 406, 614, 0, 407, 408,
	409, 0, 0, 410, 411, 412, 413, 414, 415, 418,
	615, 420, 421, 422, 423, 424, 425, 426, 656, 428,
	429, 430, 431, 432, 433, 434, 618, 619, 435, 437,
	438, 620, 622, 623, 0, 453, 454, 455, 456, 457,
	458, 459, 461, 0, 463, 464, 465, 624, 466, 467,
	468, 469, 0, 470, 471, 472, 473, 474, 476, 479,
	480, 481, 482, 0, 485, 486, 487, 488, 489, 490,
	491, 493, 494, 495, 497, 498, 499, 657, 500, 501,
	502, 503, 627, 505, 506, 658, 508, 509, 511, 512,
	513, 514, 515, 516, 667, 0, 518, 628, 519, 520,
	521, 522, 523, 0, 525, 526, 527, 528, 529, 530,
	533, 534, 535, 537, 538, 630, 539, 540, 0, 542,
	543, 0, 545, 546, 547, 548, 549, 0, 668, 550,
	632, 551, 633, 552, 553, 554, 555, 556, 557, 558,
	560, 0, 0, 562, 563, 564, 566, 567, 568, 569,
	572, 573, 574, 575, 576, 0, 577, 579, 581, 659,
	636, 637, 638, 639, 640, 642, 643, 644, 645, 582,
	583, 599, 450, 444, 400, 442, 443, 447, 448, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 830, 831, 832, 0,
	0, 0, 0, 0, 263, 824, 825, 826, 827, 828,
	829, 822, 0, 0, 0, 0, 0, 0, 833, 834,
	835, 0, 276, 0, 293, 0, 0, 342, 379, 594,
	0, 0, 439, 0, 492, 496, 0, 585, 0, 0,
	0, 0, 350, 0, 0, 0, 0, 0, 0, 0,
	561, 0, 0, 0, 0, 281, 669, 584, 655, 0,
	0, 0, 446, 0, 0, 0, 0, 0, 0, 0,
	289, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 483, 417, 634, 510, 288, 334,
	321, 363, 405, 517, 0, 0, 395, 565, 330, 419,
	0, 309, 452, 0, 541, 416, 0, 524, 544, 0,
	436, 315, 475, 531, 532, 0, 0, 0, 0, 0,
	319, 320, 441, 301, 449, 646, 612, 504, 462, 460,
	0, 427, 484, 641, 0, 0, 349, 0, 344, 440,
	580, 307, 559, 478, 445, 399, 507, 536, 346, 331,
	332, 375, 477, 365, 317, 570, 609, 613, 611, 607,
	604, 608, 605, 606, 610, 366, 603, 0, 578, 587,
	621, 601, 629, 586, 626, 596, 341, 625, 590, 589,
	635, 616, 617, 571, 631, 602, 600, 593, 592, 588,
	0, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 277, 0, 278, 279, 280, 282, 283, 284, 0,
	285, 286, 287, 290, 291, 292, 294, 654, 295, 296,
	297, 3423, 299, 300, 591, 0, 302, 303, 304, 305,
	306, 308, 310, 311, 312, 313, 314, 316, 318, 0,
	0, 0, 0, 0, 0, 0, 322, 323, 324, 325,
	326, 327, 0, 328, 329, 333, 335, 336, 337, 338,
	339, 340, 343, 0, 345, 347, 0, 348, 351, 0,
	352, 353, 354, 355, 356, 357, 358, 359, 595, 3424,
	0, 361, 362, 364, 0, 367, 368, 369, 370, 371,
	0, 372, 597, 598, 373, 374, 376, 377, 378, 380,
	381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
	391, 0, 392, 393, 394, 396, 0, 397, 398, 401,
	402, 403, 404, 0, 406, 614, 0, 407, 408, 409,
	0, 0, 410, 411, 412, 413, 414, 415, 418, 615,
	420, 421, 422, 423, 424, 425, 426, 656, 428, 429,
	430, 431, 432, 433, 434, 618, 619, 435, 437, 438,
	620, 622, 623, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 0, 463, 464, 465, 624, 466, 467, 468,
	469, 0, 470, 471, 472, 473, 474, 476, 479, 480,
	481, 482, 0, 485, 486, 487, 488, 489, 490, 491,
	493, 494, 495, 497, 498, 499, 657, 500, 501, 502,
	503, 627, 505, 506, 658, 508, 509, 511, 512, 513,
	514, 515, 516, 667, 0, 518, 628, 519, 520, 521,
	522, 523, 0, 525, 526, 527, 528, 529, 530, 533,
	534, 535, 537, 538, 630, 539, 540, 0, 542, 543,
	0, 545, 546, 547, 548, 549, 0, 668, 550, 632,
	551, 633, 552, 553, 554, 555, 556, 557, 558, 560,
	0, 0, 562, 563, 564, 566, 567, 568, 569, 572,
	573, 574, 575, 576, 0, 577, 579, 581, 659, 636,
	637, 638, 639, 640, 642, 643, 644, 645, 582, 583,
	599, 450, 444, 400, 442, 443, 447, 448, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 830, 831, 832, 0, 0,
	0, 0, 0, 263, 824, 825, 826, 827, 828, 829,
	822, 0, 0, 0, 0, 0, 0, 833, 834, 835,
	0, 276, 0, 293, 0, 0, 342, 379, 594, 0,
	0, 439, 0, 492, 496, 0, 585, 0, 0, 0,
	0, 350, 0, 0, 0, 0, 0, 0, 0, 561,
	0, 0, 0, 0, 281, 669, 584, 655, 0, 0,
	0, 446, 0, 0, 0, 0, 0, 0, 0, 289,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 483, 417, 634, 510, 288, 334, 321,
	363, 405, 517, 0, 0, 395, 565, 330, 419, 0,
	309, 452, 0, 541, 416, 0, 524, 544, 0, 436,
	315, 475, 531, 532, 0, 0, 0, 0, 0, 319,
	320, 441, 301, 449, 646, 612, 504, 462, 460, 0,
	427, 484, 641, 0, 0, 349, 0, 344, 440, 580,
	307, 559, 478, 445, 399, 507, 536, 346, 331, 332,
	375, 477, 365, 317, 570, 609, 613, 611, 607, 604,
	608, 605, 606, 610, 366, 603, 0, 578, 587, 621,
	601, 629, 586, 626, 596, 341, 625, 590, 589, 635,
	616, 617, 571, 631, 602, 600, 593, 592, 588, 0,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	277, 0, 278, 279, 280, 282, 283, 284, 0, 285,
	286, 287, 290, 291, 292, 294, 654, 295, 296, 297,
	818, 299, 300, 591, 0, 302, 303, 304, 305, 306,
	308, 310, 311, 312, 313, 314, 316, 318, 0, 0,
	0, 0, 0, 0, 0, 322, 323, 324, 325, 326,
	327, 0, 328, 329, 333, 335, 336, 337, 338, 339,
	340, 343, 0, 345, 347, 0, 348, 351, 0, 352,
	353, 354, 355, 356, 357, 358, 359, 595, 819, 0,
	361, 362, 364, 0, 367, 368, 369, 370, 371, 0,
	372, 597, 598, 373, 374, 376, 377, 378, 380, 381,
	382, 383, 384, 385, 386, 387, 388, 389, 390, 391,
	0, 392, 393, 394, 396, 0, 397, 398, 401, 402,
	403, 404, 0, 406, 614, 0, 407, 408, 409, 0,
	0, 410, 411, 412, 413, 414, 415, 418, 615, 420,
	421, 422, 423, 424, 425, 426, 656, 428, 429, 430,
	431, 432, 433, 434, 618, 619, 435, 437, 438, 620,
	622, 623, 0, 453, 454, 455, 456, 457, 458, 459,
	461, 0, 463, 464, 465, 624, 466, 467, 468, 469,
	0, 470, 471, 472, 473, 474, 476, 479, 480, 481,
	482, 0, 485, 486, 487, 488, 489, 490, 491, 493,
	494, 495, 497, 498, 499, 657, 500, 501, 502, 503,
	627, 505, 506, 658, 508, 509, 511, 512, 513, 514,
	515, 516, 667, 0, 518, 628, 519, 520, 521, 522,
	523, 0, 525, 526, 527, 528, 529, 530, 533, 534,
	535, 537, 538, 630, 539, 540, 0, 542, 543, 0,
	545, 546, 547, 548, 549, 0, 668, 550, 632, 551,
	633, 552, 553, 554, 555, 556, 557, 558, 560, 0,
	0, 562, 563, 564, 566, 567, 568, 569, 572, 573,
	574, 575, 576, 0, 577, 579, 581, 659, 636, 637,
	638, 639, 640, 642, 643, 644, 645, 582, 583, 599,
	450, 444, 400, 442, 443, 447, 448, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 917, 0, 0, 830, 831, 832, 0, 0, 0,
	0, 0, 0, 824, 825, 826, 827, 828, 829, 276,
	0, 293, 860, 0, 342, 379, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 865, 0, 871, 0, 877, 0, 561, 0, 867,
	868, 873, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 869, 866, 870, 876, 864, 874, 861, 872,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	1212, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 858, 863, 0, 879, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 1240, 1242, 1238, 1234, 1235, 1200, 1201,
	1241, 1237, 366, 3087, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 857, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 1224, 1202, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 1213, 1203, 1208, 1214,
	1204, 1205, 1209, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 1216, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 1225,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 1226, 0, 407, 408, 409, 1206, 1207, 410,
	411, 412, 413, 414, 415, 418, 1239, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 1217, 435, 437, 438, 1223, 622, 1218,
	875, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 1219, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 1210, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 1220, 539, 540, 1211, 542, 543, 878, 545, 546,
	547, 548, 549, 0, 668, 550, 1221, 551, 1222, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 1227, 1228, 1231,
	1229, 1230, 1232, 1233, 1243, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 853, 0, 0, 1215,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 860, 0, 342,
	379, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 865, 0, 871, 0,
	877, 0, 561, 0, 867, 868, 873, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 869, 866, 870,
	876, 864, 874, 861, 872, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 858, 863, 0,
	879, 132, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 133, 278, 279, 280, 282, 283,
	284, 857, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 859, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 862, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 875, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 878, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 1080, 0, 740,
	0, 0, 0, 0, 0, 0, 0, 0, 732, 276,
	0, 293, 0, 0, 342, 379, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 736, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 735, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 727, 728,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	729, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 734, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 733, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 725, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 726,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 730, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 917, 0, 1180, 1034, 0,
	1185, 1186, 0, 740, 0, 0, 0, 0, 0, 0,
	0, 738, 739, 276, 0, 293, 860, 0, 342, 379,
	594, 0, 0, 439, 0, 492, 496, 0, 585, 0,
	0, 0, 0, 350, 1183, 865, 0, 871, 1184, 877,
	1182, 561, 0, 867, 868, 873, 281, 1259, 584, 655,
	0, 0, 0, 446, 0, 0, 0, 0, 0, 0,
	0, 289, 0, 0, 0, 0, 869, 866, 870, 876,
	864, 874, 861, 872, 0, 483, 417, 634, 510, 288,
	334, 321, 363, 405, 517, 0, 0, 395, 565, 330,
	419, 0, 309, 452, 0, 541, 416, 0, 524, 544,
	0, 436, 315, 475, 531, 532, 858, 863, 0, 879,
	0, 319, 320, 441, 301, 449, 646, 612, 504, 462,
	460, 0, 427, 484, 641, 0, 0, 349, 0, 344,
	440, 580, 307, 559, 478, 445, 399, 507, 536, 346,
	331, 332, 375, 477, 365, 317, 570, 609, 613, 611,
	607, 604, 608, 605, 606, 610, 366, 5622, 0, 578,
	1245, 1256, 1253, 1258, 1244, 1257, 1251, 982, 625, 1248,
	1247, 1261, 1254, 1255, 571, 1260, 1199, 1252, 1250, 1249,
	1246, 0, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 277, 0, 278, 279, 280, 282, 283, 284,
	857, 285, 286, 287, 290, 291, 292, 294, 654, 295,
	296, 297, 298, 299, 300, 591, 859, 302, 303, 304,
	305, 306, 308, 310, 311, 312, 313, 314, 316, 318,
	0, 0, 0, 862, 0, 0, 0, 322, 323, 324,
	325, 326, 327, 0, 328, 329, 333, 335, 336, 337,
	338, 339, 340, 343, 0, 345, 347, 0, 348, 351,
	0, 352, 353, 354, 355, 356, 357, 358, 359, 595,
	360, 0, 361, 362, 364, 0, 367, 368, 369, 370,
	371, 0, 372, 597, 598, 373, 374, 376, 377, 378,
	380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
	390, 391, 0, 392, 393, 394, 396, 0, 397, 398,
	401, 402, 403, 404, 0, 406, 614, 0, 407, 408,
	409, 0, 0, 410, 411, 412, 413, 414, 415, 418,
	615, 420, 421, 422, 423, 424, 425, 426, 656, 428,
	429, 430, 431, 432, 433, 434, 618, 619, 435, 437,
	438, 620, 622, 623, 875, 453, 454, 455, 456, 457,
	458, 459, 461, 0, 463, 464, 465, 624, 466, 467,
	468, 469, 0, 470, 471, 472, 473, 474, 476, 479,
	480, 481, 482, 0, 485, 486, 487, 488, 489, 490,
	491, 493, 494, 495, 497, 498, 499, 657, 500, 501,
	502, 503, 627, 505, 506, 658, 508, 509, 511, 512,
	513, 514, 515, 516, 667, 0, 518, 628, 519, 520,
	521, 522, 523, 0, 525, 526, 527, 528, 529, 530,
	533, 534, 535, 537, 538, 630, 539, 540, 0, 542,
	543, 878, 545, 546, 547, 548, 549, 0, 668, 550,
	632, 551, 633, 552, 553, 554, 555, 556, 557, 558,
	560, 0, 0, 562, 563, 564, 566, 567, 568, 569,
	572, 573, 574, 575, 576, 0, 577, 579, 581, 659,
	636, 637, 638, 639, 640, 642, 643, 644, 645, 582,
	583, 599, 450, 444, 400, 442, 443, 447, 448, 451,
	263, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 276, 0,
	293, 0, 0, 342, 379, 594, 0, 0, 439, 0,
	492, 496, 0, 585, 0, 0, 0, 0, 350, 0,
	0, 0, 0, 0, 0, 0, 561, 0, 0, 0,
	0, 281, 669, 584, 655, 0, 0, 0, 446, 0,
	0, 0, 0, 0, 0, 0, 289, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	483, 417, 634, 510, 288, 334, 321, 363, 405, 517,
	0, 0, 395, 565, 330, 419, 0, 309, 452, 0,
	541, 416, 0, 524, 544, 0, 436, 315, 475, 531,
	532, 0, 0, 0, 0, 0, 319, 320, 441, 301,
	449, 646, 612, 504, 462, 460, 0, 427, 484, 641,
	0, 0, 349, 0, 344, 440, 580, 307, 559, 478,
	445, 399, 507, 536, 346, 331, 332, 375, 477, 365,
	317, 570, 609, 613, 611, 607, 604, 608, 605, 606,
	610, 366, 603, 0, 578, 587, 621, 601, 629, 586,
	626, 596, 341, 625, 590, 589, 635, 616, 617, 571,
	631, 602, 600, 593, 592, 588, 0, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 277, 0, 278,
	279, 280, 282, 283, 284, 0, 285, 286, 287, 290,
	291, 292, 294, 654, 295, 296, 297, 298, 299, 300,
	591, 0, 302, 303, 304, 305, 306, 308, 310, 311,
	312, 313, 314, 316, 318, 0, 0, 0, 0, 0,
	0, 0, 322, 323, 324, 325, 326, 327, 0, 328,
	329, 333, 335, 336, 337, 338, 339, 340, 343, 0,
	345, 347, 0, 348, 351, 0, 352, 353, 354, 355,
	356, 357, 358, 359, 595, 360, 0, 361, 362, 364,
	0, 367, 368, 369, 370, 371, 0, 372, 597, 598,
	373, 374, 376, 377, 378, 380, 381, 382, 383, 384,
	385, 386, 387, 388, 389, 390, 391, 0, 392, 393,
	394, 396, 0, 397, 398, 401, 402, 403, 404, 0,
	406, 614, 0, 407, 408, 409, 0, 0, 410, 411,
	412, 413, 414, 415, 418, 615, 420, 421, 422, 423,
	424, 425, 426, 656, 428, 429, 430, 431, 432, 433,
	434, 618, 619, 435, 437, 438, 620, 622, 623, 0,
	453, 454, 455, 456, 457, 458, 459, 461, 0, 463,
	464, 465, 624, 466, 467, 468, 469, 0, 470, 471,
	472, 473, 474, 476, 479, 480, 481, 482, 0, 485,
	486, 487, 488, 489, 490, 491, 493, 494, 495, 497,
	498, 499, 657, 500, 501, 502, 503, 627, 505, 506,
	658, 508, 509, 511, 512, 513, 514, 515, 516, 667,
	0, 518, 628, 519, 520, 521, 522, 523, 0, 525,
	526, 527, 528, 529, 530, 533, 534, 535, 537, 538,
	630, 539, 540, 0, 542, 543, 0, 545, 546, 547,
	548, 549, 0, 668, 550, 632, 551, 633, 552, 553,
	554, 555, 556, 557, 558, 560, 0, 0, 562, 563,
	564, 566, 567, 568, 569, 572, 573, 574, 575, 576,
	0, 577, 579, 581, 659, 636, 637, 638, 639, 640,
	642, 643, 644, 645, 582, 583, 599, 450, 444, 400,
	442, 443, 447, 448, 451, 263, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 293, 0, 0, 342, 379,
	594, 0, 5465, 439, 0, 492, 496, 0, 585, 0,
	0, 0, 0, 350, 0, 0, 0, 0, 0, 0,
	0, 561, 0, 0, 0, 0, 281, 669, 584, 655,
	0, 0, 0, 446, 0, 0, 0, 0, 0, 0,
	0, 289, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 483, 417, 634, 510, 288,
	334, 321, 363, 405, 517, 0, 0, 395, 565, 330,
	419, 0, 309, 452, 0, 541, 416, 0, 524, 544,
	0, 436, 315, 475, 531, 532, 0, 0, 0, 0,
	0, 319, 320, 441, 301, 449, 646, 612, 504, 462,
	460, 0, 427, 484, 641, 0, 0, 349, 0, 344,
	440, 580, 307, 559, 478, 445, 399, 507, 536, 346,
	331, 332, 375, 477, 365, 317, 570, 609, 613, 611,
	607, 604, 608, 605, 606, 610, 366, 603, 0, 578,
	587, 621, 601, 629, 586, 626, 596, 341, 625, 590,
	589, 635, 616, 617, 571, 631, 602, 600, 593, 592,
	588, 0, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 277, 0, 278, 279, 280, 282, 283, 284,
	0, 285, 286, 287, 290, 291, 292, 294, 654, 295,
	296, 297, 298, 299, 300, 591, 0, 302, 303, 304,
	305, 306, 308, 310, 311, 312, 313, 314, 316, 318,
	0, 0, 0, 0, 0, 0, 0, 322, 323, 324,
	325, 326, 327, 0, 328, 329, 333, 335, 336, 337,
	338, 339, 340, 343, 0, 345, 347, 0, 348, 351,
	0, 352, 353, 354, 355, 356, 357, 358, 359, 595,
	360, 0, 361, 362, 364, 0, 367, 368, 369, 370,
	371, 0, 372, 597, 598, 373, 374, 376, 377, 378,
	380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
	390, 391, 0, 392, 393, 394, 396, 0, 397, 398,
	401, 402, 403, 404, 0, 406, 614, 0, 407, 408,
	409, 0, 0, 410, 411, 412, 413, 414, 415, 418,
	615, 420, 421, 422, 423, 424, 425, 426, 656, 428,
	429, 430, 431, 432, 433, 434, 618, 619, 435, 437,
	438, 620, 622, 623, 0, 453, 454, 455, 456, 457,
	458, 459, 461, 0, 463, 464, 465, 624, 466, 467,
	468, 469, 0, 470, 471, 472, 473, 474, 476, 479,
	480, 481, 482, 0, 485, 486, 487, 488, 489, 490,
	491, 493, 494, 495, 497, 498, 499, 657, 500, 501,
	502, 503, 627, 505, 506, 658, 508, 509, 511, 512,
	513, 514, 515, 516, 667, 0, 518, 628, 519, 520,
	521, 522, 523, 0, 525, 526, 527, 528, 529, 530,
	533, 534, 535, 537, 538, 630, 539, 540, 0, 542,
	543, 0, 545, 546, 547, 548, 549, 0, 668, 550,
	632, 551, 633, 552, 553, 554, 555, 556, 557, 558,
	560, 0, 0, 562, 563, 564, 566, 567, 568, 569,
	572, 573, 574, 575, 576, 0, 577, 579, 581, 659,
	636, 637, 638, 639, 640, 642, 643, 644, 645, 582,
	583, 599, 450, 444, 400, 442, 443, 447, 448, 451,
	263, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 276, 0,
	293, 0, 0, 342, 379, 594, 0, 5324, 439, 0,
	492, 496, 0, 585, 0, 0, 0, 0, 350, 0,
	0, 0, 0, 0, 0, 0, 561, 0, 0, 0,
	0, 281, 669, 584, 655, 0, 0, 0, 446, 0,
	0, 0, 0, 0, 0, 0, 289, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	483, 417, 634, 510, 288, 334, 321, 363, 405, 517,
	0, 0, 395, 565, 330, 419, 0, 309, 452, 0,
	541, 416, 0, 524, 544, 0, 436, 315, 475, 531,
	532, 0, 0, 0, 0, 0, 319, 320, 441, 301,
	449, 646, 612, 504, 462, 460, 0, 427, 484, 641,
	0, 0, 349, 0, 344, 440, 580, 307, 559, 478,
	445, 399, 507, 536, 346, 331, 332, 375, 477, 365,
	317, 570, 609, 613, 611, 607, 604, 608, 605, 606,
	610, 366, 603, 0, 578, 587, 621, 601, 629, 586,
	626, 596, 341, 625, 590, 589, 635, 616, 617, 571,
	631, 602, 600, 593, 592, 588, 0, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 277, 0, 278,
	279, 280, 282, 283, 284, 0, 285, 286, 287, 290,
	291, 292, 294, 654, 295, 296, 297, 298, 299, 300,
	591, 0, 302, 303, 304, 305, 306, 308, 310, 311,
	312, 313, 314, 316, 318, 0, 0, 0, 0, 0,
	0, 0, 322, 323, 324, 325, 326, 327, 0, 328,
	329, 333, 335, 336, 337, 338, 339, 340, 343, 0,
	345, 347, 0, 348, 351, 0, 352, 353, 354, 355,
	356, 357, 358, 359, 595, 360, 0, 361, 362, 364,
	0, 367, 368, 369, 370, 371, 0, 372, 597, 598,
	373, 374, 376, 377, 378, 380, 381, 382, 383, 384,
	385, 386, 387, 388, 389, 390, 391, 0, 392, 393,
	394, 396, 0, 397, 398, 401, 402, 403, 404, 0,
	406, 614, 0, 407, 408, 409, 0, 0, 410, 411,
	412, 413, 414, 415, 418, 615, 420, 421, 422, 423,
	424, 425, 426, 656, 428, 429, 430, 431, 432, 433,
	434, 618, 619, 435, 437, 438, 620, 622, 623, 0,
	453, 454, 455, 456, 457, 458, 459, 461, 0, 463,
	464, 465, 624, 466, 467, 468, 469, 0, 470, 471,
	472, 473, 474, 476, 479, 480, 481, 482, 0, 485,
	486, 487, 488, 489, 490, 491, 493, 494, 495, 497,
	498, 499, 657, 500, 501, 502, 503, 627, 505, 506,
	658, 508, 509, 511, 512, 513, 514, 515, 516, 667,
	0, 518, 628, 519, 520, 521, 522, 523, 0, 525,
	526, 527, 528, 529, 530, 533, 534, 535, 537, 538,
	630, 539, 540, 0, 542, 543, 0, 545, 546, 547,
	548, 549, 0, 668, 550, 632, 551, 633, 552, 553,
	554, 555, 556, 557, 558, 560, 0, 0, 562, 563,
	564, 566, 567, 568, 569, 572, 573, 574, 575, 576,
	0, 577, 579, 581, 659, 636, 637, 638, 639, 640,
	642, 643, 644, 645, 582, 583, 599, 450, 444, 400,
	442, 443, 447, 448, 451, 263, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 293, 0, 0, 342, 379,
	594, 0, 5321, 439, 0, 492, 496, 137, 585, 0,
	0, 0, 0, 350, 0, 0, 0, 0, 0, 0,
	0, 561, 0, 0, 0, 0, 281, 669, 584, 655,
	0, 0, 0, 446, 134, 0, 0, 0, 135, 0,
	0, 289, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 483, 417, 1077, 510, 288,
	334, 321, 363, 405, 517, 0, 0, 395, 565, 330,
	419, 0, 309, 452, 0, 541, 416, 0, 524, 544,
	0, 436, 315, 475, 531, 532, 0, 0, 0, 0,
	0, 319, 320, 441, 301, 449, 646, 612, 504, 462,
	460, 0, 427, 484, 641, 0, 0, 349, 0, 344,
	440, 580, 307, 559, 478, 445, 399, 507, 536, 346,
	331, 332, 375, 477, 365, 317, 570, 609, 613, 611,
	607, 604, 608, 605, 606, 610, 366, 603, 0, 578,
	587, 621, 601, 629, 586, 626, 596, 341, 625, 590,
	589, 635, 616, 617, 571, 631, 602, 600, 593, 592,
	588, 0, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 277, 0, 278, 279, 280, 282, 283, 284,
	0, 285, 286, 287, 290, 291, 292, 294, 654, 295,
	296, 297, 298, 299, 300, 591, 0, 302, 303, 304,
	305, 306, 308, 310, 311, 312, 313, 314, 316, 318,
	0, 0, 0, 0, 0, 0, 0, 322, 323, 324,
	325, 326, 327, 0, 328, 329, 333, 335, 336, 337,
	338, 339, 340, 343, 0, 345, 347, 0, 348, 351,
	0, 352, 353, 354, 355, 356, 357, 358, 359, 595,
	360, 0, 361, 362, 364, 0, 367, 368, 369, 370,
	371, 0, 372, 597, 598, 373, 374, 376, 377, 378,
	380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
	390, 391, 0, 392, 393, 394, 396, 0, 397, 398,
	401, 402, 403, 404, 0, 406, 614, 0, 407, 408,
	409, 0, 0, 410, 411, 412, 413, 414, 415, 418,
	615, 420, 421, 422, 423, 424, 425, 426, 656, 428,
	429, 430, 431, 432, 433, 434, 618, 619, 435, 437,
	438, 620, 622, 623, 0, 453, 454, 455, 456, 457,
	458, 459, 461, 0, 463, 464, 465, 624, 466, 467,
	468, 469, 0, 470, 471, 472, 473, 474, 476, 479,
	480, 481, 482, 0, 485, 486, 487, 488, 489, 490,
	491, 493, 494, 495, 497, 498, 499, 657, 500, 501,
	502, 503, 627, 505, 506, 658, 508, 509, 511, 512,
	513, 514, 515, 516, 667, 0, 518, 628, 519, 520,
	521, 522, 523, 0, 525, 526, 527, 528, 529, 530,
	533, 534, 535, 537, 538, 630, 539, 540, 0, 542,
	543, 0, 545, 546, 547, 548, 549, 0, 668, 550,
	632, 551, 633, 552, 553, 554, 555, 556, 557, 558,
	560, 0, 0, 562, 563, 564, 566, 567, 568, 569,
	572, 573, 574, 575, 576, 0, 577, 579, 581, 659,
	636, 637, 638, 639, 640, 642, 643, 644, 645, 582,
	583, 599, 450, 444, 400, 442, 443, 447, 448, 451,
	853, 0, 0, 1034, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 276, 0,
	293, 860, 131, 342, 379, 594, 0, 0, 439, 0,
	492, 496, 0, 585, 0, 0, 0, 0, 350, 1592,
	865, 0, 871, 0, 877, 1591, 561, 0, 867, 868,
	873, 281, 669, 584, 655, 0, 0, 0, 446, 0,
	0, 0, 0, 0, 0, 0, 289, 0, 0, 0,
	1593, 869, 866, 870, 876, 864, 874, 861, 872, 0,
	483, 417, 634, 510, 288, 334, 321, 363, 405, 517,
	0, 0, 395, 565, 330, 419, 0, 309, 452, 0,
	541, 416, 0, 524, 544, 0, 436, 315, 475, 531,
	532, 858, 863, 0, 879, 0, 319, 320, 441, 301,
	449, 646, 612, 504, 462, 460, 0, 427, 484, 641,
	0, 0, 349, 0, 344, 440, 580, 307, 559, 478,
	445, 399, 507, 536, 346, 331, 332, 375, 477, 365,
	317, 570, 609, 613, 611, 607, 604, 608, 605, 606,
	610, 366, 603, 0, 578, 587, 621, 601, 629, 586,
	626, 596, 341, 625, 590, 589, 635, 616, 617, 571,
	631, 602, 600, 593, 592, 588, 0, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 277, 0, 278,
	279, 280, 282, 283, 284, 857, 285, 286, 287, 290,
	291, 292, 294, 654, 295, 296, 297, 298, 299, 300,
	591, 859, 302, 303, 304, 305, 306, 308, 310, 311,
	312, 313, 314, 316, 318, 0, 0, 0, 862, 0,
	0, 0, 322, 323, 324, 325, 326, 327, 0, 328,
	329, 333, 335, 336, 337, 338, 339, 340, 343, 0,
	345, 347, 0, 348, 351, 0, 352, 353, 354, 355,
	356, 357, 358, 359, 595, 360, 0, 361, 362, 364,
	0, 367, 368, 369, 370, 371, 0, 372, 597, 598,
	373, 374, 376, 377, 378, 380, 381, 382, 383, 384,
	385, 386, 387, 388, 389, 390, 391, 0, 392, 393,
	394, 396, 0, 397, 398, 401, 402, 403, 404, 0,
	406, 614, 0, 407, 408, 409, 0, 0, 410, 411,
	412, 413, 414, 415, 418, 615, 420, 421, 422, 423,
	424, 425, 426, 656, 428, 429, 430, 431, 432, 433,
	434, 618, 619, 435, 437, 438, 620, 622, 623, 875,
	453, 454, 455, 456, 457, 458, 459, 461, 0, 463,
	464, 465, 624, 466, 467, 468, 469, 0, 470, 471,
	472, 473, 474, 476, 479, 480, 481, 482, 0, 485,
	486, 487, 488, 489, 490, 491, 493, 494, 495, 497,
	498, 499, 657, 500, 501, 502, 503, 627, 505, 506,
	658, 508, 509, 511, 512, 513, 514, 515, 516, 667,
	0, 518, 628, 519, 520, 521, 522, 523, 0, 525,
	526, 527, 528, 529, 530, 533, 534, 535, 537, 538,
	630, 539, 540, 0, 542, 543, 878, 545, 546, 547,
	548, 549, 0, 668, 550, 632, 551, 633, 552, 553,
	554, 555, 556, 557, 558, 560, 0, 0, 562, 563,
	564, 566, 567, 568, 569, 572, 573, 574, 575, 576,
	0, 577, 579, 581, 659, 636, 637, 638, 639, 640,
	642, 643, 644, 645, 582, 583, 599, 450, 444, 400,
	442, 443, 447, 448, 451, 853, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 293, 860, 0, 342, 379,
	594, 0, 0, 439, 0, 492, 496, 0, 585, 0,
	0, 0, 0, 350, 0, 865, 0, 871, 0, 877,
	0, 561, 0, 867, 868, 873, 281, 669, 584, 655,
	0, 0, 0, 446, 0, 0, 0, 0, 0, 0,
	0, 289, 3461, 0, 0, 0, 869, 866, 870, 876,
	864, 874, 861, 872, 0, 483, 417, 634, 510, 288,
	334, 321, 363, 405, 517, 0, 0, 395, 565, 330,
	419, 0, 309, 452, 0, 541, 416, 0, 524, 544,
	0, 436, 315, 475, 531, 532, 858, 863, 0, 879,
	0, 319, 320, 441, 301, 449, 646, 612, 504, 462,
	460, 0, 427, 484, 641, 0, 0, 349, 0, 344,
	440, 580, 307, 559, 478, 445, 399, 507, 536, 346,
	331, 332, 375, 477, 365, 317, 570, 609, 613, 611,
	607, 604, 608, 605, 606, 610, 366, 603, 0, 578,
	587, 621, 601, 629, 586, 626, 596, 341, 625, 590,
	589, 635, 616, 617, 571, 631, 602, 600, 593, 592,
	588, 0, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 277, 0, 278, 279, 280, 282, 283, 284,
	857, 285, 286, 287, 290, 291, 292, 294, 654, 295,
	296, 297, 298, 299, 300, 591, 859, 302, 303, 304,
	305, 306, 308, 310, 311, 312, 313, 314, 316, 318,
	0, 0, 850, 862, 0, 0, 851, 322, 323, 324,
	325, 326, 327, 0, 328, 329, 333, 335, 336, 337,
	338, 339, 340, 343, 0, 345, 347, 0, 348, 351,
	0, 352, 353, 354, 355, 356, 357, 358, 359, 595,
	360, 0, 361, 362, 364, 0, 367, 368, 369, 370,
	371, 0, 372, 597, 598, 373, 374, 376, 377, 378,
	380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
	390, 391, 0, 392, 393, 394, 396, 0, 397, 398,
	401, 402, 403, 404, 0, 406, 614, 0, 407, 408,
	409, 0, 0, 410, 411, 412, 413, 414, 415, 418,
	615, 420, 421, 422, 423, 424, 425, 426, 656, 428,
	429, 430, 431, 432, 433, 434, 618, 619, 435, 437,
	438, 620, 622, 623, 875, 453, 454, 455, 456, 457,
	458, 459, 461, 0, 463, 464, 465, 624, 466, 467,
	468, 469, 0, 470, 471, 472, 473, 474, 476, 479,
	480, 481, 482, 0, 485, 486, 487, 488, 489, 490,
	491, 493, 494, 495, 497, 498, 499, 657, 500, 501,
	502, 503, 627, 505, 506, 658, 508, 509, 511, 512,
	513, 514, 515, 516, 667, 852, 518, 628, 519, 520,
	521, 522, 523, 0, 525, 526, 527, 528, 529, 530,
	533, 534, 535, 537, 538, 630, 539, 540, 0, 542,
	543, 878, 545, 546, 547, 548, 549, 0, 668, 550,
	632, 551, 633, 552, 553, 554, 555, 556, 557, 558,
	560, 0, 0, 562, 563, 564, 566, 567, 568, 569,
	572, 573, 574, 575, 576, 0, 577, 579, 581, 659,
	636, 637, 638, 639, 640, 642, 643, 644, 645, 582,
	583, 599, 450, 444, 400, 442, 443, 447, 448, 451,
	853, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 276, 0,
	293, 860, 0, 342, 379, 594, 0, 0, 439, 0,
	492, 496, 0, 585, 0, 0, 0, 0, 350, 0,
	865, 0, 871, 0, 877, 0, 561, 0, 867, 868,
	873, 281, 669, 584, 655, 0, 0, 0, 446, 0,
	0, 0, 0, 0, 0, 0, 289, 0, 0, 0,
	0, 869, 866, 870, 876, 864, 874, 861, 872, 0,
	483, 417, 634, 510, 288, 334, 321, 363, 405, 517,
	0, 0, 395, 565, 330, 419, 0, 309, 452, 2474,
	541, 416, 0, 524, 544, 0, 436, 315, 475, 531,
	532, 858, 863, 0, 879, 0, 319, 320, 441, 301,
	449, 646, 612, 504, 462, 460, 0, 427, 484, 641,
	0, 0, 349, 0, 344, 440, 580, 307, 559, 478,
	445, 399, 507, 536, 346, 331, 332, 375, 477, 365,
	317, 570, 609, 613, 611, 607, 604, 608, 605, 606,
	610, 366, 603, 0, 578, 587, 621, 601, 629, 586,
	626, 596, 341, 625, 590, 589, 635, 616, 617, 571,
	631, 602, 600, 593, 592, 588, 0, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 277, 0, 278,
	279, 280, 282, 283, 284, 857, 285, 286, 287, 290,
	291, 292, 294, 654, 295, 296, 297, 298, 299, 300,
	591, 859, 302, 303, 304, 305, 306, 308, 310, 311,
	312, 313, 314, 316, 318, 0, 0, 850, 862, 0,
	0, 851, 322, 323, 324, 325, 326, 327, 0, 328,
	329, 333, 335, 336, 337, 338, 339, 340, 343, 0,
	345, 347, 0, 348, 351, 0, 352, 353, 354, 355,
	356, 357, 358, 359, 595, 360, 0, 361, 362, 364,
	0, 367, 368, 369, 370, 371, 0, 372, 597, 598,
	373, 374, 376, 377, 378, 380, 381, 382, 383, 384,
	385, 386, 387, 388, 389, 390, 391, 0, 392, 393,
	394, 396, 0, 397, 398, 401, 402, 403, 404, 0,
	406, 614, 0, 407, 408, 409, 0, 0, 410, 411,
	412, 413, 414, 415, 418, 615, 420, 421, 422, 423,
	424, 425, 426, 656, 428, 429, 430, 431, 432, 433,
	434, 618, 619, 435, 437, 438, 620, 622, 623, 875,
	453, 454, 455, 456, 457, 458, 459, 461, 0, 463,
	464, 465, 624, 466, 467, 468, 469, 0, 470, 471,
	472, 473, 474, 476, 479, 480, 481, 482, 0, 485,
	486, 487, 488, 489, 490, 491, 493, 494, 495, 497,
	498, 499, 657, 500, 501, 502, 503, 627, 505, 506,
	658, 508, 509, 511, 512, 513, 514, 515, 516, 667,
	852, 518, 628, 519, 520, 521, 522, 523, 0, 525,
	526, 527, 528, 529, 530, 533, 534, 535, 537, 538,
	630, 539, 540, 0, 542, 543, 878, 545, 546, 547,
	548, 549, 0, 668, 550, 632, 551, 633, 552, 553,
	554, 555, 556, 557, 558, 560, 0, 0, 562, 563,
	564, 566, 567, 568, 569, 572, 573, 574, 575, 576,
	0, 577, 579, 581, 659, 636, 637, 638, 639, 640,
	642, 643, 644, 645, 582, 583, 599, 450, 444, 400,
	442, 443, 447, 448, 451, 263, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 293, 0, 0, 342, 379,
	594, 0, 0, 439, 0, 492, 496, 0, 585, 0,
	0, 0, 0, 350, 0, 0, 0, 0, 0, 0,
	0, 561, 0, 0, 0, 0, 281, 669, 584, 655,
	0, 0, 0, 446, 0, 0, 0, 768, 2490, 0,
	0, 289, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 483, 417, 634, 510, 288,
	334, 321, 363, 405, 517, 0, 0, 395, 565, 330,
	419, 0, 309, 452, 0, 541, 416, 0, 524, 544,
	0, 436, 315, 475, 531, 532, 0, 0, 0, 0,
	0, 319, 320, 441, 301, 449, 646, 612, 504, 462,
	460, 0, 427, 484, 641, 0, 0, 349, 0, 344,
	440, 580, 307, 559, 478, 445, 399, 507, 536, 346,
	331, 332, 375, 477, 365, 317, 570, 609, 613, 611,
	607, 604, 608, 605, 606, 610, 366, 603, 0, 578,
	587, 621, 601, 629, 586, 626, 596, 341, 625, 590,
	589, 635, 616, 617, 571, 631, 602, 600, 593, 592,
	588, 0, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 277, 0, 278, 279, 280, 282, 283, 284,
	0, 285, 286, 287, 290, 291, 292, 294, 654, 295,
	296, 297, 298, 299, 300, 591, 0, 302, 303, 304,
	305, 306, 308, 310, 311, 312, 313, 314, 316, 318,
	0, 0, 0, 2494, 0, 0, 0, 322, 323, 324,
	325, 326, 327, 0, 328, 329, 333, 335, 336, 337,
	338, 339, 340, 343, 0, 345, 347, 0, 348, 351,
	0, 352, 353, 354, 355, 356, 357, 358, 359, 595,
	360, 0, 361, 362, 364, 0, 367, 368, 369, 370,
	371, 0, 372, 597, 598, 373, 374, 376, 377, 378,
	380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
	390, 391, 0, 392, 393, 394, 396, 0, 397, 398,
	401, 402, 403, 404, 0, 406, 614, 0, 407, 408,
	409, 0, 0, 410, 411, 412, 413, 414, 415, 418,
	615, 420, 421, 422, 423, 424, 425, 426, 656, 428,
	429, 430, 431, 432, 433, 434, 618, 619, 435, 437,
	438, 620, 622, 623, 0, 453, 454, 455, 456, 457,
	458, 459, 461, 0, 463, 464, 465, 624, 466, 467,
	468, 469, 0, 470, 471, 472, 473, 474, 476, 479,
	480, 481, 482, 0, 485, 486, 487, 488, 489, 490,
	491, 493, 494, 495, 497, 498, 499, 657, 500, 501,
	502, 503, 627, 505, 506, 658, 508, 509, 511, 512,
	513, 514, 515, 516, 667, 0, 518, 628, 519, 520,
	521, 522, 523, 0, 525, 526, 527, 528, 529, 530,
	533, 534, 535, 537, 538, 630, 539, 540, 0, 2491,
	543, 0, 545, 546, 547, 548, 549, 0, 668, 550,
	632, 551, 633, 552, 553, 554, 555, 556, 557, 558,
	560, 0, 0, 562, 563, 564, 566, 567, 568, 569,
	572, 573, 574, 575, 576, 0, 577, 579, 581, 659,
	636, 637, 638, 639, 640, 642, 643, 644, 645, 582,
	583, 599, 450, 444, 400, 442, 443, 447, 448, 451,
	853, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 950, 276, 0,
	293, 860, 1325, 342, 379, 594, 0, 0, 439, 0,
	492, 496, 0, 585, 0, 0, 0, 0, 350, 0,
	865, 0, 871, 0, 877, 0, 561, 0, 867, 868,
	873, 281, 669, 584, 655, 0, 0, 0, 446, 0,
	0, 0, 0, 0, 0, 0, 289, 0, 0, 0,
	0, 869, 866, 870, 876, 864, 874, 861, 872, 0,
	483, 417, 634, 510, 288, 334, 321, 363, 405, 517,
	0, 0, 395, 565, 330, 419, 0, 309, 452, 0,
	541, 416, 0, 524, 544, 0, 436, 315, 475, 531,
	532, 858, 863, 0, 879, 0, 319, 320, 441, 301,
	449, 646, 612, 504, 462, 460, 0, 427, 484, 641,
	0, 0, 349, 0, 344, 440, 580, 307, 559, 478,
	445, 399, 507, 536, 346, 331, 332, 375, 477, 365,
	317, 570, 609, 613, 611, 607, 604, 608, 605, 606,
	610, 366, 603, 0, 578, 587, 621, 601, 629, 586,
	626, 596, 341, 625, 590, 589, 635, 616, 617, 571,
	631, 602, 600, 593, 592, 588, 0, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 277, 0, 278,
	279, 280, 282, 283, 284, 857, 285, 286, 287, 290,
	291, 292, 294, 654, 295, 296, 297, 298, 299, 300,
	591, 859, 302, 303, 304, 305, 306, 308, 310, 311,
	312, 313, 314, 316, 318, 0, 0, 850, 862, 0,
	0, 851, 322, 323, 324, 325, 326, 327, 0, 328,
	329, 333, 335, 336, 337, 338, 339, 340, 343, 0,
	345, 347, 0, 348, 351, 0, 352, 353, 354, 355,
	356, 357, 358, 359, 595, 360, 0, 361, 362, 364,
	0, 367, 368, 369, 370, 371, 0, 372, 597, 598,
	373, 374, 376, 377, 378, 380, 381, 382, 383, 384,
	385, 386, 387, 388, 389, 390, 391, 0, 392, 393,
	394, 396, 0, 397, 398, 401, 402, 403, 404, 0,
	406, 614, 0, 407, 408, 409, 0, 0, 410, 411,
	412, 413, 948, 415, 418, 615, 420, 421, 422, 423,
	424, 425, 426, 656, 428, 429, 430, 431, 432, 433,
	434, 618, 619, 435, 437, 438, 620, 622, 623, 875,
	453, 454, 455, 456, 457, 458, 459, 461, 0, 463,
	464, 465, 624, 466, 467, 468, 469, 0, 470, 471,
	472, 473, 474, 476, 479, 480, 481, 482, 0, 485,
	486, 487, 488, 489, 490, 491, 493, 494, 495, 497,
	498, 499, 657, 500, 501, 502, 503, 627, 505, 506,
	658, 508, 509, 511, 512, 513, 514, 515, 516, 667,
	852, 518, 628, 519, 520, 521, 522, 523, 0, 525,
	526, 527, 528, 529, 530, 533, 534, 535, 537, 538,
	630, 539, 540, 0, 542, 543, 878, 545, 546, 547,
	548, 549, 0, 668, 550, 632, 551, 633, 552, 553,
	554, 555, 556, 557, 558, 560, 0, 0, 562, 563,
	564, 566, 567, 568, 569, 572, 573, 574, 575, 576,
	0, 577, 579, 581, 659, 636, 637, 638, 639, 640,
	642, 643, 644, 645, 582, 583, 599, 450, 444, 400,
	442, 443, 447, 448, 451, 853, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 946, 276, 0, 293, 860, 0, 342, 379,
	594, 0, 0, 439, 0, 492, 496, 0, 585, 0,
	0, 0, 0, 350, 0, 865, 0, 871, 0, 877,
	0, 561, 0, 867, 868, 873, 281, 669, 584, 655,
	0, 0, 0, 446, 0, 0, 0, 0, 0, 0,
	0, 289, 0, 0, 0, 0, 869, 866, 870, 876,
	864, 874, 861, 872, 0, 483, 417, 634, 510, 288,
	334, 321, 363, 405, 517, 0, 0, 395, 565, 330,
	419, 0, 309, 452, 0, 541, 416, 0, 524, 544,
	0, 436, 315, 475, 531, 532, 858, 863, 0, 879,
	0, 319, 320, 441, 301, 449, 646, 612, 504, 462,
	460, 0, 427, 484, 641, 0, 0, 349, 0, 344,
	440, 580, 307, 559, 478, 445, 399, 507, 536, 346,
	331, 332, 375, 477, 365, 317, 570, 609, 613, 611,
	607, 604, 608, 605, 606, 610, 366, 603, 0, 578,
	587, 621, 601, 629, 586, 626, 596, 341, 625, 590,
	589, 635, 616, 617, 571, 631, 602, 600, 593, 592,
	588, 0, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 277, 0, 278, 279, 280, 282, 283, 284,
	857, 285, 286, 287, 290, 291, 292, 294, 654, 295,
	296, 297, 298, 299, 300, 591, 859, 302, 303, 304,
	305, 306, 308, 310, 311, 312, 313, 314, 316, 318,
	0, 0, 850, 862, 0, 0, 851, 322, 323, 324,
	325, 326, 327, 0, 328, 329, 333, 335, 336, 337,
	338, 339, 340, 343, 0, 345, 347, 0, 348, 351,
	0, 352, 353, 354, 355, 356, 357, 358, 359, 595,
	360, 0, 361, 362, 364, 0, 367, 368, 369, 370,
	371, 0, 372, 597, 598, 373, 374, 376, 377, 378,
	380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
	390, 391, 0, 392, 393, 394, 396, 0, 397, 398,
	401, 402, 403, 404, 0, 406, 614, 0, 407, 408,
	409, 0, 0, 410, 411, 412, 413, 414, 415, 418,
	615, 420, 421, 422, 423, 424, 425, 426, 656, 428,
	429, 430, 431, 432, 433, 434, 618, 619, 435, 437,
	438, 620, 622, 623, 875, 453, 454, 455, 456, 457,
	458, 459, 461, 0, 463, 464, 465, 624, 466, 467,
	468, 469, 0, 470, 471, 472, 473, 474, 476, 479,
	480, 481, 482, 0, 485, 486, 487, 488, 489, 490,
	491, 493, 494, 495, 497, 498, 499, 657, 500, 501,
	502, 503, 627, 505, 506, 658, 508, 509, 511, 512,
	513, 514, 515, 516, 667, 852, 518, 628, 519, 520,
	521, 522, 523, 0, 525, 526, 527, 528, 529, 530,
	533, 534, 535, 537, 538, 630, 539, 540, 0, 542,
	543, 878, 545, 546, 547, 548, 549, 0, 668, 550,
	632, 551, 633, 552, 553, 554, 555, 556, 557, 558,
	560, 0, 0, 562, 563, 564, 566, 567, 568, 569,
	572, 573, 574, 575, 576, 0, 577, 579, 581, 659,
	636, 637, 638, 639, 640, 642, 643, 644, 645, 582,
	583, 599, 450, 444, 400, 442, 443, 447, 448, 451,
	853, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 276, 0,
	293, 860, 0, 342, 379, 594, 0, 0, 439, 0,
	492, 496, 0, 585, 0, 0, 0, 0, 350, 0,
	865, 0, 871, 0, 877, 0, 561, 0, 867, 868,
	873, 281, 669, 584, 655, 0, 0, 0, 446, 0,
	0, 0, 0, 0, 0, 0, 289, 0, 0, 0,
	0, 869, 866, 870, 876, 864, 874, 861, 872, 0,
	483, 417, 634, 510, 288, 334, 321, 363, 405, 517,
	0, 0, 395, 565, 330, 419, 0, 309, 452, 0,
	541, 416, 0, 524, 544, 0, 436, 315, 475, 531,
	532, 858, 863, 0, 879, 0, 319, 320, 441, 301,
	449, 646, 612, 504, 462, 460, 0, 427, 484, 641,
	0, 0, 349, 0, 344, 440, 580, 307, 559, 478,
	445, 399, 507, 536, 346, 331, 332, 375, 477, 365,
	317, 570, 609, 613, 611, 607, 604, 608, 605, 606,
	610, 366, 603, 0, 578, 587, 621, 601, 629, 586,
	626, 596, 341, 625, 590, 589, 635, 616, 617, 571,
	631, 602, 600, 593, 592, 588, 0, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 277, 0, 278,
	279, 280, 282, 283, 284, 857, 285, 286, 287, 290,
	291, 292, 294, 654, 295, 296, 297, 298, 299, 300,
	591, 859, 302, 303, 304, 305, 306, 308, 310, 311,
	312, 313, 314, 316, 318, 0, 0, 850, 862, 0,
	0, 851, 322, 323, 324, 325, 326, 327, 0, 328,
	329, 333, 335, 336, 337, 338, 339, 340, 343, 0,
	345, 347, 0, 348, 351, 0, 352, 353, 354, 355,
	356, 357, 358, 359, 595, 360, 0, 361, 362, 364,
	0, 367, 368, 369, 370, 371, 0, 372, 597, 598,
	373, 374, 376, 377, 378, 380, 381, 382, 383, 384,
	385, 386, 387, 388, 389, 390, 391, 0, 392, 393,
	394, 396, 0, 397, 398, 401, 402, 403, 404, 0,
	406, 614, 0, 407, 408, 409, 0, 0, 410, 411,
	412, 413, 414, 415, 418, 615, 420, 421, 422, 423,
	424, 425, 426, 656, 428, 429, 430, 431, 432, 433,
	434, 618, 619, 435, 437, 438, 620, 622, 623, 875,
	453, 454, 455, 456, 457, 458, 459, 461, 0, 463,
	464, 465, 624, 466, 467, 468, 469, 0, 470, 471,
	472, 473, 474, 476, 479, 480, 481, 482, 0, 485,
	486, 487, 488, 489, 490, 491, 493, 494, 495, 497,
	498, 499, 657, 500, 501, 502, 503, 627, 505, 506,
	658, 508, 509, 511, 512, 513, 514, 515, 516, 667,
	852, 518, 628, 519, 520, 521, 522, 523, 0, 525,
	526, 527, 528, 529, 530, 533, 534, 535, 537, 538,
	630, 539, 540, 0, 542, 543, 878, 545, 546, 547,
	548, 549, 0, 668, 550, 632, 551, 633, 552, 553,
	554, 555, 556, 557, 558, 560, 0, 0, 562, 563,
	564, 566, 567, 568, 569, 572, 573, 574, 575, 576,
	0, 577, 579, 581, 659, 636, 637, 638, 639, 640,
	642, 643, 644, 645, 582, 583, 599, 450, 444, 400,
	442, 443, 447, 448, 451, 263, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 3709, 293, 0, 0, 342, 379,
	594, 0, 0, 439, 0, 492, 496, 0, 585, 0,
	0, 0, 0, 350, 0, 0, 0, 0, 0, 0,
	0, 561, 0, 0, 0, 0, 281, 669, 584, 655,
	0, 0, 0, 446, 0, 0, 0, 0, 0, 0,
	0, 289, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 483, 417, 634, 510, 288,
	334, 321, 363, 405, 517, 0, 0, 395, 565, 330,
	419, 0, 309, 452, 0, 541, 416, 0, 524, 544,
	0, 436, 315, 475, 531, 532, 0, 0, 0, 0,
	0, 319, 320, 441, 301, 449, 646, 612, 504, 462,
	460, 0, 427, 484, 641, 0, 0, 349, 0, 344,
	440, 580, 307, 559, 478, 445, 399, 507, 536, 346,
	331, 332, 375, 477, 365, 317, 570, 609, 613, 611,
	607, 604, 608, 605, 606, 610, 366, 603, 0, 578,
	587, 621, 601, 629, 586, 626, 596, 341, 625, 590,
	589, 635, 616, 617, 571, 631, 602, 600, 593, 592,
	588, 0, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 277, 0, 278, 279, 280, 282, 283, 284,
	0, 285, 286, 287, 290, 291, 292, 294, 654, 295,
	296, 297, 298, 299, 300, 591, 0, 302, 303, 304,
	305, 306, 308, 310, 311, 312, 313, 314, 316, 318,
	0, 0, 0, 0, 0, 0, 0, 322, 323, 324,
	325, 326, 327, 0, 328, 329, 333, 335, 336, 337,
	338, 339, 340, 343, 0, 345, 347, 0, 348, 351,
	0, 352, 353, 354, 355, 356, 357, 358, 359, 595,
	360, 0, 361, 362, 364, 0, 367, 368, 369, 370,
	371, 0, 372, 597, 598, 373, 374, 376, 377, 378,
	380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
	390, 391, 0, 392, 393, 394, 396, 0, 397, 398,
	401, 402, 403, 404, 0, 406, 614, 0, 407, 408,
	409, 0, 0, 410, 411, 412, 413, 414, 415, 418,
	615, 420, 421, 422, 423, 424, 425, 426, 656, 428,
	429, 430, 431, 432, 433, 434, 618, 619, 435, 437,
	438, 620, 622, 623, 0, 453, 454, 455, 456, 457,
	458, 459, 461, 0, 463, 464, 465, 624, 466, 467,
	468, 469, 0, 470, 471, 472, 473, 474, 476, 479,
	480, 481, 482, 0, 485, 486, 487, 488, 489, 490,
	491, 493, 494, 495, 497, 498, 499, 657, 500, 501,
	502, 503, 627, 505, 506, 658, 508, 509, 511, 512,
	513, 514, 515, 516, 667, 0, 518, 628, 519, 520,
	521, 522, 523, 0, 525, 526, 527, 528, 529, 530,
	533, 534, 535, 537, 538, 630, 539, 540, 0, 542,
	543, 0, 545, 546, 547, 548, 549, 0, 668, 550,
	632, 551, 633, 552, 553, 554, 555, 556, 557, 558,
	560, 0, 0, 562, 563, 564, 566, 567, 568, 569,
	572, 573, 574, 575, 576, 0, 577, 579, 581, 659,
	636, 637, 638, 639, 640, 642, 643, 644, 645, 582,
	583, 599, 450, 444, 400, 442, 443, 447, 448, 451,
	0, 853, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 860, 1148, 342, 1012, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 865, 0, 871, 0, 877, 0, 561, 0, 867,
	868, 873, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 869, 866, 870, 876, 864, 874, 861, 872,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 858, 863, 0, 879, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 857, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 859, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 850, 862,
	0, 0, 851, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	875, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 852, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 878, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 853, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 860, 0, 342,
	1010, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 865, 0, 871, 0,
	877, 0, 561, 0, 867, 868, 873, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 869, 866, 870,
	876, 864, 874, 861, 872, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 858, 863, 0,
	879, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 857, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 859, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 850, 862, 0, 0, 851, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 875, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 852, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 878, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 853, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 860, 0, 342, 1007, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 865, 0, 871, 0, 877, 0, 561, 0, 867,
	868, 873, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 869, 866, 870, 876, 864, 874, 861, 872,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 858, 863, 0, 879, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 857, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 859, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 850, 862,
	0, 0, 851, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 1005, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	875, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 852, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 878, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 853, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 860, 0, 342,
	379, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 865, 0, 871, 0,
	877, 0, 561, 0, 867, 868, 873, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 869, 866, 870,
	876, 864, 874, 861, 872, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 858, 863, 0,
	879, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 857, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 859, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 850, 862, 0, 0, 851, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 846, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 875, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 852, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 878, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 853, 0, 0, 1034, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 860, 0, 342, 379, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 1583, 0, 350,
	0, 865, 0, 871, 0, 877, 0, 561, 0, 867,
	868, 873, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 869, 866, 870, 876, 864, 874, 861, 872,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 858, 863, 0, 879, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 857, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 859, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 862,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	875, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 878, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 0, 0, 342,
	379, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 0, 2396, 342, 379, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 853, 0, 0, 1034,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 860, 4237, 342,
	379, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 865, 0, 871, 0,
	877, 0, 561, 0, 867, 868, 873, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 869, 866, 870,
	876, 864, 874, 861, 872, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 858, 863, 0,
	879, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 857, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 859, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 862, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 875, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 878, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 0, 0, 342, 379, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 0, 3586, 342,
	379, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 917, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 860, 1274, 342, 379, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 865, 0, 871, 0, 877, 0, 561, 0, 867,
	868, 873, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 869, 866, 870, 876, 864, 874, 861, 872,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 858, 863, 0, 879, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 857, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 859, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 862,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	875, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 878, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 853, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 860, 0, 342,
	379, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 865, 0, 871, 0,
	877, 0, 561, 0, 867, 868, 873, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 869, 866, 870,
	876, 864, 874, 861, 872, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 858, 863, 0,
	879, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 857, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 859, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 862, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 875, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 878, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 3142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 860, 0, 342, 379, 0, 0, 0, 439,
	0, 492, 496, 0, 0, 0, 0, 0, 0, 350,
	0, 865, 2592, 871, 0, 877, 0, 561, 0, 867,
	868, 873, 281, 992, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 869, 866, 870, 876, 864, 874, 861, 872,
	0, 483, 417, 0, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 858, 863, 0, 879, 0, 319, 320, 441,
	301, 449, 0, 0, 504, 462, 460, 0, 427, 484,
	0, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 366, 0, 0, 578, 995, 985, 977, 978,
	979, 980, 981, 982, 0, 997, 998, 999, 1000, 1001,
	571, 991, 0, 976, 983, 984, 986, 2595, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 857, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 0, 859, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 862,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 0,
	0, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 0, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 0, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 0, 0, 435, 437, 438, 0, 2593, 0,
	875, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 0, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 0, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 2598, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 0, 539, 540, 0, 542, 543, 878, 545, 546,
	547, 548, 549, 0, 668, 550, 0, 551, 0, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 0, 0, 0, 263,
	0, 0, 0, 0, 0, 582, 583, 2594, 450, 444,
	400, 442, 443, 447, 448, 451, 3137, 276, 0, 293,
	0, 0, 342, 2510, 594, 0, 0, 439, 0, 492,
	496, 0, 585, 0, 0, 0, 0, 350, 0, 0,
	0, 0, 0, 3135, 0, 561, 0, 0, 0, 0,
	281, 669, 584, 655, 0, 0, 0, 446, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 483,
	417, 634, 510, 288, 334, 321, 363, 405, 517, 0,
	0, 395, 565, 330, 419, 0, 309, 452, 0, 541,
	416, 0, 524, 544, 0, 436, 315, 475, 531, 532,
	0, 0, 2514, 0, 0, 319, 320, 441, 301, 449,
	646, 612, 504, 462, 460, 0, 427, 484, 641, 0,
	0, 349, 0, 344, 440, 580, 307, 559, 478, 445,
	399, 507, 536, 346, 331, 332, 375, 477, 365, 317,
	570, 609, 613, 611, 607, 604, 608, 605, 606, 610,
	366, 603, 0, 578, 587, 621, 601, 629, 586, 626,
	596, 341, 625, 590, 589, 635, 616, 617, 571, 631,
	602, 600, 593, 592, 588, 0, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 277, 0, 278, 279,
	280, 282, 283, 284, 0, 285, 286, 287, 290, 291,
	292, 294, 654, 295, 296, 297, 298, 299, 300, 591,
	0, 302, 303, 304, 305, 306, 308, 310, 311, 312,
	313, 314, 316, 318, 0, 0, 0, 0, 0, 0,
	0, 322, 323, 324, 325, 326, 327, 0, 328, 329,
	333, 335, 336, 337, 338, 339, 340, 343, 0, 345,
	347, 0, 348, 351, 0, 2520, 353, 354, 355, 356,
	357, 358, 359, 595, 360, 0, 361, 362, 364, 2519,
	367, 368, 369, 370, 371, 0, 372, 597, 598, 373,
	374, 376, 377, 378, 380, 381, 382, 383, 384, 385,
	386, 387, 388, 389, 390, 391, 0, 392, 393, 394,
	396, 0, 397, 398, 401, 402, 403, 404, 0, 406,
	614, 0, 407, 408, 409, 0, 0, 410, 411, 412,
	413, 414, 415, 418, 615, 420, 421, 422, 423, 424,
	425, 426, 656, 428, 429, 430, 431, 432, 433, 434,
	618, 619, 435, 437, 438, 620, 622, 623, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 0, 463, 464,
	465, 624, 466, 467, 468, 469, 2518, 470, 471, 472,
	473, 474, 476, 479, 480, 481, 482, 0, 485, 486,
	487, 488, 489, 490, 491, 493, 494, 495, 497, 498,
	499, 657, 500, 501, 502, 503, 627, 505, 506, 658,
	508, 509, 511, 512, 513, 514, 515, 516, 667, 0,
	518, 628, 519, 520, 521, 522, 523, 0, 525, 526,
	527, 528, 529, 530, 533, 534, 535, 537, 538, 630,
	539, 540, 0, 542, 543, 0, 545, 546, 547, 548,
	549, 0, 668, 550, 632, 551, 633, 552, 553, 554,
	555, 556, 557, 558, 560, 0, 2517, 562, 563, 564,
	566, 567, 568, 569, 572, 573, 574, 575, 576, 0,
	577, 579, 581, 659, 636, 637, 638, 639, 640, 642,
	643, 644, 645, 582, 583, 599, 450, 444, 400, 442,
	443, 447, 448, 451, 263, 0, 0, 0, 2516, 2511,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 276, 0, 293, 0, 0, 342, 379, 594,
	0, 0, 439, 0, 492, 496, 0, 585, 0, 0,
	0, 0, 350, 0, 0, 0, 3099, 0, 0, 0,
	561, 0, 0, 0, 0, 281, 669, 584, 655, 0,
	0, 0, 446, 0, 0, 0, 0, 0, 0, 0,
	289, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 483, 417, 634, 510, 288, 334,
	321, 363, 405, 517, 0, 0, 395, 565, 330, 419,
	0, 309, 452, 0, 541, 416, 0, 524, 544, 0,
	436, 315, 475, 531, 532, 0, 0, 2514, 0, 0,
	319, 320, 441, 301, 449, 646, 612, 504, 462, 460,
	0, 427, 484, 641, 0, 0, 349, 0, 344, 440,
	580, 307, 559, 478, 445, 399, 507, 536, 346, 331,
	332, 375, 477, 365, 317, 570, 609, 613, 611, 607,
	604, 608, 605, 606, 610, 366, 603, 0, 578, 587,
	621, 601, 629, 586, 626, 596, 341, 625, 590, 589,
	635, 616, 617, 571, 631, 602, 600, 593, 592, 588,
	0, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 277, 0, 278, 279, 280, 282, 283, 284, 0,
	285, 286, 287, 290, 291, 292, 294, 654, 295, 296,
	297, 298, 299, 300, 591, 0, 302, 303, 304, 305,
	306, 308, 310, 311, 312, 313, 314, 316, 318, 0,
	0, 0, 0, 0, 0, 0, 322, 323, 324, 325,
	326, 327, 0, 328, 329, 333, 335, 336, 337, 338,
	339, 340, 343, 0, 345, 347, 0, 348, 351, 0,
	2520, 353, 354, 355, 356, 357, 358, 359, 595, 360,
	0, 361, 362, 364, 2519, 367, 368, 369, 370, 371,
	0, 372, 597, 598, 373, 374, 376, 377, 378, 380,
	381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
	391, 0, 392, 393, 394, 396, 0, 397, 398, 401,
	402, 403, 404, 0, 406, 614, 0, 407, 408, 409,
	0, 0, 410, 411, 412, 413, 414, 415, 418, 615,
	420, 421, 422, 423, 424, 425, 426, 656, 428, 429,
	430, 431, 432, 433, 434, 618, 619, 435, 437, 438,
	620, 622, 623, 0, 453, 454, 455, 456, 457, 458,
	459, 461, 0, 463, 464, 465, 624, 466, 467, 468,
	469, 2518, 470, 471, 472, 473, 474, 476, 479, 480,
	481, 482, 0, 485, 486, 487, 488, 489, 490, 491,
	493, 494, 495, 497, 498, 499, 657, 500, 501, 502,
	503, 627, 505, 506, 658, 508, 509, 511, 512, 513,
	514, 515, 516, 667, 0, 518, 628, 519, 520, 521,
	522, 523, 0, 525, 526, 527, 528, 529, 530, 533,
	534, 535, 537, 538, 630, 539, 540, 0, 542, 543,
	0, 545, 546, 547, 548, 549, 0, 668, 550, 632,
	551, 633, 552, 553, 554, 555, 556, 557, 558, 560,
	0, 2517, 562, 563, 564, 566, 567, 568, 569, 572,
	573, 574, 575, 576, 0, 577, 579, 581, 659, 636,
	637, 638, 639, 640, 642, 643, 644, 645, 582, 583,
	599, 450, 444, 400, 442, 443, 447, 448, 451, 263,
	0, 0, 0, 2516, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 276, 0, 293,
	0, 0, 342, 379, 594, 0, 0, 439, 0, 492,
	496, 0, 585, 0, 0, 0, 0, 350, 0, 0,
	0, 0, 0, 0, 0, 561, 0, 0, 0, 0,
	281, 669, 584, 655, 0, 0, 0, 446, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 483,
	417, 634, 510, 288, 334, 321, 363, 405, 517, 0,
	0, 395, 565, 330, 419, 0, 309, 452, 0, 541,
	416, 0, 524, 544, 0, 436, 315, 475, 531, 532,
	0, 0, 2514, 0, 0, 319, 320, 441, 301, 449,
	646, 612, 504, 462, 460, 0, 427, 484, 641, 0,
	0, 349, 0, 344, 440, 580, 307, 559, 478, 445,
	399, 507, 536, 346, 331, 332, 375, 477, 365, 317,
	570, 609, 613, 611, 607, 604, 608, 605, 606, 610,
	366, 603, 0, 578, 587, 621, 601, 629, 586, 626,
	596, 341, 625, 590, 589, 635, 616, 617, 571, 631,
	602, 600, 593, 592, 588, 0, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 277, 0, 278, 279,
	280, 282, 283, 284, 0, 285, 286, 287, 290, 291,
	292, 294, 654, 295, 296, 297, 298, 299, 300, 591,
	0, 302, 303, 304, 305, 306, 308, 310, 311, 312,
	313, 314, 316, 318, 0, 0, 0, 0, 0, 0,
	0, 322, 323, 324, 325, 326, 327, 0, 328, 329,
	333, 335, 336, 337, 338, 339, 340, 343, 0, 345,
	347, 0, 348, 351, 0, 2520, 353, 354, 355, 356,
	357, 358, 359, 595, 360, 0, 361, 362, 364, 2519,
	367, 368, 369, 370, 371, 0, 372, 597, 598, 373,
	374, 376, 377, 378, 380, 381, 382, 383, 384, 385,
	386, 387, 388, 389, 390, 391, 0, 392, 393, 394,
	396, 0, 397, 398, 401, 402, 403, 404, 0, 406,
	614, 0, 407, 408, 409, 0, 0, 410, 411, 412,
	413, 414, 415, 418, 615, 420, 421, 422, 423, 424,
	425, 426, 656, 428, 429, 430, 431, 432, 433, 434,
	618, 619, 435, 437, 438, 620, 622, 623, 0, 453,
	454, 455, 456, 457, 458, 459, 461, 0, 463, 464,
	465, 624, 466, 467, 468, 469, 2518, 470, 471, 472,
	473, 474, 476, 479, 480, 481, 482, 0, 485, 486,
	487, 488, 489, 490, 491, 493, 494, 495, 497, 498,
	499, 657, 500, 501, 502, 503, 627, 505, 506, 658,
	508, 509, 511, 512, 513, 514, 515, 516, 667, 0,
	518, 628, 519, 520, 521, 522, 523, 0, 525, 526,
	527, 528, 529, 530, 533, 534, 535, 537, 538, 630,
	539, 540, 0, 542, 543, 0, 545, 546, 547, 548,
	549, 0, 668, 550, 632, 551, 633, 552, 553, 554,
	555, 556, 557, 558, 560, 0, 2517, 562, 563, 564,
	566, 567, 568, 569, 572, 573, 574, 575, 576, 0,
	577, 579, 581, 659, 636, 637, 638, 639, 640, 642,
	643, 644, 645, 582, 583, 599, 450, 444, 400, 442,
	443, 447, 448, 451, 993, 0, 0, 0, 2516, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 276, 0, 293, 860, 0, 342, 379, 0,
	0, 0, 439, 0, 492, 496, 0, 0, 0, 0,
	0, 0, 350, 0, 865, 2592, 871, 0, 877, 0,
	561, 0, 867, 868, 873, 281, 992, 584, 655, 0,
	0, 0, 446, 0, 0, 0, 0, 0, 0, 0,
	289, 0, 0, 0, 0, 869, 866, 870, 876, 864,
	874, 861, 872, 0, 483, 417, 0, 510, 288, 334,
	321, 363, 405, 517, 0, 0, 395, 565, 330, 419,
	0, 309, 452, 0, 541, 416, 0, 524, 544, 0,
	436, 315, 475, 531, 532, 858, 863, 0, 879, 0,
	319, 320, 441, 301, 449, 0, 0, 504, 462, 460,
	0, 427, 484, 0, 0, 0, 349, 0, 344, 440,
	580, 307, 559, 478, 445, 399, 507, 536, 346, 331,
	332, 375, 477, 365, 317, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 366, 0, 0, 578, 995,
	985, 977, 978, 979, 980, 981, 982, 0, 997, 998,
	999, 1000, 1001, 571, 991, 0, 976, 983, 984, 986,
	2595, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 277, 0, 278, 279, 280, 282, 283, 284, 857,
	285, 286, 287, 290, 291, 292, 294, 654, 295, 296,
	297, 298, 299, 300, 0, 859, 302, 303, 304, 305,
	306, 308, 310, 311, 312, 313, 314, 316, 318, 0,
	0, 0, 862, 0, 0, 0, 322, 323, 324, 325,
	326, 327, 0, 328, 329, 333, 335, 336, 337, 338,
	339, 340, 343, 0, 345, 347, 0, 348, 351, 0,
	352, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	0, 361, 362, 364, 0, 367, 368, 369, 370, 371,
	0, 372, 0, 0, 373, 374, 376, 377, 378, 380,
	381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
	391, 0, 392, 393, 394, 396, 0, 397, 398, 401,
	402, 403, 404, 0, 406, 0, 0, 407, 408, 409,
	0, 0, 410, 411, 412, 413, 414, 415, 418, 0,
	420, 421, 422, 423, 424, 425, 426, 656, 428, 429,
	430, 431, 432, 433, 434, 0, 0, 435, 437, 438,
	0, 2593, 0, 875, 453, 454, 455, 456, 457, 458,
	459, 461, 0, 463, 464, 465, 0, 466, 467, 468,
	469, 0, 470, 471, 472, 473, 474, 476, 479, 480,
	481, 482, 0, 485, 486, 487, 488, 489, 490, 491,
	493, 494, 495, 497, 498, 499, 657, 500, 501, 502,
	503, 0, 505, 506, 658, 508, 509, 511, 512, 513,
	514, 515, 516, 667, 0, 518, 2598, 519, 520, 521,
	522, 523, 0, 525, 526, 527, 528, 529, 530, 533,
	534, 535, 537, 538, 0, 539, 540, 0, 542, 543,
	878, 545, 546, 547, 548, 549, 0, 668, 550, 0,
	551, 0, 552, 553, 554, 555, 556, 557, 558, 560,
	0, 0, 562, 563, 564, 566, 567, 568, 569, 572,
	573, 574, 575, 576, 0, 577, 579, 581, 659, 0,
	0, 0, 0, 993, 0, 0, 0, 0, 582, 583,
	2594, 450, 444, 400, 442, 443, 447, 448, 451, 0,
	0, 276, 0, 293, 860, 0, 342, 379, 0, 0,
	0, 439, 0, 492, 496, 0, 0, 0, 0, 0,
	0, 350, 3122, 865, 2592, 871, 0, 877, 0, 561,
	0, 867, 868, 873, 281, 992, 584, 655, 0, 0,
	0, 446, 0, 0, 0, 0, 0, 0, 0, 289,
	0, 0, 0, 0, 869, 866, 870, 876, 864, 874,
	861, 872, 0, 483, 417, 0, 510, 288, 334, 321,
	363, 405, 517, 0, 0, 395, 565, 330, 419, 0,
	309, 452, 0, 541, 416, 0, 524, 544, 0, 436,
	315, 475, 531, 532, 858, 863, 0, 879, 0, 319,
	320, 441, 301, 449, 0, 0, 504, 462, 460, 0,
	427, 484, 0, 0, 0, 349, 0, 344, 440, 580,
	307, 559, 478, 445, 399, 507, 536, 346, 331, 332,
	375, 477, 365, 317, 570, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 366, 0, 0, 578, 995, 985,
	977, 978, 979, 980, 981, 982, 0, 997, 998, 999,
	1000, 1001, 571, 991, 0, 976, 983, 984, 986, 2595,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	277, 0, 278, 279, 280, 282, 283, 284, 857, 285,
	286, 287, 290, 291, 292, 294, 654, 295, 296, 297,
	298, 299, 300, 0, 859, 302, 303, 304, 305, 306,
	308, 310, 311, 312, 313, 314, 316, 318, 0, 0,
	0, 862, 0, 0, 0, 322, 323, 324, 325, 326,
	327, 0, 328, 329, 333, 335, 336, 337, 338, 339,
	340, 343, 0, 345, 347, 0, 348, 351, 0, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 0,
	361, 362, 364, 0, 367, 368, 369, 370, 371, 0,
	372, 0, 0, 373, 374, 376, 377, 378, 380, 381,
	382, 383, 384, 385, 386, 387, 388, 389, 390, 391,
	0, 392, 393, 394, 396, 0, 397, 398, 401, 402,
	403, 404, 0, 406, 0, 0, 407, 408, 409, 0,
	0, 410, 411, 412, 413, 414, 415, 418, 0, 420,
	421, 422, 423, 424, 425, 426, 656, 428, 429, 430,
	431, 432, 433, 434, 0, 0, 435, 437, 438, 0,
	2593, 0, 875, 453, 454, 455, 456, 457, 458, 459,
	461, 0, 463, 464, 465, 0, 466, 467, 468, 469,
	0, 470, 471, 472, 473, 474, 476, 479, 480, 481,
	482, 0, 485, 486, 487, 488, 489, 490, 491, 493,
	494, 495, 497, 498, 499, 657, 500, 501, 502, 503,
	0, 505, 506, 658, 508, 509, 511, 512, 513, 514,
	515, 516, 667, 0, 518, 2598, 519, 520, 521, 522,
	523, 0, 525, 526, 527, 528, 529, 530, 533, 534,
	535, 537, 538, 0, 539, 540, 0, 542, 543, 878,
	545, 546, 547, 548, 549, 0, 668, 550, 0, 551,
	0, 552, 553, 554, 555, 556, 557, 558, 560, 0,
	0, 562, 563, 564, 566, 567, 568, 569, 572, 573,
	574, 575, 576, 0, 577, 579, 581, 659, 0, 0,
	0, 263, 0, 0, 0, 0, 0, 582, 583, 2594,
	450, 444, 400, 442, 443, 447, 448, 451, 677, 682,
	0, 293, 0, 681, 342, 379, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 2587, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	679, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 3432, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 680,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 677, 682, 0, 293, 0, 681, 342,
	379, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 679, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 685, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 680, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 677, 682,
	0, 293, 0, 681, 342, 379, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	679, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 680,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2487, 276, 0, 293, 0, 0, 342,
	379, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 768, 2490,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 2494, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	2491, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1637, 276,
	0, 293, 0, 0, 342, 379, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 1623, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 1629, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 1630, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 1625, 367, 1626, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 1631, 1632,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 1633, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 1627, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 1628, 503, 627, 505,
	506, 1634, 508, 509, 511, 512, 1624, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 1635, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 1636, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 0, 0, 342,
	379, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 768, 2490,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 2494, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	2491, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 682,
	0, 293, 0, 681, 342, 379, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	679, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 680,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3275, 276, 0, 293, 0, 0, 342,
	379, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 3276, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3266, 276,
	0, 293, 0, 0, 342, 379, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	3267, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 900, 276, 0, 293, 0, 0, 342,
	899, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 768, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 0, 0, 342, 379, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 768, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 0, 0, 342,
	379, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 4732, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	3709, 293, 0, 0, 342, 379, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 0, 0, 342,
	379, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 4382, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 0, 0, 342, 379, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 4366,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 3721, 293, 0, 0, 342,
	379, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 0, 0, 342, 379, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 3926, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 740, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 0, 0, 342,
	379, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 0, 0, 342, 379, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 2856, 0, 0, 0, 446,
	0, 0, 0, 0, 2859, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 2857, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 2855, 546,
	2854, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	2858, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 653, 276, 0, 293, 0, 0, 342,
	379, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 0, 0, 342, 1424, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 768, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1422, 276, 0, 293, 0, 0, 342,
	1421, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1127, 276,
	0, 293, 0, 0, 342, 379, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 0, 0, 342,
	379, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 256, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 1025, 285, 286, 287, 290, 291, 292, 294, 257,
	295, 1024, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 259,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 260, 500,
	501, 502, 503, 627, 505, 506, 258, 508, 509, 511,
	512, 513, 514, 515, 516, 1022, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 252,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	261, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 903, 276,
	0, 293, 0, 0, 342, 902, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 747, 276, 0, 293, 0, 0, 342,
	379, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	746, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 743, 276,
	0, 293, 0, 0, 342, 379, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 710, 276, 0, 293, 0, 0, 342,
	379, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 707, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 709, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 708,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 653, 276,
	0, 293, 0, 0, 342, 379, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 649, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	651, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 650, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 0, 0, 342,
	379, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 5596, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 0, 0, 342, 379, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 0, 0, 342,
	4302, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 0, 0, 342, 3405, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 0, 0, 342,
	379, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 256, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 257,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 259,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 260, 500,
	501, 502, 503, 627, 505, 506, 258, 508, 509, 511,
	512, 513, 514, 515, 516, 1022, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 252,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	261, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 0, 0, 342, 3346, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 0, 0, 342,
	3254, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 0, 0, 342, 3252, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 0, 0, 342,
	3238, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 0, 0, 342, 379, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 256, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 257, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 259, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 260, 500, 501, 502, 503, 627, 505,
	506, 258, 508, 509, 511, 512, 513, 514, 515, 516,
	2630, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 2631, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 261, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 0, 0, 342,
	2478, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 0, 0, 342, 2419, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 0, 0, 342,
	379, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 1616, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 0, 0, 342, 1567, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 0, 0, 342,
	1344, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 0, 0, 342, 1305, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 0, 0, 342,
	1300, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	1294, 293, 0, 0, 342, 379, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	0, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 0, 0, 342,
	965, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 0, 0, 342, 961, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 0, 0, 342,
	958, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 0, 0, 342, 953, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 0, 0, 342,
	934, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 0, 0, 342, 907, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 0, 0, 342,
	905, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 0, 0, 342, 886, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 0, 0, 342,
	845, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 0, 0, 342, 841, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 0, 0, 342,
	839, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 0, 0, 342, 814, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 668, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 0, 0, 342,
	379, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 771, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 0, 0, 342, 379, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 669, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 627, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 672, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 0, 0, 342,
	379, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 504,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 670, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 0, 0, 342, 379, 594, 0, 0, 439,
	0, 492, 496, 0, 585, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 0,
	0, 0, 281, 256, 584, 250, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 417, 634, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 0, 0, 0, 0, 0, 319, 320, 441,
	301, 449, 646, 612, 504, 462, 460, 0, 427, 484,
	641, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 609, 613, 611, 607, 604, 608, 605,
	606, 610, 366, 603, 0, 578, 587, 621, 601, 629,
	586, 626, 596, 341, 625, 590, 589, 635, 616, 617,
	571, 631, 602, 600, 593, 592, 588, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 0, 285, 286, 287,
	290, 291, 292, 294, 257, 295, 296, 297, 298, 299,
	300, 591, 0, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 0,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 595, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 597,
	598, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 614, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 615, 420, 421, 422,
	423, 424, 425, 426, 259, 428, 429, 430, 431, 432,
	433, 434, 618, 619, 435, 437, 438, 620, 622, 623,
	0, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 624, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 260, 500, 501, 502, 503, 627, 505,
	506, 258, 508, 509, 511, 512, 513, 514, 515, 516,
	251, 0, 518, 628, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 630, 539, 540, 0, 542, 543, 0, 545, 546,
	547, 548, 549, 0, 252, 550, 632, 551, 633, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 261, 636, 637, 638, 639,
	640, 642, 643, 644, 645, 582, 583, 599, 450, 444,
	400, 442, 443, 447, 448, 451, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 293, 0, 0, 342,
	379, 594, 0, 0, 439, 0, 492, 496, 0, 585,
	0, 0, 0, 0, 350, 0, 0, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 281, 669, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 417, 634, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 0, 0, 0,
	0, 0, 319, 320, 441, 301, 449, 646, 612, 0,
	462, 460, 0, 427, 484, 641, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 609, 613,
	611, 607, 604, 608, 605, 606, 610, 366, 603, 0,
	578, 587, 621, 601, 629, 586, 626, 596, 341, 625,
	590, 589, 635, 616, 617, 571, 631, 602, 600, 593,
	592, 588, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 0, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 591, 0, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	595, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 597, 598, 0, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 614, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 615, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 618, 619, 435,
	437, 438, 620, 622, 623, 0, 453, 454, 455, 456,
	457, 458, 0, 461, 0, 463, 464, 465, 624, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	0, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 627, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 628, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 630, 539, 540, 0,
	542, 543, 0, 545, 546, 547, 548, 549, 0, 668,
	550, 632, 551, 633, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	582, 583, 599, 450, 444, 400, 442, 443, 447, 448,
	451, 993, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 276,
	0, 293, 860, 0, 342, 379, 0, 0, 0, 439,
	0, 492, 496, 0, 0, 0, 0, 0, 0, 350,
	0, 865, 2592, 871, 0, 877, 0, 561, 0, 867,
	868, 873, 281, 992, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 869, 866, 870, 876, 864, 874, 861, 872,
	0, 483, 417, 0, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 858, 863, 0, 879, 0, 319, 320, 441,
	301, 449, 0, 0, 504, 462, 460, 0, 427, 484,
	0, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 366, 0, 0, 578, 995, 985, 977, 978,
	979, 980, 981, 982, 0, 997, 998, 999, 1000, 1001,
	571, 991, 0, 976, 983, 984, 986, 2595, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 857, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 0, 859, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 862,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 0,
	0, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 0, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 0, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 0, 0, 435, 437, 438, 0, 2593, 0,
	875, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 0, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 0, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 2598, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 0, 539, 540, 0, 542, 543, 878, 545, 546,
	547, 548, 549, 0, 668, 550, 0, 551, 0, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 0, 0, 993, 0,
	0, 0, 0, 0, 0, 582, 583, 2594, 450, 444,
	400, 442, 443, 447, 448, 451, 276, 0, 293, 860,
	0, 342, 379, 0, 0, 0, 439, 0, 492, 496,
	0, 0, 0, 0, 0, 0, 350, 0, 865, 0,
	871, 2620, 877, 0, 561, 0, 867, 868, 873, 281,
	992, 584, 655, 0, 0, 0, 446, 0, 0, 0,
	0, 3758, 0, 0, 289, 0, 0, 0, 0, 869,
	866, 870, 876, 864, 874, 861, 872, 0, 483, 417,
	0, 510, 288, 334, 321, 363, 405, 517, 0, 0,
	395, 565, 330, 419, 0, 309, 452, 0, 541, 416,
	0, 524, 544, 0, 436, 315, 475, 531, 532, 858,
	863, 0, 879, 0, 319, 320, 441, 301, 449, 0,
	0, 504, 462, 460, 0, 427, 484, 0, 0, 0,
	349, 0, 344, 440, 580, 307, 559, 478, 445, 399,
	507, 536, 346, 331, 332, 375, 477, 365, 317, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 366,
	0, 0, 578, 995, 985, 977, 978, 979, 980, 981,
	982, 0, 997, 998, 999, 1000, 1001, 571, 991, 0,
	976, 983, 984, 986, 0, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 277, 0, 278, 279, 280,
	282, 283, 284, 857, 285, 286, 287, 290, 291, 292,
	294, 654, 295, 296, 297, 298, 299, 300, 0, 859,
	302, 303, 304, 305, 306, 308, 310, 311, 312, 313,
	314, 316, 318, 0, 0, 0, 862, 0, 0, 0,
	322, 323, 324, 325, 326, 327, 0, 328, 329, 333,
	335, 336, 337, 338, 339, 340, 343, 0, 345, 347,
	0, 348, 351, 0, 352, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 0, 361, 362, 364, 0, 367,
	368, 369, 370, 371, 0, 372, 0, 0, 373, 374,
	376, 377, 378, 380, 381, 382, 383, 384, 385, 386,
	387, 388, 389, 390, 391, 0, 392, 393, 394, 396,
	0, 397, 398, 401, 402, 403, 404, 0, 406, 0,
	0, 407, 408, 409, 0, 0, 410, 411, 412, 413,
	414, 415, 418, 0, 420, 421, 422, 423, 424, 425,
	426, 656, 428, 429, 430, 431, 432, 433, 434, 0,
	0, 435, 437, 438, 0, 0, 0, 875, 453, 454,
	455, 456, 457, 458, 459, 461, 0, 463, 464, 465,
	0, 466, 467, 468, 469, 0, 470, 471, 472, 473,
	474, 476, 479, 480, 481, 482, 0, 485, 486, 487,
	488, 489, 490, 491, 493, 494, 495, 497, 498, 499,
	657, 500, 501, 502, 503, 0, 505, 506, 658, 508,
	509, 511, 512, 513, 514, 515, 516, 667, 0, 518,
	2598, 519, 520, 521, 522, 523, 0, 525, 526, 527,
	528, 529, 530, 533, 534, 535, 537, 538, 0, 539,
	540, 0, 542, 543, 878, 545, 546, 547, 548, 549,
	0, 668, 550, 0, 551, 0, 552, 553, 554, 555,
	556, 557, 558, 560, 0, 0, 562, 563, 564, 566,
	567, 568, 569, 572, 573, 574, 575, 576, 0, 577,
	579, 581, 659, 0, 0, 993, 0, 0, 0, 0,
	0, 0, 582, 583, 0, 450, 444, 400, 442, 443,
	447, 448, 451, 276, 0, 293, 860, 0, 342, 379,
	0, 0, 0, 439, 0, 492, 496, 0, 0, 0,
	0, 0, 0, 350, 0, 865, 0, 871, 0, 877,
	0, 561, 0, 867, 868, 873, 281, 992, 584, 655,
	0, 0, 0, 446, 0, 0, 0, 0, 0, 0,
	0, 289, 0, 0, 0, 0, 869, 866, 870, 876,
	864, 874, 861, 872, 0, 483, 417, 0, 510, 288,
	334, 321, 363, 405, 517, 0, 0, 395, 565, 330,
	419, 0, 309, 452, 0, 541, 416, 0, 524, 544,
	0, 436, 315, 475, 531, 532, 858, 863, 0, 879,
	0, 319, 320, 441, 301, 449, 0, 0, 504, 462,
	460, 5630, 427, 484, 0, 0, 0, 349, 0, 344,
	440, 580, 307, 559, 478, 445, 399, 507, 536, 346,
	331, 332, 375, 477, 365, 317, 570, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 366, 0, 0, 578,
	995, 985, 977, 978, 979, 980, 981, 982, 0, 997,
	998, 999, 1000, 1001, 571, 991, 0, 976, 983, 984,
	986, 0, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 277, 0, 278, 279, 280, 282, 283, 284,
	857, 285, 286, 287, 290, 291, 292, 294, 654, 295,
	296, 297, 298, 299, 300, 0, 859, 302, 303, 304,
	305, 306, 308, 310, 311, 312, 313, 314, 316, 318,
	0, 0, 0, 862, 0, 0, 0, 322, 323, 324,
	325, 326, 327, 0, 328, 329, 333, 335, 336, 337,
	338, 339, 340, 343, 0, 345, 347, 0, 348, 351,
	0, 352, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 0, 361, 362, 364, 0, 367, 368, 369, 370,
	371, 0, 372, 0, 0, 373, 374, 376, 377, 378,
	380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
	390, 391, 0, 392, 393, 394, 396, 0, 397, 398,
	401, 402, 403, 404, 0, 406, 0, 0, 407, 408,
	409, 0, 0, 410, 411, 412, 413, 414, 415, 418,
	0, 420, 421, 422, 423, 424, 425, 426, 656, 428,
	429, 430, 431, 432, 433, 434, 0, 0, 435, 437,
	438, 0, 0, 0, 875, 453, 454, 455, 456, 457,
	458, 459, 461, 0, 463, 464, 465, 0, 466, 467,
	468, 469, 0, 470, 471, 472, 473, 474, 476, 479,
	480, 481, 482, 0, 485, 486, 487, 488, 489, 490,
	491, 493, 494, 495, 497, 498, 499, 657, 500, 501,
	502, 503, 0, 505, 506, 658, 508, 509, 511, 512,
	513, 514, 515, 516, 667, 0, 518, 0, 519, 520,
	521, 522, 523, 0, 525, 526, 527, 528, 529, 530,
	533, 534, 535, 537, 538, 0, 539, 540, 0, 542,
	543, 878, 545, 546, 547, 548, 549, 0, 668, 550,
	0, 551, 0, 552, 553, 554, 555, 556, 557, 558,
	560, 0, 0, 562, 563, 564, 566, 567, 568, 569,
	572, 573, 574, 575, 576, 0, 577, 579, 581, 659,
	0, 0, 993, 0, 0, 0, 0, 0, 0, 582,
	583, 0, 450, 444, 400, 442, 443, 447, 448, 451,
	276, 0, 293, 860, 0, 342, 379, 0, 0, 0,
	439, 0, 492, 496, 0, 0, 0, 0, 0, 0,
	350, 0, 865, 0, 871, 0, 877, 0, 561, 0,
	867, 868, 873, 281, 992, 584, 655, 0, 0, 0,
	446, 0, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 0, 869, 866, 870, 876, 864, 874, 861,
	872, 0, 483, 417, 0, 510, 288, 334, 321, 363,
	405, 517, 0, 0, 395, 565, 330, 419, 0, 309,
	452, 0, 541, 416, 0, 524, 544, 0, 436, 315,
	475, 531, 532, 858, 863, 0, 879, 0, 319, 320,
	441, 301, 449, 0, 0, 504, 462, 460, 5301, 427,
	484, 0, 0, 0, 349, 0, 344, 440, 580, 307,
	559, 478, 445, 399, 507, 536, 346, 331, 332, 375,
	477, 365, 317, 570, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 366, 0, 0, 578, 995, 985, 977,
	978, 979, 980, 981, 982, 0, 997, 998, 999, 1000,
	1001, 571, 991, 0, 976, 983, 984, 986, 0, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 277,
	0, 278, 279, 280, 282, 283, 284, 857, 285, 286,
	287, 290, 291, 292, 294, 654, 295, 296, 297, 298,
	299, 300, 0, 859, 302, 303, 304, 305, 306, 308,
	310, 311, 312, 313, 314, 316, 318, 0, 0, 0,
	862, 0, 0, 0, 322, 323, 324, 325, 326, 327,
	0, 328, 329, 333, 335, 336, 337, 338, 339, 340,
	343, 0, 345, 347, 0, 348, 351, 0, 352, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 0, 361,
	362, 364, 0, 367, 368, 369, 370, 371, 0, 372,
	0, 0, 373, 374, 376, 377, 378, 380, 381, 382,
	383, 384, 385, 386, 387, 388, 389, 390, 391, 0,
	392, 393, 394, 396, 0, 397, 398, 401, 402, 403,
	404, 0, 406, 0, 0, 407, 408, 409, 0, 0,
	410, 411, 412, 413, 414, 415, 418, 0, 420, 421,
	422, 423, 424, 425, 426, 656, 428, 429, 430, 431,
	432, 433, 434, 0, 0, 435, 437, 438, 0, 0,
	0, 875, 453, 454, 455, 456, 457, 458, 459, 461,
	0, 463, 464, 465, 0, 466, 467, 468, 469, 0,
	470, 471, 472, 473, 474, 476, 479, 480, 481, 482,
	0, 485, 486, 487, 488, 489, 490, 491, 493, 494,
	495, 497, 498, 499, 657, 500, 501, 502, 503, 0,
	505, 506, 658, 508, 509, 511, 512, 513, 514, 515,
	516, 667, 0, 518, 0, 519, 520, 521, 522, 523,
	0, 525, 526, 527, 528, 529, 530, 533, 534, 535,
	537, 538, 0, 539, 540, 0, 542, 543, 878, 545,
	546, 547, 548, 549, 0, 668, 550, 0, 551, 0,
	552, 553, 554, 555, 556, 557, 558, 560, 0, 0,
	562, 563, 564, 566, 567, 568, 569, 572, 573, 574,
	575, 576, 0, 577, 579, 581, 659, 0, 0, 993,
	0, 0, 0, 0, 0, 0, 582, 583, 0, 450,
	444, 400, 442, 443, 447, 448, 451, 276, 0, 293,
	860, 0, 342, 379, 0, 0, 0, 439, 0, 492,
	496, 0, 0, 0, 0, 0, 0, 350, 0, 865,
	0, 871, 0, 877, 0, 561, 0, 867, 868, 873,
	281, 992, 584, 655, 0, 0, 0, 446, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 0,
	869, 866, 870, 876, 864, 874, 861, 872, 0, 483,
	417, 0, 510, 288, 334, 321, 363, 405, 517, 0,
	0, 395, 565, 330, 419, 0, 309, 452, 0, 541,
	416, 0, 524, 544, 0, 436, 315, 475, 531, 532,
	858, 863, 0, 879, 0, 319, 320, 441, 301, 449,
	0, 0, 504, 462, 460, 0, 427, 484, 0, 0,
	0, 349, 0, 344, 440, 580, 307, 559, 478, 445,
	399, 507, 536, 346, 331, 332, 375, 477, 365, 317,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	366, 0, 0, 578, 995, 985, 977, 978, 979, 980,
	981, 982, 0, 997, 998, 999, 1000, 1001, 571, 991,
	0, 976, 983, 984, 986, 0, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 277, 0, 278, 279,
	280, 282, 283, 284, 857, 285, 286, 287, 290, 291,
	292, 294, 654, 295, 296, 297, 298, 299, 300, 0,
	859, 302, 303, 304, 305, 306, 308, 310, 311, 312,
	313, 314, 316, 318, 0, 0, 0, 862, 0, 0,
	0, 322, 323, 324, 325, 326, 327, 0, 328, 329,
	333, 335, 336, 337, 338, 339, 340, 343, 0, 345,
	347, 0, 348, 351, 0, 352, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 0, 361, 362, 364, 0,
	367, 368, 369, 370, 371, 0, 372, 0, 0, 373,
	374, 376, 377, 378, 380, 381, 382, 383, 384, 385,
	386, 387, 388, 389, 390, 391, 0, 392, 393, 394,
	396, 0, 397, 398, 401, 402, 403, 404, 0, 406,
	0, 0, 407, 408, 409, 0, 0, 410, 411, 412,
	413, 414, 415, 418, 0, 420, 421, 422, 423, 424,
	425, 426, 656, 428, 429, 430, 431, 432, 433, 434,
	5057, 0, 435, 437, 438, 0, 0, 0, 875, 453,
	454, 455, 456, 457, 458, 459, 461, 0, 463, 464,
	465, 0, 466, 467, 468, 469, 0, 470, 471, 472,
	473, 474, 476, 479, 480, 481, 482, 0, 485, 486,
	487, 488, 489, 490, 491, 493, 494, 495, 497, 498,
	499, 657, 500, 501, 502, 503, 0, 505, 506, 658,
	508, 509, 511, 512, 513, 514, 515, 516, 667, 0,
	518, 0, 519, 520, 521, 522, 523, 0, 525, 526,
	527, 528, 529, 530, 533, 534, 535, 537, 538, 0,
	539, 540, 0, 542, 543, 878, 545, 546, 547, 548,
	549, 0, 668, 550, 0, 551, 0, 552, 553, 554,
	555, 556, 557, 558, 560, 0, 0, 562, 563, 564,
	566, 567, 568, 569, 572, 573, 574, 575, 576, 0,
	577, 579, 581, 659, 0, 0, 993, 0, 0, 0,
	0, 0, 0, 582, 583, 0, 450, 444, 400, 442,
	443, 447, 448, 451, 276, 0, 293, 860, 0, 342,
	379, 0, 0, 0, 439, 0, 492, 496, 0, 0,
	0, 0, 0, 0, 350, 0, 865, 0, 871, 0,
	877, 0, 561, 0, 867, 868, 873, 281, 992, 584,
	655, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 869, 866, 870,
	876, 864, 874, 861, 872, 0, 483, 417, 0, 510,
	288, 334, 321, 363, 405, 517, 0, 0, 395, 565,
	330, 419, 0, 309, 452, 0, 541, 416, 0, 524,
	544, 0, 436, 315, 475, 531, 532, 858, 863, 0,
	879, 0, 319, 320, 441, 301, 449, 0, 0, 504,
	462, 460, 0, 427, 484, 0, 0, 0, 349, 0,
	344, 440, 580, 307, 559, 478, 445, 399, 507, 536,
	346, 331, 332, 375, 477, 365, 317, 570, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 366, 0, 0,
	578, 995, 985, 977, 978, 979, 980, 981, 982, 0,
	997, 998, 999, 1000, 1001, 571, 991, 0, 976, 983,
	984, 986, 0, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 277, 0, 278, 279, 280, 282, 283,
	284, 857, 285, 286, 287, 290, 291, 292, 294, 654,
	295, 296, 297, 298, 299, 300, 0, 859, 302, 303,
	304, 305, 306, 308, 310, 311, 312, 313, 314, 316,
	318, 0, 0, 0, 862, 0, 0, 0, 322, 323,
	324, 325, 326, 327, 0, 328, 329, 333, 335, 336,
	337, 338, 339, 340, 343, 0, 345, 347, 0, 348,
	351, 0, 352, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 0, 361, 362, 364, 0, 367, 368, 369,
	370, 371, 0, 372, 0, 0, 373, 374, 376, 377,
	378, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 0, 392, 393, 394, 396, 0, 397,
	398, 401, 402, 403, 404, 0, 406, 0, 0, 407,
	408, 409, 0, 0, 410, 411, 412, 413, 414, 415,
	418, 0, 420, 421, 422, 423, 424, 425, 426, 656,
	428, 429, 430, 431, 432, 433, 434, 0, 0, 435,
	437, 438, 0, 0, 0, 875, 453, 454, 455, 456,
	457, 458, 459, 461, 0, 463, 464, 465, 0, 466,
	467, 468, 469, 0, 470, 471, 472, 473, 474, 476,
	479, 480, 481, 482, 0, 485, 486, 487, 488, 489,
	490, 491, 493, 494, 495, 497, 498, 499, 657, 500,
	501, 502, 503, 0, 505, 506, 658, 508, 509, 511,
	512, 513, 514, 515, 516, 667, 0, 518, 2598, 519,
	520, 521, 522, 523, 0, 525, 526, 527, 528, 529,
	530, 533, 534, 535, 537, 538, 0, 539, 540, 0,
	542, 543, 878, 545, 546, 547, 548, 549, 0, 668,
	550, 0, 551, 0, 552, 553, 554, 555, 556, 557,
	558, 560, 0, 0, 562, 563, 564, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 0, 577, 579, 581,
	659, 0, 0, 993, 0, 0, 0, 0, 0, 0,
	582, 583, 0, 450, 444, 400, 442, 443, 447, 448,
	451, 276, 0, 293, 860, 0, 342, 379, 0, 0,
	0, 439, 0, 492, 496, 0, 0, 0, 0, 0,
	0, 350, 0, 865, 0, 871, 0, 877, 0, 561,
	0, 867, 868, 873, 281, 992, 584, 655, 0, 0,
	0, 446, 0, 0, 0, 0, 0, 0, 0, 289,
	0, 0, 0, 0, 869, 866, 870, 876, 864, 874,
	861, 872, 0, 483, 417, 0, 510, 288, 334, 321,
	363, 405, 517, 0, 0, 395, 565, 330, 419, 0,
	309, 452, 0, 541, 416, 0, 524, 544, 0, 436,
	315, 475, 531, 532, 858, 863, 0, 879, 0, 319,
	320, 441, 301, 449, 0, 0, 504, 462, 460, 0,
	427, 484, 0, 0, 0, 349, 0, 344, 440, 580,
	307, 559, 478, 445, 399, 507, 536, 346, 331, 332,
	375, 477, 365, 317, 570, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 366, 0, 0, 578, 995, 985,
	977, 978, 979, 980, 981, 982, 0, 997, 998, 999,
	1000, 1001, 571, 991, 0, 976, 983, 984, 986, 0,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	277, 0, 278, 279, 280, 282, 283, 284, 857, 285,
	286, 287, 290, 291, 292, 294, 654, 295, 296, 297,
	298, 299, 300, 0, 859, 302, 303, 304, 305, 306,
	308, 310, 311, 312, 313, 314, 316, 318, 0, 0,
	0, 862, 0, 0, 0, 322, 323, 324, 325, 326,
	327, 0, 328, 329, 333, 335, 336, 337, 338, 339,
	340, 343, 0, 345, 347, 0, 348, 351, 0, 352,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 0,
	361, 362, 364, 0, 367, 368, 369, 370, 371, 0,
	372, 0, 0, 373, 374, 376, 377, 378, 380, 381,
	382, 383, 384, 385, 386, 387, 388, 389, 390, 391,
	0, 392, 393, 394, 396, 0, 397, 398, 401, 402,
	403, 404, 0, 406, 0, 0, 407, 408, 409, 0,
	0, 410, 411, 412, 413, 414, 415, 418, 0, 420,
	421, 422, 423, 424, 425, 426, 656, 428, 429, 430,
	431, 432, 433, 434, 4497, 0, 435, 437, 438, 0,
	0, 0, 875, 453, 454, 455, 456, 457, 458, 459,
	461, 0, 463, 464, 465, 0, 466, 467, 468, 469,
	0, 470, 471, 472, 473, 474, 476, 479, 480, 481,
	482, 0, 485, 486, 487, 488, 489, 490, 491, 493,
	494, 495, 497, 498, 499, 657, 500, 501, 502, 503,
	0, 505, 506, 658, 508, 509, 511, 512, 513, 514,
	515, 516, 667, 0, 518, 0, 519, 520, 521, 522,
	523, 0, 525, 526, 527, 528, 529, 530, 533, 534,
	535, 537, 538, 0, 539, 540, 0, 542, 543, 878,
	545, 546, 547, 548, 549, 0, 668, 550, 0, 551,
	0, 552, 553, 554, 555, 556, 557, 558, 560, 0,
	0, 562, 563, 564, 566, 567, 568, 569, 572, 573,
	574, 575, 576, 0, 577, 579, 581, 659, 0, 0,
	993, 0, 0, 0, 0, 0, 0, 582, 583, 0,
	450, 444, 400, 442, 443, 447, 448, 451, 276, 0,
	293, 860, 0, 342, 379, 0, 0, 0, 439, 0,
	492, 496, 0, 0, 0, 0, 0, 0, 350, 0,
	865, 0, 871, 0, 877, 0, 561, 0, 867, 868,
	873, 281, 992, 584, 655, 0, 0, 0, 446, 0,
	0, 0, 0, 0, 0, 0, 289, 0, 0, 0,
	0, 869, 866, 870, 876, 864, 874, 861, 872, 0,
	483, 417, 0, 510, 288, 334, 321, 363, 405, 517,
	0, 0, 395, 565, 330, 419, 0, 309, 452, 0,
	541, 416, 0, 524, 544, 0, 436, 315, 475, 531,
	532, 858, 863, 0, 879, 0, 319, 320, 441, 301,
	449, 0, 0, 504, 462, 460, 0, 427, 484, 0,
	0, 0, 349, 0, 344, 440, 580, 307, 559, 478,
	445, 399, 507, 536, 346, 331, 332, 375, 477, 365,
	317, 570, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 366, 0, 0, 578, 995, 985, 977, 978, 979,
	980, 981, 982, 0, 997, 998, 999, 1000, 1001, 571,
	991, 0, 976, 983, 984, 986, 0, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 277, 0, 278,
	279, 280, 282, 283, 284, 857, 285, 286, 287, 290,
	291, 292, 294, 654, 295, 296, 297, 298, 299, 300,
	0, 859, 302, 303, 304, 305, 306, 308, 310, 311,
	312, 313, 314, 316, 318, 0, 0, 0, 862, 0,
	0, 0, 322, 323, 324, 325, 326, 327, 0, 328,
	329, 333, 335, 336, 337, 338, 339, 340, 343, 0,
	345, 347, 0, 348, 351, 0, 352, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 0, 361, 362, 364,
	0, 367, 368, 369, 370, 371, 0, 372, 0, 0,
	373, 374, 376, 377, 378, 380, 381, 382, 383, 384,
	385, 386, 387, 388, 389, 390, 391, 0, 392, 393,
	394, 396, 0, 397, 398, 401, 402, 403, 404, 0,
	406, 0, 0, 407, 408, 409, 0, 0, 410, 411,
	412, 413, 414, 415, 418, 0, 420, 421, 422, 423,
	424, 425, 426, 656, 428, 429, 430, 431, 432, 433,
	434, 0, 0, 435, 437, 438, 0, 0, 0, 875,
	453, 454, 455, 456, 457, 458, 459, 461, 0, 463,
	464, 465, 0, 466, 467, 468, 469, 0, 470, 471,
	472, 473, 474, 476, 479, 480, 481, 482, 0, 485,
	486, 487, 488, 489, 490, 491, 493, 494, 495, 497,
	498, 499, 657, 500, 501, 502, 503, 0, 505, 506,
	658, 508, 509, 511, 512, 513, 514, 515, 516, 667,
	0, 518, 0, 519, 520, 521, 522, 523, 0, 525,
	526, 527, 528, 529, 530, 533, 534, 535, 537, 538,
	0, 539, 540, 0, 542, 543, 878, 545, 546, 547,
	548, 549, 0, 668, 550, 0, 551, 0, 552, 553,
	554, 555, 556, 557, 558, 560, 0, 0, 562, 563,
	564, 566, 567, 568, 569, 572, 573, 574, 575, 576,
	0, 577, 579, 581, 659, 0, 0, 993, 0, 0,
	0, 0, 0, 0, 582, 583, 0, 450, 444, 400,
	442, 443, 447, 448, 451, 276, 0, 293, 860, 0,
	342, 1003, 0, 0, 0, 439, 0, 492, 496, 0,
	0, 0, 0, 0, 0, 350, 0, 865, 0, 871,
	0, 877, 0, 561, 0, 867, 868, 873, 281, 992,
	584, 655, 0, 0, 0, 446, 0, 0, 0, 0,
	0, 0, 0, 289, 0, 0, 0, 0, 869, 866,
	870, 876, 864, 874, 861, 872, 0, 483, 417, 0,
	510, 288, 334, 321, 363, 405, 517, 0, 0, 395,
	565, 330, 419, 0, 309, 452, 0, 541, 416, 0,
	524, 544, 0, 436, 315, 475, 531, 532, 858, 863,
	0, 879, 0, 319, 320, 441, 301, 449, 0, 0,
	504, 462, 460, 0, 427, 484, 0, 0, 0, 349,
	0, 344, 440, 580, 307, 559, 478, 445, 399, 507,
	536, 346, 331, 332, 375, 477, 365, 317, 570, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 366, 0,
	0, 578, 995, 985, 977, 978, 979, 980, 981, 982,
	0, 997, 998, 999, 1000, 1001, 571, 991, 0, 976,
	983, 984, 986, 0, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 277, 0, 278, 279, 280, 282,
	283, 284, 857, 285, 286, 287, 290, 291, 292, 294,
	654, 295, 296, 297, 298, 299, 300, 0, 859, 302,
	303, 304, 305, 306, 308, 310, 311, 312, 313, 314,
	316, 318, 0, 0, 0, 862, 0, 0, 0, 322,
	323, 324, 325, 326, 327, 0, 328, 329, 333, 335,
	336, 337, 338, 339, 340, 343, 0, 345, 347, 0,
	348, 351, 0, 352, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 0, 361, 362, 364, 0, 367, 368,
	369, 370, 371, 0, 372, 0, 0, 373, 374, 376,
	377, 378, 380, 381, 382, 383, 384, 385, 386, 387,
	388, 389, 390, 391, 0, 392, 393, 394, 396, 0,
	397, 398, 401, 402, 403, 404, 0, 406, 0, 0,
	407, 408, 409, 0, 0, 410, 411, 412, 413, 414,
	415, 418, 0, 420, 421, 422, 423, 424, 425, 426,
	656, 428, 429, 430, 431, 432, 433, 434, 0, 0,
	435, 437, 438, 0, 0, 0, 875, 453, 454, 455,
	456, 457, 458, 459, 461, 0, 463, 464, 465, 0,
	466, 467, 468, 469, 0, 470, 471, 472, 473, 474,
	476, 479, 480, 481, 482, 0, 485, 486, 487, 488,
	489, 490, 491, 493, 494, 495, 497, 498, 499, 657,
	500, 501, 502, 503, 0, 505, 506, 658, 508, 509,
	511, 512, 513, 514, 515, 516, 667, 0, 518, 0,
	519, 520, 521, 522, 523, 0, 525, 526, 527, 528,
	529, 530, 533, 534, 535, 537, 538, 0, 539, 540,
	0, 542, 543, 878, 545, 546, 547, 548, 549, 0,
	668, 550, 0, 551, 0, 552, 553, 554, 555, 556,
	557, 558, 560, 0, 0, 562, 563, 564, 566, 567,
	568, 569, 572, 573, 574, 575, 576, 0, 577, 579,
	581, 659, 0, 0, 993, 0, 0, 0, 0, 0,
	0, 582, 583, 0, 450, 444, 400, 442, 443, 447,
	448, 451, 276, 0, 293, 860, 0, 342, 967, 0,
	0, 0, 439, 0, 492, 496, 0, 0, 0, 0,
	0, 0, 350, 0, 865, 0, 871, 0, 877, 0,
	561, 0, 867, 868, 873, 281, 992, 584, 655, 0,
	0, 0, 446, 0, 0, 0, 0, 0, 0, 0,
	289, 0, 0, 0, 0, 869, 866, 870, 876, 864,
	874, 861, 872, 0, 483, 417, 0, 510, 288, 334,
	321, 363, 405, 517, 0, 0, 395, 565, 330, 419,
	0, 309, 452, 0, 541, 416, 0, 524, 544, 0,
	436, 315, 475, 531, 532, 858, 863, 0, 879, 0,
	319, 320, 441, 301, 449, 0, 0, 504, 462, 460,
	0, 427, 484, 0, 0, 0, 349, 0, 344, 440,
	580, 307, 559, 478, 445, 399, 507, 536, 346, 331,
	332, 375, 477, 365, 317, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 366, 0, 0, 578, 995,
	985, 977, 978, 979, 980, 981, 982, 0, 997, 998,
	999, 1000, 1001, 571, 991, 0, 976, 983, 984, 986,
	0, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 277, 0, 278, 279, 280, 282, 283, 284, 857,
	285, 286, 287, 290, 291, 292, 294, 654, 295, 296,
	297, 298, 299, 300, 0, 859, 302, 303, 304, 305,
	306, 308, 310, 311, 312, 313, 314, 316, 318, 0,
	0, 0, 862, 0, 0, 0, 322, 323, 324, 325,
	326, 327, 0, 328, 329, 333, 335, 336, 337, 338,
	339, 340, 343, 0, 345, 347, 0, 348, 351, 0,
	352, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	0, 361, 362, 364, 0, 367, 368, 369, 370, 371,
	0, 372, 0, 0, 373, 374, 376, 377, 378, 380,
	381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
	391, 0, 392, 393, 394, 396, 0, 397, 398, 401,
	402, 403, 404, 0, 406, 0, 0, 407, 408, 409,
	0, 0, 410, 411, 412, 413, 414, 415, 418, 0,
	420, 421, 422, 423, 424, 425, 426, 656, 428, 429,
	430, 431, 432, 433, 434, 0, 0, 435, 437, 438,
	0, 0, 0, 875, 453, 454, 455, 456, 457, 458,
	459, 461, 0, 463, 464, 465, 0, 466, 467, 468,
	469, 0, 470, 471, 472, 473, 474, 476, 479, 480,
	481, 482, 0, 485, 486, 487, 488, 489, 490, 491,
	493, 494, 495, 497, 498, 499, 657, 500, 501, 502,
	503, 0, 505, 506, 658, 508, 509, 511, 512, 513,
	514, 515, 516, 667, 0, 518, 0, 519, 520, 521,
	522, 523, 0, 525, 526, 527, 528, 529, 530, 533,
	534, 535, 537, 538, 0, 539, 540, 0, 542, 543,
	878, 545, 546, 547, 548, 549, 0, 668, 550, 0,
	551, 0, 552, 553, 554, 555, 556, 557, 558, 560,
	0, 0, 562, 563, 564, 566, 567, 568, 569, 572,
	573, 574, 575, 576, 0, 577, 579, 581, 659, 0,
	0, 993, 0, 0, 0, 0, 0, 0, 582, 583,
	0, 450, 444, 400, 442, 443, 447, 448, 451, 276,
	0, 293, 860, 0, 342, 379, 0, 0, 0, 439,
	0, 492, 496, 0, 0, 0, 0, 0, 0, 350,
	0, 865, 0, 871, 0, 877, 0, 561, 0, 867,
	868, 873, 281, 0, 584, 655, 0, 0, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 869, 866, 870, 876, 864, 874, 861, 872,
	0, 483, 417, 0, 510, 288, 334, 321, 363, 405,
	517, 0, 0, 395, 565, 330, 419, 0, 309, 452,
	0, 541, 416, 0, 524, 544, 0, 436, 315, 475,
	531, 532, 858, 863, 0, 879, 0, 319, 320, 441,
	301, 449, 0, 0, 504, 462, 460, 0, 427, 484,
	0, 0, 0, 349, 0, 344, 440, 580, 307, 559,
	478, 445, 399, 507, 536, 346, 331, 332, 375, 477,
	365, 317, 570, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 366, 0, 0, 578, 0, 0, 0, 0,
	0, 0, 0, 341, 0, 0, 0, 0, 0, 0,
	571, 0, 0, 0, 0, 0, 0, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 277, 0,
	278, 279, 280, 282, 283, 284, 857, 285, 286, 287,
	290, 291, 292, 294, 654, 295, 296, 297, 298, 299,
	300, 0, 859, 302, 303, 304, 305, 306, 308, 310,
	311, 312, 313, 314, 316, 318, 0, 0, 0, 862,
	0, 0, 0, 322, 323, 324, 325, 326, 327, 0,
	328, 329, 333, 335, 336, 337, 338, 339, 340, 343,
	0, 345, 347, 0, 348, 351, 0, 352, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 0, 361, 362,
	364, 0, 367, 368, 369, 370, 371, 0, 372, 0,
	0, 373, 374, 376, 377, 378, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 392,
	393, 394, 396, 0, 397, 398, 401, 402, 403, 404,
	0, 406, 0, 0, 407, 408, 409, 0, 0, 410,
	411, 412, 413, 414, 415, 418, 0, 420, 421, 422,
	423, 424, 425, 426, 656, 428, 429, 430, 431, 432,
	433, 434, 0, 0, 435, 437, 438, 0, 0, 0,
	875, 453, 454, 455, 456, 457, 458, 459, 461, 0,
	463, 464, 465, 0, 466, 467, 468, 469, 0, 470,
	471, 472, 473, 474, 476, 479, 480, 481, 482, 0,
	485, 486, 487, 488, 489, 490, 491, 493, 494, 495,
	497, 498, 499, 657, 500, 501, 502, 503, 0, 505,
	506, 658, 508, 509, 511, 512, 513, 514, 515, 516,
	667, 0, 518, 0, 519, 520, 521, 522, 523, 0,
	525, 526, 527, 528, 529, 530, 533, 534, 535, 537,
	538, 0, 539, 540, 0, 542, 543, 878, 545, 546,
	547, 548, 549, 0, 668, 550, 0, 551, 0, 552,
	553, 554, 555, 556, 557, 558, 560, 0, 0, 562,
	563, 564, 566, 567, 568, 569, 572, 573, 574, 575,
	576, 0, 577, 579, 581, 659, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 583, 0, 450, 444,
	400, 442, 443, 447, 448, 451,
}

var yyPact = [...]int32{
	9137, -1000, 343, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1433, 1433, -1000, -1000, 3266, 1224, 7885,
	17297, 9377, 3350, 95227, 78057, 1433, 1567, 1510, 1505, 79067,
	94722, 94217, 64927, 64422, 1898, 1245, 1198, 77552, 1191, 1171,
	-1000, 2029, 79067, 47797, 47797, 77047, 79067, 76542, -1000, 1553,
	1005, 1008, -1000, -1000, 3967, 68967, 313, 93712, 79067, 1159,
	9137, 4045, -1000, -1000, 2379, 3553, 68967, 3678, 3552, 1008,
	79067, -1000, 1855, 2372, 2088, 4007, 93207, 79067, 46269, 79067,
	3330, 92702, 92197, 2812, 91692, 56392, 3347, 1550, 79067, 79067,
	2162, 91187, 79067, 79067, 1170, 2651, 53866, 53866, -1000, -1000,
	1642, 1634, -1000, -1000, -1000, 68462, 76037, 90682, 90177, 1445,
	2797, 2212, 59927, 79067, 79067, 79067, 79067, 59927, 53866, 2285,
	2583, 89672, 59927, 79067, 59927, 79067, 79067, 79067, 79067, 79067,
	1545, 53361, 52856, 79067, 89167, 3327, 79067, 79067, 2023, -1000,
	88662, 88157, 87652, 100620, 100133, 4154, 55887, 55382, 54877, -1000,
	-1000, -1000, 1443, 2775, -1000, -1000, -1000, 3326, 2152, 1538,
	-1000, 2278, -1000, -1000, -1000, -1000, -1000, -1000, 1441, -1000,
	80582, 75532, 2199, -1000, -1000, 891, 3807, 4220, 4220, 3970,
	58412, 1353, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3804,
	2311, 2721, 433, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	4045, 2379, 4045, 4220, 3716, 4220, -1000, -1000, -1000, -1000,
	79067, -1000, 4220, 1168, -1000, 3548, 526, 934, -1000, 805,
	805, 805, 3198, 805, 3547, 1352, 552, 807, -1000, 3119,
	1637, 43672, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1478,
	3139, 47292, -1000, 79067, 47292, -1000, 433, 3803, 2296, 2720,
	-1000, 47292, 79067, 2338, 47292, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 79067, 3686, 3686, 3686, 3686, 859,
	859, 3686, 3686, 1076, 1006, -1000, -1000, -1000, 4214, 4214,
	-1000, -1000, -1000, -1000, 885, -1000, 75027, -1000, -1000, 2762,
	3949, 3949, 3949, 3595, 1553, -1000, -1000, 776, 768, 1005,
	25226, 25226, -1000, 3542, -1000, 378, -1000, 420, 59422, 1167,
	310, 79067, -1000, 989, 310, 30368, -1000, -1000, 2256, -1000,
	418, -1000, 2252, 1811, -1000, 2584, 79067, 3305, 87147, 68967,
	68967, 759, -1000, -1000, -1000, -1000, -1000, 805, 86642, 79067,
	1424, 86137, 4153, 59927, 59927, 79067, 1509, 59927, 3039, 2012,
	-1000, 1890, 2718, -1000, 4038, 4161, 409, 1027, 79067, 79067,
	-1000, 414, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1292, 1917, 1235, 4037,
	1696, 4035, 2955, 85632, 1528, 4033, 3100, 1696, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1422, 79067, 2065, 3541, 79067, 989, 4032, -1000, 3094, 2657,
	99646, 79067, 1696, 1696, -1000, -1000, -1000, -1000, 7081, 4143,
	3922, 8662, 4142, 3919, 17222, 4139, 11614, 4137, 74522, 74017,
	2952, 79067, 73512, 1979, 1166, -1000, 420, -1000, -1000, -1000,
	1978, 1977, 1975, 1915, 12708, 1166, -1000, 420, 1972, 2918,
	79067, 79067, 79067, 3540, 4136, 11818, 2385, 2817, 1969, 1447,
	2974, 3539, 3528, 79067, 1966, 1692, 3910, 1964, 3038, 1692,
	3910, 2195, 2207, 4135, 1894, 2535, 2920, -1000, 4134, 424,
	-1000, 4133, 429, -1000, 3527, 4128, 426, 4126, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 417, -1000, -1000, -1000, -1000,
	-1000, 1060, 2781, 1059, 1059, 1059, -1000, -1000, -1000, -1000,
	-1000, 511, 530, -1000, -1000, 2777, 1164, 2777, 2777, -1000,
	2792, 2777, 426, 4125, 85127, 3095, 135, 4122, -1000, 135,
	4121, 135, 4119, -1000, 2951, -1000, 1808, -1000, -1000, -1000,
	4153, -1000, 2703, -1000, 4180, 56897, 418, 4220, 3111, 42644,
	42130, 79067, 472, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2616, -1000, 2246, -1000, -1000, -1000, -1000, -1000,
	-1000, 84622, -1000, -1000, -1000, 4189, 99646, 65937, 53866, 66947,
	1163, 79067, -1000, 79067, -1000, -1000, -1000, -1000, 65937, 3037,
	53866, 3032, 1637, -1000, 363, -1000, 43158, 1159, -1000, -1000,
	-1000, -1000, 3119, -1000, 362, -1000, 311, -1000, 989, 359,
	-1000, 2226, -1000, 357, 3393, 3525, 420, 4153, 4153, 4153,
	-1000, -1000, -1000, -1000, 356, 2445, -1000, 79067, -1000, 79067,
	79067, 79067, 3686, 3686, 79067, 79067, 79067, 3686, 3686, 79067,
	3686, 3686, -1000, -1000, -1000, 30368, -1000, -1000, 2711, 3021,
	3031, 1770, 3601, 2734, -1000, 29854, 2388, 34480, 3107, 1005,
	-1000, -1000, 1005, 1005, 30368, -1000, 2762, -1000, -1000, 3516,
	175, -1000, 19511, -1000, -1000, 30368, 30368, 30368, 30368, 30368,
	2052, 4010, -1000, -1000, -1000, -1000, 24197, -1000, -1000, 420,
	1044, 774, -1000, -1000, 1143, -1000, 976, 1139, 420, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1282, 4220, 1203,
	30368, 1393, 2506, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1138, 1130, 3028, -1000, 1125, 1124, 1121, 1117, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1113, 1112, 1110, 1109, 1108,
	1107, 1102, 1095, 1092, 1091, 1090, 1089, 1088, 1087, 1083,
	1081, 1078, 1077, 1075, 1074, 1073, 990, 1072, 1066, 1065,
	1064, 1063, 1062, 1061, -1000, 2777, -1000, 2777, 2777, 1059,
	1059, 1060, -1000, -1000, 2792, 2777, 1059, -1000, -1000, 530,
	511, -1000, -1000, -1000, -1000, -1000, 490, 1058, -1000, 420,
	-1000, 18654, 30368, -1000, 79067, 30368, 79067, 310, 4188, 79067,
	355, 16858, -1000, 2683, 2379, -1000, 1773, -1000, -1000, -1000,
	2034, 4187, 57402, -1000, 79067, 3422, 3420, 3790, 3666, 918,
	4029, 4183, 805, 79067, 6654, 4027, 84117, -1000, 1055, 1055,
	2446, 79067, 1054, 99646, 2274, 1814, -1000, 53866, 4150, 4115,
	99646, -1000, 375, 20558, -1000, 20558, 3974, 3415, 44682, -1000,
	737, 79067, 79067, 79067, 79067, -1000, 79067, 4112, -1000, -1000,
	-1000, 4111, 79067, 920, 4026, 1454, 4220, 4093, 51846, 4025,
	-1000, 83612, 3523, 2196, 53866, 79067, 1533, 3522, 4089, -1000,
	65432, 1027, 4220, 4182, 3024, -1000, -1000, 190, -1000, 1734,
	-1000, 2056, 2054, 61425, 1643, 1640, 3135, 1084, 3520, 1987,
	1618, 79067, 2510, 79067, 3105, 3787, 866, 2402, 1856, -1000,
	1052, 68967, 1654, 190, -1000, 3785, 2053, 79067, 1653, 190,
	3784, 6654, -1000, 2594, 99646, 928, -1000, 3591, -1000, 928,
	928, 3590, 2130, 1696, 1696, -1000, 79067, 190, 1742, 79067,
	10671, 4088, 3907, 9891, 4087, 79067, -1000, 863, -1000, 3783,
	-1000, 63429, 420, 3782, 3781, 3780, 3189, -1000, 3214, 3954,
	1739, 3124, 3779, 11116, -1000, 3519, 3887, -1000, -1000, -1000,
	-1000, 1771, 2413, -1000, 2263, 928, 928, 79067, -1000, 79067,
	83107, -1000, -1000, 420, 3778, 3204, -1000, -1000, 1961, 3408,
	3399, 79067, 79067, 3775, 11116, 3774, 52351, 66442, 66442, 3772,
	11116, 3771, 3769, 1321, -1000, 3884, 3767, 794, 4220, 2008,
	2007, 1999, -1000, -1000, 1027, 79067, 79067, 2045, 3766, -1000,
	2197, 2604, 2197, 3764, 51846, -1000, 2197, 2197, 3763, 866,
	866, 3761, 1669, 79067, 79067, 79067, 79067, 79067, 2860, 2780,
	2779, 1050, 308, -1000, 2733, -1000, 7778, 2259, 79067, 79067,
	-1000, -1000, -1000, 79067, 79067, -1000, 79067, 79067, 99646, -1000,
	99646, -1000, 460, 30368, -1000, 4214, -1000, -1000, -1000, -1000,
	4214, -1000, 3818, 3811, 4214, -1000, 1046, -1000, 4214, -1000,
	-1000, 2777, 2777, -1000, -1000, 99646, 424, 4086, 51846, 4083,
	53866, 53866, 53866, 53866, -1000, -1000, -1000, -1000, -1000, 79067,
	4180, 1557, -1000, -1000, -1000, -1000, 295, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 4210, 4209, -1000, 295,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 79067, -1000, 1008, 352,
	-1000, 3759, 255, 79067, 79067, 1939, 59927, 59927, 59927, 79067,
	79067, 79067, 2962, 79067, 79067, 79067, 79067, 1970, -1000, 431,
	-1000, 79067, 349, -1000, 345, 3675, 64927, 205, 66947, -1000,
	1637, 47292, -1000, -1000, -1000, 3098, 79067, 79067, -1000, 79067,
	-1000, 79067, -1000, 79067, 79067, 79067, 79067, 79067, -1000, 2966,
	-1000, -1000, -1000, -1000, 1774, -1000, -1000, -1000, -1000, 79067,
	79067, -1000, -1000, -1000, 79067, 79067, -1000, 79067, 79067, 337,
	-1000, -1000, -1000, -1000, -1000, 1788, 3610, -1000, 1371, -1000,
	1699, -1000, -1000, 292, 16858, -1000, 36022, -1000, -1000, -1000,
	2128, 16858, -1000, 33966, 33966, 1805, 79067, 2318, -1000, 2318,
	142, -1000, 6116, 2711, 3021, 3674, 73007, 25226, 99646, 79067,
	3796, 30368, 30368, 30368, 30368, 30368, 30368, 30368, 30368, 30368,
	30368, 30368, 30368, 30368, 30368, 30368, 30368, 3865, 30368, 3753,
	5687, -1000, -1000, 3757, 1014, 1766, 20558, -1000, -1000, 1034,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 841, 841, 543, 6198, 6198, 868,
	1044, 3951, 420, 16813, 276, 451, 420, -1000, -1000, -1000,
	25741, 30368, 44682, 29339, 420, -1000, 22652, -1000, 1799, 4214,
	3825, 16858, 2506, 3561, 1293, 1041, 30368, 30368, 1040, 4214,
	4214, 4214, 4214, 30368, 2084, 30368, 30368, 35508, 30368, 30368,
	24712, 30368, 30368, 30368, 30368, 30368, 2107, 30368, 2616, 37050,
	2104, 30368, 28825, 23682, 30368, 30368, 30368, 755, 30368, 30368,
	30368, 2616, 3674, 30368, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 16749, 47, 739, 335, -1000, 3396, 334, 30368, -1000,
	79067, 3796, 30368, 30368, 30368, 30368, 3753, 5687, 3757, 1014,
	1034, -1000, -1000, -1000, 1735, 1989, -1000, 3518, -1000, 3233,
	50331, 3340, 79067, 524, -1000, 1189, 79067, -1000, -1000, 3622,
	39600, 39600, 3145, 3145, -1000, -1000, 61930, 79067, 3104, 3361,
	4081, 2551, 3986, 1029, -1000, 6654, 2501, 4080, 3517, 4024,
	-1000, 7989, 62940, 7138, 1923, -1000, -1000, 3097, 2728, 1027,
	-1000, 60937, 2269, 79067, 79067, 1417, -1000, -1000, -1000, -1000,
	-1000, -1000, 2010, 79067, -1000, 20558, -1000, 333, -1000, 1187,
	3020, 79067, -1000, 79067, 1028, 1027, 1027, 1027, 1027, 1027,
	-1000, 79067, 1879, 79067, 1635, 61930, 3092, 4079, 2494, -1000,
	-1000, 79067, 1755, -1000, -1000, 4070, 6194, 4179, 4023, 805,
	20558, 4230, -1000, 4178, 2595, 41115, 79067, 1619, 487, -1000,
	68967, 3901, 425, 805, -1000, 378, -1000, 1996, 99646, 4220,
	6194, 6194, 12354, 79067, 79067, 79067, -1000, 79067, 79067, -1000,
	4017, 82602, -1000, 99646, 79067, -1000, 1018, 3411, 1363, 1362,
	3366, 72502, 79067, 82097, 81592, 79067, 1626, -1000, -1000, 2150,
	79067, -1000, 20558, 79067, 67957, 1588, 1581, 79067, 2216, 67452,
	79067, 2215, -1000, 79067, 1847, -1000, -1000, 53866, -1000, 3295,
	2205, 21069, 5921, 79067, 79067, 79067, 9849, 79067, 79067, -1000,
	-1000, -1000, -1000, -1000, -1000, 928, -1000, -1000, -1000, 79067,
	79067, 928, 928, 17068, 79067, 79067, 9807, 190, 1737, 79067,
	1645, 190, 1710, 68967, 1605, 79067, 332, -1000, -1000, 98672,
	96237, -1000, 2070, -1000, -1000, -1000, 417, -1000, 101107, 79067,
	79067, 79067, 79067, 79067, -1000, 3885, 81087, 30368, 3883, -1000,
	79067, -1000, 1016, 3879, 79067, 79067, -1000, -1000, -1000, 3875,
	3509, 2365, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2715, 1697, 53866, 53866, 3748, 79067, 79067, 2276, 3506, 79067,
	-1000, 79067, -1000, 274, 274, 274, 79067, -1000, 79067, 79067,
	-1000, -1000, -1000, 79067, -1000, 79067, -1000, 3990, 79067, 79067,
	-1000, 1959, 1957, 3747, -1000, 2077, -1000, 53866, 2156, -1000,
	80582, -1000, 79067, -1000, 53866, 1748, 2156, -1000, -1000, 79067,
	-1000, -1000, 79067, 903, 3296, 1953, 1951, 1947, 1944, 79067,
	79067, 4220, 4147, 79067, 4220, 80077, 20558, 2935, 79067, 3746,
	79067, 79067, 59927, 1015, 99646, 59927, 45740, 59927, 59927, 3019,
	99646, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 64927,
	63917, 1833, 2166, 424, -1000, 429, -1000, 4004, 3505, -1000,
	426, -1000, 331, 731, 726, 3802, 3801, 724, 30368, 723,
	-1000, -1000, 426, -1000, 79067, 1741, 3016, -1000, 135, 135,
	135, 3989, 2379, 43158, -1000, -1000, -1000, -1000, 99646, -1000,
	51341, 79067, 255, 255, 2945, 79067, 273, -1000, 273, 273,
	153, 270, 153, 928, 272, 389, -1000, 153, 153, 270,
	3899, 3898, 3897, 3893, 3892, -1000, 20558, 3589, 321, 79067,
	-1000, -1000, 51341, 3504, 269, 4004, 505, -1000, -1000, 79067,
	-1000, -1000, -1000, -1000, 3393, -1000, -1000, -1000, -1000, -1000,
	3015, 2448, 2416, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3252, -1000, 30368, 2128, 3657, -1000, 4212, 4212,
	997, -1000, 24197, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2184, 255, 30368, 486, 1209, -1000, -1000, -1000,
	-1000, 3612, 39600, -1000, 3608, 3608, 1622, 1589, 3608, 79067,
	-1000, -1000, -1000, -1000, 3800, -1000, 322, 322, 372, 372,
	372, -1000, 593, 593, 593, 593, 593, 593, 543, 6198,
	7193, 2474, 30368, 30368, 3740, 3745, 1014, 1960, 30368, -1000,
	3267, -1000, -1000, -1000, 3673, -1000, -1000, 2079, 2957, -1000,
	-1000, -1000, -1000, 2993, 35508, 35508, -1000, -1000, -1000, 24197,
	1013, -1000, -1000, -1000, -1000, 44682, -1000, 1011, 30368, -1000,
	-1000, 3932, -1000, -1000, 30368, 29, 26, -1000, -1000, 316,
	715, 315, -1000, 43, -1000, 713, 30368, 30368, 30368, -1000,
	16858, 4197, -1000, -1000, 3739, -1000, 3737, 3736, 3734, -1000,
	1001, 711, 2782, -1000, 30368, 1293, 1000, -1000, 58917, 3623,
	2926, 2850, 666, 1310, 16207, 30368, 709, 705, 704, 702,
	16602, 701, 3672, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 5824, 700, 697, 13800, 252, 693, 1745, -1000, 35508,
	35508, 35508, 997, 691, 688, 6987, 16456, 28311, 28311, 28311,
	687, 16072, 30368, 111, 6052, 309, 302, 299, 297, 20558,
	296, -1000, 15999, 30368, 3042, 20558, 2188, 289, 405, 667,
	-1000, 99646, 666, 404, 1218, 664, -1000, 420, 2957, 15915,
	3218, -1000, 247, 245, 241, 30368, 3612, 286, -1000, 30368,
	-1000, -1000, 994, -1000, 3344, -1000, 16858, -1000, -1000, -1000,
	3241, 3210, 2849, -1000, -1000, 284, -1000, -1000, -1000, -1000,
	3622, 57402, 30368, 271, -1000, 420, 3241, 33452, 101, 3630,
	69977, 69977, 41620, -1000, 38575, 71492, 69977, 69977, 1200, 3671,
	993, 992, 420, -1000, -1000, -1000, 991, 990, 3444, 3246,
	-1000, 3246, 663, 240, 99646, -1000, -1000, -1000, -1000, 79067,
	884, 79067, 2931, 79067, 79067, 79067, 4177, 866, 79067, 79067,
	68967, 4069, 96724, 2016, 7138, -1000, 4220, 58412, 3013, -1000,
	-1000, 260, -1000, -1000, 1419, 2016, 3491, -1000, -1000, -1000,
	3091, -1000, -1000, 1923, -1000, 662, -52, 3587, 253, -1000,
	-1000, -1000, 1080, 79067, 2459, 805, 79067, 4150, 1853, 1887,
	2714, -1000, 1794, -1000, -1000, 20558, 21580, 1531, -1000, 657,
	237, -1000, 99646, 4220, -1000, -1000, -1000, -1000, -1000, 1082,
	-1000, 79067, 58412, 58412, -1000, 1696, 1313, 1635, -1000, 79067,
	1649, 79067, 656, 79067, 79067, 2639, 1528, 79067, 3012, -1000,
	-1000, 4214, 53866, 53866, 2206, 3878, 2042, 2038, -1000, -1000,
	3606, 1475, 53866, 1008, 4065, 3361, 2760, 3986, 3007, 4239,
	2453, -1000, -1000, 500, -1000, 420, -1000, 30368, 989, 3990,
	-1000, 66442, 805, 1832, 425, 3621, 3621, 79067, 655, 3733,
	-1000, -1000, 3729, 3727, 3080, 2747, 4063, -1000, 4016, 1650,
	1469, 30368, 981, -1000, 2371, 874, 979, 978, 79067, 1779,
	3288, -1000, 4060, 4004, 4059, 4004, -1000, -1000, -1000, 71997,
	-1000, 242, -1000, 435, -1000, -1000, -1000, -1000, 79067, 79067,
	79067, 79067, -1000, 1769, -1000, -1000, -1000, -1000, 1764, -1000,
	2193, -1000, -1000, -1000, -1000, -1000, 2363, 1760, 239, -1000,
	-1000, 20558, 20558, 20558, 4220, -1000, 190, -1000, 1677, 2375,
	-1000, -1000, 190, 3726, 2374, -1000, -1000, -1000, -1000, -1000,
	-1000, 190, 3725, 6654, -1000, 3724, 190, 1690, 79067, 79067,
	8483, 79067, 79067, 79067, 7271, 3722, 1321, 1635, -1000, -1000,
	96237, 98672, -1000, 98672, -1000, 417, -1000, 368, 409, -1000,
	-1000, -1000, -1000, 3721, -1000, 4004, 4058, 16858, -1000, 1750,
	30368, -1000, -1000, -1000, 2322, 3872, -1000, -1000, -1000, 135,
	79067, 1913, 2288, 3719, 3367, 53866, 79067, -1000, -1000, -1000,
	-1000, -1000, -1000, 462, -1000, 462, 462, 3718, 3714, 79067,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 79067, -1000, -1000,
	-1000, -1000, -1000, 1666, 3712, 3711, 3710, 3709, -1000, 3708,
	3706, 4220, 4015, 4004, -1000, 4057, 4004, 238, -1000, 1180,
	-1000, 2731, 2729, 3284, -1000, 58412, -1000, -1000, -1000, 99646,
	-1000, -1000, -1000, 79067, 79067, 977, -1000, -1000, 99646, -1000,
	3503, 3502, 1342, 79067, 53866, 53866, -1000, -1000, -1000, 79067,
	-1000, -1000, -1000, 1206, -1000, -1000, 1206, 236, -1000, -1000,
	424, 79067, 51846, -1000, 2191, 418, -1000, -1000, 432, -1000,
	-1000, 53866, -1000, 79067, 153, 59927, 234, -1000, 79067, 79067,
	1824, 1823, 1817, 1795, 1782, 243, -1000, 1830, 53866, -1000,
	-1000, 200, 65937, -1000, 53866, -1000, -1000, 1008, -1000, -1000,
	-1000, -1000, 3654, -1000, 1583, -1000, -1000, 27797, 219, -1000,
	-1000, 1209, -1000, 967, -1000, 3300, 3557, 30368, 101, 79067,
	-1000, 79067, 3608, 3608, 3608, 3608, 79067, -1000, 30368, 30368,
	1921, 1785, 30368, 35508, 35508, -1000, 30368, 1207, -1000, -1000,
	-1000, -1000, 3670, -1000, -1000, 2076, 2957, 30368, -1000, -1000,
	1486, 1482, -1000, -1000, -1000, -1000, 5904, 5800, 232, -1000,
	24197, 654, 27283, 215, -1000, 420, 15806, -1000, -1000, 923,
	-1000, -1000, -1000, 645, 26769, -1000, -1000, 1274, -54, -54,
	30368, 30368, 2094, 1967, 1812, 1775, 4214, 4220, 2560, -1000,
	30368, 15162, -1000, 1274, -1000, -1000, 95732, 30368, 2957, 3501,
	3493, 30368, 30368, 2921, 3586, -1000, -1000, 2808, 15071, -1000,
	-1000, -1000, -1000, 99646, -1000, 30368, -1000, 2271, -1000, -1000,
	30368, 30368, -1000, 99646, 35508, 35508, 35508, 35508, 35508, 35508,
	35508, 35508, 35508, 35508, 35508, 35508, 35508, 2855, 35508, 976,
	499, 499, 499, -1000, -1000, 26255, 30368, 30368, 99646, 642,
	641, 638, -1000, 30368, 111, 30368, -1000, -1000, -1000, -1000,
	222, -1000, 30368, 20558, 6362, 636, 38070, 221, 1457, -1000,
	2957, 30368, -1000, 1218, 3218, 30368, 3492, 3490, 3218, -1000,
	634, -1000, 632, 30368, 30368, 30368, 14509, 3557, -1000, 842,
	16858, 1008, -1000, -1000, 25226, 982, 1008, 1190, 79067, 420,
	3241, -1000, 16858, 1176, 79067, -1000, 16858, 3090, 39600, 3441,
	3438, 39600, 3462, 3413, 3413, 3413, -1000, 1594, -1000, 79067,
	974, -1000, 69977, 71492, 69977, 69977, 54371, 631, 3630, -1000,
	-1000, 57907, 973, -1000, -1000, -1000, 3071, 972, 37560, 30368,
	420, 22652, 30368, 1696, -1000, -1000, -1000, 3385, 2336, 61930,
	-1000, 2044, 62435, 884, 3454, 866, 1357, -1000, 870, 4176,
	885, 1008, -1000, 216, 6654, 3366, 79067, 7138, 971, -1000,
	-1000, -1000, 2736, 30368, -1000, -1000, 208, -1000, 196, 1526,
	-1000, 96237, 30368, 30368, -1000, 79067, 1923, 79067, 3481, -1000,
	-1000, 3585, 96237, 96237, -1000, 4238, 21580, 970, 79067, 3986,
	969, 79572, 53866, 4150, -1000, 79067, -1000, -1000, 79067, 2787,
	-1000, 4010, 1360, 968, 35508, 79067, 2886, -1000, 2483, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 967, 4210, 4209,
	99646, -1000, 79067, 3976, 630, 193, -1000, -1000, 79067, -1000,
	-1000, -1000, -1000, -1000, 962, -1000, -1000, 409, -1000, -1000,
	-1000, 2336, 884, 649, 2944, 1454, 1313, 51846, -1000, 135,
	135, 53866, 53866, -1000, -1000, 4220, 4220, 859, 4220, 135,
	3989, 79067, 3986, 2118, 79067, -1000, 3705, 3410, -1000, 79067,
	39600, 41115, 14422, 3489, -1000, -1000, 3621, 70987, 3621, -1000,
	961, -1000, 462, 2956, 4220, 79067, 79067, -1000, 3336, -1000,
	-1000, -1000, 79067, 4056, 2661, -1000, 70482, -1000, 3366, 14241,
	79067, 2458, 79067, 79067, -1000, 79067, 40105, -1000, -1000, 2702,
	1781, 866, 2468, 2175, 1523, -1000, -1000, 1696, 1660, 2458,
	79067, -1000, 79067, -1000, -1000, -1000, -1000, -1000, 20558, 21580,
	20558, -1000, -1000, -1000, -1000, -1000, -1000, 1723, 79067, -1000,
	-1000, 21069, -1000, -1000, -1000, -1000, -1000, 79067, 79067, 79067,
	1631, 3583, 79067, 1630, 3581, 79067, 79067, 79067, 79067, -1000,
	3704, 190, 1687, 2334, -1000, 3703, 190, 1659, 79067, -1000,
	-1000, -1000, -1000, 1515, 369, 79067, -1000, 79067, -1000, 13864,
	2458, -1000, 2279, -1000, 3702, 3701, 2068, 2695, 79067, 3995,
	960, 135, 1897, -1000, -1000, -1000, 79067, 79067, -1000, 1321,
	903, 79067, 79067, 79067, 79067, 79067, 4220, 2717, 4050, -1000,
	79067, -1000, 20558, -1000, 22116, 1506, 2637, -1000, 4175, 3380,
	3377, -1000, 99159, 2262, 1719, 1719, 3005, 153, 135, 135,
	4004, -1000, -1000, -1000, -1000, -1000, 1736, -1000, 2634, 2462,
	51341, 2465, -1000, 153, -1000, 928, 389, -1000, 79067, 79067,
	79067, 79067, 79067, -1000, 20558, -1000, -1000, -1000, -1000, -1000,
	4004, 3669, 205, -1000, -1000, 1582, -1000, 198, -1000, 30368,
	-1000, 44682, -1000, -1000, 3555, 3577, 16858, -1000, -1000, 79067,
	79067, 79067, 79067, -1000, 614, 678, 30368, 30368, 784, 2320,
	909, 678, 30368, 30368, -1000, -1000, 463, 2290, 2275, 30368,
	30368, -1000, 13472, -1000, 197, -1000, 30368, -1000, -1000, 4220,
	30368, -1000, 627, 623, 613, 16858, 16858, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 611, -1000, -1000, 16858, 30368, 607,
	2050, -1000, 13217, 3218, 3870, 3869, -1000, -1000, 3218, 30368,
	2868, -1000, 592, 16858, 590, 12823, -1000, 206, 206, 366,
	366, 366, -1000, 599, 599, 599, 599, 599, 599, 499,
	3668, 2796, -1000, 3146, 12620, 12475, 12288, 587, -1000, -1000,
	-1000, 111, 12026, -1000, 32938, -1000, -1000, 582, 1404, 1399,
	-1000, 3572, 37050, 2871, -1000, 30368, 186, 32424, 3218, -1000,
	-1000, 581, -1000, 3867, 3853, 573, -1000, -1000, 11651, 11651,
	11651, 99646, 3555, -1000, 571, 175, 3165, 40105, 3122, -1000,
	-1000, 3233, -1000, -1000, 30368, -1000, 79067, 3630, 39600, 39600,
	3529, 3436, 39600, -1000, -1000, -1000, -1000, -1000, 59927, 957,
	79067, -1000, -1000, -1000, -1000, 69977, 956, 79067, 79067, -1000,
	46787, 3042, 953, 167, 43, 11577, 938, 1696, 2856, -1000,
	2044, 952, -1000, 2424, 3361, -1000, 3576, 194, -1000, -1000,
	-1000, 4002, 3080, 1608, 2672, -1000, -1000, 61930, 79067, 3089,
	2549, 3989, 3987, 3986, -1000, 951, 3486, 2016, 101107, -1000,
	16858, 4220, 3003, 99646, -1000, 16858, 16858, 1903, -1000, 82,
	79067, 96237, -1000, 191, -1000, 1080, -1000, 3637, 2331, 4174,
	79067, 813, 4012, -1000, 1700, -1000, -1000, -1000, 3990, 3990,
	30368, 3146, 805, 4172, -1000, 3961, -1000, -1000, 3374, -1000,
	-1000, 79067, -1000, 4220, -1000, 1879, 20558, 375, 1727, 3080,
	61930, 3087, 79067, 2493, -1000, 1725, 135, 135, -1000, -1000,
	-1000, -1000, -1000, 4171, 1608, 59927, -1000, -1000, 2765, -1000,
	3890, 3367, 53866, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	101, -1000, -1000, 41115, -1000, -1000, -1000, -1000, 30368, -1000,
	1590, 2485, 3665, -1000, -1000, 3655, -1000, 79067, 1313, -1000,
	69472, -1000, -1000, -1000, 183, -1000, 1693, -1000, 2452, 2344,
	-1000, 168, 2458, 166, 165, -1000, 3997, 921, 3952, 30368,
	3849, 4146, 4145, -1000, -1000, 2886, 3848, 4169, 903, -1000,
	-1000, -1000, -1000, 2886, -1000, 4284, 99646, 928, 903, 4004,
	4004, -1000, -1000, 913, -1000, -1000, -1000, -1000, 3700, 3699,
	79067, 53866, -1000, 79067, 53866, -1000, -1000, -1000, 3697, 79067,
	79067, 79067, 1628, 3574, 79067, 79067, 79067, -1000, -1000, 1504,
	-1000, 4004, -1000, -1000, 79067, 79067, 61, -1000, 4214, 4214,
	99646, 160, -1000, 4214, 4214, -1000, -1000, 1261, 30368, 3695,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4004, -1000,
	4220, 4220, -1000, 4004, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 99646, 99646, 79067, 79067, 161, 154, 79067, 3694,
	-1000, -1000, -1000, -1000, -1000, -1000, 3661, 64927, -1000, 79067,
	-1000, -1000, -1000, 1340, -1000, 153, 153, 153, 153, 153,
	-1000, -1000, 51341, 4004, -1000, -1000, 11319, 569, 1397, 30368,
	3949, -1000, -1000, -1000, -1000, 678, 678, 30368, 30368, 30368,
	678, 463, -1000, -1000, 678, 678, -1000, -1000, 11266, -1000,
	1274, -1000, -1000, -1000, -1000, 16858, -1000, 1274, 3573, -1000,
	568, -1000, -1000, 567, 142, 79067, -1000, -1000, 30368, 35508,
	3640, -1000, 30368, 30368, 30368, -1000, -1000, 150, 149, 949,
	-1000, -1000, -1000, -1000, 2871, 3572, -1000, -1000, 11048, 566,
	1674, 16858, 2834, 560, -1000, -1000, -1000, -1000, 3218, 30368,
	3235, 3218, 2224, 1397, 3325, 3171, 147, -1000, 79067, 2831,
	16858, -1000, -1000, 3529, -1000, 945, 30368, 39600, -1000, 943,
	79067, 146, -1000, 79067, 133, 132, 99646, 131, -1000, 4167,
	3084, 34994, 30368, 558, 3283, -1000, 4044, 4044, 3261, -1000,
	3515, 20558, 938, 4220, 3361, 79067, 2739, 2739, 2931, 79067,
	-1000, 62435, 1794, 1319, 2044, -1000, 79067, 2395, 555, 884,
	79067, 79067, -1000, -1000, 1731, 4166, 40105, 68967, -1000, 128,
	-1000, 98672, -1000, 8400, -1000, 1494, -1000, 2999, 1516, 3639,
	126, -1000, 554, 1704, 1689, 1577, 79067, 1008, 125, 61930,
	4049, 4150, -1000, 3845, 3362, 3362, 10735, 2177, 696, -1000,
	79067, -1000, -1000, 118, -1000, 79067, 1722, 553, 79067, 1313,
	2617, 79067, 1008, -1000, 937, 2118, 79067, 936, 3995, 135,
	475, 10685, 59927, 4163, 4163, 79067, 925, 924, 911, -1000,
	-1000, -1000, -1000, 2458, 2382, -1000, -1000, -1000, -1000, -1000,
	2382, 1973, 2382, 40105, 45211, -1000, 79067, 79067, -1000, 10516,
	-1000, 4048, 4047, -1000, -1000, 910, -1000, 4165, 3976, -1000,
	-1000, -1000, -1000, 21580, 79067, 79067, 2073, 444, 2073, 410,
	79067, -1000, -1000, 3692, 79067, 53866, -1000, -1000, 3691, -1000,
	-1000, 2458, -1000, -1000, 2068, 44682, 44177, -1000, 2695, 908,
	902, 898, 10457, 79067, -1000, -1000, -1000, -1000, 3976, 551,
	-1000, -1000, -1000, 98185, 99646, -1000, 51341, 51341, 3479, -1000,
	-1000, 200, -1000, -1000, -1000, -1000, 79067, 16858, 31396, 678,
	678, 678, -1000, 542, 2273, 30368, -1000, -1000, -1000, 10386,
	747, 35508, 16858, 16858, 16858, -1000, 30368, -1000, 30368, -1000,
	-1000, -1000, 1529, -1000, -1000, 2925, 134, -1000, 4164, 541,
	3477, 30368, -1000, -1000, -1000, -1000, -1000, -1000, 2927, 3235,
	534, -1000, 2366, -1000, 3264, 3322, 3277, -1000, 3612, 40105,
	-1000, 1008, -1000, 79067, 16858, -1000, 30368, 115, -1000, 113,
	-1000, -1000, 1200, 46787, -1000, 897, 79067, 108, -1000, 1791,
	35508, 10123, -1000, -1000, -1000, 3184, 30368, 3180, -1000, 3195,
	-1000, -1000, -1000, 4161, 4161, -1000, -1000, 4161, 4161, 2988,
	4220, 103, -1000, 39085, 3612, -1000, 2931, 102, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3454, 892, -1000, -1000, 3361, -1000, -1000, 3060, 3054, 2336,
	2044, 884, 885, 1331, 1259, 1256, 1008, 95, 3366, 101107,
	7138, -1000, -1000, 330, -1000, -1000, 99646, 3696, 2570, 1516,
	-1000, 2126, -1000, -1000, -1000, 79067, -1000, -1000, 3994, 3993,
	-1000, -1000, 79067, 1460, -1000, 3987, 3986, 79067, -1000, 2351,
	-1000, 2092, 3457, 2071, 834, 30368, 2509, -1000, 20558, 1313,
	79067, 2336, 884, -1000, 2941, 1313, 3989, 525, 59927, -1000,
	4228, -1000, 39600, -1000, 4163, -1000, 2488, -1000, -1000, 60432,
	30368, 30368, 1794, 3990, 879, 3990, 79067, 3990, -1000, -1000,
	875, 3290, 866, -1000, 3952, -1000, -1000, 30368, 2391, 3364,
	-1000, -1000, -1000, -1000, -1000, 1627, -1000, 1623, -1000, 79067,
	2073, 400, 79067, -1000, 933, 2996, -1000, 99646, -1000, 99646,
	99646, 30368, -1000, -1000, 4004, -1000, 522, 521, 515, 432,
	423, 1719, 4004, 127, -1000, 4162, 121, -1000, 16858, -1000,
	-1000, -1000, -1000, 23167, 860, 856, 512, -1000, 494, 31910,
	31910, 31910, 111, 30368, 747, 92, 90, -1000, 2829, 2904,
	2930, 2948, 30368, 20558, -1000, 2983, 16858, -1000, -1000, 483,
	3473, -1000, -1000, -1000, 79067, 3318, 3317, 57402, -1000, -1000,
	-1000, 88, 85, -1000, -1000, -1000, -1000, 79067, 77, -1000,
	97698, 34994, 105, 20558, 3146, 3044, 79067, 3182, 16858, 3192,
	3571, 4220, 4220, 4220, 4220, 49826, 3842, 49321, -1000, -1000,
	20558, -1000, -1000, -1000, -1000, -1000, 50836, -1000, 3454, -1000,
	1608, 40610, 1794, 2931, -1000, -1000, 2044, 3361, 3080, 3989,
	-1000, 1324, 1323, 3987, 2378, 852, -1000, 2016, -1000, -1000,
	2544, 837, 1695, -1000, -1000, 4161, -1000, -1000, 2586, -1000,
	2484, 2481, -1000, -1000, -1000, 4160, 797, 1614, -1000, 2342,
	-1000, 3471, 3468, 3255, -1000, -1000, -1000, -1000, 6654, 9844,
	4159, 79067, -1000, -1000, 1313, 1716, 3080, 79067, -1000, -1000,
	-1000, 835, 74, -1000, 101, -1000, -1000, -1000, 73, -1000,
	4214, 60, 59, 3362, 79067, 3362, 805, 3362, 44682, 1209,
	3290, -1000, 9221, 834, -1000, 30368, 79067, 79067, -1000, -1000,
	1609, -1000, 1988, 1752, 1988, 53, 49, 45, 8903, -1000,
	-1000, -1000, -1000, -1000, -1000, 3633, -1000, 79067, 832, 31396,
	-1000, 30368, 30368, 824, -1000, 2555, -1000, 36536, 2134, 1842,
	6250, 2555, 2555, 16858, -1000, -1000, -1000, 3235, 2897, 2887,
	-1000, 2939, -1000, 2934, 2929, 2912, -1000, -1000, -1000, -1000,
	2960, 395, 3568, 3567, 397, 4158, 1867, 42, -1000, 79067,
	3216, 3070, -1000, 37050, -1000, 3079, -1000, -1000, -1000, 3163,
	3263, -1000, -1000, 3149, 1056, 3225, -1000, -1000, -1000, -1000,
	82, -1000, 48816, 82, -1000, -1000, 39, -1000, -1000, 1608,
	-1000, 21, -1000, 921, 3952, 30368, 3454, 3361, 2931, 2044,
	-1000, -1000, -1000, -1000, 4010, 819, 40105, -1000, 2118, 30368,
	-1000, -1000, -1000, 79067, 2567, 59927, 59927, 1008, 61930, 79067,
	-1000, -1000, 3245, -1000, 3250, 2653, 2653, 3113, 1644, 2068,
	-1000, -1000, 79067, 1711, 1313, 482, -1000, 4226, -1000, 60432,
	-1000, -1000, 3690, -1000, 19, -1000, 2177, 3612, 476, -1000,
	1209, -1000, -1000, 16858, 2073, 2073, 79067, -1000, -1000, -1000,
	3563, -1000, 59927, -1000, -1000, -1000, 51341, -1000, -1000, -1000,
	17, -6, 31396, -1000, 1990, 4040, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 455, 3461, 3460, -1000, -1000, 2911, -1000,
	2910, -1000, 3235, -1000, 79067, 79067, 79067, -1000, -1000, 79067,
	-1000, 816, -1000, -1000, 3216, -1000, 35508, 35508, 3841, -1000,
	35508, -1000, 3042, 815, -1000, 57402, -1000, -1000, 3233, 79067,
	3335, 811, -1000, -1000, 82, -1000, -1000, 50836, -1000, -1000,
	40610, 79067, 79067, 8476, 1608, 2931, 3454, 3361, 3986, 40105,
	-8, 59927, 8232, -1000, -1000, 1838, 78, 62, 3987, -1000,
	-1000, 2751, -1000, -1000, 3837, -1000, -1000, -1000, 61, 1313,
	79067, -1000, -1000, -1000, -1000, 810, 2458, -1000, 2458, 3457,
	-1000, -1000, -1000, -1000, -1000, 2073, 79067, -1000, 423, -1000,
	-1000, -10, 1815, -1000, -1000, 1374, 30882, -1000, 2879, 2872,
	-1000, -1000, 3456, 3397, 380, 377, -1000, 30368, -1000, 3146,
	3146, -1000, 3146, 3078, 78562, 58, 2823, -12, -1000, 30368,
	-1000, -1000, -1000, -1000, 3952, -1000, 3454, 1608, 2931, 1608,
	-13, -1000, 2378, 809, -1000, 3696, 3688, 3628, -1000, -1000,
	805, 805, -1000, 1313, 30368, -1000, 2458, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2877, 2873, 2924, 48311, 79067, 79067,
	79067, 6562, 79067, -40, -1000, 97211, 3051, 3334, 3223, -42,
	79067, 1608, -1000, 3454, 3612, -1000, 40105, 4010, 20047, 2542,
	1688, 1679, -1000, -1000, -1000, -46, 2458, -1000, -1000, -1000,
	3939, 988, -1000, -1000, -1000, -1000, -1000, -47, 3235, 78562,
	3069, 1707, 4225, -1000, -1000, -1000, 3233, -1000, -1000, -1000,
	1608, -1000, -1000, 3986, -66, -1000, -1000, -1000, -1000, -1000,
	2118, 3983, 3981, -1000, 48311, 30368, -1000, 454, -1000, -1000,
	2925, 3046, 3046, 4223, 3166, 2820, -1000, 1608, -1000, 20047,
	59927, 2478, 2477, 3359, -54, -1000, 2904, 2925, 3235, -1000,
	796, 79067, 3334, 3612, -1000, 795, 59927, 59927, 79067, 398,
	3235, 2904, -1000, 78562, 3074, -1000, -1000, 20047, -1000, -1000,
	-1000, 4220, -1000, 3235, -72, 775, -76, -1000, -1000, 78562,
	-1000, -78, -1000,
}

var yyPgo = [...]int16{
	0, 4750, 4746, 3059, 144, 0, 87, 7439, 4743, 130,
	306, 366, 4742, 320, 514, 378, 143, 376, 377, 4260,
	10103, 9280, 141, 4741, 325, 4741, 4740, 364, 332, 278,
	4739, 225, 4738, 4737, 179, 228, 4736, 299, 4735, 431,
	4734, 28, 4733, 4732, 285, 164, 390, 435, 416, 420,
	4730, 351, 392, 356, 349, 4728, 7452, 510, 3204, 9,
	4727, 4725, 1238, 4722, 4721, 4719, 343, 4718, 289, 4716,
	4715, 4713, 4711, 12, 384, 4711, 4708, 340, 4707, 4705,
	4702, 96, 4699, 4698, 4697, 4696, 226, 373, 342, 4694,
	568, 339, 755, 247, 1775, 11266, 4693, 363, 318, 1354,
	211, 4692, 4691, 12944, 4689, 4688, 12361, 12207, 12135, 4684,
	11739, 10728, 237, 259, 312, 4683, 307, 301, 423, 651,
	387, 4, 621, 385, 4682, 4681, 4680, 168, 4676, 4674,
	58, 59, 341, 4673, 4672, 79, 30, 60, 419, 393,
	4671, 4670, 417, 4665, 4664, 10033, 66, 219, 4663, 137,
	4660, 346, 348, 62, 48, 4659, 345, 300, 284, 42,
	295, 201, 54, 200, 347, 4658, 4655, 4654, 4651, 293,
	272, 84, 9093, 430, 424, 238, 233, 212, 181, 4649,
	255, 253, 4644, 4643, 4642, 4641, 4640, 4639, 4637, 4636,
	4634, 4633, 4630, 4629, 4628, 4627, 38, 33, 4625, 4623,
	276, 279, 288, 335, 4617, 338, 156, 19, 27, 146,
	152, 4615, 4614, 4611, 4608, 20, 82, 16, 4607, 4606,
	4605, 370, 4604, 428, 4603, 4602, 292, 327, 4601, 4600,
	3205, 532, 3190, 4599, 99, 323, 4595, 4594, 4593, 154,
	4592, 4591, 4587, 70, 4587, 57, 68, 4586, 40, 145,
	358, 304, 400, 46, 305, 436, 277, 4584, 422, 389,
	382, 90, 167, 7, 268, 191, 280, 4583, 270, 4582,
	4581, 4581, 410, 328, 269, 281, 153, 133, 4580, 437,
	4578, 414, 4573, 4568, 4565, 4561, 334, 155, 86, 4560,
	261, 4559, 102, 4557, 4556, 109, 333, 23, 50, 4554,
	41, 107, 43, 166, 4553, 76, 329, 1, 14, 10,
	4552, 527, 4551, 74, 4550, 412, 298, 4549, 336, 286,
	4548, 344, 71, 18, 11, 4547, 2, 25, 6, 13,
	287, 4546, 53, 4545, 93, 4543, 267, 180, 132, 4540,
	140, 4539, 63, 45, 129, 4538, 4537, 4536, 148, 24,
	4535, 103, 4534, 185, 313, 4532, 4531, 4527, 29, 44,
	117, 67, 69, 47, 31, 98, 49, 4525, 4524, 35,
	88, 4523, 230, 39, 8, 77, 310, 100, 4522, 22,
	21, 36, 337, 243, 375, 365, 4520, 37, 309, 402,
	4518, 4516, 401, 131, 367, 34, 250, 4515, 232, 4514,
	51, 4511, 94, 61, 171, 64, 65, 4507, 55, 244,
	4506, 85, 411, 4505, 315, 92, 14530, 4504, 135, 314,
	440, 72, 4503, 242, 190, 4502, 26, 354, 116, 433,
	397, 4501, 357, 4501, 4500, 4498, 245, 240, 142, 4486,
	175, 4482, 4480, 4479, 4476, 398, 4475, 4474, 4469, 4468,
	4466, 4464, 4462, 4461, 4460, 4457, 4454, 4452, 4451, 4450,
	4448, 438, 441, 4444, 359, 4443, 442, 352, 4439, 399,
	4436, 121, 4435, 395, 350, 4433, 4432, 4429, 355, 445,
	413, 404, 4428, 161, 403, 56, 4425, 80, 421, 797,
	220, 106, 83, 4424, 4423, 192, 291, 429, 183, 149,
	4422, 4419, 4417, 4416, 4414, 4412, 4411, 4410, 4409, 4407,
	4406, 4405, 4404, 4402, 4401, 4400, 4399, 4398, 4397, 4392,
	4391, 4389, 4388, 4385, 4382, 4380, 4379, 4377, 4375, 4368,
	4367, 4366, 4362, 4361, 4360, 4359, 4358, 4357, 4356, 4355,
	4354, 4352, 266, 260, 4350, 4349, 4345, 369, 368, 308,
	317, 427, 257, 273, 101, 4343, 4340, 119, 4339, 4338,
	4336, 408, 4335, 444, 4334, 4330, 4329, 4328, 178, 120,
	4327, 89, 177, 439, 52, 4318, 4317, 235, 311, 115,
	108, 4316, 4314, 4312, 4309, 4308, 199, 4306, 4305, 258,
	75, 4304, 302, 249, 446, 360, 407, 432, 4303, 406,
	4302, 1861, 409, 4297, 265, 264, 95, 361, 4296, 97,
	4294, 4290, 326, 426, 227, 4288, 4287, 4286, 73, 4282,
	4281, 263, 319, 4280, 4279, 4278, 4277, 4274, 4273, 3,
	91, 17, 5, 4270, 4267, 32, 4266, 4265, 303, 4264,
	4256, 380, 78, 81, 4255, 4254, 4253, 4251, 297, 4246,
	4245, 330, 15, 4244, 4244, 3287, 405,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 18, 18, 380, 380, 415, 415,
	415, 25, 25, 26, 26, 27, 27, 28, 28, 41,
	41, 41, 5, 5, 5, 6, 6, 6, 6, 6,
	8, 8, 7, 13, 13, 14, 14, 416, 416, 24,
	24, 16, 16, 648, 648, 410, 410, 410, 410, 410,
	410, 410, 410, 410, 15, 15, 17, 17, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 644, 644, 644, 644, 644,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 92, 94, 93, 93, 93, 101, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 116, 116, 60, 60, 87, 87, 91,
	91, 90, 90, 90, 90, 88, 88, 61, 61, 61,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	74, 74, 76, 76, 76, 76, 76, 77, 77, 77,
	78, 12, 12, 12, 12, 12, 12, 12, 12, 79,
	79, 80, 72, 81, 81, 202, 202, 82, 82, 82,
	83, 83, 83, 84, 84, 85, 85, 85, 85, 287,
	287, 287, 601, 601, 122, 122, 122, 122, 122, 122,
	122, 73, 73, 86, 86, 86, 63, 64, 64, 67,
	67, 66, 65, 65, 68, 68, 68, 71, 71, 120,
	120, 120, 69, 69, 70, 155, 155, 155, 148, 148,
	148, 148, 148, 148, 157, 157, 157, 157, 156, 156,
	156, 156, 156, 158, 158, 158, 158, 158, 119, 119,
	99, 100, 100, 100, 100, 100, 95, 95, 95, 97,
	98, 113, 113, 114, 114, 102, 102, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 109, 109,
	105, 105, 645, 645, 646, 646, 96, 96, 96, 96,
	96, 96, 106, 107, 110, 111, 108, 108, 108, 108,
	647, 117, 117, 117, 118, 118, 104, 104, 145, 145,
	147, 147, 149, 149, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 146, 146, 121, 121,
	126, 126, 123, 123, 152, 152, 151, 151, 169, 169,
	172, 172, 173, 173, 171, 171, 171, 171, 171, 171,
	171, 171, 138, 138, 139, 139, 140, 140, 142, 143,
	143, 143, 143, 141, 141, 144, 144, 144, 174, 174,
	174, 174, 174, 174, 174, 257, 257, 256, 256, 259,
	259, 259, 259, 260, 260, 261, 261, 262, 262, 262,
	262, 262, 262, 262, 262, 262, 262, 262, 262, 418,
	418, 419, 419, 419, 420, 420, 420, 273, 273, 273,
	273, 273, 273, 274, 274, 274, 274, 275, 275, 276,
	276, 277, 277, 277, 278, 278, 279, 279, 281, 282,
	282, 282, 283, 283, 283, 284, 284, 284, 285, 285,
	263, 263, 205, 205, 205, 226, 266, 266, 265, 265,
	265, 265, 268, 268, 268, 268, 268, 267, 267, 269,
	269, 270, 270, 271, 271, 272, 272, 286, 286, 295,
	295, 291, 291, 292, 293, 293, 294, 294, 606, 289,
	289, 288, 288, 290, 301, 301, 303, 303, 302, 302,
	302, 302, 304, 304, 305, 305, 296, 296, 297, 297,
	298, 298, 298, 299, 299, 300, 300, 300, 300, 300,
	306, 311, 310, 310, 322, 322, 312, 312, 313, 314,
	314, 317, 317, 316, 316, 318, 318, 318, 319, 319,
	319, 320, 320, 315, 315, 321, 321, 324, 324, 325,
	325, 325, 325, 325, 325, 325, 325, 326, 326, 326,
	326, 323, 323, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 328, 328, 328, 328, 328, 329, 329, 330,
	330, 331, 331, 307, 307, 308, 308, 308, 308, 308,
	308, 309, 309, 175, 417, 417, 195, 195, 195, 195,
	195, 217, 217, 196, 196, 200, 176, 197, 197, 203,
	203, 201, 198, 198, 177, 280, 280, 178, 199, 199,
	179, 179, 220, 220, 221, 221, 227, 227, 227, 236,
	236, 237, 237, 239, 239, 240, 240, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 241, 241, 246, 247, 247, 247, 247, 247,
	247, 242, 242, 248, 253, 253, 253, 253, 249, 249,
	249, 249, 34, 34, 392, 392, 392, 392, 392, 392,
	392, 392, 391, 391, 391, 390, 390, 390, 390, 390,
	252, 252, 563, 563, 251, 251, 649, 649, 590, 590,
	222, 222, 223, 223, 224, 224, 225, 225, 209, 209,
	209, 209, 209, 218, 218, 219, 219, 210, 210, 212,
	213, 214, 214, 214, 214, 214, 207, 204, 204, 204,
	211, 211, 211, 244, 244, 245, 245, 215, 215, 215,
	216, 216, 208, 208, 153, 153, 153, 154, 154, 154,
	206, 206, 180, 180, 180, 180, 180, 180, 394, 394,
	394, 394, 394, 394, 394, 394, 332, 332, 333, 333,
	336, 336, 336, 339, 347, 347, 347, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 396, 396, 397,
	397, 398, 398, 399, 399, 334, 334, 335, 335, 340,
	340, 341, 341, 342, 342, 342, 342, 343, 346, 346,
	400, 400, 401, 401, 402, 10, 33, 337, 351, 351,
	352, 352, 352, 352, 355, 355, 355, 355, 358, 358,
	358, 404, 404, 407, 407, 409, 409, 409, 409, 405,
	405, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 408, 408, 408, 408, 408, 408, 650, 650, 29,
	29, 29, 403, 403, 406, 406, 353, 353, 353, 353,
	353, 353, 353, 353, 353, 338, 338, 354, 354, 354,
	354, 354, 354, 354, 356, 356, 345, 345, 344, 344,
	360, 360, 359, 359, 359, 359, 364, 364, 364, 364,
	364, 361, 362, 363, 363, 363, 363, 363, 365, 365,
	366, 366, 367, 368, 368, 369, 369, 369, 395, 395,
	373, 373, 373, 373, 374, 374, 375, 375, 376, 181,
	181, 357, 357, 377, 377, 379, 379, 378, 378, 381,
	381, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 382, 382, 387, 387, 383, 383, 11, 489,
	489, 489, 489, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 385, 385, 385, 386, 388, 388,
	651, 651, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 183, 183, 183, 439, 439, 439, 595, 595, 595,
	598, 598, 598, 598, 597, 597, 599, 599, 440, 441,
	441, 441, 441, 466, 466, 469, 470, 470, 470, 472,
	472, 472, 445, 445, 445, 445, 445, 445, 445, 442,
	442, 446, 446, 467, 467, 468, 468, 473, 471, 471,
	443, 443, 443, 443, 443, 444, 444, 185, 185, 185,
	185, 185, 474, 474, 186, 186, 186, 475, 475, 476,
	476, 477, 477, 187, 188, 188, 188, 188, 188, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 39, 39, 40, 40, 428, 89, 89, 89,
	89, 427, 75, 75, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 349,
	349, 350, 350, 350, 350, 350, 350, 370, 371, 371,
	372, 372, 372, 372, 434, 434, 434, 434, 602, 602,
	603, 603, 604, 604, 604, 605, 605, 605, 605, 605,
	607, 607, 607, 607, 607, 608, 112, 112, 112, 609,
	609, 610, 610, 612, 612, 612, 612, 612, 617, 617,
	611, 611, 618, 618, 618, 438, 636, 636, 619, 619,
	600, 600, 436, 436, 620, 620, 620, 622, 622, 621,
	621, 621, 621, 621, 627, 627, 628, 628, 630, 625,
	625, 626, 626, 633, 623, 623, 653, 653, 624, 624,
	631, 631, 652, 652, 629, 629, 629, 632, 632, 632,
	632, 634, 634, 437, 437, 437, 437, 243, 243, 635,
	635, 635, 635, 500, 500, 500, 500, 501, 502, 502,
	502, 502, 502, 502, 502, 503, 503, 503, 503, 503,
	503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
	503, 507, 507, 542, 542, 654, 654, 508, 508, 509,
	509, 543, 543, 545, 545, 545, 545, 510, 544, 544,
	546, 511, 511, 511, 511, 511, 511, 511, 511, 511,
	511, 511, 511, 511, 532, 533, 533, 549, 549, 549,
	549, 548, 548, 547, 547, 554, 554, 534, 534, 535,
	535, 535, 550, 550, 551, 551, 552, 552, 536, 536,
	536, 536, 537, 537, 538, 539, 539, 553, 553, 585,
	585, 585, 585, 586, 586, 593, 587, 588, 588, 589,
	506, 506, 506, 506, 506, 540, 540, 541, 541, 591,
	591, 592, 592, 498, 498, 499, 422, 422, 423, 421,
	421, 421, 424, 424, 425, 425, 425, 425, 596, 596,
	596, 596, 596, 596, 596, 596, 596, 596, 596, 594,
	594, 594, 594, 255, 255, 258, 258, 250, 250, 637,
	637, 637, 637, 637, 637, 637, 637, 637, 639, 639,
	639, 254, 254, 9, 9, 9, 9, 641, 641, 478,
	478, 478, 638, 638, 638, 638, 638, 640, 640, 640,
	640, 479, 479, 393, 393, 393, 393, 393, 393, 411,
	411, 30, 30, 31, 32, 32, 35, 35, 35, 35,
	36, 36, 38, 38, 38, 38, 412, 413, 413, 414,
	414, 512, 512, 513, 558, 558, 558, 558, 555, 555,
	557, 556, 556, 514, 559, 559, 515, 515, 516, 517,
	560, 560, 564, 564, 565, 565, 565, 565, 565, 566,
	566, 567, 567, 568, 568, 569, 569, 518, 570, 570,
	519, 519, 520, 520, 572, 572, 577, 577, 577, 521,
	521, 521, 522, 522, 522, 522, 573, 573, 578, 578,
	578, 578, 578, 578, 578, 264, 264, 523, 524, 524,
	524, 524, 524, 524, 524, 524, 524, 525, 525, 525,
	571, 571, 571, 526, 581, 581, 574, 574, 579, 579,
	579, 579, 579, 561, 561, 642, 642, 642, 643, 643,
	527, 528, 528, 575, 575, 580, 580, 529, 530, 576,
	576, 576, 576, 531, 531, 562, 562, 582, 582, 583,
	583, 584, 584, 45, 45, 45, 44, 44, 159, 159,
	162, 162, 162, 162, 162, 165, 166, 167, 168, 163,
	163, 160, 161, 161, 164, 164, 127, 127, 128, 128,
	130, 132, 132, 132, 131, 133, 133, 129, 129, 134,
	134, 134, 134, 135, 135, 136, 136, 136, 136, 136,
	137, 137, 137, 137, 137, 47, 47, 47, 47, 46,
	46, 48, 48, 48, 48, 48, 48, 49, 49, 50,
	50, 51, 52, 52, 52, 53, 53, 54, 54, 55,
	55, 447, 447, 447, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 448, 448, 655, 655, 655, 462, 462,
	462, 449, 455, 453, 450, 450, 451, 451, 451, 451,
	461, 461, 454, 452, 452, 452, 452, 452, 452, 480,
	480, 481, 481, 463, 463, 463, 463, 463, 463, 464,
	464, 464, 464, 464, 464, 464, 464, 464, 497, 497,
	456, 457, 457, 458, 458, 459, 459, 460, 482, 482,
	465, 465, 465, 494, 494, 494, 487, 487, 487, 487,
	487, 487, 483, 483, 483, 483, 483, 484, 484, 488,
	488, 488, 488, 488, 496, 496, 496, 496, 496, 496,
	496, 496, 496, 496, 496, 496, 496, 496, 496, 496,
	496, 496, 496, 496, 496, 485, 485, 490, 490, 492,
	492, 486, 486, 495, 493, 493, 493, 491, 491, 42,
	42, 37, 37, 43, 43, 124, 125, 125, 435, 435,
	435, 429, 429, 613, 613, 613, 613, 613, 613, 613,
	613, 613, 613, 613, 613, 613, 613, 613, 613, 613,
	615, 615, 614, 614, 614, 616, 616, 616, 616, 616,
	656, 656, 426, 426, 426, 426, 430, 430, 504, 505,
	431, 431, 432, 432, 432, 432, 433, 433, 433, 433,
	189, 228, 228, 228, 228, 228, 228, 229, 229, 229,
	190, 190, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 230, 230,
	231, 231, 191, 191, 192, 233, 233, 170, 170, 170,
	170, 170, 193, 193, 193, 234, 234, 235, 194, 194,
	194, 194,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 2, 0, 3, 0, 2, 0, 1, 0, 2,
	2, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 2, 3,
	0, 1, 3, 1, 0, 3, 3, 4, 4, 4,
	4, 3, 2, 1, 1, 2, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 5, 3, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 3, 3, 2, 2, 3, 5, 4, 6,
	3, 5, 4, 6, 4, 6, 5, 7, 3, 2,
	4, 2, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 3, 4, 4, 6, 3,
	3, 4, 3, 4, 4, 5, 4, 5, 1, 1,
	3, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 5, 6, 3,
	4, 1, 1, 2, 4, 1, 1, 1, 2, 2,
	2, 2, 1, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 6,
	2, 3, 5, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 2, 1, 2, 1,
	0, 2, 2, 3, 5, 0, 2, 4, 3, 1,
	5, 1, 1, 4, 1, 4, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 6, 4, 4,
	6, 4, 4, 4, 4, 4, 6, 5, 5, 5,
	4, 6, 4, 4, 4, 4, 5, 7, 7, 9,
	4, 6, 5, 5, 7, 7, 4, 7, 4, 6,
	6, 4, 5, 4, 5, 3, 11, 8, 9, 8,
	1, 0, 5, 5, 3, 3, 5, 3, 2, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	5, 3, 4, 1, 3, 3, 1, 2, 2, 0,
	1, 2, 0, 2, 3, 3, 3, 4, 0, 1,
	1, 1, 1, 2, 3, 4, 5, 6, 8, 6,
	6, 1, 3, 1, 3, 3, 5, 1, 0, 1,
	2, 4, 2, 0, 3, 3, 2, 1, 3, 4,
	3, 5, 4, 3, 5, 1, 1, 1, 1, 4,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 3, 2, 3, 2, 0, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 3, 3, 0, 2, 3, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 3,
	3, 2, 4, 1, 5, 2, 5, 2, 5, 2,
	1, 3, 3, 0, 1, 0, 3, 0, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 0,
	5, 0, 5, 0, 0, 1, 1, 3, 1, 1,
	3, 3, 1, 1, 1, 2, 4, 4, 2, 3,
	5, 5, 1, 3, 1, 0, 1, 2, 3, 2,
	4, 2, 3, 2, 0, 1, 2, 0, 9, 9,
	2, 1, 4, 4, 4, 1, 0, 1, 3, 3,
	2, 1, 1, 2, 0, 1, 3, 2, 3, 2,
	3, 1, 4, 2, 3, 2, 3, 2, 3, 1,
	1, 2, 2, 4, 1, 2, 3, 3, 4, 5,
	4, 5, 4, 2, 2, 2, 1, 1, 0, 5,
	2, 2, 2, 3, 1, 0, 1, 3, 9, 1,
	2, 0, 7, 7, 0, 10, 6, 0, 4, 5,
	2, 0, 2, 4, 0, 1, 1, 0, 5, 2,
	4, 1, 1, 4, 5, 4, 0, 2, 0, 1,
	0, 1, 5, 1, 0, 2, 0, 2, 6, 2,
	0, 1, 3, 2, 4, 0, 1, 3, 2, 1,
	0, 1, 3, 3, 2, 0, 2, 2, 2, 3,
	3, 4, 1, 3, 3, 2, 7, 12, 1, 3,
	2, 3, 3, 1, 2, 2, 2, 2, 1, 2,
	13, 2, 2, 0, 2, 0, 1, 3, 3, 1,
	3, 1, 3, 3, 3, 3, 3, 0, 3, 3,
	0, 3, 0, 7, 7, 3, 0, 2, 1, 1,
	1, 1, 1, 1, 2, 2, 1, 3, 3, 6,
	0, 3, 0, 2, 3, 2, 3, 4, 4, 3,
	3, 0, 5, 2, 5, 2, 0, 4, 2, 1,
	0, 1, 0, 1, 3, 3, 6, 7, 5, 7,
	9, 2, 0, 7, 1, 3, 1, 4, 4, 7,
	2, 1, 1, 1, 3, 2, 8, 1, 3, 3,
	5, 2, 1, 3, 7, 2, 0, 10, 1, 2,
	9, 11, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 3, 0, 1, 3, 2, 0, 1, 1, 3,
	3, 1, 1, 3, 3, 3, 3, 4, 4, 3,
	3, 2, 1, 3, 2, 1, 1, 1, 1, 3,
	0, 1, 3, 1, 1, 1, 1, 1, 1, 2,
	2, 1, 1, 1, 2, 2, 1, 3, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 0, 2, 0, 1, 0, 1, 0,
	1, 0, 1, 0, 1, 0, 1, 0, 4, 4,
	4, 5, 5, 2, 5, 3, 5, 2, 0, 3,
	1, 2, 5, 5, 8, 3, 4, 8, 5, 0,
	4, 3, 0, 1, 3, 1, 3, 2, 2, 4,
	4, 5, 2, 0, 1, 1, 0, 2, 2, 0,
	2, 0, 13, 16, 12, 15, 14, 17, 1, 1,
	2, 2, 2, 2, 1, 0, 1, 0, 1, 3,
	1, 1, 1, 3, 3, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 1,
	0, 2, 2, 1, 0, 3, 0, 1, 3, 1,
	1, 2, 4, 6, 6, 10, 1, 2, 1, 3,
	4, 0, 1, 3, 2, 1, 1, 6, 2, 0,
	3, 1, 1, 2, 1, 2, 2, 2, 2, 3,
	0, 1, 2, 1, 2, 1, 3, 2, 3, 1,
	2, 2, 2, 1, 2, 3, 1, 2, 2, 2,
	2, 3, 3, 3, 1, 3, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 0, 2, 1, 4, 4,
	5, 2, 5, 5, 7, 3, 1, 5, 9, 3,
	9, 4, 11, 10, 2, 0, 1, 3, 3, 6,
	4, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 3, 3, 4, 0,
	1, 0, 6, 1, 3, 3, 3, 5, 2, 0,
	3, 4, 4, 0, 2, 0, 4, 0, 3, 16,
	19, 1, 0, 2, 0, 4, 0, 1, 3, 2,
	0, 4, 6, 4, 6, 4, 4, 6, 4, 6,
	5, 7, 5, 7, 4, 6, 10, 13, 10, 13,
	11, 14, 1, 3, 1, 0, 1, 3, 1, 1,
	1, 1, 1, 2, 5, 3, 6, 4, 6, 6,
	9, 5, 7, 6, 6, 5, 5, 5, 5, 9,
	4, 5, 7, 6, 4, 8, 4, 2, 4, 3,
	6, 4, 3, 3, 3, 2, 2, 3, 4, 4,
	3, 3, 3, 3, 3, 3, 4, 4, 3, 2,
	3, 2, 2, 3, 4, 3, 2, 2, 3, 4,
	4, 4, 5, 1, 4, 4, 4, 3, 3, 2,
	1, 0, 6, 4, 6, 4, 6, 8, 4, 6,
	4, 6, 5, 7, 2, 3, 3, 2, 5, 1,
	1, 2, 3, 2, 1, 1, 2, 1, 2, 2,
	4, 3, 5, 1, 3, 2, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 6,
	5, 3, 5, 1, 0, 1, 3, 2, 1, 1,
	2, 3, 4, 3, 2, 4, 4, 6, 4, 4,
	2, 5, 2, 0, 5, 5, 5, 1, 1, 1,
	1, 3, 0, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 1, 2, 1, 1, 1, 3, 3,
	3, 3, 3, 2, 1, 3, 2, 3, 5, 5,
	5, 2, 1, 3, 6, 6, 6, 6, 6, 8,
	8, 6, 6, 7, 9, 9, 8, 10, 6, 6,
	6, 6, 6, 6, 6, 8, 6, 8, 6, 8,
	7, 9, 6, 8, 7, 9, 8, 10, 8, 10,
	9, 11, 8, 10, 9, 11, 8, 8, 7, 6,
	6, 6, 6, 8, 8, 8, 8, 6, 9, 0,
	2, 2, 1, 2, 2, 2, 2, 3, 1, 3,
	3, 1, 5, 3, 9, 12, 7, 7, 3, 2,
	1, 3, 1, 3, 3, 3, 3, 2, 2, 1,
	1, 1, 1, 2, 1, 1, 1, 4, 5, 1,
	0, 1, 2, 2, 2, 2, 1, 1, 1, 3,
	3, 5, 1, 4, 0, 2, 3, 0, 1, 1,
	2, 1, 17, 21, 1, 1, 2, 1, 3, 1,
	1, 1, 3, 1, 2, 0, 1, 2, 4, 1,
	1, 1, 1, 1, 3, 0, 1, 0, 1, 1,
	4, 0, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 2, 0, 9, 11, 12, 14, 3, 0, 3,
	4, 4, 0, 6, 4, 9, 7, 6, 4, 6,
	6, 5, 7, 9, 6, 6, 5, 4, 4, 3,
	6, 6, 6, 6, 4, 7, 5, 8, 7, 8,
	6, 5, 8, 1, 0, 1, 0, 4, 6, 5,
	8, 2, 0, 2, 2, 2, 1, 5, 2, 0,
	2, 6, 6, 6, 10, 6, 6, 6, 9, 9,
	6, 6, 9, 6, 7, 7, 6, 2, 2, 2,
	2, 1, 2, 1, 0, 1, 2, 10, 13, 5,
	4, 4, 2, 0, 2, 2, 1, 0, 11, 14,
	12, 15, 8, 11, 8, 7, 9, 1, 1, 3,
	3, 5, 6, 1, 3, 1, 3, 1, 3, 3,
	7, 9, 9, 8, 6, 1, 0, 1, 3, 3,
	1, 5, 3, 8, 11, 6, 1, 0, 5, 2,
	3, 0, 2, 0, 1, 1, 1, 1, 1, 3,
	3, 2, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 3, 2, 2, 1, 2, 2, 2, 2,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 2,
	0, 2, 0, 4, 1, 3, 1, 2, 2, 2,
	1, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	3, 11, 13, 5, 1, 2, 2, 1, 1, 3,
	5, 1, 3, 7, 2, 0, 5, 5, 10, 8,
	2, 0, 2, 0, 1, 1, 1, 1, 1, 2,
	0, 2, 0, 4, 0, 5, 0, 8, 1, 1,
	8, 11, 6, 8, 1, 3, 1, 1, 3, 4,
	7, 6, 5, 5, 5, 5, 1, 3, 4, 4,
	4, 3, 4, 3, 1, 4, 0, 8, 5, 5,
	6, 7, 7, 7, 4, 4, 5, 11, 10, 10,
	2, 2, 0, 13, 2, 0, 1, 3, 5, 5,
	3, 6, 2, 1, 0, 2, 4, 0, 1, 3,
	6, 8, 8, 1, 3, 5, 5, 10, 10, 11,
	11, 5, 5, 6, 10, 1, 0, 2, 0, 1,
	0, 2, 2, 1, 1, 0, 4, 0, 1, 3,
	1, 1, 1, 1, 1, 2, 4, 4, 5, 2,
	0, 3, 1, 3, 4, 3, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 3,
	3, 3, 0, 1, 4, 2, 2, 2, 2, 2,
	3, 2, 2, 3, 0, 2, 2, 1, 1, 1,
	0, 2, 4, 5, 6, 4, 5, 2, 3, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 2, 3, 2, 5, 4,
	3, 3, 3, 3, 3, 1, 1, 0, 2, 3,
	0, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	0, 3, 6, 3, 5, 3, 5, 3, 5, 2,
	0, 2, 0, 1, 2, 2, 2, 3, 3, 2,
	2, 3, 3, 1, 1, 3, 3, 2, 1, 1,
	8, 8, 11, 5, 7, 6, 9, 5, 2, 0,
	3, 3, 3, 7, 7, 10, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 4, 5, 1, 3, 2,
	2, 2, 2, 2, 1, 2, 2, 4, 3, 2,
	2, 2, 2, 2, 2, 3, 2, 2, 2, 2,
	5, 5, 5, 5, 5, 1, 3, 1, 2, 3,
	0, 3, 1, 2, 1, 1, 1, 3, 0, 1,
	3, 1, 3, 1, 3, 6, 4, 0, 5, 5,
	5, 1, 2, 4, 5, 1, 1, 1, 1, 3,
	3, 2, 2, 1, 2, 2, 2, 2, 1, 2,
	1, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 2, 1, 3, 7, 4,
	1, 3, 4, 6, 4, 8, 1, 1, 1, 1,
	7, 2, 2, 2, 2, 3, 0, 2, 2, 0,
	2, 2, 1, 2, 3, 3, 3, 3, 4, 4,
	3, 3, 3, 4, 4, 3, 4, 4, 1, 1,
	1, 0, 2, 2, 5, 3, 0, 1, 1, 1,
	1, 1, 3, 9, 12, 3, 0, 6, 2, 3,
	2, 3,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -448, -169, -175, -176, -177,
	-178, -179, -180, -181, -182, -183, -184, -434, -435, -436,
	-437, -498, -499, -500, -501, -502, -503, -504, -505, -506,
	-507, -508, -509, -510, -511, -532, -533, -534, -535, -536,
	-537, -538, -539, -512, -513, -514, -515, -516, -517, -518,
	-519, -520, -521, -522, -523, -524, -525, -526, -527, -528,
	-529, -530, -531, -439, -440, -447, -449, -450, -451, -452,
	-453, -454, -455, -456, -457, -458, -459, -460, -441, -442,
	-446, -443, -444, -185, -186, -187, -188, -189, -190, -191,
	-192, -193, -194, 266, 212, -171, -172, -278, 111, 26,
	22, 27, 394, 93, 401, 191, 436, 228, 407, 413,
	397, 378, 290, 405, 274, 475, -471, 428, 223, 395,
	220, 259, 250, 280, 345, 222, 273, 249, -174, -173,
	-277, 531, 119, 202, 63, 67, -285, 36, 518, 86,
	540, -655, 486, 457, -655, 96, 97, 98, 99, 531,
	-236, 115, -394, -357, -27, 33, 414, 261, 62, 464,
	454, 225, 276, 284, 422, 103, -422, 268, 449, 375,
	194, 438, 387, 443, 512, -561, 406, 71, 453, 451,
	58, 289, 473, 471, 40, 67, 307, 419, 480, 85,
	284, 104, 199, 225, 236, 247, 261, 286, 71, -563,
	62, 375, 385, 387, 409, 414, 422, 443, 412, 460,
	268, 406, 103, 449, 438, 454, 464, 276, 40, 384,
	-389, -392, -391, 464, 261, 307, 103, 406, 71, 67,
	419, 480, 85, 284, 225, 236, 438, 454, 194, 268,
	276, -563, 387, 414, 422, 375, 412, 460, 85, -595,
	58, 423, 457, -596, -594, -255, 56, 217, 414, 347,
	406, 488, -5, 4, -19, -20, 191, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 22, 201, 203, 204,
	205, 55, 206, 207, 208, 210, 211, 212, 88, 70,
	213, 214, 215, 24, 216, 218, 219, 220, 221, 222,
	223, 123, 226, 227, 228, 229, 230, 141, 231, 101,
	232, 233, 234, 235, 236, 111, 237, 154, 238, 120,
	121, 90, 246, 247, 248, 249, 250, 251, 253, 254,
	98, 149, 150, 255, 89, 256, 257, 258, 259, 260,
	261, 176, 27, 262, 138, 264, 148, 265, 267, 136,
	42, 268, 270, 271, 272, 273, 274, 275, 276, 277,
	279, 281, 282, 91, 283, 153, 165, 285, 286, 287,
	288, 289, 291, 294, 295, 151, 296, 297, 298, 28,
	299, 300, 301, 302, 303, 304, 305, 306, 307, 308,
	309, 310, 312, 313, 314, 96, 315, 317, 318, 145,
	503, 319, 320, 321, 322, 92, 324, 327, 328, 329,
	332, 333, 334, 335, 336, 337, 105, 85, 338, 99,
	340, 341, 342, 343, 344, 345, 346, 131, 348, 349,
	350, 351, 352, 353, 354, 357, 110, 358, 359, 32,
	139, 122, 504, 505, 502, 144, 62, 506, 507, 124,
	501, 508, 102, 364, 365, 366, 367, 368, 369, 370,
	129, 371, 128, 373, 374, 375, 377, 378, 379, 380,
	382, 383, 384, 385, 386, 112, 387, 152, 143, 388,
	389, 390, 391, 84, 132, 393, 394, 395, 396, 397,
	398, 399, 34, 400, 401, 402, 35, 403, 404, 405,
	407, 408, 409, 410, 127, 412, 413, 146, 415, 416,
	87, 417, 418, 419, 420, 421, 422, 93, 425, 427,
	428, 429, 430, 431, 107, 433, 434, 435, 436, 437,
	438, 113, 114, 439, 440, 441, 147, 442, 443, 445,
	446, 104, 448, 449, 108, 451, 452, 453, 454, 455,
	458, 460, 462, 463, 464, 465, 466, 467, 468, 142,
	469, 50, 472, 473, 474, 97, 475, 476, 477, 478,
	155, 183, 479, 480, 481, 482, 483, 485, 168, 486,
	140, 487, 498, 499, 57, 37, 173, 169, 189, 179,
	178, 224, 188, 187, 29, 278, 175, 292, 293, 500,
	186, 171, 185, 166, 160, 162, 163, 159, 161, 156,
	164, 158, 126, 157, 325, 339, 181, 182, 355, 356,
	360, 170, 361, 362, 376, 177, 174, 411, 426, 172,
	444, 184, 459, 461, 86, 180, 489, 490, 491, 492,
	493, 133, 494, 495, 496, 497, 125, -598, -597, 56,
	457, 423, -255, 21, 217, 58, 347, 406, 414, 488,
	-655, 457, -655, 379, -655, 379, -5, 423, 457, 56,
	413, -5, 457, -7, -5, -483, -484, 21, -488, 63,
	392, 26, 22, -5, -483, 290, -484, -5, -445, -471,
	118, 531, -169, -175, -176, -177, -178, -498, -499, 26,
	-225, 531, 79, -223, 531, 118, -255, 56, 457, 423,
	21, 531, -223, -477, 531, 21, 451, 453, 374, 420,
	-226, -7, -232, -226, -230, 349, 382, 91, 92, 193,
	396, -93, 21, 285, 210, 64, 45, -92, 534, 535,
	12, -232, -226, 21, -7, -7, 378, 21, -160, -121,
	470, 316, 269, 509, -173, -174, -172, -171, -172, -277,
	-269, -270, 21, 41, -418, -416, -419, -5, 66, 541,
	-279, 84, -281, -7, -279, 531, -3, -462, 30, -479,
	-478, -638, 318, 389, 252, 31, 73, -420, -418, 64,
	73, -170, -169, -175, -176, -177, -178, -416, 67, 480,
	84, 419, 307, 286, 385, 460, 117, 199, 458, -562,
	463, 34, -18, -5, 28, -15, -5, -146, 221, 279,
	-149, -5, 11, -150, 534, 535, 536, 537, 538, 539,
	525, 526, 527, 18, 19, 20, -15, 87, -15, 28,
	-7, 28, 246, 67, -7, 28, 336, -11, -489, -9,
	241, 245, 424, 4, -19, -20, -21, 209, 115, 225,
	25, 81, 242, 116, 79, 44, 76, 52, 53, 75,
	77, 46, 82, 54, 80, 363, 78, 48, 450, 118,
	85, 460, -7, -7, 340, -380, 28, -15, -7, -7,
	531, 236, -11, -11, 453, 451, 453, 451, -418, 28,
	21, -416, 28, 21, -416, 28, -416, 28, 480, 67,
	246, 93, 401, -427, -601, -95, -5, 4, -19, -21,
	-15, -15, -7, -15, -426, -601, -21, -5, -11, -489,
	321, 221, 279, -7, 28, -426, -7, -426, -7, -7,
	-7, -7, -7, 460, -11, -489, 21, -11, 336, -489,
	21, -7, -15, 28, 87, -15, -7, 383, 28, -17,
	-15, 28, -13, -7, -7, 28, -252, 28, -99, -100,
	-102, -103, -109, -105, -108, -95, 186, 171, 172, 173,
	174, 175, 176, 187, 188, 170, 189, -110, -111, -106,
	-107, 184, 56, 4, -19, 169, -96, 178, 179, 180,
	181, 182, -252, 28, 25, 336, -383, 28, -489, -383,
	28, -383, 28, 480, 246, 67, 87, 340, 460, 321,
	480, -595, 423, -595, 219, 209, -478, 431, 64, 61,
	527, 533, 57, -94, 7, -94, -639, -94, 40, -254,
	-9, -94, 506, 57, 318, 209, -462, -479, -462, -94,
	-462, 61, -94, -5, -94, -233, 531, 74, 61, 541,
	383, 531, -243, 531, -243, -243, 104, -243, 74, 506,
	64, 506, -223, -445, -466, -469, -470, 86, -9, -471,
	515, 473, -222, 116, -466, -467, -468, -473, -416, -466,
	57, 318, 209, -466, -416, -7, -5, -475, 414, -476,
	307, 67, 104, 247, -466, -228, -226, -231, -230, -231,
	-231, -231, -93, -93, -231, -231, -231, -93, 21, -231,
	-93, 21, -92, -92, -234, 531, -7, 21, -138, -47,
	-140, 130, -48, -49, -142, 68, 280, 69, -143, -45,
	21, 41, -45, -45, 70, -160, -121, 532, 532, -257,
	-256, -259, -56, 536, -58, 534, 535, -145, 31, 516,
	-120, 471, 40, -60, -59, 13, 531, -63, -61, -172,
	29, 134, -69, -70, 293, 11, 62, 411, -5, -92,
	6, -94, 49, 43, 47, 9, 10, -601, -644, -101,
	38, -122, -315, -62, -103, -645, -646, -108, -647, 185,
	161, 162, 225, 240, 243, 244, 330, 331, 241, 245,
	424, 447, 103, 239, 242, 512, 278, 356, 362, 376,
	444, 459, 461, 360, 224, 292, 325, 490, 491, 493,
	494, 492, 495, 496, 159, 160, 166, 164, 158, 339,
	156, 163, 157, 497, 173, 169, 189, 179, 178, 188,
	187, 175, 186, 171, 181, 182, 170, 174, 172, 56,
	184, 180, -110, -111, -106, -107, -256, 74, 536, -87,
	-90, 533, 529, -416, 531, 531, 541, -279, -24, 531,
	-119, -56, 218, 354, 541, -638, 327, 66, 487, 252,
	-417, -416, 93, -5, 23, -420, -420, 532, -243, -416,
	28, -235, -416, 480, -416, 28, -28, 25, -601, -601,
	-7, 460, -601, 130, -563, -394, 473, 209, -424, 31,
	-590, 23, -113, 533, -412, 531, -15, -15, 533, -412,
	23, 368, 257, 452, 231, -412, 64, 31, -29, 36,
	518, 31, 140, -416, 28, -550, 464, 31, 130, 28,
	-29, 480, -7, -559, 365, 74, -7, -24, 31, -411,
	130, 36, 232, -99, -15, -29, -29, -382, -385, 398,
	-384, 207, 256, 196, 22, 27, 477, 93, 223, 264,
	258, 309, 354, 122, 31, 365, 401, 400, 153, -31,
	507, 29, 45, -382, -386, 398, 207, 29, 45, -382,
	398, -405, -408, 354, 23, 213, 90, 305, 335, 338,
	342, 364, 419, 436, 402, 473, 29, -382, 398, 29,
	-416, 28, 21, -418, 28, 140, -594, -255, -597, 398,
	-39, 531, -87, 398, 398, 398, 398, -388, 27, 93,
	196, 477, 398, -429, -613, 215, 404, 441, 300, 434,
	482, 277, 418, 324, 31, 237, 127, 445, -600, 366,
	93, -440, -39, -87, 398, -497, 196, 27, -7, -15,
	-15, 74, 29, 398, -429, 398, 93, 196, 27, 398,
	-429, 398, 398, -551, -31, 479, 398, 93, 232, 394,
	196, 27, 264, 258, 430, 74, 74, -7, 398, -29,
	-461, 45, -461, 398, 130, -29, -461, -461, 398, 93,
	401, 398, 93, 29, 368, 257, 452, 231, 398, 196,
	27, 93, -431, -432, 22, 97, -497, -482, 29, 541,
	-415, 24, 35, 29, 541, -415, 74, 29, 541, -415,
	29, -114, -113, 531, -104, 531, 177, -114, -114, -114,
	531, -117, 518, 519, 531, -117, -118, 183, 531, -118,
	-118, 178, 179, -118, -415, 29, -17, 28, 130, 28,
	541, 29, 29, 29, 140, 368, 257, 452, 231, -28,
	219, 23, -254, 40, -94, 120, -258, 40, -250, -253,
	-249, 49, 43, 74, -254, 6, 534, 535, -93, -258,
	40, -5, -637, -94, 4, -249, 40, 58, 49, 43,
	74, 504, -641, 260, 234, 327, 413, -5, 23, -643,
	-99, -496, -16, 67, 419, 284, 286, 385, 409, 247,
	261, 321, 322, 367, 414, 449, 464, 21, -416, -383,
	-488, 531, -14, -5, -14, -496, 130, -383, 130, -445,
	532, 541, -472, -253, -249, -223, 532, 541, -24, 532,
	327, 532, -474, 83, 74, -28, -28, -28, 532, 121,
	115, 314, 203, 416, 354, -226, -226, -226, -226, -231,
	-231, -226, -226, -226, -231, -231, -226, -231, -231, -119,
	-46, -47, -139, -138, -142, 130, 389, 97, 354, 427,
	503, -49, -48, -50, -56, 21, -55, 91, 349, -51,
	-52, -56, -58, 534, 535, -141, 122, -173, -173, -173,
	-161, -164, -56, -138, -47, -272, 73, 541, 14, 39,
	55, 534, 535, 536, 537, 538, 539, 525, 526, 527,
	18, 19, 20, -145, 30, 33, 46, 516, 44, 48,
	52, 53, 54, 37, 45, -148, 23, -8, 11, 62,
	-149, 4, -23, 191, 192, 193, 194, 195, 196, 197,
	198, 199, 21, 200, 22, 201, 202, 119, 510, 94,
	203, 204, 205, 60, 206, 207, 208, 209, 210, 211,
	212, 173, 115, 169, 189, 511, 88, 70, 213, 214,
	215, 24, 216, 38, 512, 217, 218, 219, 513, 220,
	221, 222, 223, 224, 225, 514, 123, 226, 227, 228,
	229, 230, 25, 141, 231, 101, 232, 117, 233, 234,
	235, 236, 111, 237, 81, 154, 238, 120, 239, 240,
	241, 242, 243, 244, 245, 121, 90, 246, 247, 249,
	188, 187, 250, 40, 251, 252, 253, 254, 98, 149,
	150, 255, 89, 95, 256, 257, 258, 259, 41, 109,
	260, 261, 176, 27, 262, 263, 138, 264, 148, 265,
	266, 267, 136, 42, 268, 270, 271, 272, 273, 29,
	274, 275, 276, 277, 278, 43, 279, 282, 91, 175,
	283, 153, 284, 165, 285, 116, 79, 286, 287, 288,
	289, 291, 292, 293, 294, 295, 151, 296, 298, 28,
	299, 300, 301, 302, 303, 304, 305, 306, 307, 308,
	309, 310, 311, 312, 76, 500, 313, 314, 96, 315,
	186, 171, 185, 317, 318, 75, 166, 160, 162, 163,
	159, 161, 156, 164, 158, 126, 157, 145, 503, 319,
	320, 321, 322, 92, 323, 326, 324, 325, 77, 327,
	328, 329, 58, 330, 331, 332, 333, 334, 335, 336,
	337, 105, 85, 338, 99, 339, 340, 342, 343, 345,
	346, 347, 181, 82, 182, 131, 348, 349, 350, 351,
	352, 353, 354, 355, 356, 357, 31, 110, 358, 359,
	47, 360, 32, 170, 139, 122, 504, 505, 502, 144,
	66, 506, 507, 124, 501, 361, 80, 362, 102, 364,
	365, 366, 367, 368, 369, 370, 129, 371, 128, 372,
	373, 374, 375, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 385, 386, 112, 387, 152, 143, 388, 389,
	174, 390, 391, 84, 132, 392, 393, 394, 395, 396,
	397, 398, 399, 34, 400, 401, 402, 35, 403, 404,
	405, 78, 406, 407, 408, 409, 410, 411, 127, 412,
	413, 146, 414, 415, 416, 87, 418, 63, 419, 420,
	421, 422, 423, 424, 93, 426, 425, 427, 428, 429,
	430, 172, 431, 432, 107, 433, 434, 435, 436, 437,
	438, 113, 114, 439, 440, 441, 147, 442, 443, 444,
	445, 59, 446, 104, 447, 67, 448, 450, 449, 108,
	451, 452, 453, 454, 106, 455, 56, 184, 456, 457,
	458, 459, 460, 461, 49, 462, 463, 464, 465, 466,
	467, 468, 142, 469, 471, 50, 472, 473, 474, 97,
	103, 83, 475, 476, 477, 478, 155, 86, 180, 190,
	118, 479, 480, 481, 482, 51, 483, 486, 140, 487,
	488, 489, 490, 491, 492, 493, 133, 494, 495, 496,
	497, 125, 499, 57, -56, -56, -56, -56, -56, 363,
	-358, 32, -88, -56, -119, -172, -87, -172, -172, -68,
	529, 531, 531, 531, -87, -94, 531, -94, -94, 531,
	-64, -56, -126, 485, -123, 281, 531, 531, 130, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, -272, 531, -90, -97, 536, -6, 4, -19,
	-20, -21, -22, 21, 202, 119, 30, 510, 134, 23,
	94, 60, 511, 38, 512, 513, 39, 514, 117, 26,
	239, 240, 241, 243, 244, 245, 40, 252, 95, 41,
	109, 263, 266, 269, 43, 280, 130, 284, 64, 290,
	71, 72, 45, 311, 316, 73, 323, 326, 68, 330,
	331, 31, 47, 69, 74, 66, 33, 509, 372, 381,
	392, 100, 63, 424, 432, 59, 447, 67, 106, 61,
	456, 49, 470, 471, 103, 83, 190, 51, 65, 484,
	36, -56, -91, -416, -119, -281, 23, -13, 541, 532,
	39, 55, 30, 33, 46, 44, 48, 52, 37, 45,
	62, 218, -638, -640, 389, 399, 421, -195, -169, 102,
	531, 40, 23, -197, -203, -201, 531, -5, -5, -280,
	83, 83, 61, -220, 64, 61, 531, 122, 370, -243,
	31, 23, -243, -416, -542, -405, 354, 31, -18, 28,
	-5, -602, 531, -602, -620, 211, 198, 315, -7, -585,
	-587, 531, -99, 321, 480, 84, -489, -425, -180, -181,
	-436, -437, 26, 29, -99, 533, -97, -413, -414, -6,
	-561, 83, -146, 531, 267, 388, -15, -15, -15, -15,
	-15, 29, -543, 29, -7, 531, 370, 31, -552, -551,
	-94, 29, -553, -489, 103, 31, -480, -423, 28, -416,
	74, 332, -489, -416, 464, 74, 29, 21, -573, -578,
	67, 448, -5, -419, 242, -416, -412, -94, 23, 130,
	-480, -480, 541, 61, -651, 117, 514, 370, 370, -337,
	28, 514, -338, -5, 117, -354, 513, 471, 381, 284,
	270, -651, 117, -651, 117, 117, 168, 335, 473, 194,
	449, -370, 531, 74, 460, 201, 400, 412, 411, 460,
	412, 411, -416, 309, 153, -15, 122, 61, -370, 298,
	411, 531, -418, 449, 61, 370, -416, 449, 61, -408,
	90, 338, 342, -100, -249, -650, 70, -249, -249, 70,
	346, -29, -29, -416, 61, -651, -416, -382, 398, 29,
	45, -382, 398, 29, -7, 61, -40, 532, -605, -607,
	-98, -112, 45, 361, 500, 190, -95, -99, 426, 61,
	61, 61, 61, 117, 40, 31, 117, 40, 31, -591,
	117, -592, 513, 31, 117, 61, -656, -613, 35, 74,
	47, 418, 254, 317, 324, -249, -249, -15, -5, -596,
	423, 457, 61, 103, 398, 83, 83, -416, -7, 61,
	-656, 61, -412, -573, -573, -573, 61, -656, 61, 61,
	-31, -94, 47, 61, -412, 387, -94, 387, 387, 387,
	-412, -416, -416, 398, -558, 264, 258, 61, -481, -599,
	93, -440, 247, -599, 61, -553, -481, -599, -599, 61,
	-370, -370, 61, 438, -15, -15, -15, -15, -15, 61,
	208, 155, 155, 208, 155, 208, 531, 541, 208, -544,
	-390, -389, 199, 512, 261, 286, 62, 385, 409, 458,
	464, -392, 247, 406, 443, 449, 307, -494, -465, 290,
	405, 45, 130, -17, -15, -13, -7, -15, -7, -99,
	-252, -114, -119, -92, -92, 56, 56, -92, 531, -92,
	-118, -118, -252, -415, 29, -553, 29, -489, -383, -383,
	-383, -416, 457, 541, 6, 6, -5, -170, 541, 532,
	61, 541, -16, -16, 246, 422, -430, -426, -430, -430,
	-13, -17, -13, 139, -42, -37, -5, -13, -13, -17,
	448, 420, 287, 386, 410, -491, 36, 291, -14, 541,
	532, 532, 64, -483, -484, -491, -484, -445, -469, -224,
	119, -467, -473, -467, -416, -7, -416, -416, -7, -18,
	-229, 36, 168, 416, -226, -226, -226, -226, -226, -226,
	532, 66, 503, 427, 541, -52, -54, -58, 534, 535,
	411, 127, 531, -54, 411, 127, -53, -92, 6, -53,
	-144, 359, 430, -16, 541, 83, -153, 94, 95, -46,
	-139, -260, 64, -410, 453, 451, 58, 289, 473, 67,
	-416, -259, -99, -15, 56, 58, -56, -56, -56, -56,
	-56, -56, -56, -56, -56, -56, -56, -56, -56, -56,
	-56, -56, 46, 44, 48, 37, 45, -56, 61, 47,
	31, 49, 43, 50, 41, 260, 357, -157, -156, 350,
	351, 352, 353, 166, -152, 59, 60, -151, -172, 531,
	-155, 510, 432, 21, -6, 531, -120, 411, 531, -172,
	41, 31, -90, 532, 541, -119, -71, 530, -68, -119,
	-146, -119, 532, -73, 532, 536, 190, 21, 41, -86,
	-56, -98, -95, -115, 498, 344, 248, 297, 341, -116,
	417, -92, -67, -66, 51, -123, 71, -132, 508, 531,
	-316, -58, -56, -311, -56, 531, -92, -92, -92, -92,
	-56, -78, -12, 4, 498, 344, 248, 297, 341, 417,
	-94, -56, -79, -74, -56, -73, -80, -57, -58, 534,
	535, -145, 411, -76, -74, -56, -56, 511, 326, 456,
	-77, -56, 64, -119, -56, -119, -119, -119, -119, 346,
	-81, -202, -56, -641, -58, 346, -56, -73, -317, -321,
	-316, 100, -56, -314, -171, -321, -311, -172, -311, -56,
	-311, 532, -311, -311, -311, -641, -260, -119, 530, 542,
	532, 532, -282, 85, 31, 532, -56, 468, 229, 389,
	-204, 74, -217, 103, 104, -196, -200, -5, 86, -5,
	-260, 541, 527, -198, -201, -88, -205, 65, -261, -262,
	-418, -172, 323, -273, 531, -286, -296, -306, -287, 127,
	125, 126, -5, -122, -62, -315, -601, 166, -262, -221,
	112, -221, -332, -333, -5, -336, -337, -339, -338, 46,
	-15, 122, -395, 83, 29, 273, -381, 36, 531, 29,
	74, 31, 404, -609, -610, -612, 23, 321, 458, 484,
	-613, -603, 532, -604, -605, -609, -622, -621, 96, 98,
	97, 462, 122, 198, -412, 536, -586, 509, -588, -593,
	-589, -605, 4, 321, -7, -416, 480, -424, -394, -27,
	-18, -5, -351, -97, 532, 541, 527, 130, -7, -289,
	-288, -290, -5, 531, -412, -412, -412, -412, -412, -15,
	-545, 414, 479, 64, 24, -7, -547, -548, -549, 295,
	354, 478, -332, 122, 29, 284, -7, 422, 29, -463,
	-464, 446, 197, 406, 45, 371, 265, 469, 309, 4,
	232, 476, 103, 23, 31, -243, -6, 7, -560, 23,
	-570, 307, 67, -572, -577, -5, -287, 531, -15, 448,
	-411, 541, -418, 45, -87, -243, -243, 387, -99, -94,
	-384, -7, -7, -7, -416, -416, 31, -337, 28, -99,
	-7, 531, -358, -376, 83, 503, 503, -377, 83, -5,
	-92, -7, 28, -5, 28, -7, -7, 505, 223, 340,
	-7, -371, -372, -6, -7, -7, 21, 103, 460, 412,
	460, 412, -7, 327, -7, 21, 103, -7, 327, -416,
	411, -489, -38, 110, 79, 40, 83, 327, -32, -35,
	-402, 93, 196, 27, -10, -6, -382, -385, 398, -7,
	-7, -416, -382, 398, -7, -7, -249, -15, -15, -249,
	-249, -382, 398, -405, -7, -7, -382, 398, 61, -651,
	-416, 449, 61, -651, -418, 398, -547, -548, -7, 532,
	541, -98, -112, -607, -112, -95, 361, -113, -95, -7,
	-7, -7, -7, -7, 47, -7, 28, -56, 47, -7,
	531, 47, -7, -7, 47, 74, 254, 317, -11, -383,
	61, -7, -7, 398, -567, 61, 74, -7, -7, -7,
	-7, -7, -7, -13, -411, -13, -13, 398, 398, 61,
	400, 201, -11, -464, -595, -7, -11, 422, -7, -7,
	-34, -93, 40, 93, 398, 398, 398, 398, -7, -7,
	-94, -26, 28, -290, -94, 28, -5, -615, -614, -6,
	-432, 196, 27, -5, -546, 61, -7, -15, -427, 531,
	-99, -426, -428, 221, 279, -146, -426, -426, 130, -99,
	-483, -483, 290, 414, 406, 103, -415, -415, -415, 74,
	-415, 532, 532, 532, 57, 57, 532, -119, 532, -415,
	-17, 422, 130, -421, 36, -478, -250, -99, -485, -490,
	-489, 71, -416, 140, -13, 541, -43, -249, 541, 533,
	45, 45, 45, 45, 45, -486, -495, -6, 70, 532,
	-5, -485, 74, -415, 64, -467, -474, 130, 296, 296,
	97, -51, -54, 66, 36, -92, 6, 531, -119, 334,
	-164, -147, -149, 62, -154, 517, -263, 65, -261, -648,
	67, -648, 453, 451, 453, 451, -648, -416, 57, 42,
	-56, -56, 61, -152, 59, -151, 42, -56, 47, 49,
	43, 50, 41, 260, 357, -157, -156, 64, 357, -158,
	36, 168, 155, 134, 139, 146, -57, -57, -119, -172,
	531, -146, 531, -119, 41, -88, -56, 530, 530, 541,
	532, 532, 532, -121, 541, -160, 532, -86, -73, -73,
	16, 17, 61, 61, 61, 61, 531, 532, -65, -66,
	263, -56, -132, 531, -131, -5, 531, 65, -318, 47,
	192, 155, 542, -320, 509, -330, -329, 515, -56, 532,
	532, 532, 532, 23, 532, 64, 532, 541, 532, 532,
	372, 541, 532, 14, 534, 535, 536, 537, 538, 539,
	525, 526, 527, 18, 19, 20, -145, 52, 45, 62,
	-57, -57, -57, 532, 532, 48, 64, 130, 23, -77,
	-77, -77, 532, 64, -119, 541, 532, 532, 532, 532,
	-6, 532, 541, 23, -56, -302, 129, -6, 541, 532,
	-318, 541, 532, -99, -319, 541, 47, 192, -330, 532,
	-158, 532, -321, 541, 541, 541, -56, -263, 532, -91,
	-56, 531, 85, -206, 100, 101, 155, 532, 541, -88,
	-205, -203, -56, 532, 541, -206, -56, 120, 541, 81,
	-274, 75, 82, 79, 77, 78, 76, -266, -265, 23,
	-5, -266, -172, -286, -296, -306, -172, -273, -262, -268,
	-265, 23, -5, -266, -266, -295, 518, 64, 531, 531,
	-87, 531, 74, -227, -94, 113, 114, -227, 532, 541,
	-416, -334, 531, -416, -41, 36, 168, -7, -416, -235,
	-7, 23, -370, -14, -416, -418, 29, -608, 67, -112,
	-618, -438, 212, 403, -612, -617, -94, -254, -611, 130,
	532, 541, 40, 527, -618, 74, 33, 122, -622, 532,
	532, 509, 541, 70, 532, 541, 527, -7, 295, -243,
	-416, 67, 209, -424, -352, 117, -353, -355, 39, 31,
	47, 471, 381, 513, 40, 392, 288, 252, 311, -414,
	-393, -112, -22, -147, -249, -94, 355, 62, 534, 535,
	464, 532, 541, -99, -540, -541, -94, -412, 64, -7,
	-254, -254, -29, -400, 507, -549, -554, -7, 295, 478,
	-554, 532, -416, -416, 246, -550, -7, 130, -92, -383,
	-383, 406, 71, -94, 47, 371, 371, 68, 474, -383,
	-169, 29, -395, 273, 51, -381, -564, 130, 4, 295,
	64, 541, -56, -24, -411, -578, -243, 414, -243, -264,
	65, -264, -13, 532, 61, 61, 61, -342, 130, 40,
	-28, 282, 29, 31, -399, -398, 439, -354, 270, -56,
	531, -349, 307, 531, -376, 531, 531, -7, -388, 27,
	93, 401, 196, -407, -251, -31, -409, 402, 93, -349,
	29, -415, 29, -415, -36, -5, 40, 532, 541, 527,
	533, -7, -7, -7, -7, 418, 418, 327, 307, 418,
	532, 541, -402, -402, -10, -33, -94, 61, -651, 117,
	93, 364, 61, 93, 364, 61, 61, 61, -651, -7,
	-7, -382, 398, -7, -7, -7, -382, 398, 61, -31,
	-605, -112, -112, 538, -113, 61, -415, 29, -592, -56,
	-349, 313, 47, -7, 398, 398, 196, 27, 61, -568,
	83, -383, -416, -411, -411, -411, 61, 61, -7, -7,
	438, 61, 61, 61, 61, 61, 61, -94, 31, -415,
	29, -415, 541, 532, 527, -251, 93, -254, -99, -15,
	-15, -89, 531, -99, 74, 74, 506, -13, -383, -383,
	-15, -117, -117, 532, -415, -7, -553, 246, 354, -492,
	541, 36, -489, -13, -426, 541, -37, -5, 414, 414,
	414, 414, 414, -491, 541, -493, 506, 49, 43, -489,
	-491, -496, -383, -169, 66, 36, 455, -119, 532, 541,
	-154, 531, 91, 92, -44, 71, -56, -416, -416, -648,
	-648, -648, -648, -416, -56, -56, 42, 42, -56, -57,
	-57, -56, 42, 64, 357, -158, -56, 471, 471, 30,
	30, 532, -56, 532, -119, 532, 541, 532, -68, 532,
	190, -86, -121, -121, -121, -56, -56, 344, 297, 341,
	-116, 341, -116, -116, -92, -94, 266, -56, 106, -160,
	-133, -5, -56, -158, 74, 74, -311, -311, -319, 70,
	166, 532, -99, -56, -157, -56, -99, -57, -57, -57,
	-57, -57, -57, -57, -57, -57, -57, -57, -57, -57,
	41, 31, 260, -57, -56, -56, -56, -99, 532, 532,
	532, -119, -56, 532, 541, -202, -6, -82, 380, 442,
	532, -58, -303, 70, 532, 541, -84, 479, -158, -316,
	-330, -321, -311, 74, 74, -321, 532, 532, -56, -56,
	-56, 23, -44, 530, -170, -256, -211, 531, 74, -169,
	-169, 102, -200, -206, 527, -201, 122, -262, 75, 75,
	-262, -274, 75, -275, 80, -275, -275, -124, 450, -5,
	531, -266, -268, -266, -266, 532, -5, 531, 531, 124,
	531, -58, 133, -311, -73, -56, -29, -237, -649, 83,
	-365, 310, -336, -347, -366, -367, 370, -335, -340, -341,
	-338, -5, -334, -373, 74, -370, 505, 531, 122, 370,
	23, -234, -169, 532, -542, -377, -7, -609, 531, 206,
	-56, 541, 541, 464, -604, -56, -56, -416, -621, -14,
	74, 70, -593, -586, -589, 4, -393, 531, -554, -381,
	531, -416, 28, -489, -7, -15, 252, 47, -358, 503,
	531, -57, -416, -404, 201, 70, 253, 299, -99, -290,
	-301, 39, 532, 541, -15, -543, 531, -113, -365, -334,
	531, 370, 140, -552, -400, -553, -383, -383, -94, -94,
	-93, -94, -421, -423, -381, -652, 286, 385, -555, -557,
	-5, -566, 61, -565, 21, 63, 96, 97, 98, -554,
	-261, -577, 532, 74, -264, -5, 242, -264, 531, -411,
	36, 168, -94, -7, -7, 86, -337, 29, -397, -396,
	230, -5, 40, 532, -14, -350, 31, 252, 311, 354,
	-7, -14, -349, -14, -345, -344, -215, -5, -287, 531,
	31, 275, 298, 246, -408, 288, 31, 275, 438, -370,
	-398, -396, -370, 288, -409, 93, 464, -29, 438, -5,
	-7, -372, -393, -6, 418, -7, -35, -7, -7, -7,
	449, 70, -7, 449, 70, -7, -7, -7, -7, 61,
	61, -651, 93, 364, 61, 61, -651, -7, 464, 538,
	-7, -7, 532, 313, 61, 61, -574, -579, 62, 286,
	439, -575, -580, 62, 286, -7, -569, 36, 531, 398,
	-7, -7, -31, -34, -7, -7, -7, -7, -7, -94,
	211, 198, 29, -5, -614, 355, -616, -112, -22, -147,
	-249, -94, 464, 23, 83, 83, -99, 355, 321, -487,
	448, 287, 410, 420, 465, 415, -487, 130, -415, 422,
	246, -491, -490, 290, -249, -13, -13, -13, -13, -13,
	-495, -415, 64, -491, 455, 532, -56, -146, -163, 72,
	70, -416, -416, -416, -416, -56, -56, 42, 30, 30,
	-56, -56, 319, 319, -56, -56, 532, 532, -56, -94,
	-86, 532, 532, 532, 532, -56, 532, -129, 370, 532,
	-321, 47, 47, -321, -161, 148, 532, 532, 64, 64,
	41, 260, 42, 130, 64, 532, 532, -72, -119, 489,
	532, 483, 483, -303, 70, -58, 132, 155, -56, -85,
	541, -56, 354, -321, 532, 47, 47, 532, -322, 129,
	-322, -322, -100, -163, 532, 109, -245, -215, 117, -217,
	-56, -226, -262, -262, -276, 83, 74, 75, -262, -601,
	531, -13, -265, 531, -288, -288, -5, -291, -292, -287,
	-302, 531, 541, -121, -199, -209, -218, -219, 51, -239,
	-240, 531, -29, 150, -366, 531, 304, 271, -395, 70,
	532, 541, -351, 36, -342, -374, 449, 228, -332, -15,
	122, 273, -421, -635, 36, -381, 531, 74, -618, -294,
	-606, -98, -95, -636, -94, 130, -99, -627, 393, -416,
	-586, 532, -576, 64, 61, -582, 312, 23, -14, 531,
	31, -424, -353, 31, -411, -411, -56, -243, 23, 40,
	83, -15, -94, -401, -402, 422, -342, -332, 122, -7,
	284, 422, 23, -374, -601, 273, 30, 45, -568, -383,
	-572, -56, 286, 500, 286, 64, 36, 45, 64, -337,
	-400, -5, 40, -349, 532, 252, 476, 299, 253, 309,
	532, 532, 532, 541, 36, -216, -208, 39, -216, -56,
	47, 28, 28, -404, 47, 23, -34, -404, -99, -249,
	-34, -415, -415, 527, 61, 61, -7, -383, -7, -383,
	61, -7, -7, -7, 449, 70, -7, -7, -7, 464,
	-415, -349, -7, -7, 541, -92, -92, -99, 541, -92,
	-92, 513, -56, 61, -415, -94, -94, -415, -99, -99,
	-7, -7, 532, 541, 541, -7, 61, 64, -483, -7,
	506, -485, -415, 532, 532, -127, 484, -56, -45, -56,
	-56, -56, 532, -121, -121, 70, 532, 532, -7, -56,
	-57, 64, -56, -56, -56, 532, 541, 532, 531, -303,
	532, 532, 435, 155, 532, -321, -312, -313, -311, -323,
	-324, 40, -325, 136, 47, 49, 43, 50, 138, -321,
	-83, 306, 354, -127, -283, 87, 97, 110, 532, 541,
	-7, 155, -276, 531, -56, -262, 531, -13, 532, -288,
	532, 532, 532, 541, -293, 23, 123, -304, -305, -57,
	40, -56, 532, -206, -209, -210, 30, -210, 105, 31,
	-238, 115, 116, 149, 47, 154, 151, 152, 42, 153,
	148, -241, -246, -6, -239, -94, -395, -16, -348, 227,
	230, 233, 251, 298, 288, 308, 438, 439, 21, -348,
	-41, -5, -340, 507, -366, -7, 27, 98, 380, 532,
	-334, -416, -7, 513, 216, 58, 23, -245, -418, 541,
	532, -112, 266, -619, -4, -438, 464, -623, 130, -628,
	-630, -625, 348, 502, -634, 64, 532, 532, 433, 433,
	-583, -584, 478, 354, -554, -169, 532, 29, -375, 83,
	-375, 532, -359, 337, 298, 531, -7, 532, 541, -7,
	422, 532, -416, -400, 246, -7, -169, 531, -652, -557,
	531, -569, 64, 532, -426, -571, 23, -571, -15, 531,
	531, 531, -351, -360, 303, -360, 392, -360, -344, -146,
	62, -380, -15, -15, 532, 29, 29, 531, 23, -301,
	-393, -7, -7, -387, 359, 93, -387, 93, -7, 61,
	-7, -383, 61, -579, -146, -428, -426, 531, -580, 531,
	531, 531, 532, -7, -301, 532, -99, 355, -99, -485,
	-485, 74, -491, -128, -130, -5, -159, -162, -56, -165,
	-167, -166, -168, 531, 238, 408, 293, 532, -134, 388,
	127, 294, -119, 130, -57, -119, -81, 499, 354, -327,
	168, 36, 541, 23, 532, 74, -56, 134, 139, -326,
	-324, 532, 306, -284, 90, 89, 88, 93, -263, -215,
	-169, -13, -119, 532, 532, -295, -292, 531, -297, -298,
	-5, 541, 532, 23, -57, -310, 23, 106, -56, 106,
	105, -590, -590, -590, -590, 152, 31, 47, -94, 532,
	541, -247, -253, -249, 536, 40, 531, -263, -41, 532,
	-373, 531, -351, -395, 127, 127, -365, -366, -334, -234,
	506, 513, 513, -169, 532, -377, -606, -609, 540, -99,
	-631, 51, -653, 262, -630, -626, 67, 411, -349, -416,
	36, 36, -554, 478, -635, -381, -416, 307, -356, 354,
	-364, -361, -362, 74, 79, 369, 429, -406, 531, -56,
	-581, 279, -402, -400, -7, -365, -334, 140, -400, -421,
	532, -601, -556, 7, -261, -571, 301, 205, -346, -343,
	-9, -119, -119, -411, 531, -411, -416, -411, 531, -153,
	-370, -216, -56, 298, -30, 83, 449, 449, -7, -387,
	93, -7, -642, 130, -642, -643, -643, -643, -56, -415,
	532, 532, 532, -492, -415, -487, -415, 541, 23, 541,
	532, 531, 531, 425, 532, -135, -136, 37, 467, 120,
	-56, -135, -135, -56, 532, 532, 155, -328, 145, 144,
	140, 134, 140, 134, 141, 142, -313, -6, 136, 532,
	74, -14, 91, 91, -197, 532, 532, -288, 532, 541,
	-99, 130, -305, 541, -6, -322, -5, -212, -213, 109,
	97, 98, -214, 109, 96, 70, -94, -94, -94, -94,
	-14, 536, 47, -14, 536, -246, -242, -248, -253, -373,
	-374, -368, -369, -5, -287, 531, -41, -366, -395, -342,
	-421, 506, 506, -635, -379, 303, 531, -618, 273, 531,
	-624, 411, 437, -590, 130, 286, 286, 23, 531, 449,
	309, -362, 74, -361, 74, 97, 98, -405, 532, 23,
	-15, -400, 422, -342, -7, 531, 532, 541, 532, 541,
	-92, 532, 532, -375, -14, -375, -243, -375, -146, -154,
	-153, 532, -406, -56, -7, -7, 449, -403, 391, 87,
	509, -403, 532, 532, 532, 532, 64, -130, -131, -162,
	-119, -119, 531, -137, 270, -136, 377, 283, 411, 377,
	283, -137, -137, -326, 143, 143, 140, 140, 134, 140,
	134, 140, 138, 136, 93, 70, 70, -263, -267, 23,
	-125, 399, 532, -298, -299, -300, 4, 40, 31, 47,
	128, 124, -58, 123, 110, 93, 110, -207, 102, 531,
	40, 86, 107, 108, -14, 536, 532, 541, -374, 532,
	541, -208, -208, -56, -373, -395, -41, -366, -358, 531,
	-245, -652, -56, -633, -5, 262, -426, -426, -169, -7,
	-363, 354, 35, 24, 93, -363, 532, 440, -574, -7,
	422, -400, 532, 7, -343, 61, -349, 532, -349, -359,
	-263, 532, -154, -387, -387, -7, 70, -426, -485, 532,
	532, -159, 120, 71, 455, 354, 30, 532, 74, 74,
	140, 140, -324, -5, -14, -14, -5, 531, -300, -57,
	-57, 47, -57, -302, 531, -197, -217, -196, 86, 531,
	-248, -369, -380, -380, 532, -374, -41, -373, -395, -381,
	-378, -215, 532, -601, 532, 411, 541, 541, -635, 195,
	47, 40, -400, -7, 531, -364, -349, -387, -15, -415,
	532, 411, 501, -136, 146, 146, 74, 61, 83, 93,
	93, -56, 123, -307, -308, -5, 131, 155, 532, -119,
	-208, -373, -374, -41, -374, 532, 541, -379, 531, -631,
	61, 64, -243, -243, -400, -119, -349, 147, 147, 136,
	-59, -601, 166, -5, -5, -5, 532, -297, 532, 541,
	130, -99, -331, 128, -207, -207, 102, 532, -380, -374,
	-373, -263, -215, -358, -629, -632, -92, 6, -94, -6,
	273, 433, 433, 532, 40, 531, 532, -323, -308, 124,
	-309, -329, 29, 128, 7, -217, -374, -381, 532, 541,
	-652, 36, 36, -59, -73, 532, -327, -309, -309, 7,
	123, 23, 155, -374, -632, -601, 286, 286, 83, -121,
	-328, -327, -323, 531, -7, -207, -263, 531, -426, -426,
	-5, 532, -326, -328, -307, 123, -629, -326, 532, 531,
	532, -307, 532,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
	90, 91, 92, 2907, 2907, 1498, -2, 0, 1780, -2,
	1843, 1843, 0, 0, 0, 2907, 0, 2907, 2907, 0,
	0, 0, 0, 0, 1585, 1857, 1853, 0, 1853, 2272,
	2273, 0, 0, 0, 0, 0, 0, 0, -2, 1489,
	1584, 0, 2248, 2249, 1620, 0, 1531, 0, 0, 0,
	-2, 2910, 2905, 2906, 2662, 0, 0, 0, 0, 1585,
	0, 1779, 0, 0, 2806, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 0, 0, 1908, 1909,
	0, 0, -2, 2081, 2783, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1842,
	0, 0, 0, 0, 0, 2283, 0, 0, 0, 2279,
	2280, 2281, 0, 0, 2285, 2286, 2287, 0, 0, 0,
	1826, 0, 1829, 1830, 1831, 1832, 1833, 1834, 0, 2204,
	293, 404, 438, 2209, 2608, 0, 521, 177, 394, -2,
	385, 471, 2623, 112, 113, 114, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
	213, 214, 215, 216, 217, 218, 219, 220, 221, 222,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 280, 281, 282,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
	294, 295, 296, 297, 298, 299, 300, 301, 302, 303,
	304, 305, 306, 307, 308, 309, 310, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 323, 324,
	325, 326, 327, 328, 329, 330, 331, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 358, 359, 360, 361, 362, 363, 364,
	365, 366, 367, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	386, 387, 388, 389, 390, 391, 392, 393, 395, 396,
	397, 398, 399, 400, 401, 402, 403, 405, 406, 407,
	408, 409, 410, 411, 412, 413, 414, 415, 416, 417,
	418, 419, 420, 421, 422, 423, 424, 425, 426, 427,
	428, 429, 430, 431, 432, 433, 434, 435, 436, 437,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 457, 458,
	459, 460, 461, 462, 463, 464, 465, 466, 467, 468,
	469, 470, 472, 473, 474, 475, 476, 477, 478, 479,
	480, 481, 482, 483, 484, 485, 486, 487, 488, 489,
	490, 491, 492, 493, 494, 495, 496, 497, 498, 499,
	500, 501, 502, 503, 504, 505, 506, 507, 508, 509,
	510, 511, 512, 513, 514, 515, 516, 517, 518, 519,
	520, 522, 523, 524, 525, 526, 527, 528, 529, 530,
	531, 532, 533, 534, 535, 536, 537, 2218, 2210, 521,
	438, 404, 2214, 2215, 177, 293, 311, 385, 394, 471,
	2910, 2662, 2910, 0, 2910, 0, 2895, 404, 438, 521,
	392, 2897, 438, 3116, 122, 0, 2972, 2973, 2977, 2468,
	2468, 2468, 158, 2468, 0, 0, 2972, 2468, 2219, 1853,
	1585, 0, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2597,
	1851, 0, 1856, 2244, 0, 1852, 2250, 521, 438, 404,
	2254, 0, 2260, 0, 0, 2274, 2275, 2276, 2277, 2278,
	3086, 1605, 3090, 3092, 0, -2, -2, -2, -2, 150,
	373, 3111, 3111, -2, -2, 3108, 3109, 1215, 0, 0,
	1213, 3091, 3112, 3113, 3126, 3128, 352, 3130, -2, 0,
	2815, 2815, 2815, 0, -2, 1502, 1503, 0, 1503, 0,
	1536, 0, 1619, 1621, 1530, 1559, 1560, 127, 0, 0,
	1581, 368, 1586, 130, 1582, 0, 2, 2903, 0, 2904,
	2661, 2649, 0, 0, 2655, 0, 0, 0, 1564, 0,
	0, 0, 3117, 3118, 3119, 3120, 3121, 2468, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 0, 0, 1843,
	2805, -2, 0, -2, 262, 1849, 144, 0, 181, 243,
	1486, 0, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479,
	1480, 1481, 1482, 1483, 1484, 1485, 2489, 0, 0, 262,
	2011, 262, 0, 0, 2553, 262, 298, 2011, 2118, 2119,
	2120, 2121, 2122, 2643, 2644, 2645, 2646, 538, 539, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 554, 555, 556, 557, 558, 559, 560,
	0, 0, 2705, 0, 0, 130, 262, 96, 2670, 0,
	0, 0, 2011, 2011, 1910, 1911, 1912, 1913, 0, 262,
	0, 0, 262, 0, 0, 262, 0, 262, 0, 0,
	0, 0, 0, 0, 0, 1352, 0, -2, -2, 1418,
	0, 0, 0, 0, 0, 0, -2, 3064, 0, 2118,
	0, 0, 0, 0, 262, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 2920, 0, 298, -2,
	2920, 0, 0, 262, 0, 0, 0, 2959, 262, 100,
	146, 262, 100, 123, 0, 262, 100, 262, 1840, 1410,
	1411, 1412, 1413, 1414, 1415, 1424, 1427, 1428, 1429, 1430,
	1431, 1467, 224, 1424, 1424, 1424, 1437, 1438, 1439, 1440,
	1441, 1463, 1463, 1416, 1417, 1465, 1453, 1465, 1465, 1448,
	0, 1465, 100, 262, 0, 298, 2925, 262, 2116, 2923,
	262, 2927, 262, 2282, 0, 2284, 0, 1824, 1825, 1828,
	108, 2205, 404, 2206, 179, 0, 2207, 0, 0, 0,
	0, 0, 0, 2611, 1214, 2612, 2613, 2638, 2639, 2614,
	2641, 2642, 0, 2211, 0, 2213, 2891, 2892, 2893, 2901,
	2894, 0, 2902, 2896, 2900, 0, 0, 0, 0, 0,
	2974, 0, 2979, 0, 2980, 2981, 2982, 2983, 0, 0,
	0, 0, 1585, 2221, 0, 2223, 2231, 525, 2226, 2227,
	2228, 2596, 1853, 1850, 0, 2241, 2243, 2245, 130, 0,
	2251, 0, 2253, 0, 2263, 0, -2, 108, 108, 108,
	2267, 2268, 2269, 2270, 0, 0, 3093, 0, 3110, 0,
	0, 0, 3111, 3111, 0, 0, 0, 3111, 3111, 0,
	3111, 3111, 1216, 1217, 3122, 0, 3129, 3131, 2870, 1515,
	1512, 0, 2867, 2868, 1516, 0, 0, 0, 1524, 0,
	2813, 2814, 0, 0, 0, -2, 0, 1500, 1501, 1626,
	1535, 1537, 1541, 1542, 1091, 0, 0, 0, 0, 0,
	0, 1980, 1158, 1181, 1182, 1245, 0, 1185, 1186, 1187,
	484, 0, 1192, 1193, 488, 1468, 331, 517, 1235, 1200,
	1201, 1202, 1203, 1204, 1205, 1206, 1207, 0, 0, 0,
	1368, 1491, 1493, 1249, 1195, 1196, 1197, 1198, 1199, -2,
	498, 495, 540, 1251, 1252, 1254, 1256, 1258, 1260, 1261,
	1262, 1263, 1264, 1265, -2, 0, 485, 509, 513, 514,
	520, 523, 524, 510, 481, 487, 504, 528, 529, 531,
	533, 530, 534, 535, 497, 494, -2, 500, 501, 505,
	499, 496, 503, 536, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 506, -2, -2, -2, -2, -2,
	-2, -2, 1442, 1443, 1444, 1445, 1626, 0, 1561, 128,
	1237, 0, 1240, 1562, 0, 0, 0, 1583, 0, 0,
	0, 1408, 2908, 0, 0, 2651, 0, 2653, 2654, 2656,
	0, 1744, 0, 1565, 0, 1766, 0, 0, 0, 2468,
	262, 0, 2468, 0, 2504, 262, 95, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 1914, 0, 2474, 0,
	0, 1848, 145, 0, 2487, 0, 2784, 0, 0, 2488,
	0, 0, 0, 0, 0, 2494, 0, 0, 2512, 2009,
	2010, 0, 0, 0, 262, 2557, 0, 0, 0, 0,
	2930, 0, 0, 0, 0, 0, 0, 0, 0, 2739,
	0, 0, 0, 0, 0, 2930, 2930, 2091, 2104, 2191,
	2112, 0, 0, 0, 2191, 2191, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2183,
	0, 0, 0, 2093, 2095, 0, 0, 0, 0, 2096,
	0, 2507, 1989, 0, 0, 0, 1993, 2008, 1996, 0,
	0, 0, 0, 2011, -2, 2006, 0, 2098, 2191, 0,
	0, 262, 0, 0, 262, 0, 2255, 0, 2256, 0,
	2301, 0, 1353, 0, 0, 0, 0, 2478, 0, 0,
	0, 0, 0, 3061, 3031, 0, 0, 3035, 3036, 3037,
	3038, 0, 0, 3043, 0, 0, 0, 0, 3048, 0,
	0, 2421, 3062, -2, 0, 0, 2948, 2949, 0, 0,
	0, 0, 0, 0, 3061, 0, 0, 0, 0, 0,
	3061, 0, 0, 2550, 2551, 0, 0, 0, 0, 0,
	0, 0, 2764, 2765, 0, 0, 0, 0, 0, 2932,
	0, 0, 0, 0, 0, 2932, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3069, 3070, 0, 2519, 1843, 0, 0, 0,
	2193, 98, 99, 0, 0, 2195, 0, 0, 0, 2198,
	0, 1425, 1424, 0, 1432, 0, 1433, 1434, 1435, 1436,
	0, 1457, 0, 0, 0, 1459, 1455, 1464, 0, 1446,
	1447, 1465, 1465, 1451, 2200, 0, 100, 262, 0, 0,
	0, 0, 0, 0, 1827, 2288, 2289, 2290, 2291, 0,
	0, 0, 2615, 2616, 2618, 2609, 2619, 2621, 2625, 2627,
	2628, 1814, 1815, 1816, 1817, 1818, 0, 0, 1821, 2620,
	2622, 2624, 2610, 2629, 2630, 2631, 2632, 2633, 2634, 2635,
	2636, 2637, 2617, 2647, 2648, 2212, 392, 2899, 1585, 0,
	2788, 0, 2984, 0, 400, 0, 251, 358, 388, 206,
	223, 286, 287, 341, 394, 431, 443, 0, 131, 3018,
	2978, 0, 0, 125, 0, 0, 0, 3018, 0, 2220,
	1585, 0, 2225, 2229, 2230, 1855, 2244, 0, 2247, 2244,
	2252, 2258, 2259, 0, 0, 0, 0, 95, 2271, 3089,
	3081, 3082, 3083, 3084, 0, 3094, 3095, 3096, 3097, 0,
	0, 3100, 3101, 3102, 0, 0, 3105, 0, 0, 0,
	1506, 2869, 1507, 1514, 1517, 0, 0, 1519, 0, 1521,
	0, 2865, 2866, 2871, 2879, 2880, 0, 2889, 2890, 2877,
	0, 2881, -2, 0, 0, 1527, 0, 1532, 1533, 1534,
	2831, 2832, 1896, 2870, 1515, 1544, 0, 0, 0, 693,
	661, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482,
	1483, 1484, 1485, 0, 654, 908, -2, 0, -2, 995,
	826, 1129, 1131, -2, 805, 0, 0, 1540, -2, 905,
	1388, 120, 121, 639, 640, 641, 642, 643, 644, 645,
	646, 647, 648, 649, 650, 651, 652, 653, 655, 656,
	657, 658, 659, 660, 662, 663, 664, 665, 666, 667,
	668, 670, 671, 672, 673, 674, 675, 676, 677, 678,
	679, 680, 681, 682, 683, 684, 685, 686, 687, 688,
	689, 690, 691, 692, 694, 695, 696, 697, 698, 699,
	700, 701, 702, 703, 704, 705, 706, 707, 708, 709,
	710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
	720, 721, 722, 723, 724, 725, 726, 727, 728, 729,
	730, 731, 732, 733, 734, 735, 736, 737, 738, 739,
	740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	801, 802, 803, 804, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 837, 838, 839, 840, 841, 842,
	843, 844, 845, 846, 847, 848, 849, 850, 851, 852,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 906, 907, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 990, 991, 992, 993, 994, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
	1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
	1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
	1087, 1088, 1089, 1090, 1096, 1097, 1111, 1114, 1115, 0,
	0, 0, 1183, 1408, 0, -2, 1188, 1189, 1190, 1191,
	0, 0, 0, 0, -2, 1208, 0, 1210, 1232, 0,
	0, 1367, 1493, 0, 2843, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1311, 0, 1311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1696, 1696, 0, 0, 0, 0, 0, 0,
	0, 0, 1544, 0, 1238, 1241, 1242, 1419, 115, 116,
	117, 118, 119, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 583, 584, 585, 586, 587,
	588, 589, 590, 591, 592, 593, 594, 595, 596, 597,
	598, 599, 600, 601, 602, 603, 604, 605, 606, 607,
	608, 609, 610, 611, 612, 613, 614, 615, 616, 617,
	618, 619, 620, 621, 622, 623, 624, 625, 626, 627,
	628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
	638, 1239, 0, 0, 0, 1587, 1591, 0, 0, 1598,
	0, 0, 0, 0, 1390, 1392, 0, 0, 1494, 0,
	0, 2909, 2650, 2652, 0, 0, 2660, 1879, 1746, 0,
	0, 0, 0, 1544, 1757, 0, 0, 1245, 1566, 1604,
	0, 0, 1775, 1775, 1772, 1773, 1917, 0, 0, 2069,
	0, 0, 2090, 0, 2501, 2503, 0, 0, 0, 262,
	94, 2400, 0, 2400, 0, 2424, 2425, 0, 0, 0,
	2486, 0, 0, 0, 0, 0, 2603, 2602, 2604, 2605,
	2606, 2607, -2, 95, 1969, 0, 1421, 0, 2687, 2689,
	0, 0, 1487, 1640, 0, 0, 0, 0, 0, 0,
	2496, 0, 2509, 0, 2544, 1917, 0, 0, 0, 2556,
	2552, 0, 0, 2567, 2568, 0, 2912, 0, 262, 2468,
	0, 0, 2704, 2711, 0, 0, 0, 0, 2670, 2746,
	0, 430, -2, 2468, 2754, 0, 2669, 0, 0, 0,
	2911, 2913, 0, 0, 0, 0, 2190, 0, 0, 2123,
	262, 0, 2147, 0, 0, 2026, 0, 1980, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 2155, 2156, 0,
	0, 2176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2169, 0, 0, 2171, 2172, 0, 2177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1990,
	1994, 1999, 2000, 1991, 1992, 0, 2007, 1997, 1998, 0,
	0, 0, 0, 0, 0, 0, 0, 2100, 2191, 0,
	0, 2102, 2191, 0, 2544, 0, 0, 2293, 2294, 0,
	0, 2389, 2390, 2391, 2392, 2394, -2, 2396, 0, 0,
	0, 0, 0, 0, 2189, 0, 0, 0, 0, 2481,
	0, 2590, 0, 0, 0, 0, 3028, 3032, 3060, 0,
	0, 0, 3041, 3042, 3044, 3045, 3046, 3047, 3049, 2420,
	404, 438, 0, 0, 0, 0, 0, 2722, 0, 0,
	3029, 0, 2742, 2744, 2743, 2745, 0, 3030, 0, 0,
	2549, 2554, 2555, 0, 2758, 0, 2759, 2670, 0, 0,
	2766, 0, 0, 0, 2693, 2694, 2697, 0, 2914, 2916,
	0, 2217, 0, 2917, 0, 0, 2915, 2918, 2919, 0,
	2706, 2707, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 2517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1835, 1836, 1837, 1838, 1839, 2283, 2957, 2958, 0,
	0, 0, 0, 100, 147, 100, 124, 100, 0, 1841,
	100, 1426, 0, 0, 0, 0, 0, 0, 0, 0,
	1449, 1450, 100, 2202, 0, 0, 0, 2117, 2926, 2924,
	2928, 2601, 0, 0, 1819, 1820, 2898, 3114, 0, 3115,
	0, 0, 2985, 2986, 0, 0, 2989, 3066, 2990, 2991,
	2992, 2993, 2994, 0, 2996, 3019, 3021, 2997, 2998, 2999,
	0, 0, 0, 0, 0, 2953, 0, 0, 0, 0,
	2975, 2467, 0, 0, 2972, 100, 0, 2222, 2224, 2244,
	1854, 2240, 2246, 2242, 2263, 2262, 2261, 2264, 2265, 2266,
	0, 0, 0, 3085, 3098, 3099, 3103, 3104, 3106, 3107,
	3125, 1513, 0, 1522, 0, 0, 0, 2882, 0, 0,
	-2, -2, 0, 2878, 2887, 2888, 2883, -2, -2, 2884,
	1518, 1525, 0, 1523, 0, 0, 1899, 1894, 1895, 1510,
	1511, 1601, 0, 1625, -2, -2, 293, 254, -2, 0,
	143, 1538, 1092, 1093, 0, 1095, 1098, 1099, 1100, 1101,
	1102, 1103, -2, -2, -2, -2, -2, -2, 1110, 1112,
	1113, -2, 1391, 1393, 0, 1494, 0, -2, 0, 1128,
	0, 1133, 1135, 1137, 0, 1150, 1152, 0, 1407, 1394,
	1395, 1396, 1397, 1398, 0, 0, 1495, 1145, 1496, 0,
	0, 1385, 1386, 1387, 1539, 0, 1132, 0, 0, 1149,
	1978, 0, 1246, 1245, 0, 0, 0, 1376, 1377, 0,
	0, 0, -2, 1489, 1354, 0, 0, 0, 0, 1361,
	1363, 0, -2, 1211, 1219, 1220, 1221, 1222, 1223, 1224,
	1233, 0, 1373, 1369, 0, 2843, 0, 1248, 0, 0,
	1687, 1091, 0, 1692, 1730, 0, 0, 0, 0, 0,
	0, 0, 0, 1321, 1322, 1323, 1324, 1325, 1326, 1327,
	1328, 0, 0, 0, 1363, 1310, 0, 0, 1159, 0,
	0, 0, 517, 0, 0, 1363, 0, 0, 0, 0,
	0, 1408, 0, 1319, 0, 0, 0, 0, 0, 0,
	0, 1333, 1336, 0, 0, 0, 0, 0, 1687, 0,
	1681, 0, 1363, 1690, 1730, 0, 1679, -2, 1407, 0,
	1696, 1305, 0, 0, 0, 0, 1601, 0, 1243, 1240,
	1563, 1599, 0, 1589, 0, 129, 1409, 2657, 2658, 2659,
	1901, 0, 0, 1751, 1752, 0, 1753, 1245, 1750, 1745,
	1604, 0, 0, 0, 1762, 1761, 1901, 0, 1765, 1545,
	1607, 1607, 0, 1551, 0, 1616, 1607, 1607, 1630, 390,
	537, 502, 127, 1349, 1350, 1351, 0, 493, 0, 0,
	1774, 0, 0, 1916, 125, 1918, 1920, 1921, 1922, 0,
	1946, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2414, 2399, 2401, 0, 0, 0, 2406,
	2407, 0, 2379, 2380, 2382, 2414, 0, 2427, 2429, 2430,
	2431, 2433, 2426, 0, 2485, 0, 0, 0, 0, 2573,
	2577, 2575, 1416, 0, 2803, 2468, 0, 2473, 0, 0,
	0, -2, 2477, 1422, 2686, 0, 0, 0, 2790, 0,
	1639, 1641, 0, 2586, 2500, 2490, 2491, 2492, 2493, 0,
	2511, 0, 0, 0, 2516, 2011, 1961, 2543, 2541, 0,
	0, 0, 0, 0, 0, 0, 2553, 0, 0, 2929,
	2933, 0, 0, 0, 0, 0, 0, 0, 2943, 2944,
	0, 0, 0, 0, 0, 2069, 0, 2090, 2713, 0,
	0, 2728, 2729, 0, 2734, 2736, 2737, 0, 130, 2670,
	2741, 0, 2468, 0, -2, 2756, 2756, 0, 0, 0,
	2113, 2324, 0, 0, 0, 108, 0, 2125, 262, 1944,
	0, 0, 0, 2359, 0, 0, 0, 0, 0, 1845,
	0, 2359, 262, 100, 262, 100, 2149, 2152, 2154, 0,
	2175, 0, 2368, 2371, 2153, 2157, 2160, 2161, 0, 0,
	0, 0, 2165, 0, 2162, 2163, 2164, 2168, 0, 2170,
	0, 2173, 2178, 2682, 2683, 2684, 0, 0, 0, 2674,
	2676, 405, 153, 225, 0, 1965, 2092, 2105, 2191, 0,
	2332, 2187, 2094, 0, 0, 2326, 1995, 2001, 2002, 2003,
	2005, 2097, 0, 2508, 2328, 0, 2099, 2191, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 2304, 2292,
	0, 0, 2388, 0, 2387, 1424, 2393, 1424, 0, 2305,
	2306, 2307, 2308, 0, 2479, 100, 262, 2188, 2480, 0,
	0, 2359, 2484, 2311, 0, 0, 3039, 3040, 2312, 2922,
	0, 0, 0, 0, 2724, 0, 0, 2318, 2319, 2320,
	2321, 2322, 2323, 2670, 2760, 2670, 2670, 0, 0, 0,
	2695, 2696, 2349, 2931, 2216, 2921, 2350, 0, 2351, 2352,
	2732, 1822, 1823, 0, 0, 0, 0, 0, 2357, 0,
	0, 0, 0, 100, 2584, 262, 100, 0, 3050, 3054,
	3071, 0, 0, 1845, 2518, 0, 2521, 2522, 2523, 0,
	2525, 2526, 2527, 181, 243, 0, 2530, 2531, 0, 2533,
	0, 0, 0, 0, 0, 0, 2192, 2194, 2196, 0,
	2199, 1423, 1466, 1463, 1461, 1462, 1463, 0, 1452, 2201,
	100, 0, 0, 2595, 0, 2208, 2626, 2789, 3010, 3005,
	3007, 0, 132, 0, 2988, 0, 2995, 3023, 0, 0,
	0, 0, 0, 0, 0, 3018, 3012, 0, 0, 2976,
	126, 3018, 0, 2955, 0, 2239, 2257, 0, 3087, 3088,
	1520, 2872, 0, 2875, 0, 2885, 2886, 0, 0, 1526,
	2833, 1899, 1470, 0, 2835, 0, 2817, 0, 1543, 0,
	133, 0, 134, 134, 134, 134, 0, 142, 0, 0,
	-2, -2, 0, 0, 0, 1146, 0, -2, 1130, 1134,
	1136, 1138, 0, 1151, 1154, 0, 1407, 0, 1153, 1156,
	0, 0, 1399, 1400, 1401, 1402, 0, 0, 0, 1147,
	0, 0, 0, 0, 1979, 1184, 1409, 1374, 1375, 0,
	1194, 1469, -2, 0, 0, 1488, 1355, 1489, 1489, 1489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1370,
	0, 0, 1247, 0, 2841, 2842, 2846, 0, 1407, 0,
	0, 0, 0, 1690, 0, 1671, 1729, 0, 0, 1253,
	1255, 1257, 1259, 0, 1268, 0, 1269, 0, 1271, 1272,
	0, 0, 1273, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1161, 1162, 1176, 1274, 1275, 0, 0, 0, 0, 0,
	0, 0, 1280, 0, 1318, 0, 1282, 1283, 1284, 1285,
	0, 1290, 0, 0, 1339, 0, 0, 0, 0, 1296,
	1407, 0, 1298, 1730, 1696, 0, 0, 0, 1696, 1301,
	0, 1303, 0, 0, 0, 0, 0, 2817, 1622, 0,
	1239, 1585, 1590, 1743, 0, 1882, 0, 0, 0, 1755,
	1901, 1758, 1759, 0, 0, 1764, 1602, 202, 0, 0,
	0, 0, 0, 1578, 1578, 1578, 1576, 1547, 1606, 0,
	1611, 1549, 1607, 1616, 1607, 1607, -2, 1551, 0, 1553,
	1612, 0, 1611, 1555, 1557, 1627, 0, 0, 0, 0,
	-2, 0, 0, 2011, 1776, 1777, 1778, -2, 2059, 0,
	1926, 2061, 0, 1946, 2073, 0, 0, 2068, 2468, 0,
	3126, 0, 2089, 0, 2504, 2084, 0, 2400, 0, 2395,
	2376, 2412, 0, 0, 2402, 2403, 2408, 2404, 2405, 0,
	2378, 0, 0, 0, 2377, 0, 0, 0, 0, 2569,
	2570, 0, 0, 0, 2576, 0, 0, 0, 0, 2090,
	0, 0, 0, 2476, 1968, 0, 1971, 1972, 0, 0,
	2017, 1980, 0, 0, 0, 0, 0, 1974, 0, 2688,
	2690, 2663, 2664, 2665, 2666, 2667, 2668, 331, 1474, 1475,
	0, 2498, 0, 1645, 0, 2585, 2587, 2495, 0, 2513,
	2514, 2515, 2512, 2534, 0, 2542, 2537, 2545, 2538, 2540,
	2539, 2059, 1946, 0, 0, 2557, 1961, 0, 2934, 2935,
	2936, 0, 0, 2939, 2940, 0, 0, 0, 0, 2947,
	2601, 0, 2090, 0, 0, 2703, 2720, 0, 2710, 0,
	0, 0, 0, 0, 2740, 2747, 2756, 0, 2756, 2751,
	0, 2753, 2670, 0, 0, 0, 0, 2184, 0, 1956,
	2185, 2186, 0, 0, 1940, 1943, 0, 2025, 2084, 0,
	0, 2029, 0, 0, 2359, 0, 0, 2083, 2127, 0,
	0, 0, 0, 2140, 0, 2146, 1983, -2, 0, 2148,
	0, 2144, 0, 2151, 2174, 2680, 2681, 2367, 0, 0,
	0, 2158, 2166, 2159, 2167, 2179, 2180, 0, 0, 2181,
	2673, 0, 2677, 2678, 2679, 1964, 1966, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2330,
	0, 2101, 2191, 0, 2334, 0, 2103, 2191, 0, 2535,
	2295, 2385, 2386, 0, 0, 0, 2482, 0, 2589, 0,
	2592, 3033, 0, 2313, 0, 0, 0, 0, 0, 2726,
	0, 2721, 0, 2763, 2761, 2762, 0, 0, 2348, 0,
	0, 0, 0, 0, 0, 0, 0, 2580, 0, 3072,
	0, 3074, 0, 3068, 0, 0, 0, 2520, 0, 0,
	0, 2296, 0, 0, 0, 0, 0, 2960, 2961, 2962,
	100, 1456, 1458, 1454, 2203, 2565, 0, 2599, 0, 3018,
	0, 0, 3008, 2987, 3067, 0, 3020, 3022, 0, 0,
	0, 0, 0, 2954, 0, 3013, 3014, 3015, 3016, 3017,
	100, 0, 3018, 3080, 2873, 0, 2876, 0, 1383, 0,
	2834, 0, 1897, 1898, 2830, 0, 1600, 135, 136, 0,
	0, 0, 0, 141, 1094, -2, 0, 0, -2, 0,
	0, -2, 0, 0, 1155, 1157, -2, 1404, 1406, 0,
	0, 1497, 0, -2, 0, 1380, 0, -2, 1378, 1356,
	0, 1362, 0, 0, 0, 1364, 1365, 1225, 1226, 1227,
	1228, 1229, 1230, 1231, 0, 1212, 1366, 1372, 0, 0,
	2848, 2845, 0, 1696, 0, 0, 1683, 1684, 1696, 0,
	1728, 1250, 0, 1320, 0, 0, 1160, 1163, 1164, 1165,
	1166, 1167, 1168, -2, -2, -2, -2, -2, -2, 1175,
	0, 0, 1179, 1331, 0, 1314, 1315, 0, 1277, 1278,
	1279, 1317, 0, 1286, 0, 1334, 1335, 0, 0, 0,
	1292, 1648, 0, 171, 1293, 0, 1348, 0, 1696, 1682,
	1695, 0, 1680, 0, 0, 0, 1302, 1304, 1675, 1675,
	1675, 0, 2830, 1244, 0, 1900, 0, 0, 0, 1747,
	1748, 0, 1754, 1756, 0, 1763, 0, 1546, 0, 0,
	0, 0, 0, 1573, 1577, 1574, 1575, 1548, 0, 1609,
	0, 1550, 1554, 1556, 1558, 1567, 1609, 0, 0, 1629,
	0, 0, 532, 0, 1489, 0, 1786, 2011, 0, 1846,
	2061, 0, 1919, 1923, 2069, 2060, 0, 0, 1947, 1949,
	1950, 1969, 0, 2075, 0, 109, 110, 1917, 0, 0,
	0, 2601, 2472, 2090, 2502, 0, 0, 2414, 0, 2417,
	2415, 0, 0, 0, 2381, 2383, 2384, 2435, 2428, 2432,
	0, 0, 2574, 0, 2578, 0, 2579, 0, 2808, 0,
	0, 0, 262, 2603, 0, 1973, 1975, 2016, 2670, 2670,
	0, 2021, 2468, 0, 1981, 0, 1976, 1977, 0, 1642,
	1643, 0, 2499, 0, 2497, 2510, 0, 2546, 0, 0,
	1917, 0, 0, 0, 2562, 0, 2937, 2938, 2941, 2942,
	2945, 2946, 2593, 0, 2075, 0, 2452, 2453, 0, 2698,
	0, 2724, 0, 2712, 2714, 2715, 2716, 2717, 2718, 2727,
	2730, 2735, 2738, 0, 2748, 2749, 2750, 2752, 0, 2757,
	0, 0, 0, 2336, 2342, 0, 2124, 0, 1961, 1939,
	0, 1941, 1942, 2359, 0, 2360, 0, 2362, 0, 0,
	2078, 0, 2031, 0, 0, 2036, 0, 1893, 1893, 0,
	0, 2131, 2141, 1844, 1987, 0, 0, 0, 0, 2135,
	2137, 2138, 2136, 0, 1984, 0, 0, 0, 0, 100,
	100, 2369, 2370, 2373, 2182, 2685, 2675, 2325, 0, 0,
	0, 0, 2333, 0, 0, 2327, 2338, 2329, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2310, 2397, 0,
	2309, 100, 2359, 3034, 0, 0, 2791, 2776, 0, 0,
	0, 2792, 2793, 0, 0, 2316, 2709, 0, 0, 0,
	2346, 2347, 2564, 2733, 2353, 2354, 2355, 2356, 100, 2583,
	0, 0, 103, 100, 3051, 3052, 3053, 3055, 3056, 3057,
	3058, 3059, 0, 0, 0, 0, 0, 0, 0, 0,
	2966, 2967, 2968, 2969, 2970, 2971, 0, 0, 2197, 0,
	2600, 2950, 3006, 0, 3024, 3000, 3001, 3002, 3003, 3004,
	3011, 2951, 0, 100, 2874, 1382, 1409, 0, 2837, 0,
	2815, 137, 138, 139, 140, -2, -2, 0, 0, 0,
	-2, -2, 1403, 1405, -2, -2, 1148, 1379, 1409, 1209,
	1489, 1357, 1359, 1360, 1234, 1371, 1490, 1489, 0, 1492,
	0, 1685, 1686, 0, 1691, 0, 1267, 1270, 0, 0,
	0, 1180, 0, 0, 0, 1276, 1281, 0, 0, 527,
	1291, 1337, 1338, 1649, 0, 1650, 1646, 1647, 0, 0,
	0, 1343, 319, 0, 1299, 1688, 1689, 1300, 1696, 0,
	1712, 1696, 1342, 2837, 1594, 0, 0, 1885, 0, 0,
	1760, 1603, 1568, 0, 1570, 0, 0, 0, 1572, 0,
	0, 0, 1552, 0, 0, 0, 122, 0, 1631, 1635,
	0, 0, 0, 0, 1901, 1768, 1868, 1868, 0, 1770,
	1783, 0, 1786, 0, 2069, 0, 0, 0, 111, 0,
	1945, 0, 1951, 0, 2061, 3127, 0, 0, 0, 1946,
	0, 0, 3123, 2463, 0, 0, 0, 0, 2374, 0,
	1636, 0, 1420, -2, 2409, 0, 2410, 2445, 0, 2462,
	0, 2571, 0, 0, 0, 2810, 0, 0, 0, 1917,
	0, 2475, 1970, 0, 2077, 2077, 0, 2045, 0, 1982,
	0, 1644, 2588, 0, 1962, 0, 0, 0, 0, 1961,
	0, 0, 0, 2598, 0, 0, 0, 0, 2726, 2719,
	0, 0, 0, 2772, 2772, 0, 0, 0, 0, 2126,
	1969, 1937, 1938, 2027, 2041, 2361, 2365, 2363, 2364, 2366,
	2041, 0, 2041, 0, 0, 1887, 97, 0, 1888, 0,
	2128, 0, 0, 1988, 2129, 0, 2133, 0, 1645, 1986,
	2134, 2143, 2150, 0, 0, 0, 2115, 0, 2115, 0,
	0, 2340, 2331, 0, 0, 0, 2344, 2335, 0, 2398,
	2483, 2591, 2314, 2315, 0, 0, 0, 2782, 0, 0,
	0, 0, 0, 0, 2358, 2581, 2582, 3073, 1645, 0,
	2528, 2529, 2297, 0, 0, 2532, 0, 0, 0, 2566,
	3009, 3018, 2956, 1384, 1471, 1528, 0, 2829, 0, -2,
	-2, -2, 1381, 0, 2852, 0, 1693, 1694, 1727, 1330,
	-2, 0, 1316, 1312, 1313, 1287, 0, 1288, 0, 1651,
	1294, 1295, 0, 1344, 1297, 1721, 1674, 1676, 0, 0,
	0, 0, 1698, 1699, 1700, 1701, 1702, 1703, 1706, 1710,
	0, 1340, 0, 1529, 1597, 0, 0, 1878, 1601, 0,
	1881, 0, 1569, 0, 1580, 1571, 0, 0, 1610, 0,
	1613, 1615, 1630, 0, 1633, 0, 0, 0, 1652, 0,
	0, 1673, 1356, 1767, 1769, 0, 0, 0, 1863, 0,
	1785, 1787, 1788, 1849, 1849, 1791, 1792, 1849, 1849, 0,
	0, 0, 1802, 1810, 1601, 1781, 111, 0, 1924, 1927,
	1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1925,
	2073, 0, 1948, 1969, 2069, 2074, 2070, 0, 0, 2059,
	2061, 1946, 3126, 0, 0, 0, 0, 0, 2084, 0,
	2400, 1638, 2413, 0, 2418, 2419, 0, 2451, 2447, 2434,
	2436, 0, 2439, 2440, 2359, 0, 2572, 2798, 0, 0,
	2804, 2809, 0, 0, 2807, 2472, 2090, 0, 2018, 0,
	2019, 2035, 2050, 0, 2015, 0, 2775, 1960, 0, 1961,
	0, 2059, 1946, 2547, 0, 1961, 2601, 0, 0, 2699,
	0, 2708, 0, 2755, 2772, 2769, 0, 2768, 2797, 0,
	0, 0, 1967, 2670, 0, 2670, 0, 2670, 2037, 2038,
	331, 1896, 96, 1892, 1893, 2132, 2142, 0, 0, 2672,
	2372, 2337, 2343, 2106, 2114, 0, 2108, 0, 2339, 0,
	2115, 0, 0, 2777, 2787, 2787, 2780, 0, 2794, 0,
	0, 0, 2723, 2317, 100, 2524, 0, 0, 0, 3010,
	100, 0, 100, 2836, 2838, 0, 2816, 2818, 2820, 2821,
	2822, 2823, 2824, 0, 201, 387, 488, 1358, 0, 0,
	0, 0, 2847, 0, -2, 0, 0, 1345, 1346, 1726,
	0, 0, 0, 0, 1307, 0, 1697, 1704, 1705, 0,
	0, 1309, 1341, 1588, 0, 0, 0, 0, 1880, 1886,
	1749, 0, 0, 1608, 1614, 1628, 1632, 0, 0, 1658,
	0, 0, 0, 0, 1655, 1675, 0, 0, 1867, 0,
	1865, 0, 0, 0, 0, 0, 0, 0, 1801, 1784,
	0, 1804, 1805, 1806, 1807, 1808, 0, 1771, 2073, 2058,
	2075, 0, 1952, 111, 2071, 2072, 2061, 2069, 0, 2601,
	2469, 0, 0, 2472, 2086, 0, 1637, 2414, 2416, 2411,
	0, 0, 0, 2446, 2437, 1849, 2441, 2442, 0, 2461,
	0, 0, 2811, 2812, 2464, 0, 0, 0, 2020, 0,
	2022, 2046, 2047, 0, 2042, 2043, 2044, 2023, 0, 0,
	0, 0, 1963, 2558, 1961, 0, 0, 0, 2563, 2594,
	2691, 0, 0, 2701, 2731, 2767, 2770, 2771, 0, 1958,
	0, 0, 0, 2077, 0, 2077, 2468, 2077, 0, 1899,
	1896, 1889, 0, 2015, 2145, 0, 0, 0, 2341, 2110,
	0, 2345, 2013, 0, 2013, 0, 0, 0, 0, 3075,
	2298, 2300, 2299, 2963, 2964, 0, 2952, 0, 0, 0,
	2825, 0, 0, 0, 2844, 2864, 2853, -2, 446, 202,
	0, 2864, 2864, 1329, 1289, 1332, 1347, 1710, 0, 0,
	1713, 0, 1715, 0, 0, 0, 1677, 1678, 1711, 1308,
	0, 0, 0, 0, 1601, 1618, 3027, 0, 1656, 0,
	1660, 0, 1653, 0, 1654, 0, 1672, 1858, 1859, 0,
	0, 1870, 1860, 0, 0, 0, 1789, 1790, 1793, 1794,
	1795, 1796, 0, 1799, 1800, 1803, 0, 1811, 1813, 2075,
	1904, 0, 2063, 1893, 1893, 0, 2073, 2069, 111, 2061,
	3124, 2470, 2471, 2465, 1980, 0, 0, 2375, 0, 0,
	2444, 2448, 2449, 0, 0, 0, 0, 0, 1917, 0,
	2034, 2048, 0, 2049, 0, 0, 0, 0, 0, 0,
	2774, 2560, 0, 0, 1961, 0, 2700, 0, 1953, 0,
	1957, 1954, 0, 2359, 0, 2359, 2045, 1601, 0, 1890,
	1899, 2130, 2139, 2671, 2115, 2115, 0, 2778, 2012, 2785,
	0, 2779, 0, 2795, 2796, 2725, 0, 2839, 2840, 2819,
	0, 0, 0, 2849, 0, 0, 2855, 2856, 2857, 2858,
	2859, 2850, 2851, 0, 1723, 1725, 1714, 1716, 0, 1719,
	0, 1720, 1707, 1708, 0, 0, 0, 1877, 1579, 0,
	3025, 0, 1634, 1659, 1662, 1663, 0, 0, 0, 1668,
	0, 1661, 0, 0, 1861, 0, 1862, 1871, 0, 0,
	0, 0, 1864, 1866, 1797, 1798, 1809, 0, 1902, 2062,
	0, 97, 97, 0, 2075, 111, 2073, 2069, 2090, 0,
	0, 0, 0, 2438, 2443, 0, 2801, 2802, 2472, 2076,
	2051, 0, 2054, 2055, 0, 2052, 2014, 2024, 2773, 1961,
	0, 2548, 2692, 2702, 1959, 0, 2028, 2040, 2030, 2050,
	2359, 2039, 1891, 2107, 2109, 2115, 0, 2781, 100, 2827,
	2826, 0, 0, 2861, 2862, 0, 0, 1306, 0, 0,
	1717, 1718, 0, 0, 0, 0, 1617, 0, 1664, 1665,
	1666, 1667, 1669, 0, 0, 1869, 0, 0, 1875, 0,
	1812, 2064, 2065, 2066, 1893, 1906, 2073, 2075, 111, 2075,
	0, 2087, 2086, 0, 2450, 2451, 0, 0, 2466, 2053,
	2468, 2468, 2559, 1961, 0, 2359, 2033, 2111, 2786, 2965,
	2828, 2860, 2863, 2854, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1733, 0, -2, 0, 0, 0,
	97, 2075, 1905, 2073, 1601, 2085, 0, 1980, 2456, 0,
	0, 0, 2056, 2057, 2561, 0, 2032, 1722, 1724, 1709,
	0, 0, -2, 1596, 1592, 1593, 3026, 0, 1712, 0,
	0, 1742, 0, 1731, 1872, 1873, 0, 1876, 2067, 1903,
	2075, 2079, 2088, 2090, 0, 2454, 2457, 2458, 2459, 2460,
	0, 0, 0, 1955, 0, 0, 1657, 0, 1734, 1735,
	1721, 1742, 1742, 0, 0, 0, 1907, 2075, 2422, 0,
	0, 0, 0, 0, 1489, 1670, 1726, 1721, 1712, 1741,
	0, 0, 0, 1601, 2455, 0, 0, 0, 0, 0,
	1710, 1726, 1738, 0, 0, 1874, 2080, 2456, 2799, 2800,
	1595, 0, 1736, 1710, 0, 0, 0, 1737, 1739, 0,
	2423, 0, 1740,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 538, 3, 3,
	531, 532, 536, 534, 541, 535, 533, 537, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 542, 540,
	525, 527, 526, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 529, 3, 530, 539,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 528, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:581
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:596
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:604
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:619
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:622
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:631
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:632
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:633
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:634
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:635
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:636
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:637
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:638
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:639
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:640
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:641
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:642
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:643
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:644
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:645
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:646
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:647
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:648
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:649
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:650
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:651
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:652
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:653
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:654
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:655
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:656
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:657
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:658
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:659
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:660
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:661
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:662
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:663
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:664
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:665
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:666
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:667
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:668
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:669
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:670
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:671
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:672
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:673
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:674
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:675
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:676
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:677
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:678
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:679
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:680
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:681
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:682
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:683
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:684
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:685
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:686
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:687
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:688
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:689
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:690
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:691
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:692
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:693
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:694
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:695
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:696
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:697
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:698
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:699
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:700
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:701
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:702
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:703
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:704
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:705
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:706
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:707
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:708
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:709
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:710
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:711
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:712
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:713
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:714
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:715
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:716
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:717
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:719
		{
			yyVAL.stmt = nil
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:730
		{
			yyVAL.str = yyDollar[1].str
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:731
		{
			yyVAL.str = ""
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:735
		{
			yyVAL.list = yyDollar[1].list
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:736
		{
			yyVAL.list = nil
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:740
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:741
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:742
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:746
		{
			yyVAL.ival = 1
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:747
		{
			yyVAL.ival = 0
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:751
		{
			yyVAL.ival = 1
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:752
		{
			yyVAL.ival = 0
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:756
		{
			yyVAL.bval = true
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:757
		{
			yyVAL.bval = false
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:761
		{
			yyVAL.bval = true
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:762
		{
			yyVAL.bval = false
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:766
		{
			yyVAL.list = yyDollar[2].list
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:767
		{
			yyVAL.list = nil
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:768
		{
			yyVAL.list = nil
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:777
		{
			yyVAL.str = yyDollar[1].str
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:778
		{
			yyVAL.str = yyDollar[1].str
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:779
		{
			yyVAL.str = yyDollar[1].str
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:783
		{
			yyVAL.str = yyDollar[1].str
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:784
		{
			yyVAL.str = yyDollar[1].str
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:785
		{
			yyVAL.str = yyDollar[1].str
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:786
		{
			yyVAL.str = yyDollar[1].str
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:787
		{
			yyVAL.str = yyDollar[1].str
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:790
		{
			yyVAL.str = yyDollar[1].str
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:791
		{
			yyVAL.str = yyDollar[1].str
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:794
		{
			yyVAL.str = yyDollar[1].str
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:799
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:803
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:812
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:816
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:824
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:831
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:860
		{
			yyVAL.list = yyDollar[2].list
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:861
		{
			yyVAL.list = nil
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:866
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:870
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:883
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:889
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:895
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:901
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:907
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:914
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:921
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:927
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:933
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:942
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:946
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:958
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:962
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:972
		{
			yyVAL.str = "abort"
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:973
		{
			yyVAL.str = "absent"
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:974
		{
			yyVAL.str = "absolute"
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:975
		{
			yyVAL.str = "access"
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:976
		{
			yyVAL.str = "action"
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:977
		{
			yyVAL.str = "add"
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:978
		{
			yyVAL.str = "admin"
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:979
		{
			yyVAL.str = "after"
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:980
		{
			yyVAL.str = "aggregate"
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:981
		{
			yyVAL.str = "also"
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:982
		{
			yyVAL.str = "alter"
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:983
		{
			yyVAL.str = "always"
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:984
		{
			yyVAL.str = "asensitive"
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:985
		{
			yyVAL.str = "assertion"
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:986
		{
			yyVAL.str = "assignment"
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:987
		{
			yyVAL.str = "at"
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:988
		{
			yyVAL.str = "atomic"
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:989
		{
			yyVAL.str = "attach"
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:990
		{
			yyVAL.str = "attribute"
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:991
		{
			yyVAL.str = "backward"
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:992
		{
			yyVAL.str = "before"
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:993
		{
			yyVAL.str = "begin"
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:994
		{
			yyVAL.str = "breadth"
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:995
		{
			yyVAL.str = "by"
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:996
		{
			yyVAL.str = "cache"
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:997
		{
			yyVAL.str = "call"
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:998
		{
			yyVAL.str = "called"
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:999
		{
			yyVAL.str = "cascade"
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1000
		{
			yyVAL.str = "cascaded"
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1001
		{
			yyVAL.str = "catalog"
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1002
		{
			yyVAL.str = "chain"
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1003
		{
			yyVAL.str = "characteristics"
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1004
		{
			yyVAL.str = "checkpoint"
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1005
		{
			yyVAL.str = "class"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1006
		{
			yyVAL.str = "close"
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1007
		{
			yyVAL.str = "cluster"
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1008
		{
			yyVAL.str = "columns"
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1009
		{
			yyVAL.str = "comment"
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1010
		{
			yyVAL.str = "comments"
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1011
		{
			yyVAL.str = "commit"
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1012
		{
			yyVAL.str = "committed"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1013
		{
			yyVAL.str = "compression"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1014
		{
			yyVAL.str = "conditional"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1015
		{
			yyVAL.str = "configuration"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1016
		{
			yyVAL.str = "conflict"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1017
		{
			yyVAL.str = "connection"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1018
		{
			yyVAL.str = "constraints"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1019
		{
			yyVAL.str = "content"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1020
		{
			yyVAL.str = "continue"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1021
		{
			yyVAL.str = "conversion"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1022
		{
			yyVAL.str = "copy"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1023
		{
			yyVAL.str = "cost"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1024
		{
			yyVAL.str = "csv"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1025
		{
			yyVAL.str = "cube"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1026
		{
			yyVAL.str = "current"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1027
		{
			yyVAL.str = "cursor"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1028
		{
			yyVAL.str = "cycle"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1029
		{
			yyVAL.str = "data"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1030
		{
			yyVAL.str = "database"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1031
		{
			yyVAL.str = "day"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1032
		{
			yyVAL.str = "deallocate"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1033
		{
			yyVAL.str = "declare"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1034
		{
			yyVAL.str = "defaults"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1035
		{
			yyVAL.str = "deferred"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1036
		{
			yyVAL.str = "definer"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1037
		{
			yyVAL.str = "delete"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1038
		{
			yyVAL.str = "delimiter"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1039
		{
			yyVAL.str = "delimiters"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1040
		{
			yyVAL.str = "depends"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1041
		{
			yyVAL.str = "depth"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1042
		{
			yyVAL.str = "detach"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1043
		{
			yyVAL.str = "dictionary"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1044
		{
			yyVAL.str = "disable"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1045
		{
			yyVAL.str = "discard"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1046
		{
			yyVAL.str = "document"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1047
		{
			yyVAL.str = "domain"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1048
		{
			yyVAL.str = "double"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.str = "drop"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.str = "each"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.str = "empty"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1052
		{
			yyVAL.str = "enable"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "encoding"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "encrypted"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "enum"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "error"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "escape"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "event"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "exclude"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "excluding"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "exclusive"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "execute"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "explain"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "expression"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "extension"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "external"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "family"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "filter"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "finalize"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "first"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "following"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "force"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "format"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "forward"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "function"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "functions"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "generated"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "global"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "granted"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "groups"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "handler"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "header"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "hold"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "hour"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "identity"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "if"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "immediate"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "immutable"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "implicit"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "import"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "include"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "including"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "increment"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "indent"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "index"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "indexes"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "inherit"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "inherits"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "inline"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "input"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "insensitive"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "insert"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "instead"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "invoker"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "isolation"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "keep"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "key"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "keys"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "label"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "language"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "large"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "last"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "leakproof"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "level"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "listen"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "load"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "local"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "location"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "lock"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "locked"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "logged"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "mapping"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "match"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "matched"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "materialized"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "maxvalue"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "merge"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "method"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "minute"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "minvalue"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "mode"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "month"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "move"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "name"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "names"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "nested"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "new"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "next"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "nfc"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "nfd"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "nfkc"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "nfkd"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "no"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "normalized"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "nothing"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "notify"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "nowait"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "nulls"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "object"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "of"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "off"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "oids"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "old"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "omit"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "operator"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "option"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "options"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "ordinality"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "others"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "over"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "overriding"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "owned"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "owner"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "parallel"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "parameter"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "parser"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "partial"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.str = "partition"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1169
		{
			yyVAL.str = "passing"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.str = "password"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "path"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "plan"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "plans"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.str = "policy"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.str = "preceding"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			yyVAL.str = "prepare"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1177
		{
			yyVAL.str = "prepared"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = "preserve"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = "prior"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "privileges"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "procedural"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "procedure"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "procedures"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "program"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "publication"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "quote"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "quotes"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "range"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "read"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "reassign"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "recheck"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "recursive"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "ref"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1194
		{
			yyVAL.str = "referencing"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "refresh"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "reindex"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "relative"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.str = "release"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.str = "rename"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.str = "repeatable"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.str = "replace"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "replica"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "reset"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = "restart"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = "restrict"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = "return"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1207
		{
			yyVAL.str = "returns"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1208
		{
			yyVAL.str = "revoke"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1209
		{
			yyVAL.str = "role"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1210
		{
			yyVAL.str = "rollback"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.str = "rollup"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1212
		{
			yyVAL.str = "routine"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1213
		{
			yyVAL.str = "routines"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1214
		{
			yyVAL.str = "rows"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.str = "rule"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1216
		{
			yyVAL.str = "savepoint"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1217
		{
			yyVAL.str = "scalar"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.str = "schema"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.str = "schemas"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "scroll"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "search"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "second"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "security"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "sequence"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "sequences"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "serializable"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "server"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "session"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "set"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "sets"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "share"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "show"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "simple"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "skip"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.str = "snapshot"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1236
		{
			yyVAL.str = "source"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.str = "sql"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1238
		{
			yyVAL.str = "stable"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1239
		{
			yyVAL.str = "standalone"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1240
		{
			yyVAL.str = "start"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.str = "statement"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1242
		{
			yyVAL.str = "statistics"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1243
		{
			yyVAL.str = "stdin"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1244
		{
			yyVAL.str = "stdout"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.str = "storage"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1246
		{
			yyVAL.str = "stored"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1247
		{
			yyVAL.str = "strict"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1248
		{
			yyVAL.str = "string"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1249
		{
			yyVAL.str = "strip"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1250
		{
			yyVAL.str = "subscription"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1251
		{
			yyVAL.str = "support"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1252
		{
			yyVAL.str = "sysid"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.str = "system"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1254
		{
			yyVAL.str = "tables"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1255
		{
			yyVAL.str = "tablespace"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1256
		{
			yyVAL.str = "target"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "temp"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.str = "template"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.str = "temporary"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "text"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "ties"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "transaction"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "transform"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "trigger"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "truncate"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "trusted"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "type"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "types"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.str = "uescape"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1270
		{
			yyVAL.str = "unbounded"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "uncommitted"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "unconditional"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "unencrypted"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "unknown"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "unlisten"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "unlogged"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "until"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "update"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.str = "vacuum"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1280
		{
			yyVAL.str = "valid"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1281
		{
			yyVAL.str = "validate"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1282
		{
			yyVAL.str = "validator"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.str = "value"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1284
		{
			yyVAL.str = "varying"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1285
		{
			yyVAL.str = "version"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1286
		{
			yyVAL.str = "view"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1287
		{
			yyVAL.str = "views"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1288
		{
			yyVAL.str = "volatile"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1289
		{
			yyVAL.str = "whitespace"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1290
		{
			yyVAL.str = "within"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1291
		{
			yyVAL.str = "without"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1292
		{
			yyVAL.str = "work"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1293
		{
			yyVAL.str = "wrapper"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1294
		{
			yyVAL.str = "write"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1295
		{
			yyVAL.str = "xml"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1296
		{
			yyVAL.str = "year"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1297
		{
			yyVAL.str = "yes"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1298
		{
			yyVAL.str = "zone"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1312
		{
			yyVAL.str = "between"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			yyVAL.str = "bigint"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1314
		{
			yyVAL.str = "bit"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.str = "boolean"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1316
		{
			yyVAL.str = "char"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1317
		{
			yyVAL.str = "character"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1318
		{
			yyVAL.str = "coalesce"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1319
		{
			yyVAL.str = "dec"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1320
		{
			yyVAL.str = "decimal"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1321
		{
			yyVAL.str = "exists"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1322
		{
			yyVAL.str = "extract"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1323
		{
			yyVAL.str = "float"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1324
		{
			yyVAL.str = "greatest"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1325
		{
			yyVAL.str = "grouping"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1326
		{
			yyVAL.str = "inout"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1327
		{
			yyVAL.str = "int"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1328
		{
			yyVAL.str = "integer"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1329
		{
			yyVAL.str = "interval"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1330
		{
			yyVAL.str = "json"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1331
		{
			yyVAL.str = "json_array"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1332
		{
			yyVAL.str = "json_arrayagg"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1333
		{
			yyVAL.str = "json_exists"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1334
		{
			yyVAL.str = "json_object"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1335
		{
			yyVAL.str = "json_objectagg"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = "json_query"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "json_scalar"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "json_serialize"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "json_table"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "json_value"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "least"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "merge_action"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "national"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "nchar"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1345
		{
			yyVAL.str = "none"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1346
		{
			yyVAL.str = "normalize"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1347
		{
			yyVAL.str = "nullif"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1348
		{
			yyVAL.str = "numeric"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1349
		{
			yyVAL.str = "out"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1350
		{
			yyVAL.str = "overlay"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1351
		{
			yyVAL.str = "position"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1352
		{
			yyVAL.str = "precision"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1353
		{
			yyVAL.str = "real"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1354
		{
			yyVAL.str = "row"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1355
		{
			yyVAL.str = "setof"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1356
		{
			yyVAL.str = "smallint"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1357
		{
			yyVAL.str = "substring"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "time"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "timestamp"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "treat"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1361
		{
			yyVAL.str = "trim"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1362
		{
			yyVAL.str = "values"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.str = "varchar"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1364
		{
			yyVAL.str = "xmlattributes"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1365
		{
			yyVAL.str = "xmlconcat"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1366
		{
			yyVAL.str = "xmlelement"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1367
		{
			yyVAL.str = "xmlexists"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1368
		{
			yyVAL.str = "xmlforest"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1369
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1370
		{
			yyVAL.str = "xmlparse"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.str = "xmlpi"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1372
		{
			yyVAL.str = "xmlroot"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1373
		{
			yyVAL.str = "xmlserialize"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1374
		{
			yyVAL.str = "xmltable"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1388
		{
			yyVAL.str = "authorization"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1389
		{
			yyVAL.str = "binary"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1390
		{
			yyVAL.str = "collation"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1391
		{
			yyVAL.str = "concurrently"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1392
		{
			yyVAL.str = "cross"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "current_schema"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.str = "freeze"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.str = "full"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1396
		{
			yyVAL.str = "ilike"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.str = "inner"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.str = "is"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1399
		{
			yyVAL.str = "isnull"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1400
		{
			yyVAL.str = "join"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1401
		{
			yyVAL.str = "left"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.str = "like"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1403
		{
			yyVAL.str = "natural"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1404
		{
			yyVAL.str = "notnull"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1405
		{
			yyVAL.str = "outer"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1406
		{
			yyVAL.str = "overlaps"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1407
		{
			yyVAL.str = "right"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1408
		{
			yyVAL.str = "similar"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.str = "tablesample"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1410
		{
			yyVAL.str = "verbose"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "all"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "analyse"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "analyze"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "and"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "any"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "array"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "as"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "asc"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "asymmetric"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "both"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "case"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "cast"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "check"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "collate"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "column"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "constraint"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = "create"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1437
		{
			yyVAL.str = "current_catalog"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1438
		{
			yyVAL.str = "current_date"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1439
		{
			yyVAL.str = "current_role"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1440
		{
			yyVAL.str = "current_time"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1441
		{
			yyVAL.str = "current_timestamp"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1442
		{
			yyVAL.str = "current_user"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1443
		{
			yyVAL.str = "default"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1444
		{
			yyVAL.str = "deferrable"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1445
		{
			yyVAL.str = "desc"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1446
		{
			yyVAL.str = "distinct"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1447
		{
			yyVAL.str = "do"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1448
		{
			yyVAL.str = "else"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1449
		{
			yyVAL.str = "end"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "except"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "false"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "fetch"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "for"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "foreign"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1455
		{
			yyVAL.str = "from"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1456
		{
			yyVAL.str = "grant"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1457
		{
			yyVAL.str = "group"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.str = "having"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1459
		{
			yyVAL.str = "in"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1460
		{
			yyVAL.str = "initially"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1461
		{
			yyVAL.str = "intersect"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1462
		{
			yyVAL.str = "into"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.str = "lateral"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = "leading"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1465
		{
			yyVAL.str = "limit"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1466
		{
			yyVAL.str = "localtime"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.str = "localtimestamp"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1468
		{
			yyVAL.str = "not"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "null"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1470
		{
			yyVAL.str = "offset"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.str = "on"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1472
		{
			yyVAL.str = "only"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.str = "or"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.str = "order"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1475
		{
			yyVAL.str = "placing"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1476
		{
			yyVAL.str = "primary"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.str = "references"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "returning"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1479
		{
			yyVAL.str = "select"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.str = "session_user"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1481
		{
			yyVAL.str = "some"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "symmetric"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "system_user"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "table"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "then"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "to"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.str = "trailing"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1488
		{
			yyVAL.str = "true"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = "union"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = "unique"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.str = "user"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1492
		{
			yyVAL.str = "using"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			yyVAL.str = "variadic"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "when"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "where"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "window"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.str = "with"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "abort"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "absent"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "absolute"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "access"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "action"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "add"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "admin"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "after"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "aggregate"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "all"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "also"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "alter"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "always"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "analyse"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "analyze"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "and"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "any"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "asc"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "asensitive"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "assertion"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "assignment"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "asymmetric"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "at"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "atomic"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "attach"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "attribute"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "authorization"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "backward"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "before"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "begin"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "between"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "bigint"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "binary"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "bit"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "boolean"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "both"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "breadth"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "by"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "cache"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "call"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "called"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "cascade"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "cascaded"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "case"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "cast"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "catalog"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "chain"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "characteristics"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "check"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "checkpoint"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "class"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "close"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "cluster"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "coalesce"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "collate"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "collation"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "column"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "columns"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "comment"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "comments"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "commit"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "committed"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "compression"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "concurrently"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "conditional"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "configuration"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "conflict"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "connection"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1578
		{
			yyVAL.str = "constraint"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1579
		{
			yyVAL.str = "constraints"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1580
		{
			yyVAL.str = "content"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1581
		{
			yyVAL.str = "continue"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1582
		{
			yyVAL.str = "conversion"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1583
		{
			yyVAL.str = "copy"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1584
		{
			yyVAL.str = "cost"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1585
		{
			yyVAL.str = "cross"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1586
		{
			yyVAL.str = "csv"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1587
		{
			yyVAL.str = "cube"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1588
		{
			yyVAL.str = "current"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1589
		{
			yyVAL.str = "current_catalog"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1590
		{
			yyVAL.str = "current_date"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "current_role"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "current_schema"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			yyVAL.str = "current_time"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1594
		{
			yyVAL.str = "current_timestamp"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.str = "current_user"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "cursor"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "cycle"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "data"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "database"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "deallocate"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "dec"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "decimal"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "declare"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "default"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "defaults"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "deferrable"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "deferred"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "definer"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "delete"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "delimiter"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "delimiters"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "depends"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "depth"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "desc"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "detach"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "dictionary"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "disable"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "discard"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "distinct"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "do"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "document"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "domain"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "double"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "drop"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "each"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "else"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "empty"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "enable"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "encoding"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "encrypted"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "end"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "enum"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "error"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "escape"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "event"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "exclude"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "excluding"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "exclusive"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "execute"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "exists"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "explain"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "expression"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "extension"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "external"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "extract"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "false"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "family"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "finalize"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "first"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "float"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "following"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "force"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "foreign"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "format"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "forward"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "freeze"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "full"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "function"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "functions"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "generated"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "global"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "granted"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "greatest"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "grouping"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "groups"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "handler"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "header"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "hold"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "identity"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "if"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "ilike"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "immediate"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "immutable"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "implicit"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "import"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "in"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "include"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "including"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "increment"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "indent"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "index"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "indexes"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "inherit"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "inherits"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "initially"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "inline"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "inner"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "inout"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "input"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "insensitive"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "insert"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "instead"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "int"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "integer"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "interval"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "invoker"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "is"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "isolation"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "join"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "json"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "json_array"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "json_arrayagg"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "json_exists"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "json_object"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "json_objectagg"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "json_query"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "json_scalar"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "json_serialize"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "json_table"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "json_value"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "keep"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "key"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "keys"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "label"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "language"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "large"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "last"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "lateral"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "leading"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "leakproof"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "least"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "left"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "level"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "like"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "listen"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "load"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "local"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "localtime"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "localtimestamp"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "location"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "lock"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "locked"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "logged"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "mapping"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "match"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "matched"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "materialized"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "maxvalue"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "merge"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "merge_action"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "method"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "minvalue"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "mode"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "move"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "name"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "names"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "national"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "natural"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "nchar"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "nested"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "new"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "next"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "nfc"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "nfd"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.str = "nfkc"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1756
		{
			yyVAL.str = "nfkd"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1757
		{
			yyVAL.str = "no"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1758
		{
			yyVAL.str = "none"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.str = "normalize"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.str = "normalized"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1761
		{
			yyVAL.str = "not"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1762
		{
			yyVAL.str = "nothing"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.str = "notify"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1764
		{
			yyVAL.str = "nowait"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1765
		{
			yyVAL.str = "null"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1766
		{
			yyVAL.str = "nullif"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1767
		{
			yyVAL.str = "nulls"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1768
		{
			yyVAL.str = "numeric"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.str = "object"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1770
		{
			yyVAL.str = "of"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.str = "off"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1772
		{
			yyVAL.str = "oids"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1773
		{
			yyVAL.str = "old"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1774
		{
			yyVAL.str = "omit"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			yyVAL.str = "only"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1776
		{
			yyVAL.str = "operator"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1777
		{
			yyVAL.str = "option"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1778
		{
			yyVAL.str = "options"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1779
		{
			yyVAL.str = "or"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1780
		{
			yyVAL.str = "ordinality"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.str = "others"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1782
		{
			yyVAL.str = "out"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1783
		{
			yyVAL.str = "outer"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1784
		{
			yyVAL.str = "overlay"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1785
		{
			yyVAL.str = "overriding"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1786
		{
			yyVAL.str = "owned"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1787
		{
			yyVAL.str = "owner"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1788
		{
			yyVAL.str = "parallel"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1789
		{
			yyVAL.str = "parameter"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1790
		{
			yyVAL.str = "parser"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1791
		{
			yyVAL.str = "partial"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1792
		{
			yyVAL.str = "partition"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1793
		{
			yyVAL.str = "passing"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1794
		{
			yyVAL.str = "password"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1795
		{
			yyVAL.str = "path"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1796
		{
			yyVAL.str = "placing"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1797
		{
			yyVAL.str = "plan"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1798
		{
			yyVAL.str = "plans"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1799
		{
			yyVAL.str = "policy"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1800
		{
			yyVAL.str = "position"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1801
		{
			yyVAL.str = "preceding"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1802
		{
			yyVAL.str = "prepare"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1803
		{
			yyVAL.str = "prepared"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1804
		{
			yyVAL.str = "preserve"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1805
		{
			yyVAL.str = "primary"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1806
		{
			yyVAL.str = "prior"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1807
		{
			yyVAL.str = "privileges"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1808
		{
			yyVAL.str = "procedural"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1809
		{
			yyVAL.str = "procedure"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1810
		{
			yyVAL.str = "procedures"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1811
		{
			yyVAL.str = "program"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1812
		{
			yyVAL.str = "publication"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1813
		{
			yyVAL.str = "quote"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1814
		{
			yyVAL.str = "quotes"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1815
		{
			yyVAL.str = "range"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1816
		{
			yyVAL.str = "read"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1817
		{
			yyVAL.str = "real"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1818
		{
			yyVAL.str = "reassign"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1819
		{
			yyVAL.str = "recheck"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1820
		{
			yyVAL.str = "recursive"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1821
		{
			yyVAL.str = "ref"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1822
		{
			yyVAL.str = "references"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1823
		{
			yyVAL.str = "referencing"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1824
		{
			yyVAL.str = "refresh"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1825
		{
			yyVAL.str = "reindex"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1826
		{
			yyVAL.str = "relative"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1827
		{
			yyVAL.str = "release"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1828
		{
			yyVAL.str = "rename"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1829
		{
			yyVAL.str = "repeatable"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1830
		{
			yyVAL.str = "replace"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1831
		{
			yyVAL.str = "replica"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1832
		{
			yyVAL.str = "reset"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1833
		{
			yyVAL.str = "restart"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1834
		{
			yyVAL.str = "restrict"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1835
		{
			yyVAL.str = "return"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1836
		{
			yyVAL.str = "returns"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1837
		{
			yyVAL.str = "revoke"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1838
		{
			yyVAL.str = "right"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1839
		{
			yyVAL.str = "role"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1840
		{
			yyVAL.str = "rollback"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1841
		{
			yyVAL.str = "rollup"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1842
		{
			yyVAL.str = "routine"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1843
		{
			yyVAL.str = "routines"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1844
		{
			yyVAL.str = "row"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1845
		{
			yyVAL.str = "rows"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1846
		{
			yyVAL.str = "rule"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1847
		{
			yyVAL.str = "savepoint"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1848
		{
			yyVAL.str = "scalar"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1849
		{
			yyVAL.str = "schema"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1850
		{
			yyVAL.str = "schemas"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1851
		{
			yyVAL.str = "scroll"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1852
		{
			yyVAL.str = "search"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1853
		{
			yyVAL.str = "security"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1854
		{
			yyVAL.str = "select"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1855
		{
			yyVAL.str = "sequence"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1856
		{
			yyVAL.str = "sequences"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1857
		{
			yyVAL.str = "serializable"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1858
		{
			yyVAL.str = "server"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1859
		{
			yyVAL.str = "session"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1860
		{
			yyVAL.str = "session_user"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1861
		{
			yyVAL.str = "set"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1862
		{
			yyVAL.str = "setof"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1863
		{
			yyVAL.str = "sets"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1864
		{
			yyVAL.str = "share"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1865
		{
			yyVAL.str = "show"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1866
		{
			yyVAL.str = "similar"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1867
		{
			yyVAL.str = "simple"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1868
		{
			yyVAL.str = "skip"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1869
		{
			yyVAL.str = "smallint"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1870
		{
			yyVAL.str = "snapshot"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1871
		{
			yyVAL.str = "some"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1872
		{
			yyVAL.str = "source"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1873
		{
			yyVAL.str = "sql"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1874
		{
			yyVAL.str = "stable"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1875
		{
			yyVAL.str = "standalone"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1876
		{
			yyVAL.str = "start"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1877
		{
			yyVAL.str = "statement"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1878
		{
			yyVAL.str = "statistics"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1879
		{
			yyVAL.str = "stdin"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1880
		{
			yyVAL.str = "stdout"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1881
		{
			yyVAL.str = "storage"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1882
		{
			yyVAL.str = "stored"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1883
		{
			yyVAL.str = "strict"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1884
		{
			yyVAL.str = "string"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1885
		{
			yyVAL.str = "strip"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1886
		{
			yyVAL.str = "subscription"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1887
		{
			yyVAL.str = "substring"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1888
		{
			yyVAL.str = "support"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1889
		{
			yyVAL.str = "symmetric"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1890
		{
			yyVAL.str = "sysid"
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1891
		{
			yyVAL.str = "system"
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1892
		{
			yyVAL.str = "system_user"
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1893
		{
			yyVAL.str = "table"
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1894
		{
			yyVAL.str = "tables"
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1895
		{
			yyVAL.str = "tablesample"
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1896
		{
			yyVAL.str = "tablespace"
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1897
		{
			yyVAL.str = "target"
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1898
		{
			yyVAL.str = "temp"
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1899
		{
			yyVAL.str = "template"
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1900
		{
			yyVAL.str = "temporary"
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1901
		{
			yyVAL.str = "text"
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1902
		{
			yyVAL.str = "then"
		}
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1903
		{
			yyVAL.str = "ties"
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1904
		{
			yyVAL.str = "time"
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1905
		{
			yyVAL.str = "timestamp"
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1906
		{
			yyVAL.str = "trailing"
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1907
		{
			yyVAL.str = "transaction"
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1908
		{
			yyVAL.str = "transform"
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1909
		{
			yyVAL.str = "treat"
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1910
		{
			yyVAL.str = "trigger"
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1911
		{
			yyVAL.str = "trim"
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1912
		{
			yyVAL.str = "true"
		}
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1913
		{
			yyVAL.str = "truncate"
		}
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1914
		{
			yyVAL.str = "trusted"
		}
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1915
		{
			yyVAL.str = "type"
		}
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1916
		{
			yyVAL.str = "types"
		}
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1917
		{
			yyVAL.str = "uescape"
		}
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1918
		{
			yyVAL.str = "unbounded"
		}
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1919
		{
			yyVAL.str = "uncommitted"
		}
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1920
		{
			yyVAL.str = "unconditional"
		}
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1921
		{
			yyVAL.str = "unencrypted"
		}
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1922
		{
			yyVAL.str = "unique"
		}
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1923
		{
			yyVAL.str = "unknown"
		}
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1924
		{
			yyVAL.str = "unlisten"
		}
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1925
		{
			yyVAL.str = "unlogged"
		}
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1926
		{
			yyVAL.str = "until"
		}
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1927
		{
			yyVAL.str = "update"
		}
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1928
		{
			yyVAL.str = "user"
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1929
		{
			yyVAL.str = "using"
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1930
		{
			yyVAL.str = "vacuum"
		}
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1931
		{
			yyVAL.str = "valid"
		}
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1932
		{
			yyVAL.str = "validate"
		}
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1933
		{
			yyVAL.str = "validator"
		}
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1934
		{
			yyVAL.str = "value"
		}
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1935
		{
			yyVAL.str = "values"
		}
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1936
		{
			yyVAL.str = "varchar"
		}
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1937
		{
			yyVAL.str = "variadic"
		}
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1938
		{
			yyVAL.str = "verbose"
		}
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1939
		{
			yyVAL.str = "version"
		}
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1940
		{
			yyVAL.str = "view"
		}
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1941
		{
			yyVAL.str = "views"
		}
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1942
		{
			yyVAL.str = "volatile"
		}
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1943
		{
			yyVAL.str = "when"
		}
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1944
		{
			yyVAL.str = "whitespace"
		}
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1945
		{
			yyVAL.str = "work"
		}
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1946
		{
			yyVAL.str = "wrapper"
		}
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1947
		{
			yyVAL.str = "write"
		}
	case 1077:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1948
		{
			yyVAL.str = "xml"
		}
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1949
		{
			yyVAL.str = "xmlattributes"
		}
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1950
		{
			yyVAL.str = "xmlconcat"
		}
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1951
		{
			yyVAL.str = "xmlelement"
		}
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1952
		{
			yyVAL.str = "xmlexists"
		}
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1953
		{
			yyVAL.str = "xmlforest"
		}
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1954
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1955
		{
			yyVAL.str = "xmlparse"
		}
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1956
		{
			yyVAL.str = "xmlpi"
		}
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1957
		{
			yyVAL.str = "xmlroot"
		}
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1958
		{
			yyVAL.str = "xmlserialize"
		}
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1959
		{
			yyVAL.str = "xmltable"
		}
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1960
		{
			yyVAL.str = "yes"
		}
	case 1090:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1961
		{
			yyVAL.str = "zone"
		}
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1976
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1978
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1093:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1982
		{
			collateClause := ast.NewCollateClause(yyDollar[3].list)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1094:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1988
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1095:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1993
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1096:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1998
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1097:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2003
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1098:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2008
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1099:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2013
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2018
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2023
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2028
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2033
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2038
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2043
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2048
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2053
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2058
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2063
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2068
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2072
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2076
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2080
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2084
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2088
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2092
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1117:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2097
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2104
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1119:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2109
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2116
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1121:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2121
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2128
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2133
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2140
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1125:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2147
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1126:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2154
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1127:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2161
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2168
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2172
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2176
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2180
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2184
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlaps"))
			leftList := yyDollar[1].list
			rightList := yyDollar[3].list
			combinedList := ast.NewNodeList()
			combinedList.Items = append(leftList.Items, rightList.Items...)
			yyVAL.node = ast.NewFuncCall(funcName, combinedList, 0)
		}
	case 1133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2193
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_TRUE)
		}
	case 1134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2197
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_TRUE)
		}
	case 1135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2201
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_FALSE)
		}
	case 1136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2205
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_FALSE)
		}
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2209
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_UNKNOWN)
		}
	case 1138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2213
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_UNKNOWN)
		}
	case 1139:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2217
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1140:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2222
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1141:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2227
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1142:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2232
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1143:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2237
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1144:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2242
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2247
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2252
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2257
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			sublink := ast.NewSubLink(subLinkType, yyDollar[4].stmt)
			sublink.Testexpr = yyDollar[1].node
			sublink.OperName = operName
			yyVAL.node = sublink
		}
	case 1148:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2266
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			if subLinkType == ast.ANY_SUBLINK {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ANY, operName, yyDollar[1].node, yyDollar[5].node, 0)
			} else {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ALL, operName, yyDollar[1].node, yyDollar[5].node, 0)
			}
		}
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2276
		{
			yylex.Error("UNIQUE predicate is not yet implemented")
		}
	case 1150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2280
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
		}
	case 1151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2285
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2291
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2297
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[3].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2304
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1155:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2311
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[4].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2319
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[3].ival)
			uniqueKeys := yyDollar[4].bval
			yyVAL.node = ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
		}
	case 1157:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2336
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[4].ival)
			uniqueKeys := yyDollar[5].bval
			jsonPredicate := ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(jsonPredicate))
		}
	case 1158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2355
		{
			yyVAL.node = ast.NewSetToDefault(0, 0, 0)
		}
	case 1159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2360
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2362
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2366
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2371
		{
			yyVAL.node = doNegate(yyDollar[2].node, 0)
		}
	case 1163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2375
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2380
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2385
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2390
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2395
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2400
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2405
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2410
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2415
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2420
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2425
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2430
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2435
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2439
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2443
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1178:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2448
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2453
		{
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2458
		{
			args := ast.NewNodeList(yyDollar[1].node)
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2465
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2466
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2468
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2477
		{
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewParenExpr(ast.NewA_Indirection(yyDollar[2].node, yyDollar[4].list, 0), 0)
			} else {
				yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
			}
		}
	case 1185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2484
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2485
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2487
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2491
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2496
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2500
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2504
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2508
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2514
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2520
		{
			exprList := yyDollar[3].list
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     exprList,
			}
			yyVAL.node = grouping
		}
	case 1195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2537
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2538
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2539
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2540
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2541
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2545
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2549
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2553
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2557
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2561
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2565
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2569
		{
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2573
		{
			// This is a bit constant per SQL99
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2578
		{
			// generic type 'literal' syntax
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1209:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2585
		{
			// generic syntax with a type modifier
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			// For now, we'll skip the error checking for NamedArgExpr and ORDER BY
			// TODO: Add proper validation when needed
			typeName.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[6].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2595
		{
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, yyDollar[1].typnam, 0)
		}
	case 1211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2600
		{
			t := yyDollar[1].typnam
			t.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1212:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2607
		{
			t := yyDollar[1].typnam
			// INTERVAL_FULL_RANGE equivalent and precision
			fullRange := ast.NewInteger(ast.INTERVAL_FULL_RANGE)
			precision := ast.NewInteger(yyDollar[3].ival)
			t.Typmods = ast.NewNodeList(fullRange, precision)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[5].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2618
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2621
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2624
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2625
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2626
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2630
		{
			yyVAL.typnam = makeTypeNameFromNodeList(ast.NewNodeList(ast.NewString("interval")))
		}
	case 1219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2637
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR))
		}
	case 1220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2639
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MONTH))
		}
	case 1221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2641
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY))
		}
	case 1222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2643
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR))
		}
	case 1223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2645
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MINUTE))
		}
	case 1224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2647
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2649
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR | ast.INTERVAL_MASK_MONTH))
		}
	case 1226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2653
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR))
		}
	case 1227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2657
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2661
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2672
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2676
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2687
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2698
		{
			yyVAL.list = nil
		}
	case 1233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2703
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_SECOND))
		}
	case 1234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2707
		{
			yyVAL.list = ast.NewNodeList(
				ast.NewInteger(ast.INTERVAL_MASK_SECOND),
				ast.NewInteger(yyDollar[3].ival), // precision
			)
		}
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2717
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2721
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2731
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2735
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2741
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2742
		{
			yyVAL.node = nil
		}
	case 1241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2746
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2750
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2754
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1244:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2758
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1245:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2763
		{
			yyVAL.list = nil
		}
	case 1246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2765
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2777
		{
			funcCall := yyDollar[1].node.(*ast.FuncCall)

			// Apply within_group_clause if present
			if yyDollar[2].list != nil {
				// WITHIN GROUP (ORDER BY ...) - store the sort list
				funcCall.AggOrder = yyDollar[2].list
				funcCall.AggWithinGroup = true
			}

			// Apply filter_clause if present
			if yyDollar[3].node != nil {
				// FILTER (WHERE condition) - store the filter expression
				funcCall.AggFilter = yyDollar[3].node
			}

			// Apply over_clause if present (window functions)
			if yyDollar[4].windef != nil {
				funcCall.Over = yyDollar[4].windef
			}

			yyVAL.node = funcCall
		}
	case 1248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2801
		{
			jsonAgg := yyDollar[1].node

			// Create or get the Constructor
			var constructor *ast.JsonAggConstructor

			// Handle the filter_clause and over_clause by setting them in the Constructor
			switch jsonFunc := jsonAgg.(type) {
			case *ast.JsonObjectAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			case *ast.JsonArrayAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			}

			// Set filter and over clauses outside the switch (DRY)
			if constructor != nil {
				if yyDollar[2].node != nil {
					constructor.AggFilter = yyDollar[2].node.(ast.Node)
				}
				if yyDollar[3].windef != nil {
					constructor.Over = yyDollar[3].windef
				}
			}

			yyVAL.node = jsonAgg
		}
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2834
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1250:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2840
		{
			// SystemFuncName("pg_collation_for")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("pg_collation_for"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2848
		{
			// makeSQLValueFunction(SVFOP_CURRENT_DATE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_DATE, 0, -1, 0)
		}
	case 1252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2853
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME, 0, -1, 0)
		}
	case 1253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2858
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2863
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP, 0, -1, 0)
		}
	case 1255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2868
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2873
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME, 0, -1, 0)
		}
	case 1257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2878
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2883
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP, 0, -1, 0)
		}
	case 1259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2888
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2893
		{
			// makeSQLValueFunction(SVFOP_CURRENT_ROLE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_ROLE, 0, -1, 0)
		}
	case 1261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2898
		{
			// makeSQLValueFunction(SVFOP_CURRENT_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_USER, 0, -1, 0)
		}
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2903
		{
			// makeSQLValueFunction(SVFOP_SESSION_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_SESSION_USER, 0, -1, 0)
		}
	case 1263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2908
		{
			// SystemFuncName("system_user")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("system_user"))
			funcCall := ast.NewFuncCall(funcName, nil, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2916
		{
			// makeSQLValueFunction(SVFOP_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_USER, 0, -1, 0)
		}
	case 1265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2921
		{
			// makeSQLValueFunction(SVFOP_CURRENT_CATALOG, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_CATALOG, 0, -1, 0)
		}
	case 1266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2926
		{
			// makeSQLValueFunction(SVFOP_CURRENT_SCHEMA, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_SCHEMA, 0, -1, 0)
		}
	case 1267:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2931
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[3].node, yyDollar[5].typnam, 0)
		}
	case 1268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2935
		{
			// SystemFuncName("extract")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("extract"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2943
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1270:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2951
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			args := ast.NewNodeList(yyDollar[3].node)
			args.Items = append(args.Items, ast.NewA_Const(ast.NewString(yyDollar[5].str), -1))
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2961
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2969
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2977
		{
			// SystemFuncName("position")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("position"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2985
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2993
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1276:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3001
		{
			// SystemFuncName("treat")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), llast(yyDollar[5].typnam.Names))
			args := ast.NewNodeList(yyDollar[3].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1277:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3010
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1278:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3018
		{
			// SystemFuncName("ltrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("ltrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1279:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3026
		{
			// SystemFuncName("rtrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("rtrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3034
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1281:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3042
		{
			// makeSimpleA_Expr(AEXPR_NULLIF, "=", $3, $5, @1)
			operName := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NULLIF, operName, yyDollar[3].node, yyDollar[5].node, 0)
		}
	case 1282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3048
		{
			// CoalesceExpr *c = makeNode(CoalesceExpr); c->args = $3; c->location = @1
			yyVAL.node = ast.NewCoalesceExpr(0, yyDollar[3].list)
		}
	case 1283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3053
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_GREATEST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_GREATEST, yyDollar[3].list, 0)
		}
	case 1284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3058
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_LEAST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_LEAST, yyDollar[3].list, 0)
		}
	case 1285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3063
		{
			// makeXmlExpr(IS_XMLCONCAT, NULL, NIL, $3, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLCONCAT, "", nil, nil, yyDollar[3].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1286:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3068
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1287:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3073
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1288:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3078
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, $6, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, yyDollar[6].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1289:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3083
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, $8, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, yyDollar[8].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3088
		{
			// makeXmlExpr(IS_XMLFOREST, NULL, $3, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLFOREST, "", yyDollar[3].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1291:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3093
		{
			// makeXmlExpr(IS_XMLPARSE, NULL, NIL, list_make2($4, makeBoolAConst($5, -1)), @1)
			// x->xmloption = $3
			wsOption := ast.NewA_Const(ast.NewBoolean(yyDollar[5].bval), -1)
			args := ast.NewNodeList(yyDollar[4].node, wsOption)
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPARSE, "", nil, nil, args, xmlOption, false, 0, -1, 0)
		}
	case 1292:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3102
		{
			// SystemFuncName("xmlexists") - xmlexists(A PASSING [BY REF] B [BY REF]) is converted to xmlexists(A, B)
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("xmlexists"))
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[4].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1293:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3111
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1294:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3116
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, list_make1($6), @1)
			args := ast.NewNodeList(yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1295:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3122
		{
			// makeXmlExpr(IS_XMLROOT, NULL, NIL, list_make3(...), @1)
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[5].node, yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLROOT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3128
		{
			/* Support for legacy (non-standard) json_object() */
			funcName := ast.NewNodeList(ast.NewString("json_object"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1297:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3139
		{
			n := ast.NewJsonObjectConstructor(yyDollar[3].list, yyDollar[4].bval, yyDollar[5].bval)
			if yyDollar[6].node != nil {
				n.Output = yyDollar[6].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3147
		{
			n := ast.NewJsonObjectConstructor(nil, false, false)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1299:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3159
		{
			n := ast.NewJsonArrayConstructor(yyDollar[3].list, yyDollar[4].bval)
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1300:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3171
		{
			n := ast.NewJsonArrayQueryConstructor(yyDollar[3].stmt, true) /* XXX: absent_on_null = true */
			if yyDollar[4].node != nil {
				n.Format = yyDollar[4].node.(*ast.JsonFormat)
			}
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3184
		{
			n := ast.NewJsonArrayConstructor(nil, true)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1302:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3192
		{
			n := ast.NewJsonParseExpr(yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[4].bval)
			n.Output = nil
			yyVAL.node = n
		}
	case 1303:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3198
		{
			n := ast.NewJsonScalarExpr(yyDollar[3].node.(ast.Expr))
			n.Output = nil
			yyVAL.node = n
		}
	case 1304:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3204
		{
			n := ast.NewJsonSerializeExpr(yyDollar[3].node.(*ast.JsonValueExpr))
			if yyDollar[4].node != nil {
				n.Output = yyDollar[4].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3212
		{
			m := ast.NewMergeSupportFunc(ast.TEXTOID, ast.InvalidOid, 0)
			yyVAL.node = m
		}
	case 1306:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:3223
		{
			n := ast.NewJsonFuncExpr(ast.JSON_QUERY_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			n.Wrapper = ast.JsonWrapper(yyDollar[8].ival)
			n.Quotes = ast.JsonQuotes(yyDollar[9].ival)
			if yyDollar[10].node != nil {
				behaviors := yyDollar[10].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1307:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3248
		{
			n := ast.NewJsonFuncExpr(ast.JSON_EXISTS_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			n.Output = nil
			if yyDollar[7].node != nil {
				n.OnError = yyDollar[7].node.(*ast.JsonBehavior)
			}
			yyVAL.node = n
		}
	case 1308:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3264
		{
			n := ast.NewJsonFuncExpr(ast.JSON_VALUE_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			if yyDollar[8].node != nil {
				behaviors := yyDollar[8].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1309:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3284
		{
			// XmlSerialize node - n->xmloption = $3; n->expr = $4; n->typeName = $6; n->indent = $7;
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlSerialize(xmlOption, yyDollar[4].node, yyDollar[6].typnam, yyDollar[7].bval, 0)
		}
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3294
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3298
		{
			yyVAL.list = nil
		}
	case 1312:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3305
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1313:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3309
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3313
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node)
		}
	case 1315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3317
		{
			sysTypeName := &ast.TypeName{
				Names:   ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("int4")),
				Typemod: -1,
			}
			tc := ast.NewTypeCast(yyDollar[3].node, sysTypeName, -1)
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, ast.NewInteger(1), tc)
		}
	case 1316:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3326
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3333
		{
			yyDollar[3].list.Append(yyDollar[1].node)
			yyVAL.list = yyDollar[3].list
		}
	case 1318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3338
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3342
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3349
		{
			// list_make2(makeStringConst($1, @1), $3)
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str), yyDollar[3].node)
		}
	case 1321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3359
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3360
		{
			yyVAL.str = "year"
		}
	case 1323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3361
		{
			yyVAL.str = "month"
		}
	case 1324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3362
		{
			yyVAL.str = "day"
		}
	case 1325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3363
		{
			yyVAL.str = "hour"
		}
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3364
		{
			yyVAL.str = "minute"
		}
	case 1327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3365
		{
			yyVAL.str = "second"
		}
	case 1328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3366
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1329:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3371
		{
			/* overlay(A PLACING B FROM C FOR D) is converted to overlay(A, B, C, D) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 1330:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3376
		{
			/* overlay(A PLACING B FROM C) is converted to overlay(A, B, C) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3384
		{
			yyVAL.list = ast.NewNodeList(yyDollar[3].node, yyDollar[1].node)
		}
	case 1332:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3387
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3392
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3396
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3404
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3408
		{
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3413
		{
			yyVAL.bval = true
		}
	case 1338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3414
		{
			yyVAL.bval = false
		}
	case 1339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3415
		{
			yyVAL.bval = false
		}
	case 1340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3418
		{
			yyVAL.bval = true
		}
	case 1341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3419
		{
			yyVAL.bval = false
		}
	case 1342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3420
		{
			yyVAL.bval = false
		}
	case 1343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3425
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3429
		{
			yyVAL.node = ast.NewA_Const(ast.NewNull(), 0)
		}
	case 1345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3436
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_YES)), 0)
		}
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3440
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO)), 0)
		}
	case 1347:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3444
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO_VALUE)), 0)
		}
	case 1348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3448
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_OMITTED)), 0)
		}
	case 1349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3455
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3456
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3457
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3461
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3465
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3476
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1355:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3480
		{
			// Special case for aggregates like COUNT(*) - set AggStar to true
			funcCall := ast.NewFuncCall(yyDollar[1].list, nil, 0)
			funcCall.AggStar = true
			yyVAL.node = funcCall
		}
	case 1356:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3487
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1357:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3493
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1358:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3499
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1359:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3507
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1360:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3513
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3521
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3525
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3532
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3536
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3540
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1366:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3547
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3552
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3553
		{
			yyVAL.node = nil
		}
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3557
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3559
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1371:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3567
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3573
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3574
		{
			yyVAL.node = nil
		}
	case 1374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3579
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3583
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3587
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3592
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3594
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1379:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3601
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3602
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1381:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3604
		{
			nodeList := yyDollar[2].list
			nodeList.Append(yyDollar[4].node)
			yyVAL.list = nodeList
		}
	case 1382:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3611
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3612
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1384:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3616
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3622
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3623
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3624
		{
			yyVAL.ival = int(ast.ALL_SUBLINK)
		}
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3629
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1389:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3633
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3637
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~"))
		}
	case 1391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3641
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~"))
		}
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3645
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~*"))
		}
	case 1393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3649
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~*"))
		}
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3655
		{
			yyVAL.str = "NFC"
		}
	case 1395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3656
		{
			yyVAL.str = "NFD"
		}
	case 1396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3657
		{
			yyVAL.str = "NFKC"
		}
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3658
		{
			yyVAL.str = "NFKD"
		}
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3662
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3663
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3664
		{
			yyVAL.ival = int(ast.JS_TYPE_ARRAY)
		}
	case 1401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3665
		{
			yyVAL.ival = int(ast.JS_TYPE_OBJECT)
		}
	case 1402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3666
		{
			yyVAL.ival = int(ast.JS_TYPE_SCALAR)
		}
	case 1403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3670
		{
			yyVAL.bval = true
		}
	case 1404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3671
		{
			yyVAL.bval = true
		}
	case 1405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3672
		{
			yyVAL.bval = false
		}
	case 1406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3673
		{
			yyVAL.bval = false
		}
	case 1407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3674
		{
			yyVAL.bval = false
		}
	case 1408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3679
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3683
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3692
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3697
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3698
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3699
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3700
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3701
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3704
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3705
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3706
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3709
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3712
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3716
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3720
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3727
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3731
		{
			yyVAL.list = nil
		}
	case 1425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3737
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3743
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3754
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3758
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3762
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3766
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3770
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3774
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3778
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3782
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3787
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3792
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3797
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3803
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3807
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3813
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3817
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3823
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3827
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for BitWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3835
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3839
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for CharacterWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3847
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3855
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3863
		{
			yyVAL.str = "varchar"
		}
	case 1449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3867
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3875
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3883
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1452:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3893
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3904
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1454:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3918
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3930
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1456:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3942
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3952
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1458:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3962
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3972
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3984
		{
			yyVAL.typnam = makeTypeNameFromString("json")
		}
	case 1461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3989
		{
			yyVAL.ival = 1
		}
	case 1462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3990
		{
			yyVAL.ival = 0
		}
	case 1463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3991
		{
			yyVAL.ival = 0
		}
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3994
		{
			yyVAL.ival = 1
		}
	case 1465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3995
		{
			yyVAL.ival = 0
		}
	case 1466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3999
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4009
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4016
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4020
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4027
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4031
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4036
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4037
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4040
		{
			yyVAL.str = "+"
		}
	case 1475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4041
		{
			yyVAL.str = "-"
		}
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4042
		{
			yyVAL.str = "*"
		}
	case 1477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4043
		{
			yyVAL.str = "/"
		}
	case 1478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4044
		{
			yyVAL.str = "%"
		}
	case 1479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4045
		{
			yyVAL.str = "^"
		}
	case 1480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4046
		{
			yyVAL.str = "<"
		}
	case 1481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4047
		{
			yyVAL.str = ">"
		}
	case 1482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4048
		{
			yyVAL.str = "="
		}
	case 1483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4049
		{
			yyVAL.str = "<="
		}
	case 1484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4050
		{
			yyVAL.str = ">="
		}
	case 1485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4051
		{
			yyVAL.str = "<>"
		}
	case 1486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4055
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4059
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4068
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1489:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4069
		{
			yyVAL.list = nil
		}
	case 1490:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4074
		{
			// WITHIN GROUP (ORDER BY ...) for ordered-set aggregates
			yyVAL.list = yyDollar[4].list
		}
	case 1491:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4078
		{
			yyVAL.list = nil
		}
	case 1492:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4083
		{
			// FILTER (WHERE condition) for aggregate filtering
			yyVAL.node = yyDollar[4].node
		}
	case 1493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4087
		{
			yyVAL.node = nil
		}
	case 1494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4091
		{
			yyVAL.ival = 0
		}
	case 1495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4092
		{
			yyVAL.ival = 0
		}
	case 1496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4096
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4101
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4116
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4117
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4121
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4122
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4131
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4132
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4141
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4143
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			// Use NodeList directly for SortClause
			selectStmt.SortClause = yyDollar[2].list
			yyVAL.stmt = selectStmt
		}
	case 1506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4150
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			selectStmt.LockingClause = yyDollar[3].list // Set the locking clause
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4162
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			if yyDollar[3].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[3].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[3].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[3].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4174
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4180
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			yyVAL.stmt = selectStmt
		}
	case 1510:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4187
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			if yyDollar[5].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[5].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[5].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[5].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1511:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4200
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[5].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4219
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4220
		{
			yyVAL.list = nil
		}
	case 1514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4224
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4225
		{
			yyVAL.list = nil
		}
	case 1516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4230
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4234
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4242
		{
			lockingClause := &ast.LockingClause{
				BaseNode:   ast.BaseNode{Tag: ast.T_LockingClause},
				Strength:   ast.LockClauseStrength(yyDollar[1].ival),
				LockedRels: yyDollar[2].list, // Store as *NodeList directly
				WaitPolicy: ast.LockWaitPolicy(yyDollar[3].ival),
			}
			yyVAL.node = lockingClause
		}
	case 1519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4254
		{
			yyVAL.ival = int(ast.LCS_FORUPDATE)
		}
	case 1520:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4255
		{
			yyVAL.ival = int(ast.LCS_FORNOKEYUPDATE)
		}
	case 1521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4256
		{
			yyVAL.ival = int(ast.LCS_FORSHARE)
		}
	case 1522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4257
		{
			yyVAL.ival = int(ast.LCS_FORKEYSHARE)
		}
	case 1523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4261
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4262
		{
			yyVAL.list = nil
		}
	case 1525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4267
		{
			yyVAL.ival = int(ast.LockWaitError)
		}
	case 1526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4268
		{
			yyVAL.ival = int(ast.LockWaitSkip)
		}
	case 1527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4269
		{
			yyVAL.ival = int(ast.LockWaitBlock)
		}
	case 1528:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4280
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1529:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4299
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4317
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4327
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4332
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_UNION, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4337
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_INTERSECT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4342
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_EXCEPT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4353
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4354
		{
			yyVAL.list = nil
		}
	case 1537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4358
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4359
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4364
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4368
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4373
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4378
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4389
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4390
		{
			yyVAL.list = nil
		}
	case 1545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4394
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4395
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4404
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4412
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			rangeTableSample := yyDollar[3].node.(*ast.RangeTableSample)
			rangeTableSample.Relation = rangeVar
			yyVAL.node = rangeTableSample
		}
	case 1549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4422
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4433
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4444
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4448
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4454
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			funcAliasList := yyDollar[2].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4472
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			funcAliasList := yyDollar[3].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4491
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4499
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4508
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4516
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4528
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4534
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4541
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4547
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1563:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4553
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4563
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4567
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4573
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4590
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4594
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1569:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4603
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4629
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1571:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4655
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4663
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4673
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4674
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4675
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4676
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4681
		{
			yyVAL.ival = 1
		}
	case 1578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4682
		{
			yyVAL.ival = 0
		}
	case 1579:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4692
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4703
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4714
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4718
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4722
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4728
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4729
		{
			yyVAL.with = nil
		}
	case 1586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4734
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4738
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1588:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4746
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4774
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4775
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4776
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1592:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4781
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1593:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4787
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4793
		{
			yyVAL.node = nil
		}
	case 1595:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4800
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1596:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4809
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4817
		{
			yyVAL.node = nil
		}
	case 1598:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4828
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = ast.NewNodeList(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1599:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4836
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists.Append(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4850
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4851
		{
			yyVAL.node = nil
		}
	case 1602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4859
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1603:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4861
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4865
		{
			yyVAL.node = nil
		}
	case 1605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4869
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4877
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4878
		{
			yyVAL.alias = nil
		}
	case 1608:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4883
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4888
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1610:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4892
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4897
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4908
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].alias, nil)
		}
	case 1613:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4912
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[3].list)
		}
	case 1614:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4916
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[4].list)
		}
	case 1615:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4921
		{
			alias := ast.NewAlias(yyDollar[1].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[3].list)
		}
	case 1616:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4926
		{
			yyVAL.list = ast.NewNodeList(nil, nil)
		}
	case 1617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4934
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4938
		{
			yyVAL.alias = nil
		}
	case 1619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4946
		{
			yyVAL.ival = 1
		}
	case 1620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4947
		{
			yyVAL.ival = 0
		}
	case 1621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4951
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1622:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4952
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4956
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4957
		{
			yyVAL.list = nil
		}
	case 1625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4967
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].node.(*ast.RangeVar), nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4970
		{
			yyVAL.into = nil
		}
	case 1627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4981
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1628:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4990
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5000
		{
			yyVAL.ival = 1
		}
	case 1630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5001
		{
			yyVAL.ival = 0
		}
	case 1631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5007
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5011
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5018
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5027
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5028
		{
			yyVAL.list = nil
		}
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5038
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5042
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5054
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5067
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5068
		{
			yyVAL.list = nil
		}
	case 1641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5074
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5078
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5087
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5098
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5103
		{
			yyVAL.node = nil
		}
	case 1646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5108
		{
			yyVAL.str = "BY REF"
		}
	case 1647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5109
		{
			yyVAL.str = "BY VALUE"
		}
	case 1648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5115
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5119
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5123
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1651:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5127
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5135
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5139
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5147
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5152
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1656:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5161
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1657:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:5169
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5180
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5184
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5193
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5198
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5203
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5213
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5217
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5226
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5230
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5234
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5238
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5242
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1670:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:5255
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5279
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5290
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1673:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5291
		{
			yyVAL.node = nil
		}
	case 1674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5296
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1675:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5297
		{
			yyVAL.node = nil
		}
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5301
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5302
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5307
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5313
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5314
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5320
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5324
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5336
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5340
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5347
		{
			yyVAL.bval = false
		}
	case 1686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5348
		{
			yyVAL.bval = true
		}
	case 1687:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5349
		{
			yyVAL.bval = false
		}
	case 1688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5353
		{
			yyVAL.bval = false
		}
	case 1689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5354
		{
			yyVAL.bval = true
		}
	case 1690:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5355
		{
			yyVAL.bval = true
		}
	case 1691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5360
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5361
		{
			yyVAL.list = nil
		}
	case 1693:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5372
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)

			yyVAL.node = ast.NewJsonObjectAgg(constructor, yyDollar[3].node.(*ast.JsonKeyValue), yyDollar[4].bval, yyDollar[5].bval)
		}
	case 1694:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5387
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)
			constructor.AggOrder = yyDollar[4].list
			yyVAL.node = ast.NewJsonArrayAgg(constructor, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].bval)
		}
	case 1695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5400
		{
			var jsonFormat *ast.JsonFormat
			if yyDollar[3].node != nil {
				jsonFormat = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonOutput(yyDollar[2].typnam, ast.NewJsonReturning(jsonFormat, 0, 0))
		}
	case 1696:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5407
		{
			yyVAL.node = nil
		}
	case 1697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5413
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5421
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5432
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5433
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5434
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5435
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5436
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5437
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5438
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5439
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1707:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5444
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5448
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1709:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5452
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1710:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5456
		{
			yyVAL.node = nil
		}
	case 1711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5461
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5462
		{
			yyVAL.node = nil
		}
	case 1713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5467
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5468
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5469
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5470
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1717:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5471
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1718:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5472
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5473
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1720:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5474
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1721:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5475
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1722:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5480
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5481
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1724:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5482
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5483
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1726:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5484
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1727:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5490
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5510
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5520
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1730:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5521
		{
			yyVAL.node = nil
		}
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5526
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1732:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5527
		{
			yyVAL.node = nil
		}
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5533
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5537
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5546
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1736:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5555
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1737:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5569
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1738:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5583
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1739:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5594
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1740:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5603
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5614
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5615
		{
			yyVAL.node = nil
		}
	case 1743:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5631
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5643
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1745:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5647
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5656
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1747:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5662
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1748:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5669
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1749:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5676
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5684
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5693
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5694
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5699
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5703
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5711
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1756:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5723
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5736
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5740
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5751
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1760:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5757
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1761:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5777
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5783
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5784
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1764:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5794
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5806
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1766:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5810
		{
			yyVAL.list = nil
		}
	case 1767:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5825
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5842
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1769:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5846
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1770:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5857
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1771:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:5881
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5917
		{
			yyVAL.ival = 1
		}
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5918
		{
			yyVAL.ival = 0
		}
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5922
		{
			yyVAL.ival = 1
		}
	case 1775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5923
		{
			yyVAL.ival = 0
		}
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5927
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5928
		{
			yyVAL.str = ""
		}
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5929
		{
			yyVAL.str = ""
		}
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5934
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1780:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5937
		{
			yyVAL.node = nil
		}
	case 1781:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5942
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1782:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5945
		{
			yyVAL.node = nil
		}
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5949
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1784:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5950
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5955
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1786:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5963
		{
			yyVAL.list = nil
		}
	case 1787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5970
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5974
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1789:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5978
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1790:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5982
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5986
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5990
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1793:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5994
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1794:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5998
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1795:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6002
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1796:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6006
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1797:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6010
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1798:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6014
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1799:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6018
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1800:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6022
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1801:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6026
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6034
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1803:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6038
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1804:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6045
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6051
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6052
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6053
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6054
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1809:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6055
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1810:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6056
		{
			yyVAL.node = nil
		}
	case 1811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6061
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1812:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6065
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6071
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6075
		{
			yyVAL.str = "true"
		}
	case 1815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6076
		{
			yyVAL.str = "false"
		}
	case 1816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6077
		{
			yyVAL.str = "on"
		}
	case 1817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6078
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6082
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1819:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6083
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1820:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6085
		{
			f := ast.NewFloat(yyDollar[2].str)
			doNegateFloat(f)
			yyVAL.node = f
		}
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6090
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6094
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6095
		{
			yyVAL.node = nil
		}
	case 1824:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6099
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1825:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6100
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6101
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1827:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6102
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1828:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6103
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6104
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6105
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6106
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6110
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6111
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6112
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6116
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6117
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6118
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6119
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6120
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6125
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1841:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6130
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6137
		{
			yyVAL.bval = true
		}
	case 1843:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6138
		{
			yyVAL.bval = false
		}
	case 1844:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6142
		{
			yyVAL.ival = 1
		}
	case 1845:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6143
		{
			yyVAL.ival = 0
		}
	case 1848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6159
		{
			yyVAL.node = nil
		}
	case 1849:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6161
		{
			yyVAL.node = nil
		}
	case 1850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6169
		{
			yyVAL.ival = 1
		}
	case 1851:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6170
		{
			yyVAL.ival = 0
		}
	case 1852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6174
		{
			yyVAL.ival = 1
		}
	case 1853:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6175
		{
			yyVAL.ival = 0
		}
	case 1854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6179
		{
			yyVAL.ival = 1
		}
	case 1855:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6180
		{
			yyVAL.ival = 0
		}
	case 1856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6184
		{
			yyVAL.ival = 1
		}
	case 1857:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6185
		{
			yyVAL.ival = 0
		}
	case 1858:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6194
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1859:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6200
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1860:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6206
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1861:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6212
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1862:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6218
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1863:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6226
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1864:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6227
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1865:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6231
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1866:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6232
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1867:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6236
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1868:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6237
		{
			yyVAL.node = nil
		}
	case 1869:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6242
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6257
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1871:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6266
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1872:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6273
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1873:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6280
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1874:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6293
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1875:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6306
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1876:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6315
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1877:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6330
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1878:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6340
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1879:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6348
		{
			yyVAL.onconflict = nil
		}
	case 1880:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6359
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1881:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6368
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1882:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6375
		{
			yyVAL.node = nil
		}
	case 1883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6386
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1884:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6390
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6397
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1886:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6401
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1887:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6408
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1888:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6413
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1889:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6418
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1890:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6426
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1891:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6437
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1892:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6451
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1893:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6452
		{
			yyVAL.list = nil
		}
	case 1894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6456
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6457
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1896:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6458
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1897:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6462
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1898:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6463
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1899:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6464
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1900:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6469
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1901:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6473
		{
			yyVAL.list = nil
		}
	case 1902:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6494
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1903:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:6510
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1904:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:6527
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1905:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:6543
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1906:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6560
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1907:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:6577
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6595
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6596
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1910:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6597
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1911:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6598
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1912:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6599
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1913:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6600
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6601
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1915:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6602
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6606
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1917:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6607
		{
			yyVAL.list = nil
		}
	case 1918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6612
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1919:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6617
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6624
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6625
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6626
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1923:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6631
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1924:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6638
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1925:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6642
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1926:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6646
		{
			yyVAL.ival = 0
		}
	case 1927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6652
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6653
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6654
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6655
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6656
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6657
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6658
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6659
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6660
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6661
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1937:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6666
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1938:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6667
		{
			yyVAL.str = "default"
		}
	case 1939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6671
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1940:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6672
		{
			yyVAL.str = ""
		}
	case 1941:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6676
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1942:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6677
		{
			yyVAL.str = "default"
		}
	case 1943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6681
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1944:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6682
		{
			yyVAL.str = ""
		}
	case 1945:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6687
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1946:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6688
		{
			yyVAL.list = nil
		}
	case 1947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6693
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1948:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6699
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6706
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6707
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1951:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6712
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 1952:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6718
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 1953:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6729
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 1954:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6758
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 1955:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6767
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 1956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6777
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 1957:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6786
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 1958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6793
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1959:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6797
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1960:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6805
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1961:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6806
		{
			yyVAL.list = nil
		}
	case 1962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6811
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1963:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6815
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1964:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6823
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6829
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6834
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1967:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6839
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			colDef.Constraints = yyDollar[6].list
			yyVAL.node = colDef
		}
	case 1968:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6851
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1969:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6856
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1970:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6863
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6868
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6869
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1973:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6871
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 1974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6884
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1975:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6889
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1976:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6894
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 1977:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6899
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 1978:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6907
		{
			yyVAL.bval = true
		}
	case 1979:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6908
		{
			yyVAL.bval = false
		}
	case 1980:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6909
		{
			yyVAL.bval = true
		}
	case 1981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6913
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 1982:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6914
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 1983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6919
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1984:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6921
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6926
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1986:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6930
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1987:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6934
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 1988:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6944
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 1989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6950
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1990:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6951
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1991:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6956
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 1992:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6960
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 1993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6964
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 1994:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6968
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 1995:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6972
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 1996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6976
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 1997:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6980
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 1998:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6984
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 1999:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6988
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 2000:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6992
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 2001:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6996
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 2002:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7000
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 2003:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7004
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 2004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7008
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 2005:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7012
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 2006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7016
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 2007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7022
		{
		}
	case 2008:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7023
		{
		}
	case 2009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7027
		{
		}
	case 2010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7028
		{
		}
	case 2011:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7029
		{
		}
	case 2012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7034
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 2013:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7041
		{
			yyVAL.bval = false
		}
	case 2014:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7045
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2015:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7046
		{
			yyVAL.list = nil
		}
	case 2016:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7051
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 2017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7055
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 2018:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7059
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 2019:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7068
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 2020:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7074
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 2021:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7080
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 2022:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7086
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 2023:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7103
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 2024:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7110
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 2025:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7120
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 2026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7125
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2027:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7130
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 2028:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7138
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2029:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7149
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 2030:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7160
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2031:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7170
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 2032:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7181
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 2033:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7202
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 2034:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7216
		{
			yyVAL.bval = true
		}
	case 2035:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7217
		{
			yyVAL.bval = false
		}
	case 2036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7223
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2037:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7229
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2038:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7237
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 2039:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7242
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 2040:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7250
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2041:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7254
		{
			yyVAL.list = nil
		}
	case 2042:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7261
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 2043:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7265
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 2044:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7269
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2045:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7273
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7280
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7290
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2048:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7300
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 2049:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7307
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2050:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7314
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2051:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7329
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 2052:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7342
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 2053:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7349
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7356
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7363
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2056:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7370
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2057:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7377
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2058:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7386
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2059:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7387
		{
			yyVAL.list = nil
		}
	case 2060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7391
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 2061:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7392
		{
			yyVAL.partspec = nil
		}
	case 2062:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7397
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 2063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7405
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2064:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7410
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2065:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7418
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2066:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7425
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2067:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7432
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 2068:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7441
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2069:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7442
		{
			yyVAL.str = ""
		}
	case 2070:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7446
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 2071:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7447
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 2072:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7448
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 2073:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7449
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 2074:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7453
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2075:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7454
		{
			yyVAL.str = ""
		}
	case 2076:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7458
		{
			yyVAL.str = yyDollar[4].str
		}
	case 2077:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7459
		{
			yyVAL.str = ""
		}
	case 2078:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7463
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2079:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:7476
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 2080:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:7491
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 2081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7507
		{
			yyVAL.bval = true
		}
	case 2082:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7508
		{
			yyVAL.bval = false
		}
	case 2083:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7512
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2084:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7513
		{
			yyVAL.str = "btree"
		}
	case 2085:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7517
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2086:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7518
		{
			yyVAL.list = nil
		}
	case 2087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7523
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2088:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7528
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2089:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7536
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2090:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7537
		{
			yyVAL.list = nil
		}
	case 2091:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7549
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2092:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7555
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2093:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7562
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2094:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7568
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2095:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7575
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2096:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7584
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 2097:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7590
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2098:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7597
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 2099:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7603
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2100:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7610
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 2101:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7616
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2102:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7623
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2103:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7629
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7636
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2105:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7645
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2106:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7655
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2107:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7662
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2108:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7670
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2109:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7677
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2110:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7685
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 2111:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:7692
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 2112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7703
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7708
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7716
		{
			yyVAL.bval = true
		}
	case 2115:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7717
		{
			yyVAL.bval = false
		}
	case 2116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7722
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].rolespec)
		}
	case 2117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7727
		{
			yyDollar[1].list.Append(yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 2118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7735
		{
			roleSpec := yyDollar[1].rolespec

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 2119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7766
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.rolespec = roleSpec
		}
	case 2120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7789
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 2121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7796
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 2122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7803
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 2123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7814
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2124:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7821
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7828
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2126:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7835
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7842
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 2128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7847
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 2129:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7852
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 2130:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7857
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 2131:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7862
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 2132:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7867
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2133:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7874
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 2134:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7879
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 2135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7886
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2136:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7891
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2137:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7896
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2138:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7901
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2139:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7906
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7916
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 2141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7921
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2142:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7928
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2143:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7935
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7943
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2145:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7954
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 2146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7964
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 2147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7969
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 2148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7974
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7985
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 2150:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7990
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7998
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8006
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 2153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8011
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 2154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8016
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 2155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8021
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 2156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8026
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 2157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8031
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 2158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8036
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 2159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8041
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 2160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8046
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 2161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8051
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 2162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8056
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 2163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8061
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 2164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8066
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 2165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8071
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 2166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8076
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 2167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8081
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 2168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8086
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 2169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8091
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 2170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8096
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 2171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8101
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 2172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8107
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 2173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8112
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].rolespec
			yyVAL.node = cmd
		}
	case 2174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8119
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 2175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8124
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 2176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8129
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 2177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8134
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 2178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8139
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 2179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8144
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 2180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8149
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 2181:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8154
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 2182:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8159
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 2183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8163
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 2184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8171
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8179
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8186
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8197
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8206
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8207
		{
			yyVAL.node = nil
		}
	case 2190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8211
		{
		}
	case 2191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8212
		{
		}
	case 2192:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8223
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2193:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8236
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2194:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8249
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2195:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8262
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2196:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8275
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2197:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8290
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8305
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2199:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8318
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2200:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8331
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2201:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8344
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2202:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8357
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2203:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8370
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8386
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8392
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 2206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8398
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8407
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 2208:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8411
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 2209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8414
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8418
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8420
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 2212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8424
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 2213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8428
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 2214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8435
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 2215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8439
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 2216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8445
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8446
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8450
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 2219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8459
		{
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[2].stmt, nil)
		}
	case 2220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8463
		{
			options := ast.NewNodeList(ast.NewDefElem("analyze", nil))
			if yyDollar[3].ival != 0 {
				options.Append(ast.NewDefElem("verbose", nil))
			}
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[4].stmt, options)
		}
	case 2221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8471
		{
			options := ast.NewNodeList(ast.NewDefElem("verbose", nil))
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[3].stmt, options)
		}
	case 2222:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8476
		{
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[5].stmt, yyDollar[3].list)
		}
	case 2223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8483
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8487
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8495
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 2226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8501
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8502
		{
			yyVAL.str = "analyze"
		}
	case 2228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8503
		{
			yyVAL.str = "format"
		}
	case 2229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8507
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8508
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2231:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8509
		{
			yyVAL.node = nil
		}
	case 2232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8513
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8514
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8515
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8516
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8517
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8518
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8519
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2239:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8528
		{
			var optionsList *ast.NodeList
			if yyDollar[2].ival != 0 || yyDollar[3].ival != 0 || yyDollar[4].ival != 0 || yyDollar[5].ival != 0 {
				optionsList = ast.NewNodeList()
				if yyDollar[2].ival != 0 {
					optionsList.Append(ast.NewDefElem("full", ast.NewBoolean(true)))
				}
				if yyDollar[3].ival != 0 {
					optionsList.Append(ast.NewDefElem("freeze", ast.NewBoolean(true)))
				}
				if yyDollar[4].ival != 0 {
					optionsList.Append(ast.NewDefElem("verbose", ast.NewBoolean(true)))
				}
				if yyDollar[5].ival != 0 {
					optionsList.Append(ast.NewDefElem("analyze", ast.NewBoolean(true)))
				}
			}

			yyVAL.stmt = ast.NewVacuumStmt(optionsList, yyDollar[6].list)
		}
	case 2240:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8549
		{
			yyVAL.stmt = ast.NewVacuumStmt(yyDollar[3].list, yyDollar[5].list)
		}
	case 2241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8556
		{
			var optionsList *ast.NodeList
			if yyDollar[2].ival != 0 {
				optionsList = ast.NewNodeList(ast.NewDefElem("verbose", ast.NewBoolean(true)))
			}

			yyVAL.stmt = ast.NewAnalyzeStmt(optionsList, yyDollar[3].list)
		}
	case 2242:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8565
		{
			yyVAL.stmt = ast.NewAnalyzeStmt(yyDollar[3].list, yyDollar[5].list)
		}
	case 2243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8571
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2244:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8572
		{
			yyVAL.list = nil
		}
	case 2245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8577
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].vacrel)
		}
	case 2246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8581
		{
			yyDollar[1].list.Append(yyDollar[3].vacrel)
			yyVAL.list = yyDollar[1].list
		}
	case 2247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8589
		{
			yyVAL.vacrel = ast.NewVacuumRelation(yyDollar[1].rangevar, yyDollar[2].list)
		}
	case 2248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8595
		{
			yyVAL.str = "analyze"
		}
	case 2249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8596
		{
			yyVAL.str = "analyse"
		}
	case 2250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8605
		{
			yyVAL.stmt = ast.NewVariableShowStmt(yyDollar[2].str)
		}
	case 2251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8609
		{
			yyVAL.stmt = ast.NewVariableShowStmt("timezone")
		}
	case 2252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8613
		{
			yyVAL.stmt = ast.NewVariableShowStmt("transaction_isolation")
		}
	case 2253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8617
		{
			yyVAL.stmt = ast.NewVariableShowStmt("session_authorization")
		}
	case 2254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8621
		{
			yyVAL.stmt = ast.NewVariableShowStmt("all")
		}
	case 2255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8632
		{
			yyVAL.stmt = ast.NewAlterSystemStmt(yyDollar[4].vsetstmt)
		}
	case 2256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8636
		{
			yyVAL.stmt = ast.NewAlterSystemStmt(yyDollar[4].vsetstmt)
		}
	case 2257:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8647
		{
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[5].rangevar, yyDollar[6].str, yyDollar[3].list)
		}
	case 2258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8651
		{
			yyVAL.stmt = ast.NewClusterStmt(nil, "", yyDollar[3].list)
		}
	case 2259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8655
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[3].rangevar, yyDollar[4].str, params)
		}
	case 2260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8664
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(nil, "", params)
		}
	case 2261:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8673
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[5].rangevar, yyDollar[3].str, params)
		}
	case 2262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8684
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8685
		{
			yyVAL.str = ""
		}
	case 2264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8694
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.ReindexObjectType(yyDollar[3].ival), yyDollar[5].rangevar, "", params)
		}
	case 2265:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8707
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.REINDEX_OBJECT_SCHEMA, nil, yyDollar[5].str, params)
		}
	case 2266:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8720
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.ReindexObjectType(yyDollar[3].ival), nil, yyDollar[5].str, params)
		}
	case 2267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8735
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_INDEX)
		}
	case 2268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8736
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_TABLE)
		}
	case 2269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8740
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_SYSTEM)
		}
	case 2270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8741
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_DATABASE)
		}
	case 2271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8745
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8746
		{
			yyVAL.list = nil
		}
	case 2273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8755
		{
			yyVAL.stmt = ast.NewCheckPointStmt()
		}
	case 2274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8766
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_ALL)
		}
	case 2275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8770
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_TEMP)
		}
	case 2276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8774
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_TEMP)
		}
	case 2277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8778
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_PLANS)
		}
	case 2278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8782
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_SEQUENCES)
		}
	case 2279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8789
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 2280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8790
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 2281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8791
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 2282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8792
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 2283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8793
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 2284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8794
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 2285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8795
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 2286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8796
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 2287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8797
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 2288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8798
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 2289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8799
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 2290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8800
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 2291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8801
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 2292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8814
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8815
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8820
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8824
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8832
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode: ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:  yyDollar[1].list,
				Objargs:  yyDollar[2].list,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8844
		{
			yylex.Error("Use NONE to denote the missing argument of a unary operator.")
			return 1
		}
	case 2298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8849
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, yyDollar[4].typnam)
		}
	case 2299:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8851
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[4].typnam)
		}
	case 2300:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8853
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, nil)
		}
	case 2301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8857
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8870
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 2303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8872
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 2304:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8876
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2305:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8887
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2306:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8898
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2307:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8909
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2308:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8920
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2309:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8931
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2310:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8943
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2311:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8954
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2312:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8965
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2313:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8976
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2314:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8987
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2315:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9004
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2316:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9021
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2317:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9033
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2318:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9045
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2319:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9056
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2320:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9067
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2321:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9078
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2322:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9089
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2323:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9100
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2324:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9111
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2325:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9122
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2326:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9133
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2327:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9144
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2328:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9155
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2329:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9166
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2330:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9177
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2331:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9188
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2332:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9199
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2333:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9210
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2334:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9221
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2335:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9232
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2336:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9243
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2337:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9256
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2338:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9269
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2339:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9282
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2340:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9295
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2341:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9308
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2342:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9321
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2343:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9333
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2344:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9345
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2345:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9358
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2346:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9371
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2347:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9383
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2348:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9395
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2349:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9406
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2350:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9417
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2351:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9428
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2352:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9439
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2353:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9450
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2354:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9461
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2355:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9472
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2356:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9483
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2357:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9494
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2358:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9505
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9531
		{
			yyVAL.ival = 0
		}
	case 2360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9533
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 2361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9547
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 2362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9548
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 2363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9549
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 2364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9550
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 2365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9551
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 2366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9552
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 2367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9556
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9561
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9566
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9574
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9578
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2372:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9582
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 2373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9586
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 2374:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9600
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 2375:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:9614
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 2376:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9630
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2377:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9645
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9660
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9661
		{
			yyVAL.list = nil
		}
	case 2380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9666
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9670
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9678
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9682
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9687
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9695
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9704
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9713
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9722
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9731
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9742
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9743
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9744
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9745
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9746
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9750
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9754
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2397:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9756
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				// TODO: Add %TYPE indicator
			}
		}
	case 2398:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9766
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				Setof: true,
			}
		}
	case 2399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9778
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9779
		{
			yyVAL.list = nil
		}
	case 2401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9784
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9790
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9798
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9802
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9806
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9810
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9814
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9821
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9827
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9837
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2411:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9843
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9851
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9855
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9867
		{
			yyVAL.node = nil
		}
	case 2415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9874
		{
			yyVAL.stmt = &ast.ReturnStmt{
				ReturnVal: yyDollar[2].node,
			}
		}
	case 2416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9883
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9893
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9899
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9900
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9905
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9909
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2422:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:9925
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2423:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:9957
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9988
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9989
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9990
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9995
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9997
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10037
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10044
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10051
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10058
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10065
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10074
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10075
		{
			yyVAL.list = nil
		}
	case 2436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10079
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10084
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10092
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10103
		{
			yyVAL.bval = true
		}
	case 2440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10104
		{
			yyVAL.bval = false
		}
	case 2441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10108
		{
			yyVAL.bval = true
		}
	case 2442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10109
		{
			yyVAL.bval = false
		}
	case 2443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10113
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10118
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10122
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10134
		{
			yyVAL.bval = true
		}
	case 2449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10135
		{
			yyVAL.bval = false
		}
	case 2450:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10139
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10140
		{
			yyVAL.node = nil
		}
	case 2454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10149
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10154
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10158
		{
			yyVAL.list = nil
		}
	case 2457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10163
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10166
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10167
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10168
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10172
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10173
		{
			yyVAL.rangevar = nil
		}
	case 2463:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10186
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2464:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10202
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2465:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:10218
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2466:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:10234
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10251
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10252
		{
			yyVAL.list = nil
		}
	case 2469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10256
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10257
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10258
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2472:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10259
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2473:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10270
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = yyDollar[5].rolespec
			n.SchemaElts = yyDollar[6].list
			yyVAL.stmt = n
		}
	case 2474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10277
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = nil
			n.SchemaElts = yyDollar[4].list
			yyVAL.stmt = n
		}
	case 2475:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10284
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = yyDollar[8].rolespec
			n.SchemaElts = yyDollar[9].list
			yyVAL.stmt = n
		}
	case 2476:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10291
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = nil
			n.SchemaElts = yyDollar[7].list
			yyVAL.stmt = n
		}
	case 2477:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10307
		{
			n := ast.NewCreateDomainStmt(yyDollar[3].list, yyDollar[5].typnam)
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			n.Constraints = constraints
			n.CollClause = collClause
			yyVAL.stmt = n
		}
	case 2478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10325
		{
			n := ast.NewAlterDomainStmt('T', yyDollar[3].list)
			n.Def = yyDollar[4].node
			yyVAL.stmt = n
		}
	case 2479:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10331
		{
			n := ast.NewAlterDomainStmt('N', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2480:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10336
		{
			n := ast.NewAlterDomainStmt('O', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2481:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10341
		{
			n := ast.NewAlterDomainStmt('C', yyDollar[3].list)
			n.Def = yyDollar[5].node
			yyVAL.stmt = n
		}
	case 2482:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10347
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[6].str
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			yyVAL.stmt = n
		}
	case 2483:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10355
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[8].str
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			yyVAL.stmt = n
		}
	case 2484:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10363
		{
			n := ast.NewAlterDomainStmt('V', yyDollar[3].list)
			n.Name = yyDollar[6].str
			yyVAL.stmt = n
		}
	case 2485:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10378
		{
			// Extract actual arguments from aggr_args which returns [args, position_indicator]
			var args *ast.NodeList
			if yyDollar[5].list != nil && yyDollar[5].list.Len() > 0 {
				// First element contains the actual arguments (or nil for *)
				if firstElem, ok := yyDollar[5].list.Items[0].(*ast.NodeList); ok {
					args = firstElem
				} else if yyDollar[5].list.Items[0] == nil {
					// Special case for COUNT(*) - create a list with a single nil element
					args = ast.NewNodeList(nil)
				}
			}
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, false, yyDollar[4].list, args, yyDollar[6].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2486:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10394
		{
			// old-style (pre-8.2) syntax for CREATE AGGREGATE
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, true, yyDollar[4].list, nil, yyDollar[5].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10400
		{
			n := ast.NewDefineStmt(ast.OBJECT_OPERATOR, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2488:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10405
		{
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10410
		{
			// Shell type (identified by lack of definition)
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, nil, false, false)
			yyVAL.stmt = n
		}
	case 2490:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10416
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSPARSER, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2491:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10421
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSDICTIONARY, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2492:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10426
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSTEMPLATE, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2493:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10431
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSCONFIGURATION, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10436
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2495:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10441
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, yyDollar[7].list, true, false)
			yyVAL.stmt = n
		}
	case 2496:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10446
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, ast.NewNodeList(yyDollar[5].list), false, false)
			yyVAL.stmt = n
		}
	case 2497:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10451
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, ast.NewNodeList(yyDollar[8].list), true, false)
			yyVAL.stmt = n
		}
	case 2498:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10456
		{
			typevar, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(fmt.Sprintf("invalid type name: %v", err))
				return 1
			}

			n := ast.NewCompositeTypeStmt(typevar, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2499:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10467
		{
			n := ast.NewCreateEnumStmt(yyDollar[3].list, yyDollar[7].list)
			yyVAL.stmt = n
		}
	case 2500:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10472
		{
			n := ast.NewCreateRangeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2501:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10486
		{
			n := ast.NewCreateSeqStmt(yyDollar[4].rangevar, yyDollar[5].list, 0, false, false)
			yyVAL.stmt = n
		}
	case 2502:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10491
		{
			n := ast.NewCreateSeqStmt(yyDollar[7].rangevar, yyDollar[8].list, 0, false, true)
			yyVAL.stmt = n
		}
	case 2503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10498
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10499
		{
			yyVAL.list = nil
		}
	case 2505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10502
		{
		}
	case 2506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10503
		{
		}
	case 2507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10514
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[3].rangevar, yyDollar[4].list, false, false)
		}
	case 2508:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10518
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[5].rangevar, yyDollar[6].list, false, true)
		}
	case 2509:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10531
		{
			n := ast.NewCreateExtensionStmt(yyDollar[3].str, false, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2510:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10536
		{
			n := ast.NewCreateExtensionStmt(yyDollar[6].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10544
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10553
		{
			yyVAL.list = nil
		}
	case 2513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10560
		{
			yyVAL.defelt = ast.NewDefElem("schema", ast.NewString(yyDollar[2].str))
		}
	case 2514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10564
		{
			yyVAL.defelt = ast.NewDefElem("version", ast.NewString(yyDollar[2].str))
		}
	case 2515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10568
		{
			yylex.Error("CREATE EXTENSION ... FROM is no longer supported")
			return 1
		}
	case 2516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10573
		{
			yyVAL.defelt = ast.NewDefElem("cascade", ast.NewBoolean(true))
		}
	case 2517:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10586
		{
			n := ast.NewAlterExtensionStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10594
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10603
		{
			yyVAL.list = nil
		}
	case 2520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10610
		{
			yyVAL.defelt = ast.NewDefElem("to", ast.NewString(yyDollar[2].str))
		}
	case 2521:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10623
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), ast.NewString(yyDollar[6].str))
		}
	case 2522:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10627
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), yyDollar[6].list)
		}
	case 2523:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10631
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_AGGREGATE), yyDollar[6].objwithargs)
		}
	case 2524:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10635
		{
			// CAST takes two TypeNames as a NodeList
			list := ast.NewNodeList(yyDollar[7].typnam)
			list.Append(yyDollar[9].typnam)
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_CAST), list)
		}
	case 2525:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10642
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_DOMAIN), yyDollar[6].typnam)
		}
	case 2526:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10646
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_FUNCTION), yyDollar[6].objwithargs)
		}
	case 2527:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10650
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPERATOR), yyDollar[6].objwithargs)
		}
	case 2528:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10654
		{
			// OPERATOR CLASS takes method name + class name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then class name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPCLASS), list)
		}
	case 2529:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10663
		{
			// OPERATOR FAMILY takes method name + family name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then family name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPFAMILY), list)
		}
	case 2530:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10672
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_PROCEDURE), yyDollar[6].objwithargs)
		}
	case 2531:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10676
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_ROUTINE), yyDollar[6].objwithargs)
		}
	case 2532:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10680
		{
			list := ast.NewNodeList(yyDollar[7].typnam, ast.NewString(yyDollar[9].str))
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TRANSFORM), list)
		}
	case 2533:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10685
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TYPE), yyDollar[6].typnam)
		}
	case 2534:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10697
		{
			yyVAL.stmt = ast.NewCreateFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2535:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10703
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2536:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10707
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, nil)
		}
	case 2537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10713
		{
			yyVAL.defelt = ast.NewDefElem("handler", yyDollar[2].list)
		}
	case 2538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10714
		{
			yyVAL.defelt = ast.NewDefElem("handler", nil)
		}
	case 2539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10715
		{
			yyVAL.defelt = ast.NewDefElem("validator", yyDollar[2].list)
		}
	case 2540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10716
		{
			yyVAL.defelt = ast.NewDefElem("validator", nil)
		}
	case 2541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10720
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10721
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10725
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10726
		{
			yyVAL.list = nil
		}
	case 2545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10730
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10731
		{
			result := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				result.Append(item)
			}
			yyVAL.list = result
		}
	case 2547:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10748
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].str, yyDollar[9].str, yyDollar[10].list, false)
		}
	case 2548:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:10753
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[6].str, yyDollar[7].str, yyDollar[8].str, yyDollar[12].str, yyDollar[13].list, true)
		}
	case 2549:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10759
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].list, true)
		}
	case 2550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10763
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, nil, true)
		}
	case 2551:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10767
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, "", yyDollar[4].list, false)
		}
	case 2552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10773
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10774
		{
			yyVAL.str = ""
		}
	case 2554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10778
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10779
		{
			yyVAL.str = ""
		}
	case 2556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10783
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10784
		{
			yyVAL.str = ""
		}
	case 2558:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10797
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[6].list, yyDollar[8].list, yyDollar[10].str, yyDollar[11].list, nil, false)
		}
	case 2559:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:10803
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[9].list, yyDollar[11].list, yyDollar[13].str, yyDollar[14].list, nil, true)
		}
	case 2560:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:10809
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[8].list, ast.NewNodeList(yyDollar[7].rangevar), yyDollar[11].str, yyDollar[12].list, yyDollar[9].partboundspec, false)
		}
	case 2561:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:10815
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[11].list, ast.NewNodeList(yyDollar[10].rangevar), yyDollar[14].str, yyDollar[15].list, yyDollar[12].partboundspec, true)
		}
	case 2562:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10827
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list, false)
		}
	case 2563:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10831
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[8].rolespec, yyDollar[10].str, yyDollar[11].list, true)
		}
	case 2564:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10837
		{
			yyVAL.stmt = ast.NewAlterUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list)
		}
	case 2565:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10843
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, false)
		}
	case 2566:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10847
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[7].rolespec, yyDollar[9].str, true)
		}
	case 2567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10853
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10854
		{
			yyVAL.rolespec = ast.NewRoleSpec(ast.ROLESPEC_CURRENT_USER, "")
		}
	case 2569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10859
		{
			// For aggregates like COUNT(*)
			// Return a list with [nil, -1] matching PostgreSQL's list_make2(NIL, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(nil, ast.NewInteger(-1))
		}
	case 2570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10865
		{
			// Regular aggregate arguments
			// Return a list with [args, -1] matching PostgreSQL's list_make2($2, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(yyDollar[2].list, ast.NewInteger(-1))
		}
	case 2571:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10871
		{
			// Ordered-set aggregate without direct arguments
			// Return a list with [args, 0] matching PostgreSQL's list_make2($4, makeInteger(0))
			yyVAL.list = ast.NewNodeList(yyDollar[4].list, ast.NewInteger(0))
		}
	case 2572:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10877
		{
			// Hypothetical-set aggregate
			// This is the only case requiring consistency checking in PostgreSQL
			result, err := makeOrderedSetArgs(yyDollar[2].list, yyDollar[5].list)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.list = result
		}
	case 2573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10891
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10895
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10903
		{
			yyVAL.node = yyDollar[1].funparam
		}
	case 2576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10910
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10917
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10921
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10929
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2580:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10936
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			n.NewValIsAfter = true
			yyVAL.stmt = n
		}
	case 2581:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10944
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = false
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2582:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10953
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = true
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2583:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10962
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.OldVal = yyDollar[6].str
			n.NewVal = yyDollar[8].str
			n.SkipIfNewValExists = false
			yyVAL.stmt = n
		}
	case 2584:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10970
		{
			// Following PostgreSQL's approach - DROP VALUE is parsed but not implemented
			// PostgreSQL throws an error saying "dropping an enum value is not implemented"
			yylex.Error("dropping an enum value is not implemented")
			return 1
		}
	case 2585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10986
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10988
		{
			yyVAL.list = nil
		}
	case 2587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10993
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10995
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11000
		{
			if constraint, ok := yyDollar[3].node.(*ast.Constraint); ok {
				constraint.Conname = yyDollar[2].str
				yyVAL.node = constraint
			} else {
				yyVAL.node = yyDollar[3].node
			}
		}
	case 2590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11009
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2591:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11014
		{
			n := ast.NewConstraint(ast.CONSTR_CHECK)
			n.RawExpr = yyDollar[3].node
			n.CookedExpr = "" // Empty string, not nil
			// Process constraint attributes from $5
			processConstraintAttributeSpec(yyDollar[5].ival, n)
			// PostgreSQL: n->initially_valid = !n->skip_validation
			n.InitiallyValid = !n.SkipValidation
			yyVAL.node = n
		}
	case 2592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11025
		{
			n := ast.NewConstraint(ast.CONSTR_NOTNULL)
			// In PostgreSQL, domain NOT NULL constraints have keys = list_make1(makeString("value"))
			n.Keys = ast.NewNodeList(ast.NewString("value"))
			// Process constraint attributes from $3
			processConstraintAttributeSpec(yyDollar[3].ival, n)
			// PostgreSQL sets initially_valid = true for NOT NULL (no NOT VALID support yet)
			n.InitiallyValid = true
			yyVAL.node = n
		}
	case 2593:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11045
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[7].stmt, yyDollar[5].into, ast.OBJECT_MATVIEW, false, false)
			/* cram additional flags into the IntoClause */
			yyDollar[5].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[5].into.SkipData = !yyDollar[8].bval
			yyVAL.stmt = ctas
		}
	case 2594:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11053
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[10].stmt, yyDollar[8].into, ast.OBJECT_MATVIEW, false, true)
			/* cram additional flags into the IntoClause */
			yyDollar[8].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[8].into.SkipData = !yyDollar[11].bval
			yyVAL.stmt = ctas
		}
	case 2595:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11064
		{
			n := ast.NewRefreshMatViewStmt(yyDollar[4].bval, !yyDollar[6].bval, yyDollar[5].rangevar)
			yyVAL.stmt = n
		}
	case 2596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11070
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 2597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11071
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 2598:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11076
		{
			yyVAL.into = &ast.IntoClause{
				Rel:            yyDollar[1].rangevar,
				ColNames:       yyDollar[2].list,
				AccessMethod:   yyDollar[3].str,
				Options:        yyDollar[4].list,
				TableSpaceName: yyDollar[5].str,
			}
		}
	case 2599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11088
		{
			yyVAL.bval = true
		}
	case 2600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11089
		{
			yyVAL.bval = false
		}
	case 2601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11090
		{
			yyVAL.bval = true
		}
	case 2602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11095
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].stmt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2603:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11104
		{
			yyVAL.list = nil
		}
	case 2608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11115
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11117
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11121
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11126
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11131
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11136
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11144
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11149
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11154
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11158
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11169
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11177
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11181
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11185
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11189
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11196
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11200
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11207
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11213
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11220
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11221
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11225
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11226
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11227
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11228
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11229
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11230
		{
			yyVAL.node = ast.NewString("true")
		}
	case 2635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11231
		{
			yyVAL.node = ast.NewString("false")
		}
	case 2636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11232
		{
			yyVAL.node = ast.NewString("on")
		}
	case 2637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11233
		{
			yyVAL.node = ast.NewString("off")
		}
	case 2638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11237
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11238
		{
			yyVAL.str = "default"
		}
	case 2640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11239
		{
			yyVAL.str = ""
		}
	case 2641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11243
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11244
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11248
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11249
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11250
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11251
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11255
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11256
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11261
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11267
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11272
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11280
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11284
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11288
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11292
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11296
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11302
		{
			yyVAL.str = "read uncommitted"
		}
	case 2658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11303
		{
			yyVAL.str = "read committed"
		}
	case 2659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11304
		{
			yyVAL.str = "repeatable read"
		}
	case 2660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11305
		{
			yyVAL.str = "serializable"
		}
	case 2661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11309
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2662:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11310
		{
			yyVAL.list = nil
		}
	case 2663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11314
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11315
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11316
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11319
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11320
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11321
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11325
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11326
		{
			yyVAL.list = nil
		}
	case 2671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11330
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2672:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11331
		{
			yyVAL.node = nil
		}
	case 2673:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11335
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11340
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11345
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11353
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11357
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11363
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11369
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11375
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11376
		{
			yyVAL.str = ""
		}
	case 2682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11380
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11381
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11382
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11383
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11387
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11392
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11397
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11404
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11405
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2691:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11416
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[9].list, nil)
		}
	case 2692:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11420
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[11].list, yyDollar[8].list)
		}
	case 2693:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11426
		{
			yyVAL.stmt = ast.NewAlterEventTrigStmt(yyDollar[4].str, ast.TriggerFires(yyDollar[5].ival))
		}
	case 2694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11432
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_ORIGIN)
		}
	case 2695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11433
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_REPLICA)
		}
	case 2696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11434
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ALWAYS)
		}
	case 2697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11435
		{
			yyVAL.ival = int(ast.TRIGGER_DISABLED)
		}
	case 2698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11440
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11445
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2700:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11453
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[4].list)
		}
	case 2701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11460
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(ast.NewString(yyDollar[1].str))
		}
	case 2702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11465
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2703:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11479
		{
			yyVAL.stmt = ast.NewCreateTableSpaceStmt(yyDollar[3].str, yyDollar[4].rolespec, yyDollar[6].str, yyDollar[7].list)
		}
	case 2704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11485
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 2705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11486
		{
			yyVAL.rolespec = nil
		}
	case 2706:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11491
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, false)
		}
	case 2707:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11495
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, true)
		}
	case 2708:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11510
		{
			yyVAL.stmt = ast.NewCreatePolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].bval, yyDollar[7].str, yyDollar[8].list, yyDollar[9].node, yyDollar[10].node)
		}
	case 2709:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11518
		{
			yyVAL.stmt = ast.NewAlterPolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].list, yyDollar[7].node, yyDollar[8].node)
		}
	case 2710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11525
		{
			// Check for "permissive" or "restrictive" (case-insensitive)
			if strings.EqualFold(yyDollar[2].str, "permissive") {
				yyVAL.bval = true
			} else if strings.EqualFold(yyDollar[2].str, "restrictive") {
				yyVAL.bval = false
			} else {
				// Parser will error on invalid value
				yylex.Error("unrecognized row security option")
				return 1
			}
		}
	case 2711:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11537
		{
			yyVAL.bval = true
		}
	case 2712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11541
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2713:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11542
		{
			yyVAL.str = "all"
		}
	case 2714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11546
		{
			yyVAL.str = "all"
		}
	case 2715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11547
		{
			yyVAL.str = "select"
		}
	case 2716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11548
		{
			yyVAL.str = "insert"
		}
	case 2717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11549
		{
			yyVAL.str = "update"
		}
	case 2718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11550
		{
			yyVAL.str = "delete"
		}
	case 2719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11554
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11555
		{
			// Default to PUBLIC when no TO clause is specified
			publicRole := ast.NewRoleSpec(ast.ROLESPEC_PUBLIC, "")
			yyVAL.list = ast.NewNodeList(publicRole)
		}
	case 2721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11563
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2722:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11564
		{
			yyVAL.list = nil
		}
	case 2723:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11568
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2724:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11569
		{
			yyVAL.node = nil
		}
	case 2725:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11573
		{
			yyVAL.node = yyDollar[4].node
		}
	case 2726:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11574
		{
			yyVAL.node = nil
		}
	case 2727:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11585
		{
			yyVAL.stmt = ast.NewCreateAmStmt(yyDollar[4].str, ast.AmType(yyDollar[6].ival), yyDollar[8].list)
		}
	case 2728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11591
		{
			yyVAL.ival = int(ast.AMTYPE_INDEX)
		}
	case 2729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11592
		{
			yyVAL.ival = int(ast.AMTYPE_TABLE)
		}
	case 2730:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11603
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[3].list, yyDollar[4].list, yyDollar[6].list, yyDollar[8].list, "", false, false)
		}
	case 2731:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11607
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[6].list, yyDollar[7].list, yyDollar[9].list, yyDollar[11].list, "", false, true)
		}
	case 2732:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11614
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[3].list, yyDollar[6].node, false)
		}
	case 2733:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11618
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[5].list, yyDollar[8].node, true)
		}
	case 2734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11624
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].statelem)
		}
	case 2735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11625
		{
			yyDollar[1].list.Append(yyDollar[3].statelem)
			yyVAL.list = yyDollar[1].list
		}
	case 2736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11629
		{
			yyVAL.statelem = ast.NewStatsElem(yyDollar[1].str)
		}
	case 2737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11630
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[1].node)
		}
	case 2738:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11631
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[2].node)
		}
	case 2739:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11642
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, false, yyDollar[4].list)
		}
	case 2740:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11646
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, true, yyDollar[7].list)
		}
	case 2741:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11650
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, yyDollar[5].list, false, yyDollar[6].list)
		}
	case 2742:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11657
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, yyDollar[5].list, nil, ast.AP_SetOptions)
		}
	case 2743:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11661
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_AddObjects)
		}
	case 2744:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11665
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_SetObjects)
		}
	case 2745:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11669
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_DropObjects)
		}
	case 2746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11675
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11676
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2748:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11681
		{
			pubTable := ast.NewPublicationTable(yyDollar[2].rangevar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_TABLE, pubTable)
		}
	case 2749:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11686
		{
			yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_TABLES_IN_SCHEMA, yyDollar[4].str)
		}
	case 2750:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11690
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA)
		}
	case 2751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11694
		{
			// If either a row filter or column list is specified, create a PublicationTable object
			if yyDollar[2].list != nil || yyDollar[3].node != nil {
				// Create a simple RangeVar from the ColId
				rangeVar := ast.NewRangeVar(yyDollar[1].str, "", "")
				pubTable := ast.NewPublicationTable(rangeVar, yyDollar[3].node, yyDollar[2].list)
				yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
			} else {
				yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_CONTINUATION, yyDollar[1].str)
			}
		}
	case 2752:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11706
		{
			rangeVar := makeRangeVarFromQualifiedName(yyDollar[1].str, yyDollar[2].list, -1)
			pubTable := ast.NewPublicationTable(rangeVar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11712
		{
			pubTable := ast.NewPublicationTable(yyDollar[1].rangevar, yyDollar[3].node, yyDollar[2].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11717
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_CONTINUATION)
		}
	case 2755:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11723
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2756:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11724
		{
			yyVAL.node = nil
		}
	case 2757:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11735
		{
			yyVAL.stmt = ast.NewCreateSubscriptionStmt(yyDollar[3].str, yyDollar[5].str, yyDollar[7].list, yyDollar[8].list)
		}
	case 2758:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11742
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_OPTIONS, "", nil, yyDollar[5].list)
		}
	case 2759:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11746
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_CONNECTION, yyDollar[5].str, nil, nil)
		}
	case 2760:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11750
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_REFRESH, "", nil, yyDollar[6].list)
		}
	case 2761:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11754
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ADD_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2762:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11758
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_DROP_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2763:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11762
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SET_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2764:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11766
		{
			enableOpt := ast.NewNodeList()
			enableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(true)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, enableOpt)
		}
	case 2765:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11772
		{
			disableOpt := ast.NewNodeList()
			disableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(false)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, disableOpt)
		}
	case 2766:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11778
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SKIP, "", nil, yyDollar[5].list)
		}
	case 2767:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11791
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, yyDollar[10].objwithargs, ast.CoercionContext(yyDollar[11].ival), false)
		}
	case 2768:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11795
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), false)
		}
	case 2769:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11799
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), true)
		}
	case 2770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11805
		{
			yyVAL.ival = int(ast.COERCION_IMPLICIT)
		}
	case 2771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11806
		{
			yyVAL.ival = int(ast.COERCION_ASSIGNMENT)
		}
	case 2772:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11807
		{
			yyVAL.ival = int(ast.COERCION_EXPLICIT)
		}
	case 2773:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11819
		{
			yyVAL.stmt = ast.NewCreateOpClassStmt(yyDollar[4].list, yyDollar[11].list, yyDollar[10].str, yyDollar[8].typnam, yyDollar[13].list, yyDollar[5].bval)
		}
	case 2774:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11825
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11826
		{
			yyVAL.list = nil
		}
	case 2776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11830
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2777:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11831
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2778:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11836
		{
			// Create ObjectWithArgs for simple operator
			owa := ast.NewObjectWithArgs(yyDollar[3].list, nil, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, yyDollar[4].list)
		}
	case 2779:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11842
		{
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, yyDollar[3].objwithargs, yyDollar[4].list)
		}
	case 2780:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11846
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[3].objwithargs, nil)
		}
	case 2781:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11850
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[6].objwithargs, yyDollar[4].list)
		}
	case 2782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11854
		{
			yyVAL.node = ast.NewOpClassItemStorage(yyDollar[2].typnam)
		}
	case 2783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11860
		{
			yyVAL.bval = true
		}
	case 2784:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11861
		{
			yyVAL.bval = false
		}
	case 2785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11865
		{
			yyVAL.list = nil
		}
	case 2786:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11866
		{
			yyVAL.list = yyDollar[4].list
		}
	case 2787:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11867
		{
			yyVAL.list = nil
		}
	case 2788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11871
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].typnam)
		}
	case 2789:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11872
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2790:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11883
		{
			yyVAL.stmt = ast.NewCreateOpFamilyStmt(yyDollar[4].list, yyDollar[6].str)
		}
	case 2791:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11896
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, false, yyDollar[8].list)
		}
	case 2792:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11900
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, true, yyDollar[8].list)
		}
	case 2793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11906
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2794:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11907
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2795:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11912
		{
			// Create ObjectWithArgs for operator with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, nil)
		}
	case 2796:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11918
		{
			// Create ObjectWithArgs for function with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, owa, nil)
		}
	case 2797:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11933
		{
			yyVAL.stmt = ast.NewCreateConversionStmt(yyDollar[4].list, yyDollar[6].str, yyDollar[8].str, yyDollar[10].list, yyDollar[2].bval)
		}
	case 2798:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11946
		{
			yyVAL.stmt = ast.NewCreateTransformStmt(yyDollar[2].bval, yyDollar[5].typnam, yyDollar[7].str, linitial(yyDollar[9].list), lsecond(yyDollar[9].list))
		}
	case 2799:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11953
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs)  // fromsql
			yyVAL.list.Append(yyDollar[11].objwithargs) // tosql
		}
	case 2800:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11959
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[11].objwithargs) // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs)  // tosql
		}
	case 2801:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11965
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs) // fromsql
			yyVAL.list.Append(nil)                     // tosql
		}
	case 2802:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11971
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(nil)                     // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs) // tosql
		}
	case 2803:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11986
		{
			// Parameterless CREATE LANGUAGE is now treated as CREATE EXTENSION
			yyVAL.stmt = ast.NewCreateExtensionStmt(yyDollar[6].str, yyDollar[2].bval, nil)
		}
	case 2804:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11992
		{
			yyVAL.stmt = ast.NewCreatePLangStmt(yyDollar[2].bval, yyDollar[6].str, yyDollar[8].list, yyDollar[9].list, yyDollar[10].list, yyDollar[3].bval)
		}
	case 2805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11998
		{
			yyVAL.bval = true
		}
	case 2806:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11999
		{
			yyVAL.bval = false
		}
	case 2807:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12004
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2808:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12005
		{
			yyVAL.list = nil
		}
	case 2809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12009
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2810:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12010
		{
			yyVAL.list = nil
		}
	case 2811:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12014
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2812:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12015
		{
			yyVAL.list = nil
		}
	case 2813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12018
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_ALL
		}
	case 2814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12019
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DISTINCT
		}
	case 2815:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12020
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DEFAULT
		}
	case 2816:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12025
		{
			yyVAL.groupClause = &ast.GroupClause{
				Distinct: yyDollar[3].setquant == ast.SET_QUANTIFIER_DISTINCT,
				List:     yyDollar[4].list,
			}
		}
	case 2817:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12032
		{
			yyVAL.groupClause = nil
		}
	case 2818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12038
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2819:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12039
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12043
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12044
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12045
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12046
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12047
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2825:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12052
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_EMPTY, ast.NewNodeList(), 0)
		}
	case 2826:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12059
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_ROLLUP, yyDollar[3].list, 0)
		}
	case 2827:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12066
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_CUBE, yyDollar[3].list, 0)
		}
	case 2828:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12073
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_SETS, yyDollar[4].list, 0)
		}
	case 2829:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12082
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2830:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12083
		{
			yyVAL.node = nil
		}
	case 2831:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12090
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12094
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2833:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12095
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2834:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12100
		{
			sortBy := ast.NewSortBy(yyDollar[1].node, ast.SORTBY_USING, ast.SortByNulls(yyDollar[4].ival), 0)
			// Use qual_all_Op (NodeList) directly for UseOp
			sortBy.UseOp = yyDollar[3].list
			yyVAL.node = sortBy
		}
	case 2835:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12107
		{
			yyVAL.node = ast.NewSortBy(yyDollar[1].node, ast.SortByDir(yyDollar[2].ival), ast.SortByNulls(yyDollar[3].ival), 0)
		}
	case 2836:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12118
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2837:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12120
		{
			yyVAL.list = nil
		}
	case 2838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12125
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[1].windef)
		}
	case 2839:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12130
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[3].windef)
		}
	case 2840:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12138
		{
			n := yyDollar[3].windef
			n.Name = yyDollar[1].str
			yyVAL.windef = n
		}
	case 2841:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12147
		{
			yyVAL.windef = yyDollar[2].windef
		}
	case 2842:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12149
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			yyVAL.windef = n
		}
	case 2843:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12156
		{
			yyVAL.windef = nil
		}
	case 2844:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12161
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.PartitionClause = yyDollar[3].list
			n.OrderClause = yyDollar[4].list

			n.FrameOptions = yyDollar[5].windef.FrameOptions
			n.StartOffset = yyDollar[5].windef.StartOffset
			n.EndOffset = yyDollar[5].windef.EndOffset
			yyVAL.windef = n
		}
	case 2845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12175
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2846:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12176
		{
			yyVAL.str = ""
		}
	case 2847:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12180
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2848:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12181
		{
			yyVAL.list = nil
		}
	case 2849:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12186
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_RANGE
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2850:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12193
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_ROWS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2851:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12200
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_GROUPS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2852:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12207
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12218
		{
			n := yyDollar[1].windef
			// reject invalid cases - these would be runtime errors in PostgreSQL
			if (n.FrameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (n.FrameOptions & ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 {
				yylex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			n.FrameOptions |= ast.FRAMEOPTION_END_CURRENT_ROW
			yyVAL.windef = n
		}
	case 2854:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12232
		{
			n1 := yyDollar[2].windef
			n2 := yyDollar[4].windef

			// form merged options
			frameOptions := n1.FrameOptions
			// shift converts START_ options to END_ options
			frameOptions |= (n2.FrameOptions << 1)
			frameOptions |= ast.FRAMEOPTION_BETWEEN

			// reject invalid cases
			if (frameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (frameOptions & ast.FRAMEOPTION_END_UNBOUNDED_PRECEDING) != 0 {
				yylex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_CURRENT_ROW) != 0 &&
				(frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 {
				yylex.Error("frame starting from current row cannot have preceding rows")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 &&
				((frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 ||
					(frameOptions&ast.FRAMEOPTION_END_CURRENT_ROW) != 0) {
				yylex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			n1.FrameOptions = frameOptions
			n1.EndOffset = n2.StartOffset
			yyVAL.windef = n1
		}
	case 2855:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12267
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_PRECEDING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2856:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12275
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2857:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12283
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_CURRENT_ROW
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2858:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12291
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_PRECEDING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2859:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12299
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_FOLLOWING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2860:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12309
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_CURRENT_ROW
		}
	case 2861:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12310
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_GROUP
		}
	case 2862:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12311
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_TIES
		}
	case 2863:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12312
		{
			yyVAL.ival = 0
		}
	case 2864:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12313
		{
			yyVAL.ival = 0
		}
	case 2865:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12322
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[2].node
		}
	case 2866:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12327
		{
			yyVAL.selectLimit = yyDollar[2].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[1].node
		}
	case 2867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12332
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12336
		{
			n := &selectLimit{}
			n.limitOffset = yyDollar[1].node
			n.limitCount = nil
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12346
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2870:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12347
		{
			yyVAL.selectLimit = nil
		}
	case 2871:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12352
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[2].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2872:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12360
		{
			// Disabled because it was too confusing - PostgreSQL error
			yylex.Error("LIMIT #,# syntax is not supported. Use separate LIMIT and OFFSET clauses.")
			return 1
		}
	case 2873:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12367
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2874:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12375
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2875:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12383
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2876:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12391
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2877:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12402
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2878:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12405
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12409
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12411
		{
			/* LIMIT ALL is represented as a NULL constant */
			yyVAL.node = ast.NewA_Const(ast.NewNull(), -1)
		}
	case 2881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12418
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12431
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2883:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12433
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("+")}}, nil, yyDollar[2].node, -1)
		}
	case 2884:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12437
		{
			// Create a unary minus expression
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("-")}}, nil, yyDollar[2].node, -1)
		}
	case 2885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12444
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), -1)
		}
	case 2886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12445
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), -1)
		}
	case 2887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12450
		{
			yyVAL.ival = 0
		}
	case 2888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12451
		{
			yyVAL.ival = 0
		}
	case 2889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12455
		{
			yyVAL.ival = 0
		}
	case 2890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12456
		{
			yyVAL.ival = 0
		}
	case 2891:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12469
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2892:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12475
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_START)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2893:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12481
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2894:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12487
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2895:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12493
		{
			stmt := ast.NewSavepointStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2896:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12498
		{
			stmt := ast.NewReleaseStmt(yyDollar[3].str)
			yyVAL.stmt = stmt
		}
	case 2897:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12503
		{
			stmt := ast.NewReleaseStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2898:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12508
		{
			stmt := ast.NewRollbackToStmt(yyDollar[5].str)
			yyVAL.stmt = stmt
		}
	case 2899:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12513
		{
			stmt := ast.NewRollbackToStmt(yyDollar[4].str)
			yyVAL.stmt = stmt
		}
	case 2900:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12518
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_PREPARE)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2901:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12524
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2902:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12530
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2903:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12539
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2904:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12545
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_BEGIN)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12552
		{
		}
	case 2906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12553
		{
		}
	case 2907:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12554
		{
		}
	case 2908:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12558
		{
			yyVAL.bval = true
		}
	case 2909:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12559
		{
			yyVAL.bval = false
		}
	case 2910:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12560
		{
			yyVAL.bval = false
		}
	case 2911:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12573
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_ROLE, yyDollar[3].str, yyDollar[5].list)
		}
	case 2912:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12580
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_USER, yyDollar[3].str, yyDollar[5].list)
		}
	case 2913:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12587
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_GROUP, yyDollar[3].str, yyDollar[5].list)
		}
	case 2914:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12594
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2915:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12600
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2916:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12609
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2917:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12613
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2918:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12617
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2919:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12621
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2920:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12627
		{
			yyVAL.str = ""
		}
	case 2921:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12628
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2922:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12633
		{
			options := ast.NewNodeList(ast.NewDefElem("rolemembers", yyDollar[6].list))
			stmt := ast.NewAlterRoleStmt(yyDollar[3].rolespec, options)
			stmt.Action = yyDollar[4].ival
			yyVAL.stmt = stmt
		}
	case 2923:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12643
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2924:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12647
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2925:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12651
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2926:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12655
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2927:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12659
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2928:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12663
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2929:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12671
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 2930:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12682
		{
			yyVAL.list = nil
		}
	case 2931:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12687
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 2932:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12698
		{
			yyVAL.list = nil
		}
	case 2933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12702
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2934:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12704
		{
			yyVAL.defelt = ast.NewDefElem("sysid", ast.NewInteger(yyDollar[2].ival))
		}
	case 2935:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12708
		{
			yyVAL.defelt = ast.NewDefElem("adminmembers", yyDollar[2].list)
		}
	case 2936:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12712
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 2937:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12716
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 2938:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12720
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 2939:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12727
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[2].str))
		}
	case 2940:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12731
		{
			yyVAL.defelt = ast.NewDefElem("password", nil)
		}
	case 2941:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12735
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[3].str))
		}
	case 2942:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12739
		{
			yylex.Error("UNENCRYPTED PASSWORD is no longer supported")
			return 1
		}
	case 2943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12744
		{
			yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(true))
		}
	case 2944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12748
		{
			// Handle identifiers like PostgreSQL does with string comparisons
			if yyDollar[1].str == "superuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nosuperuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createrole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreaterole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createdb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreatedb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(false))
			} else if yyDollar[1].str == "login" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nologin" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(false))
			} else if yyDollar[1].str == "replication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(true))
			} else if yyDollar[1].str == "noreplication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(false))
			} else if yyDollar[1].str == "bypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nobypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(false))
			} else if yyDollar[1].str == "noinherit" {
				yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(false))
			} else {
				// Return error for unrecognized role option
				yylex.Error("unrecognized role option \"" + yyDollar[1].str + "\"")
				yyVAL.defelt = nil
			}
		}
	case 2945:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12783
		{
			yyVAL.defelt = ast.NewDefElem("connectionlimit", ast.NewInteger(yyDollar[3].ival))
		}
	case 2946:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12787
		{
			yyVAL.defelt = ast.NewDefElem("validUntil", ast.NewString(yyDollar[3].str))
		}
	case 2947:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12791
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 2948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12797
		{
			yyVAL.ival = 1
		}
	case 2949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12798
		{
			yyVAL.ival = -1
		}
	case 2950:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12810
		{
			n := ast.NewGrantStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.GrantOption = yyDollar[7].bval
			n.Grantor = yyDollar[8].rolespec
			yyVAL.stmt = n
		}
	case 2951:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12822
		{
			n := ast.NewRevokeStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.Grantor = yyDollar[7].rolespec
			n.Behavior = yyDollar[8].dropBehav
			yyVAL.stmt = n
		}
	case 2952:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12831
		{
			n := ast.NewRevokeStmt(yyDollar[7].privtarget.objtype, yyDollar[7].privtarget.objs, yyDollar[5].list, yyDollar[9].list)
			n.Targtype = yyDollar[7].privtarget.targtype
			n.GrantOption = true
			n.Grantor = yyDollar[10].rolespec
			n.Behavior = yyDollar[11].dropBehav
			yyVAL.stmt = n
		}
	case 2953:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12843
		{
			stmt := ast.NewGrantRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			yyVAL.stmt = stmt
		}
	case 2954:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12849
		{
			stmt := ast.NewGrantRoleStmtWithOptions(yyDollar[2].list, yyDollar[4].list, yyDollar[6].list)
			stmt.Grantor = yyDollar[7].rolespec
			yyVAL.stmt = stmt
		}
	case 2955:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12858
		{
			stmt := ast.NewRevokeRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			stmt.Behavior = yyDollar[6].dropBehav
			yyVAL.stmt = stmt
		}
	case 2956:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:12865
		{
			opt := ast.NewDefElem(yyDollar[2].str, ast.NewBoolean(false))
			stmt := ast.NewRevokeRoleStmt(yyDollar[5].list, yyDollar[7].list)
			stmt.Opt = &ast.NodeList{Items: []ast.Node{opt}}
			stmt.Grantor = yyDollar[8].rolespec
			stmt.Behavior = yyDollar[9].dropBehav
			yyVAL.stmt = stmt
		}
	case 2957:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12884
		{
			yyVAL.stmt = ast.NewAlterDefaultPrivilegesStmt(yyDollar[4].list, yyDollar[5].node.(*ast.GrantStmt))
		}
	case 2958:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12890
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2959:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12891
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2960:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12896
		{
			yyVAL.defelt = ast.NewDefElem("schemas", yyDollar[3].list)
		}
	case 2961:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12900
		{
			yyVAL.defelt = ast.NewDefElem("roles", yyDollar[3].list)
		}
	case 2962:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12904
		{
			yyVAL.defelt = ast.NewDefElem("roles", yyDollar[3].list)
		}
	case 2963:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12916
		{
			n := ast.NewGrantStmt(ast.ObjectType(yyDollar[4].ival), nil, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.GrantOption = yyDollar[7].bval
			yyVAL.node = n
		}
	case 2964:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12924
		{
			n := ast.NewRevokeStmt(ast.ObjectType(yyDollar[4].ival), nil, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.Behavior = yyDollar[7].dropBehav
			yyVAL.node = n
		}
	case 2965:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12932
		{
			n := ast.NewRevokeStmt(ast.ObjectType(yyDollar[7].ival), nil, yyDollar[5].list, yyDollar[9].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.GrantOption = true
			n.Behavior = yyDollar[10].dropBehav
			yyVAL.node = n
		}
	case 2966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12942
		{
			yyVAL.ival = int(ast.OBJECT_TABLE)
		}
	case 2967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12943
		{
			yyVAL.ival = int(ast.OBJECT_FUNCTION)
		}
	case 2968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12944
		{
			yyVAL.ival = int(ast.OBJECT_FUNCTION)
		}
	case 2969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12945
		{
			yyVAL.ival = int(ast.OBJECT_SEQUENCE)
		}
	case 2970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12946
		{
			yyVAL.ival = int(ast.OBJECT_TYPE)
		}
	case 2971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12947
		{
			yyVAL.ival = int(ast.OBJECT_SCHEMA)
		}
	case 2972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12952
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12954
		{
			yyVAL.list = nil
		}
	case 2974:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12956
		{
			yyVAL.list = nil
		}
	case 2975:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12958
		{
			ap := ast.NewAccessPriv("", yyDollar[3].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 2976:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12963
		{
			ap := ast.NewAccessPriv("", yyDollar[4].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 2977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12969
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].accesspriv)
		}
	case 2978:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12970
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].accesspriv)
			yyVAL.list = yyDollar[1].list
		}
	case 2979:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12974
		{
			yyVAL.accesspriv = ast.NewAccessPriv("SELECT", yyDollar[2].list)
		}
	case 2980:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12978
		{
			yyVAL.accesspriv = ast.NewAccessPriv("REFERENCES", yyDollar[2].list)
		}
	case 2981:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12982
		{
			yyVAL.accesspriv = ast.NewAccessPriv("CREATE", yyDollar[2].list)
		}
	case 2982:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12986
		{
			yyVAL.accesspriv = ast.NewAccessPriv("ALTER SYSTEM", nil)
		}
	case 2983:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12990
		{
			yyVAL.accesspriv = ast.NewAccessPriv(yyDollar[1].str, yyDollar[2].list)
		}
	case 2984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13000
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[1].list,
			}
		}
	case 2985:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13008
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[2].list,
			}
		}
	case 2986:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13016
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[2].list,
			}
		}
	case 2987:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13024
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FDW,
				objs:     yyDollar[4].list,
			}
		}
	case 2988:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13032
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FOREIGN_SERVER,
				objs:     yyDollar[3].list,
			}
		}
	case 2989:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13040
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[2].list,
			}
		}
	case 2990:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13048
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[2].list,
			}
		}
	case 2991:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13056
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[2].list,
			}
		}
	case 2992:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13064
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DATABASE,
				objs:     yyDollar[2].list,
			}
		}
	case 2993:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13072
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DOMAIN,
				objs:     yyDollar[2].list,
			}
		}
	case 2994:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13080
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LANGUAGE,
				objs:     yyDollar[2].list,
			}
		}
	case 2995:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13088
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LARGEOBJECT,
				objs:     yyDollar[3].list,
			}
		}
	case 2996:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13096
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PARAMETER_ACL,
				objs:     yyDollar[2].list,
			}
		}
	case 2997:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13104
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SCHEMA,
				objs:     yyDollar[2].list,
			}
		}
	case 2998:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13112
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLESPACE,
				objs:     yyDollar[2].list,
			}
		}
	case 2999:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13120
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TYPE,
				objs:     yyDollar[2].list,
			}
		}
	case 3000:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13128
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[5].list,
			}
		}
	case 3001:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13136
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[5].list,
			}
		}
	case 3002:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13144
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[5].list,
			}
		}
	case 3003:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13152
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[5].list,
			}
		}
	case 3004:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13160
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[5].list,
			}
		}
	case 3005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13171
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rolespec)
		}
	case 3006:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13172
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 3007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13176
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 3008:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13177
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 3009:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13182
		{
			yyVAL.bval = true
		}
	case 3010:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13183
		{
			yyVAL.bval = false
		}
	case 3011:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13187
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13188
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3013:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13193
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 3014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13199
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 3015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13200
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 3016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13201
		{
			yyVAL.node = ast.NewBoolean(false)
		}
	case 3017:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13204
		{
			yyVAL.rolespec = yyDollar[3].rolespec
		}
	case 3018:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13205
		{
			yyVAL.rolespec = nil
		}
	case 3019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13210
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 3020:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13214
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 3021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13222
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3022:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13226
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 3023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13231
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 3024:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13232
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 3025:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13236
		{
			n := ast.NewRangeTableSample(nil, yyDollar[2].list, yyDollar[4].list, yyDollar[6].node, 0)
			yyVAL.node = n
		}
	case 3026:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13244
		{
			yyVAL.node = yyDollar[3].node
		}
	case 3027:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13248
		{
			yyVAL.node = nil
		}
	case 3028:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13262
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_FUNCTION, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3029:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13267
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_PROCEDURE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3030:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13272
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_ROUTINE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13280
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3032:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13281
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3033:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13287
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 3034:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13291
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 3035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13295
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 3036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13299
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 3037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13303
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 3038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13307
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 3039:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13311
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 3040:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13315
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 3041:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13319
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 3042:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13323
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 3043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13327
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 3044:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13331
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 3045:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13335
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 3046:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13339
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 3047:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13343
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 3048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13347
		{
			/* we abuse the normal content of a DefElem here */
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 3049:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13352
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 3050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13358
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3051:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13359
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3052:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13364
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3053:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13368
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 3054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13372
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13378
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 3056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13379
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 3057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13380
		{
			yyVAL.node = yyDollar[1].list
		}
	case 3058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13381
		{
			yyVAL.node = yyDollar[1].node
		}
	case 3059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13382
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 3062:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13393
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = yyDollar[1].list
			n.Objargs = ast.ExtractArgTypes(yyDollar[2].list)
			n.ObjfuncArgs = yyDollar[2].list
			yyVAL.objwithargs = n
		}
	case 3063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13406
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13413
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3065:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13420
		{
			n := ast.NewEmptyObjectWithArgs()
			nameList := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			// Append indirection elements
			for i := 0; i < yyDollar[2].list.Len(); i++ {
				nameList.Append(yyDollar[2].list.Items[i])
			}
			n.Objname = nameList
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13434
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 3067:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13436
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 3068:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13448
		{
			n := ast.NewAlterTypeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 3069:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13456
		{
			relation, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error("invalid type name")
				return 1
			}
			n := ast.NewAlterTableStmt(relation, yyDollar[4].list)
			n.Objtype = ast.OBJECT_TYPE // Mark this as a composite type alteration
			yyVAL.stmt = n
		}
	case 3070:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13469
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 3071:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13470
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 3072:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13476
		{
			n := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			n.Behavior = yyDollar[4].dropBehav
			yyVAL.node = n
		}
	case 3073:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13483
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			yyVAL.node = n
		}
	case 3074:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13491
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			yyVAL.node = n
		}
	case 3075:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:13499
		{
			def := ast.NewColumnDef(yyDollar[3].str, yyDollar[6].typnam, -1)
			n := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, def)
			n.Behavior = yyDollar[8].dropBehav
			/* We only use these fields of the ColumnDef node */
			def.TypeName = yyDollar[6].typnam
			if collClause, ok := yyDollar[7].node.(*ast.CollateClause); ok {
				def.Collclause = collClause
			}
			def.RawDefault = nil
			yyVAL.node = n
		}
	case 3076:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13520
		{
			yyVAL.ival = int(ast.CMD_SELECT)
		}
	case 3077:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13521
		{
			yyVAL.ival = int(ast.CMD_UPDATE)
		}
	case 3078:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13522
		{
			yyVAL.ival = int(ast.CMD_DELETE)
		}
	case 3079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13523
		{
			yyVAL.ival = int(ast.CMD_INSERT)
		}
	case 3080:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13533
		{
			yyVAL.stmt = ast.NewDeclareCursorStmt(yyDollar[2].str, yyDollar[3].ival|yyDollar[5].ival|ast.CURSOR_OPT_FAST_PLAN, yyDollar[7].stmt)
		}
	case 3081:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13540
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_BINARY
		}
	case 3082:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13544
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_INSENSITIVE
		}
	case 3083:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13548
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_ASENSITIVE
		}
	case 3084:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13552
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_SCROLL
		}
	case 3085:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13556
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_NO_SCROLL
		}
	case 3086:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13559
		{
			yyVAL.ival = 0
		}
	case 3087:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13562
		{
			yyVAL.ival = ast.CURSOR_OPT_HOLD
		}
	case 3088:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13563
		{
			yyVAL.ival = 0
		}
	case 3089:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13564
		{
			yyVAL.ival = 0
		}
	case 3090:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13568
		{
			stmt := yyDollar[2].stmt.(*ast.FetchStmt)
			stmt.IsMove = false
			yyVAL.stmt = stmt
		}
	case 3091:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13574
		{
			stmt := yyDollar[2].stmt.(*ast.FetchStmt)
			stmt.IsMove = true
			yyVAL.stmt = stmt
		}
	case 3092:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13582
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[1].str, false)
		}
	case 3093:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13586
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[2].str, false)
		}
	case 3094:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13590
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[3].str, false)
		}
	case 3095:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13594
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, 1, yyDollar[3].str, false)
		}
	case 3096:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13598
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, 1, yyDollar[3].str, false)
		}
	case 3097:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13602
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, -1, yyDollar[3].str, false)
		}
	case 3098:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13606
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3099:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13610
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_RELATIVE, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13614
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, int64(yyDollar[1].ival), yyDollar[3].str, false)
		}
	case 3101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13618
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, ast.FETCH_ALL, yyDollar[3].str, false)
		}
	case 3102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13622
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[3].str, false)
		}
	case 3103:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13626
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13630
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, ast.FETCH_ALL, yyDollar[4].str, false)
		}
	case 3105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13634
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, 1, yyDollar[3].str, false)
		}
	case 3106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13638
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13642
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, ast.FETCH_ALL, yyDollar[4].str, false)
		}
	case 3108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13647
		{
			yyVAL.ival = 0
		}
	case 3109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13648
		{
			yyVAL.ival = 0
		}
	case 3110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13652
		{
			yyVAL.ival = 0
		}
	case 3111:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13653
		{
			yyVAL.ival = 0
		}
	case 3112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13658
		{
			name := yyDollar[2].str
			yyVAL.stmt = ast.NewClosePortalStmt(&name)
		}
	case 3113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13663
		{
			yyVAL.stmt = ast.NewClosePortalStmt(nil)
		}
	case 3114:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13675
		{
			yyVAL.stmt = ast.NewPrepareStmt(yyDollar[2].str, yyDollar[3].list, yyDollar[5].stmt)
		}
	case 3115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13682
		{
			yyVAL.list = yyDollar[2].list
		}
	case 3116:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13685
		{
			yyVAL.list = nil
		}
	case 3117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13689
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13690
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13691
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13692
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13693
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13697
		{
			yyVAL.stmt = ast.NewExecuteStmt(yyDollar[2].str, yyDollar[3].list)
		}
	case 3123:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:13701
		{
			executeStmt := ast.NewExecuteStmt(yyDollar[7].str, yyDollar[8].list)
			ctas := ast.NewCreateTableAsStmt(executeStmt, yyDollar[4].into, ast.OBJECT_TABLE, false, false)
			// Set relpersistence from OptTemp (following PostgreSQL pattern)
			yyDollar[4].into.Rel.RelPersistence = yyDollar[2].rune
			// Set skipData from opt_with_data (following PostgreSQL pattern)
			yyDollar[4].into.SkipData = !yyDollar[9].bval
			yyVAL.stmt = ctas
		}
	case 3124:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:13711
		{
			executeStmt := ast.NewExecuteStmt(yyDollar[10].str, yyDollar[11].list)
			ctas := ast.NewCreateTableAsStmt(executeStmt, yyDollar[7].into, ast.OBJECT_TABLE, false, true)
			// Set relpersistence from OptTemp (following PostgreSQL pattern)
			yyDollar[7].into.Rel.RelPersistence = yyDollar[2].rune
			// Set skipData from opt_with_data (following PostgreSQL pattern)
			yyDollar[7].into.SkipData = !yyDollar[12].bval
			yyVAL.stmt = ctas
		}
	case 3125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13724
		{
			yyVAL.list = yyDollar[2].list
		}
	case 3126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13727
		{
			yyVAL.list = nil
		}
	case 3127:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13733
		{
			into := ast.NewIntoClause(yyDollar[1].rangevar, yyDollar[2].list, yyDollar[3].str, yyDollar[4].list, yyDollar[5].oncommit, yyDollar[6].str, nil, false, 0)
			yyVAL.into = into
		}
	case 3128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13741
		{
			yyVAL.stmt = ast.NewDeallocateStmt(yyDollar[2].str)
		}
	case 3129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13745
		{
			yyVAL.stmt = ast.NewDeallocateStmt(yyDollar[3].str)
		}
	case 3130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13749
		{
			yyVAL.stmt = ast.NewDeallocateAllStmt()
		}
	case 3131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13753
		{
			yyVAL.stmt = ast.NewDeallocateAllStmt()
		}
	}
	goto yystack /* stack new state and value */
}
