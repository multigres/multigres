// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
	"strings"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// SelectLimit - Private struct for the result of opt_select_limit production
// Mirrors PostgreSQL's SelectLimit from gram.y:126-132
type selectLimit struct {
	limitOffset ast.Node
	limitCount  ast.Node
	limitOption ast.LimitOption
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:43
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node        ast.Node
	stmt        ast.Stmt
	stmtList    []ast.Stmt
	list        *ast.NodeList
	groupClause *ast.GroupClause
	selectLimit *selectLimit

	// Specific AST node types
	into          *ast.IntoClause
	onconflict    *ast.OnConflictClause
	windef        *ast.WindowDef
	createStmt    *ast.CreateStmt
	indexStmt     *ast.IndexStmt
	alterStmt     *ast.AlterTableStmt
	dropStmt      *ast.DropStmt
	columnDef     *ast.ColumnDef
	constraint    *ast.Constraint
	indexElem     *ast.IndexElem
	alterCmd      *ast.AlterTableCmd
	with          *ast.WithClause
	rangevar      *ast.RangeVar
	objType       ast.ObjectType
	dropBehav     ast.DropBehavior
	setquant      ast.SetQuantifier
	typnam        *ast.TypeName
	partspec      *ast.PartitionSpec
	partboundspec *ast.PartitionBoundSpec
	oncommit      ast.OnCommitAction
	defelt        *ast.DefElem
	target        *ast.ResTarget            // For select targets, insert columns
	alias         *ast.Alias                // For table and column aliases
	jtype         ast.JoinType              // For join type specifications
	jexpr         *ast.JoinExpr             // For joined table expressions
	keyaction     *ast.KeyAction            // For foreign key actions
	keyactions    *ast.KeyActions           // For foreign key action sets
	funparam      *ast.FunctionParameter    // For function parameters
	funparammode  ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt      *ast.VariableSetStmt      // For SET/RESET statements
	rolespec      *ast.RoleSpec
	objwithargs   *ast.ObjectWithArgs
	statelem      *ast.StatsElem

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const VALUES = 57428
const SEARCH = 57429
const BREADTH = 57430
const DEPTH = 57431
const CYCLE = 57432
const FIRST_P = 57433
const LAST_P = 57434
const SET = 57435
const ASC = 57436
const DESC = 57437
const INSERT = 57438
const UPDATE = 57439
const DELETE_P = 57440
const MERGE = 57441
const RETURNING = 57442
const CONFLICT = 57443
const OVERRIDING = 57444
const USER = 57445
const SYSTEM_P = 57446
const MATCHED = 57447
const THEN = 57448
const SOURCE = 57449
const TARGET = 57450
const DO = 57451
const NOTHING = 57452
const COPY = 57453
const PROGRAM = 57454
const STDIN = 57455
const STDOUT = 57456
const BINARY = 57457
const FREEZE = 57458
const CONSTRAINT = 57459
const VERBOSE = 57460
const ANALYZE = 57461
const CURRENT_P = 57462
const CURSOR = 57463
const OF = 57464
const COLUMNS = 57465
const ORDINALITY = 57466
const XMLTABLE = 57467
const JSON_TABLE = 57468
const ROWS = 57469
const PATH = 57470
const PASSING = 57471
const FOR = 57472
const NESTED = 57473
const REF_P = 57474
const XMLNAMESPACES = 57475
const ARRAY = 57476
const ERROR = 57477
const ERROR_P = 57478
const EMPTY = 57479
const EMPTY_P = 57480
const OBJECT_P = 57481
const WRAPPER = 57482
const CONDITIONAL = 57483
const UNCONDITIONAL = 57484
const QUOTES = 57485
const OMIT = 57486
const KEEP = 57487
const SCALAR = 57488
const STRING_P = 57489
const ENCODING = 57490
const DELIMITER = 57491
const DELIMITERS = 57492
const HEADER_P = 57493
const QUOTE = 57494
const FORCE = 57495
const CSV = 57496
const VALUE_P = 57497
const JSON_QUERY = 57498
const JSON_VALUE = 57499
const JSON_SERIALIZE = 57500
const JSON_OBJECT = 57501
const JSON_ARRAY = 57502
const JSON_OBJECTAGG = 57503
const JSON_ARRAYAGG = 57504
const JSON_EXISTS = 57505
const JSON_SCALAR = 57506
const FORMAT = 57507
const JSON = 57508
const UTF8 = 57509
const WITHOUT = 57510
const BIT = 57511
const NUMERIC = 57512
const INTEGER = 57513
const SMALLINT = 57514
const BIGINT = 57515
const REAL = 57516
const FLOAT_P = 57517
const DOUBLE_P = 57518
const PRECISION = 57519
const CHARACTER = 57520
const CHAR_P = 57521
const VARCHAR = 57522
const NATIONAL = 57523
const NCHAR = 57524
const VARYING = 57525
const TIMESTAMP = 57526
const INTERVAL = 57527
const INT_P = 57528
const DECIMAL_P = 57529
const DEC = 57530
const BOOLEAN_P = 57531
const VARIADIC = 57532
const ABORT_P = 57533
const ABSENT = 57534
const ABSOLUTE_P = 57535
const ACCESS = 57536
const ACTION = 57537
const ADD_P = 57538
const ADMIN = 57539
const AFTER = 57540
const AGGREGATE = 57541
const ALSO = 57542
const ALWAYS = 57543
const ANALYSE = 57544
const ASENSITIVE = 57545
const ASSERTION = 57546
const ASSIGNMENT = 57547
const ATOMIC = 57548
const ATTACH = 57549
const ATTRIBUTE = 57550
const AUTHORIZATION = 57551
const BACKWARD = 57552
const BEFORE = 57553
const BEGIN_P = 57554
const CACHE = 57555
const CALL = 57556
const CALLED = 57557
const CASCADED = 57558
const CATALOG_P = 57559
const CHAIN = 57560
const CHARACTERISTICS = 57561
const CHECKPOINT = 57562
const CLASS = 57563
const CLOSE = 57564
const CLUSTER = 57565
const COALESCE = 57566
const COLLATION = 57567
const COMMENT = 57568
const COMMENTS = 57569
const COMMIT = 57570
const COMMITTED = 57571
const COMPRESSION = 57572
const CONFIGURATION = 57573
const CONNECTION = 57574
const CONSTRAINTS = 57575
const CONTENT_P = 57576
const CONTINUE_P = 57577
const CONVERSION_P = 57578
const COST = 57579
const CUBE = 57580
const CURRENT_CATALOG = 57581
const CURRENT_DATE = 57582
const CURRENT_ROLE = 57583
const CURRENT_SCHEMA = 57584
const CURRENT_TIME = 57585
const CURRENT_TIMESTAMP = 57586
const CURRENT_USER = 57587
const DATA_P = 57588
const DATABASE = 57589
const DAY_P = 57590
const DEALLOCATE = 57591
const DECLARE = 57592
const DEFAULTS = 57593
const DEFERRABLE = 57594
const DEFERRED = 57595
const DEFINER = 57596
const DEPENDS = 57597
const DETACH = 57598
const DICTIONARY = 57599
const DISABLE_P = 57600
const DISCARD = 57601
const DOCUMENT_P = 57602
const DOMAIN_P = 57603
const EACH = 57604
const ELSE = 57605
const ENABLE_P = 57606
const ENCRYPTED = 57607
const END_P = 57608
const ENUM_P = 57609
const EVENT = 57610
const EXCEPT = 57611
const EXCLUDE = 57612
const EXCLUDING = 57613
const EXCLUSIVE = 57614
const EXECUTE = 57615
const EXPLAIN = 57616
const EXPRESSION = 57617
const EXTENSION = 57618
const EXTERNAL = 57619
const EXTRACT = 57620
const FAMILY = 57621
const FETCH = 57622
const FILTER = 57623
const FINALIZE = 57624
const FOLLOWING = 57625
const FOREIGN = 57626
const FORWARD = 57627
const FUNCTION = 57628
const FUNCTIONS = 57629
const GENERATED = 57630
const GLOBAL = 57631
const GRANT = 57632
const GRANTED = 57633
const GREATEST = 57634
const GROUPING = 57635
const GROUPS = 57636
const HANDLER = 57637
const HOLD = 57638
const HOUR_P = 57639
const IDENTITY_P = 57640
const IMMEDIATE = 57641
const IMMUTABLE = 57642
const IMPLICIT_P = 57643
const IMPORT_P = 57644
const INCLUDE = 57645
const INCLUDING = 57646
const INCREMENT = 57647
const INDENT = 57648
const INDEX = 57649
const INDEXES = 57650
const INHERIT = 57651
const INHERITS = 57652
const INITIALLY = 57653
const INLINE_P = 57654
const INPUT_P = 57655
const INSENSITIVE = 57656
const INSTEAD = 57657
const INTERSECT = 57658
const INVOKER = 57659
const ISOLATION = 57660
const KEYS = 57661
const LABEL = 57662
const LANGUAGE = 57663
const LARGE_P = 57664
const LATERAL_P = 57665
const LEAKPROOF = 57666
const LEAST = 57667
const LEADING = 57668
const LEVEL = 57669
const LISTEN = 57670
const LOAD = 57671
const LOCALTIME = 57672
const LOCALTIMESTAMP = 57673
const LOCATION = 57674
const LOCK_P = 57675
const LOCKED = 57676
const LOGGED = 57677
const MAPPING = 57678
const MATCH = 57679
const MAXVALUE = 57680
const MERGE_ACTION = 57681
const METHOD = 57682
const MINUTE_P = 57683
const MINVALUE = 57684
const MODE = 57685
const MONTH_P = 57686
const MOVE = 57687
const NAME_P = 57688
const NAMES = 57689
const NEW = 57690
const NEXT = 57691
const NFC = 57692
const NFD = 57693
const NFKC = 57694
const NFKD = 57695
const NO = 57696
const NONE = 57697
const NORMALIZE = 57698
const NORMALIZED = 57699
const NOTIFY = 57700
const NOWAIT = 57701
const NULLIF = 57702
const OUT_P = 57703
const OVERLAY = 57704
const OVERLAPS = 57705
const OWNED = 57706
const OWNER = 57707
const PARALLEL = 57708
const PARAMETER = 57709
const PARSER = 57710
const PARTIAL = 57711
const PARTITION = 57712
const PASSWORD = 57713
const PLACING = 57714
const PLAN = 57715
const PLANS = 57716
const POLICY = 57717
const POSITION = 57718
const PRECEDING = 57719
const PREPARE = 57720
const PREPARED = 57721
const PRESERVE = 57722
const PRIMARY = 57723
const PRIOR = 57724
const PRIVILEGES = 57725
const PROCEDURAL = 57726
const PROCEDURE = 57727
const PROCEDURES = 57728
const PUBLICATION = 57729
const RANGE = 57730
const READ = 57731
const REASSIGN = 57732
const RECHECK = 57733
const REFERENCES = 57734
const REFERENCING = 57735
const REFRESH = 57736
const REINDEX = 57737
const RELATIVE_P = 57738
const RELEASE = 57739
const RENAME = 57740
const REPEATABLE = 57741
const REPLICA = 57742
const RESET = 57743
const RESTART = 57744
const RETURN = 57745
const RETURNS = 57746
const REVOKE = 57747
const ROLE = 57748
const ROLLBACK = 57749
const ROLLUP = 57750
const ROUTINE = 57751
const ROUTINES = 57752
const ROW = 57753
const RULE = 57754
const SAVEPOINT = 57755
const SCHEMA = 57756
const SCHEMAS = 57757
const SCROLL = 57758
const SECOND_P = 57759
const SECURITY = 57760
const SEQUENCE = 57761
const SEQUENCES = 57762
const SERIALIZABLE = 57763
const SERVER = 57764
const SESSION = 57765
const SESSION_USER = 57766
const SETS = 57767
const SETOF = 57768
const SHARE = 57769
const SHOW = 57770
const SIMPLE = 57771
const SKIP = 57772
const SNAPSHOT = 57773
const SOME = 57774
const SQL_P = 57775
const STABLE = 57776
const STANDALONE_P = 57777
const START = 57778
const STATEMENT = 57779
const STATISTICS = 57780
const STORAGE = 57781
const STORED = 57782
const STRICT_P = 57783
const STRIP_P = 57784
const SUBSCRIPTION = 57785
const SUBSTRING = 57786
const SUPPORT = 57787
const SYSID = 57788
const SYSTEM_USER = 57789
const TABLES = 57790
const TABLESPACE = 57791
const TABLESAMPLE = 57792
const TEMP = 57793
const TEMPLATE = 57794
const TEMPORARY = 57795
const TEXT_P = 57796
const TIES = 57797
const TRAILING = 57798
const TRANSACTION = 57799
const TRANSFORM = 57800
const TREAT = 57801
const TRIGGER = 57802
const TRIM = 57803
const TRUNCATE = 57804
const TRUSTED = 57805
const TYPE_P = 57806
const TYPES_P = 57807
const UESCAPE = 57808
const UNBOUNDED = 57809
const UNCOMMITTED = 57810
const UNENCRYPTED = 57811
const UNION = 57812
const UNIQUE = 57813
const UNLISTEN = 57814
const UNLOGGED = 57815
const UNTIL = 57816
const VACUUM = 57817
const VALID = 57818
const VALIDATE = 57819
const VALIDATOR = 57820
const VERSION_P = 57821
const VIEW = 57822
const VIEWS = 57823
const VOLATILE = 57824
const WHITESPACE_P = 57825
const WINDOW = 57826
const WITHIN = 57827
const WORK = 57828
const WRITE = 57829
const XML_P = 57830
const XMLATTRIBUTES = 57831
const XMLCONCAT = 57832
const XMLELEMENT = 57833
const XMLEXISTS = 57834
const XMLFOREST = 57835
const XMLPARSE = 57836
const XMLPI = 57837
const XMLROOT = 57838
const XMLSERIALIZE = 57839
const YEAR_P = 57840
const YES_P = 57841
const INOUT = 57842
const OTHERS = 57843
const OLD = 57844
const KEY = 57845
const OFF = 57846
const OIDS = 57847
const OPTION = 57848
const OPTIONS = 57849
const OVER = 57850
const ORDER = 57851
const ANY = 57852
const BOTH = 57853
const CAST = 57854
const CHECK = 57855
const COLUMN = 57856
const FORMAT_LA = 57857
const NOT_LA = 57858
const NULLS_LA = 57859
const WITH_LA = 57860
const WITHOUT_LA = 57861
const MODE_TYPE_NAME = 57862
const MODE_PLPGSQL_EXPR = 57863
const MODE_PLPGSQL_ASSIGN1 = 57864
const MODE_PLPGSQL_ASSIGN2 = 57865
const MODE_PLPGSQL_ASSIGN3 = 57866
const UMINUS = 57867

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ANALYSE",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:12044

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 70,
	540, 70,
	-2, 1505,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 73,
	68, 1427,
	69, 1427,
	130, 1427,
	280, 1427,
	509, 1427,
	-2, 1422,
	-1, 76,
	67, 1830,
	84, 1830,
	85, 2467,
	236, 2654,
	307, 1997,
	419, 1830,
	480, 1830,
	-2, 83,
	-1, 89,
	68, 1426,
	69, 1426,
	130, 1426,
	280, 1426,
	509, 1426,
	-2, 1428,
	-1, 99,
	1, 70,
	540, 70,
	-2, 1505,
	-1, 141,
	85, 2466,
	-2, 1829,
	-1, 216,
	61, 288,
	64, 288,
	527, 288,
	533, 288,
	-2, 2510,
	-1, 630,
	68, 1411,
	69, 1411,
	130, 1411,
	280, 1411,
	-2, 1429,
	-1, 633,
	68, 1412,
	69, 1412,
	130, 1412,
	280, 1412,
	-2, 1432,
	-1, 687,
	84, 1830,
	480, 1830,
	-2, 82,
	-1, 689,
	209, 71,
	-2, 2473,
	-1, 791,
	16, 1344,
	17, 1344,
	531, 1344,
	-2, 89,
	-1, 792,
	16, 1345,
	17, 1345,
	531, 1345,
	-2, 90,
	-1, 817,
	93, 2790,
	398, 2033,
	401, 2790,
	-2, 1926,
	-1, 821,
	93, 2790,
	398, 2033,
	401, 2790,
	-2, 1926,
	-1, 938,
	68, 1411,
	69, 1411,
	130, 1411,
	280, 1411,
	-2, 1433,
	-1, 998,
	16, 520,
	17, 520,
	531, 520,
	-2, 1208,
	-1, 1167,
	6, 1926,
	12, 1926,
	534, 1926,
	535, 1926,
	-2, 1919,
	-1, 1364,
	127, 2752,
	411, 2752,
	-2, 1068,
	-1, 1395,
	21, 1318,
	432, 1318,
	510, 1318,
	-2, 830,
	-1, 1397,
	21, 1320,
	432, 1320,
	510, 1320,
	-2, 777,
	-1, 1402,
	1, 646,
	26, 646,
	36, 646,
	64, 646,
	65, 646,
	68, 646,
	69, 646,
	71, 646,
	72, 646,
	73, 646,
	74, 646,
	100, 646,
	130, 646,
	280, 646,
	484, 646,
	509, 646,
	532, 646,
	540, 646,
	541, 646,
	-2, 1417,
	-1, 1407,
	21, 1395,
	432, 1395,
	510, 1395,
	-2, 1391,
	-1, 1864,
	68, 1427,
	69, 1427,
	130, 1427,
	280, 1427,
	509, 1427,
	-2, 1158,
	-1, 1874,
	531, 1281,
	-2, 1178,
	-1, 2079,
	117, 83,
	307, 1997,
	460, 83,
	-2, 1830,
	-1, 2129,
	536, 104,
	-2, 2338,
	-1, 2157,
	531, 1999,
	-2, 212,
	-1, 2364,
	36, 2757,
	66, 2757,
	-2, 494,
	-1, 2365,
	36, 2758,
	66, 2758,
	-2, 367,
	-1, 2371,
	127, 2755,
	411, 2755,
	-2, 1166,
	-1, 2372,
	127, 2756,
	411, 2756,
	-2, 1167,
	-1, 2389,
	1, 412,
	26, 412,
	36, 412,
	64, 412,
	65, 412,
	68, 412,
	69, 412,
	71, 412,
	72, 412,
	74, 412,
	100, 412,
	130, 412,
	280, 412,
	484, 412,
	509, 412,
	529, 412,
	532, 412,
	533, 412,
	540, 412,
	-2, 111,
	-1, 2390,
	1, 410,
	26, 410,
	36, 410,
	64, 410,
	65, 410,
	68, 410,
	69, 410,
	71, 410,
	72, 410,
	74, 410,
	100, 410,
	130, 410,
	280, 410,
	484, 410,
	509, 410,
	529, 410,
	532, 410,
	533, 410,
	540, 410,
	-2, 111,
	-1, 2393,
	1, 429,
	26, 429,
	36, 429,
	64, 429,
	65, 429,
	68, 429,
	69, 429,
	71, 429,
	72, 429,
	74, 429,
	100, 429,
	130, 429,
	280, 429,
	484, 429,
	509, 429,
	529, 429,
	532, 429,
	533, 429,
	540, 429,
	-2, 111,
	-1, 2407,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1081,
	-1, 2408,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1082,
	-1, 2409,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1083,
	-1, 2410,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1084,
	-1, 2411,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1085,
	-1, 2412,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1086,
	-1, 2416,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1093,
	-1, 2422,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1097,
	-1, 2467,
	363, 1308,
	-2, 1311,
	-1, 2485,
	531, 1280,
	-2, 1348,
	-1, 2650,
	40, 1352,
	509, 1352,
	527, 1352,
	532, 1352,
	541, 1352,
	-2, 1348,
	-1, 2680,
	209, 71,
	-2, 2473,
	-1, 2753,
	536, 105,
	-2, 2338,
	-1, 2856,
	507, 2413,
	-2, 2406,
	-1, 2989,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1095,
	-1, 2990,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1099,
	-1, 2996,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1101,
	-1, 3031,
	363, 1307,
	-2, 1310,
	-1, 3158,
	68, 1427,
	69, 1427,
	130, 1427,
	280, 1427,
	509, 1427,
	-2, 1527,
	-1, 3169,
	531, 1281,
	-2, 105,
	-1, 3175,
	150, 1762,
	-2, 1697,
	-1, 3371,
	6, 1926,
	12, 1926,
	534, 1926,
	535, 1926,
	-2, 1900,
	-1, 3494,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1094,
	-1, 3497,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1103,
	-1, 3500,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1098,
	-1, 3505,
	52, 0,
	53, 0,
	54, 0,
	-2, 1116,
	-1, 3512,
	21, 1317,
	432, 1317,
	510, 1317,
	-2, 1392,
	-1, 3516,
	363, 1309,
	-2, 1312,
	-1, 3555,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1146,
	-1, 3556,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1147,
	-1, 3557,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1148,
	-1, 3558,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1149,
	-1, 3559,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1150,
	-1, 3560,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1151,
	-1, 3880,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1096,
	-1, 3881,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1100,
	-1, 3885,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1102,
	-1, 3886,
	52, 0,
	53, 0,
	54, 0,
	-2, 1117,
	-1, 3889,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1118,
	-1, 3890,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1120,
	-1, 3998,
	540, 70,
	-2, 1505,
	-1, 4139,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1104,
	-1, 4140,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1119,
	-1, 4141,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1121,
	-1, 4542,
	37, 0,
	44, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 452,
	-1, 4841,
	7, 1647,
	-2, 289,
}

const yyPrivate = 57344

const yyLast = 84756

var yyAct = [...]int16{
	971, 4898, 4963, 4885, 4897, 4838, 4944, 4707, 4928, 4039,
	4886, 4909, 3725, 2975, 2559, 957, 3059, 2608, 4398, 4839,
	761, 3355, 4430, 4450, 1859, 4541, 4702, 4605, 798, 3941,
	2562, 3286, 4469, 2585, 4230, 1312, 3987, 983, 4588, 3114,
	4332, 4073, 4692, 3315, 4594, 4360, 2973, 725, 4498, 2030,
	3833, 4280, 2824, 4399, 4743, 1155, 1051, 4673, 4361, 4358,
	3940, 4657, 3633, 3341, 3038, 4476, 2052, 2381, 693, 4470,
	1073, 4212, 4471, 3195, 4189, 4540, 4524, 2689, 72, 4521,
	4304, 219, 219, 2575, 3629, 4072, 2954, 623, 628, 2168,
	4259, 3994, 6, 2615, 2681, 646, 3958, 653, 653, 2819,
	3180, 1409, 3164, 2535, 2776, 833, 646, 3058, 3839, 877,
	646, 3834, 3267, 2929, 3699, 3263, 689, 692, 697, 692,
	3775, 692, 653, 1919, 653, 3843, 4312, 3968, 653, 653,
	2484, 692, 653, 653, 3729, 2638, 61, 4276, 2603, 2078,
	19, 3637, 1112, 2077, 18, 646, 646, 646, 646, 3289,
	4218, 790, 692, 692, 653, 692, 790, 2577, 2377, 3196,
	653, 790, 653, 790, 653, 653, 653, 653, 653, 638,
	91, 636, 653, 692, 3949, 692, 653, 4, 692, 653,
	653, 3125, 2076, 13, 2075, 12, 4195, 3964, 788, 807,
	4133, 809, 2742, 799, 2905, 3580, 3692, 1321, 799, 3436,
	799, 672, 3249, 2598, 2601, 3150, 631, 1071, 219, 219,
	3873, 1369, 2482, 1142, 840, 3903, 2818, 2141, 2665, 696,
	2791, 3370, 3349, 3759, 2651, 2114, 3333, 2743, 2105, 1091,
	879, 2109, 3226, 2099, 2690, 61, 2656, 2669, 2668, 19,
	2576, 2051, 1264, 18, 2641, 2600, 3142, 2670, 4703, 943,
	671, 3608, 643, 3483, 2563, 2978, 2432, 2536, 2032, 3008,
	3045, 661, 1274, 668, 2645, 911, 1869, 2236, 2707, 91,
	1317, 2823, 1187, 2152, 2772, 2126, 645, 1059, 1098, 2085,
	1031, 2655, 13, 2643, 12, 3153, 2584, 210, 1077, 3171,
	2617, 2580, 2583, 2573, 880, 882, 2031, 2582, 1999, 1861,
	1120, 2511, 774, 2525, 2473, 2439, 2469, 2442, 2433, 1182,
	3266, 2360, 660, 1370, 2370, 1361, 1311, 787, 830, 723,
	2719, 206, 2706, 2705, 980, 1121, 113, 1123, 688, 2593,
	1912, 111, 1879, 2386, 944, 2509, 1344, 1362, 953, 1336,
	1342, 837, 1279, 178, 177, 2276, 2125, 2113, 2275, 134,
	2058, 630, 651, 1374, 1345, 724, 1343, 930, 932, 931,
	1309, 1195, 1228, 2106, 1180, 667, 724, 724, 198, 649,
	89, 90, 1023, 665, 657, 1254, 659, 1377, 2976, 4994,
	4985, 3235, 4983, 793, 4301, 4917, 1255, 801, 4870, 4918,
	1407, 4870, 1254, 1377, 4918, 4836, 4835, 1389, 1390, 1391,
	817, 821, 2007, 1255, 3234, 839, 839, 4683, 4519, 2009,
	1254, 3076, 2010, 3236, 1407, 4336, 2015, 1377, 2007, 4896,
	4894, 1255, 4334, 2012, 2016, 2011, 979, 2013, 4559, 2005,
	4878, 2014, 1400, 1401, 2008, 3079, 3080, 3081, 3082, 2005,
	2015, 2017, 2007, 2546, 2043, 698, 157, 2012, 2016, 2011,
	4869, 2013, 709, 710, 711, 768, 769, 1377, 2008, 4870,
	4852, 4845, 634, 633, 4829, 2017, 4812, 654, 4773, 4853,
	3130, 4772, 4760, 4534, 4722, 4174, 800, 2005, 4716, 1375,
	2005, 2596, 2007, 4723, 4689, 4665, 3324, 4717, 910, 816,
	819, 4664, 4662, 3275, 4663, 1157, 2972, 4642, 2008, 632,
	4663, 4663, 4641, 4638, 4636, 4558, 2005, 4556, 732, 4550,
	1114, 2005, 4639, 4637, 4559, 4549, 1257, 4444, 3111, 732,
	732, 1114, 897, 873, 2005, 4429, 4174, 4419, 4402, 892,
	894, 3074, 4394, 4285, 2968, 4275, 4420, 4401, 4265, 4247,
	732, 1257, 4286, 4183, 2596, 2387, 2568, 3236, 4246, 4182,
	4173, 3076, 4184, 732, 732, 3086, 3087, 3088, 1257, 4174,
	4403, 4110, 1159, 4817, 4816, 4158, 4156, 732, 732, 732,
	1328, 4126, 1318, 905, 2005, 4157, 4069, 4068, 982, 4067,
	4127, 4061, 4009, 2596, 2528, 4070, 2596, 3979, 2596, 3892,
	2596, 3236, 1407, 3870, 664, 1377, 3980, 4791, 2005, 3646,
	3027, 732, 2005, 3582, 3571, 3510, 1330, 3466, 2596, 1333,
	3394, 3028, 3583, 3572, 2005, 1332, 2005, 3381, 3238, 3395,
	2007, 3217, 3135, 3882, 1331, 3129, 3382, 3239, 924, 3120,
	3218, 3136, 3110, 3108, 3130, 3107, 2008, 3106, 2005, 3140,
	1334, 3111, 2005, 2017, 2005, 3105, 2005, 632, 646, 3031,
	3029, 653, 3026, 2942, 2005, 2683, 2597, 2552, 2005, 2005,
	662, 4563, 2005, 2005, 2684, 2596, 1257, 646, 2548, 1046,
	646, 646, 2005, 4534, 2006, 646, 646, 2005, 646, 3044,
	790, 790, 653, 2005, 790, 1158, 1382, 1383, 1384, 1385,
	4532, 982, 1293, 2379, 4128, 692, 692, 4114, 3962, 1376,
	3933, 2139, 3702, 3656, 3655, 3515, 3477, 3275, 3178, 3074,
	3076, 2968, 2750, 2459, 3086, 3087, 3088, 1061, 1062, 2358,
	646, 1065, 2349, 1029, 648, 4448, 3884, 1266, 99, 2082,
	2082, 663, 3082, 1385, 3666, 4004, 1021, 3383, 1025, 1318,
	2163, 982, 1024, 3384, 96, 982, 1025, 1266, 1052, 1076,
	1024, 1025, 2082, 972, 941, 1024, 96, 1266, 653, 2082,
	2028, 653, 1076, 3643, 1081, 2091, 2166, 902, 692, 2907,
	4923, 93, 4764, 4755, 4539, 94, 4531, 1160, 4538, 4074,
	4530, 1407, 4529, 93, 1377, 646, 646, 94, 4710, 2046,
	4522, 4489, 4383, 4376, 98, 1275, 1276, 4353, 1275, 1276,
	4289, 4282, 4266, 653, 692, 692, 98, 1161, 1277, 2007,
	1162, 1273, 3501, 4237, 1163, 96, 653, 4162, 4148, 4146,
	900, 4132, 2026, 899, 3938, 2008, 2053, 668, 668, 3923,
	3918, 3913, 2017, 3912, 4711, 2773, 1164, 3902, 3901, 3900,
	939, 3895, 93, 2596, 2596, 93, 94, 1154, 1253, 94,
	4708, 3701, 3281, 3618, 2568, 2596, 1293, 3710, 3593, 3578,
	3568, 3325, 3567, 1293, 3566, 98, 3525, 3512, 98, 3337,
	1293, 3294, 3274, 3233, 1167, 3177, 692, 3101, 3093, 3092,
	3075, 3596, 3072, 1037, 1871, 1089, 2092, 3071, 3067, 3065,
	1019, 1165, 1252, 3064, 938, 1396, 3063, 1380, 1381, 1382,
	1383, 1384, 1385, 1325, 1386, 1387, 1388, 2164, 1166, 1261,
	3062, 3069, 3042, 1380, 1381, 1382, 1383, 1384, 1385, 1396,
	3070, 3030, 1038, 1341, 3076, 1075, 2949, 1257, 3086, 3087,
	3088, 3077, 3078, 3079, 3080, 3081, 3082, 1380, 1381, 1382,
	1383, 1384, 1385, 1176, 911, 1168, 2947, 1376, 911, 911,
	2944, 2943, 2547, 1103, 4984, 3089, 1022, 2223, 2262, 706,
	707, 708, 2103, 3325, 2452, 1870, 4959, 92, 700, 701,
	702, 703, 704, 705, 1050, 110, 941, 1380, 1381, 1382,
	1383, 1384, 1385, 940, 1083, 4955, 926, 1052, 927, 4855,
	4824, 1116, 917, 4797, 919, 918, 921, 4790, 1118, 1119,
	4732, 1082, 4672, 1088, 4749, 1377, 3040, 4477, 4635, 634,
	633, 3644, 3588, 1313, 1313, 1257, 1329, 4610, 3709, 1068,
	1030, 2167, 2568, 4607, 4537, 1212, 2750, 4536, 646, 2090,
	653, 2169, 4507, 653, 4283, 1048, 1049, 2047, 636, 4503,
	3181, 4434, 1110, 4397, 4350, 2165, 2034, 1227, 2035, 4349,
	4348, 1233, 4326, 2044, 1067, 4310, 4309, 646, 4308, 4299,
	2057, 4296, 3083, 3084, 3085, 653, 3970, 4178, 1870, 4159,
	1335, 3077, 3078, 3079, 3080, 3081, 3082, 1914, 1146, 1265,
	3990, 1152, 697, 1170, 2453, 692, 692, 692, 692, 3974,
	692, 3961, 3954, 3845, 3748, 3705, 653, 1270, 1271, 1272,
	1319, 1320, 1078, 2169, 3480, 646, 3689, 3681, 3678, 646,
	3651, 3620, 2049, 3613, 2129, 1380, 1381, 1382, 1383, 1384,
	1385, 3461, 3360, 2102, 3359, 3354, 1278, 2150, 3076, 1914,
	1032, 2086, 3086, 3087, 3088, 646, 2025, 692, 2004, 3168,
	3167, 3123, 2965, 3037, 3883, 646, 3021, 3019, 2444, 2926,
	2089, 646, 2869, 2770, 4190, 1078, 2692, 2610, 2450, 1038,
	2491, 2475, 655, 92, 1193, 2334, 2188, 1305, 2068, 1302,
	646, 2059, 3642, 646, 1910, 1211, 1908, 1907, 1906, 653,
	1905, 1230, 1904, 696, 1234, 1235, 1903, 1902, 1901, 1900,
	1250, 3461, 1899, 1898, 1289, 3076, 1897, 1896, 2045, 3086,
	3087, 3088, 646, 653, 1895, 1894, 2129, 2129, 2129, 1893,
	2196, 1282, 1283, 2908, 2909, 1286, 1892, 1891, 1890, 1889,
	1888, 3083, 3084, 3085, 646, 646, 97, 3219, 1887, 2185,
	3077, 3078, 3079, 3080, 3081, 3082, 1886, 1885, 97, 92,
	1033, 1883, 692, 692, 692, 692, 692, 1882, 1881, 1873,
	3076, 2027, 692, 692, 3086, 3087, 3088, 653, 653, 1872,
	692, 653, 1323, 2908, 2909, 2149, 3509, 1319, 1320, 1025,
	1871, 2201, 1866, 1024, 1281, 2204, 2205, 1266, 1268, 4709,
	732, 1874, 1181, 3357, 732, 732, 901, 1346, 1028, 1354,
	1353, 2069, 902, 766, 1372, 4090, 1373, 97, 2081, 2019,
	3240, 2073, 2189, 646, 1380, 1381, 1382, 1383, 1384, 1385,
	92, 1092, 3599, 92, 1407, 3592, 2685, 1377, 2569, 1078,
	1229, 1389, 1390, 1391, 1275, 1276, 1092, 2287, 2288, 3165,
	2974, 2146, 2110, 2009, 4911, 3060, 2010, 2161, 2119, 4242,
	2015, 2354, 2007, 3401, 2140, 2158, 2160, 2012, 2016, 2011,
	3825, 2013, 1078, 3820, 2238, 2014, 1400, 1401, 2008, 3411,
	2851, 2847, 2321, 2211, 2278, 2017, 2278, 2159, 2238, 646,
	2278, 2278, 2200, 1909, 4442, 4441, 646, 4117, 4019, 692,
	4659, 632, 2002, 3057, 1210, 2474, 3287, 3257, 2055, 2212,
	2130, 108, 4235, 2448, 3253, 1911, 2208, 2209, 1143, 3403,
	2142, 4603, 4602, 2133, 2344, 2345, 2346, 2083, 1918, 4440,
	3076, 1157, 2787, 2060, 3086, 3087, 3088, 913, 4433, 3786,
	3688, 2775, 2774, 2356, 1407, 2257, 3508, 1377, 2232, 2087,
	4831, 4049, 4261, 4912, 4382, 3083, 3084, 3085, 1349, 622,
	2235, 1040, 102, 1878, 3077, 3078, 3079, 3080, 3081, 3082,
	4134, 3925, 2007, 3924, 732, 3496, 620, 2072, 2449, 674,
	1918, 2708, 1918, 2110, 2282, 1213, 2137, 2138, 2008, 2703,
	1407, 101, 2675, 1377, 2214, 2017, 676, 2218, 1159, 1104,
	1056, 891, 2130, 2130, 2130, 732, 2325, 1407, 839, 3352,
	1377, 732, 1078, 1143, 2250, 3363, 77, 4241, 2007, 884,
	76, 78, 674, 2156, 2261, 784, 2708, 4272, 2327, 2702,
	96, 2267, 1213, 839, 2008, 2007, 3585, 102, 3495, 676,
	2709, 2017, 2110, 2341, 2343, 1380, 1381, 1382, 1383, 1384,
	1385, 2008, 1188, 4463, 102, 3311, 4062, 93, 2017, 3507,
	1407, 94, 3291, 1377, 1863, 3506, 101, 1389, 1390, 1391,
	139, 4255, 2251, 2252, 2253, 1911, 2555, 4254, 4003, 1407,
	98, 3364, 1377, 101, 1349, 2709, 2015, 80, 2007, 3796,
	2319, 3657, 1099, 2012, 2016, 2011, 2280, 2013, 1064, 4381,
	2284, 2285, 2283, 3273, 2008, 75, 4262, 2007, 2121, 2800,
	2995, 2017, 889, 815, 2313, 2303, 682, 757, 1189, 2172,
	2155, 1158, 2397, 2008, 2348, 2326, 2657, 2659, 2658, 2854,
	2017, 2178, 2177, 2001, 2798, 682, 732, 4776, 3760, 629,
	2499, 618, 114, 905, 3869, 3474, 2748, 2336, 2337, 4040,
	2338, 4271, 4656, 4619, 3783, 3259, 2984, 2799, 2983, 3083,
	3084, 3085, 4516, 4515, 2710, 4050, 1301, 139, 3077, 3078,
	3079, 3080, 3081, 3082, 1322, 1322, 2982, 1322, 2981, 773,
	2176, 772, 2797, 3787, 3366, 82, 4775, 771, 4750, 770,
	4101, 3813, 1299, 3810, 2367, 732, 3785, 732, 732, 732,
	732, 2373, 1258, 2850, 2194, 3350, 1262, 2190, 4893, 2710,
	2154, 3798, 3447, 1160, 2786, 1350, 2359, 683, 4612, 2290,
	4163, 1190, 84, 3835, 4892, 4268, 3083, 3084, 3085, 4267,
	2385, 2396, 2357, 2384, 3220, 3077, 3078, 3079, 3080, 3081,
	3082, 2021, 1287, 1161, 4613, 3292, 1162, 4473, 3255, 2375,
	1163, 2022, 2153, 4753, 2143, 898, 4632, 4288, 1157, 3258,
	4250, 4037, 2053, 1245, 4031, 2369, 3867, 2952, 1407, 3804,
	2902, 1377, 1164, 2023, 3393, 2716, 3390, 665, 3389, 1087,
	4063, 3083, 3084, 3085, 2143, 3331, 3206, 4456, 1351, 1243,
	3077, 3078, 3079, 3080, 3081, 3082, 2007, 4830, 4815, 2988,
	4678, 140, 2809, 1298, 679, 1085, 3795, 2187, 3197, 1918,
	1167, 3305, 2008, 1093, 4240, 2554, 2143, 2143, 2173, 2017,
	2376, 2896, 4660, 2143, 2447, 1159, 2143, 1165, 1093, 2175,
	2174, 677, 2143, 2143, 2143, 3846, 2143, 1237, 3254, 1396,
	3060, 1350, 2277, 3431, 1166, 2914, 3788, 3350, 1386, 1387,
	1388, 1240, 2880, 1207, 2913, 3434, 2237, 1380, 1381, 1382,
	1383, 1384, 1385, 2273, 1352, 3055, 2912, 1248, 2911, 2272,
	2237, 2328, 88, 2071, 2893, 2892, 1348, 4006, 2171, 2700,
	3256, 1168, 1041, 2243, 2502, 4315, 4658, 1300, 79, 3365,
	3371, 87, 675, 697, 2556, 81, 1231, 3198, 140, 1226,
	1242, 85, 2446, 680, 1209, 1208, 1203, 86, 1194, 1192,
	2756, 1185, 1184, 1183, 1351, 1179, 1084, 176, 2266, 1205,
	4778, 2265, 2264, 1186, 3309, 4719, 3308, 3726, 3635, 3897,
	83, 2192, 1322, 2503, 2145, 675, 1322, 1322, 3822, 2169,
	2144, 3083, 3084, 3085, 2701, 4677, 1107, 3836, 1158, 3407,
	3077, 3078, 3079, 3080, 3081, 3082, 1858, 665, 3404, 681,
	4373, 2465, 3225, 138, 3470, 137, 4333, 1380, 1381, 1382,
	1383, 1384, 1385, 3503, 3007, 4468, 684, 2504, 681, 4166,
	2501, 686, 1035, 2540, 1244, 1069, 2534, 2197, 2207, 2788,
	1352, 888, 2660, 3766, 696, 1143, 4720, 2728, 664, 3198,
	1086, 4281, 1191, 2270, 2434, 2435, 2436, 2437, 2967, 760,
	2118, 3391, 97, 1380, 1381, 1382, 1383, 1384, 1385, 2816,
	2895, 4777, 1206, 3785, 3433, 92, 3727, 4167, 692, 2807,
	1380, 1381, 1382, 1383, 1384, 1385, 1247, 4474, 2802, 4676,
	1160, 4746, 2329, 1339, 1039, 1359, 3209, 2330, 2564, 2368,
	2566, 2333, 4745, 2505, 2034, 2335, 3888, 3865, 2589, 2589,
	138, 2197, 137, 2672, 662, 1396, 2150, 692, 2070, 890,
	1161, 802, 3471, 1162, 1386, 1387, 1388, 1163, 3887, 915,
	142, 4249, 1069, 1380, 1381, 1382, 1383, 1384, 1385, 2053,
	3659, 653, 646, 2350, 2352, 4002, 2731, 4475, 4014, 1164,
	3837, 2680, 1380, 1381, 1382, 1383, 1384, 1385, 3630, 653,
	4747, 2691, 3207, 4620, 4066, 3371, 2181, 2063, 1036, 692,
	2741, 653, 4466, 2150, 2181, 3392, 636, 4374, 2196, 653,
	2062, 4457, 3766, 4384, 2500, 663, 3356, 1167, 678, 2371,
	2371, 4606, 1236, 2744, 692, 1238, 3304, 4313, 646, 4512,
	81, 3976, 2489, 3660, 1165, 1914, 1239, 2463, 2339, 2186,
	4941, 653, 653, 653, 3323, 646, 646, 3242, 4036, 2150,
	3793, 1166, 653, 4940, 2653, 3208, 2745, 898, 664, 2778,
	653, 2782, 653, 653, 3975, 3840, 4496, 4617, 653, 2878,
	2735, 653, 653, 2734, 1866, 653, 3780, 653, 653, 2771,
	4616, 646, 4051, 2478, 2714, 2229, 2754, 2755, 1168, 3823,
	2644, 653, 653, 646, 3767, 653, 653, 2451, 1880, 2644,
	3408, 4372, 1060, 4480, 1204, 2729, 3432, 692, 692, 3405,
	2471, 4615, 653, 653, 2064, 2198, 933, 646, 1246, 2199,
	4043, 646, 2792, 653, 662, 653, 653, 653, 653, 653,
	2519, 3318, 653, 803, 2457, 4891, 653, 4609, 2725, 1911,
	653, 653, 4065, 2543, 2538, 653, 653, 1911, 2542, 653,
	653, 4674, 2180, 3768, 3695, 653, 653, 653, 4721, 3518,
	2180, 653, 4495, 653, 2470, 1219, 653, 653, 2749, 933,
	935, 1380, 1381, 1382, 1383, 1384, 1385, 2842, 219, 2592,
	653, 2676, 2727, 1360, 4738, 2751, 4453, 653, 4064, 2198,
	653, 804, 2571, 2199, 1338, 663, 3769, 653, 653, 3686,
	3696, 1042, 2279, 653, 692, 790, 2711, 2642, 790, 697,
	790, 790, 933, 935, 886, 2835, 4292, 3868, 785, 3297,
	1337, 2838, 2839, 767, 719, 1115, 3760, 4592, 2018, 896,
	3858, 1215, 2296, 3767, 2572, 3245, 2928, 1070, 2933, 2934,
	2740, 692, 788, 3857, 2724, 799, 896, 799, 799, 916,
	3653, 4744, 2874, 2766, 2662, 2663, 1303, 1197, 3694, 4819,
	2757, 1197, 2591, 2591, 2567, 3539, 1280, 4930, 2888, 1269,
	2595, 2890, 2891, 3052, 929, 2768, 4231, 2932, 2853, 4936,
	3542, 2693, 2694, 2695, 2696, 2697, 1284, 1285, 2589, 3841,
	3750, 3929, 3768, 3009, 4844, 646, 3012, 911, 4551, 4989,
	4176, 3013, 3911, 4164, 3128, 3054, 2678, 2889, 3014, 2679,
	696, 2677, 4993, 2682, 3930, 2810, 2300, 3011, 2299, 3972,
	3781, 4228, 4416, 4992, 4988, 4966, 2298, 1249, 934, 4946,
	4945, 4981, 4965, 2848, 1218, 3769, 4980, 2852, 4417, 2753,
	4971, 4968, 2726, 3782, 4969, 636, 4972, 2591, 4948, 2730,
	4970, 697, 4967, 3317, 4947, 2460, 2464, 4486, 2466, 3345,
	3711, 1297, 1313, 4042, 2590, 2590, 1918, 2759, 1178, 4926,
	1216, 2977, 724, 1095, 4927, 3039, 3034, 4996, 4987, 2297,
	4986, 934, 2971, 2530, 2531, 2532, 2533, 2728, 2906, 3693,
	2825, 4943, 4522, 885, 2831, 2544, 1221, 786, 3343, 4929,
	1292, 1918, 1220, 718, 3685, 724, 4257, 4000, 4232, 1114,
	3540, 2840, 724, 1102, 2845, 2826, 3321, 3300, 3053, 3020,
	3204, 3115, 3751, 636, 934, 3010, 1196, 4950, 2723, 2953,
	1196, 2927, 2935, 4949, 4951, 4952, 2686, 2936, 929, 2136,
	1884, 1347, 1232, 4415, 2856, 2855, 1066, 4566, 4912, 2590,
	4874, 4800, 696, 1918, 4799, 4935, 4899, 3119, 4908, 4904,
	4698, 2873, 3619, 4902, 4975, 4903, 4905, 4837, 732, 2034,
	4700, 4187, 1918, 4693, 4034, 3986, 3601, 3231, 3152, 3152,
	790, 2712, 2589, 3152, 3152, 3152, 2731, 3109, 3342, 2661,
	2606, 2183, 1368, 3116, 2897, 1308, 2898, 3176, 3942, 2899,
	4695, 2901, 1291, 1113, 2898, 646, 2227, 646, 646, 4694,
	2230, 2044, 646, 646, 2239, 1101, 4696, 2162, 905, 2229,
	2594, 4706, 2925, 4704, 3939, 732, 732, 4219, 4409, 4208,
	4220, 4407, 1217, 4221, 4204, 692, 1214, 3213, 219, 2492,
	2493, 2494, 2495, 4410, 4571, 4572, 2980, 4712, 4713, 2985,
	4171, 4222, 4901, 2242, 4906, 4934, 4570, 4575, 732, 2951,
	636, 2956, 2228, 4172, 3127, 732, 2957, 911, 1222, 4199,
	4574, 2960, 3967, 653, 2959, 3904, 646, 2814, 2373, 4711,
	2721, 3126, 3004, 2560, 2561, 3043, 3734, 4626, 4224, 4625,
	3, 2970, 3046, 2969, 2958, 4877, 2231, 4697, 4223, 3185,
	4705, 653, 4201, 4202, 104, 105, 106, 107, 4225, 653,
	4389, 653, 2591, 646, 646, 2729, 2813, 653, 2382, 2383,
	2815, 3126, 4625, 4626, 3173, 3174, 2992, 3228, 3735, 2994,
	4386, 3243, 3372, 732, 3005, 4210, 4203, 2086, 4206, 4207,
	4209, 4205, 2910, 4198, 1045, 3210, 3211, 2812, 2725, 911,
	911, 2129, 3481, 3482, 3319, 3137, 4711, 653, 3024, 4554,
	4553, 3736, 3737, 3738, 3951, 3143, 3148, 3146, 3147, 3145,
	3188, 3141, 3144, 3950, 3221, 3033, 3036, 3124, 653, 4388,
	4387, 4170, 3047, 3048, 887, 826, 713, 2971, 4796, 3379,
	656, 3755, 2727, 2565, 756, 100, 2551, 205, 653, 653,
	653, 653, 3373, 4942, 1860, 3316, 4277, 4833, 3330, 3265,
	3332, 3001, 4514, 2999, 2590, 2777, 3437, 2997, 4026, 2998,
	3000, 3862, 3160, 3861, 3628, 3313, 3098, 3099, 3100, 4834,
	2245, 3302, 3303, 3607, 3148, 3146, 3147, 3145, 4226, 4227,
	2244, 3312, 2088, 2038, 2037, 3121, 3609, 4995, 653, 653,
	2550, 653, 653, 653, 2724, 2773, 212, 3952, 3604, 3603,
	3293, 3132, 3336, 3149, 3131, 3133, 3157, 103, 3161, 3162,
	3163, 4979, 3156, 3159, 3230, 4978, 653, 3155, 617, 3193,
	619, 621, 646, 4977, 4924, 3175, 3230, 4431, 3246, 2722,
	3202, 3328, 3429, 4472, 4624, 653, 4622, 3991, 2196, 3169,
	947, 3909, 3908, 653, 2591, 3743, 2591, 3199, 3222, 3224,
	3652, 3535, 2779, 3534, 3205, 3671, 3276, 2940, 1918, 2948,
	3396, 3397, 2881, 2612, 1918, 3214, 2558, 3229, 3223, 2720,
	2170, 692, 692, 2122, 3285, 2117, 2438, 1259, 609, 1224,
	1223, 692, 1201, 1108, 3232, 2457, 1020, 1375, 670, 666,
	3264, 2966, 2726, 653, 3874, 3484, 1322, 2472, 4769, 2730,
	4685, 4684, 1322, 1322, 3262, 4576, 3927, 4144, 4102, 646,
	911, 3978, 3283, 3284, 3875, 3288, 3814, 3811, 3672, 646,
	3541, 646, 3335, 3237, 2206, 2203, 646, 3280, 937, 935,
	3438, 2979, 3369, 3310, 3298, 3473, 2355, 3170, 3143, 3148,
	3146, 3147, 3145, 732, 3141, 3144, 2590, 2962, 2590, 3143,
	3148, 3146, 3147, 3145, 2976, 3141, 3144, 3479, 4012, 3334,
	2574, 4011, 4857, 3041, 4858, 3472, 3329, 2130, 3327, 3017,
	3002, 3440, 4264, 3441, 3442, 658, 2042, 2961, 3022, 2041,
	4052, 3523, 3344, 3351, 1322, 3402, 3502, 4053, 2513, 3358,
	3166, 3362, 3068, 3006, 2387, 3186, 4054, 669, 4758, 4341,
	4338, 4119, 4097, 4092, 3412, 4091, 922, 3832, 1918, 3423,
	3831, 3824, 4787, 3819, 3732, 4055, 3453, 3452, 3451, 3450,
	3449, 3448, 3444, 3443, 3435, 732, 732, 3424, 3422, 3410,
	3409, 3406, 3340, 3339, 3398, 3338, 2993, 2441, 636, 2991,
	2922, 2894, 2875, 1322, 2423, 732, 732, 2440, 2441, 4583,
	2289, 2286, 3103, 2281, 2274, 732, 2963, 2963, 2260, 2256,
	2434, 2435, 2436, 2437, 2255, 3288, 1911, 3003, 2254, 2249,
	2248, 2564, 2241, 2240, 2226, 2225, 3427, 2034, 2224, 2222,
	2195, 2589, 2191, 2184, 2589, 2039, 2399, 2332, 2400, 2987,
	3415, 3457, 3612, 2946, 3420, 3152, 3152, 3152, 3152, 3152,
	3462, 2945, 914, 903, 2331, 3574, 4451, 2470, 2937, 2420,
	2938, 905, 2939, 905, 4821, 2941, 2418, 2421, 2417, 2150,
	2419, 4820, 3640, 3686, 2110, 3469, 4150, 2950, 973, 905,
	653, 4149, 4081, 3456, 982, 4077, 3997, 3906, 3905, 3658,
	3192, 2870, 2867, 2863, 1918, 1918, 1918, 3464, 4044, 3023,
	3465, 3307, 2752, 2259, 2217, 1229, 672, 1151, 1038, 1145,
	4895, 3594, 3595, 2456, 4137, 976, 641, 2233, 4025, 977,
	646, 975, 2044, 2455, 905, 143, 2232, 3488, 3489, 3490,
	3491, 4074, 687, 653, 4138, 3700, 642, 4921, 4920, 653,
	2609, 3988, 692, 3528, 3529, 3530, 1114, 3527, 2955, 646,
	4461, 3680, 4460, 1254, 732, 3504, 3844, 909, 4071, 3982,
	1860, 3455, 3347, 2765, 1255, 2733, 2691, 3645, 2613, 3687,
	3252, 2112, 692, 3641, 3650, 2104, 2054, 3527, 3251, 3257,
	2048, 3544, 1111, 3648, 1100, 3517, 3253, 1094, 3521, 1090,
	1072, 3548, 4779, 3536, 3537, 4196, 732, 658, 4325, 4324,
	3859, 3533, 3757, 3426, 3598, 646, 3376, 653, 3374, 3730,
	3639, 3346, 3565, 3314, 653, 2589, 2744, 3546, 3189, 2717,
	2713, 3713, 3745, 3723, 2611, 2607, 2342, 732, 2340, 2220,
	653, 653, 2971, 2216, 2123, 2108, 2100, 2150, 2098, 2644,
	2080, 3761, 1296, 1295, 1294, 2044, 3677, 653, 2044, 2745,
	2044, 3777, 1288, 1263, 3265, 1260, 3248, 2644, 2644, 3573,
	1256, 1251, 1241, 3587, 3589, 3799, 3590, 653, 1202, 3707,
	3772, 3602, 1172, 1169, 3605, 3597, 1322, 1322, 1150, 1144,
	3776, 3606, 3679, 653, 3778, 3600, 3708, 2457, 3610, 3611,
	3721, 3625, 653, 653, 653, 4079, 4078, 653, 3740, 2919,
	653, 653, 653, 653, 3715, 3716, 2079, 3623, 1060, 875,
	3784, 4792, 4688, 653, 3631, 653, 4629, 653, 4618, 3647,
	1074, 4533, 4305, 4327, 4243, 2792, 653, 3803, 4186, 1322,
	3614, 3615, 3616, 3617, 653, 653, 4082, 4038, 4024, 653,
	653, 653, 653, 653, 3789, 3792, 3674, 4015, 3860, 3184,
	3667, 2738, 2732, 3661, 1304, 2591, 2642, 3669, 2591, 2327,
	2135, 2029, 2003, 3739, 3301, 3673, 3682, 3675, 2353, 3749,
	982, 697, 3049, 3050, 982, 2971, 3664, 2351, 3665, 646,
	646, 646, 646, 982, 2964, 3676, 1918, 4933, 3697, 3802,
	982, 3260, 4913, 4756, 2457, 3264, 905, 3265, 3719, 4492,
	3698, 2736, 3322, 4452, 2202, 3627, 2020, 907, 1326, 3704,
	3998, 4263, 4736, 3706, 4258, 4005, 4455, 3712, 4260, 4611,
	4256, 2110, 3714, 2061, 4251, 3200, 2622, 3259, 3203, 2616,
	3722, 3190, 1911, 2639, 2635, 604, 605, 211, 2234, 3872,
	3475, 3756, 2667, 3741, 2067, 2066, 4270, 3744, 4269, 3747,
	3261, 4013, 4479, 4010, 3838, 2739, 2879, 2590, 3731, 3733,
	2590, 3320, 685, 2737, 1106, 2271, 4491, 3728, 2921, 2699,
	2301, 3278, 696, 3277, 39, 38, 37, 3790, 3791, 3794,
	36, 35, 34, 3777, 3015, 3016, 33, 32, 59, 58,
	57, 3797, 653, 3801, 2589, 2589, 3513, 56, 2589, 55,
	54, 3943, 3806, 53, 653, 52, 51, 50, 49, 3152,
	48, 790, 47, 46, 45, 44, 3778, 43, 42, 732,
	3255, 3375, 41, 3377, 3821, 40, 31, 30, 29, 3826,
	28, 3258, 3850, 2150, 692, 2906, 27, 26, 3264, 2591,
	2591, 25, 24, 23, 3959, 22, 21, 20, 2718, 69,
	3849, 3960, 2350, 2352, 3989, 68, 67, 66, 65, 64,
	3090, 3091, 646, 63, 5, 62, 3670, 3977, 60, 17,
	2074, 125, 2044, 1043, 732, 2591, 3863, 3569, 732, 732,
	2084, 2388, 3973, 3367, 4029, 3348, 3758, 179, 2302, 1147,
	4810, 692, 2790, 4593, 3634, 3983, 112, 4467, 3250, 3247,
	2150, 3765, 653, 3425, 3632, 4497, 3774, 3638, 2602, 3955,
	3254, 3636, 221, 2599, 3992, 4873, 790, 4900, 4565, 3056,
	3538, 3051, 2486, 4701, 4405, 3981, 4188, 4691, 3993, 3899,
	4185, 3957, 2688, 95, 2744, 4385, 4169, 2549, 4023, 2036,
	74, 2590, 2590, 3910, 3907, 640, 639, 4687, 2150, 942,
	3368, 4058, 3256, 4041, 4421, 4587, 1918, 4211, 1918, 3969,
	4200, 3626, 4032, 109, 3945, 3926, 1157, 2745, 2040, 1918,
	3966, 3965, 3995, 4573, 4569, 4060, 4568, 2590, 3591, 2557,
	4057, 3963, 2570, 2024, 16, 15, 14, 11, 3937, 3764,
	3467, 3936, 3771, 2644, 3773, 4030, 10, 9, 8, 7,
	4366, 653, 4364, 4365, 653, 4363, 2445, 699, 1404, 2374,
	653, 653, 653, 936, 3956, 653, 653, 653, 1367, 928,
	4020, 4021, 653, 653, 4371, 3522, 1364, 3896, 4357, 1877,
	859, 858, 4046, 1159, 3947, 3948, 3984, 730, 3953, 843,
	845, 3784, 4107, 861, 860, 844, 3971, 1267, 730, 730,
	842, 841, 653, 653, 4075, 867, 653, 3460, 653, 3932,
	3584, 4165, 3575, 792, 2512, 2508, 2497, 2518, 792, 730,
	3920, 2461, 4001, 792, 966, 792, 4018, 965, 2468, 3032,
	4017, 4008, 730, 730, 1875, 960, 981, 961, 956, 1358,
	1355, 4136, 2811, 865, 865, 3378, 730, 730, 730, 3399,
	4086, 2817, 653, 4033, 4513, 2918, 1411, 2591, 2498, 1406,
	2, 4094, 1, 0, 4096, 0, 0, 0, 2591, 2591,
	0, 4045, 2591, 0, 0, 0, 4047, 0, 0, 0,
	730, 0, 0, 653, 0, 2591, 0, 0, 0, 0,
	0, 0, 0, 2589, 0, 653, 0, 0, 0, 0,
	0, 0, 4056, 0, 0, 0, 1158, 0, 0, 0,
	0, 0, 0, 0, 0, 646, 0, 0, 0, 4233,
	0, 3640, 4080, 4083, 0, 0, 2906, 646, 0, 0,
	4084, 3777, 646, 4087, 1322, 0, 2906, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 653, 0, 4216, 0, 2590,
	0, 4085, 0, 4213, 3778, 2350, 2352, 653, 0, 0,
	2590, 2590, 653, 0, 2590, 646, 0, 0, 653, 0,
	0, 653, 0, 0, 3730, 0, 4236, 2590, 0, 0,
	790, 4244, 0, 692, 0, 4297, 0, 0, 1160, 0,
	4181, 0, 4113, 0, 1322, 0, 0, 4291, 2591, 0,
	0, 3777, 697, 0, 692, 692, 0, 0, 4303, 0,
	0, 0, 0, 0, 0, 4123, 4238, 799, 1161, 1918,
	0, 1162, 653, 653, 4320, 1163, 0, 0, 653, 4214,
	3776, 0, 653, 4143, 3778, 0, 4145, 2053, 4274, 0,
	0, 0, 697, 790, 0, 0, 732, 1164, 0, 3639,
	653, 0, 4234, 4177, 4160, 0, 4016, 4229, 4168, 4147,
	0, 4294, 4306, 4217, 61, 4359, 4335, 1322, 19, 0,
	4318, 4345, 18, 0, 0, 4193, 0, 3498, 3499, 4245,
	799, 4194, 4311, 4197, 0, 1167, 0, 3921, 4253, 4278,
	0, 0, 0, 0, 4273, 0, 0, 0, 91, 0,
	2590, 4300, 1165, 696, 0, 3777, 4252, 0, 4298, 653,
	4343, 13, 0, 12, 0, 790, 0, 4390, 4400, 1166,
	0, 4317, 2971, 4180, 4314, 732, 4316, 0, 732, 0,
	4328, 1322, 0, 0, 4391, 0, 4329, 0, 3778, 0,
	0, 0, 4340, 696, 3265, 0, 0, 0, 3959, 0,
	0, 0, 4342, 4347, 0, 4344, 1168, 0, 4427, 0,
	0, 0, 3549, 3550, 3551, 3552, 3553, 3554, 3555, 3556,
	3557, 3558, 3559, 3560, 3561, 0, 0, 0, 0, 4422,
	0, 4428, 0, 0, 0, 4377, 0, 0, 0, 2361,
	4248, 911, 0, 4380, 0, 646, 0, 0, 0, 4392,
	0, 0, 653, 0, 4411, 4412, 0, 2591, 4413, 4414,
	4436, 4396, 0, 0, 4393, 4458, 4395, 0, 0, 653,
	0, 0, 0, 4465, 0, 0, 0, 0, 790, 0,
	0, 4438, 2589, 0, 0, 0, 0, 0, 0, 0,
	0, 4464, 3866, 0, 0, 2591, 646, 0, 0, 4482,
	0, 4432, 4437, 0, 0, 4487, 4423, 0, 0, 0,
	4435, 0, 0, 0, 0, 4490, 4443, 0, 4446, 653,
	4439, 4447, 653, 0, 0, 0, 0, 0, 0, 4454,
	4445, 0, 4354, 4356, 1918, 3264, 4499, 0, 0, 0,
	0, 0, 792, 792, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4484, 0, 0, 3995, 792, 2590,
	4518, 4488, 0, 0, 4494, 4493, 4481, 2044, 4508, 0,
	2034, 4485, 0, 0, 0, 2591, 0, 0, 2691, 0,
	0, 0, 792, 792, 0, 0, 792, 4567, 0, 4510,
	0, 4509, 3690, 0, 0, 0, 2044, 2590, 2044, 0,
	0, 4462, 0, 0, 4523, 4526, 4527, 0, 0, 0,
	0, 0, 0, 0, 0, 4595, 0, 0, 0, 4555,
	4591, 0, 0, 0, 0, 0, 636, 0, 0, 4546,
	4547, 4590, 0, 0, 0, 4502, 4564, 4504, 0, 4506,
	0, 0, 4589, 0, 0, 0, 0, 0, 4596, 0,
	0, 4598, 0, 4213, 911, 4557, 4562, 0, 0, 4449,
	4604, 692, 4600, 0, 0, 0, 732, 653, 0, 865,
	0, 0, 4586, 0, 0, 0, 0, 2590, 0, 2591,
	4599, 0, 0, 4601, 2044, 0, 0, 0, 697, 2591,
	0, 0, 0, 0, 0, 4631, 653, 653, 0, 0,
	0, 4608, 0, 0, 0, 0, 4614, 0, 0, 0,
	0, 0, 0, 4359, 0, 0, 0, 0, 0, 0,
	0, 4623, 1322, 4621, 4627, 0, 0, 0, 0, 4633,
	0, 1322, 1322, 0, 0, 4649, 0, 0, 0, 0,
	4400, 0, 4646, 0, 0, 0, 0, 0, 4675, 4686,
	0, 4525, 0, 4525, 4525, 0, 4648, 4650, 4652, 0,
	0, 0, 0, 0, 2044, 4661, 0, 0, 0, 4111,
	4112, 0, 4667, 4669, 4115, 4116, 0, 732, 4668, 0,
	4718, 2590, 0, 0, 4681, 4682, 0, 0, 3777, 696,
	0, 2590, 0, 4690, 0, 4737, 0, 790, 790, 730,
	653, 4727, 4734, 730, 730, 4560, 2591, 0, 0, 0,
	4731, 0, 0, 653, 0, 4729, 0, 4724, 4725, 0,
	4643, 3778, 4645, 4728, 4647, 4739, 4740, 0, 4088, 4089,
	0, 0, 0, 0, 799, 799, 792, 653, 792, 0,
	792, 4763, 0, 790, 4730, 4759, 4754, 4761, 4733, 0,
	1918, 792, 792, 792, 792, 792, 0, 0, 4106, 0,
	4751, 4748, 792, 2196, 4780, 2044, 2044, 4499, 4757, 4783,
	0, 4770, 732, 0, 0, 4766, 4767, 4765, 4762, 0,
	799, 792, 0, 0, 4120, 0, 2034, 0, 0, 0,
	2564, 4741, 0, 0, 0, 0, 0, 0, 4774, 0,
	0, 0, 0, 4794, 4595, 692, 692, 0, 2590, 4375,
	0, 0, 0, 3777, 4784, 790, 0, 4805, 0, 4789,
	4795, 0, 4379, 0, 0, 4802, 4803, 1916, 792, 4809,
	0, 792, 4807, 4589, 653, 4793, 4798, 4596, 0, 2591,
	0, 0, 4811, 4806, 0, 911, 3778, 0, 4801, 0,
	692, 0, 4813, 0, 4808, 0, 0, 0, 4818, 0,
	0, 0, 0, 2487, 4822, 4826, 0, 1918, 222, 865,
	0, 4840, 0, 730, 2514, 4825, 865, 0, 0, 1916,
	0, 1916, 0, 0, 1918, 4832, 2539, 0, 0, 4827,
	732, 0, 0, 0, 0, 0, 0, 4849, 4842, 4851,
	0, 0, 0, 0, 730, 0, 0, 0, 0, 4848,
	730, 4552, 0, 0, 0, 4865, 4866, 4867, 4400, 4856,
	4854, 0, 0, 4850, 1322, 4843, 4847, 4863, 692, 4864,
	0, 0, 4875, 4876, 3777, 4861, 4868, 0, 4880, 0,
	4581, 2590, 4584, 0, 0, 4882, 0, 0, 4879, 0,
	0, 4840, 0, 4881, 0, 0, 0, 4859, 4860, 4884,
	865, 0, 0, 4883, 0, 0, 0, 3778, 4771, 4910,
	4907, 4915, 4914, 0, 4500, 4501, 0, 0, 0, 0,
	0, 0, 4916, 0, 4919, 0, 0, 0, 4890, 0,
	0, 4922, 0, 731, 0, 0, 0, 0, 0, 0,
	790, 0, 4931, 4932, 731, 731, 4937, 0, 0, 4938,
	0, 0, 2591, 0, 0, 0, 653, 4954, 0, 0,
	4953, 790, 790, 4962, 4957, 731, 4964, 0, 4644, 0,
	0, 4958, 1863, 0, 0, 730, 4840, 4939, 731, 731,
	4973, 4974, 0, 4976, 0, 0, 0, 1322, 0, 4960,
	4961, 4890, 731, 731, 731, 4964, 4982, 0, 799, 799,
	0, 0, 0, 0, 865, 4840, 865, 0, 4991, 792,
	4990, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 731, 0, 0, 0,
	0, 865, 4890, 0, 730, 0, 730, 730, 730, 730,
	0, 0, 0, 732, 0, 0, 0, 0, 4714, 0,
	0, 0, 0, 1407, 2590, 0, 1377, 0, 0, 0,
	1389, 1390, 1391, 0, 0, 0, 0, 0, 2591, 0,
	0, 0, 2009, 0, 0, 2010, 0, 2591, 0, 2015,
	0, 2007, 0, 0, 0, 4872, 2012, 2016, 2011, 0,
	2013, 0, 0, 0, 2014, 1400, 1401, 2008, 0, 0,
	0, 792, 0, 0, 2017, 0, 0, 0, 792, 792,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 792,
	865, 732, 0, 792, 792, 792, 792, 792, 792, 792,
	792, 792, 792, 792, 792, 792, 792, 792, 792, 0,
	792, 4670, 4671, 0, 0, 0, 0, 0, 1916, 4781,
	4782, 0, 0, 0, 0, 0, 0, 0, 1407, 0,
	0, 1377, 0, 0, 0, 1389, 1390, 1391, 0, 0,
	2590, 974, 0, 0, 0, 0, 0, 2009, 0, 2590,
	2010, 0, 0, 0, 2015, 0, 2007, 0, 0, 0,
	0, 2012, 2016, 2011, 0, 2013, 1918, 0, 2591, 2014,
	1400, 1401, 2008, 1407, 0, 2425, 1377, 0, 0, 2017,
	1389, 1390, 1391, 0, 0, 2429, 0, 2427, 0, 0,
	0, 2424, 2009, 2426, 2428, 2010, 0, 0, 0, 2015,
	0, 2007, 0, 0, 0, 0, 2012, 2016, 2011, 0,
	2013, 0, 0, 0, 2014, 1400, 1401, 2008, 0, 0,
	0, 0, 0, 0, 2017, 0, 0, 0, 0, 1918,
	0, 0, 1407, 0, 0, 1377, 0, 0, 0, 1389,
	1390, 1391, 0, 4640, 0, 2380, 0, 0, 0, 0,
	0, 2009, 0, 0, 2010, 0, 2382, 2383, 2015, 0,
	2007, 0, 0, 0, 0, 2012, 2016, 2011, 0, 2013,
	2590, 0, 0, 2014, 1400, 1401, 2008, 0, 0, 0,
	0, 0, 0, 2017, 0, 0, 0, 0, 0, 0,
	0, 0, 1918, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2438, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2514, 2514, 0, 1918, 1127, 0, 4404, 0, 0, 1128,
	0, 0, 0, 1137, 0, 1407, 0, 0, 1377, 0,
	0, 0, 1389, 1390, 1391, 0, 904, 906, 908, 912,
	0, 0, 0, 0, 2009, 0, 0, 2010, 0, 0,
	0, 2015, 4846, 2007, 0, 0, 0, 0, 2012, 2016,
	2011, 0, 2013, 0, 0, 0, 2014, 1400, 1401, 2008,
	0, 0, 0, 0, 1407, 0, 2017, 1377, 0, 4862,
	0, 1389, 1390, 1391, 2430, 1130, 2514, 2514, 0, 0,
	0, 0, 0, 2009, 0, 0, 2010, 0, 0, 0,
	2015, 0, 2007, 0, 0, 0, 0, 2012, 2016, 2011,
	0, 3094, 0, 0, 1136, 2014, 1400, 1401, 2008, 0,
	0, 0, 0, 0, 0, 2017, 0, 3095, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2434, 2435, 2436, 2437, 0, 0,
	0, 2431, 0, 0, 4680, 0, 0, 0, 1126, 0,
	0, 0, 0, 3096, 0, 0, 0, 0, 0, 1124,
	0, 0, 0, 0, 0, 0, 0, 0, 1396, 0,
	0, 0, 0, 0, 0, 1131, 0, 1386, 1387, 1388,
	0, 0, 0, 0, 0, 0, 1380, 1381, 1382, 1383,
	1384, 1385, 0, 3117, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1125, 0,
	1133, 0, 0, 0, 0, 0, 1132, 0, 0, 0,
	0, 0, 0, 792, 792, 0, 792, 0, 0, 0,
	0, 0, 0, 0, 792, 792, 792, 0, 4679, 4887,
	0, 0, 792, 0, 792, 792, 792, 792, 792, 792,
	792, 792, 792, 792, 792, 0, 792, 0, 792, 0,
	792, 1134, 0, 792, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1396, 0, 0, 0, 0, 0, 0,
	0, 0, 1386, 1387, 1388, 0, 0, 0, 0, 0,
	0, 1380, 1381, 1382, 1383, 1384, 1385, 0, 3104, 0,
	0, 0, 4887, 0, 0, 0, 1135, 0, 0, 0,
	0, 0, 0, 0, 0, 731, 0, 1138, 1396, 731,
	731, 0, 0, 0, 0, 0, 0, 1386, 1387, 1388,
	0, 0, 0, 0, 0, 0, 1380, 1381, 1382, 1383,
	1384, 1385, 0, 4887, 0, 0, 0, 0, 0, 0,
	2827, 0, 1140, 1139, 3576, 0, 0, 0, 792, 0,
	0, 0, 792, 792, 792, 792, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1396, 0, 0,
	0, 0, 0, 0, 0, 0, 1386, 1387, 1388, 0,
	792, 792, 0, 0, 0, 1380, 1381, 1382, 1383, 1384,
	1385, 0, 920, 0, 923, 0, 0, 0, 0, 0,
	0, 925, 865, 0, 0, 0, 3577, 0, 0, 0,
	0, 865, 0, 1407, 0, 0, 1377, 0, 0, 1129,
	1389, 1390, 1391, 0, 0, 1916, 0, 0, 0, 0,
	0, 0, 2009, 1917, 0, 2010, 0, 0, 0, 2015,
	0, 2007, 0, 0, 0, 0, 2012, 2016, 2011, 1143,
	2013, 0, 0, 0, 2014, 1400, 1401, 2008, 0, 0,
	1916, 0, 0, 0, 2017, 792, 0, 0, 4785, 4786,
	0, 0, 4788, 0, 0, 0, 0, 0, 865, 731,
	1396, 0, 0, 0, 0, 1917, 0, 1917, 0, 1386,
	1387, 1388, 0, 865, 0, 0, 0, 0, 1380, 1381,
	1382, 1383, 1384, 1385, 0, 0, 0, 0, 0, 0,
	731, 0, 1916, 2514, 2514, 0, 731, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 730, 0, 1396,
	0, 1916, 0, 0, 0, 0, 0, 0, 1386, 1387,
	1388, 0, 0, 0, 0, 0, 0, 1380, 1381, 1382,
	1383, 1384, 1385, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1127, 0, 0, 0, 0, 1128,
	0, 0, 0, 1137, 0, 792, 0, 0, 0, 0,
	0, 0, 0, 0, 730, 730, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2514, 2514,
	2514, 2514, 2514, 2514, 2514, 2514, 2514, 2514, 2514, 2514,
	2514, 0, 0, 0, 0, 0, 0, 730, 0, 0,
	0, 0, 0, 0, 730, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1130, 3579, 0, 0, 0,
	0, 731, 0, 0, 0, 0, 0, 792, 0, 865,
	792, 0, 792, 792, 0, 865, 0, 0, 0, 0,
	0, 0, 0, 0, 1136, 0, 0, 0, 912, 0,
	1307, 0, 912, 912, 0, 1327, 0, 792, 0, 0,
	0, 0, 1407, 0, 0, 1377, 0, 0, 3621, 1389,
	1390, 1391, 730, 0, 0, 1141, 0, 0, 0, 0,
	731, 792, 731, 731, 731, 731, 0, 0, 2015, 792,
	2007, 0, 0, 0, 0, 2012, 2016, 2011, 0, 2013,
	0, 0, 792, 2014, 1400, 1401, 2008, 0, 0, 0,
	792, 0, 0, 2017, 0, 0, 0, 0, 1126, 0,
	962, 73, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	792, 792, 0, 0, 0, 1131, 792, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2514, 0,
	0, 0, 792, 792, 0, 0, 0, 792, 0, 0,
	0, 0, 0, 0, 0, 0, 792, 0, 0, 0,
	1133, 0, 792, 0, 0, 0, 1132, 0, 0, 0,
	0, 0, 0, 792, 1917, 0, 0, 0, 0, 0,
	0, 0, 792, 792, 792, 0, 0, 0, 0, 0,
	0, 0, 635, 637, 792, 0, 0, 0, 0, 0,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 73,
	0, 1134, 0, 0, 0, 0, 0, 0, 792, 792,
	0, 0, 0, 0, 0, 792, 792, 792, 0, 0,
	792, 2107, 0, 0, 0, 0, 0, 1916, 0, 0,
	0, 792, 0, 1916, 0, 792, 0, 2134, 0, 792,
	0, 0, 0, 0, 0, 0, 1135, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1138, 0, 0,
	0, 0, 792, 0, 0, 0, 0, 792, 1396, 0,
	0, 0, 792, 0, 792, 0, 0, 1386, 1387, 1388,
	0, 0, 0, 0, 4814, 0, 1380, 1381, 1382, 1383,
	1384, 1385, 1140, 1139, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 865, 0, 0,
	0, 0, 730, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1407, 0, 0, 1377, 0, 0,
	0, 1389, 1390, 1391, 0, 2258, 865, 865, 2263, 0,
	0, 0, 0, 2009, 0, 865, 2010, 0, 0, 0,
	2015, 0, 2007, 0, 0, 0, 0, 2012, 2016, 2011,
	0, 2013, 0, 0, 0, 2014, 1400, 1401, 2008, 1129,
	0, 0, 0, 0, 0, 2017, 0, 1916, 865, 0,
	0, 0, 0, 0, 865, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 730, 730, 0, 0, 0, 1143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 730, 730, 0, 0, 0, 0,
	0, 0, 0, 0, 730, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 792,
	0, 0, 0, 0, 0, 0, 1407, 0, 0, 1377,
	0, 3928, 0, 1389, 1390, 1391, 0, 0, 0, 0,
	0, 0, 0, 792, 0, 2009, 0, 834, 2010, 0,
	0, 0, 2015, 0, 2007, 0, 0, 0, 0, 2012,
	2016, 2011, 0, 2013, 0, 0, 0, 2014, 1400, 1401,
	2008, 0, 0, 0, 0, 0, 0, 2017, 0, 1407,
	0, 0, 1377, 0, 0, 0, 1389, 1390, 1391, 0,
	0, 0, 0, 1916, 1916, 1916, 0, 0, 2009, 0,
	0, 2010, 0, 0, 0, 2015, 0, 2007, 0, 0,
	0, 0, 2012, 2016, 2011, 0, 2013, 1396, 0, 0,
	2014, 1400, 1401, 2008, 0, 0, 1386, 1387, 1388, 0,
	2017, 0, 0, 0, 0, 1380, 1381, 1382, 1383, 1384,
	1385, 0, 792, 0, 652, 652, 0, 0, 0, 0,
	0, 0, 0, 730, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 716,
	0, 720, 0, 0, 0, 758, 759, 0, 0, 764,
	765, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 730, 0, 0, 0, 865,
	0, 796, 0, 0, 0, 0, 0, 805, 865, 808,
	0, 810, 811, 812, 813, 814, 0, 0, 0, 823,
	0, 0, 0, 828, 0, 0, 730, 835, 0, 0,
	0, 0, 1127, 0, 0, 0, 0, 1128, 792, 0,
	0, 1137, 0, 0, 0, 0, 0, 0, 0, 792,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	792, 792, 0, 0, 792, 792, 792, 0, 792, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 792,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 792, 0, 792, 0, 0, 0, 0, 0,
	0, 0, 0, 1130, 0, 0, 0, 792, 0, 635,
	0, 0, 0, 0, 792, 0, 0, 792, 0, 0,
	0, 0, 792, 792, 0, 0, 0, 792, 792, 0,
	0, 0, 1136, 0, 0, 0, 0, 0, 0, 865,
	0, 792, 0, 0, 0, 0, 792, 792, 0, 865,
	792, 792, 792, 792, 792, 792, 792, 792, 792, 792,
	792, 792, 792, 1141, 0, 0, 0, 792, 792, 792,
	865, 0, 0, 0, 0, 792, 0, 792, 0, 0,
	0, 0, 0, 0, 792, 1916, 0, 0, 792, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 792,
	0, 0, 0, 0, 0, 0, 1126, 0, 0, 1396,
	0, 0, 2514, 792, 0, 0, 792, 1124, 1386, 1387,
	1388, 1917, 0, 0, 0, 4804, 0, 1380, 1381, 1382,
	1383, 1384, 1385, 1131, 0, 0, 0, 0, 0, 0,
	792, 792, 0, 792, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1917, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1125, 0, 1133, 0,
	0, 792, 0, 0, 1132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 865, 792, 792, 865, 0, 865, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1917, 865,
	865, 0, 0, 865, 0, 0, 0, 0, 730, 1134,
	0, 0, 0, 731, 0, 0, 0, 1917, 0, 0,
	792, 1396, 0, 0, 0, 0, 0, 0, 0, 0,
	1386, 1387, 1388, 0, 0, 0, 865, 4666, 0, 1380,
	1381, 1382, 1383, 1384, 1385, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1135, 0, 0, 0, 0, 0,
	0, 0, 0, 730, 0, 1138, 0, 730, 730, 0,
	731, 731, 0, 0, 1396, 0, 0, 0, 0, 0,
	0, 0, 2506, 1386, 1387, 1388, 0, 792, 792, 0,
	4651, 0, 1380, 1381, 1382, 1383, 1384, 1385, 1122, 0,
	1140, 1139, 0, 731, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1864, 0, 0, 792, 1867, 1868, 0, 0, 0, 0,
	0, 0, 2514, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1916, 865, 1916, 1407, 0,
	0, 1377, 0, 0, 0, 1389, 1390, 1391, 1916, 0,
	0, 0, 0, 0, 0, 0, 0, 2009, 0, 0,
	2010, 0, 0, 0, 2015, 0, 2007, 1129, 731, 0,
	0, 2012, 2016, 2011, 0, 2013, 0, 0, 652, 2014,
	1400, 1401, 2008, 0, 0, 0, 0, 0, 0, 2017,
	0, 0, 0, 0, 73, 0, 0, 1143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1063,
	0, 0, 0, 0, 865, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	792, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 792, 792,
	0, 0, 0, 0, 792, 792, 0, 0, 0, 0,
	0, 792, 792, 0, 0, 0, 0, 0, 792, 0,
	0, 0, 0, 792, 0, 0, 0, 0, 0, 792,
	0, 0, 0, 0, 0, 1105, 0, 0, 1109, 0,
	0, 0, 0, 0, 792, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2758, 950,
	0, 0, 0, 0, 0, 792, 0, 0, 0, 0,
	1198, 0, 2514, 792, 0, 0, 792, 0, 792, 865,
	0, 0, 0, 1225, 0, 792, 0, 0, 0, 0,
	0, 0, 792, 1917, 0, 0, 792, 792, 0, 1917,
	792, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 792, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1407, 0, 0, 1377, 0, 0, 0,
	1389, 1390, 1391, 0, 865, 4406, 0, 0, 0, 0,
	865, 0, 2009, 0, 0, 2010, 0, 0, 0, 2015,
	0, 2007, 0, 0, 0, 865, 2012, 2016, 2011, 0,
	2013, 0, 0, 0, 2014, 1400, 1401, 2008, 731, 0,
	0, 0, 792, 0, 2017, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1916, 0,
	0, 0, 0, 0, 0, 1407, 0, 0, 1377, 0,
	0, 0, 1389, 1390, 1391, 0, 0, 0, 792, 0,
	2917, 0, 2920, 0, 2009, 730, 0, 2010, 0, 0,
	0, 2015, 0, 2007, 4699, 0, 792, 0, 2012, 2016,
	2011, 792, 2013, 1917, 0, 0, 2014, 1400, 1401, 2008,
	0, 0, 0, 0, 0, 0, 2017, 0, 0, 0,
	731, 731, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 912, 792, 0, 0, 0, 0, 0, 0, 0,
	731, 731, 0, 0, 1407, 0, 0, 1377, 0, 865,
	731, 1389, 1390, 1391, 2443, 0, 0, 652, 0, 0,
	0, 0, 0, 2009, 730, 0, 2010, 730, 0, 0,
	2015, 0, 2007, 0, 0, 0, 763, 2012, 2016, 2011,
	0, 2013, 0, 0, 4378, 2014, 1400, 1401, 2008, 0,
	865, 0, 2065, 0, 0, 2017, 0, 0, 792, 0,
	0, 0, 0, 1034, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 865, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2101, 2514, 2514, 0, 792, 2514, 0,
	0, 0, 0, 0, 0, 792, 792, 792, 0, 1917,
	1917, 1917, 0, 1396, 0, 0, 0, 0, 0, 0,
	0, 0, 1386, 1387, 1388, 0, 0, 865, 0, 4628,
	0, 1380, 1381, 1382, 1383, 1384, 1385, 792, 792, 792,
	792, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 691, 0, 712, 0, 714, 0, 731,
	0, 0, 0, 0, 792, 792, 2221, 0, 0, 0,
	2618, 0, 0, 0, 792, 792, 0, 0, 2631, 0,
	0, 0, 0, 1916, 0, 0, 0, 0, 794, 795,
	2247, 797, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 731, 0, 792, 0, 0, 0, 0, 865, 824,
	0, 827, 0, 0, 831, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 731, 0, 0, 3172, 0, 3172, 0, 0,
	2637, 0, 0, 0, 0, 2322, 0, 1407, 2324, 0,
	1377, 0, 0, 0, 1389, 1390, 1391, 0, 0, 0,
	3201, 912, 792, 0, 0, 0, 2009, 0, 0, 2010,
	0, 0, 0, 2015, 2633, 2007, 0, 0, 0, 0,
	2012, 2016, 2011, 792, 2013, 0, 0, 0, 2014, 1400,
	1401, 2008, 0, 0, 0, 0, 0, 0, 2017, 0,
	0, 0, 1127, 865, 0, 0, 0, 1128, 0, 0,
	0, 1137, 0, 0, 1127, 730, 0, 0, 0, 1128,
	0, 0, 0, 1137, 0, 792, 0, 3268, 0, 0,
	0, 0, 0, 0, 3279, 0, 0, 0, 0, 0,
	865, 865, 0, 912, 912, 0, 0, 0, 0, 792,
	0, 0, 0, 0, 0, 0, 0, 792, 1396, 0,
	0, 0, 2623, 0, 0, 0, 3306, 1386, 1387, 1388,
	792, 0, 792, 1130, 0, 0, 1380, 1381, 1382, 1383,
	1384, 1385, 0, 0, 2632, 1130, 0, 792, 0, 0,
	0, 1917, 0, 0, 0, 0, 0, 792, 0, 0,
	0, 0, 1136, 0, 792, 0, 0, 0, 0, 792,
	0, 0, 0, 0, 1136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2628, 0, 730, 0, 0, 0,
	1396, 0, 0, 1141, 0, 0, 0, 0, 0, 1386,
	1387, 1388, 0, 0, 0, 1141, 0, 2625, 1380, 1381,
	1382, 1383, 1384, 1385, 0, 0, 0, 0, 0, 865,
	0, 0, 0, 0, 0, 3400, 0, 865, 2619, 0,
	2454, 2630, 0, 0, 0, 0, 1126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1149, 1126, 0,
	0, 0, 0, 0, 0, 0, 792, 0, 0, 1916,
	0, 0, 0, 1131, 0, 0, 0, 0, 0, 1396,
	792, 0, 0, 2636, 792, 1131, 0, 0, 1386, 1387,
	1388, 730, 792, 792, 731, 4351, 0, 1380, 1381, 1382,
	1383, 1384, 1385, 0, 0, 0, 0, 0, 1133, 792,
	0, 0, 0, 0, 1132, 0, 0, 0, 81, 0,
	1133, 2654, 0, 0, 0, 0, 1132, 0, 0, 865,
	3454, 865, 865, 792, 912, 2629, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 731,
	792, 2626, 0, 731, 731, 792, 792, 792, 2624, 1134,
	0, 792, 2634, 0, 0, 0, 0, 0, 0, 0,
	0, 1134, 0, 0, 0, 2620, 0, 0, 0, 0,
	0, 0, 0, 865, 792, 0, 1916, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2443, 0, 2627,
	0, 2621, 0, 1916, 1135, 0, 0, 0, 637, 730,
	0, 0, 0, 0, 0, 1138, 1135, 792, 2578, 2578,
	0, 0, 0, 0, 0, 0, 0, 1138, 0, 0,
	0, 1917, 0, 1917, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1917, 0, 0, 0, 1148, 1407,
	1140, 1139, 1377, 0, 0, 0, 1389, 1390, 1391, 0,
	3421, 0, 1140, 1139, 0, 0, 0, 0, 2009, 0,
	0, 2010, 0, 945, 945, 2015, 0, 2007, 0, 0,
	0, 0, 2012, 2016, 2011, 0, 2013, 0, 0, 3967,
	2014, 1400, 1401, 2008, 0, 1392, 0, 792, 0, 0,
	2017, 1079, 1080, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 792, 0, 792,
	792, 0, 1396, 0, 0, 792, 0, 1129, 0, 0,
	0, 1386, 1387, 1388, 0, 0, 0, 0, 4323, 1129,
	1380, 1381, 1382, 1383, 1384, 1385, 792, 0, 0, 792,
	0, 0, 0, 0, 0, 0, 0, 1143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1143,
	0, 0, 0, 0, 1117, 0, 0, 0, 0, 0,
	792, 0, 0, 0, 1392, 0, 0, 0, 0, 0,
	792, 0, 0, 792, 0, 0, 0, 0, 0, 792,
	792, 0, 0, 0, 0, 0, 1407, 0, 0, 1377,
	1199, 1200, 0, 1389, 1390, 1391, 0, 0, 0, 0,
	0, 0, 730, 0, 0, 2009, 0, 0, 2010, 0,
	0, 0, 2015, 0, 2007, 0, 0, 0, 0, 2012,
	2016, 2011, 0, 2013, 0, 792, 865, 2014, 1400, 1401,
	2008, 0, 3268, 1407, 0, 792, 1377, 2017, 0, 0,
	1389, 1390, 1391, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2009, 0, 0, 2010, 792, 792, 0, 2015,
	792, 2007, 831, 0, 0, 0, 2012, 2016, 2011, 0,
	2013, 0, 0, 0, 2014, 1400, 1401, 2008, 0, 0,
	730, 0, 0, 0, 2017, 0, 792, 0, 0, 0,
	0, 0, 0, 0, 0, 792, 0, 792, 0, 0,
	3717, 3718, 0, 3720, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1864, 0, 0,
	3752, 0, 0, 0, 1917, 0, 0, 0, 0, 0,
	0, 0, 792, 0, 0, 0, 0, 1356, 2578, 1363,
	0, 1371, 0, 0, 792, 1916, 0, 0, 0, 0,
	792, 731, 1853, 1854, 1855, 1856, 1857, 0, 0, 0,
	0, 0, 0, 1862, 0, 3268, 0, 0, 0, 0,
	0, 0, 2443, 0, 0, 0, 0, 792, 0, 0,
	0, 0, 1876, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 865, 0, 1864, 3018, 0, 2673, 0,
	0, 0, 0, 0, 0, 0, 792, 0, 1916, 0,
	0, 0, 0, 0, 0, 0, 2687, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2704, 1998,
	731, 0, 0, 731, 789, 3856, 2715, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 792, 0, 0, 0, 0, 0, 0, 0,
	0, 2093, 2094, 2095, 2096, 0, 2097, 0, 2760, 2761,
	2762, 1916, 792, 0, 0, 0, 1392, 0, 0, 2769,
	0, 0, 0, 1392, 0, 0, 0, 2780, 0, 2784,
	2785, 1392, 0, 792, 792, 2789, 0, 0, 2793, 2794,
	0, 0, 2801, 0, 2803, 2806, 0, 0, 0, 0,
	0, 0, 1916, 2182, 0, 0, 0, 0, 2828, 2829,
	0, 0, 2833, 2834, 1396, 0, 0, 0, 0, 0,
	3154, 0, 3158, 1386, 1387, 1388, 0, 0, 0, 2843,
	2844, 0, 1380, 1381, 1382, 1383, 1384, 1385, 0, 0,
	2857, 0, 2858, 2859, 2860, 2861, 2862, 0, 0, 2864,
	0, 0, 0, 2868, 0, 0, 0, 2871, 2872, 0,
	0, 0, 2876, 2877, 0, 0, 2882, 2883, 0, 0,
	0, 0, 2884, 2885, 2886, 0, 0, 0, 2887, 1917,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2900, 0, 0,
	0, 0, 0, 0, 2903, 846, 846, 2904, 2291, 2292,
	2293, 2294, 2295, 0, 2915, 2916, 0, 0, 831, 2320,
	2923, 1407, 0, 0, 1377, 0, 2323, 3999, 1389, 1390,
	1391, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2009, 0, 0, 2010, 0, 0, 0, 2015, 0, 2007,
	0, 0, 0, 0, 2012, 2016, 2011, 0, 2013, 0,
	0, 0, 2014, 1400, 1401, 2008, 0, 0, 0, 0,
	0, 1396, 2017, 73, 4028, 0, 0, 0, 0, 0,
	1386, 1387, 1388, 0, 0, 0, 0, 4302, 0, 1380,
	1381, 1382, 1383, 1384, 1385, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 731, 0, 0, 0, 0, 0, 0, 1396, 0,
	0, 0, 0, 0, 0, 0, 0, 1386, 1387, 1388,
	0, 0, 0, 0, 4279, 0, 1380, 1381, 1382, 1383,
	1384, 1385, 0, 0, 0, 2398, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1853,
	1854, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	945, 0, 0, 0, 2401, 2402, 2403, 2404, 2405, 2406,
	2407, 2408, 2409, 2410, 2411, 2412, 2413, 2414, 2415, 2416,
	1407, 2422, 0, 1377, 0, 0, 1127, 1389, 1390, 1391,
	0, 1128, 0, 0, 0, 1137, 0, 0, 0, 2009,
	0, 0, 2010, 0, 0, 0, 2015, 0, 2007, 0,
	0, 0, 731, 2012, 2016, 2011, 0, 2013, 0, 4121,
	4122, 2014, 1400, 1401, 2008, 1407, 0, 0, 1377, 0,
	0, 2017, 1389, 1390, 1391, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2009, 0, 186, 2010, 0, 0,
	185, 2015, 0, 2007, 0, 0, 0, 1130, 2012, 2016,
	2011, 0, 2013, 0, 189, 0, 2014, 1400, 1401, 2008,
	0, 0, 0, 0, 0, 0, 2017, 0, 0, 0,
	0, 0, 183, 0, 0, 1917, 1136, 0, 0, 0,
	0, 0, 0, 0, 1407, 0, 0, 1377, 0, 0,
	0, 1389, 1390, 1391, 0, 0, 0, 731, 0, 0,
	0, 0, 0, 2009, 0, 0, 2010, 1141, 0, 0,
	2015, 0, 2007, 0, 0, 0, 0, 2012, 2016, 2011,
	0, 2013, 0, 0, 4215, 2014, 1400, 1401, 2008, 0,
	0, 0, 0, 0, 0, 2017, 0, 0, 0, 0,
	1864, 0, 0, 1392, 1392, 1392, 1392, 1392, 0, 0,
	1126, 0, 1392, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 195, 0, 0, 1392, 0, 0, 0,
	3241, 0, 0, 0, 0, 0, 0, 1131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1917, 0, 191, 0, 0, 0, 3282, 0,
	0, 0, 0, 0, 0, 192, 3290, 0, 3290, 1917,
	0, 0, 1133, 0, 3299, 731, 0, 0, 1132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	181, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 3268, 0, 73, 197, 0, 0, 0, 73,
	73, 0, 0, 190, 0, 0, 0, 0, 0, 0,
	0, 2578, 0, 1134, 2578, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3361, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1392, 0,
	0, 0, 0, 0, 0, 3385, 3386, 3387, 3388, 0,
	0, 0, 0, 0, 0, 73, 1396, 0, 1135, 0,
	0, 0, 0, 0, 0, 1386, 1387, 1388, 0, 1138,
	0, 0, 4161, 0, 1380, 1381, 1382, 1383, 1384, 1385,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 3413, 3414, 0, 3417, 3418,
	3419, 0, 3416, 176, 1140, 1139, 199, 0, 0, 0,
	0, 0, 4418, 0, 0, 912, 0, 0, 0, 0,
	0, 846, 0, 3430, 0, 184, 0, 0, 0, 0,
	0, 203, 0, 200, 0, 0, 0, 0, 187, 0,
	0, 201, 3445, 0, 0, 0, 0, 0, 0, 0,
	3446, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 2618, 0, 0, 0, 0, 0, 0, 0,
	2631, 0, 0, 194, 0, 0, 0, 0, 731, 204,
	0, 1129, 0, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2578, 0, 0, 0, 188,
	3468, 0, 0, 0, 0, 2483, 2488, 2490, 0, 0,
	0, 1143, 0, 2496, 0, 2507, 2510, 0, 2520, 2521,
	2526, 2529, 0, 0, 0, 1396, 0, 2537, 0, 0,
	0, 2541, 2637, 0, 1386, 1387, 1388, 0, 0, 0,
	0, 4142, 0, 1380, 1381, 1382, 1383, 1384, 1385, 0,
	0, 0, 0, 0, 0, 0, 731, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2633, 0, 0, 0,
	1396, 0, 0, 0, 0, 0, 0, 0, 0, 1386,
	1387, 1388, 0, 0, 0, 0, 4131, 0, 1380, 1381,
	1382, 1383, 1384, 1385, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2398, 0, 0, 0, 0, 0,
	0, 0, 0, 4577, 4578, 4579, 4580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 912, 2553,
	0, 1917, 0, 2414, 2415, 2416, 2422, 0, 0, 1396,
	0, 0, 0, 2605, 0, 0, 0, 0, 1386, 1387,
	1388, 0, 0, 0, 2623, 3919, 0, 1380, 1381, 1382,
	1383, 1384, 1385, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2632, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1407,
	0, 0, 1377, 0, 1917, 2698, 1389, 1390, 1391, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2009, 0,
	0, 2010, 0, 0, 0, 2015, 2628, 2007, 0, 0,
	2747, 846, 2012, 2016, 2011, 0, 2013, 0, 846, 0,
	2014, 1400, 1401, 2008, 0, 0, 0, 3649, 0, 2625,
	2017, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
	1392, 1392, 1392, 1392, 1392, 1392, 1392, 1917, 1407, 0,
	2619, 1377, 1392, 2630, 0, 1389, 1390, 1391, 0, 0,
	0, 0, 0, 0, 2578, 2578, 0, 2009, 2578, 0,
	2010, 0, 0, 0, 2015, 0, 2007, 0, 0, 0,
	3290, 2012, 2016, 2011, 0, 2013, 3683, 0, 1917, 2014,
	1400, 1401, 2008, 2836, 2837, 2636, 0, 0, 3916, 2017,
	0, 3917, 846, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1392, 0, 0, 0, 0, 1392, 0,
	1392, 0, 0, 0, 0, 0, 1392, 0, 0, 0,
	81, 0, 0, 2614, 0, 0, 0, 1392, 0, 0,
	1392, 0, 0, 0, 0, 0, 2866, 2629, 0, 0,
	1392, 1392, 0, 0, 3724, 0, 1392, 0, 0, 1392,
	0, 3290, 0, 2626, 0, 0, 0, 1392, 0, 0,
	2624, 1392, 0, 0, 2634, 0, 0, 3753, 3754, 0,
	0, 0, 0, 1392, 0, 0, 0, 2620, 0, 0,
	2924, 0, 0, 0, 3770, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 846, 0, 846, 912,
	0, 2627, 0, 2621, 3800, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1127, 831, 0, 0,
	3805, 1128, 0, 846, 0, 1137, 0, 0, 0, 3807,
	3808, 3809, 0, 0, 3812, 0, 0, 3815, 3816, 3817,
	3818, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3827, 0, 3828, 0, 3829, 0, 0, 0, 0, 0,
	0, 0, 1363, 3842, 0, 0, 1407, 0, 0, 1377,
	1862, 3847, 3848, 1389, 1390, 1391, 3851, 3852, 3853, 3854,
	3855, 0, 0, 1371, 0, 2009, 0, 1130, 2010, 0,
	0, 0, 2015, 0, 2007, 0, 0, 3915, 0, 2012,
	2016, 2011, 0, 2013, 0, 0, 0, 2014, 1400, 1401,
	2008, 0, 846, 0, 0, 0, 1136, 2017, 0, 0,
	0, 2989, 2990, 0, 0, 0, 0, 2996, 0, 0,
	0, 0, 0, 0, 644, 0, 0, 4889, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3025, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3035, 0, 0, 0, 0, 0,
	0, 0, 0, 2483, 2483, 2483, 0, 0, 0, 0,
	1126, 0, 0, 0, 0, 3061, 0, 0, 0, 0,
	4889, 0, 0, 2578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1131, 0, 0,
	0, 0, 0, 0, 0, 0, 2526, 2526, 2526, 3946,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4889, 3113, 0, 673, 0, 3118, 0, 0, 73,
	3122, 0, 1133, 0, 0, 0, 0, 0, 1132, 0,
	0, 0, 0, 0, 0, 0, 73, 0, 0, 0,
	0, 0, 0, 3134, 1396, 0, 0, 0, 3138, 0,
	777, 780, 782, 1386, 1387, 1388, 1392, 0, 0, 73,
	0, 0, 1380, 1381, 1382, 1383, 1384, 1385, 0, 0,
	0, 0, 0, 1134, 0, 0, 0, 0, 1127, 0,
	0, 3212, 0, 1128, 0, 0, 0, 1137, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4035,
	0, 0, 0, 1396, 0, 0, 0, 0, 1135, 0,
	0, 0, 1386, 1387, 1388, 0, 0, 0, 0, 1138,
	0, 1380, 1381, 1382, 1383, 1384, 1385, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2846, 0, 1140, 1139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1136, 1392,
	1392, 0, 0, 0, 0, 0, 1392, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4093, 1141,
	0, 4095, 0, 0, 0, 1392, 0, 4098, 4099, 4100,
	3326, 0, 4103, 4104, 4105, 1392, 0, 0, 0, 4108,
	4109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1129, 0, 0, 3353, 0, 0, 0, 0, 0,
	0, 1392, 1126, 0, 0, 0, 0, 0, 0, 4124,
	4125, 0, 0, 4129, 73, 4130, 0, 0, 0, 0,
	0, 1143, 0, 0, 0, 0, 0, 0, 0, 1131,
	0, 0, 77, 0, 0, 0, 76, 78, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 1127, 1392, 0, 0, 0, 1128, 1392, 4151,
	0, 1137, 1392, 0, 1133, 0, 0, 0, 0, 0,
	1132, 0, 2578, 93, 1392, 0, 0, 94, 1392, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4175, 1396, 0, 3428, 0, 0, 98, 0, 0, 0,
	1386, 1387, 1388, 80, 0, 0, 0, 0, 0, 1380,
	1381, 1382, 1383, 1384, 1385, 1134, 0, 0, 0, 0,
	0, 75, 1407, 1130, 0, 1377, 0, 3458, 3459, 1389,
	1390, 1391, 0, 0, 0, 0, 2485, 3463, 1864, 0,
	0, 2009, 0, 0, 2010, 0, 0, 2485, 2015, 2485,
	2007, 0, 1136, 0, 0, 2012, 2016, 2011, 0, 2013,
	1135, 0, 3290, 2014, 1400, 1401, 2008, 0, 0, 0,
	0, 1138, 0, 2017, 4284, 3914, 0, 0, 0, 4287,
	0, 0, 0, 1141, 0, 4293, 0, 0, 4295, 0,
	1407, 0, 0, 1377, 0, 0, 0, 1389, 1390, 1391,
	3485, 82, 0, 0, 2832, 0, 1140, 1139, 0, 2009,
	0, 3493, 3494, 0, 0, 3497, 2015, 0, 2007, 3500,
	0, 0, 71, 2012, 2016, 2011, 1126, 2013, 0, 0,
	3505, 2014, 1400, 1401, 2008, 0, 0, 0, 84, 4330,
	4331, 2017, 0, 3511, 0, 4337, 0, 0, 0, 4339,
	0, 0, 0, 1131, 0, 0, 0, 0, 3519, 0,
	0, 0, 0, 0, 0, 3524, 1392, 4352, 2483, 0,
	0, 0, 0, 3531, 3532, 0, 70, 0, 2490, 2490,
	0, 0, 0, 1129, 0, 0, 0, 0, 1133, 0,
	0, 0, 3545, 1392, 1132, 0, 0, 3547, 2483, 0,
	0, 0, 1026, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1143, 2650, 0, 0, 0, 3562, 3563,
	3564, 1044, 0, 2650, 0, 0, 0, 0, 3570, 1053,
	1055, 0, 1057, 0, 0, 2537, 0, 0, 0, 1134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	945, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1392, 0,
	0, 0, 0, 0, 1096, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1135, 0, 0, 0, 88, 73,
	846, 0, 2490, 0, 3624, 1138, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 846, 0, 87, 0, 0,
	0, 81, 0, 0, 0, 0, 0, 85, 0, 3290,
	0, 0, 3654, 86, 0, 1392, 0, 0, 2219, 0,
	1140, 1139, 0, 1392, 1392, 0, 4483, 1392, 0, 1173,
	1392, 0, 0, 3662, 3663, 1392, 83, 0, 3684, 0,
	0, 1392, 0, 0, 0, 0, 0, 0, 0, 1392,
	0, 0, 0, 0, 1392, 0, 0, 0, 0, 0,
	0, 1392, 1392, 0, 0, 0, 0, 0, 3703, 0,
	0, 0, 0, 0, 0, 1392, 4517, 1392, 0, 4520,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1392, 1392, 1392, 0, 0, 1129, 0, 0,
	1392, 0, 1407, 0, 0, 1377, 0, 0, 0, 1389,
	1390, 1391, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 2009, 0, 0, 2010, 0, 0, 1143, 2015, 0,
	2007, 92, 0, 0, 0, 2012, 2016, 2011, 0, 2013,
	0, 0, 0, 2014, 1400, 1401, 2008, 1127, 0, 0,
	0, 846, 1128, 2017, 1392, 0, 1137, 846, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1392, 0, 0, 0, 0, 0,
	0, 0, 1392, 1392, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1396, 1130, 0,
	0, 0, 1407, 0, 4634, 1377, 1386, 1387, 1388, 1389,
	1390, 1391, 0, 0, 0, 1380, 1381, 1382, 1383, 1384,
	1385, 2009, 0, 0, 2010, 0, 0, 1136, 2015, 0,
	2007, 0, 0, 4654, 4655, 2012, 2016, 2011, 0, 2013,
	0, 0, 0, 2014, 1400, 1401, 2008, 0, 0, 0,
	0, 0, 2000, 2017, 0, 0, 0, 0, 1141, 0,
	0, 0, 0, 0, 0, 1396, 0, 0, 0, 0,
	0, 3871, 0, 0, 1386, 1387, 1388, 0, 0, 0,
	0, 2050, 0, 1380, 1381, 1382, 1383, 1384, 1385, 3880,
	3881, 0, 0, 0, 0, 3885, 3886, 0, 0, 0,
	0, 1126, 3889, 3890, 2485, 2485, 2485, 0, 0, 3893,
	0, 0, 0, 0, 3894, 0, 0, 0, 0, 0,
	2483, 0, 0, 0, 0, 0, 0, 0, 1131, 2116,
	0, 0, 0, 2120, 0, 1371, 0, 4742, 2132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4752, 0, 0, 0, 0, 0, 0, 0, 0, 2179,
	0, 0, 0, 1133, 0, 0, 0, 0, 0, 1132,
	0, 0, 0, 0, 4768, 2193, 0, 3931, 0, 3934,
	0, 1392, 0, 0, 0, 0, 0, 0, 0, 0,
	1392, 1392, 0, 3944, 2210, 1392, 1392, 2213, 0, 1392,
	1392, 0, 0, 1392, 1392, 0, 0, 0, 0, 0,
	3985, 0, 0, 0, 1134, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2246, 0, 0, 0,
	2132, 2132, 2132, 0, 0, 0, 0, 0, 0, 3194,
	0, 1392, 0, 0, 1392, 0, 0, 0, 2268, 2269,
	0, 0, 0, 1407, 1392, 0, 1377, 0, 0, 1135,
	1389, 1390, 1391, 0, 0, 0, 0, 4027, 2650, 3194,
	1138, 4823, 2009, 0, 0, 2010, 0, 3227, 0, 2015,
	0, 2007, 0, 4022, 0, 0, 2012, 2016, 2011, 0,
	2013, 0, 0, 0, 2014, 1400, 1401, 2008, 0, 0,
	0, 0, 0, 2215, 2017, 1140, 1139, 0, 0, 0,
	3194, 0, 0, 0, 0, 0, 846, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1407, 2347, 0, 1377,
	0, 0, 1392, 1389, 1390, 1391, 0, 0, 0, 0,
	0, 0, 4048, 0, 0, 2009, 0, 0, 2010, 0,
	0, 0, 2015, 0, 2007, 0, 0, 0, 1392, 2012,
	2016, 2011, 0, 2013, 0, 0, 0, 2014, 1400, 1401,
	2008, 0, 0, 4076, 0, 0, 0, 2017, 0, 0,
	0, 0, 1129, 0, 0, 0, 1392, 1396, 0, 0,
	0, 0, 0, 2378, 0, 0, 1386, 1387, 1388, 0,
	2395, 0, 0, 3898, 0, 1380, 1381, 1382, 1383, 1384,
	1385, 0, 1143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1392, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4118,
	0, 0, 0, 0, 0, 1392, 0, 0, 0, 1392,
	1392, 1392, 0, 4956, 0, 0, 0, 0, 0, 0,
	0, 0, 1392, 1392, 1392, 1392, 0, 0, 4135, 0,
	0, 0, 0, 0, 0, 0, 4139, 4140, 4141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1392,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1392, 0, 0, 0, 0, 1396, 4152, 4153,
	4154, 4155, 0, 0, 0, 0, 1386, 1387, 1388, 0,
	0, 0, 0, 3891, 0, 1380, 1381, 1382, 1383, 1384,
	1385, 0, 0, 0, 0, 1407, 0, 0, 1377, 0,
	0, 0, 1389, 1390, 1391, 4179, 0, 0, 0, 0,
	0, 846, 0, 0, 2009, 0, 4192, 2010, 0, 0,
	846, 2015, 0, 2007, 0, 0, 0, 0, 2012, 2016,
	2011, 0, 2013, 0, 0, 0, 2014, 1400, 1401, 2008,
	0, 0, 0, 0, 0, 0, 2017, 1407, 0, 0,
	1377, 0, 0, 0, 1389, 1390, 1391, 0, 0, 3586,
	0, 0, 0, 0, 0, 0, 2009, 0, 0, 2010,
	0, 0, 0, 2015, 0, 2007, 0, 0, 0, 4307,
	2012, 2016, 2011, 0, 2013, 0, 0, 0, 2014, 1400,
	1401, 2008, 0, 0, 0, 0, 0, 0, 2017, 0,
	4321, 4322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1407, 0, 0, 1377, 0, 0, 0, 1389, 1390,
	1391, 0, 0, 0, 0, 0, 0, 0, 0, 2485,
	2009, 0, 1392, 2010, 0, 0, 0, 2015, 0, 2007,
	0, 0, 0, 0, 2012, 2016, 2011, 0, 2013, 0,
	0, 846, 2014, 1400, 1401, 2008, 0, 0, 0, 2485,
	0, 846, 2017, 0, 0, 1407, 0, 0, 1377, 0,
	0, 0, 1389, 1390, 1391, 0, 0, 0, 1392, 0,
	0, 0, 846, 0, 2009, 0, 0, 2010, 0, 0,
	4362, 2015, 0, 2007, 0, 0, 0, 0, 2012, 2016,
	2011, 0, 2013, 0, 0, 0, 2014, 1400, 1401, 2008,
	0, 0, 0, 2537, 0, 0, 2017, 0, 1396, 0,
	0, 0, 0, 0, 0, 0, 0, 1386, 1387, 1388,
	0, 0, 0, 0, 3830, 0, 1380, 1381, 1382, 1383,
	1384, 1385, 0, 0, 0, 0, 0, 0, 1392, 0,
	4408, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1392, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1396, 0, 0, 0, 0, 0, 0, 1392, 0,
	1386, 1387, 1388, 2650, 0, 0, 3194, 3763, 3194, 1380,
	1381, 1382, 1383, 1384, 1385, 1392, 0, 0, 1392, 0,
	0, 2650, 2650, 0, 0, 3194, 1407, 0, 0, 1377,
	0, 0, 0, 1389, 1390, 1391, 0, 4478, 0, 0,
	0, 0, 0, 0, 0, 2009, 0, 0, 2010, 0,
	0, 0, 2015, 0, 2007, 0, 0, 0, 846, 2012,
	2016, 2011, 0, 2013, 0, 0, 0, 2014, 1400, 1401,
	2008, 0, 0, 0, 0, 0, 0, 2017, 0, 0,
	4511, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1407, 4528, 0, 1377, 0, 0, 0,
	1389, 1390, 1391, 0, 0, 3112, 0, 0, 0, 0,
	0, 1862, 2009, 1392, 0, 2010, 4545, 4545, 4545, 2015,
	0, 2007, 4548, 0, 0, 0, 2012, 2016, 2011, 0,
	2013, 0, 0, 0, 2014, 1400, 1401, 2008, 0, 0,
	1407, 0, 0, 1377, 2017, 0, 0, 1389, 1390, 1391,
	0, 0, 0, 0, 0, 0, 0, 0, 3194, 2009,
	0, 0, 2010, 0, 0, 0, 2015, 0, 2007, 0,
	0, 0, 0, 2012, 2016, 2011, 0, 2013, 0, 0,
	0, 2014, 1400, 1401, 2008, 0, 1392, 0, 0, 0,
	1396, 2017, 0, 3102, 0, 1392, 0, 4630, 0, 1386,
	1387, 1388, 0, 0, 0, 0, 3742, 0, 1380, 1381,
	1382, 1383, 1384, 1385, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 846, 0, 0, 0,
	0, 0, 1396, 0, 0, 0, 2674, 0, 0, 0,
	0, 1386, 1387, 1388, 0, 0, 0, 0, 4653, 0,
	1380, 1381, 1382, 1383, 1384, 1385, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4362, 0,
	0, 0, 0, 0, 0, 0, 4545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2485, 0, 0, 0, 0, 1396, 0, 0, 0,
	2490, 0, 0, 0, 0, 1386, 1387, 1388, 0, 2763,
	2764, 0, 3543, 0, 1380, 1381, 1382, 1383, 1384, 1385,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4726, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4735, 2808, 0, 0, 0, 0,
	1396, 846, 0, 0, 0, 0, 0, 2830, 0, 1386,
	1387, 1388, 0, 0, 0, 0, 0, 0, 1380, 1381,
	1382, 1383, 1384, 1385, 0, 1392, 0, 0, 0, 0,
	0, 2849, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1407, 4362, 0, 1377, 0,
	0, 0, 1389, 1390, 1391, 0, 3996, 3097, 0, 0,
	0, 0, 846, 0, 2009, 0, 0, 2010, 0, 0,
	0, 2015, 0, 2007, 0, 0, 0, 2650, 2012, 2016,
	2011, 0, 2013, 0, 0, 0, 2014, 1400, 1401, 2008,
	0, 1407, 0, 0, 1377, 0, 2017, 0, 1389, 1390,
	1391, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2009, 0, 0, 2010, 0, 0, 4828, 2015, 0, 2007,
	0, 0, 0, 0, 2012, 2016, 2011, 0, 2013, 0,
	0, 0, 2014, 1400, 1401, 2008, 0, 0, 0, 0,
	0, 0, 2017, 0, 0, 0, 0, 0, 0, 0,
	0, 1396, 0, 4545, 0, 0, 0, 0, 0, 0,
	1386, 1387, 1388, 0, 0, 2490, 0, 3516, 0, 1380,
	1381, 1382, 1383, 1384, 1385, 0, 1407, 0, 0, 1377,
	0, 0, 0, 1389, 1390, 1391, 0, 0, 3066, 0,
	0, 0, 0, 0, 0, 2009, 0, 0, 2010, 2986,
	0, 846, 2015, 0, 2007, 0, 0, 0, 0, 2012,
	2016, 2011, 0, 2013, 0, 0, 0, 2014, 1400, 1401,
	2008, 0, 0, 0, 0, 0, 0, 2017, 1396, 0,
	0, 0, 0, 0, 0, 0, 0, 1386, 1387, 1388,
	0, 0, 846, 0, 0, 0, 1380, 1381, 1382, 1383,
	1384, 1385, 0, 0, 0, 0, 0, 0, 1127, 0,
	0, 0, 0, 1128, 0, 846, 0, 1137, 0, 0,
	0, 0, 0, 4925, 0, 1396, 0, 0, 0, 0,
	0, 0, 0, 0, 1386, 1387, 1388, 0, 0, 0,
	0, 0, 0, 1380, 1381, 1382, 1383, 1384, 1385, 1407,
	0, 0, 1377, 0, 0, 0, 1389, 1390, 1391, 846,
	0, 0, 0, 0, 0, 0, 0, 0, 2009, 0,
	0, 2010, 0, 0, 0, 2015, 0, 2007, 0, 1130,
	0, 0, 2012, 2016, 2011, 0, 2013, 0, 0, 0,
	2014, 1400, 1401, 2008, 1407, 0, 0, 1377, 0, 0,
	2017, 1389, 1390, 1391, 0, 0, 0, 0, 1136, 0,
	0, 0, 0, 2009, 0, 0, 2010, 0, 0, 0,
	2015, 0, 2007, 0, 0, 0, 0, 2012, 2016, 2011,
	0, 2013, 0, 0, 0, 2014, 1400, 1401, 2008, 1141,
	0, 0, 0, 0, 0, 2017, 1407, 0, 0, 1377,
	3194, 0, 0, 1389, 1390, 1391, 0, 0, 0, 3179,
	0, 3182, 3183, 0, 0, 2009, 3187, 0, 2010, 0,
	0, 0, 2015, 0, 2007, 0, 0, 0, 0, 2012,
	2016, 2011, 1126, 2013, 0, 0, 0, 2014, 1400, 1401,
	2008, 1407, 0, 0, 1377, 0, 0, 2017, 1389, 1390,
	1391, 0, 3073, 0, 0, 0, 0, 0, 0, 1131,
	2009, 0, 0, 2010, 0, 0, 0, 2015, 0, 2007,
	0, 0, 0, 0, 2012, 2016, 2011, 0, 2013, 0,
	3244, 0, 2014, 1400, 1401, 2008, 0, 0, 0, 0,
	0, 0, 2017, 0, 1133, 3194, 0, 0, 0, 0,
	1132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3295, 3296, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 846, 846, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1134, 0, 0, 0, 0,
	1396, 0, 0, 0, 0, 2132, 0, 0, 0, 1386,
	1387, 1388, 0, 0, 0, 0, 0, 0, 1380, 1381,
	1382, 1383, 1384, 1385, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1135, 0, 0, 0, 0, 0, 1396, 0, 0, 0,
	0, 1138, 0, 0, 0, 1386, 1387, 1388, 0, 0,
	0, 0, 0, 0, 1380, 1381, 1382, 1383, 1384, 1385,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1171, 0, 1140, 1139, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3996, 0, 0, 0, 0, 0, 0, 0, 846,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1396, 0, 0, 0, 0, 3439, 0, 0, 0,
	1386, 1387, 1388, 0, 0, 0, 0, 0, 0, 1380,
	1381, 1382, 1383, 1384, 1385, 0, 0, 0, 0, 0,
	0, 0, 0, 1129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2308,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 0,
	0, 0, 0, 1143, 0, 0, 0, 0, 0, 0,
	0, 846, 189, 846, 846, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	114, 0, 0, 3478, 0, 0, 0, 143, 0, 0,
	0, 0, 0, 3486, 0, 3487, 0, 0, 0, 0,
	3492, 0, 0, 0, 0, 139, 0, 0, 0, 117,
	0, 0, 0, 3060, 1396, 846, 0, 0, 136, 0,
	0, 0, 0, 1386, 1387, 1388, 0, 0, 0, 0,
	0, 0, 1380, 1381, 1382, 1383, 1384, 1385, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 1396,
	0, 0, 0, 0, 0, 0, 0, 0, 1386, 1387,
	1388, 195, 0, 2545, 0, 0, 2304, 1380, 1381, 1382,
	1383, 1384, 1385, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 0, 0, 0, 0, 0, 0, 0,
	0, 1396, 0, 192, 0, 0, 0, 0, 0, 0,
	1386, 1387, 1388, 0, 2314, 0, 0, 2458, 0, 1380,
	1381, 1382, 1383, 1384, 1385, 0, 0, 0, 2306, 0,
	0, 129, 0, 0, 0, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 0, 0, 1396, 0, 0, 0,
	0, 190, 0, 2307, 0, 1386, 1387, 1388, 0, 0,
	0, 0, 120, 0, 1380, 1381, 1382, 1383, 1384, 1385,
	0, 0, 0, 0, 2318, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 122, 0, 0, 0, 0, 140, 0, 0, 0,
	0, 0, 0, 0, 3668, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 2309, 0, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 3691, 0, 0, 0, 0, 846, 0,
	0, 0, 0, 2315, 0, 0, 2310, 0, 0, 0,
	0, 200, 0, 0, 0, 0, 187, 0, 0, 201,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 0, 0,
	2316, 0, 128, 0, 0, 0, 2317, 0, 0, 2116,
	0, 194, 0, 0, 131, 2311, 0, 0, 0, 0,
	0, 2312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 0, 0, 188, 0, 0,
	0, 115, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 0, 0, 0, 2305,
	132, 0, 0, 0, 0, 0, 127, 0, 138, 0,
	137, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 0, 0, 0, 0, 142, 0,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 846, 0, 0, 0, 133,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3876, 3877, 3878, 3879, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2671, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 250, 736, 0, 299, 336, 0,
	0, 0, 396, 0, 449, 453, 0, 0, 0, 0,
	0, 0, 307, 0, 741, 2646, 747, 0, 753, 0,
	518, 0, 743, 744, 749, 238, 863, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 745, 742, 746, 752, 740,
	750, 737, 748, 0, 440, 374, 0, 467, 245, 291,
	278, 320, 362, 474, 0, 0, 352, 522, 287, 376,
	0, 266, 409, 0, 498, 373, 0, 481, 501, 0,
	393, 272, 432, 488, 489, 734, 739, 0, 755, 0,
	276, 277, 398, 258, 406, 0, 0, 461, 419, 417,
	0, 384, 441, 0, 0, 0, 306, 0, 301, 397,
	537, 264, 516, 435, 402, 356, 464, 493, 303, 288,
	289, 332, 434, 322, 274, 527, 4007, 0, 0, 0,
	0, 0, 0, 0, 0, 323, 0, 0, 535, 866,
	856, 848, 849, 850, 851, 852, 853, 0, 868, 869,
	870, 871, 872, 528, 862, 0, 847, 854, 855, 857,
	2649, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 234, 0, 235, 236, 237, 239, 240, 241, 733,
	242, 243, 244, 247, 248, 249, 251, 611, 252, 253,
	254, 255, 256, 257, 0, 735, 259, 260, 261, 262,
	263, 265, 267, 268, 269, 270, 271, 273, 275, 0,
	0, 0, 738, 0, 0, 0, 279, 280, 281, 282,
	283, 284, 0, 285, 286, 290, 292, 293, 294, 295,
	296, 297, 300, 0, 302, 304, 0, 305, 308, 0,
	309, 310, 311, 312, 313, 314, 315, 316, 0, 317,
	0, 318, 319, 321, 0, 324, 325, 326, 327, 328,
	0, 329, 0, 0, 330, 331, 333, 334, 335, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 0, 349, 350, 351, 353, 0, 354, 355, 358,
	359, 360, 361, 0, 363, 0, 0, 364, 365, 366,
	0, 0, 367, 368, 369, 370, 371, 372, 375, 0,
	377, 378, 379, 380, 381, 382, 383, 613, 385, 386,
	387, 388, 389, 390, 391, 0, 0, 392, 394, 395,
	0, 2647, 0, 751, 410, 411, 412, 413, 414, 415,
	416, 418, 0, 420, 421, 422, 0, 423, 424, 425,
	426, 0, 427, 428, 429, 430, 431, 433, 436, 437,
	438, 439, 0, 442, 443, 444, 445, 446, 447, 448,
	450, 451, 452, 454, 455, 456, 614, 457, 458, 459,
	460, 0, 462, 463, 615, 465, 466, 468, 469, 470,
	471, 472, 473, 624, 0, 475, 2652, 476, 477, 478,
	479, 480, 0, 482, 483, 484, 485, 486, 487, 490,
	491, 492, 494, 495, 0, 496, 497, 0, 499, 500,
	754, 502, 503, 504, 505, 506, 0, 625, 507, 2378,
	508, 0, 509, 510, 511, 512, 513, 514, 515, 517,
	0, 4239, 519, 520, 521, 523, 524, 525, 526, 529,
	530, 531, 532, 533, 0, 534, 536, 538, 616, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 539, 540,
	2648, 407, 401, 357, 399, 400, 404, 405, 408, 2666,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2664, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1915, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4505, 1920, 233, 1926, 250, 736, 1936, 299, 336, 551,
	1923, 1968, 396, 1973, 449, 453, 1997, 542, 1930, 1933,
	1943, 1946, 307, 1951, 741, 1959, 747, 1969, 753, 1988,
	518, 1994, 743, 744, 749, 238, 626, 541, 612, 1982,
	1928, 1986, 403, 1979, 1955, 1995, 1972, 1984, 1965, 1970,
	246, 1957, 1958, 1962, 1971, 745, 742, 746, 752, 740,
	750, 737, 748, 1992, 440, 374, 591, 467, 245, 291,
	278, 320, 362, 474, 1927, 1945, 352, 522, 287, 376,
	1978, 266, 409, 1991, 498, 373, 1985, 481, 501, 1947,
	393, 272, 432, 488, 489, 734, 739, 1935, 755, 1922,
	276, 277, 398, 258, 406, 603, 569, 461, 419, 417,
	1953, 384, 441, 598, 1925, 0, 306, 0, 301, 397,
	537, 264, 516, 435, 402, 356, 464, 493, 303, 288,
	289, 332, 434, 322, 274, 527, 566, 570, 568, 564,
	561, 565, 562, 563, 567, 323, 560, 0, 535, 544,
	578, 558, 586, 543, 583, 553, 298, 582, 547, 546,
	592, 573, 574, 528, 588, 559, 557, 550, 549, 545,
	1993, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 234, 1921, 235, 236, 237, 239, 240, 241, 733,
	242, 243, 244, 247, 248, 249, 251, 611, 252, 253,
	254, 255, 256, 257, 548, 735, 259, 260, 261, 262,
	263, 265, 267, 268, 269, 270, 271, 273, 275, 1937,
	1938, 1939, 738, 1940, 1941, 1942, 279, 280, 281, 282,
	283, 284, 1944, 285, 286, 290, 292, 293, 294, 295,
	296, 297, 300, 1948, 302, 304, 1949, 305, 308, 1950,
	309, 310, 311, 312, 313, 314, 315, 316, 552, 317,
	1952, 318, 319, 321, 1954, 324, 325, 326, 327, 328,
	1956, 329, 554, 555, 330, 331, 333, 334, 335, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 1960, 349, 350, 351, 353, 1961, 354, 355, 358,
	359, 360, 361, 1963, 363, 571, 1964, 364, 365, 366,
	1966, 1967, 367, 368, 369, 370, 371, 372, 375, 572,
	377, 378, 379, 380, 381, 382, 383, 613, 385, 386,
	387, 388, 389, 390, 391, 575, 576, 392, 394, 395,
	577, 579, 580, 751, 410, 411, 412, 413, 414, 415,
	416, 418, 1975, 420, 421, 422, 581, 423, 424, 425,
	426, 1976, 427, 428, 429, 430, 431, 433, 436, 437,
	438, 439, 1977, 442, 443, 444, 445, 446, 447, 448,
	450, 451, 452, 454, 455, 456, 614, 457, 458, 459,
	460, 584, 462, 463, 615, 465, 466, 468, 469, 470,
	471, 472, 473, 624, 1980, 475, 585, 476, 477, 478,
	479, 480, 1981, 482, 483, 484, 485, 486, 487, 490,
	491, 492, 494, 495, 587, 496, 497, 1983, 499, 500,
	754, 502, 503, 504, 505, 506, 1987, 625, 507, 589,
	508, 590, 509, 510, 511, 512, 513, 514, 515, 517,
	1989, 1990, 519, 520, 521, 523, 524, 525, 526, 529,
	530, 531, 532, 533, 1996, 534, 536, 538, 616, 593,
	594, 595, 596, 597, 599, 600, 601, 602, 539, 540,
	556, 407, 401, 357, 399, 400, 404, 405, 408, 1974,
	1924, 1929, 1931, 1932, 1934, 0, 0, 0, 0, 0,
	0, 0, 0, 1410, 0, 0, 0, 0, 0, 0,
	1407, 0, 0, 1377, 0, 0, 1913, 1389, 1390, 1391,
	1421, 1423, 1405, 1450, 1471, 0, 1522, 1568, 1538, 1393,
	1655, 1661, 1394, 1722, 1726, 0, 1402, 1452, 1378, 1502,
	1517, 1532, 1544, 1397, 1403, 1395, 1659, 1398, 1803, 1814,
	1834, 1399, 1400, 1401, 1379, 1795, 1852, 1621, 1780, 1432,
	0, 1408, 1746, 0, 0, 1669, 1784, 0, 0, 1446,
	0, 0, 0, 0, 1594, 1583, 1617, 1730, 1555, 1675,
	1483, 1642, 1820, 1712, 1631, 1826, 1744, 1445, 1511, 1495,
	1547, 1612, 1753, 1428, 1512, 1587, 1818, 1507, 1633, 0,
	1474, 1677, 1819, 1782, 1630, 1793, 1763, 1788, 1518, 1656,
	1481, 1703, 1770, 1771, 1441, 1554, 1476, 1829, 1426, 1486,
	1494, 1664, 1465, 1672, 1850, 1604, 1737, 1687, 1685, 0,
	1644, 1713, 1845, 0, 0, 1531, 0, 1525, 1663, 1837,
	1472, 1811, 1706, 1668, 1606, 1740, 1775, 1527, 1508, 1509,
	1565, 1705, 1550, 1484, 1825, 1601, 1605, 1603, 1599, 1596,
	1600, 1597, 1598, 1602, 1552, 1595, 0, 0, 1442, 1662,
	1590, 1760, 1440, 1709, 1548, 1521, 0, 0, 0, 1827,
	1641, 1643, 0, 1796, 1591, 1589, 1500, 1499, 1443, 1828,
	1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1422,
	1424, 1425, 1429, 1430, 1431, 1433, 1434, 1435, 1436, 1437,
	1438, 1439, 1447, 1448, 1449, 1451, 1454, 1455, 1456, 1458,
	1459, 1460, 1461, 1462, 1463, 1466, 1467, 1468, 1469, 1470,
	1473, 1475, 1477, 1478, 1479, 1480, 1482, 1485, 1487, 1488,
	1489, 1490, 1491, 1492, 1493, 1496, 1497, 0, 1498, 1501,
	1503, 1504, 1505, 1506, 1510, 1513, 1514, 1515, 1516, 1519,
	1520, 1523, 1524, 1526, 1528, 1529, 1530, 1533, 0, 1534,
	1535, 1536, 1537, 1539, 1540, 1541, 1542, 1543, 1545, 0,
	0, 1546, 1549, 1551, 1553, 1556, 1557, 1558, 1559, 0,
	1560, 1561, 1562, 1563, 1564, 1566, 0, 1567, 1569, 1570,
	1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580,
	1581, 1582, 1585, 1586, 1588, 0, 1592, 1593, 1608, 1609,
	1610, 1611, 1613, 1615, 1616, 1614, 1618, 1619, 1620, 1622,
	1623, 1624, 1625, 1626, 1627, 1628, 1629, 1632, 1634, 1635,
	0, 1636, 1637, 0, 1638, 1639, 1640, 1645, 1646, 1647,
	1648, 1649, 1650, 1651, 1652, 1653, 1654, 1657, 1658, 1660,
	1674, 1676, 0, 1678, 1679, 1680, 1681, 1682, 1683, 1684,
	1686, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696,
	1697, 1698, 1699, 1700, 1701, 1702, 1704, 1707, 1708, 1710,
	1711, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1723,
	1724, 1725, 1727, 1728, 1729, 1731, 1732, 1733, 1734, 1735,
	1736, 1738, 1739, 1741, 1742, 1743, 0, 1745, 1747, 1748,
	1749, 1750, 1751, 1752, 1755, 1754, 1756, 1757, 1758, 1759,
	1761, 1762, 1764, 1765, 1766, 1767, 1768, 1769, 1772, 1773,
	1774, 1776, 1777, 1778, 1779, 1781, 1783, 1785, 1787, 1786,
	1789, 1790, 1791, 1792, 1794, 1797, 1798, 1799, 1800, 1801,
	1802, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1812, 0,
	1813, 1815, 1816, 1817, 1821, 1822, 1823, 1824, 1830, 1831,
	1832, 1833, 1835, 0, 0, 1836, 1838, 1839, 1840, 1841,
	1842, 1843, 1844, 1846, 1847, 1848, 1849, 0, 1851, 1584,
	1673, 1667, 1607, 1665, 1666, 1670, 1671, 0, 0, 1427,
	1444, 1453, 1457, 1464, 0, 1396, 0, 0, 0, 0,
	0, 0, 0, 0, 1386, 1387, 1388, 0, 0, 0,
	0, 0, 0, 1380, 1381, 1382, 1383, 1384, 1385, 1915,
	0, 4888, 905, 0, 0, 0, 0, 982, 0, 0,
	0, 0, 0, 0, 0, 0, 1920, 233, 1926, 250,
	736, 1936, 299, 336, 551, 1923, 1968, 396, 1973, 449,
	453, 1997, 542, 1930, 1933, 1943, 1946, 307, 1951, 741,
	1959, 747, 1969, 753, 1988, 518, 1994, 743, 744, 749,
	238, 626, 541, 612, 1982, 1928, 1986, 403, 1979, 1955,
	1995, 1972, 1984, 1965, 1970, 246, 1957, 1958, 1962, 1971,
	745, 742, 746, 752, 740, 750, 737, 748, 1992, 440,
	374, 591, 467, 245, 291, 278, 320, 362, 474, 1927,
	1945, 352, 522, 287, 376, 1978, 266, 409, 1991, 498,
	373, 1985, 481, 501, 1947, 393, 272, 432, 488, 489,
	734, 739, 1935, 755, 1922, 276, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 1953, 384, 441, 598, 1925,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 565, 562, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 1993, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 1921, 235, 236,
	237, 239, 240, 241, 733, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 548,
	735, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 1937, 1938, 1939, 738, 1940, 1941,
	1942, 279, 280, 281, 282, 283, 284, 1944, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 1948, 302,
	304, 1949, 305, 308, 1950, 309, 310, 311, 312, 313,
	314, 315, 316, 552, 317, 1952, 318, 319, 321, 1954,
	324, 325, 326, 327, 328, 1956, 329, 554, 555, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 1960, 349, 350, 351,
	353, 1961, 354, 355, 358, 359, 360, 361, 1963, 363,
	571, 1964, 364, 365, 366, 1966, 1967, 367, 368, 369,
	370, 371, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 576, 392, 394, 395, 577, 579, 580, 751, 410,
	411, 412, 413, 414, 415, 416, 418, 1975, 420, 421,
	422, 581, 423, 424, 425, 426, 1976, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 1977, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 584, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 1980,
	475, 585, 476, 477, 478, 479, 480, 1981, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 587,
	496, 497, 1983, 499, 500, 754, 502, 503, 504, 505,
	506, 1987, 625, 507, 589, 508, 590, 509, 510, 511,
	512, 513, 514, 515, 517, 1989, 1990, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 1996,
	534, 536, 538, 616, 593, 594, 595, 596, 597, 599,
	600, 601, 602, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 1974, 1924, 1929, 1931, 1932, 1934,
	1915, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1920, 233, 1926,
	250, 736, 1936, 299, 336, 551, 1923, 1968, 396, 1973,
	449, 453, 1997, 542, 1930, 1933, 1943, 1946, 307, 1951,
	741, 1959, 747, 1969, 753, 1988, 518, 1994, 743, 744,
	749, 238, 626, 541, 612, 1982, 1928, 1986, 403, 1979,
	1955, 1995, 1972, 1984, 1965, 1970, 246, 1957, 1958, 1962,
	1971, 745, 742, 746, 752, 740, 750, 737, 748, 1992,
	440, 374, 591, 467, 245, 291, 278, 320, 362, 474,
	1927, 1945, 352, 522, 287, 376, 1978, 266, 409, 1991,
	498, 373, 1985, 481, 501, 1947, 393, 272, 432, 488,
	489, 734, 739, 1935, 755, 1922, 276, 277, 398, 258,
	406, 603, 569, 461, 419, 417, 1953, 384, 441, 598,
	1925, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 566, 570, 568, 564, 561, 565, 562, 563,
	567, 323, 560, 0, 535, 544, 578, 558, 586, 543,
	583, 553, 298, 582, 547, 546, 592, 573, 574, 528,
	588, 559, 557, 550, 549, 545, 1993, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 1921, 235,
	236, 237, 239, 240, 241, 733, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	548, 735, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 1937, 1938, 1939, 738, 1940,
	1941, 1942, 279, 280, 281, 282, 283, 284, 1944, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 1948,
	302, 304, 1949, 305, 308, 1950, 309, 310, 311, 312,
	313, 314, 315, 316, 552, 317, 1952, 318, 319, 321,
	1954, 324, 325, 326, 327, 328, 1956, 329, 554, 555,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 1960, 349, 350,
	351, 353, 1961, 354, 355, 358, 359, 360, 361, 1963,
	363, 571, 1964, 364, 365, 366, 1966, 1967, 367, 368,
	369, 370, 371, 372, 375, 572, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 575, 576, 392, 394, 395, 577, 579, 580, 751,
	410, 411, 412, 413, 414, 415, 416, 418, 1975, 420,
	421, 422, 581, 423, 424, 425, 426, 1976, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 1977, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 584, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	1980, 475, 585, 476, 477, 478, 479, 480, 1981, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	587, 496, 497, 1983, 499, 500, 754, 502, 503, 504,
	505, 506, 1987, 625, 507, 589, 508, 590, 509, 510,
	511, 512, 513, 514, 515, 517, 1989, 1990, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	1996, 534, 536, 538, 616, 593, 594, 595, 596, 597,
	599, 600, 601, 602, 539, 540, 556, 407, 401, 357,
	399, 400, 404, 405, 408, 1974, 1924, 1929, 1931, 1932,
	1934, 1915, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1920, 233,
	1926, 250, 736, 1936, 2822, 336, 551, 1923, 1968, 396,
	1973, 449, 453, 1997, 542, 1930, 1933, 1943, 1946, 307,
	1951, 741, 1959, 747, 1969, 753, 1988, 518, 1994, 743,
	744, 749, 238, 626, 541, 612, 1982, 1928, 1986, 403,
	1979, 1955, 1995, 1972, 1984, 1965, 1970, 246, 1957, 1958,
	1962, 1971, 745, 742, 746, 752, 740, 750, 737, 748,
	1992, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	2820, 1927, 1945, 352, 522, 287, 376, 1978, 266, 409,
	1991, 498, 373, 1985, 481, 501, 1947, 393, 272, 432,
	488, 489, 734, 739, 1935, 755, 1922, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 1953, 384, 441,
	598, 1925, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 565, 562,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 1993, 223, 224,
	225, 226, 227, 2821, 229, 230, 231, 232, 234, 1921,
	235, 236, 237, 239, 240, 241, 733, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 548, 735, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 1937, 1938, 1939, 738,
	1940, 1941, 1942, 279, 280, 281, 282, 283, 284, 1944,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	1948, 302, 304, 1949, 305, 308, 1950, 309, 310, 311,
	312, 313, 314, 315, 316, 552, 317, 1952, 318, 319,
	321, 1954, 324, 325, 326, 327, 328, 1956, 329, 554,
	555, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 1960, 349,
	350, 351, 353, 1961, 354, 355, 358, 359, 360, 361,
	1963, 363, 571, 1964, 364, 365, 366, 1966, 1967, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 576, 392, 394, 395, 577, 579, 580,
	751, 410, 411, 412, 413, 414, 415, 416, 418, 1975,
	420, 421, 422, 581, 423, 424, 425, 426, 1976, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 1977,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 584, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 1980, 475, 585, 476, 477, 478, 479, 480, 1981,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 587, 496, 497, 1983, 499, 500, 754, 502, 503,
	504, 505, 506, 1987, 625, 507, 589, 508, 590, 509,
	510, 511, 512, 513, 514, 515, 517, 1989, 1990, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 1996, 534, 536, 538, 616, 593, 594, 595, 596,
	597, 599, 600, 601, 602, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 1974, 1924, 1929, 1931,
	1932, 1934, 864, 0, 1318, 905, 0, 0, 0, 698,
	982, 0, 0, 0, 0, 0, 709, 710, 711, 1920,
	233, 1926, 250, 736, 1936, 299, 336, 0, 1923, 1968,
	396, 1973, 449, 453, 1997, 0, 1930, 1933, 1943, 1946,
	307, 1951, 741, 1959, 747, 1969, 753, 1988, 518, 1994,
	743, 744, 749, 238, 863, 541, 612, 1982, 1928, 1986,
	3270, 1979, 1955, 1995, 1972, 1984, 1965, 1970, 246, 1957,
	1958, 1962, 1971, 745, 742, 746, 752, 740, 750, 737,
	748, 1992, 440, 374, 0, 467, 245, 291, 278, 320,
	362, 474, 1927, 1945, 352, 522, 287, 376, 1978, 266,
	409, 1991, 498, 373, 1985, 481, 501, 1947, 393, 272,
	432, 488, 489, 734, 739, 1935, 755, 1922, 276, 277,
	398, 258, 406, 0, 0, 461, 419, 417, 1953, 384,
	441, 0, 1925, 0, 306, 0, 301, 397, 537, 264,
	516, 435, 402, 356, 464, 493, 303, 288, 289, 332,
	434, 322, 274, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 323, 0, 0, 535, 866, 856, 848,
	849, 850, 851, 852, 853, 0, 868, 869, 870, 871,
	872, 528, 862, 0, 847, 854, 855, 857, 1993, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 234,
	1921, 235, 236, 237, 239, 240, 241, 733, 242, 243,
	244, 247, 248, 249, 251, 611, 252, 253, 254, 255,
	256, 257, 0, 735, 259, 260, 261, 262, 263, 265,
	267, 268, 269, 270, 271, 273, 275, 1937, 1938, 1939,
	738, 1940, 1941, 1942, 279, 280, 281, 282, 283, 284,
	1944, 285, 286, 290, 292, 293, 294, 295, 296, 297,
	300, 1948, 302, 304, 1949, 305, 308, 1950, 309, 310,
	311, 312, 313, 314, 315, 316, 0, 317, 1952, 318,
	319, 321, 1954, 324, 325, 326, 327, 328, 1956, 329,
	0, 0, 330, 331, 333, 334, 335, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 1960,
	349, 350, 351, 353, 1961, 354, 355, 358, 359, 360,
	361, 1963, 363, 0, 1964, 364, 365, 366, 1966, 1967,
	367, 368, 369, 370, 371, 372, 375, 0, 377, 378,
	379, 380, 381, 382, 383, 613, 385, 386, 387, 388,
	389, 390, 391, 3269, 0, 392, 394, 395, 0, 0,
	0, 751, 410, 411, 412, 413, 414, 415, 416, 418,
	1975, 420, 421, 422, 0, 423, 424, 425, 426, 1976,
	427, 428, 429, 430, 431, 433, 436, 437, 438, 439,
	1977, 442, 443, 444, 445, 446, 447, 448, 450, 451,
	452, 454, 455, 456, 614, 457, 458, 459, 460, 0,
	462, 463, 615, 465, 466, 468, 469, 470, 471, 472,
	473, 624, 1980, 475, 2652, 476, 477, 478, 479, 480,
	1981, 482, 483, 484, 485, 486, 487, 490, 491, 492,
	494, 495, 0, 496, 497, 1983, 499, 500, 754, 502,
	503, 504, 505, 506, 1987, 625, 507, 0, 508, 0,
	509, 510, 511, 512, 513, 514, 515, 517, 1989, 1990,
	519, 520, 521, 523, 524, 525, 526, 529, 530, 531,
	532, 533, 1996, 534, 536, 538, 616, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 539, 540, 0, 407,
	401, 357, 399, 400, 404, 405, 408, 1974, 1924, 1929,
	1931, 1932, 1934, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 706, 707, 708, 0, 0, 0, 0,
	0, 0, 3271, 3272, 702, 703, 704, 705, 791, 0,
	973, 905, 0, 0, 0, 968, 982, 958, 0, 0,
	0, 0, 0, 0, 0, 2480, 233, 0, 250, 736,
	0, 299, 336, 963, 0, 951, 396, 0, 449, 453,
	0, 542, 978, 0, 955, 2481, 307, 976, 741, 0,
	747, 977, 753, 975, 518, 0, 743, 744, 749, 238,
	626, 541, 612, 0, 0, 0, 969, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 745,
	742, 746, 752, 740, 750, 737, 748, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 996, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 734,
	739, 0, 755, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 964, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 984, 985, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 2479, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 733, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 1008, 986,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 997, 987, 992, 998, 988, 989, 993,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 1000, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 1009, 967, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 1010,
	0, 364, 365, 366, 990, 991, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	1001, 392, 394, 395, 1007, 579, 1002, 751, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	1003, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 970, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 994, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 1004, 496,
	497, 995, 499, 500, 754, 502, 503, 504, 505, 506,
	0, 625, 507, 1005, 508, 1006, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 954, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 1011, 1012, 1015, 1013, 1014, 1016,
	1017, 1018, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 0, 0, 0, 999, 0, 0, 0,
	952, 0, 0, 791, 0, 973, 905, 0, 0, 0,
	968, 982, 958, 0, 0, 959, 2476, 0, 948, 949,
	2477, 233, 0, 250, 736, 0, 299, 336, 963, 0,
	951, 396, 0, 449, 453, 96, 542, 978, 0, 955,
	0, 307, 976, 741, 0, 747, 977, 753, 975, 518,
	0, 743, 744, 749, 238, 626, 541, 612, 0, 0,
	0, 969, 93, 0, 0, 0, 94, 0, 0, 246,
	0, 0, 0, 0, 745, 742, 746, 752, 740, 750,
	737, 748, 0, 440, 374, 1865, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 996, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 734, 739, 0, 755, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 964, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	984, 985, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 733, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 1008, 986, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 997, 987,
	992, 998, 988, 989, 993, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 1000, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 1009, 967, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 1010, 0, 364, 365, 366, 990,
	991, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 1001, 392, 394, 395, 1007,
	579, 1002, 751, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 1003, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	970, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 994, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 1004, 496, 497, 995, 499, 500, 754,
	502, 503, 504, 505, 506, 0, 625, 507, 1005, 508,
	1006, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	954, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 1011,
	1012, 1015, 1013, 1014, 1016, 1017, 1018, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 0, 0,
	0, 999, 0, 0, 0, 952, 0, 97, 791, 0,
	973, 905, 0, 0, 0, 968, 982, 958, 0, 0,
	959, 4535, 0, 948, 949, 0, 233, 0, 250, 736,
	0, 299, 336, 963, 0, 951, 396, 0, 449, 453,
	96, 542, 978, 0, 955, 0, 307, 976, 741, 0,
	747, 977, 753, 975, 518, 0, 743, 744, 749, 238,
	626, 541, 612, 0, 0, 0, 969, 93, 0, 0,
	0, 94, 0, 0, 246, 0, 0, 0, 0, 745,
	742, 746, 752, 740, 750, 737, 748, 0, 440, 374,
	1865, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 996, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 734,
	739, 0, 755, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 964, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 984, 985, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 733, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 1008, 986,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 997, 987, 992, 998, 988, 989, 993,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 1000, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 1009, 967, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 1010,
	0, 364, 365, 366, 990, 991, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	1001, 392, 394, 395, 1007, 579, 1002, 751, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	1003, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 970, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 994, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 1004, 496,
	497, 995, 499, 500, 754, 502, 503, 504, 505, 506,
	0, 625, 507, 1005, 508, 1006, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 954, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 1011, 1012, 1015, 1013, 1014, 1016,
	1017, 1018, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 0, 0, 0, 999, 0, 0, 0,
	952, 0, 97, 791, 0, 973, 905, 0, 0, 0,
	968, 982, 958, 0, 0, 959, 0, 0, 948, 949,
	0, 233, 0, 250, 736, 0, 299, 336, 963, 0,
	951, 396, 0, 449, 453, 0, 542, 978, 0, 955,
	0, 307, 976, 741, 0, 747, 977, 753, 975, 518,
	0, 743, 744, 749, 238, 626, 541, 612, 0, 0,
	0, 969, 0, 2527, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 745, 742, 746, 752, 740, 750,
	737, 748, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 996, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 734, 739, 0, 755, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 964, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	984, 985, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 733, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 1008, 986, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 997, 987,
	992, 998, 988, 989, 993, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 1000, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 1009, 967, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 1010, 2523, 364, 365, 366, 990,
	991, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 1001, 392, 394, 395, 1007,
	579, 1002, 751, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 1003, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	970, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 994, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 1004, 496, 497, 995, 499, 500, 754,
	502, 503, 504, 505, 506, 2524, 625, 507, 1005, 508,
	1006, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	954, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 1011,
	1012, 1015, 1013, 1014, 1016, 1017, 1018, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 0, 0,
	2522, 999, 0, 0, 0, 952, 0, 791, 0, 973,
	905, 0, 0, 0, 968, 982, 958, 0, 0, 0,
	959, 0, 0, 948, 949, 233, 0, 250, 736, 0,
	299, 336, 963, 0, 951, 396, 0, 449, 453, 0,
	542, 978, 0, 955, 0, 307, 976, 741, 0, 747,
	977, 753, 975, 518, 0, 743, 744, 749, 238, 626,
	541, 612, 0, 0, 0, 969, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 745, 742,
	746, 752, 740, 750, 737, 748, 0, 440, 374, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 996, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 734, 739,
	0, 755, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 964, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 984, 985, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 733, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 1008, 986, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 997, 987, 992, 998, 988, 989, 993, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 1000, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 1009, 967, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 1010, 0,
	364, 365, 366, 990, 991, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 1001,
	392, 394, 395, 1007, 579, 1002, 751, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 1003,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 970, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 994, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 1004, 496, 497,
	995, 499, 500, 754, 502, 503, 504, 505, 506, 0,
	625, 507, 1005, 508, 1006, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 954, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 1011, 1012, 1015, 1013, 1014, 1016, 1017,
	1018, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 0, 0, 0, 999, 0, 0, 0, 952,
	0, 0, 791, 0, 973, 905, 0, 0, 0, 968,
	982, 958, 0, 0, 959, 0, 0, 948, 949, 946,
	233, 0, 250, 736, 0, 299, 336, 963, 0, 951,
	396, 0, 449, 453, 0, 542, 978, 0, 955, 0,
	307, 976, 741, 0, 747, 977, 753, 975, 518, 0,
	743, 744, 749, 238, 626, 541, 612, 0, 0, 0,
	969, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 745, 742, 746, 752, 740, 750, 737,
	748, 0, 440, 374, 591, 467, 245, 291, 278, 320,
	362, 474, 0, 0, 352, 522, 287, 376, 0, 266,
	409, 996, 498, 373, 0, 481, 501, 0, 393, 272,
	432, 488, 489, 734, 739, 0, 755, 0, 276, 277,
	398, 258, 406, 603, 569, 461, 419, 417, 0, 384,
	441, 598, 964, 0, 306, 0, 301, 397, 537, 264,
	516, 435, 402, 356, 464, 493, 303, 288, 289, 332,
	434, 322, 274, 527, 566, 570, 568, 564, 561, 984,
	985, 563, 567, 323, 560, 0, 535, 544, 578, 558,
	586, 543, 583, 553, 298, 582, 547, 546, 592, 573,
	574, 528, 588, 559, 557, 550, 549, 545, 0, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 234,
	0, 235, 236, 237, 239, 240, 241, 733, 242, 243,
	244, 247, 248, 249, 251, 611, 252, 253, 254, 255,
	256, 257, 1008, 986, 259, 260, 261, 262, 263, 265,
	267, 268, 269, 270, 271, 273, 275, 997, 987, 992,
	998, 988, 989, 993, 279, 280, 281, 282, 283, 284,
	0, 285, 286, 290, 292, 293, 294, 295, 296, 297,
	300, 0, 302, 304, 0, 305, 308, 0, 309, 310,
	311, 312, 313, 314, 315, 316, 1000, 317, 0, 318,
	319, 321, 0, 324, 325, 326, 327, 328, 0, 329,
	1009, 967, 330, 331, 333, 334, 335, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 0,
	349, 350, 351, 353, 0, 354, 355, 358, 359, 360,
	361, 0, 363, 1010, 0, 364, 365, 366, 990, 991,
	367, 368, 369, 370, 371, 372, 375, 572, 377, 378,
	379, 380, 381, 382, 383, 613, 385, 386, 387, 388,
	389, 390, 391, 575, 1001, 392, 394, 395, 1007, 579,
	1002, 751, 410, 411, 412, 413, 414, 415, 416, 418,
	0, 420, 421, 422, 1003, 423, 424, 425, 426, 0,
	427, 428, 429, 430, 431, 433, 436, 437, 438, 439,
	0, 442, 443, 444, 445, 446, 447, 448, 450, 451,
	452, 454, 455, 456, 614, 457, 458, 459, 460, 970,
	462, 463, 615, 465, 466, 468, 469, 470, 471, 472,
	473, 624, 994, 475, 585, 476, 477, 478, 479, 480,
	0, 482, 483, 484, 485, 486, 487, 490, 491, 492,
	494, 495, 1004, 496, 497, 995, 499, 500, 754, 502,
	503, 504, 505, 506, 0, 625, 507, 1005, 508, 1006,
	509, 510, 511, 512, 513, 514, 515, 517, 0, 954,
	519, 520, 521, 523, 524, 525, 526, 529, 530, 531,
	532, 533, 0, 534, 536, 538, 616, 593, 1011, 1012,
	1015, 1013, 1014, 1016, 1017, 1018, 539, 540, 556, 407,
	401, 357, 399, 400, 404, 405, 408, 0, 0, 0,
	999, 0, 0, 0, 952, 0, 791, 0, 973, 905,
	0, 0, 0, 968, 982, 958, 0, 1870, 2462, 959,
	0, 0, 948, 949, 233, 0, 250, 736, 0, 299,
	336, 963, 0, 951, 396, 0, 449, 453, 0, 542,
	978, 0, 955, 0, 307, 976, 741, 0, 747, 977,
	753, 975, 518, 0, 743, 744, 749, 238, 626, 541,
	612, 0, 0, 2423, 969, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 745, 742, 746,
	752, 740, 750, 737, 748, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 996, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 734, 739, 0,
	755, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 964, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 984, 985, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 733, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 1008, 986, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 997, 987, 992, 998, 988, 989, 993, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	1000, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 1009, 967, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 1010, 0, 364,
	365, 366, 990, 991, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 1001, 392,
	394, 395, 1007, 579, 1002, 751, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 1003, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 970, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 994, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 1004, 496, 497, 995,
	499, 500, 754, 502, 503, 504, 505, 506, 0, 625,
	507, 1005, 508, 1006, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 954, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 1011, 1012, 1015, 1013, 1014, 1016, 1017, 1018,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 0, 0, 0, 999, 0, 0, 0, 952, 0,
	791, 0, 973, 905, 0, 0, 0, 968, 982, 958,
	0, 0, 0, 959, 0, 0, 948, 949, 233, 0,
	250, 736, 0, 299, 336, 963, 0, 951, 396, 0,
	449, 453, 0, 542, 978, 0, 955, 0, 307, 976,
	741, 0, 747, 977, 753, 975, 518, 0, 743, 744,
	749, 238, 626, 541, 612, 0, 0, 0, 969, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 745, 742, 746, 752, 740, 750, 737, 748, 0,
	440, 374, 591, 467, 245, 291, 278, 320, 362, 474,
	0, 0, 352, 522, 287, 376, 0, 266, 409, 996,
	498, 373, 0, 481, 501, 0, 393, 272, 432, 488,
	489, 734, 739, 0, 755, 0, 276, 277, 398, 258,
	406, 603, 569, 461, 419, 417, 0, 384, 441, 598,
	964, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 566, 570, 568, 564, 561, 984, 985, 563,
	567, 323, 560, 0, 535, 544, 578, 558, 586, 543,
	583, 553, 298, 582, 547, 546, 592, 573, 574, 528,
	588, 559, 557, 550, 549, 545, 3526, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 235,
	236, 237, 239, 240, 241, 733, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	1008, 986, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 997, 987, 992, 998, 988,
	989, 993, 279, 280, 281, 282, 283, 284, 0, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 0,
	302, 304, 0, 305, 308, 0, 309, 310, 311, 312,
	313, 314, 315, 316, 1000, 317, 0, 318, 319, 321,
	0, 324, 325, 326, 327, 328, 0, 329, 1009, 967,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 0, 349, 350,
	351, 353, 0, 354, 355, 358, 359, 360, 361, 0,
	363, 1010, 0, 364, 365, 366, 990, 991, 367, 368,
	369, 370, 371, 372, 375, 572, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 575, 1001, 392, 394, 395, 1007, 579, 1002, 751,
	410, 411, 412, 413, 414, 415, 416, 418, 0, 420,
	421, 422, 1003, 423, 424, 425, 426, 0, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 0, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 970, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	994, 475, 585, 476, 477, 478, 479, 480, 0, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	1004, 496, 497, 995, 499, 500, 754, 502, 503, 504,
	505, 506, 0, 625, 507, 1005, 508, 1006, 509, 510,
	511, 512, 513, 514, 515, 517, 0, 954, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	0, 534, 536, 538, 616, 593, 1011, 1012, 1015, 1013,
	1014, 1016, 1017, 1018, 539, 540, 556, 407, 401, 357,
	399, 400, 404, 405, 408, 0, 0, 0, 999, 0,
	0, 0, 952, 0, 791, 0, 973, 905, 0, 0,
	0, 968, 982, 958, 0, 0, 0, 959, 0, 0,
	948, 949, 233, 0, 250, 736, 0, 299, 336, 963,
	0, 951, 396, 0, 449, 453, 0, 542, 978, 0,
	955, 0, 307, 976, 741, 0, 747, 977, 753, 975,
	518, 0, 743, 744, 749, 238, 626, 541, 612, 0,
	0, 0, 969, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 745, 742, 746, 752, 740,
	750, 737, 748, 0, 440, 374, 591, 467, 245, 291,
	278, 320, 362, 474, 0, 0, 352, 522, 287, 376,
	0, 266, 409, 996, 498, 373, 0, 481, 501, 0,
	393, 272, 432, 488, 489, 734, 739, 0, 755, 0,
	276, 277, 398, 258, 406, 603, 569, 461, 419, 417,
	0, 384, 441, 598, 964, 0, 306, 0, 301, 397,
	537, 264, 516, 435, 402, 356, 464, 493, 303, 288,
	289, 332, 434, 322, 274, 527, 566, 570, 568, 564,
	561, 984, 985, 563, 567, 323, 560, 0, 535, 544,
	578, 558, 586, 543, 583, 553, 298, 582, 547, 546,
	592, 573, 574, 528, 588, 559, 557, 550, 549, 545,
	0, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 234, 0, 235, 236, 237, 239, 240, 241, 733,
	242, 243, 244, 247, 248, 249, 251, 611, 252, 253,
	254, 255, 256, 257, 1008, 986, 259, 260, 261, 262,
	263, 265, 267, 268, 269, 270, 271, 273, 275, 997,
	987, 992, 998, 988, 989, 993, 279, 280, 281, 282,
	283, 284, 0, 285, 286, 290, 292, 293, 294, 295,
	296, 297, 300, 0, 302, 304, 0, 305, 308, 0,
	309, 310, 311, 312, 313, 314, 315, 316, 1000, 317,
	0, 318, 319, 321, 0, 324, 325, 326, 327, 328,
	0, 329, 1009, 967, 330, 331, 333, 334, 335, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 0, 349, 350, 351, 353, 0, 354, 355, 358,
	359, 360, 361, 0, 363, 1010, 0, 364, 365, 366,
	990, 991, 367, 368, 369, 370, 371, 372, 375, 572,
	377, 378, 379, 380, 381, 382, 383, 613, 385, 386,
	387, 388, 389, 390, 391, 575, 1001, 392, 394, 395,
	1007, 579, 1002, 751, 410, 411, 412, 413, 414, 415,
	416, 418, 0, 420, 421, 422, 1003, 423, 424, 425,
	426, 0, 427, 428, 429, 430, 431, 433, 436, 437,
	438, 439, 0, 442, 443, 444, 445, 446, 447, 448,
	450, 451, 452, 454, 455, 456, 614, 457, 458, 459,
	460, 970, 462, 463, 615, 465, 466, 468, 469, 470,
	471, 472, 473, 624, 994, 475, 585, 476, 477, 478,
	479, 480, 0, 482, 483, 484, 485, 486, 487, 490,
	491, 492, 494, 495, 1004, 496, 497, 995, 499, 500,
	754, 502, 503, 504, 505, 506, 0, 625, 507, 1005,
	508, 1006, 509, 510, 511, 512, 513, 514, 515, 517,
	0, 954, 519, 520, 521, 523, 524, 525, 526, 529,
	530, 531, 532, 533, 0, 534, 536, 538, 616, 593,
	1011, 1012, 1015, 1013, 1014, 1016, 1017, 1018, 539, 540,
	556, 407, 401, 357, 399, 400, 404, 405, 408, 0,
	0, 0, 999, 0, 0, 0, 952, 0, 791, 0,
	973, 905, 0, 0, 0, 968, 982, 958, 0, 0,
	0, 959, 3514, 0, 948, 949, 233, 0, 250, 736,
	0, 299, 336, 963, 0, 951, 396, 0, 449, 453,
	0, 542, 978, 0, 955, 0, 307, 976, 741, 0,
	747, 977, 753, 975, 518, 0, 743, 744, 749, 238,
	626, 541, 612, 0, 0, 0, 969, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 745,
	742, 746, 752, 740, 750, 737, 748, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 996, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 734,
	739, 0, 755, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 964, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 984, 985, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 733, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 1008, 986,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 997, 987, 992, 998, 988, 989, 993,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 1000, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 1009, 967, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 1010,
	0, 364, 365, 366, 990, 991, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	1001, 392, 394, 395, 1007, 579, 1002, 751, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	1003, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 970, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 994, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 1004, 496,
	497, 995, 499, 500, 754, 502, 503, 504, 505, 506,
	0, 625, 507, 1005, 508, 1006, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 954, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 1011, 1012, 1015, 1013, 1014, 1016,
	1017, 1018, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 0, 0, 0, 999, 0, 0, 0,
	952, 0, 791, 0, 973, 905, 0, 0, 0, 968,
	982, 958, 0, 0, 0, 959, 3476, 0, 948, 949,
	233, 0, 250, 736, 0, 299, 336, 963, 0, 951,
	396, 0, 449, 453, 0, 542, 978, 0, 955, 0,
	307, 976, 741, 0, 747, 977, 753, 975, 518, 0,
	743, 744, 749, 238, 626, 541, 612, 0, 0, 0,
	969, 0, 2527, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 745, 742, 746, 752, 740, 750, 737,
	748, 0, 440, 374, 591, 467, 245, 291, 278, 320,
	362, 474, 0, 0, 352, 522, 287, 376, 0, 266,
	409, 996, 498, 373, 0, 481, 501, 0, 393, 272,
	432, 488, 489, 734, 739, 0, 755, 0, 276, 277,
	398, 258, 406, 603, 569, 461, 419, 417, 0, 384,
	441, 598, 964, 0, 306, 0, 301, 397, 537, 264,
	516, 435, 402, 356, 464, 493, 303, 288, 289, 332,
	434, 322, 274, 527, 566, 570, 568, 564, 561, 984,
	985, 563, 567, 323, 560, 0, 535, 544, 578, 558,
	586, 543, 583, 553, 298, 582, 547, 546, 592, 573,
	574, 528, 588, 559, 557, 550, 549, 545, 0, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 234,
	0, 235, 236, 237, 239, 240, 241, 733, 242, 243,
	244, 247, 248, 249, 251, 611, 252, 253, 254, 255,
	256, 257, 1008, 986, 259, 260, 261, 262, 263, 265,
	267, 268, 269, 270, 271, 273, 275, 997, 987, 992,
	998, 988, 989, 993, 279, 280, 281, 282, 283, 284,
	0, 285, 286, 290, 292, 293, 294, 295, 296, 297,
	300, 0, 302, 304, 0, 305, 308, 0, 309, 310,
	311, 312, 313, 314, 315, 316, 1000, 317, 0, 318,
	319, 321, 0, 324, 325, 326, 327, 328, 0, 329,
	1009, 967, 330, 331, 333, 334, 335, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 0,
	349, 350, 351, 353, 0, 354, 355, 358, 359, 360,
	361, 0, 363, 1010, 0, 364, 365, 366, 990, 991,
	367, 368, 369, 370, 371, 372, 375, 572, 377, 378,
	379, 380, 381, 382, 383, 613, 385, 386, 387, 388,
	389, 390, 391, 575, 1001, 392, 394, 395, 1007, 579,
	1002, 751, 410, 411, 412, 413, 414, 415, 416, 418,
	0, 420, 421, 422, 1003, 423, 424, 425, 426, 0,
	427, 428, 429, 430, 431, 433, 436, 437, 438, 439,
	0, 442, 443, 444, 445, 446, 447, 448, 450, 451,
	452, 454, 455, 456, 614, 457, 458, 459, 460, 970,
	462, 463, 615, 465, 466, 468, 469, 470, 471, 472,
	473, 624, 994, 475, 585, 476, 477, 478, 479, 480,
	0, 482, 483, 484, 485, 486, 487, 490, 491, 492,
	494, 495, 1004, 496, 497, 995, 499, 500, 754, 502,
	503, 504, 505, 506, 0, 625, 507, 1005, 508, 1006,
	509, 510, 511, 512, 513, 514, 515, 517, 0, 954,
	519, 520, 521, 523, 524, 525, 526, 529, 530, 531,
	532, 533, 0, 534, 536, 538, 616, 593, 1011, 1012,
	1015, 1013, 1014, 1016, 1017, 1018, 539, 540, 556, 407,
	401, 357, 399, 400, 404, 405, 408, 0, 0, 0,
	999, 0, 0, 0, 952, 0, 791, 0, 973, 905,
	0, 0, 0, 968, 982, 958, 0, 0, 0, 959,
	0, 0, 948, 949, 233, 0, 250, 736, 0, 299,
	336, 963, 0, 951, 396, 0, 449, 453, 0, 542,
	978, 0, 955, 0, 307, 976, 741, 0, 747, 977,
	753, 975, 518, 0, 743, 744, 749, 238, 626, 541,
	612, 0, 0, 0, 969, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 745, 742, 746,
	752, 740, 750, 737, 748, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 996, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 734, 739, 0,
	755, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 964, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 984, 985, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 733, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 1008, 986, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 997, 987, 992, 998, 988, 989, 993, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	1000, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 1009, 967, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 1010, 0, 364,
	365, 366, 990, 991, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 1001, 392,
	394, 395, 1007, 579, 1002, 751, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 1003, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 970, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 994, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 1004, 496, 497, 995,
	499, 500, 754, 502, 503, 504, 505, 506, 0, 625,
	507, 1005, 508, 1006, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 954, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 1011, 1012, 1015, 1013, 1014, 1016, 1017, 1018,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 0, 0, 0, 999, 0, 0, 0, 952, 0,
	0, 791, 0, 973, 905, 0, 0, 0, 968, 982,
	958, 0, 0, 959, 2467, 0, 948, 949, 1357, 233,
	0, 250, 736, 0, 299, 336, 963, 0, 951, 396,
	0, 449, 453, 0, 542, 978, 0, 955, 0, 307,
	976, 741, 0, 747, 977, 753, 975, 518, 0, 743,
	744, 749, 238, 626, 541, 612, 0, 0, 0, 969,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 745, 742, 746, 752, 740, 750, 737, 748,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	996, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 734, 739, 0, 755, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 964, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 984, 985,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 733, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 1008, 986, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 997, 987, 992, 998,
	988, 989, 993, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 1000, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 1009,
	967, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 1010, 0, 364, 365, 366, 990, 991, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 1001, 392, 394, 395, 1007, 579, 1002,
	751, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 1003, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 970, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 994, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 1004, 496, 497, 995, 499, 500, 754, 502, 503,
	504, 505, 506, 0, 625, 507, 1005, 508, 1006, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 954, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 1011, 1012, 1015,
	1013, 1014, 1016, 1017, 1018, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 0, 0, 0, 999,
	0, 0, 0, 952, 0, 791, 0, 973, 905, 0,
	0, 0, 968, 982, 958, 0, 0, 0, 959, 0,
	0, 948, 949, 233, 0, 250, 736, 0, 299, 336,
	963, 0, 951, 396, 0, 449, 453, 0, 542, 978,
	0, 955, 0, 307, 976, 741, 0, 747, 977, 753,
	975, 518, 0, 743, 744, 749, 238, 626, 541, 612,
	0, 0, 0, 969, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 745, 742, 746, 752,
	740, 750, 737, 748, 0, 440, 374, 591, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 996, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 734, 739, 0, 755,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 964, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 984, 985, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	733, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 1008, 986, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	997, 987, 992, 998, 988, 989, 993, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 1000,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 1009, 967, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 1010, 0, 364, 365,
	366, 990, 991, 367, 368, 369, 370, 371, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 1001, 392, 394,
	395, 1007, 579, 1002, 751, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 1003, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 970, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 994, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 1004, 496, 497, 995, 499,
	500, 754, 502, 503, 504, 505, 506, 0, 625, 507,
	1005, 508, 1006, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 954, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 1011, 1012, 1015, 1013, 1014, 1016, 1017, 1018, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	0, 0, 0, 999, 0, 0, 0, 952, 0, 791,
	0, 973, 905, 0, 0, 0, 968, 982, 958, 0,
	0, 0, 959, 0, 0, 948, 949, 233, 0, 250,
	736, 0, 299, 336, 963, 0, 951, 396, 0, 449,
	453, 0, 542, 978, 0, 955, 0, 307, 976, 741,
	0, 747, 977, 753, 975, 518, 0, 743, 744, 749,
	238, 626, 541, 612, 0, 0, 0, 969, 0, 0,
	0, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	745, 742, 746, 752, 740, 750, 737, 748, 0, 440,
	374, 591, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 996, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	734, 739, 0, 755, 0, 4544, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 0, 384, 441, 598, 964,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 984, 985, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 733, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 1008,
	986, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 997, 987, 992, 998, 988, 989,
	993, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 1000, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 1009, 967, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	1010, 0, 364, 365, 366, 990, 991, 367, 368, 369,
	370, 371, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 1001, 392, 394, 395, 1007, 579, 1002, 751, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 1003, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 970, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 994,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 1004,
	496, 497, 995, 499, 500, 754, 502, 503, 504, 505,
	506, 0, 625, 507, 1005, 508, 1006, 509, 510, 511,
	512, 513, 4543, 515, 517, 0, 954, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 1011, 1012, 1015, 1013, 1014,
	1016, 1017, 1018, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 0, 0, 0, 999, 0, 0,
	0, 952, 0, 791, 0, 973, 905, 0, 0, 0,
	968, 982, 958, 0, 0, 0, 959, 0, 0, 948,
	949, 233, 0, 250, 736, 0, 299, 336, 963, 0,
	951, 396, 0, 449, 453, 0, 542, 978, 0, 955,
	0, 307, 976, 741, 0, 747, 977, 753, 975, 518,
	0, 743, 744, 749, 238, 626, 541, 612, 0, 0,
	0, 969, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 745, 742, 746, 752, 740, 750,
	737, 748, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 996, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 734, 739, 0, 755, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 964, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	984, 985, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 733, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 1008, 986, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 4368, 997, 987,
	992, 998, 988, 989, 993, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 1000, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 1009, 4370, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 1010, 0, 364, 365, 366, 990,
	991, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 1001, 392, 394, 395, 1007,
	579, 1002, 751, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 1003, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 4369, 459, 460,
	970, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 994, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 1004, 496, 497, 995, 499, 500, 754,
	502, 503, 504, 505, 506, 0, 625, 507, 1005, 508,
	1006, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	954, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 1011,
	1012, 1015, 1013, 1014, 1016, 1017, 1018, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 0, 0,
	0, 999, 0, 0, 0, 952, 0, 791, 0, 973,
	905, 0, 0, 0, 968, 982, 958, 0, 0, 0,
	4367, 0, 0, 948, 949, 233, 0, 250, 736, 0,
	299, 336, 963, 0, 951, 396, 0, 449, 453, 0,
	4542, 978, 0, 955, 0, 307, 976, 741, 0, 747,
	977, 753, 975, 518, 0, 743, 744, 749, 238, 626,
	541, 612, 0, 0, 0, 969, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 745, 742,
	746, 752, 740, 750, 737, 748, 0, 440, 374, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 996, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 734, 739,
	0, 755, 0, 4544, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 964, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 984, 985, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 733, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 1008, 986, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 997, 987, 992, 998, 988, 989, 993, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 1000, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 1009, 967, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 1010, 0,
	364, 365, 366, 990, 991, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 1001,
	392, 394, 395, 1007, 579, 1002, 751, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 1003,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 970, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 994, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 1004, 496, 497,
	995, 499, 500, 754, 502, 503, 504, 505, 506, 0,
	625, 507, 1005, 508, 1006, 509, 510, 511, 512, 513,
	4543, 515, 517, 0, 954, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 1011, 1012, 1015, 1013, 1014, 1016, 1017,
	1018, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 0, 0, 0, 999, 0, 0, 0, 952,
	0, 791, 0, 973, 905, 0, 0, 0, 968, 982,
	958, 0, 0, 0, 959, 0, 0, 948, 949, 233,
	0, 250, 736, 0, 299, 336, 963, 0, 951, 396,
	0, 449, 453, 0, 542, 978, 0, 955, 0, 307,
	976, 741, 0, 747, 977, 753, 975, 518, 0, 743,
	744, 749, 238, 626, 541, 612, 0, 0, 0, 969,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 745, 742, 746, 752, 740, 750, 737, 748,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	996, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 734, 739, 0, 755, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 964, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 984, 985,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 733, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 1008, 986, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 997, 987, 992, 998,
	988, 989, 993, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 1000, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 1009,
	967, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 1010, 0, 364, 365, 366, 990, 991, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 3935, 575, 1001, 392, 394, 395, 1007, 579, 1002,
	751, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 1003, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 970, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 994, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 1004, 496, 497, 995, 499, 500, 754, 502, 503,
	504, 505, 506, 0, 625, 507, 1005, 508, 1006, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 954, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 1011, 1012, 1015,
	1013, 1014, 1016, 1017, 1018, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 0, 0, 0, 999,
	0, 0, 0, 952, 0, 791, 0, 973, 905, 0,
	0, 0, 968, 982, 958, 0, 0, 0, 959, 0,
	0, 948, 949, 233, 0, 250, 736, 0, 299, 336,
	963, 0, 951, 396, 0, 449, 453, 0, 542, 978,
	0, 955, 0, 307, 976, 741, 0, 747, 977, 753,
	975, 518, 0, 743, 744, 749, 238, 626, 541, 612,
	0, 0, 0, 969, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 745, 742, 746, 752,
	740, 750, 737, 748, 0, 440, 374, 591, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 996, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 734, 739, 0, 755,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 964, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 984, 985, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	733, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 1008, 986, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	997, 987, 992, 998, 988, 989, 993, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 1000,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 1009, 967, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 1010, 0, 364, 365,
	366, 990, 991, 367, 368, 369, 370, 371, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 1001, 392, 394,
	395, 1007, 579, 1002, 751, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 1003, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 970, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 994, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 1004, 496, 497, 995, 499,
	500, 754, 502, 503, 504, 505, 506, 0, 625, 507,
	1005, 508, 1006, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 954, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	3922, 1011, 1012, 1015, 1013, 1014, 1016, 1017, 1018, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	0, 0, 0, 999, 0, 0, 0, 952, 0, 791,
	0, 973, 905, 0, 0, 0, 968, 982, 958, 0,
	0, 0, 959, 0, 0, 948, 949, 233, 0, 250,
	736, 0, 299, 336, 963, 0, 951, 396, 0, 449,
	453, 0, 542, 978, 0, 955, 0, 307, 976, 741,
	0, 747, 977, 753, 975, 518, 0, 743, 744, 749,
	238, 626, 541, 612, 0, 0, 0, 969, 0, 0,
	0, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	745, 742, 746, 752, 740, 750, 737, 748, 0, 440,
	374, 591, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 996, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	734, 739, 0, 755, 0, 3139, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 0, 384, 441, 598, 964,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 984, 985, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 733, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 1008,
	986, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 997, 987, 992, 998, 988, 989,
	993, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 1000, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 1009, 967, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	1010, 0, 364, 365, 366, 990, 991, 367, 368, 369,
	370, 371, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 1001, 392, 394, 395, 1007, 579, 1002, 751, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 1003, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 970, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 994,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 1004,
	496, 497, 995, 499, 500, 754, 502, 503, 504, 505,
	506, 0, 625, 507, 1005, 508, 1006, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 954, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 1011, 1012, 1015, 1013, 1014,
	1016, 1017, 1018, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 0, 0, 0, 999, 0, 0,
	0, 952, 0, 791, 0, 2372, 905, 0, 0, 0,
	968, 982, 958, 0, 0, 0, 959, 0, 0, 948,
	949, 233, 0, 250, 736, 0, 299, 336, 963, 0,
	951, 396, 0, 449, 453, 0, 542, 978, 0, 955,
	0, 307, 976, 741, 0, 747, 977, 753, 975, 518,
	0, 743, 744, 749, 238, 626, 541, 612, 0, 0,
	0, 969, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 745, 742, 746, 752, 740, 750,
	737, 748, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 996, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 734, 739, 0, 755, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 964, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	984, 985, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 733, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 1008, 986, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 997, 987,
	992, 998, 988, 989, 993, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 1000, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 1009, 967, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 1010, 0, 364, 365, 366, 990,
	991, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 1001, 392, 394, 395, 1007,
	579, 1002, 751, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 1003, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	970, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 994, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 1004, 496, 497, 995, 499, 500, 754,
	502, 503, 504, 505, 506, 0, 625, 507, 1005, 508,
	1006, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	954, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 1011,
	1012, 1015, 1013, 1014, 1016, 1017, 1018, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 0, 0,
	0, 999, 0, 0, 0, 952, 0, 791, 0, 973,
	905, 0, 0, 0, 968, 982, 958, 0, 0, 0,
	959, 0, 0, 948, 949, 233, 0, 250, 736, 0,
	299, 336, 963, 0, 951, 396, 0, 449, 453, 0,
	542, 978, 0, 955, 0, 307, 976, 741, 0, 747,
	977, 753, 975, 518, 0, 743, 744, 749, 238, 626,
	541, 612, 0, 0, 0, 969, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 745, 742,
	746, 752, 740, 750, 737, 748, 0, 440, 374, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 996, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 734, 739,
	0, 755, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 964, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 984, 985, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 733, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 1008, 986, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 997, 987, 992, 998, 988, 989, 993, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 1000, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 1009, 967, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 1010, 0,
	364, 365, 366, 990, 991, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 1001,
	392, 394, 395, 1007, 579, 1002, 751, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 1003,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 970, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 994, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 1004, 496, 497,
	995, 499, 500, 754, 502, 503, 504, 505, 506, 0,
	625, 507, 1005, 508, 1006, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 954, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 1011, 1012, 1015, 1013, 1014, 1016, 1017,
	1018, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 0, 0, 0, 999, 0, 0, 0, 952,
	0, 791, 0, 973, 905, 0, 0, 0, 0, 982,
	958, 0, 0, 0, 959, 0, 0, 1365, 1366, 233,
	0, 250, 736, 0, 299, 336, 963, 0, 0, 396,
	0, 449, 453, 0, 542, 978, 0, 4191, 0, 307,
	976, 741, 0, 747, 977, 753, 975, 518, 0, 743,
	744, 749, 238, 626, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 745, 742, 746, 752, 740, 750, 737, 748,
	0, 440, 374, 591, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	996, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 734, 739, 0, 755, 0, 276, 277, 398,
	258, 406, 603, 569, 461, 419, 417, 0, 384, 441,
	598, 964, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 566, 570, 568, 564, 561, 984, 985,
	563, 567, 323, 560, 0, 535, 544, 578, 558, 586,
	543, 583, 553, 298, 582, 547, 546, 592, 573, 574,
	528, 588, 559, 557, 550, 549, 545, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 733, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 1008, 986, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 997, 987, 992, 998,
	988, 989, 993, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 1000, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 1009,
	967, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 1010, 0, 364, 365, 366, 990, 991, 367,
	368, 369, 370, 371, 372, 375, 572, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 575, 1001, 392, 394, 395, 1007, 579, 1002,
	751, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 1003, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 2517, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 994, 475, 585, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 1004, 496, 497, 995, 499, 500, 754, 502, 503,
	504, 505, 506, 0, 625, 507, 1005, 508, 1006, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 593, 1011, 1012, 1015,
	1013, 1014, 1016, 1017, 1018, 539, 540, 556, 407, 401,
	357, 399, 400, 404, 405, 408, 0, 0, 0, 999,
	0, 0, 0, 0, 0, 791, 0, 973, 905, 0,
	0, 0, 0, 982, 958, 0, 0, 0, 2366, 0,
	0, 2515, 2516, 233, 0, 250, 736, 0, 299, 336,
	963, 0, 0, 396, 0, 449, 453, 0, 542, 978,
	0, 0, 0, 307, 976, 741, 0, 747, 977, 753,
	975, 518, 0, 743, 744, 749, 238, 626, 541, 612,
	0, 0, 0, 403, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 745, 742, 746, 752,
	740, 750, 737, 748, 0, 440, 374, 591, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 996, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 734, 739, 0, 755,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 964, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 984, 985, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	733, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 1008, 986, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	997, 987, 992, 998, 988, 989, 993, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 1000,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 1009, 967, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 1010, 0, 364, 365,
	366, 990, 991, 367, 368, 369, 370, 371, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 1001, 392, 394,
	395, 1007, 579, 1002, 751, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 1003, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 2517, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 994, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 1004, 496, 497, 995, 499,
	500, 754, 502, 503, 504, 505, 506, 0, 625, 507,
	1005, 508, 1006, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 1011, 1012, 1015, 1013, 1014, 1016, 1017, 1018, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	0, 0, 0, 999, 0, 0, 0, 0, 0, 791,
	0, 973, 905, 0, 0, 0, 0, 982, 958, 0,
	0, 0, 2366, 0, 0, 2515, 2516, 233, 0, 250,
	736, 0, 299, 336, 963, 0, 0, 396, 0, 449,
	453, 0, 542, 978, 0, 0, 0, 307, 976, 741,
	0, 747, 977, 753, 975, 518, 0, 743, 744, 749,
	238, 626, 541, 612, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	745, 742, 746, 752, 740, 750, 737, 748, 0, 440,
	374, 591, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 996, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	734, 739, 0, 755, 0, 276, 277, 398, 258, 406,
	603, 569, 2365, 419, 417, 0, 384, 441, 598, 964,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 984, 985, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 733, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 1008,
	986, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 997, 987, 992, 998, 988, 989,
	993, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 1000, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 1009, 967, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	1010, 0, 364, 365, 366, 990, 991, 367, 368, 369,
	370, 371, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 1001, 392, 394, 395, 1007, 579, 1002, 751, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 1003, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 2364, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 994,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 1004,
	496, 497, 995, 499, 500, 754, 502, 503, 504, 505,
	506, 0, 625, 507, 1005, 508, 1006, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 1011, 1012, 1015, 1013, 1014,
	1016, 1017, 1018, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 0, 0, 0, 999, 0, 0,
	0, 0, 0, 791, 0, 973, 905, 0, 0, 0,
	968, 982, 958, 0, 0, 0, 2366, 0, 0, 2362,
	2363, 233, 0, 250, 736, 0, 299, 336, 963, 0,
	951, 396, 0, 449, 453, 0, 0, 978, 0, 955,
	0, 307, 976, 0, 0, 0, 977, 0, 975, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 969, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 745, 742, 746, 752, 740, 750,
	737, 748, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 996, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 734, 739, 0, 755, 0, 4544,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 964, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	984, 985, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 733, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 1008, 986, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 997, 987,
	992, 998, 988, 989, 993, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 1000, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 1009, 967, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 1010, 0, 364, 365, 366, 990,
	991, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 1001, 392, 394, 395, 1007,
	579, 1002, 751, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 1003, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	970, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 994, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 1004, 496, 497, 995, 499, 500, 754,
	502, 503, 504, 505, 506, 0, 625, 507, 1005, 508,
	1006, 509, 510, 511, 512, 513, 4543, 515, 517, 0,
	954, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 1011,
	1012, 1015, 1013, 1014, 1016, 1017, 1018, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 0, 0,
	0, 999, 0, 0, 0, 0, 0, 791, 0, 973,
	905, 0, 0, 0, 0, 982, 958, 0, 0, 0,
	959, 0, 0, 948, 949, 233, 0, 250, 736, 0,
	299, 336, 963, 0, 0, 396, 0, 449, 453, 0,
	542, 978, 0, 0, 0, 307, 976, 741, 0, 747,
	977, 753, 975, 518, 0, 743, 744, 749, 238, 626,
	541, 612, 0, 0, 0, 403, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 745, 742,
	746, 752, 740, 750, 737, 748, 0, 440, 374, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 996, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 734, 739,
	0, 755, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 964, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 984, 985, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 733, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 1008, 986, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 997, 987, 992, 998, 988, 989, 993, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 1000, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 1009, 967, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 1010, 0,
	364, 365, 366, 990, 991, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 1001,
	392, 394, 395, 1007, 579, 1002, 751, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 1003,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 2517, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 994, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 1004, 496, 497,
	995, 499, 500, 754, 502, 503, 504, 505, 506, 0,
	625, 507, 1005, 508, 1006, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 1011, 1012, 1015, 1013, 1014, 1016, 1017,
	1018, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 0, 0, 0, 999, 0, 791, 0, 973,
	905, 0, 0, 0, 0, 982, 958, 0, 0, 0,
	0, 0, 0, 0, 2366, 233, 0, 250, 736, 0,
	299, 336, 963, 0, 0, 396, 0, 449, 453, 0,
	542, 978, 0, 0, 0, 307, 976, 741, 0, 747,
	977, 753, 975, 518, 0, 743, 744, 749, 238, 626,
	541, 612, 0, 0, 0, 403, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 745, 742,
	746, 752, 740, 750, 737, 748, 0, 440, 374, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 996, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 734, 739,
	0, 755, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 3622, 964, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 984, 985, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 733, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 1008, 986, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 997, 987, 992, 998, 988, 989, 993, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 1000, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 1009, 967, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 1010, 0,
	364, 365, 366, 990, 991, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 1001,
	392, 394, 395, 1007, 579, 1002, 751, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 1003,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 2517, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 994, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 1004, 496, 497,
	995, 499, 500, 754, 502, 503, 504, 505, 506, 0,
	625, 507, 1005, 508, 1006, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 1011, 1012, 1015, 1013, 1014, 1016, 1017,
	1018, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 0, 0, 0, 999, 0, 791, 0, 973,
	905, 0, 0, 0, 0, 982, 958, 0, 0, 0,
	0, 0, 0, 0, 2366, 233, 0, 250, 736, 0,
	299, 336, 963, 0, 0, 396, 0, 449, 453, 0,
	542, 978, 0, 0, 0, 307, 976, 741, 0, 747,
	977, 753, 975, 518, 0, 743, 744, 749, 238, 626,
	541, 612, 0, 0, 0, 403, 0, 0, 0, 0,
	0, 0, 0, 3581, 0, 0, 0, 0, 745, 742,
	746, 752, 740, 750, 737, 748, 0, 440, 374, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 996, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 734, 739,
	0, 755, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 964, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 984, 985, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 733, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 1008, 986, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 997, 987, 992, 998, 988, 989, 993, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 1000, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 1009, 967, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 1010, 0,
	364, 365, 366, 990, 991, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 1001,
	392, 394, 395, 1007, 579, 1002, 751, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 1003,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 2517, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 994, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 1004, 496, 497,
	995, 499, 500, 754, 502, 503, 504, 505, 506, 0,
	625, 507, 1005, 508, 1006, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 1011, 1012, 1015, 1013, 1014, 1016, 1017,
	1018, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 0, 0, 0, 999, 0, 729, 0, 1318,
	905, 0, 0, 0, 0, 982, 0, 0, 0, 0,
	0, 0, 0, 0, 2366, 233, 0, 250, 736, 0,
	299, 336, 551, 0, 0, 396, 0, 449, 453, 0,
	542, 0, 0, 4425, 0, 307, 1315, 741, 0, 747,
	0, 753, 1314, 518, 0, 743, 744, 749, 238, 626,
	541, 612, 0, 0, 0, 403, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 1316, 745, 742,
	746, 752, 740, 750, 737, 748, 0, 440, 374, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 734, 739,
	0, 755, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 565, 562, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 733, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 548, 735, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 738, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 554, 555, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 571, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 751, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 581,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 584, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 0, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	0, 499, 500, 754, 502, 503, 504, 505, 506, 0,
	625, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 729, 0, 1318, 905, 0, 0, 0, 0,
	982, 0, 0, 0, 4426, 0, 0, 1319, 1320, 4424,
	233, 0, 250, 736, 0, 299, 336, 551, 0, 0,
	396, 0, 449, 453, 0, 542, 0, 0, 1324, 0,
	307, 1315, 741, 0, 747, 0, 753, 1314, 518, 0,
	743, 744, 749, 238, 626, 541, 612, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 1316, 745, 742, 746, 752, 740, 750, 737,
	748, 0, 440, 374, 591, 467, 245, 291, 278, 320,
	362, 474, 0, 0, 352, 522, 287, 376, 0, 266,
	409, 0, 498, 373, 0, 481, 501, 0, 393, 272,
	432, 488, 489, 734, 739, 0, 755, 0, 276, 277,
	398, 258, 406, 603, 569, 461, 419, 417, 0, 384,
	441, 598, 0, 0, 306, 0, 301, 397, 537, 264,
	516, 435, 402, 356, 464, 493, 303, 288, 289, 332,
	434, 322, 274, 527, 566, 570, 568, 564, 561, 565,
	562, 563, 567, 323, 560, 0, 535, 544, 578, 558,
	586, 543, 583, 553, 298, 582, 547, 546, 592, 573,
	574, 528, 588, 559, 557, 550, 549, 545, 0, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 234,
	0, 235, 236, 237, 239, 240, 241, 733, 242, 243,
	244, 247, 248, 249, 251, 611, 252, 253, 254, 255,
	256, 257, 548, 735, 259, 260, 261, 262, 263, 265,
	267, 268, 269, 270, 271, 273, 275, 0, 0, 0,
	738, 0, 0, 0, 279, 280, 281, 282, 283, 284,
	0, 285, 286, 290, 292, 293, 294, 295, 296, 297,
	300, 0, 302, 304, 0, 305, 308, 0, 309, 310,
	311, 312, 313, 314, 315, 316, 552, 317, 0, 318,
	319, 321, 0, 324, 325, 326, 327, 328, 0, 329,
	554, 555, 330, 331, 333, 334, 335, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 0,
	349, 350, 351, 353, 0, 354, 355, 358, 359, 360,
	361, 0, 363, 571, 0, 364, 365, 366, 0, 0,
	367, 368, 369, 370, 371, 372, 375, 572, 377, 378,
	379, 380, 381, 382, 383, 613, 385, 386, 387, 388,
	389, 390, 391, 575, 576, 392, 394, 395, 577, 579,
	580, 751, 410, 411, 412, 413, 414, 415, 416, 418,
	0, 420, 421, 422, 581, 423, 424, 425, 426, 0,
	427, 428, 429, 430, 431, 433, 436, 437, 438, 439,
	0, 442, 443, 444, 445, 446, 447, 448, 450, 451,
	452, 454, 455, 456, 614, 457, 458, 459, 460, 584,
	462, 463, 615, 465, 466, 468, 469, 470, 471, 472,
	473, 624, 0, 475, 585, 476, 477, 478, 479, 480,
	0, 482, 483, 484, 485, 486, 487, 490, 491, 492,
	494, 495, 587, 496, 497, 0, 499, 500, 754, 502,
	503, 504, 505, 506, 0, 625, 507, 589, 508, 590,
	509, 510, 511, 512, 513, 514, 515, 517, 0, 0,
	519, 520, 521, 523, 524, 525, 526, 529, 530, 531,
	532, 533, 0, 534, 536, 538, 616, 593, 594, 595,
	596, 597, 599, 600, 601, 602, 539, 540, 556, 407,
	401, 357, 399, 400, 404, 405, 408, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 729, 0, 1318, 905,
	0, 0, 0, 0, 982, 0, 0, 0, 0, 0,
	0, 0, 1319, 1320, 233, 0, 250, 736, 0, 299,
	336, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 1310, 0, 307, 1315, 741, 0, 747, 0,
	753, 1314, 518, 0, 743, 744, 749, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 1316, 745, 742, 746,
	752, 740, 750, 737, 748, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 734, 739, 0,
	755, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 733, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 548, 735, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 738, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 751, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 754, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	729, 0, 1318, 905, 0, 0, 0, 0, 982, 0,
	0, 0, 0, 0, 0, 0, 1319, 1320, 233, 0,
	250, 736, 0, 299, 336, 551, 0, 0, 396, 0,
	449, 453, 0, 542, 0, 0, 0, 0, 307, 1315,
	741, 0, 747, 0, 753, 1314, 518, 0, 743, 744,
	749, 238, 626, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	1316, 745, 742, 746, 752, 740, 750, 737, 748, 0,
	440, 374, 591, 467, 245, 291, 278, 320, 362, 474,
	0, 0, 352, 522, 287, 376, 0, 266, 409, 0,
	498, 373, 0, 481, 501, 0, 393, 272, 432, 488,
	489, 734, 739, 0, 755, 0, 276, 277, 398, 258,
	406, 603, 569, 461, 419, 417, 0, 384, 441, 598,
	0, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 566, 570, 568, 564, 561, 565, 562, 563,
	567, 323, 560, 0, 535, 544, 578, 558, 586, 543,
	583, 553, 298, 582, 547, 546, 592, 573, 574, 528,
	588, 559, 557, 550, 549, 545, 0, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 235,
	236, 237, 239, 240, 241, 733, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	548, 735, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 0, 0, 0, 738, 0,
	0, 0, 279, 280, 281, 282, 283, 284, 0, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 0,
	302, 304, 0, 305, 308, 0, 309, 310, 311, 312,
	313, 314, 315, 316, 552, 317, 0, 318, 319, 321,
	0, 324, 325, 326, 327, 328, 0, 329, 554, 555,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 0, 349, 350,
	351, 353, 0, 354, 355, 358, 359, 360, 361, 0,
	363, 571, 0, 364, 365, 366, 0, 0, 367, 368,
	369, 370, 371, 372, 375, 572, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 575, 576, 392, 394, 395, 577, 579, 580, 751,
	410, 411, 412, 413, 414, 415, 416, 418, 0, 420,
	421, 422, 581, 423, 424, 425, 426, 0, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 0, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 584, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	0, 475, 585, 476, 477, 478, 479, 480, 0, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	587, 496, 497, 0, 499, 500, 754, 502, 503, 504,
	505, 506, 0, 625, 507, 589, 508, 590, 509, 510,
	511, 512, 513, 514, 515, 517, 0, 0, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	0, 534, 536, 538, 616, 593, 594, 595, 596, 597,
	599, 600, 601, 602, 539, 540, 556, 407, 401, 357,
	399, 400, 404, 405, 408, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 791, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1319, 1320, 233, 0, 250, 736, 0, 299, 336, 551,
	0, 0, 396, 0, 449, 453, 96, 542, 0, 0,
	0, 0, 307, 0, 741, 0, 747, 0, 753, 0,
	518, 0, 743, 744, 749, 238, 626, 541, 612, 0,
	0, 0, 403, 93, 0, 0, 647, 94, 0, 0,
	246, 0, 0, 0, 0, 745, 742, 746, 752, 740,
	750, 737, 748, 0, 440, 374, 1865, 467, 245, 291,
	278, 320, 362, 474, 0, 0, 352, 522, 287, 376,
	0, 266, 409, 0, 498, 373, 0, 481, 501, 0,
	393, 272, 432, 488, 489, 734, 739, 0, 755, 0,
	276, 277, 398, 258, 406, 2587, 2588, 2586, 419, 417,
	0, 384, 441, 598, 0, 0, 306, 0, 301, 397,
	537, 264, 516, 435, 402, 356, 464, 493, 303, 288,
	289, 332, 434, 322, 274, 527, 566, 570, 568, 564,
	561, 984, 985, 563, 567, 323, 560, 0, 535, 544,
	578, 558, 586, 543, 583, 553, 298, 582, 547, 546,
	592, 573, 574, 528, 588, 559, 557, 550, 549, 545,
	0, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 234, 0, 235, 236, 237, 239, 240, 241, 733,
	242, 243, 244, 247, 248, 249, 251, 611, 252, 253,
	254, 255, 256, 257, 548, 735, 259, 260, 261, 262,
	263, 265, 267, 268, 269, 270, 271, 273, 275, 0,
	0, 0, 738, 0, 0, 0, 279, 280, 281, 282,
	283, 284, 0, 285, 286, 290, 292, 293, 294, 295,
	296, 297, 300, 0, 302, 304, 0, 305, 308, 0,
	309, 310, 311, 312, 313, 314, 315, 316, 552, 317,
	0, 318, 319, 321, 0, 324, 325, 326, 327, 328,
	0, 329, 554, 555, 330, 331, 333, 334, 335, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 0, 349, 350, 351, 353, 0, 354, 355, 358,
	359, 360, 361, 2579, 363, 571, 0, 364, 365, 366,
	0, 0, 367, 368, 369, 370, 371, 372, 375, 572,
	377, 378, 379, 380, 381, 382, 383, 613, 385, 386,
	387, 388, 389, 390, 391, 575, 576, 392, 394, 395,
	577, 579, 580, 751, 410, 411, 412, 413, 414, 415,
	416, 418, 0, 420, 421, 422, 581, 423, 424, 425,
	426, 0, 427, 428, 429, 430, 431, 433, 436, 437,
	438, 439, 0, 442, 443, 444, 445, 446, 447, 448,
	450, 451, 452, 454, 455, 456, 614, 457, 458, 459,
	460, 584, 462, 463, 615, 465, 466, 468, 469, 470,
	471, 472, 473, 624, 0, 475, 585, 476, 477, 478,
	479, 480, 0, 482, 483, 484, 485, 486, 487, 490,
	491, 492, 494, 495, 587, 496, 497, 0, 499, 500,
	754, 502, 503, 504, 505, 506, 0, 625, 507, 589,
	508, 590, 509, 510, 511, 512, 513, 514, 515, 517,
	0, 0, 519, 520, 521, 523, 524, 525, 526, 529,
	530, 531, 532, 533, 0, 534, 536, 538, 616, 593,
	594, 595, 596, 597, 599, 600, 601, 602, 539, 540,
	556, 407, 401, 357, 399, 400, 404, 405, 408, 791,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 250,
	736, 2581, 299, 336, 551, 0, 0, 396, 0, 449,
	453, 0, 542, 0, 0, 0, 0, 307, 0, 741,
	0, 747, 0, 753, 0, 518, 0, 743, 744, 749,
	238, 626, 541, 612, 0, 0, 0, 403, 0, 0,
	0, 647, 0, 0, 0, 246, 0, 0, 0, 0,
	745, 742, 746, 752, 740, 750, 737, 748, 0, 440,
	374, 591, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 0, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	734, 739, 0, 755, 0, 276, 277, 398, 258, 406,
	2587, 2588, 2586, 419, 417, 0, 384, 441, 598, 0,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 984, 985, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 733, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 548,
	735, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 0, 738, 0, 0,
	0, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 552, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 554, 555, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 2579, 363,
	571, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 371, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 576, 392, 394, 395, 577, 579, 580, 751, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 581, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 584, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 0,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 587,
	496, 497, 0, 499, 500, 754, 502, 503, 504, 505,
	506, 0, 625, 507, 589, 508, 590, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 594, 595, 596, 597, 599,
	600, 601, 602, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 791, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 250, 736, 2581, 299, 336, 551,
	0, 0, 396, 0, 449, 453, 0, 542, 0, 0,
	0, 0, 307, 0, 741, 0, 747, 0, 753, 0,
	518, 0, 743, 744, 749, 238, 626, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 745, 742, 746, 752, 740,
	750, 737, 748, 0, 440, 374, 591, 467, 245, 291,
	278, 320, 362, 474, 0, 0, 352, 522, 287, 376,
	0, 266, 409, 0, 498, 373, 0, 481, 501, 0,
	393, 272, 432, 488, 489, 734, 739, 0, 755, 0,
	276, 277, 398, 258, 406, 603, 569, 461, 419, 417,
	0, 384, 441, 598, 0, 0, 306, 0, 301, 397,
	537, 264, 516, 435, 402, 356, 464, 493, 303, 288,
	289, 332, 434, 322, 274, 527, 566, 570, 568, 564,
	561, 984, 985, 563, 567, 323, 560, 0, 535, 544,
	578, 558, 586, 543, 583, 553, 298, 582, 547, 546,
	592, 573, 574, 528, 588, 559, 557, 550, 549, 545,
	0, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 234, 0, 235, 236, 237, 239, 240, 241, 733,
	242, 243, 244, 247, 248, 249, 251, 611, 252, 253,
	254, 255, 256, 257, 548, 735, 259, 260, 261, 262,
	263, 265, 267, 268, 269, 270, 271, 273, 275, 0,
	0, 0, 738, 0, 0, 0, 279, 280, 281, 282,
	283, 284, 0, 285, 286, 290, 292, 293, 294, 295,
	296, 297, 300, 0, 302, 304, 0, 305, 308, 0,
	309, 310, 311, 312, 313, 314, 315, 316, 552, 317,
	0, 318, 319, 321, 0, 324, 325, 326, 327, 328,
	0, 329, 554, 555, 330, 331, 333, 334, 335, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 0, 349, 350, 351, 353, 0, 354, 355, 358,
	359, 360, 361, 0, 363, 571, 0, 364, 365, 366,
	0, 0, 367, 368, 369, 370, 371, 372, 375, 572,
	377, 378, 379, 380, 381, 382, 383, 613, 385, 386,
	387, 388, 389, 390, 391, 575, 576, 392, 394, 395,
	577, 579, 580, 751, 410, 411, 412, 413, 414, 415,
	416, 418, 0, 420, 421, 422, 581, 423, 424, 425,
	426, 0, 427, 428, 429, 430, 431, 433, 436, 437,
	438, 439, 0, 442, 443, 444, 445, 446, 447, 448,
	450, 451, 452, 454, 455, 456, 614, 457, 458, 459,
	460, 584, 462, 463, 615, 465, 466, 468, 469, 470,
	471, 472, 473, 624, 0, 475, 585, 476, 477, 478,
	479, 480, 0, 482, 483, 484, 485, 486, 487, 490,
	491, 492, 494, 495, 587, 496, 497, 0, 499, 500,
	754, 502, 503, 504, 505, 506, 0, 625, 507, 589,
	508, 590, 509, 510, 511, 512, 513, 514, 515, 517,
	0, 0, 519, 520, 521, 523, 524, 525, 526, 529,
	530, 531, 532, 533, 0, 534, 536, 538, 616, 593,
	594, 595, 596, 597, 599, 600, 601, 602, 539, 540,
	556, 407, 401, 357, 399, 400, 404, 405, 408, 791,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 250,
	736, 3779, 299, 336, 551, 0, 0, 396, 0, 449,
	453, 0, 542, 0, 0, 0, 0, 307, 0, 741,
	0, 747, 0, 753, 0, 518, 0, 743, 744, 749,
	238, 626, 541, 612, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	745, 742, 746, 752, 740, 750, 737, 748, 0, 440,
	374, 591, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 0, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	734, 739, 0, 755, 0, 276, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 0, 384, 441, 598, 0,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 984, 985, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 733, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 548,
	735, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 0, 738, 0, 0,
	0, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 552, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 554, 555, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	571, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 371, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 576, 392, 394, 395, 577, 579, 580, 751, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 581, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 584, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 0,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 587,
	496, 497, 0, 499, 500, 754, 502, 503, 504, 505,
	506, 0, 625, 507, 589, 508, 590, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 594, 595, 596, 597, 599,
	600, 601, 602, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 791, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 250, 736, 4597, 299, 336, 551,
	0, 0, 396, 0, 449, 453, 0, 542, 0, 0,
	0, 0, 307, 0, 741, 0, 747, 0, 753, 0,
	518, 0, 743, 744, 749, 238, 626, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 745, 742, 746, 752, 740,
	750, 737, 748, 0, 440, 374, 591, 467, 245, 291,
	278, 320, 362, 474, 0, 0, 352, 522, 287, 376,
	0, 266, 409, 0, 498, 373, 0, 481, 501, 0,
	393, 272, 432, 488, 489, 734, 739, 0, 755, 0,
	276, 277, 398, 258, 406, 603, 569, 461, 419, 417,
	0, 384, 441, 598, 0, 0, 306, 0, 301, 397,
	537, 264, 516, 435, 402, 356, 464, 493, 303, 288,
	289, 332, 434, 322, 274, 527, 566, 570, 568, 564,
	561, 565, 562, 563, 567, 323, 560, 0, 535, 544,
	578, 558, 586, 543, 583, 553, 298, 582, 547, 546,
	592, 573, 574, 528, 588, 559, 557, 550, 549, 545,
	0, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 234, 0, 235, 236, 237, 239, 240, 241, 733,
	242, 243, 244, 247, 248, 249, 251, 611, 252, 253,
	254, 255, 256, 257, 548, 735, 259, 260, 261, 262,
	263, 265, 267, 268, 269, 270, 271, 273, 275, 0,
	0, 0, 738, 0, 0, 0, 279, 280, 281, 282,
	283, 284, 0, 285, 286, 290, 292, 293, 294, 295,
	296, 297, 300, 0, 302, 304, 0, 305, 308, 0,
	309, 310, 311, 312, 313, 314, 315, 316, 552, 317,
	0, 318, 319, 321, 0, 324, 325, 326, 327, 328,
	0, 329, 554, 555, 330, 331, 333, 334, 335, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 0, 349, 350, 351, 353, 0, 354, 355, 358,
	359, 360, 361, 0, 363, 571, 0, 364, 365, 366,
	0, 0, 367, 368, 369, 370, 371, 372, 375, 572,
	377, 378, 379, 380, 381, 382, 383, 613, 385, 386,
	387, 388, 389, 390, 391, 575, 576, 392, 394, 395,
	577, 579, 580, 751, 410, 411, 412, 413, 414, 415,
	416, 418, 0, 420, 421, 422, 581, 423, 424, 425,
	426, 0, 427, 428, 429, 430, 431, 433, 436, 437,
	438, 439, 0, 442, 443, 444, 445, 446, 447, 448,
	450, 451, 452, 454, 455, 456, 614, 457, 458, 459,
	460, 584, 462, 463, 615, 465, 466, 468, 469, 470,
	471, 472, 473, 624, 0, 475, 585, 476, 477, 478,
	479, 480, 0, 482, 483, 484, 485, 486, 487, 490,
	491, 492, 494, 495, 587, 496, 497, 0, 499, 500,
	754, 502, 503, 504, 505, 506, 0, 625, 507, 589,
	508, 590, 509, 510, 511, 512, 513, 514, 515, 517,
	0, 0, 519, 520, 521, 523, 524, 525, 526, 529,
	530, 531, 532, 533, 0, 534, 536, 538, 616, 593,
	594, 595, 596, 597, 599, 600, 601, 602, 539, 540,
	556, 407, 401, 357, 399, 400, 404, 405, 408, 791,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 250,
	736, 4346, 299, 336, 551, 0, 0, 396, 0, 449,
	453, 0, 542, 0, 0, 0, 0, 307, 0, 741,
	0, 747, 0, 753, 0, 518, 0, 743, 744, 749,
	238, 626, 541, 612, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	745, 742, 746, 752, 740, 750, 737, 748, 0, 440,
	374, 591, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 0, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	734, 739, 0, 755, 0, 276, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 0, 384, 441, 598, 0,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 984, 985, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 733, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 548,
	735, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 0, 738, 0, 0,
	0, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 552, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 554, 555, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	571, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 371, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 576, 392, 394, 395, 577, 579, 580, 751, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 581, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 584, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 0,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 587,
	496, 497, 0, 499, 500, 754, 502, 503, 504, 505,
	506, 0, 625, 507, 589, 508, 590, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 594, 595, 596, 597, 599,
	600, 601, 602, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 791, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 250, 736, 2746, 299, 336, 551,
	0, 0, 396, 0, 449, 453, 0, 542, 0, 0,
	0, 0, 307, 0, 741, 0, 747, 0, 753, 0,
	518, 0, 743, 744, 749, 238, 626, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 745, 742, 746, 752, 740,
	750, 737, 748, 0, 440, 374, 591, 467, 245, 291,
	278, 320, 362, 474, 0, 0, 352, 522, 287, 376,
	0, 266, 409, 0, 498, 373, 0, 481, 501, 0,
	393, 272, 432, 488, 489, 734, 739, 0, 755, 0,
	276, 277, 398, 258, 406, 2587, 2588, 2586, 419, 417,
	0, 384, 441, 598, 0, 0, 306, 0, 301, 397,
	537, 264, 516, 435, 402, 356, 464, 493, 303, 288,
	289, 332, 434, 322, 274, 527, 566, 570, 568, 564,
	561, 984, 985, 563, 567, 323, 560, 0, 535, 544,
	578, 558, 586, 543, 583, 553, 298, 582, 547, 546,
	592, 573, 574, 528, 588, 559, 557, 550, 549, 545,
	0, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 234, 0, 235, 236, 237, 239, 240, 241, 733,
	242, 243, 244, 247, 248, 249, 251, 611, 252, 253,
	254, 255, 256, 257, 548, 735, 259, 260, 261, 262,
	263, 265, 267, 268, 269, 270, 271, 273, 275, 0,
	0, 0, 738, 0, 0, 0, 279, 280, 281, 282,
	283, 284, 0, 285, 286, 290, 292, 293, 294, 295,
	296, 297, 300, 0, 302, 304, 0, 305, 308, 0,
	309, 310, 311, 312, 313, 314, 315, 316, 552, 317,
	0, 318, 319, 321, 0, 324, 325, 326, 327, 328,
	0, 329, 554, 555, 330, 331, 333, 334, 335, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 0, 349, 350, 351, 353, 0, 354, 355, 358,
	359, 360, 361, 0, 363, 571, 0, 364, 365, 366,
	0, 0, 367, 368, 369, 370, 371, 372, 375, 572,
	377, 378, 379, 380, 381, 382, 383, 613, 385, 386,
	387, 388, 389, 390, 391, 575, 576, 392, 394, 395,
	577, 579, 580, 751, 410, 411, 412, 413, 414, 415,
	416, 418, 0, 420, 421, 422, 581, 423, 424, 425,
	426, 0, 427, 428, 429, 430, 431, 433, 436, 437,
	438, 439, 0, 442, 443, 444, 445, 446, 447, 448,
	450, 451, 452, 454, 455, 456, 614, 457, 458, 459,
	460, 584, 462, 463, 615, 465, 466, 468, 469, 470,
	471, 472, 473, 624, 0, 475, 585, 476, 477, 478,
	479, 480, 0, 482, 483, 484, 485, 486, 487, 490,
	491, 492, 494, 495, 587, 496, 497, 0, 499, 500,
	754, 502, 503, 504, 505, 506, 0, 625, 507, 589,
	508, 590, 509, 510, 511, 512, 513, 514, 515, 517,
	0, 0, 519, 520, 521, 523, 524, 525, 526, 529,
	530, 531, 532, 533, 0, 534, 536, 538, 616, 593,
	594, 595, 596, 597, 599, 600, 601, 602, 539, 540,
	556, 407, 401, 357, 399, 400, 404, 405, 408, 220,
	0, 0, 0, 0, 0, 0, 698, 0, 0, 0,
	0, 0, 0, 709, 710, 711, 0, 233, 0, 250,
	0, 92, 299, 336, 551, 0, 0, 396, 0, 449,
	453, 0, 542, 0, 0, 0, 0, 307, 0, 0,
	0, 0, 0, 0, 0, 518, 0, 0, 0, 0,
	238, 626, 541, 612, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 440,
	374, 591, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 0, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	0, 0, 0, 0, 0, 276, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 0, 384, 441, 598, 0,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 565, 562, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 0, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 548,
	0, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 552, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 554, 555, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	571, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 371, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 576, 392, 394, 395, 577, 579, 580, 0, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 581, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 584, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 0,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 587,
	496, 497, 0, 499, 500, 0, 502, 503, 504, 505,
	506, 0, 625, 507, 589, 508, 590, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 594, 595, 596, 597, 599,
	600, 601, 602, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	706, 707, 708, 0, 0, 0, 0, 0, 220, 700,
	701, 702, 703, 704, 705, 698, 0, 0, 0, 0,
	0, 0, 709, 710, 711, 0, 233, 0, 250, 0,
	0, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 4319, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 706,
	707, 708, 0, 0, 0, 0, 0, 220, 700, 701,
	702, 703, 704, 705, 698, 0, 0, 0, 0, 0,
	0, 709, 710, 711, 0, 233, 0, 250, 0, 0,
	299, 336, 551, 0, 0, 396, 0, 449, 453, 0,
	542, 0, 0, 0, 0, 307, 0, 0, 0, 0,
	0, 0, 0, 518, 0, 0, 0, 0, 238, 626,
	541, 612, 0, 0, 0, 403, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 440, 374, 591,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 0, 0,
	0, 0, 0, 276, 277, 398, 258, 406, 603, 569,
	461, 419, 417, 0, 384, 441, 598, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 566,
	570, 568, 564, 561, 565, 562, 563, 567, 323, 560,
	0, 535, 544, 578, 558, 586, 543, 583, 553, 298,
	582, 547, 546, 592, 573, 574, 528, 588, 559, 557,
	550, 549, 545, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 0, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 2930, 256, 257, 548, 0, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 552, 2931, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 554, 555, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 571, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 572, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 575, 576,
	392, 394, 395, 577, 579, 580, 0, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 581,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 584, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 0, 475, 585,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 587, 496, 497,
	0, 499, 500, 0, 502, 503, 504, 505, 506, 0,
	625, 507, 589, 508, 590, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 593, 594, 595, 596, 597, 599, 600, 601,
	602, 539, 540, 556, 407, 401, 357, 399, 400, 404,
	405, 408, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 706, 707,
	708, 0, 0, 0, 0, 0, 220, 700, 701, 702,
	703, 704, 705, 698, 0, 0, 0, 0, 0, 0,
	709, 710, 711, 0, 233, 0, 250, 0, 0, 299,
	336, 551, 0, 0, 396, 0, 449, 453, 0, 542,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 518, 0, 0, 0, 0, 238, 626, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 374, 591, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 0, 0, 0,
	0, 0, 276, 277, 398, 258, 406, 603, 569, 461,
	419, 417, 0, 384, 441, 598, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 566, 570,
	568, 564, 561, 565, 562, 563, 567, 323, 560, 0,
	535, 544, 578, 558, 586, 543, 583, 553, 298, 582,
	547, 546, 592, 573, 574, 528, 588, 559, 557, 550,
	549, 545, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 0, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 694, 256, 257, 548, 0, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	552, 695, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 554, 555, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 571, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 572, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 575, 576, 392,
	394, 395, 577, 579, 580, 0, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 581, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 584, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 585, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 587, 496, 497, 0,
	499, 500, 0, 502, 503, 504, 505, 506, 0, 625,
	507, 589, 508, 590, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 593, 594, 595, 596, 597, 599, 600, 601, 602,
	539, 540, 556, 407, 401, 357, 399, 400, 404, 405,
	408, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 220, 0, 0, 706, 707, 708,
	0, 0, 0, 0, 0, 0, 700, 701, 702, 703,
	704, 705, 233, 0, 250, 0, 0, 299, 336, 551,
	0, 0, 396, 0, 449, 453, 0, 542, 0, 0,
	0, 0, 307, 0, 0, 0, 0, 0, 0, 0,
	518, 0, 0, 0, 0, 238, 626, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 440, 374, 591, 467, 245, 291,
	278, 320, 362, 474, 0, 0, 352, 522, 287, 376,
	0, 266, 409, 0, 498, 373, 0, 481, 501, 0,
	393, 272, 432, 488, 489, 0, 0, 0, 0, 0,
	276, 277, 398, 258, 406, 603, 569, 461, 419, 417,
	0, 384, 441, 598, 0, 0, 306, 0, 301, 397,
	537, 264, 516, 435, 402, 356, 464, 493, 303, 288,
	289, 332, 434, 322, 274, 527, 566, 570, 568, 564,
	561, 565, 562, 563, 567, 323, 560, 0, 535, 544,
	578, 558, 586, 543, 583, 553, 298, 582, 547, 546,
	592, 573, 574, 528, 588, 559, 557, 550, 549, 545,
	0, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 234, 0, 235, 236, 237, 239, 240, 241, 0,
	242, 243, 244, 247, 248, 249, 251, 611, 252, 253,
	254, 255, 256, 257, 548, 0, 259, 260, 261, 262,
	263, 265, 267, 268, 269, 270, 271, 273, 275, 0,
	0, 0, 0, 0, 0, 0, 279, 280, 281, 282,
	283, 284, 0, 285, 286, 290, 292, 293, 294, 295,
	296, 297, 300, 0, 302, 304, 0, 305, 308, 0,
	309, 310, 311, 312, 313, 314, 315, 316, 552, 317,
	0, 318, 319, 321, 0, 324, 325, 326, 327, 328,
	0, 329, 554, 555, 330, 331, 333, 334, 335, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 0, 349, 350, 351, 353, 0, 354, 355, 358,
	359, 360, 361, 0, 363, 571, 0, 364, 365, 366,
	0, 0, 367, 368, 369, 370, 371, 372, 375, 572,
	377, 378, 379, 380, 381, 382, 383, 613, 385, 386,
	387, 388, 389, 390, 391, 575, 576, 392, 394, 395,
	577, 579, 580, 0, 410, 411, 412, 413, 414, 415,
	416, 418, 0, 420, 421, 422, 581, 423, 424, 425,
	426, 0, 427, 428, 429, 430, 431, 433, 436, 437,
	438, 439, 0, 442, 443, 444, 445, 446, 447, 448,
	450, 451, 452, 454, 455, 456, 614, 457, 458, 459,
	460, 584, 462, 463, 615, 465, 466, 468, 469, 470,
	471, 472, 473, 624, 0, 475, 585, 476, 477, 478,
	479, 480, 0, 482, 483, 484, 485, 486, 487, 490,
	491, 492, 494, 495, 587, 496, 497, 0, 499, 500,
	0, 502, 503, 504, 505, 506, 0, 625, 507, 589,
	508, 590, 509, 510, 511, 512, 513, 514, 515, 517,
	0, 0, 519, 520, 521, 523, 524, 525, 526, 529,
	530, 531, 532, 533, 0, 534, 536, 538, 616, 593,
	594, 595, 596, 597, 599, 600, 601, 602, 539, 540,
	556, 407, 401, 357, 399, 400, 404, 405, 408, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 250,
	0, 0, 299, 336, 551, 0, 4715, 396, 0, 449,
	453, 0, 542, 0, 0, 0, 0, 307, 0, 0,
	0, 0, 0, 0, 0, 518, 0, 0, 0, 0,
	238, 626, 541, 612, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 440,
	374, 591, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 0, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	0, 0, 0, 0, 0, 276, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 0, 384, 441, 598, 0,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 565, 562, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 0, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 548,
	0, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 552, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 554, 555, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	571, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 371, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 576, 392, 394, 395, 577, 579, 580, 0, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 581, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 584, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 0,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 587,
	496, 497, 0, 499, 500, 0, 502, 503, 504, 505,
	506, 0, 625, 507, 589, 508, 590, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 594, 595, 596, 597, 599,
	600, 601, 602, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 250, 0, 0, 299, 336, 551,
	0, 4585, 396, 0, 449, 453, 0, 542, 0, 0,
	0, 0, 307, 0, 0, 0, 0, 0, 0, 0,
	518, 0, 0, 0, 0, 238, 626, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 440, 374, 591, 467, 245, 291,
	278, 320, 362, 474, 0, 0, 352, 522, 287, 376,
	0, 266, 409, 0, 498, 373, 0, 481, 501, 0,
	393, 272, 432, 488, 489, 0, 0, 0, 0, 0,
	276, 277, 398, 258, 406, 603, 569, 461, 419, 417,
	0, 384, 441, 598, 0, 0, 306, 0, 301, 397,
	537, 264, 516, 435, 402, 356, 464, 493, 303, 288,
	289, 332, 434, 322, 274, 527, 566, 570, 568, 564,
	561, 565, 562, 563, 567, 323, 560, 0, 535, 544,
	578, 558, 586, 543, 583, 553, 298, 582, 547, 546,
	592, 573, 574, 528, 588, 559, 557, 550, 549, 545,
	0, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 234, 0, 235, 236, 237, 239, 240, 241, 0,
	242, 243, 244, 247, 248, 249, 251, 611, 252, 253,
	254, 255, 256, 257, 548, 0, 259, 260, 261, 262,
	263, 265, 267, 268, 269, 270, 271, 273, 275, 0,
	0, 0, 0, 0, 0, 0, 279, 280, 281, 282,
	283, 284, 0, 285, 286, 290, 292, 293, 294, 295,
	296, 297, 300, 0, 302, 304, 0, 305, 308, 0,
	309, 310, 311, 312, 313, 314, 315, 316, 552, 317,
	0, 318, 319, 321, 0, 324, 325, 326, 327, 328,
	0, 329, 554, 555, 330, 331, 333, 334, 335, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 0, 349, 350, 351, 353, 0, 354, 355, 358,
	359, 360, 361, 0, 363, 571, 0, 364, 365, 366,
	0, 0, 367, 368, 369, 370, 371, 372, 375, 572,
	377, 378, 379, 380, 381, 382, 383, 613, 385, 386,
	387, 388, 389, 390, 391, 575, 576, 392, 394, 395,
	577, 579, 580, 0, 410, 411, 412, 413, 414, 415,
	416, 418, 0, 420, 421, 422, 581, 423, 424, 425,
	426, 0, 427, 428, 429, 430, 431, 433, 436, 437,
	438, 439, 0, 442, 443, 444, 445, 446, 447, 448,
	450, 451, 452, 454, 455, 456, 614, 457, 458, 459,
	460, 584, 462, 463, 615, 465, 466, 468, 469, 470,
	471, 472, 473, 624, 0, 475, 585, 476, 477, 478,
	479, 480, 0, 482, 483, 484, 485, 486, 487, 490,
	491, 492, 494, 495, 587, 496, 497, 0, 499, 500,
	0, 502, 503, 504, 505, 506, 0, 625, 507, 589,
	508, 590, 509, 510, 511, 512, 513, 514, 515, 517,
	0, 0, 519, 520, 521, 523, 524, 525, 526, 529,
	530, 531, 532, 533, 0, 534, 536, 538, 616, 593,
	594, 595, 596, 597, 599, 600, 601, 602, 539, 540,
	556, 407, 401, 357, 399, 400, 404, 405, 408, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 250,
	0, 0, 299, 336, 551, 0, 4582, 396, 0, 449,
	453, 96, 542, 0, 0, 0, 0, 307, 0, 0,
	0, 0, 0, 0, 0, 518, 0, 0, 0, 0,
	238, 626, 541, 612, 0, 0, 0, 403, 93, 0,
	0, 0, 94, 0, 0, 246, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 440,
	374, 1865, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 0, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	0, 0, 0, 0, 0, 276, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 0, 384, 441, 598, 0,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 565, 562, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 0, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 548,
	0, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 552, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 554, 555, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	571, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 371, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 576, 392, 394, 395, 577, 579, 580, 0, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 581, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 584, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 0,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 587,
	496, 497, 0, 499, 500, 0, 502, 503, 504, 505,
	506, 0, 625, 507, 589, 508, 590, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 594, 595, 596, 597, 599,
	600, 601, 602, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 729, 0, 0, 905, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 250, 736, 92, 299, 336, 551,
	0, 0, 396, 0, 449, 453, 0, 542, 0, 0,
	0, 0, 307, 1315, 741, 0, 747, 0, 753, 1314,
	518, 0, 743, 744, 749, 238, 626, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 1316, 745, 742, 746, 752, 740,
	750, 737, 748, 0, 440, 374, 591, 467, 245, 291,
	278, 320, 362, 474, 0, 0, 352, 522, 287, 376,
	0, 266, 409, 0, 498, 373, 0, 481, 501, 0,
	393, 272, 432, 488, 489, 734, 739, 0, 755, 0,
	276, 277, 398, 258, 406, 603, 569, 461, 419, 417,
	0, 384, 441, 598, 0, 0, 306, 0, 301, 397,
	537, 264, 516, 435, 402, 356, 464, 493, 303, 288,
	289, 332, 434, 322, 274, 527, 566, 570, 568, 564,
	561, 565, 562, 563, 567, 323, 560, 0, 535, 544,
	578, 558, 586, 543, 583, 553, 298, 582, 547, 546,
	592, 573, 574, 528, 588, 559, 557, 550, 549, 545,
	0, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 234, 0, 235, 236, 237, 239, 240, 241, 733,
	242, 243, 244, 247, 248, 249, 251, 611, 252, 253,
	254, 255, 256, 257, 548, 735, 259, 260, 261, 262,
	263, 265, 267, 268, 269, 270, 271, 273, 275, 0,
	0, 0, 738, 0, 0, 0, 279, 280, 281, 282,
	283, 284, 0, 285, 286, 290, 292, 293, 294, 295,
	296, 297, 300, 0, 302, 304, 0, 305, 308, 0,
	309, 310, 311, 312, 313, 314, 315, 316, 552, 317,
	0, 318, 319, 321, 0, 324, 325, 326, 327, 328,
	0, 329, 554, 555, 330, 331, 333, 334, 335, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 0, 349, 350, 351, 353, 0, 354, 355, 358,
	359, 360, 361, 0, 363, 571, 0, 364, 365, 366,
	0, 0, 367, 368, 369, 370, 371, 372, 375, 572,
	377, 378, 379, 380, 381, 382, 383, 613, 385, 386,
	387, 388, 389, 390, 391, 575, 576, 392, 394, 395,
	577, 579, 580, 751, 410, 411, 412, 413, 414, 415,
	416, 418, 0, 420, 421, 422, 581, 423, 424, 425,
	426, 0, 427, 428, 429, 430, 431, 433, 436, 437,
	438, 439, 0, 442, 443, 444, 445, 446, 447, 448,
	450, 451, 452, 454, 455, 456, 614, 457, 458, 459,
	460, 584, 462, 463, 615, 465, 466, 468, 469, 470,
	471, 472, 473, 624, 0, 475, 585, 476, 477, 478,
	479, 480, 0, 482, 483, 484, 485, 486, 487, 490,
	491, 492, 494, 495, 587, 496, 497, 0, 499, 500,
	754, 502, 503, 504, 505, 506, 0, 625, 507, 589,
	508, 590, 509, 510, 511, 512, 513, 514, 515, 517,
	0, 0, 519, 520, 521, 523, 524, 525, 526, 529,
	530, 531, 532, 533, 0, 534, 536, 538, 616, 593,
	594, 595, 596, 597, 599, 600, 601, 602, 539, 540,
	556, 407, 401, 357, 399, 400, 404, 405, 408, 729,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 250,
	736, 0, 299, 336, 551, 0, 0, 396, 0, 449,
	453, 0, 542, 0, 0, 0, 0, 307, 0, 741,
	0, 747, 0, 753, 0, 518, 0, 743, 744, 749,
	238, 626, 541, 612, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	745, 742, 746, 752, 740, 750, 737, 748, 0, 440,
	374, 591, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 2111, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	734, 739, 0, 755, 0, 276, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 0, 384, 441, 598, 0,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 565, 562, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 733, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 548,
	735, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 726, 738, 0, 0,
	727, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 552, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 554, 555, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	571, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 371, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 576, 392, 394, 395, 577, 579, 580, 751, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 581, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 584, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 728,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 587,
	496, 497, 0, 499, 500, 754, 502, 503, 504, 505,
	506, 0, 625, 507, 589, 508, 590, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 594, 595, 596, 597, 599,
	600, 601, 602, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 250, 0, 0, 299, 336, 551,
	0, 0, 396, 0, 449, 453, 0, 542, 0, 0,
	0, 0, 307, 0, 0, 0, 0, 0, 0, 0,
	518, 0, 0, 0, 0, 238, 626, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 647, 2127, 0, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 440, 374, 591, 467, 245, 291,
	278, 320, 362, 474, 0, 0, 352, 522, 287, 376,
	0, 266, 409, 0, 498, 373, 0, 481, 501, 0,
	393, 272, 432, 488, 489, 0, 0, 0, 0, 0,
	276, 277, 398, 258, 406, 603, 569, 461, 419, 417,
	0, 384, 441, 598, 0, 0, 306, 0, 301, 397,
	537, 264, 516, 435, 402, 356, 464, 493, 303, 288,
	289, 332, 434, 322, 274, 527, 566, 570, 568, 564,
	561, 565, 562, 563, 567, 323, 560, 0, 535, 544,
	578, 558, 586, 543, 583, 553, 298, 582, 547, 546,
	592, 573, 574, 528, 588, 559, 557, 550, 549, 545,
	0, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 234, 0, 235, 236, 237, 239, 240, 241, 0,
	242, 243, 244, 247, 248, 249, 251, 611, 252, 253,
	254, 255, 256, 257, 548, 0, 259, 260, 261, 262,
	263, 265, 267, 268, 269, 270, 271, 273, 275, 0,
	0, 0, 2131, 0, 0, 0, 279, 280, 281, 282,
	283, 284, 0, 285, 286, 290, 292, 293, 294, 295,
	296, 297, 300, 0, 302, 304, 0, 305, 308, 0,
	309, 310, 311, 312, 313, 314, 315, 316, 552, 317,
	0, 318, 319, 321, 0, 324, 325, 326, 327, 328,
	0, 329, 554, 555, 330, 331, 333, 334, 335, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 0, 349, 350, 351, 353, 0, 354, 355, 358,
	359, 360, 361, 0, 363, 571, 0, 364, 365, 366,
	0, 0, 367, 368, 369, 370, 371, 372, 375, 572,
	377, 378, 379, 380, 381, 382, 383, 613, 385, 386,
	387, 388, 389, 390, 391, 575, 576, 392, 394, 395,
	577, 579, 580, 0, 410, 411, 412, 413, 414, 415,
	416, 418, 0, 420, 421, 422, 581, 423, 424, 425,
	426, 0, 427, 428, 429, 430, 431, 433, 436, 437,
	438, 439, 0, 442, 443, 444, 445, 446, 447, 448,
	450, 451, 452, 454, 455, 456, 614, 457, 458, 459,
	460, 584, 462, 463, 615, 465, 466, 468, 469, 470,
	471, 472, 473, 624, 0, 475, 585, 476, 477, 478,
	479, 480, 0, 482, 483, 484, 485, 486, 487, 490,
	491, 492, 494, 495, 587, 496, 497, 0, 2128, 500,
	0, 502, 503, 504, 505, 506, 0, 625, 507, 589,
	508, 590, 509, 510, 511, 512, 513, 514, 515, 517,
	0, 0, 519, 520, 521, 523, 524, 525, 526, 529,
	530, 531, 532, 533, 0, 534, 536, 538, 616, 593,
	594, 595, 596, 597, 599, 600, 601, 602, 539, 540,
	556, 407, 401, 357, 399, 400, 404, 405, 408, 729,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 822, 233, 0, 250,
	736, 1078, 299, 336, 551, 0, 0, 396, 0, 449,
	453, 0, 542, 0, 0, 0, 0, 307, 0, 741,
	0, 747, 0, 753, 0, 518, 0, 743, 744, 749,
	238, 626, 541, 612, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	745, 742, 746, 752, 740, 750, 737, 748, 0, 440,
	374, 591, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 0, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	734, 739, 0, 755, 0, 276, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 0, 384, 441, 598, 0,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 565, 562, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 733, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 548,
	735, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 726, 738, 0, 0,
	727, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 552, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 554, 555, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	571, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 820, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 576, 392, 394, 395, 577, 579, 580, 751, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 581, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 584, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 728,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 587,
	496, 497, 0, 499, 500, 754, 502, 503, 504, 505,
	506, 0, 625, 507, 589, 508, 590, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 594, 595, 596, 597, 599,
	600, 601, 602, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 729, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 818, 233, 0, 250, 736, 0, 299, 336, 551,
	0, 0, 396, 0, 449, 453, 0, 542, 0, 0,
	0, 0, 307, 0, 741, 0, 747, 0, 753, 0,
	518, 0, 743, 744, 749, 238, 626, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 745, 742, 746, 752, 740,
	750, 737, 748, 0, 440, 374, 591, 467, 245, 291,
	278, 320, 362, 474, 0, 0, 352, 522, 287, 376,
	0, 266, 409, 0, 498, 373, 0, 481, 501, 0,
	393, 272, 432, 488, 489, 734, 739, 0, 755, 0,
	276, 277, 398, 258, 406, 603, 569, 461, 419, 417,
	0, 384, 441, 598, 0, 0, 306, 0, 301, 397,
	537, 264, 516, 435, 402, 356, 464, 493, 303, 288,
	289, 332, 434, 322, 274, 527, 566, 570, 568, 564,
	561, 565, 562, 563, 567, 323, 560, 0, 535, 544,
	578, 558, 586, 543, 583, 553, 298, 582, 547, 546,
	592, 573, 574, 528, 588, 559, 557, 550, 549, 545,
	0, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 234, 0, 235, 236, 237, 239, 240, 241, 733,
	242, 243, 244, 247, 248, 249, 251, 611, 252, 253,
	254, 255, 256, 257, 548, 735, 259, 260, 261, 262,
	263, 265, 267, 268, 269, 270, 271, 273, 275, 0,
	0, 726, 738, 0, 0, 727, 279, 280, 281, 282,
	283, 284, 0, 285, 286, 290, 292, 293, 294, 295,
	296, 297, 300, 0, 302, 304, 0, 305, 308, 0,
	309, 310, 311, 312, 313, 314, 315, 316, 552, 317,
	0, 318, 319, 321, 0, 324, 325, 326, 327, 328,
	0, 329, 554, 555, 330, 331, 333, 334, 335, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 0, 349, 350, 351, 353, 0, 354, 355, 358,
	359, 360, 361, 0, 363, 571, 0, 364, 365, 366,
	0, 0, 367, 368, 369, 370, 371, 372, 375, 572,
	377, 378, 379, 380, 381, 382, 383, 613, 385, 386,
	387, 388, 389, 390, 391, 575, 576, 392, 394, 395,
	577, 579, 580, 751, 410, 411, 412, 413, 414, 415,
	416, 418, 0, 420, 421, 422, 581, 423, 424, 425,
	426, 0, 427, 428, 429, 430, 431, 433, 436, 437,
	438, 439, 0, 442, 443, 444, 445, 446, 447, 448,
	450, 451, 452, 454, 455, 456, 614, 457, 458, 459,
	460, 584, 462, 463, 615, 465, 466, 468, 469, 470,
	471, 472, 473, 624, 728, 475, 585, 476, 477, 478,
	479, 480, 0, 482, 483, 484, 485, 486, 487, 490,
	491, 492, 494, 495, 587, 496, 497, 0, 499, 500,
	754, 502, 503, 504, 505, 506, 0, 625, 507, 589,
	508, 590, 509, 510, 511, 512, 513, 514, 515, 517,
	0, 0, 519, 520, 521, 523, 524, 525, 526, 529,
	530, 531, 532, 533, 0, 534, 536, 538, 616, 593,
	594, 595, 596, 597, 599, 600, 601, 602, 539, 540,
	556, 407, 401, 357, 399, 400, 404, 405, 408, 729,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 250,
	736, 0, 299, 336, 551, 0, 0, 396, 0, 449,
	453, 0, 542, 0, 0, 0, 0, 307, 0, 741,
	0, 747, 0, 753, 0, 518, 0, 743, 744, 749,
	238, 626, 541, 612, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	745, 742, 746, 752, 740, 750, 737, 748, 0, 440,
	374, 591, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 0, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	734, 739, 0, 755, 0, 276, 277, 398, 258, 406,
	603, 569, 461, 419, 417, 0, 384, 441, 598, 0,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 566, 570, 568, 564, 561, 565, 562, 563, 567,
	323, 560, 0, 535, 544, 578, 558, 586, 543, 583,
	553, 298, 582, 547, 546, 592, 573, 574, 528, 588,
	559, 557, 550, 549, 545, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 733, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 548,
	735, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 726, 738, 0, 0,
	727, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 552, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 554, 555, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	571, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 371, 372, 375, 572, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	575, 576, 392, 394, 395, 577, 579, 580, 751, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 581, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 584, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 728,
	475, 585, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 587,
	496, 497, 0, 499, 500, 754, 502, 503, 504, 505,
	506, 0, 625, 507, 589, 508, 590, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 593, 594, 595, 596, 597, 599,
	600, 601, 602, 539, 540, 556, 407, 401, 357, 399,
	400, 404, 405, 408, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 3151, 250, 0, 0, 299, 336, 551,
	0, 0, 396, 0, 449, 453, 0, 542, 0, 0,
	0, 0, 307, 0, 0, 0, 0, 0, 0, 0,
	518, 0, 0, 0, 0, 238, 626, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 440, 374, 591, 467, 245, 291,
	278, 320, 362, 474, 0, 0, 352, 522, 287, 376,
	0, 266, 409, 0, 498, 373, 0, 481, 501, 0,
	393, 272, 432, 488, 489, 0, 0, 0, 0, 0,
	276, 277, 398, 258, 406, 603, 569, 461, 419, 417,
	0, 384, 441, 598, 0, 0, 306, 0, 301, 397,
	537, 264, 516, 435, 402, 356, 464, 493, 303, 288,
	289, 332, 434, 322, 274, 527, 566, 570, 568, 564,
	561, 565, 562, 563, 567, 323, 560, 0, 535, 544,
	578, 558, 586, 543, 583, 553, 298, 582, 547, 546,
	592, 573, 574, 528, 588, 559, 557, 550, 549, 545,
	0, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 234, 0, 235, 236, 237, 239, 240, 241, 0,
	242, 243, 244, 247, 248, 249, 251, 611, 252, 253,
	254, 255, 256, 257, 548, 0, 259, 260, 261, 262,
	263, 265, 267, 268, 269, 270, 271, 273, 275, 0,
	0, 0, 0, 0, 0, 0, 279, 280, 281, 282,
	283, 284, 0, 285, 286, 290, 292, 293, 294, 295,
	296, 297, 300, 0, 302, 304, 0, 305, 308, 0,
	309, 310, 311, 312, 313, 314, 315, 316, 552, 317,
	0, 318, 319, 321, 0, 324, 325, 326, 327, 328,
	0, 329, 554, 555, 330, 331, 333, 334, 335, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 0, 349, 350, 351, 353, 0, 354, 355, 358,
	359, 360, 361, 0, 363, 571, 0, 364, 365, 366,
	0, 0, 367, 368, 369, 370, 371, 372, 375, 572,
	377, 378, 379, 380, 381, 382, 383, 613, 385, 386,
	387, 388, 389, 390, 391, 575, 576, 392, 394, 395,
	577, 579, 580, 0, 410, 411, 412, 413, 414, 415,
	416, 418, 0, 420, 421, 422, 581, 423, 424, 425,
	426, 0, 427, 428, 429, 430, 431, 433, 436, 437,
	438, 439, 0, 442, 443, 444, 445, 446, 447, 448,
	450, 451, 452, 454, 455, 456, 614, 457, 458, 459,
	460, 584, 462, 463, 615, 465, 466, 468, 469, 470,
	471, 472, 473, 624, 0, 475, 585, 476, 477, 478,
	479, 480, 0, 482, 483, 484, 485, 486, 487, 490,
	491, 492, 494, 495, 587, 496, 497, 0, 499, 500,
	0, 502, 503, 504, 505, 506, 0, 625, 507, 589,
	508, 590, 509, 510, 511, 512, 513, 514, 515, 517,
	0, 0, 519, 520, 521, 523, 524, 525, 526, 529,
	530, 531, 532, 533, 0, 534, 536, 538, 616, 593,
	594, 595, 596, 597, 599, 600, 601, 602, 539, 540,
	556, 407, 401, 357, 399, 400, 404, 405, 408, 0,
	729, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	250, 736, 941, 299, 883, 551, 0, 0, 396, 0,
	449, 453, 0, 542, 0, 0, 0, 0, 307, 0,
	741, 0, 747, 0, 753, 0, 518, 0, 743, 744,
	749, 238, 626, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 745, 742, 746, 752, 740, 750, 737, 748, 0,
	440, 374, 591, 467, 245, 291, 278, 320, 362, 474,
	0, 0, 352, 522, 287, 376, 0, 266, 409, 0,
	498, 373, 0, 481, 501, 0, 393, 272, 432, 488,
	489, 734, 739, 0, 755, 0, 276, 277, 398, 258,
	406, 603, 569, 461, 419, 417, 0, 384, 441, 598,
	0, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 566, 570, 568, 564, 561, 565, 562, 563,
	567, 323, 560, 0, 535, 544, 578, 558, 586, 543,
	583, 553, 298, 582, 547, 546, 592, 573, 574, 528,
	588, 559, 557, 550, 549, 545, 0, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 235,
	236, 237, 239, 240, 241, 733, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	548, 735, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 0, 0, 726, 738, 0,
	0, 727, 279, 280, 281, 282, 283, 284, 0, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 0,
	302, 304, 0, 305, 308, 0, 309, 310, 311, 312,
	313, 314, 315, 316, 552, 317, 0, 318, 319, 321,
	0, 324, 325, 326, 327, 328, 0, 329, 554, 555,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 0, 349, 350,
	351, 353, 0, 354, 355, 358, 359, 360, 361, 0,
	363, 571, 0, 364, 365, 366, 0, 0, 367, 368,
	369, 370, 371, 372, 375, 572, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 575, 576, 392, 394, 395, 577, 579, 580, 751,
	410, 411, 412, 413, 414, 415, 416, 418, 0, 420,
	421, 422, 581, 423, 424, 425, 426, 0, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 0, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 584, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	728, 475, 585, 476, 477, 478, 479, 480, 0, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	587, 496, 497, 0, 499, 500, 754, 502, 503, 504,
	505, 506, 0, 625, 507, 589, 508, 590, 509, 510,
	511, 512, 513, 514, 515, 517, 0, 0, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	0, 534, 536, 538, 616, 593, 594, 595, 596, 597,
	599, 600, 601, 602, 539, 540, 556, 407, 401, 357,
	399, 400, 404, 405, 408, 729, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 250, 736, 0, 299, 881,
	551, 0, 0, 396, 0, 449, 453, 0, 542, 0,
	0, 0, 0, 307, 0, 741, 0, 747, 0, 753,
	0, 518, 0, 743, 744, 749, 238, 626, 541, 612,
	0, 0, 0, 403, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 745, 742, 746, 752,
	740, 750, 737, 748, 0, 440, 374, 591, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 734, 739, 0, 755,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 565, 562, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	733, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 548, 735, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 726, 738, 0, 0, 727, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 552,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 554, 555, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 571, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 576, 392, 394,
	395, 577, 579, 580, 751, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 581, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 584, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 728, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 587, 496, 497, 0, 499,
	500, 754, 502, 503, 504, 505, 506, 0, 625, 507,
	589, 508, 590, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 594, 595, 596, 597, 599, 600, 601, 602, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	729, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	250, 736, 0, 299, 878, 551, 0, 0, 396, 0,
	449, 453, 0, 542, 0, 0, 0, 0, 307, 0,
	741, 0, 747, 0, 753, 0, 518, 0, 743, 744,
	749, 238, 626, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 745, 742, 746, 752, 740, 750, 737, 748, 0,
	440, 374, 591, 467, 245, 291, 278, 320, 362, 474,
	0, 0, 352, 522, 287, 376, 0, 266, 409, 0,
	498, 373, 0, 481, 501, 0, 393, 272, 432, 488,
	489, 734, 739, 0, 755, 0, 276, 277, 398, 258,
	406, 603, 569, 461, 419, 417, 0, 384, 441, 598,
	0, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 566, 570, 568, 564, 561, 565, 562, 563,
	567, 323, 560, 0, 535, 544, 578, 558, 586, 543,
	583, 553, 298, 582, 547, 546, 592, 573, 574, 528,
	588, 559, 557, 550, 549, 545, 0, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 235,
	236, 237, 239, 240, 241, 733, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	548, 735, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 0, 0, 726, 738, 0,
	0, 727, 279, 280, 281, 282, 283, 284, 0, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 0,
	302, 304, 0, 305, 308, 0, 309, 310, 311, 312,
	313, 314, 315, 316, 552, 317, 0, 318, 319, 321,
	0, 324, 325, 326, 327, 328, 0, 329, 554, 555,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 0, 349, 350,
	351, 353, 0, 354, 355, 358, 359, 360, 361, 0,
	363, 571, 0, 364, 365, 366, 0, 0, 367, 368,
	369, 370, 876, 372, 375, 572, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 575, 576, 392, 394, 395, 577, 579, 580, 751,
	410, 411, 412, 413, 414, 415, 416, 418, 0, 420,
	421, 422, 581, 423, 424, 425, 426, 0, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 0, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 584, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	728, 475, 585, 476, 477, 478, 479, 480, 0, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	587, 496, 497, 0, 499, 500, 754, 502, 503, 504,
	505, 506, 0, 625, 507, 589, 508, 590, 509, 510,
	511, 512, 513, 514, 515, 517, 0, 0, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	0, 534, 536, 538, 616, 593, 594, 595, 596, 597,
	599, 600, 601, 602, 539, 540, 556, 407, 401, 357,
	399, 400, 404, 405, 408, 729, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 250, 736, 0, 299, 336,
	551, 0, 0, 396, 0, 449, 453, 0, 542, 0,
	0, 0, 0, 307, 0, 741, 0, 747, 0, 753,
	0, 518, 0, 743, 744, 749, 238, 626, 541, 612,
	0, 0, 0, 403, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 745, 742, 746, 752,
	740, 750, 737, 748, 0, 440, 374, 591, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 734, 739, 0, 755,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 565, 562, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	733, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 548, 735, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 726, 738, 0, 0, 727, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 552,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 554, 555, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 571, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 722, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 576, 392, 394,
	395, 577, 579, 580, 751, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 581, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 584, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 728, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 587, 496, 497, 0, 499,
	500, 754, 502, 503, 504, 505, 506, 0, 625, 507,
	589, 508, 590, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 594, 595, 596, 597, 599, 600, 601, 602, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	729, 0, 0, 905, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	250, 736, 0, 299, 336, 551, 0, 0, 396, 0,
	449, 453, 0, 542, 0, 0, 1306, 0, 307, 0,
	741, 0, 747, 0, 753, 0, 518, 0, 743, 744,
	749, 238, 626, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 745, 742, 746, 752, 740, 750, 737, 748, 0,
	440, 374, 591, 467, 245, 291, 278, 320, 362, 474,
	0, 0, 352, 522, 287, 376, 0, 266, 409, 0,
	498, 373, 0, 481, 501, 0, 393, 272, 432, 488,
	489, 734, 739, 0, 755, 0, 276, 277, 398, 258,
	406, 603, 569, 461, 419, 417, 0, 384, 441, 598,
	0, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 566, 570, 568, 564, 561, 565, 562, 563,
	567, 323, 560, 0, 535, 544, 578, 558, 586, 543,
	583, 553, 298, 582, 547, 546, 592, 573, 574, 528,
	588, 559, 557, 550, 549, 545, 0, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 235,
	236, 237, 239, 240, 241, 733, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	548, 735, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 0, 0, 0, 738, 0,
	0, 0, 279, 280, 281, 282, 283, 284, 0, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 0,
	302, 304, 0, 305, 308, 0, 309, 310, 311, 312,
	313, 314, 315, 316, 552, 317, 0, 318, 319, 321,
	0, 324, 325, 326, 327, 328, 0, 329, 554, 555,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 0, 349, 350,
	351, 353, 0, 354, 355, 358, 359, 360, 361, 0,
	363, 571, 0, 364, 365, 366, 0, 0, 367, 368,
	369, 370, 371, 372, 375, 572, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 575, 576, 392, 394, 395, 577, 579, 580, 751,
	410, 411, 412, 413, 414, 415, 416, 418, 0, 420,
	421, 422, 581, 423, 424, 425, 426, 0, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 0, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 584, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	0, 475, 585, 476, 477, 478, 479, 480, 0, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	587, 496, 497, 0, 499, 500, 754, 502, 503, 504,
	505, 506, 0, 625, 507, 589, 508, 590, 509, 510,
	511, 512, 513, 514, 515, 517, 0, 0, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	0, 534, 536, 538, 616, 593, 594, 595, 596, 597,
	599, 600, 601, 602, 539, 540, 556, 407, 401, 357,
	399, 400, 404, 405, 408, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 250, 0, 0, 299, 336,
	551, 0, 0, 396, 0, 449, 453, 0, 542, 0,
	0, 0, 0, 307, 0, 0, 0, 0, 0, 0,
	0, 518, 0, 0, 0, 0, 238, 626, 541, 612,
	0, 0, 0, 403, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 440, 374, 591, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 0, 0, 0, 0,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 565, 562, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	0, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 548, 0, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 0, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 552,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 554, 555, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 571, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 576, 392, 394,
	395, 577, 579, 580, 0, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 581, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 584, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 0, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 587, 496, 497, 0, 499,
	500, 0, 502, 503, 504, 505, 506, 0, 625, 507,
	589, 508, 590, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 594, 595, 596, 597, 599, 600, 601, 602, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	729, 0, 0, 905, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	250, 736, 2033, 299, 336, 551, 0, 0, 396, 0,
	449, 453, 0, 542, 0, 0, 0, 0, 307, 0,
	741, 0, 747, 0, 753, 0, 518, 0, 743, 744,
	749, 238, 626, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 745, 742, 746, 752, 740, 750, 737, 748, 0,
	440, 374, 591, 467, 245, 291, 278, 320, 362, 474,
	0, 0, 352, 522, 287, 376, 0, 266, 409, 0,
	498, 373, 0, 481, 501, 0, 393, 272, 432, 488,
	489, 734, 739, 0, 755, 0, 276, 277, 398, 258,
	406, 603, 569, 461, 419, 417, 0, 384, 441, 598,
	0, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 566, 570, 568, 564, 561, 565, 562, 563,
	567, 323, 560, 0, 535, 544, 578, 558, 586, 543,
	583, 553, 298, 582, 547, 546, 592, 573, 574, 528,
	588, 559, 557, 550, 549, 545, 0, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 235,
	236, 237, 239, 240, 241, 733, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	548, 735, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 0, 0, 0, 738, 0,
	0, 0, 279, 280, 281, 282, 283, 284, 0, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 0,
	302, 304, 0, 305, 308, 0, 309, 310, 311, 312,
	313, 314, 315, 316, 552, 317, 0, 318, 319, 321,
	0, 324, 325, 326, 327, 328, 0, 329, 554, 555,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 0, 349, 350,
	351, 353, 0, 354, 355, 358, 359, 360, 361, 0,
	363, 571, 0, 364, 365, 366, 0, 0, 367, 368,
	369, 370, 371, 372, 375, 572, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 575, 576, 392, 394, 395, 577, 579, 580, 751,
	410, 411, 412, 413, 414, 415, 416, 418, 0, 420,
	421, 422, 581, 423, 424, 425, 426, 0, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 0, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 584, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	0, 475, 585, 476, 477, 478, 479, 480, 0, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	587, 496, 497, 0, 499, 500, 754, 502, 503, 504,
	505, 506, 0, 625, 507, 589, 508, 590, 509, 510,
	511, 512, 513, 514, 515, 517, 0, 0, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	0, 534, 536, 538, 616, 593, 594, 595, 596, 597,
	599, 600, 601, 602, 539, 540, 556, 407, 401, 357,
	399, 400, 404, 405, 408, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 250, 0, 0, 299, 336,
	551, 0, 0, 396, 0, 449, 453, 0, 542, 0,
	0, 0, 0, 307, 0, 0, 0, 0, 0, 0,
	0, 518, 0, 0, 0, 0, 238, 626, 541, 612,
	0, 0, 0, 403, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 440, 374, 591, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 0, 0, 0, 0,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 565, 562, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	0, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 548, 0, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 0, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 552,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 554, 555, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 571, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 576, 392, 394,
	395, 577, 579, 580, 0, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 581, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 584, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 0, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 587, 496, 497, 0, 499,
	500, 0, 502, 503, 504, 505, 506, 0, 625, 507,
	589, 508, 590, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 594, 595, 596, 597, 599, 600, 601, 602, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	250, 0, 3040, 299, 336, 551, 0, 0, 396, 0,
	449, 453, 0, 542, 0, 0, 0, 0, 307, 0,
	0, 0, 0, 0, 0, 0, 518, 0, 0, 0,
	0, 238, 626, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	440, 374, 591, 467, 245, 291, 278, 320, 362, 474,
	0, 0, 352, 522, 287, 376, 0, 266, 409, 0,
	498, 373, 0, 481, 501, 0, 393, 272, 432, 488,
	489, 0, 0, 0, 0, 0, 276, 277, 398, 258,
	406, 603, 569, 461, 419, 417, 0, 384, 441, 598,
	0, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 566, 570, 568, 564, 561, 565, 562, 563,
	567, 323, 560, 0, 535, 544, 578, 558, 586, 543,
	583, 553, 298, 582, 547, 546, 592, 573, 574, 528,
	588, 559, 557, 550, 549, 545, 0, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 235,
	236, 237, 239, 240, 241, 0, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	548, 0, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 0, 0, 0, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 284, 0, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 0,
	302, 304, 0, 305, 308, 0, 309, 310, 311, 312,
	313, 314, 315, 316, 552, 317, 0, 318, 319, 321,
	0, 324, 325, 326, 327, 328, 0, 329, 554, 555,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 0, 349, 350,
	351, 353, 0, 354, 355, 358, 359, 360, 361, 0,
	363, 571, 0, 364, 365, 366, 0, 0, 367, 368,
	369, 370, 371, 372, 375, 572, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 575, 576, 392, 394, 395, 577, 579, 580, 0,
	410, 411, 412, 413, 414, 415, 416, 418, 0, 420,
	421, 422, 581, 423, 424, 425, 426, 0, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 0, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 584, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	0, 475, 585, 476, 477, 478, 479, 480, 0, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	587, 496, 497, 0, 499, 500, 0, 502, 503, 504,
	505, 506, 0, 625, 507, 589, 508, 590, 509, 510,
	511, 512, 513, 514, 515, 517, 0, 0, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	0, 534, 536, 538, 616, 593, 594, 595, 596, 597,
	599, 600, 601, 602, 539, 540, 556, 407, 401, 357,
	399, 400, 404, 405, 408, 791, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 250, 736, 1027, 299, 336,
	551, 0, 0, 396, 0, 449, 453, 0, 542, 0,
	0, 0, 0, 307, 0, 741, 0, 747, 0, 753,
	0, 518, 0, 743, 744, 749, 238, 626, 541, 612,
	0, 0, 0, 403, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 745, 742, 746, 752,
	740, 750, 737, 748, 0, 440, 374, 591, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 734, 739, 0, 755,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 565, 562, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	733, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 548, 735, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 0, 738, 0, 0, 0, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 552,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 554, 555, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 571, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 576, 392, 394,
	395, 577, 579, 580, 751, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 581, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 584, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 0, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 587, 496, 497, 0, 499,
	500, 754, 502, 503, 504, 505, 506, 0, 625, 507,
	589, 508, 590, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 594, 595, 596, 597, 599, 600, 601, 602, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	729, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	250, 736, 0, 299, 336, 551, 0, 0, 396, 0,
	449, 453, 0, 542, 0, 0, 0, 0, 307, 0,
	741, 0, 747, 0, 753, 0, 518, 0, 743, 744,
	749, 238, 626, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 745, 742, 746, 752, 740, 750, 737, 748, 0,
	440, 374, 591, 467, 245, 291, 278, 320, 362, 474,
	0, 0, 352, 522, 287, 376, 0, 266, 409, 0,
	498, 373, 0, 481, 501, 0, 393, 272, 432, 488,
	489, 734, 739, 0, 755, 0, 276, 277, 398, 258,
	406, 603, 569, 461, 419, 417, 0, 384, 441, 598,
	0, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 566, 570, 568, 564, 561, 565, 562, 563,
	567, 323, 560, 0, 535, 544, 578, 558, 586, 543,
	583, 553, 298, 582, 547, 546, 592, 573, 574, 528,
	588, 559, 557, 550, 549, 545, 0, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 235,
	236, 237, 239, 240, 241, 733, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	548, 735, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 0, 0, 0, 738, 0,
	0, 0, 279, 280, 281, 282, 283, 284, 0, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 0,
	302, 304, 0, 305, 308, 0, 309, 310, 311, 312,
	313, 314, 315, 316, 552, 317, 0, 318, 319, 321,
	0, 324, 325, 326, 327, 328, 0, 329, 554, 555,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 0, 349, 350,
	351, 353, 0, 354, 355, 358, 359, 360, 361, 0,
	363, 571, 0, 364, 365, 366, 0, 0, 367, 368,
	369, 370, 371, 372, 375, 572, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 575, 576, 392, 394, 395, 577, 579, 580, 751,
	410, 411, 412, 413, 414, 415, 416, 418, 0, 420,
	421, 422, 581, 423, 424, 425, 426, 0, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 0, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 584, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	0, 475, 585, 476, 477, 478, 479, 480, 0, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	587, 496, 497, 0, 499, 500, 754, 502, 503, 504,
	505, 506, 0, 625, 507, 589, 508, 590, 509, 510,
	511, 512, 513, 514, 515, 517, 0, 0, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	0, 534, 536, 538, 616, 593, 594, 595, 596, 597,
	599, 600, 601, 602, 539, 540, 556, 407, 401, 357,
	399, 400, 404, 405, 408, 791, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 250, 736, 0, 299, 336,
	551, 0, 0, 396, 0, 449, 453, 0, 542, 0,
	0, 0, 0, 307, 0, 741, 0, 747, 0, 753,
	0, 518, 0, 743, 744, 749, 238, 626, 541, 612,
	0, 0, 0, 403, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 745, 742, 746, 752,
	740, 750, 737, 748, 0, 440, 374, 591, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 734, 739, 0, 755,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 984, 985, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	733, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 548, 735, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 0, 738, 0, 0, 0, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 552,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 554, 555, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 571, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 576, 392, 394,
	395, 577, 579, 580, 751, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 581, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 584, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 0, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 587, 496, 497, 0, 499,
	500, 754, 502, 503, 504, 505, 506, 0, 625, 507,
	589, 508, 590, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 594, 595, 596, 597, 599, 600, 601, 602, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	250, 0, 0, 299, 2147, 551, 0, 0, 396, 0,
	449, 453, 0, 542, 0, 0, 0, 0, 307, 0,
	0, 0, 0, 0, 0, 0, 518, 0, 0, 0,
	0, 238, 626, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	440, 374, 591, 467, 245, 291, 278, 320, 362, 474,
	0, 0, 352, 522, 287, 376, 0, 266, 409, 0,
	498, 373, 0, 481, 501, 0, 393, 272, 432, 488,
	489, 0, 0, 2151, 0, 0, 276, 277, 398, 258,
	406, 603, 569, 461, 419, 417, 0, 384, 441, 598,
	0, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 566, 570, 568, 564, 561, 565, 562, 563,
	567, 323, 560, 0, 535, 544, 578, 558, 586, 543,
	583, 553, 298, 582, 547, 546, 592, 573, 574, 528,
	588, 559, 557, 550, 549, 545, 0, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 235,
	236, 237, 239, 240, 241, 0, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	548, 0, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 0, 0, 0, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 284, 0, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 0,
	302, 304, 0, 305, 308, 0, 2157, 310, 311, 312,
	313, 314, 315, 316, 552, 317, 0, 318, 319, 321,
	2156, 324, 325, 326, 327, 328, 0, 329, 554, 555,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 0, 349, 350,
	351, 353, 0, 354, 355, 358, 359, 360, 361, 0,
	363, 571, 0, 364, 365, 366, 0, 0, 367, 368,
	369, 370, 371, 372, 375, 572, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 575, 576, 392, 394, 395, 577, 579, 580, 0,
	410, 411, 412, 413, 414, 415, 416, 418, 0, 420,
	421, 422, 581, 423, 424, 425, 426, 2155, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 0, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 584, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	0, 475, 585, 476, 477, 478, 479, 480, 0, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	587, 496, 497, 0, 499, 500, 0, 502, 503, 504,
	505, 506, 0, 625, 507, 589, 508, 590, 509, 510,
	511, 512, 513, 514, 515, 517, 0, 2154, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	0, 534, 536, 538, 616, 593, 594, 595, 596, 597,
	599, 600, 601, 602, 539, 540, 556, 407, 401, 357,
	399, 400, 404, 405, 408, 220, 0, 0, 0, 2153,
	2148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 250, 0, 0, 299, 336,
	551, 0, 0, 396, 0, 449, 453, 0, 542, 0,
	0, 0, 0, 307, 0, 0, 0, 2604, 0, 0,
	0, 518, 0, 0, 0, 0, 238, 626, 541, 612,
	0, 0, 0, 403, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 440, 374, 591, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 0, 0, 2151, 0,
	0, 276, 277, 398, 258, 406, 603, 569, 461, 419,
	417, 0, 384, 441, 598, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 566, 570, 568,
	564, 561, 565, 562, 563, 567, 323, 560, 0, 535,
	544, 578, 558, 586, 543, 583, 553, 298, 582, 547,
	546, 592, 573, 574, 528, 588, 559, 557, 550, 549,
	545, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	0, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 548, 0, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 0, 0, 0, 0, 0, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 2157, 310, 311, 312, 313, 314, 315, 316, 552,
	317, 0, 318, 319, 321, 2156, 324, 325, 326, 327,
	328, 0, 329, 554, 555, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 571, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	572, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 575, 576, 392, 394,
	395, 577, 579, 580, 0, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 581, 423, 424,
	425, 426, 2155, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 584, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 0, 475, 585, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 587, 496, 497, 0, 499,
	500, 0, 502, 503, 504, 505, 506, 0, 625, 507,
	589, 508, 590, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 2154, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	593, 594, 595, 596, 597, 599, 600, 601, 602, 539,
	540, 556, 407, 401, 357, 399, 400, 404, 405, 408,
	220, 0, 0, 0, 2153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	250, 0, 0, 299, 336, 551, 0, 0, 396, 0,
	449, 453, 0, 542, 0, 0, 0, 0, 307, 0,
	0, 0, 0, 0, 0, 0, 518, 0, 0, 0,
	0, 238, 626, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	440, 374, 591, 467, 245, 291, 278, 320, 362, 474,
	0, 0, 352, 522, 287, 376, 0, 266, 409, 0,
	498, 373, 0, 481, 501, 0, 393, 272, 432, 488,
	489, 0, 0, 2151, 0, 0, 276, 277, 398, 258,
	406, 603, 569, 461, 419, 417, 0, 384, 441, 598,
	0, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 566, 570, 568, 564, 561, 565, 562, 563,
	567, 323, 560, 0, 535, 544, 578, 558, 586, 543,
	583, 553, 298, 582, 547, 546, 592, 573, 574, 528,
	588, 559, 557, 550, 549, 545, 0, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 235,
	236, 237, 239, 240, 241, 0, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	548, 0, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 0, 0, 0, 0, 0,
	0, 0, 279, 280, 281, 282, 283, 284, 0, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 0,
	302, 304, 0, 305, 308, 0, 2157, 310, 311, 312,
	313, 314, 315, 316, 552, 317, 0, 318, 319, 321,
	2156, 324, 325, 326, 327, 328, 0, 329, 554, 555,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 0, 349, 350,
	351, 353, 0, 354, 355, 358, 359, 360, 361, 0,
	363, 571, 0, 364, 365, 366, 0, 0, 367, 368,
	369, 370, 371, 372, 375, 572, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 575, 576, 392, 394, 395, 577, 579, 580, 0,
	410, 411, 412, 413, 414, 415, 416, 418, 0, 420,
	421, 422, 581, 423, 424, 425, 426, 2155, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 0, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 584, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	0, 475, 585, 476, 477, 478, 479, 480, 0, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	587, 496, 497, 0, 499, 500, 0, 502, 503, 504,
	505, 506, 0, 625, 507, 589, 508, 590, 509, 510,
	511, 512, 513, 514, 515, 517, 0, 2154, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	0, 534, 536, 538, 616, 593, 594, 595, 596, 597,
	599, 600, 601, 602, 539, 540, 556, 407, 401, 357,
	399, 400, 404, 405, 408, 864, 0, 0, 0, 2153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 250, 736, 0, 299, 336,
	0, 0, 0, 396, 0, 449, 453, 0, 0, 0,
	0, 0, 0, 307, 0, 741, 2646, 747, 0, 753,
	0, 518, 0, 743, 744, 749, 238, 863, 541, 612,
	0, 0, 0, 403, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 745, 742, 746, 752,
	740, 750, 737, 748, 0, 440, 374, 0, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 734, 739, 0, 755,
	0, 276, 277, 398, 258, 406, 0, 0, 461, 419,
	417, 0, 384, 441, 0, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 535,
	866, 856, 848, 849, 850, 851, 852, 853, 0, 868,
	869, 870, 871, 872, 528, 862, 0, 847, 854, 855,
	857, 2649, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	733, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 0, 735, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 0, 738, 0, 0, 0, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 0,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 0, 0, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 0, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	0, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 0, 0, 392, 394,
	395, 0, 2647, 0, 751, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 0, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 0, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 0, 475, 2652, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 0, 496, 497, 0, 499,
	500, 754, 502, 503, 504, 505, 506, 0, 625, 507,
	0, 508, 0, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 539,
	540, 2648, 407, 401, 357, 399, 400, 404, 405, 408,
	2124, 233, 0, 250, 0, 0, 299, 336, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 2640, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 647, 2127, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 2131, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 2128, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	647, 2127, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 2131, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 2128, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2804, 233, 0, 250, 0, 0, 299, 336, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 2805, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2795, 233, 0, 250, 0,
	0, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 2796, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	776, 233, 0, 250, 0, 0, 299, 775, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 647, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	647, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 0, 0, 299, 336, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 4059,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 3151, 250, 0,
	0, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 0, 0, 299, 336, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 3762,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 3746, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 0, 0, 299, 336, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 3380,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 982, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 0, 0, 299, 336, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 2391, 0, 0,
	0, 403, 0, 0, 0, 0, 2394, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 2392, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	2390, 503, 2389, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 2393, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 1177, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	647, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1175, 233, 0, 250, 0, 0, 299, 1174, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	213, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 896, 242, 243, 244, 247, 248, 249,
	251, 214, 252, 895, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 216, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	217, 457, 458, 459, 460, 584, 462, 463, 215, 465,
	466, 468, 469, 470, 471, 472, 473, 893, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 209, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 218, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	779, 233, 0, 250, 0, 0, 299, 778, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 610, 233, 0, 250, 0,
	0, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	606, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 608, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 607, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 0, 0, 299, 336, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	4841, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 0, 0, 299, 336, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 213, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 214, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 216, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 217, 457, 458, 459, 460,
	584, 462, 463, 215, 465, 466, 468, 469, 470, 471,
	472, 473, 3215, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 3216, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 218, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	213, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 214, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 216, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	217, 457, 458, 459, 460, 584, 462, 463, 215, 465,
	466, 468, 469, 470, 471, 472, 473, 893, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 209, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 218, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 0, 0, 299, 2865, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 2783, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 0, 0, 299, 2781, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 2767, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 0, 0, 299, 2115, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 2056, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 0, 0, 299, 336, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 1340, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 1290, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 0, 0, 299, 1097, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 1058, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 0, 0, 299, 1054, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 1047, 250, 0,
	0, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 0, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 0, 0, 299, 836, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 832, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 0, 0, 299, 829, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 825, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 0, 0, 299, 806, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 783, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 0, 0, 299, 781, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 762, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 0, 0, 299, 721, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 717, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 0, 0, 299, 715, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 690, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 0, 0, 299, 336, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 626, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 650, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	584, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 625, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 461, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 627, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 0, 0, 299, 336, 551, 0,
	0, 396, 0, 449, 453, 0, 542, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 518,
	0, 0, 0, 0, 238, 213, 541, 207, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 374, 591, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 0, 0, 0, 0, 0, 276,
	277, 398, 258, 406, 603, 569, 461, 419, 417, 0,
	384, 441, 598, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 566, 570, 568, 564, 561,
	565, 562, 563, 567, 323, 560, 0, 535, 544, 578,
	558, 586, 543, 583, 553, 298, 582, 547, 546, 592,
	573, 574, 528, 588, 559, 557, 550, 549, 545, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 0, 242,
	243, 244, 247, 248, 249, 251, 214, 252, 253, 254,
	255, 256, 257, 548, 0, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 552, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 554, 555, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 571, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 572, 377,
	378, 379, 380, 381, 382, 383, 216, 385, 386, 387,
	388, 389, 390, 391, 575, 576, 392, 394, 395, 577,
	579, 580, 0, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 581, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 217, 457, 458, 459, 460,
	584, 462, 463, 215, 465, 466, 468, 469, 470, 471,
	472, 473, 208, 0, 475, 585, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 587, 496, 497, 0, 499, 500, 0,
	502, 503, 504, 505, 506, 0, 209, 507, 589, 508,
	590, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 218, 593, 594,
	595, 596, 597, 599, 600, 601, 602, 539, 540, 556,
	407, 401, 357, 399, 400, 404, 405, 408, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 250, 0,
	0, 299, 336, 551, 0, 0, 396, 0, 449, 453,
	0, 542, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 518, 0, 0, 0, 0, 238,
	626, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 374,
	591, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 0,
	0, 0, 0, 0, 276, 277, 398, 258, 406, 603,
	569, 0, 419, 417, 0, 384, 441, 598, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	566, 570, 568, 564, 561, 565, 562, 563, 567, 323,
	560, 0, 535, 544, 578, 558, 586, 543, 583, 553,
	298, 582, 547, 546, 592, 573, 574, 528, 588, 559,
	557, 550, 549, 545, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 0, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 548, 0,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 552, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 554, 555, 0, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 571,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 572, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 575,
	576, 392, 394, 395, 577, 579, 580, 0, 410, 411,
	412, 413, 414, 415, 0, 418, 0, 420, 421, 422,
	581, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 0, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 584, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	585, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 587, 496,
	497, 0, 499, 500, 0, 502, 503, 504, 505, 506,
	0, 625, 507, 589, 508, 590, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 539, 540, 556, 407, 401, 357, 399, 400,
	404, 405, 408, 864, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 250, 736, 0, 299, 336, 0, 0,
	0, 396, 0, 449, 453, 0, 0, 0, 0, 0,
	0, 307, 0, 741, 2646, 747, 0, 753, 0, 518,
	0, 743, 744, 749, 238, 863, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 745, 742, 746, 752, 740, 750,
	737, 748, 0, 440, 374, 0, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 734, 739, 0, 755, 0, 276,
	277, 398, 258, 406, 0, 0, 461, 419, 417, 0,
	384, 441, 0, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 323, 0, 0, 535, 866, 856,
	848, 849, 850, 851, 852, 853, 0, 868, 869, 870,
	871, 872, 528, 862, 0, 847, 854, 855, 857, 2649,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 733, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 0, 735, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 738, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 0, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 0, 0, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 0, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 0, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 0, 0, 392, 394, 395, 0,
	2647, 0, 751, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 0, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	0, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 2652, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 0, 496, 497, 0, 499, 500, 754,
	502, 503, 504, 505, 506, 0, 625, 507, 0, 508,
	0, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 0, 0,
	864, 0, 0, 0, 0, 0, 0, 539, 540, 2648,
	407, 401, 357, 399, 400, 404, 405, 408, 233, 0,
	250, 736, 0, 299, 336, 0, 0, 0, 396, 0,
	449, 453, 0, 0, 0, 0, 0, 0, 307, 0,
	741, 0, 747, 3192, 753, 0, 518, 0, 743, 744,
	749, 238, 863, 541, 612, 0, 0, 0, 403, 0,
	0, 0, 0, 3191, 0, 0, 246, 0, 0, 0,
	0, 745, 742, 746, 752, 740, 750, 737, 748, 0,
	440, 374, 0, 467, 245, 291, 278, 320, 362, 474,
	0, 0, 352, 522, 287, 376, 0, 266, 409, 0,
	498, 373, 0, 481, 501, 0, 393, 272, 432, 488,
	489, 734, 739, 0, 755, 0, 276, 277, 398, 258,
	406, 0, 0, 461, 419, 417, 0, 384, 441, 0,
	0, 0, 306, 0, 301, 397, 537, 264, 516, 435,
	402, 356, 464, 493, 303, 288, 289, 332, 434, 322,
	274, 527, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 535, 866, 856, 848, 849, 850,
	851, 852, 853, 0, 868, 869, 870, 871, 872, 528,
	862, 0, 847, 854, 855, 857, 0, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 234, 0, 235,
	236, 237, 239, 240, 241, 733, 242, 243, 244, 247,
	248, 249, 251, 611, 252, 253, 254, 255, 256, 257,
	0, 735, 259, 260, 261, 262, 263, 265, 267, 268,
	269, 270, 271, 273, 275, 0, 0, 0, 738, 0,
	0, 0, 279, 280, 281, 282, 283, 284, 0, 285,
	286, 290, 292, 293, 294, 295, 296, 297, 300, 0,
	302, 304, 0, 305, 308, 0, 309, 310, 311, 312,
	313, 314, 315, 316, 0, 317, 0, 318, 319, 321,
	0, 324, 325, 326, 327, 328, 0, 329, 0, 0,
	330, 331, 333, 334, 335, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 0, 349, 350,
	351, 353, 0, 354, 355, 358, 359, 360, 361, 0,
	363, 0, 0, 364, 365, 366, 0, 0, 367, 368,
	369, 370, 371, 372, 375, 0, 377, 378, 379, 380,
	381, 382, 383, 613, 385, 386, 387, 388, 389, 390,
	391, 0, 0, 392, 394, 395, 0, 0, 0, 751,
	410, 411, 412, 413, 414, 415, 416, 418, 0, 420,
	421, 422, 0, 423, 424, 425, 426, 0, 427, 428,
	429, 430, 431, 433, 436, 437, 438, 439, 0, 442,
	443, 444, 445, 446, 447, 448, 450, 451, 452, 454,
	455, 456, 614, 457, 458, 459, 460, 0, 462, 463,
	615, 465, 466, 468, 469, 470, 471, 472, 473, 624,
	0, 475, 2652, 476, 477, 478, 479, 480, 0, 482,
	483, 484, 485, 486, 487, 490, 491, 492, 494, 495,
	0, 496, 497, 0, 499, 500, 754, 502, 503, 504,
	505, 506, 0, 625, 507, 0, 508, 0, 509, 510,
	511, 512, 513, 514, 515, 517, 0, 0, 519, 520,
	521, 523, 524, 525, 526, 529, 530, 531, 532, 533,
	0, 534, 536, 538, 616, 0, 0, 864, 0, 0,
	0, 0, 0, 0, 539, 540, 0, 407, 401, 357,
	399, 400, 404, 405, 408, 233, 0, 250, 736, 0,
	299, 336, 0, 0, 0, 396, 0, 449, 453, 0,
	0, 0, 0, 0, 0, 307, 0, 741, 0, 747,
	0, 753, 0, 518, 0, 743, 744, 749, 238, 863,
	541, 612, 0, 0, 0, 403, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 745, 742,
	746, 752, 740, 750, 737, 748, 0, 440, 374, 0,
	467, 245, 291, 278, 320, 362, 474, 0, 0, 352,
	522, 287, 376, 0, 266, 409, 0, 498, 373, 0,
	481, 501, 0, 393, 272, 432, 488, 489, 734, 739,
	0, 755, 0, 276, 277, 398, 258, 406, 0, 0,
	461, 419, 417, 4871, 384, 441, 0, 0, 0, 306,
	0, 301, 397, 537, 264, 516, 435, 402, 356, 464,
	493, 303, 288, 289, 332, 434, 322, 274, 527, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 323, 0,
	0, 535, 866, 856, 848, 849, 850, 851, 852, 853,
	0, 868, 869, 870, 871, 872, 528, 862, 0, 847,
	854, 855, 857, 0, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 234, 0, 235, 236, 237, 239,
	240, 241, 733, 242, 243, 244, 247, 248, 249, 251,
	611, 252, 253, 254, 255, 256, 257, 0, 735, 259,
	260, 261, 262, 263, 265, 267, 268, 269, 270, 271,
	273, 275, 0, 0, 0, 738, 0, 0, 0, 279,
	280, 281, 282, 283, 284, 0, 285, 286, 290, 292,
	293, 294, 295, 296, 297, 300, 0, 302, 304, 0,
	305, 308, 0, 309, 310, 311, 312, 313, 314, 315,
	316, 0, 317, 0, 318, 319, 321, 0, 324, 325,
	326, 327, 328, 0, 329, 0, 0, 330, 331, 333,
	334, 335, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 0, 349, 350, 351, 353, 0,
	354, 355, 358, 359, 360, 361, 0, 363, 0, 0,
	364, 365, 366, 0, 0, 367, 368, 369, 370, 371,
	372, 375, 0, 377, 378, 379, 380, 381, 382, 383,
	613, 385, 386, 387, 388, 389, 390, 391, 0, 0,
	392, 394, 395, 0, 0, 0, 751, 410, 411, 412,
	413, 414, 415, 416, 418, 0, 420, 421, 422, 0,
	423, 424, 425, 426, 0, 427, 428, 429, 430, 431,
	433, 436, 437, 438, 439, 0, 442, 443, 444, 445,
	446, 447, 448, 450, 451, 452, 454, 455, 456, 614,
	457, 458, 459, 460, 0, 462, 463, 615, 465, 466,
	468, 469, 470, 471, 472, 473, 624, 0, 475, 0,
	476, 477, 478, 479, 480, 0, 482, 483, 484, 485,
	486, 487, 490, 491, 492, 494, 495, 0, 496, 497,
	0, 499, 500, 754, 502, 503, 504, 505, 506, 0,
	625, 507, 0, 508, 0, 509, 510, 511, 512, 513,
	514, 515, 517, 0, 0, 519, 520, 521, 523, 524,
	525, 526, 529, 530, 531, 532, 533, 0, 534, 536,
	538, 616, 0, 0, 864, 0, 0, 0, 0, 0,
	0, 539, 540, 0, 407, 401, 357, 399, 400, 404,
	405, 408, 233, 0, 250, 736, 0, 299, 336, 0,
	0, 0, 396, 0, 449, 453, 0, 0, 0, 0,
	0, 0, 307, 0, 741, 0, 747, 0, 753, 0,
	518, 0, 743, 744, 749, 238, 863, 541, 612, 0,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 745, 742, 746, 752, 740,
	750, 737, 748, 0, 440, 374, 0, 467, 245, 291,
	278, 320, 362, 474, 0, 0, 352, 522, 287, 376,
	0, 266, 409, 0, 498, 373, 0, 481, 501, 0,
	393, 272, 432, 488, 489, 734, 739, 0, 755, 0,
	276, 277, 398, 258, 406, 0, 0, 461, 419, 417,
	4561, 384, 441, 0, 0, 0, 306, 0, 301, 397,
	537, 264, 516, 435, 402, 356, 464, 493, 303, 288,
	289, 332, 434, 322, 274, 527, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 323, 0, 0, 535, 866,
	856, 848, 849, 850, 851, 852, 853, 0, 868, 869,
	870, 871, 872, 528, 862, 0, 847, 854, 855, 857,
	0, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 234, 0, 235, 236, 237, 239, 240, 241, 733,
	242, 243, 244, 247, 248, 249, 251, 611, 252, 253,
	254, 255, 256, 257, 0, 735, 259, 260, 261, 262,
	263, 265, 267, 268, 269, 270, 271, 273, 275, 0,
	0, 0, 738, 0, 0, 0, 279, 280, 281, 282,
	283, 284, 0, 285, 286, 290, 292, 293, 294, 295,
	296, 297, 300, 0, 302, 304, 0, 305, 308, 0,
	309, 310, 311, 312, 313, 314, 315, 316, 0, 317,
	0, 318, 319, 321, 0, 324, 325, 326, 327, 328,
	0, 329, 0, 0, 330, 331, 333, 334, 335, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 0, 349, 350, 351, 353, 0, 354, 355, 358,
	359, 360, 361, 0, 363, 0, 0, 364, 365, 366,
	0, 0, 367, 368, 369, 370, 371, 372, 375, 0,
	377, 378, 379, 380, 381, 382, 383, 613, 385, 386,
	387, 388, 389, 390, 391, 0, 0, 392, 394, 395,
	0, 0, 0, 751, 410, 411, 412, 413, 414, 415,
	416, 418, 0, 420, 421, 422, 0, 423, 424, 425,
	426, 0, 427, 428, 429, 430, 431, 433, 436, 437,
	438, 439, 0, 442, 443, 444, 445, 446, 447, 448,
	450, 451, 452, 454, 455, 456, 614, 457, 458, 459,
	460, 0, 462, 463, 615, 465, 466, 468, 469, 470,
	471, 472, 473, 624, 0, 475, 0, 476, 477, 478,
	479, 480, 0, 482, 483, 484, 485, 486, 487, 490,
	491, 492, 494, 495, 0, 496, 497, 0, 499, 500,
	754, 502, 503, 504, 505, 506, 0, 625, 507, 0,
	508, 0, 509, 510, 511, 512, 513, 514, 515, 517,
	0, 0, 519, 520, 521, 523, 524, 525, 526, 529,
	530, 531, 532, 533, 0, 534, 536, 538, 616, 0,
	0, 864, 0, 0, 0, 0, 0, 0, 539, 540,
	0, 407, 401, 357, 399, 400, 404, 405, 408, 233,
	0, 250, 736, 0, 299, 336, 0, 0, 0, 396,
	0, 449, 453, 0, 0, 0, 0, 0, 0, 307,
	0, 741, 0, 747, 0, 753, 0, 518, 0, 743,
	744, 749, 238, 863, 541, 612, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 745, 742, 746, 752, 740, 750, 737, 748,
	0, 440, 374, 0, 467, 245, 291, 278, 320, 362,
	474, 0, 0, 352, 522, 287, 376, 0, 266, 409,
	0, 498, 373, 0, 481, 501, 0, 393, 272, 432,
	488, 489, 734, 739, 0, 755, 0, 276, 277, 398,
	258, 406, 0, 0, 461, 419, 417, 0, 384, 441,
	0, 0, 0, 306, 0, 301, 397, 537, 264, 516,
	435, 402, 356, 464, 493, 303, 288, 289, 332, 434,
	322, 274, 527, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 323, 0, 0, 535, 866, 856, 848, 849,
	850, 851, 852, 853, 0, 868, 869, 870, 871, 872,
	528, 862, 0, 847, 854, 855, 857, 0, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 234, 0,
	235, 236, 237, 239, 240, 241, 733, 242, 243, 244,
	247, 248, 249, 251, 611, 252, 253, 254, 255, 256,
	257, 0, 735, 259, 260, 261, 262, 263, 265, 267,
	268, 269, 270, 271, 273, 275, 0, 0, 0, 738,
	0, 0, 0, 279, 280, 281, 282, 283, 284, 0,
	285, 286, 290, 292, 293, 294, 295, 296, 297, 300,
	0, 302, 304, 0, 305, 308, 0, 309, 310, 311,
	312, 313, 314, 315, 316, 0, 317, 0, 318, 319,
	321, 0, 324, 325, 326, 327, 328, 0, 329, 0,
	0, 330, 331, 333, 334, 335, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 0, 349,
	350, 351, 353, 0, 354, 355, 358, 359, 360, 361,
	0, 363, 0, 0, 364, 365, 366, 0, 0, 367,
	368, 369, 370, 371, 372, 375, 0, 377, 378, 379,
	380, 381, 382, 383, 613, 385, 386, 387, 388, 389,
	390, 391, 4355, 0, 392, 394, 395, 0, 0, 0,
	751, 410, 411, 412, 413, 414, 415, 416, 418, 0,
	420, 421, 422, 0, 423, 424, 425, 426, 0, 427,
	428, 429, 430, 431, 433, 436, 437, 438, 439, 0,
	442, 443, 444, 445, 446, 447, 448, 450, 451, 452,
	454, 455, 456, 614, 457, 458, 459, 460, 0, 462,
	463, 615, 465, 466, 468, 469, 470, 471, 472, 473,
	624, 0, 475, 0, 476, 477, 478, 479, 480, 0,
	482, 483, 484, 485, 486, 487, 490, 491, 492, 494,
	495, 0, 496, 497, 0, 499, 500, 754, 502, 503,
	504, 505, 506, 0, 625, 507, 0, 508, 0, 509,
	510, 511, 512, 513, 514, 515, 517, 0, 0, 519,
	520, 521, 523, 524, 525, 526, 529, 530, 531, 532,
	533, 0, 534, 536, 538, 616, 0, 0, 864, 0,
	0, 0, 0, 0, 0, 539, 540, 0, 407, 401,
	357, 399, 400, 404, 405, 408, 233, 0, 250, 736,
	0, 299, 336, 0, 0, 0, 396, 0, 449, 453,
	0, 0, 0, 0, 0, 0, 307, 0, 741, 0,
	747, 0, 753, 0, 518, 0, 743, 744, 749, 238,
	863, 541, 612, 0, 0, 0, 403, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 745,
	742, 746, 752, 740, 750, 737, 748, 0, 440, 374,
	0, 467, 245, 291, 278, 320, 362, 474, 0, 0,
	352, 522, 287, 376, 0, 266, 409, 0, 498, 373,
	0, 481, 501, 0, 393, 272, 432, 488, 489, 734,
	739, 0, 755, 0, 276, 277, 398, 258, 406, 0,
	0, 461, 419, 417, 0, 384, 441, 0, 0, 0,
	306, 0, 301, 397, 537, 264, 516, 435, 402, 356,
	464, 493, 303, 288, 289, 332, 434, 322, 274, 527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 323,
	0, 0, 535, 866, 856, 848, 849, 850, 851, 852,
	853, 0, 868, 869, 870, 871, 872, 528, 862, 0,
	847, 854, 855, 857, 0, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 234, 0, 235, 236, 237,
	239, 240, 241, 733, 242, 243, 244, 247, 248, 249,
	251, 611, 252, 253, 254, 255, 256, 257, 0, 735,
	259, 260, 261, 262, 263, 265, 267, 268, 269, 270,
	271, 273, 275, 0, 0, 0, 738, 0, 0, 0,
	279, 280, 281, 282, 283, 284, 0, 285, 286, 290,
	292, 293, 294, 295, 296, 297, 300, 0, 302, 304,
	0, 305, 308, 0, 309, 310, 311, 312, 313, 314,
	315, 316, 0, 317, 0, 318, 319, 321, 0, 324,
	325, 326, 327, 328, 0, 329, 0, 0, 330, 331,
	333, 334, 335, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 0, 349, 350, 351, 353,
	0, 354, 355, 358, 359, 360, 361, 0, 363, 0,
	0, 364, 365, 366, 0, 0, 367, 368, 369, 370,
	371, 372, 375, 0, 377, 378, 379, 380, 381, 382,
	383, 613, 385, 386, 387, 388, 389, 390, 391, 0,
	0, 392, 394, 395, 0, 0, 0, 751, 410, 411,
	412, 413, 414, 415, 416, 418, 0, 420, 421, 422,
	0, 423, 424, 425, 426, 0, 427, 428, 429, 430,
	431, 433, 436, 437, 438, 439, 0, 442, 443, 444,
	445, 446, 447, 448, 450, 451, 452, 454, 455, 456,
	614, 457, 458, 459, 460, 0, 462, 463, 615, 465,
	466, 468, 469, 470, 471, 472, 473, 624, 0, 475,
	2652, 476, 477, 478, 479, 480, 0, 482, 483, 484,
	485, 486, 487, 490, 491, 492, 494, 495, 0, 496,
	497, 0, 499, 500, 754, 502, 503, 504, 505, 506,
	0, 625, 507, 0, 508, 0, 509, 510, 511, 512,
	513, 514, 515, 517, 0, 0, 519, 520, 521, 523,
	524, 525, 526, 529, 530, 531, 532, 533, 0, 534,
	536, 538, 616, 0, 0, 864, 0, 0, 0, 0,
	0, 0, 539, 540, 0, 407, 401, 357, 399, 400,
	404, 405, 408, 233, 0, 250, 736, 0, 299, 336,
	0, 0, 0, 396, 0, 449, 453, 0, 0, 0,
	0, 0, 0, 307, 0, 741, 0, 747, 0, 753,
	0, 518, 0, 743, 744, 749, 238, 863, 541, 612,
	0, 0, 0, 403, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 745, 742, 746, 752,
	740, 750, 737, 748, 0, 440, 374, 0, 467, 245,
	291, 278, 320, 362, 474, 0, 0, 352, 522, 287,
	376, 0, 266, 409, 0, 498, 373, 0, 481, 501,
	0, 393, 272, 432, 488, 489, 734, 739, 0, 755,
	0, 276, 277, 398, 258, 406, 0, 0, 461, 419,
	417, 0, 384, 441, 0, 0, 0, 306, 0, 301,
	397, 537, 264, 516, 435, 402, 356, 464, 493, 303,
	288, 289, 332, 434, 322, 274, 527, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 535,
	866, 856, 848, 849, 850, 851, 852, 853, 0, 868,
	869, 870, 871, 872, 528, 862, 0, 847, 854, 855,
	857, 0, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 234, 0, 235, 236, 237, 239, 240, 241,
	733, 242, 243, 244, 247, 248, 249, 251, 611, 252,
	253, 254, 255, 256, 257, 0, 735, 259, 260, 261,
	262, 263, 265, 267, 268, 269, 270, 271, 273, 275,
	0, 0, 0, 738, 0, 0, 0, 279, 280, 281,
	282, 283, 284, 0, 285, 286, 290, 292, 293, 294,
	295, 296, 297, 300, 0, 302, 304, 0, 305, 308,
	0, 309, 310, 311, 312, 313, 314, 315, 316, 0,
	317, 0, 318, 319, 321, 0, 324, 325, 326, 327,
	328, 0, 329, 0, 0, 330, 331, 333, 334, 335,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 349, 350, 351, 353, 0, 354, 355,
	358, 359, 360, 361, 0, 363, 0, 0, 364, 365,
	366, 0, 0, 367, 368, 369, 370, 371, 372, 375,
	0, 377, 378, 379, 380, 381, 382, 383, 613, 385,
	386, 387, 388, 389, 390, 391, 3864, 0, 392, 394,
	395, 0, 0, 0, 751, 410, 411, 412, 413, 414,
	415, 416, 418, 0, 420, 421, 422, 0, 423, 424,
	425, 426, 0, 427, 428, 429, 430, 431, 433, 436,
	437, 438, 439, 0, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 452, 454, 455, 456, 614, 457, 458,
	459, 460, 0, 462, 463, 615, 465, 466, 468, 469,
	470, 471, 472, 473, 624, 0, 475, 0, 476, 477,
	478, 479, 480, 0, 482, 483, 484, 485, 486, 487,
	490, 491, 492, 494, 495, 0, 496, 497, 0, 499,
	500, 754, 502, 503, 504, 505, 506, 0, 625, 507,
	0, 508, 0, 509, 510, 511, 512, 513, 514, 515,
	517, 0, 0, 519, 520, 521, 523, 524, 525, 526,
	529, 530, 531, 532, 533, 0, 534, 536, 538, 616,
	0, 0, 864, 0, 0, 0, 0, 0, 0, 539,
	540, 0, 407, 401, 357, 399, 400, 404, 405, 408,
	233, 0, 250, 736, 0, 299, 336, 0, 0, 0,
	396, 0, 449, 453, 0, 0, 0, 0, 0, 0,
	307, 0, 741, 0, 747, 0, 753, 0, 518, 0,
	743, 744, 749, 238, 863, 541, 612, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 745, 742, 746, 752, 740, 750, 737,
	748, 0, 440, 374, 0, 467, 245, 291, 278, 320,
	362, 474, 0, 0, 352, 522, 287, 376, 0, 266,
	409, 0, 498, 373, 0, 481, 501, 0, 393, 272,
	432, 488, 489, 734, 739, 0, 755, 0, 276, 277,
	398, 258, 406, 0, 0, 461, 419, 417, 0, 384,
	441, 0, 0, 0, 306, 0, 301, 397, 537, 264,
	516, 435, 402, 356, 464, 493, 303, 288, 289, 332,
	434, 322, 274, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 323, 0, 0, 535, 866, 856, 848,
	849, 850, 851, 852, 853, 0, 868, 869, 870, 871,
	872, 528, 862, 0, 847, 854, 855, 857, 0, 223,
	224, 225, 226, 227, 228, 229, 230, 231, 232, 234,
	0, 235, 236, 237, 239, 240, 241, 733, 242, 243,
	244, 247, 248, 249, 251, 611, 252, 253, 254, 255,
	256, 257, 0, 735, 259, 260, 261, 262, 263, 265,
	267, 268, 269, 270, 271, 273, 275, 0, 0, 0,
	738, 0, 0, 0, 279, 280, 281, 282, 283, 284,
	0, 285, 286, 290, 292, 293, 294, 295, 296, 297,
	300, 0, 302, 304, 0, 305, 308, 0, 309, 310,
	311, 312, 313, 314, 315, 316, 0, 317, 0, 318,
	319, 321, 0, 324, 325, 326, 327, 328, 0, 329,
	0, 0, 330, 331, 333, 334, 335, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 0,
	349, 350, 351, 353, 0, 354, 355, 358, 359, 360,
	361, 0, 363, 0, 0, 364, 365, 366, 0, 0,
	367, 368, 369, 370, 371, 372, 375, 0, 377, 378,
	379, 380, 381, 382, 383, 613, 385, 386, 387, 388,
	389, 390, 391, 0, 0, 392, 394, 395, 0, 0,
	0, 751, 410, 411, 412, 413, 414, 415, 416, 418,
	0, 420, 421, 422, 0, 423, 424, 425, 426, 0,
	427, 428, 429, 430, 431, 433, 436, 437, 438, 439,
	0, 442, 443, 444, 445, 446, 447, 448, 450, 451,
	452, 454, 455, 456, 614, 457, 458, 459, 460, 0,
	462, 463, 615, 465, 466, 468, 469, 470, 471, 472,
	473, 624, 0, 475, 0, 476, 477, 478, 479, 480,
	0, 482, 483, 484, 485, 486, 487, 490, 491, 492,
	494, 495, 0, 496, 497, 0, 499, 500, 754, 502,
	503, 504, 505, 506, 0, 625, 507, 0, 508, 0,
	509, 510, 511, 512, 513, 514, 515, 517, 0, 0,
	519, 520, 521, 523, 524, 525, 526, 529, 530, 531,
	532, 533, 0, 534, 536, 538, 616, 0, 0, 864,
	0, 0, 0, 0, 0, 0, 539, 540, 0, 407,
	401, 357, 399, 400, 404, 405, 408, 233, 0, 250,
	736, 0, 299, 874, 0, 0, 0, 396, 0, 449,
	453, 0, 0, 0, 0, 0, 0, 307, 0, 741,
	0, 747, 0, 753, 0, 518, 0, 743, 744, 749,
	238, 863, 541, 612, 0, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	745, 742, 746, 752, 740, 750, 737, 748, 0, 440,
	374, 0, 467, 245, 291, 278, 320, 362, 474, 0,
	0, 352, 522, 287, 376, 0, 266, 409, 0, 498,
	373, 0, 481, 501, 0, 393, 272, 432, 488, 489,
	734, 739, 0, 755, 0, 276, 277, 398, 258, 406,
	0, 0, 461, 419, 417, 0, 384, 441, 0, 0,
	0, 306, 0, 301, 397, 537, 264, 516, 435, 402,
	356, 464, 493, 303, 288, 289, 332, 434, 322, 274,
	527, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	323, 0, 0, 535, 866, 856, 848, 849, 850, 851,
	852, 853, 0, 868, 869, 870, 871, 872, 528, 862,
	0, 847, 854, 855, 857, 0, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 234, 0, 235, 236,
	237, 239, 240, 241, 733, 242, 243, 244, 247, 248,
	249, 251, 611, 252, 253, 254, 255, 256, 257, 0,
	735, 259, 260, 261, 262, 263, 265, 267, 268, 269,
	270, 271, 273, 275, 0, 0, 0, 738, 0, 0,
	0, 279, 280, 281, 282, 283, 284, 0, 285, 286,
	290, 292, 293, 294, 295, 296, 297, 300, 0, 302,
	304, 0, 305, 308, 0, 309, 310, 311, 312, 313,
	314, 315, 316, 0, 317, 0, 318, 319, 321, 0,
	324, 325, 326, 327, 328, 0, 329, 0, 0, 330,
	331, 333, 334, 335, 337, 338, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 0, 349, 350, 351,
	353, 0, 354, 355, 358, 359, 360, 361, 0, 363,
	0, 0, 364, 365, 366, 0, 0, 367, 368, 369,
	370, 371, 372, 375, 0, 377, 378, 379, 380, 381,
	382, 383, 613, 385, 386, 387, 388, 389, 390, 391,
	0, 0, 392, 394, 395, 0, 0, 0, 751, 410,
	411, 412, 413, 414, 415, 416, 418, 0, 420, 421,
	422, 0, 423, 424, 425, 426, 0, 427, 428, 429,
	430, 431, 433, 436, 437, 438, 439, 0, 442, 443,
	444, 445, 446, 447, 448, 450, 451, 452, 454, 455,
	456, 614, 457, 458, 459, 460, 0, 462, 463, 615,
	465, 466, 468, 469, 470, 471, 472, 473, 624, 0,
	475, 0, 476, 477, 478, 479, 480, 0, 482, 483,
	484, 485, 486, 487, 490, 491, 492, 494, 495, 0,
	496, 497, 0, 499, 500, 754, 502, 503, 504, 505,
	506, 0, 625, 507, 0, 508, 0, 509, 510, 511,
	512, 513, 514, 515, 517, 0, 0, 519, 520, 521,
	523, 524, 525, 526, 529, 530, 531, 532, 533, 0,
	534, 536, 538, 616, 0, 0, 864, 0, 0, 0,
	0, 0, 0, 539, 540, 0, 407, 401, 357, 399,
	400, 404, 405, 408, 233, 0, 250, 736, 0, 299,
	838, 0, 0, 0, 396, 0, 449, 453, 0, 0,
	0, 0, 0, 0, 307, 0, 741, 0, 747, 0,
	753, 0, 518, 0, 743, 744, 749, 238, 863, 541,
	612, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 745, 742, 746,
	752, 740, 750, 737, 748, 0, 440, 374, 0, 467,
	245, 291, 278, 320, 362, 474, 0, 0, 352, 522,
	287, 376, 0, 266, 409, 0, 498, 373, 0, 481,
	501, 0, 393, 272, 432, 488, 489, 734, 739, 0,
	755, 0, 276, 277, 398, 258, 406, 0, 0, 461,
	419, 417, 0, 384, 441, 0, 0, 0, 306, 0,
	301, 397, 537, 264, 516, 435, 402, 356, 464, 493,
	303, 288, 289, 332, 434, 322, 274, 527, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 323, 0, 0,
	535, 866, 856, 848, 849, 850, 851, 852, 853, 0,
	868, 869, 870, 871, 872, 528, 862, 0, 847, 854,
	855, 857, 0, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 234, 0, 235, 236, 237, 239, 240,
	241, 733, 242, 243, 244, 247, 248, 249, 251, 611,
	252, 253, 254, 255, 256, 257, 0, 735, 259, 260,
	261, 262, 263, 265, 267, 268, 269, 270, 271, 273,
	275, 0, 0, 0, 738, 0, 0, 0, 279, 280,
	281, 282, 283, 284, 0, 285, 286, 290, 292, 293,
	294, 295, 296, 297, 300, 0, 302, 304, 0, 305,
	308, 0, 309, 310, 311, 312, 313, 314, 315, 316,
	0, 317, 0, 318, 319, 321, 0, 324, 325, 326,
	327, 328, 0, 329, 0, 0, 330, 331, 333, 334,
	335, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 0, 349, 350, 351, 353, 0, 354,
	355, 358, 359, 360, 361, 0, 363, 0, 0, 364,
	365, 366, 0, 0, 367, 368, 369, 370, 371, 372,
	375, 0, 377, 378, 379, 380, 381, 382, 383, 613,
	385, 386, 387, 388, 389, 390, 391, 0, 0, 392,
	394, 395, 0, 0, 0, 751, 410, 411, 412, 413,
	414, 415, 416, 418, 0, 420, 421, 422, 0, 423,
	424, 425, 426, 0, 427, 428, 429, 430, 431, 433,
	436, 437, 438, 439, 0, 442, 443, 444, 445, 446,
	447, 448, 450, 451, 452, 454, 455, 456, 614, 457,
	458, 459, 460, 0, 462, 463, 615, 465, 466, 468,
	469, 470, 471, 472, 473, 624, 0, 475, 0, 476,
	477, 478, 479, 480, 0, 482, 483, 484, 485, 486,
	487, 490, 491, 492, 494, 495, 0, 496, 497, 0,
	499, 500, 754, 502, 503, 504, 505, 506, 0, 625,
	507, 0, 508, 0, 509, 510, 511, 512, 513, 514,
	515, 517, 0, 0, 519, 520, 521, 523, 524, 525,
	526, 529, 530, 531, 532, 533, 0, 534, 536, 538,
	616, 0, 0, 864, 0, 0, 0, 0, 0, 0,
	539, 540, 0, 407, 401, 357, 399, 400, 404, 405,
	408, 233, 0, 250, 736, 0, 299, 336, 0, 0,
	0, 396, 0, 449, 453, 0, 0, 0, 0, 0,
	0, 307, 0, 741, 0, 747, 0, 753, 0, 518,
	0, 743, 744, 749, 238, 0, 541, 612, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 0, 0, 745, 742, 746, 752, 740, 750,
	737, 748, 0, 440, 374, 0, 467, 245, 291, 278,
	320, 362, 474, 0, 0, 352, 522, 287, 376, 0,
	266, 409, 0, 498, 373, 0, 481, 501, 0, 393,
	272, 432, 488, 489, 734, 739, 0, 755, 0, 276,
	277, 398, 258, 406, 0, 0, 461, 419, 417, 0,
	384, 441, 0, 0, 0, 306, 0, 301, 397, 537,
	264, 516, 435, 402, 356, 464, 493, 303, 288, 289,
	332, 434, 322, 274, 527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 323, 0, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 298, 0, 0, 0, 0,
	0, 0, 528, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	234, 0, 235, 236, 237, 239, 240, 241, 733, 242,
	243, 244, 247, 248, 249, 251, 611, 252, 253, 254,
	255, 256, 257, 0, 735, 259, 260, 261, 262, 263,
	265, 267, 268, 269, 270, 271, 273, 275, 0, 0,
	0, 738, 0, 0, 0, 279, 280, 281, 282, 283,
	284, 0, 285, 286, 290, 292, 293, 294, 295, 296,
	297, 300, 0, 302, 304, 0, 305, 308, 0, 309,
	310, 311, 312, 313, 314, 315, 316, 0, 317, 0,
	318, 319, 321, 0, 324, 325, 326, 327, 328, 0,
	329, 0, 0, 330, 331, 333, 334, 335, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	0, 349, 350, 351, 353, 0, 354, 355, 358, 359,
	360, 361, 0, 363, 0, 0, 364, 365, 366, 0,
	0, 367, 368, 369, 370, 371, 372, 375, 0, 377,
	378, 379, 380, 381, 382, 383, 613, 385, 386, 387,
	388, 389, 390, 391, 0, 0, 392, 394, 395, 0,
	0, 0, 751, 410, 411, 412, 413, 414, 415, 416,
	418, 0, 420, 421, 422, 0, 423, 424, 425, 426,
	0, 427, 428, 429, 430, 431, 433, 436, 437, 438,
	439, 0, 442, 443, 444, 445, 446, 447, 448, 450,
	451, 452, 454, 455, 456, 614, 457, 458, 459, 460,
	0, 462, 463, 615, 465, 466, 468, 469, 470, 471,
	472, 473, 624, 0, 475, 0, 476, 477, 478, 479,
	480, 0, 482, 483, 484, 485, 486, 487, 490, 491,
	492, 494, 495, 0, 496, 497, 0, 499, 500, 754,
	502, 503, 504, 505, 506, 0, 625, 507, 0, 508,
	0, 509, 510, 511, 512, 513, 514, 515, 517, 0,
	0, 519, 520, 521, 523, 524, 525, 526, 529, 530,
	531, 532, 533, 0, 534, 536, 538, 616, 0, 0,
	1127, 1157, 0, 0, 0, 1128, 0, 539, 540, 1137,
	407, 401, 357, 399, 400, 404, 405, 408, 0, 0,
	1127, 1157, 0, 0, 0, 1128, 0, 0, 0, 1137,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1159, 0,
	0, 1130, 0, 0, 0, 0, 0, 0, 0, 0,
	158, 0, 0, 0, 0, 144, 0, 0, 1159, 156,
	0, 1130, 0, 0, 0, 0, 0, 0, 0, 0,
	1136, 0, 0, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1136, 170, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1158, 0, 0, 1126, 0, 0, 0, 0, 0,
	0, 1131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1158, 0, 0, 0, 0, 0, 150, 0, 0,
	0, 1131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1133, 0, 0, 0,
	0, 0, 1132, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 152, 0, 1133, 0, 0, 0,
	0, 0, 1132, 0, 0, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 1160, 0, 0, 168, 1134, 0, 0,
	0, 0, 0, 0, 175, 0, 0, 0, 0, 0,
	0, 0, 149, 1160, 155, 0, 0, 1134, 0, 0,
	0, 0, 0, 1161, 0, 0, 1162, 0, 0, 0,
	1163, 0, 0, 0, 0, 145, 0, 0, 0, 0,
	0, 0, 1156, 1161, 0, 0, 1162, 0, 0, 0,
	1163, 0, 1164, 1138, 0, 0, 0, 0, 0, 0,
	0, 0, 1156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1164, 1138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2841, 0, 1140, 1139,
	1167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 159, 0, 0, 1153, 1165, 1140, 1139,
	1167, 0, 176, 160, 0, 161, 0, 0, 0, 0,
	0, 0, 0, 0, 1166, 0, 0, 1165, 0, 0,
	0, 0, 0, 0, 169, 0, 0, 162, 0, 0,
	166, 0, 163, 0, 1166, 0, 0, 146, 0, 0,
	164, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1168, 0, 0, 0, 1129, 172, 0, 0, 0,
	0, 165, 0, 0, 0, 0, 0, 171, 0, 0,
	0, 1168, 173, 0, 0, 1129, 0, 0, 167, 0,
	0, 0, 174, 0, 0, 1143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 0,
	0, 0, 0, 0, 0, 1143,
}

var yyPact = [...]int32{
	10360, -1000, 188, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	985, 985, -1000, -1000, 2608, 860, 12937, 84268, 8969, 2712,
	77879, 62224, 985, 1164, 1077, 1060, 63234, 77374, 1162, -1000,
	872, 782, 708, 3205, 56164, 183, 76869, 63234, 631, 10360,
	3277, -1000, -1000, 1906, 2876, 56164, 2993, 2875, 708, 63234,
	-1000, 1392, 1811, 1498, 3208, 76364, 63234, 39502, 63234, 2699,
	75859, 75354, 2257, 74849, 47091, 2709, 1137, 63234, 63234, 1649,
	74344, 63234, 63234, 762, 2087, 44565, 44565, -1000, -1000, 1216,
	1208, -1000, -1000, -1000, 55659, 61719, 73839, 73334, 1025, 2251,
	50121, 63234, 63234, 63234, 63234, 50121, 44565, 1730, 2012, 72829,
	50121, 63234, 50121, 63234, 63234, 63234, 63234, 63234, 1133, 44060,
	43555, 63234, 72324, 2698, 63234, 63234, -1000, 71819, 71314, 70809,
	83272, 82785, 3394, 46586, 46081, 45576, -1000, -1000, -1000, 1019,
	2247, -1000, -1000, -1000, 2697, 1631, 1132, -1000, 1728, -1000,
	-1000, -1000, -1000, -1000, -1000, 1001, -1000, 64244, 61214, 1726,
	-1000, -1000, 759, 3106, 3499, 3499, 3227, 48606, 911, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3105, 1741, 2140, 234,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3277, 1906, 3277,
	3499, 3005, 3499, -1000, -1000, -1000, -1000, 63234, -1000, 3499,
	-1000, 2244, 2918, 872, -1000, -1000, 451, 444, 782, 19483,
	19483, -1000, 2872, -1000, 200, -1000, 209, 49616, 757, 182,
	63234, -1000, 599, -1000, 182, 24111, -1000, -1000, 1744, -1000,
	342, -1000, 1697, 1375, -1000, 2049, 63234, 2651, 70304, 56164,
	56164, 442, -1000, 456, 69799, 63234, 1000, 69294, 3393, 50121,
	50121, 63234, 1118, 50121, 2416, 1513, -1000, 1492, 2128, -1000,
	3269, 3407, 229, 624, 63234, 63234, -1000, 231, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 961, 1528, 821, 3268, 1290, 3266, 2333, 68789,
	1108, 3263, 2485, 1290, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 999, 63234, 1561, 2869,
	63234, 599, 3261, -1000, 2473, 2093, 82298, 63234, 1290, 1290,
	-1000, -1000, -1000, -1000, 6660, 3360, 3174, 7790, 3359, 3172,
	84248, 3354, 12436, 3353, 60709, 60204, 2328, 1497, 751, -1000,
	209, -1000, -1000, -1000, 1495, 1494, 1493, 1505, 1491, 751,
	1490, 2334, 63234, 63234, 63234, 2868, 3349, 1488, 1806, 1487,
	1486, 986, 2238, 2866, 2865, 63234, 1481, 1275, 3170, 1478,
	2412, 1275, 3170, 1724, 1738, 3343, 1512, 1820, 2330, 3342,
	351, -1000, 3341, 386, -1000, 2863, 3336, 368, 3334, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 216, -1000, -1000, -1000,
	-1000, -1000, 747, 2192, 746, 746, 746, -1000, -1000, -1000,
	-1000, -1000, 280, 277, -1000, -1000, 2183, 743, 2183, 2183,
	-1000, 2208, 2183, 368, 3333, 68284, 2472, 151, 3325, -1000,
	151, 3324, 151, 3323, -1000, 2321, -1000, 1415, -1000, -1000,
	-1000, 3393, -1000, 2137, -1000, 3441, 47596, 342, 3499, 2475,
	33352, 32838, 63234, 566, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2060, -1000, 1696, -1000, -1000, -1000, -1000,
	-1000, -1000, 67779, -1000, -1000, -1000, 2201, 2408, 2411, 1467,
	2920, 2148, -1000, 23597, 1934, 28223, 2470, 24111, -1000, 2244,
	-1000, -1000, 2874, 158, -1000, 14819, -1000, -1000, 24111, 24111,
	24111, 24111, 24111, 1573, 3238, -1000, -1000, -1000, -1000, 18454,
	-1000, -1000, 209, 632, 436, -1000, -1000, 739, -1000, 728,
	718, 209, -1000, -1000, -1000, -1000, -1000, -1000, 24111, 958,
	1917, -1000, -1000, 717, 716, 710, 2410, -1000, 706, 705,
	697, 689, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 688,
	687, 686, 685, 678, 674, 673, 666, 665, 662, 661,
	658, 657, 656, 655, 651, 649, 647, 646, 645, 406,
	643, -1000, 209, -1000, 14300, 24111, -1000, 63234, 24111, 63234,
	182, 3449, 63234, 142, 12630, -1000, 2110, 1906, -1000, 1332,
	-1000, -1000, -1000, 720, 3448, 48101, -1000, 63234, 2761, 2760,
	3084, 2975, 63234, 667, 3259, 456, 63234, 3753, 3255, 67274,
	-1000, 640, 640, 1899, 63234, 637, 82298, 1727, 1373, -1000,
	44565, 3390, 3321, 82298, -1000, 219, 15866, -1000, 15866, 3195,
	2759, 37915, -1000, 498, 63234, 63234, 63234, 63234, -1000, 63234,
	3319, -1000, -1000, -1000, 3317, 63234, 592, 3254, 1033, 3499,
	3316, 42545, 3250, -1000, 66769, 2861, 1658, 44565, 63234, 1124,
	2859, 3315, -1000, 53639, 624, 3499, 3447, 2409, -1000, -1000,
	160, -1000, 1283, -1000, 1550, 1544, 51636, 1250, 1220, 2500,
	572, 2856, 1398, 1200, 63234, 1943, 63234, 2469, 3082, 500,
	1841, 1376, -1000, 635, 56164, 1238, 160, -1000, 3081, 1541,
	63234, 1235, 160, 3079, 3753, -1000, 1951, 82298, 733, -1000,
	2915, -1000, 733, 733, 2914, 1622, 1290, 1290, -1000, 63234,
	160, 1302, 63234, 10885, 3314, 3169, 10380, 3310, 63234, 3078,
	-1000, 425, 209, 3077, 3074, 3073, 2545, -1000, 2579, 3196,
	1323, 2497, 3072, -1000, 3071, 2550, -1000, -1000, 1465, 2757,
	2747, 63234, 63234, 3069, 3068, 43050, 54144, 54144, 3067, 3063,
	3058, 891, -1000, 3166, 3057, 571, 3499, 1515, 1514, 1511,
	-1000, -1000, 624, 63234, 63234, 1585, 3053, -1000, 1729, 2055,
	1729, 3052, 42545, -1000, 1729, 1729, 3050, 500, 500, 3049,
	1261, 63234, 63234, 63234, 63234, 63234, 2271, 2263, 2261, -1000,
	12867, 63234, 63234, -1000, -1000, -1000, 63234, 63234, -1000, 63234,
	63234, 82298, -1000, 82298, -1000, 226, 24111, -1000, 3468, -1000,
	-1000, -1000, -1000, 3468, -1000, 3108, 3091, 3468, -1000, 634,
	-1000, 3468, -1000, -1000, 2183, 2183, -1000, -1000, 82298, 351,
	3309, 42545, 3307, 44565, 44565, 44565, 44565, -1000, -1000, -1000,
	-1000, -1000, 63234, 3441, 1147, -1000, -1000, -1000, -1000, 181,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3481,
	3472, -1000, -1000, 181, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	63234, -1000, -1000, -1000, -1000, -1000, -1000, 1341, 2930, -1000,
	920, -1000, 1285, -1000, -1000, 178, 12630, -1000, 29765, -1000,
	-1000, -1000, 1618, 12630, -1000, 27709, 27709, 1370, 63234, 152,
	-1000, 5172, 2201, 2408, 2990, 59699, 19483, 82298, 63234, 3090,
	24111, 24111, 24111, 24111, 24111, 24111, 24111, 24111, 24111, 24111,
	24111, 24111, 24111, 24111, 24111, 24111, 3132, 24111, 3043, 5154,
	-1000, -1000, 3048, 617, 1372, 15866, -1000, -1000, 627, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 991, 991, 443, 6051, 6051, 553, 632,
	3192, 209, 12585, 172, 222, 631, 209, -1000, -1000, -1000,
	19998, 24111, 37915, 23082, 209, 3116, 12630, 1917, 2886, 877,
	630, 17424, 24111, 24111, 629, 3468, 3468, 3468, 3468, 24111,
	1616, 24111, 24111, 29251, 24111, 24111, 18969, 24111, 24111, 24111,
	24111, 24111, 1620, 24111, 2060, 30793, 1617, 24111, 2060, 2990,
	24111, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12533, -99,
	420, 136, -1000, 2765, 125, 24111, -1000, 63234, 3090, 24111,
	24111, 24111, 24111, 3043, 5154, 3048, 617, 627, -1000, -1000,
	-1000, 1327, 1485, -1000, 2852, -1000, 2580, 41535, 2707, 63234,
	481, -1000, 791, 63234, -1000, -1000, 2955, 34885, 34885, 2508,
	2508, -1000, -1000, 124, -1000, 52141, 63234, 2468, 3306, 3214,
	626, -1000, 3753, 1877, 3305, 2849, 3247, -1000, 9389, 53151,
	7657, 1510, -1000, -1000, 2467, 2156, 624, -1000, 13520, 1722,
	63234, 63234, 992, -1000, -1000, -1000, -1000, -1000, -1000, 1589,
	63234, -1000, 15866, -1000, 123, -1000, 789, 2406, 63234, -1000,
	63234, 625, 624, 624, 624, 624, 624, -1000, 63234, 1445,
	63234, 1166, 52141, 2459, 3301, 1900, -1000, -1000, 63234, 1333,
	-1000, -1000, 3300, 2483, 3439, 3244, 456, 15866, 3504, -1000,
	3438, 2033, 36905, 63234, 1178, 485, -1000, 56164, 3167, 217,
	456, -1000, 200, -1000, 1503, 82298, 3499, 2483, 2483, 5922,
	63234, 63234, 63234, -1000, 63234, 63234, -1000, 3242, 66264, -1000,
	82298, 63234, -1000, 622, 2772, 919, 918, 2732, 59194, 63234,
	65759, 65254, 63234, 1189, -1000, -1000, 1629, 63234, -1000, 15866,
	63234, 55154, 1202, 1177, 63234, 1691, 54649, 63234, 1682, -1000,
	63234, 1371, -1000, -1000, 44565, -1000, 2637, 1672, 16377, 5322,
	63234, 63234, 63234, 10156, 63234, 63234, -1000, -1000, -1000, -1000,
	-1000, -1000, 733, -1000, -1000, -1000, 63234, 63234, 733, 733,
	84228, 63234, 63234, 9864, 160, 1300, 63234, 1234, 160, 1299,
	56164, 1211, 63234, -1000, 63234, 63234, 63234, 63234, 63234, -1000,
	3156, 64749, 24111, 3155, -1000, 63234, -1000, 621, 3154, 63234,
	63234, 44565, 44565, 3041, 63234, 63234, 1771, 2848, 63234, 63234,
	-1000, 171, 171, 171, 63234, 63234, 63234, -1000, -1000, -1000,
	63234, -1000, 63234, -1000, 3220, 63234, 63234, -1000, 1457, 1456,
	3040, -1000, 1600, -1000, 44565, 1973, -1000, 64244, -1000, 63234,
	-1000, 44565, 1328, 1973, -1000, -1000, 63234, -1000, -1000, 63234,
	729, 2649, 1450, 1448, 1436, 1427, 63234, 63234, 3499, 3381,
	3499, 3039, 63234, 63234, 50121, 618, 82298, 50121, 38973, 50121,
	50121, 2402, 82298, -1000, -1000, -1000, -1000, -1000, -1000, 351,
	-1000, 386, -1000, 3239, 2843, -1000, 368, -1000, 121, 419,
	418, 3104, 3096, 414, 24111, 394, -1000, -1000, 368, -1000,
	63234, 1325, 2399, -1000, 151, 151, 151, 3222, 1906, 33866,
	-1000, -1000, -1000, -1000, -1000, -1000, 2597, -1000, 24111, 1618,
	2971, -1000, 3488, 3488, 611, -1000, 18454, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1654, 170, -1000, 24111,
	434, 813, -1000, -1000, -1000, -1000, 2949, 34885, -1000, 2924,
	2924, 1205, 1185, 2924, 63234, -1000, -1000, -1000, -1000, 3092,
	-1000, 150, 150, 194, 194, 194, -1000, 403, 403, 403,
	403, 403, 403, 443, 6051, 10529, 1737, 24111, 24111, 3038,
	3037, 617, 1548, 24111, -1000, 2770, -1000, -1000, -1000, 2989,
	-1000, -1000, 1597, 2357, -1000, -1000, -1000, -1000, 2262, 29251,
	29251, -1000, -1000, -1000, 18454, 616, -1000, -1000, -1000, -1000,
	37915, -1000, 615, 24111, -1000, -1000, 3168, -1000, -1000, 24111,
	122, 70, -1000, -1000, 118, 389, 117, -1000, 2213, -1000,
	24111, 877, 612, -1000, 49111, 2958, -1000, 380, 138, 24111,
	24111, 24111, -1000, 12630, 3466, -1000, 2326, 2250, 1303, 874,
	12488, 24111, 378, 364, 361, 357, 12365, 356, 2988, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 379, 355, 350,
	12280, 168, 348, 910, -1000, 29251, 29251, 611, 347, 346,
	5393, 12234, 22568, 22568, 22568, 345, 11959, 24111, 131, 5127,
	113, 105, 103, 101, 15866, 100, -1000, 11912, 24111, 2392,
	15866, 5022, 24111, 2949, 97, -1000, 24111, -1000, -1000, 610,
	-1000, 2692, -1000, 12630, -1000, -1000, -1000, 2581, 2563, 2249,
	-1000, -1000, 93, -1000, -1000, -1000, -1000, 2955, 48101, 24111,
	90, -1000, 209, 2581, 27195, 98, 2934, 57174, 57174, 37410,
	-1000, 34380, 57174, 57174, 57174, 811, 2986, 609, 608, 209,
	-1000, -1000, 2923, 2611, -1000, 2611, 63234, -1000, 343, 167,
	-1000, -1000, -1000, -1000, 63234, 509, 63234, 63234, 3436, 500,
	63234, 63234, 56164, 3299, 79376, 1576, 7657, -1000, 3499, 48606,
	2390, -1000, -1000, 2840, -1000, -1000, -1000, -1000, 1348, 1838,
	-1000, 1702, 733, 733, 63234, -1000, 63234, 63739, -1000, 89,
	-1000, -1000, 1187, 81324, 78889, -1000, 1581, -1000, -1000, -1000,
	216, -1000, 83759, 1576, 3153, 2853, -1000, -1000, -1000, 2455,
	-1000, -1000, 1510, -1000, 341, -128, 2913, 86, -1000, -1000,
	-1000, 773, 63234, 1852, 456, 63234, 3390, 1435, 1479, 2126,
	-1000, 3249, -1000, -1000, 15866, 16888, 1119, -1000, 340, 166,
	-1000, 82298, 3499, -1000, -1000, -1000, -1000, -1000, 788, -1000,
	63234, 48606, 48606, -1000, 1290, 879, 1166, -1000, 63234, 1247,
	63234, 339, 63234, 63234, 2073, 1108, 63234, 2387, -1000, -1000,
	3468, 44565, 44565, 1720, 3164, 1535, 1533, -1000, -1000, 2925,
	1061, 44565, 708, 3294, 2722, 2180, 3214, 2386, 3508, 1849,
	-1000, -1000, 422, -1000, 209, -1000, 24111, 599, 3220, -1000,
	54144, 456, 1351, 217, 2954, 2954, 63234, 337, 3034, -1000,
	-1000, 3032, 3031, 2458, 2177, 3292, -1000, 3241, 1246, 1219,
	24111, 594, -1000, 1809, 752, 593, 591, 63234, 1468, 2639,
	-1000, 3289, 3239, 3287, 3239, -1000, -1000, -1000, 58689, -1000,
	85, -1000, 210, -1000, -1000, -1000, -1000, 63234, 63234, 63234,
	63234, -1000, 1340, -1000, -1000, -1000, -1000, 1338, -1000, 1664,
	-1000, -1000, -1000, -1000, -1000, 1798, 1336, 78, -1000, -1000,
	15866, 15866, 15866, 3499, -1000, 160, -1000, 1282, 1845, -1000,
	-1000, 160, 3030, 1836, -1000, -1000, -1000, -1000, -1000, -1000,
	160, 3029, 3753, -1000, 3028, 160, 1298, 63234, 63234, 8954,
	63234, 63234, 63234, 7802, 3027, 891, 1166, -1000, -1000, -1000,
	-1000, -1000, 3026, -1000, 3239, 3284, 12630, -1000, 1337, 24111,
	-1000, -1000, -1000, -1000, 151, 63234, 1425, 1808, 3023, 2733,
	44565, 63234, -1000, -1000, -1000, -1000, -1000, -1000, 474, -1000,
	474, 474, 3022, 3021, 63234, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 63234, -1000, -1000, -1000, -1000, -1000, 3468, 3468,
	1254, 3020, 3019, 3018, 3017, -1000, 3016, 3015, 3499, 3240,
	-1000, -1000, 48606, -1000, -1000, -1000, 82298, -1000, -1000, -1000,
	63234, 63234, 590, -1000, -1000, 82298, -1000, -1000, -1000, -1000,
	63234, -1000, -1000, -1000, 806, -1000, -1000, 806, 75, -1000,
	-1000, 351, 63234, 42545, -1000, 1698, 342, -1000, -1000, -1000,
	2959, -1000, 1170, -1000, -1000, 22054, 165, -1000, 63234, -1000,
	813, -1000, 573, -1000, 2661, 2884, 24111, 98, 63234, -1000,
	63234, 2924, 2924, 2924, 2924, 63234, -1000, 24111, 24111, 1476,
	1413, 24111, 29251, 29251, -1000, 24111, 770, -1000, -1000, -1000,
	-1000, 2982, -1000, -1000, 1596, 2357, 24111, -1000, -1000, 1074,
	1068, -1000, -1000, -1000, -1000, 1396, 1236, 73, -1000, 18454,
	335, 21540, 164, -1000, 209, 11835, -1000, -1000, 539, -1000,
	-1000, -1000, 1993, -1000, 24111, 11674, -1000, 872, -1000, -1000,
	78384, 24111, -1000, 334, 21026, -1000, 872, -10, -10, 24111,
	24111, 2357, 2839, 2837, 24111, 24111, 2318, 2910, -1000, -1000,
	2214, 11620, -1000, -1000, -1000, -1000, 82298, -1000, 24111, -1000,
	1634, -1000, -1000, 24111, 24111, -1000, 82298, 29251, 29251, 29251,
	29251, 29251, 29251, 29251, 29251, 29251, 29251, 29251, 29251, 29251,
	397, 397, -1000, -1000, 20512, 24111, 24111, 82298, 332, 330,
	328, -1000, 24111, 131, 24111, -1000, -1000, -1000, -1000, 72,
	-1000, 24111, 15866, 5344, 327, 31813, 71, 1037, 11556, 2884,
	-1000, 482, 12630, 708, -1000, -1000, 19483, 784, 708, 779,
	63234, 209, 2581, -1000, 12630, 785, 63234, -1000, 12630, 2454,
	34885, 2784, 2783, 34885, 2758, 2766, 2766, 2766, -1000, -1000,
	-1000, 63234, 582, -1000, 57174, 57174, 57174, 57174, 45070, 321,
	2934, -1000, -1000, -1000, -1000, 2438, 580, 31303, 24111, 209,
	24111, 1290, -1000, -1000, -1000, 2741, -1000, 1778, 52141, -1000,
	1538, 52646, 509, 641, 708, -1000, 67, 3753, 2732, 63234,
	7657, 579, 2836, -1000, 216, -1000, -1000, 2144, 24111, -1000,
	-1000, 163, -1000, 162, 1107, 3152, 1816, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2120, 1304, -1000, 78889, 24111,
	24111, 81324, -1000, 81324, -1000, -1000, 196, 229, -1000, 63234,
	1510, 63234, 2841, -1000, -1000, 2908, 78889, 78889, -1000, 3491,
	16888, 577, 63234, 3214, 576, 44565, 3390, -1000, 63234, -1000,
	-1000, 63234, 2252, -1000, 3238, 917, 575, 29251, 63234, 2288,
	-1000, 2001, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	573, 3481, 3472, 82298, -1000, 63234, 3206, 319, 161, -1000,
	-1000, 63234, -1000, -1000, -1000, -1000, -1000, 564, -1000, -1000,
	229, -1000, -1000, -1000, 1778, 509, 487, 2320, 1033, 879,
	42545, -1000, 151, 151, 44565, 44565, -1000, -1000, 3499, 3499,
	679, 3499, 151, 3222, 63234, 3214, 63234, 1621, 63234, -1000,
	3013, 2665, -1000, 63234, 34885, 36905, 11504, 2831, -1000, -1000,
	2954, 58184, 2954, -1000, 563, -1000, 474, 2354, 3499, 63234,
	63234, -1000, 2705, -1000, -1000, -1000, 63234, 3283, 2096, -1000,
	57679, -1000, 2732, 11295, 63234, 1942, 63234, 63234, -1000, 63234,
	35390, -1000, -1000, 2145, 1388, 500, 1862, 1693, 1105, -1000,
	-1000, 1290, 1253, 1942, 63234, -1000, 63234, -1000, -1000, -1000,
	-1000, -1000, 15866, 16888, 15866, -1000, -1000, -1000, -1000, -1000,
	-1000, 1331, 63234, -1000, -1000, 16377, -1000, -1000, -1000, -1000,
	-1000, 63234, 63234, 63234, 1224, 2907, 63234, 1222, 2906, 63234,
	63234, 63234, 63234, -1000, 3012, 160, 1292, 1825, -1000, 3010,
	160, 1289, 63234, -1000, 63234, -1000, 63234, -1000, 11222, 1942,
	-1000, 3009, 3006, 1641, 2103, 63234, 3230, 562, 151, 1417,
	-1000, -1000, -1000, 63234, 63234, -1000, 891, 729, 63234, 63234,
	63234, 63234, 63234, 3499, 2132, 3281, -1000, 3435, 2740, 2738,
	-1000, 81811, 1716, 3239, -1000, -1000, -1000, -1000, -1000, 1324,
	-1000, 2071, -1000, 1169, -1000, 61, -1000, 24111, -1000, -1000,
	37915, -1000, -1000, 2882, 2904, 12630, -1000, -1000, 63234, 63234,
	63234, 63234, -1000, 363, 1459, 24111, 24111, 581, 1114, 696,
	1459, 24111, 24111, -1000, -1000, 1529, 1739, 1717, 24111, 24111,
	-1000, 10971, -1000, 57, -1000, 24111, -1000, -1000, -1000, 12630,
	24111, 309, 1539, -1000, 10851, -1000, 24111, -1000, 307, 306,
	305, 12630, 12630, 2575, 3151, 3150, -1000, -1000, 2575, 2828,
	2827, 24111, 2254, -1000, 301, 12630, 299, 10461, -1000, -101,
	-101, 193, 193, 193, -1000, 397, 397, 397, 397, 397,
	397, 1181, 9925, 9628, 9697, 298, -1000, -1000, -1000, 131,
	9073, -1000, 26681, -1000, -1000, 297, 970, 968, -1000, 2896,
	30793, 2259, -1000, 24111, 159, 26167, 82298, 2882, -1000, 292,
	158, 2515, 35390, 2481, -1000, -1000, 2580, -1000, -1000, 24111,
	-1000, 63234, 2934, 34885, 34885, 2690, 2782, 34885, -1000, -1000,
	-1000, -1000, 561, 63234, -1000, -1000, -1000, -1000, 57174, -1000,
	51131, 2392, 560, 157, 8178, 535, 1290, 2269, -1000, 1538,
	558, -1000, 1860, 2722, -1000, 2901, 55, -1000, -1000, -1000,
	3233, 2458, 52141, 63234, 2453, 3215, 3214, -1000, 549, 2823,
	1576, 83759, 3149, -1000, 12630, 3499, 2377, 82298, 1762, -1000,
	-1000, -1000, 12630, 12630, -1000, -1000, 1094, 197, 1464, -1000,
	42, 63234, 78889, -1000, 50, -1000, 773, -1000, 2957, 1766,
	3434, 63234, -1000, 1347, -1000, -1000, -1000, 3220, 3220, 24111,
	1181, 456, 3425, -1000, 3188, -1000, -1000, 2735, -1000, -1000,
	63234, -1000, 3499, -1000, 1445, 15866, 219, 1322, 2458, 52141,
	2452, 63234, 1864, -1000, 1319, 151, 151, -1000, -1000, -1000,
	-1000, -1000, 3424, 1180, -1000, 50121, -1000, -1000, 2190, -1000,
	3163, 2733, 44565, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	98, -1000, -1000, 36905, -1000, -1000, -1000, -1000, 24111, -1000,
	1145, 1896, 2976, -1000, -1000, 3011, -1000, 63234, 879, -1000,
	56669, -1000, -1000, -1000, 49, -1000, 1284, -1000, 1989, 1785,
	-1000, 47, 1942, 45, 44, -1000, 3232, 740, 3202, 24111,
	3148, 3378, 3377, -1000, -1000, 2288, 3145, 3423, 729, -1000,
	-1000, -1000, -1000, 2288, -1000, 1715, 82298, 733, 729, 3239,
	3239, -1000, -1000, 768, -1000, -1000, -1000, -1000, 3004, 3002,
	63234, 44565, -1000, 63234, 44565, -1000, -1000, -1000, 3001, 63234,
	63234, 63234, 1221, 2898, 63234, 63234, 63234, -1000, -1000, 3239,
	-1000, 63234, 63234, 20, -1000, 3468, 3468, 82298, 156, -1000,
	3468, 3468, -1000, -1000, 864, 24111, 3000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3239, -1000, 3499, 3499, -1000,
	82298, 63234, 63234, 39, 153, 63234, -1000, 63234, -1000, -1000,
	-1000, 9004, 289, 966, 24111, 3203, -1000, -1000, -1000, -1000,
	1459, 1459, 24111, 24111, 24111, 1459, 1529, -1000, -1000, 1459,
	1459, -1000, -1000, 8959, 12630, -1000, 872, 2897, -1000, 872,
	-1000, -1000, -1000, 287, 82298, -1000, -1000, 286, 3144, 3139,
	152, 63234, -1000, -1000, 24111, 24111, 24111, 24111, -1000, -1000,
	34, 33, 538, -1000, -1000, -1000, -1000, 2259, 2896, -1000,
	-1000, 8790, 285, 1265, 12630, 2248, 1653, 966, 2694, 2553,
	18, -1000, 63234, 2245, 12630, -1000, -1000, -1000, 2690, -1000,
	536, 24111, 34885, -1000, 63234, 17, -1000, 11, -1000, 3415,
	2448, 28737, 24111, 2621, -1000, 3275, 3275, 2638, -1000, 2587,
	15866, 535, 3499, 2722, 63234, 2400, 2400, 2340, 63234, -1000,
	52646, 3249, 885, 1538, 281, 509, 63234, -1000, 1281, 3411,
	35390, 56164, -1000, 7, -1000, 81324, -1000, 1748, 1474, -1000,
	1093, -1000, -1000, -1000, 1087, 2376, 1084, 2968, 6, -1000,
	270, 1276, 1272, 1153, 63234, 708, 3, 3390, -1000, 3136,
	2723, 2723, 8382, 1644, 503, -1000, 63234, -1000, -1000, 1,
	-1000, 63234, 1315, 268, 63234, 879, 2070, 63234, 708, -1000,
	63234, 530, 1621, 63234, 528, 3230, 151, 320, 8335, 50121,
	3409, 3409, 63234, 527, 525, 524, -1000, -1000, -1000, -1000,
	1942, 1824, -1000, -1000, -1000, -1000, -1000, 1824, 1473, 1824,
	35390, 38444, -1000, 63234, 63234, -1000, 7746, -1000, 3280, 3279,
	-1000, -1000, 521, -1000, 3410, 3206, -1000, -1000, -1000, -1000,
	16888, 63234, 63234, 1587, 329, 1587, 322, 63234, -1000, -1000,
	2999, 63234, 44565, -1000, -1000, 2998, -1000, 1942, -1000, -1000,
	1641, 37915, 36400, -1000, 2103, 519, 518, 513, 7503, 63234,
	-1000, -1000, -1000, 265, -1000, -1000, -1000, 80837, 82298, -1000,
	-1000, -1000, -1000, -1000, 63234, 12630, 25139, -1000, -1000, 1459,
	1459, 1459, -1000, 1813, 24111, 261, -1000, 820, -1000, -1000,
	-1000, -1000, 7424, 12630, 12630, 12630, -1000, 24111, -1000, 24111,
	-1000, -1000, -1000, 1080, -1000, 260, -1000, 1807, -1000, 2640,
	2691, 2617, -1000, 2949, 35390, -1000, 708, -1000, 63234, 12630,
	-1000, 0, -1000, 811, 51131, -1000, 512, 63234, -4, -1000,
	537, 29251, 7352, -1000, -1000, 2525, 24111, 2522, -1000, 2538,
	-1000, -1000, -1000, 3407, 3407, -1000, -1000, 3407, 3407, 2391,
	3499, -5, -1000, 32323, 2949, -1000, 2340, -7, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2813, 500, 913, 510, -1000, -1000, 2722, 1778, 1538, 509,
	903, 862, 861, 708, -15, 2732, 83759, 7657, -1000, -1000,
	-1000, 185, -1000, -1000, 82298, -1000, 3115, 2024, 1084, -1000,
	1700, -1000, -1000, -1000, 63234, -1000, -1000, 3226, 3224, -1000,
	-1000, 63234, 1055, -1000, 3215, 3214, -1000, 1795, -1000, 1601,
	2819, 1648, 476, 24111, 1924, -1000, 15866, 879, 63234, 1778,
	509, -1000, 2317, 879, 3222, -1000, 259, 50121, -1000, 3502,
	-1000, 34885, -1000, 3409, -1000, 1961, -1000, -1000, 50626, 24111,
	24111, 3249, 3220, 508, 3220, 63234, 3220, -1000, -1000, 501,
	2624, 500, -1000, 3202, -1000, -1000, 24111, 1831, 2729, -1000,
	-1000, -1000, -1000, -1000, 1194, -1000, 1193, -1000, 63234, 1587,
	315, 63234, -1000, 660, 2362, -1000, 82298, -1000, 82298, 82298,
	24111, -1000, -1000, -1000, 250, 248, 244, 149, -1000, 3408,
	132, -1000, 12630, -1000, -1000, -1000, -1000, 17939, 496, 493,
	353, 242, 25653, 25653, 25653, 131, -1000, -1000, 24111, -17,
	-23, -1000, 2243, -1000, -1000, -1000, 63234, 2669, 2668, 48101,
	-1000, -1000, -1000, -25, -1000, -1000, -1000, 63234, -27, -1000,
	80350, 28737, 120, 15866, 1181, 2418, 63234, 2547, 12630, 2561,
	2895, 3499, 3499, 3499, 3499, 41030, 3062, 40525, -1000, -1000,
	15866, -1000, -1000, -1000, -1000, -1000, 42040, -1000, 2813, -1000,
	1180, 2099, -1000, -1000, 35895, 3249, 2340, 1538, 2722, 2458,
	-1000, 896, 895, 3215, 1818, 492, -1000, 1576, -1000, -1000,
	1964, 486, 1287, -1000, -1000, 3407, -1000, -1000, 2081, -1000,
	1894, 1881, -1000, -1000, -1000, 3405, 1184, -1000, 1784, -1000,
	2822, 2820, 2625, -1000, -1000, -1000, -1000, 3753, 7097, 3403,
	63234, -1000, -1000, 879, 1314, 2458, 63234, -1000, -1000, -1000,
	477, -28, -1000, 98, -1000, -1000, -1000, -29, -1000, 3468,
	-30, -35, 2723, 63234, 2723, 456, 2723, 37915, 813, 2624,
	-1000, 6518, 476, -1000, 24111, 63234, 63234, -1000, -1000, 1183,
	-1000, 1475, 1293, 1475, -40, -1000, -41, -47, 6465, -1000,
	-1000, -1000, 63234, 475, 25139, -1000, 24111, 24111, 471, -1000,
	1981, -1000, 30279, 1642, 1369, 5231, 1981, 1981, 12630, -1000,
	-1000, -1000, 314, 2891, 2890, 313, 3399, -48, -1000, 63234,
	2569, 2436, -1000, 30793, -1000, 2447, 24111, -1000, -1000, -1000,
	2513, 2607, -1000, -1000, 2511, 748, 2540, -1000, -1000, -1000,
	-1000, 42, -1000, 40020, 42, -1000, -1000, -54, -1000, -1000,
	1180, -1000, 1878, -58, -1000, 740, 3202, 24111, 2813, 2722,
	2340, 1538, -1000, -1000, -1000, 3238, 469, 35390, -1000, 1621,
	24111, -1000, -1000, -1000, 63234, 2022, 50121, 50121, 708, 63234,
	-1000, -1000, 2589, -1000, 2592, 1997, 1997, 472, 1228, 1641,
	-1000, -1000, 63234, 1311, 879, 241, -1000, 3496, -1000, 50626,
	-1000, -1000, 2997, -1000, -60, -1000, 1644, 2949, 240, -1000,
	813, -1000, -1000, 12630, 1587, 1587, 63234, -1000, -1000, -1000,
	2888, -1000, 50121, 82298, -1000, -1000, -1000, -1000, -1000, -1000,
	-61, -64, 25139, -1000, 1546, 3272, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 63234, 63234, 63234, -1000, -1000, 63234, -1000,
	-1000, 2569, -1000, 29251, 29251, 3025, -1000, 29251, -1000, 2392,
	466, 56, -1000, 3398, -1000, 48101, -1000, -1000, 2580, 63234,
	2702, 462, -1000, -1000, 42, -1000, -1000, 42040, -1000, -1000,
	2427, 2424, -1000, 35895, 63234, 63234, 6343, 1180, 2340, 2813,
	2722, 3214, 35390, -66, 50121, 5782, -1000, -1000, 1367, 23,
	22, 3215, -1000, -1000, 2164, -1000, -1000, 3134, -1000, -1000,
	-1000, 20, 879, 63234, -1000, -1000, -1000, -1000, 459, 1942,
	-1000, 1942, 2819, -1000, -1000, -1000, -1000, -1000, 1587, 63234,
	-1000, -1000, -1000, -1000, -68, 1366, -1000, -1000, 929, 24625,
	2746, 303, 302, -1000, -1000, 1181, 1181, -1000, 1181, 2444,
	62729, 24111, 15866, 5, 2239, -71, -1000, 24111, -1000, -1000,
	-1000, -1000, -1000, -1000, 3202, -1000, 2813, 1180, 2340, 1180,
	-72, -1000, 1818, 458, -1000, 3115, 2961, 2960, -1000, -1000,
	456, 456, -1000, 879, 24111, -1000, 1942, -1000, -1000, -1000,
	-1000, -1000, -1000, 3182, 63234, 63234, 63234, 63234, -82, -1000,
	79863, 2422, -1000, -1000, 2670, 2593, -102, 63234, 1180, -1000,
	2813, 2949, -1000, 35390, 3238, 15355, 1962, 1271, 1255, -1000,
	-1000, -1000, -112, 1942, 3180, -1000, -1000, -1000, -113, 2516,
	62729, 2434, 1305, 3495, -1000, -1000, -1000, 2580, -1000, -1000,
	-1000, 1180, -1000, -1000, 3214, -147, -1000, -1000, -1000, -1000,
	-1000, 1621, 3212, 3211, -1000, 3182, -1000, 238, 2810, 24111,
	-1000, -1000, -1000, -1000, -1000, -1000, 2335, -1000, -1000, 2331,
	2420, 2420, 3490, 2532, 2224, -1000, 1180, -1000, 15355, 50121,
	1867, 1854, 2720, -1000, 2355, 12630, -1000, -1000, 2285, 2314,
	2393, 2331, 2516, -1000, 454, 63234, 2670, 2949, -1000, 435,
	50121, 50121, 63234, -1000, 2516, 2289, 2282, -1000, 2312, -1000,
	2301, 2310, 2306, 2285, -1000, 62729, 2441, -1000, -1000, 15355,
	-1000, -1000, -1000, -1000, 2809, 2801, 2797, -1000, -1000, 2296,
	-1000, 2291, -1000, 2516, -150, 423, -152, 2342, 2278, 2253,
	-1000, -1000, -1000, -1000, 62729, -1000, 2516, -1000, 2276, 2265,
	-153, 2773, -1000, -1000, -1000, 2341, -1000,
}

var yyPgo = [...]int16{
	0, 3922, 3920, 2690, 177, 0, 52, 6497, 3919, 47,
	271, 319, 3918, 105, 444, 7546, 158, 318, 328, 3722,
	4788, 383, 123, 3916, 280, 3916, 3915, 326, 277, 229,
	3914, 213, 3911, 3909, 194, 216, 3905, 3902, 364, 34,
	253, 3901, 340, 356, 357, 359, 3900, 315, 337, 314,
	311, 3899, 7573, 1154, 2900, 15, 3898, 3897, 3896, 3895,
	3894, 3889, 306, 3888, 266, 3887, 3884, 3881, 3880, 301,
	335, 3880, 3877, 303, 3876, 3875, 3874, 103, 3872, 3871,
	3870, 3869, 212, 309, 299, 3867, 372, 298, 753, 197,
	5151, 8604, 3865, 330, 130, 224, 214, 3861, 3860, 3857,
	3855, 3854, 3853, 3850, 3849, 3841, 3840, 264, 232, 242,
	262, 342, 584, 338, 206, 426, 332, 3839, 190, 3838,
	3837, 59, 64, 304, 3835, 3834, 75, 25, 57, 354,
	336, 3829, 3828, 358, 3823, 3819, 7289, 68, 310, 3818,
	101, 3817, 307, 305, 67, 46, 3816, 308, 256, 259,
	45, 260, 211, 58, 210, 313, 3815, 3813, 3812, 3810,
	92, 250, 78, 6120, 371, 370, 3809, 3808, 3807, 3806,
	3797, 184, 182, 3796, 3795, 3794, 3793, 30, 49, 3792,
	3791, 254, 258, 257, 296, 3789, 293, 181, 7, 41,
	187, 186, 3788, 3786, 3784, 3783, 29, 85, 14, 3781,
	3780, 3778, 329, 3778, 3778, 3778, 3778, 3774, 289, 3773,
	3771, 3770, 127, 3769, 3767, 3765, 56, 3765, 60, 71,
	3764, 38, 112, 316, 3760, 341, 35, 270, 2856, 249,
	3759, 360, 334, 333, 83, 240, 13, 226, 205, 285,
	3757, 3756, 3755, 3755, 353, 291, 246, 251, 174, 169,
	3750, 369, 3749, 352, 3747, 3746, 3745, 3743, 297, 33,
	77, 3742, 234, 3741, 96, 3740, 3738, 102, 292, 18,
	53, 3737, 42, 114, 39, 195, 3736, 74, 286, 5,
	19, 11, 3734, 248, 3733, 26, 3733, 324, 3732, 3732,
	3731, 3730, 3729, 215, 3728, 4, 1, 3727, 2, 8,
	6, 16, 107, 3725, 203, 3723, 100, 3721, 245, 204,
	138, 3718, 141, 3717, 63, 48, 120, 3716, 3715, 3714,
	150, 21, 3711, 94, 3709, 202, 273, 3708, 3707, 3706,
	24, 51, 126, 69, 72, 54, 32, 84, 62, 3704,
	3703, 44, 89, 3702, 220, 22, 9, 137, 274, 104,
	3700, 27, 20, 17, 300, 109, 327, 325, 3699, 40,
	272, 344, 3698, 3697, 343, 115, 331, 43, 223, 3696,
	222, 3695, 31, 3694, 99, 61, 196, 66, 65, 3693,
	55, 221, 3691, 142, 288, 3690, 279, 848, 10004, 3683,
	157, 276, 365, 86, 3681, 225, 207, 3680, 28, 317,
	113, 3679, 143, 139, 159, 3678, 135, 3675, 3674, 3673,
	3669, 3668, 3667, 3666, 3665, 3659, 362, 374, 3658, 320,
	312, 376, 347, 348, 230, 361, 3657, 3656, 3655, 3653,
	3652, 3651, 3647, 3646, 3640, 3638, 3637, 3636, 3635, 3632,
	3628, 3627, 3625, 3624, 3623, 3622, 3620, 3618, 3617, 3616,
	3615, 3613, 3610, 3609, 3607, 3600, 3599, 3598, 3597, 3596,
	3592, 3591, 3590, 3586, 3585, 3584, 3583, 3581, 241, 233,
	3580, 3579, 3578, 323, 322, 268, 278, 363, 228, 231,
	149, 3577, 3576, 134, 3575, 3574, 3573, 349, 3572, 368,
	3571, 3569, 3568, 3566, 199, 125, 3565, 80, 192, 346,
	50, 3564, 3563, 227, 275, 111, 108, 3562, 3561, 3558,
	3556, 3555, 218, 3554, 3552, 237, 70, 3548, 267, 238,
	3547, 321, 287, 3546, 3545, 345, 3544, 37, 350, 3543,
	244, 247, 91, 283, 3541, 93, 3539, 3538, 290, 3536,
	3535, 73, 3534, 3533, 236, 281, 3530, 3529, 3528, 3526,
	3525, 3524, 3, 90, 23, 10, 3522, 3521, 36, 3520,
	3518, 261, 3517, 3516, 339, 79, 76, 255, 3515, 3514,
	217, 12, 3513, 3513, 2795,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 18, 18, 352, 352, 387, 387, 387, 25, 25,
	26, 26, 27, 27, 28, 28, 39, 39, 39, 5,
	5, 5, 6, 6, 6, 6, 6, 8, 8, 7,
	13, 13, 14, 14, 388, 388, 24, 24, 16, 16,
	567, 567, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 15, 15, 17, 17, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 55, 55, 55, 55,
	55, 55, 88, 90, 89, 89, 89, 56, 56, 83,
	83, 87, 87, 86, 86, 86, 86, 84, 84, 57,
	57, 57, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 70,
	70, 72, 72, 72, 72, 72, 73, 73, 73, 74,
	12, 12, 12, 12, 12, 12, 12, 12, 75, 75,
	76, 68, 77, 77, 183, 183, 78, 78, 78, 79,
	79, 79, 80, 80, 81, 81, 81, 81, 259, 259,
	527, 527, 115, 115, 115, 115, 115, 115, 115, 69,
	69, 82, 82, 82, 59, 60, 60, 63, 63, 62,
	61, 61, 64, 64, 64, 67, 67, 113, 113, 113,
	65, 65, 66, 146, 146, 146, 139, 139, 139, 139,
	139, 139, 148, 148, 148, 148, 147, 147, 147, 147,
	147, 149, 149, 149, 149, 149, 112, 112, 95, 96,
	96, 96, 96, 96, 91, 91, 91, 93, 94, 108,
	108, 109, 109, 97, 97, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 104, 104, 100, 100,
	92, 92, 92, 92, 92, 92, 101, 102, 105, 106,
	103, 103, 103, 103, 110, 110, 110, 111, 111, 99,
	99, 136, 136, 138, 138, 140, 140, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 137,
	137, 114, 114, 117, 117, 116, 116, 143, 143, 142,
	142, 160, 160, 161, 163, 163, 164, 164, 162, 162,
	162, 162, 162, 162, 162, 162, 129, 129, 130, 130,
	131, 131, 133, 134, 134, 134, 134, 132, 132, 135,
	135, 135, 165, 165, 165, 165, 230, 230, 229, 229,
	232, 232, 232, 232, 233, 233, 234, 234, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 390,
	390, 391, 391, 391, 392, 392, 392, 245, 245, 245,
	245, 245, 245, 246, 246, 246, 246, 247, 247, 248,
	248, 249, 249, 249, 250, 250, 251, 251, 253, 254,
	254, 254, 255, 255, 255, 256, 256, 256, 257, 257,
	236, 236, 186, 186, 186, 207, 239, 239, 238, 238,
	238, 238, 240, 240, 241, 241, 242, 242, 243, 243,
	244, 244, 258, 258, 267, 267, 263, 263, 264, 265,
	265, 266, 266, 532, 261, 261, 260, 260, 262, 273,
	273, 275, 275, 274, 274, 274, 274, 276, 276, 277,
	277, 268, 268, 269, 269, 270, 270, 270, 271, 271,
	272, 272, 272, 272, 272, 278, 283, 282, 282, 294,
	294, 284, 284, 285, 286, 286, 289, 289, 288, 288,
	290, 290, 290, 291, 291, 291, 292, 292, 287, 287,
	293, 293, 296, 296, 297, 297, 297, 297, 297, 297,
	297, 297, 298, 298, 298, 298, 295, 295, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 300, 300, 300,
	300, 300, 301, 301, 302, 302, 303, 303, 279, 279,
	280, 280, 280, 280, 280, 280, 281, 281, 166, 389,
	389, 176, 176, 176, 176, 176, 198, 198, 177, 177,
	181, 167, 178, 178, 184, 184, 182, 179, 179, 168,
	252, 252, 169, 180, 180, 170, 170, 201, 201, 202,
	202, 208, 208, 208, 209, 209, 210, 210, 212, 212,
	213, 213, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 214, 214, 219,
	220, 220, 220, 220, 220, 220, 215, 215, 221, 226,
	226, 226, 226, 222, 222, 222, 222, 34, 34, 364,
	364, 364, 364, 364, 364, 364, 364, 363, 363, 363,
	362, 362, 362, 362, 362, 225, 225, 489, 489, 224,
	224, 568, 568, 516, 516, 203, 203, 204, 204, 205,
	205, 206, 206, 190, 190, 190, 190, 190, 199, 199,
	200, 200, 191, 191, 193, 194, 195, 195, 195, 195,
	195, 188, 185, 185, 185, 192, 192, 192, 217, 217,
	218, 218, 196, 196, 196, 197, 197, 189, 189, 144,
	144, 144, 145, 145, 145, 187, 187, 171, 171, 171,
	171, 171, 171, 366, 366, 366, 366, 366, 366, 366,
	366, 304, 304, 305, 305, 308, 308, 308, 311, 319,
	319, 319, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 368, 368, 369, 369, 370, 370, 371, 371,
	306, 306, 307, 307, 312, 312, 313, 313, 314, 314,
	314, 314, 315, 318, 318, 372, 372, 373, 373, 374,
	10, 33, 309, 323, 323, 324, 324, 324, 324, 327,
	327, 327, 327, 330, 330, 330, 376, 376, 379, 379,
	381, 381, 381, 381, 377, 377, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 569, 569, 29, 29, 29, 375, 375, 378,
	378, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	310, 310, 326, 326, 326, 326, 326, 326, 326, 328,
	328, 317, 317, 316, 316, 332, 332, 331, 331, 331,
	331, 336, 336, 336, 336, 336, 333, 334, 335, 335,
	335, 335, 335, 337, 337, 338, 338, 339, 340, 340,
	341, 341, 341, 367, 367, 345, 345, 345, 345, 346,
	346, 347, 347, 348, 172, 172, 329, 329, 349, 349,
	351, 351, 350, 350, 353, 353, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 354, 354, 359,
	359, 355, 355, 11, 424, 424, 424, 424, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 357,
	357, 357, 358, 360, 360, 570, 570, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 405,
	405, 405, 521, 521, 521, 524, 524, 524, 524, 523,
	523, 525, 525, 406, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 38, 398, 400,
	85, 85, 85, 85, 399, 71, 71, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 321, 321, 322, 322, 322, 322, 322, 322,
	342, 343, 343, 344, 344, 344, 344, 401, 401, 401,
	401, 528, 528, 529, 529, 530, 530, 530, 531, 531,
	531, 531, 531, 533, 533, 533, 533, 533, 534, 107,
	107, 107, 535, 535, 536, 536, 538, 538, 538, 538,
	538, 540, 540, 537, 537, 541, 541, 541, 404, 559,
	559, 542, 542, 539, 539, 539, 539, 539, 539, 539,
	539, 539, 539, 539, 539, 539, 539, 539, 539, 539,
	526, 526, 402, 402, 543, 543, 543, 545, 545, 544,
	544, 544, 544, 544, 550, 550, 551, 551, 553, 548,
	548, 549, 549, 556, 546, 546, 572, 572, 547, 547,
	554, 554, 571, 571, 552, 552, 552, 555, 555, 555,
	555, 557, 557, 403, 403, 403, 403, 216, 216, 558,
	558, 558, 558, 428, 428, 428, 428, 429, 430, 430,
	430, 430, 430, 430, 430, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 433, 433, 468, 468, 573, 573, 434, 434, 435,
	435, 469, 469, 471, 471, 471, 471, 436, 470, 470,
	472, 437, 437, 437, 437, 437, 437, 437, 437, 437,
	437, 437, 437, 437, 458, 459, 459, 475, 475, 475,
	475, 474, 474, 473, 473, 480, 480, 460, 460, 461,
	461, 461, 476, 476, 477, 477, 478, 478, 462, 462,
	462, 462, 463, 463, 464, 465, 465, 479, 479, 511,
	511, 511, 511, 512, 512, 519, 513, 514, 514, 515,
	432, 432, 432, 432, 432, 466, 466, 467, 467, 517,
	517, 518, 518, 426, 426, 427, 394, 394, 395, 393,
	393, 393, 396, 396, 397, 397, 397, 397, 522, 522,
	522, 522, 522, 522, 522, 522, 522, 522, 522, 520,
	520, 520, 520, 228, 228, 231, 231, 223, 223, 560,
	560, 560, 560, 560, 560, 560, 560, 560, 562, 562,
	562, 227, 227, 9, 9, 9, 9, 564, 564, 420,
	420, 420, 561, 561, 561, 561, 561, 563, 563, 563,
	563, 421, 421, 365, 365, 365, 365, 365, 365, 383,
	383, 30, 30, 31, 32, 32, 35, 35, 35, 35,
	36, 36, 37, 37, 37, 37, 384, 385, 385, 386,
	386, 438, 438, 439, 484, 484, 484, 484, 481, 481,
	483, 482, 482, 440, 485, 485, 441, 441, 442, 443,
	486, 486, 490, 490, 491, 491, 491, 491, 491, 492,
	492, 493, 493, 494, 494, 495, 495, 444, 496, 496,
	445, 445, 446, 446, 498, 498, 503, 503, 503, 447,
	447, 447, 448, 448, 448, 448, 499, 499, 504, 504,
	504, 504, 504, 504, 504, 237, 237, 449, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 451, 451, 451,
	497, 497, 497, 452, 507, 507, 500, 500, 505, 505,
	505, 505, 505, 487, 487, 565, 565, 565, 566, 566,
	453, 454, 454, 501, 501, 506, 506, 455, 456, 502,
	502, 502, 502, 457, 457, 488, 488, 508, 508, 509,
	509, 510, 510, 41, 41, 41, 40, 40, 150, 150,
	153, 153, 153, 153, 153, 156, 157, 158, 159, 154,
	154, 151, 152, 152, 155, 155, 118, 118, 119, 119,
	121, 123, 123, 123, 122, 124, 124, 120, 120, 125,
	125, 125, 125, 126, 126, 127, 127, 127, 127, 127,
	128, 128, 128, 128, 128, 43, 43, 43, 43, 42,
	42, 44, 44, 44, 44, 44, 44, 45, 45, 46,
	46, 47, 48, 48, 48, 49, 49, 50, 50, 51,
	51, 407, 407, 407, 407, 407, 407, 407, 407, 407,
	407, 407, 407, 408, 408, 574, 574, 574, 417, 417,
	417, 409, 415, 413, 410, 410, 411, 411, 411, 411,
	416, 416, 414, 412, 412, 412, 412, 412, 412, 422,
	422, 423, 423, 418, 418, 418, 418, 418, 418, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 425, 425,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 2, 0,
	3, 0, 2, 0, 1, 0, 2, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 2, 3, 0, 1, 3,
	1, 0, 3, 3, 4, 4, 4, 4, 3, 2,
	1, 1, 2, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 5, 3, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 3,
	3, 2, 2, 3, 5, 4, 6, 3, 5, 4,
	6, 4, 6, 5, 7, 3, 2, 4, 2, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 3, 4, 4, 6, 3, 3, 4, 3,
	4, 4, 5, 4, 5, 1, 1, 3, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 1, 1, 2, 4, 1, 1, 1, 2,
	2, 2, 2, 1, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 1, 2, 1,
	2, 1, 0, 2, 2, 3, 5, 0, 2, 4,
	3, 1, 5, 1, 1, 4, 1, 4, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 6,
	4, 4, 6, 4, 4, 4, 4, 4, 6, 5,
	5, 5, 4, 6, 4, 4, 4, 4, 5, 7,
	7, 9, 4, 6, 5, 5, 7, 7, 8, 1,
	0, 5, 5, 3, 3, 5, 3, 2, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 7, 5,
	3, 4, 1, 3, 3, 1, 2, 2, 0, 1,
	2, 0, 2, 3, 3, 3, 4, 0, 1, 1,
	1, 2, 3, 4, 5, 6, 8, 6, 6, 1,
	3, 1, 3, 3, 5, 1, 0, 1, 2, 4,
	2, 0, 3, 3, 2, 1, 3, 4, 3, 5,
	4, 3, 5, 1, 1, 1, 1, 4, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 3, 2, 3, 2, 0, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	3, 3, 0, 2, 3, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	2, 2, 1, 3, 3, 2, 4, 1, 5, 2,
	5, 2, 5, 2, 3, 3, 0, 1, 0, 3,
	0, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 0, 5, 0, 5, 0, 0, 1, 1,
	3, 1, 1, 1, 3, 3, 1, 1, 1, 2,
	4, 4, 2, 3, 5, 5, 1, 3, 1, 0,
	1, 2, 3, 2, 4, 2, 3, 2, 0, 1,
	2, 0, 9, 9, 2, 1, 1, 0, 1, 3,
	3, 2, 1, 1, 2, 0, 1, 3, 2, 2,
	3, 1, 4, 2, 3, 2, 3, 2, 3, 1,
	1, 2, 2, 4, 1, 2, 3, 3, 4, 5,
	4, 5, 4, 2, 2, 2, 1, 1, 0, 5,
	2, 2, 2, 3, 1, 0, 1, 3, 9, 1,
	2, 0, 7, 7, 0, 10, 6, 0, 4, 5,
	2, 0, 2, 4, 0, 1, 1, 0, 5, 2,
	4, 1, 2, 0, 1, 0, 1, 5, 1, 0,
	2, 0, 2, 6, 2, 0, 1, 3, 2, 4,
	0, 1, 3, 2, 1, 0, 1, 3, 3, 2,
	0, 2, 2, 2, 3, 3, 4, 1, 3, 3,
	2, 7, 12, 1, 3, 2, 3, 3, 1, 2,
	2, 2, 2, 1, 2, 13, 2, 2, 0, 2,
	0, 1, 3, 3, 1, 3, 1, 3, 3, 3,
	3, 3, 0, 3, 3, 0, 3, 0, 7, 7,
	3, 0, 2, 1, 1, 1, 1, 1, 1, 2,
	2, 1, 3, 3, 6, 0, 3, 0, 2, 3,
	2, 3, 4, 4, 3, 3, 0, 5, 2, 5,
	2, 0, 4, 2, 1, 0, 1, 0, 1, 3,
	3, 6, 7, 5, 7, 9, 2, 0, 7, 1,
	3, 1, 4, 4, 7, 2, 1, 1, 1, 3,
	2, 8, 1, 3, 3, 5, 2, 1, 3, 7,
	2, 0, 10, 1, 2, 9, 11, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 3, 0, 1, 3,
	2, 0, 1, 1, 3, 3, 1, 1, 3, 3,
	3, 3, 4, 4, 3, 3, 2, 1, 3, 2,
	1, 1, 1, 1, 3, 0, 1, 3, 1, 1,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 2,
	2, 1, 3, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 0, 2,
	0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
	0, 1, 0, 4, 4, 4, 5, 5, 2, 5,
	3, 5, 2, 0, 3, 1, 2, 5, 5, 8,
	3, 4, 8, 5, 0, 4, 3, 0, 1, 3,
	1, 3, 2, 2, 4, 4, 5, 2, 0, 1,
	1, 0, 2, 2, 0, 2, 0, 13, 16, 12,
	15, 14, 17, 1, 1, 2, 2, 2, 2, 1,
	0, 1, 0, 1, 3, 1, 1, 1, 3, 3,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 1, 0, 2, 2, 1, 0,
	3, 0, 1, 3, 1, 1, 2, 4, 6, 6,
	10, 1, 2, 1, 3, 4, 0, 1, 3, 2,
	1, 1, 6, 2, 0, 3, 1, 1, 2, 1,
	2, 2, 2, 2, 3, 0, 1, 2, 1, 2,
	1, 3, 2, 3, 1, 2, 2, 2, 1, 2,
	3, 1, 2, 2, 2, 2, 3, 3, 3, 1,
	3, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	0, 2, 1, 4, 4, 5, 2, 5, 5, 7,
	3, 1, 5, 9, 3, 9, 4, 11, 10, 2,
	0, 1, 3, 3, 6, 4, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 3, 3, 4, 0, 1, 0, 6, 1, 3,
	3, 3, 5, 2, 0, 3, 4, 4, 0, 2,
	0, 4, 0, 3, 16, 19, 1, 0, 2, 0,
	4, 0, 1, 3, 2, 0, 4, 6, 4, 6,
	4, 4, 6, 4, 6, 5, 7, 5, 7, 4,
	6, 10, 13, 10, 13, 11, 14, 1, 3, 1,
	0, 1, 3, 1, 1, 1, 1, 1, 2, 5,
	3, 6, 4, 6, 6, 9, 5, 7, 6, 6,
	5, 5, 5, 5, 9, 4, 5, 7, 6, 4,
	8, 4, 2, 4, 3, 6, 4, 3, 3, 3,
	2, 2, 3, 4, 4, 3, 3, 3, 3, 3,
	3, 4, 4, 3, 2, 3, 2, 2, 3, 4,
	3, 2, 2, 3, 4, 4, 4, 5, 1, 4,
	4, 4, 3, 3, 2, 1, 0, 6, 4, 6,
	4, 6, 8, 4, 6, 4, 6, 5, 7, 2,
	3, 3, 2, 5, 1, 1, 2, 3, 2, 1,
	1, 2, 1, 2, 1, 1, 1, 2, 1, 2,
	1, 1, 1, 3, 3, 3, 3, 2, 2, 2,
	3, 5, 5, 5, 2, 1, 3, 6, 6, 6,
	6, 6, 8, 8, 6, 6, 7, 9, 9, 8,
	10, 6, 6, 6, 6, 6, 6, 6, 8, 6,
	8, 6, 8, 7, 9, 6, 8, 7, 9, 8,
	10, 8, 10, 9, 11, 8, 10, 9, 11, 8,
	8, 7, 6, 6, 6, 6, 8, 8, 8, 8,
	6, 9, 0, 2, 2, 1, 2, 2, 2, 2,
	3, 1, 3, 3, 1, 5, 3, 9, 12, 7,
	7, 3, 2, 1, 3, 1, 3, 3, 3, 3,
	2, 2, 1, 1, 1, 1, 2, 1, 1, 1,
	4, 5, 1, 0, 1, 2, 2, 2, 2, 1,
	1, 1, 3, 3, 5, 1, 4, 0, 2, 3,
	0, 1, 1, 4, 5, 1, 1, 1, 1, 3,
	3, 2, 2, 1, 2, 2, 2, 2, 1, 2,
	2, 1, 17, 21, 1, 1, 2, 1, 3, 1,
	1, 1, 3, 1, 2, 0, 1, 2, 4, 1,
	1, 1, 1, 1, 3, 0, 1, 0, 1, 1,
	4, 0, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 2, 0, 9, 11, 12, 14, 3, 0, 3,
	4, 4, 0, 6, 4, 9, 7, 6, 4, 6,
	6, 5, 7, 9, 6, 6, 5, 4, 4, 3,
	6, 6, 6, 6, 4, 7, 5, 8, 7, 8,
	6, 5, 8, 1, 0, 1, 0, 4, 6, 5,
	8, 2, 0, 2, 2, 2, 1, 5, 2, 0,
	2, 6, 6, 6, 10, 6, 6, 6, 9, 9,
	6, 6, 9, 6, 7, 7, 6, 2, 2, 2,
	2, 1, 2, 1, 0, 1, 2, 10, 13, 5,
	4, 4, 2, 0, 2, 2, 1, 0, 11, 14,
	12, 15, 8, 11, 8, 7, 9, 1, 1, 3,
	3, 5, 6, 1, 3, 1, 3, 1, 3, 3,
	7, 9, 9, 8, 6, 1, 0, 1, 3, 3,
	1, 5, 3, 8, 11, 6, 1, 0, 5, 2,
	3, 0, 2, 0, 1, 1, 1, 1, 1, 3,
	3, 2, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 3, 2, 2, 1, 2, 2, 2, 2,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 2,
	0, 2, 0, 4, 1, 3, 1, 2, 2, 2,
	1, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	3, 11, 13, 5, 1, 2, 2, 1, 1, 3,
	5, 1, 3, 7, 2, 0, 5, 5, 10, 8,
	2, 0, 2, 0, 1, 1, 1, 1, 1, 2,
	0, 2, 0, 4, 0, 5, 0, 8, 1, 1,
	8, 11, 6, 8, 1, 3, 1, 1, 3, 4,
	7, 6, 5, 5, 5, 5, 1, 3, 4, 4,
	4, 3, 4, 3, 1, 4, 0, 8, 5, 5,
	6, 7, 7, 7, 4, 4, 5, 11, 10, 10,
	2, 2, 0, 13, 2, 0, 1, 3, 5, 5,
	3, 6, 2, 1, 0, 2, 4, 0, 1, 3,
	6, 8, 8, 1, 3, 5, 5, 10, 10, 11,
	11, 5, 5, 6, 10, 1, 0, 2, 0, 1,
	0, 2, 2, 1, 1, 0, 4, 0, 1, 3,
	1, 1, 1, 1, 1, 2, 4, 4, 5, 2,
	0, 3, 1, 3, 4, 3, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 3,
	3, 3, 0, 1, 4, 2, 2, 2, 2, 2,
	3, 2, 2, 3, 0, 2, 2, 1, 1, 1,
	0, 2, 4, 5, 6, 4, 5, 2, 3, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 2, 3, 2, 5, 4,
	3, 3, 3, 3, 3, 1, 1, 0, 2, 3,
	0, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	0, 3, 6, 3, 5, 3, 5, 3, 5, 2,
	0, 2, 0, 1, 2, 2, 2, 3, 3, 2,
	2, 3, 3, 1, 1, 3, 3, 2, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -408, -160, -166, -167, -168,
	-169, -170, -171, -172, -173, -174, -175, -401, -402, -403,
	-426, -427, -428, -429, -430, -431, -432, -433, -434, -435,
	-436, -437, -458, -459, -460, -461, -462, -463, -464, -465,
	-438, -439, -440, -441, -442, -443, -444, -445, -446, -447,
	-448, -449, -450, -451, -452, -453, -454, -455, -456, -457,
	-405, -406, -407, -409, -410, -411, -412, -413, -414, -415,
	266, 212, -162, -163, -250, 111, 26, 22, 27, 394,
	93, 401, 191, 436, 228, 407, 413, 397, 378, -165,
	-164, -249, 531, 63, 67, -257, 36, 518, 86, 540,
	-574, 486, 457, -574, 96, 97, 98, 99, 531, -209,
	115, -366, -329, -27, 33, 414, 261, 62, 464, 454,
	225, 276, 284, 422, 103, -394, 268, 449, 375, 194,
	438, 387, 443, 512, -487, 406, 71, 453, 451, 58,
	289, 473, 471, 40, 67, 307, 419, 480, 85, 284,
	199, 225, 236, 247, 261, 286, 71, -489, 62, 375,
	385, 387, 409, 414, 422, 443, 412, 460, 268, 406,
	103, 449, 438, 454, 464, 276, 384, -361, -364, -363,
	464, 261, 307, 103, 406, 71, 67, 419, 480, 85,
	284, 225, 236, 438, 454, 194, 268, 276, -489, 387,
	414, 422, 375, 412, 460, 85, -521, 58, 423, 457,
	-522, -520, -228, 56, 217, 414, 347, 406, 488, -5,
	4, -19, -20, 191, 192, 193, 194, 195, 196, 197,
	198, 199, 200, 22, 201, 203, 204, 205, 55, 206,
	207, 208, 210, 211, 212, 88, 70, 213, 214, 215,
	24, 216, 218, 219, 220, 221, 222, 223, 123, 226,
	227, 228, 229, 230, 141, 231, 101, 232, 233, 234,
	235, 236, 111, 237, 154, 238, 120, 121, 90, 246,
	247, 248, 249, 250, 251, 253, 254, 98, 149, 150,
	255, 89, 256, 257, 258, 259, 260, 261, 176, 27,
	262, 138, 264, 148, 265, 267, 136, 42, 268, 270,
	271, 272, 273, 274, 275, 276, 277, 279, 281, 282,
	91, 283, 153, 165, 285, 286, 287, 288, 289, 291,
	294, 295, 151, 296, 297, 298, 28, 299, 300, 301,
	302, 303, 304, 305, 306, 307, 308, 309, 310, 312,
	313, 314, 96, 315, 317, 318, 145, 503, 319, 320,
	321, 322, 92, 324, 327, 328, 329, 332, 333, 334,
	335, 336, 337, 105, 85, 338, 99, 340, 341, 342,
	343, 344, 345, 346, 131, 348, 349, 350, 351, 352,
	353, 354, 357, 110, 358, 359, 32, 139, 122, 504,
	505, 502, 144, 62, 506, 507, 124, 501, 508, 102,
	364, 365, 366, 367, 368, 369, 370, 129, 371, 128,
	373, 374, 375, 377, 378, 379, 380, 382, 383, 384,
	385, 386, 112, 387, 152, 143, 388, 389, 390, 391,
	84, 132, 393, 394, 395, 396, 397, 398, 399, 34,
	400, 401, 402, 35, 403, 404, 405, 407, 408, 409,
	410, 127, 412, 413, 146, 415, 416, 87, 417, 418,
	419, 420, 421, 422, 93, 425, 427, 428, 429, 430,
	431, 107, 433, 434, 435, 436, 437, 438, 113, 114,
	439, 440, 441, 147, 442, 443, 445, 446, 104, 448,
	449, 108, 451, 452, 453, 454, 455, 458, 460, 462,
	463, 464, 465, 466, 467, 468, 142, 469, 50, 472,
	473, 474, 97, 475, 476, 477, 478, 155, 183, 479,
	480, 481, 482, 483, 485, 168, 486, 140, 487, 498,
	499, 57, 37, 173, 169, 189, 179, 178, 224, 188,
	187, 29, 278, 175, 292, 293, 500, 186, 171, 185,
	166, 160, 162, 163, 159, 161, 156, 164, 158, 126,
	157, 325, 339, 181, 182, 355, 356, 360, 170, 361,
	362, 376, 177, 174, 411, 426, 172, 444, 184, 459,
	461, 86, 180, 489, 490, 491, 492, 493, 133, 494,
	495, 496, 497, 125, -524, -523, 56, 457, 423, -228,
	21, 217, 58, 347, 406, 414, 488, -574, 457, -574,
	379, -574, 379, -5, 423, 457, 56, 413, -5, 457,
	-151, -114, 509, -164, -165, -163, -162, -163, -249, -241,
	-242, 21, 41, -390, -388, -391, -5, 66, 541, -251,
	84, -253, -7, -5, -251, 531, -3, -417, 30, -421,
	-420, -561, 318, 389, 252, 31, 73, -392, -390, 64,
	73, -161, -160, -388, 67, 480, 84, 419, 307, 286,
	385, 460, 117, 199, 458, -488, 463, 34, -18, -5,
	28, -15, -5, -137, 221, 279, -140, -5, 11, -141,
	534, 535, 536, 537, 538, 539, 525, 526, 527, 18,
	19, 20, -15, 87, -15, 28, -7, 28, 246, 67,
	-7, 28, 336, -11, -424, -9, 241, 245, 424, 4,
	-19, -20, -21, 209, 115, 225, 25, 81, 242, 116,
	79, 44, 76, 52, 53, 75, 77, 46, 82, 54,
	80, 363, 78, 48, 450, 118, 85, 460, -7, -7,
	340, -352, 28, -15, -7, -7, 531, 236, -11, -11,
	453, 451, 453, 451, -390, 28, 21, -388, 28, 21,
	-388, 28, -388, 28, 480, 67, 246, -399, -527, -91,
	-5, 4, -19, -21, -15, -15, -7, -15, -398, -527,
	-11, -424, 321, 221, 279, -7, 28, -398, -7, -398,
	-7, -7, -7, -7, -7, 460, -11, -424, 21, -11,
	336, -424, 21, -7, -15, 28, 87, -15, -7, 28,
	-17, -15, 28, -13, -7, -7, 28, -225, 28, -95,
	-96, -97, -98, -104, -100, -103, -91, 186, 171, 172,
	173, 174, 175, 176, 187, 188, 170, 189, -105, -106,
	-101, -102, 184, 56, 4, -19, 169, -92, 178, 179,
	180, 181, 182, -225, 28, 25, 336, -355, 28, -424,
	-355, 28, -355, 28, 480, 246, 67, 87, 340, 460,
	321, 480, -521, 423, -521, 219, 209, -420, 431, 64,
	61, 527, 533, 57, -90, 7, -90, -562, -90, 40,
	-227, -9, -90, 506, 57, 318, 209, -417, -421, -417,
	-90, -417, 61, -90, -5, -90, -129, -43, -131, 130,
	-44, -45, -133, 68, 280, 69, -134, 70, -151, -114,
	532, 532, -230, -229, -232, -52, 536, -54, 534, 535,
	-136, 31, 516, -113, 471, 40, -56, -55, 13, 531,
	-59, -57, -163, 29, 134, -65, -66, 293, 11, 62,
	411, -5, -88, 6, -90, 49, 43, 47, 38, -115,
	-287, -58, 12, -527, 161, 162, 225, 240, 243, 244,
	330, 331, 241, 245, 424, 447, 103, 239, 242, 512,
	278, 356, 362, 376, 444, 459, 461, 360, 224, 292,
	325, 490, 491, 493, 494, 492, 495, 496, 497, -229,
	74, 536, -83, -86, 533, 529, -388, 531, 531, 541,
	-251, -24, 531, -112, -52, 218, 354, 541, -561, 327,
	66, 487, 252, -389, -388, 93, -5, 23, -392, -392,
	532, -216, 531, -388, 28, -388, 480, -388, 28, -28,
	25, -527, -527, -7, 460, -527, 130, -489, -366, 473,
	209, -396, 31, -516, 23, -108, 533, -384, 531, -15,
	-15, 533, -384, 23, 368, 257, 452, 231, -384, 64,
	31, -29, 36, 518, 31, 140, -388, 28, -476, 464,
	31, 130, 28, -29, 480, -7, -485, 365, 74, -7,
	-24, 31, -383, 130, 36, 232, -95, -15, -29, -29,
	-354, -357, 398, -356, 207, 256, 196, 22, 27, 477,
	93, 223, 264, 258, 309, 354, 122, 31, 365, 401,
	400, 153, -31, 507, 29, 45, -354, -358, 398, 207,
	29, 45, -354, 398, -377, -380, 354, 23, 213, 90,
	305, 335, 338, 342, 364, 419, 436, 402, 473, 29,
	-354, 398, 29, -388, 28, 21, -390, 28, 140, 398,
	-38, 531, -83, 398, 398, 398, 398, -360, 27, 93,
	196, 477, 398, -38, 398, -425, 196, 27, -7, -15,
	-15, 74, 29, 398, 398, 93, 196, 27, 398, 398,
	398, -477, -31, 479, 398, 93, 232, 394, 196, 27,
	264, 258, 430, 74, 74, -7, 398, -29, -416, 45,
	-416, 398, 130, -29, -416, -416, 398, 93, 401, 398,
	93, 29, 368, 257, 452, 231, 398, 196, 27, 97,
	-425, 29, 541, -387, 24, 35, 29, 541, -387, 74,
	29, 541, -387, 29, -109, -108, 531, -99, 531, 177,
	-109, -109, -109, 531, -110, 518, 519, 531, -110, -111,
	183, 531, -111, -111, 178, 179, -111, -387, 29, -17,
	28, 130, 28, 541, 29, 29, 29, 140, 368, 257,
	452, 231, -28, 219, 23, -227, 40, -90, 120, -231,
	40, -223, -226, -222, 49, 43, 74, -227, 6, 534,
	535, -89, -88, -231, 40, -5, -560, -90, 4, -222,
	40, 58, 49, 43, 74, 504, -564, 260, 234, 327,
	413, -5, -42, -43, -130, -129, -133, 130, 389, 97,
	354, 427, 503, -45, -44, -46, -52, 21, -51, 91,
	349, -47, -48, -52, -54, 534, 535, -132, 122, -152,
	-155, -52, -129, -43, -244, 73, 541, 14, 39, 55,
	534, 535, 536, 537, 538, 539, 525, 526, 527, 18,
	19, 20, -136, 30, 33, 46, 516, 44, 48, 52,
	53, 54, 37, 45, -139, 23, -8, 11, 62, -140,
	4, -23, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 21, 200, 22, 201, 202, 119, 510, 94, 203,
	204, 205, 60, 206, 207, 208, 209, 210, 211, 212,
	173, 115, 169, 189, 511, 88, 70, 213, 214, 215,
	24, 216, 38, 512, 217, 218, 219, 513, 220, 221,
	222, 223, 224, 225, 514, 123, 226, 227, 228, 229,
	230, 25, 141, 231, 101, 232, 117, 233, 234, 235,
	236, 111, 237, 81, 154, 238, 120, 239, 240, 241,
	242, 243, 244, 245, 121, 90, 246, 247, 249, 188,
	187, 250, 40, 251, 252, 253, 254, 98, 149, 150,
	255, 89, 95, 256, 257, 258, 259, 41, 109, 260,
	261, 176, 27, 262, 263, 138, 264, 148, 265, 266,
	267, 136, 42, 268, 270, 271, 272, 273, 29, 274,
	275, 276, 277, 278, 43, 279, 282, 91, 175, 283,
	153, 284, 165, 285, 116, 79, 286, 287, 288, 289,
	291, 292, 293, 294, 295, 151, 296, 298, 28, 299,
	300, 301, 302, 303, 304, 305, 306, 307, 308, 309,
	310, 311, 312, 76, 500, 313, 314, 96, 315, 186,
	171, 185, 317, 318, 75, 166, 160, 162, 163, 159,
	161, 156, 164, 158, 126, 157, 145, 503, 319, 320,
	321, 322, 92, 323, 326, 324, 325, 77, 327, 328,
	329, 58, 330, 331, 332, 333, 334, 335, 336, 337,
	105, 85, 338, 99, 339, 340, 342, 343, 345, 346,
	347, 181, 82, 182, 131, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 31, 110, 358, 359, 47,
	360, 32, 170, 139, 122, 504, 505, 502, 144, 66,
	506, 507, 124, 501, 361, 80, 362, 102, 364, 365,
	366, 367, 368, 369, 370, 129, 371, 128, 372, 373,
	374, 375, 376, 377, 378, 379, 380, 381, 382, 383,
	384, 385, 386, 112, 387, 152, 143, 388, 389, 174,
	390, 391, 84, 132, 392, 393, 394, 395, 396, 397,
	398, 399, 34, 400, 401, 402, 35, 403, 404, 405,
	78, 406, 407, 408, 409, 410, 411, 127, 412, 413,
	146, 414, 415, 416, 87, 418, 63, 419, 420, 421,
	422, 423, 424, 93, 426, 425, 427, 428, 429, 430,
	172, 431, 432, 107, 433, 434, 435, 436, 437, 438,
	113, 114, 439, 440, 441, 147, 442, 443, 444, 445,
	59, 446, 104, 447, 67, 448, 450, 449, 108, 451,
	452, 453, 454, 106, 455, 56, 184, 456, 457, 458,
	459, 460, 461, 49, 462, 463, 464, 465, 466, 467,
	468, 142, 469, 471, 50, 472, 473, 474, 97, 103,
	83, 475, 476, 477, 478, 155, 86, 180, 190, 118,
	479, 480, 481, 482, 51, 483, 486, 140, 487, 488,
	489, 490, 491, 492, 493, 133, 494, 495, 496, 497,
	125, 499, 57, -52, -52, -52, -52, -52, 363, -330,
	32, -84, -52, -112, -163, 86, -83, -163, -163, -64,
	529, 531, 531, 531, -83, -60, -52, -117, 485, -116,
	281, 531, 531, 531, 130, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, -244,
	531, -86, -93, 536, -6, 4, -19, -20, -21, -22,
	21, 202, 119, 30, 510, 134, 23, 94, 60, 511,
	38, 512, 513, 39, 514, 117, 26, 239, 240, 241,
	243, 244, 245, 40, 252, 95, 41, 109, 263, 266,
	269, 43, 280, 130, 284, 64, 290, 71, 72, 45,
	311, 316, 73, 323, 326, 68, 330, 331, 31, 47,
	69, 74, 66, 33, 509, 372, 381, 392, 100, 63,
	424, 432, 59, 447, 67, 106, 61, 456, 49, 470,
	471, 103, 83, 190, 51, 65, 484, 36, -52, -87,
	-388, -112, -253, 23, -13, 541, 532, 39, 55, 30,
	33, 46, 44, 48, 52, 37, 45, 62, 218, -561,
	-563, 389, 399, 421, -176, -160, 102, 531, 40, 23,
	-178, -184, -182, 531, -5, -5, -252, 83, 83, 61,
	-201, 64, 61, -14, -5, 531, 122, 370, 31, -216,
	-388, -468, -377, 354, 31, -18, 28, -5, -528, 531,
	-528, -543, 211, 198, 315, -7, -511, -513, 531, -95,
	321, 480, 84, -424, -397, -171, -172, -402, -403, 26,
	29, -95, 533, -93, -385, -386, -6, -487, 83, -137,
	531, 267, 388, -15, -15, -15, -15, -15, 29, -469,
	29, -7, 531, 370, 31, -478, -477, -90, 29, -479,
	-424, 103, 31, -422, -395, 28, -388, 74, 332, -424,
	-388, 464, 74, 29, 21, -499, -504, 67, 448, -5,
	-391, 242, -388, -384, -90, 23, 130, -422, -422, 541,
	61, -570, 117, 514, 370, 370, -309, 28, 514, -310,
	-5, 117, -326, 513, 471, 381, 284, 270, -570, 117,
	-570, 117, 117, 168, 335, 473, 194, 449, -342, 531,
	74, 460, 201, 400, 412, 411, 460, 412, 411, -388,
	309, 153, -15, 122, 61, -342, 298, 411, 531, -390,
	449, 61, 370, -388, 449, 61, -380, 90, 338, 342,
	-96, -222, -569, 70, -222, -222, 70, 346, -29, -29,
	-388, 61, -570, -388, -354, 398, 29, 45, -354, 398,
	29, -7, 61, 532, 61, 61, 61, 61, 117, 40,
	31, 117, 40, 31, -517, 117, -518, 513, 31, 117,
	61, 61, 103, 398, 83, 83, -388, -7, 61, 61,
	-384, -499, -499, -499, 61, 61, 61, -31, -90, 47,
	61, -384, 387, -90, 387, 387, 387, -384, -388, -388,
	398, -484, 264, 258, 61, -423, -525, 93, -406, 247,
	-525, 61, -479, -423, -525, -525, 61, -342, -342, 61,
	438, -15, -15, -15, -15, -15, 61, 208, 155, 155,
	155, -470, -362, -361, 199, 512, 261, 286, 62, 385,
	409, 458, 464, -364, 247, 406, 443, 449, 307, -17,
	-15, -13, -7, -15, -7, -95, -225, -109, -112, -88,
	-88, 56, 56, -88, 531, -88, -111, -111, -225, -387,
	29, -479, 29, -424, -355, -355, -355, -388, 457, 541,
	-88, 6, -88, 6, -5, 66, 503, 427, 541, -48,
	-50, -54, 534, 535, 411, 127, 531, -50, 411, 127,
	-49, -88, 6, -49, -135, 359, 430, -16, -388, 541,
	83, -144, 94, 95, -42, -130, -233, 64, -382, 453,
	451, 58, 289, 473, 67, -388, -232, -95, -15, 56,
	58, -52, -52, -52, -52, -52, -52, -52, -52, -52,
	-52, -52, -52, -52, -52, -52, -52, 46, 44, 48,
	37, 45, -52, 61, 47, 31, 49, 43, 50, 41,
	260, 357, -148, -147, 350, 351, 352, 353, 166, -143,
	59, 60, -142, -163, 531, -146, 510, 432, 21, -6,
	531, -113, 411, 531, -163, 41, 31, -86, 532, 541,
	-112, -67, 530, -64, -112, -137, -112, 532, -63, -62,
	51, -116, 71, -123, 508, 531, 532, 536, -69, 190,
	21, 41, -82, -52, -94, -91, -288, -54, -52, -283,
	-52, 531, -88, -88, -88, -88, -52, -74, -12, 4,
	498, 344, 248, 297, 341, 417, -90, -52, -75, -70,
	-52, -69, -76, -53, -54, 534, 535, 411, -72, -70,
	-52, -52, 511, 326, 456, -73, -52, 64, -112, -52,
	-112, -112, -112, -112, 346, -77, -183, -52, -564, -54,
	346, -52, -564, -233, -112, 530, 542, 532, 532, -254,
	85, 31, 532, -52, 468, 229, 389, -185, 74, -198,
	103, 104, -177, -181, -5, 86, -5, -233, 541, 527,
	-179, -182, -84, -186, 65, -234, -235, -390, -163, 323,
	-245, 531, -258, -268, -278, -259, 127, 125, 126, -5,
	-115, -287, -235, -202, 112, -202, 541, 532, -304, -305,
	-308, -309, -311, -310, 46, -15, 122, 29, -353, 36,
	531, 29, 74, 31, 404, -535, -536, -538, 23, 321,
	458, 484, -539, 215, 441, 300, 434, 482, 277, 418,
	324, 31, 237, 127, 445, -526, 366, 93, -406, -529,
	532, -530, -531, -533, -94, -107, 45, 361, 500, 190,
	-91, -95, 426, -535, 404, -545, -544, 96, 98, 97,
	462, 122, 198, -384, 536, -512, 509, -514, -519, -515,
	-531, 4, 321, -7, -388, 480, -396, -366, -27, -18,
	-5, -323, -93, 532, 541, 527, 130, -7, -261, -260,
	-262, -5, 531, -384, -384, -384, -384, -384, -15, -471,
	414, 479, 64, 24, -7, -473, -474, -475, 295, 354,
	478, -304, 122, 29, 284, -7, 422, 29, -418, -419,
	446, 197, 406, 45, 371, 265, 469, 309, 4, 232,
	476, 103, 23, 31, -216, -6, 7, -486, 23, -496,
	307, 67, -498, -503, -5, -259, 531, -15, 448, -383,
	541, -390, 45, -83, -216, -216, 387, -95, -90, -356,
	-7, -7, -7, -388, -388, 31, -309, 28, -95, -7,
	531, -330, -348, 83, 503, 503, -349, 83, -5, -88,
	-7, 28, -5, 28, -7, -7, 505, 223, 340, -7,
	-343, -344, -6, -7, -7, 21, 103, 460, 412, 460,
	412, -7, 327, -7, 21, 103, -7, 327, -388, 411,
	-424, -37, 110, 79, 40, 83, 327, -32, -35, -374,
	93, 196, 27, -10, -6, -354, -357, 398, -7, -7,
	-388, -354, 398, -7, -7, -222, -15, -15, -222, -222,
	-354, 398, -377, -7, -7, -354, 398, 61, -570, -388,
	449, 61, -570, -390, 398, -473, -474, -7, -7, -7,
	-7, -7, -7, 47, -7, 28, -52, 47, -7, 531,
	47, -7, -7, -11, -355, 61, -7, -7, 398, -493,
	61, 74, -7, -7, -7, -7, -7, -7, -13, -383,
	-13, -13, 398, 398, 61, 400, 201, -11, -419, -521,
	-7, -11, 422, -7, -7, -34, -89, 40, 534, 535,
	93, 398, 398, 398, 398, -7, -7, -90, -26, 28,
	-90, -472, 61, -7, -15, -399, 531, -95, -398, -400,
	221, 279, -137, -398, -398, 130, -95, -387, -387, -387,
	74, -387, 532, 532, 532, 57, 57, 532, -112, 532,
	-387, -17, 422, 130, -393, 36, -420, -223, 97, -47,
	-50, 66, 36, -88, 6, 531, -112, 334, 541, -155,
	-138, -140, 62, -145, 517, -236, 65, -234, -567, 67,
	-567, 453, 451, 453, 451, -567, -388, 57, 42, -52,
	-52, 61, -143, 59, -142, 42, -52, 47, 49, 43,
	50, 41, 260, 357, -148, -147, 64, 357, -149, 36,
	168, 155, 134, 139, 146, -53, -53, -112, -163, 531,
	-137, 531, -112, 41, -84, -52, 530, 530, 541, 532,
	532, 532, -61, -62, 263, -52, -123, 531, -122, -5,
	531, 65, 532, -114, 541, -151, -82, -69, -69, 16,
	17, -290, 47, 192, 155, 542, -292, 509, -302, -301,
	515, -52, 532, 532, 532, 532, 23, 532, 64, 532,
	541, 532, 532, 372, 541, 532, 14, 534, 535, 536,
	537, 538, 539, 525, 526, 527, 18, 19, 20, 45,
	-53, -53, 532, 532, 48, 64, 130, 23, -73, -73,
	-73, 532, 64, -112, 541, 532, 532, 532, 532, -6,
	532, 541, 23, -52, -274, 129, -6, 541, -52, -236,
	532, -87, -52, 531, 85, -187, 100, 101, 155, 532,
	541, -84, -186, -184, -52, 532, 541, -187, -52, 120,
	541, 81, -246, 75, 82, 79, 77, 78, 76, -239,
	-238, 23, -5, -239, -163, -258, -268, -278, -163, -245,
	-235, -239, -239, -239, -267, 518, 64, 531, 531, -83,
	74, -208, -90, 113, 114, -208, -5, 532, 541, -388,
	-306, 531, -388, -388, 23, -342, -14, -388, -390, 29,
	-534, 67, 47, -107, -91, -541, -404, 212, 403, -538,
	-540, -90, -227, -537, 130, 74, 418, 254, 317, 324,
	-222, -222, -15, -5, -522, 423, 457, 532, 541, 40,
	527, -94, -107, -533, -107, 361, -108, -91, -541, 74,
	33, 122, -545, 532, 532, 509, 541, 70, 532, 541,
	527, -7, 295, -216, -388, 209, -396, -324, 117, -325,
	-327, 39, 31, 47, 471, 381, 513, 40, 392, 288,
	252, 311, -386, -365, -107, -22, -138, -222, -90, 355,
	62, 534, 535, 464, 532, 541, -95, -466, -467, -90,
	-384, 64, -7, -227, -227, -29, -372, 507, -475, -480,
	-7, 295, 478, -480, 532, -388, -388, 246, -476, -7,
	130, -88, -355, -355, 406, 71, -90, 47, 371, 371,
	68, 474, -355, -160, 29, -367, 83, 273, 51, -353,
	-490, 130, 4, 295, 64, 541, -52, -24, -383, -504,
	-216, 414, -216, -237, 65, -237, -13, 532, 61, 61,
	61, -314, 130, 40, -28, 282, 29, 31, -371, -370,
	439, -326, 270, -52, 531, -321, 307, 531, -348, 531,
	531, -7, -360, 27, 93, 401, 196, -379, -224, -31,
	-381, 402, 93, -321, 29, -387, 29, -387, -36, -5,
	40, 532, 541, 527, 533, -7, -7, -7, -7, 418,
	418, 327, 307, 418, 532, 541, -374, -374, -10, -33,
	-90, 61, -570, 117, 93, 364, 61, 93, 364, 61,
	61, 61, -570, -7, -7, -354, 398, -7, -7, -7,
	-354, 398, 61, -31, 61, -387, 29, -518, -52, -321,
	-7, 398, 398, 196, 27, 61, -494, 83, -355, -388,
	-383, -383, -383, 61, 61, -7, -7, 438, 61, 61,
	61, 61, 61, 61, -90, 31, -227, -95, -15, -15,
	-85, 531, -95, -15, -110, -110, 532, -387, -7, -479,
	246, 354, 66, 36, 455, -112, 532, 541, -388, -145,
	531, 91, 92, -40, 71, -52, -388, -388, -567, -567,
	-567, -567, -388, -52, -52, 42, 42, -52, -53, -53,
	-52, 42, 64, 357, -149, -52, 471, 471, 30, 30,
	532, -52, 532, -112, 532, 541, 532, -64, 266, -52,
	106, -151, -124, -5, -52, 532, 190, -82, -114, -114,
	-114, -52, -52, -149, 74, 74, -283, -283, -291, 47,
	192, 70, 166, 532, -95, -52, -148, -52, -95, -53,
	-53, -53, -53, -53, -53, -53, -53, -53, -53, -53,
	-53, -53, -52, -52, -52, -95, 532, 532, 532, -112,
	-52, 532, 541, -183, -6, -78, 380, 442, 532, -54,
	-275, 70, 532, 541, -80, 479, 23, -40, 530, -161,
	-229, -192, 531, 74, -160, -160, 102, -181, -187, 527,
	-182, 122, -235, 75, 75, -235, -246, 75, -247, 80,
	-247, -247, -5, 531, -239, -239, -239, -239, 532, 124,
	531, -54, 133, -283, -52, -29, -210, -568, 83, -337,
	310, -308, -319, -338, -339, 370, -307, -312, -313, -310,
	-5, -306, 531, 122, 370, -160, 532, -468, -349, -7,
	-535, 531, 74, 206, -52, 541, 541, 464, 47, 254,
	317, -530, -52, -52, -107, -107, 538, -108, -388, -544,
	-14, 74, 70, -519, -512, -515, 4, -365, 531, -480,
	-353, 531, -424, -7, -15, 252, 47, -330, 503, 531,
	-53, -388, -376, 201, 70, 253, 299, -95, -262, -273,
	39, 532, 541, -15, -469, 531, -108, -337, -306, 531,
	370, 140, -478, -372, -479, -355, -355, -90, -90, -89,
	-90, -393, -395, -353, -7, -571, 286, 385, -481, -483,
	-5, -492, 61, -491, 21, 63, 96, 97, 98, -480,
	-234, -503, 532, 74, -237, -5, 242, -237, 531, -383,
	36, 168, -90, -7, -7, 86, -309, 29, -369, -368,
	230, -5, 40, 532, -14, -322, 31, 252, 311, 354,
	-7, -14, -321, -14, -317, -316, -196, -5, -259, 531,
	31, 275, 298, 246, -380, 288, 31, 275, 438, -342,
	-370, -368, -342, 288, -381, 93, 464, -29, 438, -5,
	-7, -344, -365, -6, 418, -7, -35, -7, -7, -7,
	449, 70, -7, 449, 70, -7, -7, -7, -7, 61,
	61, -570, 93, 364, 61, 61, -570, -7, -7, -7,
	532, 61, 61, -500, -505, 62, 286, 439, -501, -506,
	62, 286, -7, -495, 36, 531, 398, -7, -7, -31,
	-34, -7, -7, -7, -7, -7, -90, 211, 198, 29,
	23, 83, 83, -95, 355, 321, -387, 422, 246, 455,
	532, -52, -137, -154, 72, 70, -388, -388, -388, -388,
	-52, -52, 42, 30, 30, -52, -52, 319, 319, -52,
	-52, 532, 532, -52, -52, 532, -120, 370, 532, -82,
	532, 532, 532, -293, 100, 47, 47, -293, 74, 74,
	-152, 148, 532, 532, 64, 42, 130, 64, 532, 532,
	-68, -112, 489, 532, 483, 483, -275, 70, -54, 132,
	155, -52, -81, 541, -52, 354, -96, -154, 532, 109,
	-218, -196, 117, -198, -52, -207, -7, -235, -235, -248,
	83, 74, 75, -235, 531, -13, -238, -263, -264, -259,
	-274, 531, 541, -180, -190, -199, -200, 51, -212, -213,
	531, -29, 150, -338, 531, 304, 271, -367, 70, 532,
	541, -323, 36, -314, -304, -15, 122, -558, 36, -353,
	531, 74, -541, -266, -532, -94, -91, 47, -559, -90,
	130, -95, 313, 464, 538, -550, 393, -388, -512, 532,
	-502, 64, 61, -508, 312, 23, -14, -396, -325, 31,
	-383, -383, -52, -216, 23, 40, 83, -15, -90, -373,
	-374, 422, -314, -304, 122, -7, 284, 422, 23, -346,
	449, -527, 273, 30, 45, -494, -355, -498, -52, 286,
	500, 286, 64, 36, 45, 64, -309, -372, -5, 40,
	-321, 532, 252, 476, 299, 253, 309, 532, 532, 532,
	541, 36, -197, -189, 39, -197, -52, 47, 28, 28,
	-376, 47, 23, -34, -376, -95, -222, -34, -387, -387,
	527, 61, 61, -7, -355, -7, -355, 61, -7, -7,
	-7, 449, 70, -7, -7, -7, -387, -321, -7, -7,
	541, -88, -88, -95, 541, -88, -88, 513, -52, 61,
	-387, -90, -90, -95, -7, -7, 532, 541, 541, -7,
	-7, 532, 532, -118, 484, -52, -41, 21, 41, -52,
	-52, -52, 532, -114, 70, -114, 532, -95, 532, 47,
	47, -7, -52, -52, -52, -52, 532, 541, 532, 531,
	-275, 532, 532, 435, 155, -79, 306, 354, -118, -255,
	87, 97, 110, 532, 541, -7, 155, -248, 531, -52,
	-235, -13, 532, 532, 541, -265, 23, 123, -276, -277,
	-53, 40, -52, -187, -190, -191, 30, -191, 105, 31,
	-211, 115, 116, 149, 47, 154, 151, 152, 42, 153,
	148, -214, -219, -6, -212, -90, -367, -16, -320, 227,
	230, 233, 251, 298, 288, 308, 438, 439, 21, -320,
	-39, 36, 168, -5, -312, 507, -338, 532, -306, -388,
	513, 216, 58, 23, -218, -390, 541, 532, -107, 313,
	266, -542, -4, -404, 464, 464, -546, 130, -551, -553,
	-548, 348, 502, -557, 64, 532, 532, 433, 433, -509,
	-510, 478, 354, -480, -160, 532, -347, 83, -347, 532,
	-331, 337, 298, 531, -7, 532, 541, -7, 422, 532,
	-388, -372, 246, -7, -160, -7, 531, -571, -483, 531,
	-495, 64, 532, -398, -497, 23, -497, -15, 531, 531,
	531, -323, -332, 303, -332, 392, -332, -316, -137, 62,
	-352, -15, -15, 532, 29, 29, 531, 23, -273, -365,
	-7, -7, -359, 359, 93, -359, 93, -7, 61, -7,
	-355, 61, -505, -137, -400, -398, 531, -506, 531, 531,
	531, 532, -7, 532, -95, 355, -95, -119, -121, -5,
	-150, -153, -52, -156, -158, -157, -159, 531, 238, 408,
	293, -125, 388, 127, 294, -112, 532, -302, 130, -112,
	-77, 499, 354, 532, 306, -256, 90, 89, 88, 93,
	-236, -196, -160, -13, 532, -267, -264, 531, -269, -270,
	-5, 541, 532, 23, -53, -282, 23, 106, -52, 106,
	105, -516, -516, -516, -516, 152, 31, 47, -90, 532,
	541, -220, -226, -222, 536, 40, 531, -236, -39, 532,
	-345, 74, -342, 505, 531, -323, -367, -337, -338, -306,
	506, 513, 513, -160, 532, -349, -532, -535, 540, -95,
	-554, 51, -572, 262, -553, -549, 67, 411, -321, -388,
	36, 36, -480, 478, -558, -353, 307, -328, 354, -336,
	-333, -334, 74, 79, 369, 429, -378, 531, -52, -507,
	279, -374, -372, -7, -337, -306, 140, -372, -393, 532,
	-527, -482, 7, -234, -497, 301, 205, -318, -315, -9,
	-112, -112, -383, 531, -383, -388, -383, 531, -144, -342,
	-197, -52, 298, -30, 83, 449, 449, -7, -359, 93,
	-7, -565, 130, -565, -566, -95, -566, -566, -52, 532,
	532, 532, 541, 23, 541, 532, 531, 531, 425, 532,
	-126, -127, 37, 467, 120, -52, -126, -126, -52, 532,
	532, 155, -14, 91, 91, -178, 532, -260, 532, 541,
	-95, 130, -277, 541, -6, -294, 129, -5, -193, -194,
	109, 97, 98, -195, 109, 96, 70, -90, -90, -90,
	-90, -14, 536, 47, -14, 536, -219, -215, -221, -226,
	-345, -346, 228, -340, -341, -5, -259, 531, -39, -338,
	-367, -314, 506, 506, -558, -351, 303, 531, -541, 273,
	531, -547, 411, 437, -516, 130, 286, 286, 23, 449,
	309, -334, 74, -333, 74, 97, 98, -377, 532, 23,
	-15, -372, 422, -314, -7, 531, 532, 541, 532, 541,
	-88, 532, 532, -347, -14, -347, -216, -347, -137, -145,
	-144, 532, -378, -52, -7, -7, 449, -375, 391, 87,
	509, -375, 532, 541, 532, 532, 532, -121, -122, -153,
	-112, -112, 531, -128, 270, -127, 377, 283, 411, 377,
	283, -128, -128, 93, 70, 70, -236, -240, 23, 532,
	-270, -271, -272, 4, 40, 31, 47, 128, 124, -54,
	123, -284, -285, -283, 110, 93, 110, -188, 102, 531,
	40, 86, 107, 108, -14, 536, 532, 541, -346, 27,
	98, 380, 532, 541, -189, -189, -52, -345, -367, -39,
	-338, -330, 531, -218, -571, -52, -556, -5, 262, -398,
	-398, -160, -7, -335, 354, 35, 24, 93, -335, 532,
	440, -500, -7, 422, -372, 532, 7, -315, 61, -321,
	532, -321, -331, -236, 532, -145, -359, -359, -7, 70,
	-398, -95, 532, 532, -150, 120, 71, 455, 354, 30,
	-5, -14, -14, -5, -272, -53, -53, 47, -53, -274,
	531, 541, 23, -178, -198, -177, 86, 531, -221, 127,
	127, -341, -352, -352, 532, -346, -39, -345, -367, -353,
	-350, -196, 532, -527, 532, 411, 541, 541, -558, 195,
	47, 40, -372, -7, 531, -336, -321, -359, -15, 532,
	411, 501, -127, 61, 83, 93, 93, 123, -279, -280,
	-5, 131, -285, -6, 155, 532, -112, -189, -345, -346,
	-39, -346, 532, 541, -351, 531, -554, 61, 64, -216,
	-216, -372, -112, -321, -55, -5, -5, -5, -269, 532,
	541, 130, -95, -303, 128, -188, -188, 102, 532, -352,
	-346, -345, -236, -196, -330, -552, -555, -88, 6, -90,
	-6, 273, 433, 433, 532, 40, 532, -295, -296, 40,
	-297, 136, 47, 49, 43, 50, 138, -280, 124, -281,
	-301, 29, 128, 7, -198, -346, -353, 532, 541, -571,
	36, 36, -55, 532, 74, -52, 134, 139, -299, 168,
	36, -281, -281, 7, 123, 23, 155, -346, -555, -527,
	286, 286, 83, 136, -300, 145, 144, 140, 134, 140,
	134, 141, 142, -299, -295, 531, -7, -188, -236, 531,
	-398, -398, -5, -298, -296, 143, 143, 140, 140, 134,
	140, 134, 140, -300, -279, 123, -552, 74, 74, 74,
	140, 140, -298, 532, 531, 532, 138, 136, 146, 146,
	-279, -296, 147, 147, 532, 74, 136,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	2777, 2777, 1421, -2, 0, 1695, -2, 1758, 1758, 0,
	0, 0, 2777, 0, 2777, 2777, 0, 0, 0, -2,
	1412, 1504, 0, 1535, 0, 1455, 0, 0, 0, -2,
	2780, 2775, 2776, 2532, 0, 0, 0, 0, 0, 0,
	1694, 0, 0, 2676, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 1823, 1824, 0,
	0, -2, 1996, 2653, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1757, 0, 0, 0,
	0, 0, 2138, 0, 0, 0, 2134, 2135, 2136, 0,
	0, 2140, 2141, 2142, 0, 0, 0, 1741, 0, 1744,
	1745, 1746, 1747, 1748, 1749, 0, 2119, 270, 381, 415,
	2124, 2478, 0, 498, 154, 371, -2, 362, 448, 2493,
	89, 90, 91, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 164, 165, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
	213, 214, 215, 216, 217, 218, 219, 220, 221, 222,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 282, 283,
	284, 285, 286, 287, 289, 290, 291, 292, 293, 294,
	295, 296, 297, 298, 299, 300, 301, 302, 303, 304,
	305, 306, 307, 308, 309, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 323, 324,
	325, 326, 327, 328, 329, 330, 331, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 358, 359, 360, 361, 363, 364, 365,
	366, 367, 368, 369, 370, 372, 373, 374, 375, 376,
	377, 378, 379, 380, 382, 383, 384, 385, 386, 387,
	388, 389, 390, 391, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 404, 405, 406, 407,
	408, 409, 410, 411, 412, 413, 414, 416, 417, 418,
	419, 420, 421, 422, 423, 424, 425, 426, 427, 428,
	429, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 449,
	450, 451, 452, 453, 454, 455, 456, 457, 458, 459,
	460, 461, 462, 463, 464, 465, 466, 467, 468, 469,
	470, 471, 472, 473, 474, 475, 476, 477, 478, 479,
	480, 481, 482, 483, 484, 485, 486, 487, 488, 489,
	490, 491, 492, 493, 494, 495, 496, 497, 499, 500,
	501, 502, 503, 504, 505, 506, 507, 508, 509, 510,
	511, 512, 513, 514, 2133, 2125, 498, 415, 381, 2129,
	2130, 154, 270, 288, 362, 371, 448, 2780, 2532, 2780,
	0, 2780, 0, 2765, 381, 415, 498, 369, 2767, 0,
	-2, 0, 0, -2, 1426, 1427, 0, 1427, 0, 1457,
	0, 1534, 1536, 1454, 1479, 1480, 104, 0, 0, 1501,
	345, 1506, 107, 99, 1502, 0, 2, 2773, 0, 2774,
	2531, 2519, 0, 0, 2525, 0, 0, 0, 1484, 0,
	0, 0, 1423, 2338, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 0, 0, 1758, 2675, -2, 0, -2,
	239, 1764, 121, 0, 158, 220, 1409, 0, 1395, 1396,
	1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406,
	1407, 1408, 2359, 0, 0, 239, 1926, 239, 0, 0,
	2423, 239, 275, 1926, 2033, 2034, 2035, 2036, 2037, 2513,
	2514, 2515, 2516, 515, 516, 517, 518, 519, 520, 521,
	522, 523, 524, 525, 526, 527, 528, 529, 530, 531,
	532, 533, 534, 535, 536, 537, 0, 0, 2575, 0,
	0, 107, 239, 73, 2540, 0, 0, 0, 1926, 1926,
	1825, 1826, 1827, 1828, 0, 239, 0, 0, 239, 0,
	0, 239, 0, 239, 0, 0, 0, 0, 0, 1280,
	0, -2, -2, 1346, 0, 0, 0, 0, 0, 0,
	0, 2033, 0, 0, 0, 0, 239, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 2790, 0,
	275, -2, 2790, 0, 0, 239, 0, 0, 0, 239,
	77, 123, 239, 77, 100, 0, 239, 77, 239, 1755,
	1338, 1339, 1340, 1341, 1342, 1343, 1352, 1355, 1356, 1357,
	1358, 1359, 1390, 201, 1352, 1352, 1352, 1365, 1366, 1367,
	1368, 1369, 1386, 1386, 1344, 1345, 1388, 1377, 1388, 1388,
	1372, 0, 1388, 77, 239, 0, 275, 2795, 239, 2031,
	2793, 239, 2797, 239, 2137, 0, 2139, 0, 1739, 1740,
	1743, 85, 2120, 381, 2121, 156, 0, 2122, 0, 0,
	0, 0, 0, 0, 2481, 1173, 2482, 2483, 2508, 2509,
	2484, 2511, 2512, 0, 2126, 0, 2128, 2761, 2762, 2763,
	2771, 2764, 0, 2772, 2766, 2770, 2740, 1439, 1436, 0,
	2737, 2738, 1440, 0, 0, 0, 1448, 0, -2, 0,
	1424, 1425, 1541, 1456, 1458, 1462, 1463, 1068, 0, 0,
	0, 0, 0, 0, 1895, 1135, 1152, 1153, 1187, 0,
	1156, 1157, 1158, 461, 0, 1163, 1164, 465, 1391, 308,
	494, 1177, 1166, 1167, 1168, 1169, 1170, 1171, 1296, 1414,
	1416, 1191, 1172, 0, 475, 472, 517, 1193, 1194, 1196,
	1198, 1200, 1202, 1203, 1204, 1205, 1206, 1207, -2, 0,
	462, 486, 490, 491, 497, 500, 501, 487, 458, 464,
	481, 505, 506, 508, 510, 507, 511, 512, 513, 1541,
	0, 1481, 105, 1179, 0, 1182, 1482, 0, 0, 0,
	1503, 0, 0, 0, 1336, 2778, 0, 0, 2521, 0,
	2523, 2524, 2526, 0, 1659, 0, 1485, 0, 1681, 0,
	0, 0, 0, 0, 239, 2338, 0, 2374, 239, 72,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 1829,
	0, 2344, 0, 0, 1763, 122, 0, 2357, 0, 2654,
	0, 0, 2358, 0, 0, 0, 0, 0, 2364, 0,
	0, 2382, 1924, 1925, 0, 0, 0, 239, 2427, 0,
	0, 0, 0, 2800, 0, 0, 0, 0, 0, 0,
	0, 0, 2609, 0, 0, 0, 0, 0, 2800, 2800,
	2006, 2019, 2106, 2027, 0, 0, 0, 2106, 2106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2098, 0, 0, 0, 2008, 2010, 0, 0,
	0, 0, 2011, 0, 2377, 1904, 0, 0, 0, 1908,
	1923, 1911, 0, 0, 0, 0, 1926, -2, 1921, 0,
	2013, 2106, 0, 0, 239, 0, 0, 239, 0, 0,
	2154, 0, 1281, 0, 0, 0, 0, 2348, 0, 0,
	0, 0, 0, 2148, 0, 0, 2818, 2819, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2420, 2421, 0, 0, 0, 0, 0, 0, 0,
	2634, 2635, 0, 0, 0, 0, 0, 2802, 0, 0,
	0, 0, 0, 2802, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2389,
	1758, 0, 0, 2108, 75, 76, 0, 0, 2110, 0,
	0, 0, 2113, 0, 1353, 1352, 0, 1360, 0, 1361,
	1362, 1363, 1364, 0, 1381, 0, 0, 0, 1383, 1379,
	1387, 0, 1370, 1371, 1388, 1388, 1375, 2115, 0, 77,
	239, 0, 0, 0, 0, 0, 0, 1742, 2143, 2144,
	2145, 2146, 0, 0, 0, 2485, 2486, 2488, 2479, 2489,
	2491, 2495, 2497, 2498, 1729, 1730, 1731, 1732, 1733, 0,
	0, 1736, 1174, 2490, 2492, 2494, 2480, 2499, 2500, 2501,
	2502, 2503, 2504, 2505, 2506, 2507, 2487, 2517, 2518, 2127,
	369, 2769, 1430, 2739, 1431, 1438, 1441, 0, 0, 1443,
	0, 1445, 0, 2735, 2736, 2741, 2749, 2750, 0, 2759,
	2760, 2747, 0, 2751, -2, 0, 0, 1451, 0, 2701,
	2702, 1811, 2740, 1439, 1465, 0, 0, 0, 670, 638,
	1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406,
	1407, 1408, 0, 631, 885, -2, 0, -2, 972, 803,
	1106, 1108, -2, 782, 0, 0, 1461, -2, 882, 1316,
	97, 98, 616, 617, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 632, 633, 634,
	635, 636, 637, 639, 640, 641, 642, 643, 644, 645,
	647, 648, 649, 650, 651, 652, 653, 654, 655, 656,
	657, 658, 659, 660, 661, 662, 663, 664, 665, 666,
	667, 668, 669, 671, 672, 673, 674, 675, 676, 677,
	678, 679, 680, 681, 682, 683, 684, 685, 686, 687,
	688, 689, 690, 691, 692, 693, 694, 695, 696, 697,
	698, 699, 700, 701, 702, 703, 704, 705, 706, 707,
	708, 709, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 778,
	779, 780, 781, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 804, 805, 806, 807, 808, 809, 810,
	811, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	883, 884, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
	1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
	1065, 1066, 1067, 1073, 1074, 1088, 1091, 1092, 0, 0,
	0, 1154, 1336, 0, -2, 502, 1159, 1160, 1161, 1162,
	0, 0, 0, 0, -2, 0, 1295, 1416, 0, 2713,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1240, 0, 1240, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1465,
	0, 1180, 1183, 1184, 1347, 92, 93, 94, 95, 96,
	538, 539, 540, 541, 542, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 583, 584, 585, 586, 587,
	588, 589, 590, 591, 592, 593, 594, 595, 596, 597,
	598, 599, 600, 601, 602, 603, 604, 605, 606, 607,
	608, 609, 610, 611, 612, 613, 614, 615, 1181, 0,
	0, 0, 1507, 1511, 0, 0, 1518, 0, 0, 0,
	0, 1318, 1320, 0, 0, 1417, 0, 0, 2779, 2520,
	2522, 0, 0, 2530, 1794, 1661, 0, 0, 0, 0,
	1465, 1672, 0, 0, 1187, 1486, 1524, 0, 0, 1690,
	1690, 1687, 1688, 0, 102, 1832, 0, 0, 0, 2005,
	0, 2371, 2373, 0, 0, 0, 239, 71, 2253, 0,
	2253, 0, 2294, 2295, 0, 0, 0, 2356, 0, 0,
	0, 0, 0, 2473, 2472, 2474, 2475, 2476, 2477, -2,
	72, 1884, 0, 1349, 0, 2557, 2559, 0, 0, 1410,
	1555, 0, 0, 0, 0, 0, 0, 2366, 0, 2379,
	0, 2414, 1832, 0, 0, 0, 2426, 2422, 0, 0,
	2437, 2438, 0, 2782, 0, 239, 2338, 0, 0, 2574,
	2581, 0, 0, 0, 0, 2540, 2616, 0, 407, -2,
	2338, 2624, 0, 2539, 0, 0, 0, 2781, 2783, 0,
	0, 0, 0, 2105, 0, 0, 2038, 239, 0, 2062,
	0, 0, 1941, 0, 1895, 0, 0, -2, 0, 0,
	0, 0, 0, 0, 2070, 2071, 0, 0, 2091, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2084,
	0, 0, 2086, 2087, 0, 2092, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1905, 1909, 1914, 1915,
	1906, 1907, 0, 1922, 1912, 1913, 0, 0, 0, 0,
	0, 0, 0, 0, 2015, 2106, 0, 0, 2017, 2106,
	0, 2414, 0, 2147, 0, 0, 0, 0, 0, 2104,
	0, 0, 0, 0, 2351, 0, 2460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2592, 0, 0, 0,
	2612, 2614, 2613, 2615, 0, 0, 0, 2419, 2424, 2425,
	0, 2628, 0, 2629, 2540, 0, 0, 2636, 0, 0,
	0, 2563, 2564, 2567, 0, 2784, 2786, 0, 2132, 0,
	2787, 0, 0, 2785, 2788, 2789, 0, 2576, 2577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 2387, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1750, 1751, 1752, 1753, 1754, 2138, 77,
	124, 77, 101, 77, 0, 1756, 77, 1354, 0, 0,
	0, 0, 0, 0, 0, 0, 1373, 1374, 77, 2117,
	0, 0, 0, 2032, 2796, 2794, 2798, 2471, 0, 0,
	1175, 1734, 1176, 1735, 2768, 1437, 0, 1446, 0, 0,
	0, 2752, 0, 0, -2, -2, 0, 2748, 2757, 2758,
	2753, -2, -2, 2754, 1442, 1449, 0, 1447, 108, 0,
	0, 1814, 1809, 1810, 1434, 1435, 1521, 0, 1540, -2,
	-2, 270, 231, -2, 0, 120, 1459, 1069, 1070, 0,
	1072, 1075, 1076, 1077, 1078, 1079, 1080, -2, -2, -2,
	-2, -2, -2, 1087, 1089, 1090, -2, 1319, 1321, 0,
	1417, 0, -2, 0, 1105, 0, 1110, 1112, 1114, 0,
	1127, 1129, 0, 1335, 1322, 1323, 1324, 1325, 1326, 0,
	0, 1418, 1122, 1419, 0, 0, 1313, 1314, 1315, 1460,
	0, 1109, 0, 0, 1126, 1893, 0, 1188, 1187, 0,
	0, 0, 1304, 1305, 0, 0, 0, -2, 1301, 1297,
	0, 2713, 0, 1190, 0, 0, 1282, 0, 1412, 0,
	0, 0, 1289, 1291, 0, -2, 1602, 1068, 0, 1607,
	1645, 0, 0, 0, 0, 0, 0, 0, 0, 1250,
	1251, 1252, 1253, 1254, 1255, 1256, 1257, 0, 0, 0,
	1291, 1239, 0, 0, 1136, 0, 0, 494, 0, 0,
	1291, 0, 0, 0, 0, 0, 1336, 0, 1248, 0,
	0, 0, 0, 0, 0, 0, 1262, 1265, 0, 0,
	0, 0, 0, 1521, 0, 1185, 1182, 1483, 1519, 0,
	1509, 0, 106, 1337, 2527, 2528, 2529, 1816, 0, 0,
	1666, 1667, 0, 1668, 1187, 1665, 1660, 1524, 0, 0,
	0, 1677, 1676, 1816, 0, 1680, 1466, 1527, 1527, 0,
	1471, 0, 1527, 1527, 1527, 1545, 367, 514, 479, 104,
	1278, 1279, 0, 0, 1689, 0, 0, 2337, 0, 1831,
	1833, 1835, 1836, 1837, 0, 1861, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2267, 2252, 2254, 0, 0,
	0, 2259, 2260, 0, 2275, 2276, 2277, 2278, 0, 0,
	2283, 0, 0, 0, 0, 2288, 0, 0, 2291, 0,
	2232, 2233, 2235, 0, 0, 2242, 2243, 2244, 2245, 2247,
	-2, 2249, 0, 2267, 0, 0, 2297, 2299, 2300, 2301,
	2303, 2296, 0, 2355, 0, 0, 0, 0, 2443, 2447,
	2445, 1344, 0, 2673, 2338, 0, 2343, 0, 0, 0,
	-2, 2347, 1350, 2556, 0, 0, 0, 2660, 0, 1554,
	1556, 0, 2456, 2370, 2360, 2361, 2362, 2363, 0, 2381,
	0, 0, 0, 2386, 1926, 1876, 2413, 2411, 0, 0,
	0, 0, 0, 0, 0, 2423, 0, 0, 2799, 2803,
	0, 0, 0, 0, 0, 0, 0, 2813, 2814, 0,
	0, 0, 0, 0, 1984, 0, 2005, 2583, 0, 0,
	2598, 2599, 0, 2604, 2606, 2607, 0, 107, 2540, 2611,
	0, 2338, 0, -2, 2626, 2626, 0, 0, 0, 2028,
	2177, 0, 0, 0, 85, 0, 2040, 239, 1859, 0,
	0, 0, 2212, 0, 0, 0, 0, 0, 1760, 0,
	2212, 239, 77, 239, 77, 2064, 2067, 2069, 0, 2090,
	0, 2221, 2224, 2068, 2072, 2075, 2076, 0, 0, 0,
	0, 2080, 0, 2077, 2078, 2079, 2083, 0, 2085, 0,
	2088, 2093, 2552, 2553, 2554, 0, 0, 0, 2544, 2546,
	382, 130, 202, 0, 1880, 2007, 2020, 2106, 0, 2185,
	2102, 2009, 0, 0, 2179, 1910, 1916, 1917, 1918, 1920,
	2012, 0, 2378, 2181, 0, 2014, 2106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 2157, 2158, 2159,
	2160, 2161, 0, 2349, 77, 239, 2103, 2350, 0, 0,
	2212, 2354, 2164, 2165, 2792, 0, 0, 0, 0, 2594,
	0, 0, 2171, 2172, 2173, 2174, 2175, 2176, 2540, 2630,
	2540, 2540, 0, 0, 0, 2565, 2566, 2202, 2801, 2131,
	2791, 2203, 0, 2204, 2205, 2602, 1737, 1738, 0, 0,
	0, 0, 0, 0, 0, 2210, 0, 0, 0, 0,
	2454, 2388, 0, 2391, 2392, 2393, 0, 2395, 2396, 2397,
	158, 220, 0, 2400, 2401, 0, 2403, 2107, 2109, 2111,
	0, 2114, 1351, 1389, 1386, 1384, 1385, 1386, 0, 1376,
	2116, 77, 0, 0, 2465, 0, 2123, 2496, 1444, 2742,
	0, 2745, 0, 2755, 2756, 0, 0, 1450, 0, 2703,
	1814, 1393, 0, 2705, 0, 2687, 0, 1464, 0, 110,
	0, 111, 111, 111, 111, 0, 119, 0, 0, -2,
	-2, 0, 0, 0, 1123, 0, -2, 1107, 1111, 1113,
	1115, 0, 1128, 1131, 0, 1335, 0, 1130, 1133, 0,
	0, 1327, 1328, 1329, 1330, 0, 0, 0, 1124, 0,
	0, 0, 0, 1894, 1155, 1337, 1302, 1303, 0, 1165,
	1392, -2, 0, 1298, 0, 0, 1189, 0, 2711, 2712,
	2716, 0, 1283, 0, 0, 1411, 1412, 1412, 1412, 0,
	0, 1335, 0, 0, 0, 0, 1605, 0, 1586, 1644,
	0, 0, 1195, 1197, 1199, 1201, 0, 1210, 0, 1211,
	0, 1213, 1214, 0, 0, 1215, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1138, 1139, 1216, 1217, 0, 0, 0, 0, 0, 0,
	0, 1222, 0, 1247, 0, 1224, 1225, 1226, 1227, 0,
	1232, 0, 0, 1268, 0, 0, 0, 0, 0, 2687,
	1537, 0, 1181, 0, 1510, 1658, 0, 1797, 0, 0,
	0, 1670, 1816, 1673, 1674, 0, 0, 1679, 1522, 179,
	0, 0, 0, 0, 0, 1498, 1498, 1498, 1496, 1468,
	1526, 0, 1531, 1469, 1527, 1527, 1527, 1527, -2, 1471,
	0, 1473, 1475, 1477, 1542, 0, 0, 0, 0, -2,
	0, 1926, 1691, 1692, 1693, -2, 103, 1974, 0, 1841,
	1976, 0, 1861, 0, 0, 2004, 0, 2374, 1999, 0,
	2253, 0, 0, 2248, 1352, 2229, 2265, 0, 0, 2255,
	2256, 2261, 2257, 2258, 0, 0, 0, 2281, 2282, 2284,
	2285, 2286, 2287, 2289, 2290, 381, 415, 2231, 0, 0,
	0, 0, 2241, 0, 2240, 2246, 1352, 0, 2230, 0,
	0, 0, 0, 2439, 2440, 0, 0, 0, 2446, 0,
	0, 0, 0, 2005, 0, 0, 2346, 1883, 0, 1886,
	1887, 0, 0, 1932, 1895, 0, 0, 0, 0, 0,
	1889, 0, 2558, 2560, 2533, 2534, 2535, 2536, 2537, 2538,
	308, 1397, 1398, 0, 2368, 0, 1560, 0, 2455, 2457,
	2365, 0, 2383, 2384, 2385, 2382, 2404, 0, 2412, 2407,
	2415, 2408, 2410, 2409, 1974, 1861, 0, 0, 2427, 1876,
	0, 2804, 2805, 2806, 0, 0, 2809, 2810, 0, 0,
	0, 0, 2817, 2471, 0, 2005, 0, 0, 0, 2573,
	2590, 0, 2580, 0, 0, 0, 0, 0, 2610, 2617,
	2626, 0, 2626, 2621, 0, 2623, 2540, 0, 0, 0,
	0, 2099, 0, 1871, 2100, 2101, 0, 0, 1855, 1858,
	0, 1940, 1999, 0, 0, 1944, 0, 0, 2212, 0,
	0, 1998, 2042, 0, 0, 0, 0, 2055, 0, 2061,
	1898, -2, 0, 2063, 0, 2059, 0, 2066, 2089, 2550,
	2551, 2220, 0, 0, 0, 2073, 2081, 2074, 2082, 2094,
	2095, 0, 0, 2096, 2543, 0, 2547, 2548, 2549, 1879,
	1881, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2183, 0, 2016, 2106, 0, 2187, 0,
	2018, 2106, 0, 2405, 0, 2352, 0, 2459, 0, 2462,
	2166, 0, 0, 0, 0, 0, 2596, 0, 2591, 0,
	2633, 2631, 2632, 0, 0, 2201, 0, 0, 0, 0,
	0, 0, 0, 0, 2450, 0, 2390, 0, 0, 0,
	2149, 0, 0, 77, 1380, 1382, 1378, 2118, 2435, 0,
	2469, 0, 2743, 0, 2746, 0, 1311, 0, 109, 2704,
	0, 1812, 1813, 2700, 0, 1520, 112, 113, 0, 0,
	0, 0, 118, 1071, -2, 0, 0, -2, 0, 0,
	-2, 0, 0, 1132, 1134, -2, 1332, 1334, 0, 0,
	1420, 0, -2, 0, 1308, 0, -2, 1306, 1294, 1300,
	0, 0, 2718, 2715, 0, 1284, 0, 1290, 0, 0,
	0, 1292, 1293, 1611, 0, 0, 1598, 1599, 1611, 0,
	0, 0, 1643, 1192, 0, 1249, 0, 0, 1137, 1140,
	1141, 1142, 1143, 1144, 1145, -2, -2, -2, -2, -2,
	-2, 1260, 0, 1243, 1244, 0, 1219, 1220, 1221, 1246,
	0, 1228, 0, 1263, 1264, 0, 0, 0, 1234, 1563,
	0, 148, 1235, 0, 1277, 0, 0, 2700, 1186, 0,
	1815, 0, 0, 0, 1662, 1663, 0, 1669, 1671, 0,
	1678, 0, 1467, 0, 0, 0, 0, 0, 1493, 1497,
	1494, 1495, 1529, 0, 1470, 1474, 1476, 1478, 1487, 1544,
	0, 0, 509, 0, 0, 1701, 1926, 0, 1761, 1976,
	0, 1834, 1838, 1984, 1975, 0, 0, 1862, 1864, 1865,
	1884, 0, 1832, 0, 0, 2342, 2005, 2372, 0, 0,
	2267, 0, 0, 2270, 2268, 0, 0, 0, 0, 2279,
	2280, 2234, 2236, 2237, 2238, 2239, 0, 0, 2305, 2298,
	2302, 0, 0, 2444, 0, 2448, 0, 2449, 0, 2678,
	0, 0, 2473, 0, 1888, 1890, 1931, 2540, 2540, 0,
	1936, 2338, 0, 1896, 0, 1891, 1892, 0, 1557, 1558,
	0, 2369, 0, 2367, 2380, 0, 2416, 0, 0, 1832,
	0, 0, 0, 2432, 0, 2807, 2808, 2811, 2812, 2815,
	2816, 2463, 0, 1990, 1983, 0, 2322, 2323, 0, 2568,
	0, 2594, 0, 2582, 2584, 2585, 2586, 2587, 2588, 2597,
	2600, 2605, 2608, 0, 2618, 2619, 2620, 2622, 0, 2627,
	0, 0, 0, 2189, 2195, 0, 2039, 0, 1876, 1854,
	0, 1856, 1857, 2212, 0, 2213, 0, 2215, 0, 0,
	1993, 0, 1946, 0, 0, 1951, 0, 1808, 1808, 0,
	0, 2046, 2056, 1759, 1902, 0, 0, 0, 0, 2050,
	2052, 2053, 2051, 0, 1899, 0, 0, 0, 0, 77,
	77, 2222, 2223, 2226, 2097, 2555, 2545, 2178, 0, 0,
	0, 0, 2186, 0, 0, 2180, 2191, 2182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2163, 2162, 77,
	2212, 0, 0, 2661, 2646, 0, 0, 0, 2662, 2663,
	0, 0, 2169, 2579, 0, 0, 0, 2199, 2200, 2434,
	2603, 2206, 2207, 2208, 2209, 77, 2453, 0, 0, 80,
	0, 0, 0, 0, 0, 0, 2112, 0, 2470, 2744,
	1310, 1337, 0, 2707, 0, 2685, 114, 115, 116, 117,
	-2, -2, 0, 0, 0, -2, -2, 1331, 1333, -2,
	-2, 1125, 1307, 1337, 1299, 1413, 1412, 0, 1415, 1412,
	1285, 1287, 1288, 0, 0, 1600, 1601, 0, 0, 0,
	1606, 0, 1209, 1212, 0, 0, 0, 0, 1218, 1223,
	0, 0, 504, 1233, 1266, 1267, 1564, 0, 1565, 1561,
	1562, 0, 0, 0, 1272, 296, 1271, 2707, 1514, 0,
	0, 1800, 0, 0, 1675, 1523, 1525, 1488, 0, 1490,
	0, 0, 0, 1492, 0, 0, 1472, 0, 1546, 1550,
	0, 0, 0, 1816, 1683, 1783, 1783, 0, 1685, 1698,
	0, 1701, 0, 1984, 0, 0, 0, 88, 0, 1860,
	0, 1866, 0, 1976, 0, 1861, 0, 2333, 0, 0,
	0, 0, 2227, 0, 1551, 0, 1348, 0, -2, 2262,
	0, 2263, 2273, 2250, 0, 2315, 0, 2332, 0, 2441,
	0, 0, 0, 2680, 0, 0, 0, 2345, 1885, 0,
	1992, 1992, 0, 1960, 0, 1897, 0, 1559, 2458, 0,
	1877, 0, 0, 0, 0, 1876, 0, 0, 0, 2468,
	0, 0, 0, 0, 0, 2596, 2589, 0, 0, 0,
	2642, 2642, 0, 0, 0, 0, 2041, 1884, 1852, 1853,
	1942, 1956, 2214, 2218, 2216, 2217, 2219, 1956, 0, 1956,
	0, 0, 1802, 74, 0, 1803, 0, 2043, 0, 0,
	1903, 2044, 0, 2048, 0, 1560, 1901, 2049, 2058, 2065,
	0, 0, 0, 2030, 0, 2030, 0, 0, 2193, 2184,
	0, 0, 0, 2197, 2188, 0, 2353, 2461, 2167, 2168,
	0, 0, 0, 2652, 0, 0, 0, 0, 0, 0,
	2211, 2451, 2452, 0, 2398, 2399, 2150, 0, 0, 2402,
	2436, 1312, 1394, 1452, 0, 2699, 0, 2683, 2684, -2,
	-2, -2, 1309, 2722, 0, 0, 1608, 1645, 1609, 1603,
	1604, 1642, 1259, 1245, 1241, 1242, 1229, 0, 1230, 0,
	1566, 1236, 1237, 0, 1273, 0, 1269, 0, 1453, 1517,
	0, 0, 1793, 1521, 0, 1796, 0, 1489, 0, 1500,
	1491, 0, 1530, 1545, 0, 1548, 0, 0, 0, 1567,
	0, 0, 1588, 1682, 1684, 0, 0, 0, 1778, 0,
	1700, 1702, 1703, 1764, 1764, 1706, 1707, 1764, 1764, 0,
	0, 0, 1717, 1725, 1521, 1696, 88, 0, 1839, 1842,
	1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1840,
	1988, 0, 0, 0, 1863, 1884, 1984, 1974, 1976, 1861,
	0, 0, 0, 0, 0, 1999, 0, 2253, 1553, 2274,
	2266, 0, 2271, 2272, 0, 2251, 2321, 2317, 2304, 2306,
	0, 2309, 2310, 2212, 0, 2442, 2668, 0, 0, 2674,
	2679, 0, 0, 2677, 2342, 2005, 1933, 0, 1934, 1950,
	1965, 0, 1930, 0, 2645, 1875, 0, 1876, 0, 1974,
	1861, 2417, 0, 1876, 2471, 1989, 0, 0, 2569, 0,
	2578, 0, 2625, 2642, 2639, 0, 2638, 2667, 0, 0,
	0, 1882, 2540, 0, 2540, 0, 2540, 1952, 1953, 308,
	1811, 73, 1807, 1808, 2047, 2057, 0, 0, 2542, 2225,
	2190, 2196, 2021, 2029, 0, 2023, 0, 2192, 0, 2030,
	0, 0, 2647, 2657, 2657, 2650, 0, 2664, 0, 0,
	0, 2593, 2170, 2394, 0, 0, 0, 2706, 2708, 0,
	2686, 2688, 2690, 2691, 2692, 2693, 2694, 0, 178, 364,
	465, 0, 0, 0, 0, 2717, 1286, 1610, 0, 0,
	0, 1274, 1275, 1238, 1270, 1508, 0, 0, 0, 0,
	1795, 1801, 1664, 0, 1528, 1543, 1547, 0, 0, 1573,
	0, 0, 0, 0, 1570, 1590, 0, 0, 1782, 0,
	1780, 0, 0, 0, 0, 0, 0, 0, 1716, 1699,
	0, 1719, 1720, 1721, 1722, 1723, 0, 1686, 1988, 1973,
	1990, 0, 86, 87, 0, 1867, 88, 1976, 1984, 0,
	2339, 0, 0, 2342, 2001, 0, 1552, 2267, 2269, 2264,
	0, 0, 0, 2316, 2307, 1764, 2311, 2312, 0, 2331,
	0, 0, 2681, 2682, 2334, 0, 0, 1935, 0, 1937,
	1961, 1962, 0, 1957, 1958, 1959, 1938, 0, 0, 0,
	0, 1878, 2428, 1876, 0, 0, 0, 2433, 2464, 2561,
	0, 0, 2571, 2601, 2637, 2640, 2641, 0, 1873, 0,
	0, 0, 1992, 0, 1992, 2338, 1992, 0, 1814, 1811,
	1804, 0, 1930, 2060, 0, 0, 0, 2194, 2025, 0,
	2198, 1928, 0, 1928, 0, 2658, 0, 0, 0, 2151,
	2153, 2152, 0, 0, 0, 2695, 0, 0, 0, 2714,
	2734, 2723, -2, 423, 179, 0, 2734, 2734, 1258, 1231,
	1261, 1276, 0, 0, 0, 1521, 1533, 0, 1571, 0,
	1575, 0, 1568, 0, 1569, 0, 0, 1587, 1773, 1774,
	0, 0, 1785, 1775, 0, 0, 0, 1704, 1705, 1708,
	1709, 1710, 1711, 0, 1714, 1715, 1718, 0, 1726, 1728,
	1990, 1819, 0, 0, 1978, 1808, 1808, 0, 1988, 1984,
	88, 1976, 2340, 2341, 2335, 1895, 0, 0, 2228, 0,
	0, 2314, 2318, 2319, 0, 0, 0, 0, 0, 0,
	1949, 1963, 0, 1964, 0, 0, 0, 0, 0, 0,
	2644, 2430, 0, 0, 1876, 0, 2570, 0, 1868, 0,
	1872, 1869, 0, 2212, 0, 2212, 1960, 1521, 0, 1805,
	1814, 2045, 2054, 2541, 2030, 2030, 0, 2648, 1927, 2655,
	0, 2649, 0, 0, 2665, 2666, 2595, 2709, 2710, 2689,
	0, 0, 0, 2719, 0, 0, 2725, 2726, 2727, 2728,
	2729, 2720, 2721, 0, 0, 0, 1792, 1499, 0, 1549,
	1574, 1577, 1578, 0, 0, 0, 1583, 0, 1576, 0,
	0, 1589, 1591, 0, 1776, 0, 1777, 1786, 0, 0,
	0, 0, 1779, 1781, 1712, 1713, 1724, 0, 1817, 1985,
	0, 0, 1977, 0, 74, 74, 0, 1990, 88, 1988,
	1984, 2005, 0, 0, 0, 0, 2308, 2313, 0, 2671,
	2672, 2342, 1991, 1966, 0, 1969, 1970, 0, 1967, 1929,
	1939, 2643, 1876, 0, 2418, 2562, 2572, 1874, 0, 1943,
	1955, 1945, 1965, 2212, 1954, 1806, 2022, 2024, 2030, 0,
	2651, 2659, 2697, 2696, 0, 0, 2731, 2732, 0, 0,
	0, 0, 0, 1532, 1579, 1580, 1581, 1582, 1584, 0,
	0, 0, 0, 1784, 0, 0, 1790, 0, 1727, 1986,
	1987, 1979, 1980, 1981, 1808, 1821, 1988, 1990, 88, 1990,
	0, 2002, 2001, 0, 2320, 2321, 0, 0, 2336, 1968,
	2338, 2338, 2429, 1876, 0, 2212, 1948, 2026, 2656, 2698,
	2730, 2733, 2724, 0, 0, 0, 0, 0, 0, 1648,
	0, -2, 1592, 1593, 0, 0, 0, 74, 1990, 1820,
	1988, 1521, 2000, 0, 1895, 2326, 0, 0, 0, 1971,
	1972, 2431, 0, 1947, 0, 1516, 1512, 1513, 0, 1627,
	0, 0, 1657, 0, 1646, 1787, 1788, 0, 1791, 1982,
	1818, 1990, 1994, 2003, 2005, 0, 2324, 2327, 2328, 2329,
	2330, 0, 0, 0, 1870, 0, 1572, 0, 0, 0,
	1613, 1614, 1615, 1616, 1617, 1618, 1621, 1649, 1650, 1636,
	1657, 1657, 0, 0, 0, 1822, 1990, 2292, 0, 0,
	0, 0, 0, 1585, 0, 1612, 1619, 1620, 1641, 0,
	0, 1636, 1627, 1656, 0, 0, 0, 1521, 2325, 0,
	0, 0, 0, 1626, 1625, 0, 0, 1628, 0, 1630,
	0, 0, 0, 1641, 1653, 0, 0, 1789, 1995, 2326,
	2669, 2670, 1515, 1651, 0, 1638, 1640, 1629, 1631, 0,
	1634, 0, 1635, 1625, 0, 0, 0, 0, 0, 0,
	1632, 1633, 1652, 1654, 0, 2293, 1622, 1623, 0, 0,
	0, 0, 1637, 1639, 1655, 0, 1624,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 538, 3, 3,
	531, 532, 536, 534, 541, 535, 533, 537, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 542, 540,
	525, 527, 526, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 529, 3, 530, 539,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 528, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:540
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:555
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:563
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:578
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:581
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:590
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:591
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:592
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:593
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:594
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:595
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:596
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:597
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:598
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:599
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:600
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:601
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:602
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:603
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:604
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:605
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:606
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:607
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:608
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:609
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:610
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:611
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:612
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:613
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:614
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:615
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:616
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:617
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:618
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:619
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:620
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:621
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:622
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:623
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:624
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:625
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:626
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:627
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:628
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:629
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:630
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:631
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:632
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:633
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:634
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:635
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:636
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:637
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:638
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:639
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:640
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:641
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:642
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:643
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:644
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:645
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:646
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:647
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:648
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:649
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:650
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:651
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:652
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:653
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:655
		{
			yyVAL.stmt = nil
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:666
		{
			yyVAL.str = yyDollar[1].str
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:667
		{
			yyVAL.str = ""
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:671
		{
			yyVAL.list = yyDollar[1].list
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:672
		{
			yyVAL.list = nil
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:676
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:677
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:678
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:682
		{
			yyVAL.ival = 1
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:683
		{
			yyVAL.ival = 0
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:687
		{
			yyVAL.ival = 1
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:688
		{
			yyVAL.ival = 0
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:692
		{
			yyVAL.bval = true
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:693
		{
			yyVAL.bval = false
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:697
		{
			yyVAL.bval = true
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:698
		{
			yyVAL.bval = false
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:702
		{
			yyVAL.list = yyDollar[2].list
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:703
		{
			yyVAL.list = nil
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:704
		{
			yyVAL.list = nil
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:713
		{
			yyVAL.str = yyDollar[1].str
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:714
		{
			yyVAL.str = yyDollar[1].str
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:715
		{
			yyVAL.str = yyDollar[1].str
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:719
		{
			yyVAL.str = yyDollar[1].str
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:720
		{
			yyVAL.str = yyDollar[1].str
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:721
		{
			yyVAL.str = yyDollar[1].str
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:722
		{
			yyVAL.str = yyDollar[1].str
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:723
		{
			yyVAL.str = yyDollar[1].str
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:726
		{
			yyVAL.str = yyDollar[1].str
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:727
		{
			yyVAL.str = yyDollar[1].str
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:730
		{
			yyVAL.str = yyDollar[1].str
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:735
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:739
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:748
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:752
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:760
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:767
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:796
		{
			yyVAL.list = yyDollar[2].list
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:797
		{
			yyVAL.list = nil
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:802
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:806
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:819
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:825
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:831
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:837
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:843
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:850
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:857
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:863
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:869
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:878
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:882
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:894
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:898
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:908
		{
			yyVAL.str = "abort"
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:909
		{
			yyVAL.str = "absent"
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:910
		{
			yyVAL.str = "absolute"
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:911
		{
			yyVAL.str = "access"
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:912
		{
			yyVAL.str = "action"
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:913
		{
			yyVAL.str = "add"
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:914
		{
			yyVAL.str = "admin"
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:915
		{
			yyVAL.str = "after"
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:916
		{
			yyVAL.str = "aggregate"
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:917
		{
			yyVAL.str = "also"
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:918
		{
			yyVAL.str = "alter"
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:919
		{
			yyVAL.str = "always"
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:920
		{
			yyVAL.str = "asensitive"
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:921
		{
			yyVAL.str = "assertion"
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:922
		{
			yyVAL.str = "assignment"
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:923
		{
			yyVAL.str = "at"
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:924
		{
			yyVAL.str = "atomic"
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:925
		{
			yyVAL.str = "attach"
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:926
		{
			yyVAL.str = "attribute"
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:927
		{
			yyVAL.str = "backward"
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:928
		{
			yyVAL.str = "before"
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:929
		{
			yyVAL.str = "begin"
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:930
		{
			yyVAL.str = "breadth"
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:931
		{
			yyVAL.str = "by"
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:932
		{
			yyVAL.str = "cache"
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:933
		{
			yyVAL.str = "call"
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:934
		{
			yyVAL.str = "called"
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:935
		{
			yyVAL.str = "cascade"
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:936
		{
			yyVAL.str = "cascaded"
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:937
		{
			yyVAL.str = "catalog"
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:938
		{
			yyVAL.str = "chain"
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:939
		{
			yyVAL.str = "characteristics"
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:940
		{
			yyVAL.str = "checkpoint"
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:941
		{
			yyVAL.str = "class"
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:942
		{
			yyVAL.str = "close"
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:943
		{
			yyVAL.str = "cluster"
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:944
		{
			yyVAL.str = "columns"
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:945
		{
			yyVAL.str = "comment"
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:946
		{
			yyVAL.str = "comments"
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:947
		{
			yyVAL.str = "commit"
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:948
		{
			yyVAL.str = "committed"
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:949
		{
			yyVAL.str = "compression"
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:950
		{
			yyVAL.str = "conditional"
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:951
		{
			yyVAL.str = "configuration"
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:952
		{
			yyVAL.str = "conflict"
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:953
		{
			yyVAL.str = "connection"
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:954
		{
			yyVAL.str = "constraints"
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:955
		{
			yyVAL.str = "content"
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:956
		{
			yyVAL.str = "continue"
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:957
		{
			yyVAL.str = "conversion"
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:958
		{
			yyVAL.str = "copy"
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:959
		{
			yyVAL.str = "cost"
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:960
		{
			yyVAL.str = "csv"
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:961
		{
			yyVAL.str = "cube"
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:962
		{
			yyVAL.str = "current"
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:963
		{
			yyVAL.str = "cursor"
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:964
		{
			yyVAL.str = "cycle"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:965
		{
			yyVAL.str = "data"
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:966
		{
			yyVAL.str = "database"
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:967
		{
			yyVAL.str = "day"
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:968
		{
			yyVAL.str = "deallocate"
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:969
		{
			yyVAL.str = "declare"
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:970
		{
			yyVAL.str = "defaults"
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:971
		{
			yyVAL.str = "deferred"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:972
		{
			yyVAL.str = "definer"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:973
		{
			yyVAL.str = "delete"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:974
		{
			yyVAL.str = "delimiter"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:975
		{
			yyVAL.str = "delimiters"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:976
		{
			yyVAL.str = "depends"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:977
		{
			yyVAL.str = "depth"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:978
		{
			yyVAL.str = "detach"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:979
		{
			yyVAL.str = "dictionary"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:980
		{
			yyVAL.str = "disable"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:981
		{
			yyVAL.str = "discard"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:982
		{
			yyVAL.str = "document"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:983
		{
			yyVAL.str = "domain"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:984
		{
			yyVAL.str = "double"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:985
		{
			yyVAL.str = "drop"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:986
		{
			yyVAL.str = "each"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:987
		{
			yyVAL.str = "empty"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:988
		{
			yyVAL.str = "enable"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:989
		{
			yyVAL.str = "encoding"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:990
		{
			yyVAL.str = "encrypted"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:991
		{
			yyVAL.str = "enum"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:992
		{
			yyVAL.str = "error"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:993
		{
			yyVAL.str = "escape"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:994
		{
			yyVAL.str = "event"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:995
		{
			yyVAL.str = "exclude"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:996
		{
			yyVAL.str = "excluding"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:997
		{
			yyVAL.str = "exclusive"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:998
		{
			yyVAL.str = "execute"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:999
		{
			yyVAL.str = "explain"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1000
		{
			yyVAL.str = "expression"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1001
		{
			yyVAL.str = "extension"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1002
		{
			yyVAL.str = "external"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1003
		{
			yyVAL.str = "family"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1004
		{
			yyVAL.str = "filter"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1005
		{
			yyVAL.str = "finalize"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1006
		{
			yyVAL.str = "first"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1007
		{
			yyVAL.str = "following"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1008
		{
			yyVAL.str = "force"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1009
		{
			yyVAL.str = "format"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1010
		{
			yyVAL.str = "forward"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1011
		{
			yyVAL.str = "function"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1012
		{
			yyVAL.str = "functions"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1013
		{
			yyVAL.str = "generated"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1014
		{
			yyVAL.str = "global"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1015
		{
			yyVAL.str = "granted"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1016
		{
			yyVAL.str = "groups"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1017
		{
			yyVAL.str = "handler"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1018
		{
			yyVAL.str = "header"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1019
		{
			yyVAL.str = "hold"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1020
		{
			yyVAL.str = "hour"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1021
		{
			yyVAL.str = "identity"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1022
		{
			yyVAL.str = "if"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1023
		{
			yyVAL.str = "immediate"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1024
		{
			yyVAL.str = "immutable"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1025
		{
			yyVAL.str = "implicit"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1026
		{
			yyVAL.str = "import"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1027
		{
			yyVAL.str = "include"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1028
		{
			yyVAL.str = "including"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1029
		{
			yyVAL.str = "increment"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1030
		{
			yyVAL.str = "indent"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1031
		{
			yyVAL.str = "index"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1032
		{
			yyVAL.str = "indexes"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1033
		{
			yyVAL.str = "inherit"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1034
		{
			yyVAL.str = "inherits"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1035
		{
			yyVAL.str = "inline"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1036
		{
			yyVAL.str = "input"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1037
		{
			yyVAL.str = "insensitive"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1038
		{
			yyVAL.str = "insert"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1039
		{
			yyVAL.str = "instead"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1040
		{
			yyVAL.str = "invoker"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1041
		{
			yyVAL.str = "isolation"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1042
		{
			yyVAL.str = "keep"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1043
		{
			yyVAL.str = "key"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1044
		{
			yyVAL.str = "keys"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1045
		{
			yyVAL.str = "label"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1046
		{
			yyVAL.str = "language"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1047
		{
			yyVAL.str = "large"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1048
		{
			yyVAL.str = "last"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.str = "leakproof"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.str = "level"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.str = "listen"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1052
		{
			yyVAL.str = "load"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "local"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "location"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "lock"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "locked"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "logged"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "mapping"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "match"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "matched"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "materialized"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "maxvalue"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "merge"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "method"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "minute"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "minvalue"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "mode"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "month"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "move"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "name"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "names"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "nested"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "new"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "next"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "nfc"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "nfd"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "nfkc"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "nfkd"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "no"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "normalized"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "nothing"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "notify"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "nowait"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "nulls"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "object"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "of"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "off"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "oids"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "old"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "omit"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "operator"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "option"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "options"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "ordinality"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "others"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "over"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "overriding"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "owned"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "owner"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "parallel"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "parameter"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "parser"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "partial"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "partition"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "passing"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "password"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "path"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "plan"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "plans"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "policy"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "preceding"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "prepare"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "prepared"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "preserve"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "prior"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "privileges"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "procedural"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "procedure"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "procedures"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "program"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "publication"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "quote"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "quotes"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "range"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "read"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "reassign"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "recheck"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "recursive"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "ref"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "referencing"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "refresh"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "reindex"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "relative"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "release"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "rename"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "repeatable"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "replace"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "replica"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "reset"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "restart"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "restrict"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "return"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "returns"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "revoke"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "role"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "rollback"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "rollup"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "routine"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "routines"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "rows"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "rule"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "savepoint"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "scalar"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "schema"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "schemas"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "scroll"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "search"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "second"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "security"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "sequence"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "sequences"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "serializable"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "server"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "session"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "set"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "sets"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "share"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.str = "show"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1169
		{
			yyVAL.str = "simple"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.str = "skip"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "snapshot"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "source"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "sql"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.str = "stable"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.str = "standalone"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			yyVAL.str = "start"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1177
		{
			yyVAL.str = "statement"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = "statistics"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = "stdin"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "stdout"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "storage"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "stored"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "strict"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "string"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "strip"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "subscription"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "support"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "sysid"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "system"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "tables"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "tablespace"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "target"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "temp"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1194
		{
			yyVAL.str = "template"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "temporary"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "text"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "ties"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.str = "transaction"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.str = "transform"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.str = "trigger"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.str = "truncate"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "trusted"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "type"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = "types"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = "uescape"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = "unbounded"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1207
		{
			yyVAL.str = "uncommitted"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1208
		{
			yyVAL.str = "unconditional"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1209
		{
			yyVAL.str = "unencrypted"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1210
		{
			yyVAL.str = "unknown"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.str = "unlisten"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1212
		{
			yyVAL.str = "unlogged"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1213
		{
			yyVAL.str = "until"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1214
		{
			yyVAL.str = "update"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.str = "vacuum"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1216
		{
			yyVAL.str = "valid"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1217
		{
			yyVAL.str = "validate"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.str = "validator"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.str = "value"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "varying"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "version"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "view"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "views"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "volatile"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "whitespace"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "within"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "without"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "work"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "wrapper"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "write"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "xml"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "year"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "yes"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "zone"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1248
		{
			yyVAL.str = "between"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1249
		{
			yyVAL.str = "bigint"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1250
		{
			yyVAL.str = "bit"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1251
		{
			yyVAL.str = "boolean"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1252
		{
			yyVAL.str = "char"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.str = "character"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1254
		{
			yyVAL.str = "coalesce"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1255
		{
			yyVAL.str = "dec"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1256
		{
			yyVAL.str = "decimal"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "exists"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.str = "extract"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.str = "float"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "greatest"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "grouping"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "inout"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "int"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "integer"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "interval"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "json"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "json_array"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "json_arrayagg"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.str = "json_exists"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1270
		{
			yyVAL.str = "json_object"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "json_objectagg"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "json_query"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "json_scalar"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "json_serialize"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "json_table"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "json_value"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "least"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "merge_action"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.str = "national"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1280
		{
			yyVAL.str = "nchar"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1281
		{
			yyVAL.str = "none"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1282
		{
			yyVAL.str = "normalize"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.str = "nullif"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1284
		{
			yyVAL.str = "numeric"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1285
		{
			yyVAL.str = "out"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1286
		{
			yyVAL.str = "overlay"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1287
		{
			yyVAL.str = "position"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1288
		{
			yyVAL.str = "precision"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1289
		{
			yyVAL.str = "real"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1290
		{
			yyVAL.str = "row"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1291
		{
			yyVAL.str = "setof"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1292
		{
			yyVAL.str = "smallint"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1293
		{
			yyVAL.str = "substring"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1294
		{
			yyVAL.str = "time"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1295
		{
			yyVAL.str = "timestamp"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1296
		{
			yyVAL.str = "treat"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1297
		{
			yyVAL.str = "trim"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1298
		{
			yyVAL.str = "values"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1299
		{
			yyVAL.str = "varchar"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1300
		{
			yyVAL.str = "xmlattributes"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.str = "xmlconcat"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.str = "xmlelement"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "xmlexists"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "xmlforest"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "xmlparse"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "xmlpi"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "xmlroot"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "xmlserialize"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "xmltable"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1324
		{
			yyVAL.str = "authorization"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1325
		{
			yyVAL.str = "binary"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1326
		{
			yyVAL.str = "collation"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1327
		{
			yyVAL.str = "concurrently"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1328
		{
			yyVAL.str = "cross"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1329
		{
			yyVAL.str = "current_schema"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1330
		{
			yyVAL.str = "freeze"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1331
		{
			yyVAL.str = "full"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1332
		{
			yyVAL.str = "ilike"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1333
		{
			yyVAL.str = "inner"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1334
		{
			yyVAL.str = "is"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1335
		{
			yyVAL.str = "isnull"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = "join"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "left"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "like"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "natural"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "notnull"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "outer"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "overlaps"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "right"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "similar"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1345
		{
			yyVAL.str = "tablesample"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1346
		{
			yyVAL.str = "verbose"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1356
		{
			yyVAL.str = "all"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1357
		{
			yyVAL.str = "analyse"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "analyze"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "and"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "any"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1361
		{
			yyVAL.str = "array"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1362
		{
			yyVAL.str = "as"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.str = "asc"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1364
		{
			yyVAL.str = "asymmetric"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1365
		{
			yyVAL.str = "both"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1366
		{
			yyVAL.str = "case"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1367
		{
			yyVAL.str = "cast"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1368
		{
			yyVAL.str = "check"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1369
		{
			yyVAL.str = "collate"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1370
		{
			yyVAL.str = "column"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.str = "constraint"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1372
		{
			yyVAL.str = "create"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1373
		{
			yyVAL.str = "current_catalog"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1374
		{
			yyVAL.str = "current_date"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1375
		{
			yyVAL.str = "current_role"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1376
		{
			yyVAL.str = "current_time"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1377
		{
			yyVAL.str = "current_timestamp"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.str = "current_user"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1379
		{
			yyVAL.str = "default"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1380
		{
			yyVAL.str = "deferrable"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1381
		{
			yyVAL.str = "desc"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1382
		{
			yyVAL.str = "distinct"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1383
		{
			yyVAL.str = "do"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1384
		{
			yyVAL.str = "else"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1385
		{
			yyVAL.str = "end"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1386
		{
			yyVAL.str = "except"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1387
		{
			yyVAL.str = "false"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1388
		{
			yyVAL.str = "fetch"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1389
		{
			yyVAL.str = "for"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1390
		{
			yyVAL.str = "foreign"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1391
		{
			yyVAL.str = "from"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1392
		{
			yyVAL.str = "grant"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "group"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.str = "having"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.str = "in"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1396
		{
			yyVAL.str = "initially"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.str = "intersect"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.str = "into"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1399
		{
			yyVAL.str = "lateral"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1400
		{
			yyVAL.str = "leading"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1401
		{
			yyVAL.str = "limit"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.str = "localtime"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1403
		{
			yyVAL.str = "localtimestamp"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1404
		{
			yyVAL.str = "not"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1405
		{
			yyVAL.str = "null"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1406
		{
			yyVAL.str = "offset"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1407
		{
			yyVAL.str = "on"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1408
		{
			yyVAL.str = "only"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.str = "or"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1410
		{
			yyVAL.str = "order"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1411
		{
			yyVAL.str = "placing"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1412
		{
			yyVAL.str = "primary"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1413
		{
			yyVAL.str = "references"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1414
		{
			yyVAL.str = "returning"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1415
		{
			yyVAL.str = "select"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.str = "session_user"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1417
		{
			yyVAL.str = "some"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "symmetric"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1419
		{
			yyVAL.str = "system_user"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "table"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "then"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "to"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "trailing"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "true"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "union"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "unique"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "user"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "using"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "variadic"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "when"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "where"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "window"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "with"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1446
		{
			yyVAL.str = "abort"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1447
		{
			yyVAL.str = "absent"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1448
		{
			yyVAL.str = "absolute"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1449
		{
			yyVAL.str = "access"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "action"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "add"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "admin"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "after"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "aggregate"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1455
		{
			yyVAL.str = "all"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1456
		{
			yyVAL.str = "also"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1457
		{
			yyVAL.str = "alter"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.str = "always"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1459
		{
			yyVAL.str = "analyse"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1460
		{
			yyVAL.str = "analyze"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1461
		{
			yyVAL.str = "and"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1462
		{
			yyVAL.str = "any"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.str = "asc"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = "asensitive"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1465
		{
			yyVAL.str = "assertion"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1466
		{
			yyVAL.str = "assignment"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.str = "asymmetric"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1468
		{
			yyVAL.str = "at"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "atomic"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1470
		{
			yyVAL.str = "attach"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.str = "attribute"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1472
		{
			yyVAL.str = "authorization"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.str = "backward"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.str = "before"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1475
		{
			yyVAL.str = "begin"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1476
		{
			yyVAL.str = "between"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.str = "bigint"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "binary"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1479
		{
			yyVAL.str = "bit"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.str = "boolean"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1481
		{
			yyVAL.str = "both"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "breadth"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "by"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "cache"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "call"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "called"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.str = "cascade"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1488
		{
			yyVAL.str = "cascaded"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = "case"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = "cast"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.str = "catalog"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1492
		{
			yyVAL.str = "chain"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			yyVAL.str = "characteristics"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "check"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "checkpoint"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "class"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.str = "close"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1498
		{
			yyVAL.str = "cluster"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1499
		{
			yyVAL.str = "coalesce"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = "collate"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "collation"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "column"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "columns"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "comment"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "comments"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "commit"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "committed"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "compression"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "concurrently"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "conditional"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "configuration"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "conflict"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "connection"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "constraint"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "constraints"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "content"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "continue"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "conversion"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "copy"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "cost"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "cross"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "csv"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "cube"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "current"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "current_catalog"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "current_date"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "current_role"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "current_schema"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "current_time"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "current_timestamp"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "current_user"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "cursor"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "cycle"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "data"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "database"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "deallocate"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "dec"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "decimal"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "declare"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "default"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "defaults"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "deferrable"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "deferred"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "definer"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "delete"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "delimiter"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "delimiters"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "depends"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "depth"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "desc"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "detach"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "dictionary"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "disable"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "discard"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "distinct"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "do"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "document"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "domain"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "double"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "drop"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "each"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "else"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "empty"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "enable"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "encoding"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "encrypted"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "end"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "enum"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "error"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "escape"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "event"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "exclude"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "excluding"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "exclusive"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "execute"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "exists"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "explain"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1578
		{
			yyVAL.str = "expression"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1579
		{
			yyVAL.str = "extension"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1580
		{
			yyVAL.str = "external"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1581
		{
			yyVAL.str = "extract"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1582
		{
			yyVAL.str = "false"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1583
		{
			yyVAL.str = "family"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1584
		{
			yyVAL.str = "finalize"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1585
		{
			yyVAL.str = "first"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1586
		{
			yyVAL.str = "float"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1587
		{
			yyVAL.str = "following"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1588
		{
			yyVAL.str = "force"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1589
		{
			yyVAL.str = "foreign"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1590
		{
			yyVAL.str = "format"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "forward"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "freeze"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			yyVAL.str = "full"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1594
		{
			yyVAL.str = "function"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.str = "functions"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "generated"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "global"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "granted"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "greatest"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "grouping"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "groups"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "handler"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "header"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "hold"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "identity"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "if"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "ilike"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "immediate"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "immutable"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "implicit"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "import"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "in"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "include"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "including"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "increment"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "indent"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "index"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "indexes"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "inherit"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "inherits"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "initially"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "inline"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "inner"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "inout"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "input"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "insensitive"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "insert"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "instead"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "int"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "integer"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "interval"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "invoker"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "is"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "isolation"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "join"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "json"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "json_array"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "json_arrayagg"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "json_exists"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "json_object"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "json_objectagg"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "json_query"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "json_scalar"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "json_serialize"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "json_table"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "json_value"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "keep"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "key"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "keys"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "label"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "language"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "large"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "last"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "lateral"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "leading"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "leakproof"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "least"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "left"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "level"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "like"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "listen"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "load"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "local"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "localtime"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "localtimestamp"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "location"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "lock"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "locked"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "logged"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "mapping"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "match"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "matched"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "materialized"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "maxvalue"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "merge"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "merge_action"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "method"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "minvalue"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "mode"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "move"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "name"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "names"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "national"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "natural"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "nchar"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "nested"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "new"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "next"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "nfc"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "nfd"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "nfkc"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "nfkd"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "no"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "none"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "normalize"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "normalized"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "not"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "nothing"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "notify"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "nowait"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "null"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "nullif"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "nulls"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "numeric"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "object"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "of"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "off"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "oids"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "old"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "omit"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "only"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "operator"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "option"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "options"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "or"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "ordinality"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "others"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "out"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "outer"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "overlay"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "overriding"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "owned"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "owner"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "parallel"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "parameter"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "parser"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "partial"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "partition"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "passing"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "password"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "path"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "placing"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "plan"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "plans"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "policy"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "position"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "preceding"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "prepare"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "prepared"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "preserve"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "primary"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "prior"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "privileges"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "procedural"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "procedure"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "procedures"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "program"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "publication"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "quote"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "quotes"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "range"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "read"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "real"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "reassign"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.str = "recheck"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1756
		{
			yyVAL.str = "recursive"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1757
		{
			yyVAL.str = "ref"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1758
		{
			yyVAL.str = "references"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.str = "referencing"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.str = "refresh"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1761
		{
			yyVAL.str = "reindex"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1762
		{
			yyVAL.str = "relative"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.str = "release"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1764
		{
			yyVAL.str = "rename"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1765
		{
			yyVAL.str = "repeatable"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1766
		{
			yyVAL.str = "replace"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1767
		{
			yyVAL.str = "replica"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1768
		{
			yyVAL.str = "reset"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.str = "restart"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1770
		{
			yyVAL.str = "restrict"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.str = "return"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1772
		{
			yyVAL.str = "returns"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1773
		{
			yyVAL.str = "revoke"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1774
		{
			yyVAL.str = "right"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			yyVAL.str = "role"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1776
		{
			yyVAL.str = "rollback"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1777
		{
			yyVAL.str = "rollup"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1778
		{
			yyVAL.str = "routine"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1779
		{
			yyVAL.str = "routines"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1780
		{
			yyVAL.str = "row"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.str = "rows"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1782
		{
			yyVAL.str = "rule"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1783
		{
			yyVAL.str = "savepoint"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1784
		{
			yyVAL.str = "scalar"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1785
		{
			yyVAL.str = "schema"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1786
		{
			yyVAL.str = "schemas"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1787
		{
			yyVAL.str = "scroll"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1788
		{
			yyVAL.str = "search"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1789
		{
			yyVAL.str = "security"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1790
		{
			yyVAL.str = "select"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1791
		{
			yyVAL.str = "sequence"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1792
		{
			yyVAL.str = "sequences"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1793
		{
			yyVAL.str = "serializable"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1794
		{
			yyVAL.str = "server"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1795
		{
			yyVAL.str = "session"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1796
		{
			yyVAL.str = "session_user"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1797
		{
			yyVAL.str = "set"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1798
		{
			yyVAL.str = "setof"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1799
		{
			yyVAL.str = "sets"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1800
		{
			yyVAL.str = "share"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1801
		{
			yyVAL.str = "show"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1802
		{
			yyVAL.str = "similar"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1803
		{
			yyVAL.str = "simple"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1804
		{
			yyVAL.str = "skip"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1805
		{
			yyVAL.str = "smallint"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1806
		{
			yyVAL.str = "snapshot"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1807
		{
			yyVAL.str = "some"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1808
		{
			yyVAL.str = "source"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1809
		{
			yyVAL.str = "sql"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1810
		{
			yyVAL.str = "stable"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1811
		{
			yyVAL.str = "standalone"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1812
		{
			yyVAL.str = "start"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1813
		{
			yyVAL.str = "statement"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1814
		{
			yyVAL.str = "statistics"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1815
		{
			yyVAL.str = "stdin"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1816
		{
			yyVAL.str = "stdout"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1817
		{
			yyVAL.str = "storage"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1818
		{
			yyVAL.str = "stored"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1819
		{
			yyVAL.str = "strict"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1820
		{
			yyVAL.str = "string"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1821
		{
			yyVAL.str = "strip"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1822
		{
			yyVAL.str = "subscription"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1823
		{
			yyVAL.str = "substring"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1824
		{
			yyVAL.str = "support"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1825
		{
			yyVAL.str = "symmetric"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1826
		{
			yyVAL.str = "sysid"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1827
		{
			yyVAL.str = "system"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1828
		{
			yyVAL.str = "system_user"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1829
		{
			yyVAL.str = "table"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1830
		{
			yyVAL.str = "tables"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1831
		{
			yyVAL.str = "tablesample"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1832
		{
			yyVAL.str = "tablespace"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1833
		{
			yyVAL.str = "target"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1834
		{
			yyVAL.str = "temp"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1835
		{
			yyVAL.str = "template"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1836
		{
			yyVAL.str = "temporary"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1837
		{
			yyVAL.str = "text"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1838
		{
			yyVAL.str = "then"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1839
		{
			yyVAL.str = "ties"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1840
		{
			yyVAL.str = "time"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1841
		{
			yyVAL.str = "timestamp"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1842
		{
			yyVAL.str = "trailing"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1843
		{
			yyVAL.str = "transaction"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1844
		{
			yyVAL.str = "transform"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1845
		{
			yyVAL.str = "treat"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1846
		{
			yyVAL.str = "trigger"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1847
		{
			yyVAL.str = "trim"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1848
		{
			yyVAL.str = "true"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1849
		{
			yyVAL.str = "truncate"
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1850
		{
			yyVAL.str = "trusted"
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1851
		{
			yyVAL.str = "type"
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1852
		{
			yyVAL.str = "types"
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1853
		{
			yyVAL.str = "uescape"
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1854
		{
			yyVAL.str = "unbounded"
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1855
		{
			yyVAL.str = "uncommitted"
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1856
		{
			yyVAL.str = "unconditional"
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1857
		{
			yyVAL.str = "unencrypted"
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1858
		{
			yyVAL.str = "unique"
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1859
		{
			yyVAL.str = "unknown"
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1860
		{
			yyVAL.str = "unlisten"
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1861
		{
			yyVAL.str = "unlogged"
		}
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1862
		{
			yyVAL.str = "until"
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1863
		{
			yyVAL.str = "update"
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1864
		{
			yyVAL.str = "user"
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1865
		{
			yyVAL.str = "using"
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1866
		{
			yyVAL.str = "vacuum"
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1867
		{
			yyVAL.str = "valid"
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1868
		{
			yyVAL.str = "validate"
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1869
		{
			yyVAL.str = "validator"
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1870
		{
			yyVAL.str = "value"
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1871
		{
			yyVAL.str = "values"
		}
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1872
		{
			yyVAL.str = "varchar"
		}
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1873
		{
			yyVAL.str = "variadic"
		}
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1874
		{
			yyVAL.str = "verbose"
		}
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1875
		{
			yyVAL.str = "version"
		}
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1876
		{
			yyVAL.str = "view"
		}
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1877
		{
			yyVAL.str = "views"
		}
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1878
		{
			yyVAL.str = "volatile"
		}
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1879
		{
			yyVAL.str = "when"
		}
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1880
		{
			yyVAL.str = "whitespace"
		}
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1881
		{
			yyVAL.str = "work"
		}
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1882
		{
			yyVAL.str = "wrapper"
		}
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1883
		{
			yyVAL.str = "write"
		}
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1884
		{
			yyVAL.str = "xml"
		}
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1885
		{
			yyVAL.str = "xmlattributes"
		}
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1886
		{
			yyVAL.str = "xmlconcat"
		}
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1887
		{
			yyVAL.str = "xmlelement"
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1888
		{
			yyVAL.str = "xmlexists"
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1889
		{
			yyVAL.str = "xmlforest"
		}
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1890
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1891
		{
			yyVAL.str = "xmlparse"
		}
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1892
		{
			yyVAL.str = "xmlpi"
		}
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1893
		{
			yyVAL.str = "xmlroot"
		}
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1894
		{
			yyVAL.str = "xmlserialize"
		}
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1895
		{
			yyVAL.str = "xmltable"
		}
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1896
		{
			yyVAL.str = "yes"
		}
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1897
		{
			yyVAL.str = "zone"
		}
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1912
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1069:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1914
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1918
		{
			collateClause := ast.NewCollateClause(yyDollar[3].list)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1071:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1924
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1929
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1073:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1934
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1074:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1939
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1944
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1949
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1077:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1954
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1078:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1959
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1079:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1964
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1080:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1969
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1081:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1974
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1082:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1979
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1083:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1984
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1989
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1085:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1994
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1999
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1087:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2004
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1088:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2008
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1089:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2012
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1090:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2016
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1091:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2020
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1092:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2024
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1093:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2028
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1094:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2033
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1095:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2040
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1096:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2045
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1097:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2052
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1098:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2057
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1099:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2064
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1100:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2069
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1101:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2076
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1102:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2083
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1103:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2090
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1104:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2097
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2104
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2108
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2112
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2116
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2120
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlaps"))
			leftList := yyDollar[1].list
			rightList := yyDollar[3].list
			combinedList := ast.NewNodeList()
			combinedList.Items = append(leftList.Items, rightList.Items...)
			yyVAL.node = ast.NewFuncCall(funcName, combinedList, 0)
		}
	case 1110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2129
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_TRUE)
		}
	case 1111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2133
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_TRUE)
		}
	case 1112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2137
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_FALSE)
		}
	case 1113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2141
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_FALSE)
		}
	case 1114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2145
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_UNKNOWN)
		}
	case 1115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2149
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_UNKNOWN)
		}
	case 1116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2153
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1117:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2158
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1118:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2163
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1119:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2168
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1120:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2173
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1121:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2178
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2183
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2188
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2193
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			sublink := ast.NewSubLink(subLinkType, yyDollar[4].stmt)
			sublink.Testexpr = yyDollar[1].node
			sublink.OperName = operName
			yyVAL.node = sublink
		}
	case 1125:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2202
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			if subLinkType == ast.ANY_SUBLINK {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ANY, operName, yyDollar[1].node, yyDollar[5].node, 0)
			} else {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ALL, operName, yyDollar[1].node, yyDollar[5].node, 0)
			}
		}
	case 1126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2212
		{
			yylex.Error("UNIQUE predicate is not yet implemented")
		}
	case 1127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2216
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
		}
	case 1128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2221
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2227
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2233
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[3].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2240
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2247
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[4].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2255
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[3].ival)
			uniqueKeys := yyDollar[4].bval
			yyVAL.node = ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
		}
	case 1134:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2272
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[4].ival)
			uniqueKeys := yyDollar[5].bval
			jsonPredicate := ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(jsonPredicate))
		}
	case 1135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2291
		{
			yyVAL.node = ast.NewSetToDefault(0, 0, 0)
		}
	case 1136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2296
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2298
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2302
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2307
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2312
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2317
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2322
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2327
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2332
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2337
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2342
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2347
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2352
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2357
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2362
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2367
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2373
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2374
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2376
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2385
		{
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewParenExpr(ast.NewA_Indirection(yyDollar[2].node, yyDollar[4].list, 0), 0)
			} else {
				yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
			}
		}
	case 1156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2392
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2393
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2395
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2399
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2404
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2408
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2412
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2416
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2422
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2428
		{
			exprList := yyDollar[3].list
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     exprList,
			}
			yyVAL.node = grouping
		}
	case 1166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2440
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2444
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2448
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2452
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2456
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2460
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2465
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2468
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2471
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2472
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2473
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2478
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2482
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2492
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2496
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2502
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2503
		{
			yyVAL.node = nil
		}
	case 1183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2507
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2511
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2515
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1186:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2519
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1187:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2524
		{
			yyVAL.list = nil
		}
	case 1188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2526
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2538
		{
			funcCall := yyDollar[1].node.(*ast.FuncCall)

			// Apply within_group_clause if present
			if yyDollar[2].list != nil {
				// WITHIN GROUP (ORDER BY ...) - store the sort list
				funcCall.AggOrder = yyDollar[2].list
				funcCall.AggWithinGroup = true
			}

			// Apply filter_clause if present
			if yyDollar[3].node != nil {
				// FILTER (WHERE condition) - store the filter expression
				funcCall.AggFilter = yyDollar[3].node
			}

			// Apply over_clause if present (window functions)
			if yyDollar[4].windef != nil {
				funcCall.Over = yyDollar[4].windef
			}

			yyVAL.node = funcCall
		}
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2562
		{
			jsonAgg := yyDollar[1].node

			// Create or get the Constructor
			var constructor *ast.JsonAggConstructor

			// Handle the filter_clause and over_clause by setting them in the Constructor
			switch jsonFunc := jsonAgg.(type) {
			case *ast.JsonObjectAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			case *ast.JsonArrayAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			}

			// Set filter and over clauses outside the switch (DRY)
			if constructor != nil {
				if yyDollar[2].node != nil {
					constructor.AggFilter = yyDollar[2].node.(ast.Node)
				}
				if yyDollar[3].windef != nil {
					constructor.Over = yyDollar[3].windef
				}
			}

			yyVAL.node = jsonAgg
		}
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2595
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1192:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2601
		{
			// SystemFuncName("pg_collation_for")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("pg_collation_for"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2609
		{
			// makeSQLValueFunction(SVFOP_CURRENT_DATE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_DATE, 0, -1, 0)
		}
	case 1194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2614
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME, 0, -1, 0)
		}
	case 1195:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2619
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2624
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP, 0, -1, 0)
		}
	case 1197:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2629
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2634
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME, 0, -1, 0)
		}
	case 1199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2639
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2644
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP, 0, -1, 0)
		}
	case 1201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2649
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2654
		{
			// makeSQLValueFunction(SVFOP_CURRENT_ROLE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_ROLE, 0, -1, 0)
		}
	case 1203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2659
		{
			// makeSQLValueFunction(SVFOP_CURRENT_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_USER, 0, -1, 0)
		}
	case 1204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2664
		{
			// makeSQLValueFunction(SVFOP_SESSION_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_SESSION_USER, 0, -1, 0)
		}
	case 1205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2669
		{
			// SystemFuncName("system_user")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("system_user"))
			funcCall := ast.NewFuncCall(funcName, nil, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2677
		{
			// makeSQLValueFunction(SVFOP_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_USER, 0, -1, 0)
		}
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2682
		{
			// makeSQLValueFunction(SVFOP_CURRENT_CATALOG, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_CATALOG, 0, -1, 0)
		}
	case 1208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2687
		{
			// makeSQLValueFunction(SVFOP_CURRENT_SCHEMA, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_SCHEMA, 0, -1, 0)
		}
	case 1209:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2692
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[3].node, yyDollar[5].typnam, 0)
		}
	case 1210:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2696
		{
			// SystemFuncName("extract")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("extract"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2704
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1212:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2712
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			args := ast.NewNodeList(yyDollar[3].node)
			args.Items = append(args.Items, ast.NewA_Const(ast.NewString(yyDollar[5].str), -1))
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2722
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1214:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2730
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2738
		{
			// SystemFuncName("position")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("position"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1216:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2746
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1217:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2754
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1218:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2762
		{
			// SystemFuncName("treat")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), llast(yyDollar[5].typnam.Names))
			args := ast.NewNodeList(yyDollar[3].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1219:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2771
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1220:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2779
		{
			// SystemFuncName("ltrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("ltrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1221:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2787
		{
			// SystemFuncName("rtrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("rtrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2795
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1223:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2803
		{
			// makeSimpleA_Expr(AEXPR_NULLIF, "=", $3, $5, @1)
			operName := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NULLIF, operName, yyDollar[3].node, yyDollar[5].node, 0)
		}
	case 1224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2809
		{
			// CoalesceExpr *c = makeNode(CoalesceExpr); c->args = $3; c->location = @1
			yyVAL.node = ast.NewCoalesceExpr(0, yyDollar[3].list)
		}
	case 1225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2814
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_GREATEST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_GREATEST, yyDollar[3].list, 0)
		}
	case 1226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2819
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_LEAST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_LEAST, yyDollar[3].list, 0)
		}
	case 1227:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2824
		{
			// makeXmlExpr(IS_XMLCONCAT, NULL, NIL, $3, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLCONCAT, "", nil, nil, yyDollar[3].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1228:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2829
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1229:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2834
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1230:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2839
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, $6, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, yyDollar[6].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1231:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:2844
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, $8, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, yyDollar[8].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2849
		{
			// makeXmlExpr(IS_XMLFOREST, NULL, $3, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLFOREST, "", yyDollar[3].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1233:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2854
		{
			// makeXmlExpr(IS_XMLPARSE, NULL, NIL, list_make2($4, makeBoolAConst($5, -1)), @1)
			// x->xmloption = $3
			wsOption := ast.NewA_Const(ast.NewBoolean(yyDollar[5].bval), -1)
			args := ast.NewNodeList(yyDollar[4].node, wsOption)
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPARSE, "", nil, nil, args, xmlOption, false, 0, -1, 0)
		}
	case 1234:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2863
		{
			// SystemFuncName("xmlexists") - xmlexists(A PASSING [BY REF] B [BY REF]) is converted to xmlexists(A, B)
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("xmlexists"))
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[4].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2872
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1236:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2877
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, list_make1($6), @1)
			args := ast.NewNodeList(yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1237:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2883
		{
			// makeXmlExpr(IS_XMLROOT, NULL, NIL, list_make3(...), @1)
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[5].node, yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLROOT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1238:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:2889
		{
			// XmlSerialize node - n->xmloption = $3; n->expr = $4; n->typeName = $6; n->indent = $7;
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlSerialize(xmlOption, yyDollar[4].node, yyDollar[6].typnam, yyDollar[7].bval, 0)
		}
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2899
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2903
		{
			yyVAL.list = nil
		}
	case 1241:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2910
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1242:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2914
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2918
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node)
		}
	case 1244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2922
		{
			sysTypeName := &ast.TypeName{
				Names:   ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("int4")),
				Typemod: -1,
			}
			tc := ast.NewTypeCast(yyDollar[3].node, sysTypeName, -1)
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, ast.NewInteger(1), tc)
		}
	case 1245:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2931
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2938
		{
			yyDollar[3].list.Append(yyDollar[1].node)
			yyVAL.list = yyDollar[3].list
		}
	case 1247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2943
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2947
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2954
		{
			// list_make2(makeStringConst($1, @1), $3)
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str), yyDollar[3].node)
		}
	case 1250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2964
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2965
		{
			yyVAL.str = "year"
		}
	case 1252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2966
		{
			yyVAL.str = "month"
		}
	case 1253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2967
		{
			yyVAL.str = "day"
		}
	case 1254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2968
		{
			yyVAL.str = "hour"
		}
	case 1255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2969
		{
			yyVAL.str = "minute"
		}
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2970
		{
			yyVAL.str = "second"
		}
	case 1257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2971
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1258:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2976
		{
			/* overlay(A PLACING B FROM C FOR D) is converted to overlay(A, B, C, D) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 1259:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2981
		{
			/* overlay(A PLACING B FROM C) is converted to overlay(A, B, C) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2989
		{
			yyVAL.list = ast.NewNodeList(yyDollar[3].node, yyDollar[1].node)
		}
	case 1261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2992
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2997
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3001
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3009
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3013
		{
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3018
		{
			yyVAL.bval = true
		}
	case 1267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3019
		{
			yyVAL.bval = false
		}
	case 1268:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3020
		{
			yyVAL.bval = false
		}
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3023
		{
			yyVAL.bval = true
		}
	case 1270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3024
		{
			yyVAL.bval = false
		}
	case 1271:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3025
		{
			yyVAL.bval = false
		}
	case 1272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3030
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3034
		{
			yyVAL.node = ast.NewA_Const(ast.NewNull(), 0)
		}
	case 1274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3041
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_YES)), 0)
		}
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3045
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO)), 0)
		}
	case 1276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3049
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO_VALUE)), 0)
		}
	case 1277:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3053
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_OMITTED)), 0)
		}
	case 1278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3060
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3061
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3065
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3069
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3080
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3084
		{
			// Special case for aggregates like COUNT(*) - set AggStar to true
			funcCall := ast.NewFuncCall(yyDollar[1].list, nil, 0)
			funcCall.AggStar = true
			yyVAL.node = funcCall
		}
	case 1284:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3091
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1285:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3097
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1286:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3103
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1287:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3111
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1288:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3117
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3125
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3129
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3136
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3140
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3144
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1294:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3151
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3156
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3157
		{
			yyVAL.node = nil
		}
	case 1297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3161
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3163
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3171
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3177
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3178
		{
			yyVAL.node = nil
		}
	case 1302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3183
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3187
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3191
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3196
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3198
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3205
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3206
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1309:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3208
		{
			nodeList := yyDollar[2].list
			nodeList.Append(yyDollar[4].node)
			yyVAL.list = nodeList
		}
	case 1310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3215
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3216
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1312:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3220
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3226
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3227
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3228
		{
			yyVAL.ival = int(ast.ALL_SUBLINK)
		}
	case 1316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3233
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3237
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3241
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~"))
		}
	case 1319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3245
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~"))
		}
	case 1320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3249
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~*"))
		}
	case 1321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3253
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~*"))
		}
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3259
		{
			yyVAL.str = "NFC"
		}
	case 1323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3260
		{
			yyVAL.str = "NFD"
		}
	case 1324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3261
		{
			yyVAL.str = "NFKC"
		}
	case 1325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3262
		{
			yyVAL.str = "NFKD"
		}
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3266
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3267
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3268
		{
			yyVAL.ival = int(ast.JS_TYPE_ARRAY)
		}
	case 1329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3269
		{
			yyVAL.ival = int(ast.JS_TYPE_OBJECT)
		}
	case 1330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3270
		{
			yyVAL.ival = int(ast.JS_TYPE_SCALAR)
		}
	case 1331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3274
		{
			yyVAL.bval = true
		}
	case 1332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3275
		{
			yyVAL.bval = true
		}
	case 1333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3276
		{
			yyVAL.bval = false
		}
	case 1334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3277
		{
			yyVAL.bval = false
		}
	case 1335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3278
		{
			yyVAL.bval = false
		}
	case 1336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3283
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3287
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3296
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3301
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3302
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3303
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3304
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3305
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3308
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3309
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3310
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3313
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3316
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3320
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3324
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3331
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3335
		{
			yyVAL.list = nil
		}
	case 1353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3341
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3347
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3358
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3362
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3366
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3370
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3374
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3378
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3382
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3386
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3391
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3396
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3401
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3407
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3411
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3417
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3421
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3427
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3435
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3443
		{
			yyVAL.str = "varchar"
		}
	case 1373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3447
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3455
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3463
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3473
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3484
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1378:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3498
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3510
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1380:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3522
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3532
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1382:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3542
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3552
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3563
		{
			yyVAL.ival = 1
		}
	case 1385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3564
		{
			yyVAL.ival = 0
		}
	case 1386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3565
		{
			yyVAL.ival = 0
		}
	case 1387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3568
		{
			yyVAL.ival = 1
		}
	case 1388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3569
		{
			yyVAL.ival = 0
		}
	case 1389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3573
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3583
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3590
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1392:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3594
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3601
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1394:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3605
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3610
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3611
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3614
		{
			yyVAL.str = "+"
		}
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3615
		{
			yyVAL.str = "-"
		}
	case 1399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3616
		{
			yyVAL.str = "*"
		}
	case 1400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3617
		{
			yyVAL.str = "/"
		}
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3618
		{
			yyVAL.str = "%"
		}
	case 1402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3619
		{
			yyVAL.str = "^"
		}
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3620
		{
			yyVAL.str = "<"
		}
	case 1404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3621
		{
			yyVAL.str = ">"
		}
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3622
		{
			yyVAL.str = "="
		}
	case 1406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3623
		{
			yyVAL.str = "<="
		}
	case 1407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3624
		{
			yyVAL.str = ">="
		}
	case 1408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3625
		{
			yyVAL.str = "<>"
		}
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3629
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3633
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3642
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3643
		{
			yyVAL.list = nil
		}
	case 1413:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3648
		{
			// WITHIN GROUP (ORDER BY ...) for ordered-set aggregates
			yyVAL.list = yyDollar[4].list
		}
	case 1414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3652
		{
			yyVAL.list = nil
		}
	case 1415:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3657
		{
			// FILTER (WHERE condition) for aggregate filtering
			yyVAL.node = yyDollar[4].node
		}
	case 1416:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3661
		{
			yyVAL.node = nil
		}
	case 1417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3665
		{
			yyVAL.ival = 0
		}
	case 1418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3666
		{
			yyVAL.ival = 0
		}
	case 1419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3670
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3675
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3690
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3691
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3695
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3700
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3701
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3710
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3711
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3720
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3722
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			// Use NodeList directly for SortClause
			selectStmt.SortClause = yyDollar[2].list
			yyVAL.stmt = selectStmt
		}
	case 1430:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3729
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			selectStmt.LockingClause = yyDollar[3].list // Set the locking clause
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3741
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			if yyDollar[3].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[3].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[3].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[3].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3753
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3759
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			yyVAL.stmt = selectStmt
		}
	case 1434:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3766
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			if yyDollar[5].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[5].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[5].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[5].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1435:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3779
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[5].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3798
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3799
		{
			yyVAL.list = nil
		}
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3803
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3804
		{
			yyVAL.list = nil
		}
	case 1440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3809
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3813
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3821
		{
			lockingClause := &ast.LockingClause{
				BaseNode:   ast.BaseNode{Tag: ast.T_LockingClause},
				Strength:   ast.LockClauseStrength(yyDollar[1].ival),
				LockedRels: yyDollar[2].list, // Store as *NodeList directly
				WaitPolicy: ast.LockWaitPolicy(yyDollar[3].ival),
			}
			yyVAL.node = lockingClause
		}
	case 1443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3833
		{
			yyVAL.ival = int(ast.LCS_FORUPDATE)
		}
	case 1444:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3834
		{
			yyVAL.ival = int(ast.LCS_FORNOKEYUPDATE)
		}
	case 1445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3835
		{
			yyVAL.ival = int(ast.LCS_FORSHARE)
		}
	case 1446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3836
		{
			yyVAL.ival = int(ast.LCS_FORKEYSHARE)
		}
	case 1447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3840
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3841
		{
			yyVAL.list = nil
		}
	case 1449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3846
		{
			yyVAL.ival = int(ast.LockWaitError)
		}
	case 1450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3847
		{
			yyVAL.ival = int(ast.LockWaitSkip)
		}
	case 1451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3848
		{
			yyVAL.ival = int(ast.LockWaitBlock)
		}
	case 1452:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3859
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1453:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3878
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3896
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3906
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3917
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3918
		{
			yyVAL.list = nil
		}
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3922
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3923
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3928
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3932
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3937
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3942
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3953
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3954
		{
			yyVAL.list = nil
		}
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3958
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3959
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3968
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3976
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3987
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3998
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4002
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4008
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			if yyDollar[2].alias != nil {
				rangeFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeFunc
		}
	case 1474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4016
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeFunc
		}
	case 1475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4025
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4033
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4042
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4050
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4062
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4068
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4075
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4081
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4087
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4097
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4101
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4107
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4124
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1488:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4128
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1489:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4137
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1490:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4163
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1491:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4189
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4197
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4207
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4208
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4209
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4210
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4215
		{
			yyVAL.ival = 1
		}
	case 1498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4216
		{
			yyVAL.ival = 0
		}
	case 1499:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4226
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4237
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4248
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4252
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4256
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4262
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4263
		{
			yyVAL.with = nil
		}
	case 1506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4268
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4272
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1508:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4280
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4308
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4309
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4310
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1512:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4315
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1513:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4321
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4327
		{
			yyVAL.node = nil
		}
	case 1515:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4334
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1516:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4343
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4351
		{
			yyVAL.node = nil
		}
	case 1518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4362
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = ast.NewNodeList(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1519:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4370
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists.Append(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4384
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4385
		{
			yyVAL.node = nil
		}
	case 1522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4393
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4395
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4399
		{
			yyVAL.node = nil
		}
	case 1525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4403
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4411
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4412
		{
			yyVAL.alias = nil
		}
	case 1528:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4417
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4422
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1530:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4426
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4431
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4439
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4443
		{
			yyVAL.alias = nil
		}
	case 1534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4451
		{
			yyVAL.ival = 1
		}
	case 1535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4452
		{
			yyVAL.ival = 0
		}
	case 1536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4456
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1537:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4457
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4461
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4462
		{
			yyVAL.list = nil
		}
	case 1540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4472
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].node.(*ast.RangeVar), nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4475
		{
			yyVAL.into = nil
		}
	case 1542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4486
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1543:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4495
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4505
		{
			yyVAL.ival = 1
		}
	case 1545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4506
		{
			yyVAL.ival = 0
		}
	case 1546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4512
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4516
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4523
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1549:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4532
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4533
		{
			yyVAL.list = nil
		}
	case 1551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4543
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4547
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4559
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4572
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1555:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4573
		{
			yyVAL.list = nil
		}
	case 1556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4579
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4583
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4592
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4603
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4608
		{
			yyVAL.node = nil
		}
	case 1561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4613
		{
			yyVAL.str = "BY REF"
		}
	case 1562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4614
		{
			yyVAL.str = "BY VALUE"
		}
	case 1563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4620
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4624
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4628
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4632
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4640
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4644
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4652
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4657
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1571:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4666
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1572:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:4674
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4685
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4689
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4698
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4703
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4708
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4718
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4722
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4731
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4735
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4739
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4743
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4747
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1585:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:4760
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4784
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4795
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4796
		{
			yyVAL.node = nil
		}
	case 1589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4801
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4802
		{
			yyVAL.node = nil
		}
	case 1591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4806
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4807
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4812
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4818
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4819
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4825
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4829
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4841
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4845
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4852
		{
			yyVAL.bval = false
		}
	case 1601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4853
		{
			yyVAL.bval = true
		}
	case 1602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4854
		{
			yyVAL.bval = false
		}
	case 1603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4858
		{
			yyVAL.bval = false
		}
	case 1604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4859
		{
			yyVAL.bval = true
		}
	case 1605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4860
		{
			yyVAL.bval = true
		}
	case 1606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4865
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4866
		{
			yyVAL.list = nil
		}
	case 1608:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4877
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)

			yyVAL.node = ast.NewJsonObjectAgg(constructor, yyDollar[3].node.(*ast.JsonKeyValue), yyDollar[4].bval, yyDollar[5].bval)
		}
	case 1609:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4892
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)
			constructor.AggOrder = yyDollar[4].list
			yyVAL.node = ast.NewJsonArrayAgg(constructor, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].bval)
		}
	case 1610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4905
		{
			var jsonFormat *ast.JsonFormat
			if yyDollar[3].node != nil {
				jsonFormat = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonOutput(yyDollar[2].typnam, ast.NewJsonReturning(jsonFormat, 0, 0))
		}
	case 1611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4912
		{
			yyVAL.node = nil
		}
	case 1612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4918
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4926
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4937
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4938
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4939
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4940
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4941
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4942
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4943
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4944
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4949
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4953
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1624:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4957
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4961
		{
			yyVAL.node = nil
		}
	case 1626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4966
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4967
		{
			yyVAL.node = nil
		}
	case 1628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4972
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4973
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4974
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4975
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1632:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4976
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1633:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4977
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4978
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4979
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4980
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1637:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4985
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4986
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1639:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4987
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4988
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4989
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4995
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5015
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5025
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5026
		{
			yyVAL.node = nil
		}
	case 1646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5031
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5032
		{
			yyVAL.node = nil
		}
	case 1648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5038
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5042
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5051
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1651:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5060
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1652:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5074
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1653:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5088
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1654:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5099
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1655:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5108
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5119
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1657:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5120
		{
			yyVAL.node = nil
		}
	case 1658:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5136
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5148
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5152
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5161
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1662:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5167
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1663:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5174
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1664:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5181
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5189
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5198
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5199
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5204
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5208
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5216
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1671:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5228
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5241
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5245
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5256
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1675:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5262
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5282
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5288
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5289
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1679:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5299
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5311
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1681:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5315
		{
			yyVAL.list = nil
		}
	case 1682:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5330
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5347
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5351
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1685:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5362
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1686:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:5386
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5422
		{
			yyVAL.ival = 1
		}
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5423
		{
			yyVAL.ival = 0
		}
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5427
		{
			yyVAL.ival = 1
		}
	case 1690:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5428
		{
			yyVAL.ival = 0
		}
	case 1691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5432
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5433
		{
			yyVAL.str = ""
		}
	case 1693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5434
		{
			yyVAL.str = ""
		}
	case 1694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5439
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1695:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5442
		{
			yyVAL.node = nil
		}
	case 1696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5447
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1697:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5450
		{
			yyVAL.node = nil
		}
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5454
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5455
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5460
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1701:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5468
		{
			yyVAL.list = nil
		}
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5475
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5479
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5483
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5487
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5491
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5495
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5499
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5503
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5507
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5511
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1712:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5515
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1713:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5519
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5523
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5527
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5531
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5539
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1718:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5543
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5550
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5556
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5557
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5558
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5559
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1724:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5560
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1725:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5561
		{
			yyVAL.node = nil
		}
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5566
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5570
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5576
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5580
		{
			yyVAL.str = "true"
		}
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5581
		{
			yyVAL.str = "false"
		}
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5582
		{
			yyVAL.str = "on"
		}
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5583
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5587
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5588
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5590
		{
			f := ast.NewFloat(yyDollar[2].str)
			f.FVal = "-" + f.FVal
			yyVAL.node = f
		}
	case 1736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5595
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5599
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5600
		{
			yyVAL.node = nil
		}
	case 1739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5604
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5605
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5606
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5607
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1743:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5608
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5609
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5610
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5611
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5615
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5616
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5617
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5621
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5622
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5623
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5624
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5625
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5630
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5635
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5642
		{
			yyVAL.bval = true
		}
	case 1758:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5643
		{
			yyVAL.bval = false
		}
	case 1759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5647
		{
			yyVAL.ival = 1
		}
	case 1760:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5648
		{
			yyVAL.ival = 0
		}
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5664
		{
			yyVAL.node = nil
		}
	case 1764:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5666
		{
			yyVAL.node = nil
		}
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5674
		{
			yyVAL.ival = 1
		}
	case 1766:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5675
		{
			yyVAL.ival = 0
		}
	case 1767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5679
		{
			yyVAL.ival = 1
		}
	case 1768:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5680
		{
			yyVAL.ival = 0
		}
	case 1769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5684
		{
			yyVAL.ival = 1
		}
	case 1770:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5685
		{
			yyVAL.ival = 0
		}
	case 1771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5689
		{
			yyVAL.ival = 1
		}
	case 1772:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5690
		{
			yyVAL.ival = 0
		}
	case 1773:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5699
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1774:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5705
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1775:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5711
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1776:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5717
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1777:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5723
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5731
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1779:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5732
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1780:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5736
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1781:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5737
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5741
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1783:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5742
		{
			yyVAL.node = nil
		}
	case 1784:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5747
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5762
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5771
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1787:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5778
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1788:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5785
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1789:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5798
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1790:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5811
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1791:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5820
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1792:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5835
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1793:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5845
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1794:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5853
		{
			yyVAL.onconflict = nil
		}
	case 1795:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5864
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1796:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5873
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1797:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5880
		{
			yyVAL.node = nil
		}
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5891
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1799:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5895
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5902
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1801:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5906
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1802:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5913
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1803:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5918
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1804:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5923
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1805:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5931
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1806:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5942
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1807:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5956
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1808:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5957
		{
			yyVAL.list = nil
		}
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5961
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5962
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1811:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5963
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1812:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5967
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1813:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5968
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1814:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5969
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5974
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1816:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5978
		{
			yyVAL.list = nil
		}
	case 1817:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:5999
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1818:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:6015
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1819:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:6032
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1820:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:6048
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1821:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6065
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1822:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:6082
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6100
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6101
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1825:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6102
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1826:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6103
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1827:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6104
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1828:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6105
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6106
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1830:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6107
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6111
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1832:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6112
		{
			yyVAL.list = nil
		}
	case 1833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6117
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1834:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6122
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6129
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6130
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6131
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1838:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6136
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1839:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6143
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1840:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6147
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1841:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6151
		{
			yyVAL.ival = 0
		}
	case 1842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6157
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6158
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6159
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6160
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6161
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6162
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6163
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6164
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6165
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6166
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6171
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1853:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6172
		{
			yyVAL.str = "default"
		}
	case 1854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6176
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1855:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6177
		{
			yyVAL.str = ""
		}
	case 1856:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6181
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1857:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6182
		{
			yyVAL.str = "default"
		}
	case 1858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6186
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1859:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6187
		{
			yyVAL.str = ""
		}
	case 1860:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6192
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1861:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6193
		{
			yyVAL.list = nil
		}
	case 1862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6198
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1863:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6204
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6211
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6212
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1866:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6217
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 1867:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6223
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 1868:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6234
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 1869:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6263
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 1870:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6272
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 1871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6282
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 1872:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6291
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 1873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6298
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1874:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6302
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1875:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6310
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1876:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6311
		{
			yyVAL.list = nil
		}
	case 1877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6316
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1878:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6320
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1879:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6328
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6334
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6339
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1882:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6344
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			colDef.Constraints = yyDollar[6].list
			yyVAL.node = colDef
		}
	case 1883:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6356
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1884:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6361
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1885:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6368
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6373
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6374
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1888:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6376
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 1889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6389
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1890:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6394
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1891:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6399
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 1892:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6404
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 1893:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6412
		{
			yyVAL.bval = true
		}
	case 1894:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6413
		{
			yyVAL.bval = false
		}
	case 1895:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6414
		{
			yyVAL.bval = true
		}
	case 1896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6418
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 1897:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6419
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 1898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6424
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1899:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6426
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6431
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1901:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6435
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1902:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6439
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 1903:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6449
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 1904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6455
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1905:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6456
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1906:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6461
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 1907:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6465
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 1908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6469
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 1909:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6473
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 1910:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6477
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 1911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6481
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 1912:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6485
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 1913:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6489
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 1914:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6493
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 1915:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6497
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 1916:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6501
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 1917:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6505
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 1918:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6509
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 1919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6513
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1920:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6517
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6521
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 1922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6527
		{
		}
	case 1923:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6528
		{
		}
	case 1924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6532
		{
		}
	case 1925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6533
		{
		}
	case 1926:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6534
		{
		}
	case 1927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6539
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 1928:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6546
		{
			yyVAL.bval = false
		}
	case 1929:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6550
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1930:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6551
		{
			yyVAL.list = nil
		}
	case 1931:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6556
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 1932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6560
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 1933:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6564
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 1934:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6573
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 1935:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6579
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 1936:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6585
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 1937:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6591
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 1938:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6608
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 1939:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6615
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 1940:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6625
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6630
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1942:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6635
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 1943:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6643
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 1944:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6654
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 1945:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6665
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 1946:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6675
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 1947:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:6686
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 1948:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6707
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 1949:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6721
		{
			yyVAL.bval = true
		}
	case 1950:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6722
		{
			yyVAL.bval = false
		}
	case 1951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6728
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1952:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6734
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1953:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6742
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 1954:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6747
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 1955:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6755
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1956:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6759
		{
			yyVAL.list = nil
		}
	case 1957:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6766
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 1958:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6770
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 1959:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6774
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 1960:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6778
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 1961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6785
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 1962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6795
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 1963:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6805
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 1964:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6812
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 1965:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6819
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 1966:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6834
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 1967:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6847
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 1968:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6854
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6861
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6868
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1971:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6875
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 1972:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6882
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 1973:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6891
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1974:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6892
		{
			yyVAL.list = nil
		}
	case 1975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6896
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 1976:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6897
		{
			yyVAL.partspec = nil
		}
	case 1977:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6902
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 1978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6910
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1979:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6915
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1980:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6923
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 1981:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6930
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 1982:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6937
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 1983:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6946
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1984:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6947
		{
			yyVAL.str = ""
		}
	case 1985:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6951
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 1986:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6952
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 1987:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6953
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 1988:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6954
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 1989:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6958
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1990:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6959
		{
			yyVAL.str = ""
		}
	case 1991:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6963
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1992:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6964
		{
			yyVAL.str = ""
		}
	case 1993:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6968
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1994:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:6981
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 1995:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:6996
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 1996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7012
		{
			yyVAL.bval = true
		}
	case 1997:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7013
		{
			yyVAL.bval = false
		}
	case 1998:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7017
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1999:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7018
		{
			yyVAL.str = "btree"
		}
	case 2000:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7022
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2001:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7023
		{
			yyVAL.list = nil
		}
	case 2002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7028
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2003:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7033
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2004:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7041
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2005:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7042
		{
			yyVAL.list = nil
		}
	case 2006:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7054
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2007:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7060
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2008:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7067
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2009:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7073
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2010:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7080
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2011:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7089
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 2012:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7095
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2013:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7102
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 2014:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7108
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2015:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7115
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 2016:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7121
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2017:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7128
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2018:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7134
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2019:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7141
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2020:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7150
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2021:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7160
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2022:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7167
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2023:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7175
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2024:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7182
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2025:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7190
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 2026:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:7197
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 2027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7208
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2028:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7213
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7221
		{
			yyVAL.bval = true
		}
	case 2030:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7222
		{
			yyVAL.bval = false
		}
	case 2031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7227
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].rolespec)
		}
	case 2032:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7232
		{
			yyDollar[1].list.Append(yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 2033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7240
		{
			roleSpec := yyDollar[1].rolespec

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 2034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7271
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.rolespec = roleSpec
		}
	case 2035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7294
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 2036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7301
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 2037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7308
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 2038:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7319
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2039:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7326
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2040:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7333
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2041:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7340
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2042:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7347
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 2043:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7352
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 2044:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7357
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 2045:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7362
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 2046:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7367
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 2047:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7372
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2048:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7379
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 2049:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7384
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 2050:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7391
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2051:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7396
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2052:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7401
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2053:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7406
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2054:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7411
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2055:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7421
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 2056:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7426
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2057:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7433
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2058:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7440
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2059:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7448
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2060:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7459
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 2061:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7469
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 2062:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7474
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 2063:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7479
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2064:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7490
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 2065:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7495
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2066:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7503
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2067:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7511
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 2068:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7516
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 2069:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7521
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 2070:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7526
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 2071:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7531
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 2072:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7536
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 2073:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7541
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 2074:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7546
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 2075:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7551
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 2076:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7556
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 2077:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7561
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 2078:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7566
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 2079:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7571
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 2080:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7576
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 2081:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7581
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 2082:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7586
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 2083:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7591
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 2084:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7596
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 2085:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7601
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 2086:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7606
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 2087:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7612
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 2088:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7617
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].rolespec
			yyVAL.node = cmd
		}
	case 2089:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7624
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 2090:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7629
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 2091:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7634
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 2092:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7639
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 2093:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7644
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 2094:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7649
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 2095:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7654
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 2096:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7659
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 2097:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7664
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 2098:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7668
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 2099:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7676
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7684
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2101:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7691
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7702
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7711
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7712
		{
			yyVAL.node = nil
		}
	case 2105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7716
		{
		}
	case 2106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7717
		{
		}
	case 2107:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7728
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7741
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2109:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7754
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7767
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2111:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7780
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2112:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7795
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7810
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2114:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7823
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7836
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2116:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7849
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2117:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7862
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2118:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7875
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7891
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7897
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 2121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7903
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7912
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 2123:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7916
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 2124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7919
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7923
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7925
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 2127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7929
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 2128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7933
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 2129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7940
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 2130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7944
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 2131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7950
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7951
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7955
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 2134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7960
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 2135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7961
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 2136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7962
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 2137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7963
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 2138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7964
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 2139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7965
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 2140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7966
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 2141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7967
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 2142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7968
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 2143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7969
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 2144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7970
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 2145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7971
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 2146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7972
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 2147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7985
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7990
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8004
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode: ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:  yyDollar[1].list,
				Objargs:  yyDollar[2].list,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8016
		{
			yylex.Error("Use NONE to denote the missing argument of a unary operator.")
			return 1
		}
	case 2151:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8021
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, yyDollar[4].typnam)
		}
	case 2152:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8023
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[4].typnam)
		}
	case 2153:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8025
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, nil)
		}
	case 2154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8029
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8042
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 2156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8044
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 2157:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8048
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2158:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8059
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2159:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8070
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2160:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8081
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2161:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8092
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2162:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8103
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2163:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8115
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2164:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8126
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2165:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8137
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2166:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8148
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2167:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8159
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2168:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8176
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2169:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8193
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2170:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8205
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2171:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8217
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2172:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8228
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2173:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8239
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2174:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8250
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2175:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8261
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2176:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8272
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2177:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8283
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2178:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8294
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2179:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8305
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2180:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8316
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2181:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8327
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2182:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8338
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2183:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8349
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2184:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8360
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2185:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8371
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2186:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8382
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2187:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8393
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2188:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8404
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2189:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8415
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2190:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8428
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2191:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8441
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2192:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8454
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2193:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8467
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2194:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8480
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2195:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8493
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2196:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8505
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2197:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8517
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2198:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8530
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2199:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8543
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2200:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8555
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2201:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8567
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2202:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8578
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2203:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8589
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2204:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8600
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2205:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8611
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2206:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8622
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2207:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8633
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2208:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8644
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2209:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8655
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2210:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8666
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2211:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8677
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2212:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8703
		{
			yyVAL.ival = 0
		}
	case 2213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8705
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 2214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8719
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 2215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8720
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 2216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8721
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 2217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8722
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 2218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8723
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 2219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8724
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 2220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8728
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8733
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8738
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8746
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8750
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8754
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 2226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8758
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 2227:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8772
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 2228:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:8786
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 2229:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8802
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2230:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8817
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8832
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8833
		{
			yyVAL.list = nil
		}
	case 2233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8838
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8842
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8850
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8854
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8859
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8867
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8876
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8885
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8894
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8903
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8914
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8915
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8916
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8917
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8918
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8922
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8926
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8928
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				// TODO: Add %TYPE indicator
			}
		}
	case 2251:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8938
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				Setof: true,
			}
		}
	case 2252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8950
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8951
		{
			yyVAL.list = nil
		}
	case 2254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8956
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8962
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8970
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8974
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8978
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8982
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8986
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8993
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8999
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9009
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9015
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9023
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9027
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2267:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9039
		{
			yyVAL.node = nil
		}
	case 2268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9046
		{
			yyVAL.stmt = &ast.ReturnStmt{
				ReturnVal: yyDollar[2].node,
			}
		}
	case 2269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9055
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2270:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9065
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9071
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9072
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9077
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 2274:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9081
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9085
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9089
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 2277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9093
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 2278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9097
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 2279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9101
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9105
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9109
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9113
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9117
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 2284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9121
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 2285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9125
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 2286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9129
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 2287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9133
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 2288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9137
		{
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 2289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9141
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 2290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9148
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9152
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2292:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:9168
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2293:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:9200
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9231
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9232
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9233
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9238
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9240
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9280
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9287
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9294
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9301
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9308
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9317
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9318
		{
			yyVAL.list = nil
		}
	case 2306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9322
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9327
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9335
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9346
		{
			yyVAL.bval = true
		}
	case 2310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9347
		{
			yyVAL.bval = false
		}
	case 2311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9351
		{
			yyVAL.bval = true
		}
	case 2312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9352
		{
			yyVAL.bval = false
		}
	case 2313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9356
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9361
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9365
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9377
		{
			yyVAL.bval = true
		}
	case 2319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9378
		{
			yyVAL.bval = false
		}
	case 2320:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9382
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9383
		{
			yyVAL.node = nil
		}
	case 2324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9392
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9397
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9401
		{
			yyVAL.list = nil
		}
	case 2327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9406
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9409
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9410
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9411
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9415
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9416
		{
			yyVAL.rangevar = nil
		}
	case 2333:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9429
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2334:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9445
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2335:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:9461
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2336:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:9477
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9494
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9495
		{
			yyVAL.list = nil
		}
	case 2339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9499
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2340:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9500
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2341:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9501
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9502
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2343:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9513
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = yyDollar[5].rolespec
			n.SchemaElts = yyDollar[6].list
			yyVAL.stmt = n
		}
	case 2344:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9520
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = nil
			n.SchemaElts = yyDollar[4].list
			yyVAL.stmt = n
		}
	case 2345:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9527
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = yyDollar[8].rolespec
			n.SchemaElts = yyDollar[9].list
			yyVAL.stmt = n
		}
	case 2346:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9534
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = nil
			n.SchemaElts = yyDollar[7].list
			yyVAL.stmt = n
		}
	case 2347:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9550
		{
			n := ast.NewCreateDomainStmt(yyDollar[3].list, yyDollar[5].typnam)
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			n.Constraints = constraints
			n.CollClause = collClause
			yyVAL.stmt = n
		}
	case 2348:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9568
		{
			n := ast.NewAlterDomainStmt('T', yyDollar[3].list)
			n.Def = yyDollar[4].node
			yyVAL.stmt = n
		}
	case 2349:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9574
		{
			n := ast.NewAlterDomainStmt('N', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2350:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9579
		{
			n := ast.NewAlterDomainStmt('O', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2351:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9584
		{
			n := ast.NewAlterDomainStmt('C', yyDollar[3].list)
			n.Def = yyDollar[5].node
			yyVAL.stmt = n
		}
	case 2352:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9590
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[6].str
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			yyVAL.stmt = n
		}
	case 2353:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9598
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[8].str
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			yyVAL.stmt = n
		}
	case 2354:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9606
		{
			n := ast.NewAlterDomainStmt('V', yyDollar[3].list)
			n.Name = yyDollar[6].str
			yyVAL.stmt = n
		}
	case 2355:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9621
		{
			// Extract actual arguments from aggr_args which returns [args, position_indicator]
			var args *ast.NodeList
			if yyDollar[5].list != nil && yyDollar[5].list.Len() > 0 {
				// First element contains the actual arguments (or nil for *)
				if firstElem, ok := yyDollar[5].list.Items[0].(*ast.NodeList); ok {
					args = firstElem
				} else if yyDollar[5].list.Items[0] == nil {
					// Special case for COUNT(*) - create a list with a single nil element
					args = ast.NewNodeList(nil)
				}
			}
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, false, yyDollar[4].list, args, yyDollar[6].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2356:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9637
		{
			// old-style (pre-8.2) syntax for CREATE AGGREGATE
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, true, yyDollar[4].list, nil, yyDollar[5].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2357:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9643
		{
			n := ast.NewDefineStmt(ast.OBJECT_OPERATOR, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2358:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9648
		{
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9653
		{
			// Shell type (identified by lack of definition)
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, nil, false, false)
			yyVAL.stmt = n
		}
	case 2360:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9659
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSPARSER, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2361:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9664
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSDICTIONARY, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2362:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9669
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSTEMPLATE, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2363:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9674
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSCONFIGURATION, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2364:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9679
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2365:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9684
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, yyDollar[7].list, true, false)
			yyVAL.stmt = n
		}
	case 2366:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9689
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, ast.NewNodeList(yyDollar[5].list), false, false)
			yyVAL.stmt = n
		}
	case 2367:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9694
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, ast.NewNodeList(yyDollar[8].list), true, false)
			yyVAL.stmt = n
		}
	case 2368:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9699
		{
			typevar, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(fmt.Sprintf("invalid type name: %v", err))
				return 1
			}

			n := ast.NewCompositeTypeStmt(typevar, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2369:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9710
		{
			n := ast.NewCreateEnumStmt(yyDollar[3].list, yyDollar[7].list)
			yyVAL.stmt = n
		}
	case 2370:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9715
		{
			n := ast.NewCreateRangeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2371:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9729
		{
			n := ast.NewCreateSeqStmt(yyDollar[4].rangevar, yyDollar[5].list, 0, false, false)
			yyVAL.stmt = n
		}
	case 2372:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9734
		{
			n := ast.NewCreateSeqStmt(yyDollar[7].rangevar, yyDollar[8].list, 0, false, true)
			yyVAL.stmt = n
		}
	case 2373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9741
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2374:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9742
		{
			yyVAL.list = nil
		}
	case 2375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9745
		{
		}
	case 2376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9746
		{
		}
	case 2377:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9757
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[3].rangevar, yyDollar[4].list, false, false)
		}
	case 2378:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9761
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[5].rangevar, yyDollar[6].list, false, true)
		}
	case 2379:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9774
		{
			n := ast.NewCreateExtensionStmt(yyDollar[3].str, false, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2380:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9779
		{
			n := ast.NewCreateExtensionStmt(yyDollar[6].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9787
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9796
		{
			yyVAL.list = nil
		}
	case 2383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9803
		{
			yyVAL.defelt = ast.NewDefElem("schema", ast.NewString(yyDollar[2].str))
		}
	case 2384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9807
		{
			yyVAL.defelt = ast.NewDefElem("version", ast.NewString(yyDollar[2].str))
		}
	case 2385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9811
		{
			yylex.Error("CREATE EXTENSION ... FROM is no longer supported")
			return 1
		}
	case 2386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9816
		{
			yyVAL.defelt = ast.NewDefElem("cascade", ast.NewBoolean(true))
		}
	case 2387:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9829
		{
			n := ast.NewAlterExtensionStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9837
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9846
		{
			yyVAL.list = nil
		}
	case 2390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9853
		{
			yyVAL.defelt = ast.NewDefElem("to", ast.NewString(yyDollar[2].str))
		}
	case 2391:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9866
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), ast.NewString(yyDollar[6].str))
		}
	case 2392:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9870
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), yyDollar[6].list)
		}
	case 2393:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9874
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_AGGREGATE), yyDollar[6].objwithargs)
		}
	case 2394:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9878
		{
			// CAST takes two TypeNames as a NodeList
			list := ast.NewNodeList(yyDollar[7].typnam)
			list.Append(yyDollar[9].typnam)
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_CAST), list)
		}
	case 2395:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9885
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_DOMAIN), yyDollar[6].typnam)
		}
	case 2396:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9889
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_FUNCTION), yyDollar[6].objwithargs)
		}
	case 2397:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9893
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPERATOR), yyDollar[6].objwithargs)
		}
	case 2398:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9897
		{
			// OPERATOR CLASS takes method name + class name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then class name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPCLASS), list)
		}
	case 2399:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9906
		{
			// OPERATOR FAMILY takes method name + family name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then family name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPFAMILY), list)
		}
	case 2400:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9915
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_PROCEDURE), yyDollar[6].objwithargs)
		}
	case 2401:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9919
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_ROUTINE), yyDollar[6].objwithargs)
		}
	case 2402:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9923
		{
			list := ast.NewNodeList(yyDollar[7].typnam, ast.NewString(yyDollar[9].str))
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TRANSFORM), list)
		}
	case 2403:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9928
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TYPE), yyDollar[6].typnam)
		}
	case 2404:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9940
		{
			yyVAL.stmt = ast.NewCreateFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2405:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9946
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2406:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9950
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, nil)
		}
	case 2407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9956
		{
			yyVAL.defelt = ast.NewDefElem("handler", yyDollar[2].list)
		}
	case 2408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9957
		{
			yyVAL.defelt = ast.NewDefElem("handler", nil)
		}
	case 2409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9958
		{
			yyVAL.defelt = ast.NewDefElem("validator", yyDollar[2].list)
		}
	case 2410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9959
		{
			yyVAL.defelt = ast.NewDefElem("validator", nil)
		}
	case 2411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9963
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9964
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9968
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9969
		{
			yyVAL.list = nil
		}
	case 2415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9973
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9974
		{
			result := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				result.Append(item)
			}
			yyVAL.list = result
		}
	case 2417:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9991
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].str, yyDollar[9].str, yyDollar[10].list, false)
		}
	case 2418:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:9996
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[6].str, yyDollar[7].str, yyDollar[8].str, yyDollar[12].str, yyDollar[13].list, true)
		}
	case 2419:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10002
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].list, true)
		}
	case 2420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10006
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, nil, true)
		}
	case 2421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10010
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, "", yyDollar[4].list, false)
		}
	case 2422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10016
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10017
		{
			yyVAL.str = ""
		}
	case 2424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10021
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10022
		{
			yyVAL.str = ""
		}
	case 2426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10026
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10027
		{
			yyVAL.str = ""
		}
	case 2428:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10040
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[6].list, yyDollar[8].list, yyDollar[10].str, yyDollar[11].list, nil, false)
		}
	case 2429:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:10046
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[9].list, yyDollar[11].list, yyDollar[13].str, yyDollar[14].list, nil, true)
		}
	case 2430:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:10052
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[8].list, ast.NewNodeList(yyDollar[7].rangevar), yyDollar[11].str, yyDollar[12].list, yyDollar[9].partboundspec, false)
		}
	case 2431:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:10058
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[11].list, ast.NewNodeList(yyDollar[10].rangevar), yyDollar[14].str, yyDollar[15].list, yyDollar[12].partboundspec, true)
		}
	case 2432:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10070
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list, false)
		}
	case 2433:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10074
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[8].rolespec, yyDollar[10].str, yyDollar[11].list, true)
		}
	case 2434:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10080
		{
			yyVAL.stmt = ast.NewAlterUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list)
		}
	case 2435:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10086
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, false)
		}
	case 2436:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10090
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[7].rolespec, yyDollar[9].str, true)
		}
	case 2437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10096
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10097
		{
			yyVAL.rolespec = ast.NewRoleSpec(ast.ROLESPEC_CURRENT_USER, "")
		}
	case 2439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10102
		{
			// For aggregates like COUNT(*)
			// Return a list with [nil, -1] matching PostgreSQL's list_make2(NIL, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(nil, ast.NewInteger(-1))
		}
	case 2440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10108
		{
			// Regular aggregate arguments
			// Return a list with [args, -1] matching PostgreSQL's list_make2($2, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(yyDollar[2].list, ast.NewInteger(-1))
		}
	case 2441:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10114
		{
			// Ordered-set aggregate without direct arguments
			// Return a list with [args, 0] matching PostgreSQL's list_make2($4, makeInteger(0))
			yyVAL.list = ast.NewNodeList(yyDollar[4].list, ast.NewInteger(0))
		}
	case 2442:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10120
		{
			// Hypothetical-set aggregate
			// This is the only case requiring consistency checking in PostgreSQL
			result, err := makeOrderedSetArgs(yyDollar[2].list, yyDollar[5].list)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.list = result
		}
	case 2443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10134
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10138
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10146
		{
			yyVAL.node = yyDollar[1].funparam
		}
	case 2446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10153
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10160
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10164
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10172
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2450:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10179
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			n.NewValIsAfter = true
			yyVAL.stmt = n
		}
	case 2451:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10187
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = false
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2452:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10196
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = true
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2453:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10205
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.OldVal = yyDollar[6].str
			n.NewVal = yyDollar[8].str
			n.SkipIfNewValExists = false
			yyVAL.stmt = n
		}
	case 2454:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10213
		{
			// Following PostgreSQL's approach - DROP VALUE is parsed but not implemented
			// PostgreSQL throws an error saying "dropping an enum value is not implemented"
			yylex.Error("dropping an enum value is not implemented")
			return 1
		}
	case 2455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10229
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10231
		{
			yyVAL.list = nil
		}
	case 2457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10236
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10238
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10243
		{
			if constraint, ok := yyDollar[3].node.(*ast.Constraint); ok {
				constraint.Conname = yyDollar[2].str
				yyVAL.node = constraint
			} else {
				yyVAL.node = yyDollar[3].node
			}
		}
	case 2460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10252
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2461:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10257
		{
			n := ast.NewConstraint(ast.CONSTR_CHECK)
			n.RawExpr = yyDollar[3].node
			n.CookedExpr = "" // Empty string, not nil
			// Process constraint attributes from $5
			processConstraintAttributeSpec(yyDollar[5].ival, n)
			// PostgreSQL: n->initially_valid = !n->skip_validation
			n.InitiallyValid = !n.SkipValidation
			yyVAL.node = n
		}
	case 2462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10268
		{
			n := ast.NewConstraint(ast.CONSTR_NOTNULL)
			// In PostgreSQL, domain NOT NULL constraints have keys = list_make1(makeString("value"))
			n.Keys = ast.NewNodeList(ast.NewString("value"))
			// Process constraint attributes from $3
			processConstraintAttributeSpec(yyDollar[3].ival, n)
			// PostgreSQL sets initially_valid = true for NOT NULL (no NOT VALID support yet)
			n.InitiallyValid = true
			yyVAL.node = n
		}
	case 2463:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10288
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[7].stmt, yyDollar[5].into, ast.OBJECT_MATVIEW, false, false)
			/* cram additional flags into the IntoClause */
			yyDollar[5].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[5].into.SkipData = !yyDollar[8].bval
			yyVAL.stmt = ctas
		}
	case 2464:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10296
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[10].stmt, yyDollar[8].into, ast.OBJECT_MATVIEW, false, true)
			/* cram additional flags into the IntoClause */
			yyDollar[8].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[8].into.SkipData = !yyDollar[11].bval
			yyVAL.stmt = ctas
		}
	case 2465:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10307
		{
			n := ast.NewRefreshMatViewStmt(yyDollar[4].bval, !yyDollar[6].bval, yyDollar[5].rangevar)
			yyVAL.stmt = n
		}
	case 2466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10313
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 2467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10314
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 2468:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10319
		{
			yyVAL.into = &ast.IntoClause{
				Rel:            yyDollar[1].rangevar,
				ColNames:       yyDollar[2].list,
				AccessMethod:   yyDollar[3].str,
				Options:        yyDollar[4].list,
				TableSpaceName: yyDollar[5].str,
			}
		}
	case 2469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10331
		{
			yyVAL.bval = true
		}
	case 2470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10332
		{
			yyVAL.bval = false
		}
	case 2471:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10333
		{
			yyVAL.bval = true
		}
	case 2472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10338
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].stmt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10347
		{
			yyVAL.list = nil
		}
	case 2478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10358
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10360
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10364
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10369
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10374
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10379
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10387
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10392
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10397
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10401
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10412
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10420
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10424
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10428
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10432
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10439
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10443
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10450
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10456
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10463
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10464
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10468
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10469
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10470
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10471
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10472
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10473
		{
			yyVAL.node = ast.NewString("true")
		}
	case 2505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10474
		{
			yyVAL.node = ast.NewString("false")
		}
	case 2506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10475
		{
			yyVAL.node = ast.NewString("on")
		}
	case 2507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10476
		{
			yyVAL.node = ast.NewString("off")
		}
	case 2508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10480
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10481
		{
			yyVAL.str = "default"
		}
	case 2510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10482
		{
			yyVAL.str = ""
		}
	case 2511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10486
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10487
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10491
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10492
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10493
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10494
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10498
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10499
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10504
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10510
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10515
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10523
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10527
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10531
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10535
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10539
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10545
		{
			yyVAL.str = "read uncommitted"
		}
	case 2528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10546
		{
			yyVAL.str = "read committed"
		}
	case 2529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10547
		{
			yyVAL.str = "repeatable read"
		}
	case 2530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10548
		{
			yyVAL.str = "serializable"
		}
	case 2531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10552
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10553
		{
			yyVAL.list = nil
		}
	case 2533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10557
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10558
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10559
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10562
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10563
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10564
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10568
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10569
		{
			yyVAL.list = nil
		}
	case 2541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10573
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10574
		{
			yyVAL.node = nil
		}
	case 2543:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10578
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10583
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10588
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10596
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10600
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10606
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10612
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10618
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10619
		{
			yyVAL.str = ""
		}
	case 2552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10623
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10624
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10625
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10626
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10630
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10635
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10640
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10647
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10648
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2561:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10659
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[9].list, nil)
		}
	case 2562:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:10663
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[11].list, yyDollar[8].list)
		}
	case 2563:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10669
		{
			yyVAL.stmt = ast.NewAlterEventTrigStmt(yyDollar[4].str, ast.TriggerFires(yyDollar[5].ival))
		}
	case 2564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10675
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_ORIGIN)
		}
	case 2565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10676
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_REPLICA)
		}
	case 2566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10677
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ALWAYS)
		}
	case 2567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10678
		{
			yyVAL.ival = int(ast.TRIGGER_DISABLED)
		}
	case 2568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10683
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10688
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2570:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10696
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[4].list)
		}
	case 2571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10703
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(ast.NewString(yyDollar[1].str))
		}
	case 2572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10708
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2573:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10722
		{
			yyVAL.stmt = ast.NewCreateTableSpaceStmt(yyDollar[3].str, yyDollar[4].rolespec, yyDollar[6].str, yyDollar[7].list)
		}
	case 2574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10728
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 2575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10729
		{
			yyVAL.rolespec = nil
		}
	case 2576:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10734
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, false)
		}
	case 2577:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10738
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, true)
		}
	case 2578:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10753
		{
			yyVAL.stmt = ast.NewCreatePolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].bval, yyDollar[7].str, yyDollar[8].list, yyDollar[9].node, yyDollar[10].node)
		}
	case 2579:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10761
		{
			yyVAL.stmt = ast.NewAlterPolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].list, yyDollar[7].node, yyDollar[8].node)
		}
	case 2580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10768
		{
			// Check for "permissive" or "restrictive" (case-insensitive)
			if strings.EqualFold(yyDollar[2].str, "permissive") {
				yyVAL.bval = true
			} else if strings.EqualFold(yyDollar[2].str, "restrictive") {
				yyVAL.bval = false
			} else {
				// Parser will error on invalid value
				yylex.Error("unrecognized row security option")
				return 1
			}
		}
	case 2581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10780
		{
			yyVAL.bval = true
		}
	case 2582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10784
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10785
		{
			yyVAL.str = "all"
		}
	case 2584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10789
		{
			yyVAL.str = "all"
		}
	case 2585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10790
		{
			yyVAL.str = "select"
		}
	case 2586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10791
		{
			yyVAL.str = "insert"
		}
	case 2587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10792
		{
			yyVAL.str = "update"
		}
	case 2588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10793
		{
			yyVAL.str = "delete"
		}
	case 2589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10797
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10798
		{
			// Default to PUBLIC when no TO clause is specified
			publicRole := ast.NewRoleSpec(ast.ROLESPEC_PUBLIC, "")
			yyVAL.list = ast.NewNodeList(publicRole)
		}
	case 2591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10806
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10807
		{
			yyVAL.list = nil
		}
	case 2593:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10811
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10812
		{
			yyVAL.node = nil
		}
	case 2595:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10816
		{
			yyVAL.node = yyDollar[4].node
		}
	case 2596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10817
		{
			yyVAL.node = nil
		}
	case 2597:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10828
		{
			yyVAL.stmt = ast.NewCreateAmStmt(yyDollar[4].str, ast.AmType(yyDollar[6].ival), yyDollar[8].list)
		}
	case 2598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10834
		{
			yyVAL.ival = int(ast.AMTYPE_INDEX)
		}
	case 2599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10835
		{
			yyVAL.ival = int(ast.AMTYPE_TABLE)
		}
	case 2600:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10846
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[3].list, yyDollar[4].list, yyDollar[6].list, yyDollar[8].list, "", false, false)
		}
	case 2601:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10850
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[6].list, yyDollar[7].list, yyDollar[9].list, yyDollar[11].list, "", false, true)
		}
	case 2602:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10857
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[3].list, yyDollar[6].node, false)
		}
	case 2603:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10861
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[5].list, yyDollar[8].node, true)
		}
	case 2604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10867
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].statelem)
		}
	case 2605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10868
		{
			yyDollar[1].list.Append(yyDollar[3].statelem)
			yyVAL.list = yyDollar[1].list
		}
	case 2606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10872
		{
			yyVAL.statelem = ast.NewStatsElem(yyDollar[1].str)
		}
	case 2607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10873
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[1].node)
		}
	case 2608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10874
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[2].node)
		}
	case 2609:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10885
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, false, yyDollar[4].list)
		}
	case 2610:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10889
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, true, yyDollar[7].list)
		}
	case 2611:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10893
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, yyDollar[5].list, false, yyDollar[6].list)
		}
	case 2612:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10900
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, yyDollar[5].list, nil, ast.AP_SetOptions)
		}
	case 2613:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10904
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_AddObjects)
		}
	case 2614:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10908
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_SetObjects)
		}
	case 2615:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10912
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_DropObjects)
		}
	case 2616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10918
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10919
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2618:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10924
		{
			pubTable := ast.NewPublicationTable(yyDollar[2].rangevar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_TABLE, pubTable)
		}
	case 2619:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10929
		{
			yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_TABLES_IN_SCHEMA, yyDollar[4].str)
		}
	case 2620:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10933
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA)
		}
	case 2621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10937
		{
			// If either a row filter or column list is specified, create a PublicationTable object
			if yyDollar[2].list != nil || yyDollar[3].node != nil {
				// Create a simple RangeVar from the ColId
				rangeVar := ast.NewRangeVar(yyDollar[1].str, "", "")
				pubTable := ast.NewPublicationTable(rangeVar, yyDollar[3].node, yyDollar[2].list)
				yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
			} else {
				yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_CONTINUATION, yyDollar[1].str)
			}
		}
	case 2622:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10949
		{
			rangeVar := makeRangeVarFromQualifiedName(yyDollar[1].str, yyDollar[2].list, -1)
			pubTable := ast.NewPublicationTable(rangeVar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10955
		{
			pubTable := ast.NewPublicationTable(yyDollar[1].rangevar, yyDollar[3].node, yyDollar[2].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10960
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_CONTINUATION)
		}
	case 2625:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10966
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10967
		{
			yyVAL.node = nil
		}
	case 2627:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10978
		{
			yyVAL.stmt = ast.NewCreateSubscriptionStmt(yyDollar[3].str, yyDollar[5].str, yyDollar[7].list, yyDollar[8].list)
		}
	case 2628:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10985
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_OPTIONS, "", nil, yyDollar[5].list)
		}
	case 2629:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10989
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_CONNECTION, yyDollar[5].str, nil, nil)
		}
	case 2630:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10993
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_REFRESH, "", nil, yyDollar[6].list)
		}
	case 2631:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10997
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ADD_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2632:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11001
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_DROP_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2633:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11005
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SET_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11009
		{
			enableOpt := ast.NewNodeList()
			enableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(true)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, enableOpt)
		}
	case 2635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11015
		{
			disableOpt := ast.NewNodeList()
			disableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(false)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, disableOpt)
		}
	case 2636:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11021
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SKIP, "", nil, yyDollar[5].list)
		}
	case 2637:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11034
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, yyDollar[10].objwithargs, ast.CoercionContext(yyDollar[11].ival), false)
		}
	case 2638:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11038
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), false)
		}
	case 2639:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11042
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), true)
		}
	case 2640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11048
		{
			yyVAL.ival = int(ast.COERCION_IMPLICIT)
		}
	case 2641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11049
		{
			yyVAL.ival = int(ast.COERCION_ASSIGNMENT)
		}
	case 2642:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11050
		{
			yyVAL.ival = int(ast.COERCION_EXPLICIT)
		}
	case 2643:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11062
		{
			yyVAL.stmt = ast.NewCreateOpClassStmt(yyDollar[4].list, yyDollar[11].list, yyDollar[10].str, yyDollar[8].typnam, yyDollar[13].list, yyDollar[5].bval)
		}
	case 2644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11068
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11069
		{
			yyVAL.list = nil
		}
	case 2646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11073
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11074
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2648:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11079
		{
			// Create ObjectWithArgs for simple operator
			owa := ast.NewObjectWithArgs(yyDollar[3].list, nil, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, yyDollar[4].list)
		}
	case 2649:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11085
		{
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, yyDollar[3].objwithargs, yyDollar[4].list)
		}
	case 2650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11089
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[3].objwithargs, nil)
		}
	case 2651:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11093
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[6].objwithargs, yyDollar[4].list)
		}
	case 2652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11097
		{
			yyVAL.node = ast.NewOpClassItemStorage(yyDollar[2].typnam)
		}
	case 2653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11103
		{
			yyVAL.bval = true
		}
	case 2654:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11104
		{
			yyVAL.bval = false
		}
	case 2655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11108
		{
			yyVAL.list = nil
		}
	case 2656:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11109
		{
			yyVAL.list = yyDollar[4].list
		}
	case 2657:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11110
		{
			yyVAL.list = nil
		}
	case 2658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11114
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].typnam)
		}
	case 2659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11115
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2660:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11126
		{
			yyVAL.stmt = ast.NewCreateOpFamilyStmt(yyDollar[4].list, yyDollar[6].str)
		}
	case 2661:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11139
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, false, yyDollar[8].list)
		}
	case 2662:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11143
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, true, yyDollar[8].list)
		}
	case 2663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11149
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11150
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2665:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11155
		{
			// Create ObjectWithArgs for operator with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, nil)
		}
	case 2666:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11161
		{
			// Create ObjectWithArgs for function with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, owa, nil)
		}
	case 2667:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11176
		{
			yyVAL.stmt = ast.NewCreateConversionStmt(yyDollar[4].list, yyDollar[6].str, yyDollar[8].str, yyDollar[10].list, yyDollar[2].bval)
		}
	case 2668:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11189
		{
			yyVAL.stmt = ast.NewCreateTransformStmt(yyDollar[2].bval, yyDollar[5].typnam, yyDollar[7].str, linitial(yyDollar[9].list), lsecond(yyDollar[9].list))
		}
	case 2669:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11196
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs)  // fromsql
			yyVAL.list.Append(yyDollar[11].objwithargs) // tosql
		}
	case 2670:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11202
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[11].objwithargs) // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs)  // tosql
		}
	case 2671:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11208
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs) // fromsql
			yyVAL.list.Append(nil)                     // tosql
		}
	case 2672:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11214
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(nil)                     // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs) // tosql
		}
	case 2673:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11229
		{
			// Parameterless CREATE LANGUAGE is now treated as CREATE EXTENSION
			yyVAL.stmt = ast.NewCreateExtensionStmt(yyDollar[6].str, yyDollar[2].bval, nil)
		}
	case 2674:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11235
		{
			yyVAL.stmt = ast.NewCreatePLangStmt(yyDollar[2].bval, yyDollar[6].str, yyDollar[8].list, yyDollar[9].list, yyDollar[10].list, yyDollar[3].bval)
		}
	case 2675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11241
		{
			yyVAL.bval = true
		}
	case 2676:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11242
		{
			yyVAL.bval = false
		}
	case 2677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11247
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2678:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11248
		{
			yyVAL.list = nil
		}
	case 2679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11252
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2680:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11253
		{
			yyVAL.list = nil
		}
	case 2681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11257
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11258
		{
			yyVAL.list = nil
		}
	case 2683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11261
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_ALL
		}
	case 2684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11262
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DISTINCT
		}
	case 2685:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11263
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DEFAULT
		}
	case 2686:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11268
		{
			yyVAL.groupClause = &ast.GroupClause{
				Distinct: yyDollar[3].setquant == ast.SET_QUANTIFIER_DISTINCT,
				List:     yyDollar[4].list,
			}
		}
	case 2687:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11275
		{
			yyVAL.groupClause = nil
		}
	case 2688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11281
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11282
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11286
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11287
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11288
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11289
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11290
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11295
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_EMPTY, ast.NewNodeList(), 0)
		}
	case 2696:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11302
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_ROLLUP, yyDollar[3].list, 0)
		}
	case 2697:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11309
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_CUBE, yyDollar[3].list, 0)
		}
	case 2698:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11316
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_SETS, yyDollar[4].list, 0)
		}
	case 2699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11325
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2700:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11326
		{
			yyVAL.node = nil
		}
	case 2701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11333
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11337
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11338
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2704:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11343
		{
			sortBy := ast.NewSortBy(yyDollar[1].node, ast.SORTBY_USING, ast.SortByNulls(yyDollar[4].ival), 0)
			// Use qual_all_Op (NodeList) directly for UseOp
			sortBy.UseOp = yyDollar[3].list
			yyVAL.node = sortBy
		}
	case 2705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11350
		{
			yyVAL.node = ast.NewSortBy(yyDollar[1].node, ast.SortByDir(yyDollar[2].ival), ast.SortByNulls(yyDollar[3].ival), 0)
		}
	case 2706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11361
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11363
		{
			yyVAL.list = nil
		}
	case 2708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11368
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[1].windef)
		}
	case 2709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11373
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[3].windef)
		}
	case 2710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11381
		{
			n := yyDollar[3].windef
			n.Name = yyDollar[1].str
			yyVAL.windef = n
		}
	case 2711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11390
		{
			yyVAL.windef = yyDollar[2].windef
		}
	case 2712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11392
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			yyVAL.windef = n
		}
	case 2713:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11399
		{
			yyVAL.windef = nil
		}
	case 2714:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11404
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.PartitionClause = yyDollar[3].list
			n.OrderClause = yyDollar[4].list

			n.FrameOptions = yyDollar[5].windef.FrameOptions
			n.StartOffset = yyDollar[5].windef.StartOffset
			n.EndOffset = yyDollar[5].windef.EndOffset
			yyVAL.windef = n
		}
	case 2715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11418
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2716:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11419
		{
			yyVAL.str = ""
		}
	case 2717:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11423
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2718:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11424
		{
			yyVAL.list = nil
		}
	case 2719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11429
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_RANGE
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2720:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11436
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_ROWS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11443
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_GROUPS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2722:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11450
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11461
		{
			n := yyDollar[1].windef
			// reject invalid cases - these would be runtime errors in PostgreSQL
			if (n.FrameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (n.FrameOptions & ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 {
				yylex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			n.FrameOptions |= ast.FRAMEOPTION_END_CURRENT_ROW
			yyVAL.windef = n
		}
	case 2724:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11475
		{
			n1 := yyDollar[2].windef
			n2 := yyDollar[4].windef

			// form merged options
			frameOptions := n1.FrameOptions
			// shift converts START_ options to END_ options
			frameOptions |= (n2.FrameOptions << 1)
			frameOptions |= ast.FRAMEOPTION_BETWEEN

			// reject invalid cases
			if (frameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (frameOptions & ast.FRAMEOPTION_END_UNBOUNDED_PRECEDING) != 0 {
				yylex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_CURRENT_ROW) != 0 &&
				(frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 {
				yylex.Error("frame starting from current row cannot have preceding rows")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 &&
				((frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 ||
					(frameOptions&ast.FRAMEOPTION_END_CURRENT_ROW) != 0) {
				yylex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			n1.FrameOptions = frameOptions
			n1.EndOffset = n2.StartOffset
			yyVAL.windef = n1
		}
	case 2725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11510
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_PRECEDING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11518
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11526
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_CURRENT_ROW
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11534
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_PRECEDING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11542
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_FOLLOWING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11552
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_CURRENT_ROW
		}
	case 2731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11553
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_GROUP
		}
	case 2732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11554
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_TIES
		}
	case 2733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11555
		{
			yyVAL.ival = 0
		}
	case 2734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11556
		{
			yyVAL.ival = 0
		}
	case 2735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11565
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[2].node
		}
	case 2736:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11570
		{
			yyVAL.selectLimit = yyDollar[2].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[1].node
		}
	case 2737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11575
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11579
		{
			n := &selectLimit{}
			n.limitOffset = yyDollar[1].node
			n.limitCount = nil
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11589
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11590
		{
			yyVAL.selectLimit = nil
		}
	case 2741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11595
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[2].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2742:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11603
		{
			// Disabled because it was too confusing - PostgreSQL error
			yylex.Error("LIMIT #,# syntax is not supported. Use separate LIMIT and OFFSET clauses.")
			return 1
		}
	case 2743:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11610
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2744:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11618
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2745:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11626
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2746:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11634
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2747:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11645
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11648
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11652
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11654
		{
			/* LIMIT ALL is represented as a NULL constant */
			yyVAL.node = ast.NewA_Const(ast.NewNull(), -1)
		}
	case 2751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11661
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11674
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2753:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11676
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("+")}}, nil, yyDollar[2].node, -1)
		}
	case 2754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11680
		{
			// Create a unary minus expression
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("-")}}, nil, yyDollar[2].node, -1)
		}
	case 2755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11687
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), -1)
		}
	case 2756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11688
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), -1)
		}
	case 2757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11693
		{
			yyVAL.ival = 0
		}
	case 2758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11694
		{
			yyVAL.ival = 0
		}
	case 2759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11698
		{
			yyVAL.ival = 0
		}
	case 2760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11699
		{
			yyVAL.ival = 0
		}
	case 2761:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11712
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11718
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_START)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11724
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11730
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11736
		{
			stmt := ast.NewSavepointStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11741
		{
			stmt := ast.NewReleaseStmt(yyDollar[3].str)
			yyVAL.stmt = stmt
		}
	case 2767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11746
		{
			stmt := ast.NewReleaseStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2768:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11751
		{
			stmt := ast.NewRollbackToStmt(yyDollar[5].str)
			yyVAL.stmt = stmt
		}
	case 2769:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11756
		{
			stmt := ast.NewRollbackToStmt(yyDollar[4].str)
			yyVAL.stmt = stmt
		}
	case 2770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11761
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_PREPARE)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2771:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11767
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11773
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11782
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2774:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11788
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_BEGIN)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11795
		{
		}
	case 2776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11796
		{
		}
	case 2777:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11797
		{
		}
	case 2778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11801
		{
			yyVAL.bval = true
		}
	case 2779:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11802
		{
			yyVAL.bval = false
		}
	case 2780:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11803
		{
			yyVAL.bval = false
		}
	case 2781:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11816
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_ROLE, yyDollar[3].str, yyDollar[5].list)
		}
	case 2782:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11823
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_USER, yyDollar[3].str, yyDollar[5].list)
		}
	case 2783:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11830
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_GROUP, yyDollar[3].str, yyDollar[5].list)
		}
	case 2784:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11837
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2785:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11843
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2786:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11852
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2787:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11856
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2788:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11860
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2789:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11864
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2790:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11870
		{
			yyVAL.str = ""
		}
	case 2791:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11871
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2792:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11876
		{
			options := ast.NewNodeList(ast.NewDefElem("rolemembers", yyDollar[6].list))
			stmt := ast.NewAlterRoleStmt(yyDollar[3].rolespec, options)
			stmt.Action = yyDollar[4].ival
			yyVAL.stmt = stmt
		}
	case 2793:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11886
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2794:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11890
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2795:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11894
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2796:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11898
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2797:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11902
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2798:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11906
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2799:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11914
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 2800:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11925
		{
			yyVAL.list = nil
		}
	case 2801:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11930
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 2802:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11941
		{
			yyVAL.list = nil
		}
	case 2803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11945
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2804:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11947
		{
			yyVAL.defelt = ast.NewDefElem("sysid", ast.NewInteger(yyDollar[2].ival))
		}
	case 2805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11951
		{
			yyVAL.defelt = ast.NewDefElem("adminmembers", yyDollar[2].list)
		}
	case 2806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11955
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 2807:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11959
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 2808:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11963
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 2809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11970
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[2].str))
		}
	case 2810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11974
		{
			yyVAL.defelt = ast.NewDefElem("password", nil)
		}
	case 2811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11978
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[3].str))
		}
	case 2812:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11982
		{
			yylex.Error("UNENCRYPTED PASSWORD is no longer supported")
			return 1
		}
	case 2813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11987
		{
			yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(true))
		}
	case 2814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11991
		{
			// Handle identifiers like PostgreSQL does with string comparisons
			if yyDollar[1].str == "superuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nosuperuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createrole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreaterole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createdb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreatedb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(false))
			} else if yyDollar[1].str == "login" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nologin" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(false))
			} else if yyDollar[1].str == "replication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(true))
			} else if yyDollar[1].str == "noreplication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(false))
			} else if yyDollar[1].str == "bypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nobypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(false))
			} else if yyDollar[1].str == "noinherit" {
				yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(false))
			} else {
				// Return error for unrecognized role option
				yylex.Error("unrecognized role option \"" + yyDollar[1].str + "\"")
				yyVAL.defelt = nil
			}
		}
	case 2815:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12026
		{
			yyVAL.defelt = ast.NewDefElem("connectionlimit", ast.NewInteger(yyDollar[3].ival))
		}
	case 2816:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12030
		{
			yyVAL.defelt = ast.NewDefElem("validUntil", ast.NewString(yyDollar[3].str))
		}
	case 2817:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12034
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 2818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12040
		{
			yyVAL.ival = 1
		}
	case 2819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12041
		{
			yyVAL.ival = -1
		}
	}
	goto yystack /* stack new state and value */
}
