// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
	"strings"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// SelectLimit - Private struct for the result of opt_select_limit production
// Mirrors PostgreSQL's SelectLimit from gram.y:126-132
type selectLimit struct {
	limitOffset ast.Node
	limitCount  ast.Node
	limitOption ast.LimitOption
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:43
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node        ast.Node
	stmt        ast.Stmt
	stmtList    []ast.Stmt
	list        *ast.NodeList
	groupClause *ast.GroupClause
	selectLimit *selectLimit

	// Specific AST node types
	into          *ast.IntoClause
	onconflict    *ast.OnConflictClause
	windef        *ast.WindowDef
	createStmt    *ast.CreateStmt
	indexStmt     *ast.IndexStmt
	alterStmt     *ast.AlterTableStmt
	dropStmt      *ast.DropStmt
	columnDef     *ast.ColumnDef
	constraint    *ast.Constraint
	indexElem     *ast.IndexElem
	alterCmd      *ast.AlterTableCmd
	with          *ast.WithClause
	rangevar      *ast.RangeVar
	objType       ast.ObjectType
	dropBehav     ast.DropBehavior
	setquant      ast.SetQuantifier
	typnam        *ast.TypeName
	partspec      *ast.PartitionSpec
	partboundspec *ast.PartitionBoundSpec
	oncommit      ast.OnCommitAction
	defelt        *ast.DefElem
	target        *ast.ResTarget            // For select targets, insert columns
	alias         *ast.Alias                // For table and column aliases
	jtype         ast.JoinType              // For join type specifications
	jexpr         *ast.JoinExpr             // For joined table expressions
	keyaction     *ast.KeyAction            // For foreign key actions
	keyactions    *ast.KeyActions           // For foreign key action sets
	funparam      *ast.FunctionParameter    // For function parameters
	funparammode  ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt      *ast.VariableSetStmt      // For SET/RESET statements
	rolespec      *ast.RoleSpec
	objwithargs   *ast.ObjectWithArgs
	statelem      *ast.StatsElem

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const VALUES = 57428
const SEARCH = 57429
const BREADTH = 57430
const DEPTH = 57431
const CYCLE = 57432
const FIRST_P = 57433
const LAST_P = 57434
const SET = 57435
const ASC = 57436
const DESC = 57437
const INSERT = 57438
const UPDATE = 57439
const DELETE_P = 57440
const MERGE = 57441
const RETURNING = 57442
const CONFLICT = 57443
const OVERRIDING = 57444
const USER = 57445
const SYSTEM_P = 57446
const MATCHED = 57447
const THEN = 57448
const SOURCE = 57449
const TARGET = 57450
const DO = 57451
const NOTHING = 57452
const COPY = 57453
const PROGRAM = 57454
const STDIN = 57455
const STDOUT = 57456
const BINARY = 57457
const FREEZE = 57458
const CONSTRAINT = 57459
const VERBOSE = 57460
const ANALYZE = 57461
const CURRENT_P = 57462
const CURSOR = 57463
const OF = 57464
const COLUMNS = 57465
const ORDINALITY = 57466
const XMLTABLE = 57467
const JSON_TABLE = 57468
const ROWS = 57469
const PATH = 57470
const PASSING = 57471
const FOR = 57472
const NESTED = 57473
const REF_P = 57474
const XMLNAMESPACES = 57475
const ARRAY = 57476
const ERROR = 57477
const ERROR_P = 57478
const EMPTY = 57479
const EMPTY_P = 57480
const OBJECT_P = 57481
const WRAPPER = 57482
const CONDITIONAL = 57483
const UNCONDITIONAL = 57484
const QUOTES = 57485
const OMIT = 57486
const KEEP = 57487
const SCALAR = 57488
const STRING_P = 57489
const ENCODING = 57490
const DELIMITER = 57491
const DELIMITERS = 57492
const HEADER_P = 57493
const QUOTE = 57494
const FORCE = 57495
const CSV = 57496
const VALUE_P = 57497
const JSON_QUERY = 57498
const JSON_VALUE = 57499
const JSON_SERIALIZE = 57500
const JSON_OBJECT = 57501
const JSON_ARRAY = 57502
const JSON_OBJECTAGG = 57503
const JSON_ARRAYAGG = 57504
const JSON_EXISTS = 57505
const JSON_SCALAR = 57506
const FORMAT = 57507
const JSON = 57508
const UTF8 = 57509
const WITHOUT = 57510
const BIT = 57511
const NUMERIC = 57512
const INTEGER = 57513
const SMALLINT = 57514
const BIGINT = 57515
const REAL = 57516
const FLOAT_P = 57517
const DOUBLE_P = 57518
const PRECISION = 57519
const CHARACTER = 57520
const CHAR_P = 57521
const VARCHAR = 57522
const NATIONAL = 57523
const NCHAR = 57524
const VARYING = 57525
const TIMESTAMP = 57526
const INTERVAL = 57527
const INT_P = 57528
const DECIMAL_P = 57529
const DEC = 57530
const BOOLEAN_P = 57531
const VARIADIC = 57532
const ABORT_P = 57533
const ABSENT = 57534
const ABSOLUTE_P = 57535
const ACCESS = 57536
const ACTION = 57537
const ADD_P = 57538
const ADMIN = 57539
const AFTER = 57540
const AGGREGATE = 57541
const ALSO = 57542
const ALWAYS = 57543
const ANALYSE = 57544
const ASENSITIVE = 57545
const ASSERTION = 57546
const ASSIGNMENT = 57547
const ATOMIC = 57548
const ATTACH = 57549
const ATTRIBUTE = 57550
const AUTHORIZATION = 57551
const BACKWARD = 57552
const BEFORE = 57553
const BEGIN_P = 57554
const CACHE = 57555
const CALL = 57556
const CALLED = 57557
const CASCADED = 57558
const CATALOG_P = 57559
const CHAIN = 57560
const CHARACTERISTICS = 57561
const CHECKPOINT = 57562
const CLASS = 57563
const CLOSE = 57564
const CLUSTER = 57565
const COALESCE = 57566
const COLLATION = 57567
const COMMENT = 57568
const COMMENTS = 57569
const COMMIT = 57570
const COMMITTED = 57571
const COMPRESSION = 57572
const CONFIGURATION = 57573
const CONNECTION = 57574
const CONSTRAINTS = 57575
const CONTENT_P = 57576
const CONTINUE_P = 57577
const CONVERSION_P = 57578
const COST = 57579
const CUBE = 57580
const CURRENT_CATALOG = 57581
const CURRENT_DATE = 57582
const CURRENT_ROLE = 57583
const CURRENT_SCHEMA = 57584
const CURRENT_TIME = 57585
const CURRENT_TIMESTAMP = 57586
const CURRENT_USER = 57587
const DATA_P = 57588
const DATABASE = 57589
const DAY_P = 57590
const DEALLOCATE = 57591
const DECLARE = 57592
const DEFAULTS = 57593
const DEFERRABLE = 57594
const DEFERRED = 57595
const DEFINER = 57596
const DEPENDS = 57597
const DETACH = 57598
const DICTIONARY = 57599
const DISABLE_P = 57600
const DISCARD = 57601
const DOCUMENT_P = 57602
const DOMAIN_P = 57603
const EACH = 57604
const ELSE = 57605
const ENABLE_P = 57606
const ENCRYPTED = 57607
const END_P = 57608
const ENUM_P = 57609
const EVENT = 57610
const EXCEPT = 57611
const EXCLUDE = 57612
const EXCLUDING = 57613
const EXCLUSIVE = 57614
const EXECUTE = 57615
const EXPLAIN = 57616
const EXPRESSION = 57617
const EXTENSION = 57618
const EXTERNAL = 57619
const EXTRACT = 57620
const FAMILY = 57621
const FETCH = 57622
const FILTER = 57623
const FINALIZE = 57624
const FOLLOWING = 57625
const FOREIGN = 57626
const FORWARD = 57627
const FUNCTION = 57628
const FUNCTIONS = 57629
const GENERATED = 57630
const GLOBAL = 57631
const GRANT = 57632
const GRANTED = 57633
const GREATEST = 57634
const GROUPING = 57635
const GROUPS = 57636
const HANDLER = 57637
const HOLD = 57638
const HOUR_P = 57639
const IDENTITY_P = 57640
const IMMEDIATE = 57641
const IMMUTABLE = 57642
const IMPLICIT_P = 57643
const IMPORT_P = 57644
const INCLUDE = 57645
const INCLUDING = 57646
const INCREMENT = 57647
const INDENT = 57648
const INDEX = 57649
const INDEXES = 57650
const INHERIT = 57651
const INHERITS = 57652
const INITIALLY = 57653
const INLINE_P = 57654
const INPUT_P = 57655
const INSENSITIVE = 57656
const INSTEAD = 57657
const INTERSECT = 57658
const INVOKER = 57659
const ISOLATION = 57660
const KEYS = 57661
const LABEL = 57662
const LANGUAGE = 57663
const LARGE_P = 57664
const LATERAL_P = 57665
const LEAKPROOF = 57666
const LEAST = 57667
const LEADING = 57668
const LEVEL = 57669
const LISTEN = 57670
const LOAD = 57671
const LOCALTIME = 57672
const LOCALTIMESTAMP = 57673
const LOCATION = 57674
const LOCK_P = 57675
const LOCKED = 57676
const LOGGED = 57677
const MAPPING = 57678
const MATCH = 57679
const MAXVALUE = 57680
const MERGE_ACTION = 57681
const METHOD = 57682
const MINUTE_P = 57683
const MINVALUE = 57684
const MODE = 57685
const MONTH_P = 57686
const MOVE = 57687
const NAME_P = 57688
const NAMES = 57689
const NEW = 57690
const NEXT = 57691
const NFC = 57692
const NFD = 57693
const NFKC = 57694
const NFKD = 57695
const NO = 57696
const NONE = 57697
const NORMALIZE = 57698
const NORMALIZED = 57699
const NOTIFY = 57700
const NOWAIT = 57701
const NULLIF = 57702
const OUT_P = 57703
const OVERLAY = 57704
const OVERLAPS = 57705
const OWNED = 57706
const OWNER = 57707
const PARALLEL = 57708
const PARAMETER = 57709
const PARSER = 57710
const PARTIAL = 57711
const PARTITION = 57712
const PASSWORD = 57713
const PLACING = 57714
const PLAN = 57715
const PLANS = 57716
const POLICY = 57717
const POSITION = 57718
const PRECEDING = 57719
const PREPARE = 57720
const PREPARED = 57721
const PRESERVE = 57722
const PRIMARY = 57723
const PRIOR = 57724
const PRIVILEGES = 57725
const PROCEDURAL = 57726
const PROCEDURE = 57727
const PROCEDURES = 57728
const PUBLICATION = 57729
const RANGE = 57730
const READ = 57731
const REASSIGN = 57732
const RECHECK = 57733
const REFERENCES = 57734
const REFERENCING = 57735
const REFRESH = 57736
const REINDEX = 57737
const RELATIVE_P = 57738
const RELEASE = 57739
const RENAME = 57740
const REPEATABLE = 57741
const REPLICA = 57742
const RESET = 57743
const RESTART = 57744
const RETURN = 57745
const RETURNS = 57746
const REVOKE = 57747
const ROLE = 57748
const ROLLBACK = 57749
const ROLLUP = 57750
const ROUTINE = 57751
const ROUTINES = 57752
const ROW = 57753
const RULE = 57754
const SAVEPOINT = 57755
const SCHEMA = 57756
const SCHEMAS = 57757
const SCROLL = 57758
const SECOND_P = 57759
const SECURITY = 57760
const SEQUENCE = 57761
const SEQUENCES = 57762
const SERIALIZABLE = 57763
const SERVER = 57764
const SESSION = 57765
const SESSION_USER = 57766
const SETS = 57767
const SETOF = 57768
const SHARE = 57769
const SHOW = 57770
const SIMPLE = 57771
const SKIP = 57772
const SNAPSHOT = 57773
const SOME = 57774
const SQL_P = 57775
const STABLE = 57776
const STANDALONE_P = 57777
const START = 57778
const STATEMENT = 57779
const STATISTICS = 57780
const STORAGE = 57781
const STORED = 57782
const STRICT_P = 57783
const STRIP_P = 57784
const SUBSCRIPTION = 57785
const SUBSTRING = 57786
const SUPPORT = 57787
const SYSID = 57788
const SYSTEM_USER = 57789
const TABLES = 57790
const TABLESPACE = 57791
const TABLESAMPLE = 57792
const TEMP = 57793
const TEMPLATE = 57794
const TEMPORARY = 57795
const TEXT_P = 57796
const TIES = 57797
const TRAILING = 57798
const TRANSACTION = 57799
const TRANSFORM = 57800
const TREAT = 57801
const TRIGGER = 57802
const TRIM = 57803
const TRUNCATE = 57804
const TRUSTED = 57805
const TYPE_P = 57806
const TYPES_P = 57807
const UESCAPE = 57808
const UNBOUNDED = 57809
const UNCOMMITTED = 57810
const UNENCRYPTED = 57811
const UNION = 57812
const UNIQUE = 57813
const UNLISTEN = 57814
const UNLOGGED = 57815
const UNTIL = 57816
const VACUUM = 57817
const VALID = 57818
const VALIDATE = 57819
const VALIDATOR = 57820
const VERSION_P = 57821
const VIEW = 57822
const VIEWS = 57823
const VOLATILE = 57824
const WHITESPACE_P = 57825
const WINDOW = 57826
const WITHIN = 57827
const WORK = 57828
const WRITE = 57829
const XML_P = 57830
const XMLATTRIBUTES = 57831
const XMLCONCAT = 57832
const XMLELEMENT = 57833
const XMLEXISTS = 57834
const XMLFOREST = 57835
const XMLPARSE = 57836
const XMLPI = 57837
const XMLROOT = 57838
const XMLSERIALIZE = 57839
const YEAR_P = 57840
const YES_P = 57841
const INOUT = 57842
const OTHERS = 57843
const OLD = 57844
const KEY = 57845
const OFF = 57846
const OIDS = 57847
const OPTION = 57848
const OPTIONS = 57849
const OVER = 57850
const ORDER = 57851
const ANY = 57852
const BOTH = 57853
const CAST = 57854
const CHECK = 57855
const COLUMN = 57856
const FORMAT_LA = 57857
const NOT_LA = 57858
const NULLS_LA = 57859
const WITH_LA = 57860
const WITHOUT_LA = 57861
const MODE_TYPE_NAME = 57862
const MODE_PLPGSQL_EXPR = 57863
const MODE_PLPGSQL_ASSIGN1 = 57864
const MODE_PLPGSQL_ASSIGN2 = 57865
const MODE_PLPGSQL_ASSIGN3 = 57866
const UMINUS = 57867

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ANALYSE",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:12712

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 73,
	540, 73,
	-2, 1566,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 76,
	1, 1479,
	26, 1479,
	36, 1479,
	74, 1479,
	100, 1479,
	532, 1479,
	540, 1479,
	-2, 1484,
	-1, 79,
	67, 1896,
	84, 1896,
	85, 2518,
	236, 2705,
	307, 2063,
	419, 1896,
	480, 1896,
	-2, 86,
	-1, 92,
	68, 1483,
	69, 1483,
	130, 1483,
	269, 1483,
	280, 1483,
	316, 1483,
	470, 1483,
	509, 1483,
	-2, 1485,
	-1, 102,
	1, 73,
	540, 73,
	-2, 1566,
	-1, 144,
	85, 2517,
	-2, 1895,
	-1, 219,
	61, 291,
	64, 291,
	527, 291,
	533, 291,
	-2, 2561,
	-1, 633,
	68, 1468,
	69, 1468,
	130, 1468,
	280, 1468,
	-2, 1486,
	-1, 639,
	68, 1469,
	69, 1469,
	130, 1469,
	280, 1469,
	-2, 1489,
	-1, 693,
	84, 1896,
	480, 1896,
	-2, 85,
	-1, 695,
	209, 74,
	-2, 2524,
	-1, 797,
	7, 1396,
	16, 1396,
	17, 1396,
	531, 1396,
	-2, 92,
	-1, 798,
	7, 1397,
	16, 1397,
	17, 1397,
	531, 1397,
	-2, 93,
	-1, 806,
	531, 1398,
	-2, 2909,
	-1, 825,
	93, 2841,
	398, 2099,
	401, 2841,
	-2, 1992,
	-1, 829,
	93, 2841,
	398, 2099,
	401, 2841,
	-2, 1992,
	-1, 951,
	68, 1468,
	69, 1468,
	130, 1468,
	280, 1468,
	-2, 1490,
	-1, 1006,
	7, 1198,
	531, 1198,
	-2, 472,
	-1, 1021,
	7, 523,
	16, 523,
	17, 523,
	531, 523,
	-2, 1246,
	-1, 1043,
	7, 1440,
	-2, 473,
	-1, 1051,
	7, 1410,
	-2, 456,
	-1, 1052,
	7, 1445,
	531, 1445,
	-2, 457,
	-1, 1053,
	7, 1417,
	-2, 458,
	-1, 1054,
	7, 1445,
	531, 1445,
	-2, 459,
	-1, 1055,
	7, 1445,
	531, 1445,
	-2, 460,
	-1, 1056,
	7, 1404,
	-2, 462,
	-1, 1057,
	7, 1404,
	-2, 463,
	-1, 1058,
	7, 1447,
	-2, 466,
	-1, 1059,
	7, 1407,
	-2, 470,
	-1, 1060,
	7, 1408,
	-2, 471,
	-1, 1062,
	7, 1445,
	531, 1445,
	-2, 487,
	-1, 1063,
	7, 1404,
	-2, 491,
	-1, 1064,
	7, 1411,
	-2, 496,
	-1, 1065,
	7, 1409,
	-2, 499,
	-1, 1066,
	7, 1443,
	-2, 501,
	-1, 1067,
	7, 1443,
	-2, 502,
	-1, 1068,
	7, 1428,
	531, 1428,
	-2, 506,
	-1, 1221,
	6, 1992,
	12, 1992,
	534, 1992,
	535, 1992,
	-2, 1985,
	-1, 1267,
	531, 1333,
	-2, 2911,
	-1, 1444,
	127, 2803,
	411, 2803,
	-2, 1071,
	-1, 1478,
	21, 1370,
	432, 1370,
	510, 1370,
	-2, 833,
	-1, 1480,
	21, 1372,
	432, 1372,
	510, 1372,
	-2, 780,
	-1, 1485,
	1, 649,
	26, 649,
	36, 649,
	64, 649,
	65, 649,
	68, 649,
	69, 649,
	71, 649,
	72, 649,
	73, 649,
	74, 649,
	100, 649,
	130, 649,
	269, 649,
	280, 649,
	316, 649,
	470, 649,
	484, 649,
	509, 649,
	515, 649,
	532, 649,
	540, 649,
	541, 649,
	-2, 1474,
	-1, 1490,
	21, 1452,
	432, 1452,
	510, 1452,
	-2, 1448,
	-1, 1947,
	68, 1484,
	69, 1484,
	130, 1484,
	269, 1484,
	280, 1484,
	316, 1484,
	470, 1484,
	509, 1484,
	-2, 1167,
	-1, 1957,
	7, 1333,
	531, 1333,
	-2, 1216,
	-1, 2175,
	117, 86,
	307, 2063,
	460, 86,
	-2, 1896,
	-1, 2225,
	536, 107,
	-2, 2389,
	-1, 2253,
	531, 2065,
	-2, 215,
	-1, 2329,
	40, 1404,
	509, 1404,
	527, 1404,
	532, 1404,
	541, 1404,
	-2, 1400,
	-1, 2495,
	36, 2808,
	66, 2808,
	-2, 497,
	-1, 2496,
	36, 2809,
	66, 2809,
	-2, 370,
	-1, 2502,
	127, 2806,
	411, 2806,
	-2, 1180,
	-1, 2503,
	127, 2807,
	411, 2807,
	-2, 1181,
	-1, 2520,
	1, 415,
	26, 415,
	36, 415,
	64, 415,
	65, 415,
	68, 415,
	69, 415,
	71, 415,
	72, 415,
	74, 415,
	100, 415,
	130, 415,
	269, 415,
	280, 415,
	316, 415,
	470, 415,
	484, 415,
	509, 415,
	515, 415,
	529, 415,
	532, 415,
	533, 415,
	540, 415,
	-2, 114,
	-1, 2521,
	1, 413,
	26, 413,
	36, 413,
	64, 413,
	65, 413,
	68, 413,
	69, 413,
	71, 413,
	72, 413,
	74, 413,
	100, 413,
	130, 413,
	269, 413,
	280, 413,
	316, 413,
	470, 413,
	484, 413,
	509, 413,
	515, 413,
	529, 413,
	532, 413,
	533, 413,
	540, 413,
	-2, 114,
	-1, 2524,
	1, 432,
	26, 432,
	36, 432,
	64, 432,
	65, 432,
	68, 432,
	69, 432,
	71, 432,
	72, 432,
	74, 432,
	100, 432,
	130, 432,
	269, 432,
	280, 432,
	316, 432,
	470, 432,
	484, 432,
	509, 432,
	515, 432,
	529, 432,
	532, 432,
	533, 432,
	540, 432,
	-2, 114,
	-1, 2538,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1084,
	-1, 2539,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1085,
	-1, 2540,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1086,
	-1, 2541,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1087,
	-1, 2542,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1088,
	-1, 2543,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1089,
	-1, 2547,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1096,
	-1, 2553,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1100,
	-1, 2598,
	363, 1360,
	-2, 1363,
	-1, 2608,
	16, 1400,
	17, 1400,
	-2, 1332,
	-1, 2693,
	68, 1484,
	69, 1484,
	130, 1484,
	269, 1484,
	280, 1484,
	316, 1484,
	470, 1484,
	509, 1484,
	-2, 1167,
	-1, 2815,
	209, 74,
	-2, 2524,
	-1, 2888,
	536, 108,
	-2, 2389,
	-1, 2991,
	507, 2464,
	-2, 2457,
	-1, 3148,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1098,
	-1, 3149,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1102,
	-1, 3155,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1104,
	-1, 3190,
	363, 1359,
	-2, 1362,
	-1, 3344,
	75, 1588,
	76, 1588,
	77, 1588,
	78, 1588,
	79, 1588,
	81, 1588,
	82, 1588,
	-2, 1484,
	-1, 3358,
	531, 1333,
	-2, 108,
	-1, 3365,
	150, 1828,
	-2, 1763,
	-1, 3540,
	6, 1992,
	12, 1992,
	534, 1992,
	535, 1992,
	-2, 1966,
	-1, 3678,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1097,
	-1, 3681,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1106,
	-1, 3684,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1101,
	-1, 3689,
	52, 0,
	53, 0,
	54, 0,
	-2, 1119,
	-1, 3696,
	21, 1369,
	432, 1369,
	510, 1369,
	-2, 1449,
	-1, 3700,
	363, 1361,
	-2, 1364,
	-1, 3746,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1149,
	-1, 3747,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1150,
	-1, 3748,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1151,
	-1, 3749,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1152,
	-1, 3750,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1153,
	-1, 3751,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1154,
	-1, 4099,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1099,
	-1, 4100,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1103,
	-1, 4104,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1105,
	-1, 4105,
	52, 0,
	53, 0,
	54, 0,
	-2, 1120,
	-1, 4108,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1121,
	-1, 4109,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1123,
	-1, 4233,
	540, 73,
	-2, 1566,
	-1, 4372,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1107,
	-1, 4373,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1122,
	-1, 4374,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1124,
	-1, 4383,
	52, 0,
	-2, 1157,
	-1, 4630,
	52, 0,
	-2, 1158,
	-1, 4809,
	37, 0,
	44, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 455,
	-1, 5141,
	7, 1713,
	-2, 292,
	-1, 5167,
	7, 1440,
	-2, 473,
}

const yyPrivate = 57344

const yyLast = 91333

var yyAct = [...]int16{
	984, 5138, 5189, 4635, 634, 4645, 4819, 3134, 5190, 4271,
	5205, 2651, 3931, 4646, 970, 5139, 4998, 3224, 4402, 1942,
	804, 2770, 2718, 767, 4171, 4664, 4583, 2669, 4716, 4735,
	4886, 4305, 4223, 4808, 731, 2126, 4875, 4869, 4483, 3283,
	2721, 4986, 4696, 3132, 4612, 4531, 4042, 1392, 5034, 4764,
	3212, 4170, 3847, 3455, 4954, 4665, 4613, 1209, 4742, 4938,
	6, 2148, 4610, 4736, 2512, 4737, 4162, 1127, 4465, 2824,
	4400, 3484, 3383, 699, 4790, 4441, 4807, 4304, 3510, 4555,
	4787, 2959, 2954, 4230, 222, 222, 3843, 3113, 1105, 2734,
	626, 631, 75, 4510, 2777, 3458, 2816, 2911, 652, 4193,
	659, 659, 3353, 4527, 2676, 4048, 4186, 3905, 4043, 652,
	3088, 2015, 2264, 652, 1333, 3432, 3981, 4052, 3935, 695,
	698, 703, 698, 3851, 698, 659, 4563, 659, 2736, 3370,
	3384, 659, 659, 2324, 698, 659, 659, 1492, 3436, 1265,
	64, 4, 3524, 2765, 2174, 20, 2607, 2744, 652, 652,
	652, 652, 1166, 4204, 796, 698, 698, 659, 698, 807,
	2508, 3775, 3311, 659, 807, 659, 807, 659, 659, 659,
	659, 659, 678, 4448, 3898, 659, 698, 2139, 698, 659,
	4471, 698, 659, 659, 815, 4200, 817, 4368, 642, 4179,
	2173, 19, 2760, 3054, 945, 2877, 644, 94, 2172, 13,
	3418, 2171, 12, 2763, 1401, 3612, 4092, 1125, 885, 3336,
	848, 222, 222, 1452, 3435, 3074, 2953, 2926, 1196, 3518,
	3539, 2878, 2605, 2210, 3965, 3001, 649, 2205, 2201, 2804,
	2800, 2147, 3328, 1145, 2195, 3502, 2825, 674, 2803, 2791,
	2722, 2787, 64, 3347, 2762, 2805, 677, 20, 956, 3667,
	2626, 2677, 3292, 3223, 2128, 919, 3193, 1077, 702, 3339,
	998, 2615, 2563, 3816, 1952, 667, 3537, 1397, 2344, 1174,
	2907, 2842, 887, 2958, 1241, 1354, 780, 2248, 1113, 3167,
	651, 2222, 3137, 1152, 2790, 3361, 1085, 2181, 841, 1344,
	2237, 2779, 2739, 19, 2127, 1944, 2623, 2732, 2743, 94,
	2095, 13, 2742, 2741, 12, 3216, 2666, 2619, 2564, 2570,
	2573, 1453, 1441, 666, 1236, 2501, 1391, 838, 793, 1327,
	2322, 2491, 729, 2735, 2841, 2854, 1177, 1175, 2840, 209,
	2008, 694, 1967, 2755, 114, 1422, 116, 2517, 2649, 966,
	1416, 957, 1424, 1442, 181, 1359, 180, 845, 2402, 2349,
	633, 2401, 213, 2209, 137, 1131, 2221, 2154, 657, 1457,
	1425, 92, 1423, 938, 1389, 939, 1269, 2202, 940, 201,
	655, 665, 2784, 1234, 5135, 673, 1247, 1304, 663, 799,
	93, 5134, 1408, 671, 1398, 913, 5257, 1334, 638, 4552,
	1000, 3404, 1334, 1334, 3135, 5174, 888, 890, 1335, 5255,
	730, 5253, 4975, 1335, 1335, 2685, 3294, 5213, 5214, 3217,
	5174, 730, 730, 1460, 3403, 5201, 5214, 5198, 1410, 5182,
	3239, 1413, 5173, 3405, 4841, 5150, 2101, 1412, 2101, 997,
	5143, 5174, 809, 5125, 5151, 5108, 1411, 4785, 2103, 3316,
	5064, 4587, 4801, 4585, 4422, 825, 829, 1168, 1490, 2101,
	160, 1460, 1414, 638, 2104, 5063, 640, 5051, 5013, 5007,
	4983, 774, 775, 4946, 2101, 3493, 2758, 5014, 5008, 3444,
	2518, 660, 4944, 1458, 769, 639, 2103, 4945, 4943, 4442,
	4923, 4922, 808, 2705, 4919, 3192, 4944, 4944, 918, 2101,
	2101, 981, 2104, 4920, 3241, 824, 827, 4917, 3186, 2113,
	985, 4840, 1168, 4838, 4837, 4817, 4918, 738, 981, 3187,
	4841, 3241, 2101, 1337, 3280, 3251, 3252, 3253, 738, 738,
	4669, 1460, 2727, 4343, 4816, 4710, 905, 4695, 4685, 5113,
	5112, 4401, 881, 2101, 4422, 4668, 3127, 4686, 806, 738,
	900, 902, 3257, 806, 4667, 806, 2103, 4660, 4659, 3255,
	2758, 3295, 738, 738, 3218, 4536, 3444, 1337, 3326, 3257,
	4526, 4516, 4500, 4435, 4537, 4845, 738, 738, 738, 2758,
	3405, 4499, 4436, 4434, 80, 4433, 4431, 4421, 79, 81,
	4390, 4388, 3444, 4361, 3444, 1337, 4422, 2101, 99, 2101,
	4389, 4801, 4362, 4799, 697, 4638, 718, 4301, 720, 4300,
	738, 1373, 981, 4299, 670, 3241, 4302, 4293, 2758, 3251,
	3252, 3253, 2758, 4241, 4215, 96, 2758, 2510, 4363, 97,
	4347, 4103, 3405, 4216, 3244, 3245, 3246, 3247, 4111, 800,
	801, 932, 803, 4089, 4197, 3185, 1459, 2101, 101, 3860,
	3777, 4154, 2101, 3255, 952, 83, 2101, 3766, 2758, 3778,
	832, 3694, 835, 3257, 652, 839, 3767, 659, 3650, 3636,
	2101, 2235, 3563, 78, 3908, 3550, 3869, 2101, 3635, 3407,
	668, 3564, 3868, 652, 3551, 1100, 652, 652, 3408, 3699,
	3661, 652, 652, 3393, 652, 3321, 796, 796, 659, 1087,
	796, 3315, 3394, 3444, 3322, 3306, 3287, 3279, 3277, 3276,
	3316, 698, 698, 3275, 2101, 3239, 3280, 2101, 2101, 3274,
	3190, 3188, 2101, 3368, 1490, 3101, 2993, 1460, 2101, 2101,
	2101, 1472, 1473, 1474, 2101, 2994, 652, 1465, 1466, 1467,
	1468, 3303, 4714, 2105, 3302, 2818, 2106, 2759, 3301, 3239,
	2111, 669, 2103, 85, 2819, 2711, 2758, 2108, 2112, 2107,
	2707, 2109, 2102, 3127, 1337, 2110, 1483, 1484, 2104, 2101,
	2885, 2101, 2590, 2489, 659, 2113, 2480, 659, 2430, 1083,
	1490, 654, 102, 1460, 698, 1346, 3247, 2178, 2178, 1468,
	87, 5246, 3596, 4035, 1075, 1079, 1000, 1106, 1398, 1078,
	2178, 652, 652, 1079, 1000, 1130, 99, 1078, 2103, 1135,
	2124, 4101, 3552, 908, 674, 674, 907, 1346, 3553, 1130,
	910, 659, 698, 698, 2104, 1346, 1079, 2178, 4502, 954,
	1078, 2113, 2758, 96, 659, 5220, 1000, 97, 993, 2758,
	99, 948, 949, 5071, 5055, 913, 5046, 1490, 3857, 4831,
	1460, 4306, 4806, 2259, 4805, 2187, 101, 2142, 1208, 4798,
	2758, 4797, 4796, 4755, 3056, 96, 4788, 96, 4647, 97,
	4640, 97, 2122, 4623, 1490, 2103, 3494, 1460, 3685, 2262,
	2727, 1472, 1473, 1474, 1355, 1356, 3916, 4605, 101, 4540,
	101, 2104, 1415, 2105, 698, 1373, 2106, 1353, 2113, 1373,
	2111, 1373, 2103, 1091, 1137, 1073, 951, 2108, 2112, 2107,
	3293, 2109, 5001, 3289, 1332, 2110, 1483, 1484, 2104, 1341,
	1337, 1405, 1399, 1400, 4517, 2113, 1355, 1356, 4533, 4490,
	1230, 4445, 4397, 4394, 1129, 4380, 4379, 4367, 4168, 1357,
	91, 1421, 1092, 1463, 1464, 1465, 1466, 1467, 1468, 919,
	4161, 1459, 3494, 919, 919, 4158, 82, 2727, 5002, 90,
	1954, 3450, 1337, 84, 4144, 3386, 1338, 4139, 4131, 88,
	1342, 4130, 4120, 1157, 4999, 89, 2188, 1076, 4118, 2908,
	4117, 1463, 1464, 1465, 1466, 1467, 1468, 4116, 4115, 3907,
	3828, 3790, 794, 3801, 3789, 3773, 3763, 805, 86, 3762,
	3761, 3702, 805, 926, 805, 934, 1367, 935, 913, 925,
	1946, 927, 3696, 929, 3506, 3463, 640, 2885, 1172, 1173,
	2260, 3443, 2583, 3402, 3242, 3243, 3244, 3245, 3246, 3247,
	3367, 3297, 3248, 3249, 3250, 639, 3290, 1084, 1122, 2388,
	3270, 3242, 3243, 3244, 3245, 3246, 3247, 3915, 1288, 2199,
	3262, 1463, 1464, 1465, 1466, 1467, 1468, 1393, 1393, 3261,
	1409, 1102, 1103, 1200, 1164, 3240, 1206, 3237, 1224, 1303,
	3236, 1121, 3232, 1309, 1490, 642, 3230, 1460, 3229, 3228,
	100, 1472, 1473, 1474, 1136, 3227, 1142, 3205, 3194, 3189,
	1345, 3241, 652, 95, 659, 3108, 3858, 659, 3106, 3103,
	2111, 3102, 2103, 2706, 2697, 2143, 1104, 2108, 2112, 2107,
	2130, 2109, 2131, 913, 1953, 954, 95, 2140, 2104, 2186,
	2097, 652, 953, 113, 2153, 2113, 3248, 3249, 3250, 659,
	5254, 5242, 1267, 5238, 2263, 3242, 3243, 3244, 3245, 3246,
	3247, 1106, 2584, 1143, 5153, 5120, 703, 5093, 5088, 698,
	698, 698, 698, 5081, 698, 5023, 1460, 1358, 2261, 4953,
	659, 4534, 1350, 1351, 1352, 3214, 4743, 4916, 2121, 652,
	2010, 4891, 4888, 652, 4804, 4803, 2265, 4773, 2225, 4769,
	3371, 1092, 1385, 1132, 4700, 1133, 1134, 1248, 1382, 1266,
	4663, 2246, 4601, 4600, 4599, 4577, 4561, 1287, 1248, 652,
	1248, 698, 1278, 2100, 1284, 4560, 4559, 4550, 2145, 652,
	2198, 1369, 4547, 1330, 1306, 652, 2265, 1310, 1311, 2185,
	4206, 4429, 2010, 4426, 2182, 4391, 4226, 4210, 4196, 1479,
	4188, 4185, 1362, 1363, 652, 4054, 1366, 652, 1469, 1470,
	1471, 3954, 3911, 659, 4322, 3664, 3895, 1463, 1464, 1465,
	1466, 1467, 1468, 3887, 3884, 3220, 3865, 3856, 1171, 3833,
	3831, 981, 3823, 1955, 3241, 3645, 2141, 3645, 3251, 3252,
	3253, 3529, 698, 3528, 2361, 222, 2292, 3523, 1086, 909,
	4102, 1997, 3359, 702, 1403, 910, 652, 659, 100, 3357,
	3356, 2225, 2225, 2225, 738, 3309, 1273, 1274, 738, 738,
	1949, 2123, 3255, 1463, 1464, 1465, 1466, 1467, 1468, 1957,
	652, 652, 3257, 1434, 1433, 1426, 2281, 640, 3057, 3058,
	640, 640, 100, 1455, 3124, 1456, 1399, 1400, 698, 698,
	698, 698, 698, 95, 2245, 95, 1449, 2285, 3211, 1450,
	1451, 1079, 698, 698, 2007, 1078, 3204, 659, 659, 3180,
	698, 659, 1358, 3178, 2575, 99, 1351, 1350, 3057, 3058,
	3085, 2297, 3014, 1352, 2905, 2300, 2301, 2115, 839, 5200,
	1463, 1464, 1465, 1466, 1467, 1468, 1132, 2827, 2772, 1479,
	2581, 2631, 96, 2625, 2459, 661, 97, 95, 1469, 1470,
	1471, 2465, 2323, 652, 2242, 3234, 2429, 1463, 1464, 1465,
	1466, 1467, 1468, 5000, 3235, 101, 704, 2169, 2358, 2359,
	1363, 1362, 1132, 715, 716, 717, 2284, 2164, 1366, 1402,
	1402, 3804, 1402, 2155, 2006, 1346, 981, 3526, 1132, 3241,
	1348, 2485, 2296, 3251, 3252, 3253, 2413, 2414, 2206, 2004,
	2003, 2002, 2001, 2005, 2215, 3693, 2000, 1999, 1490, 1998,
	3800, 1460, 2098, 2452, 2404, 2151, 2404, 3131, 2226, 652,
	2404, 2404, 1996, 1995, 2304, 2305, 1994, 3255, 2014, 652,
	1993, 2179, 698, 1992, 1991, 1990, 2103, 3257, 1989, 3680,
	1988, 1987, 2254, 2256, 2156, 1986, 1985, 1490, 1984, 1983,
	1460, 2321, 2104, 1982, 2470, 1981, 1980, 1979, 2183, 2113,
	1978, 1977, 1976, 1975, 2007, 1974, 1973, 2310, 1972, 1970,
	2314, 1969, 1956, 1954, 738, 2103, 2383, 1361, 3679, 1235,
	2014, 1082, 2014, 772, 1115, 1116, 2308, 3796, 1119, 1953,
	3409, 2104, 1962, 3395, 2229, 2007, 2233, 2234, 2113, 111,
	3807, 1490, 3637, 2820, 1460, 738, 2408, 2728, 1472, 1473,
	1474, 738, 1355, 1356, 1146, 1146, 3354, 3133, 3225, 4708,
	2105, 5207, 2257, 2106, 1305, 3570, 2236, 2111, 999, 2103,
	2255, 2226, 2226, 2226, 2108, 2112, 2107, 4031, 2109, 1479,
	2580, 4026, 2110, 1483, 1484, 2104, 4495, 3580, 1469, 1470,
	1471, 2206, 2113, 2475, 2476, 2477, 2986, 1463, 1464, 1465,
	1466, 1467, 1468, 2346, 2346, 2982, 3521, 2307, 4707, 2472,
	1132, 3242, 3243, 3244, 3245, 3246, 3247, 4350, 2579, 638,
	2252, 3572, 2238, 2189, 2190, 2191, 2192, 2362, 2193, 3532,
	2350, 3222, 981, 1286, 4251, 3241, 2624, 1959, 2373, 3251,
	3252, 3253, 3456, 3426, 2380, 2458, 2375, 2376, 2377, 2378,
	3422, 3692, 4488, 4940, 2206, 637, 2474, 2387, 1197, 2450,
	5208, 2350, 4884, 4883, 2393, 2406, 1429, 2350, 4706, 2410,
	2411, 2409, 921, 3255, 4699, 2278, 1463, 1464, 1465, 1466,
	1467, 1468, 2922, 3257, 3894, 2444, 1429, 2434, 2910, 2343,
	4512, 2909, 2487, 5127, 4281, 3533, 1490, 1966, 738, 1460,
	4369, 2457, 636, 4634, 4146, 105, 4145, 1094, 2838, 2168,
	2810, 1158, 625, 623, 1289, 4523, 1242, 2251, 1110, 2612,
	2467, 2468, 2111, 1402, 2103, 899, 2469, 1402, 1402, 2108,
	2112, 2107, 892, 2109, 104, 2843, 680, 790, 1289, 3780,
	2104, 680, 1197, 3460, 4494, 4729, 2360, 2113, 2837, 3480,
	3691, 3690, 4506, 682, 4294, 2843, 4338, 4078, 682, 4034,
	2714, 738, 4002, 738, 738, 738, 738, 3870, 2613, 142,
	1402, 1402, 2504, 1153, 2498, 3248, 3249, 3250, 3442, 2217,
	2274, 2273, 1243, 2935, 3242, 3243, 3244, 3245, 3246, 3247,
	105, 105, 2490, 4088, 2844, 2792, 2794, 2793, 3535, 688,
	1211, 2515, 2417, 2418, 2419, 2420, 2421, 2250, 1118, 2516,
	1490, 2527, 2614, 1460, 2844, 2611, 839, 2451, 2933, 104,
	104, 2479, 117, 897, 2454, 823, 763, 5067, 3821, 2272,
	632, 2934, 2268, 621, 3658, 3519, 4272, 100, 2103, 4522,
	4937, 3154, 1490, 4900, 4513, 1460, 4782, 142, 4633, 2249,
	95, 3143, 4781, 3142, 2104, 3141, 635, 3140, 2989, 2460,
	779, 2113, 778, 777, 2461, 776, 2932, 1213, 2464, 4333,
	2103, 4019, 2466, 3147, 4016, 2985, 5066, 2290, 2014, 2286,
	2883, 5041, 4044, 5197, 4004, 1244, 2104, 3623, 2616, 4893,
	1381, 3428, 2416, 2113, 981, 638, 4395, 3241, 5196, 4519,
	4518, 3251, 3252, 3253, 4739, 906, 2506, 2488, 4282, 2863,
	2481, 2483, 5044, 4913, 4539, 4894, 1379, 4269, 2845, 4263,
	712, 713, 714, 1430, 4010, 4086, 3461, 3562, 3256, 706,
	707, 708, 709, 710, 711, 3255, 3111, 3051, 2845, 2851,
	3248, 3249, 3250, 1430, 2616, 3257, 2529, 3559, 3500, 3242,
	3243, 3244, 3245, 3246, 3247, 3558, 2502, 2502, 1428, 2239,
	1321, 2354, 4722, 3711, 2921, 5126, 703, 2239, 5111, 2610,
	2117, 1463, 1464, 1465, 1466, 1467, 1468, 2507, 4295, 2500,
	2118, 2599, 4959, 1141, 3424, 3714, 1319, 2944, 2283, 4982,
	1212, 2591, 2595, 3474, 2597, 3427, 1431, 3385, 4055, 2713,
	143, 4001, 2119, 3534, 3540, 3607, 671, 3712, 2866, 1139,
	1463, 1464, 1465, 1466, 1467, 1468, 1431, 2683, 2239, 2239,
	3396, 1316, 3063, 2671, 2672, 2673, 2674, 1378, 3062, 2578,
	2239, 2269, 2403, 3045, 2239, 3029, 1147, 1147, 3061, 2596,
	2239, 4493, 2271, 2270, 2703, 2399, 1479, 3225, 3060, 2239,
	3042, 2398, 3041, 2367, 1307, 1469, 1470, 1471, 2239, 1302,
	2239, 2616, 1285, 1268, 1463, 1464, 1465, 1466, 1467, 1468,
	3610, 3286, 1432, 1239, 3423, 4941, 1238, 1237, 143, 1233,
	4238, 981, 1214, 2616, 3241, 2345, 2345, 1240, 3251, 3252,
	3253, 2267, 1432, 683, 4566, 4939, 2715, 1318, 2835, 2690,
	2891, 2392, 2391, 702, 2390, 2167, 4045, 2577, 179, 1197,
	5069, 1380, 1215, 3478, 698, 1216, 3425, 1282, 981, 1217,
	1138, 3241, 3255, 1313, 4958, 3251, 3252, 3253, 1095, 3477,
	3849, 2149, 3257, 4122, 2723, 2288, 2725, 2864, 2241, 3932,
	2130, 1218, 687, 2240, 2748, 2748, 3248, 3249, 3250, 681,
	4584, 1161, 2246, 698, 681, 3242, 3243, 3244, 3245, 3246,
	3247, 2795, 141, 2836, 140, 1941, 1245, 3000, 3972, 3257,
	2860, 3687, 4028, 5010, 4626, 1328, 3166, 659, 652, 1221,
	1324, 1320, 3654, 1280, 1123, 2396, 3576, 2815, 3386, 3573,
	4734, 688, 2681, 4414, 4740, 659, 1219, 2826, 2923, 3710,
	2675, 1479, 2303, 671, 1140, 698, 896, 659, 766, 2246,
	4532, 5068, 2588, 1220, 2862, 659, 2292, 2007, 4957, 1463,
	1464, 1465, 1466, 1467, 1468, 2007, 642, 670, 2594, 2879,
	698, 3126, 3044, 2214, 652, 1089, 1439, 3560, 3933, 3609,
	141, 4415, 140, 2951, 5011, 2293, 1325, 659, 659, 659,
	1222, 652, 652, 5037, 4741, 2246, 2686, 2942, 659, 4046,
	145, 2789, 1123, 2499, 5036, 2913, 659, 2917, 659, 659,
	2010, 2937, 1949, 689, 659, 1419, 2859, 659, 659, 1093,
	2906, 659, 2357, 659, 659, 4084, 1281, 652, 2807, 2166,
	3655, 2582, 898, 668, 810, 4107, 4106, 659, 659, 652,
	3020, 659, 659, 923, 636, 2870, 4723, 4039, 2621, 5040,
	3540, 2869, 2323, 698, 698, 3604, 4246, 3844, 659, 659,
	4901, 2323, 5038, 652, 2889, 2890, 1315, 652, 3473, 659,
	2660, 2277, 4298, 1463, 1464, 1465, 1466, 1467, 1468, 4732,
	84, 4627, 2679, 659, 659, 659, 659, 659, 2159, 1323,
	659, 2876, 2355, 2702, 659, 2701, 3561, 2927, 659, 659,
	685, 2158, 2886, 3021, 669, 1463, 1464, 1465, 1466, 1467,
	1468, 1090, 3027, 3525, 2861, 684, 2880, 3972, 2977, 659,
	659, 2865, 4648, 659, 2884, 659, 4887, 2811, 4564, 3973,
	659, 3999, 659, 659, 2730, 2639, 4212, 659, 913, 659,
	4762, 2846, 659, 659, 2751, 2751, 906, 4778, 3248, 3249,
	3250, 2788, 2691, 2282, 222, 2356, 659, 3242, 3243, 3244,
	3245, 3246, 3247, 659, 670, 3492, 659, 960, 1312, 4211,
	3411, 1314, 2293, 659, 659, 4625, 2731, 2826, 5232, 3072,
	4049, 3608, 3079, 4029, 659, 698, 796, 2970, 3974, 807,
	703, 807, 807, 2973, 2974, 2988, 4297, 3577, 2901, 686,
	3574, 2565, 2566, 2567, 2568, 2160, 2996, 2998, 2754, 3087,
	2653, 3092, 3093, 2617, 2726, 5231, 4896, 4898, 4897, 2995,
	2757, 1295, 698, 2632, 2633, 2634, 2635, 2276, 1279, 2751,
	668, 3975, 4283, 2294, 1440, 2277, 4761, 2295, 4268, 2849,
	3901, 1114, 4296, 3107, 4481, 3037, 1968, 941, 3039, 3040,
	941, 943, 2629, 811, 4746, 3986, 941, 943, 2814, 2817,
	2812, 3075, 2813, 3091, 2337, 919, 5012, 4275, 2798, 2748,
	5195, 4890, 690, 4955, 687, 3125, 652, 692, 2692, 2694,
	3487, 2696, 3719, 2698, 2699, 2700, 3902, 1291, 5029, 2620,
	2888, 1322, 4719, 3038, 2828, 2829, 2830, 2831, 2832, 4134,
	1096, 669, 2405, 2945, 1418, 2960, 3754, 3892, 2014, 2966,
	4543, 812, 2894, 2749, 2749, 3096, 3753, 3097, 937, 3098,
	4087, 3989, 3100, 5035, 894, 3023, 2975, 702, 2529, 2980,
	1417, 2875, 703, 3466, 3109, 3248, 3249, 3250, 3973, 773,
	642, 1169, 3966, 2014, 3242, 3243, 3244, 3245, 3246, 3247,
	4873, 904, 2983, 3176, 3191, 791, 2987, 725, 3136, 2114,
	3414, 1383, 3181, 2961, 4067, 3196, 3197, 2767, 904, 1393,
	1124, 3055, 3248, 3249, 3250, 3213, 2427, 4066, 924, 2642,
	2425, 3242, 3243, 3244, 3245, 3246, 3247, 2797, 730, 2428,
	1294, 2276, 2991, 3421, 2997, 2014, 2990, 3974, 2749, 3130,
	2426, 3420, 3426, 2422, 4050, 3179, 2431, 3866, 1271, 3422,
	738, 3900, 1271, 3069, 2014, 5115, 1328, 1360, 642, 2833,
	2294, 3078, 3294, 730, 2295, 1349, 1292, 3733, 2643, 2428,
	730, 3217, 4637, 2426, 1364, 1365, 5227, 5142, 3022, 4818,
	3975, 4484, 3956, 3171, 2882, 4208, 3272, 3168, 3172, 4424,
	4472, 4396, 1297, 4473, 3314, 3173, 4474, 3219, 1296, 942,
	3305, 4150, 942, 4129, 3170, 5163, 5162, 5130, 942, 702,
	4682, 5129, 2644, 3046, 4475, 2641, 3129, 3047, 2130, 3417,
	3050, 4966, 1329, 3048, 4151, 3047, 4683, 3338, 3338, 796,
	4965, 2748, 3350, 3338, 3338, 738, 738, 2424, 3514, 3987,
	3076, 3208, 3486, 893, 3084, 2914, 5075, 3278, 5074, 3366,
	4274, 4477, 3891, 3285, 4821, 4820, 4968, 652, 4135, 652,
	652, 4476, 3988, 2140, 652, 652, 4971, 2971, 2972, 2751,
	738, 4478, 4972, 4967, 792, 3755, 724, 738, 4825, 3110,
	4752, 3917, 3899, 3115, 4824, 4826, 4827, 3116, 2645, 1402,
	2423, 5164, 3118, 1377, 3139, 1402, 1402, 3144, 659, 2014,
	2504, 652, 3119, 1232, 4636, 1149, 919, 3295, 806, 3163,
	806, 806, 3128, 4485, 3957, 3195, 3218, 1270, 4969, 3169,
	4643, 1270, 4987, 642, 4970, 4644, 659, 4823, 1293, 3512,
	3077, 4681, 1290, 4822, 659, 4830, 659, 4404, 652, 652,
	4409, 4974, 659, 4973, 4407, 1372, 4408, 4410, 1168, 4989,
	738, 3151, 3397, 3153, 3429, 3164, 1156, 4788, 4988, 4508,
	4235, 919, 919, 3490, 1298, 4990, 3469, 3392, 3112, 2640,
	3094, 2821, 937, 2232, 3375, 3183, 2225, 1971, 1427, 1308,
	1120, 3284, 659, 3488, 4163, 3323, 5208, 5178, 3412, 5096,
	3428, 2182, 5095, 3378, 5204, 5226, 4992, 3832, 5250, 3083,
	3382, 4479, 4480, 659, 5137, 4994, 4439, 1402, 3210, 4266,
	4222, 1388, 3809, 3430, 3548, 3400, 3207, 2847, 3482, 3511,
	2796, 2768, 3434, 659, 659, 659, 659, 2279, 1448, 913,
	2338, 3462, 4172, 4406, 3296, 4411, 839, 2347, 2749, 2337,
	3376, 3348, 1167, 2335, 3433, 2756, 4991, 1371, 3130, 2258,
	4419, 4997, 2752, 2752, 4852, 4853, 4995, 4856, 1155, 4169,
	3267, 3268, 3269, 4420, 3298, 3499, 4851, 3501, 2949, 4675,
	4855, 1402, 4673, 659, 659, 4452, 659, 659, 659, 2588,
	3288, 5003, 5004, 3424, 3122, 3122, 3335, 5002, 3505, 2751,
	4676, 2751, 3351, 3352, 3427, 5225, 3307, 2366, 1949, 2336,
	2719, 2720, 3, 5181, 3313, 2687, 3312, 2948, 3940, 3317,
	4203, 2950, 3319, 3415, 3318, 659, 2339, 107, 108, 109,
	110, 652, 3544, 3345, 3546, 2292, 3497, 3343, 3565, 3566,
	4907, 3342, 3341, 3365, 659, 3363, 3364, 2752, 2947, 3390,
	3174, 3175, 659, 4906, 4907, 2014, 4906, 3117, 3542, 4451,
	3941, 2014, 4835, 3358, 3346, 3471, 3472, 4996, 2556, 3312,
	3387, 2513, 2514, 3454, 4653, 3481, 3665, 3666, 2560, 3639,
	2558, 3541, 3401, 3423, 2555, 3059, 2557, 2559, 1099, 4834,
	698, 698, 4650, 3942, 3943, 3944, 4418, 103, 4652, 4651,
	698, 895, 3300, 834, 3452, 3453, 719, 3431, 5002, 5092,
	3961, 2724, 659, 3457, 3310, 662, 919, 2710, 762, 208,
	215, 5132, 5233, 3485, 3599, 3425, 3504, 4528, 652, 3594,
	1943, 3595, 3538, 4780, 3467, 3258, 3259, 3260, 652, 2912,
	652, 2323, 3613, 5133, 4258, 652, 2007, 3329, 3334, 3332,
	3333, 3331, 3659, 3327, 3330, 3817, 4081, 4080, 3603, 3842,
	2369, 738, 2368, 2184, 2134, 2133, 2226, 3498, 2749, 3496,
	2749, 2709, 106, 3663, 4461, 4182, 3812, 3399, 3513, 4457,
	3527, 2908, 3520, 620, 3632, 622, 624, 3634, 3531, 3449,
	3616, 3811, 3617, 3618, 3815, 3334, 3332, 3333, 3331, 2014,
	3705, 3706, 3707, 2569, 3399, 612, 4093, 4697, 3697, 3592,
	5131, 4738, 5073, 5072, 4905, 3724, 738, 738, 3877, 3360,
	3329, 3334, 3332, 3333, 3331, 3651, 3327, 3330, 3597, 4903,
	4832, 3567, 4641, 4227, 3949, 3787, 738, 738, 3614, 3786,
	3593, 3728, 3727, 3099, 3030, 3398, 738, 4454, 4455, 3019,
	2774, 2717, 2352, 3571, 3584, 2266, 2218, 2213, 3589, 1339,
	1300, 1299, 2330, 3457, 794, 1275, 1162, 805, 1074, 805,
	805, 642, 3581, 1458, 676, 672, 3668, 2622, 5060, 4977,
	4463, 4456, 3601, 4459, 4460, 4462, 4458, 4976, 4857, 4148,
	4378, 2458, 4334, 4214, 4094, 4020, 943, 2561, 4017, 3764,
	4181, 3329, 3334, 3332, 3333, 3331, 3878, 3327, 3330, 4180,
	3732, 3406, 2302, 2299, 950, 3479, 3138, 2723, 3657, 2486,
	3135, 1402, 3121, 2130, 3503, 4285, 4244, 2748, 2733, 4243,
	2748, 3215, 5156, 4515, 4286, 2014, 2014, 2014, 3822, 4384,
	3653, 3338, 3350, 3338, 3338, 3338, 3638, 2752, 3656, 3640,
	3829, 2138, 3120, 4287, 2137, 4284, 3470, 4133, 3686, 3355,
	3233, 1444, 3165, 3769, 2518, 675, 664, 5155, 5049, 2246,
	678, 3837, 3854, 4592, 4589, 3802, 3803, 4352, 4329, 3648,
	659, 1092, 3649, 4324, 4323, 2206, 4041, 2565, 2566, 2567,
	2568, 4040, 4030, 4025, 2562, 3938, 3629, 930, 3628, 652,
	3627, 2140, 3626, 3625, 3624, 3620, 3619, 3611, 3598, 738,
	3591, 3579, 659, 3578, 3575, 3704, 3509, 3508, 659, 3507,
	3203, 698, 3202, 3672, 3673, 3674, 3675, 3201, 652, 3200,
	3152, 2572, 5085, 3150, 3886, 3859, 3081, 3043, 3024, 2571,
	2572, 2588, 2554, 3893, 3688, 2826, 847, 847, 2415, 2412,
	2407, 698, 3701, 2400, 2386, 2382, 2381, 2379, 2374, 2372,
	2365, 738, 3704, 3713, 3715, 3716, 2348, 2334, 3722, 2333,
	2332, 2318, 2291, 2287, 3731, 3864, 3862, 2280, 2135, 3146,
	2530, 3806, 2531, 3105, 652, 3104, 659, 922, 3936, 911,
	2463, 2462, 738, 659, 2748, 2879, 3726, 4717, 3737, 2620,
	4864, 3951, 3855, 3892, 5117, 4313, 3929, 3885, 913, 659,
	659, 5116, 4309, 4160, 4159, 3853, 2246, 4126, 4125, 3605,
	3967, 3434, 3919, 3018, 2140, 3883, 659, 2140, 2551, 2140,
	3983, 3015, 3768, 3012, 3008, 2549, 2552, 2548, 4276, 2550,
	3782, 2323, 2353, 3433, 4005, 3783, 659, 3130, 3476, 913,
	3913, 3348, 2323, 2323, 3982, 3795, 3797, 3805, 2481, 2483,
	2887, 3798, 659, 3814, 3642, 3643, 2313, 2752, 3781, 2752,
	3927, 659, 659, 659, 3647, 2588, 659, 3808, 3876, 659,
	659, 659, 659, 3946, 1305, 3825, 1205, 2751, 3945, 2385,
	2751, 3990, 659, 1199, 3914, 3839, 3818, 3819, 946, 659,
	3824, 659, 3826, 3827, 2587, 3182, 2341, 5199, 913, 3861,
	647, 4257, 659, 3845, 2586, 2340, 2007, 4306, 947, 146,
	659, 659, 3906, 5217, 5216, 659, 659, 659, 659, 659,
	648, 3682, 3683, 2927, 4069, 4009, 3871, 3880, 3881, 3875,
	2788, 917, 2880, 2771, 3879, 4224, 3995, 3998, 1334, 1168,
	3810, 3114, 4727, 3813, 4726, 4053, 4303, 4218, 3955, 1335,
	693, 2014, 1943, 3631, 3434, 703, 3516, 2900, 4008, 2863,
	3978, 2868, 2775, 652, 652, 652, 652, 3984, 2208, 2200,
	2150, 3904, 3921, 3922, 3925, 3912, 3433, 3888, 2144, 3910,
	3130, 1165, 2750, 2750, 1154, 1148, 3918, 3920, 3784, 1144,
	1126, 3970, 3788, 5070, 3977, 3717, 3979, 3928, 4449, 664,
	2858, 4576, 4575, 4068, 3963, 3633, 3947, 3075, 3600, 3962,
	3545, 3543, 3740, 3741, 3742, 3743, 3744, 3745, 3746, 3747,
	3748, 3749, 3750, 3751, 3752, 3950, 3756, 3953, 4091, 3515,
	3483, 3379, 2206, 2852, 2848, 2773, 2769, 2473, 2471, 4074,
	2316, 3729, 3730, 3996, 2751, 2751, 2749, 4000, 3997, 2749,
	2312, 2219, 4085, 2204, 2196, 2194, 2176, 1376, 2866, 4007,
	1375, 4073, 1374, 1368, 4003, 3130, 4076, 2750, 1343, 1340,
	1336, 4012, 1331, 1317, 1276, 1226, 1223, 1204, 1198, 4311,
	2751, 4310, 3068, 2175, 738, 4142, 1114, 883, 4980, 4910,
	4899, 3983, 702, 1128, 4800, 4556, 4639, 4578, 4496, 4438,
	659, 4314, 2748, 2748, 4270, 4256, 2748, 4059, 4247, 4079,
	3374, 2873, 796, 2867, 659, 3785, 1384, 4173, 3055, 3338,
	2231, 2826, 4191, 2125, 796, 2099, 3198, 3199, 2484, 2482,
	3123, 4058, 4198, 1000, 1000, 1000, 1000, 913, 5224, 738,
	5209, 4070, 4075, 738, 738, 5047, 2492, 2246, 698, 4164,
	4165, 4758, 2856, 2871, 3882, 3491, 4718, 2298, 3841, 1005,
	1003, 1002, 994, 2116, 4195, 915, 4027, 1406, 652, 4233,
	4514, 4032, 4225, 5027, 4509, 3160, 4237, 3158, 2140, 3836,
	4721, 3156, 4511, 3157, 3159, 3890, 4209, 2864, 4892, 4507,
	4189, 4190, 2157, 4503, 3388, 4072, 3896, 698, 3073, 3391,
	1402, 2778, 3380, 2785, 1262, 607, 2246, 608, 659, 4213,
	214, 2342, 2802, 2749, 2749, 3909, 4114, 2163, 2162, 224,
	2860, 2014, 796, 2014, 4219, 4521, 4147, 4228, 4520, 4245,
	4745, 2481, 2483, 4242, 2014, 4047, 4128, 2874, 3984, 3028,
	2879, 4217, 3937, 3939, 3489, 691, 2872, 1160, 2397, 2749,
	4757, 3934, 3080, 2834, 2246, 2432, 3447, 4290, 3446, 42,
	41, 40, 39, 38, 2862, 37, 36, 35, 62, 61,
	1402, 4194, 60, 59, 58, 57, 4255, 56, 55, 54,
	53, 52, 51, 4264, 4262, 50, 49, 48, 47, 46,
	45, 44, 4167, 43, 34, 4166, 33, 32, 31, 30,
	2569, 29, 4231, 28, 27, 2014, 26, 659, 4289, 25,
	659, 24, 23, 22, 21, 2323, 659, 659, 659, 2853,
	72, 659, 659, 659, 71, 1170, 2859, 70, 4187, 69,
	68, 659, 659, 67, 66, 5, 4252, 4253, 65, 4220,
	63, 18, 17, 1402, 1326, 2170, 128, 736, 1097, 3990,
	2180, 2751, 4307, 2519, 3536, 4248, 4261, 3517, 736, 736,
	3964, 2857, 2751, 2751, 4207, 182, 2751, 2750, 2433, 1201,
	5106, 659, 659, 798, 2925, 659, 4874, 659, 798, 736,
	4250, 3848, 115, 798, 2751, 798, 4249, 2880, 4733, 3419,
	3416, 3971, 736, 736, 3161, 3846, 4763, 3980, 4265, 4240,
	3852, 2855, 4292, 873, 873, 2764, 736, 736, 736, 4376,
	4320, 4321, 3850, 2761, 1402, 5177, 4377, 4405, 3221, 2684,
	659, 2689, 4124, 4399, 2861, 4177, 4178, 4127, 1402, 4183,
	4671, 2865, 4318, 4277, 4440, 4279, 4985, 4278, 4229, 4437,
	736, 4192, 4339, 2823, 98, 2752, 4649, 4417, 2752, 2708,
	2132, 77, 646, 645, 4979, 955, 4312, 4288, 4687, 4868,
	4464, 4205, 4453, 659, 4316, 3840, 112, 4175, 4403, 4353,
	2136, 4340, 4202, 2748, 4356, 4201, 659, 4157, 4315, 4191,
	4854, 4850, 4849, 3799, 2565, 2566, 2567, 2568, 4319, 3055,
	2716, 3162, 4199, 2729, 2120, 16, 15, 14, 11, 3055,
	2751, 652, 10, 9, 8, 4486, 7, 3854, 4618, 4616,
	4617, 4615, 2576, 652, 705, 1487, 4326, 3983, 652, 4328,
	2749, 2505, 944, 1447, 936, 4624, 3723, 4121, 4609, 1965,
	4981, 2749, 2749, 3820, 2609, 2749, 851, 659, 852, 1347,
	849, 995, 875, 3644, 4153, 3779, 4413, 3770, 4432, 659,
	2652, 2648, 2637, 2749, 659, 2659, 4141, 652, 2592, 979,
	659, 978, 4489, 659, 2618, 3206, 3936, 1963, 4497, 973,
	974, 4469, 807, 969, 1438, 698, 1435, 4548, 4466, 4371,
	2319, 2014, 4430, 2946, 3547, 4430, 3568, 2750, 2952, 2750,
	4779, 3067, 4554, 3983, 703, 1494, 698, 698, 4525, 2638,
	1489, 4392, 2, 1, 0, 0, 0, 0, 738, 0,
	0, 4542, 2752, 2752, 659, 659, 0, 3982, 0, 4571,
	659, 4545, 4221, 0, 659, 0, 0, 0, 0, 0,
	4487, 0, 4524, 0, 0, 703, 807, 0, 0, 0,
	0, 4491, 0, 659, 4586, 4416, 4498, 4529, 2752, 0,
	3853, 4467, 4446, 4557, 4505, 4501, 4596, 0, 4425, 0,
	4611, 4470, 0, 64, 3984, 4504, 4450, 4569, 20, 2749,
	0, 4259, 0, 2165, 0, 4447, 4562, 2627, 0, 0,
	2177, 0, 0, 4482, 4549, 4551, 0, 738, 2654, 0,
	738, 0, 0, 0, 0, 0, 4628, 0, 0, 0,
	2680, 0, 0, 2627, 0, 0, 0, 4631, 4594, 4568,
	0, 0, 0, 3983, 19, 4579, 4565, 659, 4567, 4654,
	94, 0, 13, 0, 3434, 12, 0, 796, 4580, 0,
	4666, 702, 0, 2751, 0, 0, 0, 4655, 0, 0,
	3984, 0, 4593, 4598, 0, 4595, 3433, 4658, 0, 0,
	3130, 0, 0, 0, 0, 4604, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4693, 0, 0, 0, 0,
	0, 0, 702, 0, 0, 4656, 0, 2751, 0, 0,
	0, 0, 0, 0, 0, 1402, 4632, 0, 0, 0,
	0, 919, 0, 0, 1402, 1402, 4428, 0, 4694, 0,
	0, 0, 0, 0, 4688, 0, 652, 0, 0, 0,
	0, 0, 0, 659, 4677, 4678, 0, 0, 4679, 4680,
	0, 0, 0, 4657, 0, 0, 4662, 0, 4661, 0,
	659, 0, 0, 4591, 4704, 4344, 4345, 0, 4731, 796,
	4348, 4349, 0, 2748, 0, 0, 0, 4709, 4730, 0,
	0, 4702, 0, 2751, 0, 0, 0, 652, 4398, 0,
	3984, 4412, 0, 0, 0, 798, 798, 4703, 0, 0,
	0, 0, 0, 4712, 4194, 4701, 2014, 0, 4766, 4767,
	659, 798, 4748, 659, 4765, 4713, 4711, 4698, 4753, 0,
	0, 0, 0, 4720, 2456, 4689, 847, 0, 0, 0,
	0, 0, 2749, 4383, 0, 798, 798, 4784, 4728, 798,
	4747, 0, 4705, 0, 0, 0, 0, 4750, 0, 2752,
	0, 847, 0, 4754, 4760, 0, 4774, 0, 0, 0,
	2752, 2752, 4759, 0, 2752, 0, 4231, 1946, 0, 0,
	4184, 2140, 4776, 0, 2130, 0, 2749, 4724, 0, 0,
	0, 806, 2752, 0, 2826, 0, 0, 0, 0, 0,
	0, 4751, 0, 4848, 4792, 4793, 4789, 0, 0, 0,
	0, 0, 2140, 2751, 2140, 4775, 0, 0, 0, 4836,
	0, 0, 0, 0, 0, 0, 0, 2751, 0, 0,
	0, 4876, 873, 4813, 4814, 0, 4872, 0, 0, 4828,
	0, 0, 642, 0, 738, 0, 4768, 0, 4770, 4795,
	4772, 4829, 0, 2528, 0, 806, 0, 919, 0, 0,
	0, 0, 2749, 4839, 0, 0, 0, 4871, 4847, 0,
	4870, 4879, 4885, 4844, 0, 0, 0, 698, 0, 0,
	0, 4846, 0, 659, 0, 4867, 4880, 0, 0, 4558,
	4273, 0, 0, 0, 0, 0, 0, 0, 4466, 0,
	2140, 0, 0, 0, 703, 0, 4881, 0, 2752, 0,
	4572, 4573, 659, 659, 4882, 0, 4889, 0, 0, 4895,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4611, 4904, 4902, 4912, 0, 4908, 0, 0, 0, 0,
	0, 0, 0, 2751, 0, 0, 0, 0, 4930, 0,
	0, 0, 0, 1402, 0, 4964, 0, 0, 4833, 0,
	4914, 4951, 4952, 0, 736, 0, 0, 4933, 736, 736,
	4931, 0, 4666, 4956, 4978, 0, 738, 4929, 4877, 4942,
	0, 4949, 2749, 0, 0, 0, 0, 0, 4950, 4862,
	4927, 4865, 4948, 0, 4630, 2140, 2749, 0, 4962, 4963,
	0, 798, 4924, 798, 4926, 0, 4928, 0, 0, 0,
	798, 5009, 0, 0, 0, 2750, 0, 0, 2750, 3983,
	0, 798, 798, 798, 798, 798, 5028, 4984, 807, 807,
	0, 659, 798, 5025, 0, 0, 5022, 0, 5015, 5016,
	0, 702, 0, 0, 659, 0, 0, 2014, 5030, 5031,
	5020, 0, 5018, 4670, 0, 0, 798, 0, 0, 0,
	0, 0, 0, 0, 0, 5021, 5054, 0, 659, 738,
	5024, 0, 0, 0, 807, 0, 0, 4925, 0, 0,
	0, 0, 5019, 0, 0, 4765, 5039, 5042, 0, 0,
	5032, 2751, 5057, 5058, 5061, 0, 2292, 1402, 0, 5045,
	5048, 0, 0, 5053, 0, 5056, 5077, 2140, 2140, 0,
	0, 5080, 2749, 0, 0, 0, 0, 5076, 2654, 2654,
	0, 0, 0, 0, 0, 0, 0, 2130, 5065, 0,
	0, 2723, 0, 0, 0, 0, 0, 0, 2012, 798,
	0, 2752, 798, 0, 0, 4876, 698, 698, 0, 2014,
	0, 0, 5090, 0, 3983, 0, 796, 5082, 5101, 0,
	0, 0, 5089, 5087, 0, 0, 3984, 0, 0, 5098,
	5099, 5091, 5005, 919, 5105, 659, 5094, 0, 5107, 2014,
	873, 5097, 2750, 2750, 736, 2752, 4870, 873, 5102, 0,
	2012, 698, 2012, 5103, 0, 5114, 2014, 5050, 0, 5052,
	0, 0, 738, 2654, 2654, 2654, 0, 0, 0, 0,
	0, 0, 0, 5121, 0, 736, 5123, 0, 2750, 5140,
	0, 736, 0, 5104, 0, 0, 0, 5118, 0, 0,
	0, 0, 0, 0, 5128, 0, 0, 0, 0, 0,
	805, 0, 0, 5147, 0, 5149, 0, 0, 0, 0,
	0, 5144, 0, 0, 0, 0, 0, 0, 0, 0,
	2749, 2752, 5145, 796, 5168, 5169, 5170, 0, 4666, 5152,
	5154, 873, 0, 5148, 0, 5146, 698, 5165, 5160, 2751,
	0, 0, 3983, 0, 5078, 5079, 5184, 5186, 0, 5179,
	5180, 0, 4877, 5172, 0, 873, 0, 0, 0, 5183,
	0, 3984, 5188, 5159, 805, 5140, 5187, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4403, 0, 0,
	5203, 5185, 5202, 0, 5206, 5211, 0, 5122, 0, 0,
	796, 0, 0, 0, 5210, 5157, 5158, 0, 5215, 5221,
	5212, 0, 5219, 0, 5218, 0, 796, 5222, 5223, 0,
	0, 4911, 5228, 5229, 5234, 0, 5236, 659, 5235, 0,
	0, 0, 807, 807, 5245, 5194, 5241, 4403, 736, 5140,
	5249, 5247, 5237, 5248, 5240, 5251, 0, 0, 0, 0,
	0, 2752, 5243, 5244, 5252, 5140, 5256, 0, 0, 0,
	0, 0, 0, 0, 5161, 2752, 4921, 0, 0, 0,
	0, 873, 0, 873, 0, 2751, 798, 806, 806, 0,
	0, 0, 0, 0, 2751, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5194, 0, 873, 3984,
	738, 736, 0, 736, 736, 736, 736, 1490, 0, 0,
	1460, 0, 0, 0, 1472, 1473, 1474, 0, 2749, 0,
	0, 0, 0, 806, 5194, 0, 2105, 0, 0, 2106,
	0, 0, 0, 2111, 0, 2103, 0, 975, 76, 0,
	2108, 2112, 2107, 0, 2109, 0, 0, 0, 2110, 1483,
	1484, 2104, 0, 0, 0, 0, 0, 0, 2113, 2750,
	0, 0, 0, 1211, 0, 0, 0, 0, 798, 0,
	2750, 2750, 0, 0, 2750, 798, 798, 4756, 0, 0,
	0, 2752, 0, 0, 0, 0, 0, 0, 738, 798,
	873, 0, 2750, 798, 798, 798, 798, 798, 798, 798,
	798, 798, 798, 798, 798, 798, 798, 798, 798, 0,
	798, 0, 2751, 0, 0, 0, 0, 0, 2012, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1213, 0, 641, 643, 0, 0, 0, 0, 0, 0,
	76, 0, 0, 0, 2749, 0, 0, 0, 1490, 76,
	0, 1460, 0, 2749, 0, 1472, 1473, 1474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5083, 5084, 0,
	0, 5086, 0, 0, 2111, 0, 2103, 0, 0, 0,
	0, 2108, 2112, 2107, 0, 2109, 0, 0, 0, 2110,
	1483, 1484, 2104, 0, 2892, 0, 0, 1490, 0, 2113,
	1460, 0, 0, 0, 1472, 1473, 1474, 0, 2750, 2903,
	0, 0, 0, 0, 0, 0, 2105, 0, 0, 2106,
	0, 0, 0, 2111, 0, 2103, 0, 0, 0, 2752,
	2108, 2112, 2107, 2014, 2109, 5124, 0, 0, 2110, 1483,
	1484, 2104, 0, 0, 0, 0, 0, 0, 2113, 0,
	0, 0, 0, 1212, 1490, 0, 0, 1460, 0, 0,
	0, 1472, 1473, 1474, 0, 0, 0, 0, 0, 2654,
	2654, 0, 0, 2105, 0, 0, 2106, 0, 0, 0,
	2111, 2749, 2103, 0, 0, 0, 0, 2108, 2112, 2107,
	0, 2109, 0, 0, 2014, 2110, 1483, 1484, 2104, 1490,
	0, 0, 1460, 0, 0, 2113, 1472, 1473, 1474, 0,
	0, 806, 806, 0, 0, 0, 0, 0, 2105, 0,
	0, 2106, 2014, 0, 0, 2111, 2511, 2103, 3991, 0,
	0, 0, 2108, 2112, 2107, 0, 2109, 2513, 2514, 0,
	2110, 1483, 1484, 2104, 0, 1214, 0, 0, 0, 0,
	2113, 0, 0, 0, 5191, 0, 0, 0, 0, 0,
	2654, 2654, 2654, 2654, 2654, 2654, 2654, 2654, 2654, 2654,
	2654, 2654, 2654, 0, 2654, 1215, 0, 0, 1216, 0,
	0, 0, 1217, 0, 0, 0, 0, 0, 1211, 0,
	0, 0, 0, 0, 2149, 0, 0, 0, 0, 0,
	3086, 0, 3774, 0, 1218, 0, 3095, 2627, 0, 0,
	0, 0, 0, 0, 0, 5191, 0, 2752, 0, 0,
	0, 0, 0, 0, 0, 0, 805, 805, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2750, 1221, 5191, 0, 0, 0, 0, 0, 1490,
	0, 0, 1460, 0, 0, 1213, 1472, 1473, 1474, 1219,
	0, 0, 0, 0, 0, 0, 0, 0, 2105, 4961,
	0, 2106, 805, 0, 3834, 2111, 1220, 2103, 0, 0,
	0, 0, 2108, 2112, 2107, 2750, 3263, 0, 0, 0,
	2110, 1483, 1484, 2104, 0, 0, 0, 0, 0, 0,
	2113, 0, 3264, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1479, 1222, 0, 0, 0, 0, 0, 0,
	0, 1469, 1470, 1471, 0, 0, 0, 0, 0, 0,
	1463, 1464, 1465, 1466, 1467, 1468, 0, 3273, 0, 0,
	0, 0, 0, 2752, 2654, 0, 0, 0, 0, 0,
	0, 0, 2752, 0, 5109, 0, 0, 0, 0, 0,
	0, 2750, 0, 4960, 0, 0, 0, 0, 3265, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1212, 0,
	0, 0, 0, 798, 798, 0, 798, 0, 0, 798,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 798,
	798, 0, 0, 0, 0, 0, 798, 0, 798, 798,
	798, 798, 798, 798, 798, 798, 798, 798, 798, 0,
	798, 0, 798, 0, 798, 798, 798, 798, 798, 798,
	0, 798, 798, 798, 0, 0, 798, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3291, 0, 0, 1479, 0, 0, 0, 0, 0, 0,
	0, 5166, 1469, 1470, 1471, 0, 0, 0, 3771, 0,
	1214, 1463, 1464, 1465, 1466, 1467, 1468, 0, 0, 0,
	2752, 2750, 641, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2750, 0, 0, 0, 0,
	1215, 0, 1479, 1216, 0, 0, 0, 1217, 0, 0,
	0, 1469, 1470, 1471, 0, 0, 0, 0, 0, 2149,
	1463, 1464, 1465, 1466, 1467, 1468, 0, 0, 5166, 1218,
	3772, 798, 0, 0, 0, 798, 798, 798, 798, 0,
	0, 0, 0, 0, 5230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1479,
	805, 805, 0, 798, 798, 0, 0, 1221, 1469, 1470,
	1471, 0, 0, 0, 0, 0, 0, 1463, 1464, 1465,
	1466, 1467, 1468, 0, 1219, 873, 0, 0, 0, 3445,
	0, 0, 0, 0, 873, 0, 0, 0, 0, 0,
	0, 1220, 0, 0, 1479, 0, 0, 0, 2012, 0,
	0, 2750, 0, 1469, 1470, 1471, 0, 0, 0, 0,
	0, 0, 1463, 1464, 1465, 1466, 1467, 1468, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1222, 0,
	0, 0, 0, 2012, 0, 0, 0, 0, 798, 1211,
	0, 0, 0, 0, 0, 0, 0, 3992, 0, 0,
	0, 873, 0, 0, 1490, 0, 2340, 1460, 0, 0,
	0, 1472, 1473, 1474, 0, 0, 873, 0, 0, 0,
	0, 0, 0, 2105, 0, 0, 2106, 0, 0, 0,
	2111, 0, 2103, 4149, 0, 2012, 0, 2108, 2112, 2107,
	0, 2109, 0, 0, 0, 2110, 1483, 1484, 2104, 0,
	736, 0, 0, 0, 2012, 2113, 1213, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2780, 0,
	0, 0, 0, 0, 0, 0, 1258, 0, 0, 0,
	0, 0, 873, 873, 1479, 0, 0, 0, 0, 2750,
	0, 873, 0, 1469, 1470, 1471, 0, 0, 0, 0,
	798, 0, 1463, 1464, 1465, 1466, 1467, 1468, 0, 0,
	0, 0, 0, 641, 0, 0, 641, 641, 0, 0,
	1490, 0, 0, 1460, 0, 736, 736, 1472, 1473, 1474,
	0, 0, 4672, 0, 0, 0, 0, 0, 1264, 2105,
	1947, 0, 2106, 0, 1950, 1951, 2111, 0, 2103, 0,
	0, 0, 0, 2108, 2112, 2107, 0, 2109, 0, 0,
	736, 2110, 1483, 1484, 2104, 0, 0, 736, 0, 1212,
	0, 2113, 1260, 0, 0, 0, 0, 0, 3641, 0,
	0, 0, 0, 0, 0, 1490, 3966, 3646, 1460, 2012,
	0, 0, 1472, 1473, 1474, 798, 0, 873, 798, 0,
	798, 798, 3989, 873, 2105, 0, 0, 2106, 0, 0,
	0, 2111, 0, 2103, 0, 0, 0, 0, 2108, 2112,
	2107, 0, 2109, 0, 0, 798, 2110, 1483, 1484, 2104,
	0, 3993, 0, 0, 0, 0, 2113, 0, 0, 0,
	736, 0, 0, 0, 3991, 0, 0, 0, 0, 798,
	0, 0, 0, 0, 0, 0, 0, 798, 0, 0,
	1249, 1214, 0, 0, 0, 76, 0, 0, 0, 0,
	798, 0, 0, 0, 0, 0, 0, 2750, 798, 0,
	0, 0, 1259, 0, 0, 0, 0, 0, 0, 0,
	0, 1215, 0, 0, 1216, 0, 0, 0, 1217, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 798, 798,
	2149, 0, 0, 0, 798, 0, 0, 0, 0, 0,
	1218, 0, 1255, 0, 3735, 0, 0, 0, 0, 0,
	798, 798, 0, 0, 3739, 798, 0, 0, 0, 0,
	0, 0, 0, 0, 798, 1252, 0, 0, 0, 0,
	798, 0, 0, 0, 0, 0, 0, 0, 1221, 3760,
	0, 0, 798, 798, 798, 0, 2781, 0, 0, 1257,
	0, 0, 0, 0, 0, 1219, 0, 0, 0, 0,
	798, 2654, 0, 0, 0, 2780, 0, 0, 0, 0,
	0, 798, 1220, 1258, 3994, 3519, 0, 0, 0, 0,
	0, 0, 0, 2750, 0, 0, 0, 0, 0, 0,
	0, 1263, 2750, 0, 0, 798, 798, 798, 0, 0,
	0, 0, 0, 798, 798, 798, 0, 0, 798, 1222,
	0, 0, 0, 0, 0, 2012, 0, 0, 0, 798,
	0, 2012, 0, 0, 2654, 0, 84, 873, 0, 1250,
	0, 0, 0, 0, 0, 1264, 0, 0, 0, 0,
	0, 798, 0, 1256, 0, 798, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1253,
	0, 0, 0, 0, 0, 0, 1251, 2265, 798, 1260,
	1261, 0, 0, 798, 0, 0, 0, 0, 798, 1479,
	798, 0, 0, 2782, 0, 0, 0, 0, 1469, 1470,
	1471, 0, 0, 0, 0, 5171, 0, 1463, 1464, 1465,
	1466, 1467, 1468, 0, 0, 0, 0, 1254, 0, 2783,
	0, 0, 0, 0, 0, 3903, 873, 0, 0, 0,
	2750, 736, 0, 0, 0, 0, 0, 0, 0, 0,
	1490, 0, 0, 1460, 0, 0, 0, 1472, 1473, 1474,
	0, 0, 0, 0, 0, 0, 1181, 0, 0, 2105,
	0, 1182, 2106, 0, 0, 1191, 2111, 1249, 2103, 2012,
	873, 0, 0, 2108, 2112, 2107, 873, 2109, 0, 0,
	0, 2110, 1483, 1484, 2104, 0, 736, 736, 0, 1259,
	0, 2113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 736, 736, 0, 0,
	0, 0, 0, 0, 0, 1479, 736, 0, 0, 0,
	0, 0, 2654, 0, 1469, 1470, 1471, 1184, 0, 1255,
	0, 798, 0, 1463, 1464, 1465, 1466, 1467, 1468, 0,
	0, 0, 0, 0, 2574, 0, 0, 0, 0, 0,
	0, 0, 1252, 0, 0, 798, 1190, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2781, 0, 0, 1257, 0, 0, 0,
	1479, 2654, 0, 0, 0, 0, 0, 1195, 842, 1469,
	1470, 1471, 0, 0, 0, 0, 5110, 0, 1463, 1464,
	1465, 1466, 1467, 1468, 0, 2012, 2012, 2012, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1263, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4082, 0,
	1180, 0, 1490, 0, 0, 1460, 0, 0, 0, 1472,
	1473, 1474, 0, 0, 873, 873, 0, 873, 0, 0,
	0, 2105, 0, 84, 2106, 0, 2776, 1185, 2111, 0,
	2103, 0, 0, 0, 798, 2108, 2112, 2107, 0, 2109,
	1256, 0, 0, 2110, 1483, 1484, 2104, 0, 0, 736,
	0, 0, 0, 2113, 0, 0, 1253, 0, 658, 658,
	0, 0, 1187, 1251, 0, 0, 0, 1261, 1186, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2782, 0, 0, 722, 0, 726, 0, 0, 0, 764,
	765, 0, 0, 770, 771, 0, 0, 0, 0, 0,
	0, 736, 0, 0, 1254, 873, 2783, 0, 0, 0,
	0, 0, 0, 1188, 873, 802, 0, 0, 0, 0,
	0, 813, 0, 816, 0, 818, 819, 820, 821, 822,
	0, 0, 736, 831, 0, 0, 0, 836, 0, 0,
	0, 843, 0, 0, 798, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 798, 0, 0, 1189, 0,
	0, 0, 0, 0, 0, 0, 798, 798, 0, 1192,
	798, 798, 798, 0, 798, 2654, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 798, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 798, 0,
	798, 0, 3590, 0, 1194, 1193, 0, 0, 0, 0,
	0, 0, 798, 0, 0, 0, 0, 0, 798, 798,
	0, 0, 0, 4236, 0, 0, 0, 0, 798, 0,
	0, 0, 0, 0, 0, 798, 0, 0, 0, 798,
	798, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 0, 798, 0, 0, 0, 0, 798, 798,
	0, 873, 798, 798, 798, 798, 798, 798, 798, 798,
	798, 798, 798, 798, 798, 0, 798, 0, 0, 0,
	0, 1183, 0, 798, 798, 798, 873, 0, 0, 0,
	0, 798, 0, 798, 0, 0, 0, 0, 0, 0,
	798, 2012, 0, 0, 798, 0, 0, 0, 0, 798,
	0, 1197, 0, 798, 0, 1479, 0, 0, 0, 0,
	0, 798, 798, 798, 1469, 1470, 1471, 0, 0, 0,
	0, 5100, 798, 1463, 1464, 1465, 1466, 1467, 1468, 0,
	0, 0, 0, 0, 0, 0, 798, 0, 0, 798,
	0, 0, 0, 4993, 0, 4317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2585, 0, 0, 0, 0, 0, 798, 798, 0, 798,
	798, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4346,
	0, 0, 0, 0, 0, 0, 798, 0, 0, 0,
	0, 0, 0, 0, 873, 798, 798, 0, 0, 0,
	0, 0, 0, 0, 2693, 873, 873, 0, 0, 873,
	0, 4357, 4358, 80, 736, 0, 0, 79, 81, 0,
	0, 0, 0, 0, 0, 0, 798, 99, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 873, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 97, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 736,
	0, 0, 0, 736, 736, 2654, 2654, 101, 0, 2654,
	0, 0, 0, 0, 83, 0, 0, 1479, 0, 0,
	0, 0, 0, 798, 798, 0, 1469, 1470, 1471, 0,
	0, 0, 78, 4947, 0, 1463, 1464, 1465, 1466, 1467,
	1468, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2574, 0, 0, 0, 3445, 0, 0, 0, 0, 798,
	0, 643, 0, 0, 0, 0, 0, 1490, 0, 0,
	1460, 2737, 2737, 0, 1472, 1473, 1474, 0, 0, 0,
	0, 2012, 873, 2012, 0, 0, 2105, 0, 0, 2106,
	0, 0, 0, 2111, 2012, 2103, 0, 0, 0, 0,
	2108, 2112, 2107, 0, 2109, 0, 0, 0, 2110, 1483,
	1484, 2104, 85, 0, 0, 0, 0, 0, 2113, 0,
	1490, 0, 0, 1460, 0, 658, 0, 1472, 1473, 1474,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 2105,
	0, 0, 2106, 0, 0, 0, 2111, 0, 2103, 87,
	0, 0, 0, 2108, 2112, 2107, 1117, 2109, 0, 0,
	0, 2110, 1483, 1484, 2104, 2012, 0, 873, 0, 0,
	0, 2113, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 73, 0, 0,
	0, 798, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 798,
	798, 0, 0, 0, 0, 798, 798, 0, 0, 0,
	0, 0, 798, 798, 0, 4606, 4608, 0, 0, 798,
	0, 0, 1159, 798, 0, 1163, 0, 0, 0, 1490,
	0, 0, 1460, 0, 0, 0, 1472, 1473, 1474, 0,
	0, 798, 0, 0, 0, 0, 0, 0, 2105, 0,
	0, 2106, 798, 0, 0, 2111, 0, 2103, 0, 0,
	0, 0, 2108, 2112, 2107, 0, 2109, 0, 0, 1272,
	2110, 1483, 1484, 2104, 0, 0, 0, 0, 0, 0,
	2113, 0, 1301, 0, 0, 0, 0, 798, 0, 91,
	0, 0, 0, 0, 0, 798, 0, 0, 798, 0,
	798, 0, 0, 0, 0, 82, 0, 0, 90, 0,
	0, 0, 84, 0, 873, 0, 0, 0, 88, 0,
	798, 0, 0, 0, 89, 0, 0, 798, 0, 0,
	0, 798, 798, 0, 0, 798, 1490, 0, 0, 1460,
	0, 798, 0, 1472, 1473, 1474, 0, 86, 4629, 0,
	0, 0, 0, 798, 0, 2105, 0, 0, 2106, 4715,
	0, 0, 2111, 0, 2103, 0, 0, 0, 0, 2108,
	2112, 2107, 0, 2109, 0, 0, 0, 2110, 1483, 1484,
	2104, 0, 0, 0, 0, 873, 0, 2113, 0, 0,
	873, 0, 0, 0, 0, 0, 0, 0, 873, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 798, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1947, 0, 0, 0, 100,
	0, 2012, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 95, 0, 0, 0, 2737, 0, 0, 0,
	4791, 798, 4791, 4791, 0, 0, 1490, 0, 736, 1460,
	0, 0, 0, 1472, 1473, 1474, 0, 0, 0, 798,
	0, 0, 0, 0, 798, 2105, 0, 0, 2106, 0,
	2574, 0, 2111, 0, 2103, 0, 0, 0, 0, 2108,
	2112, 2107, 0, 2109, 0, 0, 0, 2110, 1483, 1484,
	2104, 0, 0, 1947, 3177, 798, 0, 2113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4842,
	0, 0, 873, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 736, 0, 0,
	736, 0, 658, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1479, 0, 0, 0, 873, 0, 0, 0,
	0, 1469, 1470, 1471, 798, 0, 0, 2161, 4932, 0,
	1463, 1464, 1465, 1466, 1467, 1468, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 873,
	0, 0, 0, 0, 0, 0, 0, 0, 2197, 0,
	0, 0, 0, 798, 0, 1479, 0, 0, 0, 0,
	0, 798, 798, 798, 1469, 1470, 1471, 958, 958, 0,
	0, 4909, 0, 1463, 1464, 1465, 1466, 1467, 1468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 798, 798, 0, 0, 798, 798, 798, 0,
	0, 0, 0, 0, 0, 0, 3340, 0, 3344, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 798, 0, 0, 0, 0, 0, 0,
	0, 2317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 798, 798, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 0, 0, 0, 0, 798, 798, 0, 0,
	0, 0, 0, 0, 0, 0, 2012, 0, 0, 0,
	0, 0, 0, 0, 1479, 2371, 0, 0, 0, 0,
	0, 0, 0, 1469, 1470, 1471, 798, 0, 0, 0,
	0, 873, 1463, 1464, 1465, 1466, 1467, 1468, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1258, 0, 1490, 0, 2351, 1460, 0, 0, 0,
	1472, 1473, 1474, 0, 0, 76, 2453, 5062, 0, 2455,
	0, 798, 2105, 0, 0, 2106, 0, 0, 0, 2111,
	0, 2103, 0, 0, 0, 0, 2108, 2112, 2107, 0,
	2109, 0, 798, 0, 2110, 1483, 1484, 2104, 0, 0,
	0, 0, 0, 0, 2113, 1181, 0, 0, 0, 0,
	1182, 1479, 873, 1264, 1191, 0, 0, 0, 0, 0,
	1469, 1470, 1471, 0, 736, 0, 0, 4602, 0, 1463,
	1464, 1465, 1466, 1467, 1468, 798, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1260, 0, 0,
	0, 0, 873, 873, 0, 0, 0, 0, 0, 0,
	0, 798, 0, 0, 0, 0, 0, 0, 798, 0,
	0, 0, 0, 0, 798, 0, 1184, 0, 0, 798,
	0, 798, 0, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 798, 1443, 0, 0, 0, 0,
	0, 0, 1454, 0, 0, 1190, 0, 0, 0, 0,
	0, 0, 798, 1936, 1937, 1938, 1939, 1940, 0, 798,
	0, 0, 0, 0, 1945, 0, 798, 0, 0, 0,
	0, 1479, 0, 798, 0, 1249, 1195, 0, 0, 798,
	1469, 1470, 1471, 0, 0, 0, 0, 4574, 1964, 1463,
	1464, 1465, 1466, 1467, 1468, 0, 736, 1259, 0, 0,
	0, 0, 0, 5176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	1178, 0, 0, 0, 0, 0, 873, 1255, 0, 0,
	0, 0, 0, 0, 0, 0, 1185, 0, 0, 0,
	0, 737, 0, 0, 0, 0, 0, 0, 0, 0,
	1252, 0, 737, 737, 798, 0, 0, 2012, 0, 0,
	0, 2094, 0, 0, 0, 0, 0, 0, 798, 1179,
	0, 1187, 798, 737, 1257, 0, 0, 1186, 0, 736,
	798, 798, 0, 0, 0, 0, 737, 737, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 798, 0, 0,
	737, 737, 737, 0, 0, 0, 1947, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1263, 873, 0, 873,
	873, 798, 1188, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 737, 0, 0, 0, 0, 798,
	0, 0, 0, 1258, 0, 798, 798, 798, 0, 798,
	0, 84, 0, 0, 1250, 0, 0, 0, 798, 2012,
	0, 0, 0, 0, 0, 0, 0, 1189, 1256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1192, 0,
	0, 0, 0, 0, 1253, 0, 873, 798, 0, 2012,
	0, 1251, 0, 0, 0, 1261, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1264, 2012, 0, 0, 0,
	0, 2962, 736, 1194, 1193, 0, 0, 0, 0, 0,
	798, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1254, 0, 0, 0, 0, 76, 0, 1260,
	0, 0, 76, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2737, 0, 0, 2737, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1479, 0,
	1183, 0, 0, 0, 0, 0, 0, 1469, 1470, 1471,
	798, 0, 76, 0, 4553, 0, 1463, 1464, 1465, 1466,
	1467, 1468, 0, 0, 0, 0, 0, 0, 0, 0,
	1197, 798, 0, 798, 798, 0, 0, 1249, 0, 798,
	0, 0, 0, 0, 1490, 0, 0, 1460, 0, 0,
	0, 1472, 1473, 1474, 0, 0, 0, 0, 0, 1259,
	0, 0, 0, 2105, 0, 0, 2106, 0, 0, 0,
	2111, 0, 2103, 0, 0, 798, 0, 2108, 2112, 2107,
	0, 2109, 0, 0, 0, 2110, 1483, 1484, 2104, 0,
	0, 0, 0, 0, 0, 2113, 0, 0, 0, 1255,
	0, 0, 0, 0, 0, 0, 0, 0, 798, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 798, 0,
	0, 798, 1252, 0, 0, 0, 0, 798, 798, 0,
	0, 2737, 0, 0, 0, 0, 0, 1936, 1937, 0,
	0, 0, 0, 0, 0, 0, 1257, 0, 987, 0,
	736, 958, 0, 0, 0, 2532, 2533, 2534, 2535, 2536,
	2537, 2538, 2539, 2540, 2541, 2542, 2543, 2544, 2545, 2546,
	2547, 0, 2553, 798, 873, 0, 0, 0, 0, 0,
	0, 0, 0, 798, 0, 0, 0, 0, 1263, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 798, 798, 0,
	1283, 798, 0, 84, 0, 0, 1250, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 736, 0,
	1256, 0, 0, 0, 798, 0, 0, 0, 0, 0,
	0, 0, 0, 798, 0, 798, 1253, 0, 0, 0,
	0, 0, 0, 1251, 0, 0, 0, 1261, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1490, 0, 0,
	1460, 0, 0, 0, 1472, 1473, 1474, 0, 0, 0,
	798, 0, 0, 0, 1254, 0, 2105, 0, 0, 2106,
	0, 798, 0, 2111, 0, 2103, 0, 0, 0, 0,
	2108, 2112, 2107, 798, 2109, 0, 0, 0, 2110, 1483,
	1484, 2104, 0, 0, 0, 2808, 0, 0, 2113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	798, 0, 1490, 2822, 0, 1460, 0, 0, 0, 1472,
	1473, 1474, 798, 0, 0, 2839, 912, 914, 916, 920,
	873, 2105, 0, 2850, 2106, 0, 0, 0, 2111, 0,
	2103, 798, 0, 2012, 0, 2108, 2112, 2107, 0, 2109,
	0, 0, 0, 2110, 1483, 1484, 2104, 0, 0, 0,
	0, 0, 0, 2113, 0, 2895, 2896, 2897, 0, 0,
	0, 0, 0, 0, 0, 0, 2904, 0, 0, 0,
	0, 0, 0, 0, 2915, 0, 2919, 2920, 0, 798,
	798, 0, 2924, 0, 0, 2928, 2929, 0, 0, 2936,
	0, 2938, 2941, 0, 2012, 798, 0, 0, 0, 2737,
	2737, 0, 0, 2737, 0, 2963, 2964, 0, 0, 2968,
	2969, 798, 798, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2012, 0, 0, 0, 2978, 2979, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2992, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3003, 3004, 3005, 3006, 3007, 0, 0, 3009, 0,
	0, 0, 3013, 0, 0, 0, 3016, 3017, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 737, 0,
	0, 0, 737, 737, 0, 0, 0, 3025, 3026, 0,
	0, 3031, 0, 3032, 0, 0, 0, 0, 3033, 1479,
	3034, 3035, 0, 0, 0, 3036, 0, 0, 1469, 1470,
	1471, 0, 0, 0, 0, 4530, 0, 1463, 1464, 1465,
	1466, 1467, 1468, 0, 3049, 0, 0, 0, 0, 0,
	0, 3052, 0, 0, 3053, 0, 0, 0, 0, 0,
	0, 3064, 3065, 0, 0, 0, 0, 0, 0, 0,
	0, 1490, 3082, 0, 1460, 0, 0, 0, 1472, 1473,
	1474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2105, 0, 0, 2106, 0, 0, 0, 2111, 0, 2103,
	0, 0, 0, 0, 2108, 2112, 2107, 0, 2109, 0,
	0, 0, 2110, 1483, 1484, 2104, 0, 0, 0, 0,
	0, 2606, 2113, 0, 0, 0, 0, 0, 0, 0,
	0, 2628, 2630, 0, 0, 0, 0, 0, 2636, 0,
	2647, 2650, 0, 2661, 2662, 2667, 2670, 0, 0, 0,
	0, 0, 2678, 0, 0, 0, 2682, 2688, 2630, 2630,
	2695, 2630, 0, 2630, 2630, 2630, 0, 0, 0, 0,
	1490, 0, 2013, 1460, 0, 0, 0, 1472, 1473, 1474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2105,
	0, 0, 2106, 0, 0, 0, 2111, 0, 2103, 0,
	0, 0, 795, 2108, 2112, 2107, 0, 2109, 0, 0,
	4203, 2110, 1483, 1484, 2104, 0, 0, 0, 737, 0,
	0, 2113, 1070, 0, 2013, 0, 2013, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 928, 0, 931, 0, 0, 0, 0, 737,
	0, 933, 0, 0, 0, 737, 0, 0, 0, 0,
	0, 0, 1479, 2712, 0, 0, 0, 2545, 2546, 2547,
	2553, 1469, 1470, 1471, 0, 0, 0, 0, 4393, 0,
	1463, 1464, 1465, 1466, 1467, 1468, 0, 0, 0, 0,
	2737, 1490, 0, 0, 1460, 0, 0, 963, 1472, 1473,
	1474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2105, 0, 0, 2106, 0, 0, 0, 2111, 0, 2103,
	0, 0, 0, 0, 2108, 2112, 2107, 1479, 2109, 0,
	0, 0, 2110, 1483, 1484, 2104, 1469, 1470, 1471, 0,
	0, 76, 2113, 4375, 0, 1463, 1464, 1465, 1466, 1467,
	1468, 0, 0, 0, 0, 76, 0, 1490, 0, 0,
	1460, 0, 0, 0, 1472, 1473, 1474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2105, 0, 76, 2106,
	0, 0, 0, 2111, 0, 2103, 854, 854, 0, 0,
	2108, 2112, 2107, 0, 2109, 0, 0, 0, 2110, 1483,
	1484, 2104, 737, 0, 0, 0, 867, 867, 2113, 4163,
	1490, 0, 0, 1460, 0, 0, 0, 1472, 1473, 1474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2105,
	0, 0, 2106, 0, 0, 0, 2111, 0, 2103, 0,
	0, 0, 0, 2108, 2112, 2107, 3410, 2109, 0, 0,
	0, 2110, 1483, 1484, 2104, 0, 0, 0, 0, 0,
	0, 2113, 0, 4138, 0, 737, 0, 737, 737, 737,
	737, 0, 0, 0, 3451, 0, 0, 0, 0, 0,
	0, 0, 3459, 0, 3459, 0, 0, 0, 0, 0,
	3468, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3011, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1490, 0, 0, 1460, 0, 0, 0, 1472,
	1473, 1474, 0, 920, 0, 1387, 0, 920, 920, 0,
	1407, 2105, 76, 0, 2106, 0, 0, 0, 2111, 0,
	2103, 0, 0, 0, 0, 2108, 2112, 2107, 0, 2109,
	0, 3530, 0, 2110, 1483, 1484, 2104, 0, 0, 0,
	0, 0, 0, 2113, 0, 0, 0, 0, 0, 0,
	0, 3554, 3555, 3556, 3557, 0, 1479, 0, 0, 0,
	0, 0, 2013, 1258, 0, 1469, 1470, 1471, 0, 0,
	0, 0, 4366, 0, 1463, 1464, 1465, 1466, 1467, 1468,
	0, 0, 0, 0, 76, 0, 0, 0, 0, 0,
	0, 0, 1958, 1960, 1961, 0, 0, 0, 0, 0,
	0, 3582, 3583, 0, 3586, 3587, 3588, 0, 0, 0,
	0, 4137, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1264, 0, 0, 0, 0,
	0, 1443, 0, 0, 0, 0, 0, 0, 0, 1945,
	2737, 0, 0, 3606, 0, 0, 0, 0, 0, 0,
	0, 0, 1454, 0, 0, 1479, 0, 0, 0, 1260,
	1490, 0, 3621, 1460, 1469, 1470, 1471, 1472, 1473, 1474,
	3622, 0, 0, 1463, 1464, 1465, 1466, 1467, 1468, 2105,
	0, 0, 2106, 0, 0, 0, 2111, 0, 2103, 0,
	3148, 3149, 0, 2108, 2112, 2107, 3155, 2109, 0, 0,
	0, 2110, 1483, 1484, 2104, 0, 0, 1947, 0, 0,
	0, 2113, 0, 4132, 0, 0, 0, 0, 1181, 0,
	0, 0, 0, 1182, 0, 0, 0, 1191, 0, 0,
	3652, 0, 3184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2606, 2606, 2606, 1249, 0, 0,
	0, 0, 2203, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3209, 0, 0, 0, 0, 0, 2230, 1259,
	0, 0, 0, 3226, 0, 0, 1479, 0, 0, 0,
	0, 0, 0, 0, 0, 1469, 1470, 1471, 0, 1184,
	0, 0, 0, 0, 1463, 1464, 1465, 1466, 1467, 1468,
	0, 0, 0, 0, 0, 2667, 2667, 2667, 0, 1255,
	0, 0, 0, 0, 0, 0, 0, 0, 1190, 0,
	0, 3282, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1252, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1479, 3304, 0, 0, 0, 3308, 0, 1195,
	0, 1469, 1470, 1471, 0, 0, 1257, 0, 4140, 0,
	1463, 1464, 1465, 1466, 1467, 1468, 0, 0, 0, 0,
	3320, 0, 0, 0, 0, 3324, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2384, 0,
	0, 2389, 1180, 0, 0, 1479, 0, 0, 1263, 0,
	0, 0, 0, 1178, 1469, 1470, 1471, 0, 0, 0,
	0, 0, 0, 1463, 1464, 1465, 1466, 1467, 1468, 1185,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1277, 0, 0, 84, 0, 0, 1250, 1490, 0, 0,
	1460, 0, 0, 0, 1472, 1473, 1474, 0, 0, 0,
	1256, 0, 1179, 0, 1187, 854, 2105, 0, 0, 2106,
	1186, 0, 0, 2111, 0, 2103, 1253, 0, 4136, 0,
	2108, 2112, 2107, 1251, 2109, 867, 0, 1261, 2110, 1483,
	1484, 2104, 0, 0, 0, 0, 0, 76, 2113, 0,
	0, 0, 0, 0, 0, 1181, 0, 1479, 3863, 0,
	1182, 0, 0, 0, 1191, 1188, 1469, 1470, 1471, 0,
	0, 0, 0, 0, 1254, 1463, 1464, 1465, 1466, 1467,
	1468, 0, 0, 3495, 0, 0, 0, 0, 0, 0,
	3459, 0, 0, 0, 1490, 0, 3889, 1460, 0, 0,
	0, 1472, 1473, 1474, 0, 0, 0, 3522, 0, 0,
	1189, 0, 0, 2105, 0, 0, 2106, 0, 0, 0,
	2111, 1192, 2103, 0, 0, 0, 1184, 2108, 2112, 2107,
	0, 2109, 0, 0, 0, 2110, 1483, 1484, 2104, 1490,
	0, 0, 1460, 0, 0, 2113, 1472, 1473, 1474, 0,
	0, 0, 0, 0, 1176, 1190, 1194, 1193, 2105, 0,
	0, 2106, 0, 0, 3930, 2111, 0, 2103, 0, 0,
	0, 3459, 2108, 2112, 2107, 0, 2109, 0, 0, 0,
	2110, 1483, 1484, 2104, 0, 0, 1195, 3959, 3960, 0,
	2113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3976, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3602, 0, 0, 0,
	0, 0, 0, 0, 4006, 1479, 0, 0, 0, 1180,
	0, 0, 0, 1183, 1469, 1470, 1471, 0, 0, 0,
	4011, 0, 0, 1463, 1464, 1465, 1466, 1467, 1468, 4013,
	4014, 4015, 0, 0, 4018, 0, 1185, 4021, 4022, 4023,
	4024, 0, 0, 1197, 0, 0, 0, 0, 0, 0,
	4033, 0, 0, 0, 0, 0, 0, 4036, 0, 4037,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4051, 1187, 0, 0, 0, 0, 1475, 1186, 4056, 4057,
	0, 0, 0, 4060, 4061, 4062, 4063, 4064, 0, 0,
	0, 0, 2013, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1490, 0, 0, 1460, 0, 0, 3669, 1472, 1473,
	1474, 0, 1188, 0, 0, 0, 0, 2013, 3677, 3678,
	2105, 0, 3681, 2106, 0, 0, 3684, 2111, 0, 2103,
	0, 0, 0, 854, 2108, 2112, 2107, 3689, 2109, 0,
	854, 0, 2110, 1483, 1484, 2104, 0, 0, 0, 0,
	3695, 0, 2113, 867, 0, 0, 0, 1189, 0, 0,
	867, 0, 0, 0, 2606, 0, 0, 0, 1192, 2013,
	3708, 3709, 0, 0, 0, 0, 0, 0, 0, 0,
	3720, 0, 0, 0, 737, 1181, 0, 3725, 2013, 0,
	1182, 2630, 2630, 0, 1191, 0, 1475, 0, 0, 0,
	0, 3585, 0, 1194, 1193, 3736, 0, 0, 0, 0,
	3738, 2606, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 854, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3757, 3758, 3759, 0, 0,
	0, 0, 0, 0, 867, 3765, 0, 0, 2329, 0,
	0, 0, 2678, 0, 0, 0, 1184, 0, 4176, 0,
	0, 2628, 0, 0, 0, 2630, 0, 0, 867, 737,
	737, 0, 1479, 3791, 3792, 3793, 1258, 0, 0, 0,
	1183, 1469, 1470, 1471, 958, 1190, 0, 0, 0, 0,
	1463, 1464, 1465, 1466, 1467, 1468, 0, 0, 0, 0,
	0, 0, 0, 0, 737, 0, 0, 0, 0, 0,
	1197, 737, 0, 0, 0, 0, 1195, 0, 0, 0,
	0, 0, 0, 0, 1069, 0, 0, 0, 0, 2630,
	0, 2606, 3838, 2013, 0, 0, 0, 0, 1264, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 854, 0, 854, 0, 3867, 1180,
	0, 0, 0, 0, 0, 0, 4267, 3872, 3873, 1479,
	1203, 0, 1260, 0, 867, 0, 867, 0, 1469, 1470,
	1471, 854, 0, 0, 737, 4123, 1185, 1463, 1464, 1465,
	1466, 1467, 1468, 0, 0, 0, 0, 0, 0, 0,
	0, 867, 0, 0, 0, 0, 2646, 0, 0, 0,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 0,
	0, 1187, 0, 1469, 1470, 1471, 0, 1186, 0, 0,
	4110, 0, 1463, 1464, 1465, 1466, 1467, 1468, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1249, 0, 0, 0, 0, 4325, 0, 0, 4327, 0,
	0, 0, 1188, 854, 4330, 4331, 4332, 0, 0, 4335,
	4336, 4337, 1259, 0, 0, 0, 0, 0, 0, 4341,
	4342, 0, 0, 867, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 866, 866,
	0, 0, 0, 0, 0, 0, 0, 1189, 0, 0,
	0, 0, 1255, 0, 0, 0, 0, 0, 1192, 4359,
	4360, 0, 0, 4364, 0, 4365, 0, 0, 0, 0,
	0, 0, 0, 0, 1475, 1252, 0, 0, 0, 0,
	0, 1475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1202, 1475, 1194, 1193, 0, 0, 0, 0, 1257,
	0, 0, 0, 0, 0, 0, 0, 0, 4381, 2013,
	0, 0, 0, 0, 0, 2013, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1479, 0, 0, 0,
	0, 1263, 0, 0, 0, 1469, 1470, 1471, 0, 0,
	0, 4423, 4038, 0, 1463, 1464, 1465, 1466, 1467, 1468,
	0, 0, 0, 4090, 0, 0, 0, 0, 0, 0,
	1183, 0, 0, 1246, 0, 0, 84, 0, 0, 1250,
	0, 4099, 4100, 0, 0, 0, 0, 4104, 4105, 0,
	0, 2893, 0, 1256, 4108, 4109, 0, 0, 0, 0,
	1197, 4112, 0, 0, 0, 2606, 0, 0, 0, 1253,
	0, 0, 0, 0, 0, 737, 1251, 0, 0, 0,
	1261, 1490, 0, 4119, 1460, 3459, 0, 0, 1472, 1473,
	1474, 0, 0, 0, 1454, 0, 1004, 4535, 0, 0,
	2105, 0, 4538, 2106, 0, 0, 0, 2111, 4544, 2103,
	0, 4546, 0, 2013, 2108, 2112, 2107, 1254, 2109, 0,
	0, 0, 2110, 1483, 1484, 2104, 0, 0, 0, 0,
	737, 737, 2113, 0, 0, 0, 0, 0, 0, 0,
	4152, 0, 4155, 1072, 0, 0, 0, 0, 0, 0,
	737, 737, 0, 0, 0, 0, 0, 0, 0, 0,
	737, 0, 4581, 4582, 0, 0, 0, 1490, 4588, 4174,
	1460, 0, 4590, 0, 1472, 1473, 1474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2105, 0, 0, 2106,
	0, 4603, 0, 2111, 0, 2103, 0, 0, 0, 0,
	2108, 2112, 2107, 0, 2109, 0, 0, 0, 2110, 1483,
	1484, 2104, 0, 0, 0, 0, 0, 0, 2113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1071, 0, 0, 1490, 0, 0, 1460, 0, 0, 0,
	1472, 1473, 1474, 3066, 0, 3794, 3070, 0, 0, 2013,
	2013, 2013, 2105, 0, 0, 2106, 0, 4254, 0, 2111,
	0, 2103, 0, 0, 0, 0, 2108, 2112, 2107, 0,
	2109, 0, 0, 0, 2110, 1483, 1484, 2104, 0, 0,
	853, 853, 0, 0, 2113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1181, 0, 0, 1490, 920,
	1182, 1460, 0, 0, 1191, 1472, 1473, 1474, 0, 0,
	0, 0, 0, 0, 0, 0, 4280, 2105, 0, 0,
	2106, 0, 0, 737, 2111, 0, 2103, 869, 869, 0,
	0, 2108, 2112, 2107, 0, 2109, 0, 0, 0, 2110,
	1483, 1484, 2104, 0, 0, 0, 0, 4308, 0, 2113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3459, 2608, 0, 0, 0, 1184, 0, 0, 0,
	0, 0, 0, 0, 0, 737, 0, 0, 4749, 0,
	0, 0, 2608, 0, 2608, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1190, 0, 0, 2608, 0,
	0, 0, 0, 0, 0, 0, 737, 0, 0, 0,
	0, 0, 0, 0, 868, 868, 4351, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1195, 0, 4783, 0,
	0, 4786, 0, 0, 1475, 1475, 1475, 1475, 1475, 0,
	0, 0, 1490, 1475, 0, 1460, 0, 0, 0, 1472,
	1473, 1474, 0, 0, 0, 4370, 0, 0, 0, 0,
	0, 2105, 1475, 4372, 4373, 4374, 0, 0, 2111, 1180,
	2103, 0, 0, 0, 0, 2108, 2112, 2107, 2657, 2109,
	0, 0, 0, 2110, 1483, 1484, 2104, 866, 0, 0,
	0, 0, 0, 2113, 4382, 0, 1185, 0, 4385, 4386,
	4387, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2630, 0, 0, 0, 0,
	0, 1187, 0, 0, 0, 0, 0, 1186, 0, 0,
	0, 0, 0, 4427, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2329, 4444,
	0, 0, 0, 0, 0, 0, 0, 2329, 0, 0,
	0, 0, 0, 0, 3362, 2013, 3362, 0, 867, 0,
	0, 0, 1188, 0, 0, 0, 1479, 867, 0, 0,
	0, 4915, 1475, 0, 0, 1469, 1470, 1471, 0, 3389,
	920, 0, 3969, 0, 1463, 1464, 1465, 1466, 1467, 1468,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4935, 4936, 650, 0, 0, 0, 0, 1189, 0, 0,
	0, 0, 0, 0, 854, 0, 0, 0, 1192, 3437,
	0, 0, 0, 0, 0, 0, 3448, 0, 0, 854,
	0, 0, 0, 0, 867, 920, 920, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 867,
	0, 2981, 1479, 1194, 1193, 0, 0, 0, 3475, 0,
	0, 1469, 1470, 1471, 0, 0, 0, 0, 3948, 0,
	1463, 1464, 1465, 1466, 1467, 1468, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 737, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2329, 2999, 0, 0, 0,
	0, 0, 0, 4614, 3002, 679, 0, 0, 1479, 5033,
	0, 0, 0, 0, 0, 867, 867, 1469, 1470, 1471,
	1183, 0, 5043, 2678, 0, 0, 1463, 1464, 1465, 1466,
	1467, 1468, 0, 737, 0, 0, 4642, 737, 737, 0,
	0, 783, 786, 788, 0, 0, 5059, 3569, 0, 0,
	1197, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1001, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1479, 0, 0, 0, 0, 0, 0,
	0, 4674, 1469, 1470, 1471, 0, 0, 0, 0, 3734,
	0, 1463, 1464, 1465, 1466, 1467, 1468, 0, 0, 0,
	0, 0, 0, 0, 0, 866, 0, 0, 0, 0,
	854, 0, 866, 0, 0, 2013, 854, 2013, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2013, 0,
	867, 0, 0, 0, 0, 0, 867, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5119, 0, 0, 3630, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4744, 0, 0, 0,
	920, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 869, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 866, 0, 0, 2013,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4777,
	0, 0, 0, 0, 0, 0, 1181, 1479, 0, 0,
	866, 1182, 0, 0, 0, 1191, 1469, 1470, 1471, 0,
	0, 0, 0, 4794, 0, 1463, 1464, 1465, 1466, 1467,
	1468, 0, 0, 0, 0, 0, 850, 850, 0, 0,
	0, 1945, 0, 0, 0, 0, 0, 4812, 4812, 4812,
	0, 4815, 0, 0, 0, 0, 0, 0, 0, 1181,
	2630, 0, 0, 868, 1182, 2608, 2608, 2608, 1191, 0,
	0, 0, 0, 0, 0, 0, 0, 1184, 0, 0,
	0, 0, 0, 0, 3718, 0, 0, 0, 0, 0,
	1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475,
	1475, 1475, 1475, 1475, 1475, 1475, 1190, 0, 0, 0,
	0, 1475, 0, 0, 1490, 0, 866, 1460, 866, 0,
	0, 1472, 1473, 1474, 0, 5239, 0, 0, 2657, 2657,
	1184, 0, 0, 2105, 0, 0, 2106, 1195, 0, 0,
	2111, 0, 2103, 866, 0, 0, 0, 2108, 2112, 2107,
	854, 2109, 0, 0, 0, 2110, 1483, 1484, 2104, 1190,
	0, 0, 0, 0, 1475, 2113, 0, 0, 0, 0,
	867, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1180, 0, 0, 0, 0, 0, 1475, 0, 1475, 0,
	1195, 0, 0, 0, 1475, 0, 0, 0, 0, 0,
	0, 0, 4934, 0, 0, 1475, 0, 1185, 1475, 3721,
	0, 3254, 0, 2657, 2657, 2657, 0, 0, 0, 1475,
	1475, 0, 0, 4614, 0, 1475, 0, 0, 1475, 0,
	0, 4812, 0, 1180, 0, 866, 1475, 0, 0, 2999,
	1475, 0, 1187, 0, 0, 0, 1475, 0, 1186, 0,
	0, 0, 0, 1475, 0, 0, 0, 0, 0, 867,
	1185, 0, 0, 0, 0, 2013, 0, 0, 0, 0,
	1475, 0, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 2999, 853, 0, 0, 0, 3437, 854,
	0, 0, 737, 1188, 0, 1187, 0, 0, 0, 0,
	5017, 1186, 0, 867, 0, 0, 0, 0, 0, 867,
	0, 0, 0, 5026, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 869, 0, 0, 0, 0, 0,
	0, 869, 0, 0, 0, 0, 1080, 0, 1189, 0,
	0, 0, 0, 0, 0, 0, 1188, 0, 0, 1192,
	0, 0, 0, 0, 0, 1098, 3923, 3924, 0, 3926,
	0, 0, 0, 1107, 1109, 0, 1111, 0, 853, 0,
	0, 737, 0, 0, 737, 4614, 0, 0, 0, 0,
	0, 0, 2967, 0, 1194, 1193, 3958, 0, 0, 0,
	0, 1189, 853, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1192, 0, 0, 0, 0, 0, 1150, 0,
	0, 868, 0, 0, 0, 869, 0, 0, 868, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3437, 0, 0, 0, 2315, 0, 1194, 1193, 869,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2329, 2999, 0,
	2999, 1183, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1227, 0, 0, 0, 867, 867, 0,
	867, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1197, 4812, 0, 0, 0, 0, 0, 853, 0,
	853, 0, 868, 5136, 0, 0, 0, 0, 4065, 0,
	0, 0, 0, 0, 1183, 0, 4077, 0, 0, 0,
	0, 0, 0, 0, 0, 853, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1197, 869, 0, 869, 854, 0,
	0, 0, 0, 0, 0, 0, 0, 854, 0, 0,
	2013, 0, 0, 0, 0, 0, 0, 1490, 867, 1475,
	1460, 0, 869, 0, 1472, 1473, 1474, 867, 0, 3281,
	0, 4113, 0, 0, 0, 0, 2105, 0, 0, 2106,
	0, 0, 0, 2111, 0, 2103, 0, 0, 0, 0,
	2108, 2112, 2107, 0, 2109, 0, 0, 0, 2110, 1483,
	1484, 2104, 0, 0, 0, 0, 0, 853, 2113, 1479,
	0, 0, 2606, 0, 0, 850, 0, 0, 1469, 1470,
	1471, 0, 868, 0, 868, 0, 0, 1463, 1464, 1465,
	1466, 1467, 1468, 0, 0, 0, 0, 0, 0, 1490,
	0, 0, 1460, 0, 0, 2608, 1472, 1473, 1474, 868,
	0, 0, 0, 0, 869, 0, 0, 0, 2105, 0,
	0, 2106, 0, 0, 0, 2111, 0, 2103, 0, 0,
	0, 0, 2108, 2112, 2107, 0, 2109, 0, 737, 0,
	2110, 1483, 1484, 2104, 854, 0, 0, 0, 0, 0,
	2113, 0, 2608, 0, 854, 0, 1475, 1475, 0, 2657,
	2657, 0, 0, 1475, 867, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 867, 0, 0, 0, 0, 854,
	0, 0, 3254, 3254, 0, 0, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 4234, 0, 867,
	0, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2096, 0, 0, 1475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1475, 0, 0, 4260, 0, 0,
	0, 0, 0, 2146, 0, 0, 0, 0, 0, 0,
	2657, 2657, 2657, 2657, 2657, 2657, 2657, 2657, 2657, 2657,
	2657, 2657, 2657, 0, 2657, 0, 3254, 3254, 3254, 0,
	737, 0, 2608, 0, 0, 0, 1181, 0, 0, 0,
	0, 1182, 0, 0, 0, 1191, 0, 0, 0, 0,
	1475, 2212, 0, 0, 0, 2216, 0, 0, 0, 0,
	2228, 0, 0, 0, 0, 0, 0, 2329, 0, 0,
	0, 0, 1475, 0, 0, 0, 1475, 0, 2329, 2329,
	0, 2275, 2999, 0, 0, 0, 0, 867, 1475, 0,
	0, 0, 1475, 0, 0, 0, 0, 2289, 867, 867,
	0, 2013, 867, 0, 0, 0, 0, 1184, 0, 0,
	0, 0, 0, 0, 0, 854, 2306, 0, 0, 2309,
	0, 0, 0, 737, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 867, 1190, 0, 0, 0,
	866, 0, 0, 0, 0, 0, 0, 0, 0, 866,
	0, 0, 0, 0, 0, 4354, 4355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1195, 2370, 0,
	0, 0, 0, 2228, 2228, 2228, 0, 0, 1490, 0,
	0, 1460, 0, 850, 0, 1472, 1473, 1474, 0, 0,
	850, 0, 2394, 2395, 2657, 0, 0, 2105, 0, 0,
	2106, 0, 0, 2013, 2111, 0, 2103, 0, 0, 0,
	1180, 2108, 2112, 2107, 0, 2109, 866, 0, 0, 2110,
	1483, 1484, 2104, 0, 0, 2999, 0, 0, 0, 2113,
	0, 866, 0, 2013, 0, 0, 0, 1185, 0, 0,
	0, 0, 0, 0, 0, 867, 0, 0, 0, 0,
	2013, 0, 0, 0, 0, 0, 737, 0, 0, 0,
	1181, 0, 0, 1475, 0, 1182, 0, 0, 0, 1191,
	0, 0, 1187, 0, 850, 2478, 0, 0, 1186, 0,
	0, 0, 1479, 0, 0, 0, 0, 0, 0, 0,
	1475, 1469, 1470, 1471, 0, 0, 0, 4468, 850, 0,
	1463, 1464, 1465, 1466, 1467, 1468, 0, 866, 866, 0,
	2999, 0, 0, 0, 0, 0, 0, 0, 854, 0,
	0, 0, 0, 1188, 0, 0, 0, 0, 0, 0,
	867, 1184, 0, 0, 0, 0, 0, 0, 867, 0,
	0, 2509, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2526, 0, 0, 0, 0, 0, 0, 0, 0,
	1190, 0, 0, 0, 1479, 0, 0, 0, 1189, 0,
	1475, 0, 0, 1469, 1470, 1471, 2608, 0, 0, 1192,
	3700, 0, 1463, 1464, 1465, 1466, 1467, 1468, 0, 0,
	0, 1195, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 850, 0, 850, 0, 0, 0,
	0, 3437, 2311, 0, 1194, 1193, 0, 0, 0, 0,
	0, 0, 866, 0, 0, 0, 0, 0, 866, 0,
	0, 850, 0, 0, 1180, 0, 0, 1475, 0, 0,
	0, 0, 0, 0, 0, 1475, 1475, 0, 0, 1475,
	3254, 3254, 1475, 0, 0, 0, 0, 1475, 0, 0,
	0, 1185, 0, 1475, 0, 0, 0, 854, 0, 0,
	0, 0, 0, 0, 0, 0, 1475, 1475, 0, 0,
	0, 0, 0, 0, 737, 0, 0, 867, 1475, 0,
	0, 1183, 0, 1475, 0, 0, 1187, 0, 0, 0,
	0, 0, 1186, 0, 1475, 0, 1475, 0, 3254, 3254,
	3254, 3254, 3254, 3254, 3254, 3254, 3254, 3254, 3254, 3254,
	3254, 1197, 853, 850, 3254, 1475, 1475, 1475, 0, 0,
	0, 853, 0, 1475, 0, 0, 0, 0, 4232, 0,
	0, 0, 0, 854, 0, 0, 0, 1188, 0, 0,
	0, 2329, 4684, 1181, 0, 920, 0, 0, 1182, 1475,
	1475, 1475, 1191, 867, 0, 0, 0, 1490, 0, 869,
	1460, 867, 737, 0, 1472, 1473, 1474, 0, 869, 0,
	0, 0, 0, 0, 0, 0, 2105, 0, 0, 2106,
	0, 0, 1189, 2111, 0, 2103, 0, 0, 853, 0,
	2108, 2112, 2107, 1192, 2109, 0, 1475, 0, 2110, 1483,
	1484, 2104, 0, 853, 0, 0, 0, 0, 2113, 0,
	3271, 0, 0, 0, 1184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1475, 1225, 0, 1194, 1193,
	1475, 1475, 0, 0, 0, 869, 0, 0, 0, 0,
	0, 0, 0, 1190, 0, 0, 868, 0, 0, 0,
	869, 0, 0, 0, 3254, 868, 0, 0, 0, 0,
	0, 0, 866, 0, 0, 854, 0, 0, 0, 0,
	0, 0, 0, 1479, 1195, 0, 0, 0, 0, 853,
	853, 0, 1469, 1470, 1471, 867, 0, 0, 0, 3299,
	0, 1463, 1464, 1465, 1466, 1467, 1468, 0, 0, 0,
	0, 0, 0, 0, 0, 1183, 0, 2013, 0, 854,
	0, 0, 0, 0, 0, 0, 0, 1180, 0, 0,
	0, 0, 868, 0, 0, 0, 869, 869, 0, 867,
	0, 0, 0, 0, 0, 1197, 0, 868, 0, 0,
	0, 854, 854, 0, 1185, 0, 0, 0, 0, 0,
	0, 866, 0, 0, 0, 0, 4858, 4859, 4860, 4861,
	0, 867, 867, 0, 0, 0, 0, 0, 2013, 0,
	0, 920, 0, 0, 0, 0, 0, 0, 0, 1187,
	0, 0, 0, 0, 0, 1186, 0, 0, 0, 0,
	0, 0, 0, 0, 853, 866, 2013, 0, 0, 0,
	853, 866, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 868, 868, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1188, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 869, 0, 0, 0, 0, 0, 869, 1475, 0,
	0, 0, 0, 0, 854, 0, 0, 1475, 1475, 0,
	0, 0, 1475, 1475, 0, 0, 1475, 1475, 0, 0,
	1475, 0, 0, 0, 867, 1189, 0, 1475, 0, 0,
	0, 0, 0, 0, 0, 0, 1192, 0, 0, 0,
	0, 2657, 0, 0, 2999, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1475, 0, 0, 1475, 867, 0, 0, 0, 0, 0,
	0, 1194, 1193, 0, 0, 0, 0, 0, 868, 0,
	0, 0, 1475, 0, 868, 0, 0, 0, 0, 0,
	1490, 0, 0, 1460, 0, 0, 0, 1472, 1473, 1474,
	0, 0, 3266, 0, 2657, 0, 0, 0, 0, 2105,
	0, 0, 2106, 0, 0, 0, 2111, 0, 2103, 866,
	866, 0, 866, 2108, 2112, 2107, 0, 2109, 0, 0,
	0, 2110, 1483, 1484, 2104, 2999, 0, 0, 0, 0,
	0, 2113, 0, 0, 0, 0, 0, 0, 1183, 0,
	0, 0, 0, 0, 0, 867, 0, 0, 0, 0,
	0, 0, 1475, 0, 1490, 0, 0, 1460, 0, 0,
	0, 1472, 1473, 1474, 0, 854, 854, 0, 1197, 0,
	0, 0, 0, 2105, 0, 0, 2106, 0, 1475, 0,
	2111, 0, 2103, 0, 853, 867, 867, 2108, 2112, 2107,
	2809, 2109, 0, 0, 0, 2110, 1483, 1484, 2104, 0,
	866, 0, 1479, 0, 0, 2113, 1475, 0, 0, 866,
	0, 1469, 1470, 1471, 0, 0, 0, 0, 0, 0,
	1463, 1464, 1465, 1466, 1467, 1468, 0, 920, 0, 0,
	0, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2898, 2899, 0, 0, 0, 1475, 0,
	1475, 1475, 1475, 853, 0, 0, 0, 0, 0, 0,
	1475, 3254, 2657, 1475, 1475, 1475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2943,
	0, 0, 4232, 0, 0, 0, 0, 0, 0, 854,
	0, 2965, 0, 0, 0, 0, 0, 853, 868, 0,
	869, 0, 0, 853, 0, 1475, 0, 0, 0, 867,
	0, 0, 0, 0, 0, 2984, 0, 0, 0, 0,
	3254, 2657, 1475, 0, 0, 0, 866, 0, 850, 0,
	0, 0, 0, 0, 0, 0, 866, 850, 0, 0,
	0, 0, 0, 0, 869, 0, 0, 0, 0, 0,
	869, 0, 5193, 0, 0, 0, 0, 0, 0, 0,
	0, 866, 0, 0, 0, 1958, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	854, 0, 854, 854, 0, 0, 0, 868, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	867, 0, 867, 867, 850, 0, 0, 0, 0, 0,
	0, 0, 0, 5193, 0, 0, 0, 0, 0, 850,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 5193, 0, 0, 0, 4113, 0, 0, 0, 854,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 867,
	0, 853, 853, 0, 853, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 866,
	0, 0, 1475, 0, 0, 850, 850, 0, 0, 0,
	866, 866, 0, 0, 866, 0, 0, 0, 3254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 869, 869,
	1475, 869, 0, 0, 0, 0, 0, 0, 3145, 0,
	0, 0, 0, 0, 0, 0, 0, 866, 0, 0,
	0, 0, 0, 0, 0, 2657, 0, 0, 3254, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 853, 0, 0, 1479, 0, 0, 0, 0,
	0, 853, 0, 0, 1469, 1470, 1471, 0, 0, 0,
	0, 0, 0, 1463, 1464, 1465, 1466, 1467, 1468, 0,
	0, 0, 0, 1490, 0, 0, 1460, 0, 0, 0,
	1472, 1473, 1474, 0, 0, 868, 868, 0, 868, 869,
	850, 0, 2105, 0, 0, 2106, 850, 0, 869, 2111,
	0, 2103, 1475, 0, 0, 0, 2108, 2112, 2107, 0,
	2109, 0, 0, 0, 2110, 1483, 1484, 2104, 3225, 1479,
	0, 0, 0, 0, 2113, 0, 0, 866, 1469, 1470,
	1471, 0, 0, 0, 0, 1475, 0, 1463, 1464, 1465,
	1466, 1467, 1468, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1475, 0, 0, 1475, 0, 0, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 0, 853, 0,
	0, 0, 0, 0, 0, 0, 1490, 0, 853, 1460,
	0, 0, 0, 1472, 1473, 1474, 0, 854, 3231, 0,
	0, 0, 866, 0, 0, 2105, 0, 0, 2106, 0,
	866, 0, 2111, 853, 2103, 0, 0, 867, 0, 2108,
	2112, 2107, 0, 2109, 0, 869, 0, 2110, 1483, 1484,
	2104, 0, 0, 0, 0, 869, 0, 2113, 0, 3369,
	0, 3372, 3373, 0, 1490, 0, 3377, 1460, 0, 0,
	0, 1472, 1473, 1474, 0, 0, 0, 0, 0, 0,
	869, 0, 0, 2105, 0, 0, 2106, 0, 0, 0,
	2111, 0, 2103, 0, 0, 0, 0, 2108, 2112, 2107,
	0, 2109, 1475, 3413, 0, 2110, 1483, 1484, 2104, 0,
	0, 0, 0, 0, 0, 2113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 868, 0, 0, 0, 0, 0, 0, 0,
	3464, 3465, 868, 0, 0, 0, 0, 0, 0, 0,
	850, 0, 0, 0, 0, 2657, 2657, 0, 0, 2657,
	0, 853, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 0, 853, 853, 0, 0, 853, 0, 2228, 866,
	0, 0, 0, 0, 0, 1475, 0, 0, 0, 0,
	0, 0, 0, 0, 1475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 869, 853,
	0, 0, 0, 854, 0, 0, 0, 0, 0, 869,
	869, 0, 0, 869, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 867, 0, 0, 0, 0, 0, 850,
	0, 0, 0, 0, 3238, 0, 0, 0, 0, 0,
	0, 3254, 3254, 0, 3254, 866, 869, 0, 0, 0,
	0, 0, 0, 866, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2608, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 850, 0, 0, 0, 0, 0, 850,
	0, 0, 0, 0, 1490, 868, 0, 1460, 0, 0,
	0, 1472, 1473, 1474, 1475, 0, 868, 868, 0, 0,
	868, 0, 0, 2105, 0, 0, 2106, 0, 0, 853,
	2111, 0, 2103, 3615, 0, 0, 0, 2108, 2112, 2107,
	0, 2109, 0, 0, 0, 2110, 1483, 1484, 2104, 1490,
	0, 0, 1460, 868, 0, 2113, 1472, 1473, 1474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2105, 0,
	0, 2106, 0, 0, 0, 2111, 869, 2103, 0, 0,
	0, 0, 2108, 2112, 2107, 0, 2109, 0, 0, 0,
	2110, 1483, 1484, 2104, 0, 0, 0, 866, 1479, 0,
	2113, 0, 0, 0, 0, 0, 0, 1469, 1470, 1471,
	0, 0, 0, 0, 853, 0, 1463, 1464, 1465, 1466,
	1467, 1468, 853, 0, 0, 0, 0, 0, 0, 0,
	3662, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3670, 866, 3671, 0, 0, 0, 0, 3676, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 869, 0, 868, 0, 0, 0, 850, 850, 869,
	850, 0, 0, 866, 866, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1479, 0, 0, 0, 0, 0, 0, 0, 0,
	1469, 1470, 1471, 0, 0, 0, 0, 0, 0, 1463,
	1464, 1465, 1466, 1467, 1468, 0, 0, 0, 868, 0,
	0, 0, 0, 0, 0, 0, 868, 0, 850, 0,
	0, 0, 0, 0, 0, 0, 0, 850, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 0, 1479,
	0, 0, 0, 0, 0, 0, 866, 0, 1469, 1470,
	1471, 0, 0, 2704, 0, 0, 0, 1463, 1464, 1465,
	1466, 1467, 1468, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 869, 0,
	0, 0, 0, 0, 0, 0, 866, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2439, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 192,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 869, 0, 0, 0, 146, 0,
	0, 3874, 869, 0, 850, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 850, 0, 142, 866, 0, 0,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	3897, 0, 0, 0, 0, 0, 0, 0, 0, 850,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 866, 866, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 198, 0,
	0, 0, 0, 2435, 0, 0, 0, 0, 0, 853,
	0, 868, 0, 0, 0, 0, 2212, 0, 0, 868,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1479,
	195, 0, 0, 0, 0, 0, 0, 0, 1469, 1470,
	1471, 2445, 0, 853, 0, 2589, 869, 1463, 1464, 1465,
	1466, 1467, 1468, 0, 0, 2437, 0, 0, 0, 0,
	1181, 1211, 199, 0, 0, 1182, 0, 0, 0, 1191,
	200, 0, 132, 0, 1479, 853, 853, 0, 193, 0,
	2438, 0, 0, 1469, 1470, 1471, 0, 850, 0, 0,
	869, 0, 1463, 1464, 1465, 1466, 1467, 1468, 850, 850,
	0, 2449, 850, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 866, 869, 869, 0, 0, 0, 0, 1213, 0,
	0, 1184, 0, 868, 0, 850, 0, 0, 0, 119,
	0, 0, 0, 0, 0, 0, 129, 0, 0, 0,
	0, 0, 0, 0, 124, 0, 0, 0, 0, 0,
	1190, 0, 125, 0, 0, 0, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 868, 179, 2440,
	0, 202, 0, 0, 0, 0, 0, 0, 853, 0,
	0, 1195, 0, 0, 0, 4095, 4096, 4097, 4098, 0,
	2446, 0, 0, 2441, 0, 0, 0, 0, 203, 868,
	868, 0, 866, 190, 866, 866, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 853, 0,
	0, 0, 196, 0, 1180, 869, 0, 2447, 0, 0,
	0, 1181, 1211, 2448, 0, 850, 1182, 0, 197, 0,
	1191, 1212, 2442, 131, 0, 0, 0, 0, 2443, 0,
	0, 1185, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 869, 0, 0, 0, 0,
	0, 866, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 118, 0, 0, 0, 1187, 0, 0, 0,
	126, 0, 1186, 0, 0, 0, 2436, 0, 0, 1213,
	0, 0, 1184, 0, 0, 0, 133, 0, 0, 853,
	0, 135, 868, 0, 0, 0, 0, 130, 0, 141,
	850, 140, 122, 0, 0, 0, 0, 0, 850, 0,
	0, 1190, 121, 1214, 0, 0, 0, 1188, 0, 145,
	0, 144, 0, 0, 0, 0, 0, 0, 0, 853,
	853, 0, 868, 0, 0, 0, 869, 0, 0, 0,
	0, 0, 1195, 1215, 0, 0, 1216, 0, 0, 0,
	1217, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 1210, 0, 0, 0, 0, 0, 0, 0,
	4239, 0, 1218, 1192, 0, 0, 869, 869, 0, 0,
	0, 0, 0, 0, 0, 1180, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1212, 0, 0, 0, 2976, 0, 1194, 1193,
	1221, 0, 1185, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 161, 0, 1219, 0, 0,
	147, 0, 0, 0, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1220, 0, 0, 1187, 151, 0,
	0, 0, 0, 1186, 0, 0, 0, 850, 0, 0,
	0, 0, 0, 868, 868, 0, 173, 0, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 0,
	0, 1222, 0, 0, 0, 1183, 0, 0, 0, 0,
	0, 0, 0, 0, 1214, 0, 0, 0, 1188, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1197, 0, 0, 0, 0,
	869, 0, 0, 0, 1215, 0, 0, 1216, 0, 866,
	0, 1217, 0, 850, 0, 0, 0, 0, 0, 0,
	0, 850, 0, 1210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1218, 1192, 0, 0, 0, 0, 0,
	0, 0, 153, 0, 853, 0, 853, 853, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1207, 154, 1194,
	1193, 1221, 0, 0, 0, 0, 0, 0, 0, 155,
	0, 0, 189, 0, 0, 0, 188, 868, 1219, 0,
	156, 869, 0, 869, 869, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 157, 1220, 0, 0, 0, 0,
	0, 171, 0, 853, 0, 0, 0, 0, 186, 178,
	0, 0, 0, 0, 0, 0, 0, 152, 0, 158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1222, 0, 0, 850, 1183, 0, 0, 0,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	869, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1197, 0, 868, 0,
	868, 868, 0, 2509, 0, 0, 0, 0, 0, 850,
	0, 0, 0, 0, 0, 4492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 866, 0, 0, 0, 198,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
	0, 850, 850, 0, 0, 0, 0, 179, 163, 0,
	164, 0, 0, 0, 0, 0, 0, 0, 0, 4541,
	194, 0, 0, 0, 0, 0, 0, 868, 0, 172,
	0, 195, 165, 0, 0, 169, 0, 166, 0, 0,
	0, 0, 149, 0, 0, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 0, 0, 0,
	0, 175, 0, 199, 0, 0, 168, 0, 0, 0,
	0, 200, 174, 0, 0, 0, 0, 176, 0, 193,
	0, 0, 0, 170, 0, 0, 0, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 850, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 850, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 853, 0, 0, 0, 0, 0, 0, 0, 179,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 0, 0, 0, 0, 0, 206, 0, 203,
	0, 0, 0, 0, 190, 0, 0, 204, 869, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 850, 0, 0, 0, 197,
	0, 0, 0, 0, 0, 207, 0, 0, 0, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 4725, 0,
	0, 0, 0, 0, 0, 191, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 850, 850, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4771,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 869, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 850,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	850, 0, 850, 850, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 850,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 850, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2011, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2016, 236, 2022,
	253, 742, 2032, 302, 339, 554, 2019, 2064, 399, 2069,
	452, 456, 2093, 545, 2026, 2029, 2039, 2042, 310, 2047,
	747, 2055, 753, 2065, 759, 2084, 521, 2090, 749, 750,
	755, 241, 629, 544, 615, 2078, 2024, 2082, 406, 2075,
	2051, 2091, 2068, 2080, 2061, 2066, 249, 2053, 2054, 2058,
	2067, 751, 748, 752, 758, 746, 756, 743, 754, 2088,
	443, 377, 594, 470, 248, 294, 281, 323, 365, 477,
	2023, 2041, 355, 525, 290, 379, 2074, 269, 412, 2087,
	501, 376, 2081, 484, 504, 2043, 396, 275, 435, 491,
	492, 740, 745, 2031, 761, 2018, 279, 280, 401, 261,
	409, 606, 572, 464, 422, 420, 2049, 387, 444, 601,
	2021, 0, 309, 0, 304, 400, 540, 267, 519, 438,
	405, 359, 467, 496, 306, 291, 292, 335, 437, 325,
	277, 530, 569, 573, 571, 567, 564, 568, 565, 566,
	570, 326, 563, 850, 538, 547, 581, 561, 589, 546,
	586, 556, 301, 585, 550, 549, 595, 576, 577, 531,
	591, 562, 560, 553, 552, 548, 2089, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 237, 2017, 238,
	239, 240, 242, 243, 244, 739, 245, 246, 247, 250,
	251, 252, 254, 614, 255, 256, 257, 258, 259, 260,
	551, 741, 262, 263, 264, 265, 266, 268, 270, 271,
	272, 273, 274, 276, 278, 2033, 2034, 2035, 744, 2036,
	2037, 2038, 282, 283, 284, 285, 286, 287, 2040, 288,
	289, 293, 295, 296, 297, 298, 299, 300, 303, 2044,
	305, 307, 2045, 308, 311, 2046, 312, 313, 314, 315,
	316, 317, 318, 319, 555, 320, 2048, 321, 322, 324,
	2050, 327, 328, 329, 330, 331, 2052, 332, 557, 558,
	333, 334, 336, 337, 338, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 349, 350, 351, 2056, 352, 353,
	354, 356, 2057, 357, 358, 361, 362, 363, 364, 2059,
	366, 574, 2060, 367, 368, 369, 2062, 2063, 370, 371,
	372, 373, 374, 375, 378, 575, 380, 381, 382, 383,
	384, 385, 386, 616, 388, 389, 390, 391, 392, 393,
	394, 578, 579, 395, 397, 398, 580, 582, 583, 757,
	413, 414, 415, 416, 417, 418, 419, 421, 2071, 423,
	424, 425, 584, 426, 427, 428, 429, 2072, 430, 431,
	432, 433, 434, 436, 439, 440, 441, 442, 2073, 445,
	446, 447, 448, 449, 450, 451, 453, 454, 455, 457,
	458, 459, 617, 460, 461, 462, 463, 587, 465, 466,
	618, 468, 469, 471, 472, 473, 474, 475, 476, 627,
	2076, 478, 588, 479, 480, 481, 482, 483, 2077, 485,
	486, 487, 488, 489, 490, 493, 494, 495, 497, 498,
	590, 499, 500, 2079, 502, 503, 760, 505, 506, 507,
	508, 509, 2083, 628, 510, 592, 511, 593, 512, 513,
	514, 515, 516, 517, 518, 520, 2085, 2086, 522, 523,
	524, 526, 527, 528, 529, 532, 533, 534, 535, 536,
	2092, 537, 539, 541, 619, 596, 597, 598, 599, 600,
	602, 603, 604, 605, 542, 543, 559, 410, 404, 360,
	402, 403, 407, 408, 411, 2070, 2020, 2025, 2027, 2028,
	2030, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	0, 0, 0, 0, 0, 0, 1490, 0, 0, 1460,
	0, 0, 2009, 1472, 1473, 1474, 1504, 1506, 1488, 1533,
	1554, 0, 1605, 1651, 1621, 1476, 1738, 1744, 1477, 1805,
	1809, 0, 1485, 1535, 1461, 1585, 1600, 1615, 1627, 1480,
	1486, 1478, 1742, 1481, 1886, 1897, 1917, 1482, 1483, 1484,
	1462, 1878, 1935, 1704, 1863, 1515, 0, 1491, 1829, 0,
	0, 1752, 1867, 0, 0, 1529, 0, 0, 0, 0,
	1677, 1666, 1700, 1813, 1638, 1758, 1566, 1725, 1903, 1795,
	1714, 1909, 1827, 1528, 1594, 1578, 1630, 1695, 1836, 1511,
	1595, 1670, 1901, 1590, 1716, 0, 1557, 1760, 1902, 1865,
	1713, 1876, 1846, 1871, 1601, 1739, 1564, 1786, 1853, 1854,
	1524, 1637, 1559, 1912, 1509, 1569, 1577, 1747, 1548, 1755,
	1933, 1687, 1820, 1770, 1768, 0, 1727, 1796, 1928, 0,
	0, 1614, 0, 1608, 1746, 1920, 1555, 1894, 1789, 1751,
	1689, 1823, 1858, 1610, 1591, 1592, 1648, 1788, 1633, 1567,
	1908, 1684, 1688, 1686, 1682, 1679, 1683, 1680, 1681, 1685,
	1635, 1678, 0, 0, 1525, 1745, 1673, 1843, 1523, 1792,
	1631, 1604, 0, 0, 0, 1910, 1724, 1726, 0, 1879,
	1674, 1672, 1583, 1582, 1526, 1911, 1495, 1496, 1497, 1498,
	1499, 1500, 1501, 1502, 1503, 1505, 1507, 1508, 1512, 1513,
	1514, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1530, 1531,
	1532, 1534, 1537, 1538, 1539, 1541, 1542, 1543, 1544, 1545,
	1546, 1549, 1550, 1551, 1552, 1553, 1556, 1558, 1560, 1561,
	1562, 1563, 1565, 1568, 1570, 1571, 1572, 1573, 1574, 1575,
	1576, 1579, 1580, 0, 1581, 1584, 1586, 1587, 1588, 1589,
	1593, 1596, 1597, 1598, 1599, 1602, 1603, 1606, 1607, 1609,
	1611, 1612, 1613, 1616, 0, 1617, 1618, 1619, 1620, 1622,
	1623, 1624, 1625, 1626, 1628, 0, 0, 1629, 1632, 1634,
	1636, 1639, 1640, 1641, 1642, 0, 1643, 1644, 1645, 1646,
	1647, 1649, 0, 1650, 1652, 1653, 1654, 1655, 1656, 1657,
	1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1668, 1669,
	1671, 0, 1675, 1676, 1691, 1692, 1693, 1694, 1696, 1698,
	1699, 1697, 1701, 1702, 1703, 1705, 1706, 1707, 1708, 1709,
	1710, 1711, 1712, 1715, 1717, 1718, 0, 1719, 1720, 0,
	1721, 1722, 1723, 1728, 1729, 1730, 1731, 1732, 1733, 1734,
	1735, 1736, 1737, 1740, 1741, 1743, 1757, 1759, 0, 1761,
	1762, 1763, 1764, 1765, 1766, 1767, 1769, 1771, 1772, 1773,
	1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783,
	1784, 1785, 1787, 1790, 1791, 1793, 1794, 1797, 1798, 1799,
	1800, 1801, 1802, 1803, 1804, 1806, 1807, 1808, 1810, 1811,
	1812, 1814, 1815, 1816, 1817, 1818, 1819, 1821, 1822, 1824,
	1825, 1826, 0, 1828, 1830, 1831, 1832, 1833, 1834, 1835,
	1838, 1837, 1839, 1840, 1841, 1842, 1844, 1845, 1847, 1848,
	1849, 1850, 1851, 1852, 1855, 1856, 1857, 1859, 1860, 1861,
	1862, 1864, 1866, 1868, 1870, 1869, 1872, 1873, 1874, 1875,
	1877, 1880, 1881, 1882, 1883, 1884, 1885, 1887, 1888, 1889,
	1890, 1891, 1892, 1893, 1895, 0, 1896, 1898, 1899, 1900,
	1904, 1905, 1906, 1907, 1913, 1914, 1915, 1916, 1918, 0,
	0, 1919, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1929,
	1930, 1931, 1932, 0, 1934, 1667, 1756, 1750, 1690, 1748,
	1749, 1753, 1754, 0, 0, 1510, 1527, 1536, 1540, 1547,
	0, 1479, 0, 0, 0, 0, 0, 0, 0, 0,
	1469, 1470, 1471, 0, 0, 0, 0, 0, 0, 1463,
	1464, 1465, 1466, 1467, 1468, 2011, 0, 5192, 913, 0,
	0, 0, 0, 1000, 0, 0, 0, 0, 0, 0,
	0, 0, 2016, 236, 2022, 253, 742, 2032, 302, 339,
	554, 2019, 2064, 399, 2069, 452, 456, 2093, 545, 2026,
	2029, 2039, 2042, 310, 2047, 747, 2055, 753, 2065, 759,
	2084, 521, 2090, 749, 750, 755, 241, 629, 544, 615,
	2078, 2024, 2082, 406, 2075, 2051, 2091, 2068, 2080, 2061,
	2066, 249, 2053, 2054, 2058, 2067, 751, 748, 752, 758,
	746, 756, 743, 754, 2088, 443, 377, 594, 470, 248,
	294, 281, 323, 365, 477, 2023, 2041, 355, 525, 290,
	379, 2074, 269, 412, 2087, 501, 376, 2081, 484, 504,
	2043, 396, 275, 435, 491, 492, 740, 745, 2031, 761,
	2018, 279, 280, 401, 261, 409, 606, 572, 464, 422,
	420, 2049, 387, 444, 601, 2021, 0, 309, 0, 304,
	400, 540, 267, 519, 438, 405, 359, 467, 496, 306,
	291, 292, 335, 437, 325, 277, 530, 569, 573, 571,
	567, 564, 568, 565, 566, 570, 326, 563, 0, 538,
	547, 581, 561, 589, 546, 586, 556, 301, 585, 550,
	549, 595, 576, 577, 531, 591, 562, 560, 553, 552,
	548, 2089, 226, 227, 228, 229, 230, 231, 232, 233,
	234, 235, 237, 2017, 238, 239, 240, 242, 243, 244,
	739, 245, 246, 247, 250, 251, 252, 254, 614, 255,
	256, 257, 258, 259, 260, 551, 741, 262, 263, 264,
	265, 266, 268, 270, 271, 272, 273, 274, 276, 278,
	2033, 2034, 2035, 744, 2036, 2037, 2038, 282, 283, 284,
	285, 286, 287, 2040, 288, 289, 293, 295, 296, 297,
	298, 299, 300, 303, 2044, 305, 307, 2045, 308, 311,
	2046, 312, 313, 314, 315, 316, 317, 318, 319, 555,
	320, 2048, 321, 322, 324, 2050, 327, 328, 329, 330,
	331, 2052, 332, 557, 558, 333, 334, 336, 337, 338,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 349,
	350, 351, 2056, 352, 353, 354, 356, 2057, 357, 358,
	361, 362, 363, 364, 2059, 366, 574, 2060, 367, 368,
	369, 2062, 2063, 370, 371, 372, 373, 374, 375, 378,
	575, 380, 381, 382, 383, 384, 385, 386, 616, 388,
	389, 390, 391, 392, 393, 394, 578, 579, 395, 397,
	398, 580, 582, 583, 757, 413, 414, 415, 416, 417,
	418, 419, 421, 2071, 423, 424, 425, 584, 426, 427,
	428, 429, 2072, 430, 431, 432, 433, 434, 436, 439,
	440, 441, 442, 2073, 445, 446, 447, 448, 449, 450,
	451, 453, 454, 455, 457, 458, 459, 617, 460, 461,
	462, 463, 587, 465, 466, 618, 468, 469, 471, 472,
	473, 474, 475, 476, 627, 2076, 478, 588, 479, 480,
	481, 482, 483, 2077, 485, 486, 487, 488, 489, 490,
	493, 494, 495, 497, 498, 590, 499, 500, 2079, 502,
	503, 760, 505, 506, 507, 508, 509, 2083, 628, 510,
	592, 511, 593, 512, 513, 514, 515, 516, 517, 518,
	520, 2085, 2086, 522, 523, 524, 526, 527, 528, 529,
	532, 533, 534, 535, 536, 2092, 537, 539, 541, 619,
	596, 597, 598, 599, 600, 602, 603, 604, 605, 542,
	543, 559, 410, 404, 360, 402, 403, 407, 408, 411,
	2070, 2020, 2025, 2027, 2028, 2030, 2011, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2016, 236, 2022, 253, 742, 2032, 302,
	339, 554, 2019, 2064, 399, 2069, 452, 456, 2093, 545,
	2026, 2029, 2039, 2042, 310, 2047, 747, 2055, 753, 2065,
	759, 2084, 521, 2090, 749, 750, 755, 241, 629, 544,
	615, 2078, 2024, 2082, 406, 2075, 2051, 2091, 2068, 2080,
	2061, 2066, 249, 2053, 2054, 2058, 2067, 751, 748, 752,
	758, 746, 756, 743, 754, 2088, 443, 377, 594, 470,
	248, 294, 281, 323, 365, 477, 2023, 2041, 355, 525,
	290, 379, 2074, 269, 412, 2087, 501, 376, 2081, 484,
	504, 2043, 396, 275, 435, 491, 492, 740, 745, 2031,
	761, 2018, 279, 280, 401, 261, 409, 606, 572, 464,
	422, 420, 2049, 387, 444, 601, 2021, 0, 309, 0,
	304, 400, 540, 267, 519, 438, 405, 359, 467, 496,
	306, 291, 292, 335, 437, 325, 277, 530, 569, 573,
	571, 567, 564, 568, 565, 566, 570, 326, 563, 0,
	538, 547, 581, 561, 589, 546, 586, 556, 301, 585,
	550, 549, 595, 576, 577, 531, 591, 562, 560, 553,
	552, 548, 2089, 226, 227, 228, 229, 230, 231, 232,
	233, 234, 235, 237, 2017, 238, 239, 240, 242, 243,
	244, 739, 245, 246, 247, 250, 251, 252, 254, 614,
	255, 256, 257, 258, 259, 260, 551, 741, 262, 263,
	264, 265, 266, 268, 270, 271, 272, 273, 274, 276,
	278, 2033, 2034, 2035, 744, 2036, 2037, 2038, 282, 283,
	284, 285, 286, 287, 2040, 288, 289, 293, 295, 296,
	297, 298, 299, 300, 303, 2044, 305, 307, 2045, 308,
	311, 2046, 312, 313, 314, 315, 316, 317, 318, 319,
	555, 320, 2048, 321, 322, 324, 2050, 327, 328, 329,
	330, 331, 2052, 332, 557, 558, 333, 334, 336, 337,
	338, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	349, 350, 351, 2056, 352, 353, 354, 356, 2057, 357,
	358, 361, 362, 363, 364, 2059, 366, 574, 2060, 367,
	368, 369, 2062, 2063, 370, 371, 372, 373, 374, 375,
	378, 575, 380, 381, 382, 383, 384, 385, 386, 616,
	388, 389, 390, 391, 392, 393, 394, 578, 579, 395,
	397, 398, 580, 582, 583, 757, 413, 414, 415, 416,
	417, 418, 419, 421, 2071, 423, 424, 425, 584, 426,
	427, 428, 429, 2072, 430, 431, 432, 433, 434, 436,
	439, 440, 441, 442, 2073, 445, 446, 447, 448, 449,
	450, 451, 453, 454, 455, 457, 458, 459, 617, 460,
	461, 462, 463, 587, 465, 466, 618, 468, 469, 471,
	472, 473, 474, 475, 476, 627, 2076, 478, 588, 479,
	480, 481, 482, 483, 2077, 485, 486, 487, 488, 489,
	490, 493, 494, 495, 497, 498, 590, 499, 500, 2079,
	502, 503, 760, 505, 506, 507, 508, 509, 2083, 628,
	510, 592, 511, 593, 512, 513, 514, 515, 516, 517,
	518, 520, 2085, 2086, 522, 523, 524, 526, 527, 528,
	529, 532, 533, 534, 535, 536, 2092, 537, 539, 541,
	619, 596, 597, 598, 599, 600, 602, 603, 604, 605,
	542, 543, 559, 410, 404, 360, 402, 403, 407, 408,
	411, 2070, 2020, 2025, 2027, 2028, 2030, 2011, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2016, 236, 2022, 253, 742, 2032,
	2957, 339, 554, 2019, 2064, 399, 2069, 452, 456, 2093,
	545, 2026, 2029, 2039, 2042, 310, 2047, 747, 2055, 753,
	2065, 759, 2084, 521, 2090, 749, 750, 755, 241, 629,
	544, 615, 2078, 2024, 2082, 406, 2075, 2051, 2091, 2068,
	2080, 2061, 2066, 249, 2053, 2054, 2058, 2067, 751, 748,
	752, 758, 746, 756, 743, 754, 2088, 443, 377, 594,
	470, 248, 294, 281, 323, 365, 2955, 2023, 2041, 355,
	525, 290, 379, 2074, 269, 412, 2087, 501, 376, 2081,
	484, 504, 2043, 396, 275, 435, 491, 492, 740, 745,
	2031, 761, 2018, 279, 280, 401, 261, 409, 606, 572,
	464, 422, 420, 2049, 387, 444, 601, 2021, 0, 309,
	0, 304, 400, 540, 267, 519, 438, 405, 359, 467,
	496, 306, 291, 292, 335, 437, 325, 277, 530, 569,
	573, 571, 567, 564, 568, 565, 566, 570, 326, 563,
	0, 538, 547, 581, 561, 589, 546, 586, 556, 301,
	585, 550, 549, 595, 576, 577, 531, 591, 562, 560,
	553, 552, 548, 2089, 226, 227, 228, 229, 230, 2956,
	232, 233, 234, 235, 237, 2017, 238, 239, 240, 242,
	243, 244, 739, 245, 246, 247, 250, 251, 252, 254,
	614, 255, 256, 257, 258, 259, 260, 551, 741, 262,
	263, 264, 265, 266, 268, 270, 271, 272, 273, 274,
	276, 278, 2033, 2034, 2035, 744, 2036, 2037, 2038, 282,
	283, 284, 285, 286, 287, 2040, 288, 289, 293, 295,
	296, 297, 298, 299, 300, 303, 2044, 305, 307, 2045,
	308, 311, 2046, 312, 313, 314, 315, 316, 317, 318,
	319, 555, 320, 2048, 321, 322, 324, 2050, 327, 328,
	329, 330, 331, 2052, 332, 557, 558, 333, 334, 336,
	337, 338, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 349, 350, 351, 2056, 352, 353, 354, 356, 2057,
	357, 358, 361, 362, 363, 364, 2059, 366, 574, 2060,
	367, 368, 369, 2062, 2063, 370, 371, 372, 373, 374,
	375, 378, 575, 380, 381, 382, 383, 384, 385, 386,
	616, 388, 389, 390, 391, 392, 393, 394, 578, 579,
	395, 397, 398, 580, 582, 583, 757, 413, 414, 415,
	416, 417, 418, 419, 421, 2071, 423, 424, 425, 584,
	426, 427, 428, 429, 2072, 430, 431, 432, 433, 434,
	436, 439, 440, 441, 442, 2073, 445, 446, 447, 448,
	449, 450, 451, 453, 454, 455, 457, 458, 459, 617,
	460, 461, 462, 463, 587, 465, 466, 618, 468, 469,
	471, 472, 473, 474, 475, 476, 627, 2076, 478, 588,
	479, 480, 481, 482, 483, 2077, 485, 486, 487, 488,
	489, 490, 493, 494, 495, 497, 498, 590, 499, 500,
	2079, 502, 503, 760, 505, 506, 507, 508, 509, 2083,
	628, 510, 592, 511, 593, 512, 513, 514, 515, 516,
	517, 518, 520, 2085, 2086, 522, 523, 524, 526, 527,
	528, 529, 532, 533, 534, 535, 536, 2092, 537, 539,
	541, 619, 596, 597, 598, 599, 600, 602, 603, 604,
	605, 542, 543, 559, 410, 404, 360, 402, 403, 407,
	408, 411, 2070, 2020, 2025, 2027, 2028, 2030, 872, 0,
	1398, 913, 0, 0, 0, 704, 1000, 0, 0, 0,
	0, 0, 715, 716, 717, 2016, 236, 2022, 253, 742,
	2032, 302, 339, 0, 2019, 2064, 399, 2069, 452, 456,
	2093, 0, 2026, 2029, 2039, 2042, 310, 2047, 747, 2055,
	753, 2065, 759, 2084, 521, 2090, 749, 750, 755, 241,
	871, 544, 615, 2078, 2024, 2082, 3439, 2075, 2051, 2091,
	2068, 2080, 2061, 2066, 249, 2053, 2054, 2058, 2067, 751,
	748, 752, 758, 746, 756, 743, 754, 2088, 443, 377,
	0, 470, 248, 294, 281, 323, 365, 477, 2023, 2041,
	355, 525, 290, 379, 2074, 269, 412, 2087, 501, 376,
	2081, 484, 504, 2043, 396, 275, 435, 491, 492, 740,
	745, 2031, 761, 2018, 279, 280, 401, 261, 409, 0,
	0, 464, 422, 420, 2049, 387, 444, 0, 2021, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 538, 874, 864, 856, 857, 858, 859, 860,
	861, 0, 876, 877, 878, 879, 880, 531, 870, 0,
	855, 862, 863, 865, 2089, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 2017, 238, 239, 240,
	242, 243, 244, 739, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 0, 741,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 2033, 2034, 2035, 744, 2036, 2037, 2038,
	282, 283, 284, 285, 286, 287, 2040, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 2044, 305, 307,
	2045, 308, 311, 2046, 312, 313, 314, 315, 316, 317,
	318, 319, 0, 320, 2048, 321, 322, 324, 2050, 327,
	328, 329, 330, 331, 2052, 332, 0, 0, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 2056, 352, 353, 354, 356,
	2057, 357, 358, 361, 362, 363, 364, 2059, 366, 0,
	2060, 367, 368, 369, 2062, 2063, 370, 371, 372, 373,
	374, 375, 378, 0, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 3438,
	0, 395, 397, 398, 0, 0, 0, 757, 413, 414,
	415, 416, 417, 418, 419, 421, 2071, 423, 424, 425,
	0, 426, 427, 428, 429, 2072, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 2073, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 0, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 2076, 478,
	2331, 479, 480, 481, 482, 483, 2077, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 0, 499,
	500, 2079, 502, 503, 760, 505, 506, 507, 508, 509,
	2083, 628, 510, 0, 511, 0, 512, 513, 514, 515,
	516, 517, 518, 520, 2085, 2086, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 2092, 537,
	539, 541, 619, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 542, 543, 0, 410, 404, 360, 402, 403,
	407, 408, 411, 2070, 2020, 2025, 2027, 2028, 2030, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 712,
	713, 714, 0, 0, 0, 0, 0, 0, 3440, 3441,
	708, 709, 710, 711, 872, 0, 1398, 913, 0, 0,
	0, 704, 1000, 0, 0, 0, 0, 0, 715, 716,
	717, 2016, 236, 2022, 253, 742, 2032, 302, 339, 0,
	2019, 2064, 399, 2069, 452, 456, 2093, 0, 2026, 2029,
	2039, 2042, 310, 2047, 747, 2055, 753, 2065, 759, 2084,
	521, 2090, 749, 750, 755, 241, 871, 544, 615, 2078,
	2024, 2082, 3439, 2075, 2051, 2091, 2068, 2080, 2061, 2066,
	249, 2053, 2054, 2058, 2067, 751, 748, 752, 758, 746,
	756, 743, 754, 2088, 443, 377, 0, 470, 248, 294,
	281, 323, 365, 477, 2023, 2041, 355, 525, 290, 379,
	2074, 269, 412, 2087, 501, 376, 2081, 484, 504, 2043,
	396, 275, 435, 491, 492, 740, 745, 2031, 761, 2018,
	279, 280, 401, 261, 409, 0, 0, 464, 422, 420,
	2049, 387, 444, 0, 2021, 0, 309, 0, 304, 400,
	540, 267, 519, 438, 405, 359, 467, 496, 306, 291,
	292, 335, 437, 325, 277, 530, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 538, 874,
	864, 856, 857, 858, 859, 860, 861, 0, 876, 877,
	878, 879, 880, 531, 870, 0, 855, 862, 863, 865,
	2089, 226, 227, 228, 229, 230, 231, 232, 233, 234,
	235, 237, 2017, 238, 239, 240, 242, 243, 244, 739,
	245, 246, 247, 250, 251, 252, 254, 614, 255, 256,
	257, 258, 259, 260, 0, 741, 262, 263, 264, 265,
	266, 268, 270, 271, 272, 273, 274, 276, 278, 2033,
	2034, 2035, 744, 2036, 2037, 2038, 282, 283, 284, 285,
	286, 287, 2040, 288, 289, 293, 295, 296, 297, 298,
	299, 300, 303, 2044, 305, 307, 2045, 308, 311, 2046,
	312, 313, 314, 315, 316, 317, 318, 319, 0, 320,
	2048, 321, 322, 324, 2050, 327, 328, 329, 330, 331,
	2052, 332, 0, 0, 333, 334, 336, 337, 338, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
	351, 2056, 352, 353, 354, 356, 2057, 357, 358, 361,
	362, 363, 364, 2059, 366, 0, 2060, 367, 368, 369,
	2062, 2063, 370, 371, 372, 373, 374, 375, 378, 0,
	380, 381, 382, 383, 384, 385, 386, 616, 388, 389,
	390, 391, 392, 393, 394, 4071, 0, 395, 397, 398,
	0, 0, 0, 757, 413, 414, 415, 416, 417, 418,
	419, 421, 2071, 423, 424, 425, 0, 426, 427, 428,
	429, 2072, 430, 431, 432, 433, 434, 436, 439, 440,
	441, 442, 2073, 445, 446, 447, 448, 449, 450, 451,
	453, 454, 455, 457, 458, 459, 617, 460, 461, 462,
	463, 0, 465, 466, 618, 468, 469, 471, 472, 473,
	474, 475, 476, 627, 2076, 478, 2331, 479, 480, 481,
	482, 483, 2077, 485, 486, 487, 488, 489, 490, 493,
	494, 495, 497, 498, 0, 499, 500, 2079, 502, 503,
	760, 505, 506, 507, 508, 509, 2083, 628, 510, 0,
	511, 0, 512, 513, 514, 515, 516, 517, 518, 520,
	2085, 2086, 522, 523, 524, 526, 527, 528, 529, 532,
	533, 534, 535, 536, 2092, 537, 539, 541, 619, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 542, 543,
	0, 410, 404, 360, 402, 403, 407, 408, 411, 2070,
	2020, 2025, 2027, 2028, 2030, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 712, 713, 714, 0, 0,
	0, 0, 0, 0, 3440, 3441, 708, 709, 710, 711,
	797, 0, 986, 913, 0, 991, 992, 981, 1000, 971,
	0, 0, 0, 0, 0, 0, 0, 2603, 236, 0,
	253, 742, 0, 302, 339, 976, 0, 964, 399, 0,
	452, 456, 0, 545, 996, 0, 968, 2604, 310, 989,
	747, 0, 753, 990, 759, 988, 521, 0, 749, 750,
	755, 241, 1066, 544, 615, 0, 0, 0, 982, 0,
	0, 0, 0, 0, 0, 0, 249, 0, 0, 0,
	0, 751, 748, 752, 758, 746, 756, 743, 754, 0,
	443, 377, 594, 470, 248, 294, 281, 323, 365, 477,
	0, 0, 355, 525, 290, 379, 0, 269, 412, 1019,
	501, 376, 0, 484, 504, 0, 396, 275, 435, 491,
	492, 740, 745, 0, 761, 0, 279, 280, 401, 261,
	409, 606, 572, 464, 422, 420, 0, 387, 444, 601,
	977, 0, 309, 0, 304, 400, 540, 267, 519, 438,
	405, 359, 467, 496, 306, 291, 292, 335, 437, 325,
	277, 530, 1047, 1049, 1045, 1041, 1042, 1007, 1008, 1048,
	1044, 326, 1043, 0, 538, 1052, 1063, 1060, 1065, 1051,
	1064, 1058, 861, 585, 1055, 1054, 1068, 1061, 1062, 531,
	1067, 1006, 1059, 1057, 1056, 1053, 2602, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 237, 0, 238,
	239, 240, 242, 243, 244, 739, 245, 246, 247, 250,
	251, 252, 254, 614, 255, 256, 257, 258, 259, 260,
	1031, 1009, 262, 263, 264, 265, 266, 268, 270, 271,
	272, 273, 274, 276, 278, 1020, 1010, 1015, 1021, 1011,
	1012, 1016, 282, 283, 284, 285, 286, 287, 0, 288,
	289, 293, 295, 296, 297, 298, 299, 300, 303, 0,
	305, 307, 0, 308, 311, 0, 312, 313, 314, 315,
	316, 317, 318, 319, 1023, 320, 0, 321, 322, 324,
	0, 327, 328, 329, 330, 331, 0, 332, 1032, 980,
	333, 334, 336, 337, 338, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 349, 350, 351, 0, 352, 353,
	354, 356, 0, 357, 358, 361, 362, 363, 364, 0,
	366, 1033, 0, 367, 368, 369, 1013, 1014, 370, 371,
	372, 373, 374, 375, 378, 1046, 380, 381, 382, 383,
	384, 385, 386, 616, 388, 389, 390, 391, 392, 393,
	394, 578, 1024, 395, 397, 398, 1030, 582, 1025, 757,
	413, 414, 415, 416, 417, 418, 419, 421, 0, 423,
	424, 425, 1026, 426, 427, 428, 429, 0, 430, 431,
	432, 433, 434, 436, 439, 440, 441, 442, 0, 445,
	446, 447, 448, 449, 450, 451, 453, 454, 455, 457,
	458, 459, 617, 460, 461, 462, 463, 983, 465, 466,
	618, 468, 469, 471, 472, 473, 474, 475, 476, 627,
	1017, 478, 588, 479, 480, 481, 482, 483, 0, 485,
	486, 487, 488, 489, 490, 493, 494, 495, 497, 498,
	1027, 499, 500, 1018, 502, 503, 760, 505, 506, 507,
	508, 509, 0, 628, 510, 1028, 511, 1029, 512, 513,
	514, 515, 516, 517, 518, 520, 0, 967, 522, 523,
	524, 526, 527, 528, 529, 532, 533, 534, 535, 536,
	0, 537, 539, 541, 619, 596, 1034, 1035, 1038, 1036,
	1037, 1039, 1040, 1050, 542, 543, 559, 410, 404, 360,
	402, 403, 407, 408, 411, 0, 0, 0, 1022, 0,
	0, 0, 965, 0, 0, 797, 0, 986, 913, 0,
	991, 992, 981, 1000, 971, 0, 0, 972, 2600, 0,
	961, 962, 2601, 236, 0, 253, 742, 0, 302, 339,
	976, 0, 964, 399, 0, 452, 456, 99, 545, 996,
	0, 968, 0, 310, 989, 747, 0, 753, 990, 759,
	988, 521, 0, 749, 750, 755, 241, 1066, 544, 615,
	0, 0, 0, 982, 96, 0, 0, 0, 97, 0,
	0, 249, 0, 0, 0, 0, 751, 748, 752, 758,
	746, 756, 743, 754, 0, 443, 377, 1948, 470, 248,
	294, 281, 323, 365, 477, 0, 0, 355, 525, 290,
	379, 0, 269, 412, 1019, 501, 376, 0, 484, 504,
	0, 396, 275, 435, 491, 492, 740, 745, 0, 761,
	0, 279, 280, 401, 261, 409, 606, 572, 464, 422,
	420, 0, 387, 444, 601, 977, 0, 309, 0, 304,
	400, 540, 267, 519, 438, 405, 359, 467, 496, 306,
	291, 292, 335, 437, 325, 277, 530, 1047, 1049, 1045,
	1041, 1042, 1007, 1008, 1048, 1044, 326, 1043, 0, 538,
	1052, 1063, 1060, 1065, 1051, 1064, 1058, 861, 585, 1055,
	1054, 1068, 1061, 1062, 531, 1067, 1006, 1059, 1057, 1056,
	1053, 0, 226, 227, 228, 229, 230, 231, 232, 233,
	234, 235, 237, 0, 238, 239, 240, 242, 243, 244,
	739, 245, 246, 247, 250, 251, 252, 254, 614, 255,
	256, 257, 258, 259, 260, 1031, 1009, 262, 263, 264,
	265, 266, 268, 270, 271, 272, 273, 274, 276, 278,
	1020, 1010, 1015, 1021, 1011, 1012, 1016, 282, 283, 284,
	285, 286, 287, 0, 288, 289, 293, 295, 296, 297,
	298, 299, 300, 303, 0, 305, 307, 0, 308, 311,
	0, 312, 313, 314, 315, 316, 317, 318, 319, 1023,
	320, 0, 321, 322, 324, 0, 327, 328, 329, 330,
	331, 0, 332, 1032, 980, 333, 334, 336, 337, 338,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 349,
	350, 351, 0, 352, 353, 354, 356, 0, 357, 358,
	361, 362, 363, 364, 0, 366, 1033, 0, 367, 368,
	369, 1013, 1014, 370, 371, 372, 373, 374, 375, 378,
	1046, 380, 381, 382, 383, 384, 385, 386, 616, 388,
	389, 390, 391, 392, 393, 394, 578, 1024, 395, 397,
	398, 1030, 582, 1025, 757, 413, 414, 415, 416, 417,
	418, 419, 421, 0, 423, 424, 425, 1026, 426, 427,
	428, 429, 0, 430, 431, 432, 433, 434, 436, 439,
	440, 441, 442, 0, 445, 446, 447, 448, 449, 450,
	451, 453, 454, 455, 457, 458, 459, 617, 460, 461,
	462, 463, 983, 465, 466, 618, 468, 469, 471, 472,
	473, 474, 475, 476, 627, 1017, 478, 588, 479, 480,
	481, 482, 483, 0, 485, 486, 487, 488, 489, 490,
	493, 494, 495, 497, 498, 1027, 499, 500, 1018, 502,
	503, 760, 505, 506, 507, 508, 509, 0, 628, 510,
	1028, 511, 1029, 512, 513, 514, 515, 516, 517, 518,
	520, 0, 967, 522, 523, 524, 526, 527, 528, 529,
	532, 533, 534, 535, 536, 0, 537, 539, 541, 619,
	596, 1034, 1035, 1038, 1036, 1037, 1039, 1040, 1050, 542,
	543, 559, 410, 404, 360, 402, 403, 407, 408, 411,
	0, 0, 0, 1022, 0, 0, 0, 965, 0, 100,
	797, 0, 986, 913, 0, 991, 992, 981, 1000, 971,
	0, 0, 972, 4802, 0, 961, 962, 0, 236, 0,
	253, 742, 0, 302, 339, 976, 0, 964, 399, 0,
	452, 456, 99, 545, 996, 0, 968, 0, 310, 989,
	747, 0, 753, 990, 759, 988, 521, 0, 749, 750,
	755, 241, 1066, 544, 615, 0, 0, 0, 982, 96,
	0, 0, 0, 97, 0, 0, 249, 0, 0, 0,
	0, 751, 748, 752, 758, 746, 756, 743, 754, 0,
	443, 377, 1948, 470, 248, 294, 281, 323, 365, 477,
	0, 0, 355, 525, 290, 379, 2687, 269, 412, 1019,
	501, 376, 0, 484, 504, 0, 396, 275, 435, 491,
	492, 740, 745, 0, 761, 0, 279, 280, 401, 261,
	409, 606, 572, 464, 422, 420, 0, 387, 444, 601,
	977, 0, 309, 0, 304, 400, 540, 267, 519, 438,
	405, 359, 467, 496, 306, 291, 292, 335, 437, 325,
	277, 530, 1047, 1049, 1045, 1041, 1042, 1007, 1008, 1048,
	1044, 326, 1043, 0, 538, 1052, 1063, 1060, 1065, 1051,
	1064, 1058, 861, 585, 1055, 1054, 1068, 1061, 1062, 531,
	1067, 1006, 1059, 1057, 1056, 1053, 0, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 237, 0, 238,
	239, 240, 242, 243, 244, 739, 245, 246, 247, 250,
	251, 252, 254, 614, 255, 256, 257, 258, 259, 260,
	1031, 1009, 262, 263, 264, 265, 266, 268, 270, 271,
	272, 273, 274, 276, 278, 1020, 1010, 1015, 1021, 1011,
	1012, 1016, 282, 283, 284, 285, 286, 287, 0, 288,
	289, 293, 295, 296, 297, 298, 299, 300, 303, 0,
	305, 307, 0, 308, 311, 0, 312, 313, 314, 315,
	316, 317, 318, 319, 1023, 320, 0, 321, 322, 324,
	0, 327, 328, 329, 330, 331, 0, 332, 1032, 980,
	333, 334, 336, 337, 338, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 349, 350, 351, 0, 352, 353,
	354, 356, 0, 357, 358, 361, 362, 363, 364, 0,
	366, 1033, 0, 367, 368, 369, 1013, 1014, 370, 371,
	372, 373, 374, 375, 378, 1046, 380, 381, 382, 383,
	384, 385, 386, 616, 388, 389, 390, 391, 392, 393,
	394, 578, 1024, 395, 397, 398, 1030, 582, 1025, 757,
	413, 414, 415, 416, 417, 418, 419, 421, 0, 423,
	424, 425, 1026, 426, 427, 428, 429, 0, 430, 431,
	432, 433, 434, 436, 439, 440, 441, 442, 0, 445,
	446, 447, 448, 449, 450, 451, 453, 454, 455, 457,
	458, 459, 617, 460, 461, 462, 463, 983, 465, 466,
	618, 468, 469, 471, 472, 473, 474, 475, 476, 627,
	1017, 478, 588, 479, 480, 481, 482, 483, 0, 485,
	486, 487, 488, 489, 490, 493, 494, 495, 497, 498,
	1027, 499, 500, 1018, 502, 503, 760, 505, 506, 507,
	508, 509, 0, 628, 510, 1028, 511, 1029, 512, 513,
	514, 515, 516, 517, 518, 520, 0, 967, 522, 523,
	524, 526, 527, 528, 529, 532, 533, 534, 535, 536,
	0, 537, 539, 541, 619, 596, 1034, 1035, 1038, 1036,
	1037, 1039, 1040, 1050, 542, 543, 559, 410, 404, 360,
	402, 403, 407, 408, 411, 0, 0, 0, 1022, 0,
	0, 0, 965, 0, 100, 797, 0, 986, 913, 0,
	991, 992, 981, 1000, 971, 0, 0, 972, 0, 0,
	961, 962, 0, 236, 0, 253, 742, 0, 302, 339,
	976, 0, 964, 399, 0, 452, 456, 99, 545, 996,
	0, 968, 0, 310, 989, 747, 0, 753, 990, 759,
	988, 521, 0, 749, 750, 755, 241, 1066, 544, 615,
	0, 0, 0, 982, 96, 0, 0, 0, 97, 0,
	0, 249, 0, 0, 0, 0, 751, 748, 752, 758,
	746, 756, 743, 754, 0, 443, 377, 1948, 470, 248,
	294, 281, 323, 365, 477, 0, 0, 355, 525, 290,
	379, 0, 269, 412, 1019, 501, 376, 0, 484, 504,
	0, 396, 275, 435, 491, 492, 740, 745, 0, 761,
	0, 279, 280, 401, 261, 409, 606, 572, 464, 422,
	420, 0, 387, 444, 601, 977, 0, 309, 0, 304,
	400, 540, 267, 519, 438, 405, 359, 467, 496, 306,
	291, 292, 335, 437, 325, 277, 530, 1047, 1049, 1045,
	1041, 1042, 1007, 1008, 1048, 1044, 326, 1043, 0, 538,
	1052, 1063, 1060, 1065, 1051, 1064, 1058, 861, 585, 1055,
	1054, 1068, 1061, 1062, 531, 1067, 1006, 1059, 1057, 1056,
	1053, 0, 226, 227, 228, 229, 230, 231, 232, 233,
	234, 235, 237, 0, 238, 239, 240, 242, 243, 244,
	739, 245, 246, 247, 250, 251, 252, 254, 614, 255,
	256, 257, 258, 259, 260, 1031, 1009, 262, 263, 264,
	265, 266, 268, 270, 271, 272, 273, 274, 276, 278,
	1020, 1010, 1015, 1021, 1011, 1012, 1016, 282, 283, 284,
	285, 286, 287, 0, 288, 289, 293, 295, 296, 297,
	298, 299, 300, 303, 0, 305, 307, 0, 308, 311,
	0, 312, 313, 314, 315, 316, 317, 318, 319, 1023,
	320, 0, 321, 322, 324, 0, 327, 328, 329, 330,
	331, 0, 332, 1032, 980, 333, 334, 336, 337, 338,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 349,
	350, 351, 0, 352, 353, 354, 356, 0, 357, 358,
	361, 362, 363, 364, 0, 366, 1033, 0, 367, 368,
	369, 1013, 1014, 370, 371, 372, 373, 374, 375, 378,
	1046, 380, 381, 382, 383, 384, 385, 386, 616, 388,
	389, 390, 391, 392, 393, 394, 578, 1024, 395, 397,
	398, 1030, 582, 1025, 757, 413, 414, 415, 416, 417,
	418, 419, 421, 0, 423, 424, 425, 1026, 426, 427,
	428, 429, 0, 430, 431, 432, 433, 434, 436, 439,
	440, 441, 442, 0, 445, 446, 447, 448, 449, 450,
	451, 453, 454, 455, 457, 458, 459, 617, 460, 461,
	462, 463, 983, 465, 466, 618, 468, 469, 471, 472,
	473, 474, 475, 476, 627, 1017, 478, 588, 479, 480,
	481, 482, 483, 0, 485, 486, 487, 488, 489, 490,
	493, 494, 495, 497, 498, 1027, 499, 500, 1018, 502,
	503, 760, 505, 506, 507, 508, 509, 0, 628, 510,
	1028, 511, 1029, 512, 513, 514, 515, 516, 517, 518,
	520, 0, 967, 522, 523, 524, 526, 527, 528, 529,
	532, 533, 534, 535, 536, 0, 537, 539, 541, 619,
	596, 1034, 1035, 1038, 1036, 1037, 1039, 1040, 1050, 542,
	543, 559, 410, 404, 360, 402, 403, 407, 408, 411,
	0, 0, 0, 1022, 0, 0, 0, 965, 0, 100,
	797, 0, 986, 913, 0, 991, 992, 981, 1000, 971,
	0, 0, 972, 0, 0, 961, 962, 0, 236, 0,
	253, 742, 0, 302, 339, 976, 0, 964, 399, 0,
	452, 456, 0, 545, 996, 0, 968, 0, 310, 989,
	747, 0, 753, 990, 759, 988, 521, 0, 749, 750,
	755, 241, 1066, 544, 615, 0, 0, 0, 982, 0,
	2668, 0, 0, 0, 0, 0, 249, 0, 0, 0,
	0, 751, 748, 752, 758, 746, 756, 743, 754, 0,
	443, 377, 594, 470, 248, 294, 281, 323, 365, 477,
	0, 0, 355, 525, 290, 379, 0, 269, 412, 1019,
	501, 376, 0, 484, 504, 0, 396, 275, 435, 491,
	492, 740, 745, 0, 761, 0, 279, 280, 401, 261,
	409, 606, 572, 464, 422, 420, 0, 387, 444, 601,
	977, 0, 309, 0, 304, 400, 540, 267, 519, 438,
	405, 359, 467, 496, 306, 291, 292, 335, 437, 325,
	277, 530, 1047, 1049, 1045, 1041, 1042, 1007, 1008, 1048,
	1044, 326, 1043, 0, 538, 1052, 1063, 1060, 1065, 1051,
	1064, 1058, 861, 585, 1055, 1054, 1068, 1061, 1062, 531,
	1067, 1006, 1059, 1057, 1056, 1053, 0, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 237, 0, 238,
	239, 240, 242, 243, 244, 739, 245, 246, 247, 250,
	251, 252, 254, 614, 255, 256, 257, 258, 259, 260,
	1031, 1009, 262, 263, 264, 265, 266, 268, 270, 271,
	272, 273, 274, 276, 278, 1020, 1010, 1015, 1021, 1011,
	1012, 1016, 282, 283, 284, 285, 286, 287, 0, 288,
	289, 293, 295, 296, 297, 298, 299, 300, 303, 0,
	305, 307, 0, 308, 311, 0, 312, 313, 314, 315,
	316, 317, 318, 319, 1023, 320, 0, 321, 322, 324,
	0, 327, 328, 329, 330, 331, 0, 332, 1032, 980,
	333, 334, 336, 337, 338, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 349, 350, 351, 0, 352, 353,
	354, 356, 0, 357, 358, 361, 362, 363, 364, 0,
	366, 1033, 2664, 367, 368, 369, 1013, 1014, 370, 371,
	372, 373, 374, 375, 378, 1046, 380, 381, 382, 383,
	384, 385, 386, 616, 388, 389, 390, 391, 392, 393,
	394, 578, 1024, 395, 397, 398, 1030, 582, 1025, 757,
	413, 414, 415, 416, 417, 418, 419, 421, 0, 423,
	424, 425, 1026, 426, 427, 428, 429, 0, 430, 431,
	432, 433, 434, 436, 439, 440, 441, 442, 0, 445,
	446, 447, 448, 449, 450, 451, 453, 454, 455, 457,
	458, 459, 617, 460, 461, 462, 463, 983, 465, 466,
	618, 468, 469, 471, 472, 473, 474, 475, 476, 627,
	1017, 478, 588, 479, 480, 481, 482, 483, 0, 485,
	486, 487, 488, 489, 490, 493, 494, 495, 497, 498,
	1027, 499, 500, 1018, 502, 503, 760, 505, 506, 507,
	508, 509, 2665, 628, 510, 1028, 511, 1029, 512, 513,
	514, 515, 516, 517, 518, 520, 0, 967, 522, 523,
	524, 526, 527, 528, 529, 532, 533, 534, 535, 536,
	0, 537, 539, 541, 619, 596, 1034, 1035, 1038, 1036,
	1037, 1039, 1040, 1050, 542, 543, 559, 410, 404, 360,
	402, 403, 407, 408, 411, 0, 0, 2663, 1022, 0,
	0, 0, 965, 0, 797, 0, 986, 913, 0, 991,
	992, 981, 1000, 971, 0, 0, 0, 972, 0, 0,
	961, 962, 236, 0, 253, 742, 0, 302, 339, 976,
	0, 964, 399, 0, 452, 456, 0, 545, 996, 0,
	968, 0, 310, 989, 747, 0, 753, 990, 759, 988,
	521, 0, 749, 750, 755, 241, 1066, 544, 615, 0,
	0, 0, 982, 0, 0, 0, 0, 0, 0, 0,
	249, 0, 0, 0, 0, 751, 748, 752, 758, 746,
	756, 743, 754, 0, 443, 377, 594, 470, 248, 294,
	281, 323, 365, 477, 0, 0, 355, 525, 290, 379,
	0, 269, 412, 1019, 501, 376, 0, 484, 504, 0,
	396, 275, 435, 491, 492, 740, 745, 0, 761, 0,
	279, 280, 401, 261, 409, 606, 572, 464, 422, 420,
	0, 387, 444, 601, 977, 0, 309, 0, 304, 400,
	540, 267, 519, 438, 405, 359, 467, 496, 306, 291,
	292, 335, 437, 325, 277, 530, 1047, 1049, 1045, 1041,
	1042, 1007, 1008, 1048, 1044, 326, 1043, 0, 538, 1052,
	1063, 1060, 1065, 1051, 1064, 1058, 861, 585, 1055, 1054,
	1068, 1061, 1062, 531, 1067, 1006, 1059, 1057, 1056, 1053,
	0, 226, 227, 228, 229, 230, 231, 232, 233, 234,
	235, 237, 0, 238, 239, 240, 242, 243, 244, 739,
	245, 246, 247, 250, 251, 252, 254, 614, 255, 256,
	257, 258, 259, 260, 1031, 1009, 262, 263, 264, 265,
	266, 268, 270, 271, 272, 273, 274, 276, 278, 1020,
	1010, 1015, 1021, 1011, 1012, 1016, 282, 283, 284, 285,
	286, 287, 0, 288, 289, 293, 295, 296, 297, 298,
	299, 300, 303, 0, 305, 307, 0, 308, 311, 0,
	312, 313, 314, 315, 316, 317, 318, 319, 1023, 320,
	0, 321, 322, 324, 0, 327, 328, 329, 330, 331,
	0, 332, 1032, 980, 333, 334, 336, 337, 338, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
	351, 0, 352, 353, 354, 356, 0, 357, 358, 361,
	362, 363, 364, 0, 366, 1033, 0, 367, 368, 369,
	1013, 1014, 370, 371, 372, 373, 374, 375, 378, 1046,
	380, 381, 382, 383, 384, 385, 386, 616, 388, 389,
	390, 391, 392, 393, 394, 578, 1024, 395, 397, 398,
	1030, 582, 1025, 757, 413, 414, 415, 416, 417, 418,
	419, 421, 0, 423, 424, 425, 1026, 426, 427, 428,
	429, 0, 430, 431, 432, 433, 434, 436, 439, 440,
	441, 442, 0, 445, 446, 447, 448, 449, 450, 451,
	453, 454, 455, 457, 458, 459, 617, 460, 461, 462,
	463, 983, 465, 466, 618, 468, 469, 471, 472, 473,
	474, 475, 476, 627, 1017, 478, 588, 479, 480, 481,
	482, 483, 0, 485, 486, 487, 488, 489, 490, 493,
	494, 495, 497, 498, 1027, 499, 500, 1018, 502, 503,
	760, 505, 506, 507, 508, 509, 0, 628, 510, 1028,
	511, 1029, 512, 513, 514, 515, 516, 517, 518, 520,
	0, 967, 522, 523, 524, 526, 527, 528, 529, 532,
	533, 534, 535, 536, 0, 537, 539, 541, 619, 596,
	1034, 1035, 1038, 1036, 1037, 1039, 1040, 1050, 542, 543,
	559, 410, 404, 360, 402, 403, 407, 408, 411, 0,
	0, 0, 1022, 0, 0, 0, 965, 0, 0, 797,
	0, 986, 913, 0, 991, 992, 981, 1000, 971, 0,
	0, 972, 0, 0, 961, 962, 959, 236, 0, 253,
	742, 0, 302, 339, 976, 0, 964, 399, 0, 452,
	456, 0, 545, 996, 0, 968, 0, 310, 989, 747,
	0, 753, 990, 759, 988, 521, 0, 749, 750, 755,
	241, 1066, 544, 615, 0, 0, 0, 982, 0, 0,
	0, 0, 0, 0, 0, 249, 0, 0, 0, 0,
	751, 748, 752, 758, 746, 756, 743, 754, 0, 443,
	377, 594, 470, 248, 294, 281, 323, 365, 477, 0,
	0, 355, 525, 290, 379, 0, 269, 412, 1019, 501,
	376, 0, 484, 504, 0, 396, 275, 435, 491, 492,
	740, 745, 0, 761, 0, 279, 280, 401, 261, 409,
	606, 572, 464, 422, 420, 0, 387, 444, 601, 977,
	0, 309, 0, 304, 400, 540, 267, 519, 438, 405,
	359, 467, 496, 306, 291, 292, 335, 437, 325, 277,
	530, 1047, 1049, 1045, 1041, 1042, 1007, 1008, 1048, 1044,
	326, 1043, 0, 538, 1052, 1063, 1060, 1065, 1051, 1064,
	1058, 861, 585, 1055, 1054, 1068, 1061, 1062, 531, 1067,
	1006, 1059, 1057, 1056, 1053, 0, 226, 227, 228, 229,
	230, 231, 232, 233, 234, 235, 237, 0, 238, 239,
	240, 242, 243, 244, 739, 245, 246, 247, 250, 251,
	252, 254, 614, 255, 256, 257, 258, 259, 260, 1031,
	1009, 262, 263, 264, 265, 266, 268, 270, 271, 272,
	273, 274, 276, 278, 1020, 1010, 1015, 1021, 1011, 1012,
	1016, 282, 283, 284, 285, 286, 287, 0, 288, 289,
	293, 295, 296, 297, 298, 299, 300, 303, 0, 305,
	307, 0, 308, 311, 0, 312, 313, 314, 315, 316,
	317, 318, 319, 1023, 320, 0, 321, 322, 324, 0,
	327, 328, 329, 330, 331, 0, 332, 1032, 980, 333,
	334, 336, 337, 338, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 349, 350, 351, 0, 352, 353, 354,
	356, 0, 357, 358, 361, 362, 363, 364, 0, 366,
	1033, 0, 367, 368, 369, 1013, 1014, 370, 371, 372,
	373, 374, 375, 378, 1046, 380, 381, 382, 383, 384,
	385, 386, 616, 388, 389, 390, 391, 392, 393, 394,
	578, 1024, 395, 397, 398, 1030, 582, 1025, 757, 413,
	414, 415, 416, 417, 418, 419, 421, 0, 423, 424,
	425, 1026, 426, 427, 428, 429, 0, 430, 431, 432,
	433, 434, 436, 439, 440, 441, 442, 0, 445, 446,
	447, 448, 449, 450, 451, 453, 454, 455, 457, 458,
	459, 617, 460, 461, 462, 463, 983, 465, 466, 618,
	468, 469, 471, 472, 473, 474, 475, 476, 627, 1017,
	478, 588, 479, 480, 481, 482, 483, 0, 485, 486,
	487, 488, 489, 490, 493, 494, 495, 497, 498, 1027,
	499, 500, 1018, 502, 503, 760, 505, 506, 507, 508,
	509, 0, 628, 510, 1028, 511, 1029, 512, 513, 514,
	515, 516, 517, 518, 520, 0, 967, 522, 523, 524,
	526, 527, 528, 529, 532, 533, 534, 535, 536, 0,
	537, 539, 541, 619, 596, 1034, 1035, 1038, 1036, 1037,
	1039, 1040, 1050, 542, 543, 559, 410, 404, 360, 402,
	403, 407, 408, 411, 0, 0, 0, 1022, 0, 0,
	0, 965, 0, 797, 0, 986, 913, 0, 991, 992,
	981, 1000, 971, 0, 1953, 2593, 972, 0, 0, 961,
	962, 236, 0, 253, 742, 0, 302, 339, 976, 0,
	964, 399, 0, 452, 456, 0, 545, 996, 0, 968,
	0, 310, 989, 747, 0, 753, 990, 759, 988, 521,
	0, 749, 750, 755, 241, 1066, 544, 615, 0, 0,
	2554, 982, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 751, 748, 752, 758, 746, 756,
	743, 754, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 1019, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 740, 745, 0, 761, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 977, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 1047, 1049, 1045, 1041, 1042,
	1007, 1008, 1048, 1044, 326, 1043, 0, 538, 1052, 1063,
	1060, 1065, 1051, 1064, 1058, 861, 585, 1055, 1054, 1068,
	1061, 1062, 531, 1067, 1006, 1059, 1057, 1056, 1053, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 739, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 1031, 1009, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 1020, 1010,
	1015, 1021, 1011, 1012, 1016, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 1023, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 1032, 980, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 1033, 0, 367, 368, 369, 1013,
	1014, 370, 371, 372, 373, 374, 375, 378, 1046, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 1024, 395, 397, 398, 1030,
	582, 1025, 757, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 1026, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	983, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 1017, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 1027, 499, 500, 1018, 502, 503, 760,
	505, 506, 507, 508, 509, 0, 628, 510, 1028, 511,
	1029, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	967, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 1034,
	1035, 1038, 1036, 1037, 1039, 1040, 1050, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 0, 0,
	0, 1022, 0, 0, 0, 965, 0, 797, 0, 986,
	913, 0, 991, 992, 981, 1000, 971, 0, 0, 0,
	972, 0, 0, 961, 962, 236, 0, 253, 742, 0,
	302, 339, 976, 0, 964, 399, 0, 452, 456, 0,
	545, 996, 0, 968, 0, 310, 989, 747, 0, 753,
	990, 759, 988, 521, 0, 749, 750, 755, 241, 1066,
	544, 615, 0, 0, 0, 982, 0, 0, 0, 0,
	0, 0, 0, 249, 0, 0, 0, 0, 751, 748,
	752, 758, 746, 756, 743, 754, 0, 443, 377, 594,
	470, 248, 294, 281, 323, 365, 477, 0, 0, 355,
	525, 290, 379, 0, 269, 412, 1019, 501, 376, 0,
	484, 504, 0, 396, 275, 435, 491, 492, 740, 745,
	0, 761, 0, 279, 280, 401, 261, 409, 606, 572,
	464, 422, 420, 0, 387, 444, 601, 977, 0, 309,
	0, 304, 400, 540, 267, 519, 438, 405, 359, 467,
	496, 306, 291, 292, 335, 437, 325, 277, 530, 1047,
	1049, 1045, 1041, 1042, 1007, 1008, 1048, 1044, 326, 1043,
	0, 538, 1052, 1063, 1060, 1065, 1051, 1064, 1058, 861,
	585, 1055, 1054, 1068, 1061, 1062, 531, 1067, 1006, 1059,
	1057, 1056, 1053, 3703, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 237, 0, 238, 239, 240, 242,
	243, 244, 739, 245, 246, 247, 250, 251, 252, 254,
	614, 255, 256, 257, 258, 259, 260, 1031, 1009, 262,
	263, 264, 265, 266, 268, 270, 271, 272, 273, 274,
	276, 278, 1020, 1010, 1015, 1021, 1011, 1012, 1016, 282,
	283, 284, 285, 286, 287, 0, 288, 289, 293, 295,
	296, 297, 298, 299, 300, 303, 0, 305, 307, 0,
	308, 311, 0, 312, 313, 314, 315, 316, 317, 318,
	319, 1023, 320, 0, 321, 322, 324, 0, 327, 328,
	329, 330, 331, 0, 332, 1032, 980, 333, 334, 336,
	337, 338, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 349, 350, 351, 0, 352, 353, 354, 356, 0,
	357, 358, 361, 362, 363, 364, 0, 366, 1033, 0,
	367, 368, 369, 1013, 1014, 370, 371, 372, 373, 374,
	375, 378, 1046, 380, 381, 382, 383, 384, 385, 386,
	616, 388, 389, 390, 391, 392, 393, 394, 578, 1024,
	395, 397, 398, 1030, 582, 1025, 757, 413, 414, 415,
	416, 417, 418, 419, 421, 0, 423, 424, 425, 1026,
	426, 427, 428, 429, 0, 430, 431, 432, 433, 434,
	436, 439, 440, 441, 442, 0, 445, 446, 447, 448,
	449, 450, 451, 453, 454, 455, 457, 458, 459, 617,
	460, 461, 462, 463, 983, 465, 466, 618, 468, 469,
	471, 472, 473, 474, 475, 476, 627, 1017, 478, 588,
	479, 480, 481, 482, 483, 0, 485, 486, 487, 488,
	489, 490, 493, 494, 495, 497, 498, 1027, 499, 500,
	1018, 502, 503, 760, 505, 506, 507, 508, 509, 0,
	628, 510, 1028, 511, 1029, 512, 513, 514, 515, 516,
	517, 518, 520, 0, 967, 522, 523, 524, 526, 527,
	528, 529, 532, 533, 534, 535, 536, 0, 537, 539,
	541, 619, 596, 1034, 1035, 1038, 1036, 1037, 1039, 1040,
	1050, 542, 543, 559, 410, 404, 360, 402, 403, 407,
	408, 411, 0, 0, 0, 1022, 0, 0, 0, 965,
	0, 797, 0, 986, 913, 0, 991, 992, 981, 1000,
	971, 0, 0, 0, 972, 0, 0, 961, 962, 236,
	0, 253, 742, 0, 302, 339, 976, 0, 964, 399,
	0, 452, 456, 0, 545, 996, 0, 968, 0, 310,
	989, 747, 0, 753, 990, 759, 988, 521, 0, 749,
	750, 755, 241, 1066, 544, 615, 0, 0, 0, 982,
	0, 0, 0, 0, 0, 0, 0, 249, 0, 0,
	0, 0, 751, 748, 752, 758, 746, 756, 743, 754,
	0, 443, 377, 594, 470, 248, 294, 281, 323, 365,
	477, 0, 0, 355, 525, 290, 379, 0, 269, 412,
	1019, 501, 376, 0, 484, 504, 0, 396, 275, 435,
	491, 492, 740, 745, 0, 761, 0, 279, 280, 401,
	261, 409, 606, 572, 464, 422, 420, 0, 387, 444,
	601, 977, 0, 309, 0, 304, 400, 540, 267, 519,
	438, 405, 359, 467, 496, 306, 291, 292, 335, 437,
	325, 277, 530, 1047, 1049, 1045, 1041, 1042, 1007, 1008,
	1048, 1044, 326, 1043, 0, 538, 1052, 1063, 1060, 1065,
	1051, 1064, 1058, 861, 585, 1055, 1054, 1068, 1061, 1062,
	531, 1067, 1006, 1059, 1057, 1056, 1053, 0, 226, 227,
	228, 229, 230, 231, 232, 233, 234, 235, 237, 0,
	238, 239, 240, 242, 243, 244, 739, 245, 246, 247,
	250, 251, 252, 254, 614, 255, 256, 257, 258, 259,
	260, 1031, 1009, 262, 263, 264, 265, 266, 268, 270,
	271, 272, 273, 274, 276, 278, 1020, 1010, 1015, 1021,
	1011, 1012, 1016, 282, 283, 284, 285, 286, 287, 0,
	288, 289, 293, 295, 296, 297, 298, 299, 300, 303,
	0, 305, 307, 0, 308, 311, 0, 312, 313, 314,
	315, 316, 317, 318, 319, 1023, 320, 0, 321, 322,
	324, 0, 327, 328, 329, 330, 331, 0, 332, 1032,
	980, 333, 334, 336, 337, 338, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 349, 350, 351, 0, 352,
	353, 354, 356, 0, 357, 358, 361, 362, 363, 364,
	0, 366, 1033, 0, 367, 368, 369, 1013, 1014, 370,
	371, 372, 373, 374, 375, 378, 1046, 380, 381, 382,
	383, 384, 385, 386, 616, 388, 389, 390, 391, 392,
	393, 394, 578, 1024, 395, 397, 398, 1030, 582, 1025,
	757, 413, 414, 415, 416, 417, 418, 419, 421, 0,
	423, 424, 425, 1026, 426, 427, 428, 429, 0, 430,
	431, 432, 433, 434, 436, 439, 440, 441, 442, 0,
	445, 446, 447, 448, 449, 450, 451, 453, 454, 455,
	457, 458, 459, 617, 460, 461, 462, 463, 983, 465,
	466, 618, 468, 469, 471, 472, 473, 474, 475, 476,
	627, 1017, 478, 588, 479, 480, 481, 482, 483, 0,
	485, 486, 487, 488, 489, 490, 493, 494, 495, 497,
	498, 1027, 499, 500, 1018, 502, 503, 760, 505, 506,
	507, 508, 509, 0, 628, 510, 1028, 511, 1029, 512,
	513, 514, 515, 516, 517, 518, 520, 0, 967, 522,
	523, 524, 526, 527, 528, 529, 532, 533, 534, 535,
	536, 0, 537, 539, 541, 619, 596, 1034, 1035, 1038,
	1036, 1037, 1039, 1040, 1050, 542, 543, 559, 410, 404,
	360, 402, 403, 407, 408, 411, 0, 0, 0, 1022,
	0, 0, 0, 965, 0, 797, 0, 986, 913, 0,
	991, 992, 981, 1000, 971, 0, 0, 0, 972, 3698,
	0, 961, 962, 236, 0, 253, 742, 0, 302, 339,
	976, 0, 964, 399, 0, 452, 456, 0, 545, 996,
	0, 968, 0, 310, 989, 747, 0, 753, 990, 759,
	988, 521, 0, 749, 750, 755, 241, 1066, 544, 615,
	0, 0, 0, 982, 0, 0, 0, 0, 0, 0,
	0, 249, 0, 0, 0, 0, 751, 748, 752, 758,
	746, 756, 743, 754, 0, 443, 377, 594, 470, 248,
	294, 281, 323, 365, 477, 0, 0, 355, 525, 290,
	379, 0, 269, 412, 1019, 501, 376, 0, 484, 504,
	0, 396, 275, 435, 491, 492, 740, 745, 0, 761,
	0, 279, 280, 401, 261, 409, 606, 572, 464, 422,
	420, 0, 387, 444, 601, 977, 0, 309, 0, 304,
	400, 540, 267, 519, 438, 405, 359, 467, 496, 306,
	291, 292, 335, 437, 325, 277, 530, 1047, 1049, 1045,
	1041, 1042, 1007, 1008, 1048, 1044, 326, 1043, 0, 538,
	1052, 1063, 1060, 1065, 1051, 1064, 1058, 861, 585, 1055,
	1054, 1068, 1061, 1062, 531, 1067, 1006, 1059, 1057, 1056,
	1053, 0, 226, 227, 228, 229, 230, 231, 232, 233,
	234, 235, 237, 0, 238, 239, 240, 242, 243, 244,
	739, 245, 246, 247, 250, 251, 252, 254, 614, 255,
	256, 257, 258, 259, 260, 1031, 1009, 262, 263, 264,
	265, 266, 268, 270, 271, 272, 273, 274, 276, 278,
	1020, 1010, 1015, 1021, 1011, 1012, 1016, 282, 283, 284,
	285, 286, 287, 0, 288, 289, 293, 295, 296, 297,
	298, 299, 300, 303, 0, 305, 307, 0, 308, 311,
	0, 312, 313, 314, 315, 316, 317, 318, 319, 1023,
	320, 0, 321, 322, 324, 0, 327, 328, 329, 330,
	331, 0, 332, 1032, 980, 333, 334, 336, 337, 338,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 349,
	350, 351, 0, 352, 353, 354, 356, 0, 357, 358,
	361, 362, 363, 364, 0, 366, 1033, 0, 367, 368,
	369, 1013, 1014, 370, 371, 372, 373, 374, 375, 378,
	1046, 380, 381, 382, 383, 384, 385, 386, 616, 388,
	389, 390, 391, 392, 393, 394, 578, 1024, 395, 397,
	398, 1030, 582, 1025, 757, 413, 414, 415, 416, 417,
	418, 419, 421, 0, 423, 424, 425, 1026, 426, 427,
	428, 429, 0, 430, 431, 432, 433, 434, 436, 439,
	440, 441, 442, 0, 445, 446, 447, 448, 449, 450,
	451, 453, 454, 455, 457, 458, 459, 617, 460, 461,
	462, 463, 983, 465, 466, 618, 468, 469, 471, 472,
	473, 474, 475, 476, 627, 1017, 478, 588, 479, 480,
	481, 482, 483, 0, 485, 486, 487, 488, 489, 490,
	493, 494, 495, 497, 498, 1027, 499, 500, 1018, 502,
	503, 760, 505, 506, 507, 508, 509, 0, 628, 510,
	1028, 511, 1029, 512, 513, 514, 515, 516, 517, 518,
	520, 0, 967, 522, 523, 524, 526, 527, 528, 529,
	532, 533, 534, 535, 536, 0, 537, 539, 541, 619,
	596, 1034, 1035, 1038, 1036, 1037, 1039, 1040, 1050, 542,
	543, 559, 410, 404, 360, 402, 403, 407, 408, 411,
	0, 0, 0, 1022, 0, 0, 0, 965, 0, 797,
	0, 986, 913, 0, 991, 992, 981, 1000, 971, 0,
	0, 0, 972, 3660, 0, 961, 962, 236, 0, 253,
	742, 0, 302, 339, 976, 0, 964, 399, 0, 452,
	456, 0, 545, 996, 0, 968, 0, 310, 989, 747,
	0, 753, 990, 759, 988, 521, 0, 749, 750, 755,
	241, 1066, 544, 615, 0, 0, 0, 982, 0, 2668,
	0, 0, 0, 0, 0, 249, 0, 0, 0, 0,
	751, 748, 752, 758, 746, 756, 743, 754, 0, 443,
	377, 594, 470, 248, 294, 281, 323, 365, 477, 0,
	0, 355, 525, 290, 379, 0, 269, 412, 1019, 501,
	376, 0, 484, 504, 0, 396, 275, 435, 491, 492,
	740, 745, 0, 761, 0, 279, 280, 401, 261, 409,
	606, 572, 464, 422, 420, 0, 387, 444, 601, 977,
	0, 309, 0, 304, 400, 540, 267, 519, 438, 405,
	359, 467, 496, 306, 291, 292, 335, 437, 325, 277,
	530, 1047, 1049, 1045, 1041, 1042, 1007, 1008, 1048, 1044,
	326, 1043, 0, 538, 1052, 1063, 1060, 1065, 1051, 1064,
	1058, 861, 585, 1055, 1054, 1068, 1061, 1062, 531, 1067,
	1006, 1059, 1057, 1056, 1053, 0, 226, 227, 228, 229,
	230, 231, 232, 233, 234, 235, 237, 0, 238, 239,
	240, 242, 243, 244, 739, 245, 246, 247, 250, 251,
	252, 254, 614, 255, 256, 257, 258, 259, 260, 1031,
	1009, 262, 263, 264, 265, 266, 268, 270, 271, 272,
	273, 274, 276, 278, 1020, 1010, 1015, 1021, 1011, 1012,
	1016, 282, 283, 284, 285, 286, 287, 0, 288, 289,
	293, 295, 296, 297, 298, 299, 300, 303, 0, 305,
	307, 0, 308, 311, 0, 312, 313, 314, 315, 316,
	317, 318, 319, 1023, 320, 0, 321, 322, 324, 0,
	327, 328, 329, 330, 331, 0, 332, 1032, 980, 333,
	334, 336, 337, 338, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 349, 350, 351, 0, 352, 353, 354,
	356, 0, 357, 358, 361, 362, 363, 364, 0, 366,
	1033, 0, 367, 368, 369, 1013, 1014, 370, 371, 372,
	373, 374, 375, 378, 1046, 380, 381, 382, 383, 384,
	385, 386, 616, 388, 389, 390, 391, 392, 393, 394,
	578, 1024, 395, 397, 398, 1030, 582, 1025, 757, 413,
	414, 415, 416, 417, 418, 419, 421, 0, 423, 424,
	425, 1026, 426, 427, 428, 429, 0, 430, 431, 432,
	433, 434, 436, 439, 440, 441, 442, 0, 445, 446,
	447, 448, 449, 450, 451, 453, 454, 455, 457, 458,
	459, 617, 460, 461, 462, 463, 983, 465, 466, 618,
	468, 469, 471, 472, 473, 474, 475, 476, 627, 1017,
	478, 588, 479, 480, 481, 482, 483, 0, 485, 486,
	487, 488, 489, 490, 493, 494, 495, 497, 498, 1027,
	499, 500, 1018, 502, 503, 760, 505, 506, 507, 508,
	509, 0, 628, 510, 1028, 511, 1029, 512, 513, 514,
	515, 516, 517, 518, 520, 0, 967, 522, 523, 524,
	526, 527, 528, 529, 532, 533, 534, 535, 536, 0,
	537, 539, 541, 619, 596, 1034, 1035, 1038, 1036, 1037,
	1039, 1040, 1050, 542, 543, 559, 410, 404, 360, 402,
	403, 407, 408, 411, 0, 0, 0, 1022, 0, 0,
	0, 965, 0, 797, 0, 986, 913, 0, 991, 992,
	981, 1000, 971, 0, 0, 0, 972, 0, 0, 961,
	962, 236, 0, 253, 742, 0, 302, 339, 976, 0,
	964, 399, 0, 452, 456, 0, 545, 996, 0, 968,
	0, 310, 989, 747, 0, 753, 990, 759, 988, 521,
	0, 749, 750, 755, 241, 1066, 544, 615, 0, 0,
	0, 982, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 751, 748, 752, 758, 746, 756,
	743, 754, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 2687,
	269, 412, 1019, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 740, 745, 0, 761, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 977, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 1047, 1049, 1045, 1041, 1042,
	1007, 1008, 1048, 1044, 326, 1043, 0, 538, 1052, 1063,
	1060, 1065, 1051, 1064, 1058, 861, 585, 1055, 1054, 1068,
	1061, 1062, 531, 1067, 1006, 1059, 1057, 1056, 1053, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 739, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 1031, 1009, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 1020, 1010,
	1015, 1021, 1011, 1012, 1016, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 1023, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 1032, 980, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 1033, 0, 367, 368, 369, 1013,
	1014, 370, 371, 372, 373, 374, 375, 378, 1046, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 1024, 395, 397, 398, 1030,
	582, 1025, 757, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 1026, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	983, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 1017, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 1027, 499, 500, 1018, 502, 503, 760,
	505, 506, 507, 508, 509, 0, 628, 510, 1028, 511,
	1029, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	967, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 1034,
	1035, 1038, 1036, 1037, 1039, 1040, 1050, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 0, 0,
	0, 1022, 0, 0, 0, 965, 0, 797, 0, 986,
	913, 0, 991, 992, 981, 1000, 971, 0, 0, 0,
	972, 0, 0, 961, 962, 236, 0, 253, 742, 0,
	302, 339, 976, 0, 964, 399, 0, 452, 456, 0,
	545, 996, 0, 968, 0, 310, 989, 747, 0, 753,
	990, 759, 988, 521, 0, 749, 750, 755, 241, 1066,
	544, 615, 0, 0, 0, 982, 0, 0, 0, 0,
	0, 0, 0, 249, 0, 0, 0, 0, 751, 748,
	752, 758, 746, 756, 743, 754, 0, 443, 377, 594,
	470, 248, 294, 281, 323, 365, 477, 0, 0, 355,
	525, 290, 379, 0, 269, 412, 1019, 501, 376, 0,
	484, 504, 0, 396, 275, 435, 491, 492, 740, 745,
	0, 761, 0, 279, 280, 401, 261, 409, 606, 572,
	464, 422, 420, 0, 387, 444, 601, 977, 0, 309,
	0, 304, 400, 540, 267, 519, 438, 405, 359, 467,
	496, 306, 291, 292, 335, 437, 325, 277, 530, 1047,
	1049, 1045, 1041, 1042, 1007, 1008, 1048, 1044, 326, 1043,
	0, 538, 1052, 1063, 1060, 1065, 1051, 1064, 1058, 861,
	585, 1055, 1054, 1068, 1061, 1062, 531, 1067, 1006, 1059,
	1057, 1056, 1053, 0, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 237, 0, 238, 239, 240, 242,
	243, 244, 739, 245, 246, 247, 250, 251, 252, 254,
	614, 255, 256, 257, 258, 259, 260, 1031, 1009, 262,
	263, 264, 265, 266, 268, 270, 271, 272, 273, 274,
	276, 278, 1020, 1010, 1015, 1021, 1011, 1012, 1016, 282,
	283, 284, 285, 286, 287, 0, 288, 289, 293, 295,
	296, 297, 298, 299, 300, 303, 0, 305, 307, 0,
	308, 311, 0, 312, 313, 314, 315, 316, 317, 318,
	319, 1023, 320, 0, 321, 322, 324, 0, 327, 328,
	329, 330, 331, 0, 332, 1032, 980, 333, 334, 336,
	337, 338, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 349, 350, 351, 0, 352, 353, 354, 356, 0,
	357, 358, 361, 362, 363, 364, 0, 366, 1033, 0,
	367, 368, 369, 1013, 1014, 370, 371, 372, 373, 374,
	375, 378, 1046, 380, 381, 382, 383, 384, 385, 386,
	616, 388, 389, 390, 391, 392, 393, 394, 578, 1024,
	395, 397, 398, 1030, 582, 1025, 757, 413, 414, 415,
	416, 417, 418, 419, 421, 0, 423, 424, 425, 1026,
	426, 427, 428, 429, 0, 430, 431, 432, 433, 434,
	436, 439, 440, 441, 442, 0, 445, 446, 447, 448,
	449, 450, 451, 453, 454, 455, 457, 458, 459, 617,
	460, 461, 462, 463, 983, 465, 466, 618, 468, 469,
	471, 472, 473, 474, 475, 476, 627, 1017, 478, 588,
	479, 480, 481, 482, 483, 0, 485, 486, 487, 488,
	489, 490, 493, 494, 495, 497, 498, 1027, 499, 500,
	1018, 502, 503, 760, 505, 506, 507, 508, 509, 0,
	628, 510, 1028, 511, 1029, 512, 513, 514, 515, 516,
	517, 518, 520, 0, 967, 522, 523, 524, 526, 527,
	528, 529, 532, 533, 534, 535, 536, 0, 537, 539,
	541, 619, 596, 1034, 1035, 1038, 1036, 1037, 1039, 1040,
	1050, 542, 543, 559, 410, 404, 360, 402, 403, 407,
	408, 411, 0, 0, 0, 1022, 0, 0, 0, 965,
	0, 0, 797, 0, 986, 913, 0, 991, 992, 981,
	1000, 971, 0, 0, 972, 2598, 0, 961, 962, 1437,
	236, 0, 253, 742, 0, 302, 339, 976, 0, 964,
	399, 0, 452, 456, 0, 545, 996, 0, 968, 0,
	310, 989, 747, 0, 753, 990, 759, 988, 521, 0,
	749, 750, 755, 241, 1066, 544, 615, 0, 0, 0,
	982, 0, 0, 0, 0, 0, 0, 0, 249, 0,
	0, 0, 0, 751, 748, 752, 758, 746, 756, 743,
	754, 0, 443, 377, 594, 470, 248, 294, 281, 323,
	365, 477, 0, 0, 355, 525, 290, 379, 0, 269,
	412, 1019, 501, 376, 0, 484, 504, 0, 396, 275,
	435, 491, 492, 740, 745, 0, 761, 0, 279, 280,
	401, 261, 409, 606, 572, 464, 422, 420, 0, 387,
	444, 601, 977, 0, 309, 0, 304, 400, 540, 267,
	519, 438, 405, 359, 467, 496, 306, 291, 292, 335,
	437, 325, 277, 530, 1047, 1049, 1045, 1041, 1042, 1007,
	1008, 1048, 1044, 326, 1043, 0, 538, 1052, 1063, 1060,
	1065, 1051, 1064, 1058, 861, 585, 1055, 1054, 1068, 1061,
	1062, 531, 1067, 1006, 1059, 1057, 1056, 1053, 0, 226,
	227, 228, 229, 230, 231, 232, 233, 234, 235, 237,
	0, 238, 239, 240, 242, 243, 244, 739, 245, 246,
	247, 250, 251, 252, 254, 614, 255, 256, 257, 258,
	259, 260, 1031, 1009, 262, 263, 264, 265, 266, 268,
	270, 271, 272, 273, 274, 276, 278, 1020, 1010, 1015,
	1021, 1011, 1012, 1016, 282, 283, 284, 285, 286, 287,
	0, 288, 289, 293, 295, 296, 297, 298, 299, 300,
	303, 0, 305, 307, 0, 308, 311, 0, 312, 313,
	314, 315, 316, 317, 318, 319, 1023, 320, 0, 321,
	322, 324, 0, 327, 328, 329, 330, 331, 0, 332,
	1032, 980, 333, 334, 336, 337, 338, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 349, 350, 351, 0,
	352, 353, 354, 356, 0, 357, 358, 361, 362, 363,
	364, 0, 366, 1033, 0, 367, 368, 369, 1013, 1014,
	370, 371, 372, 373, 374, 375, 378, 1046, 380, 381,
	382, 383, 384, 385, 386, 616, 388, 389, 390, 391,
	392, 393, 394, 578, 1024, 395, 397, 398, 1030, 582,
	1025, 757, 413, 414, 415, 416, 417, 418, 419, 421,
	0, 423, 424, 425, 1026, 426, 427, 428, 429, 0,
	430, 431, 432, 433, 434, 436, 439, 440, 441, 442,
	0, 445, 446, 447, 448, 449, 450, 451, 453, 454,
	455, 457, 458, 459, 617, 460, 461, 462, 463, 983,
	465, 466, 618, 468, 469, 471, 472, 473, 474, 475,
	476, 627, 1017, 478, 588, 479, 480, 481, 482, 483,
	0, 485, 486, 487, 488, 489, 490, 493, 494, 495,
	497, 498, 1027, 499, 500, 1018, 502, 503, 760, 505,
	506, 507, 508, 509, 0, 628, 510, 1028, 511, 1029,
	512, 513, 514, 515, 516, 517, 518, 520, 0, 967,
	522, 523, 524, 526, 527, 528, 529, 532, 533, 534,
	535, 536, 0, 537, 539, 541, 619, 596, 1034, 1035,
	1038, 1036, 1037, 1039, 1040, 1050, 542, 543, 559, 410,
	404, 360, 402, 403, 407, 408, 411, 0, 0, 0,
	1022, 0, 0, 0, 965, 0, 797, 0, 986, 913,
	0, 991, 992, 981, 1000, 971, 0, 0, 0, 972,
	0, 0, 961, 962, 236, 0, 253, 742, 0, 302,
	339, 976, 0, 964, 399, 0, 452, 456, 0, 545,
	996, 0, 968, 0, 310, 989, 747, 0, 753, 990,
	759, 988, 521, 0, 749, 750, 755, 241, 1066, 544,
	615, 0, 0, 0, 982, 0, 0, 0, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 751, 748, 752,
	758, 746, 756, 743, 754, 0, 443, 377, 594, 470,
	248, 294, 281, 323, 365, 477, 0, 0, 355, 525,
	290, 379, 0, 269, 412, 1019, 501, 376, 0, 484,
	504, 0, 396, 275, 435, 491, 492, 740, 745, 0,
	761, 0, 279, 280, 401, 261, 409, 606, 572, 464,
	422, 420, 0, 387, 444, 601, 977, 0, 309, 0,
	304, 400, 540, 267, 519, 438, 405, 359, 467, 496,
	306, 291, 292, 335, 437, 325, 277, 530, 1047, 1049,
	1045, 1041, 1042, 1007, 1008, 1048, 1044, 326, 1043, 0,
	538, 1052, 1063, 1060, 1065, 1051, 1064, 1058, 861, 585,
	1055, 1054, 1068, 1061, 1062, 531, 1067, 1006, 1059, 1057,
	1056, 1053, 0, 226, 227, 228, 229, 230, 231, 232,
	233, 234, 235, 237, 0, 238, 239, 240, 242, 243,
	244, 739, 245, 246, 247, 250, 251, 252, 254, 614,
	255, 256, 257, 258, 259, 260, 1031, 1009, 262, 263,
	264, 265, 266, 268, 270, 271, 272, 273, 274, 276,
	278, 1020, 1010, 1015, 1021, 1011, 1012, 1016, 282, 283,
	284, 285, 286, 287, 0, 288, 289, 293, 295, 296,
	297, 298, 299, 300, 303, 0, 305, 307, 0, 308,
	311, 0, 312, 313, 314, 315, 316, 317, 318, 319,
	1023, 320, 0, 321, 322, 324, 0, 327, 328, 329,
	330, 331, 0, 332, 1032, 980, 333, 334, 336, 337,
	338, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	349, 350, 351, 0, 352, 353, 354, 356, 0, 357,
	358, 361, 362, 363, 364, 0, 366, 1033, 0, 367,
	368, 369, 1013, 1014, 370, 371, 372, 373, 374, 375,
	378, 1046, 380, 381, 382, 383, 384, 385, 386, 616,
	388, 389, 390, 391, 392, 393, 394, 578, 1024, 395,
	397, 398, 1030, 582, 1025, 757, 413, 414, 415, 416,
	417, 418, 419, 421, 0, 423, 424, 425, 1026, 426,
	427, 428, 429, 0, 430, 431, 432, 433, 434, 436,
	439, 440, 441, 442, 0, 445, 446, 447, 448, 449,
	450, 451, 453, 454, 455, 457, 458, 459, 617, 460,
	461, 462, 463, 983, 465, 466, 618, 468, 469, 471,
	472, 473, 474, 475, 476, 627, 1017, 478, 588, 479,
	480, 481, 482, 483, 0, 485, 486, 487, 488, 489,
	490, 493, 494, 495, 497, 498, 1027, 499, 500, 1018,
	502, 503, 760, 505, 506, 507, 508, 509, 0, 628,
	510, 1028, 511, 1029, 512, 513, 514, 515, 516, 517,
	518, 520, 0, 967, 522, 523, 524, 526, 527, 528,
	529, 532, 533, 534, 535, 536, 0, 537, 539, 541,
	619, 596, 1034, 1035, 1038, 1036, 1037, 1039, 1040, 1050,
	542, 543, 559, 410, 404, 360, 402, 403, 407, 408,
	411, 0, 0, 0, 1022, 0, 0, 0, 965, 0,
	797, 0, 986, 913, 0, 991, 992, 981, 1000, 971,
	0, 0, 0, 972, 0, 0, 961, 962, 236, 0,
	253, 742, 0, 302, 339, 976, 0, 964, 399, 0,
	452, 456, 0, 545, 996, 0, 968, 0, 310, 989,
	747, 0, 753, 990, 759, 988, 521, 0, 749, 750,
	755, 241, 1066, 544, 615, 0, 0, 0, 982, 0,
	0, 0, 0, 0, 0, 0, 249, 0, 0, 0,
	0, 751, 748, 752, 758, 746, 756, 743, 754, 0,
	443, 377, 594, 470, 248, 294, 281, 323, 365, 477,
	0, 0, 355, 525, 290, 379, 0, 269, 412, 1019,
	501, 376, 0, 484, 504, 0, 396, 275, 435, 491,
	492, 740, 745, 0, 761, 0, 4811, 280, 401, 261,
	409, 606, 572, 464, 422, 420, 0, 387, 444, 601,
	977, 0, 309, 0, 304, 400, 540, 267, 519, 438,
	405, 359, 467, 496, 306, 291, 292, 335, 437, 325,
	277, 530, 1047, 1049, 1045, 1041, 1042, 1007, 1008, 1048,
	1044, 326, 1043, 0, 538, 1052, 1063, 1060, 1065, 1051,
	1064, 1058, 861, 585, 1055, 1054, 1068, 1061, 1062, 531,
	1067, 1006, 1059, 1057, 1056, 1053, 0, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 237, 0, 238,
	239, 240, 242, 243, 244, 739, 245, 246, 247, 250,
	251, 252, 254, 614, 255, 256, 257, 258, 259, 260,
	1031, 1009, 262, 263, 264, 265, 266, 268, 270, 271,
	272, 273, 274, 276, 278, 1020, 1010, 1015, 1021, 1011,
	1012, 1016, 282, 283, 284, 285, 286, 287, 0, 288,
	289, 293, 295, 296, 297, 298, 299, 300, 303, 0,
	305, 307, 0, 308, 311, 0, 312, 313, 314, 315,
	316, 317, 318, 319, 1023, 320, 0, 321, 322, 324,
	0, 327, 328, 329, 330, 331, 0, 332, 1032, 980,
	333, 334, 336, 337, 338, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 349, 350, 351, 0, 352, 353,
	354, 356, 0, 357, 358, 361, 362, 363, 364, 0,
	366, 1033, 0, 367, 368, 369, 1013, 1014, 370, 371,
	372, 373, 374, 375, 378, 1046, 380, 381, 382, 383,
	384, 385, 386, 616, 388, 389, 390, 391, 392, 393,
	394, 578, 1024, 395, 397, 398, 1030, 582, 1025, 757,
	413, 414, 415, 416, 417, 418, 419, 421, 0, 423,
	424, 425, 1026, 426, 427, 428, 429, 0, 430, 431,
	432, 433, 434, 436, 439, 440, 441, 442, 0, 445,
	446, 447, 448, 449, 450, 451, 453, 454, 455, 457,
	458, 459, 617, 460, 461, 462, 463, 983, 465, 466,
	618, 468, 469, 471, 472, 473, 474, 475, 476, 627,
	1017, 478, 588, 479, 480, 481, 482, 483, 0, 485,
	486, 487, 488, 489, 490, 493, 494, 495, 497, 498,
	1027, 499, 500, 1018, 502, 503, 760, 505, 506, 507,
	508, 509, 0, 628, 510, 1028, 511, 1029, 512, 513,
	514, 515, 516, 4810, 518, 520, 0, 967, 522, 523,
	524, 526, 527, 528, 529, 532, 533, 534, 535, 536,
	0, 537, 539, 541, 619, 596, 1034, 1035, 1038, 1036,
	1037, 1039, 1040, 1050, 542, 543, 559, 410, 404, 360,
	402, 403, 407, 408, 411, 0, 0, 0, 1022, 0,
	0, 0, 965, 0, 797, 0, 986, 913, 0, 991,
	992, 981, 1000, 971, 0, 0, 0, 972, 0, 0,
	961, 962, 236, 0, 253, 742, 0, 302, 339, 976,
	0, 964, 399, 0, 452, 456, 0, 545, 996, 0,
	968, 0, 310, 989, 747, 0, 753, 990, 759, 988,
	521, 0, 749, 750, 755, 241, 1066, 544, 615, 0,
	0, 0, 982, 0, 0, 0, 0, 0, 0, 0,
	249, 0, 0, 0, 0, 751, 748, 752, 758, 746,
	756, 743, 754, 0, 443, 377, 594, 470, 248, 294,
	281, 323, 365, 477, 0, 0, 355, 525, 290, 379,
	0, 269, 412, 1019, 501, 376, 0, 484, 504, 0,
	396, 275, 435, 491, 492, 740, 745, 0, 761, 0,
	279, 280, 401, 261, 409, 606, 572, 464, 422, 420,
	0, 387, 444, 601, 977, 0, 309, 0, 304, 400,
	540, 267, 519, 438, 405, 359, 467, 496, 306, 291,
	292, 335, 437, 325, 277, 530, 1047, 1049, 1045, 1041,
	1042, 1007, 1008, 1048, 1044, 326, 1043, 0, 538, 1052,
	1063, 1060, 1065, 1051, 1064, 1058, 861, 585, 1055, 1054,
	1068, 1061, 1062, 531, 1067, 1006, 1059, 1057, 1056, 1053,
	0, 226, 227, 228, 229, 230, 231, 232, 233, 234,
	235, 237, 0, 238, 239, 240, 242, 243, 244, 739,
	245, 246, 247, 250, 251, 252, 254, 614, 255, 256,
	257, 258, 259, 260, 1031, 1009, 262, 263, 264, 265,
	266, 268, 270, 271, 272, 273, 274, 276, 4620, 1020,
	1010, 1015, 1021, 1011, 1012, 1016, 282, 283, 284, 285,
	286, 287, 0, 288, 289, 293, 295, 296, 297, 298,
	299, 300, 303, 0, 305, 307, 0, 308, 311, 0,
	312, 313, 314, 315, 316, 317, 318, 319, 1023, 320,
	0, 321, 322, 324, 0, 327, 328, 329, 330, 331,
	0, 332, 1032, 4622, 333, 334, 336, 337, 338, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
	351, 0, 352, 353, 354, 356, 0, 357, 358, 361,
	362, 363, 364, 0, 366, 1033, 0, 367, 368, 369,
	1013, 1014, 370, 371, 372, 373, 374, 375, 378, 1046,
	380, 381, 382, 383, 384, 385, 386, 616, 388, 389,
	390, 391, 392, 393, 394, 578, 1024, 395, 397, 398,
	1030, 582, 1025, 757, 413, 414, 415, 416, 417, 418,
	419, 421, 0, 423, 424, 425, 1026, 426, 427, 428,
	429, 0, 430, 431, 432, 433, 434, 436, 439, 440,
	441, 442, 0, 445, 446, 447, 448, 449, 450, 451,
	453, 454, 455, 457, 458, 459, 617, 460, 4621, 462,
	463, 983, 465, 466, 618, 468, 469, 471, 472, 473,
	474, 475, 476, 627, 1017, 478, 588, 479, 480, 481,
	482, 483, 0, 485, 486, 487, 488, 489, 490, 493,
	494, 495, 497, 498, 1027, 499, 500, 1018, 502, 503,
	760, 505, 506, 507, 508, 509, 0, 628, 510, 1028,
	511, 1029, 512, 513, 514, 515, 516, 517, 518, 520,
	0, 967, 522, 523, 524, 526, 527, 528, 529, 532,
	533, 534, 535, 536, 0, 537, 539, 541, 619, 596,
	1034, 1035, 1038, 1036, 1037, 1039, 1040, 1050, 542, 543,
	559, 410, 404, 360, 402, 403, 407, 408, 411, 0,
	0, 0, 1022, 0, 0, 0, 965, 0, 797, 0,
	986, 913, 0, 991, 992, 981, 1000, 971, 0, 0,
	0, 4619, 0, 0, 961, 962, 236, 0, 253, 742,
	0, 302, 339, 976, 0, 964, 399, 0, 452, 456,
	0, 4809, 996, 0, 968, 0, 310, 989, 747, 0,
	753, 990, 759, 988, 521, 0, 749, 750, 755, 241,
	1066, 544, 615, 0, 0, 0, 982, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 751,
	748, 752, 758, 746, 756, 743, 754, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 1019, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 740,
	745, 0, 761, 0, 4811, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 977, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	1047, 1049, 1045, 1041, 1042, 1007, 1008, 1048, 1044, 326,
	1043, 0, 538, 1052, 1063, 1060, 1065, 1051, 1064, 1058,
	861, 585, 1055, 1054, 1068, 1061, 1062, 531, 1067, 1006,
	1059, 1057, 1056, 1053, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 739, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 1031, 1009,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 1020, 1010, 1015, 1021, 1011, 1012, 1016,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 1023, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 1032, 980, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 1033,
	0, 367, 368, 369, 1013, 1014, 370, 371, 372, 373,
	374, 375, 378, 1046, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	1024, 395, 397, 398, 1030, 582, 1025, 757, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	1026, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 983, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 1017, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 1027, 499,
	500, 1018, 502, 503, 760, 505, 506, 507, 508, 509,
	0, 628, 510, 1028, 511, 1029, 512, 513, 514, 515,
	516, 4810, 518, 520, 0, 967, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 1034, 1035, 1038, 1036, 1037, 1039,
	1040, 1050, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 0, 0, 0, 1022, 0, 0, 0,
	965, 0, 797, 0, 986, 913, 0, 991, 992, 981,
	1000, 971, 0, 0, 0, 972, 0, 0, 961, 962,
	236, 0, 253, 742, 0, 302, 339, 976, 0, 964,
	399, 0, 452, 456, 0, 545, 996, 0, 968, 0,
	310, 989, 747, 0, 753, 990, 759, 988, 521, 0,
	749, 750, 755, 241, 1066, 544, 615, 0, 0, 0,
	982, 0, 0, 0, 0, 0, 0, 0, 249, 0,
	0, 0, 0, 751, 748, 752, 758, 746, 756, 743,
	754, 0, 443, 377, 594, 470, 248, 294, 281, 323,
	365, 477, 0, 0, 355, 525, 290, 379, 0, 269,
	412, 1019, 501, 376, 0, 484, 504, 0, 396, 275,
	435, 491, 492, 740, 745, 0, 761, 0, 279, 280,
	401, 261, 409, 606, 572, 464, 422, 420, 0, 387,
	444, 601, 977, 0, 309, 0, 304, 400, 540, 267,
	519, 438, 405, 359, 467, 496, 306, 291, 292, 335,
	437, 325, 277, 530, 1047, 1049, 1045, 1041, 1042, 1007,
	1008, 1048, 1044, 326, 1043, 0, 538, 1052, 1063, 1060,
	1065, 1051, 1064, 1058, 861, 585, 1055, 1054, 1068, 1061,
	1062, 531, 1067, 1006, 1059, 1057, 1056, 1053, 0, 226,
	227, 228, 229, 230, 231, 232, 233, 234, 235, 237,
	0, 238, 239, 240, 242, 243, 244, 739, 245, 246,
	247, 250, 251, 252, 254, 614, 255, 256, 257, 258,
	259, 260, 1031, 1009, 262, 263, 264, 265, 266, 268,
	270, 271, 272, 273, 274, 276, 278, 1020, 1010, 1015,
	1021, 1011, 1012, 1016, 282, 283, 284, 285, 286, 287,
	0, 288, 289, 293, 295, 296, 297, 298, 299, 300,
	303, 0, 305, 307, 0, 308, 311, 0, 312, 313,
	314, 315, 316, 317, 318, 319, 1023, 320, 0, 321,
	322, 324, 0, 327, 328, 329, 330, 331, 0, 332,
	1032, 980, 333, 334, 336, 337, 338, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 349, 350, 351, 0,
	352, 353, 354, 356, 0, 357, 358, 361, 362, 363,
	364, 0, 366, 1033, 0, 367, 368, 369, 1013, 1014,
	370, 371, 372, 373, 374, 375, 378, 1046, 380, 381,
	382, 383, 384, 385, 386, 616, 388, 389, 390, 391,
	392, 393, 4156, 578, 1024, 395, 397, 398, 1030, 582,
	1025, 757, 413, 414, 415, 416, 417, 418, 419, 421,
	0, 423, 424, 425, 1026, 426, 427, 428, 429, 0,
	430, 431, 432, 433, 434, 436, 439, 440, 441, 442,
	0, 445, 446, 447, 448, 449, 450, 451, 453, 454,
	455, 457, 458, 459, 617, 460, 461, 462, 463, 983,
	465, 466, 618, 468, 469, 471, 472, 473, 474, 475,
	476, 627, 1017, 478, 588, 479, 480, 481, 482, 483,
	0, 485, 486, 487, 488, 489, 490, 493, 494, 495,
	497, 498, 1027, 499, 500, 1018, 502, 503, 760, 505,
	506, 507, 508, 509, 0, 628, 510, 1028, 511, 1029,
	512, 513, 514, 515, 516, 517, 518, 520, 0, 967,
	522, 523, 524, 526, 527, 528, 529, 532, 533, 534,
	535, 536, 0, 537, 539, 541, 619, 596, 1034, 1035,
	1038, 1036, 1037, 1039, 1040, 1050, 542, 543, 559, 410,
	404, 360, 402, 403, 407, 408, 411, 0, 0, 0,
	1022, 0, 0, 0, 965, 0, 797, 0, 986, 913,
	0, 991, 992, 981, 1000, 971, 0, 0, 0, 972,
	0, 0, 961, 962, 236, 0, 253, 742, 0, 302,
	339, 976, 0, 964, 399, 0, 452, 456, 0, 545,
	996, 0, 968, 0, 310, 989, 747, 0, 753, 990,
	759, 988, 521, 0, 749, 750, 755, 241, 1066, 544,
	615, 0, 0, 0, 982, 0, 0, 0, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 751, 748, 752,
	758, 746, 756, 743, 754, 0, 443, 377, 594, 470,
	248, 294, 281, 323, 365, 477, 0, 0, 355, 525,
	290, 379, 0, 269, 412, 1019, 501, 376, 0, 484,
	504, 0, 396, 275, 435, 491, 492, 740, 745, 0,
	761, 0, 279, 280, 401, 261, 409, 606, 572, 464,
	422, 420, 0, 387, 444, 601, 977, 0, 309, 0,
	304, 400, 540, 267, 519, 438, 405, 359, 467, 496,
	306, 291, 292, 335, 437, 325, 277, 530, 1047, 1049,
	1045, 1041, 1042, 1007, 1008, 1048, 1044, 326, 1043, 0,
	538, 1052, 1063, 1060, 1065, 1051, 1064, 1058, 861, 585,
	1055, 1054, 1068, 1061, 1062, 531, 1067, 1006, 1059, 1057,
	1056, 1053, 0, 226, 227, 228, 229, 230, 231, 232,
	233, 234, 235, 237, 0, 238, 239, 240, 242, 243,
	244, 739, 245, 246, 247, 250, 251, 252, 254, 614,
	255, 256, 257, 258, 259, 260, 1031, 1009, 262, 263,
	264, 265, 266, 268, 270, 271, 272, 273, 274, 276,
	278, 1020, 1010, 1015, 1021, 1011, 1012, 1016, 282, 283,
	284, 285, 286, 287, 0, 288, 289, 293, 295, 296,
	297, 298, 299, 300, 303, 0, 305, 307, 0, 308,
	311, 0, 312, 313, 314, 315, 316, 317, 318, 319,
	1023, 320, 0, 321, 322, 324, 0, 327, 328, 329,
	330, 331, 0, 332, 1032, 980, 333, 334, 336, 337,
	338, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	349, 350, 351, 0, 352, 353, 354, 356, 0, 357,
	358, 361, 362, 363, 364, 0, 366, 1033, 0, 367,
	368, 369, 1013, 1014, 370, 371, 372, 373, 374, 375,
	378, 1046, 380, 381, 382, 383, 384, 385, 386, 616,
	388, 389, 390, 391, 392, 393, 394, 578, 1024, 395,
	397, 398, 1030, 582, 1025, 757, 413, 414, 415, 416,
	417, 418, 419, 421, 0, 423, 424, 425, 1026, 426,
	427, 428, 429, 0, 430, 431, 432, 433, 434, 436,
	439, 440, 441, 442, 0, 445, 446, 447, 448, 449,
	450, 451, 453, 454, 455, 457, 458, 459, 617, 460,
	461, 462, 463, 983, 465, 466, 618, 468, 469, 471,
	472, 473, 474, 475, 476, 627, 1017, 478, 588, 479,
	480, 481, 482, 483, 0, 485, 486, 487, 488, 489,
	490, 493, 494, 495, 497, 498, 1027, 499, 500, 1018,
	502, 503, 760, 505, 506, 507, 508, 509, 0, 628,
	510, 1028, 511, 1029, 512, 513, 514, 515, 516, 517,
	518, 520, 0, 967, 522, 523, 524, 526, 527, 528,
	529, 532, 533, 534, 535, 536, 0, 537, 539, 541,
	619, 4143, 1034, 1035, 1038, 1036, 1037, 1039, 1040, 1050,
	542, 543, 559, 410, 404, 360, 402, 403, 407, 408,
	411, 0, 0, 0, 1022, 0, 0, 0, 965, 0,
	797, 0, 986, 913, 0, 991, 992, 981, 1000, 971,
	0, 0, 0, 972, 0, 0, 961, 962, 236, 0,
	253, 742, 0, 302, 339, 976, 0, 964, 399, 0,
	452, 456, 0, 545, 996, 0, 968, 0, 310, 989,
	747, 0, 753, 990, 759, 988, 521, 0, 749, 750,
	755, 241, 1066, 544, 615, 0, 0, 0, 982, 0,
	0, 0, 0, 0, 0, 0, 249, 0, 0, 0,
	0, 751, 748, 752, 758, 746, 756, 743, 754, 0,
	443, 377, 594, 470, 248, 294, 281, 323, 365, 477,
	0, 0, 355, 525, 290, 379, 0, 269, 412, 1019,
	501, 376, 0, 484, 504, 0, 396, 275, 435, 491,
	492, 740, 745, 0, 761, 0, 3325, 280, 401, 261,
	409, 606, 572, 464, 422, 420, 0, 387, 444, 601,
	977, 0, 309, 0, 304, 400, 540, 267, 519, 438,
	405, 359, 467, 496, 306, 291, 292, 335, 437, 325,
	277, 530, 1047, 1049, 1045, 1041, 1042, 1007, 1008, 1048,
	1044, 326, 1043, 0, 538, 1052, 1063, 1060, 1065, 1051,
	1064, 1058, 861, 585, 1055, 1054, 1068, 1061, 1062, 531,
	1067, 1006, 1059, 1057, 1056, 1053, 0, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 237, 0, 238,
	239, 240, 242, 243, 244, 739, 245, 246, 247, 250,
	251, 252, 254, 614, 255, 256, 257, 258, 259, 260,
	1031, 1009, 262, 263, 264, 265, 266, 268, 270, 271,
	272, 273, 274, 276, 278, 1020, 1010, 1015, 1021, 1011,
	1012, 1016, 282, 283, 284, 285, 286, 287, 0, 288,
	289, 293, 295, 296, 297, 298, 299, 300, 303, 0,
	305, 307, 0, 308, 311, 0, 312, 313, 314, 315,
	316, 317, 318, 319, 1023, 320, 0, 321, 322, 324,
	0, 327, 328, 329, 330, 331, 0, 332, 1032, 980,
	333, 334, 336, 337, 338, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 349, 350, 351, 0, 352, 353,
	354, 356, 0, 357, 358, 361, 362, 363, 364, 0,
	366, 1033, 0, 367, 368, 369, 1013, 1014, 370, 371,
	372, 373, 374, 375, 378, 1046, 380, 381, 382, 383,
	384, 385, 386, 616, 388, 389, 390, 391, 392, 393,
	394, 578, 1024, 395, 397, 398, 1030, 582, 1025, 757,
	413, 414, 415, 416, 417, 418, 419, 421, 0, 423,
	424, 425, 1026, 426, 427, 428, 429, 0, 430, 431,
	432, 433, 434, 436, 439, 440, 441, 442, 0, 445,
	446, 447, 448, 449, 450, 451, 453, 454, 455, 457,
	458, 459, 617, 460, 461, 462, 463, 983, 465, 466,
	618, 468, 469, 471, 472, 473, 474, 475, 476, 627,
	1017, 478, 588, 479, 480, 481, 482, 483, 0, 485,
	486, 487, 488, 489, 490, 493, 494, 495, 497, 498,
	1027, 499, 500, 1018, 502, 503, 760, 505, 506, 507,
	508, 509, 0, 628, 510, 1028, 511, 1029, 512, 513,
	514, 515, 516, 517, 518, 520, 0, 967, 522, 523,
	524, 526, 527, 528, 529, 532, 533, 534, 535, 536,
	0, 537, 539, 541, 619, 596, 1034, 1035, 1038, 1036,
	1037, 1039, 1040, 1050, 542, 543, 559, 410, 404, 360,
	402, 403, 407, 408, 411, 0, 0, 0, 1022, 0,
	0, 0, 965, 0, 797, 0, 2503, 913, 0, 991,
	992, 981, 1000, 971, 0, 0, 0, 972, 0, 0,
	961, 962, 236, 0, 253, 742, 0, 302, 339, 976,
	0, 964, 399, 0, 452, 456, 0, 545, 996, 0,
	968, 0, 310, 989, 747, 0, 753, 990, 759, 988,
	521, 0, 749, 750, 755, 241, 1066, 544, 615, 0,
	0, 0, 982, 0, 0, 0, 0, 0, 0, 0,
	249, 0, 0, 0, 0, 751, 748, 752, 758, 746,
	756, 743, 754, 0, 443, 377, 594, 470, 248, 294,
	281, 323, 365, 477, 0, 0, 355, 525, 290, 379,
	0, 269, 412, 1019, 501, 376, 0, 484, 504, 0,
	396, 275, 435, 491, 492, 740, 745, 0, 761, 0,
	279, 280, 401, 261, 409, 606, 572, 464, 422, 420,
	0, 387, 444, 601, 977, 0, 309, 0, 304, 400,
	540, 267, 519, 438, 405, 359, 467, 496, 306, 291,
	292, 335, 437, 325, 277, 530, 1047, 1049, 1045, 1041,
	1042, 1007, 1008, 1048, 1044, 326, 1043, 0, 538, 1052,
	1063, 1060, 1065, 1051, 1064, 1058, 861, 585, 1055, 1054,
	1068, 1061, 1062, 531, 1067, 1006, 1059, 1057, 1056, 1053,
	0, 226, 227, 228, 229, 230, 231, 232, 233, 234,
	235, 237, 0, 238, 239, 240, 242, 243, 244, 739,
	245, 246, 247, 250, 251, 252, 254, 614, 255, 256,
	257, 258, 259, 260, 1031, 1009, 262, 263, 264, 265,
	266, 268, 270, 271, 272, 273, 274, 276, 278, 1020,
	1010, 1015, 1021, 1011, 1012, 1016, 282, 283, 284, 285,
	286, 287, 0, 288, 289, 293, 295, 296, 297, 298,
	299, 300, 303, 0, 305, 307, 0, 308, 311, 0,
	312, 313, 314, 315, 316, 317, 318, 319, 1023, 320,
	0, 321, 322, 324, 0, 327, 328, 329, 330, 331,
	0, 332, 1032, 980, 333, 334, 336, 337, 338, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
	351, 0, 352, 353, 354, 356, 0, 357, 358, 361,
	362, 363, 364, 0, 366, 1033, 0, 367, 368, 369,
	1013, 1014, 370, 371, 372, 373, 374, 375, 378, 1046,
	380, 381, 382, 383, 384, 385, 386, 616, 388, 389,
	390, 391, 392, 393, 394, 578, 1024, 395, 397, 398,
	1030, 582, 1025, 757, 413, 414, 415, 416, 417, 418,
	419, 421, 0, 423, 424, 425, 1026, 426, 427, 428,
	429, 0, 430, 431, 432, 433, 434, 436, 439, 440,
	441, 442, 0, 445, 446, 447, 448, 449, 450, 451,
	453, 454, 455, 457, 458, 459, 617, 460, 461, 462,
	463, 983, 465, 466, 618, 468, 469, 471, 472, 473,
	474, 475, 476, 627, 1017, 478, 588, 479, 480, 481,
	482, 483, 0, 485, 486, 487, 488, 489, 490, 493,
	494, 495, 497, 498, 1027, 499, 500, 1018, 502, 503,
	760, 505, 506, 507, 508, 509, 0, 628, 510, 1028,
	511, 1029, 512, 513, 514, 515, 516, 517, 518, 520,
	0, 967, 522, 523, 524, 526, 527, 528, 529, 532,
	533, 534, 535, 536, 0, 537, 539, 541, 619, 596,
	1034, 1035, 1038, 1036, 1037, 1039, 1040, 1050, 542, 543,
	559, 410, 404, 360, 402, 403, 407, 408, 411, 0,
	0, 0, 1022, 0, 0, 0, 965, 0, 797, 0,
	986, 913, 0, 991, 992, 981, 1000, 971, 0, 0,
	0, 972, 0, 0, 961, 962, 236, 0, 253, 742,
	0, 302, 339, 976, 0, 964, 399, 0, 452, 456,
	0, 545, 996, 0, 968, 0, 310, 989, 747, 0,
	753, 990, 759, 988, 521, 0, 749, 750, 755, 241,
	1066, 544, 615, 0, 0, 0, 982, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 751,
	748, 752, 758, 746, 756, 743, 754, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 1019, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 740,
	745, 0, 761, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 977, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	1047, 1049, 1045, 1041, 1042, 1007, 1008, 1048, 1044, 326,
	1043, 0, 538, 1052, 1063, 1060, 1065, 1051, 1064, 1058,
	861, 585, 1055, 1054, 1068, 1061, 1062, 531, 1067, 1006,
	1059, 1057, 1056, 1053, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 739, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 1031, 1009,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 1020, 1010, 1015, 1021, 1011, 1012, 1016,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 1023, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 1032, 980, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 1033,
	0, 367, 368, 369, 1013, 1014, 370, 371, 372, 373,
	374, 375, 378, 1046, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	1024, 395, 397, 398, 1030, 582, 1025, 757, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	1026, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 983, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 1017, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 1027, 499,
	500, 1018, 502, 503, 760, 505, 506, 507, 508, 509,
	0, 628, 510, 1028, 511, 1029, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 967, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 1034, 1035, 1038, 1036, 1037, 1039,
	1040, 1050, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 0, 0, 0, 1022, 0, 0, 0,
	965, 0, 797, 0, 986, 913, 0, 991, 992, 981,
	1000, 971, 0, 0, 0, 972, 0, 0, 1445, 1446,
	236, 0, 253, 742, 0, 302, 339, 976, 0, 0,
	399, 0, 452, 456, 0, 545, 996, 0, 4443, 0,
	310, 989, 747, 0, 753, 990, 759, 988, 521, 0,
	749, 750, 755, 241, 1066, 544, 615, 0, 0, 0,
	982, 0, 0, 0, 0, 0, 0, 0, 249, 0,
	0, 0, 0, 751, 748, 752, 758, 746, 756, 743,
	754, 0, 443, 377, 594, 470, 248, 294, 281, 323,
	365, 477, 0, 0, 355, 525, 290, 379, 0, 269,
	412, 1019, 501, 376, 0, 484, 504, 0, 396, 275,
	435, 491, 492, 740, 745, 0, 761, 0, 279, 280,
	401, 261, 409, 606, 572, 464, 422, 420, 0, 387,
	444, 601, 977, 0, 309, 0, 304, 400, 540, 267,
	519, 438, 405, 359, 467, 496, 306, 291, 292, 335,
	437, 325, 277, 530, 1047, 1049, 1045, 1041, 1042, 1007,
	1008, 1048, 1044, 326, 1043, 0, 538, 1052, 1063, 1060,
	1065, 1051, 1064, 1058, 861, 585, 1055, 1054, 1068, 1061,
	1062, 531, 1067, 1006, 1059, 1057, 1056, 1053, 0, 226,
	227, 228, 229, 230, 231, 232, 233, 234, 235, 237,
	0, 238, 239, 240, 242, 243, 244, 739, 245, 246,
	247, 250, 251, 252, 254, 614, 255, 256, 257, 258,
	259, 260, 1031, 1009, 262, 263, 264, 265, 266, 268,
	270, 271, 272, 273, 274, 276, 278, 1020, 1010, 1015,
	1021, 1011, 1012, 1016, 282, 283, 284, 285, 286, 287,
	0, 288, 289, 293, 295, 296, 297, 298, 299, 300,
	303, 0, 305, 307, 0, 308, 311, 0, 312, 313,
	314, 315, 316, 317, 318, 319, 1023, 320, 0, 321,
	322, 324, 0, 327, 328, 329, 330, 331, 0, 332,
	1032, 980, 333, 334, 336, 337, 338, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 349, 350, 351, 0,
	352, 353, 354, 356, 0, 357, 358, 361, 362, 363,
	364, 0, 366, 1033, 0, 367, 368, 369, 1013, 1014,
	370, 371, 372, 373, 374, 375, 378, 1046, 380, 381,
	382, 383, 384, 385, 386, 616, 388, 389, 390, 391,
	392, 393, 394, 578, 1024, 395, 397, 398, 1030, 582,
	1025, 757, 413, 414, 415, 416, 417, 418, 419, 421,
	0, 423, 424, 425, 1026, 426, 427, 428, 429, 0,
	430, 431, 432, 433, 434, 436, 439, 440, 441, 442,
	0, 445, 446, 447, 448, 449, 450, 451, 453, 454,
	455, 457, 458, 459, 617, 460, 461, 462, 463, 2658,
	465, 466, 618, 468, 469, 471, 472, 473, 474, 475,
	476, 627, 1017, 478, 588, 479, 480, 481, 482, 483,
	0, 485, 486, 487, 488, 489, 490, 493, 494, 495,
	497, 498, 1027, 499, 500, 1018, 502, 503, 760, 505,
	506, 507, 508, 509, 0, 628, 510, 1028, 511, 1029,
	512, 513, 514, 515, 516, 517, 518, 520, 0, 0,
	522, 523, 524, 526, 527, 528, 529, 532, 533, 534,
	535, 536, 0, 537, 539, 541, 619, 596, 1034, 1035,
	1038, 1036, 1037, 1039, 1040, 1050, 542, 543, 559, 410,
	404, 360, 402, 403, 407, 408, 411, 0, 0, 0,
	1022, 0, 0, 0, 0, 0, 797, 0, 986, 913,
	0, 991, 992, 981, 1000, 971, 0, 0, 0, 2497,
	0, 0, 2655, 2656, 236, 0, 253, 742, 0, 302,
	339, 976, 0, 0, 399, 0, 452, 456, 0, 545,
	996, 0, 0, 0, 310, 989, 747, 0, 753, 990,
	759, 988, 521, 0, 749, 750, 755, 241, 1066, 544,
	615, 0, 0, 0, 982, 0, 0, 0, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 751, 748, 752,
	758, 746, 756, 743, 754, 0, 443, 377, 594, 470,
	248, 294, 281, 323, 365, 477, 0, 0, 355, 525,
	290, 379, 0, 269, 412, 1019, 501, 376, 0, 484,
	504, 0, 396, 275, 435, 491, 492, 740, 745, 0,
	761, 0, 279, 280, 401, 261, 409, 606, 572, 464,
	422, 420, 0, 387, 444, 601, 977, 0, 309, 0,
	304, 400, 540, 267, 519, 438, 405, 359, 467, 496,
	306, 291, 292, 335, 437, 325, 277, 530, 1047, 1049,
	1045, 1041, 1042, 1007, 1008, 1048, 1044, 326, 1043, 0,
	538, 1052, 1063, 1060, 1065, 1051, 1064, 1058, 861, 585,
	1055, 1054, 1068, 1061, 1062, 531, 1067, 1006, 1059, 1057,
	1056, 1053, 0, 226, 227, 228, 229, 230, 231, 232,
	233, 234, 235, 237, 0, 238, 239, 240, 242, 243,
	244, 739, 245, 246, 247, 250, 251, 252, 254, 614,
	255, 256, 257, 258, 259, 260, 1031, 1009, 262, 263,
	264, 265, 266, 268, 270, 271, 272, 273, 274, 276,
	278, 1020, 1010, 1015, 1021, 1011, 1012, 1016, 282, 283,
	284, 285, 286, 287, 0, 288, 289, 293, 295, 296,
	297, 298, 299, 300, 303, 0, 305, 307, 0, 308,
	311, 0, 312, 313, 314, 315, 316, 317, 318, 319,
	1023, 320, 0, 321, 322, 324, 0, 327, 328, 329,
	330, 331, 0, 332, 1032, 980, 333, 334, 336, 337,
	338, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	349, 350, 351, 0, 352, 353, 354, 356, 0, 357,
	358, 361, 362, 363, 364, 0, 366, 1033, 0, 367,
	368, 369, 1013, 1014, 370, 371, 372, 373, 374, 375,
	378, 1046, 380, 381, 382, 383, 384, 385, 386, 616,
	388, 389, 390, 391, 392, 393, 394, 578, 1024, 395,
	397, 398, 1030, 582, 1025, 757, 413, 414, 415, 416,
	417, 418, 419, 421, 0, 423, 424, 425, 1026, 426,
	427, 428, 429, 0, 430, 431, 432, 433, 434, 436,
	439, 440, 441, 442, 0, 445, 446, 447, 448, 449,
	450, 451, 453, 454, 455, 457, 458, 459, 617, 460,
	461, 462, 463, 2658, 465, 466, 618, 468, 469, 471,
	472, 473, 474, 475, 476, 627, 1017, 478, 588, 479,
	480, 481, 482, 483, 0, 485, 486, 487, 488, 489,
	490, 493, 494, 495, 497, 498, 1027, 499, 500, 1018,
	502, 503, 760, 505, 506, 507, 508, 509, 0, 628,
	510, 1028, 511, 1029, 512, 513, 514, 515, 516, 517,
	518, 520, 0, 0, 522, 523, 524, 526, 527, 528,
	529, 532, 533, 534, 535, 536, 0, 537, 539, 541,
	619, 596, 1034, 1035, 1038, 1036, 1037, 1039, 1040, 1050,
	542, 543, 559, 410, 404, 360, 402, 403, 407, 408,
	411, 0, 0, 0, 1022, 0, 0, 0, 0, 0,
	797, 0, 986, 913, 0, 991, 992, 0, 1000, 971,
	0, 0, 0, 2497, 0, 0, 2655, 2656, 236, 0,
	253, 742, 0, 302, 339, 976, 0, 0, 399, 0,
	452, 456, 0, 545, 996, 0, 0, 0, 310, 989,
	747, 0, 753, 990, 759, 988, 521, 0, 749, 750,
	755, 241, 1066, 544, 615, 0, 0, 0, 406, 0,
	0, 0, 0, 0, 0, 0, 249, 0, 0, 0,
	0, 751, 748, 752, 758, 746, 756, 743, 754, 0,
	443, 377, 594, 470, 248, 294, 281, 323, 365, 477,
	0, 0, 355, 525, 290, 379, 0, 269, 412, 1019,
	501, 376, 0, 484, 504, 0, 396, 275, 435, 491,
	492, 740, 745, 0, 761, 0, 279, 280, 401, 261,
	409, 606, 572, 2496, 422, 420, 0, 387, 444, 601,
	977, 0, 309, 0, 304, 400, 540, 267, 519, 438,
	405, 359, 467, 496, 306, 291, 292, 335, 437, 325,
	277, 530, 1047, 1049, 1045, 1041, 1042, 1007, 1008, 1048,
	1044, 326, 1043, 0, 538, 1052, 1063, 1060, 1065, 1051,
	1064, 1058, 861, 585, 1055, 1054, 1068, 1061, 1062, 531,
	1067, 1006, 1059, 1057, 1056, 1053, 0, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 237, 0, 238,
	239, 240, 242, 243, 244, 739, 245, 246, 247, 250,
	251, 252, 254, 614, 255, 256, 257, 258, 259, 260,
	1031, 1009, 262, 263, 264, 265, 266, 268, 270, 271,
	272, 273, 274, 276, 278, 1020, 1010, 1015, 1021, 1011,
	1012, 1016, 282, 283, 284, 285, 286, 287, 0, 288,
	289, 293, 295, 296, 297, 298, 299, 300, 303, 0,
	305, 307, 0, 308, 311, 0, 312, 313, 314, 315,
	316, 317, 318, 319, 1023, 320, 0, 321, 322, 324,
	0, 327, 328, 329, 330, 331, 0, 332, 1032, 980,
	333, 334, 336, 337, 338, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 349, 350, 351, 0, 352, 353,
	354, 356, 0, 357, 358, 361, 362, 363, 364, 0,
	366, 1033, 0, 367, 368, 369, 1013, 1014, 370, 371,
	372, 373, 374, 375, 378, 1046, 380, 381, 382, 383,
	384, 385, 386, 616, 388, 389, 390, 391, 392, 393,
	394, 578, 1024, 395, 397, 398, 1030, 582, 1025, 757,
	413, 414, 415, 416, 417, 418, 419, 421, 0, 423,
	424, 425, 1026, 426, 427, 428, 429, 0, 430, 431,
	432, 433, 434, 436, 439, 440, 441, 442, 0, 445,
	446, 447, 448, 449, 450, 451, 453, 454, 455, 457,
	458, 459, 617, 460, 461, 462, 463, 2495, 465, 466,
	618, 468, 469, 471, 472, 473, 474, 475, 476, 627,
	1017, 478, 588, 479, 480, 481, 482, 483, 0, 485,
	486, 487, 488, 489, 490, 493, 494, 495, 497, 498,
	1027, 499, 500, 1018, 502, 503, 760, 505, 506, 507,
	508, 509, 0, 628, 510, 1028, 511, 1029, 512, 513,
	514, 515, 516, 517, 518, 520, 0, 0, 522, 523,
	524, 526, 527, 528, 529, 532, 533, 534, 535, 536,
	0, 537, 539, 541, 619, 596, 1034, 1035, 1038, 1036,
	1037, 1039, 1040, 1050, 542, 543, 559, 410, 404, 360,
	402, 403, 407, 408, 411, 0, 0, 0, 1022, 0,
	0, 0, 0, 0, 797, 0, 986, 913, 0, 991,
	992, 981, 1000, 971, 0, 0, 0, 2497, 0, 0,
	2493, 2494, 236, 0, 253, 742, 0, 302, 339, 976,
	0, 964, 399, 0, 452, 456, 0, 0, 996, 0,
	968, 0, 310, 989, 0, 0, 0, 990, 0, 988,
	521, 0, 0, 0, 0, 241, 1066, 544, 615, 0,
	0, 0, 982, 0, 0, 0, 0, 0, 0, 0,
	249, 0, 0, 0, 0, 751, 748, 752, 758, 746,
	756, 743, 754, 0, 443, 377, 594, 470, 248, 294,
	281, 323, 365, 477, 0, 0, 355, 525, 290, 379,
	0, 269, 412, 1019, 501, 376, 0, 484, 504, 0,
	396, 275, 435, 491, 492, 740, 745, 0, 761, 0,
	4811, 280, 401, 261, 409, 606, 572, 464, 422, 420,
	0, 387, 444, 601, 977, 0, 309, 0, 304, 400,
	540, 267, 519, 438, 405, 359, 467, 496, 306, 291,
	292, 335, 437, 325, 277, 530, 1047, 1049, 1045, 1041,
	1042, 1007, 1008, 1048, 1044, 326, 1043, 0, 538, 1052,
	1063, 1060, 1065, 1051, 1064, 1058, 861, 585, 1055, 1054,
	1068, 1061, 1062, 531, 1067, 1006, 1059, 1057, 1056, 1053,
	0, 226, 227, 228, 229, 230, 231, 232, 233, 234,
	235, 237, 0, 238, 239, 240, 242, 243, 244, 739,
	245, 246, 247, 250, 251, 252, 254, 614, 255, 256,
	257, 258, 259, 260, 1031, 1009, 262, 263, 264, 265,
	266, 268, 270, 271, 272, 273, 274, 276, 278, 1020,
	1010, 1015, 1021, 1011, 1012, 1016, 282, 283, 284, 285,
	286, 287, 0, 288, 289, 293, 295, 296, 297, 298,
	299, 300, 303, 0, 305, 307, 0, 308, 311, 0,
	312, 313, 314, 315, 316, 317, 318, 319, 1023, 320,
	0, 321, 322, 324, 0, 327, 328, 329, 330, 331,
	0, 332, 1032, 980, 333, 334, 336, 337, 338, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
	351, 0, 352, 353, 354, 356, 0, 357, 358, 361,
	362, 363, 364, 0, 366, 1033, 0, 367, 368, 369,
	1013, 1014, 370, 371, 372, 373, 374, 375, 378, 1046,
	380, 381, 382, 383, 384, 385, 386, 616, 388, 389,
	390, 391, 392, 393, 394, 578, 1024, 395, 397, 398,
	1030, 582, 1025, 757, 413, 414, 415, 416, 417, 418,
	419, 421, 0, 423, 424, 425, 1026, 426, 427, 428,
	429, 0, 430, 431, 432, 433, 434, 436, 439, 440,
	441, 442, 0, 445, 446, 447, 448, 449, 450, 451,
	453, 454, 455, 457, 458, 459, 617, 460, 461, 462,
	463, 983, 465, 466, 618, 468, 469, 471, 472, 473,
	474, 475, 476, 627, 1017, 478, 588, 479, 480, 481,
	482, 483, 0, 485, 486, 487, 488, 489, 490, 493,
	494, 495, 497, 498, 1027, 499, 500, 1018, 502, 503,
	760, 505, 506, 507, 508, 509, 0, 628, 510, 1028,
	511, 1029, 512, 513, 514, 515, 516, 4810, 518, 520,
	0, 967, 522, 523, 524, 526, 527, 528, 529, 532,
	533, 534, 535, 536, 0, 537, 539, 541, 619, 596,
	1034, 1035, 1038, 1036, 1037, 1039, 1040, 1050, 542, 543,
	559, 410, 404, 360, 402, 403, 407, 408, 411, 0,
	0, 0, 1022, 0, 0, 0, 0, 0, 797, 0,
	986, 913, 0, 991, 992, 0, 1000, 971, 0, 0,
	0, 972, 0, 0, 961, 962, 236, 0, 253, 742,
	0, 302, 339, 976, 0, 0, 399, 0, 452, 456,
	0, 545, 996, 0, 0, 0, 310, 989, 747, 0,
	753, 990, 759, 988, 521, 0, 749, 750, 755, 241,
	1066, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 751,
	748, 752, 758, 746, 756, 743, 754, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 1019, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 740,
	745, 0, 761, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 977, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	1047, 1049, 1045, 1041, 1042, 1007, 1008, 1048, 1044, 326,
	1043, 0, 538, 1052, 1063, 1060, 1065, 1051, 1064, 1058,
	861, 585, 1055, 1054, 1068, 1061, 1062, 531, 1067, 1006,
	1059, 1057, 1056, 1053, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 739, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 1031, 1009,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 1020, 1010, 1015, 1021, 1011, 1012, 1016,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 1023, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 1032, 980, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 1033,
	0, 367, 368, 369, 1013, 1014, 370, 371, 372, 373,
	374, 375, 378, 1046, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	1024, 395, 397, 398, 1030, 582, 1025, 757, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	1026, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 2658, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 1017, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 1027, 499,
	500, 1018, 502, 503, 760, 505, 506, 507, 508, 509,
	0, 628, 510, 1028, 511, 1029, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 1034, 1035, 1038, 1036, 1037, 1039,
	1040, 1050, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 0, 0, 0, 1022, 0, 797, 0,
	986, 913, 0, 991, 992, 0, 1000, 971, 0, 0,
	0, 0, 0, 0, 0, 2497, 236, 0, 253, 742,
	0, 302, 339, 976, 0, 0, 399, 0, 452, 456,
	0, 545, 996, 0, 0, 0, 310, 989, 747, 0,
	753, 990, 759, 988, 521, 0, 749, 750, 755, 241,
	1066, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 751,
	748, 752, 758, 746, 756, 743, 754, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 1019, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 740,
	745, 0, 761, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 3835, 977, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	1047, 1049, 1045, 1041, 1042, 1007, 1008, 1048, 1044, 326,
	1043, 0, 538, 1052, 1063, 1060, 1065, 1051, 1064, 1058,
	861, 585, 1055, 1054, 1068, 1061, 1062, 531, 1067, 1006,
	1059, 1057, 1056, 1053, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 739, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 1031, 1009,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 1020, 1010, 1015, 1021, 1011, 1012, 1016,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 1023, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 1032, 980, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 1033,
	0, 367, 368, 369, 1013, 1014, 370, 371, 372, 373,
	374, 375, 378, 1046, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	1024, 395, 397, 398, 1030, 582, 1025, 757, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	1026, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 2658, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 1017, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 1027, 499,
	500, 1018, 502, 503, 760, 505, 506, 507, 508, 509,
	0, 628, 510, 1028, 511, 1029, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 1034, 1035, 1038, 1036, 1037, 1039,
	1040, 1050, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 0, 0, 0, 1022, 0, 797, 0,
	986, 913, 0, 991, 992, 0, 1000, 971, 0, 0,
	0, 0, 0, 0, 0, 2497, 236, 0, 253, 742,
	0, 302, 339, 976, 0, 0, 399, 0, 452, 456,
	0, 545, 996, 0, 0, 0, 310, 989, 747, 0,
	753, 990, 759, 988, 521, 0, 749, 750, 755, 241,
	1066, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 3776, 0, 0, 0, 0, 751,
	748, 752, 758, 746, 756, 743, 754, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 1019, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 740,
	745, 0, 761, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 977, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	1047, 1049, 1045, 1041, 1042, 1007, 1008, 1048, 1044, 326,
	1043, 0, 538, 1052, 1063, 1060, 1065, 1051, 1064, 1058,
	861, 585, 1055, 1054, 1068, 1061, 1062, 531, 1067, 1006,
	1059, 1057, 1056, 1053, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 739, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 1031, 1009,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 1020, 1010, 1015, 1021, 1011, 1012, 1016,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 1023, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 1032, 980, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 1033,
	0, 367, 368, 369, 1013, 1014, 370, 371, 372, 373,
	374, 375, 378, 1046, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	1024, 395, 397, 398, 1030, 582, 1025, 757, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	1026, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 2658, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 1017, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 1027, 499,
	500, 1018, 502, 503, 760, 505, 506, 507, 508, 509,
	0, 628, 510, 1028, 511, 1029, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 1034, 1035, 1038, 1036, 1037, 1039,
	1040, 1050, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 797, 0, 0, 1022, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 742, 2497, 302, 339, 554, 0,
	0, 399, 0, 452, 456, 99, 545, 0, 0, 0,
	0, 310, 0, 747, 0, 753, 0, 759, 0, 521,
	0, 749, 750, 755, 241, 629, 544, 615, 0, 0,
	0, 406, 96, 0, 0, 653, 97, 0, 0, 249,
	0, 0, 0, 0, 751, 748, 752, 758, 746, 756,
	743, 754, 0, 443, 377, 1948, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 1019, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 740, 745, 0, 761, 0, 279,
	280, 401, 261, 409, 2746, 2747, 2745, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 1047, 1049, 1045, 1041, 1042,
	1007, 1008, 1048, 1044, 326, 2753, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 739, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 1031, 1009, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 1020, 1010,
	1015, 1021, 1011, 1012, 1016, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 1023, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 1032, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 2738, 366, 1033, 0, 367, 368, 369, 1013,
	1014, 370, 371, 372, 373, 374, 375, 378, 1046, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 1024, 395, 397, 398, 1030,
	582, 1025, 757, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 1026, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 1017, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 1027, 499, 500, 1018, 502, 503, 760,
	505, 506, 507, 508, 509, 0, 628, 510, 1028, 511,
	1029, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 1034,
	1035, 1038, 1036, 1037, 1039, 1040, 1050, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 0, 0,
	0, 1022, 0, 735, 0, 1398, 913, 100, 0, 0,
	0, 1000, 0, 0, 0, 0, 0, 0, 0, 0,
	2740, 236, 0, 253, 742, 0, 302, 339, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 4691,
	0, 310, 1395, 747, 0, 753, 0, 759, 1394, 521,
	0, 749, 750, 755, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 1396, 751, 748, 752, 758, 746, 756,
	743, 754, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 740, 745, 0, 761, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 739, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 741, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 744, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 757, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 760,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 797, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4692, 0, 0, 1399, 1400, 4690, 236, 0, 253, 742,
	0, 302, 339, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 747, 0,
	753, 0, 759, 0, 521, 0, 749, 750, 755, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	653, 0, 0, 0, 249, 0, 0, 0, 0, 751,
	748, 752, 758, 746, 756, 743, 754, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 1019, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 740,
	745, 0, 761, 0, 279, 280, 401, 261, 409, 2746,
	2747, 2745, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	1047, 1049, 1045, 1041, 1042, 1007, 1008, 1048, 1044, 326,
	2753, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 739, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 1031, 1009,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 1020, 1010, 1015, 1021, 1011, 1012, 1016,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 1023, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 1032, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 2738, 366, 1033,
	0, 367, 368, 369, 1013, 1014, 370, 371, 372, 373,
	374, 375, 378, 1046, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	1024, 395, 397, 398, 1030, 582, 1025, 757, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	1026, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 1017, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 1027, 499,
	500, 1018, 502, 503, 760, 505, 506, 507, 508, 509,
	0, 628, 510, 1028, 511, 1029, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 1034, 1035, 1038, 1036, 1037, 1039,
	1040, 1050, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 797, 0, 0, 1022, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 742, 2740, 302, 339, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 747, 0, 753, 0, 759, 0, 521,
	0, 749, 750, 755, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 751, 748, 752, 758, 746, 756,
	743, 754, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 1019, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 740, 745, 0, 761, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 1047, 1049, 1045, 1041, 1042,
	1007, 1008, 1048, 1044, 326, 2753, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 739, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 1031, 1009, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 1020, 1010,
	1015, 1021, 1011, 1012, 1016, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 1023, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 1032, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 1033, 0, 367, 368, 369, 1013,
	1014, 370, 371, 372, 373, 374, 375, 378, 1046, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 1024, 395, 397, 398, 1030,
	582, 1025, 757, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 1026, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 1017, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 1027, 499, 500, 1018, 502, 503, 760,
	505, 506, 507, 508, 509, 0, 628, 510, 1028, 511,
	1029, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 1034,
	1035, 1038, 1036, 1037, 1039, 1040, 1050, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 797, 0,
	0, 1022, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 742,
	3985, 302, 339, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 747, 0,
	753, 0, 759, 0, 521, 0, 749, 750, 755, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 751,
	748, 752, 758, 746, 756, 743, 754, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 1019, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 740,
	745, 0, 761, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	1047, 1049, 1045, 1041, 1042, 1007, 1008, 1048, 1044, 326,
	2753, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 739, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 1031, 1009,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 1020, 1010, 1015, 1021, 1011, 1012, 1016,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 1023, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 1032, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 1033,
	0, 367, 368, 369, 1013, 1014, 370, 371, 372, 373,
	374, 375, 378, 1046, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	1024, 395, 397, 398, 1030, 582, 1025, 757, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	1026, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 1017, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 1027, 499,
	500, 1018, 502, 503, 760, 505, 506, 507, 508, 509,
	0, 628, 510, 1028, 511, 1029, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 1034, 1035, 1038, 1036, 1037, 1039,
	1040, 1050, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 797, 0, 0, 1022, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 742, 4878, 302, 339, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 747, 0, 753, 0, 759, 0, 521,
	0, 749, 750, 755, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 751, 748, 752, 758, 746, 756,
	743, 754, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 1019, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 740, 745, 0, 761, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 1047, 1049, 1045, 1041, 1042,
	1007, 1008, 1048, 1044, 326, 2753, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 739, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 1031, 1009, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 1020, 1010,
	1015, 1021, 1011, 1012, 1016, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 1023, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 1032, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 1033, 0, 367, 368, 369, 1013,
	1014, 370, 371, 372, 373, 374, 375, 378, 1046, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 1024, 395, 397, 398, 1030,
	582, 1025, 757, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 1026, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 1017, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 1027, 499, 500, 1018, 502, 503, 760,
	505, 506, 507, 508, 509, 0, 628, 510, 1028, 511,
	1029, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 1034,
	1035, 1038, 1036, 1037, 1039, 1040, 1050, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 797, 0,
	0, 1022, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 742,
	2881, 302, 339, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 747, 0,
	753, 0, 759, 0, 521, 0, 749, 750, 755, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 751,
	748, 752, 758, 746, 756, 743, 754, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 1019, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 740,
	745, 0, 761, 0, 279, 280, 401, 261, 409, 2746,
	2747, 2745, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	1047, 1049, 1045, 1041, 1042, 1007, 1008, 1048, 1044, 326,
	2753, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 739, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 1031, 1009,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 1020, 1010, 1015, 1021, 1011, 1012, 1016,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 1023, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 1032, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 1033,
	0, 367, 368, 369, 1013, 1014, 370, 371, 372, 373,
	374, 375, 378, 1046, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	1024, 395, 397, 398, 1030, 582, 1025, 757, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	1026, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 1017, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 1027, 499,
	500, 1018, 502, 503, 760, 505, 506, 507, 508, 509,
	0, 628, 510, 1028, 511, 1029, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 1034, 1035, 1038, 1036, 1037, 1039,
	1040, 1050, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 0, 0, 0, 1022, 0, 735, 0,
	1398, 913, 0, 0, 0, 0, 1000, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 236, 0, 253, 742,
	0, 302, 339, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 1404, 0, 310, 1395, 747, 0,
	753, 0, 759, 1394, 521, 0, 749, 750, 755, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 1396, 751,
	748, 752, 758, 746, 756, 743, 754, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 740,
	745, 0, 761, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 739, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 741,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 744, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 757, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 760, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 735, 0, 1398, 913, 0, 0, 0, 0,
	1000, 0, 0, 0, 0, 0, 0, 0, 1399, 1400,
	236, 0, 253, 742, 0, 302, 339, 554, 0, 0,
	399, 0, 452, 456, 0, 545, 0, 0, 1390, 0,
	310, 1395, 747, 0, 753, 0, 759, 1394, 521, 0,
	749, 750, 755, 241, 629, 544, 615, 0, 0, 0,
	406, 0, 0, 0, 0, 0, 0, 0, 249, 0,
	0, 0, 1396, 751, 748, 752, 758, 746, 756, 743,
	754, 0, 443, 377, 594, 470, 248, 294, 281, 323,
	365, 477, 0, 0, 355, 525, 290, 379, 0, 269,
	412, 0, 501, 376, 0, 484, 504, 0, 396, 275,
	435, 491, 492, 740, 745, 0, 761, 0, 279, 280,
	401, 261, 409, 606, 572, 464, 422, 420, 0, 387,
	444, 601, 0, 0, 309, 0, 304, 400, 540, 267,
	519, 438, 405, 359, 467, 496, 306, 291, 292, 335,
	437, 325, 277, 530, 569, 573, 571, 567, 564, 568,
	565, 566, 570, 326, 563, 0, 538, 547, 581, 561,
	589, 546, 586, 556, 301, 585, 550, 549, 595, 576,
	577, 531, 591, 562, 560, 553, 552, 548, 0, 226,
	227, 228, 229, 230, 231, 232, 233, 234, 235, 237,
	0, 238, 239, 240, 242, 243, 244, 739, 245, 246,
	247, 250, 251, 252, 254, 614, 255, 256, 257, 258,
	259, 260, 551, 741, 262, 263, 264, 265, 266, 268,
	270, 271, 272, 273, 274, 276, 278, 0, 0, 0,
	744, 0, 0, 0, 282, 283, 284, 285, 286, 287,
	0, 288, 289, 293, 295, 296, 297, 298, 299, 300,
	303, 0, 305, 307, 0, 308, 311, 0, 312, 313,
	314, 315, 316, 317, 318, 319, 555, 320, 0, 321,
	322, 324, 0, 327, 328, 329, 330, 331, 0, 332,
	557, 558, 333, 334, 336, 337, 338, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 349, 350, 351, 0,
	352, 353, 354, 356, 0, 357, 358, 361, 362, 363,
	364, 0, 366, 574, 0, 367, 368, 369, 0, 0,
	370, 371, 372, 373, 374, 375, 378, 575, 380, 381,
	382, 383, 384, 385, 386, 616, 388, 389, 390, 391,
	392, 393, 394, 578, 579, 395, 397, 398, 580, 582,
	583, 757, 413, 414, 415, 416, 417, 418, 419, 421,
	0, 423, 424, 425, 584, 426, 427, 428, 429, 0,
	430, 431, 432, 433, 434, 436, 439, 440, 441, 442,
	0, 445, 446, 447, 448, 449, 450, 451, 453, 454,
	455, 457, 458, 459, 617, 460, 461, 462, 463, 587,
	465, 466, 618, 468, 469, 471, 472, 473, 474, 475,
	476, 627, 0, 478, 588, 479, 480, 481, 482, 483,
	0, 485, 486, 487, 488, 489, 490, 493, 494, 495,
	497, 498, 590, 499, 500, 0, 502, 503, 760, 505,
	506, 507, 508, 509, 0, 628, 510, 592, 511, 593,
	512, 513, 514, 515, 516, 517, 518, 520, 0, 0,
	522, 523, 524, 526, 527, 528, 529, 532, 533, 534,
	535, 536, 0, 537, 539, 541, 619, 596, 597, 598,
	599, 600, 602, 603, 604, 605, 542, 543, 559, 410,
	404, 360, 402, 403, 407, 408, 411, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 735, 0, 1398, 913,
	0, 0, 0, 0, 1000, 0, 0, 0, 0, 0,
	0, 0, 1399, 1400, 236, 0, 253, 742, 0, 302,
	339, 554, 0, 0, 399, 0, 452, 456, 0, 545,
	0, 0, 0, 0, 310, 1395, 747, 0, 753, 0,
	759, 1394, 521, 0, 749, 750, 755, 241, 629, 544,
	615, 0, 0, 0, 406, 0, 0, 0, 0, 0,
	0, 0, 249, 0, 0, 0, 1396, 751, 748, 752,
	758, 746, 756, 743, 754, 0, 443, 377, 594, 470,
	248, 294, 281, 323, 365, 477, 0, 0, 355, 525,
	290, 379, 0, 269, 412, 0, 501, 376, 0, 484,
	504, 0, 396, 275, 435, 491, 492, 740, 745, 0,
	761, 0, 279, 280, 401, 261, 409, 606, 572, 464,
	422, 420, 0, 387, 444, 601, 0, 0, 309, 0,
	304, 400, 540, 267, 519, 438, 405, 359, 467, 496,
	306, 291, 292, 335, 437, 325, 277, 530, 569, 573,
	571, 567, 564, 568, 565, 566, 570, 326, 563, 0,
	538, 547, 581, 561, 589, 546, 586, 556, 301, 585,
	550, 549, 595, 576, 577, 531, 591, 562, 560, 553,
	552, 548, 0, 226, 227, 228, 229, 230, 231, 232,
	233, 234, 235, 237, 0, 238, 239, 240, 242, 243,
	244, 739, 245, 246, 247, 250, 251, 252, 254, 614,
	255, 256, 257, 258, 259, 260, 551, 741, 262, 263,
	264, 265, 266, 268, 270, 271, 272, 273, 274, 276,
	278, 0, 0, 0, 744, 0, 0, 0, 282, 283,
	284, 285, 286, 287, 0, 288, 289, 293, 295, 296,
	297, 298, 299, 300, 303, 0, 305, 307, 0, 308,
	311, 0, 312, 313, 314, 315, 316, 317, 318, 319,
	555, 320, 0, 321, 322, 324, 0, 327, 328, 329,
	330, 331, 0, 332, 557, 558, 333, 334, 336, 337,
	338, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	349, 350, 351, 0, 352, 353, 354, 356, 0, 357,
	358, 361, 362, 363, 364, 0, 366, 574, 0, 367,
	368, 369, 0, 0, 370, 371, 372, 373, 374, 375,
	378, 575, 380, 381, 382, 383, 384, 385, 386, 616,
	388, 389, 390, 391, 392, 393, 394, 578, 579, 395,
	397, 398, 580, 582, 583, 757, 413, 414, 415, 416,
	417, 418, 419, 421, 0, 423, 424, 425, 584, 426,
	427, 428, 429, 0, 430, 431, 432, 433, 434, 436,
	439, 440, 441, 442, 0, 445, 446, 447, 448, 449,
	450, 451, 453, 454, 455, 457, 458, 459, 617, 460,
	461, 462, 463, 587, 465, 466, 618, 468, 469, 471,
	472, 473, 474, 475, 476, 627, 0, 478, 588, 479,
	480, 481, 482, 483, 0, 485, 486, 487, 488, 489,
	490, 493, 494, 495, 497, 498, 590, 499, 500, 0,
	502, 503, 760, 505, 506, 507, 508, 509, 0, 628,
	510, 592, 511, 593, 512, 513, 514, 515, 516, 517,
	518, 520, 0, 0, 522, 523, 524, 526, 527, 528,
	529, 532, 533, 534, 535, 536, 0, 537, 539, 541,
	619, 596, 597, 598, 599, 600, 602, 603, 604, 605,
	542, 543, 559, 410, 404, 360, 402, 403, 407, 408,
	411, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	797, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1399, 1400, 236, 0,
	253, 742, 0, 302, 339, 554, 0, 0, 399, 0,
	452, 456, 0, 545, 0, 0, 0, 0, 310, 0,
	747, 0, 753, 0, 759, 0, 521, 0, 749, 750,
	755, 241, 629, 544, 615, 0, 0, 0, 406, 0,
	0, 0, 0, 0, 0, 0, 249, 0, 0, 0,
	0, 751, 748, 752, 758, 746, 756, 743, 754, 0,
	443, 377, 594, 470, 248, 294, 281, 323, 365, 477,
	0, 0, 355, 525, 290, 379, 0, 269, 412, 0,
	501, 376, 0, 484, 504, 0, 396, 275, 435, 491,
	492, 740, 745, 0, 761, 0, 279, 280, 401, 261,
	409, 606, 572, 464, 422, 420, 0, 387, 444, 601,
	0, 0, 309, 0, 304, 400, 540, 267, 519, 438,
	405, 359, 467, 496, 306, 291, 292, 335, 437, 325,
	277, 530, 569, 573, 571, 567, 564, 568, 565, 566,
	570, 326, 563, 0, 538, 547, 581, 561, 589, 546,
	586, 556, 301, 585, 550, 549, 595, 576, 577, 531,
	591, 562, 560, 553, 552, 548, 0, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 237, 0, 238,
	239, 240, 242, 243, 244, 739, 245, 246, 247, 250,
	251, 252, 254, 614, 255, 256, 257, 258, 259, 260,
	551, 741, 262, 263, 264, 265, 266, 268, 270, 271,
	272, 273, 274, 276, 278, 0, 0, 0, 744, 0,
	0, 0, 282, 283, 284, 285, 286, 287, 0, 288,
	289, 293, 295, 296, 297, 298, 299, 300, 303, 0,
	305, 307, 0, 308, 311, 0, 312, 313, 314, 315,
	316, 317, 318, 319, 555, 320, 0, 321, 322, 324,
	0, 327, 328, 329, 330, 331, 0, 332, 557, 558,
	333, 334, 336, 337, 338, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 349, 350, 351, 0, 352, 353,
	354, 356, 0, 357, 358, 361, 362, 363, 364, 0,
	366, 574, 0, 367, 368, 369, 0, 0, 370, 371,
	372, 373, 374, 375, 378, 575, 380, 381, 382, 383,
	384, 385, 386, 616, 388, 389, 390, 391, 392, 393,
	394, 578, 579, 395, 397, 398, 580, 582, 583, 757,
	413, 414, 415, 416, 417, 418, 419, 421, 0, 423,
	424, 425, 584, 426, 427, 428, 429, 0, 430, 431,
	432, 433, 434, 436, 439, 440, 441, 442, 0, 445,
	446, 447, 448, 449, 450, 451, 453, 454, 455, 457,
	458, 459, 617, 460, 461, 462, 463, 587, 465, 466,
	618, 468, 469, 471, 472, 473, 474, 475, 476, 627,
	0, 478, 588, 479, 480, 481, 482, 483, 0, 485,
	486, 487, 488, 489, 490, 493, 494, 495, 497, 498,
	590, 499, 500, 0, 502, 503, 760, 505, 506, 507,
	508, 509, 0, 628, 510, 592, 511, 593, 512, 513,
	514, 515, 516, 517, 518, 520, 0, 0, 522, 523,
	524, 526, 527, 528, 529, 532, 533, 534, 535, 536,
	0, 537, 539, 541, 619, 596, 597, 598, 599, 600,
	602, 603, 604, 605, 542, 543, 559, 410, 404, 360,
	402, 403, 407, 408, 411, 223, 0, 0, 0, 0,
	0, 0, 704, 0, 0, 0, 0, 0, 0, 715,
	716, 717, 0, 236, 0, 253, 0, 4597, 302, 339,
	554, 0, 0, 399, 0, 452, 456, 0, 545, 0,
	0, 0, 0, 310, 0, 0, 0, 0, 0, 0,
	0, 521, 0, 0, 0, 0, 241, 629, 544, 615,
	0, 0, 0, 406, 0, 0, 0, 0, 0, 0,
	0, 249, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 443, 377, 594, 470, 248,
	294, 281, 323, 365, 477, 0, 0, 355, 525, 290,
	379, 0, 269, 412, 0, 501, 376, 0, 484, 504,
	0, 396, 275, 435, 491, 492, 0, 0, 0, 0,
	0, 279, 280, 401, 261, 409, 606, 572, 464, 422,
	420, 0, 387, 444, 601, 0, 0, 309, 0, 304,
	400, 540, 267, 519, 438, 405, 359, 467, 496, 306,
	291, 292, 335, 437, 325, 277, 530, 569, 573, 571,
	567, 564, 568, 565, 566, 570, 326, 563, 0, 538,
	547, 581, 561, 589, 546, 586, 556, 301, 585, 550,
	549, 595, 576, 577, 531, 591, 562, 560, 553, 552,
	548, 0, 226, 227, 228, 229, 230, 231, 232, 233,
	234, 235, 237, 0, 238, 239, 240, 242, 243, 244,
	0, 245, 246, 247, 250, 251, 252, 254, 614, 255,
	256, 257, 258, 259, 260, 551, 0, 262, 263, 264,
	265, 266, 268, 270, 271, 272, 273, 274, 276, 278,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 284,
	285, 286, 287, 0, 288, 289, 293, 295, 296, 297,
	298, 299, 300, 303, 0, 305, 307, 0, 308, 311,
	0, 312, 313, 314, 315, 316, 317, 318, 319, 555,
	320, 0, 321, 322, 324, 0, 327, 328, 329, 330,
	331, 0, 332, 557, 558, 333, 334, 336, 337, 338,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 349,
	350, 351, 0, 352, 353, 354, 356, 0, 357, 358,
	361, 362, 363, 364, 0, 366, 574, 0, 367, 368,
	369, 0, 0, 370, 371, 372, 373, 374, 375, 378,
	575, 380, 381, 382, 383, 384, 385, 386, 616, 388,
	389, 390, 391, 392, 393, 394, 578, 579, 395, 397,
	398, 580, 582, 583, 0, 413, 414, 415, 416, 417,
	418, 419, 421, 0, 423, 424, 425, 584, 426, 427,
	428, 429, 0, 430, 431, 432, 433, 434, 436, 439,
	440, 441, 442, 0, 445, 446, 447, 448, 449, 450,
	451, 453, 454, 455, 457, 458, 459, 617, 460, 461,
	462, 463, 587, 465, 466, 618, 468, 469, 471, 472,
	473, 474, 475, 476, 627, 0, 478, 588, 479, 480,
	481, 482, 483, 0, 485, 486, 487, 488, 489, 490,
	493, 494, 495, 497, 498, 590, 499, 500, 0, 502,
	503, 0, 505, 506, 507, 508, 509, 0, 628, 510,
	592, 511, 593, 512, 513, 514, 515, 516, 517, 518,
	520, 0, 0, 522, 523, 524, 526, 527, 528, 529,
	532, 533, 534, 535, 536, 0, 537, 539, 541, 619,
	596, 597, 598, 599, 600, 602, 603, 604, 605, 542,
	543, 559, 410, 404, 360, 402, 403, 407, 408, 411,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 712, 713, 714, 0,
	0, 0, 0, 0, 223, 706, 707, 708, 709, 710,
	711, 704, 0, 0, 0, 0, 0, 0, 715, 716,
	717, 0, 236, 0, 253, 0, 0, 302, 339, 554,
	0, 0, 399, 0, 452, 456, 0, 545, 0, 0,
	0, 0, 310, 0, 0, 0, 0, 0, 0, 0,
	521, 0, 0, 0, 0, 241, 629, 544, 615, 0,
	0, 0, 4570, 0, 0, 0, 0, 0, 0, 0,
	249, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 443, 377, 594, 470, 248, 294,
	281, 323, 365, 477, 0, 0, 355, 525, 290, 379,
	0, 269, 412, 0, 501, 376, 0, 484, 504, 0,
	396, 275, 435, 491, 492, 0, 0, 0, 0, 0,
	279, 280, 401, 261, 409, 606, 572, 464, 422, 420,
	0, 387, 444, 601, 0, 0, 309, 0, 304, 400,
	540, 267, 519, 438, 405, 359, 467, 496, 306, 291,
	292, 335, 437, 325, 277, 530, 569, 573, 571, 567,
	564, 568, 565, 566, 570, 326, 563, 0, 538, 547,
	581, 561, 589, 546, 586, 556, 301, 585, 550, 549,
	595, 576, 577, 531, 591, 562, 560, 553, 552, 548,
	0, 226, 227, 228, 229, 230, 231, 232, 233, 234,
	235, 237, 0, 238, 239, 240, 242, 243, 244, 0,
	245, 246, 247, 250, 251, 252, 254, 614, 255, 256,
	257, 258, 259, 260, 551, 0, 262, 263, 264, 265,
	266, 268, 270, 271, 272, 273, 274, 276, 278, 0,
	0, 0, 0, 0, 0, 0, 282, 283, 284, 285,
	286, 287, 0, 288, 289, 293, 295, 296, 297, 298,
	299, 300, 303, 0, 305, 307, 0, 308, 311, 0,
	312, 313, 314, 315, 316, 317, 318, 319, 555, 320,
	0, 321, 322, 324, 0, 327, 328, 329, 330, 331,
	0, 332, 557, 558, 333, 334, 336, 337, 338, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
	351, 0, 352, 353, 354, 356, 0, 357, 358, 361,
	362, 363, 364, 0, 366, 574, 0, 367, 368, 369,
	0, 0, 370, 371, 372, 373, 374, 375, 378, 575,
	380, 381, 382, 383, 384, 385, 386, 616, 388, 389,
	390, 391, 392, 393, 394, 578, 579, 395, 397, 398,
	580, 582, 583, 0, 413, 414, 415, 416, 417, 418,
	419, 421, 0, 423, 424, 425, 584, 426, 427, 428,
	429, 0, 430, 431, 432, 433, 434, 436, 439, 440,
	441, 442, 0, 445, 446, 447, 448, 449, 450, 451,
	453, 454, 455, 457, 458, 459, 617, 460, 461, 462,
	463, 587, 465, 466, 618, 468, 469, 471, 472, 473,
	474, 475, 476, 627, 0, 478, 588, 479, 480, 481,
	482, 483, 0, 485, 486, 487, 488, 489, 490, 493,
	494, 495, 497, 498, 590, 499, 500, 0, 502, 503,
	0, 505, 506, 507, 508, 509, 0, 628, 510, 592,
	511, 593, 512, 513, 514, 515, 516, 517, 518, 520,
	0, 0, 522, 523, 524, 526, 527, 528, 529, 532,
	533, 534, 535, 536, 0, 537, 539, 541, 619, 596,
	597, 598, 599, 600, 602, 603, 604, 605, 542, 543,
	559, 410, 404, 360, 402, 403, 407, 408, 411, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 712, 713, 714, 0, 0,
	0, 0, 0, 223, 706, 707, 708, 709, 710, 711,
	704, 0, 0, 0, 0, 0, 0, 715, 716, 717,
	0, 236, 0, 253, 0, 0, 302, 339, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	3089, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 3090, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 712, 713, 714, 0, 0, 0,
	0, 0, 223, 706, 707, 708, 709, 710, 711, 704,
	0, 0, 0, 0, 0, 0, 715, 716, 717, 0,
	236, 0, 253, 0, 0, 302, 339, 554, 0, 0,
	399, 0, 452, 456, 0, 545, 0, 0, 0, 0,
	310, 0, 0, 0, 0, 0, 0, 0, 521, 0,
	0, 0, 0, 241, 629, 544, 615, 0, 0, 0,
	406, 0, 0, 0, 0, 0, 0, 0, 249, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 443, 377, 594, 470, 248, 294, 281, 323,
	365, 477, 0, 0, 355, 525, 290, 379, 0, 269,
	412, 0, 501, 376, 0, 484, 504, 0, 396, 275,
	435, 491, 492, 0, 0, 0, 0, 0, 279, 280,
	401, 261, 409, 606, 572, 464, 422, 420, 0, 387,
	444, 601, 0, 0, 309, 0, 304, 400, 540, 267,
	519, 438, 405, 359, 467, 496, 306, 291, 292, 335,
	437, 325, 277, 530, 569, 573, 571, 567, 564, 568,
	565, 566, 570, 326, 563, 0, 538, 547, 581, 561,
	589, 546, 586, 556, 301, 585, 550, 549, 595, 576,
	577, 531, 591, 562, 560, 553, 552, 548, 0, 226,
	227, 228, 229, 230, 231, 232, 233, 234, 235, 237,
	0, 238, 239, 240, 242, 243, 244, 0, 245, 246,
	247, 250, 251, 252, 254, 614, 255, 256, 257, 700,
	259, 260, 551, 0, 262, 263, 264, 265, 266, 268,
	270, 271, 272, 273, 274, 276, 278, 0, 0, 0,
	0, 0, 0, 0, 282, 283, 284, 285, 286, 287,
	0, 288, 289, 293, 295, 296, 297, 298, 299, 300,
	303, 0, 305, 307, 0, 308, 311, 0, 312, 313,
	314, 315, 316, 317, 318, 319, 555, 701, 0, 321,
	322, 324, 0, 327, 328, 329, 330, 331, 0, 332,
	557, 558, 333, 334, 336, 337, 338, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 349, 350, 351, 0,
	352, 353, 354, 356, 0, 357, 358, 361, 362, 363,
	364, 0, 366, 574, 0, 367, 368, 369, 0, 0,
	370, 371, 372, 373, 374, 375, 378, 575, 380, 381,
	382, 383, 384, 385, 386, 616, 388, 389, 390, 391,
	392, 393, 394, 578, 579, 395, 397, 398, 580, 582,
	583, 0, 413, 414, 415, 416, 417, 418, 419, 421,
	0, 423, 424, 425, 584, 426, 427, 428, 429, 0,
	430, 431, 432, 433, 434, 436, 439, 440, 441, 442,
	0, 445, 446, 447, 448, 449, 450, 451, 453, 454,
	455, 457, 458, 459, 617, 460, 461, 462, 463, 587,
	465, 466, 618, 468, 469, 471, 472, 473, 474, 475,
	476, 627, 0, 478, 588, 479, 480, 481, 482, 483,
	0, 485, 486, 487, 488, 489, 490, 493, 494, 495,
	497, 498, 590, 499, 500, 0, 502, 503, 0, 505,
	506, 507, 508, 509, 0, 628, 510, 592, 511, 593,
	512, 513, 514, 515, 516, 517, 518, 520, 0, 0,
	522, 523, 524, 526, 527, 528, 529, 532, 533, 534,
	535, 536, 0, 537, 539, 541, 619, 596, 597, 598,
	599, 600, 602, 603, 604, 605, 542, 543, 559, 410,
	404, 360, 402, 403, 407, 408, 411, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	797, 0, 0, 712, 713, 714, 0, 0, 0, 0,
	0, 0, 706, 707, 708, 709, 710, 711, 236, 0,
	253, 742, 0, 302, 339, 554, 0, 0, 399, 0,
	452, 456, 0, 545, 0, 0, 0, 0, 310, 0,
	747, 0, 753, 0, 759, 0, 521, 0, 749, 750,
	755, 241, 629, 544, 615, 0, 0, 0, 406, 0,
	0, 0, 0, 0, 0, 0, 249, 0, 0, 0,
	0, 751, 748, 752, 758, 746, 756, 743, 754, 0,
	443, 377, 594, 470, 248, 294, 281, 323, 365, 477,
	0, 0, 355, 525, 290, 379, 0, 269, 412, 1019,
	501, 376, 0, 484, 504, 0, 396, 275, 435, 491,
	492, 740, 745, 0, 761, 0, 279, 280, 401, 261,
	409, 606, 572, 464, 422, 420, 0, 387, 444, 601,
	0, 0, 309, 0, 304, 400, 540, 267, 519, 438,
	405, 359, 467, 496, 306, 291, 292, 335, 437, 325,
	277, 530, 1047, 1049, 1045, 1041, 1042, 1007, 1008, 1048,
	1044, 326, 2753, 0, 538, 547, 581, 561, 589, 546,
	586, 556, 301, 585, 550, 549, 595, 576, 577, 531,
	591, 562, 560, 553, 552, 548, 0, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 237, 0, 238,
	239, 240, 242, 243, 244, 739, 245, 246, 247, 250,
	251, 252, 254, 614, 255, 256, 257, 258, 259, 260,
	1031, 1009, 262, 263, 264, 265, 266, 268, 270, 271,
	272, 273, 274, 276, 278, 1020, 1010, 1015, 1021, 1011,
	1012, 1016, 282, 283, 284, 285, 286, 287, 0, 288,
	289, 293, 295, 296, 297, 298, 299, 300, 303, 0,
	305, 307, 0, 308, 311, 0, 312, 313, 314, 315,
	316, 317, 318, 319, 1023, 320, 0, 321, 322, 324,
	0, 327, 328, 329, 330, 331, 0, 332, 1032, 558,
	333, 334, 336, 337, 338, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 349, 350, 351, 0, 352, 353,
	354, 356, 0, 357, 358, 361, 362, 363, 364, 0,
	366, 1033, 0, 367, 368, 369, 1013, 1014, 370, 371,
	372, 373, 374, 375, 378, 1046, 380, 381, 382, 383,
	384, 385, 386, 616, 388, 389, 390, 391, 392, 393,
	394, 578, 1024, 395, 397, 398, 1030, 582, 1025, 757,
	413, 414, 415, 416, 417, 418, 419, 421, 0, 423,
	424, 425, 1026, 426, 427, 428, 429, 0, 430, 431,
	432, 433, 434, 436, 439, 440, 441, 442, 0, 445,
	446, 447, 448, 449, 450, 451, 453, 454, 455, 457,
	458, 459, 617, 460, 461, 462, 463, 587, 465, 466,
	618, 468, 469, 471, 472, 473, 474, 475, 476, 627,
	1017, 478, 588, 479, 480, 481, 482, 483, 0, 485,
	486, 487, 488, 489, 490, 493, 494, 495, 497, 498,
	1027, 499, 500, 1018, 502, 503, 760, 505, 506, 507,
	508, 509, 0, 628, 510, 1028, 511, 1029, 512, 513,
	514, 515, 516, 517, 518, 520, 0, 0, 522, 523,
	524, 526, 527, 528, 529, 532, 533, 534, 535, 536,
	0, 537, 539, 541, 619, 596, 1034, 1035, 1038, 1036,
	1037, 1039, 1040, 1050, 542, 543, 559, 410, 404, 360,
	402, 403, 407, 408, 411, 0, 0, 797, 1022, 986,
	913, 0, 991, 992, 0, 1000, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 236, 0, 253, 742, 0,
	302, 339, 554, 0, 0, 399, 0, 452, 456, 0,
	545, 0, 0, 0, 0, 310, 989, 747, 0, 753,
	990, 759, 988, 521, 0, 749, 750, 755, 241, 1066,
	544, 615, 0, 0, 0, 406, 0, 0, 0, 0,
	0, 0, 0, 249, 0, 0, 0, 0, 751, 748,
	752, 758, 746, 756, 743, 754, 0, 443, 377, 594,
	470, 248, 294, 281, 323, 365, 477, 0, 0, 355,
	525, 290, 379, 0, 269, 412, 0, 501, 376, 0,
	484, 504, 0, 396, 275, 435, 491, 492, 740, 745,
	0, 761, 0, 279, 280, 401, 261, 409, 606, 572,
	464, 422, 420, 0, 387, 444, 601, 0, 0, 309,
	0, 304, 400, 540, 267, 519, 438, 405, 359, 467,
	496, 306, 291, 292, 335, 437, 325, 277, 530, 569,
	573, 571, 567, 564, 568, 565, 566, 570, 326, 5167,
	0, 538, 1052, 1063, 1060, 1065, 1051, 1064, 1058, 861,
	585, 1055, 1054, 1068, 1061, 1062, 531, 1067, 1006, 1059,
	1057, 1056, 1053, 0, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 237, 0, 238, 239, 240, 242,
	243, 244, 739, 245, 246, 247, 250, 251, 252, 254,
	614, 255, 256, 257, 258, 259, 260, 551, 741, 262,
	263, 264, 265, 266, 268, 270, 271, 272, 273, 274,
	276, 278, 0, 0, 0, 744, 0, 0, 0, 282,
	283, 284, 285, 286, 287, 0, 288, 289, 293, 295,
	296, 297, 298, 299, 300, 303, 0, 305, 307, 0,
	308, 311, 0, 312, 313, 314, 315, 316, 317, 318,
	319, 555, 320, 0, 321, 322, 324, 0, 327, 328,
	329, 330, 331, 0, 332, 557, 558, 333, 334, 336,
	337, 338, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 349, 350, 351, 0, 352, 353, 354, 356, 0,
	357, 358, 361, 362, 363, 364, 0, 366, 574, 0,
	367, 368, 369, 0, 0, 370, 371, 372, 373, 374,
	375, 378, 575, 380, 381, 382, 383, 384, 385, 386,
	616, 388, 389, 390, 391, 392, 393, 394, 578, 579,
	395, 397, 398, 580, 582, 583, 757, 413, 414, 415,
	416, 417, 418, 419, 421, 0, 423, 424, 425, 584,
	426, 427, 428, 429, 0, 430, 431, 432, 433, 434,
	436, 439, 440, 441, 442, 0, 445, 446, 447, 448,
	449, 450, 451, 453, 454, 455, 457, 458, 459, 617,
	460, 461, 462, 463, 587, 465, 466, 618, 468, 469,
	471, 472, 473, 474, 475, 476, 627, 0, 478, 588,
	479, 480, 481, 482, 483, 0, 485, 486, 487, 488,
	489, 490, 493, 494, 495, 497, 498, 590, 499, 500,
	0, 502, 503, 760, 505, 506, 507, 508, 509, 0,
	628, 510, 592, 511, 593, 512, 513, 514, 515, 516,
	517, 518, 520, 0, 0, 522, 523, 524, 526, 527,
	528, 529, 532, 533, 534, 535, 536, 0, 537, 539,
	541, 619, 596, 597, 598, 599, 600, 602, 603, 604,
	605, 542, 543, 559, 410, 404, 360, 402, 403, 407,
	408, 411, 223, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	236, 0, 253, 0, 0, 302, 339, 554, 0, 0,
	399, 0, 452, 456, 0, 545, 0, 0, 0, 0,
	310, 0, 0, 0, 0, 0, 0, 0, 521, 0,
	0, 0, 0, 241, 629, 544, 615, 0, 0, 0,
	406, 0, 0, 0, 0, 0, 0, 0, 249, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 443, 377, 594, 470, 248, 294, 281, 323,
	365, 477, 0, 0, 355, 525, 290, 379, 0, 269,
	412, 0, 501, 376, 0, 484, 504, 0, 396, 275,
	435, 491, 492, 0, 0, 0, 0, 0, 279, 280,
	401, 261, 409, 606, 572, 464, 422, 420, 0, 387,
	444, 601, 0, 0, 309, 0, 304, 400, 540, 267,
	519, 438, 405, 359, 467, 496, 306, 291, 292, 335,
	437, 325, 277, 530, 569, 573, 571, 567, 564, 568,
	565, 566, 570, 326, 563, 0, 538, 547, 581, 561,
	589, 546, 586, 556, 301, 585, 550, 549, 595, 576,
	577, 531, 591, 562, 560, 553, 552, 548, 0, 226,
	227, 228, 229, 230, 231, 232, 233, 234, 235, 237,
	0, 238, 239, 240, 242, 243, 244, 0, 245, 246,
	247, 250, 251, 252, 254, 614, 255, 256, 257, 258,
	259, 260, 551, 0, 262, 263, 264, 265, 266, 268,
	270, 271, 272, 273, 274, 276, 278, 0, 0, 0,
	0, 0, 0, 0, 282, 283, 284, 285, 286, 287,
	0, 288, 289, 293, 295, 296, 297, 298, 299, 300,
	303, 0, 305, 307, 0, 308, 311, 0, 312, 313,
	314, 315, 316, 317, 318, 319, 555, 320, 0, 321,
	322, 324, 0, 327, 328, 329, 330, 331, 0, 332,
	557, 558, 333, 334, 336, 337, 338, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 349, 350, 351, 0,
	352, 353, 354, 356, 0, 357, 358, 361, 362, 363,
	364, 0, 366, 574, 0, 367, 368, 369, 0, 0,
	370, 371, 372, 373, 374, 375, 378, 575, 380, 381,
	382, 383, 384, 385, 386, 616, 388, 389, 390, 391,
	392, 393, 394, 578, 579, 395, 397, 398, 580, 582,
	583, 0, 413, 414, 415, 416, 417, 418, 419, 421,
	0, 423, 424, 425, 584, 426, 427, 428, 429, 0,
	430, 431, 432, 433, 434, 436, 439, 440, 441, 442,
	0, 445, 446, 447, 448, 449, 450, 451, 453, 454,
	455, 457, 458, 459, 617, 460, 461, 462, 463, 587,
	465, 466, 618, 468, 469, 471, 472, 473, 474, 475,
	476, 627, 0, 478, 588, 479, 480, 481, 482, 483,
	0, 485, 486, 487, 488, 489, 490, 493, 494, 495,
	497, 498, 590, 499, 500, 0, 502, 503, 0, 505,
	506, 507, 508, 509, 0, 628, 510, 592, 511, 593,
	512, 513, 514, 515, 516, 517, 518, 520, 0, 0,
	522, 523, 524, 526, 527, 528, 529, 532, 533, 534,
	535, 536, 0, 537, 539, 541, 619, 596, 597, 598,
	599, 600, 602, 603, 604, 605, 542, 543, 559, 410,
	404, 360, 402, 403, 407, 408, 411, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 236, 0, 253, 0, 0,
	302, 339, 554, 0, 5006, 399, 0, 452, 456, 0,
	545, 0, 0, 0, 0, 310, 0, 0, 0, 0,
	0, 0, 0, 521, 0, 0, 0, 0, 241, 629,
	544, 615, 0, 0, 0, 406, 0, 0, 0, 0,
	0, 0, 0, 249, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 443, 377, 594,
	470, 248, 294, 281, 323, 365, 477, 0, 0, 355,
	525, 290, 379, 0, 269, 412, 0, 501, 376, 0,
	484, 504, 0, 396, 275, 435, 491, 492, 0, 0,
	0, 0, 0, 279, 280, 401, 261, 409, 606, 572,
	464, 422, 420, 0, 387, 444, 601, 0, 0, 309,
	0, 304, 400, 540, 267, 519, 438, 405, 359, 467,
	496, 306, 291, 292, 335, 437, 325, 277, 530, 569,
	573, 571, 567, 564, 568, 565, 566, 570, 326, 563,
	0, 538, 547, 581, 561, 589, 546, 586, 556, 301,
	585, 550, 549, 595, 576, 577, 531, 591, 562, 560,
	553, 552, 548, 0, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 237, 0, 238, 239, 240, 242,
	243, 244, 0, 245, 246, 247, 250, 251, 252, 254,
	614, 255, 256, 257, 258, 259, 260, 551, 0, 262,
	263, 264, 265, 266, 268, 270, 271, 272, 273, 274,
	276, 278, 0, 0, 0, 0, 0, 0, 0, 282,
	283, 284, 285, 286, 287, 0, 288, 289, 293, 295,
	296, 297, 298, 299, 300, 303, 0, 305, 307, 0,
	308, 311, 0, 312, 313, 314, 315, 316, 317, 318,
	319, 555, 320, 0, 321, 322, 324, 0, 327, 328,
	329, 330, 331, 0, 332, 557, 558, 333, 334, 336,
	337, 338, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 349, 350, 351, 0, 352, 353, 354, 356, 0,
	357, 358, 361, 362, 363, 364, 0, 366, 574, 0,
	367, 368, 369, 0, 0, 370, 371, 372, 373, 374,
	375, 378, 575, 380, 381, 382, 383, 384, 385, 386,
	616, 388, 389, 390, 391, 392, 393, 394, 578, 579,
	395, 397, 398, 580, 582, 583, 0, 413, 414, 415,
	416, 417, 418, 419, 421, 0, 423, 424, 425, 584,
	426, 427, 428, 429, 0, 430, 431, 432, 433, 434,
	436, 439, 440, 441, 442, 0, 445, 446, 447, 448,
	449, 450, 451, 453, 454, 455, 457, 458, 459, 617,
	460, 461, 462, 463, 587, 465, 466, 618, 468, 469,
	471, 472, 473, 474, 475, 476, 627, 0, 478, 588,
	479, 480, 481, 482, 483, 0, 485, 486, 487, 488,
	489, 490, 493, 494, 495, 497, 498, 590, 499, 500,
	0, 502, 503, 0, 505, 506, 507, 508, 509, 0,
	628, 510, 592, 511, 593, 512, 513, 514, 515, 516,
	517, 518, 520, 0, 0, 522, 523, 524, 526, 527,
	528, 529, 532, 533, 534, 535, 536, 0, 537, 539,
	541, 619, 596, 597, 598, 599, 600, 602, 603, 604,
	605, 542, 543, 559, 410, 404, 360, 402, 403, 407,
	408, 411, 223, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	236, 0, 253, 0, 0, 302, 339, 554, 0, 4866,
	399, 0, 452, 456, 0, 545, 0, 0, 0, 0,
	310, 0, 0, 0, 0, 0, 0, 0, 521, 0,
	0, 0, 0, 241, 629, 544, 615, 0, 0, 0,
	406, 0, 0, 0, 0, 0, 0, 0, 249, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 443, 377, 594, 470, 248, 294, 281, 323,
	365, 477, 0, 0, 355, 525, 290, 379, 0, 269,
	412, 0, 501, 376, 0, 484, 504, 0, 396, 275,
	435, 491, 492, 0, 0, 0, 0, 0, 279, 280,
	401, 261, 409, 606, 572, 464, 422, 420, 0, 387,
	444, 601, 0, 0, 309, 0, 304, 400, 540, 267,
	519, 438, 405, 359, 467, 496, 306, 291, 292, 335,
	437, 325, 277, 530, 569, 573, 571, 567, 564, 568,
	565, 566, 570, 326, 563, 0, 538, 547, 581, 561,
	589, 546, 586, 556, 301, 585, 550, 549, 595, 576,
	577, 531, 591, 562, 560, 553, 552, 548, 0, 226,
	227, 228, 229, 230, 231, 232, 233, 234, 235, 237,
	0, 238, 239, 240, 242, 243, 244, 0, 245, 246,
	247, 250, 251, 252, 254, 614, 255, 256, 257, 258,
	259, 260, 551, 0, 262, 263, 264, 265, 266, 268,
	270, 271, 272, 273, 274, 276, 278, 0, 0, 0,
	0, 0, 0, 0, 282, 283, 284, 285, 286, 287,
	0, 288, 289, 293, 295, 296, 297, 298, 299, 300,
	303, 0, 305, 307, 0, 308, 311, 0, 312, 313,
	314, 315, 316, 317, 318, 319, 555, 320, 0, 321,
	322, 324, 0, 327, 328, 329, 330, 331, 0, 332,
	557, 558, 333, 334, 336, 337, 338, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 349, 350, 351, 0,
	352, 353, 354, 356, 0, 357, 358, 361, 362, 363,
	364, 0, 366, 574, 0, 367, 368, 369, 0, 0,
	370, 371, 372, 373, 374, 375, 378, 575, 380, 381,
	382, 383, 384, 385, 386, 616, 388, 389, 390, 391,
	392, 393, 394, 578, 579, 395, 397, 398, 580, 582,
	583, 0, 413, 414, 415, 416, 417, 418, 419, 421,
	0, 423, 424, 425, 584, 426, 427, 428, 429, 0,
	430, 431, 432, 433, 434, 436, 439, 440, 441, 442,
	0, 445, 446, 447, 448, 449, 450, 451, 453, 454,
	455, 457, 458, 459, 617, 460, 461, 462, 463, 587,
	465, 466, 618, 468, 469, 471, 472, 473, 474, 475,
	476, 627, 0, 478, 588, 479, 480, 481, 482, 483,
	0, 485, 486, 487, 488, 489, 490, 493, 494, 495,
	497, 498, 590, 499, 500, 0, 502, 503, 0, 505,
	506, 507, 508, 509, 0, 628, 510, 592, 511, 593,
	512, 513, 514, 515, 516, 517, 518, 520, 0, 0,
	522, 523, 524, 526, 527, 528, 529, 532, 533, 534,
	535, 536, 0, 537, 539, 541, 619, 596, 597, 598,
	599, 600, 602, 603, 604, 605, 542, 543, 559, 410,
	404, 360, 402, 403, 407, 408, 411, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 236, 0, 253, 0, 0,
	302, 339, 554, 0, 4863, 399, 0, 452, 456, 99,
	545, 0, 0, 0, 0, 310, 0, 0, 0, 0,
	0, 0, 0, 521, 0, 0, 0, 0, 241, 629,
	544, 615, 0, 0, 0, 406, 96, 0, 0, 0,
	97, 0, 0, 249, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 443, 377, 1948,
	470, 248, 294, 281, 323, 365, 477, 0, 0, 355,
	525, 290, 379, 0, 269, 412, 0, 501, 376, 0,
	484, 504, 0, 396, 275, 435, 491, 492, 0, 0,
	0, 0, 0, 279, 280, 401, 261, 409, 606, 572,
	464, 422, 420, 0, 387, 444, 601, 0, 0, 309,
	0, 304, 400, 540, 267, 519, 438, 405, 359, 467,
	496, 306, 291, 292, 335, 437, 325, 277, 530, 569,
	573, 571, 567, 564, 568, 565, 566, 570, 326, 563,
	0, 538, 547, 581, 561, 589, 546, 586, 556, 301,
	585, 550, 549, 595, 576, 577, 531, 591, 562, 560,
	553, 552, 548, 0, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 237, 0, 238, 239, 240, 242,
	243, 244, 0, 245, 246, 247, 250, 251, 252, 254,
	614, 255, 256, 257, 258, 259, 260, 551, 0, 262,
	263, 264, 265, 266, 268, 270, 271, 272, 273, 274,
	276, 278, 0, 0, 0, 0, 0, 0, 0, 282,
	283, 284, 285, 286, 287, 0, 288, 289, 293, 295,
	296, 297, 298, 299, 300, 303, 0, 305, 307, 0,
	308, 311, 0, 312, 313, 314, 315, 316, 317, 318,
	319, 555, 320, 0, 321, 322, 324, 0, 327, 328,
	329, 330, 331, 0, 332, 557, 558, 333, 334, 336,
	337, 338, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 349, 350, 351, 0, 352, 353, 354, 356, 0,
	357, 358, 361, 362, 363, 364, 0, 366, 574, 0,
	367, 368, 369, 0, 0, 370, 371, 372, 373, 374,
	375, 378, 575, 380, 381, 382, 383, 384, 385, 386,
	616, 388, 389, 390, 391, 392, 393, 394, 578, 579,
	395, 397, 398, 580, 582, 583, 0, 413, 414, 415,
	416, 417, 418, 419, 421, 0, 423, 424, 425, 584,
	426, 427, 428, 429, 0, 430, 431, 432, 433, 434,
	436, 439, 440, 441, 442, 0, 445, 446, 447, 448,
	449, 450, 451, 453, 454, 455, 457, 458, 459, 617,
	460, 461, 462, 463, 587, 465, 466, 618, 468, 469,
	471, 472, 473, 474, 475, 476, 627, 0, 478, 588,
	479, 480, 481, 482, 483, 0, 485, 486, 487, 488,
	489, 490, 493, 494, 495, 497, 498, 590, 499, 500,
	0, 502, 503, 0, 505, 506, 507, 508, 509, 0,
	628, 510, 592, 511, 593, 512, 513, 514, 515, 516,
	517, 518, 520, 0, 0, 522, 523, 524, 526, 527,
	528, 529, 532, 533, 534, 535, 536, 0, 537, 539,
	541, 619, 596, 597, 598, 599, 600, 602, 603, 604,
	605, 542, 543, 559, 410, 404, 360, 402, 403, 407,
	408, 411, 735, 0, 0, 913, 0, 0, 0, 0,
	0, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	236, 0, 253, 742, 95, 302, 339, 554, 0, 0,
	399, 0, 452, 456, 0, 545, 0, 0, 0, 0,
	310, 1395, 747, 0, 753, 0, 759, 1394, 521, 0,
	749, 750, 755, 241, 629, 544, 615, 0, 0, 0,
	406, 0, 0, 0, 0, 0, 0, 0, 249, 0,
	0, 0, 1396, 751, 748, 752, 758, 746, 756, 743,
	754, 0, 443, 377, 594, 470, 248, 294, 281, 323,
	365, 477, 0, 0, 355, 525, 290, 379, 0, 269,
	412, 0, 501, 376, 0, 484, 504, 0, 396, 275,
	435, 491, 492, 740, 745, 0, 761, 0, 279, 280,
	401, 261, 409, 606, 572, 464, 422, 420, 0, 387,
	444, 601, 0, 0, 309, 0, 304, 400, 540, 267,
	519, 438, 405, 359, 467, 496, 306, 291, 292, 335,
	437, 325, 277, 530, 569, 573, 571, 567, 564, 568,
	565, 566, 570, 326, 563, 0, 538, 547, 581, 561,
	589, 546, 586, 556, 301, 585, 550, 549, 595, 576,
	577, 531, 591, 562, 560, 553, 552, 548, 0, 226,
	227, 228, 229, 230, 231, 232, 233, 234, 235, 237,
	0, 238, 239, 240, 242, 243, 244, 739, 245, 246,
	247, 250, 251, 252, 254, 614, 255, 256, 257, 258,
	259, 260, 551, 741, 262, 263, 264, 265, 266, 268,
	270, 271, 272, 273, 274, 276, 278, 0, 0, 0,
	744, 0, 0, 0, 282, 283, 284, 285, 286, 287,
	0, 288, 289, 293, 295, 296, 297, 298, 299, 300,
	303, 0, 305, 307, 0, 308, 311, 0, 312, 313,
	314, 315, 316, 317, 318, 319, 555, 320, 0, 321,
	322, 324, 0, 327, 328, 329, 330, 331, 0, 332,
	557, 558, 333, 334, 336, 337, 338, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 349, 350, 351, 0,
	352, 353, 354, 356, 0, 357, 358, 361, 362, 363,
	364, 0, 366, 574, 0, 367, 368, 369, 0, 0,
	370, 371, 372, 373, 374, 375, 378, 575, 380, 381,
	382, 383, 384, 385, 386, 616, 388, 389, 390, 391,
	392, 393, 394, 578, 579, 395, 397, 398, 580, 582,
	583, 757, 413, 414, 415, 416, 417, 418, 419, 421,
	0, 423, 424, 425, 584, 426, 427, 428, 429, 0,
	430, 431, 432, 433, 434, 436, 439, 440, 441, 442,
	0, 445, 446, 447, 448, 449, 450, 451, 453, 454,
	455, 457, 458, 459, 617, 460, 461, 462, 463, 587,
	465, 466, 618, 468, 469, 471, 472, 473, 474, 475,
	476, 627, 0, 478, 588, 479, 480, 481, 482, 483,
	0, 485, 486, 487, 488, 489, 490, 493, 494, 495,
	497, 498, 590, 499, 500, 0, 502, 503, 760, 505,
	506, 507, 508, 509, 0, 628, 510, 592, 511, 593,
	512, 513, 514, 515, 516, 517, 518, 520, 0, 0,
	522, 523, 524, 526, 527, 528, 529, 532, 533, 534,
	535, 536, 0, 537, 539, 541, 619, 596, 597, 598,
	599, 600, 602, 603, 604, 605, 542, 543, 559, 410,
	404, 360, 402, 403, 407, 408, 411, 735, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 236, 0, 253, 742, 0,
	302, 339, 554, 0, 0, 399, 0, 452, 456, 0,
	545, 0, 0, 0, 0, 310, 0, 747, 0, 753,
	0, 759, 0, 521, 0, 749, 750, 755, 241, 629,
	544, 615, 0, 0, 0, 406, 0, 0, 0, 0,
	0, 0, 0, 249, 0, 0, 0, 0, 751, 748,
	752, 758, 746, 756, 743, 754, 0, 443, 377, 594,
	470, 248, 294, 281, 323, 365, 477, 0, 0, 355,
	525, 290, 379, 0, 269, 412, 2207, 501, 376, 0,
	484, 504, 0, 396, 275, 435, 491, 492, 740, 745,
	0, 761, 0, 279, 280, 401, 261, 409, 606, 572,
	464, 422, 420, 0, 387, 444, 601, 0, 0, 309,
	0, 304, 400, 540, 267, 519, 438, 405, 359, 467,
	496, 306, 291, 292, 335, 437, 325, 277, 530, 569,
	573, 571, 567, 564, 568, 565, 566, 570, 326, 563,
	0, 538, 547, 581, 561, 589, 546, 586, 556, 301,
	585, 550, 549, 595, 576, 577, 531, 591, 562, 560,
	553, 552, 548, 0, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 237, 0, 238, 239, 240, 242,
	243, 244, 739, 245, 246, 247, 250, 251, 252, 254,
	614, 255, 256, 257, 258, 259, 260, 551, 741, 262,
	263, 264, 265, 266, 268, 270, 271, 272, 273, 274,
	276, 278, 0, 0, 732, 744, 0, 0, 733, 282,
	283, 284, 285, 286, 287, 0, 288, 289, 293, 295,
	296, 297, 298, 299, 300, 303, 0, 305, 307, 0,
	308, 311, 0, 312, 313, 314, 315, 316, 317, 318,
	319, 555, 320, 0, 321, 322, 324, 0, 327, 328,
	329, 330, 331, 0, 332, 557, 558, 333, 334, 336,
	337, 338, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 349, 350, 351, 0, 352, 353, 354, 356, 0,
	357, 358, 361, 362, 363, 364, 0, 366, 574, 0,
	367, 368, 369, 0, 0, 370, 371, 372, 373, 374,
	375, 378, 575, 380, 381, 382, 383, 384, 385, 386,
	616, 388, 389, 390, 391, 392, 393, 394, 578, 579,
	395, 397, 398, 580, 582, 583, 757, 413, 414, 415,
	416, 417, 418, 419, 421, 0, 423, 424, 425, 584,
	426, 427, 428, 429, 0, 430, 431, 432, 433, 434,
	436, 439, 440, 441, 442, 0, 445, 446, 447, 448,
	449, 450, 451, 453, 454, 455, 457, 458, 459, 617,
	460, 461, 462, 463, 587, 465, 466, 618, 468, 469,
	471, 472, 473, 474, 475, 476, 627, 734, 478, 588,
	479, 480, 481, 482, 483, 0, 485, 486, 487, 488,
	489, 490, 493, 494, 495, 497, 498, 590, 499, 500,
	0, 502, 503, 760, 505, 506, 507, 508, 509, 0,
	628, 510, 592, 511, 593, 512, 513, 514, 515, 516,
	517, 518, 520, 0, 0, 522, 523, 524, 526, 527,
	528, 529, 532, 533, 534, 535, 536, 0, 537, 539,
	541, 619, 596, 597, 598, 599, 600, 602, 603, 604,
	605, 542, 543, 559, 410, 404, 360, 402, 403, 407,
	408, 411, 223, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	236, 0, 253, 0, 0, 302, 339, 554, 0, 0,
	399, 0, 452, 456, 0, 545, 0, 0, 0, 0,
	310, 0, 0, 0, 0, 0, 0, 0, 521, 0,
	0, 0, 0, 241, 629, 544, 615, 0, 0, 0,
	406, 0, 0, 0, 653, 2223, 0, 0, 249, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 443, 377, 594, 470, 248, 294, 281, 323,
	365, 477, 0, 0, 355, 525, 290, 379, 0, 269,
	412, 0, 501, 376, 0, 484, 504, 0, 396, 275,
	435, 491, 492, 0, 0, 0, 0, 0, 279, 280,
	401, 261, 409, 606, 572, 464, 422, 420, 0, 387,
	444, 601, 0, 0, 309, 0, 304, 400, 540, 267,
	519, 438, 405, 359, 467, 496, 306, 291, 292, 335,
	437, 325, 277, 530, 569, 573, 571, 567, 564, 568,
	565, 566, 570, 326, 563, 0, 538, 547, 581, 561,
	589, 546, 586, 556, 301, 585, 550, 549, 595, 576,
	577, 531, 591, 562, 560, 553, 552, 548, 0, 226,
	227, 228, 229, 230, 231, 232, 233, 234, 235, 237,
	0, 238, 239, 240, 242, 243, 244, 0, 245, 246,
	247, 250, 251, 252, 254, 614, 255, 256, 257, 258,
	259, 260, 551, 0, 262, 263, 264, 265, 266, 268,
	270, 271, 272, 273, 274, 276, 278, 0, 0, 0,
	2227, 0, 0, 0, 282, 283, 284, 285, 286, 287,
	0, 288, 289, 293, 295, 296, 297, 298, 299, 300,
	303, 0, 305, 307, 0, 308, 311, 0, 312, 313,
	314, 315, 316, 317, 318, 319, 555, 320, 0, 321,
	322, 324, 0, 327, 328, 329, 330, 331, 0, 332,
	557, 558, 333, 334, 336, 337, 338, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 349, 350, 351, 0,
	352, 353, 354, 356, 0, 357, 358, 361, 362, 363,
	364, 0, 366, 574, 0, 367, 368, 369, 0, 0,
	370, 371, 372, 373, 374, 375, 378, 575, 380, 381,
	382, 383, 384, 385, 386, 616, 388, 389, 390, 391,
	392, 393, 394, 578, 579, 395, 397, 398, 580, 582,
	583, 0, 413, 414, 415, 416, 417, 418, 419, 421,
	0, 423, 424, 425, 584, 426, 427, 428, 429, 0,
	430, 431, 432, 433, 434, 436, 439, 440, 441, 442,
	0, 445, 446, 447, 448, 449, 450, 451, 453, 454,
	455, 457, 458, 459, 617, 460, 461, 462, 463, 587,
	465, 466, 618, 468, 469, 471, 472, 473, 474, 475,
	476, 627, 0, 478, 588, 479, 480, 481, 482, 483,
	0, 485, 486, 487, 488, 489, 490, 493, 494, 495,
	497, 498, 590, 499, 500, 0, 2224, 503, 0, 505,
	506, 507, 508, 509, 0, 628, 510, 592, 511, 593,
	512, 513, 514, 515, 516, 517, 518, 520, 0, 0,
	522, 523, 524, 526, 527, 528, 529, 532, 533, 534,
	535, 536, 0, 537, 539, 541, 619, 596, 597, 598,
	599, 600, 602, 603, 604, 605, 542, 543, 559, 410,
	404, 360, 402, 403, 407, 408, 411, 735, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 830, 236, 0, 253, 742, 1132,
	302, 339, 554, 0, 0, 399, 0, 452, 456, 0,
	545, 0, 0, 0, 0, 310, 0, 747, 0, 753,
	0, 759, 0, 521, 0, 749, 750, 755, 241, 629,
	544, 615, 0, 0, 0, 406, 0, 0, 0, 0,
	0, 0, 0, 249, 0, 0, 0, 0, 751, 748,
	752, 758, 746, 756, 743, 754, 0, 443, 377, 594,
	470, 248, 294, 281, 323, 365, 477, 0, 0, 355,
	525, 290, 379, 0, 269, 412, 0, 501, 376, 0,
	484, 504, 0, 396, 275, 435, 491, 492, 740, 745,
	0, 761, 0, 279, 280, 401, 261, 409, 606, 572,
	464, 422, 420, 0, 387, 444, 601, 0, 0, 309,
	0, 304, 400, 540, 267, 519, 438, 405, 359, 467,
	496, 306, 291, 292, 335, 437, 325, 277, 530, 569,
	573, 571, 567, 564, 568, 565, 566, 570, 326, 563,
	0, 538, 547, 581, 561, 589, 546, 586, 556, 301,
	585, 550, 549, 595, 576, 577, 531, 591, 562, 560,
	553, 552, 548, 0, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 237, 0, 238, 239, 240, 242,
	243, 244, 739, 245, 246, 247, 250, 251, 252, 254,
	614, 255, 256, 257, 258, 259, 260, 551, 741, 262,
	263, 264, 265, 266, 268, 270, 271, 272, 273, 274,
	276, 278, 0, 0, 732, 744, 0, 0, 733, 282,
	283, 284, 285, 286, 287, 0, 288, 289, 293, 295,
	296, 297, 298, 299, 300, 303, 0, 305, 307, 0,
	308, 311, 0, 312, 313, 314, 315, 316, 317, 318,
	319, 555, 320, 0, 321, 322, 324, 0, 327, 328,
	329, 330, 331, 0, 332, 557, 558, 333, 334, 336,
	337, 338, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 349, 350, 351, 0, 352, 353, 354, 356, 0,
	357, 358, 361, 362, 363, 364, 0, 366, 574, 0,
	367, 368, 369, 0, 0, 370, 371, 372, 373, 828,
	375, 378, 575, 380, 381, 382, 383, 384, 385, 386,
	616, 388, 389, 390, 391, 392, 393, 394, 578, 579,
	395, 397, 398, 580, 582, 583, 757, 413, 414, 415,
	416, 417, 418, 419, 421, 0, 423, 424, 425, 584,
	426, 427, 428, 429, 0, 430, 431, 432, 433, 434,
	436, 439, 440, 441, 442, 0, 445, 446, 447, 448,
	449, 450, 451, 453, 454, 455, 457, 458, 459, 617,
	460, 461, 462, 463, 587, 465, 466, 618, 468, 469,
	471, 472, 473, 474, 475, 476, 627, 734, 478, 588,
	479, 480, 481, 482, 483, 0, 485, 486, 487, 488,
	489, 490, 493, 494, 495, 497, 498, 590, 499, 500,
	0, 502, 503, 760, 505, 506, 507, 508, 509, 0,
	628, 510, 592, 511, 593, 512, 513, 514, 515, 516,
	517, 518, 520, 0, 0, 522, 523, 524, 526, 527,
	528, 529, 532, 533, 534, 535, 536, 0, 537, 539,
	541, 619, 596, 597, 598, 599, 600, 602, 603, 604,
	605, 542, 543, 559, 410, 404, 360, 402, 403, 407,
	408, 411, 735, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 826,
	236, 0, 253, 742, 0, 302, 339, 554, 0, 0,
	399, 0, 452, 456, 0, 545, 0, 0, 0, 0,
	310, 0, 747, 0, 753, 0, 759, 0, 521, 0,
	749, 750, 755, 241, 629, 544, 615, 0, 0, 0,
	406, 0, 0, 0, 0, 0, 0, 0, 249, 0,
	0, 0, 0, 751, 748, 752, 758, 746, 756, 743,
	754, 0, 443, 377, 594, 470, 248, 294, 281, 323,
	365, 477, 0, 0, 355, 525, 290, 379, 0, 269,
	412, 0, 501, 376, 0, 484, 504, 0, 396, 275,
	435, 491, 492, 740, 745, 0, 761, 0, 279, 280,
	401, 261, 409, 606, 572, 464, 422, 420, 0, 387,
	444, 601, 0, 0, 309, 0, 304, 400, 540, 267,
	519, 438, 405, 359, 467, 496, 306, 291, 292, 335,
	437, 325, 277, 530, 569, 573, 571, 567, 564, 568,
	565, 566, 570, 326, 563, 0, 538, 547, 581, 561,
	589, 546, 586, 556, 301, 585, 550, 549, 595, 576,
	577, 531, 591, 562, 560, 553, 552, 548, 0, 226,
	227, 228, 229, 230, 231, 232, 233, 234, 235, 237,
	0, 238, 239, 240, 242, 243, 244, 739, 245, 246,
	247, 250, 251, 252, 254, 614, 255, 256, 257, 258,
	259, 260, 551, 741, 262, 263, 264, 265, 266, 268,
	270, 271, 272, 273, 274, 276, 278, 0, 0, 732,
	744, 0, 0, 733, 282, 283, 284, 285, 286, 287,
	0, 288, 289, 293, 295, 296, 297, 298, 299, 300,
	303, 0, 305, 307, 0, 308, 311, 0, 312, 313,
	314, 315, 316, 317, 318, 319, 555, 320, 0, 321,
	322, 324, 0, 327, 328, 329, 330, 331, 0, 332,
	557, 558, 333, 334, 336, 337, 338, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 349, 350, 351, 0,
	352, 353, 354, 356, 0, 357, 358, 361, 362, 363,
	364, 0, 366, 574, 0, 367, 368, 369, 0, 0,
	370, 371, 372, 373, 374, 375, 378, 575, 380, 381,
	382, 383, 384, 385, 386, 616, 388, 389, 390, 391,
	392, 393, 394, 578, 579, 395, 397, 398, 580, 582,
	583, 757, 413, 414, 415, 416, 417, 418, 419, 421,
	0, 423, 424, 425, 584, 426, 427, 428, 429, 0,
	430, 431, 432, 433, 434, 436, 439, 440, 441, 442,
	0, 445, 446, 447, 448, 449, 450, 451, 453, 454,
	455, 457, 458, 459, 617, 460, 461, 462, 463, 587,
	465, 466, 618, 468, 469, 471, 472, 473, 474, 475,
	476, 627, 734, 478, 588, 479, 480, 481, 482, 483,
	0, 485, 486, 487, 488, 489, 490, 493, 494, 495,
	497, 498, 590, 499, 500, 0, 502, 503, 760, 505,
	506, 507, 508, 509, 0, 628, 510, 592, 511, 593,
	512, 513, 514, 515, 516, 517, 518, 520, 0, 0,
	522, 523, 524, 526, 527, 528, 529, 532, 533, 534,
	535, 536, 0, 537, 539, 541, 619, 596, 597, 598,
	599, 600, 602, 603, 604, 605, 542, 543, 559, 410,
	404, 360, 402, 403, 407, 408, 411, 735, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 236, 0, 253, 742, 0,
	302, 339, 554, 0, 0, 399, 0, 452, 456, 0,
	545, 0, 0, 0, 0, 310, 0, 747, 0, 753,
	0, 759, 0, 521, 0, 749, 750, 755, 241, 629,
	544, 615, 0, 0, 0, 406, 0, 0, 0, 0,
	0, 0, 0, 249, 0, 0, 0, 0, 751, 748,
	752, 758, 746, 756, 743, 754, 0, 443, 377, 594,
	470, 248, 294, 281, 323, 365, 477, 0, 0, 355,
	525, 290, 379, 0, 269, 412, 0, 501, 376, 0,
	484, 504, 0, 396, 275, 435, 491, 492, 740, 745,
	0, 761, 0, 279, 280, 401, 261, 409, 606, 572,
	464, 422, 420, 0, 387, 444, 601, 0, 0, 309,
	0, 304, 400, 540, 267, 519, 438, 405, 359, 467,
	496, 306, 291, 292, 335, 437, 325, 277, 530, 569,
	573, 571, 567, 564, 568, 565, 566, 570, 326, 563,
	0, 538, 547, 581, 561, 589, 546, 586, 556, 301,
	585, 550, 549, 595, 576, 577, 531, 591, 562, 560,
	553, 552, 548, 0, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 237, 0, 238, 239, 240, 242,
	243, 244, 739, 245, 246, 247, 250, 251, 252, 254,
	614, 255, 256, 257, 258, 259, 260, 551, 741, 262,
	263, 264, 265, 266, 268, 270, 271, 272, 273, 274,
	276, 278, 0, 0, 732, 744, 0, 0, 733, 282,
	283, 284, 285, 286, 287, 0, 288, 289, 293, 295,
	296, 297, 298, 299, 300, 303, 0, 305, 307, 0,
	308, 311, 0, 312, 313, 314, 315, 316, 317, 318,
	319, 555, 320, 0, 321, 322, 324, 0, 327, 328,
	329, 330, 331, 0, 332, 557, 558, 333, 334, 336,
	337, 338, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 349, 350, 351, 0, 352, 353, 354, 356, 0,
	357, 358, 361, 362, 363, 364, 0, 366, 574, 0,
	367, 368, 369, 0, 0, 370, 371, 372, 373, 374,
	375, 378, 575, 380, 381, 382, 383, 384, 385, 386,
	616, 388, 389, 390, 391, 392, 393, 394, 578, 579,
	395, 397, 398, 580, 582, 583, 757, 413, 414, 415,
	416, 417, 418, 419, 421, 0, 423, 424, 425, 584,
	426, 427, 428, 429, 0, 430, 431, 432, 433, 434,
	436, 439, 440, 441, 442, 0, 445, 446, 447, 448,
	449, 450, 451, 453, 454, 455, 457, 458, 459, 617,
	460, 461, 462, 463, 587, 465, 466, 618, 468, 469,
	471, 472, 473, 474, 475, 476, 627, 734, 478, 588,
	479, 480, 481, 482, 483, 0, 485, 486, 487, 488,
	489, 490, 493, 494, 495, 497, 498, 590, 499, 500,
	0, 502, 503, 760, 505, 506, 507, 508, 509, 0,
	628, 510, 592, 511, 593, 512, 513, 514, 515, 516,
	517, 518, 520, 0, 0, 522, 523, 524, 526, 527,
	528, 529, 532, 533, 534, 535, 536, 0, 537, 539,
	541, 619, 596, 597, 598, 599, 600, 602, 603, 604,
	605, 542, 543, 559, 410, 404, 360, 402, 403, 407,
	408, 411, 223, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	236, 3337, 253, 0, 0, 302, 339, 554, 0, 0,
	399, 0, 452, 456, 0, 545, 0, 0, 0, 0,
	310, 0, 0, 0, 0, 0, 0, 0, 521, 0,
	0, 0, 0, 241, 629, 544, 615, 0, 0, 0,
	406, 0, 0, 0, 0, 0, 0, 0, 249, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 443, 377, 594, 470, 248, 294, 281, 323,
	365, 477, 0, 0, 355, 525, 290, 379, 0, 269,
	412, 0, 501, 376, 0, 484, 504, 0, 396, 275,
	435, 491, 492, 0, 0, 0, 0, 0, 279, 280,
	401, 261, 409, 606, 572, 464, 422, 420, 0, 387,
	444, 601, 0, 0, 309, 0, 304, 400, 540, 267,
	519, 438, 405, 359, 467, 496, 306, 291, 292, 335,
	437, 325, 277, 530, 569, 573, 571, 567, 564, 568,
	565, 566, 570, 326, 563, 0, 538, 547, 581, 561,
	589, 546, 586, 556, 301, 585, 550, 549, 595, 576,
	577, 531, 591, 562, 560, 553, 552, 548, 0, 226,
	227, 228, 229, 230, 231, 232, 233, 234, 235, 237,
	0, 238, 239, 240, 242, 243, 244, 0, 245, 246,
	247, 250, 251, 252, 254, 614, 255, 256, 257, 258,
	259, 260, 551, 0, 262, 263, 264, 265, 266, 268,
	270, 271, 272, 273, 274, 276, 278, 0, 0, 0,
	0, 0, 0, 0, 282, 283, 284, 285, 286, 287,
	0, 288, 289, 293, 295, 296, 297, 298, 299, 300,
	303, 0, 305, 307, 0, 308, 311, 0, 312, 313,
	314, 315, 316, 317, 318, 319, 555, 320, 0, 321,
	322, 324, 0, 327, 328, 329, 330, 331, 0, 332,
	557, 558, 333, 334, 336, 337, 338, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 349, 350, 351, 0,
	352, 353, 354, 356, 0, 357, 358, 361, 362, 363,
	364, 0, 366, 574, 0, 367, 368, 369, 0, 0,
	370, 371, 372, 373, 374, 375, 378, 575, 380, 381,
	382, 383, 384, 385, 386, 616, 388, 389, 390, 391,
	392, 393, 394, 578, 579, 395, 397, 398, 580, 582,
	583, 0, 413, 414, 415, 416, 417, 418, 419, 421,
	0, 423, 424, 425, 584, 426, 427, 428, 429, 0,
	430, 431, 432, 433, 434, 436, 439, 440, 441, 442,
	0, 445, 446, 447, 448, 449, 450, 451, 453, 454,
	455, 457, 458, 459, 617, 460, 461, 462, 463, 587,
	465, 466, 618, 468, 469, 471, 472, 473, 474, 475,
	476, 627, 0, 478, 588, 479, 480, 481, 482, 483,
	0, 485, 486, 487, 488, 489, 490, 493, 494, 495,
	497, 498, 590, 499, 500, 0, 502, 503, 0, 505,
	506, 507, 508, 509, 0, 628, 510, 592, 511, 593,
	512, 513, 514, 515, 516, 517, 518, 520, 0, 0,
	522, 523, 524, 526, 527, 528, 529, 532, 533, 534,
	535, 536, 0, 537, 539, 541, 619, 596, 597, 598,
	599, 600, 602, 603, 604, 605, 542, 543, 559, 410,
	404, 360, 402, 403, 407, 408, 411, 0, 735, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 742,
	954, 302, 891, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 747, 0,
	753, 0, 759, 0, 521, 0, 749, 750, 755, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 751,
	748, 752, 758, 746, 756, 743, 754, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 740,
	745, 0, 761, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 739, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 741,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 732, 744, 0, 0, 733,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 757, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 734, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 760, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 735, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 742, 0, 302, 889, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 747, 0, 753, 0, 759, 0, 521,
	0, 749, 750, 755, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 751, 748, 752, 758, 746, 756,
	743, 754, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 740, 745, 0, 761, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 739, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 741, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	732, 744, 0, 0, 733, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 757, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 734, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 760,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 735, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 742,
	0, 302, 886, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 747, 0,
	753, 0, 759, 0, 521, 0, 749, 750, 755, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 751,
	748, 752, 758, 746, 756, 743, 754, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 740,
	745, 0, 761, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 739, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 741,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 732, 744, 0, 0, 733,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	884, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 757, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 734, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 760, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 735, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 742, 0, 302, 339, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 747, 0, 753, 0, 759, 0, 521,
	0, 749, 750, 755, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 751, 748, 752, 758, 746, 756,
	743, 754, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 740, 745, 0, 761, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 739, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 741, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	732, 744, 0, 0, 733, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 728, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 757, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 734, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 760,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 735, 0,
	0, 913, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 742,
	0, 302, 339, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 1386, 0, 310, 0, 747, 0,
	753, 0, 759, 0, 521, 0, 749, 750, 755, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 751,
	748, 752, 758, 746, 756, 743, 754, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 740,
	745, 0, 761, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 739, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 741,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 744, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 757, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 760, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 0, 0, 302, 339, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 0,
	2129, 302, 339, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 0, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 0, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 735, 0, 0, 913, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 742, 3830, 302, 339, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 747, 0, 753, 0, 759, 0, 521,
	0, 749, 750, 755, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 751, 748, 752, 758, 746, 756,
	743, 754, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 740, 745, 0, 761, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 739, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 741, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 744, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 757, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 760,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 0,
	0, 302, 339, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 0, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 0, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 0, 3214, 302, 339, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 797, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 742,
	1081, 302, 339, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 747, 0,
	753, 0, 759, 0, 521, 0, 749, 750, 755, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 751,
	748, 752, 758, 746, 756, 743, 754, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 740,
	745, 0, 761, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 739, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 741,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 744, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 757, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 760, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 735, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 742, 0, 302, 339, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 747, 0, 753, 0, 759, 0, 521,
	0, 749, 750, 755, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 751, 748, 752, 758, 746, 756,
	743, 754, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 740, 745, 0, 761, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 739, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 741, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 744, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 757, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 760,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 2806, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 742,
	0, 302, 339, 0, 0, 0, 399, 0, 452, 456,
	0, 0, 0, 0, 0, 0, 310, 0, 747, 2325,
	753, 0, 759, 0, 521, 0, 749, 750, 755, 241,
	871, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 751,
	748, 752, 758, 746, 756, 743, 754, 0, 443, 377,
	0, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 740,
	745, 0, 761, 0, 279, 280, 401, 261, 409, 0,
	0, 464, 422, 420, 0, 387, 444, 0, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 538, 874, 864, 856, 857, 858, 859, 860,
	861, 0, 876, 877, 878, 879, 880, 531, 870, 0,
	855, 862, 863, 865, 2328, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 739, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 0, 741,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 744, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 0, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 0, 0, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 0,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 0, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 0,
	0, 395, 397, 398, 0, 2326, 0, 757, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	0, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 0, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	2331, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 0, 499,
	500, 0, 502, 503, 760, 505, 506, 507, 508, 509,
	0, 628, 510, 0, 511, 0, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 0, 0, 0, 223, 0, 0, 0,
	0, 0, 542, 543, 2327, 410, 404, 360, 402, 403,
	407, 408, 411, 2801, 236, 0, 253, 0, 0, 302,
	2243, 554, 0, 0, 399, 0, 452, 456, 0, 545,
	0, 0, 0, 0, 310, 0, 0, 0, 0, 0,
	2799, 0, 521, 0, 0, 0, 0, 241, 629, 544,
	615, 0, 0, 0, 406, 0, 0, 0, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 443, 377, 594, 470,
	248, 294, 281, 323, 365, 477, 0, 0, 355, 525,
	290, 379, 0, 269, 412, 0, 501, 376, 0, 484,
	504, 0, 396, 275, 435, 491, 492, 0, 0, 2247,
	0, 0, 279, 280, 401, 261, 409, 606, 572, 464,
	422, 420, 0, 387, 444, 601, 0, 0, 309, 0,
	304, 400, 540, 267, 519, 438, 405, 359, 467, 496,
	306, 291, 292, 335, 437, 325, 277, 530, 569, 573,
	571, 567, 564, 568, 565, 566, 570, 326, 563, 0,
	538, 547, 581, 561, 589, 546, 586, 556, 301, 585,
	550, 549, 595, 576, 577, 531, 591, 562, 560, 553,
	552, 548, 0, 226, 227, 228, 229, 230, 231, 232,
	233, 234, 235, 237, 0, 238, 239, 240, 242, 243,
	244, 0, 245, 246, 247, 250, 251, 252, 254, 614,
	255, 256, 257, 258, 259, 260, 551, 0, 262, 263,
	264, 265, 266, 268, 270, 271, 272, 273, 274, 276,
	278, 0, 0, 0, 0, 0, 0, 0, 282, 283,
	284, 285, 286, 287, 0, 288, 289, 293, 295, 296,
	297, 298, 299, 300, 303, 0, 305, 307, 0, 308,
	311, 0, 2253, 313, 314, 315, 316, 317, 318, 319,
	555, 320, 0, 321, 322, 324, 2252, 327, 328, 329,
	330, 331, 0, 332, 557, 558, 333, 334, 336, 337,
	338, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	349, 350, 351, 0, 352, 353, 354, 356, 0, 357,
	358, 361, 362, 363, 364, 0, 366, 574, 0, 367,
	368, 369, 0, 0, 370, 371, 372, 373, 374, 375,
	378, 575, 380, 381, 382, 383, 384, 385, 386, 616,
	388, 389, 390, 391, 392, 393, 394, 578, 579, 395,
	397, 398, 580, 582, 583, 0, 413, 414, 415, 416,
	417, 418, 419, 421, 0, 423, 424, 425, 584, 426,
	427, 428, 429, 2251, 430, 431, 432, 433, 434, 436,
	439, 440, 441, 442, 0, 445, 446, 447, 448, 449,
	450, 451, 453, 454, 455, 457, 458, 459, 617, 460,
	461, 462, 463, 587, 465, 466, 618, 468, 469, 471,
	472, 473, 474, 475, 476, 627, 0, 478, 588, 479,
	480, 481, 482, 483, 0, 485, 486, 487, 488, 489,
	490, 493, 494, 495, 497, 498, 590, 499, 500, 0,
	502, 503, 0, 505, 506, 507, 508, 509, 0, 628,
	510, 592, 511, 593, 512, 513, 514, 515, 516, 517,
	518, 520, 0, 2250, 522, 523, 524, 526, 527, 528,
	529, 532, 533, 534, 535, 536, 0, 537, 539, 541,
	619, 596, 597, 598, 599, 600, 602, 603, 604, 605,
	542, 543, 559, 410, 404, 360, 402, 403, 407, 408,
	411, 223, 0, 0, 0, 2249, 2244, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 236,
	0, 253, 0, 0, 302, 339, 554, 0, 0, 399,
	0, 452, 456, 0, 545, 0, 0, 0, 0, 310,
	0, 0, 0, 2766, 0, 0, 0, 521, 0, 0,
	0, 0, 241, 629, 544, 615, 0, 0, 0, 406,
	0, 0, 0, 0, 0, 0, 0, 249, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 443, 377, 594, 470, 248, 294, 281, 323, 365,
	477, 0, 0, 355, 525, 290, 379, 0, 269, 412,
	0, 501, 376, 0, 484, 504, 0, 396, 275, 435,
	491, 492, 0, 0, 2247, 0, 0, 279, 280, 401,
	261, 409, 606, 572, 464, 422, 420, 0, 387, 444,
	601, 0, 0, 309, 0, 304, 400, 540, 267, 519,
	438, 405, 359, 467, 496, 306, 291, 292, 335, 437,
	325, 277, 530, 569, 573, 571, 567, 564, 568, 565,
	566, 570, 326, 563, 0, 538, 547, 581, 561, 589,
	546, 586, 556, 301, 585, 550, 549, 595, 576, 577,
	531, 591, 562, 560, 553, 552, 548, 0, 226, 227,
	228, 229, 230, 231, 232, 233, 234, 235, 237, 0,
	238, 239, 240, 242, 243, 244, 0, 245, 246, 247,
	250, 251, 252, 254, 614, 255, 256, 257, 258, 259,
	260, 551, 0, 262, 263, 264, 265, 266, 268, 270,
	271, 272, 273, 274, 276, 278, 0, 0, 0, 0,
	0, 0, 0, 282, 283, 284, 285, 286, 287, 0,
	288, 289, 293, 295, 296, 297, 298, 299, 300, 303,
	0, 305, 307, 0, 308, 311, 0, 2253, 313, 314,
	315, 316, 317, 318, 319, 555, 320, 0, 321, 322,
	324, 2252, 327, 328, 329, 330, 331, 0, 332, 557,
	558, 333, 334, 336, 337, 338, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 349, 350, 351, 0, 352,
	353, 354, 356, 0, 357, 358, 361, 362, 363, 364,
	0, 366, 574, 0, 367, 368, 369, 0, 0, 370,
	371, 372, 373, 374, 375, 378, 575, 380, 381, 382,
	383, 384, 385, 386, 616, 388, 389, 390, 391, 392,
	393, 394, 578, 579, 395, 397, 398, 580, 582, 583,
	0, 413, 414, 415, 416, 417, 418, 419, 421, 0,
	423, 424, 425, 584, 426, 427, 428, 429, 2251, 430,
	431, 432, 433, 434, 436, 439, 440, 441, 442, 0,
	445, 446, 447, 448, 449, 450, 451, 453, 454, 455,
	457, 458, 459, 617, 460, 461, 462, 463, 587, 465,
	466, 618, 468, 469, 471, 472, 473, 474, 475, 476,
	627, 0, 478, 588, 479, 480, 481, 482, 483, 0,
	485, 486, 487, 488, 489, 490, 493, 494, 495, 497,
	498, 590, 499, 500, 0, 502, 503, 0, 505, 506,
	507, 508, 509, 0, 628, 510, 592, 511, 593, 512,
	513, 514, 515, 516, 517, 518, 520, 0, 2250, 522,
	523, 524, 526, 527, 528, 529, 532, 533, 534, 535,
	536, 0, 537, 539, 541, 619, 596, 597, 598, 599,
	600, 602, 603, 604, 605, 542, 543, 559, 410, 404,
	360, 402, 403, 407, 408, 411, 223, 0, 0, 0,
	2249, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 236, 0, 253, 0, 0, 302,
	339, 554, 0, 0, 399, 0, 452, 456, 0, 545,
	0, 0, 0, 0, 310, 0, 0, 0, 0, 0,
	0, 0, 521, 0, 0, 0, 0, 241, 629, 544,
	615, 0, 0, 0, 406, 0, 0, 0, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 443, 377, 594, 470,
	248, 294, 281, 323, 365, 477, 0, 0, 355, 525,
	290, 379, 0, 269, 412, 0, 501, 376, 0, 484,
	504, 0, 396, 275, 435, 491, 492, 0, 0, 2247,
	0, 0, 279, 280, 401, 261, 409, 606, 572, 464,
	422, 420, 0, 387, 444, 601, 0, 0, 309, 0,
	304, 400, 540, 267, 519, 438, 405, 359, 467, 496,
	306, 291, 292, 335, 437, 325, 277, 530, 569, 573,
	571, 567, 564, 568, 565, 566, 570, 326, 563, 0,
	538, 547, 581, 561, 589, 546, 586, 556, 301, 585,
	550, 549, 595, 576, 577, 531, 591, 562, 560, 553,
	552, 548, 0, 226, 227, 228, 229, 230, 231, 232,
	233, 234, 235, 237, 0, 238, 239, 240, 242, 243,
	244, 0, 245, 246, 247, 250, 251, 252, 254, 614,
	255, 256, 257, 258, 259, 260, 551, 0, 262, 263,
	264, 265, 266, 268, 270, 271, 272, 273, 274, 276,
	278, 0, 0, 0, 0, 0, 0, 0, 282, 283,
	284, 285, 286, 287, 0, 288, 289, 293, 295, 296,
	297, 298, 299, 300, 303, 0, 305, 307, 0, 308,
	311, 0, 2253, 313, 314, 315, 316, 317, 318, 319,
	555, 320, 0, 321, 322, 324, 2252, 327, 328, 329,
	330, 331, 0, 332, 557, 558, 333, 334, 336, 337,
	338, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	349, 350, 351, 0, 352, 353, 354, 356, 0, 357,
	358, 361, 362, 363, 364, 0, 366, 574, 0, 367,
	368, 369, 0, 0, 370, 371, 372, 373, 374, 375,
	378, 575, 380, 381, 382, 383, 384, 385, 386, 616,
	388, 389, 390, 391, 392, 393, 394, 578, 579, 395,
	397, 398, 580, 582, 583, 0, 413, 414, 415, 416,
	417, 418, 419, 421, 0, 423, 424, 425, 584, 426,
	427, 428, 429, 2251, 430, 431, 432, 433, 434, 436,
	439, 440, 441, 442, 0, 445, 446, 447, 448, 449,
	450, 451, 453, 454, 455, 457, 458, 459, 617, 460,
	461, 462, 463, 587, 465, 466, 618, 468, 469, 471,
	472, 473, 474, 475, 476, 627, 0, 478, 588, 479,
	480, 481, 482, 483, 0, 485, 486, 487, 488, 489,
	490, 493, 494, 495, 497, 498, 590, 499, 500, 0,
	502, 503, 0, 505, 506, 507, 508, 509, 0, 628,
	510, 592, 511, 593, 512, 513, 514, 515, 516, 517,
	518, 520, 0, 2250, 522, 523, 524, 526, 527, 528,
	529, 532, 533, 534, 535, 536, 0, 537, 539, 541,
	619, 596, 597, 598, 599, 600, 602, 603, 604, 605,
	542, 543, 559, 410, 404, 360, 402, 403, 407, 408,
	411, 872, 0, 0, 0, 2249, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 236,
	0, 253, 742, 0, 302, 339, 0, 0, 0, 399,
	0, 452, 456, 0, 0, 0, 0, 0, 0, 310,
	0, 747, 2325, 753, 0, 759, 0, 521, 0, 749,
	750, 755, 241, 871, 544, 615, 0, 0, 0, 406,
	0, 0, 0, 0, 0, 0, 0, 249, 0, 0,
	0, 0, 751, 748, 752, 758, 746, 756, 743, 754,
	0, 443, 377, 0, 470, 248, 294, 281, 323, 365,
	477, 0, 0, 355, 525, 290, 379, 0, 269, 412,
	0, 501, 376, 0, 484, 504, 0, 396, 275, 435,
	491, 492, 740, 745, 0, 761, 0, 279, 280, 401,
	261, 409, 0, 0, 464, 422, 420, 0, 387, 444,
	0, 0, 0, 309, 0, 304, 400, 540, 267, 519,
	438, 405, 359, 467, 496, 306, 291, 292, 335, 437,
	325, 277, 530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 0, 538, 874, 864, 856, 857,
	858, 859, 860, 861, 0, 876, 877, 878, 879, 880,
	531, 870, 0, 855, 862, 863, 865, 2328, 226, 227,
	228, 229, 230, 231, 232, 233, 234, 235, 237, 0,
	238, 239, 240, 242, 243, 244, 739, 245, 246, 247,
	250, 251, 252, 254, 614, 255, 256, 257, 258, 259,
	260, 0, 741, 262, 263, 264, 265, 266, 268, 270,
	271, 272, 273, 274, 276, 278, 0, 0, 0, 744,
	0, 0, 0, 282, 283, 284, 285, 286, 287, 0,
	288, 289, 293, 295, 296, 297, 298, 299, 300, 303,
	0, 305, 307, 0, 308, 311, 0, 312, 313, 314,
	315, 316, 317, 318, 319, 0, 320, 0, 321, 322,
	324, 0, 327, 328, 329, 330, 331, 0, 332, 0,
	0, 333, 334, 336, 337, 338, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 349, 350, 351, 0, 352,
	353, 354, 356, 0, 357, 358, 361, 362, 363, 364,
	0, 366, 0, 0, 367, 368, 369, 0, 0, 370,
	371, 372, 373, 374, 375, 378, 0, 380, 381, 382,
	383, 384, 385, 386, 616, 388, 389, 390, 391, 392,
	393, 394, 0, 0, 395, 397, 398, 0, 2326, 0,
	757, 413, 414, 415, 416, 417, 418, 419, 421, 0,
	423, 424, 425, 0, 426, 427, 428, 429, 0, 430,
	431, 432, 433, 434, 436, 439, 440, 441, 442, 0,
	445, 446, 447, 448, 449, 450, 451, 453, 454, 455,
	457, 458, 459, 617, 460, 461, 462, 463, 0, 465,
	466, 618, 468, 469, 471, 472, 473, 474, 475, 476,
	627, 0, 478, 2331, 479, 480, 481, 482, 483, 0,
	485, 486, 487, 488, 489, 490, 493, 494, 495, 497,
	498, 0, 499, 500, 0, 502, 503, 760, 505, 506,
	507, 508, 509, 0, 628, 510, 0, 511, 0, 512,
	513, 514, 515, 516, 517, 518, 520, 0, 0, 522,
	523, 524, 526, 527, 528, 529, 532, 533, 534, 535,
	536, 0, 537, 539, 541, 619, 0, 0, 0, 0,
	872, 0, 0, 0, 0, 542, 543, 2327, 410, 404,
	360, 402, 403, 407, 408, 411, 0, 0, 236, 0,
	253, 742, 0, 302, 339, 0, 0, 0, 399, 0,
	452, 456, 0, 0, 0, 0, 0, 0, 310, 2786,
	747, 2325, 753, 0, 759, 0, 521, 0, 749, 750,
	755, 241, 871, 544, 615, 0, 0, 0, 406, 0,
	0, 0, 0, 0, 0, 0, 249, 0, 0, 0,
	0, 751, 748, 752, 758, 746, 756, 743, 754, 0,
	443, 377, 0, 470, 248, 294, 281, 323, 365, 477,
	0, 0, 355, 525, 290, 379, 0, 269, 412, 0,
	501, 376, 0, 484, 504, 0, 396, 275, 435, 491,
	492, 740, 745, 0, 761, 0, 279, 280, 401, 261,
	409, 0, 0, 464, 422, 420, 0, 387, 444, 0,
	0, 0, 309, 0, 304, 400, 540, 267, 519, 438,
	405, 359, 467, 496, 306, 291, 292, 335, 437, 325,
	277, 530, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 538, 874, 864, 856, 857, 858,
	859, 860, 861, 0, 876, 877, 878, 879, 880, 531,
	870, 0, 855, 862, 863, 865, 2328, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 237, 0, 238,
	239, 240, 242, 243, 244, 739, 245, 246, 247, 250,
	251, 252, 254, 614, 255, 256, 257, 258, 259, 260,
	0, 741, 262, 263, 264, 265, 266, 268, 270, 271,
	272, 273, 274, 276, 278, 0, 0, 0, 744, 0,
	0, 0, 282, 283, 284, 285, 286, 287, 0, 288,
	289, 293, 295, 296, 297, 298, 299, 300, 303, 0,
	305, 307, 0, 308, 311, 0, 312, 313, 314, 315,
	316, 317, 318, 319, 0, 320, 0, 321, 322, 324,
	0, 327, 328, 329, 330, 331, 0, 332, 0, 0,
	333, 334, 336, 337, 338, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 349, 350, 351, 0, 352, 353,
	354, 356, 0, 357, 358, 361, 362, 363, 364, 0,
	366, 0, 0, 367, 368, 369, 0, 0, 370, 371,
	372, 373, 374, 375, 378, 0, 380, 381, 382, 383,
	384, 385, 386, 616, 388, 389, 390, 391, 392, 393,
	394, 0, 0, 395, 397, 398, 0, 2326, 0, 757,
	413, 414, 415, 416, 417, 418, 419, 421, 0, 423,
	424, 425, 0, 426, 427, 428, 429, 0, 430, 431,
	432, 433, 434, 436, 439, 440, 441, 442, 0, 445,
	446, 447, 448, 449, 450, 451, 453, 454, 455, 457,
	458, 459, 617, 460, 461, 462, 463, 0, 465, 466,
	618, 468, 469, 471, 472, 473, 474, 475, 476, 627,
	0, 478, 2331, 479, 480, 481, 482, 483, 0, 485,
	486, 487, 488, 489, 490, 493, 494, 495, 497, 498,
	0, 499, 500, 0, 502, 503, 760, 505, 506, 507,
	508, 509, 0, 628, 510, 0, 511, 0, 512, 513,
	514, 515, 516, 517, 518, 520, 0, 0, 522, 523,
	524, 526, 527, 528, 529, 532, 533, 534, 535, 536,
	0, 537, 539, 541, 619, 0, 0, 0, 223, 0,
	0, 0, 0, 0, 542, 543, 2327, 410, 404, 360,
	402, 403, 407, 408, 411, 2220, 236, 0, 253, 0,
	0, 302, 339, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 2320, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	653, 2223, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 0, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 2227, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 2224, 503, 0, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 0, 0, 302, 339, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 653, 2223, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 2227, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 2224, 503, 0,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2939, 236, 0, 253, 0,
	0, 302, 339, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 2940, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 0, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 0, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2930, 236, 0, 253, 0, 0, 302, 339, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 2931, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 782, 236, 0, 253, 0,
	0, 302, 781, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	653, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 0, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 0, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 0, 0, 302, 339, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 653, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 0,
	0, 302, 339, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 4291, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 0, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 0, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 3337, 253, 0, 0, 302, 339, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 0,
	0, 302, 339, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 3968, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 0, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 0, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 0, 0, 302, 339, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 3952, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 3349, 253, 0,
	0, 302, 339, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 0, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 0, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 0, 0, 302, 339, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 3549,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 223, 0,
	0, 0, 0, 0, 0, 0, 1000, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 0,
	0, 302, 339, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 0, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 0, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 0, 0, 302, 339, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 2522, 0, 0,
	0, 406, 0, 0, 0, 0, 2525, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 2523, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	2521, 506, 2520, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 2524, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 0,
	0, 302, 1231, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	653, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 0, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 0, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1229, 236, 0, 253, 0, 0, 302, 1228, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 0,
	0, 302, 339, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	216, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 904, 245, 246, 247, 250, 251, 252,
	254, 217, 255, 903, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 219, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	220, 460, 461, 462, 463, 587, 465, 466, 218, 468,
	469, 471, 472, 473, 474, 475, 476, 901, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 0, 505, 506, 507, 508, 509,
	0, 212, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 221, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	785, 236, 0, 253, 0, 0, 302, 784, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 613, 236, 0, 253, 0,
	0, 302, 339, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	609, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 0, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 611, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 0, 505, 506, 507, 508, 509,
	0, 610, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 0, 0, 302, 339, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	5141, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 0,
	0, 302, 339, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 0, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 0, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 0, 0, 302, 3071, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 0,
	0, 302, 339, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	216, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 0, 245, 246, 247, 250, 251, 252,
	254, 217, 255, 256, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 219, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	220, 460, 461, 462, 463, 587, 465, 466, 218, 468,
	469, 471, 472, 473, 474, 475, 476, 901, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 0, 505, 506, 507, 508, 509,
	0, 212, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 221, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 0, 0, 302, 3010, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 0,
	0, 302, 2918, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 0, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 0, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 0, 0, 302, 2916, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 0,
	0, 302, 2902, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 0, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 0, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 0, 0, 302, 339, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 216, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 217, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 219, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 220, 460, 461, 462, 463,
	587, 465, 466, 218, 468, 469, 471, 472, 473, 474,
	475, 476, 2363, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	505, 506, 507, 508, 509, 0, 2364, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 221, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 0,
	0, 302, 2211, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 0, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 0, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 0, 0, 302, 2152, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 0,
	0, 302, 339, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 0, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 1420, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 0, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 0, 0, 302, 1370, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 0,
	0, 302, 1151, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 0, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 0, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 0, 0, 302, 1112, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 0,
	0, 302, 1108, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 0, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 0, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 1101, 253, 0, 0, 302, 339, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 0, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 0,
	0, 302, 844, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 0, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 0, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 0, 0, 302, 840, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 0,
	0, 302, 837, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 0, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 0, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 0, 0, 302, 833, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 0,
	0, 302, 814, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 0, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 0, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 0, 0, 302, 789, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 0,
	0, 302, 787, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 0, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 0, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 0, 0, 302, 768, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 0,
	0, 302, 727, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 0, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 0, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 0, 0, 302, 723, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 0,
	0, 302, 721, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 0, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 0, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 0, 0, 302, 696, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 0,
	0, 302, 339, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	629, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 656, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 0, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 587, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 0, 505, 506, 507, 508, 509,
	0, 628, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 0, 0, 302, 339, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 464, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 630, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 0,
	0, 302, 339, 554, 0, 0, 399, 0, 452, 456,
	0, 545, 0, 0, 0, 0, 310, 0, 0, 0,
	0, 0, 0, 0, 521, 0, 0, 0, 0, 241,
	216, 544, 210, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 377,
	594, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 0,
	0, 0, 0, 0, 279, 280, 401, 261, 409, 606,
	572, 464, 422, 420, 0, 387, 444, 601, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	569, 573, 571, 567, 564, 568, 565, 566, 570, 326,
	563, 0, 538, 547, 581, 561, 589, 546, 586, 556,
	301, 585, 550, 549, 595, 576, 577, 531, 591, 562,
	560, 553, 552, 548, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 0, 245, 246, 247, 250, 251, 252,
	254, 217, 255, 256, 257, 258, 259, 260, 551, 0,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 555, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 557, 558, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 574,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 575, 380, 381, 382, 383, 384, 385,
	386, 219, 388, 389, 390, 391, 392, 393, 394, 578,
	579, 395, 397, 398, 580, 582, 583, 0, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	584, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	220, 460, 461, 462, 463, 587, 465, 466, 218, 468,
	469, 471, 472, 473, 474, 475, 476, 211, 0, 478,
	588, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 590, 499,
	500, 0, 502, 503, 0, 505, 506, 507, 508, 509,
	0, 212, 510, 592, 511, 593, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 221, 596, 597, 598, 599, 600, 602, 603,
	604, 605, 542, 543, 559, 410, 404, 360, 402, 403,
	407, 408, 411, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 253, 0, 0, 302, 339, 554, 0,
	0, 399, 0, 452, 456, 0, 545, 0, 0, 0,
	0, 310, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 241, 629, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 377, 594, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 0, 0, 0, 0, 0, 279,
	280, 401, 261, 409, 606, 572, 0, 422, 420, 0,
	387, 444, 601, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 569, 573, 571, 567, 564,
	568, 565, 566, 570, 326, 563, 0, 538, 547, 581,
	561, 589, 546, 586, 556, 301, 585, 550, 549, 595,
	576, 577, 531, 591, 562, 560, 553, 552, 548, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 0, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 551, 0, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 555, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 557, 558, 0, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 574, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 575, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 578, 579, 395, 397, 398, 580,
	582, 583, 0, 413, 414, 415, 416, 417, 418, 0,
	421, 0, 423, 424, 425, 584, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 0, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	587, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 588, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 590, 499, 500, 0, 502, 503, 0,
	505, 506, 507, 508, 509, 0, 628, 510, 592, 511,
	593, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 596, 597,
	598, 599, 600, 602, 603, 604, 605, 542, 543, 559,
	410, 404, 360, 402, 403, 407, 408, 411, 872, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 253, 742,
	0, 302, 339, 0, 0, 0, 399, 0, 452, 456,
	0, 0, 0, 0, 0, 0, 310, 0, 747, 2325,
	753, 0, 759, 0, 521, 0, 749, 750, 755, 241,
	871, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 751,
	748, 752, 758, 746, 756, 743, 754, 0, 443, 377,
	0, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 740,
	745, 0, 761, 0, 279, 280, 401, 261, 409, 0,
	0, 464, 422, 420, 0, 387, 444, 0, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 538, 874, 864, 856, 857, 858, 859, 860,
	861, 0, 876, 877, 878, 879, 880, 531, 870, 0,
	855, 862, 863, 865, 2328, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 739, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 0, 741,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 744, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 0, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 0, 0, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 0,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 0, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 0,
	0, 395, 397, 398, 0, 2326, 0, 757, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	0, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 0, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	2331, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 0, 499,
	500, 0, 502, 503, 760, 505, 506, 507, 508, 509,
	0, 628, 510, 0, 511, 0, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 0, 0, 872, 0, 0, 0, 0,
	0, 0, 542, 543, 2327, 410, 404, 360, 402, 403,
	407, 408, 411, 236, 0, 253, 742, 0, 302, 339,
	0, 0, 0, 399, 0, 452, 456, 0, 0, 0,
	0, 0, 0, 310, 0, 747, 0, 753, 2353, 759,
	0, 521, 0, 749, 750, 755, 241, 871, 544, 615,
	0, 0, 0, 406, 0, 0, 0, 0, 3381, 0,
	0, 249, 0, 0, 0, 0, 751, 748, 752, 758,
	746, 756, 743, 754, 0, 443, 377, 0, 470, 248,
	294, 281, 323, 365, 477, 0, 0, 355, 525, 290,
	379, 0, 269, 412, 0, 501, 376, 0, 484, 504,
	0, 396, 275, 435, 491, 492, 740, 745, 0, 761,
	0, 279, 280, 401, 261, 409, 0, 0, 464, 422,
	420, 0, 387, 444, 0, 0, 0, 309, 0, 304,
	400, 540, 267, 519, 438, 405, 359, 467, 496, 306,
	291, 292, 335, 437, 325, 277, 530, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 326, 0, 0, 538,
	874, 864, 856, 857, 858, 859, 860, 861, 0, 876,
	877, 878, 879, 880, 531, 870, 0, 855, 862, 863,
	865, 0, 226, 227, 228, 229, 230, 231, 232, 233,
	234, 235, 237, 0, 238, 239, 240, 242, 243, 244,
	739, 245, 246, 247, 250, 251, 252, 254, 614, 255,
	256, 257, 258, 259, 260, 0, 741, 262, 263, 264,
	265, 266, 268, 270, 271, 272, 273, 274, 276, 278,
	0, 0, 0, 744, 0, 0, 0, 282, 283, 284,
	285, 286, 287, 0, 288, 289, 293, 295, 296, 297,
	298, 299, 300, 303, 0, 305, 307, 0, 308, 311,
	0, 312, 313, 314, 315, 316, 317, 318, 319, 0,
	320, 0, 321, 322, 324, 0, 327, 328, 329, 330,
	331, 0, 332, 0, 0, 333, 334, 336, 337, 338,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 349,
	350, 351, 0, 352, 353, 354, 356, 0, 357, 358,
	361, 362, 363, 364, 0, 366, 0, 0, 367, 368,
	369, 0, 0, 370, 371, 372, 373, 374, 375, 378,
	0, 380, 381, 382, 383, 384, 385, 386, 616, 388,
	389, 390, 391, 392, 393, 394, 0, 0, 395, 397,
	398, 0, 0, 0, 757, 413, 414, 415, 416, 417,
	418, 419, 421, 0, 423, 424, 425, 0, 426, 427,
	428, 429, 0, 430, 431, 432, 433, 434, 436, 439,
	440, 441, 442, 0, 445, 446, 447, 448, 449, 450,
	451, 453, 454, 455, 457, 458, 459, 617, 460, 461,
	462, 463, 0, 465, 466, 618, 468, 469, 471, 472,
	473, 474, 475, 476, 627, 0, 478, 2331, 479, 480,
	481, 482, 483, 0, 485, 486, 487, 488, 489, 490,
	493, 494, 495, 497, 498, 0, 499, 500, 0, 502,
	503, 760, 505, 506, 507, 508, 509, 0, 628, 510,
	0, 511, 0, 512, 513, 514, 515, 516, 517, 518,
	520, 0, 0, 522, 523, 524, 526, 527, 528, 529,
	532, 533, 534, 535, 536, 0, 537, 539, 541, 619,
	0, 0, 872, 0, 0, 0, 0, 0, 0, 542,
	543, 0, 410, 404, 360, 402, 403, 407, 408, 411,
	236, 0, 253, 742, 0, 302, 339, 0, 0, 0,
	399, 0, 452, 456, 0, 0, 0, 0, 0, 0,
	310, 0, 747, 0, 753, 0, 759, 0, 521, 0,
	749, 750, 755, 241, 871, 544, 615, 0, 0, 0,
	406, 0, 0, 0, 0, 0, 0, 0, 249, 0,
	0, 0, 0, 751, 748, 752, 758, 746, 756, 743,
	754, 0, 443, 377, 0, 470, 248, 294, 281, 323,
	365, 477, 0, 0, 355, 525, 290, 379, 0, 269,
	412, 0, 501, 376, 0, 484, 504, 0, 396, 275,
	435, 491, 492, 740, 745, 0, 761, 0, 279, 280,
	401, 261, 409, 0, 0, 464, 422, 420, 5175, 387,
	444, 0, 0, 0, 309, 0, 304, 400, 540, 267,
	519, 438, 405, 359, 467, 496, 306, 291, 292, 335,
	437, 325, 277, 530, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 538, 874, 864, 856,
	857, 858, 859, 860, 861, 0, 876, 877, 878, 879,
	880, 531, 870, 0, 855, 862, 863, 865, 0, 226,
	227, 228, 229, 230, 231, 232, 233, 234, 235, 237,
	0, 238, 239, 240, 242, 243, 244, 739, 245, 246,
	247, 250, 251, 252, 254, 614, 255, 256, 257, 258,
	259, 260, 0, 741, 262, 263, 264, 265, 266, 268,
	270, 271, 272, 273, 274, 276, 278, 0, 0, 0,
	744, 0, 0, 0, 282, 283, 284, 285, 286, 287,
	0, 288, 289, 293, 295, 296, 297, 298, 299, 300,
	303, 0, 305, 307, 0, 308, 311, 0, 312, 313,
	314, 315, 316, 317, 318, 319, 0, 320, 0, 321,
	322, 324, 0, 327, 328, 329, 330, 331, 0, 332,
	0, 0, 333, 334, 336, 337, 338, 340, 341, 342,
	343, 344, 345, 346, 347, 348, 349, 350, 351, 0,
	352, 353, 354, 356, 0, 357, 358, 361, 362, 363,
	364, 0, 366, 0, 0, 367, 368, 369, 0, 0,
	370, 371, 372, 373, 374, 375, 378, 0, 380, 381,
	382, 383, 384, 385, 386, 616, 388, 389, 390, 391,
	392, 393, 394, 0, 0, 395, 397, 398, 0, 0,
	0, 757, 413, 414, 415, 416, 417, 418, 419, 421,
	0, 423, 424, 425, 0, 426, 427, 428, 429, 0,
	430, 431, 432, 433, 434, 436, 439, 440, 441, 442,
	0, 445, 446, 447, 448, 449, 450, 451, 453, 454,
	455, 457, 458, 459, 617, 460, 461, 462, 463, 0,
	465, 466, 618, 468, 469, 471, 472, 473, 474, 475,
	476, 627, 0, 478, 0, 479, 480, 481, 482, 483,
	0, 485, 486, 487, 488, 489, 490, 493, 494, 495,
	497, 498, 0, 499, 500, 0, 502, 503, 760, 505,
	506, 507, 508, 509, 0, 628, 510, 0, 511, 0,
	512, 513, 514, 515, 516, 517, 518, 520, 0, 0,
	522, 523, 524, 526, 527, 528, 529, 532, 533, 534,
	535, 536, 0, 537, 539, 541, 619, 0, 0, 872,
	0, 0, 0, 0, 0, 0, 542, 543, 0, 410,
	404, 360, 402, 403, 407, 408, 411, 236, 0, 253,
	742, 0, 302, 339, 0, 0, 0, 399, 0, 452,
	456, 0, 0, 0, 0, 0, 0, 310, 0, 747,
	0, 753, 0, 759, 0, 521, 0, 749, 750, 755,
	241, 871, 544, 615, 0, 0, 0, 406, 0, 0,
	0, 0, 0, 0, 0, 249, 0, 0, 0, 0,
	751, 748, 752, 758, 746, 756, 743, 754, 0, 443,
	377, 0, 470, 248, 294, 281, 323, 365, 477, 0,
	0, 355, 525, 290, 379, 0, 269, 412, 0, 501,
	376, 0, 484, 504, 0, 396, 275, 435, 491, 492,
	740, 745, 0, 761, 0, 279, 280, 401, 261, 409,
	0, 0, 464, 422, 420, 4843, 387, 444, 0, 0,
	0, 309, 0, 304, 400, 540, 267, 519, 438, 405,
	359, 467, 496, 306, 291, 292, 335, 437, 325, 277,
	530, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 0, 538, 874, 864, 856, 857, 858, 859,
	860, 861, 0, 876, 877, 878, 879, 880, 531, 870,
	0, 855, 862, 863, 865, 0, 226, 227, 228, 229,
	230, 231, 232, 233, 234, 235, 237, 0, 238, 239,
	240, 242, 243, 244, 739, 245, 246, 247, 250, 251,
	252, 254, 614, 255, 256, 257, 258, 259, 260, 0,
	741, 262, 263, 264, 265, 266, 268, 270, 271, 272,
	273, 274, 276, 278, 0, 0, 0, 744, 0, 0,
	0, 282, 283, 284, 285, 286, 287, 0, 288, 289,
	293, 295, 296, 297, 298, 299, 300, 303, 0, 305,
	307, 0, 308, 311, 0, 312, 313, 314, 315, 316,
	317, 318, 319, 0, 320, 0, 321, 322, 324, 0,
	327, 328, 329, 330, 331, 0, 332, 0, 0, 333,
	334, 336, 337, 338, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 349, 350, 351, 0, 352, 353, 354,
	356, 0, 357, 358, 361, 362, 363, 364, 0, 366,
	0, 0, 367, 368, 369, 0, 0, 370, 371, 372,
	373, 374, 375, 378, 0, 380, 381, 382, 383, 384,
	385, 386, 616, 388, 389, 390, 391, 392, 393, 394,
	0, 0, 395, 397, 398, 0, 0, 0, 757, 413,
	414, 415, 416, 417, 418, 419, 421, 0, 423, 424,
	425, 0, 426, 427, 428, 429, 0, 430, 431, 432,
	433, 434, 436, 439, 440, 441, 442, 0, 445, 446,
	447, 448, 449, 450, 451, 453, 454, 455, 457, 458,
	459, 617, 460, 461, 462, 463, 0, 465, 466, 618,
	468, 469, 471, 472, 473, 474, 475, 476, 627, 0,
	478, 0, 479, 480, 481, 482, 483, 0, 485, 486,
	487, 488, 489, 490, 493, 494, 495, 497, 498, 0,
	499, 500, 0, 502, 503, 760, 505, 506, 507, 508,
	509, 0, 628, 510, 0, 511, 0, 512, 513, 514,
	515, 516, 517, 518, 520, 0, 0, 522, 523, 524,
	526, 527, 528, 529, 532, 533, 534, 535, 536, 0,
	537, 539, 541, 619, 0, 0, 872, 0, 0, 0,
	0, 0, 0, 542, 543, 0, 410, 404, 360, 402,
	403, 407, 408, 411, 236, 0, 253, 742, 0, 302,
	339, 0, 0, 0, 399, 0, 452, 456, 0, 0,
	0, 0, 0, 0, 310, 0, 747, 0, 753, 0,
	759, 0, 521, 0, 749, 750, 755, 241, 871, 544,
	615, 0, 0, 0, 406, 0, 0, 0, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 751, 748, 752,
	758, 746, 756, 743, 754, 0, 443, 377, 0, 470,
	248, 294, 281, 323, 365, 477, 0, 0, 355, 525,
	290, 379, 0, 269, 412, 0, 501, 376, 0, 484,
	504, 0, 396, 275, 435, 491, 492, 740, 745, 0,
	761, 0, 279, 280, 401, 261, 409, 0, 0, 464,
	422, 420, 0, 387, 444, 0, 0, 0, 309, 0,
	304, 400, 540, 267, 519, 438, 405, 359, 467, 496,
	306, 291, 292, 335, 437, 325, 277, 530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	538, 874, 864, 856, 857, 858, 859, 860, 861, 0,
	876, 877, 878, 879, 880, 531, 870, 0, 855, 862,
	863, 865, 0, 226, 227, 228, 229, 230, 231, 232,
	233, 234, 235, 237, 0, 238, 239, 240, 242, 243,
	244, 739, 245, 246, 247, 250, 251, 252, 254, 614,
	255, 256, 257, 258, 259, 260, 0, 741, 262, 263,
	264, 265, 266, 268, 270, 271, 272, 273, 274, 276,
	278, 0, 0, 0, 744, 0, 0, 0, 282, 283,
	284, 285, 286, 287, 0, 288, 289, 293, 295, 296,
	297, 298, 299, 300, 303, 0, 305, 307, 0, 308,
	311, 0, 312, 313, 314, 315, 316, 317, 318, 319,
	0, 320, 0, 321, 322, 324, 0, 327, 328, 329,
	330, 331, 0, 332, 0, 0, 333, 334, 336, 337,
	338, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	349, 350, 351, 0, 352, 353, 354, 356, 0, 357,
	358, 361, 362, 363, 364, 0, 366, 0, 0, 367,
	368, 369, 0, 0, 370, 371, 372, 373, 374, 375,
	378, 0, 380, 381, 382, 383, 384, 385, 386, 616,
	388, 389, 390, 391, 392, 393, 394, 4607, 0, 395,
	397, 398, 0, 0, 0, 757, 413, 414, 415, 416,
	417, 418, 419, 421, 0, 423, 424, 425, 0, 426,
	427, 428, 429, 0, 430, 431, 432, 433, 434, 436,
	439, 440, 441, 442, 0, 445, 446, 447, 448, 449,
	450, 451, 453, 454, 455, 457, 458, 459, 617, 460,
	461, 462, 463, 0, 465, 466, 618, 468, 469, 471,
	472, 473, 474, 475, 476, 627, 0, 478, 0, 479,
	480, 481, 482, 483, 0, 485, 486, 487, 488, 489,
	490, 493, 494, 495, 497, 498, 0, 499, 500, 0,
	502, 503, 760, 505, 506, 507, 508, 509, 0, 628,
	510, 0, 511, 0, 512, 513, 514, 515, 516, 517,
	518, 520, 0, 0, 522, 523, 524, 526, 527, 528,
	529, 532, 533, 534, 535, 536, 0, 537, 539, 541,
	619, 0, 0, 872, 0, 0, 0, 0, 0, 0,
	542, 543, 0, 410, 404, 360, 402, 403, 407, 408,
	411, 236, 0, 253, 742, 0, 302, 339, 0, 0,
	0, 399, 0, 452, 456, 0, 0, 0, 0, 0,
	0, 310, 0, 747, 0, 753, 0, 759, 0, 521,
	0, 749, 750, 755, 241, 871, 544, 615, 0, 0,
	0, 406, 0, 0, 0, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 751, 748, 752, 758, 746, 756,
	743, 754, 0, 443, 377, 0, 470, 248, 294, 281,
	323, 365, 477, 0, 0, 355, 525, 290, 379, 0,
	269, 412, 0, 501, 376, 0, 484, 504, 0, 396,
	275, 435, 491, 492, 740, 745, 0, 761, 0, 279,
	280, 401, 261, 409, 0, 0, 464, 422, 420, 0,
	387, 444, 0, 0, 0, 309, 0, 304, 400, 540,
	267, 519, 438, 405, 359, 467, 496, 306, 291, 292,
	335, 437, 325, 277, 530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 538, 874, 864,
	856, 857, 858, 859, 860, 861, 0, 876, 877, 878,
	879, 880, 531, 870, 0, 855, 862, 863, 865, 0,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	237, 0, 238, 239, 240, 242, 243, 244, 739, 245,
	246, 247, 250, 251, 252, 254, 614, 255, 256, 257,
	258, 259, 260, 0, 741, 262, 263, 264, 265, 266,
	268, 270, 271, 272, 273, 274, 276, 278, 0, 0,
	0, 744, 0, 0, 0, 282, 283, 284, 285, 286,
	287, 0, 288, 289, 293, 295, 296, 297, 298, 299,
	300, 303, 0, 305, 307, 0, 308, 311, 0, 312,
	313, 314, 315, 316, 317, 318, 319, 0, 320, 0,
	321, 322, 324, 0, 327, 328, 329, 330, 331, 0,
	332, 0, 0, 333, 334, 336, 337, 338, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	0, 352, 353, 354, 356, 0, 357, 358, 361, 362,
	363, 364, 0, 366, 0, 0, 367, 368, 369, 0,
	0, 370, 371, 372, 373, 374, 375, 378, 0, 380,
	381, 382, 383, 384, 385, 386, 616, 388, 389, 390,
	391, 392, 393, 394, 0, 0, 395, 397, 398, 0,
	0, 0, 757, 413, 414, 415, 416, 417, 418, 419,
	421, 0, 423, 424, 425, 0, 426, 427, 428, 429,
	0, 430, 431, 432, 433, 434, 436, 439, 440, 441,
	442, 0, 445, 446, 447, 448, 449, 450, 451, 453,
	454, 455, 457, 458, 459, 617, 460, 461, 462, 463,
	0, 465, 466, 618, 468, 469, 471, 472, 473, 474,
	475, 476, 627, 0, 478, 2331, 479, 480, 481, 482,
	483, 0, 485, 486, 487, 488, 489, 490, 493, 494,
	495, 497, 498, 0, 499, 500, 0, 502, 503, 760,
	505, 506, 507, 508, 509, 0, 628, 510, 0, 511,
	0, 512, 513, 514, 515, 516, 517, 518, 520, 0,
	0, 522, 523, 524, 526, 527, 528, 529, 532, 533,
	534, 535, 536, 0, 537, 539, 541, 619, 0, 0,
	872, 0, 0, 0, 0, 0, 0, 542, 543, 0,
	410, 404, 360, 402, 403, 407, 408, 411, 236, 0,
	253, 742, 0, 302, 339, 0, 0, 0, 399, 0,
	452, 456, 0, 0, 0, 0, 0, 0, 310, 0,
	747, 0, 753, 0, 759, 0, 521, 0, 749, 750,
	755, 241, 871, 544, 615, 0, 0, 0, 406, 0,
	0, 0, 0, 0, 0, 0, 249, 0, 0, 0,
	0, 751, 748, 752, 758, 746, 756, 743, 754, 0,
	443, 377, 0, 470, 248, 294, 281, 323, 365, 477,
	0, 0, 355, 525, 290, 379, 0, 269, 412, 0,
	501, 376, 0, 484, 504, 0, 396, 275, 435, 491,
	492, 740, 745, 0, 761, 0, 279, 280, 401, 261,
	409, 0, 0, 464, 422, 420, 0, 387, 444, 0,
	0, 0, 309, 0, 304, 400, 540, 267, 519, 438,
	405, 359, 467, 496, 306, 291, 292, 335, 437, 325,
	277, 530, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 538, 874, 864, 856, 857, 858,
	859, 860, 861, 0, 876, 877, 878, 879, 880, 531,
	870, 0, 855, 862, 863, 865, 0, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 237, 0, 238,
	239, 240, 242, 243, 244, 739, 245, 246, 247, 250,
	251, 252, 254, 614, 255, 256, 257, 258, 259, 260,
	0, 741, 262, 263, 264, 265, 266, 268, 270, 271,
	272, 273, 274, 276, 278, 0, 0, 0, 744, 0,
	0, 0, 282, 283, 284, 285, 286, 287, 0, 288,
	289, 293, 295, 296, 297, 298, 299, 300, 303, 0,
	305, 307, 0, 308, 311, 0, 312, 313, 314, 315,
	316, 317, 318, 319, 0, 320, 0, 321, 322, 324,
	0, 327, 328, 329, 330, 331, 0, 332, 0, 0,
	333, 334, 336, 337, 338, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 349, 350, 351, 0, 352, 353,
	354, 356, 0, 357, 358, 361, 362, 363, 364, 0,
	366, 0, 0, 367, 368, 369, 0, 0, 370, 371,
	372, 373, 374, 375, 378, 0, 380, 381, 382, 383,
	384, 385, 386, 616, 388, 389, 390, 391, 392, 393,
	394, 4083, 0, 395, 397, 398, 0, 0, 0, 757,
	413, 414, 415, 416, 417, 418, 419, 421, 0, 423,
	424, 425, 0, 426, 427, 428, 429, 0, 430, 431,
	432, 433, 434, 436, 439, 440, 441, 442, 0, 445,
	446, 447, 448, 449, 450, 451, 453, 454, 455, 457,
	458, 459, 617, 460, 461, 462, 463, 0, 465, 466,
	618, 468, 469, 471, 472, 473, 474, 475, 476, 627,
	0, 478, 0, 479, 480, 481, 482, 483, 0, 485,
	486, 487, 488, 489, 490, 493, 494, 495, 497, 498,
	0, 499, 500, 0, 502, 503, 760, 505, 506, 507,
	508, 509, 0, 628, 510, 0, 511, 0, 512, 513,
	514, 515, 516, 517, 518, 520, 0, 0, 522, 523,
	524, 526, 527, 528, 529, 532, 533, 534, 535, 536,
	0, 537, 539, 541, 619, 0, 0, 872, 0, 0,
	0, 0, 0, 0, 542, 543, 0, 410, 404, 360,
	402, 403, 407, 408, 411, 236, 0, 253, 742, 0,
	302, 339, 0, 0, 0, 399, 0, 452, 456, 0,
	0, 0, 0, 0, 0, 310, 0, 747, 0, 753,
	0, 759, 0, 521, 0, 749, 750, 755, 241, 871,
	544, 615, 0, 0, 0, 406, 0, 0, 0, 0,
	0, 0, 0, 249, 0, 0, 0, 0, 751, 748,
	752, 758, 746, 756, 743, 754, 0, 443, 377, 0,
	470, 248, 294, 281, 323, 365, 477, 0, 0, 355,
	525, 290, 379, 0, 269, 412, 0, 501, 376, 0,
	484, 504, 0, 396, 275, 435, 491, 492, 740, 745,
	0, 761, 0, 279, 280, 401, 261, 409, 0, 0,
	464, 422, 420, 0, 387, 444, 0, 0, 0, 309,
	0, 304, 400, 540, 267, 519, 438, 405, 359, 467,
	496, 306, 291, 292, 335, 437, 325, 277, 530, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	0, 538, 874, 864, 856, 857, 858, 859, 860, 861,
	0, 876, 877, 878, 879, 880, 531, 870, 0, 855,
	862, 863, 865, 0, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 237, 0, 238, 239, 240, 242,
	243, 244, 739, 245, 246, 247, 250, 251, 252, 254,
	614, 255, 256, 257, 258, 259, 260, 0, 741, 262,
	263, 264, 265, 266, 268, 270, 271, 272, 273, 274,
	276, 278, 0, 0, 0, 744, 0, 0, 0, 282,
	283, 284, 285, 286, 287, 0, 288, 289, 293, 295,
	296, 297, 298, 299, 300, 303, 0, 305, 307, 0,
	308, 311, 0, 312, 313, 314, 315, 316, 317, 318,
	319, 0, 320, 0, 321, 322, 324, 0, 327, 328,
	329, 330, 331, 0, 332, 0, 0, 333, 334, 336,
	337, 338, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 349, 350, 351, 0, 352, 353, 354, 356, 0,
	357, 358, 361, 362, 363, 364, 0, 366, 0, 0,
	367, 368, 369, 0, 0, 370, 371, 372, 373, 374,
	375, 378, 0, 380, 381, 382, 383, 384, 385, 386,
	616, 388, 389, 390, 391, 392, 393, 394, 0, 0,
	395, 397, 398, 0, 0, 0, 757, 413, 414, 415,
	416, 417, 418, 419, 421, 0, 423, 424, 425, 0,
	426, 427, 428, 429, 0, 430, 431, 432, 433, 434,
	436, 439, 440, 441, 442, 0, 445, 446, 447, 448,
	449, 450, 451, 453, 454, 455, 457, 458, 459, 617,
	460, 461, 462, 463, 0, 465, 466, 618, 468, 469,
	471, 472, 473, 474, 475, 476, 627, 0, 478, 0,
	479, 480, 481, 482, 483, 0, 485, 486, 487, 488,
	489, 490, 493, 494, 495, 497, 498, 0, 499, 500,
	0, 502, 503, 760, 505, 506, 507, 508, 509, 0,
	628, 510, 0, 511, 0, 512, 513, 514, 515, 516,
	517, 518, 520, 0, 0, 522, 523, 524, 526, 527,
	528, 529, 532, 533, 534, 535, 536, 0, 537, 539,
	541, 619, 0, 0, 872, 0, 0, 0, 0, 0,
	0, 542, 543, 0, 410, 404, 360, 402, 403, 407,
	408, 411, 236, 0, 253, 742, 0, 302, 882, 0,
	0, 0, 399, 0, 452, 456, 0, 0, 0, 0,
	0, 0, 310, 0, 747, 0, 753, 0, 759, 0,
	521, 0, 749, 750, 755, 241, 871, 544, 615, 0,
	0, 0, 406, 0, 0, 0, 0, 0, 0, 0,
	249, 0, 0, 0, 0, 751, 748, 752, 758, 746,
	756, 743, 754, 0, 443, 377, 0, 470, 248, 294,
	281, 323, 365, 477, 0, 0, 355, 525, 290, 379,
	0, 269, 412, 0, 501, 376, 0, 484, 504, 0,
	396, 275, 435, 491, 492, 740, 745, 0, 761, 0,
	279, 280, 401, 261, 409, 0, 0, 464, 422, 420,
	0, 387, 444, 0, 0, 0, 309, 0, 304, 400,
	540, 267, 519, 438, 405, 359, 467, 496, 306, 291,
	292, 335, 437, 325, 277, 530, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 538, 874,
	864, 856, 857, 858, 859, 860, 861, 0, 876, 877,
	878, 879, 880, 531, 870, 0, 855, 862, 863, 865,
	0, 226, 227, 228, 229, 230, 231, 232, 233, 234,
	235, 237, 0, 238, 239, 240, 242, 243, 244, 739,
	245, 246, 247, 250, 251, 252, 254, 614, 255, 256,
	257, 258, 259, 260, 0, 741, 262, 263, 264, 265,
	266, 268, 270, 271, 272, 273, 274, 276, 278, 0,
	0, 0, 744, 0, 0, 0, 282, 283, 284, 285,
	286, 287, 0, 288, 289, 293, 295, 296, 297, 298,
	299, 300, 303, 0, 305, 307, 0, 308, 311, 0,
	312, 313, 314, 315, 316, 317, 318, 319, 0, 320,
	0, 321, 322, 324, 0, 327, 328, 329, 330, 331,
	0, 332, 0, 0, 333, 334, 336, 337, 338, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
	351, 0, 352, 353, 354, 356, 0, 357, 358, 361,
	362, 363, 364, 0, 366, 0, 0, 367, 368, 369,
	0, 0, 370, 371, 372, 373, 374, 375, 378, 0,
	380, 381, 382, 383, 384, 385, 386, 616, 388, 389,
	390, 391, 392, 393, 394, 0, 0, 395, 397, 398,
	0, 0, 0, 757, 413, 414, 415, 416, 417, 418,
	419, 421, 0, 423, 424, 425, 0, 426, 427, 428,
	429, 0, 430, 431, 432, 433, 434, 436, 439, 440,
	441, 442, 0, 445, 446, 447, 448, 449, 450, 451,
	453, 454, 455, 457, 458, 459, 617, 460, 461, 462,
	463, 0, 465, 466, 618, 468, 469, 471, 472, 473,
	474, 475, 476, 627, 0, 478, 0, 479, 480, 481,
	482, 483, 0, 485, 486, 487, 488, 489, 490, 493,
	494, 495, 497, 498, 0, 499, 500, 0, 502, 503,
	760, 505, 506, 507, 508, 509, 0, 628, 510, 0,
	511, 0, 512, 513, 514, 515, 516, 517, 518, 520,
	0, 0, 522, 523, 524, 526, 527, 528, 529, 532,
	533, 534, 535, 536, 0, 537, 539, 541, 619, 0,
	0, 872, 0, 0, 0, 0, 0, 0, 542, 543,
	0, 410, 404, 360, 402, 403, 407, 408, 411, 236,
	0, 253, 742, 0, 302, 846, 0, 0, 0, 399,
	0, 452, 456, 0, 0, 0, 0, 0, 0, 310,
	0, 747, 0, 753, 0, 759, 0, 521, 0, 749,
	750, 755, 241, 871, 544, 615, 0, 0, 0, 406,
	0, 0, 0, 0, 0, 0, 0, 249, 0, 0,
	0, 0, 751, 748, 752, 758, 746, 756, 743, 754,
	0, 443, 377, 0, 470, 248, 294, 281, 323, 365,
	477, 0, 0, 355, 525, 290, 379, 0, 269, 412,
	0, 501, 376, 0, 484, 504, 0, 396, 275, 435,
	491, 492, 740, 745, 0, 761, 0, 279, 280, 401,
	261, 409, 0, 0, 464, 422, 420, 0, 387, 444,
	0, 0, 0, 309, 0, 304, 400, 540, 267, 519,
	438, 405, 359, 467, 496, 306, 291, 292, 335, 437,
	325, 277, 530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 0, 538, 874, 864, 856, 857,
	858, 859, 860, 861, 0, 876, 877, 878, 879, 880,
	531, 870, 0, 855, 862, 863, 865, 0, 226, 227,
	228, 229, 230, 231, 232, 233, 234, 235, 237, 0,
	238, 239, 240, 242, 243, 244, 739, 245, 246, 247,
	250, 251, 252, 254, 614, 255, 256, 257, 258, 259,
	260, 0, 741, 262, 263, 264, 265, 266, 268, 270,
	271, 272, 273, 274, 276, 278, 0, 0, 0, 744,
	0, 0, 0, 282, 283, 284, 285, 286, 287, 0,
	288, 289, 293, 295, 296, 297, 298, 299, 300, 303,
	0, 305, 307, 0, 308, 311, 0, 312, 313, 314,
	315, 316, 317, 318, 319, 0, 320, 0, 321, 322,
	324, 0, 327, 328, 329, 330, 331, 0, 332, 0,
	0, 333, 334, 336, 337, 338, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 349, 350, 351, 0, 352,
	353, 354, 356, 0, 357, 358, 361, 362, 363, 364,
	0, 366, 0, 0, 367, 368, 369, 0, 0, 370,
	371, 372, 373, 374, 375, 378, 0, 380, 381, 382,
	383, 384, 385, 386, 616, 388, 389, 390, 391, 392,
	393, 394, 0, 0, 395, 397, 398, 0, 0, 0,
	757, 413, 414, 415, 416, 417, 418, 419, 421, 0,
	423, 424, 425, 0, 426, 427, 428, 429, 0, 430,
	431, 432, 433, 434, 436, 439, 440, 441, 442, 0,
	445, 446, 447, 448, 449, 450, 451, 453, 454, 455,
	457, 458, 459, 617, 460, 461, 462, 463, 0, 465,
	466, 618, 468, 469, 471, 472, 473, 474, 475, 476,
	627, 0, 478, 0, 479, 480, 481, 482, 483, 0,
	485, 486, 487, 488, 489, 490, 493, 494, 495, 497,
	498, 0, 499, 500, 0, 502, 503, 760, 505, 506,
	507, 508, 509, 0, 628, 510, 0, 511, 0, 512,
	513, 514, 515, 516, 517, 518, 520, 0, 0, 522,
	523, 524, 526, 527, 528, 529, 532, 533, 534, 535,
	536, 0, 537, 539, 541, 619, 0, 0, 872, 0,
	0, 0, 0, 0, 0, 542, 543, 0, 410, 404,
	360, 402, 403, 407, 408, 411, 236, 0, 253, 742,
	0, 302, 339, 0, 0, 0, 399, 0, 452, 456,
	0, 0, 0, 0, 0, 0, 310, 0, 747, 0,
	753, 0, 759, 0, 521, 0, 749, 750, 755, 241,
	0, 544, 615, 0, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 751,
	748, 752, 758, 746, 756, 743, 754, 0, 443, 377,
	0, 470, 248, 294, 281, 323, 365, 477, 0, 0,
	355, 525, 290, 379, 0, 269, 412, 0, 501, 376,
	0, 484, 504, 0, 396, 275, 435, 491, 492, 740,
	745, 0, 761, 0, 279, 280, 401, 261, 409, 0,
	0, 464, 422, 420, 0, 387, 444, 0, 0, 0,
	309, 0, 304, 400, 540, 267, 519, 438, 405, 359,
	467, 496, 306, 291, 292, 335, 437, 325, 277, 530,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 538, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 237, 0, 238, 239, 240,
	242, 243, 244, 739, 245, 246, 247, 250, 251, 252,
	254, 614, 255, 256, 257, 258, 259, 260, 0, 741,
	262, 263, 264, 265, 266, 268, 270, 271, 272, 273,
	274, 276, 278, 0, 0, 0, 744, 0, 0, 0,
	282, 283, 284, 285, 286, 287, 0, 288, 289, 293,
	295, 296, 297, 298, 299, 300, 303, 0, 305, 307,
	0, 308, 311, 0, 312, 313, 314, 315, 316, 317,
	318, 319, 0, 320, 0, 321, 322, 324, 0, 327,
	328, 329, 330, 331, 0, 332, 0, 0, 333, 334,
	336, 337, 338, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 349, 350, 351, 0, 352, 353, 354, 356,
	0, 357, 358, 361, 362, 363, 364, 0, 366, 0,
	0, 367, 368, 369, 0, 0, 370, 371, 372, 373,
	374, 375, 378, 0, 380, 381, 382, 383, 384, 385,
	386, 616, 388, 389, 390, 391, 392, 393, 394, 0,
	0, 395, 397, 398, 0, 0, 0, 757, 413, 414,
	415, 416, 417, 418, 419, 421, 0, 423, 424, 425,
	0, 426, 427, 428, 429, 0, 430, 431, 432, 433,
	434, 436, 439, 440, 441, 442, 0, 445, 446, 447,
	448, 449, 450, 451, 453, 454, 455, 457, 458, 459,
	617, 460, 461, 462, 463, 0, 465, 466, 618, 468,
	469, 471, 472, 473, 474, 475, 476, 627, 0, 478,
	0, 479, 480, 481, 482, 483, 0, 485, 486, 487,
	488, 489, 490, 493, 494, 495, 497, 498, 0, 499,
	500, 0, 502, 503, 760, 505, 506, 507, 508, 509,
	0, 628, 510, 0, 511, 0, 512, 513, 514, 515,
	516, 517, 518, 520, 0, 0, 522, 523, 524, 526,
	527, 528, 529, 532, 533, 534, 535, 536, 0, 537,
	539, 541, 619, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 542, 543, 0, 410, 404, 360, 402, 403,
	407, 408, 411,
}

var yyPact = [...]int32{
	7321, -1000, 232, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1238, 1238, -1000, -1000, 2931, 998, 15008,
	15523, 15695, 3034, 84944, 68784, 1238, 1366, 1324, 1323, 69794,
	84439, 1363, -1000, 1376, 792, 794, 3589, 62219, 230, 83934,
	69794, 844, 7321, 3679, -1000, -1000, 2162, 3202, 62219, 3301,
	3201, 794, 69794, -1000, 1664, 2058, 2064, 3626, 83429, 69794,
	43568, 69794, 3019, 82924, 82419, 2540, 81914, 52169, 3033, 1356,
	69794, 69794, 1858, 81409, 69794, 69794, 982, 2353, 49643, 49643,
	-1000, -1000, 1402, 1399, -1000, -1000, -1000, 61714, 68279, 80904,
	80399, 1247, 2538, 55704, 69794, 69794, 69794, 69794, 55704, 49643,
	1963, 2282, 79894, 55704, 69794, 55704, 69794, 69794, 69794, 69794,
	69794, 1355, 49138, 48633, 69794, 79389, 3016, 69794, 69794, -1000,
	78884, 78379, 77874, 90337, 89850, 3772, 51664, 51159, 50654, -1000,
	-1000, -1000, 1242, 2507, -1000, -1000, -1000, 3014, 1856, 1353,
	-1000, 1961, -1000, -1000, -1000, -1000, -1000, -1000, 1235, -1000,
	70804, 67774, 1965, -1000, -1000, 742, 3432, 3840, 3840, 3601,
	54189, 1156, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3430,
	1975, 2419, 277, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3679, 2162, 3679, 3840, 3336, 3840, -1000, -1000, -1000, -1000,
	69794, -1000, 3840, -1000, 2438, 3577, 3577, 3577, 3244, 1376,
	-1000, -1000, 580, 573, 792, 23030, 23030, -1000, 3194, -1000,
	248, -1000, 264, 55199, 980, 228, 69794, -1000, 737, -1000,
	228, 28172, -1000, -1000, 2007, -1000, 352, -1000, 1942, 1631,
	-1000, 2298, 69794, 2995, 77369, 62219, 62219, 564, -1000, 600,
	76864, 69794, 1228, 76359, 3771, 55704, 55704, 69794, 1338, 55704,
	2760, 1714, -1000, 1701, 2411, -1000, 3669, 3780, 262, 835,
	69794, 69794, -1000, 266, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 871, 1742,
	1069, 3668, 1508, 3664, 2675, 75854, 1299, 3663, 2838, 1508,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1221, 69794, 1776, 3192, 69794, 737, 3660, -1000,
	2822, 2359, 89363, 69794, 1508, 1508, -1000, -1000, -1000, -1000,
	9946, 3759, 3548, 10583, 3758, 3541, 15349, 3757, 12998, 3756,
	67269, 66764, 2673, 1671, 978, -1000, 264, -1000, -1000, -1000,
	1669, 1668, 1665, 1679, 10665, 978, -1000, 264, 1655, 2631,
	69794, 69794, 69794, 3191, 3755, 9782, 2080, 8522, 1654, 1225,
	2444, 3187, 3186, 69794, 1651, 1509, 3539, 1646, 2759, 1509,
	3539, 2020, 1918, 3754, 1719, 2143, 2635, 3753, 363, -1000,
	3751, 369, -1000, 3185, 3750, 368, 3749, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 276, -1000, -1000, -1000, -1000, -1000,
	889, 2498, 884, 884, 884, -1000, -1000, -1000, -1000, -1000,
	356, 398, -1000, -1000, 2484, 976, 2484, 2484, -1000, 2506,
	2484, 368, 3744, 75349, 2827, 60, 3743, -1000, 60, 3741,
	60, 3738, -1000, 2663, -1000, 1649, -1000, -1000, -1000, 3771,
	-1000, 2392, -1000, 3803, 52674, 352, 3840, 2801, 40448, 39934,
	69794, 378, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2320, -1000, 1938, -1000, -1000, -1000, -1000, -1000, -1000,
	74844, -1000, -1000, -1000, 2432, 2752, 2758, 1559, 3227, 2429,
	-1000, 27658, 2135, 32284, 2816, 792, -1000, -1000, 792, 792,
	28172, -1000, 2438, -1000, -1000, 3200, 95, -1000, 17315, -1000,
	-1000, 28172, 28172, 28172, 28172, 28172, 1792, 3630, -1000, -1000,
	-1000, -1000, 22001, -1000, -1000, 264, 846, 575, -1000, -1000,
	972, -1000, 722, 971, 264, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1096, 3840, 991, 28172, 1202, 2215, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 970, 968, 2757,
	-1000, 967, 965, 964, 962, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 961, 960, 959, 956, 955, 954, 952, 948,
	947, 945, 944, 940, 939, 937, 934, 933, 932, 929,
	925, 922, 921, 740, 908, 906, 905, 901, 900, 899,
	898, -1000, 2484, -1000, 2484, 2484, 884, 884, 889, -1000,
	-1000, 2506, 2484, 884, -1000, -1000, 398, 356, -1000, -1000,
	-1000, -1000, -1000, 400, 883, -1000, 264, -1000, 16796, 28172,
	-1000, 69794, 28172, 69794, 228, 3812, 69794, 220, 14688, -1000,
	2391, 2162, -1000, 1571, -1000, -1000, -1000, 760, 3810, 53179,
	-1000, 69794, 3082, 3081, 3417, 3290, 69794, 725, 3657, 600,
	69794, 5665, 3649, 74339, -1000, 882, 882, 2140, 69794, 876,
	89363, 1958, 1615, -1000, 49643, 3767, 3737, 89363, -1000, 257,
	18362, -1000, 18362, 3579, 3080, 41981, -1000, 578, 69794, 69794,
	69794, 69794, -1000, 69794, 3736, -1000, -1000, -1000, 3735, 69794,
	669, 3648, 1249, 3840, 3734, 47623, 3647, -1000, 73834, 3183,
	1891, 49643, 69794, 1305, 3182, 3732, -1000, 59694, 835, 3840,
	3807, 2753, -1000, -1000, 120, -1000, 1495, -1000, 1763, 1758,
	57202, 1443, 1435, 2842, 675, 3181, 1621, 1359, 69794, 2168,
	69794, 2815, 3416, 635, 2105, 1567, -1000, 875, 62219, 1420,
	120, -1000, 3412, 1755, 69794, 1418, 120, 3411, 5665, -1000,
	2332, 89363, 782, -1000, 3243, -1000, 782, 782, 3242, 1846,
	1508, 1508, -1000, 69794, 120, 1536, 69794, 12774, 3731, 3521,
	12007, 3721, 69794, 3410, -1000, 59206, 264, 3409, 3408, 3406,
	2892, -1000, 2909, 3575, 1562, 2830, 3405, 8160, -1000, 3178,
	3495, -1000, -1000, -1000, -1000, 1533, 2088, -1000, 1948, 782,
	782, 69794, -1000, 69794, 73329, -1000, -1000, 264, 3399, 2904,
	-1000, -1000, 1645, 3079, 3077, 69794, 69794, 3398, 8160, 3397,
	48128, 60199, 60199, 3396, 8160, 3395, 3394, 1141, -1000, 3542,
	3393, 642, 3840, 1707, 1705, 1704, -1000, -1000, 835, 69794,
	69794, 1777, 3392, -1000, 1929, 2305, 1929, 3389, 47623, -1000,
	1929, 1929, 3388, 635, 635, 3387, 1444, 69794, 69794, 69794,
	69794, 69794, 2592, 2475, 2471, 855, 227, -1000, 2448, -1000,
	14924, 69794, 69794, -1000, -1000, -1000, 69794, 69794, -1000, 69794,
	69794, 89363, -1000, 89363, -1000, 284, 28172, -1000, 3831, -1000,
	-1000, -1000, -1000, 3831, -1000, 3435, 3434, 3831, -1000, 850,
	-1000, 3831, -1000, -1000, 2484, 2484, -1000, -1000, 89363, 363,
	3719, 47623, 3718, 49643, 49643, 49643, 49643, -1000, -1000, -1000,
	-1000, -1000, 69794, 3803, 1354, -1000, -1000, -1000, -1000, 225,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3833,
	3832, -1000, -1000, 225, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	69794, -1000, -1000, -1000, -1000, -1000, -1000, 1579, 3253, -1000,
	1179, -1000, 1470, -1000, -1000, 222, 14688, -1000, 33826, -1000,
	-1000, -1000, 1842, 14688, -1000, 31770, 31770, 1537, 69794, 1978,
	-1000, 1978, 76, -1000, 5543, 2432, 2752, 3300, 66259, 23030,
	89363, 69794, 3424, 28172, 28172, 28172, 28172, 28172, 28172, 28172,
	28172, 28172, 28172, 28172, 28172, 28172, 28172, 28172, 28172, 3491,
	28172, 3381, 3037, -1000, -1000, 3380, 813, 1587, 18362, -1000,
	-1000, 839, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1132, 1132, 399, 5437,
	5437, 601, 846, 3573, 264, 14643, 221, 287, 844, 264,
	-1000, -1000, -1000, 23545, 28172, 41981, 27143, 264, -1000, 20456,
	-1000, 1461, 3831, 3448, 14688, 2215, 3206, 1118, 842, 28172,
	28172, 840, 3831, 3831, 3831, 3831, 28172, 2381, 28172, 28172,
	33312, 28172, 28172, 22516, 28172, 28172, 28172, 28172, 28172, 1844,
	28172, 2320, 34854, 1836, 28172, 26629, 21486, 28172, 28172, 28172,
	562, 28172, 28172, 28172, 2320, 3300, 28172, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14413, -59, 561, 218, -1000, 3086,
	213, 28172, -1000, 69794, 3424, 28172, 28172, 28172, 28172, 3381,
	3037, 3380, 813, 839, -1000, -1000, -1000, 1521, 1697, -1000,
	3177, -1000, 2907, 46613, 3025, 69794, 406, -1000, 1010, 69794,
	-1000, -1000, 3263, 37404, 37404, 2843, 2843, -1000, -1000, 205,
	-1000, 57707, 69794, 2809, 3717, 3607, 837, -1000, 5665, 2145,
	3716, 3176, 3641, -1000, 6532, 58717, 6215, 1689, -1000, -1000,
	2808, 2439, 835, -1000, 56714, 1957, 69794, 69794, 1220, -1000,
	-1000, -1000, -1000, -1000, -1000, 1779, 69794, -1000, 18362, -1000,
	203, -1000, 1006, 2751, 69794, -1000, 69794, 836, 835, 835,
	835, 835, 835, -1000, 69794, 1674, 69794, 1430, 57707, 2805,
	3715, 2205, -1000, -1000, 69794, 1507, -1000, -1000, 3714, 3665,
	3800, 3640, 600, 18362, 3856, -1000, 3798, 2274, 38919, 69794,
	1422, 466, -1000, 62219, 3515, 256, 600, -1000, 248, -1000,
	1703, 89363, 3840, 3665, 3665, 13291, 69794, 69794, 69794, -1000,
	69794, 69794, -1000, 3636, 72824, -1000, 89363, 69794, -1000, 823,
	3098, 1178, 1175, 3056, 65754, 69794, 72319, 71814, 69794, 1449,
	-1000, -1000, 1848, 69794, -1000, 18362, 69794, 61209, 1396, 1361,
	69794, 1934, 60704, 69794, 1920, -1000, 69794, 1566, -1000, -1000,
	49643, -1000, 2938, 1906, 18873, 8223, 69794, 69794, 69794, 11954,
	69794, 69794, -1000, -1000, -1000, -1000, -1000, -1000, 782, -1000,
	-1000, -1000, 69794, 69794, 782, 782, 15168, 69794, 69794, 11303,
	120, 1534, 69794, 1416, 120, 1525, 62219, 1450, 69794, 184,
	-1000, -1000, 88389, 85954, -1000, 1796, -1000, -1000, -1000, 276,
	-1000, 90824, 69794, 69794, 69794, 69794, 69794, -1000, 3487, 71309,
	28172, 3486, -1000, 69794, -1000, 821, 3484, 69794, 69794, -1000,
	-1000, -1000, 3476, 3175, 2036, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2409, 1464, 49643, 49643, 3377, 69794, 69794,
	1964, 3170, 69794, -1000, 69794, -1000, 219, 219, 219, 69794,
	-1000, 69794, 69794, -1000, -1000, -1000, 69794, -1000, 69794, -1000,
	3613, 69794, 69794, -1000, 1644, 1642, 3376, -1000, 1822, -1000,
	49643, 1895, -1000, 70804, -1000, 69794, -1000, 49643, 1505, 1895,
	-1000, -1000, 69794, -1000, -1000, 69794, 814, 2992, 1640, 1630,
	1620, 1614, 69794, 69794, 3840, 3764, 69794, 3840, 70299, 18362,
	2644, 69794, 3375, 69794, 69794, 55704, 819, 89363, 55704, 43039,
	55704, 55704, 2750, 89363, -1000, -1000, -1000, -1000, -1000, -1000,
	363, -1000, 369, -1000, 3624, 3169, -1000, 368, -1000, 183,
	559, 557, 3428, 3426, 556, 28172, 553, -1000, -1000, 368,
	-1000, 69794, 1504, 2748, -1000, 60, 60, 60, 3615, 2162,
	40962, -1000, -1000, -1000, -1000, -1000, -1000, 2960, -1000, 28172,
	1842, 3286, -1000, 3834, 3834, 783, -1000, 22001, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1887, 212, -1000,
	28172, 1385, 1030, -1000, -1000, -1000, -1000, 3255, 37404, -1000,
	3249, 3249, 1394, 1390, 3249, 69794, -1000, -1000, -1000, -1000,
	3422, -1000, 191, 191, 240, 240, 240, -1000, 1675, 1675,
	1675, 1675, 1675, 1675, 399, 5437, 11461, 1821, 28172, 28172,
	3372, 3371, 813, 1789, 28172, -1000, 3844, -1000, -1000, -1000,
	3298, -1000, -1000, 1809, 2661, -1000, -1000, -1000, -1000, 2559,
	33312, 33312, -1000, -1000, -1000, 22001, 812, -1000, -1000, -1000,
	-1000, 41981, -1000, 808, 28172, -1000, -1000, 3564, -1000, -1000,
	28172, 105, -32, -1000, -1000, 179, 547, 178, -1000, -56,
	-1000, 546, 28172, 28172, 28172, -1000, 14688, 3820, -1000, -1000,
	3368, -1000, 3366, 3361, 3359, -1000, 805, 545, 2488, -1000,
	28172, 1118, 797, -1000, 54694, 3266, 2634, 2552, 703, 1112,
	13773, 28172, 543, 537, 536, 534, 14355, 530, 3296, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 853, 528, 525,
	14232, 198, 523, 1873, -1000, 33312, 33312, 33312, 783, 517,
	508, 5738, 13699, 26115, 26115, 26115, 498, 13316, 28172, 46,
	5296, 177, 171, 167, 166, 18362, 165, -1000, 12526, 28172,
	2762, 18362, 1520, 164, 362, 494, -1000, 89363, 703, 359,
	1033, 489, -1000, 264, 2661, 12927, 2915, -1000, 197, 193,
	190, 28172, 3255, 163, -1000, 28172, -1000, -1000, 754, -1000,
	3029, -1000, 14688, -1000, -1000, -1000, 2916, 2913, 2549, -1000,
	-1000, 159, -1000, -1000, -1000, -1000, 3263, 53179, 28172, 153,
	-1000, 264, 2916, 31256, 17, 3072, 63229, 63229, 39424, -1000,
	36379, 64744, 63229, 63229, 1028, 3295, 749, 748, 264, -1000,
	-1000, -1000, 741, 740, 3145, 2932, -1000, 2932, 69794, -1000,
	488, 172, -1000, -1000, -1000, -1000, 69794, 639, 69794, 69794,
	3797, 635, 69794, 69794, 62219, 3712, 86441, 1775, 6215, -1000,
	3840, 54189, 2747, -1000, -1000, 151, -1000, -1000, 1483, 1775,
	3171, -1000, -1000, -1000, 2803, -1000, -1000, 1689, -1000, 481,
	-118, 3241, 137, -1000, -1000, -1000, 993, 69794, 2125, 600,
	69794, 3767, 1659, 1672, 2401, -1000, 2612, -1000, -1000, 18362,
	19384, 1304, -1000, 479, 152, -1000, 89363, 3840, -1000, -1000,
	-1000, -1000, -1000, 887, -1000, 69794, 54189, 54189, -1000, 1508,
	1125, 1430, -1000, 69794, 1438, 69794, 473, 69794, 69794, 2337,
	1299, 69794, 2746, -1000, -1000, 3831, 49643, 49643, 1912, 3501,
	1748, 1732, -1000, -1000, 3247, 1265, 49643, 794, 3711, 3040,
	2479, 3607, 2743, 3861, 2120, -1000, -1000, 401, -1000, 264,
	-1000, 28172, 737, 3613, -1000, 60199, 600, 1524, 256, 3259,
	3259, 69794, 472, 3358, -1000, -1000, 3356, 3355, 2799, 2466,
	3710, -1000, 3635, 1386, 1326, 28172, 736, -1000, 2056, 886,
	732, 730, 69794, 1592, 2988, -1000, 3692, 3624, 3691, 3624,
	-1000, -1000, -1000, 65249, -1000, 133, -1000, 275, -1000, -1000,
	-1000, -1000, 69794, 69794, 69794, 69794, -1000, 1527, -1000, -1000,
	-1000, -1000, 1519, -1000, 1900, -1000, -1000, -1000, -1000, -1000,
	2039, 1499, 130, -1000, -1000, 18362, 18362, 18362, 3840, -1000,
	120, -1000, 1494, 2086, -1000, -1000, 120, 3353, 2083, -1000,
	-1000, -1000, -1000, -1000, -1000, 120, 3352, 5665, -1000, 3350,
	120, 1516, 69794, 69794, 10223, 69794, 69794, 69794, 6714, 3349,
	1141, 1430, -1000, -1000, 85954, 88389, -1000, 88389, -1000, 276,
	-1000, 244, 262, -1000, -1000, -1000, -1000, 3347, -1000, 3624,
	3689, 14688, -1000, 1563, 28172, -1000, -1000, -1000, 1992, 3472,
	-1000, -1000, -1000, 60, 69794, 1597, 2033, 3346, 3059, 49643,
	69794, -1000, -1000, -1000, -1000, -1000, -1000, 411, -1000, 411,
	411, 3345, 3344, 69794, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 69794, -1000, -1000, -1000, -1000, -1000, 3831, 3831, 1439,
	3343, 3342, 3341, 3339, -1000, 3337, 3335, 3840, 3632, 3624,
	-1000, 3686, 3624, 127, -1000, 1005, -1000, 2442, 2431, 2986,
	-1000, 54189, -1000, -1000, -1000, 89363, -1000, -1000, -1000, 69794,
	69794, 724, -1000, -1000, 89363, -1000, -1000, -1000, -1000, 69794,
	-1000, -1000, -1000, 1024, -1000, -1000, 1024, 126, -1000, -1000,
	363, 69794, 47623, -1000, 1926, 352, -1000, -1000, -1000, 3282,
	-1000, 1369, -1000, -1000, 25601, 139, -1000, 69794, -1000, 1030,
	-1000, 704, -1000, 2985, 3205, 28172, 17, 69794, -1000, 69794,
	3249, 3249, 3249, 3249, 69794, -1000, 28172, 28172, 1466, 1427,
	28172, 33312, 33312, -1000, 28172, 826, -1000, -1000, -1000, -1000,
	3294, -1000, -1000, 1804, 2661, 28172, -1000, -1000, 1270, 1269,
	-1000, -1000, -1000, -1000, 1611, 1405, 119, -1000, 22001, 470,
	25087, 138, -1000, 264, 12608, -1000, -1000, 990, -1000, -1000,
	-1000, 459, 24573, -1000, -1000, 1100, -121, -121, 28172, 28172,
	1845, 1656, 1634, 1517, 3831, 3840, 2266, -1000, 28172, 12073,
	-1000, 1100, -1000, -1000, 85449, 28172, 2661, 3168, 3167, 28172,
	28172, 2625, 3240, -1000, -1000, 2511, 11317, -1000, -1000, -1000,
	-1000, 89363, -1000, 28172, -1000, 2101, -1000, -1000, 28172, 28172,
	-1000, 89363, 33312, 33312, 33312, 33312, 33312, 33312, 33312, 33312,
	33312, 33312, 33312, 33312, 33312, 2525, 33312, 722, 1067, 1067,
	1067, -1000, -1000, 24059, 28172, 28172, 89363, 458, 457, 454,
	-1000, 28172, 46, 28172, -1000, -1000, -1000, -1000, 115, -1000,
	28172, 18362, 5588, 453, 35874, 108, 1250, -1000, 2661, 28172,
	-1000, 1033, 2915, 28172, 3165, 3161, 2915, -1000, 452, -1000,
	449, 28172, 28172, 28172, 11252, 3205, -1000, 987, 14688, 794,
	-1000, -1000, 23030, 909, 794, 1309, 69794, 264, 2916, -1000,
	14688, 1003, 69794, -1000, 14688, 2800, 37404, 3116, 3101, 37404,
	3119, 3075, 3075, 3075, -1000, 1368, -1000, 69794, 721, -1000,
	63229, 64744, 63229, 63229, 50148, 448, 3072, -1000, -1000, 53684,
	719, -1000, -1000, -1000, 2783, 718, 35364, 28172, 264, 20456,
	28172, 1508, -1000, -1000, -1000, 3076, -1000, 1997, 57707, -1000,
	1750, 58212, 639, 716, 794, -1000, 107, 5665, 3056, 69794,
	6215, 715, -1000, -1000, -1000, 2451, 28172, -1000, -1000, 131,
	-1000, 125, 1293, -1000, 85954, 28172, 28172, -1000, 69794, 1689,
	69794, 3144, -1000, -1000, 3236, 85954, 85954, -1000, 3860, 19384,
	713, 69794, 3607, 712, 49643, 3767, -1000, 69794, -1000, -1000,
	69794, 2510, -1000, 3630, 1171, 705, 33312, 69794, 2591, -1000,
	2237, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 704,
	3833, 3832, 89363, -1000, 69794, 3583, 447, 123, -1000, -1000,
	69794, -1000, -1000, -1000, -1000, -1000, 701, -1000, -1000, 262,
	-1000, -1000, -1000, 1997, 639, 506, 2651, 1249, 1125, 47623,
	-1000, 60, 60, 49643, 49643, -1000, -1000, 3840, 3840, 774,
	3840, 60, 3615, 69794, 3607, 69794, 1843, 69794, -1000, 3334,
	2997, -1000, 69794, 37404, 38919, 11186, 3160, -1000, -1000, 3259,
	64239, 3259, -1000, 700, -1000, 411, 2656, 3840, 69794, 69794,
	-1000, 3024, -1000, -1000, -1000, 69794, 3685, 2362, -1000, 63734,
	-1000, 3056, 11100, 69794, 2127, 69794, 69794, -1000, 69794, 37909,
	-1000, -1000, 2474, 6126, 635, 2093, 1898, 1288, -1000, -1000,
	1508, 1436, 2127, 69794, -1000, 69794, -1000, -1000, -1000, -1000,
	-1000, 18362, 19384, 18362, -1000, -1000, -1000, -1000, -1000, -1000,
	1496, 69794, -1000, -1000, 18873, -1000, -1000, -1000, -1000, -1000,
	69794, 69794, 69794, 1415, 3228, 69794, 1412, 3225, 69794, 69794,
	69794, 69794, -1000, 3332, 120, 1510, 2069, -1000, 3331, 120,
	1506, 69794, -1000, -1000, -1000, -1000, 1285, 245, 69794, -1000,
	69794, -1000, 10510, 2127, -1000, 1984, -1000, 3330, 3325, 1810,
	2368, 69794, 3619, 694, 60, 1590, -1000, -1000, -1000, 69794,
	69794, -1000, 1141, 814, 69794, 69794, 69794, 69794, 69794, 3840,
	2416, 3684, -1000, 69794, -1000, 18362, -1000, 19920, 1283, 2325,
	-1000, 3796, 3074, 3073, -1000, 88876, 1954, 3624, -1000, -1000,
	-1000, -1000, -1000, 1493, -1000, 2324, -1000, 1328, -1000, 101,
	-1000, 28172, -1000, -1000, 41981, -1000, -1000, 3134, 3224, 14688,
	-1000, -1000, 69794, 69794, 69794, 69794, -1000, 507, 437, 28172,
	28172, 759, 1240, 591, 437, 28172, 28172, -1000, -1000, 1053,
	1967, 1966, 28172, 28172, -1000, 10318, -1000, 96, -1000, 28172,
	-1000, -1000, 3840, 28172, -1000, 446, 445, 438, 14688, 14688,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 436, -1000, -1000,
	14688, 28172, 430, 1753, -1000, 10273, 2915, 3471, 3470, -1000,
	-1000, 2915, 28172, 2565, -1000, 429, 14688, 426, 9899, -1000,
	88, 88, 237, 237, 237, -1000, 480, 480, 480, 480,
	480, 480, 1067, 3293, 2508, -1000, 2060, 10176, 9731, 9629,
	425, -1000, -1000, -1000, 46, 9576, -1000, 30742, -1000, -1000,
	422, 1213, 1211, -1000, 3219, 34854, 2579, -1000, 28172, 100,
	30228, 2915, -1000, -1000, 413, -1000, 3467, 3466, 408, -1000,
	-1000, 9510, 9510, 9510, 89363, 3134, -1000, 396, 95, 2860,
	37909, 2825, -1000, -1000, 2907, -1000, -1000, 28172, -1000, 69794,
	3072, 37404, 37404, 3226, 3100, 37404, -1000, -1000, -1000, -1000,
	-1000, 55704, 690, 69794, -1000, -1000, -1000, -1000, 63229, 689,
	69794, 69794, -1000, 44086, 2762, 687, 93, -56, 9389, 679,
	1508, 2545, -1000, 1750, 686, -1000, 2115, 3040, -1000, 3223,
	82, -1000, -1000, -1000, 3621, 2799, 57707, 69794, 2798, 3609,
	3607, -1000, 685, 3159, 1775, 90824, -1000, 14688, 3840, 2740,
	89363, -1000, 14688, 14688, 1677, -1000, 9, 69794, 85954, -1000,
	81, -1000, 993, -1000, 3265, 1994, 3795, 69794, -1000, 1593,
	-1000, -1000, -1000, 3613, 3613, 28172, 2060, 600, 3792, -1000,
	3571, -1000, -1000, 3061, -1000, -1000, 69794, -1000, 3840, -1000,
	1674, 18362, 257, 1487, 2799, 57707, 2797, 69794, 2204, -1000,
	1485, 60, 60, -1000, -1000, -1000, -1000, -1000, 3791, 1377,
	-1000, 55704, -1000, -1000, 2487, -1000, 3493, 3059, 49643, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 17, -1000, -1000, 38919,
	-1000, -1000, -1000, -1000, 28172, -1000, 1398, 2196, 3291, -1000,
	-1000, 3289, -1000, 69794, 1125, -1000, 62724, -1000, -1000, -1000,
	75, -1000, 1492, -1000, 2193, 2013, -1000, 71, 2127, 67,
	65, -1000, 3620, 802, 3578, 28172, 3465, 3763, 3761, -1000,
	-1000, 2591, 3458, 3788, 814, -1000, -1000, -1000, -1000, 2591,
	-1000, 5340, 89363, 782, 814, 3624, 3624, -1000, -1000, 707,
	-1000, -1000, -1000, -1000, 3323, 3322, 69794, 49643, -1000, 69794,
	49643, -1000, -1000, -1000, 3317, 69794, 69794, 69794, 1410, 3222,
	69794, 69794, 69794, -1000, -1000, 1282, -1000, 3624, -1000, -1000,
	69794, 69794, -18, -1000, 3831, 3831, 89363, 79, -1000, 3831,
	3831, -1000, -1000, 1094, 28172, 3316, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3624, -1000, 3840, 3840, -1000, 3624,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 89363, 89363,
	69794, 69794, 51, 77, 69794, -1000, 69794, -1000, -1000, -1000,
	9290, 395, 1206, 28172, 3577, -1000, -1000, -1000, -1000, 437,
	437, 28172, 28172, 28172, 437, 1053, -1000, -1000, 437, 437,
	-1000, -1000, 9041, -1000, 1100, -1000, -1000, -1000, -1000, 14688,
	-1000, 1100, 3220, -1000, 394, -1000, -1000, 393, 76, 69794,
	-1000, -1000, 28172, 33312, 3275, -1000, 28172, 28172, 28172, -1000,
	-1000, 49, 48, 684, -1000, -1000, -1000, -1000, 2579, 3219,
	-1000, -1000, 8976, 391, 1451, 14688, 2546, 390, -1000, -1000,
	-1000, -1000, 2915, 28172, 2807, 2915, 1877, 1206, 3009, 2863,
	45, -1000, 69794, 2544, 14688, -1000, -1000, -1000, 3226, -1000,
	682, 28172, 37404, -1000, 680, 69794, 44, -1000, 69794, 43,
	41, 89363, 31, -1000, 3786, 2793, 32798, 28172, 389, 2969,
	-1000, 3678, 3678, 2954, -1000, 3132, 18362, 679, 3840, 3040,
	69794, 2473, 2473, 2655, 69794, -1000, 58212, 2612, 1135, 1750,
	387, 639, 69794, -1000, 1518, 3785, 37909, 62219, -1000, 30,
	-1000, 88389, -1000, 552, -1000, 1278, -1000, 2739, 1332, 3269,
	29, -1000, 382, 1457, 1456, 1351, 69794, 794, 28, 3767,
	-1000, 3456, 3044, 3044, 8733, 1863, 620, -1000, 69794, -1000,
	-1000, 23, -1000, 69794, 1482, 347, 69794, 1125, 2314, 69794,
	794, -1000, 69794, 671, 1843, 69794, 666, 3619, 60, 325,
	8182, 55704, 3782, 3782, 69794, 665, 664, 655, -1000, -1000,
	-1000, -1000, 2127, 2075, -1000, -1000, -1000, -1000, -1000, 2075,
	1692, 2075, 37909, 42510, -1000, 69794, 69794, -1000, 7855, -1000,
	3683, 3682, -1000, -1000, 654, -1000, 3784, 3583, -1000, -1000,
	-1000, -1000, 19384, 69794, 69794, 1781, 350, 1781, 348, 69794,
	-1000, -1000, 3313, 69794, 49643, -1000, -1000, 3312, -1000, -1000,
	2127, -1000, -1000, 1810, 41981, 41476, -1000, 2368, 653, 652,
	651, 7735, 69794, -1000, -1000, -1000, -1000, 3583, 345, -1000,
	-1000, -1000, 87902, 89363, -1000, -1000, -1000, -1000, -1000, 69794,
	14688, 29200, 437, 437, 437, -1000, 331, 2037, 28172, -1000,
	-1000, -1000, 7628, 2097, 33312, 14688, 14688, 14688, -1000, 28172,
	-1000, 28172, -1000, -1000, -1000, 1339, -1000, -1000, 2646, 54,
	-1000, 3783, 328, 3158, 28172, -1000, -1000, -1000, -1000, -1000,
	-1000, 2696, 2807, 326, -1000, 2066, -1000, 3002, 3010, 2981,
	-1000, 3255, 37909, -1000, 794, -1000, 69794, 14688, -1000, 28172,
	16, -1000, 15, -1000, -1000, 1028, 44086, -1000, 649, 69794,
	3, -1000, 497, 33312, 6279, -1000, -1000, -1000, 2876, 28172,
	2873, -1000, 2895, -1000, -1000, -1000, 3780, 3780, -1000, -1000,
	3780, 3780, 2689, 3840, -4, -1000, 36889, 3255, -1000, 2655,
	-5, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3133, 635, 1159, 643, -1000, -1000, 3040,
	1997, 1750, 639, 1152, 1085, 1036, 794, -7, 3056, 90824,
	6215, -1000, -1000, 192, -1000, -1000, 89363, 3446, 2280, 1332,
	-1000, 1885, -1000, -1000, -1000, 69794, -1000, -1000, 3618, 3616,
	-1000, -1000, 69794, 1257, -1000, 3609, 3607, -1000, 2022, -1000,
	1826, 3137, 1815, 625, 28172, 2225, -1000, 18362, 1125, 69794,
	1997, 639, -1000, 2650, 1125, 3615, -1000, 321, 55704, -1000,
	3854, -1000, 37404, -1000, 3782, -1000, 2185, -1000, -1000, 56209,
	28172, 28172, 2612, 3613, 638, 3613, 69794, 3613, -1000, -1000,
	636, 2977, 635, -1000, 3578, -1000, -1000, 28172, 2099, 3050,
	-1000, -1000, -1000, -1000, -1000, 1393, -1000, 1387, -1000, 69794,
	1781, 344, 69794, -1000, 726, 2737, -1000, 89363, -1000, 89363,
	89363, 28172, -1000, -1000, 3624, -1000, 320, 319, 317, 52,
	-1000, 3781, 50, -1000, 14688, -1000, -1000, -1000, -1000, 20971,
	634, 633, 419, -1000, 310, 29714, 29714, 29714, 46, 28172,
	2097, -8, -27, -1000, 2534, 2620, 2703, 2654, 28172, 18362,
	-1000, 2709, 14688, -1000, -1000, 307, 3156, -1000, -1000, -1000,
	69794, 2998, 2971, 53179, -1000, -1000, -1000, -28, -29, -1000,
	-1000, -1000, -1000, 69794, -31, -1000, 87415, 32798, 24, 18362,
	2060, 2765, 69794, 2867, 14688, 2871, 3218, 3840, 3840, 3840,
	3840, 46108, 3453, 45603, -1000, -1000, 18362, -1000, -1000, -1000,
	-1000, -1000, 47118, -1000, 3133, -1000, 1377, 2372, -1000, -1000,
	38414, 2612, 2655, 1750, 3040, 2799, -1000, 1147, 1146, 3609,
	2073, 631, -1000, 1775, -1000, -1000, 2248, 630, 1468, -1000,
	-1000, 3780, -1000, -1000, 2336, -1000, 2182, 2181, -1000, -1000,
	-1000, 3777, 1384, -1000, 2001, -1000, 3155, 3140, 2956, -1000,
	-1000, -1000, -1000, 5665, 7509, 3776, 69794, -1000, -1000, 1125,
	1481, 2799, 69794, -1000, -1000, -1000, 626, -35, -1000, 17,
	-1000, -1000, -1000, -48, -1000, 3831, -51, -52, 3044, 69794,
	3044, 600, 3044, 41981, 1030, 2977, -1000, 7456, 625, -1000,
	28172, 69794, 69794, -1000, -1000, 1381, -1000, 1694, 1556, 1694,
	-54, -1000, -55, -69, 6901, -1000, -1000, -1000, -1000, 69794,
	624, 29200, -1000, 28172, 28172, 618, -1000, 2253, -1000, 34340,
	1831, 1561, 5486, 2253, 2253, 14688, -1000, -1000, -1000, 2807,
	2597, 2588, -1000, 2643, -1000, 2626, 2694, 2642, -1000, -1000,
	-1000, -1000, 2715, 309, 3217, 3209, 329, 3775, 1580, -72,
	-1000, 69794, 2828, 2782, -1000, 34854, -1000, 2792, -1000, -1000,
	-1000, 2856, 2974, -1000, -1000, 2851, 862, 2884, -1000, -1000,
	-1000, -1000, 9, -1000, 45098, 9, -1000, -1000, -73, -1000,
	-1000, 1377, -1000, 2136, -74, -1000, 802, 3578, 28172, 3133,
	3040, 2655, 1750, -1000, -1000, -1000, 3630, 614, 37909, -1000,
	1843, 28172, -1000, -1000, -1000, 69794, 2276, 55704, 55704, 794,
	69794, -1000, -1000, 2942, -1000, 2959, 2219, 2219, 1767, 1431,
	1810, -1000, -1000, 69794, 1480, 1125, 304, -1000, 3848, -1000,
	56209, -1000, -1000, 3307, -1000, -75, -1000, 1863, 3255, 302,
	-1000, 1030, -1000, -1000, 14688, 1781, 1781, 69794, -1000, -1000,
	-1000, 3208, -1000, 55704, 89363, -1000, -1000, -1000, -1000, -1000,
	-1000, -77, -92, 29200, -1000, 1746, 3673, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 301, 3139, 3138, -1000, -1000, 2618,
	-1000, 2616, -1000, 2807, -1000, 69794, 69794, 69794, -1000, -1000,
	69794, -1000, 612, -1000, -1000, 2828, -1000, 33312, 33312, 3385,
	-1000, 33312, -1000, 2762, 607, -1000, 53179, -1000, -1000, 2907,
	69794, 3023, 606, -1000, -1000, 9, -1000, -1000, 47118, -1000,
	-1000, 2775, 2772, -1000, 38414, 69794, 69794, 6709, 1377, 2655,
	3133, 3040, 3607, 37909, -97, 55704, 6344, -1000, -1000, 1547,
	-11, -12, 3609, -1000, -1000, 2470, -1000, -1000, 3464, -1000,
	-1000, -1000, -18, 1125, 69794, -1000, -1000, -1000, -1000, 604,
	2127, -1000, 2127, 3137, -1000, -1000, -1000, -1000, -1000, 1781,
	69794, -1000, -1000, -1000, -1000, -99, 1544, -1000, -1000, 1182,
	28686, -1000, 2575, 2571, -1000, -1000, 3136, 3060, 288, 281,
	-1000, 28172, -1000, 2060, 2060, -1000, 2060, 2791, 69289, -19,
	2532, -102, -1000, 28172, -1000, -1000, -1000, -1000, -1000, -1000,
	3578, -1000, 3133, 1377, 2655, 1377, -107, -1000, 2073, 603,
	-1000, 3446, 3306, 3268, -1000, -1000, 600, 600, -1000, 1125,
	28172, -1000, 2127, -1000, -1000, -1000, -1000, -1000, -1000, 2569,
	2568, 2665, 44593, 69794, 69794, 69794, 6153, 69794, -110, -1000,
	86928, 2769, 3022, 2911, -113, 69794, 1377, -1000, 3133, 3255,
	-1000, 37909, 3630, 17851, 2247, 1455, 1440, -1000, -1000, -1000,
	-115, 2127, -1000, -1000, -1000, 3567, 828, -1000, -1000, -1000,
	-1000, -1000, -117, 2807, 69289, 2780, 1522, 3843, -1000, -1000,
	-1000, 2907, -1000, -1000, -1000, 1377, -1000, -1000, 3607, -125,
	-1000, -1000, -1000, -1000, -1000, 1843, 3588, 3587, -1000, 44593,
	28172, -1000, 293, -1000, -1000, 2646, 2768, 2768, 3841, 2882,
	2531, -1000, 1377, -1000, 17851, 55704, 2179, 2142, 3039, -121,
	-1000, 2620, 2646, 2807, -1000, 592, 69794, 3022, 3255, -1000,
	590, 55704, 55704, 69794, 249, 2807, 2620, -1000, 69289, 2785,
	-1000, -1000, 17851, -1000, -1000, -1000, 3840, -1000, 2807, -131,
	589, -133, -1000, -1000, 69289, -1000, -146, -1000,
}

var yyPgo = [...]int16{
	0, 4313, 4312, 3012, 141, 0, 81, 6868, 4310, 34,
	273, 322, 4309, 106, 177, 474, 160, 317, 331, 3929,
	8323, 379, 111, 4305, 286, 4305, 4301, 336, 278, 233,
	4300, 218, 4298, 4296, 193, 216, 4294, 4293, 373, 4290,
	38, 249, 194, 335, 362, 363, 365, 4286, 312, 343,
	315, 321, 4284, 7391, 479, 2417, 14, 4283, 4280, 1558,
	4279, 4277, 4275, 307, 4274, 264, 4271, 4269, 4268, 4266,
	11, 338, 4266, 4265, 306, 4262, 4261, 4260, 104, 4257,
	4256, 4255, 4254, 222, 314, 295, 4253, 257, 300, 500,
	204, 8848, 9432, 4252, 330, 146, 3262, 210, 4251, 4250,
	11822, 4249, 4248, 11260, 11173, 11126, 4246, 10744, 9452, 133,
	225, 289, 4244, 261, 275, 345, 27, 339, 4, 429,
	332, 4243, 4240, 4239, 187, 4238, 4237, 62, 50, 296,
	4236, 4235, 76, 33, 54, 360, 342, 4234, 4233, 368,
	4232, 4231, 9527, 73, 214, 4225, 137, 4224, 310, 309,
	64, 43, 4222, 308, 262, 279, 44, 256, 213, 56,
	206, 311, 4221, 4220, 4219, 4218, 60, 246, 92, 5337,
	380, 361, 4216, 4214, 4213, 4212, 4208, 201, 198, 4207,
	4206, 4205, 4204, 40, 35, 4203, 4202, 240, 254, 251,
	294, 4200, 297, 162, 16, 31, 185, 173, 4193, 4192,
	4191, 4190, 24, 77, 22, 4185, 4182, 4180, 333, 4180,
	4180, 4180, 4180, 4177, 285, 4176, 4175, 4172, 153, 4171,
	4170, 4169, 88, 4169, 51, 68, 4168, 37, 138, 316,
	266, 347, 47, 267, 3120, 248, 4165, 364, 341, 337,
	89, 323, 7, 235, 209, 259, 4164, 243, 4163, 4162,
	4162, 359, 292, 232, 263, 189, 196, 4161, 370, 4160,
	358, 4159, 4157, 4156, 4154, 303, 147, 69, 4153, 236,
	4151, 99, 4149, 4148, 102, 302, 25, 55, 4146, 41,
	107, 39, 161, 4144, 75, 298, 1, 15, 10, 4140,
	531, 4133, 70, 4131, 260, 250, 4129, 305, 252, 4128,
	405, 66, 18, 13, 4127, 5, 3, 6, 17, 253,
	4125, 192, 4123, 129, 4122, 244, 203, 143, 4115, 123,
	4110, 78, 49, 116, 4107, 4106, 4105, 180, 142, 4101,
	96, 4100, 200, 277, 4099, 4098, 4092, 19, 45, 126,
	63, 65, 48, 29, 86, 52, 4091, 4086, 36, 112,
	4084, 217, 42, 9, 103, 270, 97, 4080, 30, 23,
	21, 269, 208, 326, 327, 4079, 26, 274, 346, 4078,
	4075, 344, 115, 334, 71, 224, 4070, 219, 4067, 53,
	4066, 82, 59, 174, 61, 58, 4064, 57, 220, 4063,
	152, 355, 4060, 287, 114, 11652, 4058, 128, 280, 375,
	87, 4056, 223, 207, 4055, 20, 318, 110, 376, 4055,
	4054, 319, 4054, 4052, 4051, 190, 144, 130, 4050, 139,
	4048, 4045, 4044, 4043, 4040, 4039, 4037, 4034, 4030, 377,
	378, 4029, 325, 313, 371, 353, 351, 272, 366, 4024,
	4023, 4022, 4021, 4019, 4016, 4014, 4013, 4011, 4009, 4008,
	4007, 4006, 4004, 4003, 4001, 4000, 3999, 3998, 3997, 3996,
	3995, 3992, 3991, 3990, 3989, 3988, 3987, 3985, 3984, 3983,
	3982, 3979, 3978, 3977, 3976, 3975, 3973, 3972, 3971, 3970,
	3969, 3968, 3966, 231, 234, 3965, 3963, 3962, 328, 324,
	271, 283, 367, 228, 227, 95, 3961, 3960, 118, 3958,
	3957, 3956, 354, 3955, 369, 3954, 3953, 3952, 3949, 205,
	117, 3947, 79, 195, 356, 46, 3945, 3943, 221, 281,
	108, 105, 3940, 3939, 3938, 3935, 3928, 230, 3927, 3922,
	229, 67, 3921, 268, 238, 3920, 329, 352, 3917, 3915,
	348, 3914, 828, 357, 3913, 241, 245, 83, 320, 3912,
	94, 3911, 3909, 291, 372, 215, 3908, 3905, 3904, 72,
	3903, 3902, 239, 284, 3899, 3898, 3892, 3890, 3886, 3884,
	2, 93, 28, 8, 3883, 3880, 32, 3879, 3877, 265,
	3875, 3873, 340, 80, 74, 3872, 3871, 3870, 3869, 282,
	3868, 3867, 290, 12, 3866, 3866, 3097, 349,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 18, 18, 359, 359, 394, 394,
	394, 25, 25, 26, 26, 27, 27, 28, 28, 40,
	40, 40, 5, 5, 5, 6, 6, 6, 6, 6,
	8, 8, 7, 13, 13, 14, 14, 395, 395, 24,
	24, 16, 16, 589, 589, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 15, 15, 17, 17, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 585, 585, 585, 585, 585,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 89, 91, 90, 90, 90, 98, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 113, 113, 57, 57, 84, 84, 88,
	88, 87, 87, 87, 87, 85, 85, 58, 58, 58,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	71, 71, 73, 73, 73, 73, 73, 74, 74, 74,
	75, 12, 12, 12, 12, 12, 12, 12, 12, 76,
	76, 77, 69, 78, 78, 189, 189, 79, 79, 79,
	80, 80, 80, 81, 81, 82, 82, 82, 82, 266,
	266, 266, 542, 542, 119, 119, 119, 119, 119, 119,
	119, 70, 70, 83, 83, 83, 60, 61, 61, 64,
	64, 63, 62, 62, 65, 65, 65, 68, 68, 117,
	117, 117, 66, 66, 67, 152, 152, 152, 145, 145,
	145, 145, 145, 145, 154, 154, 154, 154, 153, 153,
	153, 153, 153, 155, 155, 155, 155, 155, 116, 116,
	96, 97, 97, 97, 97, 97, 92, 92, 92, 94,
	95, 110, 110, 111, 111, 99, 99, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 106, 106,
	102, 102, 586, 586, 587, 587, 93, 93, 93, 93,
	93, 93, 103, 104, 107, 108, 105, 105, 105, 105,
	588, 114, 114, 114, 115, 115, 101, 101, 142, 142,
	144, 144, 146, 146, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 143, 143, 118, 118,
	123, 123, 120, 120, 149, 149, 148, 148, 166, 166,
	167, 169, 169, 170, 170, 168, 168, 168, 168, 168,
	168, 168, 168, 135, 135, 136, 136, 137, 137, 139,
	140, 140, 140, 140, 138, 138, 141, 141, 141, 171,
	171, 171, 171, 171, 171, 171, 236, 236, 235, 235,
	238, 238, 238, 238, 239, 239, 240, 240, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	397, 397, 398, 398, 398, 399, 399, 399, 252, 252,
	252, 252, 252, 252, 253, 253, 253, 253, 254, 254,
	255, 255, 256, 256, 256, 257, 257, 258, 258, 260,
	261, 261, 261, 262, 262, 262, 263, 263, 263, 264,
	264, 242, 242, 192, 192, 192, 213, 245, 245, 244,
	244, 244, 244, 247, 247, 247, 247, 247, 246, 246,
	248, 248, 249, 249, 250, 250, 251, 251, 265, 265,
	274, 274, 270, 270, 271, 272, 272, 273, 273, 547,
	268, 268, 267, 267, 269, 280, 280, 282, 282, 281,
	281, 281, 281, 283, 283, 284, 284, 275, 275, 276,
	276, 277, 277, 277, 278, 278, 279, 279, 279, 279,
	279, 285, 290, 289, 289, 301, 301, 291, 291, 292,
	293, 293, 296, 296, 295, 295, 297, 297, 297, 298,
	298, 298, 299, 299, 294, 294, 300, 300, 303, 303,
	304, 304, 304, 304, 304, 304, 304, 304, 305, 305,
	305, 305, 302, 302, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 307, 307, 307, 307, 307, 308, 308,
	309, 309, 310, 310, 286, 286, 287, 287, 287, 287,
	287, 287, 288, 288, 172, 396, 396, 182, 182, 182,
	182, 182, 204, 204, 183, 183, 187, 173, 184, 184,
	190, 190, 188, 185, 185, 174, 259, 259, 175, 186,
	186, 176, 176, 207, 207, 208, 208, 214, 214, 214,
	215, 215, 216, 216, 218, 218, 219, 219, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 220, 220, 225, 226, 226, 226, 226,
	226, 226, 221, 221, 227, 232, 232, 232, 232, 228,
	228, 228, 228, 34, 34, 371, 371, 371, 371, 371,
	371, 371, 371, 370, 370, 370, 369, 369, 369, 369,
	369, 231, 231, 504, 504, 230, 230, 590, 590, 531,
	531, 209, 209, 210, 210, 211, 211, 212, 212, 196,
	196, 196, 196, 196, 205, 205, 206, 206, 197, 197,
	199, 200, 201, 201, 201, 201, 201, 194, 191, 191,
	191, 198, 198, 198, 223, 223, 224, 224, 202, 202,
	202, 203, 203, 195, 195, 150, 150, 150, 151, 151,
	151, 193, 193, 177, 177, 177, 177, 177, 177, 373,
	373, 373, 373, 373, 373, 373, 373, 311, 311, 312,
	312, 315, 315, 315, 318, 326, 326, 326, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 375, 375,
	376, 376, 377, 377, 378, 378, 313, 313, 314, 314,
	319, 319, 320, 320, 321, 321, 321, 321, 322, 325,
	325, 379, 379, 380, 380, 381, 10, 33, 316, 330,
	330, 331, 331, 331, 331, 334, 334, 334, 334, 337,
	337, 337, 383, 383, 386, 386, 388, 388, 388, 388,
	384, 384, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 591, 591,
	29, 29, 29, 382, 382, 385, 385, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 317, 317, 333, 333,
	333, 333, 333, 333, 333, 335, 335, 324, 324, 323,
	323, 339, 339, 338, 338, 338, 338, 343, 343, 343,
	343, 343, 340, 341, 342, 342, 342, 342, 342, 344,
	344, 345, 345, 346, 347, 347, 348, 348, 348, 374,
	374, 352, 352, 352, 352, 353, 353, 354, 354, 355,
	178, 178, 336, 336, 356, 356, 358, 358, 357, 357,
	360, 360, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 361, 361, 366, 366, 362, 362, 11,
	437, 437, 437, 437, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 364, 364, 364, 365, 367,
	367, 592, 592, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 418, 418, 418, 536, 536,
	536, 539, 539, 539, 539, 538, 538, 540, 540, 419,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 38, 38, 39, 39, 407, 86, 86,
	86, 86, 406, 72, 72, 181, 181, 181, 181, 181,
	181, 181, 181, 181, 181, 181, 181, 181, 181, 181,
	181, 181, 181, 181, 181, 181, 181, 181, 181, 181,
	181, 181, 181, 181, 181, 181, 181, 181, 181, 181,
	181, 181, 181, 181, 181, 181, 181, 181, 181, 181,
	181, 181, 181, 181, 181, 181, 181, 181, 181, 181,
	328, 328, 329, 329, 329, 329, 329, 329, 349, 350,
	350, 351, 351, 351, 351, 413, 413, 413, 413, 543,
	543, 544, 544, 545, 545, 545, 546, 546, 546, 546,
	546, 548, 548, 548, 548, 548, 549, 109, 109, 109,
	550, 550, 551, 551, 553, 553, 553, 553, 553, 558,
	558, 552, 552, 559, 559, 559, 417, 577, 577, 560,
	560, 541, 541, 415, 415, 561, 561, 561, 563, 563,
	562, 562, 562, 562, 562, 568, 568, 569, 569, 571,
	566, 566, 567, 567, 574, 564, 564, 594, 594, 565,
	565, 572, 572, 593, 593, 570, 570, 570, 573, 573,
	573, 573, 575, 575, 416, 416, 416, 416, 222, 222,
	576, 576, 576, 576, 441, 441, 441, 441, 442, 443,
	443, 443, 443, 443, 443, 443, 444, 444, 444, 444,
	444, 444, 444, 444, 444, 444, 444, 444, 444, 444,
	444, 444, 448, 448, 483, 483, 595, 595, 449, 449,
	450, 450, 484, 484, 486, 486, 486, 486, 451, 485,
	485, 487, 452, 452, 452, 452, 452, 452, 452, 452,
	452, 452, 452, 452, 452, 473, 474, 474, 490, 490,
	490, 490, 489, 489, 488, 488, 495, 495, 475, 475,
	476, 476, 476, 491, 491, 492, 492, 493, 493, 477,
	477, 477, 477, 478, 478, 479, 480, 480, 494, 494,
	526, 526, 526, 526, 527, 527, 534, 528, 529, 529,
	530, 447, 447, 447, 447, 447, 481, 481, 482, 482,
	532, 532, 533, 533, 439, 439, 440, 401, 401, 402,
	400, 400, 400, 403, 403, 404, 404, 404, 404, 537,
	537, 537, 537, 537, 537, 537, 537, 537, 537, 537,
	535, 535, 535, 535, 234, 234, 237, 237, 229, 229,
	578, 578, 578, 578, 578, 578, 578, 578, 578, 580,
	580, 580, 233, 233, 9, 9, 9, 9, 582, 582,
	433, 433, 433, 579, 579, 579, 579, 579, 581, 581,
	581, 581, 434, 434, 372, 372, 372, 372, 372, 372,
	390, 390, 30, 30, 31, 32, 32, 35, 35, 35,
	35, 36, 36, 37, 37, 37, 37, 391, 392, 392,
	393, 393, 453, 453, 454, 499, 499, 499, 499, 496,
	496, 498, 497, 497, 455, 500, 500, 456, 456, 457,
	458, 501, 501, 505, 505, 506, 506, 506, 506, 506,
	507, 507, 508, 508, 509, 509, 510, 510, 459, 511,
	511, 460, 460, 461, 461, 513, 513, 518, 518, 518,
	462, 462, 462, 463, 463, 463, 463, 514, 514, 519,
	519, 519, 519, 519, 519, 519, 243, 243, 464, 465,
	465, 465, 465, 465, 465, 465, 465, 465, 466, 466,
	466, 512, 512, 512, 467, 522, 522, 515, 515, 520,
	520, 520, 520, 520, 502, 502, 583, 583, 583, 584,
	584, 468, 469, 469, 516, 516, 521, 521, 470, 471,
	517, 517, 517, 517, 472, 472, 503, 503, 523, 523,
	524, 524, 525, 525, 42, 42, 42, 41, 41, 156,
	156, 159, 159, 159, 159, 159, 162, 163, 164, 165,
	160, 160, 157, 158, 158, 161, 161, 124, 124, 125,
	125, 127, 129, 129, 129, 128, 130, 130, 126, 126,
	131, 131, 131, 131, 132, 132, 133, 133, 133, 133,
	133, 134, 134, 134, 134, 134, 44, 44, 44, 44,
	43, 43, 45, 45, 45, 45, 45, 45, 46, 46,
	47, 47, 48, 49, 49, 49, 50, 50, 51, 51,
	52, 52, 420, 420, 420, 420, 420, 420, 420, 420,
	420, 420, 420, 420, 421, 421, 596, 596, 596, 430,
	430, 430, 422, 428, 426, 423, 423, 424, 424, 424,
	424, 429, 429, 427, 425, 425, 425, 425, 425, 425,
	435, 435, 436, 436, 431, 431, 431, 431, 431, 431,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 438,
	438, 121, 122, 122, 414, 414, 414, 408, 408, 554,
	554, 554, 554, 554, 554, 554, 554, 554, 554, 554,
	554, 554, 554, 554, 554, 554, 556, 556, 555, 555,
	555, 557, 557, 557, 557, 557, 597, 597, 405, 405,
	405, 405, 409, 409, 445, 446, 410, 410, 411, 411,
	411, 411, 412, 412, 412, 412,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 2, 0, 3, 0, 2, 0, 1, 0, 2,
	2, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 2, 3,
	0, 1, 3, 1, 0, 3, 3, 4, 4, 4,
	4, 3, 2, 1, 1, 2, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 5, 3, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 3, 3, 2, 2, 3, 5, 4, 6,
	3, 5, 4, 6, 4, 6, 5, 7, 3, 2,
	4, 2, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 3, 4, 4, 6, 3,
	3, 4, 3, 4, 4, 5, 4, 5, 1, 1,
	3, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 5, 6, 3,
	4, 1, 1, 2, 4, 1, 1, 1, 2, 2,
	2, 2, 1, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 6,
	2, 3, 5, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 2, 1, 2, 1,
	0, 2, 2, 3, 5, 0, 2, 4, 3, 1,
	5, 1, 1, 4, 1, 4, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 6, 4, 4,
	6, 4, 4, 4, 4, 4, 6, 5, 5, 5,
	4, 6, 4, 4, 4, 4, 5, 7, 7, 9,
	4, 6, 5, 5, 7, 7, 4, 7, 4, 6,
	6, 4, 5, 4, 5, 3, 11, 8, 9, 8,
	1, 0, 5, 5, 3, 3, 5, 3, 2, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	5, 3, 4, 1, 3, 3, 1, 2, 2, 0,
	1, 2, 0, 2, 3, 3, 3, 4, 0, 1,
	1, 1, 1, 2, 3, 4, 5, 6, 8, 6,
	6, 1, 3, 1, 3, 3, 5, 1, 0, 1,
	2, 4, 2, 0, 3, 3, 2, 1, 3, 4,
	3, 5, 4, 3, 5, 1, 1, 1, 1, 4,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 3, 2, 3, 2, 0, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 3, 3, 0, 2, 3, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 3,
	3, 2, 4, 1, 5, 2, 5, 2, 5, 2,
	1, 3, 3, 0, 1, 0, 3, 0, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 0,
	5, 0, 5, 0, 0, 1, 1, 3, 1, 1,
	1, 3, 3, 1, 1, 1, 2, 4, 4, 2,
	3, 5, 5, 1, 3, 1, 0, 1, 2, 3,
	2, 4, 2, 3, 2, 0, 1, 2, 0, 9,
	9, 2, 1, 4, 4, 4, 1, 0, 1, 3,
	3, 2, 1, 1, 2, 0, 1, 3, 2, 3,
	2, 3, 1, 4, 2, 3, 2, 3, 2, 3,
	1, 1, 2, 2, 4, 1, 2, 3, 3, 4,
	5, 4, 5, 4, 2, 2, 2, 1, 1, 0,
	5, 2, 2, 2, 3, 1, 0, 1, 3, 9,
	1, 2, 0, 7, 7, 0, 10, 6, 0, 4,
	5, 2, 0, 2, 4, 0, 1, 1, 0, 5,
	2, 4, 1, 1, 4, 5, 4, 0, 2, 0,
	1, 0, 1, 5, 1, 0, 2, 0, 2, 6,
	2, 0, 1, 3, 2, 4, 0, 1, 3, 2,
	1, 0, 1, 3, 3, 2, 0, 2, 2, 2,
	3, 3, 4, 1, 3, 3, 2, 7, 12, 1,
	3, 2, 3, 3, 1, 2, 2, 2, 2, 1,
	2, 13, 2, 2, 0, 2, 0, 1, 3, 3,
	1, 3, 1, 3, 3, 3, 3, 3, 0, 3,
	3, 0, 3, 0, 7, 7, 3, 0, 2, 1,
	1, 1, 1, 1, 1, 2, 2, 1, 3, 3,
	6, 0, 3, 0, 2, 3, 2, 3, 4, 4,
	3, 3, 0, 5, 2, 5, 2, 0, 4, 2,
	1, 0, 1, 0, 1, 3, 3, 6, 7, 5,
	7, 9, 2, 0, 7, 1, 3, 1, 4, 4,
	7, 2, 1, 1, 1, 3, 2, 8, 1, 3,
	3, 5, 2, 1, 3, 7, 2, 0, 10, 1,
	2, 9, 11, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 3, 0, 1, 3, 2, 0, 1, 1,
	3, 3, 1, 1, 3, 3, 3, 3, 4, 4,
	3, 3, 2, 1, 3, 2, 1, 1, 1, 1,
	3, 0, 1, 3, 1, 1, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 2, 2, 1, 3, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 0, 2, 0, 1, 0, 1,
	0, 1, 0, 1, 0, 1, 0, 1, 0, 4,
	4, 4, 5, 5, 2, 5, 3, 5, 2, 0,
	3, 1, 2, 5, 5, 8, 3, 4, 8, 5,
	0, 4, 3, 0, 1, 3, 1, 3, 2, 2,
	4, 4, 5, 2, 0, 1, 1, 0, 2, 2,
	0, 2, 0, 13, 16, 12, 15, 14, 17, 1,
	1, 2, 2, 2, 2, 1, 0, 1, 0, 1,
	3, 1, 1, 1, 3, 3, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	1, 0, 2, 2, 1, 0, 3, 0, 1, 3,
	1, 1, 2, 4, 6, 6, 10, 1, 2, 1,
	3, 4, 0, 1, 3, 2, 1, 1, 6, 2,
	0, 3, 1, 1, 2, 1, 2, 2, 2, 2,
	3, 0, 1, 2, 1, 2, 1, 3, 2, 3,
	1, 2, 2, 2, 1, 2, 3, 1, 2, 2,
	2, 2, 3, 3, 3, 1, 3, 1, 1, 0,
	1, 1, 0, 1, 0, 3, 0, 2, 1, 4,
	4, 5, 2, 5, 5, 7, 3, 1, 5, 9,
	3, 9, 4, 11, 10, 2, 0, 1, 3, 3,
	6, 4, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 3, 3, 4,
	0, 1, 0, 6, 1, 3, 3, 3, 5, 2,
	0, 3, 4, 4, 0, 2, 0, 4, 0, 3,
	16, 19, 1, 0, 2, 0, 4, 0, 1, 3,
	2, 0, 4, 6, 4, 6, 4, 4, 6, 4,
	6, 5, 7, 5, 7, 4, 6, 10, 13, 10,
	13, 11, 14, 1, 3, 1, 0, 1, 3, 1,
	1, 1, 1, 1, 2, 5, 3, 6, 4, 6,
	6, 9, 5, 7, 6, 6, 5, 5, 5, 5,
	9, 4, 5, 7, 6, 4, 8, 4, 2, 4,
	3, 6, 4, 3, 3, 3, 2, 2, 3, 4,
	4, 3, 3, 3, 3, 3, 3, 4, 4, 3,
	2, 3, 2, 2, 3, 4, 3, 2, 2, 3,
	4, 4, 4, 5, 1, 4, 4, 4, 3, 3,
	2, 1, 0, 6, 4, 6, 4, 6, 8, 4,
	6, 4, 6, 5, 7, 2, 3, 3, 2, 5,
	1, 1, 2, 3, 2, 1, 1, 2, 1, 2,
	1, 1, 1, 2, 1, 2, 1, 1, 1, 3,
	3, 3, 3, 3, 2, 1, 3, 2, 3, 5,
	5, 5, 2, 1, 3, 6, 6, 6, 6, 6,
	8, 8, 6, 6, 7, 9, 9, 8, 10, 6,
	6, 6, 6, 6, 6, 6, 8, 6, 8, 6,
	8, 7, 9, 6, 8, 7, 9, 8, 10, 8,
	10, 9, 11, 8, 10, 9, 11, 8, 8, 7,
	6, 6, 6, 6, 8, 8, 8, 8, 6, 9,
	0, 2, 2, 1, 2, 2, 2, 2, 3, 1,
	3, 3, 1, 5, 3, 9, 12, 7, 7, 3,
	2, 1, 3, 1, 3, 3, 3, 3, 2, 2,
	1, 1, 1, 1, 2, 1, 1, 1, 4, 5,
	1, 0, 1, 2, 2, 2, 2, 1, 1, 1,
	3, 3, 5, 1, 4, 0, 2, 3, 0, 1,
	1, 2, 1, 17, 21, 1, 1, 2, 1, 3,
	1, 1, 1, 3, 1, 2, 0, 1, 2, 4,
	1, 1, 1, 1, 1, 3, 0, 1, 0, 1,
	1, 4, 0, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 2, 0, 9, 11, 12, 14, 3, 0,
	3, 4, 4, 0, 6, 4, 9, 7, 6, 4,
	6, 6, 5, 7, 9, 6, 6, 5, 4, 4,
	3, 6, 6, 6, 6, 4, 7, 5, 8, 7,
	8, 6, 5, 8, 1, 0, 1, 0, 4, 6,
	5, 8, 2, 0, 2, 2, 2, 1, 5, 2,
	0, 2, 6, 6, 6, 10, 6, 6, 6, 9,
	9, 6, 6, 9, 6, 7, 7, 6, 2, 2,
	2, 2, 1, 2, 1, 0, 1, 2, 10, 13,
	5, 4, 4, 2, 0, 2, 2, 1, 0, 11,
	14, 12, 15, 8, 11, 8, 7, 9, 1, 1,
	3, 3, 5, 6, 1, 3, 1, 3, 1, 3,
	3, 7, 9, 9, 8, 6, 1, 0, 1, 3,
	3, 1, 5, 3, 8, 11, 6, 1, 0, 5,
	2, 3, 0, 2, 0, 1, 1, 1, 1, 1,
	3, 3, 2, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 3, 2, 2, 1, 2, 2, 2,
	2, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	2, 0, 2, 0, 4, 1, 3, 1, 2, 2,
	2, 1, 1, 1, 1, 1, 3, 3, 1, 3,
	1, 3, 11, 13, 5, 1, 2, 2, 1, 1,
	3, 5, 1, 3, 7, 2, 0, 5, 5, 10,
	8, 2, 0, 2, 0, 1, 1, 1, 1, 1,
	2, 0, 2, 0, 4, 0, 5, 0, 8, 1,
	1, 8, 11, 6, 8, 1, 3, 1, 1, 3,
	4, 7, 6, 5, 5, 5, 5, 1, 3, 4,
	4, 4, 3, 4, 3, 1, 4, 0, 8, 5,
	5, 6, 7, 7, 7, 4, 4, 5, 11, 10,
	10, 2, 2, 0, 13, 2, 0, 1, 3, 5,
	5, 3, 6, 2, 1, 0, 2, 4, 0, 1,
	3, 6, 8, 8, 1, 3, 5, 5, 10, 10,
	11, 11, 5, 5, 6, 10, 1, 0, 2, 0,
	1, 0, 2, 2, 1, 1, 0, 4, 0, 1,
	3, 1, 1, 1, 1, 1, 2, 4, 4, 5,
	2, 0, 3, 1, 3, 4, 3, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	3, 3, 3, 0, 1, 4, 2, 2, 2, 2,
	2, 3, 2, 2, 3, 0, 2, 2, 1, 1,
	1, 0, 2, 4, 5, 6, 4, 5, 2, 3,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 2, 3, 2, 5,
	4, 3, 3, 3, 3, 3, 1, 1, 0, 2,
	3, 0, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 0, 3, 6, 3, 5, 3, 5, 3, 5,
	2, 0, 2, 0, 1, 2, 2, 2, 3, 3,
	2, 2, 3, 3, 1, 1, 3, 3, 2, 1,
	1, 6, 4, 0, 5, 5, 5, 1, 2, 4,
	5, 1, 1, 1, 1, 3, 3, 2, 2, 1,
	2, 2, 2, 2, 1, 2, 1, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 2, 1, 3, 7, 4, 1, 3, 4, 6,
	4, 8, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -421, -166, -172, -173, -174,
	-175, -176, -177, -178, -179, -180, -181, -413, -414, -415,
	-416, -439, -440, -441, -442, -443, -444, -445, -446, -447,
	-448, -449, -450, -451, -452, -473, -474, -475, -476, -477,
	-478, -479, -480, -453, -454, -455, -456, -457, -458, -459,
	-460, -461, -462, -463, -464, -465, -466, -467, -468, -469,
	-470, -471, -472, -418, -419, -420, -422, -423, -424, -425,
	-426, -427, -428, 266, 212, -168, -169, -257, 111, 26,
	22, 27, 394, 93, 401, 191, 436, 228, 407, 413,
	397, 378, -171, -170, -256, 531, 63, 67, -264, 36,
	518, 86, 540, -596, 486, 457, -596, 96, 97, 98,
	99, 531, -215, 115, -373, -336, -27, 33, 414, 261,
	62, 464, 454, 225, 276, 284, 422, 103, -401, 268,
	449, 375, 194, 438, 387, 443, 512, -502, 406, 71,
	453, 451, 58, 289, 473, 471, 40, 67, 307, 419,
	480, 85, 284, 199, 225, 236, 247, 261, 286, 71,
	-504, 62, 375, 385, 387, 409, 414, 422, 443, 412,
	460, 268, 406, 103, 449, 438, 454, 464, 276, 384,
	-368, -371, -370, 464, 261, 307, 103, 406, 71, 67,
	419, 480, 85, 284, 225, 236, 438, 454, 194, 268,
	276, -504, 387, 414, 422, 375, 412, 460, 85, -536,
	58, 423, 457, -537, -535, -234, 56, 217, 414, 347,
	406, 488, -5, 4, -19, -20, 191, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 22, 201, 203, 204,
	205, 55, 206, 207, 208, 210, 211, 212, 88, 70,
	213, 214, 215, 24, 216, 218, 219, 220, 221, 222,
	223, 123, 226, 227, 228, 229, 230, 141, 231, 101,
	232, 233, 234, 235, 236, 111, 237, 154, 238, 120,
	121, 90, 246, 247, 248, 249, 250, 251, 253, 254,
	98, 149, 150, 255, 89, 256, 257, 258, 259, 260,
	261, 176, 27, 262, 138, 264, 148, 265, 267, 136,
	42, 268, 270, 271, 272, 273, 274, 275, 276, 277,
	279, 281, 282, 91, 283, 153, 165, 285, 286, 287,
	288, 289, 291, 294, 295, 151, 296, 297, 298, 28,
	299, 300, 301, 302, 303, 304, 305, 306, 307, 308,
	309, 310, 312, 313, 314, 96, 315, 317, 318, 145,
	503, 319, 320, 321, 322, 92, 324, 327, 328, 329,
	332, 333, 334, 335, 336, 337, 105, 85, 338, 99,
	340, 341, 342, 343, 344, 345, 346, 131, 348, 349,
	350, 351, 352, 353, 354, 357, 110, 358, 359, 32,
	139, 122, 504, 505, 502, 144, 62, 506, 507, 124,
	501, 508, 102, 364, 365, 366, 367, 368, 369, 370,
	129, 371, 128, 373, 374, 375, 377, 378, 379, 380,
	382, 383, 384, 385, 386, 112, 387, 152, 143, 388,
	389, 390, 391, 84, 132, 393, 394, 395, 396, 397,
	398, 399, 34, 400, 401, 402, 35, 403, 404, 405,
	407, 408, 409, 410, 127, 412, 413, 146, 415, 416,
	87, 417, 418, 419, 420, 421, 422, 93, 425, 427,
	428, 429, 430, 431, 107, 433, 434, 435, 436, 437,
	438, 113, 114, 439, 440, 441, 147, 442, 443, 445,
	446, 104, 448, 449, 108, 451, 452, 453, 454, 455,
	458, 460, 462, 463, 464, 465, 466, 467, 468, 142,
	469, 50, 472, 473, 474, 97, 475, 476, 477, 478,
	155, 183, 479, 480, 481, 482, 483, 485, 168, 486,
	140, 487, 498, 499, 57, 37, 173, 169, 189, 179,
	178, 224, 188, 187, 29, 278, 175, 292, 293, 500,
	186, 171, 185, 166, 160, 162, 163, 159, 161, 156,
	164, 158, 126, 157, 325, 339, 181, 182, 355, 356,
	360, 170, 361, 362, 376, 177, 174, 411, 426, 172,
	444, 184, 459, 461, 86, 180, 489, 490, 491, 492,
	493, 133, 494, 495, 496, 497, 125, -539, -538, 56,
	457, 423, -234, 21, 217, 58, 347, 406, 414, 488,
	-596, 457, -596, 379, -596, 379, -5, 423, 457, 56,
	413, -5, 457, -157, -118, 470, 316, 269, 509, -170,
	-171, -169, -168, -169, -256, -248, -249, 21, 41, -397,
	-395, -398, -5, 66, 541, -258, 84, -260, -7, -5,
	-258, 531, -3, -430, 30, -434, -433, -579, 318, 389,
	252, 31, 73, -399, -397, 64, 73, -167, -166, -395,
	67, 480, 84, 419, 307, 286, 385, 460, 117, 199,
	458, -503, 463, 34, -18, -5, 28, -15, -5, -143,
	221, 279, -146, -5, 11, -147, 534, 535, 536, 537,
	538, 539, 525, 526, 527, 18, 19, 20, -15, 87,
	-15, 28, -7, 28, 246, 67, -7, 28, 336, -11,
	-437, -9, 241, 245, 424, 4, -19, -20, -21, 209,
	115, 225, 25, 81, 242, 116, 79, 44, 76, 52,
	53, 75, 77, 46, 82, 54, 80, 363, 78, 48,
	450, 118, 85, 460, -7, -7, 340, -359, 28, -15,
	-7, -7, 531, 236, -11, -11, 453, 451, 453, 451,
	-397, 28, 21, -395, 28, 21, -395, 28, -395, 28,
	480, 67, 246, -406, -542, -92, -5, 4, -19, -21,
	-15, -15, -7, -15, -405, -542, -21, -5, -11, -437,
	321, 221, 279, -7, 28, -405, -7, -405, -7, -7,
	-7, -7, -7, 460, -11, -437, 21, -11, 336, -437,
	21, -7, -15, 28, 87, -15, -7, 28, -17, -15,
	28, -13, -7, -7, 28, -231, 28, -96, -97, -99,
	-100, -106, -102, -105, -92, 186, 171, 172, 173, 174,
	175, 176, 187, 188, 170, 189, -107, -108, -103, -104,
	184, 56, 4, -19, 169, -93, 178, 179, 180, 181,
	182, -231, 28, 25, 336, -362, 28, -437, -362, 28,
	-362, 28, 480, 246, 67, 87, 340, 460, 321, 480,
	-536, 423, -536, 219, 209, -433, 431, 64, 61, 527,
	533, 57, -91, 7, -91, -580, -91, 40, -233, -9,
	-91, 506, 57, 318, 209, -430, -434, -430, -91, -430,
	61, -91, -5, -91, -135, -44, -137, 130, -45, -46,
	-139, 68, 280, 69, -140, -42, 21, 41, -42, -42,
	70, -157, -118, 532, 532, -236, -235, -238, -53, 536,
	-55, 534, 535, -142, 31, 516, -117, 471, 40, -57,
	-56, 13, 531, -60, -58, -169, 29, 134, -66, -67,
	293, 11, 62, 411, -5, -89, 6, -91, 49, 43,
	47, 9, 10, -542, -585, -98, 38, -119, -294, -59,
	12, -100, -586, -587, -105, -588, 185, 161, 162, 225,
	240, 243, 244, 330, 331, 241, 245, 424, 447, 103,
	239, 242, 512, 278, 356, 362, 376, 444, 459, 461,
	360, 224, 292, 325, 490, 491, 493, 494, 492, 495,
	496, 159, 160, 166, 164, 158, 339, 156, 163, 157,
	497, 173, 169, 189, 179, 178, 188, 187, 175, 186,
	171, 181, 182, 170, 174, 172, 56, 184, 180, -107,
	-108, -103, -104, -235, 74, 536, -84, -87, 533, 529,
	-395, 531, 531, 541, -258, -24, 531, -116, -53, 218,
	354, 541, -579, 327, 66, 487, 252, -396, -395, 93,
	-5, 23, -399, -399, 532, -222, 531, -395, 28, -395,
	480, -395, 28, -28, 25, -542, -542, -7, 460, -542,
	130, -504, -373, 473, 209, -403, 31, -531, 23, -110,
	533, -391, 531, -15, -15, 533, -391, 23, 368, 257,
	452, 231, -391, 64, 31, -29, 36, 518, 31, 140,
	-395, 28, -491, 464, 31, 130, 28, -29, 480, -7,
	-500, 365, 74, -7, -24, 31, -390, 130, 36, 232,
	-96, -15, -29, -29, -361, -364, 398, -363, 207, 256,
	196, 22, 27, 477, 93, 223, 264, 258, 309, 354,
	122, 31, 365, 401, 400, 153, -31, 507, 29, 45,
	-361, -365, 398, 207, 29, 45, -361, 398, -384, -387,
	354, 23, 213, 90, 305, 335, 338, 342, 364, 419,
	436, 402, 473, 29, -361, 398, 29, -395, 28, 21,
	-397, 28, 140, 398, -38, 531, -84, 398, 398, 398,
	398, -367, 27, 93, 196, 477, 398, -408, -554, 215,
	404, 441, 300, 434, 482, 277, 418, 324, 31, 237,
	127, 445, -541, 366, 93, -419, -38, -84, 398, -438,
	196, 27, -7, -15, -15, 74, 29, 398, -408, 398,
	93, 196, 27, 398, -408, 398, 398, -492, -31, 479,
	398, 93, 232, 394, 196, 27, 264, 258, 430, 74,
	74, -7, 398, -29, -429, 45, -429, 398, 130, -29,
	-429, -429, 398, 93, 401, 398, 93, 29, 368, 257,
	452, 231, 398, 196, 27, 93, -410, -411, 22, 97,
	-438, 29, 541, -394, 24, 35, 29, 541, -394, 74,
	29, 541, -394, 29, -111, -110, 531, -101, 531, 177,
	-111, -111, -111, 531, -114, 518, 519, 531, -114, -115,
	183, 531, -115, -115, 178, 179, -115, -394, 29, -17,
	28, 130, 28, 541, 29, 29, 29, 140, 368, 257,
	452, 231, -28, 219, 23, -233, 40, -91, 120, -237,
	40, -229, -232, -228, 49, 43, 74, -233, 6, 534,
	535, -90, -89, -237, 40, -5, -578, -91, 4, -228,
	40, 58, 49, 43, 74, 504, -582, 260, 234, 327,
	413, -5, -43, -44, -136, -135, -139, 130, 389, 97,
	354, 427, 503, -46, -45, -47, -53, 21, -52, 91,
	349, -48, -49, -53, -55, 534, 535, -138, 122, -170,
	-170, -170, -158, -161, -53, -135, -44, -251, 73, 541,
	14, 39, 55, 534, 535, 536, 537, 538, 539, 525,
	526, 527, 18, 19, 20, -142, 30, 33, 46, 516,
	44, 48, 52, 53, 54, 37, 45, -145, 23, -8,
	11, 62, -146, 4, -23, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 21, 200, 22, 201, 202, 119,
	510, 94, 203, 204, 205, 60, 206, 207, 208, 209,
	210, 211, 212, 173, 115, 169, 189, 511, 88, 70,
	213, 214, 215, 24, 216, 38, 512, 217, 218, 219,
	513, 220, 221, 222, 223, 224, 225, 514, 123, 226,
	227, 228, 229, 230, 25, 141, 231, 101, 232, 117,
	233, 234, 235, 236, 111, 237, 81, 154, 238, 120,
	239, 240, 241, 242, 243, 244, 245, 121, 90, 246,
	247, 249, 188, 187, 250, 40, 251, 252, 253, 254,
	98, 149, 150, 255, 89, 95, 256, 257, 258, 259,
	41, 109, 260, 261, 176, 27, 262, 263, 138, 264,
	148, 265, 266, 267, 136, 42, 268, 270, 271, 272,
	273, 29, 274, 275, 276, 277, 278, 43, 279, 282,
	91, 175, 283, 153, 284, 165, 285, 116, 79, 286,
	287, 288, 289, 291, 292, 293, 294, 295, 151, 296,
	298, 28, 299, 300, 301, 302, 303, 304, 305, 306,
	307, 308, 309, 310, 311, 312, 76, 500, 313, 314,
	96, 315, 186, 171, 185, 317, 318, 75, 166, 160,
	162, 163, 159, 161, 156, 164, 158, 126, 157, 145,
	503, 319, 320, 321, 322, 92, 323, 326, 324, 325,
	77, 327, 328, 329, 58, 330, 331, 332, 333, 334,
	335, 336, 337, 105, 85, 338, 99, 339, 340, 342,
	343, 345, 346, 347, 181, 82, 182, 131, 348, 349,
	350, 351, 352, 353, 354, 355, 356, 357, 31, 110,
	358, 359, 47, 360, 32, 170, 139, 122, 504, 505,
	502, 144, 66, 506, 507, 124, 501, 361, 80, 362,
	102, 364, 365, 366, 367, 368, 369, 370, 129, 371,
	128, 372, 373, 374, 375, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 385, 386, 112, 387, 152, 143,
	388, 389, 174, 390, 391, 84, 132, 392, 393, 394,
	395, 396, 397, 398, 399, 34, 400, 401, 402, 35,
	403, 404, 405, 78, 406, 407, 408, 409, 410, 411,
	127, 412, 413, 146, 414, 415, 416, 87, 418, 63,
	419, 420, 421, 422, 423, 424, 93, 426, 425, 427,
	428, 429, 430, 172, 431, 432, 107, 433, 434, 435,
	436, 437, 438, 113, 114, 439, 440, 441, 147, 442,
	443, 444, 445, 59, 446, 104, 447, 67, 448, 450,
	449, 108, 451, 452, 453, 454, 106, 455, 56, 184,
	456, 457, 458, 459, 460, 461, 49, 462, 463, 464,
	465, 466, 467, 468, 142, 469, 471, 50, 472, 473,
	474, 97, 103, 83, 475, 476, 477, 478, 155, 86,
	180, 190, 118, 479, 480, 481, 482, 51, 483, 486,
	140, 487, 488, 489, 490, 491, 492, 493, 133, 494,
	495, 496, 497, 125, 499, 57, -53, -53, -53, -53,
	-53, 363, -337, 32, -85, -53, -116, -169, 86, -84,
	-169, -169, -65, 529, 531, 531, 531, -84, -91, 531,
	-91, -91, 531, -61, -53, -123, 485, -120, 281, 531,
	531, 130, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, -251, 531, -87, -94, 536,
	-6, 4, -19, -20, -21, -22, 21, 202, 119, 30,
	510, 134, 23, 94, 60, 511, 38, 512, 513, 39,
	514, 117, 26, 239, 240, 241, 243, 244, 245, 40,
	252, 95, 41, 109, 263, 266, 269, 43, 280, 130,
	284, 64, 290, 71, 72, 45, 311, 316, 73, 323,
	326, 68, 330, 331, 31, 47, 69, 74, 66, 33,
	509, 372, 381, 392, 100, 63, 424, 432, 59, 447,
	67, 106, 61, 456, 49, 470, 471, 103, 83, 190,
	51, 65, 484, 36, -53, -88, -395, -116, -260, 23,
	-13, 541, 532, 39, 55, 30, 33, 46, 44, 48,
	52, 37, 45, 62, 218, -579, -581, 389, 399, 421,
	-182, -166, 102, 531, 40, 23, -184, -190, -188, 531,
	-5, -5, -259, 83, 83, 61, -207, 64, 61, -14,
	-5, 531, 122, 370, 31, -222, -395, -483, -384, 354,
	31, -18, 28, -5, -543, 531, -543, -561, 211, 198,
	315, -7, -526, -528, 531, -96, 321, 480, 84, -437,
	-404, -177, -178, -415, -416, 26, 29, -96, 533, -94,
	-392, -393, -6, -502, 83, -143, 531, 267, 388, -15,
	-15, -15, -15, -15, 29, -484, 29, -7, 531, 370,
	31, -493, -492, -91, 29, -494, -437, 103, 31, -435,
	-402, 28, -395, 74, 332, -437, -395, 464, 74, 29,
	21, -514, -519, 67, 448, -5, -398, 242, -395, -391,
	-91, 23, 130, -435, -435, 541, 61, -592, 117, 514,
	370, 370, -316, 28, 514, -317, -5, 117, -333, 513,
	471, 381, 284, 270, -592, 117, -592, 117, 117, 168,
	335, 473, 194, 449, -349, 531, 74, 460, 201, 400,
	412, 411, 460, 412, 411, -395, 309, 153, -15, 122,
	61, -349, 298, 411, 531, -397, 449, 61, 370, -395,
	449, 61, -387, 90, 338, 342, -97, -228, -591, 70,
	-228, -228, 70, 346, -29, -29, -395, 61, -592, -395,
	-361, 398, 29, 45, -361, 398, 29, -7, 61, -39,
	532, -546, -548, -95, -109, 45, 361, 500, 190, -92,
	-96, 426, 61, 61, 61, 61, 117, 40, 31, 117,
	40, 31, -532, 117, -533, 513, 31, 117, 61, -597,
	-554, 35, 74, 47, 418, 254, 317, 324, -228, -228,
	-15, -5, -537, 423, 457, 61, 103, 398, 83, 83,
	-395, -7, 61, -597, 61, -391, -514, -514, -514, 61,
	-597, 61, 61, -31, -91, 47, 61, -391, 387, -91,
	387, 387, 387, -391, -395, -395, 398, -499, 264, 258,
	61, -436, -540, 93, -419, 247, -540, 61, -494, -436,
	-540, -540, 61, -349, -349, 61, 438, -15, -15, -15,
	-15, -15, 61, 208, 155, 155, 208, 155, 208, 531,
	541, 208, -485, -369, -368, 199, 512, 261, 286, 62,
	385, 409, 458, 464, -371, 247, 406, 443, 449, 307,
	-17, -15, -13, -7, -15, -7, -96, -231, -111, -116,
	-89, -89, 56, 56, -89, 531, -89, -115, -115, -231,
	-394, 29, -494, 29, -437, -362, -362, -362, -395, 457,
	541, -89, 6, -89, 6, -5, 66, 503, 427, 541,
	-49, -51, -55, 534, 535, 411, 127, 531, -51, 411,
	127, -50, -89, 6, -50, -141, 359, 430, -16, -395,
	541, 83, -150, 94, 95, -43, -136, -239, 64, -389,
	453, 451, 58, 289, 473, 67, -395, -238, -96, -15,
	56, 58, -53, -53, -53, -53, -53, -53, -53, -53,
	-53, -53, -53, -53, -53, -53, -53, -53, 46, 44,
	48, 37, 45, -53, 61, 47, 31, 49, 43, 50,
	41, 260, 357, -154, -153, 350, 351, 352, 353, 166,
	-149, 59, 60, -148, -169, 531, -152, 510, 432, 21,
	-6, 531, -117, 411, 531, -169, 41, 31, -87, 532,
	541, -116, -68, 530, -65, -116, -143, -116, 532, -70,
	532, 536, 190, 21, 41, -83, -53, -95, -92, -112,
	498, 344, 248, 297, 341, -113, 417, -89, -64, -63,
	51, -120, 71, -129, 508, 531, -295, -55, -53, -290,
	-53, 531, -89, -89, -89, -89, -53, -75, -12, 4,
	498, 344, 248, 297, 341, 417, -91, -53, -76, -71,
	-53, -70, -77, -54, -55, 534, 535, -142, 411, -73,
	-71, -53, -53, 511, 326, 456, -74, -53, 64, -116,
	-53, -116, -116, -116, -116, 346, -78, -189, -53, -582,
	-55, 346, -53, -70, -296, -300, -295, 100, -53, -293,
	-168, -300, -290, -169, -290, -53, -290, 532, -290, -290,
	-290, -582, -239, -116, 530, 542, 532, 532, -261, 85,
	31, 532, -53, 468, 229, 389, -191, 74, -204, 103,
	104, -183, -187, -5, 86, -5, -239, 541, 527, -185,
	-188, -85, -192, 65, -240, -241, -397, -169, 323, -252,
	531, -265, -275, -285, -266, 127, 125, 126, -5, -119,
	-59, -294, -542, 166, -241, -208, 112, -208, 541, 532,
	-311, -312, -315, -316, -318, -317, 46, -15, 122, 29,
	-360, 36, 531, 29, 74, 31, 404, -550, -551, -553,
	23, 321, 458, 484, -554, -544, 532, -545, -546, -550,
	-563, -562, 96, 98, 97, 462, 122, 198, -391, 536,
	-527, 509, -529, -534, -530, -546, 4, 321, -7, -395,
	480, -403, -373, -27, -18, -5, -330, -94, 532, 541,
	527, 130, -7, -268, -267, -269, -5, 531, -391, -391,
	-391, -391, -391, -15, -486, 414, 479, 64, 24, -7,
	-488, -489, -490, 295, 354, 478, -311, 122, 29, 284,
	-7, 422, 29, -431, -432, 446, 197, 406, 45, 371,
	265, 469, 309, 4, 232, 476, 103, 23, 31, -222,
	-6, 7, -501, 23, -511, 307, 67, -513, -518, -5,
	-266, 531, -15, 448, -390, 541, -397, 45, -84, -222,
	-222, 387, -96, -91, -363, -7, -7, -7, -395, -395,
	31, -316, 28, -96, -7, 531, -337, -355, 83, 503,
	503, -356, 83, -5, -89, -7, 28, -5, 28, -7,
	-7, 505, 223, 340, -7, -350, -351, -6, -7, -7,
	21, 103, 460, 412, 460, 412, -7, 327, -7, 21,
	103, -7, 327, -395, 411, -437, -37, 110, 79, 40,
	83, 327, -32, -35, -381, 93, 196, 27, -10, -6,
	-361, -364, 398, -7, -7, -395, -361, 398, -7, -7,
	-228, -15, -15, -228, -228, -361, 398, -384, -7, -7,
	-361, 398, 61, -592, -395, 449, 61, -592, -397, 398,
	-488, -489, -7, 532, 541, -95, -109, -548, -109, -92,
	361, -110, -92, -7, -7, -7, -7, -7, 47, -7,
	28, -53, 47, -7, 531, 47, -7, -7, 47, 74,
	254, 317, -11, -362, 61, -7, -7, 398, -508, 61,
	74, -7, -7, -7, -7, -7, -7, -13, -390, -13,
	-13, 398, 398, 61, 400, 201, -11, -432, -536, -7,
	-11, 422, -7, -7, -34, -90, 40, 534, 535, 93,
	398, 398, 398, 398, -7, -7, -91, -26, 28, -269,
	-91, 28, -5, -556, -555, -6, -411, 196, 27, -5,
	-487, 61, -7, -15, -406, 531, -96, -405, -407, 221,
	279, -143, -405, -405, 130, -96, -394, -394, -394, 74,
	-394, 532, 532, 532, 57, 57, 532, -116, 532, -394,
	-17, 422, 130, -400, 36, -433, -229, 97, -48, -51,
	66, 36, -89, 6, 531, -116, 334, 541, -161, -144,
	-146, 62, -151, 517, -242, 65, -240, -589, 67, -589,
	453, 451, 453, 451, -589, -395, 57, 42, -53, -53,
	61, -149, 59, -148, 42, -53, 47, 49, 43, 50,
	41, 260, 357, -154, -153, 64, 357, -155, 36, 168,
	155, 134, 139, 146, -54, -54, -116, -169, 531, -143,
	531, -116, 41, -85, -53, 530, 530, 541, 532, 532,
	532, -118, 541, -157, 532, -83, -70, -70, 16, 17,
	61, 61, 61, 61, 531, 532, -62, -63, 263, -53,
	-129, 531, -128, -5, 531, 65, -297, 47, 192, 155,
	542, -299, 509, -309, -308, 515, -53, 532, 532, 532,
	532, 23, 532, 64, 532, 541, 532, 532, 372, 541,
	532, 14, 534, 535, 536, 537, 538, 539, 525, 526,
	527, 18, 19, 20, -142, 52, 45, 62, -54, -54,
	-54, 532, 532, 48, 64, 130, 23, -74, -74, -74,
	532, 64, -116, 541, 532, 532, 532, 532, -6, 532,
	541, 23, -53, -281, 129, -6, 541, 532, -297, 541,
	532, -96, -298, 541, 47, 192, -309, 532, -155, 532,
	-300, 541, 541, 541, -53, -242, 532, -88, -53, 531,
	85, -193, 100, 101, 155, 532, 541, -85, -192, -190,
	-53, 532, 541, -193, -53, 120, 541, 81, -253, 75,
	82, 79, 77, 78, 76, -245, -244, 23, -5, -245,
	-169, -265, -275, -285, -169, -252, -241, -247, -244, 23,
	-5, -245, -245, -274, 518, 64, 531, 531, -84, 531,
	74, -214, -91, 113, 114, -214, -5, 532, 541, -395,
	-313, 531, -395, -395, 23, -349, -14, -395, -397, 29,
	-549, 67, -109, -559, -417, 212, 403, -553, -558, -91,
	-233, -552, 130, 532, 541, 40, 527, -559, 74, 33,
	122, -563, 532, 532, 509, 541, 70, 532, 541, 527,
	-7, 295, -222, -395, 209, -403, -331, 117, -332, -334,
	39, 31, 47, 471, 381, 513, 40, 392, 288, 252,
	311, -393, -372, -109, -22, -144, -228, -91, 355, 62,
	534, 535, 464, 532, 541, -96, -481, -482, -91, -391,
	64, -7, -233, -233, -29, -379, 507, -490, -495, -7,
	295, 478, -495, 532, -395, -395, 246, -491, -7, 130,
	-89, -362, -362, 406, 71, -91, 47, 371, 371, 68,
	474, -362, -166, 29, -374, 83, 273, 51, -360, -505,
	130, 4, 295, 64, 541, -53, -24, -390, -519, -222,
	414, -222, -243, 65, -243, -13, 532, 61, 61, 61,
	-321, 130, 40, -28, 282, 29, 31, -378, -377, 439,
	-333, 270, -53, 531, -328, 307, 531, -355, 531, 531,
	-7, -367, 27, 93, 401, 196, -386, -230, -31, -388,
	402, 93, -328, 29, -394, 29, -394, -36, -5, 40,
	532, 541, 527, 533, -7, -7, -7, -7, 418, 418,
	327, 307, 418, 532, 541, -381, -381, -10, -33, -91,
	61, -592, 117, 93, 364, 61, 93, 364, 61, 61,
	61, -592, -7, -7, -361, 398, -7, -7, -7, -361,
	398, 61, -31, -546, -109, -109, 538, -110, 61, -394,
	29, -533, -53, -328, 313, 47, -7, 398, 398, 196,
	27, 61, -509, 83, -362, -395, -390, -390, -390, 61,
	61, -7, -7, 438, 61, 61, 61, 61, 61, 61,
	-91, 31, -394, 29, -394, 541, 532, 527, -230, 93,
	-233, -96, -15, -15, -86, 531, -96, -15, -114, -114,
	532, -394, -7, -494, 246, 354, 66, 36, 455, -116,
	532, 541, -395, -151, 531, 91, 92, -41, 71, -53,
	-395, -395, -589, -589, -589, -589, -395, -53, -53, 42,
	42, -53, -54, -54, -53, 42, 64, 357, -155, -53,
	471, 471, 30, 30, 532, -53, 532, -116, 532, 541,
	532, -65, 532, 190, -83, -118, -118, -118, -53, -53,
	344, 297, 341, -113, 341, -113, -113, -89, -91, 266,
	-53, 106, -157, -130, -5, -53, -155, 74, 74, -290,
	-290, -298, 70, 166, 532, -96, -53, -154, -53, -96,
	-54, -54, -54, -54, -54, -54, -54, -54, -54, -54,
	-54, -54, -54, 41, 31, 260, -54, -53, -53, -53,
	-96, 532, 532, 532, -116, -53, 532, 541, -189, -6,
	-79, 380, 442, 532, -55, -282, 70, 532, 541, -81,
	479, -155, -295, -309, -300, -290, 74, 74, -300, 532,
	532, -53, -53, -53, 23, -41, 530, -167, -235, -198,
	531, 74, -166, -166, 102, -187, -193, 527, -188, 122,
	-241, 75, 75, -241, -253, 75, -254, 80, -254, -254,
	-121, 450, -5, 531, -245, -247, -245, -245, 532, -5,
	531, 531, 124, 531, -55, 133, -290, -70, -53, -29,
	-216, -590, 83, -344, 310, -315, -326, -345, -346, 370,
	-314, -319, -320, -317, -5, -313, 531, 122, 370, -166,
	532, -483, -356, -7, -550, 531, 206, -53, 541, 541,
	464, -545, -53, -53, -395, -562, -14, 74, 70, -534,
	-527, -530, 4, -372, 531, -495, -360, 531, -437, -7,
	-15, 252, 47, -337, 503, 531, -54, -395, -383, 201,
	70, 253, 299, -96, -269, -280, 39, 532, 541, -15,
	-484, 531, -110, -344, -313, 531, 370, 140, -493, -379,
	-494, -362, -362, -91, -91, -90, -91, -400, -402, -360,
	-7, -593, 286, 385, -496, -498, -5, -507, 61, -506,
	21, 63, 96, 97, 98, -495, -240, -518, 532, 74,
	-243, -5, 242, -243, 531, -390, 36, 168, -91, -7,
	-7, 86, -316, 29, -376, -375, 230, -5, 40, 532,
	-14, -329, 31, 252, 311, 354, -7, -14, -328, -14,
	-324, -323, -202, -5, -266, 531, 31, 275, 298, 246,
	-387, 288, 31, 275, 438, -349, -377, -375, -349, 288,
	-388, 93, 464, -29, 438, -5, -7, -351, -372, -6,
	418, -7, -35, -7, -7, -7, 449, 70, -7, 449,
	70, -7, -7, -7, -7, 61, 61, -592, 93, 364,
	61, 61, -592, -7, 464, 538, -7, -7, 532, 313,
	61, 61, -515, -520, 62, 286, 439, -516, -521, 62,
	286, -7, -510, 36, 531, 398, -7, -7, -31, -34,
	-7, -7, -7, -7, -7, -91, 211, 198, 29, -5,
	-555, 355, -557, -109, -22, -144, -228, -91, 464, 23,
	83, 83, -96, 355, 321, -394, 422, 246, 455, 532,
	-53, -143, -160, 72, 70, -395, -395, -395, -395, -53,
	-53, 42, 30, 30, -53, -53, 319, 319, -53, -53,
	532, 532, -53, -91, -83, 532, 532, 532, 532, -53,
	532, -126, 370, 532, -300, 47, 47, -300, -158, 148,
	532, 532, 64, 64, 41, 260, 42, 130, 64, 532,
	532, -69, -116, 489, 532, 483, 483, -282, 70, -55,
	132, 155, -53, -82, 541, -53, 354, -300, 532, 47,
	47, 532, -301, 129, -301, -301, -97, -160, 532, 109,
	-224, -202, 117, -204, -53, -213, -7, -241, -241, -255,
	83, 74, 75, -241, -542, 531, -13, -244, 531, -267,
	-267, -5, -270, -271, -266, -281, 531, 541, -118, -186,
	-196, -205, -206, 51, -218, -219, 531, -29, 150, -345,
	531, 304, 271, -374, 70, 532, 541, -330, 36, -321,
	-311, -15, 122, -576, 36, -360, 531, 74, -559, -273,
	-547, -95, -92, -577, -91, 130, -96, -568, 393, -395,
	-527, 532, -517, 64, 61, -523, 312, 23, -14, -403,
	-332, 31, -390, -390, -53, -222, 23, 40, 83, -15,
	-91, -380, -381, 422, -321, -311, 122, -7, 284, 422,
	23, -353, 449, -542, 273, 30, 45, -509, -362, -513,
	-53, 286, 500, 286, 64, 36, 45, 64, -316, -379,
	-5, 40, -328, 532, 252, 476, 299, 253, 309, 532,
	532, 532, 541, 36, -203, -195, 39, -203, -53, 47,
	28, 28, -383, 47, 23, -34, -383, -96, -228, -34,
	-394, -394, 527, 61, 61, -7, -362, -7, -362, 61,
	-7, -7, -7, 449, 70, -7, -7, -7, 464, -394,
	-328, -7, -7, 541, -89, -89, -96, 541, -89, -89,
	513, -53, 61, -394, -91, -91, -394, -96, -96, -7,
	-7, 532, 541, 541, -7, -7, 532, 532, -124, 484,
	-53, -42, -53, -53, -53, 532, -118, -118, 70, 532,
	532, -7, -53, -54, 64, -53, -53, -53, 532, 541,
	532, 531, -282, 532, 532, 435, 155, 532, -300, -291,
	-292, -290, -302, -303, 40, -304, 136, 47, 49, 43,
	50, 138, -300, -80, 306, 354, -124, -262, 87, 97,
	110, 532, 541, -7, 155, -255, 531, -53, -241, 531,
	-13, 532, -267, 532, 532, 532, 541, -272, 23, 123,
	-283, -284, -54, 40, -53, 532, -193, -196, -197, 30,
	-197, 105, 31, -217, 115, 116, 149, 47, 154, 151,
	152, 42, 153, 148, -220, -225, -6, -218, -91, -374,
	-16, -327, 227, 230, 233, 251, 298, 288, 308, 438,
	439, 21, -327, -40, 36, 168, -5, -319, 507, -345,
	532, -313, -395, 513, 216, 58, 23, -224, -397, 541,
	532, -109, 266, -560, -4, -417, 464, -564, 130, -569,
	-571, -566, 348, 502, -575, 64, 532, 532, 433, 433,
	-524, -525, 478, 354, -495, -166, 532, -354, 83, -354,
	532, -338, 337, 298, 531, -7, 532, 541, -7, 422,
	532, -395, -379, 246, -7, -166, -7, 531, -593, -498,
	531, -510, 64, 532, -405, -512, 23, -512, -15, 531,
	531, 531, -330, -339, 303, -339, 392, -339, -323, -143,
	62, -359, -15, -15, 532, 29, 29, 531, 23, -280,
	-372, -7, -7, -366, 359, 93, -366, 93, -7, 61,
	-7, -362, 61, -520, -143, -407, -405, 531, -521, 531,
	531, 531, 532, -7, -280, 532, -96, 355, -96, -125,
	-127, -5, -156, -159, -53, -162, -164, -163, -165, 531,
	238, 408, 293, 532, -131, 388, 127, 294, -116, 130,
	-54, -116, -78, 499, 354, -306, 168, 36, 541, 23,
	532, 74, -53, 134, 139, -305, -303, 532, 306, -263,
	90, 89, 88, 93, -242, -202, -166, -13, -116, 532,
	532, -274, -271, 531, -276, -277, -5, 541, 532, 23,
	-54, -289, 23, 106, -53, 106, 105, -531, -531, -531,
	-531, 152, 31, 47, -91, 532, 541, -226, -232, -228,
	536, 40, 531, -242, -40, 532, -352, 74, -349, 505,
	531, -330, -374, -344, -345, -313, 506, 513, 513, -166,
	532, -356, -547, -550, 540, -96, -572, 51, -594, 262,
	-571, -567, 67, 411, -328, -395, 36, 36, -495, 478,
	-576, -360, 307, -335, 354, -343, -340, -341, 74, 79,
	369, 429, -385, 531, -53, -522, 279, -381, -379, -7,
	-344, -313, 140, -379, -400, 532, -542, -497, 7, -240,
	-512, 301, 205, -325, -322, -9, -116, -116, -390, 531,
	-390, -395, -390, 531, -150, -349, -203, -53, 298, -30,
	83, 449, 449, -7, -366, 93, -7, -583, 130, -583,
	-584, -96, -584, -584, -53, -394, 532, 532, 532, 541,
	23, 541, 532, 531, 531, 425, 532, -132, -133, 37,
	467, 120, -53, -132, -132, -53, 532, 532, 155, -307,
	145, 144, 140, 134, 140, 134, 141, 142, -292, -6,
	136, 532, 74, -14, 91, 91, -184, 532, 532, -267,
	532, 541, -96, 130, -284, 541, -6, -301, -5, -199,
	-200, 109, 97, 98, -201, 109, 96, 70, -91, -91,
	-91, -91, -14, 536, 47, -14, 536, -225, -221, -227,
	-232, -352, -353, 228, -347, -348, -5, -266, 531, -40,
	-345, -374, -321, 506, 506, -576, -358, 303, 531, -559,
	273, 531, -565, 411, 437, -531, 130, 286, 286, 23,
	449, 309, -341, 74, -340, 74, 97, 98, -384, 532,
	23, -15, -379, 422, -321, -7, 531, 532, 541, 532,
	541, -89, 532, 532, -354, -14, -354, -222, -354, -143,
	-151, -150, 532, -385, -53, -7, -7, 449, -382, 391,
	87, 509, -382, 532, 541, 532, 532, 532, -127, -128,
	-159, -116, -116, 531, -134, 270, -133, 377, 283, 411,
	377, 283, -134, -134, -305, 143, 143, 140, 140, 134,
	140, 134, 140, 138, 136, 93, 70, 70, -242, -246,
	23, -122, 399, 532, -277, -278, -279, 4, 40, 31,
	47, 128, 124, -55, 123, 110, 93, 110, -194, 102,
	531, 40, 86, 107, 108, -14, 536, 532, 541, -353,
	27, 98, 380, 532, 541, -195, -195, -53, -352, -374,
	-40, -345, -337, 531, -224, -593, -53, -574, -5, 262,
	-405, -405, -166, -7, -342, 354, 35, 24, 93, -342,
	532, 440, -515, -7, 422, -379, 532, 7, -322, 61,
	-328, 532, -328, -338, -242, 532, -151, -366, -366, -7,
	70, -405, -96, 532, 532, -156, 120, 71, 455, 354,
	30, 532, 74, 74, 140, 140, -303, -5, -14, -14,
	-5, 531, -279, -54, -54, 47, -54, -281, 531, -184,
	-204, -183, 86, 531, -227, 127, 127, -348, -359, -359,
	532, -353, -40, -352, -374, -360, -357, -202, 532, -542,
	532, 411, 541, 541, -576, 195, 47, 40, -379, -7,
	531, -343, -328, -366, -15, 532, 411, 501, -133, 146,
	146, 74, 61, 83, 93, 93, -53, 123, -286, -287,
	-5, 131, 155, 532, -116, -195, -352, -353, -40, -353,
	532, 541, -358, 531, -572, 61, 64, -222, -222, -379,
	-116, -328, 147, 147, 136, -56, -542, 166, -5, -5,
	-5, 532, -276, 532, 541, 130, -96, -310, 128, -194,
	-194, 102, 532, -359, -353, -352, -242, -202, -337, -570,
	-573, -89, 6, -91, -6, 273, 433, 433, 532, 40,
	531, 532, -302, -287, 124, -288, -308, 29, 128, 7,
	-204, -353, -360, 532, 541, -593, 36, 36, -56, -70,
	532, -306, -288, -288, 7, 123, 23, 155, -353, -573,
	-542, 286, 286, 83, -118, -307, -306, -302, 531, -7,
	-194, -242, 531, -405, -405, -5, 532, -305, -307, -286,
	123, -570, -305, 532, 531, 532, -286, 532,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 2828, 2828, 1478, -2, 0, 1761, -2,
	1824, 1824, 0, 0, 0, 2828, 0, 2828, 2828, 0,
	0, 0, -2, 1469, 1565, 0, 1601, 0, 1512, 0,
	0, 0, -2, 2831, 2826, 2827, 2583, 0, 0, 0,
	0, 0, 0, 1760, 0, 0, 2727, 0, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 0, 0,
	1889, 1890, 0, 0, -2, 2062, 2704, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1823,
	0, 0, 0, 0, 0, 2204, 0, 0, 0, 2200,
	2201, 2202, 0, 0, 2206, 2207, 2208, 0, 0, 0,
	1807, 0, 1810, 1811, 1812, 1813, 1814, 1815, 0, 2185,
	273, 384, 418, 2190, 2529, 0, 501, 157, 374, -2,
	365, 451, 2544, 92, 93, 94, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 158, 159, 160, 161, 162,
	163, 164, 165, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
	213, 214, 215, 216, 217, 218, 219, 220, 221, 222,
	223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	274, 275, 276, 277, 278, 279, 280, 281, 282, 283,
	284, 285, 286, 287, 288, 289, 290, 292, 293, 294,
	295, 296, 297, 298, 299, 300, 301, 302, 303, 304,
	305, 306, 307, 308, 309, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 323, 324,
	325, 326, 327, 328, 329, 330, 331, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 358, 359, 360, 361, 362, 363, 364,
	366, 367, 368, 369, 370, 371, 372, 373, 375, 376,
	377, 378, 379, 380, 381, 382, 383, 385, 386, 387,
	388, 389, 390, 391, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 404, 405, 406, 407,
	408, 409, 410, 411, 412, 413, 414, 415, 416, 417,
	419, 420, 421, 422, 423, 424, 425, 426, 427, 428,
	429, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	449, 450, 452, 453, 454, 455, 456, 457, 458, 459,
	460, 461, 462, 463, 464, 465, 466, 467, 468, 469,
	470, 471, 472, 473, 474, 475, 476, 477, 478, 479,
	480, 481, 482, 483, 484, 485, 486, 487, 488, 489,
	490, 491, 492, 493, 494, 495, 496, 497, 498, 499,
	500, 502, 503, 504, 505, 506, 507, 508, 509, 510,
	511, 512, 513, 514, 515, 516, 517, 2199, 2191, 501,
	418, 384, 2195, 2196, 157, 273, 291, 365, 374, 451,
	2831, 2583, 2831, 0, 2831, 0, 2816, 384, 418, 501,
	372, 2818, 0, -2, 0, 2736, 2736, 2736, 0, -2,
	1483, 1484, 0, 1484, 0, 1517, 0, 1600, 1602, 1511,
	1540, 1541, 107, 0, 0, 1562, 348, 1567, 110, 102,
	1563, 0, 2, 2824, 0, 2825, 2582, 2570, 0, 0,
	2576, 0, 0, 0, 1545, 0, 0, 0, 1480, 2389,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 0,
	0, 1824, 2726, -2, 0, -2, 242, 1830, 124, 0,
	161, 223, 1466, 0, 1452, 1453, 1454, 1455, 1456, 1457,
	1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 2410, 0,
	0, 242, 1992, 242, 0, 0, 2474, 242, 278, 1992,
	2099, 2100, 2101, 2102, 2103, 2564, 2565, 2566, 2567, 518,
	519, 520, 521, 522, 523, 524, 525, 526, 527, 528,
	529, 530, 531, 532, 533, 534, 535, 536, 537, 538,
	539, 540, 0, 0, 2626, 0, 0, 110, 242, 76,
	2591, 0, 0, 0, 1992, 1992, 1891, 1892, 1893, 1894,
	0, 242, 0, 0, 242, 0, 0, 242, 0, 242,
	0, 0, 0, 0, 0, 1332, 0, -2, -2, 1398,
	0, 0, 0, 0, 0, 0, -2, 2910, 0, 2099,
	0, 0, 0, 0, 242, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 2841, 0, 278, -2,
	2841, 0, 0, 242, 0, 0, 0, 242, 80, 126,
	242, 80, 103, 0, 242, 80, 242, 1821, 1390, 1391,
	1392, 1393, 1394, 1395, 1404, 1407, 1408, 1409, 1410, 1411,
	1447, 204, 1404, 1404, 1404, 1417, 1418, 1419, 1420, 1421,
	1443, 1443, 1396, 1397, 1445, 1433, 1445, 1445, 1428, 0,
	1445, 80, 242, 0, 278, 2846, 242, 2097, 2844, 242,
	2848, 242, 2203, 0, 2205, 0, 1805, 1806, 1809, 88,
	2186, 384, 2187, 159, 0, 2188, 0, 0, 0, 0,
	0, 0, 2532, 1194, 2533, 2534, 2559, 2560, 2535, 2562,
	2563, 0, 2192, 0, 2194, 2812, 2813, 2814, 2822, 2815,
	0, 2823, 2817, 2821, 2791, 1496, 1493, 0, 2788, 2789,
	1497, 0, 0, 0, 1505, 0, 2734, 2735, 0, 0,
	0, -2, 0, 1481, 1482, 1607, 1516, 1518, 1522, 1523,
	1071, 0, 0, 0, 0, 0, 0, 1961, 1138, 1161,
	1162, 1225, 0, 1165, 1166, 1167, 464, 0, 1172, 1173,
	468, 1448, 311, 497, 1215, 1180, 1181, 1182, 1183, 1184,
	1185, 1186, 1187, 0, 0, 0, 1348, 1471, 1473, 1229,
	1193, 1175, 1176, 1177, 1178, 1179, -2, 478, 475, 520,
	1231, 1232, 1234, 1236, 1238, 1240, 1241, 1242, 1243, 1244,
	1245, -2, 0, 465, 489, 493, 494, 500, 503, 504,
	490, 461, 467, 484, 508, 509, 511, 513, 510, 514,
	515, 477, 474, -2, 480, 481, 485, 479, 476, 483,
	516, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 486, -2, -2, -2, -2, -2, -2, -2, 1422,
	1423, 1424, 1425, 1607, 0, 1542, 108, 1217, 0, 1220,
	1543, 0, 0, 0, 1564, 0, 0, 0, 1388, 2829,
	0, 0, 2572, 0, 2574, 2575, 2577, 0, 1725, 0,
	1546, 0, 1747, 0, 0, 0, 0, 0, 242, 2389,
	0, 2425, 242, 75, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 1895, 0, 2395, 0, 0, 1829, 125,
	0, 2408, 0, 2705, 0, 0, 2409, 0, 0, 0,
	0, 0, 2415, 0, 0, 2433, 1990, 1991, 0, 0,
	0, 242, 2478, 0, 0, 0, 0, 2851, 0, 0,
	0, 0, 0, 0, 0, 0, 2660, 0, 0, 0,
	0, 0, 2851, 2851, 2072, 2085, 2172, 2093, 0, 0,
	0, 2172, 2172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2164, 0, 0, 0,
	2074, 2076, 0, 0, 0, 0, 2077, 0, 2428, 1970,
	0, 0, 0, 1974, 1989, 1977, 0, 0, 0, 0,
	1992, -2, 1987, 0, 2079, 2172, 0, 0, 242, 0,
	0, 242, 0, 0, 2222, 0, 1333, 0, 0, 0,
	0, 2399, 0, 0, 0, 0, 0, 2907, 2877, 0,
	0, 2881, 2882, 2883, 2884, 0, 0, 2889, 0, 0,
	0, 0, 2894, 0, 0, 2342, 2908, -2, 0, 0,
	2869, 2870, 0, 0, 0, 0, 0, 0, 2907, 0,
	0, 0, 0, 0, 2907, 0, 0, 2471, 2472, 0,
	0, 0, 0, 0, 0, 0, 2685, 2686, 0, 0,
	0, 0, 0, 2853, 0, 0, 0, 0, 0, 2853,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2915, 2916, 0, 2440,
	1824, 0, 0, 2174, 78, 79, 0, 0, 2176, 0,
	0, 0, 2179, 0, 1405, 1404, 0, 1412, 0, 1413,
	1414, 1415, 1416, 0, 1437, 0, 0, 0, 1439, 1435,
	1444, 0, 1426, 1427, 1445, 1445, 1431, 2181, 0, 80,
	242, 0, 0, 0, 0, 0, 0, 1808, 2209, 2210,
	2211, 2212, 0, 0, 0, 2536, 2537, 2539, 2530, 2540,
	2542, 2546, 2548, 2549, 1795, 1796, 1797, 1798, 1799, 0,
	0, 1802, 1195, 2541, 2543, 2545, 2531, 2550, 2551, 2552,
	2553, 2554, 2555, 2556, 2557, 2558, 2538, 2568, 2569, 2193,
	372, 2820, 1487, 2790, 1488, 1495, 1498, 0, 0, 1500,
	0, 1502, 0, 2786, 2787, 2792, 2800, 2801, 0, 2810,
	2811, 2798, 0, 2802, -2, 0, 0, 1508, 0, 1513,
	1514, 1515, 2752, 2753, 1877, 2791, 1496, 1525, 0, 0,
	0, 673, 641, 1454, 1455, 1456, 1457, 1458, 1459, 1460,
	1461, 1462, 1463, 1464, 1465, 0, 634, 888, -2, 0,
	-2, 975, 806, 1109, 1111, -2, 785, 0, 0, 1521,
	-2, 885, 1368, 100, 101, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	635, 636, 637, 638, 639, 640, 642, 643, 644, 645,
	646, 647, 648, 650, 651, 652, 653, 654, 655, 656,
	657, 658, 659, 660, 661, 662, 663, 664, 665, 666,
	667, 668, 669, 670, 671, 672, 674, 675, 676, 677,
	678, 679, 680, 681, 682, 683, 684, 685, 686, 687,
	688, 689, 690, 691, 692, 693, 694, 695, 696, 697,
	698, 699, 700, 701, 702, 703, 704, 705, 706, 707,
	708, 709, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 781, 782, 783, 784, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 807, 808, 809, 810,
	811, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 886, 887, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
	1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
	1065, 1066, 1067, 1068, 1069, 1070, 1076, 1077, 1091, 1094,
	1095, 0, 0, 0, 1163, 1388, 0, -2, 505, 1168,
	1169, 1170, 1171, 0, 0, 0, 0, -2, 1188, 0,
	1190, 1212, 0, 0, 1347, 1473, 0, 2764, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1291,
	0, 1291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1677, 1677, 0, 0, 0,
	0, 0, 0, 0, 0, 1525, 0, 1218, 1221, 1222,
	1399, 95, 96, 97, 98, 99, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
	585, 586, 587, 588, 589, 590, 591, 592, 593, 594,
	595, 596, 597, 598, 599, 600, 601, 602, 603, 604,
	605, 606, 607, 608, 609, 610, 611, 612, 613, 614,
	615, 616, 617, 618, 1219, 0, 0, 0, 1568, 1572,
	0, 0, 1579, 0, 0, 0, 0, 1370, 1372, 0,
	0, 1474, 0, 0, 2830, 2571, 2573, 0, 0, 2581,
	1860, 1727, 0, 0, 0, 0, 1525, 1738, 0, 0,
	1225, 1547, 1585, 0, 0, 1756, 1756, 1753, 1754, 0,
	105, 1898, 0, 0, 0, 2071, 0, 2422, 2424, 0,
	0, 0, 242, 74, 2321, 0, 2321, 0, 2345, 2346,
	0, 0, 0, 2407, 0, 0, 0, 0, 0, 2524,
	2523, 2525, 2526, 2527, 2528, -2, 75, 1950, 0, 1401,
	0, 2608, 2610, 0, 0, 1467, 1621, 0, 0, 0,
	0, 0, 0, 2417, 0, 2430, 0, 2465, 1898, 0,
	0, 0, 2477, 2473, 0, 0, 2488, 2489, 0, 2833,
	0, 242, 2389, 0, 0, 2625, 2632, 0, 0, 0,
	0, 2591, 2667, 0, 410, -2, 2389, 2675, 0, 2590,
	0, 0, 0, 2832, 2834, 0, 0, 0, 0, 2171,
	0, 0, 2104, 242, 0, 2128, 0, 0, 2007, 0,
	1961, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	2136, 2137, 0, 0, 2157, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2150, 0, 0, 2152, 2153,
	0, 2158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1971, 1975, 1980, 1981, 1972, 1973, 0, 1988,
	1978, 1979, 0, 0, 0, 0, 0, 0, 0, 0,
	2081, 2172, 0, 0, 2083, 2172, 0, 2465, 0, 0,
	2214, 2215, 0, 0, 2310, 2311, 2312, 2313, 2315, -2,
	2317, 0, 0, 0, 0, 0, 0, 2170, 0, 0,
	0, 0, 2402, 0, 2511, 0, 0, 0, 0, 2874,
	2878, 2906, 0, 0, 0, 2887, 2888, 2890, 2891, 2892,
	2893, 2895, 2341, 384, 418, 0, 0, 0, 0, 0,
	2643, 0, 0, 2875, 0, 2663, 2665, 2664, 2666, 0,
	2876, 0, 0, 2470, 2475, 2476, 0, 2679, 0, 2680,
	2591, 0, 0, 2687, 0, 0, 0, 2614, 2615, 2618,
	0, 2835, 2837, 0, 2198, 0, 2838, 0, 0, 2836,
	2839, 2840, 0, 2627, 2628, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	0, 0, 2438, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1816, 1817, 1818, 1819, 1820, 2204,
	80, 127, 80, 104, 80, 0, 1822, 80, 1406, 0,
	0, 0, 0, 0, 0, 0, 0, 1429, 1430, 80,
	2183, 0, 0, 0, 2098, 2847, 2845, 2849, 2522, 0,
	0, 1196, 1800, 1197, 1801, 2819, 1494, 0, 1503, 0,
	0, 0, 2803, 0, 0, -2, -2, 0, 2799, 2808,
	2809, 2804, -2, -2, 2805, 1499, 1506, 0, 1504, 111,
	0, 0, 1880, 1875, 1876, 1491, 1492, 1582, 0, 1606,
	-2, -2, 273, 234, -2, 0, 123, 1519, 1072, 1073,
	0, 1075, 1078, 1079, 1080, 1081, 1082, 1083, -2, -2,
	-2, -2, -2, -2, 1090, 1092, 1093, -2, 1371, 1373,
	0, 1474, 0, -2, 0, 1108, 0, 1113, 1115, 1117,
	0, 1130, 1132, 0, 1387, 1374, 1375, 1376, 1377, 1378,
	0, 0, 1475, 1125, 1476, 0, 0, 1365, 1366, 1367,
	1520, 0, 1112, 0, 0, 1129, 1959, 0, 1226, 1225,
	0, 0, 0, 1356, 1357, 0, 0, 0, -2, 1469,
	1334, 0, 0, 0, 0, 1341, 1343, 0, -2, 1191,
	1199, 1200, 1201, 1202, 1203, 1204, 1213, 0, 1353, 1349,
	0, 2764, 0, 1228, 0, 0, 1668, 1071, 0, 1673,
	1711, 0, 0, 0, 0, 0, 0, 0, 0, 1301,
	1302, 1303, 1304, 1305, 1306, 1307, 1308, 0, 0, 0,
	1343, 1290, 0, 0, 1139, 0, 0, 0, 497, 0,
	0, 1343, 0, 0, 0, 0, 0, 1388, 0, 1299,
	0, 0, 0, 0, 0, 0, 0, 1313, 1316, 0,
	0, 0, 0, 0, 1668, 0, 1662, 0, 1343, 1671,
	1711, 0, 1660, -2, 1387, 0, 1677, 1285, 0, 0,
	0, 0, 1582, 0, 1223, 1220, 1544, 1580, 0, 1570,
	0, 109, 1389, 2578, 2579, 2580, 1882, 0, 0, 1732,
	1733, 0, 1734, 1225, 1731, 1726, 1585, 0, 0, 0,
	1743, 1742, 1882, 0, 1746, 1526, 1588, 1588, 0, 1532,
	0, 1597, 1588, 1588, 1611, 370, 517, 482, 107, 1329,
	1330, 1331, 0, 473, 0, 0, 1755, 0, 0, 2388,
	0, 1897, 1899, 1901, 1902, 1903, 0, 1927, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2335, 2320, 2322,
	0, 0, 0, 2327, 2328, 0, 2300, 2301, 2303, 2335,
	0, 2348, 2350, 2351, 2352, 2354, 2347, 0, 2406, 0,
	0, 0, 0, 2494, 2498, 2496, 1396, 0, 2724, 2389,
	0, 2394, 0, 0, 0, -2, 2398, 1402, 2607, 0,
	0, 0, 2711, 0, 1620, 1622, 0, 2507, 2421, 2411,
	2412, 2413, 2414, 0, 2432, 0, 0, 0, 2437, 1992,
	1942, 2464, 2462, 0, 0, 0, 0, 0, 0, 0,
	2474, 0, 0, 2850, 2854, 0, 0, 0, 0, 0,
	0, 0, 2864, 2865, 0, 0, 0, 0, 0, 2050,
	0, 2071, 2634, 0, 0, 2649, 2650, 0, 2655, 2657,
	2658, 0, 110, 2591, 2662, 0, 2389, 0, -2, 2677,
	2677, 0, 0, 0, 2094, 2245, 0, 0, 0, 88,
	0, 2106, 242, 1925, 0, 0, 0, 2280, 0, 0,
	0, 0, 0, 1826, 0, 2280, 242, 80, 242, 80,
	2130, 2133, 2135, 0, 2156, 0, 2289, 2292, 2134, 2138,
	2141, 2142, 0, 0, 0, 0, 2146, 0, 2143, 2144,
	2145, 2149, 0, 2151, 0, 2154, 2159, 2603, 2604, 2605,
	0, 0, 0, 2595, 2597, 385, 133, 205, 0, 1946,
	2073, 2086, 2172, 0, 2253, 2168, 2075, 0, 0, 2247,
	1976, 1982, 1983, 1984, 1986, 2078, 0, 2429, 2249, 0,
	2080, 2172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, -2, 2225, 2213, 0, 0, 2309, 0, 2308, 1404,
	2314, 1404, 0, 2226, 2227, 2228, 2229, 0, 2400, 80,
	242, 2169, 2401, 0, 0, 2280, 2405, 2232, 0, 0,
	2885, 2886, 2233, 2843, 0, 0, 0, 0, 2645, 0,
	0, 2239, 2240, 2241, 2242, 2243, 2244, 2591, 2681, 2591,
	2591, 0, 0, 0, 2616, 2617, 2270, 2852, 2197, 2842,
	2271, 0, 2272, 2273, 2653, 1803, 1804, 0, 0, 0,
	0, 0, 0, 0, 2278, 0, 0, 0, 0, 80,
	2505, 242, 80, 0, 2896, 2900, 2917, 0, 0, 1826,
	2439, 0, 2442, 2443, 2444, 0, 2446, 2447, 2448, 161,
	223, 0, 2451, 2452, 0, 2454, 2173, 2175, 2177, 0,
	2180, 1403, 1446, 1443, 1441, 1442, 1443, 0, 1432, 2182,
	80, 0, 0, 2516, 0, 2189, 2547, 1501, 2793, 0,
	2796, 0, 2806, 2807, 0, 0, 1507, 0, 2754, 1880,
	1450, 0, 2756, 0, 2738, 0, 1524, 0, 113, 0,
	114, 114, 114, 114, 0, 122, 0, 0, -2, -2,
	0, 0, 0, 1126, 0, -2, 1110, 1114, 1116, 1118,
	0, 1131, 1134, 0, 1387, 0, 1133, 1136, 0, 0,
	1379, 1380, 1381, 1382, 0, 0, 0, 1127, 0, 0,
	0, 0, 1960, 1164, 1389, 1354, 1355, 0, 1174, 1449,
	-2, 0, 0, 1468, 1335, 1469, 1469, 1469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1350, 0, 0,
	1227, 0, 2762, 2763, 2767, 0, 1387, 0, 0, 0,
	0, 1671, 0, 1652, 1710, 0, 0, 1233, 1235, 1237,
	1239, 0, 1248, 0, 1249, 0, 1251, 1252, 0, 0,
	1253, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1141, 1142,
	1156, 1254, 1255, 0, 0, 0, 0, 0, 0, 0,
	1260, 0, 1298, 0, 1262, 1263, 1264, 1265, 0, 1270,
	0, 0, 1319, 0, 0, 0, 0, 1276, 1387, 0,
	1278, 1711, 1677, 0, 0, 0, 1677, 1281, 0, 1283,
	0, 0, 0, 0, 0, 2738, 1603, 0, 1219, 0,
	1571, 1724, 0, 1863, 0, 0, 0, 1736, 1882, 1739,
	1740, 0, 0, 1745, 1583, 182, 0, 0, 0, 0,
	0, 1559, 1559, 1559, 1557, 1528, 1587, 0, 1592, 1530,
	1588, 1597, 1588, 1588, -2, 1532, 0, 1534, 1593, 0,
	1592, 1536, 1538, 1608, 0, 0, 0, 0, -2, 0,
	0, 1992, 1757, 1758, 1759, -2, 106, 2040, 0, 1907,
	2042, 0, 1927, 0, 0, 2070, 0, 2425, 2065, 0,
	2321, 0, 2316, 2297, 2333, 0, 0, 2323, 2324, 2329,
	2325, 2326, 0, 2299, 0, 0, 0, 2298, 0, 0,
	0, 0, 2490, 2491, 0, 0, 0, 2497, 0, 0,
	0, 0, 2071, 0, 0, 2397, 1949, 0, 1952, 1953,
	0, 0, 1998, 1961, 0, 0, 0, 0, 0, 1955,
	0, 2609, 2611, 2584, 2585, 2586, 2587, 2588, 2589, 311,
	1454, 1455, 0, 2419, 0, 1626, 0, 2506, 2508, 2416,
	0, 2434, 2435, 2436, 2433, 2455, 0, 2463, 2458, 2466,
	2459, 2461, 2460, 2040, 1927, 0, 0, 2478, 1942, 0,
	2855, 2856, 2857, 0, 0, 2860, 2861, 0, 0, 0,
	0, 2868, 2522, 0, 2071, 0, 0, 0, 2624, 2641,
	0, 2631, 0, 0, 0, 0, 0, 2661, 2668, 2677,
	0, 2677, 2672, 0, 2674, 2591, 0, 0, 0, 0,
	2165, 0, 1937, 2166, 2167, 0, 0, 1921, 1924, 0,
	2006, 2065, 0, 0, 2010, 0, 0, 2280, 0, 0,
	2064, 2108, 0, 0, 0, 0, 2121, 0, 2127, 1964,
	-2, 0, 2129, 0, 2125, 0, 2132, 2155, 2601, 2602,
	2288, 0, 0, 0, 2139, 2147, 2140, 2148, 2160, 2161,
	0, 0, 2162, 2594, 0, 2598, 2599, 2600, 1945, 1947,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2251, 0, 2082, 2172, 0, 2255, 0, 2084,
	2172, 0, 2456, 2216, 2306, 2307, 0, 0, 0, 2403,
	0, 2510, 0, 2513, 2879, 0, 2234, 0, 0, 0,
	0, 0, 2647, 0, 2642, 0, 2684, 2682, 2683, 0,
	0, 2269, 0, 0, 0, 0, 0, 0, 0, 0,
	2501, 0, 2918, 0, 2920, 0, 2914, 0, 0, 0,
	2441, 0, 0, 0, 2217, 0, 0, 80, 1436, 1438,
	1434, 2184, 2486, 0, 2520, 0, 2794, 0, 2797, 0,
	1363, 0, 112, 2755, 0, 1878, 1879, 2751, 0, 1581,
	115, 116, 0, 0, 0, 0, 121, 1074, -2, 0,
	0, -2, 0, 0, -2, 0, 0, 1135, 1137, -2,
	1384, 1386, 0, 0, 1477, 0, -2, 0, 1360, 0,
	-2, 1358, 1336, 0, 1342, 0, 0, 0, 1344, 1345,
	1205, 1206, 1207, 1208, 1209, 1210, 1211, 0, 1192, 1346,
	1352, 0, 0, 2769, 2766, 0, 1677, 0, 0, 1664,
	1665, 1677, 0, 1709, 1230, 0, 1300, 0, 0, 1140,
	1143, 1144, 1145, 1146, 1147, 1148, -2, -2, -2, -2,
	-2, -2, 1155, 0, 0, 1159, 1311, 0, 1294, 1295,
	0, 1257, 1258, 1259, 1297, 0, 1266, 0, 1314, 1315,
	0, 0, 0, 1272, 1629, 0, 151, 1273, 0, 1328,
	0, 1677, 1663, 1676, 0, 1661, 0, 0, 0, 1282,
	1284, 1656, 1656, 1656, 0, 2751, 1224, 0, 1881, 0,
	0, 0, 1728, 1729, 0, 1735, 1737, 0, 1744, 0,
	1527, 0, 0, 0, 0, 0, 1554, 1558, 1555, 1556,
	1529, 0, 1590, 0, 1531, 1535, 1537, 1539, 1548, 1590,
	0, 0, 1610, 0, 0, 512, 0, 1469, 0, 1767,
	1992, 0, 1827, 2042, 0, 1900, 1904, 2050, 2041, 0,
	0, 1928, 1930, 1931, 1950, 0, 1898, 0, 0, 2393,
	2071, 2423, 0, 0, 2335, 0, 2338, 2336, 0, 0,
	0, 2302, 2304, 2305, 2356, 2349, 2353, 0, 0, 2495,
	0, 2499, 0, 2500, 0, 2729, 0, 0, 2524, 0,
	1954, 1956, 1997, 2591, 2591, 0, 2002, 2389, 0, 1962,
	0, 1957, 1958, 0, 1623, 1624, 0, 2420, 0, 2418,
	2431, 0, 2467, 0, 0, 1898, 0, 0, 0, 2483,
	0, 2858, 2859, 2862, 2863, 2866, 2867, 2514, 0, 2056,
	2049, 0, 2373, 2374, 0, 2619, 0, 2645, 0, 2633,
	2635, 2636, 2637, 2638, 2639, 2648, 2651, 2656, 2659, 0,
	2669, 2670, 2671, 2673, 0, 2678, 0, 0, 0, 2257,
	2263, 0, 2105, 0, 1942, 1920, 0, 1922, 1923, 2280,
	0, 2281, 0, 2283, 0, 0, 2059, 0, 2012, 0,
	0, 2017, 0, 1874, 1874, 0, 0, 2112, 2122, 1825,
	1968, 0, 0, 0, 0, 2116, 2118, 2119, 2117, 0,
	1965, 0, 0, 0, 0, 80, 80, 2290, 2291, 2294,
	2163, 2606, 2596, 2246, 0, 0, 0, 0, 2254, 0,
	0, 2248, 2259, 2250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2231, 2318, 0, 2230, 80, 2280, 2880,
	0, 0, 2712, 2697, 0, 0, 0, 2713, 2714, 0,
	0, 2237, 2630, 0, 0, 0, 2267, 2268, 2485, 2654,
	2274, 2275, 2276, 2277, 80, 2504, 0, 0, 83, 80,
	2897, 2898, 2899, 2901, 2902, 2903, 2904, 2905, 0, 0,
	0, 0, 0, 0, 0, 2178, 0, 2521, 2795, 1362,
	1389, 0, 2758, 0, 2736, 117, 118, 119, 120, -2,
	-2, 0, 0, 0, -2, -2, 1383, 1385, -2, -2,
	1128, 1359, 1389, 1189, 1469, 1337, 1339, 1340, 1214, 1351,
	1470, 1469, 0, 1472, 0, 1666, 1667, 0, 1672, 0,
	1247, 1250, 0, 0, 0, 1160, 0, 0, 0, 1256,
	1261, 0, 0, 507, 1271, 1317, 1318, 1630, 0, 1631,
	1627, 1628, 0, 0, 0, 1323, 299, 0, 1279, 1669,
	1670, 1280, 1677, 0, 1693, 1677, 1322, 2758, 1575, 0,
	0, 1866, 0, 0, 1741, 1584, 1586, 1549, 0, 1551,
	0, 0, 0, 1553, 0, 0, 0, 1533, 0, 0,
	0, 102, 0, 1612, 1616, 0, 0, 0, 0, 1882,
	1749, 1849, 1849, 0, 1751, 1764, 0, 1767, 0, 2050,
	0, 0, 0, 91, 0, 1926, 0, 1932, 0, 2042,
	0, 1927, 0, 2384, 0, 0, 0, 0, 2295, 0,
	1617, 0, 1400, -2, 2330, 0, 2331, 2366, 0, 2383,
	0, 2492, 0, 0, 0, 2731, 0, 0, 0, 2396,
	1951, 0, 2058, 2058, 0, 2026, 0, 1963, 0, 1625,
	2509, 0, 1943, 0, 0, 0, 0, 1942, 0, 0,
	0, 2519, 0, 0, 0, 0, 0, 2647, 2640, 0,
	0, 0, 2693, 2693, 0, 0, 0, 0, 2107, 1950,
	1918, 1919, 2008, 2022, 2282, 2286, 2284, 2285, 2287, 2022,
	0, 2022, 0, 0, 1868, 77, 0, 1869, 0, 2109,
	0, 0, 1969, 2110, 0, 2114, 0, 1626, 1967, 2115,
	2124, 2131, 0, 0, 0, 2096, 0, 2096, 0, 0,
	2261, 2252, 0, 0, 0, 2265, 2256, 0, 2319, 2404,
	2512, 2235, 2236, 0, 0, 0, 2703, 0, 0, 0,
	0, 0, 0, 2279, 2502, 2503, 2919, 1626, 0, 2449,
	2450, 2218, 0, 0, 2453, 2487, 1364, 1451, 1509, 0,
	2750, 0, -2, -2, -2, 1361, 0, 2773, 0, 1674,
	1675, 1708, 1310, -2, 0, 1296, 1292, 1293, 1267, 0,
	1268, 0, 1632, 1274, 1275, 0, 1324, 1277, 1702, 1655,
	1657, 0, 0, 0, 0, 1679, 1680, 1681, 1682, 1683,
	1684, 1687, 1691, 0, 1320, 0, 1510, 1578, 0, 0,
	1859, 1582, 0, 1862, 0, 1550, 0, 1561, 1552, 0,
	0, 1591, 0, 1594, 1596, 1611, 0, 1614, 0, 0,
	0, 1633, 0, 0, 1654, 1336, 1748, 1750, 0, 0,
	0, 1844, 0, 1766, 1768, 1769, 1830, 1830, 1772, 1773,
	1830, 1830, 0, 0, 0, 1783, 1791, 1582, 1762, 91,
	0, 1905, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915,
	1916, 1917, 1906, 2054, 0, 0, 0, 1929, 1950, 2050,
	2040, 2042, 1927, 0, 0, 0, 0, 0, 2065, 0,
	2321, 1619, 2334, 0, 2339, 2340, 0, 2372, 2368, 2355,
	2357, 0, 2360, 2361, 2280, 0, 2493, 2719, 0, 0,
	2725, 2730, 0, 0, 2728, 2393, 2071, 1999, 0, 2000,
	2016, 2031, 0, 1996, 0, 2696, 1941, 0, 1942, 0,
	2040, 1927, 2468, 0, 1942, 2522, 2055, 0, 0, 2620,
	0, 2629, 0, 2676, 2693, 2690, 0, 2689, 2718, 0,
	0, 0, 1948, 2591, 0, 2591, 0, 2591, 2018, 2019,
	311, 1877, 76, 1873, 1874, 2113, 2123, 0, 0, 2593,
	2293, 2258, 2264, 2087, 2095, 0, 2089, 0, 2260, 0,
	2096, 0, 0, 2698, 2708, 2708, 2701, 0, 2715, 0,
	0, 0, 2644, 2238, 80, 2445, 0, 0, 0, 2757,
	2759, 0, 2737, 2739, 2741, 2742, 2743, 2744, 2745, 0,
	181, 367, 468, 1338, 0, 0, 0, 0, 2768, 0,
	-2, 0, 0, 1325, 1326, 1707, 0, 0, 0, 0,
	1287, 0, 1678, 1685, 1686, 0, 0, 1289, 1321, 1569,
	0, 0, 0, 0, 1861, 1867, 1730, 0, 0, 1589,
	1595, 1609, 1613, 0, 0, 1639, 0, 0, 0, 0,
	1636, 1656, 0, 0, 1848, 0, 1846, 0, 0, 0,
	0, 0, 0, 0, 1782, 1765, 0, 1785, 1786, 1787,
	1788, 1789, 0, 1752, 2054, 2039, 2056, 0, 89, 90,
	0, 1933, 91, 2042, 2050, 0, 2390, 0, 0, 2393,
	2067, 0, 1618, 2335, 2337, 2332, 0, 0, 0, 2367,
	2358, 1830, 2362, 2363, 0, 2382, 0, 0, 2732, 2733,
	2385, 0, 0, 2001, 0, 2003, 2027, 2028, 0, 2023,
	2024, 2025, 2004, 0, 0, 0, 0, 1944, 2479, 1942,
	0, 0, 0, 2484, 2515, 2612, 0, 0, 2622, 2652,
	2688, 2691, 2692, 0, 1939, 0, 0, 0, 2058, 0,
	2058, 2389, 2058, 0, 1880, 1877, 1870, 0, 1996, 2126,
	0, 0, 0, 2262, 2091, 0, 2266, 1994, 0, 1994,
	0, 2709, 0, 0, 0, 2921, 2219, 2221, 2220, 0,
	0, 0, 2746, 0, 0, 0, 2765, 2785, 2774, -2,
	426, 182, 0, 2785, 2785, 1309, 1269, 1312, 1327, 1691,
	0, 0, 1694, 0, 1696, 0, 0, 0, 1658, 1659,
	1692, 1288, 0, 0, 0, 0, 1582, 1599, 2873, 0,
	1637, 0, 1641, 0, 1634, 0, 1635, 0, 1653, 1839,
	1840, 0, 0, 1851, 1841, 0, 0, 0, 1770, 1771,
	1774, 1775, 1776, 1777, 0, 1780, 1781, 1784, 0, 1792,
	1794, 2056, 1885, 0, 0, 2044, 1874, 1874, 0, 2054,
	2050, 91, 2042, 2391, 2392, 2386, 1961, 0, 0, 2296,
	0, 0, 2365, 2369, 2370, 0, 0, 0, 0, 0,
	0, 2015, 2029, 0, 2030, 0, 0, 0, 0, 0,
	0, 2695, 2481, 0, 0, 1942, 0, 2621, 0, 1934,
	0, 1938, 1935, 0, 2280, 0, 2280, 2026, 1582, 0,
	1871, 1880, 2111, 2120, 2592, 2096, 2096, 0, 2699, 1993,
	2706, 0, 2700, 0, 0, 2716, 2717, 2646, 2760, 2761,
	2740, 0, 0, 0, 2770, 0, 0, 2776, 2777, 2778,
	2779, 2780, 2771, 2772, 0, 1704, 1706, 1695, 1697, 0,
	1700, 0, 1701, 1688, 1689, 0, 0, 0, 1858, 1560,
	0, 2871, 0, 1615, 1640, 1643, 1644, 0, 0, 0,
	1649, 0, 1642, 0, 0, 1842, 0, 1843, 1852, 0,
	0, 0, 0, 1845, 1847, 1778, 1779, 1790, 0, 1883,
	2051, 0, 0, 2043, 0, 77, 77, 0, 2056, 91,
	2054, 2050, 2071, 0, 0, 0, 0, 2359, 2364, 0,
	2722, 2723, 2393, 2057, 2032, 0, 2035, 2036, 0, 2033,
	1995, 2005, 2694, 1942, 0, 2469, 2613, 2623, 1940, 0,
	2009, 2021, 2011, 2031, 2280, 2020, 1872, 2088, 2090, 2096,
	0, 2702, 2710, 2748, 2747, 0, 0, 2782, 2783, 0,
	0, 1286, 0, 0, 1698, 1699, 0, 0, 0, 0,
	1598, 0, 1645, 1646, 1647, 1648, 1650, 0, 0, 1850,
	0, 0, 1856, 0, 1793, 2052, 2053, 2045, 2046, 2047,
	1874, 1887, 2054, 2056, 91, 2056, 0, 2068, 2067, 0,
	2371, 2372, 0, 0, 2387, 2034, 2389, 2389, 2480, 1942,
	0, 2280, 2014, 2092, 2707, 2749, 2781, 2784, 2775, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1714,
	0, -2, 0, 0, 0, 77, 2056, 1886, 2054, 1582,
	2066, 0, 1961, 2377, 0, 0, 0, 2037, 2038, 2482,
	0, 2013, 1703, 1705, 1690, 0, 0, -2, 1577, 1573,
	1574, 2872, 0, 1693, 0, 0, 1723, 0, 1712, 1853,
	1854, 0, 1857, 2048, 1884, 2056, 2060, 2069, 2071, 0,
	2375, 2378, 2379, 2380, 2381, 0, 0, 0, 1936, 0,
	0, 1638, 0, 1715, 1716, 1702, 1723, 1723, 0, 0,
	0, 1888, 2056, 2343, 0, 0, 0, 0, 0, 1469,
	1651, 1707, 1702, 1693, 1722, 0, 0, 0, 1582, 2376,
	0, 0, 0, 0, 0, 1691, 1707, 1719, 0, 0,
	1855, 2061, 2377, 2720, 2721, 1576, 0, 1717, 1691, 0,
	0, 0, 1718, 1720, 0, 2344, 0, 1721,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 538, 3, 3,
	531, 532, 536, 534, 541, 535, 533, 537, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 542, 540,
	525, 527, 526, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 529, 3, 530, 539,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 528, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:549
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:564
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:572
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:587
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:590
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:599
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:600
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:601
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:602
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:603
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:604
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:605
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:606
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:607
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:608
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:609
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:610
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:611
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:612
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:613
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:614
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:615
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:616
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:617
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:618
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:619
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:620
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:621
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:622
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:623
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:624
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:625
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:626
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:627
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:628
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:629
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:630
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:631
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:632
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:633
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:634
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:635
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:636
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:637
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:638
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:639
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:640
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:641
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:642
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:643
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:644
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:645
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:646
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:647
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:648
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:649
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:650
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:651
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:652
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:653
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:654
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:655
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:656
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:657
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:658
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:659
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:660
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:661
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:662
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:663
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:664
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:665
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:667
		{
			yyVAL.stmt = nil
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:678
		{
			yyVAL.str = yyDollar[1].str
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:679
		{
			yyVAL.str = ""
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:683
		{
			yyVAL.list = yyDollar[1].list
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:684
		{
			yyVAL.list = nil
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:688
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:689
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:690
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:694
		{
			yyVAL.ival = 1
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:695
		{
			yyVAL.ival = 0
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:699
		{
			yyVAL.ival = 1
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:700
		{
			yyVAL.ival = 0
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:704
		{
			yyVAL.bval = true
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:705
		{
			yyVAL.bval = false
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:709
		{
			yyVAL.bval = true
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:710
		{
			yyVAL.bval = false
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:714
		{
			yyVAL.list = yyDollar[2].list
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:715
		{
			yyVAL.list = nil
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:716
		{
			yyVAL.list = nil
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:725
		{
			yyVAL.str = yyDollar[1].str
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:726
		{
			yyVAL.str = yyDollar[1].str
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:727
		{
			yyVAL.str = yyDollar[1].str
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:731
		{
			yyVAL.str = yyDollar[1].str
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:732
		{
			yyVAL.str = yyDollar[1].str
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:733
		{
			yyVAL.str = yyDollar[1].str
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:734
		{
			yyVAL.str = yyDollar[1].str
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:735
		{
			yyVAL.str = yyDollar[1].str
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:738
		{
			yyVAL.str = yyDollar[1].str
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:739
		{
			yyVAL.str = yyDollar[1].str
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:742
		{
			yyVAL.str = yyDollar[1].str
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:747
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:751
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:760
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:764
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:772
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:779
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:808
		{
			yyVAL.list = yyDollar[2].list
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:809
		{
			yyVAL.list = nil
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:814
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:818
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:831
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:837
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:843
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:849
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:855
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:862
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:869
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:875
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:881
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:890
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:894
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:906
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:910
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:920
		{
			yyVAL.str = "abort"
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:921
		{
			yyVAL.str = "absent"
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:922
		{
			yyVAL.str = "absolute"
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:923
		{
			yyVAL.str = "access"
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:924
		{
			yyVAL.str = "action"
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:925
		{
			yyVAL.str = "add"
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:926
		{
			yyVAL.str = "admin"
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:927
		{
			yyVAL.str = "after"
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:928
		{
			yyVAL.str = "aggregate"
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:929
		{
			yyVAL.str = "also"
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:930
		{
			yyVAL.str = "alter"
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:931
		{
			yyVAL.str = "always"
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:932
		{
			yyVAL.str = "asensitive"
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:933
		{
			yyVAL.str = "assertion"
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:934
		{
			yyVAL.str = "assignment"
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:935
		{
			yyVAL.str = "at"
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:936
		{
			yyVAL.str = "atomic"
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:937
		{
			yyVAL.str = "attach"
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:938
		{
			yyVAL.str = "attribute"
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:939
		{
			yyVAL.str = "backward"
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:940
		{
			yyVAL.str = "before"
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:941
		{
			yyVAL.str = "begin"
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:942
		{
			yyVAL.str = "breadth"
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:943
		{
			yyVAL.str = "by"
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:944
		{
			yyVAL.str = "cache"
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:945
		{
			yyVAL.str = "call"
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:946
		{
			yyVAL.str = "called"
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:947
		{
			yyVAL.str = "cascade"
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:948
		{
			yyVAL.str = "cascaded"
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:949
		{
			yyVAL.str = "catalog"
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:950
		{
			yyVAL.str = "chain"
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:951
		{
			yyVAL.str = "characteristics"
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:952
		{
			yyVAL.str = "checkpoint"
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:953
		{
			yyVAL.str = "class"
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:954
		{
			yyVAL.str = "close"
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:955
		{
			yyVAL.str = "cluster"
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:956
		{
			yyVAL.str = "columns"
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:957
		{
			yyVAL.str = "comment"
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:958
		{
			yyVAL.str = "comments"
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:959
		{
			yyVAL.str = "commit"
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:960
		{
			yyVAL.str = "committed"
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:961
		{
			yyVAL.str = "compression"
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:962
		{
			yyVAL.str = "conditional"
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:963
		{
			yyVAL.str = "configuration"
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:964
		{
			yyVAL.str = "conflict"
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:965
		{
			yyVAL.str = "connection"
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:966
		{
			yyVAL.str = "constraints"
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:967
		{
			yyVAL.str = "content"
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:968
		{
			yyVAL.str = "continue"
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:969
		{
			yyVAL.str = "conversion"
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:970
		{
			yyVAL.str = "copy"
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:971
		{
			yyVAL.str = "cost"
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:972
		{
			yyVAL.str = "csv"
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:973
		{
			yyVAL.str = "cube"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:974
		{
			yyVAL.str = "current"
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:975
		{
			yyVAL.str = "cursor"
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:976
		{
			yyVAL.str = "cycle"
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:977
		{
			yyVAL.str = "data"
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:978
		{
			yyVAL.str = "database"
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:979
		{
			yyVAL.str = "day"
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:980
		{
			yyVAL.str = "deallocate"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:981
		{
			yyVAL.str = "declare"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:982
		{
			yyVAL.str = "defaults"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:983
		{
			yyVAL.str = "deferred"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:984
		{
			yyVAL.str = "definer"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:985
		{
			yyVAL.str = "delete"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:986
		{
			yyVAL.str = "delimiter"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:987
		{
			yyVAL.str = "delimiters"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:988
		{
			yyVAL.str = "depends"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:989
		{
			yyVAL.str = "depth"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:990
		{
			yyVAL.str = "detach"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:991
		{
			yyVAL.str = "dictionary"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:992
		{
			yyVAL.str = "disable"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:993
		{
			yyVAL.str = "discard"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:994
		{
			yyVAL.str = "document"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:995
		{
			yyVAL.str = "domain"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:996
		{
			yyVAL.str = "double"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:997
		{
			yyVAL.str = "drop"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:998
		{
			yyVAL.str = "each"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:999
		{
			yyVAL.str = "empty"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1000
		{
			yyVAL.str = "enable"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1001
		{
			yyVAL.str = "encoding"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1002
		{
			yyVAL.str = "encrypted"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1003
		{
			yyVAL.str = "enum"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1004
		{
			yyVAL.str = "error"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1005
		{
			yyVAL.str = "escape"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1006
		{
			yyVAL.str = "event"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1007
		{
			yyVAL.str = "exclude"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1008
		{
			yyVAL.str = "excluding"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1009
		{
			yyVAL.str = "exclusive"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1010
		{
			yyVAL.str = "execute"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1011
		{
			yyVAL.str = "explain"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1012
		{
			yyVAL.str = "expression"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1013
		{
			yyVAL.str = "extension"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1014
		{
			yyVAL.str = "external"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1015
		{
			yyVAL.str = "family"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1016
		{
			yyVAL.str = "filter"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1017
		{
			yyVAL.str = "finalize"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1018
		{
			yyVAL.str = "first"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1019
		{
			yyVAL.str = "following"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1020
		{
			yyVAL.str = "force"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1021
		{
			yyVAL.str = "format"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1022
		{
			yyVAL.str = "forward"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1023
		{
			yyVAL.str = "function"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1024
		{
			yyVAL.str = "functions"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1025
		{
			yyVAL.str = "generated"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1026
		{
			yyVAL.str = "global"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1027
		{
			yyVAL.str = "granted"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1028
		{
			yyVAL.str = "groups"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1029
		{
			yyVAL.str = "handler"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1030
		{
			yyVAL.str = "header"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1031
		{
			yyVAL.str = "hold"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1032
		{
			yyVAL.str = "hour"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1033
		{
			yyVAL.str = "identity"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1034
		{
			yyVAL.str = "if"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1035
		{
			yyVAL.str = "immediate"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1036
		{
			yyVAL.str = "immutable"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1037
		{
			yyVAL.str = "implicit"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1038
		{
			yyVAL.str = "import"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1039
		{
			yyVAL.str = "include"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1040
		{
			yyVAL.str = "including"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1041
		{
			yyVAL.str = "increment"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1042
		{
			yyVAL.str = "indent"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1043
		{
			yyVAL.str = "index"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1044
		{
			yyVAL.str = "indexes"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1045
		{
			yyVAL.str = "inherit"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1046
		{
			yyVAL.str = "inherits"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1047
		{
			yyVAL.str = "inline"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1048
		{
			yyVAL.str = "input"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.str = "insensitive"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.str = "insert"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.str = "instead"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1052
		{
			yyVAL.str = "invoker"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "isolation"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "keep"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "key"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "keys"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "label"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "language"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "large"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "last"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "leakproof"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "level"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "listen"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "load"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "local"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "location"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "lock"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "locked"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "logged"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "mapping"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "match"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "matched"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "materialized"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "maxvalue"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "merge"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "method"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "minute"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "minvalue"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "mode"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "month"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "move"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "name"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "names"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "nested"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "new"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "next"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "nfc"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "nfd"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "nfkc"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "nfkd"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "no"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "normalized"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "nothing"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "notify"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "nowait"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "nulls"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "object"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "of"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "off"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "oids"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "old"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "omit"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "operator"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "option"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "options"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "ordinality"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "others"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "over"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "overriding"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "owned"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "owner"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "parallel"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "parameter"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "parser"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "partial"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "partition"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "passing"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "password"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "path"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "plan"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "plans"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "policy"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "preceding"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "prepare"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "prepared"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "preserve"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "prior"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "privileges"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "procedural"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "procedure"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "procedures"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "program"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "publication"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "quote"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "quotes"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "range"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "read"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "reassign"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "recheck"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "recursive"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "ref"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "referencing"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "refresh"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "reindex"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "relative"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "release"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "rename"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "repeatable"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "replace"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "replica"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "reset"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "restart"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "restrict"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "return"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "returns"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "revoke"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "role"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "rollback"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "rollup"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "routine"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "routines"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "rows"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "rule"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "savepoint"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "scalar"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "schema"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "schemas"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.str = "scroll"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1169
		{
			yyVAL.str = "search"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.str = "second"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "security"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "sequence"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "sequences"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.str = "serializable"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.str = "server"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			yyVAL.str = "session"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1177
		{
			yyVAL.str = "set"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = "sets"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = "share"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "show"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "simple"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "skip"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "snapshot"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "source"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "sql"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "stable"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "standalone"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "start"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "statement"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "statistics"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "stdin"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "stdout"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "storage"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1194
		{
			yyVAL.str = "stored"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "strict"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "string"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "strip"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.str = "subscription"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.str = "support"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.str = "sysid"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.str = "system"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "tables"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "tablespace"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = "target"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = "temp"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = "template"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1207
		{
			yyVAL.str = "temporary"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1208
		{
			yyVAL.str = "text"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1209
		{
			yyVAL.str = "ties"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1210
		{
			yyVAL.str = "transaction"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.str = "transform"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1212
		{
			yyVAL.str = "trigger"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1213
		{
			yyVAL.str = "truncate"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1214
		{
			yyVAL.str = "trusted"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.str = "type"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1216
		{
			yyVAL.str = "types"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1217
		{
			yyVAL.str = "uescape"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.str = "unbounded"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.str = "uncommitted"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "unconditional"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "unencrypted"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "unknown"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "unlisten"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "unlogged"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "until"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "update"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "vacuum"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "valid"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "validate"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "validator"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "value"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "varying"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "version"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "view"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.str = "views"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1236
		{
			yyVAL.str = "volatile"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.str = "whitespace"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1238
		{
			yyVAL.str = "within"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1239
		{
			yyVAL.str = "without"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1240
		{
			yyVAL.str = "work"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.str = "wrapper"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1242
		{
			yyVAL.str = "write"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1243
		{
			yyVAL.str = "xml"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1244
		{
			yyVAL.str = "year"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.str = "yes"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1246
		{
			yyVAL.str = "zone"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "between"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "bigint"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "bit"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "boolean"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "char"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "character"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "coalesce"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "dec"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "decimal"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.str = "exists"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1270
		{
			yyVAL.str = "extract"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "float"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "greatest"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "grouping"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "inout"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "int"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "integer"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "interval"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "json"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.str = "json_array"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1280
		{
			yyVAL.str = "json_arrayagg"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1281
		{
			yyVAL.str = "json_exists"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1282
		{
			yyVAL.str = "json_object"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.str = "json_objectagg"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1284
		{
			yyVAL.str = "json_query"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1285
		{
			yyVAL.str = "json_scalar"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1286
		{
			yyVAL.str = "json_serialize"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1287
		{
			yyVAL.str = "json_table"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1288
		{
			yyVAL.str = "json_value"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1289
		{
			yyVAL.str = "least"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1290
		{
			yyVAL.str = "merge_action"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1291
		{
			yyVAL.str = "national"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1292
		{
			yyVAL.str = "nchar"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1293
		{
			yyVAL.str = "none"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1294
		{
			yyVAL.str = "normalize"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1295
		{
			yyVAL.str = "nullif"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1296
		{
			yyVAL.str = "numeric"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1297
		{
			yyVAL.str = "out"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1298
		{
			yyVAL.str = "overlay"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1299
		{
			yyVAL.str = "position"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1300
		{
			yyVAL.str = "precision"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.str = "real"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.str = "row"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "setof"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "smallint"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "substring"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "time"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "timestamp"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "treat"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "trim"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "values"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.str = "varchar"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1312
		{
			yyVAL.str = "xmlattributes"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			yyVAL.str = "xmlconcat"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1314
		{
			yyVAL.str = "xmlelement"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.str = "xmlexists"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1316
		{
			yyVAL.str = "xmlforest"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1317
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1318
		{
			yyVAL.str = "xmlparse"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1319
		{
			yyVAL.str = "xmlpi"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1320
		{
			yyVAL.str = "xmlroot"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1321
		{
			yyVAL.str = "xmlserialize"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1322
		{
			yyVAL.str = "xmltable"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = "authorization"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "binary"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "collation"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "concurrently"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "cross"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "current_schema"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "freeze"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "full"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "ilike"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1345
		{
			yyVAL.str = "inner"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1346
		{
			yyVAL.str = "is"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1347
		{
			yyVAL.str = "isnull"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1348
		{
			yyVAL.str = "join"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1349
		{
			yyVAL.str = "left"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1350
		{
			yyVAL.str = "like"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1351
		{
			yyVAL.str = "natural"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1352
		{
			yyVAL.str = "notnull"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1353
		{
			yyVAL.str = "outer"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1354
		{
			yyVAL.str = "overlaps"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1355
		{
			yyVAL.str = "right"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1356
		{
			yyVAL.str = "similar"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1357
		{
			yyVAL.str = "tablesample"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "verbose"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1368
		{
			yyVAL.str = "all"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1369
		{
			yyVAL.str = "analyse"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1370
		{
			yyVAL.str = "analyze"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.str = "and"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1372
		{
			yyVAL.str = "any"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1373
		{
			yyVAL.str = "array"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1374
		{
			yyVAL.str = "as"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1375
		{
			yyVAL.str = "asc"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1376
		{
			yyVAL.str = "asymmetric"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1377
		{
			yyVAL.str = "both"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.str = "case"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1379
		{
			yyVAL.str = "cast"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1380
		{
			yyVAL.str = "check"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1381
		{
			yyVAL.str = "collate"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1382
		{
			yyVAL.str = "column"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1383
		{
			yyVAL.str = "constraint"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1384
		{
			yyVAL.str = "create"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1385
		{
			yyVAL.str = "current_catalog"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1386
		{
			yyVAL.str = "current_date"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1387
		{
			yyVAL.str = "current_role"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1388
		{
			yyVAL.str = "current_time"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1389
		{
			yyVAL.str = "current_timestamp"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1390
		{
			yyVAL.str = "current_user"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1391
		{
			yyVAL.str = "default"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1392
		{
			yyVAL.str = "deferrable"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "desc"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.str = "distinct"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.str = "do"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1396
		{
			yyVAL.str = "else"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.str = "end"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.str = "except"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1399
		{
			yyVAL.str = "false"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1400
		{
			yyVAL.str = "fetch"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1401
		{
			yyVAL.str = "for"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.str = "foreign"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1403
		{
			yyVAL.str = "from"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1404
		{
			yyVAL.str = "grant"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1405
		{
			yyVAL.str = "group"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1406
		{
			yyVAL.str = "having"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1407
		{
			yyVAL.str = "in"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1408
		{
			yyVAL.str = "initially"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.str = "intersect"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1410
		{
			yyVAL.str = "into"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1411
		{
			yyVAL.str = "lateral"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1412
		{
			yyVAL.str = "leading"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1413
		{
			yyVAL.str = "limit"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1414
		{
			yyVAL.str = "localtime"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1415
		{
			yyVAL.str = "localtimestamp"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.str = "not"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1417
		{
			yyVAL.str = "null"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "offset"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1419
		{
			yyVAL.str = "on"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "only"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "or"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "order"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "placing"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "primary"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "references"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "returning"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "select"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "session_user"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "some"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "symmetric"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "system_user"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "table"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "then"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "to"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "trailing"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = "true"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1437
		{
			yyVAL.str = "union"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1438
		{
			yyVAL.str = "unique"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1439
		{
			yyVAL.str = "user"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1440
		{
			yyVAL.str = "using"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1441
		{
			yyVAL.str = "variadic"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1442
		{
			yyVAL.str = "when"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1443
		{
			yyVAL.str = "where"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1444
		{
			yyVAL.str = "window"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1445
		{
			yyVAL.str = "with"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.str = "abort"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1459
		{
			yyVAL.str = "absent"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1460
		{
			yyVAL.str = "absolute"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1461
		{
			yyVAL.str = "access"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1462
		{
			yyVAL.str = "action"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.str = "add"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = "admin"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1465
		{
			yyVAL.str = "after"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1466
		{
			yyVAL.str = "aggregate"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.str = "all"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1468
		{
			yyVAL.str = "also"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "alter"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1470
		{
			yyVAL.str = "always"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.str = "analyse"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1472
		{
			yyVAL.str = "analyze"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.str = "and"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.str = "any"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1475
		{
			yyVAL.str = "asc"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1476
		{
			yyVAL.str = "asensitive"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.str = "assertion"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "assignment"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1479
		{
			yyVAL.str = "asymmetric"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.str = "at"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1481
		{
			yyVAL.str = "atomic"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "attach"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "attribute"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "authorization"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "backward"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "before"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.str = "begin"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1488
		{
			yyVAL.str = "between"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = "bigint"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = "binary"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.str = "bit"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1492
		{
			yyVAL.str = "boolean"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			yyVAL.str = "both"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "breadth"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "by"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "cache"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.str = "call"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1498
		{
			yyVAL.str = "called"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1499
		{
			yyVAL.str = "cascade"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = "cascaded"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "case"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "cast"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "catalog"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "chain"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "characteristics"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "check"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "checkpoint"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "class"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "close"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "cluster"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "coalesce"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "collate"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "collation"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "column"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "columns"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "comment"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "comments"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "commit"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "committed"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "compression"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "concurrently"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "conditional"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "configuration"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "conflict"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "connection"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "constraint"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "constraints"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "content"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "continue"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "conversion"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "copy"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "cost"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "cross"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "csv"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "cube"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "current"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "current_catalog"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "current_date"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "current_role"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "current_schema"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "current_time"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "current_timestamp"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "current_user"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "cursor"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "cycle"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "data"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "database"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "deallocate"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "dec"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "decimal"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "declare"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "default"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "defaults"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "deferrable"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "deferred"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "definer"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "delete"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "delimiter"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "delimiters"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "depends"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "depth"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "desc"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "detach"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "dictionary"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "disable"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "discard"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "distinct"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "do"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "document"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "domain"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "double"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "drop"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "each"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "else"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "empty"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "enable"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "encoding"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1578
		{
			yyVAL.str = "encrypted"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1579
		{
			yyVAL.str = "end"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1580
		{
			yyVAL.str = "enum"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1581
		{
			yyVAL.str = "error"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1582
		{
			yyVAL.str = "escape"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1583
		{
			yyVAL.str = "event"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1584
		{
			yyVAL.str = "exclude"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1585
		{
			yyVAL.str = "excluding"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1586
		{
			yyVAL.str = "exclusive"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1587
		{
			yyVAL.str = "execute"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1588
		{
			yyVAL.str = "exists"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1589
		{
			yyVAL.str = "explain"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1590
		{
			yyVAL.str = "expression"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "extension"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "external"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			yyVAL.str = "extract"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1594
		{
			yyVAL.str = "false"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.str = "family"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "finalize"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "first"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "float"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "following"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "force"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "foreign"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "format"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "forward"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "freeze"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "full"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "function"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "functions"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "generated"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "global"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "granted"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "greatest"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "grouping"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "groups"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "handler"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "header"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "hold"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "identity"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "if"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "ilike"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "immediate"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "immutable"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "implicit"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "import"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "in"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "include"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "including"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "increment"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "indent"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "index"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "indexes"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "inherit"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "inherits"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "initially"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "inline"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "inner"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "inout"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "input"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "insensitive"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "insert"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "instead"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "int"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "integer"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "interval"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "invoker"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "is"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "isolation"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "join"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "json"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "json_array"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "json_arrayagg"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "json_exists"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "json_object"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "json_objectagg"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "json_query"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "json_scalar"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "json_serialize"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "json_table"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "json_value"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "keep"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "key"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "keys"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "label"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "language"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "large"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "last"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "lateral"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "leading"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "leakproof"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "least"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "left"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "level"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "like"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "listen"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "load"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "local"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "localtime"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "localtimestamp"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "location"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "lock"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "locked"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "logged"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "mapping"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "match"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "matched"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "materialized"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "maxvalue"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "merge"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "merge_action"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "method"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "minvalue"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "mode"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "move"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "name"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "names"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "national"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "natural"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "nchar"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "nested"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "new"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "next"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "nfc"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "nfd"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "nfkc"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "nfkd"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "no"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "none"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "normalize"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "normalized"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "not"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "nothing"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "notify"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "nowait"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "null"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "nullif"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "nulls"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "numeric"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "object"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "of"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "off"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "oids"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "old"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "omit"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "only"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "operator"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "option"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "options"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "or"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "ordinality"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "others"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "out"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "outer"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "overlay"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "overriding"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "owned"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "owner"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "parallel"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "parameter"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "parser"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "partial"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "partition"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "passing"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "password"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "path"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "placing"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "plan"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "plans"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "policy"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "position"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "preceding"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "prepare"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "prepared"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "preserve"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "primary"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "prior"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.str = "privileges"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1756
		{
			yyVAL.str = "procedural"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1757
		{
			yyVAL.str = "procedure"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1758
		{
			yyVAL.str = "procedures"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.str = "program"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.str = "publication"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1761
		{
			yyVAL.str = "quote"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1762
		{
			yyVAL.str = "quotes"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.str = "range"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1764
		{
			yyVAL.str = "read"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1765
		{
			yyVAL.str = "real"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1766
		{
			yyVAL.str = "reassign"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1767
		{
			yyVAL.str = "recheck"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1768
		{
			yyVAL.str = "recursive"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.str = "ref"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1770
		{
			yyVAL.str = "references"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.str = "referencing"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1772
		{
			yyVAL.str = "refresh"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1773
		{
			yyVAL.str = "reindex"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1774
		{
			yyVAL.str = "relative"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			yyVAL.str = "release"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1776
		{
			yyVAL.str = "rename"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1777
		{
			yyVAL.str = "repeatable"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1778
		{
			yyVAL.str = "replace"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1779
		{
			yyVAL.str = "replica"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1780
		{
			yyVAL.str = "reset"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.str = "restart"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1782
		{
			yyVAL.str = "restrict"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1783
		{
			yyVAL.str = "return"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1784
		{
			yyVAL.str = "returns"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1785
		{
			yyVAL.str = "revoke"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1786
		{
			yyVAL.str = "right"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1787
		{
			yyVAL.str = "role"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1788
		{
			yyVAL.str = "rollback"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1789
		{
			yyVAL.str = "rollup"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1790
		{
			yyVAL.str = "routine"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1791
		{
			yyVAL.str = "routines"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1792
		{
			yyVAL.str = "row"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1793
		{
			yyVAL.str = "rows"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1794
		{
			yyVAL.str = "rule"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1795
		{
			yyVAL.str = "savepoint"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1796
		{
			yyVAL.str = "scalar"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1797
		{
			yyVAL.str = "schema"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1798
		{
			yyVAL.str = "schemas"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1799
		{
			yyVAL.str = "scroll"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1800
		{
			yyVAL.str = "search"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1801
		{
			yyVAL.str = "security"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1802
		{
			yyVAL.str = "select"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1803
		{
			yyVAL.str = "sequence"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1804
		{
			yyVAL.str = "sequences"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1805
		{
			yyVAL.str = "serializable"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1806
		{
			yyVAL.str = "server"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1807
		{
			yyVAL.str = "session"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1808
		{
			yyVAL.str = "session_user"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1809
		{
			yyVAL.str = "set"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1810
		{
			yyVAL.str = "setof"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1811
		{
			yyVAL.str = "sets"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1812
		{
			yyVAL.str = "share"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1813
		{
			yyVAL.str = "show"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1814
		{
			yyVAL.str = "similar"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1815
		{
			yyVAL.str = "simple"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1816
		{
			yyVAL.str = "skip"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1817
		{
			yyVAL.str = "smallint"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1818
		{
			yyVAL.str = "snapshot"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1819
		{
			yyVAL.str = "some"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1820
		{
			yyVAL.str = "source"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1821
		{
			yyVAL.str = "sql"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1822
		{
			yyVAL.str = "stable"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1823
		{
			yyVAL.str = "standalone"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1824
		{
			yyVAL.str = "start"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1825
		{
			yyVAL.str = "statement"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1826
		{
			yyVAL.str = "statistics"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1827
		{
			yyVAL.str = "stdin"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1828
		{
			yyVAL.str = "stdout"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1829
		{
			yyVAL.str = "storage"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1830
		{
			yyVAL.str = "stored"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1831
		{
			yyVAL.str = "strict"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1832
		{
			yyVAL.str = "string"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1833
		{
			yyVAL.str = "strip"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1834
		{
			yyVAL.str = "subscription"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1835
		{
			yyVAL.str = "substring"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1836
		{
			yyVAL.str = "support"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1837
		{
			yyVAL.str = "symmetric"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1838
		{
			yyVAL.str = "sysid"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1839
		{
			yyVAL.str = "system"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1840
		{
			yyVAL.str = "system_user"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1841
		{
			yyVAL.str = "table"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1842
		{
			yyVAL.str = "tables"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1843
		{
			yyVAL.str = "tablesample"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1844
		{
			yyVAL.str = "tablespace"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1845
		{
			yyVAL.str = "target"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1846
		{
			yyVAL.str = "temp"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1847
		{
			yyVAL.str = "template"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1848
		{
			yyVAL.str = "temporary"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1849
		{
			yyVAL.str = "text"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1850
		{
			yyVAL.str = "then"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1851
		{
			yyVAL.str = "ties"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1852
		{
			yyVAL.str = "time"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1853
		{
			yyVAL.str = "timestamp"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1854
		{
			yyVAL.str = "trailing"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1855
		{
			yyVAL.str = "transaction"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1856
		{
			yyVAL.str = "transform"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1857
		{
			yyVAL.str = "treat"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1858
		{
			yyVAL.str = "trigger"
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1859
		{
			yyVAL.str = "trim"
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1860
		{
			yyVAL.str = "true"
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1861
		{
			yyVAL.str = "truncate"
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1862
		{
			yyVAL.str = "trusted"
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1863
		{
			yyVAL.str = "type"
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1864
		{
			yyVAL.str = "types"
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1865
		{
			yyVAL.str = "uescape"
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1866
		{
			yyVAL.str = "unbounded"
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1867
		{
			yyVAL.str = "uncommitted"
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1868
		{
			yyVAL.str = "unconditional"
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1869
		{
			yyVAL.str = "unencrypted"
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1870
		{
			yyVAL.str = "unique"
		}
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1871
		{
			yyVAL.str = "unknown"
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1872
		{
			yyVAL.str = "unlisten"
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1873
		{
			yyVAL.str = "unlogged"
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1874
		{
			yyVAL.str = "until"
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1875
		{
			yyVAL.str = "update"
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1876
		{
			yyVAL.str = "user"
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1877
		{
			yyVAL.str = "using"
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1878
		{
			yyVAL.str = "vacuum"
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1879
		{
			yyVAL.str = "valid"
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1880
		{
			yyVAL.str = "validate"
		}
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1881
		{
			yyVAL.str = "validator"
		}
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1882
		{
			yyVAL.str = "value"
		}
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1883
		{
			yyVAL.str = "values"
		}
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1884
		{
			yyVAL.str = "varchar"
		}
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1885
		{
			yyVAL.str = "variadic"
		}
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1886
		{
			yyVAL.str = "verbose"
		}
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1887
		{
			yyVAL.str = "version"
		}
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1888
		{
			yyVAL.str = "view"
		}
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1889
		{
			yyVAL.str = "views"
		}
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1890
		{
			yyVAL.str = "volatile"
		}
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1891
		{
			yyVAL.str = "when"
		}
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1892
		{
			yyVAL.str = "whitespace"
		}
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1893
		{
			yyVAL.str = "work"
		}
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1894
		{
			yyVAL.str = "wrapper"
		}
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1895
		{
			yyVAL.str = "write"
		}
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1896
		{
			yyVAL.str = "xml"
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1897
		{
			yyVAL.str = "xmlattributes"
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1898
		{
			yyVAL.str = "xmlconcat"
		}
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1899
		{
			yyVAL.str = "xmlelement"
		}
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1900
		{
			yyVAL.str = "xmlexists"
		}
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1901
		{
			yyVAL.str = "xmlforest"
		}
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1902
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1903
		{
			yyVAL.str = "xmlparse"
		}
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1904
		{
			yyVAL.str = "xmlpi"
		}
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1905
		{
			yyVAL.str = "xmlroot"
		}
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1906
		{
			yyVAL.str = "xmlserialize"
		}
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1907
		{
			yyVAL.str = "xmltable"
		}
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1908
		{
			yyVAL.str = "yes"
		}
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1909
		{
			yyVAL.str = "zone"
		}
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1924
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1926
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1930
		{
			collateClause := ast.NewCollateClause(yyDollar[3].list)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1074:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1936
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1941
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1076:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1946
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1077:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1951
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1078:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1956
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1079:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1961
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1080:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1966
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1081:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1971
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1082:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1976
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1083:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1981
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1986
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1085:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1991
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1996
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1087:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2001
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1088:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2006
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1089:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2011
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1090:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2016
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1091:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2020
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2024
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1093:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2028
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1094:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2032
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1095:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2036
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1096:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2040
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1097:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2045
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1098:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2052
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1099:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2057
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2064
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1101:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2069
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1102:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2076
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1103:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2081
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2088
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1105:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2095
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1106:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2102
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1107:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2109
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2116
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2120
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2124
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2128
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2132
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlaps"))
			leftList := yyDollar[1].list
			rightList := yyDollar[3].list
			combinedList := ast.NewNodeList()
			combinedList.Items = append(leftList.Items, rightList.Items...)
			yyVAL.node = ast.NewFuncCall(funcName, combinedList, 0)
		}
	case 1113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2141
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_TRUE)
		}
	case 1114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2145
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_TRUE)
		}
	case 1115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2149
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_FALSE)
		}
	case 1116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2153
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_FALSE)
		}
	case 1117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2157
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_UNKNOWN)
		}
	case 1118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2161
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_UNKNOWN)
		}
	case 1119:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2165
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1120:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2170
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1121:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2175
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1122:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2180
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2185
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1124:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2190
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2195
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2200
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2205
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			sublink := ast.NewSubLink(subLinkType, yyDollar[4].stmt)
			sublink.Testexpr = yyDollar[1].node
			sublink.OperName = operName
			yyVAL.node = sublink
		}
	case 1128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2214
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			if subLinkType == ast.ANY_SUBLINK {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ANY, operName, yyDollar[1].node, yyDollar[5].node, 0)
			} else {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ALL, operName, yyDollar[1].node, yyDollar[5].node, 0)
			}
		}
	case 1129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2224
		{
			yylex.Error("UNIQUE predicate is not yet implemented")
		}
	case 1130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2228
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
		}
	case 1131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2233
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2239
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2245
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[3].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2252
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2259
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[4].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2267
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[3].ival)
			uniqueKeys := yyDollar[4].bval
			yyVAL.node = ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
		}
	case 1137:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2284
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[4].ival)
			uniqueKeys := yyDollar[5].bval
			jsonPredicate := ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(jsonPredicate))
		}
	case 1138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2303
		{
			yyVAL.node = ast.NewSetToDefault(0, 0, 0)
		}
	case 1139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2308
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2310
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2314
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2319
		{
			yyVAL.node = doNegate(yyDollar[2].node, 0)
		}
	case 1143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2323
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2328
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2333
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2338
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2343
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2348
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2353
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2358
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2363
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2368
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2373
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2378
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2383
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2387
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1157:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2391
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1158:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2396
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2401
		{
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2406
		{
			args := ast.NewNodeList(yyDollar[1].node)
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2413
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2414
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2416
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2425
		{
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewParenExpr(ast.NewA_Indirection(yyDollar[2].node, yyDollar[4].list, 0), 0)
			} else {
				yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
			}
		}
	case 1165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2432
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2433
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2435
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2439
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2444
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2448
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2452
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2456
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2462
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2468
		{
			exprList := yyDollar[3].list
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     exprList,
			}
			yyVAL.node = grouping
		}
	case 1175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2485
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2486
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2487
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2488
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2489
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2493
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2497
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2501
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2505
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2509
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2513
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2517
		{
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2521
		{
			// This is a bit constant per SQL99
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2526
		{
			// generic type 'literal' syntax
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1189:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2533
		{
			// generic syntax with a type modifier
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			// For now, we'll skip the error checking for NamedArgExpr and ORDER BY
			// TODO: Add proper validation when needed
			typeName.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[6].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2543
		{
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, yyDollar[1].typnam, 0)
		}
	case 1191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2548
		{
			t := yyDollar[1].typnam
			t.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1192:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2555
		{
			t := yyDollar[1].typnam
			// INTERVAL_FULL_RANGE equivalent and precision
			fullRange := ast.NewInteger(ast.INTERVAL_FULL_RANGE)
			precision := ast.NewInteger(yyDollar[3].ival)
			t.Typmods = ast.NewNodeList(fullRange, precision)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[5].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2566
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2569
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2572
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2573
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2574
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2578
		{
			yyVAL.typnam = makeTypeNameFromNodeList(ast.NewNodeList(ast.NewString("interval")))
		}
	case 1199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2585
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR))
		}
	case 1200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2587
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MONTH))
		}
	case 1201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2589
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY))
		}
	case 1202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2591
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR))
		}
	case 1203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2593
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MINUTE))
		}
	case 1204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2595
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2597
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR | ast.INTERVAL_MASK_MONTH))
		}
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2601
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR))
		}
	case 1207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2605
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2609
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2620
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2624
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2635
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1212:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2646
		{
			yyVAL.list = nil
		}
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2651
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_SECOND))
		}
	case 1214:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2655
		{
			yyVAL.list = ast.NewNodeList(
				ast.NewInteger(ast.INTERVAL_MASK_SECOND),
				ast.NewInteger(yyDollar[3].ival), // precision
			)
		}
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2665
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2669
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2679
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2683
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2689
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2690
		{
			yyVAL.node = nil
		}
	case 1221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2694
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2698
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2702
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1224:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2706
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1225:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2711
		{
			yyVAL.list = nil
		}
	case 1226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2713
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1227:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2725
		{
			funcCall := yyDollar[1].node.(*ast.FuncCall)

			// Apply within_group_clause if present
			if yyDollar[2].list != nil {
				// WITHIN GROUP (ORDER BY ...) - store the sort list
				funcCall.AggOrder = yyDollar[2].list
				funcCall.AggWithinGroup = true
			}

			// Apply filter_clause if present
			if yyDollar[3].node != nil {
				// FILTER (WHERE condition) - store the filter expression
				funcCall.AggFilter = yyDollar[3].node
			}

			// Apply over_clause if present (window functions)
			if yyDollar[4].windef != nil {
				funcCall.Over = yyDollar[4].windef
			}

			yyVAL.node = funcCall
		}
	case 1228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2749
		{
			jsonAgg := yyDollar[1].node

			// Create or get the Constructor
			var constructor *ast.JsonAggConstructor

			// Handle the filter_clause and over_clause by setting them in the Constructor
			switch jsonFunc := jsonAgg.(type) {
			case *ast.JsonObjectAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			case *ast.JsonArrayAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			}

			// Set filter and over clauses outside the switch (DRY)
			if constructor != nil {
				if yyDollar[2].node != nil {
					constructor.AggFilter = yyDollar[2].node.(ast.Node)
				}
				if yyDollar[3].windef != nil {
					constructor.Over = yyDollar[3].windef
				}
			}

			yyVAL.node = jsonAgg
		}
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2782
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2788
		{
			// SystemFuncName("pg_collation_for")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("pg_collation_for"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2796
		{
			// makeSQLValueFunction(SVFOP_CURRENT_DATE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_DATE, 0, -1, 0)
		}
	case 1232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2801
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME, 0, -1, 0)
		}
	case 1233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2806
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2811
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP, 0, -1, 0)
		}
	case 1235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2816
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2821
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME, 0, -1, 0)
		}
	case 1237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2826
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2831
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP, 0, -1, 0)
		}
	case 1239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2836
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2841
		{
			// makeSQLValueFunction(SVFOP_CURRENT_ROLE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_ROLE, 0, -1, 0)
		}
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2846
		{
			// makeSQLValueFunction(SVFOP_CURRENT_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_USER, 0, -1, 0)
		}
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2851
		{
			// makeSQLValueFunction(SVFOP_SESSION_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_SESSION_USER, 0, -1, 0)
		}
	case 1243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2856
		{
			// SystemFuncName("system_user")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("system_user"))
			funcCall := ast.NewFuncCall(funcName, nil, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2864
		{
			// makeSQLValueFunction(SVFOP_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_USER, 0, -1, 0)
		}
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2869
		{
			// makeSQLValueFunction(SVFOP_CURRENT_CATALOG, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_CATALOG, 0, -1, 0)
		}
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2874
		{
			// makeSQLValueFunction(SVFOP_CURRENT_SCHEMA, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_SCHEMA, 0, -1, 0)
		}
	case 1247:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2879
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[3].node, yyDollar[5].typnam, 0)
		}
	case 1248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2883
		{
			// SystemFuncName("extract")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("extract"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2891
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1250:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2899
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			args := ast.NewNodeList(yyDollar[3].node)
			args.Items = append(args.Items, ast.NewA_Const(ast.NewString(yyDollar[5].str), -1))
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2909
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2917
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2925
		{
			// SystemFuncName("position")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("position"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2933
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2941
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1256:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2949
		{
			// SystemFuncName("treat")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), llast(yyDollar[5].typnam.Names))
			args := ast.NewNodeList(yyDollar[3].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1257:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2958
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1258:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2966
		{
			// SystemFuncName("ltrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("ltrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1259:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2974
		{
			// SystemFuncName("rtrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("rtrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2982
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1261:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2990
		{
			// makeSimpleA_Expr(AEXPR_NULLIF, "=", $3, $5, @1)
			operName := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NULLIF, operName, yyDollar[3].node, yyDollar[5].node, 0)
		}
	case 1262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2996
		{
			// CoalesceExpr *c = makeNode(CoalesceExpr); c->args = $3; c->location = @1
			yyVAL.node = ast.NewCoalesceExpr(0, yyDollar[3].list)
		}
	case 1263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3001
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_GREATEST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_GREATEST, yyDollar[3].list, 0)
		}
	case 1264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3006
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_LEAST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_LEAST, yyDollar[3].list, 0)
		}
	case 1265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3011
		{
			// makeXmlExpr(IS_XMLCONCAT, NULL, NIL, $3, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLCONCAT, "", nil, nil, yyDollar[3].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1266:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3016
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1267:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3021
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1268:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3026
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, $6, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, yyDollar[6].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1269:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3031
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, $8, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, yyDollar[8].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3036
		{
			// makeXmlExpr(IS_XMLFOREST, NULL, $3, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLFOREST, "", yyDollar[3].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1271:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3041
		{
			// makeXmlExpr(IS_XMLPARSE, NULL, NIL, list_make2($4, makeBoolAConst($5, -1)), @1)
			// x->xmloption = $3
			wsOption := ast.NewA_Const(ast.NewBoolean(yyDollar[5].bval), -1)
			args := ast.NewNodeList(yyDollar[4].node, wsOption)
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPARSE, "", nil, nil, args, xmlOption, false, 0, -1, 0)
		}
	case 1272:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3050
		{
			// SystemFuncName("xmlexists") - xmlexists(A PASSING [BY REF] B [BY REF]) is converted to xmlexists(A, B)
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("xmlexists"))
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[4].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1273:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3059
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1274:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3064
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, list_make1($6), @1)
			args := ast.NewNodeList(yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1275:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3070
		{
			// makeXmlExpr(IS_XMLROOT, NULL, NIL, list_make3(...), @1)
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[5].node, yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLROOT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3076
		{
			/* Support for legacy (non-standard) json_object() */
			funcName := ast.NewNodeList(ast.NewString("json_object"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1277:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3087
		{
			n := ast.NewJsonObjectConstructor(yyDollar[3].list, yyDollar[4].bval, yyDollar[5].bval)
			if yyDollar[6].node != nil {
				n.Output = yyDollar[6].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3095
		{
			n := ast.NewJsonObjectConstructor(nil, false, false)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1279:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3107
		{
			n := ast.NewJsonArrayConstructor(yyDollar[3].list, yyDollar[4].bval)
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1280:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3119
		{
			n := ast.NewJsonArrayQueryConstructor(yyDollar[3].stmt, true) /* XXX: absent_on_null = true */
			if yyDollar[4].node != nil {
				n.Format = yyDollar[4].node.(*ast.JsonFormat)
			}
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3132
		{
			n := ast.NewJsonArrayConstructor(nil, true)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1282:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3140
		{
			n := ast.NewJsonParseExpr(yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[4].bval)
			n.Output = nil
			yyVAL.node = n
		}
	case 1283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3146
		{
			n := ast.NewJsonScalarExpr(yyDollar[3].node.(ast.Expr))
			n.Output = nil
			yyVAL.node = n
		}
	case 1284:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3152
		{
			n := ast.NewJsonSerializeExpr(yyDollar[3].node.(*ast.JsonValueExpr))
			if yyDollar[4].node != nil {
				n.Output = yyDollar[4].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3160
		{
			m := ast.NewMergeSupportFunc(ast.TEXTOID, ast.InvalidOid, 0)
			yyVAL.node = m
		}
	case 1286:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:3171
		{
			n := ast.NewJsonFuncExpr(ast.JSON_QUERY_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			n.Wrapper = ast.JsonWrapper(yyDollar[8].ival)
			n.Quotes = ast.JsonQuotes(yyDollar[9].ival)
			if yyDollar[10].node != nil {
				behaviors := yyDollar[10].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1287:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3196
		{
			n := ast.NewJsonFuncExpr(ast.JSON_EXISTS_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			n.Output = nil
			if yyDollar[7].node != nil {
				n.OnError = yyDollar[7].node.(*ast.JsonBehavior)
			}
			yyVAL.node = n
		}
	case 1288:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3212
		{
			n := ast.NewJsonFuncExpr(ast.JSON_VALUE_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			if yyDollar[8].node != nil {
				behaviors := yyDollar[8].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1289:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3232
		{
			// XmlSerialize node - n->xmloption = $3; n->expr = $4; n->typeName = $6; n->indent = $7;
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlSerialize(xmlOption, yyDollar[4].node, yyDollar[6].typnam, yyDollar[7].bval, 0)
		}
	case 1290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3242
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3246
		{
			yyVAL.list = nil
		}
	case 1292:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3253
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1293:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3257
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3261
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node)
		}
	case 1295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3265
		{
			sysTypeName := &ast.TypeName{
				Names:   ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("int4")),
				Typemod: -1,
			}
			tc := ast.NewTypeCast(yyDollar[3].node, sysTypeName, -1)
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, ast.NewInteger(1), tc)
		}
	case 1296:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3274
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3281
		{
			yyDollar[3].list.Append(yyDollar[1].node)
			yyVAL.list = yyDollar[3].list
		}
	case 1298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3286
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3290
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3297
		{
			// list_make2(makeStringConst($1, @1), $3)
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str), yyDollar[3].node)
		}
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3307
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3308
		{
			yyVAL.str = "year"
		}
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3309
		{
			yyVAL.str = "month"
		}
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3310
		{
			yyVAL.str = "day"
		}
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3311
		{
			yyVAL.str = "hour"
		}
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3312
		{
			yyVAL.str = "minute"
		}
	case 1307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3313
		{
			yyVAL.str = "second"
		}
	case 1308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3314
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1309:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3319
		{
			/* overlay(A PLACING B FROM C FOR D) is converted to overlay(A, B, C, D) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 1310:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3324
		{
			/* overlay(A PLACING B FROM C) is converted to overlay(A, B, C) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3332
		{
			yyVAL.list = ast.NewNodeList(yyDollar[3].node, yyDollar[1].node)
		}
	case 1312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3335
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3340
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3344
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3352
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3356
		{
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3361
		{
			yyVAL.bval = true
		}
	case 1318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3362
		{
			yyVAL.bval = false
		}
	case 1319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3363
		{
			yyVAL.bval = false
		}
	case 1320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3366
		{
			yyVAL.bval = true
		}
	case 1321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3367
		{
			yyVAL.bval = false
		}
	case 1322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3368
		{
			yyVAL.bval = false
		}
	case 1323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3373
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3377
		{
			yyVAL.node = ast.NewA_Const(ast.NewNull(), 0)
		}
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3384
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_YES)), 0)
		}
	case 1326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3388
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO)), 0)
		}
	case 1327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3392
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO_VALUE)), 0)
		}
	case 1328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3396
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_OMITTED)), 0)
		}
	case 1329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3403
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3404
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3405
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3409
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3413
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3424
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1335:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3428
		{
			// Special case for aggregates like COUNT(*) - set AggStar to true
			funcCall := ast.NewFuncCall(yyDollar[1].list, nil, 0)
			funcCall.AggStar = true
			yyVAL.node = funcCall
		}
	case 1336:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3435
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1337:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3441
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1338:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3447
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1339:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3455
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1340:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3461
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3469
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3473
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3480
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3484
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3488
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1346:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3495
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3500
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3501
		{
			yyVAL.node = nil
		}
	case 1349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3505
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3507
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1351:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3515
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3521
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3522
		{
			yyVAL.node = nil
		}
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3527
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3531
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3535
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3540
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3542
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3549
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3550
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1361:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3552
		{
			nodeList := yyDollar[2].list
			nodeList.Append(yyDollar[4].node)
			yyVAL.list = nodeList
		}
	case 1362:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3559
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3560
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1364:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3564
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3570
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3571
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3572
		{
			yyVAL.ival = int(ast.ALL_SUBLINK)
		}
	case 1368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3577
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1369:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3581
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3585
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~"))
		}
	case 1371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3589
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~"))
		}
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3593
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~*"))
		}
	case 1373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3597
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~*"))
		}
	case 1374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3603
		{
			yyVAL.str = "NFC"
		}
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3604
		{
			yyVAL.str = "NFD"
		}
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3605
		{
			yyVAL.str = "NFKC"
		}
	case 1377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3606
		{
			yyVAL.str = "NFKD"
		}
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3610
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3611
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3612
		{
			yyVAL.ival = int(ast.JS_TYPE_ARRAY)
		}
	case 1381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3613
		{
			yyVAL.ival = int(ast.JS_TYPE_OBJECT)
		}
	case 1382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3614
		{
			yyVAL.ival = int(ast.JS_TYPE_SCALAR)
		}
	case 1383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3618
		{
			yyVAL.bval = true
		}
	case 1384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3619
		{
			yyVAL.bval = true
		}
	case 1385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3620
		{
			yyVAL.bval = false
		}
	case 1386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3621
		{
			yyVAL.bval = false
		}
	case 1387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3622
		{
			yyVAL.bval = false
		}
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3627
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3631
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3640
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3645
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3646
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3647
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3648
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3649
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3652
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3653
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3654
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3657
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3660
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3664
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3668
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3675
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3679
		{
			yyVAL.list = nil
		}
	case 1405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3685
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3691
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3702
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3706
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3710
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3714
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3718
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3722
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3726
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3730
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3735
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3740
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3745
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3751
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3755
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3761
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3765
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3771
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3775
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for BitWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3783
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3787
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for CharacterWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3795
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3803
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3811
		{
			yyVAL.str = "varchar"
		}
	case 1429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3815
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3823
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3831
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3841
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3852
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1434:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3866
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3878
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1436:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3890
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3900
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1438:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3910
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3920
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3932
		{
			yyVAL.typnam = makeTypeNameFromString("json")
		}
	case 1441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3937
		{
			yyVAL.ival = 1
		}
	case 1442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3938
		{
			yyVAL.ival = 0
		}
	case 1443:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3939
		{
			yyVAL.ival = 0
		}
	case 1444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3942
		{
			yyVAL.ival = 1
		}
	case 1445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3943
		{
			yyVAL.ival = 0
		}
	case 1446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3947
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3957
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3964
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3968
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3975
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1451:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3979
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3984
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3985
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3988
		{
			yyVAL.str = "+"
		}
	case 1455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3989
		{
			yyVAL.str = "-"
		}
	case 1456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3990
		{
			yyVAL.str = "*"
		}
	case 1457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3991
		{
			yyVAL.str = "/"
		}
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3992
		{
			yyVAL.str = "%"
		}
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3993
		{
			yyVAL.str = "^"
		}
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3994
		{
			yyVAL.str = "<"
		}
	case 1461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3995
		{
			yyVAL.str = ">"
		}
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3996
		{
			yyVAL.str = "="
		}
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3997
		{
			yyVAL.str = "<="
		}
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3998
		{
			yyVAL.str = ">="
		}
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3999
		{
			yyVAL.str = "<>"
		}
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4003
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4007
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4016
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4017
		{
			yyVAL.list = nil
		}
	case 1470:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4022
		{
			// WITHIN GROUP (ORDER BY ...) for ordered-set aggregates
			yyVAL.list = yyDollar[4].list
		}
	case 1471:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4026
		{
			yyVAL.list = nil
		}
	case 1472:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4031
		{
			// FILTER (WHERE condition) for aggregate filtering
			yyVAL.node = yyDollar[4].node
		}
	case 1473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4035
		{
			yyVAL.node = nil
		}
	case 1474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4039
		{
			yyVAL.ival = 0
		}
	case 1475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4040
		{
			yyVAL.ival = 0
		}
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4044
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4049
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4064
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4065
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4069
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4074
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4075
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4084
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4085
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4094
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4096
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			// Use NodeList directly for SortClause
			selectStmt.SortClause = yyDollar[2].list
			yyVAL.stmt = selectStmt
		}
	case 1487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4103
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			selectStmt.LockingClause = yyDollar[3].list // Set the locking clause
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1488:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4115
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			if yyDollar[3].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[3].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[3].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[3].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4127
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4133
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			yyVAL.stmt = selectStmt
		}
	case 1491:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4140
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			if yyDollar[5].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[5].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[5].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[5].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1492:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4153
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[5].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4172
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4173
		{
			yyVAL.list = nil
		}
	case 1495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4177
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4178
		{
			yyVAL.list = nil
		}
	case 1497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4183
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4187
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4195
		{
			lockingClause := &ast.LockingClause{
				BaseNode:   ast.BaseNode{Tag: ast.T_LockingClause},
				Strength:   ast.LockClauseStrength(yyDollar[1].ival),
				LockedRels: yyDollar[2].list, // Store as *NodeList directly
				WaitPolicy: ast.LockWaitPolicy(yyDollar[3].ival),
			}
			yyVAL.node = lockingClause
		}
	case 1500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4207
		{
			yyVAL.ival = int(ast.LCS_FORUPDATE)
		}
	case 1501:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4208
		{
			yyVAL.ival = int(ast.LCS_FORNOKEYUPDATE)
		}
	case 1502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4209
		{
			yyVAL.ival = int(ast.LCS_FORSHARE)
		}
	case 1503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4210
		{
			yyVAL.ival = int(ast.LCS_FORKEYSHARE)
		}
	case 1504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4214
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4215
		{
			yyVAL.list = nil
		}
	case 1506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4220
		{
			yyVAL.ival = int(ast.LockWaitError)
		}
	case 1507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4221
		{
			yyVAL.ival = int(ast.LockWaitSkip)
		}
	case 1508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4222
		{
			yyVAL.ival = int(ast.LockWaitBlock)
		}
	case 1509:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4233
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1510:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4252
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4270
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4280
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4285
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_UNION, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4290
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_INTERSECT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4295
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_EXCEPT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4306
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4307
		{
			yyVAL.list = nil
		}
	case 1518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4311
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4312
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4317
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4321
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4326
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4331
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4342
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4343
		{
			yyVAL.list = nil
		}
	case 1526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4347
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4348
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4357
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4365
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			rangeTableSample := yyDollar[3].node.(*ast.RangeTableSample)
			rangeTableSample.Relation = rangeVar
			yyVAL.node = rangeTableSample
		}
	case 1530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4375
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4386
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4397
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4401
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4407
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			funcAliasList := yyDollar[2].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4425
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			funcAliasList := yyDollar[3].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4444
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4452
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4461
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4469
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4481
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4487
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4494
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4500
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1544:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4506
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4516
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4520
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4526
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4543
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1549:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4547
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1550:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4556
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1551:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4582
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1552:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4608
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4616
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4626
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4627
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4628
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4629
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4634
		{
			yyVAL.ival = 1
		}
	case 1559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4635
		{
			yyVAL.ival = 0
		}
	case 1560:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4645
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4656
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4667
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4671
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4675
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4681
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4682
		{
			yyVAL.with = nil
		}
	case 1567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4687
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4691
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1569:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4699
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4727
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4728
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4729
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1573:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4734
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1574:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4740
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4746
		{
			yyVAL.node = nil
		}
	case 1576:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4753
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1577:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4762
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4770
		{
			yyVAL.node = nil
		}
	case 1579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4781
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = ast.NewNodeList(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1580:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4789
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists.Append(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4803
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4804
		{
			yyVAL.node = nil
		}
	case 1583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4812
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4814
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4818
		{
			yyVAL.node = nil
		}
	case 1586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4822
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4830
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4831
		{
			yyVAL.alias = nil
		}
	case 1589:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4836
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4841
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4845
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4850
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4861
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].alias, nil)
		}
	case 1594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4865
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[3].list)
		}
	case 1595:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4869
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[4].list)
		}
	case 1596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4874
		{
			alias := ast.NewAlias(yyDollar[1].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[3].list)
		}
	case 1597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4879
		{
			yyVAL.list = ast.NewNodeList(nil, nil)
		}
	case 1598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4887
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4891
		{
			yyVAL.alias = nil
		}
	case 1600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4899
		{
			yyVAL.ival = 1
		}
	case 1601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4900
		{
			yyVAL.ival = 0
		}
	case 1602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4904
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1603:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4905
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4909
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4910
		{
			yyVAL.list = nil
		}
	case 1606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4920
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].node.(*ast.RangeVar), nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4923
		{
			yyVAL.into = nil
		}
	case 1608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4934
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1609:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4943
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4953
		{
			yyVAL.ival = 1
		}
	case 1611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4954
		{
			yyVAL.ival = 0
		}
	case 1612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4960
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4964
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4971
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1615:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4980
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1616:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4981
		{
			yyVAL.list = nil
		}
	case 1617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4991
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4995
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5007
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5020
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5021
		{
			yyVAL.list = nil
		}
	case 1622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5027
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5031
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5040
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5051
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5056
		{
			yyVAL.node = nil
		}
	case 1627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5061
		{
			yyVAL.str = "BY REF"
		}
	case 1628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5062
		{
			yyVAL.str = "BY VALUE"
		}
	case 1629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5068
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5072
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5076
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1632:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5080
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5088
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5092
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5100
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5105
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1637:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5114
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1638:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:5122
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5133
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5137
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5146
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5151
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5156
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5166
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5170
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5179
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5183
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5187
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5191
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5195
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1651:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:5208
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5232
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5243
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1654:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5244
		{
			yyVAL.node = nil
		}
	case 1655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5249
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1656:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5250
		{
			yyVAL.node = nil
		}
	case 1657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5254
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5255
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5260
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5266
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5267
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5273
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5277
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5289
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5293
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1666:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5300
		{
			yyVAL.bval = false
		}
	case 1667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5301
		{
			yyVAL.bval = true
		}
	case 1668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5302
		{
			yyVAL.bval = false
		}
	case 1669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5306
		{
			yyVAL.bval = false
		}
	case 1670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5307
		{
			yyVAL.bval = true
		}
	case 1671:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5308
		{
			yyVAL.bval = true
		}
	case 1672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5313
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1673:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5314
		{
			yyVAL.list = nil
		}
	case 1674:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5325
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)

			yyVAL.node = ast.NewJsonObjectAgg(constructor, yyDollar[3].node.(*ast.JsonKeyValue), yyDollar[4].bval, yyDollar[5].bval)
		}
	case 1675:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5340
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)
			constructor.AggOrder = yyDollar[4].list
			yyVAL.node = ast.NewJsonArrayAgg(constructor, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].bval)
		}
	case 1676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5353
		{
			var jsonFormat *ast.JsonFormat
			if yyDollar[3].node != nil {
				jsonFormat = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonOutput(yyDollar[2].typnam, ast.NewJsonReturning(jsonFormat, 0, 0))
		}
	case 1677:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5360
		{
			yyVAL.node = nil
		}
	case 1678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5366
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5374
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5385
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5386
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5387
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5388
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5389
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5390
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5391
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5392
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5397
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5401
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1690:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5405
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1691:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5409
		{
			yyVAL.node = nil
		}
	case 1692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5414
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5415
		{
			yyVAL.node = nil
		}
	case 1694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5420
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5421
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5422
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5423
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1698:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5424
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1699:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5425
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5426
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5427
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1702:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5428
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1703:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5433
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5434
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1705:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5435
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5436
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5437
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1708:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5443
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5463
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5473
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1711:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5474
		{
			yyVAL.node = nil
		}
	case 1712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5479
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1713:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5480
		{
			yyVAL.node = nil
		}
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5486
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5490
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5499
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1717:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5508
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1718:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5522
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1719:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5536
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1720:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5547
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1721:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5556
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5567
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1723:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5568
		{
			yyVAL.node = nil
		}
	case 1724:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5584
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5596
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5600
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5609
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1728:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5615
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1729:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5622
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1730:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5629
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5637
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5646
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5647
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5652
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5656
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1736:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5664
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1737:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5676
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5689
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1739:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5693
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5704
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1741:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5710
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1742:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5730
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5736
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1744:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5737
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1745:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5747
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1746:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5759
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1747:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5763
		{
			yyVAL.list = nil
		}
	case 1748:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5778
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5795
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5799
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1751:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5810
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1752:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:5834
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5870
		{
			yyVAL.ival = 1
		}
	case 1754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5871
		{
			yyVAL.ival = 0
		}
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5875
		{
			yyVAL.ival = 1
		}
	case 1756:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5876
		{
			yyVAL.ival = 0
		}
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5880
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5881
		{
			yyVAL.str = ""
		}
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5882
		{
			yyVAL.str = ""
		}
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5887
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1761:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5890
		{
			yyVAL.node = nil
		}
	case 1762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5895
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1763:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5898
		{
			yyVAL.node = nil
		}
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5902
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5903
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1766:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5908
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1767:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5916
		{
			yyVAL.list = nil
		}
	case 1768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5923
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5927
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5931
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1771:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5935
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5939
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5943
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1774:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5947
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5951
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5955
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1777:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5959
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1778:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5963
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1779:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5967
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1780:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5971
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1781:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5975
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5979
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5987
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1784:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5991
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5998
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6004
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6005
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6006
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6007
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1790:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6008
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1791:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6009
		{
			yyVAL.node = nil
		}
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6014
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1793:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6018
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6024
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6028
		{
			yyVAL.str = "true"
		}
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6029
		{
			yyVAL.str = "false"
		}
	case 1797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6030
		{
			yyVAL.str = "on"
		}
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6031
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6035
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1800:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6036
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1801:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6038
		{
			f := ast.NewFloat(yyDollar[2].str)
			doNegateFloat(f)
			yyVAL.node = f
		}
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6043
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6047
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6048
		{
			yyVAL.node = nil
		}
	case 1805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6052
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6053
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6054
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1808:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6055
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6056
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6057
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6058
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6059
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6063
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6064
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6065
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6069
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6070
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6071
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6072
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6073
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6078
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1822:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6083
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6090
		{
			yyVAL.bval = true
		}
	case 1824:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6091
		{
			yyVAL.bval = false
		}
	case 1825:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6095
		{
			yyVAL.ival = 1
		}
	case 1826:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6096
		{
			yyVAL.ival = 0
		}
	case 1829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6112
		{
			yyVAL.node = nil
		}
	case 1830:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6114
		{
			yyVAL.node = nil
		}
	case 1831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6122
		{
			yyVAL.ival = 1
		}
	case 1832:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6123
		{
			yyVAL.ival = 0
		}
	case 1833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6127
		{
			yyVAL.ival = 1
		}
	case 1834:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6128
		{
			yyVAL.ival = 0
		}
	case 1835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6132
		{
			yyVAL.ival = 1
		}
	case 1836:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6133
		{
			yyVAL.ival = 0
		}
	case 1837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6137
		{
			yyVAL.ival = 1
		}
	case 1838:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6138
		{
			yyVAL.ival = 0
		}
	case 1839:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6147
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1840:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6153
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1841:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6159
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1842:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6165
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1843:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6171
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1844:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6179
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1845:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6180
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1846:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6184
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1847:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6185
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1848:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6189
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1849:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6190
		{
			yyVAL.node = nil
		}
	case 1850:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6195
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6210
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6219
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1853:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6226
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1854:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6233
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1855:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6246
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1856:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6259
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1857:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6268
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1858:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6283
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1859:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6293
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1860:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6301
		{
			yyVAL.onconflict = nil
		}
	case 1861:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6312
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1862:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6321
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1863:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6328
		{
			yyVAL.node = nil
		}
	case 1864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6339
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1865:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6343
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6350
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1867:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6354
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1868:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6361
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1869:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6366
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1870:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6371
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1871:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6379
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1872:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6390
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1873:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6404
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1874:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6405
		{
			yyVAL.list = nil
		}
	case 1875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6409
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6410
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1877:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6411
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1878:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6415
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1879:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6416
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1880:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6417
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1881:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6422
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1882:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6426
		{
			yyVAL.list = nil
		}
	case 1883:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6447
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1884:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:6463
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1885:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:6480
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1886:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:6496
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1887:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6513
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1888:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:6530
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6548
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6549
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1891:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6550
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1892:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6551
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1893:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6552
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1894:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6553
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6554
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1896:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6555
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6559
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1898:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6560
		{
			yyVAL.list = nil
		}
	case 1899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6565
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1900:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6570
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6577
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6578
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6579
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1904:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6584
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1905:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6591
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1906:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6595
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1907:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6599
		{
			yyVAL.ival = 0
		}
	case 1908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6605
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6606
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6607
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6608
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6609
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6610
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6611
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6612
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6613
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6614
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1918:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6619
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1919:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6620
		{
			yyVAL.str = "default"
		}
	case 1920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6624
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1921:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6625
		{
			yyVAL.str = ""
		}
	case 1922:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6629
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6630
		{
			yyVAL.str = "default"
		}
	case 1924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6634
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1925:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6635
		{
			yyVAL.str = ""
		}
	case 1926:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6640
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1927:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6641
		{
			yyVAL.list = nil
		}
	case 1928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6646
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1929:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6652
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6659
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6660
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1932:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6665
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 1933:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6671
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 1934:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6682
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 1935:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6711
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 1936:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6720
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 1937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6730
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 1938:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6739
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 1939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6746
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1940:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6750
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1941:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6758
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1942:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6759
		{
			yyVAL.list = nil
		}
	case 1943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6764
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1944:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6768
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1945:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6776
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6782
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6787
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1948:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6792
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			colDef.Constraints = yyDollar[6].list
			yyVAL.node = colDef
		}
	case 1949:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6804
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1950:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6809
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1951:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6816
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6821
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6822
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1954:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6824
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 1955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6837
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1956:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6842
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1957:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6847
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 1958:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6852
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 1959:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6860
		{
			yyVAL.bval = true
		}
	case 1960:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6861
		{
			yyVAL.bval = false
		}
	case 1961:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6862
		{
			yyVAL.bval = true
		}
	case 1962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6866
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 1963:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6867
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 1964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6872
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1965:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6874
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6879
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1967:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6883
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1968:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6887
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 1969:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6897
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 1970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6903
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1971:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6904
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1972:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6909
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 1973:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6913
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 1974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6917
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 1975:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6921
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 1976:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6925
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 1977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6929
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 1978:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6933
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 1979:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6937
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 1980:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6941
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 1981:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6945
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 1982:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6949
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 1983:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6953
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 1984:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6957
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 1985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6961
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1986:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6965
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6969
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 1988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6975
		{
		}
	case 1989:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6976
		{
		}
	case 1990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6980
		{
		}
	case 1991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6981
		{
		}
	case 1992:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6982
		{
		}
	case 1993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6987
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 1994:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6994
		{
			yyVAL.bval = false
		}
	case 1995:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6998
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1996:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6999
		{
			yyVAL.list = nil
		}
	case 1997:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7004
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 1998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7008
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 1999:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7012
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 2000:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7021
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 2001:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7027
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 2002:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7033
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 2003:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7039
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 2004:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7056
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 2005:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7063
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 2006:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7073
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 2007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7078
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2008:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7083
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 2009:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7091
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2010:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7102
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 2011:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7113
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2012:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7123
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 2013:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7134
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 2014:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7155
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 2015:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7169
		{
			yyVAL.bval = true
		}
	case 2016:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7170
		{
			yyVAL.bval = false
		}
	case 2017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7176
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2018:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7182
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2019:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7190
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 2020:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7195
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 2021:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7203
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2022:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7207
		{
			yyVAL.list = nil
		}
	case 2023:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7214
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 2024:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7218
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 2025:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7222
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2026:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7226
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7233
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7243
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2029:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7253
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 2030:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7260
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2031:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7267
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2032:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7282
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 2033:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7295
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 2034:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7302
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7309
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7316
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2037:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7323
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2038:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7330
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2039:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7339
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2040:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7340
		{
			yyVAL.list = nil
		}
	case 2041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7344
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 2042:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7345
		{
			yyVAL.partspec = nil
		}
	case 2043:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7350
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 2044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7358
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2045:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7363
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2046:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7371
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2047:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7378
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2048:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7385
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 2049:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7394
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2050:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7395
		{
			yyVAL.str = ""
		}
	case 2051:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7399
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 2052:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7400
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 2053:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7401
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 2054:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7402
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 2055:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7406
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2056:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7407
		{
			yyVAL.str = ""
		}
	case 2057:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7411
		{
			yyVAL.str = yyDollar[4].str
		}
	case 2058:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7412
		{
			yyVAL.str = ""
		}
	case 2059:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7416
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2060:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:7429
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 2061:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:7444
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 2062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7460
		{
			yyVAL.bval = true
		}
	case 2063:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7461
		{
			yyVAL.bval = false
		}
	case 2064:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7465
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2065:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7466
		{
			yyVAL.str = "btree"
		}
	case 2066:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7470
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2067:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7471
		{
			yyVAL.list = nil
		}
	case 2068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7476
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2069:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7481
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2070:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7489
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2071:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7490
		{
			yyVAL.list = nil
		}
	case 2072:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7502
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2073:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7508
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2074:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7515
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2075:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7521
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2076:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7528
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2077:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7537
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 2078:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7543
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2079:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7550
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 2080:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7556
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2081:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7563
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 2082:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7569
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2083:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7576
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2084:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7582
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2085:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7589
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2086:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7598
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2087:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7608
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2088:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7615
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2089:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7623
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2090:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7630
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2091:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7638
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 2092:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:7645
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 2093:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7656
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2094:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7661
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2095:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7669
		{
			yyVAL.bval = true
		}
	case 2096:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7670
		{
			yyVAL.bval = false
		}
	case 2097:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7675
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].rolespec)
		}
	case 2098:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7680
		{
			yyDollar[1].list.Append(yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 2099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7688
		{
			roleSpec := yyDollar[1].rolespec

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 2100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7719
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.rolespec = roleSpec
		}
	case 2101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7742
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 2102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7749
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 2103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7756
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 2104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7767
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2105:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7774
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7781
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2107:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7788
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7795
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 2109:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7800
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 2110:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7805
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 2111:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7810
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 2112:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7815
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 2113:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7820
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2114:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7827
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 2115:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7832
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 2116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7839
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2117:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7844
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2118:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7849
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2119:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7854
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2120:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7859
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7869
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 2122:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7874
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2123:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7881
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2124:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7888
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7896
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2126:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7907
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 2127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7917
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 2128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7922
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 2129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7927
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7938
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 2131:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7943
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7951
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7959
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 2134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7964
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 2135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7969
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 2136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7974
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 2137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7979
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 2138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7984
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 2139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7989
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 2140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7994
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 2141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7999
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 2142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8004
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 2143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8009
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 2144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8014
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 2145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8019
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 2146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8024
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 2147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8029
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 2148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8034
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 2149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8039
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 2150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8044
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 2151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8049
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 2152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8054
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 2153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8060
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 2154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8065
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].rolespec
			yyVAL.node = cmd
		}
	case 2155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8072
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 2156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8077
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 2157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8082
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 2158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8087
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 2159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8092
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 2160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8097
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 2161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8102
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 2162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8107
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 2163:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8112
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 2164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8116
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 2165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8124
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8132
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8139
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8150
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8159
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8160
		{
			yyVAL.node = nil
		}
	case 2171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8164
		{
		}
	case 2172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8165
		{
		}
	case 2173:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8176
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8189
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2175:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8202
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8215
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2177:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8228
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2178:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8243
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8258
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2180:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8271
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2181:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8284
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2182:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8297
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2183:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8310
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2184:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8323
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8339
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8345
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 2187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8351
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8360
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 2189:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8364
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 2190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8367
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8371
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8373
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 2193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8377
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 2194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8381
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 2195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8388
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 2196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8392
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 2197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8398
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8399
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8403
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 2200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8408
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 2201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8409
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 2202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8410
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 2203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8411
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 2204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8412
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 2205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8413
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 2206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8414
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 2207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8415
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 2208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8416
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 2209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8417
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 2210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8418
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 2211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8419
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 2212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8420
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 2213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8433
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8434
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8439
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8443
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8451
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode: ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:  yyDollar[1].list,
				Objargs:  yyDollar[2].list,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8463
		{
			yylex.Error("Use NONE to denote the missing argument of a unary operator.")
			return 1
		}
	case 2219:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8468
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, yyDollar[4].typnam)
		}
	case 2220:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8470
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[4].typnam)
		}
	case 2221:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8472
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, nil)
		}
	case 2222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8476
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8489
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 2224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8491
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 2225:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8495
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2226:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8506
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2227:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8517
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2228:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8528
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2229:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8539
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2230:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8550
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2231:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8562
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2232:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8573
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2233:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8584
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2234:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8595
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2235:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8606
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2236:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8623
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2237:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8640
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2238:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8652
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2239:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8664
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2240:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8675
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2241:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8686
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2242:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8697
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2243:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8708
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2244:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8719
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2245:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8730
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2246:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8741
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2247:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8752
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2248:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8763
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2249:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8774
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2250:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8785
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2251:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8796
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2252:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8807
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2253:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8818
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2254:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8829
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2255:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8840
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2256:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8851
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2257:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8862
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2258:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8875
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2259:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8888
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2260:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8901
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2261:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8914
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2262:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8927
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2263:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8940
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2264:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8952
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2265:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8964
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2266:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8977
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2267:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8990
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2268:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9002
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2269:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9014
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2270:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9025
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2271:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9036
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2272:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9047
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2273:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9058
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2274:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9069
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2275:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9080
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2276:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9091
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2277:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9102
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2278:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9113
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2279:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9124
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2280:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9150
		{
			yyVAL.ival = 0
		}
	case 2281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9152
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 2282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9166
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 2283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9167
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 2284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9168
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 2285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9169
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 2286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9170
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 2287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9171
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 2288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9175
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9180
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9185
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9193
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9197
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2293:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9201
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 2294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9205
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 2295:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9219
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 2296:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:9233
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 2297:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9249
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2298:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9264
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9279
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9280
		{
			yyVAL.list = nil
		}
	case 2301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9285
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9289
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9297
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9301
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9306
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9314
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9323
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9332
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9341
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9350
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9361
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9362
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9363
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9364
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9365
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9369
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9373
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2318:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9375
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				// TODO: Add %TYPE indicator
			}
		}
	case 2319:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9385
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				Setof: true,
			}
		}
	case 2320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9397
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9398
		{
			yyVAL.list = nil
		}
	case 2322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9403
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9409
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9417
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9421
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9425
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9429
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9433
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9440
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9446
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9456
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2332:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9462
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9470
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2334:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9474
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9486
		{
			yyVAL.node = nil
		}
	case 2336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9493
		{
			yyVAL.stmt = &ast.ReturnStmt{
				ReturnVal: yyDollar[2].node,
			}
		}
	case 2337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9502
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9512
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9518
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9519
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9524
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9528
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2343:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:9544
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2344:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:9576
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9607
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9608
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9609
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9614
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9616
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9656
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9663
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9670
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9677
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9684
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9693
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9694
		{
			yyVAL.list = nil
		}
	case 2357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9698
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9703
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9711
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9722
		{
			yyVAL.bval = true
		}
	case 2361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9723
		{
			yyVAL.bval = false
		}
	case 2362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9727
		{
			yyVAL.bval = true
		}
	case 2363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9728
		{
			yyVAL.bval = false
		}
	case 2364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9732
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9737
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9741
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9753
		{
			yyVAL.bval = true
		}
	case 2370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9754
		{
			yyVAL.bval = false
		}
	case 2371:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9758
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9759
		{
			yyVAL.node = nil
		}
	case 2375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9768
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9773
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9777
		{
			yyVAL.list = nil
		}
	case 2378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9782
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9785
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9786
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9787
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9791
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9792
		{
			yyVAL.rangevar = nil
		}
	case 2384:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9805
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2385:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9821
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2386:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:9837
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2387:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:9853
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9870
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9871
		{
			yyVAL.list = nil
		}
	case 2390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9875
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2391:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9876
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2392:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9877
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9878
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2394:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9889
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = yyDollar[5].rolespec
			n.SchemaElts = yyDollar[6].list
			yyVAL.stmt = n
		}
	case 2395:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9896
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = nil
			n.SchemaElts = yyDollar[4].list
			yyVAL.stmt = n
		}
	case 2396:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9903
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = yyDollar[8].rolespec
			n.SchemaElts = yyDollar[9].list
			yyVAL.stmt = n
		}
	case 2397:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9910
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = nil
			n.SchemaElts = yyDollar[7].list
			yyVAL.stmt = n
		}
	case 2398:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9926
		{
			n := ast.NewCreateDomainStmt(yyDollar[3].list, yyDollar[5].typnam)
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			n.Constraints = constraints
			n.CollClause = collClause
			yyVAL.stmt = n
		}
	case 2399:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9944
		{
			n := ast.NewAlterDomainStmt('T', yyDollar[3].list)
			n.Def = yyDollar[4].node
			yyVAL.stmt = n
		}
	case 2400:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9950
		{
			n := ast.NewAlterDomainStmt('N', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2401:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9955
		{
			n := ast.NewAlterDomainStmt('O', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2402:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9960
		{
			n := ast.NewAlterDomainStmt('C', yyDollar[3].list)
			n.Def = yyDollar[5].node
			yyVAL.stmt = n
		}
	case 2403:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9966
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[6].str
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			yyVAL.stmt = n
		}
	case 2404:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9974
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[8].str
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			yyVAL.stmt = n
		}
	case 2405:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9982
		{
			n := ast.NewAlterDomainStmt('V', yyDollar[3].list)
			n.Name = yyDollar[6].str
			yyVAL.stmt = n
		}
	case 2406:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9997
		{
			// Extract actual arguments from aggr_args which returns [args, position_indicator]
			var args *ast.NodeList
			if yyDollar[5].list != nil && yyDollar[5].list.Len() > 0 {
				// First element contains the actual arguments (or nil for *)
				if firstElem, ok := yyDollar[5].list.Items[0].(*ast.NodeList); ok {
					args = firstElem
				} else if yyDollar[5].list.Items[0] == nil {
					// Special case for COUNT(*) - create a list with a single nil element
					args = ast.NewNodeList(nil)
				}
			}
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, false, yyDollar[4].list, args, yyDollar[6].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2407:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10013
		{
			// old-style (pre-8.2) syntax for CREATE AGGREGATE
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, true, yyDollar[4].list, nil, yyDollar[5].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2408:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10019
		{
			n := ast.NewDefineStmt(ast.OBJECT_OPERATOR, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2409:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10024
		{
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10029
		{
			// Shell type (identified by lack of definition)
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, nil, false, false)
			yyVAL.stmt = n
		}
	case 2411:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10035
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSPARSER, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2412:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10040
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSDICTIONARY, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2413:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10045
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSTEMPLATE, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2414:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10050
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSCONFIGURATION, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10055
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2416:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10060
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, yyDollar[7].list, true, false)
			yyVAL.stmt = n
		}
	case 2417:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10065
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, ast.NewNodeList(yyDollar[5].list), false, false)
			yyVAL.stmt = n
		}
	case 2418:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10070
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, ast.NewNodeList(yyDollar[8].list), true, false)
			yyVAL.stmt = n
		}
	case 2419:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10075
		{
			typevar, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(fmt.Sprintf("invalid type name: %v", err))
				return 1
			}

			n := ast.NewCompositeTypeStmt(typevar, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2420:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10086
		{
			n := ast.NewCreateEnumStmt(yyDollar[3].list, yyDollar[7].list)
			yyVAL.stmt = n
		}
	case 2421:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10091
		{
			n := ast.NewCreateRangeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2422:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10105
		{
			n := ast.NewCreateSeqStmt(yyDollar[4].rangevar, yyDollar[5].list, 0, false, false)
			yyVAL.stmt = n
		}
	case 2423:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10110
		{
			n := ast.NewCreateSeqStmt(yyDollar[7].rangevar, yyDollar[8].list, 0, false, true)
			yyVAL.stmt = n
		}
	case 2424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10117
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10118
		{
			yyVAL.list = nil
		}
	case 2426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10121
		{
		}
	case 2427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10122
		{
		}
	case 2428:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10133
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[3].rangevar, yyDollar[4].list, false, false)
		}
	case 2429:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10137
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[5].rangevar, yyDollar[6].list, false, true)
		}
	case 2430:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10150
		{
			n := ast.NewCreateExtensionStmt(yyDollar[3].str, false, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2431:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10155
		{
			n := ast.NewCreateExtensionStmt(yyDollar[6].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10163
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10172
		{
			yyVAL.list = nil
		}
	case 2434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10179
		{
			yyVAL.defelt = ast.NewDefElem("schema", ast.NewString(yyDollar[2].str))
		}
	case 2435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10183
		{
			yyVAL.defelt = ast.NewDefElem("version", ast.NewString(yyDollar[2].str))
		}
	case 2436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10187
		{
			yylex.Error("CREATE EXTENSION ... FROM is no longer supported")
			return 1
		}
	case 2437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10192
		{
			yyVAL.defelt = ast.NewDefElem("cascade", ast.NewBoolean(true))
		}
	case 2438:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10205
		{
			n := ast.NewAlterExtensionStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10213
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10222
		{
			yyVAL.list = nil
		}
	case 2441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10229
		{
			yyVAL.defelt = ast.NewDefElem("to", ast.NewString(yyDollar[2].str))
		}
	case 2442:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10242
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), ast.NewString(yyDollar[6].str))
		}
	case 2443:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10246
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), yyDollar[6].list)
		}
	case 2444:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10250
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_AGGREGATE), yyDollar[6].objwithargs)
		}
	case 2445:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10254
		{
			// CAST takes two TypeNames as a NodeList
			list := ast.NewNodeList(yyDollar[7].typnam)
			list.Append(yyDollar[9].typnam)
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_CAST), list)
		}
	case 2446:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10261
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_DOMAIN), yyDollar[6].typnam)
		}
	case 2447:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10265
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_FUNCTION), yyDollar[6].objwithargs)
		}
	case 2448:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10269
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPERATOR), yyDollar[6].objwithargs)
		}
	case 2449:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10273
		{
			// OPERATOR CLASS takes method name + class name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then class name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPCLASS), list)
		}
	case 2450:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10282
		{
			// OPERATOR FAMILY takes method name + family name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then family name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPFAMILY), list)
		}
	case 2451:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10291
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_PROCEDURE), yyDollar[6].objwithargs)
		}
	case 2452:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10295
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_ROUTINE), yyDollar[6].objwithargs)
		}
	case 2453:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10299
		{
			list := ast.NewNodeList(yyDollar[7].typnam, ast.NewString(yyDollar[9].str))
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TRANSFORM), list)
		}
	case 2454:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10304
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TYPE), yyDollar[6].typnam)
		}
	case 2455:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10316
		{
			yyVAL.stmt = ast.NewCreateFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2456:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10322
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2457:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10326
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, nil)
		}
	case 2458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10332
		{
			yyVAL.defelt = ast.NewDefElem("handler", yyDollar[2].list)
		}
	case 2459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10333
		{
			yyVAL.defelt = ast.NewDefElem("handler", nil)
		}
	case 2460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10334
		{
			yyVAL.defelt = ast.NewDefElem("validator", yyDollar[2].list)
		}
	case 2461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10335
		{
			yyVAL.defelt = ast.NewDefElem("validator", nil)
		}
	case 2462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10339
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10340
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10344
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10345
		{
			yyVAL.list = nil
		}
	case 2466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10349
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10350
		{
			result := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				result.Append(item)
			}
			yyVAL.list = result
		}
	case 2468:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10367
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].str, yyDollar[9].str, yyDollar[10].list, false)
		}
	case 2469:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:10372
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[6].str, yyDollar[7].str, yyDollar[8].str, yyDollar[12].str, yyDollar[13].list, true)
		}
	case 2470:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10378
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].list, true)
		}
	case 2471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10382
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, nil, true)
		}
	case 2472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10386
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, "", yyDollar[4].list, false)
		}
	case 2473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10392
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10393
		{
			yyVAL.str = ""
		}
	case 2475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10397
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10398
		{
			yyVAL.str = ""
		}
	case 2477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10402
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10403
		{
			yyVAL.str = ""
		}
	case 2479:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10416
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[6].list, yyDollar[8].list, yyDollar[10].str, yyDollar[11].list, nil, false)
		}
	case 2480:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:10422
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[9].list, yyDollar[11].list, yyDollar[13].str, yyDollar[14].list, nil, true)
		}
	case 2481:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:10428
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[8].list, ast.NewNodeList(yyDollar[7].rangevar), yyDollar[11].str, yyDollar[12].list, yyDollar[9].partboundspec, false)
		}
	case 2482:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:10434
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[11].list, ast.NewNodeList(yyDollar[10].rangevar), yyDollar[14].str, yyDollar[15].list, yyDollar[12].partboundspec, true)
		}
	case 2483:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10446
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list, false)
		}
	case 2484:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10450
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[8].rolespec, yyDollar[10].str, yyDollar[11].list, true)
		}
	case 2485:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10456
		{
			yyVAL.stmt = ast.NewAlterUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list)
		}
	case 2486:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10462
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, false)
		}
	case 2487:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10466
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[7].rolespec, yyDollar[9].str, true)
		}
	case 2488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10472
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10473
		{
			yyVAL.rolespec = ast.NewRoleSpec(ast.ROLESPEC_CURRENT_USER, "")
		}
	case 2490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10478
		{
			// For aggregates like COUNT(*)
			// Return a list with [nil, -1] matching PostgreSQL's list_make2(NIL, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(nil, ast.NewInteger(-1))
		}
	case 2491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10484
		{
			// Regular aggregate arguments
			// Return a list with [args, -1] matching PostgreSQL's list_make2($2, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(yyDollar[2].list, ast.NewInteger(-1))
		}
	case 2492:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10490
		{
			// Ordered-set aggregate without direct arguments
			// Return a list with [args, 0] matching PostgreSQL's list_make2($4, makeInteger(0))
			yyVAL.list = ast.NewNodeList(yyDollar[4].list, ast.NewInteger(0))
		}
	case 2493:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10496
		{
			// Hypothetical-set aggregate
			// This is the only case requiring consistency checking in PostgreSQL
			result, err := makeOrderedSetArgs(yyDollar[2].list, yyDollar[5].list)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.list = result
		}
	case 2494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10510
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10514
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10522
		{
			yyVAL.node = yyDollar[1].funparam
		}
	case 2497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10529
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10536
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10540
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10548
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2501:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10555
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			n.NewValIsAfter = true
			yyVAL.stmt = n
		}
	case 2502:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10563
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = false
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2503:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10572
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = true
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2504:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10581
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.OldVal = yyDollar[6].str
			n.NewVal = yyDollar[8].str
			n.SkipIfNewValExists = false
			yyVAL.stmt = n
		}
	case 2505:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10589
		{
			// Following PostgreSQL's approach - DROP VALUE is parsed but not implemented
			// PostgreSQL throws an error saying "dropping an enum value is not implemented"
			yylex.Error("dropping an enum value is not implemented")
			return 1
		}
	case 2506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10605
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10607
		{
			yyVAL.list = nil
		}
	case 2508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10612
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10614
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10619
		{
			if constraint, ok := yyDollar[3].node.(*ast.Constraint); ok {
				constraint.Conname = yyDollar[2].str
				yyVAL.node = constraint
			} else {
				yyVAL.node = yyDollar[3].node
			}
		}
	case 2511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10628
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2512:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10633
		{
			n := ast.NewConstraint(ast.CONSTR_CHECK)
			n.RawExpr = yyDollar[3].node
			n.CookedExpr = "" // Empty string, not nil
			// Process constraint attributes from $5
			processConstraintAttributeSpec(yyDollar[5].ival, n)
			// PostgreSQL: n->initially_valid = !n->skip_validation
			n.InitiallyValid = !n.SkipValidation
			yyVAL.node = n
		}
	case 2513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10644
		{
			n := ast.NewConstraint(ast.CONSTR_NOTNULL)
			// In PostgreSQL, domain NOT NULL constraints have keys = list_make1(makeString("value"))
			n.Keys = ast.NewNodeList(ast.NewString("value"))
			// Process constraint attributes from $3
			processConstraintAttributeSpec(yyDollar[3].ival, n)
			// PostgreSQL sets initially_valid = true for NOT NULL (no NOT VALID support yet)
			n.InitiallyValid = true
			yyVAL.node = n
		}
	case 2514:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10664
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[7].stmt, yyDollar[5].into, ast.OBJECT_MATVIEW, false, false)
			/* cram additional flags into the IntoClause */
			yyDollar[5].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[5].into.SkipData = !yyDollar[8].bval
			yyVAL.stmt = ctas
		}
	case 2515:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10672
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[10].stmt, yyDollar[8].into, ast.OBJECT_MATVIEW, false, true)
			/* cram additional flags into the IntoClause */
			yyDollar[8].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[8].into.SkipData = !yyDollar[11].bval
			yyVAL.stmt = ctas
		}
	case 2516:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10683
		{
			n := ast.NewRefreshMatViewStmt(yyDollar[4].bval, !yyDollar[6].bval, yyDollar[5].rangevar)
			yyVAL.stmt = n
		}
	case 2517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10689
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 2518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10690
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 2519:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10695
		{
			yyVAL.into = &ast.IntoClause{
				Rel:            yyDollar[1].rangevar,
				ColNames:       yyDollar[2].list,
				AccessMethod:   yyDollar[3].str,
				Options:        yyDollar[4].list,
				TableSpaceName: yyDollar[5].str,
			}
		}
	case 2520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10707
		{
			yyVAL.bval = true
		}
	case 2521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10708
		{
			yyVAL.bval = false
		}
	case 2522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10709
		{
			yyVAL.bval = true
		}
	case 2523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10714
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].stmt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10723
		{
			yyVAL.list = nil
		}
	case 2529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10734
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10736
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10740
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10745
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10750
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10755
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10763
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10768
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10773
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10777
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10788
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10796
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10800
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10804
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10808
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10815
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10819
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10826
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10832
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10839
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10840
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10844
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10845
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10846
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10847
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10848
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10849
		{
			yyVAL.node = ast.NewString("true")
		}
	case 2556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10850
		{
			yyVAL.node = ast.NewString("false")
		}
	case 2557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10851
		{
			yyVAL.node = ast.NewString("on")
		}
	case 2558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10852
		{
			yyVAL.node = ast.NewString("off")
		}
	case 2559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10856
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10857
		{
			yyVAL.str = "default"
		}
	case 2561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10858
		{
			yyVAL.str = ""
		}
	case 2562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10862
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10863
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10867
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10868
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10869
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10870
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10874
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10875
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10880
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10886
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10891
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10899
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10903
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10907
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10911
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10915
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10921
		{
			yyVAL.str = "read uncommitted"
		}
	case 2579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10922
		{
			yyVAL.str = "read committed"
		}
	case 2580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10923
		{
			yyVAL.str = "repeatable read"
		}
	case 2581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10924
		{
			yyVAL.str = "serializable"
		}
	case 2582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10928
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10929
		{
			yyVAL.list = nil
		}
	case 2584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10933
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10934
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10935
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10938
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10939
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10940
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10944
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10945
		{
			yyVAL.list = nil
		}
	case 2592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10949
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10950
		{
			yyVAL.node = nil
		}
	case 2594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10954
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10959
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10964
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10972
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10976
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10982
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10988
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10994
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10995
		{
			yyVAL.str = ""
		}
	case 2603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10999
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11000
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11001
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11002
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11006
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11011
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11016
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11023
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11024
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2612:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11035
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[9].list, nil)
		}
	case 2613:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11039
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[11].list, yyDollar[8].list)
		}
	case 2614:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11045
		{
			yyVAL.stmt = ast.NewAlterEventTrigStmt(yyDollar[4].str, ast.TriggerFires(yyDollar[5].ival))
		}
	case 2615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11051
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_ORIGIN)
		}
	case 2616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11052
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_REPLICA)
		}
	case 2617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11053
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ALWAYS)
		}
	case 2618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11054
		{
			yyVAL.ival = int(ast.TRIGGER_DISABLED)
		}
	case 2619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11059
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11064
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2621:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11072
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[4].list)
		}
	case 2622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11079
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(ast.NewString(yyDollar[1].str))
		}
	case 2623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11084
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2624:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11098
		{
			yyVAL.stmt = ast.NewCreateTableSpaceStmt(yyDollar[3].str, yyDollar[4].rolespec, yyDollar[6].str, yyDollar[7].list)
		}
	case 2625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11104
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 2626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11105
		{
			yyVAL.rolespec = nil
		}
	case 2627:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11110
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, false)
		}
	case 2628:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11114
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, true)
		}
	case 2629:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11129
		{
			yyVAL.stmt = ast.NewCreatePolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].bval, yyDollar[7].str, yyDollar[8].list, yyDollar[9].node, yyDollar[10].node)
		}
	case 2630:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11137
		{
			yyVAL.stmt = ast.NewAlterPolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].list, yyDollar[7].node, yyDollar[8].node)
		}
	case 2631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11144
		{
			// Check for "permissive" or "restrictive" (case-insensitive)
			if strings.EqualFold(yyDollar[2].str, "permissive") {
				yyVAL.bval = true
			} else if strings.EqualFold(yyDollar[2].str, "restrictive") {
				yyVAL.bval = false
			} else {
				// Parser will error on invalid value
				yylex.Error("unrecognized row security option")
				return 1
			}
		}
	case 2632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11156
		{
			yyVAL.bval = true
		}
	case 2633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11160
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11161
		{
			yyVAL.str = "all"
		}
	case 2635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11165
		{
			yyVAL.str = "all"
		}
	case 2636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11166
		{
			yyVAL.str = "select"
		}
	case 2637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11167
		{
			yyVAL.str = "insert"
		}
	case 2638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11168
		{
			yyVAL.str = "update"
		}
	case 2639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11169
		{
			yyVAL.str = "delete"
		}
	case 2640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11173
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11174
		{
			// Default to PUBLIC when no TO clause is specified
			publicRole := ast.NewRoleSpec(ast.ROLESPEC_PUBLIC, "")
			yyVAL.list = ast.NewNodeList(publicRole)
		}
	case 2642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11182
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11183
		{
			yyVAL.list = nil
		}
	case 2644:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11187
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11188
		{
			yyVAL.node = nil
		}
	case 2646:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11192
		{
			yyVAL.node = yyDollar[4].node
		}
	case 2647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11193
		{
			yyVAL.node = nil
		}
	case 2648:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11204
		{
			yyVAL.stmt = ast.NewCreateAmStmt(yyDollar[4].str, ast.AmType(yyDollar[6].ival), yyDollar[8].list)
		}
	case 2649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11210
		{
			yyVAL.ival = int(ast.AMTYPE_INDEX)
		}
	case 2650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11211
		{
			yyVAL.ival = int(ast.AMTYPE_TABLE)
		}
	case 2651:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11222
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[3].list, yyDollar[4].list, yyDollar[6].list, yyDollar[8].list, "", false, false)
		}
	case 2652:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11226
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[6].list, yyDollar[7].list, yyDollar[9].list, yyDollar[11].list, "", false, true)
		}
	case 2653:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11233
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[3].list, yyDollar[6].node, false)
		}
	case 2654:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11237
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[5].list, yyDollar[8].node, true)
		}
	case 2655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11243
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].statelem)
		}
	case 2656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11244
		{
			yyDollar[1].list.Append(yyDollar[3].statelem)
			yyVAL.list = yyDollar[1].list
		}
	case 2657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11248
		{
			yyVAL.statelem = ast.NewStatsElem(yyDollar[1].str)
		}
	case 2658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11249
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[1].node)
		}
	case 2659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11250
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[2].node)
		}
	case 2660:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11261
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, false, yyDollar[4].list)
		}
	case 2661:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11265
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, true, yyDollar[7].list)
		}
	case 2662:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11269
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, yyDollar[5].list, false, yyDollar[6].list)
		}
	case 2663:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11276
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, yyDollar[5].list, nil, ast.AP_SetOptions)
		}
	case 2664:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11280
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_AddObjects)
		}
	case 2665:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11284
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_SetObjects)
		}
	case 2666:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11288
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_DropObjects)
		}
	case 2667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11294
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11295
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2669:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11300
		{
			pubTable := ast.NewPublicationTable(yyDollar[2].rangevar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_TABLE, pubTable)
		}
	case 2670:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11305
		{
			yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_TABLES_IN_SCHEMA, yyDollar[4].str)
		}
	case 2671:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11309
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA)
		}
	case 2672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11313
		{
			// If either a row filter or column list is specified, create a PublicationTable object
			if yyDollar[2].list != nil || yyDollar[3].node != nil {
				// Create a simple RangeVar from the ColId
				rangeVar := ast.NewRangeVar(yyDollar[1].str, "", "")
				pubTable := ast.NewPublicationTable(rangeVar, yyDollar[3].node, yyDollar[2].list)
				yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
			} else {
				yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_CONTINUATION, yyDollar[1].str)
			}
		}
	case 2673:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11325
		{
			rangeVar := makeRangeVarFromQualifiedName(yyDollar[1].str, yyDollar[2].list, -1)
			pubTable := ast.NewPublicationTable(rangeVar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11331
		{
			pubTable := ast.NewPublicationTable(yyDollar[1].rangevar, yyDollar[3].node, yyDollar[2].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11336
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_CONTINUATION)
		}
	case 2676:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11342
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2677:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11343
		{
			yyVAL.node = nil
		}
	case 2678:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11354
		{
			yyVAL.stmt = ast.NewCreateSubscriptionStmt(yyDollar[3].str, yyDollar[5].str, yyDollar[7].list, yyDollar[8].list)
		}
	case 2679:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11361
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_OPTIONS, "", nil, yyDollar[5].list)
		}
	case 2680:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11365
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_CONNECTION, yyDollar[5].str, nil, nil)
		}
	case 2681:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11369
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_REFRESH, "", nil, yyDollar[6].list)
		}
	case 2682:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11373
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ADD_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2683:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11377
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_DROP_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2684:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11381
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SET_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2685:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11385
		{
			enableOpt := ast.NewNodeList()
			enableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(true)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, enableOpt)
		}
	case 2686:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11391
		{
			disableOpt := ast.NewNodeList()
			disableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(false)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, disableOpt)
		}
	case 2687:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11397
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SKIP, "", nil, yyDollar[5].list)
		}
	case 2688:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11410
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, yyDollar[10].objwithargs, ast.CoercionContext(yyDollar[11].ival), false)
		}
	case 2689:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11414
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), false)
		}
	case 2690:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11418
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), true)
		}
	case 2691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11424
		{
			yyVAL.ival = int(ast.COERCION_IMPLICIT)
		}
	case 2692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11425
		{
			yyVAL.ival = int(ast.COERCION_ASSIGNMENT)
		}
	case 2693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11426
		{
			yyVAL.ival = int(ast.COERCION_EXPLICIT)
		}
	case 2694:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11438
		{
			yyVAL.stmt = ast.NewCreateOpClassStmt(yyDollar[4].list, yyDollar[11].list, yyDollar[10].str, yyDollar[8].typnam, yyDollar[13].list, yyDollar[5].bval)
		}
	case 2695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11444
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2696:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11445
		{
			yyVAL.list = nil
		}
	case 2697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11449
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11450
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2699:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11455
		{
			// Create ObjectWithArgs for simple operator
			owa := ast.NewObjectWithArgs(yyDollar[3].list, nil, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, yyDollar[4].list)
		}
	case 2700:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11461
		{
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, yyDollar[3].objwithargs, yyDollar[4].list)
		}
	case 2701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11465
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[3].objwithargs, nil)
		}
	case 2702:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11469
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[6].objwithargs, yyDollar[4].list)
		}
	case 2703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11473
		{
			yyVAL.node = ast.NewOpClassItemStorage(yyDollar[2].typnam)
		}
	case 2704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11479
		{
			yyVAL.bval = true
		}
	case 2705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11480
		{
			yyVAL.bval = false
		}
	case 2706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11484
		{
			yyVAL.list = nil
		}
	case 2707:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11485
		{
			yyVAL.list = yyDollar[4].list
		}
	case 2708:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11486
		{
			yyVAL.list = nil
		}
	case 2709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11490
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].typnam)
		}
	case 2710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11491
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2711:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11502
		{
			yyVAL.stmt = ast.NewCreateOpFamilyStmt(yyDollar[4].list, yyDollar[6].str)
		}
	case 2712:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11515
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, false, yyDollar[8].list)
		}
	case 2713:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11519
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, true, yyDollar[8].list)
		}
	case 2714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11525
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11526
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2716:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11531
		{
			// Create ObjectWithArgs for operator with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, nil)
		}
	case 2717:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11537
		{
			// Create ObjectWithArgs for function with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, owa, nil)
		}
	case 2718:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11552
		{
			yyVAL.stmt = ast.NewCreateConversionStmt(yyDollar[4].list, yyDollar[6].str, yyDollar[8].str, yyDollar[10].list, yyDollar[2].bval)
		}
	case 2719:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11565
		{
			yyVAL.stmt = ast.NewCreateTransformStmt(yyDollar[2].bval, yyDollar[5].typnam, yyDollar[7].str, linitial(yyDollar[9].list), lsecond(yyDollar[9].list))
		}
	case 2720:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11572
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs)  // fromsql
			yyVAL.list.Append(yyDollar[11].objwithargs) // tosql
		}
	case 2721:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11578
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[11].objwithargs) // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs)  // tosql
		}
	case 2722:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11584
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs) // fromsql
			yyVAL.list.Append(nil)                     // tosql
		}
	case 2723:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11590
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(nil)                     // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs) // tosql
		}
	case 2724:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11605
		{
			// Parameterless CREATE LANGUAGE is now treated as CREATE EXTENSION
			yyVAL.stmt = ast.NewCreateExtensionStmt(yyDollar[6].str, yyDollar[2].bval, nil)
		}
	case 2725:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11611
		{
			yyVAL.stmt = ast.NewCreatePLangStmt(yyDollar[2].bval, yyDollar[6].str, yyDollar[8].list, yyDollar[9].list, yyDollar[10].list, yyDollar[3].bval)
		}
	case 2726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11617
		{
			yyVAL.bval = true
		}
	case 2727:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11618
		{
			yyVAL.bval = false
		}
	case 2728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11623
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2729:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11624
		{
			yyVAL.list = nil
		}
	case 2730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11628
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2731:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11629
		{
			yyVAL.list = nil
		}
	case 2732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11633
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11634
		{
			yyVAL.list = nil
		}
	case 2734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11637
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_ALL
		}
	case 2735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11638
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DISTINCT
		}
	case 2736:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11639
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DEFAULT
		}
	case 2737:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11644
		{
			yyVAL.groupClause = &ast.GroupClause{
				Distinct: yyDollar[3].setquant == ast.SET_QUANTIFIER_DISTINCT,
				List:     yyDollar[4].list,
			}
		}
	case 2738:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11651
		{
			yyVAL.groupClause = nil
		}
	case 2739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11657
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11658
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11662
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11663
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11664
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11665
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11666
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2746:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11671
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_EMPTY, ast.NewNodeList(), 0)
		}
	case 2747:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11678
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_ROLLUP, yyDollar[3].list, 0)
		}
	case 2748:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11685
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_CUBE, yyDollar[3].list, 0)
		}
	case 2749:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11692
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_SETS, yyDollar[4].list, 0)
		}
	case 2750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11701
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2751:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11702
		{
			yyVAL.node = nil
		}
	case 2752:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11709
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11713
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11714
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2755:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11719
		{
			sortBy := ast.NewSortBy(yyDollar[1].node, ast.SORTBY_USING, ast.SortByNulls(yyDollar[4].ival), 0)
			// Use qual_all_Op (NodeList) directly for UseOp
			sortBy.UseOp = yyDollar[3].list
			yyVAL.node = sortBy
		}
	case 2756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11726
		{
			yyVAL.node = ast.NewSortBy(yyDollar[1].node, ast.SortByDir(yyDollar[2].ival), ast.SortByNulls(yyDollar[3].ival), 0)
		}
	case 2757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11737
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2758:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11739
		{
			yyVAL.list = nil
		}
	case 2759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11744
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[1].windef)
		}
	case 2760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11749
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[3].windef)
		}
	case 2761:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11757
		{
			n := yyDollar[3].windef
			n.Name = yyDollar[1].str
			yyVAL.windef = n
		}
	case 2762:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11766
		{
			yyVAL.windef = yyDollar[2].windef
		}
	case 2763:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11768
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			yyVAL.windef = n
		}
	case 2764:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11775
		{
			yyVAL.windef = nil
		}
	case 2765:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11780
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.PartitionClause = yyDollar[3].list
			n.OrderClause = yyDollar[4].list

			n.FrameOptions = yyDollar[5].windef.FrameOptions
			n.StartOffset = yyDollar[5].windef.StartOffset
			n.EndOffset = yyDollar[5].windef.EndOffset
			yyVAL.windef = n
		}
	case 2766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11794
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2767:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11795
		{
			yyVAL.str = ""
		}
	case 2768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11799
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2769:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11800
		{
			yyVAL.list = nil
		}
	case 2770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11805
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_RANGE
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2771:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11812
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_ROWS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11819
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_GROUPS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2773:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11826
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11837
		{
			n := yyDollar[1].windef
			// reject invalid cases - these would be runtime errors in PostgreSQL
			if (n.FrameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (n.FrameOptions & ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 {
				yylex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			n.FrameOptions |= ast.FRAMEOPTION_END_CURRENT_ROW
			yyVAL.windef = n
		}
	case 2775:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11851
		{
			n1 := yyDollar[2].windef
			n2 := yyDollar[4].windef

			// form merged options
			frameOptions := n1.FrameOptions
			// shift converts START_ options to END_ options
			frameOptions |= (n2.FrameOptions << 1)
			frameOptions |= ast.FRAMEOPTION_BETWEEN

			// reject invalid cases
			if (frameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (frameOptions & ast.FRAMEOPTION_END_UNBOUNDED_PRECEDING) != 0 {
				yylex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_CURRENT_ROW) != 0 &&
				(frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 {
				yylex.Error("frame starting from current row cannot have preceding rows")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 &&
				((frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 ||
					(frameOptions&ast.FRAMEOPTION_END_CURRENT_ROW) != 0) {
				yylex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			n1.FrameOptions = frameOptions
			n1.EndOffset = n2.StartOffset
			yyVAL.windef = n1
		}
	case 2776:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11886
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_PRECEDING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11894
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11902
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_CURRENT_ROW
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11910
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_PRECEDING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11918
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_FOLLOWING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2781:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11928
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_CURRENT_ROW
		}
	case 2782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11929
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_GROUP
		}
	case 2783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11930
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_TIES
		}
	case 2784:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11931
		{
			yyVAL.ival = 0
		}
	case 2785:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11932
		{
			yyVAL.ival = 0
		}
	case 2786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11941
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[2].node
		}
	case 2787:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11946
		{
			yyVAL.selectLimit = yyDollar[2].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[1].node
		}
	case 2788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11951
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11955
		{
			n := &selectLimit{}
			n.limitOffset = yyDollar[1].node
			n.limitCount = nil
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11965
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2791:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11966
		{
			yyVAL.selectLimit = nil
		}
	case 2792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11971
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[2].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2793:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11979
		{
			// Disabled because it was too confusing - PostgreSQL error
			yylex.Error("LIMIT #,# syntax is not supported. Use separate LIMIT and OFFSET clauses.")
			return 1
		}
	case 2794:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11986
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2795:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11994
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2796:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12002
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2797:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12010
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2798:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12021
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2799:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12024
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12028
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12030
		{
			/* LIMIT ALL is represented as a NULL constant */
			yyVAL.node = ast.NewA_Const(ast.NewNull(), -1)
		}
	case 2802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12037
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12050
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2804:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12052
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("+")}}, nil, yyDollar[2].node, -1)
		}
	case 2805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12056
		{
			// Create a unary minus expression
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("-")}}, nil, yyDollar[2].node, -1)
		}
	case 2806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12063
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), -1)
		}
	case 2807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12064
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), -1)
		}
	case 2808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12069
		{
			yyVAL.ival = 0
		}
	case 2809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12070
		{
			yyVAL.ival = 0
		}
	case 2810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12074
		{
			yyVAL.ival = 0
		}
	case 2811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12075
		{
			yyVAL.ival = 0
		}
	case 2812:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12088
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12094
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_START)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2814:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12100
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2815:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12106
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2816:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12112
		{
			stmt := ast.NewSavepointStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2817:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12117
		{
			stmt := ast.NewReleaseStmt(yyDollar[3].str)
			yyVAL.stmt = stmt
		}
	case 2818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12122
		{
			stmt := ast.NewReleaseStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2819:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12127
		{
			stmt := ast.NewRollbackToStmt(yyDollar[5].str)
			yyVAL.stmt = stmt
		}
	case 2820:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12132
		{
			stmt := ast.NewRollbackToStmt(yyDollar[4].str)
			yyVAL.stmt = stmt
		}
	case 2821:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12137
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_PREPARE)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2822:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12143
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2823:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12149
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2824:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12158
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2825:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12164
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_BEGIN)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12171
		{
		}
	case 2827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12172
		{
		}
	case 2828:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12173
		{
		}
	case 2829:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12177
		{
			yyVAL.bval = true
		}
	case 2830:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12178
		{
			yyVAL.bval = false
		}
	case 2831:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12179
		{
			yyVAL.bval = false
		}
	case 2832:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12192
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_ROLE, yyDollar[3].str, yyDollar[5].list)
		}
	case 2833:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12199
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_USER, yyDollar[3].str, yyDollar[5].list)
		}
	case 2834:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12206
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_GROUP, yyDollar[3].str, yyDollar[5].list)
		}
	case 2835:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12213
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2836:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12219
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2837:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12228
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2838:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12232
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2839:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12236
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2840:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12240
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2841:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12246
		{
			yyVAL.str = ""
		}
	case 2842:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12247
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2843:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12252
		{
			options := ast.NewNodeList(ast.NewDefElem("rolemembers", yyDollar[6].list))
			stmt := ast.NewAlterRoleStmt(yyDollar[3].rolespec, options)
			stmt.Action = yyDollar[4].ival
			yyVAL.stmt = stmt
		}
	case 2844:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12262
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2845:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12266
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2846:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12270
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2847:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12274
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2848:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12278
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2849:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12282
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2850:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12290
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 2851:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12301
		{
			yyVAL.list = nil
		}
	case 2852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12306
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 2853:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12317
		{
			yyVAL.list = nil
		}
	case 2854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12321
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2855:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12323
		{
			yyVAL.defelt = ast.NewDefElem("sysid", ast.NewInteger(yyDollar[2].ival))
		}
	case 2856:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12327
		{
			yyVAL.defelt = ast.NewDefElem("adminmembers", yyDollar[2].list)
		}
	case 2857:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12331
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 2858:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12335
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 2859:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12339
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 2860:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12346
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[2].str))
		}
	case 2861:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12350
		{
			yyVAL.defelt = ast.NewDefElem("password", nil)
		}
	case 2862:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12354
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[3].str))
		}
	case 2863:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12358
		{
			yylex.Error("UNENCRYPTED PASSWORD is no longer supported")
			return 1
		}
	case 2864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12363
		{
			yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(true))
		}
	case 2865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12367
		{
			// Handle identifiers like PostgreSQL does with string comparisons
			if yyDollar[1].str == "superuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nosuperuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createrole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreaterole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createdb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreatedb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(false))
			} else if yyDollar[1].str == "login" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nologin" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(false))
			} else if yyDollar[1].str == "replication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(true))
			} else if yyDollar[1].str == "noreplication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(false))
			} else if yyDollar[1].str == "bypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nobypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(false))
			} else if yyDollar[1].str == "noinherit" {
				yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(false))
			} else {
				// Return error for unrecognized role option
				yylex.Error("unrecognized role option \"" + yyDollar[1].str + "\"")
				yyVAL.defelt = nil
			}
		}
	case 2866:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12402
		{
			yyVAL.defelt = ast.NewDefElem("connectionlimit", ast.NewInteger(yyDollar[3].ival))
		}
	case 2867:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12406
		{
			yyVAL.defelt = ast.NewDefElem("validUntil", ast.NewString(yyDollar[3].str))
		}
	case 2868:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12410
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 2869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12416
		{
			yyVAL.ival = 1
		}
	case 2870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12417
		{
			yyVAL.ival = -1
		}
	case 2871:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12422
		{
			n := ast.NewRangeTableSample(nil, yyDollar[2].list, yyDollar[4].list, yyDollar[6].node, 0)
			yyVAL.node = n
		}
	case 2872:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12430
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2873:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12434
		{
			yyVAL.node = nil
		}
	case 2874:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12448
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_FUNCTION, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 2875:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12453
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_PROCEDURE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 2876:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12458
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_ROUTINE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 2877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12466
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2878:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12467
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2879:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12473
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 2880:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12477
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12481
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12485
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 2883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12489
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 2884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12493
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 2885:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12497
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2886:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12501
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2887:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12505
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2888:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12509
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12513
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 2890:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12517
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 2891:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12521
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 2892:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12525
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 2893:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12529
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 2894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12533
		{
			/* we abuse the normal content of a DefElem here */
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 2895:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12538
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 2896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12544
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2897:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12545
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2898:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12550
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2899:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12554
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12558
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12564
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12565
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12566
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12567
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12568
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2908:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12579
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = yyDollar[1].list
			n.Objargs = ast.ExtractArgTypes(yyDollar[2].list)
			n.ObjfuncArgs = yyDollar[2].list
			yyVAL.objwithargs = n
		}
	case 2909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12592
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 2910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12599
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 2911:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12606
		{
			n := ast.NewEmptyObjectWithArgs()
			nameList := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			// Append indirection elements
			for i := 0; i < yyDollar[2].list.Len(); i++ {
				nameList.Append(yyDollar[2].list.Items[i])
			}
			n.Objname = nameList
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 2912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12620
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 2913:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12622
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 2914:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12634
		{
			n := ast.NewAlterTypeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2915:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12642
		{
			relation, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error("invalid type name")
				return 1
			}
			n := ast.NewAlterTableStmt(relation, yyDollar[4].list)
			n.Objtype = ast.OBJECT_TYPE // Mark this as a composite type alteration
			yyVAL.stmt = n
		}
	case 2916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12655
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2917:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12656
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2918:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12662
		{
			n := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			n.Behavior = yyDollar[4].dropBehav
			yyVAL.node = n
		}
	case 2919:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12669
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			yyVAL.node = n
		}
	case 2920:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12677
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			yyVAL.node = n
		}
	case 2921:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12685
		{
			def := ast.NewColumnDef(yyDollar[3].str, yyDollar[6].typnam, -1)
			n := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, def)
			n.Behavior = yyDollar[8].dropBehav
			/* We only use these fields of the ColumnDef node */
			def.TypeName = yyDollar[6].typnam
			if collClause, ok := yyDollar[7].node.(*ast.CollateClause); ok {
				def.Collclause = collClause
			}
			def.RawDefault = nil
			yyVAL.node = n
		}
	case 2922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12706
		{
			yyVAL.ival = int(ast.CMD_SELECT)
		}
	case 2923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12707
		{
			yyVAL.ival = int(ast.CMD_UPDATE)
		}
	case 2924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12708
		{
			yyVAL.ival = int(ast.CMD_DELETE)
		}
	case 2925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12709
		{
			yyVAL.ival = int(ast.CMD_INSERT)
		}
	}
	goto yystack /* stack new state and value */
}
