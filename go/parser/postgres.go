// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
	"strings"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// SelectLimit - Private struct for the result of opt_select_limit production
// Mirrors PostgreSQL's SelectLimit from gram.y:126-132
type selectLimit struct {
	limitOffset ast.Node
	limitCount  ast.Node
	limitOption ast.LimitOption
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// PrivTarget - represents a privilege target for GRANT/REVOKE statements
// Internal struct for handling privilege_target grammar rule
type PrivTarget struct {
	targtype ast.GrantTargetType
	objtype  ast.ObjectType
	objs     *ast.NodeList
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:51
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node        ast.Node
	stmt        ast.Stmt
	stmtList    []ast.Stmt
	list        *ast.NodeList
	groupClause *ast.GroupClause
	selectLimit *selectLimit

	// Specific AST node types
	into          *ast.IntoClause
	onconflict    *ast.OnConflictClause
	windef        *ast.WindowDef
	createStmt    *ast.CreateStmt
	indexStmt     *ast.IndexStmt
	alterStmt     *ast.AlterTableStmt
	dropStmt      *ast.DropStmt
	columnDef     *ast.ColumnDef
	constraint    *ast.Constraint
	indexElem     *ast.IndexElem
	alterCmd      *ast.AlterTableCmd
	with          *ast.WithClause
	rangevar      *ast.RangeVar
	objType       ast.ObjectType
	dropBehav     ast.DropBehavior
	setquant      ast.SetQuantifier
	typnam        *ast.TypeName
	partspec      *ast.PartitionSpec
	partboundspec *ast.PartitionBoundSpec
	oncommit      ast.OnCommitAction
	defelt        *ast.DefElem
	target        *ast.ResTarget            // For select targets, insert columns
	alias         *ast.Alias                // For table and column aliases
	jtype         ast.JoinType              // For join type specifications
	jexpr         *ast.JoinExpr             // For joined table expressions
	keyaction     *ast.KeyAction            // For foreign key actions
	keyactions    *ast.KeyActions           // For foreign key action sets
	funparam      *ast.FunctionParameter    // For function parameters
	funparammode  ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt      *ast.VariableSetStmt      // For SET/RESET statements
	rolespec      *ast.RoleSpec
	objwithargs   *ast.ObjectWithArgs
	statelem      *ast.StatsElem
	accesspriv    *ast.AccessPriv     // For privilege specifications
	privtarget    *PrivTarget         // For privilege target specifications
	vacrel        *ast.VacuumRelation // For vacuum relation specifications

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const VALUES = 57428
const SEARCH = 57429
const BREADTH = 57430
const DEPTH = 57431
const CYCLE = 57432
const FIRST_P = 57433
const LAST_P = 57434
const SET = 57435
const ASC = 57436
const DESC = 57437
const INSERT = 57438
const UPDATE = 57439
const DELETE_P = 57440
const MERGE = 57441
const RETURNING = 57442
const CONFLICT = 57443
const OVERRIDING = 57444
const USER = 57445
const SYSTEM_P = 57446
const MATCHED = 57447
const THEN = 57448
const SOURCE = 57449
const TARGET = 57450
const DO = 57451
const NOTHING = 57452
const COPY = 57453
const PROGRAM = 57454
const STDIN = 57455
const STDOUT = 57456
const BINARY = 57457
const FREEZE = 57458
const CONSTRAINT = 57459
const VERBOSE = 57460
const ANALYZE = 57461
const CURRENT_P = 57462
const CURSOR = 57463
const OF = 57464
const COLUMNS = 57465
const ORDINALITY = 57466
const XMLTABLE = 57467
const JSON_TABLE = 57468
const ROWS = 57469
const PATH = 57470
const PASSING = 57471
const FOR = 57472
const NESTED = 57473
const REF_P = 57474
const XMLNAMESPACES = 57475
const ARRAY = 57476
const ERROR = 57477
const ERROR_P = 57478
const EMPTY = 57479
const EMPTY_P = 57480
const OBJECT_P = 57481
const WRAPPER = 57482
const CONDITIONAL = 57483
const UNCONDITIONAL = 57484
const QUOTES = 57485
const OMIT = 57486
const KEEP = 57487
const SCALAR = 57488
const STRING_P = 57489
const ENCODING = 57490
const DELIMITER = 57491
const DELIMITERS = 57492
const HEADER_P = 57493
const QUOTE = 57494
const FORCE = 57495
const CSV = 57496
const VALUE_P = 57497
const JSON_QUERY = 57498
const JSON_VALUE = 57499
const JSON_SERIALIZE = 57500
const JSON_OBJECT = 57501
const JSON_ARRAY = 57502
const JSON_OBJECTAGG = 57503
const JSON_ARRAYAGG = 57504
const JSON_EXISTS = 57505
const JSON_SCALAR = 57506
const FORMAT = 57507
const JSON = 57508
const UTF8 = 57509
const WITHOUT = 57510
const BIT = 57511
const NUMERIC = 57512
const INTEGER = 57513
const SMALLINT = 57514
const BIGINT = 57515
const REAL = 57516
const FLOAT_P = 57517
const DOUBLE_P = 57518
const PRECISION = 57519
const CHARACTER = 57520
const CHAR_P = 57521
const VARCHAR = 57522
const NATIONAL = 57523
const NCHAR = 57524
const VARYING = 57525
const TIMESTAMP = 57526
const INTERVAL = 57527
const INT_P = 57528
const DECIMAL_P = 57529
const DEC = 57530
const BOOLEAN_P = 57531
const VARIADIC = 57532
const ABORT_P = 57533
const ABSENT = 57534
const ABSOLUTE_P = 57535
const ACCESS = 57536
const ACTION = 57537
const ADD_P = 57538
const ADMIN = 57539
const AFTER = 57540
const AGGREGATE = 57541
const ALSO = 57542
const ALWAYS = 57543
const ANALYSE = 57544
const ASENSITIVE = 57545
const ASSERTION = 57546
const ASSIGNMENT = 57547
const ATOMIC = 57548
const ATTACH = 57549
const ATTRIBUTE = 57550
const AUTHORIZATION = 57551
const BACKWARD = 57552
const BEFORE = 57553
const BEGIN_P = 57554
const CACHE = 57555
const CALL = 57556
const CALLED = 57557
const CASCADED = 57558
const CATALOG_P = 57559
const CHAIN = 57560
const CHARACTERISTICS = 57561
const CHECKPOINT = 57562
const CLASS = 57563
const CLOSE = 57564
const CLUSTER = 57565
const COALESCE = 57566
const COLLATION = 57567
const COMMENT = 57568
const COMMENTS = 57569
const COMMIT = 57570
const COMMITTED = 57571
const COMPRESSION = 57572
const CONFIGURATION = 57573
const CONNECTION = 57574
const CONSTRAINTS = 57575
const CONTENT_P = 57576
const CONTINUE_P = 57577
const CONVERSION_P = 57578
const COST = 57579
const CUBE = 57580
const CURRENT_CATALOG = 57581
const CURRENT_DATE = 57582
const CURRENT_ROLE = 57583
const CURRENT_SCHEMA = 57584
const CURRENT_TIME = 57585
const CURRENT_TIMESTAMP = 57586
const CURRENT_USER = 57587
const DATA_P = 57588
const DATABASE = 57589
const DAY_P = 57590
const DEALLOCATE = 57591
const DECLARE = 57592
const DEFAULTS = 57593
const DEFERRABLE = 57594
const DEFERRED = 57595
const DEFINER = 57596
const DEPENDS = 57597
const DETACH = 57598
const DICTIONARY = 57599
const DISABLE_P = 57600
const DISCARD = 57601
const DOCUMENT_P = 57602
const DOMAIN_P = 57603
const EACH = 57604
const ELSE = 57605
const ENABLE_P = 57606
const ENCRYPTED = 57607
const END_P = 57608
const ENUM_P = 57609
const EVENT = 57610
const EXCEPT = 57611
const EXCLUDE = 57612
const EXCLUDING = 57613
const EXCLUSIVE = 57614
const EXECUTE = 57615
const EXPLAIN = 57616
const EXPRESSION = 57617
const EXTENSION = 57618
const EXTERNAL = 57619
const EXTRACT = 57620
const FAMILY = 57621
const FETCH = 57622
const FILTER = 57623
const FINALIZE = 57624
const FOLLOWING = 57625
const FOREIGN = 57626
const FORWARD = 57627
const FUNCTION = 57628
const FUNCTIONS = 57629
const GENERATED = 57630
const GLOBAL = 57631
const GRANT = 57632
const GRANTED = 57633
const GREATEST = 57634
const GROUPING = 57635
const GROUPS = 57636
const HANDLER = 57637
const HOLD = 57638
const HOUR_P = 57639
const IDENTITY_P = 57640
const IMMEDIATE = 57641
const IMMUTABLE = 57642
const IMPLICIT_P = 57643
const IMPORT_P = 57644
const INCLUDE = 57645
const INCLUDING = 57646
const INCREMENT = 57647
const INDENT = 57648
const INDEX = 57649
const INDEXES = 57650
const INHERIT = 57651
const INHERITS = 57652
const INITIALLY = 57653
const INLINE_P = 57654
const INPUT_P = 57655
const INSENSITIVE = 57656
const INSTEAD = 57657
const INTERSECT = 57658
const INVOKER = 57659
const ISOLATION = 57660
const KEYS = 57661
const LABEL = 57662
const LANGUAGE = 57663
const LARGE_P = 57664
const LATERAL_P = 57665
const LEAKPROOF = 57666
const LEAST = 57667
const LEADING = 57668
const LEVEL = 57669
const LISTEN = 57670
const LOAD = 57671
const LOCALTIME = 57672
const LOCALTIMESTAMP = 57673
const LOCATION = 57674
const LOCK_P = 57675
const LOCKED = 57676
const LOGGED = 57677
const MAPPING = 57678
const MATCH = 57679
const MAXVALUE = 57680
const MERGE_ACTION = 57681
const METHOD = 57682
const MINUTE_P = 57683
const MINVALUE = 57684
const MODE = 57685
const MONTH_P = 57686
const MOVE = 57687
const NAME_P = 57688
const NAMES = 57689
const NEW = 57690
const NEXT = 57691
const NFC = 57692
const NFD = 57693
const NFKC = 57694
const NFKD = 57695
const NO = 57696
const NONE = 57697
const NORMALIZE = 57698
const NORMALIZED = 57699
const NOTIFY = 57700
const NOWAIT = 57701
const NULLIF = 57702
const OUT_P = 57703
const OVERLAY = 57704
const OVERLAPS = 57705
const OWNED = 57706
const OWNER = 57707
const PARALLEL = 57708
const PARAMETER = 57709
const PARSER = 57710
const PARTIAL = 57711
const PARTITION = 57712
const PASSWORD = 57713
const PLACING = 57714
const PLAN = 57715
const PLANS = 57716
const POLICY = 57717
const POSITION = 57718
const PRECEDING = 57719
const PREPARE = 57720
const PREPARED = 57721
const PRESERVE = 57722
const PRIMARY = 57723
const PRIOR = 57724
const PRIVILEGES = 57725
const PROCEDURAL = 57726
const PROCEDURE = 57727
const PROCEDURES = 57728
const PUBLICATION = 57729
const RANGE = 57730
const READ = 57731
const REASSIGN = 57732
const RECHECK = 57733
const REFERENCES = 57734
const REFERENCING = 57735
const REFRESH = 57736
const REINDEX = 57737
const RELATIVE_P = 57738
const RELEASE = 57739
const RENAME = 57740
const REPEATABLE = 57741
const REPLICA = 57742
const RESET = 57743
const RESTART = 57744
const RETURN = 57745
const RETURNS = 57746
const REVOKE = 57747
const ROLE = 57748
const ROLLBACK = 57749
const ROLLUP = 57750
const ROUTINE = 57751
const ROUTINES = 57752
const ROW = 57753
const RULE = 57754
const SAVEPOINT = 57755
const SCHEMA = 57756
const SCHEMAS = 57757
const SCROLL = 57758
const SECOND_P = 57759
const SECURITY = 57760
const SEQUENCE = 57761
const SEQUENCES = 57762
const SERIALIZABLE = 57763
const SERVER = 57764
const SESSION = 57765
const SESSION_USER = 57766
const SETS = 57767
const SETOF = 57768
const SHARE = 57769
const SHOW = 57770
const SIMPLE = 57771
const SKIP = 57772
const SNAPSHOT = 57773
const SOME = 57774
const SQL_P = 57775
const STABLE = 57776
const STANDALONE_P = 57777
const START = 57778
const STATEMENT = 57779
const STATISTICS = 57780
const STORAGE = 57781
const STORED = 57782
const STRICT_P = 57783
const STRIP_P = 57784
const SUBSCRIPTION = 57785
const SUBSTRING = 57786
const SUPPORT = 57787
const SYSID = 57788
const SYSTEM_USER = 57789
const TABLES = 57790
const TABLESPACE = 57791
const TABLESAMPLE = 57792
const TEMP = 57793
const TEMPLATE = 57794
const TEMPORARY = 57795
const TEXT_P = 57796
const TIES = 57797
const TRAILING = 57798
const TRANSACTION = 57799
const TRANSFORM = 57800
const TREAT = 57801
const TRIGGER = 57802
const TRIM = 57803
const TRUNCATE = 57804
const TRUSTED = 57805
const TYPE_P = 57806
const TYPES_P = 57807
const UESCAPE = 57808
const UNBOUNDED = 57809
const UNCOMMITTED = 57810
const UNENCRYPTED = 57811
const UNION = 57812
const UNIQUE = 57813
const UNLISTEN = 57814
const UNLOGGED = 57815
const UNTIL = 57816
const VACUUM = 57817
const VALID = 57818
const VALIDATE = 57819
const VALIDATOR = 57820
const VERSION_P = 57821
const VIEW = 57822
const VIEWS = 57823
const VOLATILE = 57824
const WHITESPACE_P = 57825
const WINDOW = 57826
const WITHIN = 57827
const WORK = 57828
const WRITE = 57829
const XML_P = 57830
const XMLATTRIBUTES = 57831
const XMLCONCAT = 57832
const XMLELEMENT = 57833
const XMLEXISTS = 57834
const XMLFOREST = 57835
const XMLPARSE = 57836
const XMLPI = 57837
const XMLROOT = 57838
const XMLSERIALIZE = 57839
const YEAR_P = 57840
const YES_P = 57841
const INOUT = 57842
const OTHERS = 57843
const OLD = 57844
const KEY = 57845
const OFF = 57846
const OIDS = 57847
const OPTION = 57848
const OPTIONS = 57849
const OVER = 57850
const ORDER = 57851
const ANY = 57852
const BOTH = 57853
const CAST = 57854
const CHECK = 57855
const COLUMN = 57856
const FORMAT_LA = 57857
const NOT_LA = 57858
const NULLS_LA = 57859
const WITH_LA = 57860
const WITHOUT_LA = 57861
const MODE_TYPE_NAME = 57862
const MODE_PLPGSQL_EXPR = 57863
const MODE_PLPGSQL_ASSIGN1 = 57864
const MODE_PLPGSQL_ASSIGN2 = 57865
const MODE_PLPGSQL_ASSIGN3 = 57866
const UMINUS = 57867

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ANALYSE",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:15136

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 122,
	540, 122,
	-2, 1629,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 125,
	1, 1543,
	26, 1543,
	36, 1543,
	74, 1543,
	100, 1543,
	532, 1543,
	540, 1543,
	-2, 1547,
	-1, 128,
	67, 1959,
	84, 1959,
	85, 2661,
	236, 2846,
	307, 2126,
	419, 1959,
	480, 1959,
	-2, 135,
	-1, 168,
	68, 1546,
	69, 1546,
	130, 1546,
	269, 1546,
	280, 1546,
	316, 1546,
	470, 1546,
	509, 1546,
	-2, 1548,
	-1, 180,
	1, 122,
	540, 122,
	-2, 1629,
	-1, 223,
	85, 2660,
	-2, 1958,
	-1, 309,
	61, 343,
	64, 343,
	527, 343,
	533, 343,
	-2, 2702,
	-1, 775,
	1, 346,
	540, 346,
	-2, 3173,
	-1, 776,
	1, 387,
	540, 387,
	-2, 3173,
	-1, 777,
	1, 278,
	540, 278,
	-2, 3173,
	-1, 778,
	1, 320,
	540, 320,
	-2, 3173,
	-1, 783,
	1, 282,
	540, 282,
	-2, 3173,
	-1, 784,
	1, 199,
	540, 199,
	-2, 3173,
	-1, 818,
	7, 1459,
	16, 1459,
	17, 1459,
	531, 1459,
	-2, 141,
	-1, 819,
	7, 1460,
	16, 1460,
	17, 1460,
	531, 1460,
	-2, 142,
	-1, 844,
	68, 1532,
	69, 1532,
	130, 1532,
	280, 1532,
	-2, 1549,
	-1, 850,
	68, 1533,
	69, 1533,
	130, 1533,
	280, 1533,
	-2, 1552,
	-1, 907,
	84, 1959,
	480, 1959,
	-2, 134,
	-1, 909,
	209, 123,
	-2, 2667,
	-1, 995,
	531, 1461,
	-2, 3125,
	-1, 1016,
	93, 2982,
	398, 2162,
	401, 2982,
	-2, 2055,
	-1, 1020,
	93, 2982,
	398, 2162,
	401, 2982,
	-2, 2055,
	-1, 1089,
	531, 2055,
	-2, 2530,
	-1, 1185,
	74, 151,
	-2, 157,
	-1, 1269,
	68, 1532,
	69, 1532,
	130, 1532,
	280, 1532,
	-2, 1553,
	-1, 1323,
	7, 1250,
	531, 1250,
	-2, 524,
	-1, 1338,
	7, 575,
	16, 575,
	17, 575,
	531, 575,
	-2, 1298,
	-1, 1360,
	7, 1504,
	-2, 525,
	-1, 1368,
	7, 1474,
	-2, 508,
	-1, 1369,
	7, 1509,
	531, 1509,
	-2, 509,
	-1, 1370,
	7, 1481,
	-2, 510,
	-1, 1371,
	7, 1509,
	531, 1509,
	-2, 511,
	-1, 1372,
	7, 1509,
	531, 1509,
	-2, 512,
	-1, 1373,
	7, 1468,
	-2, 514,
	-1, 1374,
	7, 1468,
	-2, 515,
	-1, 1375,
	7, 1511,
	-2, 518,
	-1, 1376,
	7, 1471,
	-2, 522,
	-1, 1377,
	7, 1472,
	-2, 523,
	-1, 1379,
	7, 1509,
	531, 1509,
	-2, 539,
	-1, 1380,
	7, 1468,
	-2, 543,
	-1, 1381,
	7, 1475,
	-2, 548,
	-1, 1382,
	7, 1473,
	-2, 551,
	-1, 1383,
	7, 1507,
	-2, 553,
	-1, 1384,
	7, 1507,
	-2, 554,
	-1, 1385,
	7, 1492,
	531, 1492,
	-2, 558,
	-1, 1540,
	6, 2055,
	12, 2055,
	534, 2055,
	535, 2055,
	-2, 2048,
	-1, 1616,
	531, 1385,
	-2, 3127,
	-1, 1921,
	16, 1463,
	17, 1463,
	-2, 1384,
	-1, 2033,
	127, 2944,
	411, 2944,
	-2, 1123,
	-1, 2067,
	21, 1422,
	432, 1422,
	510, 1422,
	-2, 885,
	-1, 2069,
	21, 1424,
	432, 1424,
	510, 1424,
	-2, 832,
	-1, 2074,
	1, 701,
	26, 701,
	36, 701,
	64, 701,
	65, 701,
	68, 701,
	69, 701,
	71, 701,
	72, 701,
	73, 701,
	74, 701,
	100, 701,
	130, 701,
	269, 701,
	280, 701,
	316, 701,
	470, 701,
	484, 701,
	509, 701,
	515, 701,
	532, 701,
	540, 701,
	541, 701,
	-2, 1538,
	-1, 2079,
	21, 1516,
	432, 1516,
	510, 1516,
	-2, 1512,
	-1, 2536,
	68, 1547,
	69, 1547,
	130, 1547,
	269, 1547,
	280, 1547,
	316, 1547,
	470, 1547,
	509, 1547,
	-2, 1219,
	-1, 2545,
	7, 1385,
	531, 1385,
	-2, 1268,
	-1, 2674,
	117, 135,
	307, 2126,
	460, 135,
	-2, 1959,
	-1, 2726,
	536, 157,
	-2, 2520,
	-1, 2762,
	531, 2128,
	-2, 267,
	-1, 2839,
	40, 1468,
	134, 1468,
	509, 1468,
	527, 1468,
	529, 1468,
	532, 1468,
	541, 1468,
	-2, 1463,
	-1, 3045,
	531, 2055,
	-2, 2531,
	-1, 3183,
	36, 2949,
	66, 2949,
	-2, 549,
	-1, 3184,
	36, 2950,
	66, 2950,
	-2, 422,
	-1, 3190,
	127, 2947,
	411, 2947,
	-2, 1232,
	-1, 3191,
	127, 2948,
	411, 2948,
	-2, 1233,
	-1, 3207,
	1, 467,
	26, 467,
	36, 467,
	64, 467,
	65, 467,
	68, 467,
	69, 467,
	71, 467,
	72, 467,
	74, 467,
	100, 467,
	130, 467,
	269, 467,
	280, 467,
	316, 467,
	470, 467,
	484, 467,
	509, 467,
	515, 467,
	529, 467,
	532, 467,
	533, 467,
	540, 467,
	-2, 166,
	-1, 3208,
	1, 465,
	26, 465,
	36, 465,
	64, 465,
	65, 465,
	68, 465,
	69, 465,
	71, 465,
	72, 465,
	74, 465,
	100, 465,
	130, 465,
	269, 465,
	280, 465,
	316, 465,
	470, 465,
	484, 465,
	509, 465,
	515, 465,
	529, 465,
	532, 465,
	533, 465,
	540, 465,
	-2, 166,
	-1, 3211,
	1, 484,
	26, 484,
	36, 484,
	64, 484,
	65, 484,
	68, 484,
	69, 484,
	71, 484,
	72, 484,
	74, 484,
	100, 484,
	130, 484,
	269, 484,
	280, 484,
	316, 484,
	470, 484,
	484, 484,
	509, 484,
	515, 484,
	529, 484,
	532, 484,
	533, 484,
	540, 484,
	-2, 166,
	-1, 3225,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1136,
	-1, 3226,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1137,
	-1, 3227,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1138,
	-1, 3228,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1139,
	-1, 3229,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1140,
	-1, 3230,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1141,
	-1, 3234,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1148,
	-1, 3240,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1152,
	-1, 3285,
	363, 1412,
	-2, 1415,
	-1, 3364,
	68, 1547,
	69, 1547,
	130, 1547,
	269, 1547,
	280, 1547,
	316, 1547,
	470, 1547,
	509, 1547,
	-2, 1219,
	-1, 3485,
	209, 123,
	-2, 2667,
	-1, 3558,
	536, 158,
	-2, 2520,
	-1, 3671,
	507, 2607,
	-2, 2600,
	-1, 3990,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1150,
	-1, 3991,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1154,
	-1, 3997,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1156,
	-1, 4032,
	363, 1411,
	-2, 1414,
	-1, 4170,
	75, 1651,
	76, 1651,
	77, 1651,
	78, 1651,
	79, 1651,
	81, 1651,
	82, 1651,
	-2, 1547,
	-1, 4184,
	531, 1385,
	-2, 158,
	-1, 4190,
	150, 1891,
	-2, 1826,
	-1, 4377,
	6, 2055,
	12, 2055,
	534, 2055,
	535, 2055,
	-2, 2029,
	-1, 4609,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1149,
	-1, 4612,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1158,
	-1, 4615,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1153,
	-1, 4620,
	52, 0,
	53, 0,
	54, 0,
	-2, 1171,
	-1, 4627,
	21, 1421,
	432, 1421,
	510, 1421,
	-2, 1513,
	-1, 4631,
	363, 1413,
	-2, 1416,
	-1, 4662,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1201,
	-1, 4663,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1202,
	-1, 4664,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1203,
	-1, 4665,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1204,
	-1, 4666,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1205,
	-1, 4667,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1206,
	-1, 5098,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1151,
	-1, 5099,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1155,
	-1, 5103,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1157,
	-1, 5104,
	52, 0,
	53, 0,
	54, 0,
	-2, 1172,
	-1, 5107,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1173,
	-1, 5108,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1175,
	-1, 5230,
	540, 122,
	-2, 1629,
	-1, 5397,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1159,
	-1, 5398,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1174,
	-1, 5399,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1176,
	-1, 5407,
	52, 0,
	-2, 1209,
	-1, 5664,
	52, 0,
	-2, 1210,
	-1, 5849,
	37, 0,
	44, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 507,
	-1, 6180,
	7, 1776,
	-2, 344,
	-1, 6206,
	7, 1504,
	-2, 525,
}

const yyPrivate = 57344

const yyLast = 114668

var yyAct = [...]int16{
	724, 6177, 5679, 6228, 5859, 5680, 5426, 6040, 5669, 6229,
	5212, 6244, 1288, 4852, 4053, 3387, 3977, 6178, 3440, 5926,
	3071, 5698, 5165, 2531, 845, 4197, 959, 3630, 5848, 5220,
	3390, 2625, 3126, 5750, 3436, 5770, 1791, 4770, 5914, 4111,
	5909, 4286, 5647, 5558, 5799, 3881, 3322, 5304, 5164, 4361,
	6028, 3975, 1840, 1528, 5996, 4974, 4761, 5648, 3426, 6073,
	5699, 4041, 5777, 5645, 5630, 5979, 3199, 4347, 5771, 2647,
	3873, 5772, 1444, 4213, 5488, 5554, 1003, 5156, 3494, 5465,
	5424, 5847, 5034, 4538, 5822, 1814, 1481, 1156, 5303, 124,
	5581, 1920, 5536, 3403, 5227, 4757, 1031, 2746, 4194, 1213,
	4289, 742, 6, 5186, 3625, 4179, 3447, 1002, 3347, 3486,
	2081, 4827, 3589, 4975, 3089, 5179, 4980, 4997, 4856, 4214,
	1930, 4765, 5590, 1614, 74, 4905, 3432, 5196, 4263, 5494,
	5466, 2834, 1168, 146, 312, 312, 855, 170, 1311, 4,
	716, 721, 5471, 733, 737, 5172, 748, 22, 312, 747,
	21, 746, 10, 4137, 745, 9, 1817, 744, 8, 798,
	799, 801, 1263, 5192, 3405, 743, 7, 3547, 817, 4464,
	3773, 5393, 4691, 3430, 4820, 1439, 863, 2673, 20, 2672,
	19, 4249, 3470, 1041, 4162, 5074, 5091, 863, 3899, 1441,
	3404, 863, 2041, 946, 3882, 4266, 3867, 909, 1315, 913,
	918, 913, 3728, 913, 2671, 13, 2670, 12, 3868, 4376,
	1511, 4355, 2738, 913, 3624, 4889, 1729, 3574, 4332, 3548,
	3920, 2711, 2702, 2706, 2696, 3495, 3474, 863, 863, 863,
	863, 3473, 725, 3413, 817, 913, 913, 2646, 913, 996,
	3461, 3684, 918, 773, 996, 3428, 996, 3475, 3457, 4154,
	4731, 4598, 1703, 4173, 3391, 2627, 913, 887, 913, 993,
	5425, 853, 4165, 913, 1006, 3297, 1008, 4052, 3348, 4120,
	3166, 3250, 1274, 3079, 2540, 1816, 914, 739, 4374, 3512,
	805, 170, 6, 877, 1918, 1739, 3629, 1796, 2869, 3585,
	1586, 888, 2757, 862, 2723, 1399, 1467, 2682, 4009, 3460,
	1427, 312, 312, 3449, 74, 1422, 815, 4186, 1316, 1249,
	917, 3408, 3412, 146, 4267, 3411, 3410, 170, 2626, 1248,
	2533, 3401, 3356, 4045, 3294, 3290, 170, 22, 3251, 3260,
	21, 3257, 10, 2042, 3337, 9, 2010, 1317, 8, 3189,
	860, 892, 3179, 987, 891, 2030, 7, 890, 1174, 1518,
	1720, 884, 917, 1489, 1858, 889, 1790, 1838, 20, 876,
	19, 1727, 1693, 3727, 944, 3524, 814, 1923, 2832, 3511,
	3510, 303, 988, 1490, 1493, 908, 734, 994, 3423, 1034,
	194, 192, 994, 3204, 994, 13, 1448, 12, 1807, 3320,
	2555, 972, 1284, 1275, 2013, 2031, 770, 1224, 2011, 792,
	262, 1176, 738, 1164, 3070, 3098, 781, 781, 1574, 1038,
	1717, 2948, 1577, 1571, 216, 1744, 2653, 2710, 868, 2046,
	2014, 2012, 1256, 728, 1257, 1788, 753, 1258, 2703, 168,
	698, 1559, 1618, 1667, 169, 2722, 305, 2875, 304, 290,
	844, 883, 866, 1219, 807, 811, 1163, 875, 264, 5634,
	873, 5631, 1707, 4234, 5631, 1593, 3454, 4122, 881, 1707,
	1891, 849, 3090, 1708, 3978, 6296, 4046, 6174, 129, 6294,
	1708, 6292, 128, 130, 6213, 2049, 4233, 6252, 6253, 6240,
	6213, 6237, 177, 6173, 4540, 4235, 6253, 3091, 5881, 2079,
	2600, 6017, 2049, 3955, 5820, 5612, 2061, 2062, 2063, 2079,
	2602, 6221, 2049, 1707, 1129, 5610, 3173, 2047, 5578, 174,
	2600, 6212, 6189, 175, 1708, 2610, 2603, 2602, 3091, 6182,
	6213, 6190, 2607, 2611, 2606, 6164, 2608, 2602, 4142, 919,
	5100, 4323, 179, 2603, 5841, 1483, 930, 931, 932, 133,
	2612, 4069, 849, 2603, 2079, 6146, 3396, 2049, 726, 736,
	2612, 2061, 2062, 2063, 5446, 166, 2049, 127, 3907, 6104,
	3091, 3055, 5346, 2604, 6103, 172, 2605, 2049, 2600, 240,
	2610, 702, 2602, 2600, 3165, 762, 6151, 2607, 2611, 2606,
	3974, 2608, 966, 967, 756, 2609, 2072, 2073, 2603, 6150,
	1707, 1483, 2602, 1147, 6090, 2612, 1707, 6052, 1128, 6049,
	851, 1708, 4123, 3093, 997, 850, 6053, 1708, 6050, 3093,
	6025, 4047, 2079, 5986, 5985, 2049, 5984, 1015, 1018, 4275,
	5964, 870, 3062, 3062, 5963, 3062, 5960, 1892, 3205, 2600,
	5958, 4028, 5880, 2600, 1159, 5961, 1889, 135, 1710, 5959,
	2602, 5881, 4029, 4616, 5878, 3340, 5877, 2079, 173, 1802,
	2049, 1700, 804, 2600, 4027, 1710, 2603, 790, 1705, 4152,
	167, 5857, 1116, 2612, 2079, 2600, 150, 2049, 155, 148,
	4108, 5885, 164, 2610, 137, 2602, 1079, 5856, 5744, 880,
	2607, 2611, 2606, 2600, 2608, 1805, 2600, 5446, 5729, 5841,
	5719, 2603, 2602, 5702, 5839, 157, 152, 3065, 2612, 5720,
	5694, 5693, 5701, 1806, 5672, 151, 1771, 3197, 2603, 4275,
	1710, 5350, 5528, 2079, 5563, 2612, 2049, 3091, 5552, 156,
	144, 1142, 5542, 5564, 5526, 5459, 153, 3093, 5190, 5458,
	5457, 4235, 2048, 5525, 5460, 5148, 142, 4539, 4275, 4275,
	5455, 2602, 5445, 5414, 4611, 878, 5412, 5379, 2736, 1710,
	5300, 5446, 2600, 5299, 863, 5413, 4531, 2603, 5298, 5301,
	5292, 5238, 3093, 1185, 2612, 4830, 1887, 3093, 1771, 3093,
	4235, 4789, 5207, 4788, 158, 161, 4630, 1299, 4593, 162,
	4069, 5208, 4072, 4073, 4074, 4075, 5110, 5088, 4780, 4693,
	4544, 154, 4682, 4625, 4530, 2600, 2600, 3093, 4694, 1196,
	4522, 4683, 2600, 4531, 160, 4500, 863, 4275, 863, 2600,
	4553, 4458, 4393, 4343, 4457, 4192, 879, 1151, 1153, 1154,
	4457, 4394, 4344, 4237, 141, 4223, 4147, 4131, 4085, 4141,
	1068, 853, 4238, 4134, 4224, 4148, 132, 4115, 4142, 4107,
	131, 149, 2600, 140, 4130, 4105, 3955, 134, 4108, 4216,
	4129, 143, 4104, 138, 2600, 3955, 3065, 1302, 1302, 139,
	1299, 2600, 4103, 4069, 165, 863, 1148, 4079, 4080, 4081,
	4102, 2600, 1302, 3891, 147, 1270, 3888, 170, 3555, 2600,
	4032, 2079, 136, 863, 2049, 1414, 863, 863, 4030, 2600,
	2054, 2055, 2056, 2057, 3902, 863, 863, 2600, 863, 3733,
	817, 817, 3277, 3093, 817, 3850, 3177, 3057, 163, 2602,
	3731, 4085, 4610, 3676, 2600, 3093, 913, 913, 159, 3732,
	3488, 145, 3677, 2980, 1397, 2603, 1853, 1218, 3380, 3489,
	865, 3093, 2612, 5632, 5748, 1167, 5632, 1710, 3376, 3093,
	3396, 863, 1771, 1771, 180, 1167, 4075, 2600, 1167, 790,
	2057, 4121, 3124, 1771, 3095, 1167, 1710, 1392, 1167, 1710,
	4117, 2600, 3094, 3093, 178, 3063, 913, 1771, 1405, 4539,
	1220, 3093, 1220, 2601, 3062, 2048, 1705, 171, 2679, 1864,
	6293, 1419, 2600, 863, 863, 4324, 312, 312, 1847, 4539,
	1731, 5305, 1447, 3892, 2068, 2052, 2053, 2054, 2055, 2056,
	2057, 913, 913, 2058, 2059, 2060, 1447, 1129, 4324, 1452,
	1266, 1267, 2052, 2053, 2054, 2055, 2056, 2057, 1195, 1857,
	1714, 2840, 2052, 2053, 2054, 2055, 2056, 2057, 1847, 1119,
	1251, 1121, 1201, 1202, 1250, 1148, 1206, 1209, 1429, 1430,
	1710, 1771, 1433, 927, 928, 929, 790, 2688, 1526, 2068,
	884, 884, 921, 922, 923, 924, 925, 926, 2058, 2059,
	2060, 4070, 4071, 4072, 4073, 4074, 4075, 2052, 2053, 2054,
	2055, 2056, 2057, 1148, 3775, 4049, 2052, 2053, 2054, 2055,
	2056, 2057, 913, 6285, 1855, 913, 913, 2052, 2053, 2054,
	2055, 2056, 2057, 1847, 1852, 1846, 3555, 6259, 1251, 6111,
	1152, 1246, 1250, 1847, 1847, 3396, 6094, 1710, 4345, 4775,
	1731, 1148, 2679, 1771, 4346, 1576, 1731, 4964, 2679, 1700,
	6085, 1269, 1799, 4436, 1731, 790, 2679, 1462, 5871, 2639,
	1390, 4775, 1887, 2639, 1472, 2052, 2053, 2054, 2055, 2056,
	2057, 1812, 1251, 1162, 804, 1272, 1250, 863, 1550, 733,
	177, 1839, 2068, 1839, 2623, 1446, 1487, 1488, 863, 1136,
	1406, 1135, 5846, 1137, 3782, 1139, 1161, 5845, 2689, 5823,
	2052, 2053, 2054, 2055, 2056, 2057, 5790, 174, 1754, 1701,
	1702, 175, 174, 1393, 5681, 6043, 175, 2052, 2053, 2054,
	2055, 2056, 2057, 1119, 1740, 1741, 1118, 5674, 1173, 5638,
	179, 1178, 1849, 1837, 5567, 179, 1666, 1738, 1182, 1222,
	1672, 1193, 1740, 1741, 5543, 1302, 2621, 5515, 5421, 5418,
	5404, 1649, 5403, 913, 913, 1742, 1719, 5392, 817, 996,
	918, 6044, 5390, 996, 996, 5162, 2052, 2053, 2054, 2055,
	2056, 2057, 5155, 5152, 5138, 5133, 2741, 6041, 1302, 1899,
	5125, 1221, 1302, 1905, 1906, 1479, 1245, 1231, 5124, 5114,
	1302, 5073, 1302, 5045, 4995, 5560, 1252, 1253, 4994, 1302,
	4993, 4838, 2744, 2542, 4716, 1735, 1736, 1737, 1925, 1765,
	1302, 1302, 1302, 1302, 1302, 851, 4829, 1040, 1040, 1436,
	850, 1302, 1730, 4743, 1914, 4706, 4705, 4689, 170, 4679,
	4070, 4071, 4072, 4073, 4074, 4075, 4678, 4677, 4633, 1129,
	1398, 2687, 2979, 1129, 1129, 1302, 1616, 4627, 4586, 4585,
	1453, 4584, 1459, 177, 4537, 4519, 4336, 1416, 1417, 1515,
	4294, 4274, 1524, 4281, 1543, 3586, 2741, 1900, 4232, 4191,
	917, 4125, 4118, 1596, 1699, 1435, 4098, 4090, 4089, 4068,
	174, 4066, 4065, 1743, 175, 4061, 1634, 4776, 1644, 1129,
	790, 4059, 2744, 4058, 4057, 4056, 988, 994, 4034, 1210,
	4031, 994, 994, 179, 4076, 4077, 4078, 2640, 3950, 4776,
	853, 2640, 3857, 4070, 4071, 4072, 4073, 4074, 4075, 4719,
	3855, 3852, 3851, 786, 3841, 3375, 863, 1302, 3368, 3163,
	1406, 2933, 3270, 1784, 2052, 2053, 2054, 2055, 2056, 2057,
	1780, 804, 785, 2742, 2629, 1418, 2630, 1555, 2901, 804,
	804, 1454, 1554, 702, 1553, 863, 1615, 1272, 2652, 2978,
	6281, 1460, 4837, 1841, 1792, 1792, 3783, 1804, 1129, 1648,
	1871, 1271, 1872, 1873, 1874, 6277, 2700, 1877, 1878, 1879,
	1597, 1669, 1882, 918, 1673, 1674, 913, 913, 913, 913,
	1696, 913, 1631, 1597, 1641, 1597, 1152, 790, 2541, 3781,
	171, 788, 789, 1854, 863, 1925, 1207, 2683, 863, 1149,
	1850, 1251, 1160, 2726, 191, 1250, 755, 1861, 1862, 1863,
	1747, 1748, 4960, 2079, 1751, 1120, 2049, 2755, 5561, 177,
	786, 1121, 752, 2742, 863, 1393, 913, 1152, 2641, 6192,
	6158, 2644, 6133, 2620, 863, 6128, 2599, 1401, 5940, 785,
	755, 2602, 3271, 863, 3996, 6121, 174, 2745, 6062, 2686,
	175, 5995, 1911, 2741, 4043, 2902, 5778, 2603, 5246, 5957,
	4774, 5931, 2638, 863, 2612, 1449, 1797, 863, 5928, 179,
	5844, 2743, 5843, 2748, 5808, 5804, 4195, 1214, 1922, 2744,
	5731, 5697, 5626, 917, 1845, 5283, 5625, 5624, 788, 789,
	1627, 1898, 1835, 312, 5604, 5588, 1198, 1199, 1200, 5587,
	2795, 1203, 1204, 1205, 1208, 1299, 5586, 5576, 4069, 5573,
	1736, 1735, 4079, 4080, 4081, 312, 5198, 1737, 1851, 5453,
	5450, 5415, 1449, 5223, 5102, 5202, 2783, 2699, 5189, 2748,
	5181, 5178, 913, 2537, 2894, 4999, 4875, 2745, 4833, 4595,
	4817, 4807, 2545, 2754, 4804, 4785, 4083, 1150, 4748, 863,
	749, 4746, 178, 312, 4738, 2543, 4085, 2726, 2726, 2726,
	177, 2743, 4532, 312, 4239, 2622, 4366, 1701, 1702, 4365,
	171, 4360, 2833, 1400, 2585, 4183, 4182, 4135, 3968, 1120,
	4040, 4022, 4020, 863, 863, 1121, 3262, 174, 6239, 1743,
	2751, 175, 3814, 3708, 1095, 790, 6042, 3583, 2787, 1449,
	2023, 2022, 2015, 913, 913, 913, 913, 913, 3497, 2614,
	179, 2044, 2045, 851, 3442, 3268, 851, 851, 2038, 2748,
	2742, 2039, 2040, 1922, 3302, 913, 913, 3296, 171, 3044,
	2763, 2765, 3030, 913, 2800, 3022, 2786, 2079, 2663, 2654,
	2049, 2594, 740, 172, 2061, 2062, 2063, 2741, 1731, 2808,
	2809, 4715, 1302, 1733, 2079, 2592, 2604, 2049, 2591, 2605,
	2590, 2741, 2589, 2610, 2588, 2602, 2587, 2586, 2584, 2583,
	2607, 2611, 2606, 2744, 2608, 2582, 2581, 2812, 2609, 2072,
	2073, 2603, 2602, 2580, 2579, 3989, 2578, 2744, 2612, 2577,
	2576, 2575, 2574, 2573, 2959, 2960, 2727, 2572, 2603, 4954,
	2571, 863, 2570, 4363, 2569, 2612, 2568, 1748, 1747, 2567,
	2566, 1576, 2565, 1576, 2564, 1751, 2563, 1576, 1576, 2562,
	1449, 3005, 2561, 2650, 2560, 178, 173, 749, 2831, 2558,
	2593, 2557, 3060, 2544, 2745, 2680, 2597, 177, 171, 863,
	863, 2542, 996, 996, 996, 3007, 913, 1299, 1909, 3080,
	4069, 871, 913, 1836, 4079, 4080, 4081, 1839, 2743, 5703,
	1756, 1746, 1627, 733, 174, 733, 2801, 2655, 175, 1560,
	2804, 2805, 1396, 863, 863, 2676, 863, 1247, 863, 2927,
	1885, 863, 863, 1145, 2652, 2684, 964, 179, 4083, 764,
	2730, 5044, 1299, 4587, 4517, 4069, 4516, 4225, 4085, 4079,
	4080, 4081, 788, 789, 2541, 3840, 3013, 3014, 863, 3092,
	4722, 5101, 4180, 4459, 2742, 2954, 2748, 2818, 1449, 761,
	189, 2815, 913, 913, 2821, 2734, 2735, 3490, 2742, 3397,
	2857, 1740, 1741, 4083, 3976, 888, 1302, 1302, 1302, 5631,
	1442, 4054, 3075, 4085, 2891, 2892, 1922, 1706, 3083, 1449,
	2727, 2727, 2727, 754, 6246, 3059, 2535, 5521, 4958, 3164,
	3074, 2766, 3076, 2550, 2547, 3081, 3082, 3023, 1442, 2764,
	170, 1098, 1100, 4952, 751, 4400, 2737, 1668, 3099, 4413,
	994, 994, 994, 3168, 3169, 892, 2879, 2871, 891, 5742,
	5741, 890, 3665, 4415, 3659, 3066, 3067, 5355, 2811, 889,
	848, 178, 4358, 170, 2851, 849, 1485, 4411, 2855, 788,
	789, 2871, 3266, 3048, 171, 5981, 2761, 4051, 131, 3295,
	4287, 1875, 1876, 5509, 2879, 1512, 1880, 1881, 2745, 1883,
	1884, 4402, 2739, 5924, 2879, 5923, 2052, 2053, 2054, 2055,
	2056, 2057, 2745, 2914, 5740, 4557, 5381, 847, 1302, 4510,
	4369, 4556, 2743, 6247, 1158, 1302, 1302, 3569, 863, 2018,
	2932, 1167, 2596, 1131, 4773, 4816, 2743, 2938, 863, 1302,
	2876, 913, 3125, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
	1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 2909,
	1302, 3061, 2915, 2916, 2917, 3097, 2949, 2868, 2952, 2920,
	5538, 3588, 2956, 2957, 2955, 3587, 4687, 3175, 2876, 2741,
	2748, 6166, 5668, 2760, 2984, 5520, 4370, 2985, 2876, 4076,
	4077, 4078, 2018, 5279, 2748, 3267, 1408, 1530, 4070, 4071,
	4072, 4073, 4074, 4075, 2554, 2744, 5394, 183, 5140, 3118,
	3119, 1650, 178, 5139, 3120, 3121, 3012, 3122, 3123, 715,
	3015, 713, 2667, 1724, 2741, 741, 2079, 3480, 1473, 2049,
	5549, 1424, 1109, 2061, 2062, 2063, 182, 3513, 4688, 1102,
	982, 1651, 4696, 4291, 1647, 2604, 3508, 3695, 2605, 2845,
	2744, 5763, 2610, 3034, 2602, 3032, 3033, 1815, 4311, 2607,
	2611, 2606, 2741, 2608, 1532, 131, 1170, 2609, 2072, 2073,
	2603, 846, 1725, 2759, 4622, 3310, 894, 2612, 804, 2741,
	2741, 2741, 4621, 3837, 3196, 5532, 3507, 1724, 2744, 4372,
	3167, 3105, 4244, 896, 3107, 5250, 3514, 183, 5339, 183,
	5293, 5029, 4963, 4926, 4257, 2744, 2744, 2744, 4790, 896,
	849, 4253, 2068, 3151, 3383, 2758, 1726, 3072, 3073, 1723,
	1468, 2058, 2059, 2060, 5539, 1651, 182, 5667, 182, 3113,
	2052, 2053, 2054, 2055, 2056, 2057, 1725, 1896, 1897, 3101,
	3100, 3102, 3462, 3464, 3463, 3106, 2742, 2052, 2053, 2054,
	2055, 2056, 2057, 1512, 5548, 4273, 2718, 902, 1432, 1107,
	1014, 955, 2079, 2776, 2775, 2049, 221, 3606, 3513, 2061,
	2062, 2063, 3056, 711, 3604, 765, 5087, 3985, 4590, 3984,
	1726, 2604, 4736, 1723, 2605, 5213, 2019, 1531, 2610, 178,
	2602, 2742, 1728, 5978, 5941, 2607, 2611, 2606, 3155, 2608,
	1587, 3153, 171, 2609, 2072, 2073, 2603, 5280, 3983, 3568,
	3982, 6080, 2774, 2612, 971, 3605, 970, 5817, 3553, 902,
	3515, 2017, 3603, 6236, 5419, 4403, 4292, 3514, 2740, 2742,
	5816, 4076, 4077, 4078, 6107, 4356, 2740, 969, 3672, 968,
	4070, 4071, 4072, 4073, 4074, 4075, 2742, 2742, 2742, 2019,
	3086, 2964, 6235, 5333, 4226, 1579, 1728, 4942, 4938, 2020,
	2745, 3664, 2793, 2788, 3186, 3192, 1588, 3024, 5036, 4928,
	3667, 3669, 4479, 1722, 5933, 2963, 4076, 4077, 4078, 1533,
	5545, 2740, 5519, 6106, 2743, 4070, 4071, 4072, 4073, 4074,
	4075, 5632, 1443, 3265, 4371, 4377, 2740, 5544, 2740, 2740,
	5934, 903, 2740, 4976, 3176, 2745, 1721, 5982, 3661, 1534,
	4054, 1117, 1535, 3178, 5774, 2740, 1536, 2740, 3194, 3313,
	1443, 2740, 2020, 2770, 5294, 2813, 2796, 2747, 2648, 2743,
	3203, 3068, 3214, 3202, 4931, 2021, 6083, 1722, 1537, 2870,
	5954, 5566, 2748, 2745, 3917, 5268, 2664, 195, 3915, 3087,
	5262, 3515, 4259, 3382, 5051, 3871, 2678, 3769, 3521, 4392,
	2745, 2745, 2745, 2870, 4389, 4388, 4252, 2743, 3314, 1589,
	3843, 3264, 221, 3088, 4251, 4257, 1540, 1779, 4555, 1686,
	2887, 1278, 4253, 3085, 2743, 2743, 2743, 2748, 899, 3195,
	1728, 5037, 3129, 1538, 2616, 3117, 5040, 222, 2021, 1581,
	1512, 5038, 4983, 1777, 2617, 1684, 4971, 4551, 4550, 4549,
	1539, 3084, 3315, 2865, 3844, 3312, 4548, 1409, 2666, 5756,
	4547, 4488, 2864, 6165, 4486, 2748, 2618, 4483, 897, 5035,
	4481, 4330, 1302, 1302, 918, 1302, 3505, 1530, 1302, 6149,
	3828, 2995, 2748, 2748, 2748, 4255, 5039, 1541, 1302, 1302,
	3846, 2847, 4248, 2843, 6001, 1302, 4258, 1302, 1302, 1302,
	1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 2827, 1302,
	3132, 1302, 3615, 1302, 1302, 1302, 1302, 1302, 1302, 2785,
	1302, 1302, 1302, 1580, 3286, 1302, 881, 900, 3316, 895,
	1728, 1302, 1458, 913, 3764, 1302, 1302, 1302, 1302, 3916,
	901, 3506, 4305, 3914, 1532, 895, 6079, 3069, 3465, 3918,
	3283, 6024, 3830, 3392, 1776, 3394, 1683, 6109, 1456, 2629,
	3354, 5000, 2771, 3417, 3417, 3533, 1728, 4977, 768, 3429,
	913, 2068, 1598, 2773, 2772, 4254, 3758, 1676, 1591, 2904,
	2058, 2059, 2060, 3188, 917, 1670, 3000, 4063, 1190, 2052,
	2053, 2054, 2055, 2056, 2057, 4925, 4064, 863, 1665, 220,
	904, 219, 901, 4215, 3361, 906, 3485, 2950, 1617, 3311,
	985, 1585, 5235, 3736, 769, 5593, 3759, 4256, 3496, 5980,
	3786, 1437, 2769, 1582, 2898, 1191, 913, 4260, 3384, 3324,
	2755, 2795, 3561, 4450, 2937, 2936, 3780, 1925, 1778, 2935,
	1685, 3791, 853, 222, 5775, 766, 3792, 767, 1866, 3130,
	3549, 913, 1562, 5660, 1865, 863, 2677, 2897, 6108, 1680,
	1646, 1566, 261, 4259, 3536, 3131, 3011, 1531, 1040, 1455,
	1028, 3001, 3540, 4853, 4309, 4308, 2833, 2946, 4763, 5116,
	863, 863, 2791, 2945, 2755, 2833, 4261, 5512, 3516, 6000,
	1590, 2750, 3459, 1645, 3591, 2749, 3595, 1657, 1768, 3002,
	1476, 815, 815, 1624, 5776, 1040, 3575, 2068, 3037, 863,
	298, 2530, 3788, 3584, 3042, 1781, 2058, 2059, 2060, 1694,
	4978, 1557, 863, 4955, 1689, 2052, 2053, 2054, 2055, 2056,
	2057, 3539, 4114, 3763, 4408, 3683, 1868, 913, 913, 3554,
	1583, 4404, 4915, 1584, 3559, 3560, 3281, 880, 3127, 3300,
	863, 4618, 1834, 1457, 3422, 863, 4255, 4008, 5513, 1533,
	2028, 3418, 3418, 1653, 1843, 5769, 3352, 4258, 1192, 881,
	4535, 3346, 4854, 3275, 3481, 3363, 3365, 1922, 3367, 3357,
	3369, 3370, 3371, 5999, 2944, 1922, 2537, 2807, 815, 1534,
	1690, 5438, 1535, 3534, 4216, 1302, 1536, 3252, 3253, 3254,
	3255, 3842, 4454, 5757, 3533, 220, 3913, 219, 2648, 312,
	3651, 1403, 3570, 878, 3399, 3790, 1106, 2942, 1537, 3556,
	5661, 958, 2797, 3697, 5559, 224, 3530, 1437, 1189, 4492,
	3287, 2998, 3458, 4491, 4490, 1299, 2866, 3362, 4069, 5439,
	3970, 2715, 4079, 4080, 4081, 3528, 4254, 1867, 3418, 1678,
	4390, 5033, 3622, 3269, 3678, 3829, 1540, 3579, 3613, 3150,
	3729, 3152, 4896, 3919, 3608, 1856, 1656, 3187, 4455, 4084,
	3532, 3420, 3420, 1538, 3292, 1810, 4083, 4304, 4536, 2890,
	3400, 312, 1675, 3550, 879, 1677, 4085, 1870, 4256, 3331,
	1539, 1407, 1711, 1688, 3679, 3681, 1715, 1638, 3350, 804,
	3419, 3419, 1654, 3536, 4377, 4451, 3496, 3373, 3801, 3937,
	3865, 3372, 3477, 3808, 5659, 134, 913, 817, 986, 3668,
	996, 918, 996, 996, 1563, 3785, 1117, 1541, 1659, 733,
	733, 1681, 3529, 1567, 1658, 1187, 3729, 1752, 4449, 3395,
	3816, 3779, 3820, 3821, 3425, 1763, 2999, 1404, 2665, 1869,
	3734, 809, 3754, 1564, 1108, 1719, 999, 1561, 3420, 3660,
	3718, 1302, 5106, 1636, 1679, 3666, 1565, 913, 5105, 1180,
	913, 4453, 913, 1133, 847, 1625, 3558, 3487, 3468, 3753,
	1129, 3484, 3755, 3756, 3789, 3483, 3482, 3419, 2797, 2888,
	880, 4969, 4445, 1558, 4956, 1299, 863, 3526, 4069, 5243,
	6076, 3215, 4079, 4080, 4081, 4409, 3498, 3499, 3500, 3501,
	3502, 6075, 4405, 4758, 4624, 3546, 2658, 3787, 2029, 2779,
	5942, 5297, 5767, 3719, 1839, 4391, 1556, 4362, 3817, 2657,
	3531, 917, 3534, 898, 863, 1661, 4083, 3535, 5797, 3696,
	5514, 3564, 5682, 5927, 5591, 5813, 4085, 3644, 3900, 5204,
	3135, 2779, 2889, 3647, 3648, 988, 878, 3134, 994, 5296,
	994, 994, 1692, 3859, 1655, 3530, 1637, 2784, 1652, 6077,
	2798, 3631, 3904, 4823, 2799, 4896, 3639, 913, 913, 3912,
	3911, 4322, 5203, 4897, 913, 913, 4241, 3091, 5056, 817,
	996, 3632, 996, 996, 3649, 1687, 1302, 4923, 3656, 4981,
	1660, 1302, 1302, 2852, 1302, 5295, 5267, 6271, 1302, 3532,
	3946, 6270, 3948, 3949, 5938, 3887, 1302, 3278, 3282, 4824,
	3284, 5937, 3953, 3954, 3956, 3671, 3670, 879, 1302, 5281,
	3519, 3798, 3680, 2659, 5796, 2556, 3417, 1428, 1084, 5781,
	4456, 5358, 4898, 863, 1259, 1261, 3774, 4951, 4910, 3342,
	3343, 3344, 3345, 1259, 1261, 1259, 4469, 2861, 4468, 4444,
	4406, 3825, 3826, 1579, 5273, 3870, 1302, 1302, 6234, 5930,
	3374, 3529, 1302, 4452, 5936, 2778, 5218, 4317, 3439, 4564,
	2879, 1129, 4563, 1082, 5997, 4899, 4635, 6068, 1302, 1302,
	3720, 3291, 5753, 1302, 4670, 1570, 1085, 5128, 1809, 918,
	5504, 4475, 1302, 1410, 4669, 853, 3527, 2778, 1302, 3662,
	2923, 2912, 2884, 813, 2790, 1255, 4814, 2951, 1104, 5570,
	5052, 3760, 1302, 4913, 1808, 4297, 4042, 988, 994, 3979,
	994, 994, 965, 1302, 983, 1639, 2798, 299, 940, 3973,
	2799, 4033, 3765, 1484, 3766, 4890, 3525, 5214, 3768, 2854,
	2613, 3766, 1572, 2971, 1115, 3545, 4245, 1302, 1302, 1302,
	3813, 1115, 2976, 2974, 1782, 1302, 1302, 1302, 1635, 3531,
	1302, 5026, 3802, 3804, 815, 4021, 3535, 1438, 1181, 1134,
	2977, 1302, 853, 2975, 5025, 3784, 2982, 4786, 3923, 3924,
	3925, 3926, 3927, 3928, 3929, 4822, 4897, 3467, 6153, 3935,
	3936, 1620, 1792, 1302, 4106, 4122, 1620, 1581, 1745, 917,
	4113, 3845, 3847, 3848, 4046, 2977, 2975, 3, 4016, 4017,
	4133, 1694, 3890, 4982, 3972, 1734, 3806, 2629, 1302, 6266,
	6074, 1749, 1750, 1302, 3418, 6181, 4164, 4164, 817, 3878,
	3417, 4176, 4164, 4164, 3877, 1299, 3876, 2973, 4069, 4076,
	4077, 4078, 4079, 4080, 4081, 4898, 1260, 4649, 4070, 4071,
	4072, 4073, 4074, 4075, 863, 1260, 863, 1260, 5858, 863,
	5448, 5671, 1697, 1839, 863, 863, 1695, 3051, 3052, 3053,
	3952, 3903, 3908, 4198, 4877, 4010, 4083, 4086, 4087, 4088,
	5420, 1580, 4911, 3909, 4351, 4140, 4085, 1103, 4899, 4316,
	2972, 3115, 4048, 4037, 1111, 1113, 5495, 5272, 5144, 5496,
	3869, 863, 5497, 984, 5200, 4912, 5129, 939, 3980, 3981,
	5123, 4813, 3986, 4671, 1197, 4206, 4821, 6202, 772, 853,
	5498, 5145, 3945, 6201, 5861, 5860, 6008, 6169, 6168, 6007,
	3959, 6115, 5716, 6114, 3420, 4005, 6010, 2683, 863, 863,
	4123, 3963, 3192, 3962, 1086, 5484, 6013, 181, 5717, 4047,
	5480, 3971, 6014, 4227, 6009, 6011, 5863, 5500, 5787, 4205,
	1619, 6012, 5862, 3419, 5677, 1619, 815, 5499, 815, 5678,
	6203, 4839, 1302, 3886, 1497, 4149, 2726, 5501, 5022, 1498,
	4318, 1582, 1775, 1506, 1552, 3805, 1464, 4242, 872, 3995,
	3993, 4341, 4006, 5670, 4315, 6016, 3947, 6015, 4212, 4076,
	4077, 4078, 3077, 1908, 1302, 4199, 4878, 4011, 4070, 4071,
	4072, 4073, 4074, 4075, 1569, 4174, 1029, 4025, 5477, 5478,
	4172, 3973, 5870, 3116, 3016, 1718, 3418, 4013, 3418, 4208,
	5020, 4265, 4014, 4349, 1483, 4036, 4293, 4039, 1303, 4015,
	1770, 5823, 4264, 1573, 1471, 1521, 1238, 1568, 4012, 4124,
	134, 5486, 5479, 5715, 5482, 5483, 5485, 5481, 5636, 4313,
	4327, 5534, 5232, 4379, 4329, 1129, 4331, 5042, 774, 774,
	4002, 184, 4000, 791, 1505, 5018, 3998, 4320, 3999, 4001,
	5021, 4246, 4112, 710, 4126, 712, 714, 4300, 4161, 4095,
	4096, 4097, 4222, 3910, 4177, 4178, 3856, 4335, 1583, 4116,
	3872, 1584, 3035, 3822, 2537, 1510, 5865, 5502, 5503, 3491,
	4128, 1255, 5864, 5866, 5867, 2733, 3047, 2559, 6029, 4285,
	1129, 1129, 2016, 4348, 1907, 2795, 5019, 1844, 1482, 1302,
	3275, 1842, 1762, 4143, 1671, 4145, 3420, 4144, 3420, 1434,
	4169, 4171, 1769, 4168, 4167, 6031, 1470, 1244, 1496, 5157,
	6247, 4395, 4396, 4190, 6030, 6217, 6243, 4184, 863, 4220,
	5735, 6032, 5734, 6034, 4202, 3419, 4747, 3419, 6289, 6176,
	6036, 6265, 4217, 2033, 3562, 1500, 5463, 263, 5265, 4443,
	5217, 5428, 4724, 4230, 5433, 3517, 3466, 4231, 5431, 2833,
	5432, 5434, 787, 787, 3435, 3256, 2781, 3581, 2037, 4334,
	1787, 3104, 755, 2859, 5166, 2872, 2767, 4262, 2862, 804,
	1502, 4288, 1172, 3424, 4283, 4284, 1501, 2861, 6039, 5892,
	5893, 6037, 4375, 5443, 6045, 6046, 5709, 5163, 5896, 5707,
	4434, 5891, 4435, 3620, 3243, 5710, 5444, 4298, 3133, 913,
	913, 5895, 6033, 1155, 3247, 5475, 3245, 3388, 3389, 6044,
	3242, 3969, 3244, 3246, 2896, 5195, 913, 4861, 4139, 2860,
	4470, 1503, 4471, 4472, 3358, 6220, 4401, 4138, 4326, 2727,
	4328, 6264, 3619, 5947, 5948, 5947, 3621, 5430, 5948, 5435,
	185, 186, 187, 188, 3961, 3200, 3201, 6038, 1922, 4003,
	4414, 5687, 4596, 4597, 2863, 4357, 5875, 4364, 4350, 4862,
	4502, 4431, 4368, 3618, 4138, 4378, 1504, 5874, 3778, 996,
	4280, 1413, 3080, 4546, 5684, 4188, 4189, 1507, 5442, 5474,
	1105, 3023, 5686, 5685, 1025, 934, 863, 6044, 4018, 4543,
	6132, 4885, 4863, 4864, 4865, 4397, 3393, 4023, 4136, 954,
	297, 6272, 3379, 6171, 3437, 4433, 5555, 4437, 5815, 4076,
	4077, 4078, 1509, 1508, 913, 2532, 3590, 4465, 4070, 4071,
	4072, 4073, 4074, 4075, 4511, 6172, 5257, 5032, 5031, 3256,
	4756, 4288, 1302, 4528, 4526, 3931, 1302, 3930, 1859, 3252,
	3253, 3254, 3255, 3040, 3038, 2900, 4004, 2899, 2685, 1302,
	4185, 4155, 4160, 4158, 4159, 4157, 3378, 4153, 4156, 1302,
	2633, 863, 863, 2632, 4732, 4100, 3586, 863, 5175, 1302,
	1302, 4727, 4726, 1302, 1302, 1302, 4441, 1302, 4771, 4229,
	4229, 6170, 4542, 5773, 1129, 6113, 6112, 5946, 1302, 1499,
	3815, 5944, 4562, 4552, 5872, 5675, 3823, 4420, 5641, 4559,
	5224, 1302, 4427, 1302, 4594, 5005, 4870, 994, 5174, 4155,
	4160, 4158, 4159, 4157, 4703, 4153, 4156, 5173, 1302, 1512,
	4797, 4228, 4702, 3248, 4640, 1302, 4644, 4643, 4509, 1302,
	1302, 4155, 4160, 4158, 4159, 4157, 4508, 4153, 4156, 4419,
	3905, 3835, 3747, 1302, 3741, 3737, 3717, 3715, 1302, 3637,
	3444, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
	1302, 1302, 1302, 1302, 3880, 1302, 3386, 4501, 3147, 3146,
	2885, 2768, 1302, 1302, 1302, 2719, 4534, 2714, 4503, 1910,
	1302, 1860, 1302, 4730, 4160, 4158, 4159, 4157, 1712, 1302,
	853, 1663, 1662, 1302, 1628, 1477, 1391, 1157, 1302, 1146,
	808, 2047, 1302, 886, 4613, 4614, 882, 5092, 4599, 3293,
	1302, 1302, 1302, 3252, 3253, 3254, 3255, 4685, 4520, 1302,
	3249, 4521, 6099, 3392, 6019, 6018, 5897, 5142, 5402, 2629,
	5334, 5206, 5093, 3417, 4943, 4939, 3417, 4798, 4648, 4571,
	1406, 4236, 3901, 2806, 4737, 4545, 2803, 4164, 4176, 4164,
	4164, 4164, 1268, 1110, 1093, 1261, 4744, 4310, 3943, 3944,
	2858, 4560, 806, 1302, 1302, 3174, 1302, 3978, 4589, 3965,
	4333, 5241, 3402, 2755, 5240, 2637, 4768, 4044, 2636, 6195,
	5989, 4656, 4657, 4658, 4659, 4660, 4661, 4662, 4663, 4664,
	4665, 4666, 4667, 4668, 786, 4672, 5284, 1302, 4588, 3964,
	5541, 5408, 5374, 5282, 5127, 5285, 1302, 1302, 5065, 863,
	4617, 1839, 4181, 785, 4062, 4007, 4583, 888, 3205, 3096,
	3952, 885, 4717, 4718, 5286, 863, 874, 6194, 6088, 5617,
	5614, 5373, 913, 5357, 5327, 5322, 5321, 4984, 1302, 863,
	4973, 4806, 4580, 4603, 4604, 4605, 4606, 4972, 4970, 4957,
	4950, 4859, 170, 4494, 4493, 4489, 3496, 1140, 4815, 4487,
	4485, 4484, 913, 4796, 4482, 4480, 4474, 892, 4473, 2641,
	891, 815, 4463, 890, 815, 4769, 4772, 4438, 4721, 4432,
	4430, 889, 4412, 4778, 4632, 4619, 4779, 4410, 4407, 4645,
	4646, 4638, 4339, 4338, 4337, 863, 2833, 4784, 4857, 3992,
	4647, 4782, 4767, 3831, 3417, 3549, 3810, 2833, 2833, 3994,
	3259, 4872, 3762, 3761, 4851, 3275, 4653, 3723, 3722, 3258,
	3259, 4841, 4805, 4725, 4642, 3241, 4728, 3064, 3021, 3020,
	3973, 3418, 4174, 2755, 3418, 3019, 3018, 4891, 2981, 2965,
	4265, 1839, 2962, 2961, 1839, 2958, 1839, 4907, 4803, 2953,
	2947, 4264, 3575, 2939, 4884, 2931, 4753, 4684, 2928, 2926,
	4119, 4929, 4701, 4698, 4849, 4711, 2925, 4699, 4818, 4906,
	4835, 2924, 2922, 4712, 4836, 2919, 2918, 4720, 787, 787,
	2913, 2911, 787, 787, 4723, 2908, 4729, 1211, 1212, 4733,
	4734, 4713, 2903, 4894, 4902, 4697, 4901, 4867, 4903, 4800,
	2895, 4740, 4876, 4866, 4914, 2883, 2874, 2873, 2850, 4739,
	2849, 4741, 4742, 2848, 2846, 2844, 2842, 2828, 4759, 2826,
	2794, 2789, 2782, 4700, 4751, 4781, 2634, 4704, 3217, 3028,
	3218, 3581, 3988, 3275, 3854, 3853, 3973, 1179, 1132, 1122,
	3027, 3420, 815, 815, 3420, 4801, 4265, 4799, 4919, 4922,
	4795, 5388, 3458, 4791, 4883, 5083, 5072, 4264, 5070, 5068,
	5067, 4582, 4581, 4579, 4578, 3729, 4577, 4576, 1299, 4575,
	3419, 4069, 4574, 3419, 1922, 4079, 4080, 4081, 4573, 5028,
	4569, 4826, 4567, 3938, 3238, 815, 3149, 4623, 3148, 3143,
	4832, 3236, 3239, 3235, 3142, 3237, 3141, 3140, 4276, 3180,
	3139, 4840, 3418, 3418, 4842, 3138, 4886, 3137, 3136, 4083,
	5751, 3291, 4834, 6155, 804, 804, 4850, 804, 804, 4085,
	6154, 6125, 5904, 4814, 4868, 5312, 5308, 5154, 4871, 5153,
	4874, 1097, 5120, 5119, 4446, 3716, 3709, 3705, 3550, 3701,
	2886, 5274, 4882, 4847, 3897, 3418, 3896, 4927, 3895, 3894,
	3973, 3721, 6238, 1264, 3922, 5076, 4024, 4307, 2930, 3893,
	4989, 3900, 4920, 4924, 3557, 2820, 4921, 1668, 1523, 1514,
	858, 4988, 5041, 1265, 1302, 804, 918, 5256, 225, 5305,
	4908, 4828, 6256, 3274, 863, 863, 863, 863, 5086, 4933,
	859, 1302, 1302, 3273, 4591, 6255, 3441, 1302, 1302, 5221,
	3874, 1483, 5761, 5760, 1302, 1302, 1707, 4998, 1127, 5302,
	5210, 1302, 3420, 3420, 4953, 907, 2532, 1708, 1302, 5247,
	4496, 4959, 4353, 3578, 3538, 3445, 2709, 2701, 787, 1302,
	5007, 2649, 2642, 5054, 3023, 4990, 1480, 1469, 1463, 1461,
	4985, 3419, 3419, 5058, 5059, 5060, 5061, 5062, 4628, 1440,
	6110, 5472, 5090, 874, 5603, 3420, 5066, 5602, 5553, 5363,
	5027, 4887, 4498, 4440, 1302, 4382, 4380, 4352, 4314, 5006,
	4209, 3522, 1302, 3518, 3443, 1302, 3438, 1302, 3049, 3041,
	3039, 3036, 2824, 2819, 3419, 2720, 917, 2705, 2697, 2695,
	2675, 1774, 1773, 1772, 1767, 1766, 4907, 1764, 1757, 1753,
	1716, 1713, 1709, 1302, 1704, 1682, 1629, 3417, 3417, 5050,
	1546, 3417, 3774, 1542, 5055, 5167, 1522, 817, 787, 787,
	5049, 787, 5063, 1513, 4164, 4680, 3496, 5184, 5310, 817,
	5309, 3797, 1083, 2674, 4460, 4462, 1428, 1081, 945, 6022,
	5077, 5078, 5079, 5080, 5081, 5082, 5951, 5084, 5085, 945,
	945, 5939, 1445, 5840, 4991, 3429, 913, 5582, 5673, 5605,
	5522, 5462, 5313, 5269, 787, 5255, 5158, 5159, 5069, 5188,
	5071, 998, 5244, 5030, 4777, 4204, 5205, 3939, 863, 5222,
	3860, 3543, 3537, 1783, 1016, 1020, 2732, 2643, 1839, 2624,
	2598, 1813, 3170, 3171, 5201, 3004, 3003, 3967, 1302, 790,
	804, 790, 790, 790, 5182, 5183, 6263, 6248, 6086, 913,
	5793, 3541, 4802, 5215, 4321, 2856, 4504, 5211, 2755, 5752,
	2802, 5122, 4755, 1320, 4507, 1319, 1312, 2615, 1125, 5219,
	1800, 5230, 5540, 817, 815, 6066, 5535, 5234, 5225, 5057,
	5245, 5755, 5270, 5141, 5537, 815, 815, 5932, 5533, 815,
	2656, 3549, 5529, 4218, 4987, 5177, 1302, 5228, 5209, 4221,
	3448, 4210, 4524, 3455, 1612, 697, 2867, 815, 2755, 3472,
	2833, 5289, 2662, 2661, 5160, 5547, 5264, 5546, 5161, 5242,
	5780, 5239, 5251, 5252, 5263, 4979, 3544, 5254, 3735, 4858,
	1302, 4860, 4319, 905, 3418, 3542, 1475, 5170, 5171, 2943,
	5792, 5176, 4855, 1578, 1575, 3418, 3418, 3809, 5180, 3418,
	5288, 3504, 2983, 3832, 4278, 3833, 4277, 3834, 5261, 121,
	3836, 120, 119, 5291, 5199, 118, 117, 3418, 116, 4908,
	115, 114, 113, 52, 51, 50, 49, 48, 47, 46,
	45, 4572, 3858, 72, 71, 5118, 70, 69, 5169, 68,
	5121, 3866, 67, 66, 65, 64, 63, 62, 61, 4914,
	60, 5237, 5187, 59, 58, 57, 5248, 56, 55, 54,
	53, 5271, 44, 5249, 43, 42, 41, 5306, 40, 39,
	1302, 38, 4076, 4077, 4078, 37, 36, 35, 34, 815,
	32, 4070, 4071, 4072, 4073, 4074, 4075, 5341, 31, 30,
	5151, 913, 29, 28, 3420, 33, 27, 3906, 5275, 26,
	25, 24, 23, 810, 1243, 3420, 3420, 2996, 5277, 3420,
	4554, 3898, 1698, 733, 763, 1188, 1186, 1848, 1165, 3298,
	1175, 2997, 3523, 3419, 112, 111, 110, 3420, 109, 87,
	3325, 5287, 86, 85, 3419, 3419, 84, 83, 3419, 3418,
	82, 81, 3351, 80, 79, 3298, 78, 77, 76, 5,
	75, 90, 4651, 92, 91, 89, 3419, 88, 73, 5314,
	5311, 4655, 18, 1302, 17, 1691, 2669, 207, 5315, 5318,
	1411, 1302, 1302, 1302, 3550, 2681, 3206, 4373, 5260, 4354,
	4888, 5382, 1516, 6144, 3573, 5913, 4676, 4762, 193, 5768,
	4250, 4247, 4895, 4760, 5798, 4904, 4766, 1302, 1302, 3431,
	4764, 1302, 1302, 1302, 5359, 5360, 3427, 5362, 6216, 5429,
	5401, 4050, 3355, 3360, 5423, 5705, 5464, 6027, 5226, 5461,
	787, 5185, 3493, 176, 787, 787, 5683, 5441, 1302, 3377,
	2631, 126, 857, 856, 5427, 6021, 1273, 5721, 5908, 5487,
	5197, 3774, 5476, 4754, 190, 1302, 3417, 1144, 3114, 3420,
	1194, 3774, 5184, 750, 3103, 1171, 2635, 5194, 5193, 5894,
	1302, 1302, 5890, 5889, 4714, 3385, 5191, 3398, 2619, 108,
	107, 4302, 4303, 863, 106, 105, 104, 5507, 3419, 4768,
	103, 4312, 102, 101, 100, 99, 98, 97, 863, 96,
	95, 94, 93, 16, 4907, 863, 5489, 15, 787, 787,
	14, 5506, 314, 11, 5653, 5651, 5492, 5652, 5650, 3263,
	920, 2076, 5317, 3193, 1262, 2036, 1254, 2755, 5658, 4639,
	5115, 5644, 2553, 6023, 4735, 1045, 5396, 1046, 5407, 1732,
	5456, 1043, 1073, 1626, 5147, 4695, 863, 5437, 5510, 5389,
	4686, 3323, 5523, 3319, 4857, 5375, 3308, 3330, 5135, 3279,
	996, 1297, 1296, 913, 3289, 4035, 5574, 2551, 5384, 5385,
	1291, 5386, 1292, 5387, 5454, 4825, 1287, 5454, 2027, 2024,
	5580, 3889, 4907, 918, 3078, 913, 913, 2829, 5569, 3617,
	4340, 4398, 3623, 5814, 815, 5516, 5416, 5449, 3796, 2083,
	1211, 1212, 1890, 3128, 4906, 1888, 802, 5490, 5556, 5136,
	5508, 5598, 6, 5440, 5505, 4767, 1217, 5473, 3309, 2078,
	3017, 2, 1, 0, 5550, 5469, 5551, 0, 918, 996,
	5531, 0, 3025, 0, 74, 5470, 5609, 3026, 5611, 5493,
	5527, 3029, 815, 146, 0, 3031, 5452, 170, 0, 5621,
	5530, 5572, 5583, 0, 3418, 0, 0, 22, 0, 5596,
	21, 0, 10, 0, 0, 9, 0, 0, 8, 5524,
	0, 0, 5575, 5577, 3973, 5646, 7, 1302, 5589, 0,
	819, 0, 0, 1302, 4265, 0, 0, 0, 20, 1302,
	19, 4466, 5585, 917, 1302, 4264, 1302, 0, 994, 5639,
	5640, 5592, 3418, 5594, 5619, 5633, 5635, 5595, 5606, 1302,
	0, 0, 0, 0, 0, 13, 0, 12, 0, 951,
	815, 0, 0, 0, 0, 0, 0, 4907, 0, 0,
	951, 951, 0, 0, 1302, 5620, 0, 4908, 917, 0,
	5618, 817, 5688, 0, 5700, 0, 819, 5623, 1302, 5689,
	0, 819, 951, 1302, 0, 0, 819, 0, 819, 5422,
	5637, 0, 5436, 0, 3420, 951, 951, 994, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5642, 1071, 1071,
	3418, 0, 0, 0, 4512, 4513, 0, 5727, 951, 951,
	951, 0, 0, 3419, 0, 0, 0, 0, 5728, 0,
	0, 0, 0, 4381, 5666, 4383, 5722, 787, 0, 0,
	0, 0, 3420, 0, 0, 4908, 0, 0, 0, 5664,
	0, 0, 863, 951, 5730, 5733, 0, 0, 0, 0,
	5690, 0, 5711, 5712, 863, 0, 5713, 5714, 0, 0,
	0, 3419, 1302, 0, 5696, 5695, 5691, 0, 0, 0,
	0, 5765, 0, 5737, 0, 817, 0, 0, 0, 3417,
	0, 5764, 4561, 0, 0, 815, 0, 0, 1302, 1302,
	5758, 0, 0, 0, 863, 0, 0, 0, 5704, 815,
	0, 0, 0, 0, 0, 1302, 0, 5783, 0, 5643,
	3420, 5736, 0, 5788, 0, 0, 5738, 5228, 5739, 5732,
	5746, 0, 0, 0, 5743, 0, 0, 1302, 5754, 0,
	4439, 913, 0, 5747, 913, 913, 913, 5745, 0, 3419,
	0, 0, 0, 5789, 0, 3418, 0, 0, 5819, 5762,
	0, 0, 0, 3190, 3190, 1302, 0, 0, 0, 3418,
	1302, 1302, 1302, 5785, 1302, 5809, 0, 5786, 0, 5782,
	0, 5795, 5794, 1302, 0, 0, 0, 5803, 0, 5805,
	4908, 5807, 0, 1129, 0, 1839, 0, 0, 2629, 0,
	5811, 0, 0, 0, 5187, 0, 0, 5810, 3496, 0,
	0, 5869, 1302, 0, 0, 5824, 0, 5888, 5825, 0,
	5826, 5827, 0, 5791, 0, 0, 1839, 815, 1839, 5876,
	0, 0, 0, 5835, 5837, 0, 4497, 5829, 0, 4499,
	5830, 5886, 5915, 0, 0, 0, 0, 5873, 0, 0,
	0, 5912, 5853, 5854, 853, 0, 0, 0, 5489, 3325,
	3325, 0, 5833, 5868, 0, 3420, 0, 0, 0, 5918,
	0, 0, 0, 5910, 0, 0, 5911, 0, 5902, 3420,
	5905, 0, 5920, 5925, 0, 0, 5879, 3418, 0, 0,
	5800, 5884, 913, 5887, 3419, 0, 0, 4523, 0, 4525,
	0, 4527, 0, 5919, 0, 5907, 0, 0, 3419, 0,
	0, 0, 0, 0, 5723, 1839, 5921, 0, 0, 918,
	5922, 0, 5233, 0, 0, 0, 1302, 0, 3325, 3325,
	3325, 5929, 0, 0, 0, 0, 5953, 0, 5935, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	5646, 5945, 1302, 5943, 1302, 1302, 0, 0, 5949, 0,
	1302, 0, 0, 0, 5955, 0, 0, 5966, 0, 0,
	0, 5971, 6006, 0, 0, 0, 0, 0, 0, 0,
	815, 0, 0, 0, 0, 0, 5974, 5972, 5998, 5965,
	0, 5967, 5700, 5969, 0, 5970, 1302, 3420, 0, 0,
	5983, 0, 0, 6020, 5968, 0, 5988, 0, 0, 5992,
	0, 0, 5991, 5990, 0, 1839, 0, 0, 6004, 6005,
	0, 0, 0, 0, 0, 0, 3419, 0, 1302, 917,
	1129, 0, 6051, 0, 0, 0, 0, 0, 0, 4907,
	3418, 0, 1302, 0, 0, 0, 6067, 0, 996, 996,
	0, 2755, 6026, 0, 6064, 0, 6059, 0, 5316, 0,
	6061, 0, 0, 0, 6058, 0, 6057, 6047, 6069, 6070,
	0, 0, 0, 6054, 6055, 5916, 0, 0, 0, 0,
	0, 0, 0, 0, 951, 0, 0, 6063, 6060, 4843,
	4844, 0, 0, 0, 951, 996, 6093, 951, 0, 913,
	2668, 0, 0, 0, 951, 0, 1302, 951, 6084, 5215,
	5349, 0, 0, 2795, 0, 6100, 6087, 6081, 6078, 6096,
	6097, 0, 6092, 0, 0, 6089, 0, 6091, 6117, 1839,
	1839, 6116, 2707, 6120, 6095, 0, 0, 0, 2716, 0,
	1302, 1302, 0, 0, 1302, 6102, 0, 0, 6105, 2629,
	3420, 6071, 0, 3392, 0, 0, 951, 0, 5662, 0,
	0, 5368, 5369, 0, 5915, 913, 913, 6130, 0, 5665,
	0, 0, 0, 4907, 0, 817, 0, 815, 6139, 3419,
	6129, 6118, 6119, 6131, 0, 6127, 994, 994, 6122, 0,
	6143, 6136, 6137, 0, 6140, 6145, 0, 5910, 0, 819,
	819, 6134, 6135, 0, 0, 6142, 0, 6141, 0, 5692,
	913, 6152, 0, 0, 819, 0, 0, 0, 0, 0,
	0, 1302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1302, 994, 6156, 0, 0, 3418, 6159, 6179,
	0, 6161, 819, 819, 1302, 0, 819, 0, 0, 6167,
	0, 0, 0, 6160, 0, 0, 0, 0, 0, 0,
	0, 0, 6186, 0, 6188, 5800, 0, 0, 0, 1302,
	6123, 6124, 4908, 0, 6126, 0, 6191, 0, 6187, 3288,
	0, 0, 817, 6207, 6208, 6209, 0, 5700, 6185, 3303,
	3304, 3305, 3306, 6193, 6204, 913, 6184, 0, 0, 6218,
	6219, 4907, 815, 0, 0, 0, 6223, 1071, 6211, 6198,
	0, 815, 0, 6147, 0, 6225, 4276, 0, 0, 6200,
	0, 6222, 0, 6226, 6179, 6227, 0, 0, 5427, 6241,
	6233, 0, 0, 2707, 0, 6224, 0, 0, 0, 0,
	6245, 6242, 0, 5801, 5802, 6250, 6249, 3420, 0, 817,
	1302, 0, 6196, 6197, 1129, 0, 6251, 0, 6254, 0,
	1608, 6257, 3418, 6260, 2877, 817, 0, 6261, 6262, 0,
	0, 3418, 6267, 6268, 0, 6274, 3419, 0, 5427, 6276,
	6275, 996, 996, 6284, 6279, 1071, 0, 6286, 6179, 6288,
	6287, 6233, 0, 6273, 6280, 6290, 6258, 5916, 0, 0,
	6291, 6282, 6283, 0, 6179, 6295, 4908, 0, 0, 0,
	2535, 0, 0, 0, 0, 0, 0, 0, 0, 6233,
	6205, 0, 2878, 0, 0, 0, 0, 0, 0, 0,
	0, 2707, 0, 3050, 0, 0, 951, 0, 0, 815,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 951, 0, 0, 1610, 0, 951, 0,
	0, 0, 951, 951, 0, 0, 0, 0, 0, 0,
	0, 0, 3420, 0, 0, 0, 0, 0, 0, 0,
	0, 3420, 0, 0, 0, 0, 0, 6205, 1071, 0,
	951, 0, 3592, 0, 0, 0, 0, 0, 0, 3418,
	0, 3419, 951, 6269, 0, 0, 0, 0, 951, 0,
	3419, 0, 0, 0, 0, 0, 0, 0, 0, 994,
	994, 2079, 0, 0, 2049, 0, 0, 0, 2061, 2062,
	2063, 787, 0, 0, 4908, 0, 0, 787, 787, 0,
	2604, 0, 0, 2605, 1599, 0, 0, 2610, 0, 2602,
	0, 0, 0, 5043, 2607, 2611, 2606, 819, 2608, 0,
	0, 0, 2609, 2072, 2073, 2603, 1609, 5048, 1071, 1071,
	819, 819, 2612, 0, 0, 819, 819, 0, 0, 0,
	0, 0, 0, 0, 0, 787, 0, 951, 0, 0,
	819, 0, 0, 1927, 819, 3325, 3325, 5064, 0, 5993,
	5994, 0, 819, 0, 819, 0, 1605, 0, 0, 3420,
	0, 819, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 819, 819, 819, 819, 819, 0, 0, 1602,
	0, 0, 0, 819, 0, 0, 0, 0, 3419, 0,
	0, 0, 0, 0, 5276, 0, 0, 0, 0, 0,
	0, 0, 0, 1607, 0, 0, 0, 819, 0, 0,
	0, 0, 0, 0, 5749, 0, 0, 0, 0, 0,
	0, 0, 3325, 3325, 3325, 3325, 3325, 3325, 3325, 3325,
	3325, 3325, 3325, 3325, 3325, 0, 3325, 0, 0, 0,
	0, 0, 787, 0, 0, 1613, 129, 0, 0, 0,
	128, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	177, 0, 0, 0, 4690, 0, 0, 0, 0, 3298,
	0, 0, 0, 0, 5324, 0, 0, 0, 5326, 0,
	134, 0, 0, 1600, 0, 0, 0, 174, 0, 819,
	0, 175, 3838, 3839, 0, 0, 0, 1606, 0, 0,
	0, 3849, 0, 0, 1815, 0, 1815, 1815, 0, 0,
	179, 0, 0, 1603, 0, 0, 0, 133, 0, 0,
	1601, 0, 0, 0, 1611, 0, 0, 1071, 0, 0,
	0, 951, 0, 166, 4749, 127, 787, 1071, 3879, 0,
	1927, 0, 1927, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 787, 2079, 0, 0,
	2049, 1604, 0, 951, 2061, 2062, 2063, 0, 0, 951,
	0, 0, 0, 0, 0, 0, 2604, 0, 0, 2605,
	0, 0, 5882, 2610, 0, 2602, 0, 0, 0, 0,
	2607, 2611, 2606, 0, 2608, 0, 0, 0, 2609, 2072,
	2073, 2603, 0, 0, 0, 0, 0, 0, 2612, 3325,
	0, 0, 0, 0, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 1071, 0, 0, 173, 0, 0, 3198,
	0, 0, 0, 0, 0, 0, 123, 0, 167, 6183,
	3200, 3201, 0, 0, 150, 0, 155, 148, 0, 0,
	164, 0, 137, 1071, 0, 0, 0, 0, 0, 2079,
	3966, 3966, 2049, 0, 6199, 0, 2061, 2062, 2063, 0,
	0, 0, 0, 157, 152, 0, 0, 0, 2604, 0,
	0, 2605, 0, 151, 0, 2610, 0, 2602, 0, 0,
	122, 0, 2607, 2611, 2606, 0, 2608, 156, 144, 0,
	2609, 2072, 2073, 2603, 153, 0, 0, 0, 0, 0,
	2612, 0, 0, 0, 142, 0, 0, 5319, 5320, 0,
	1071, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 158, 161, 5340, 0, 0, 162, 0, 0,
	0, 0, 0, 0, 951, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 0, 0, 2068, 0, 0, 0,
	0, 0, 160, 0, 0, 2058, 2059, 2060, 0, 0,
	0, 0, 0, 0, 2052, 2053, 2054, 2055, 2056, 2057,
	0, 4101, 141, 0, 0, 0, 0, 1071, 0, 1071,
	0, 5364, 0, 0, 132, 0, 5367, 0, 131, 149,
	0, 140, 0, 0, 819, 134, 0, 0, 0, 143,
	0, 138, 0, 5376, 5377, 5378, 0, 139, 0, 0,
	0, 0, 165, 0, 0, 0, 1071, 0, 0, 1071,
	0, 0, 147, 0, 5383, 1071, 0, 0, 0, 0,
	136, 0, 951, 0, 951, 951, 951, 951, 0, 5616,
	0, 0, 0, 0, 0, 0, 2079, 0, 0, 2049,
	0, 0, 0, 2061, 2062, 2063, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 2604, 159, 0, 2605, 145,
	0, 0, 2610, 0, 2602, 0, 0, 0, 0, 2607,
	2611, 2606, 0, 4091, 819, 819, 819, 2609, 2072, 2073,
	2603, 0, 0, 0, 0, 0, 0, 2612, 0, 4092,
	2079, 6003, 0, 2049, 0, 0, 0, 2061, 2062, 2063,
	951, 0, 178, 0, 0, 0, 0, 0, 0, 2604,
	0, 0, 2605, 0, 0, 171, 2610, 0, 2602, 0,
	0, 0, 0, 2607, 2611, 2606, 0, 2608, 0, 787,
	0, 2609, 2072, 2073, 2603, 0, 0, 0, 0, 2079,
	0, 2612, 2049, 0, 0, 0, 2061, 2062, 2063, 0,
	0, 0, 0, 0, 0, 4093, 0, 0, 2604, 0,
	1071, 2605, 1071, 0, 4301, 2610, 0, 2602, 819, 819,
	819, 0, 2607, 2611, 2606, 0, 2608, 0, 0, 0,
	2609, 2072, 2073, 2603, 0, 6002, 0, 0, 0, 0,
	2612, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 6215, 2068, 0, 1530, 0, 0, 2079, 0, 0,
	2049, 2058, 2059, 2060, 2061, 2062, 2063, 0, 0, 0,
	2052, 2053, 2054, 2055, 2056, 2057, 2604, 0, 0, 2605,
	0, 0, 0, 2610, 0, 2602, 0, 0, 0, 0,
	2607, 2611, 2606, 0, 2608, 0, 0, 0, 2609, 2072,
	2073, 2603, 0, 0, 0, 0, 0, 0, 2612, 0,
	819, 0, 0, 0, 0, 0, 0, 819, 819, 0,
	0, 1532, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 819, 1071, 0, 0, 819, 819, 819, 819, 819,
	819, 819, 819, 819, 819, 819, 819, 819, 819, 819,
	819, 0, 819, 0, 2068, 0, 0, 0, 0, 0,
	1927, 0, 0, 2058, 2059, 2060, 0, 0, 0, 0,
	0, 0, 2052, 2053, 2054, 2055, 2056, 2057, 0, 0,
	0, 0, 0, 0, 3616, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2079, 0,
	0, 2049, 0, 0, 0, 2061, 2062, 2063, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2604, 0, 0,
	2605, 0, 0, 0, 2610, 0, 2602, 0, 0, 0,
	3675, 2607, 2611, 2606, 0, 2608, 0, 0, 0, 2609,
	2072, 2073, 2603, 0, 1531, 0, 3688, 0, 0, 2612,
	3691, 0, 3693, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3711, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3714, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 945, 0, 0,
	0, 0, 0, 0, 0, 3730, 0, 0, 0, 4518,
	0, 0, 0, 3740, 0, 0, 0, 0, 0, 0,
	3743, 0, 0, 0, 3746, 0, 0, 3749, 0, 0,
	3751, 0, 0, 0, 0, 0, 1533, 0, 0, 0,
	0, 3757, 0, 0, 0, 0, 0, 0, 0, 945,
	0, 0, 0, 0, 0, 945, 0, 0, 0, 0,
	0, 0, 0, 3771, 0, 0, 1534, 3777, 0, 1535,
	0, 2068, 0, 1536, 0, 0, 0, 0, 0, 0,
	2058, 2059, 2060, 3807, 0, 2648, 0, 0, 0, 2052,
	2053, 2054, 2055, 2056, 2057, 1537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 5834, 787, 0, 5836, 0,
	5838, 0, 0, 0, 0, 2068, 0, 0, 0, 0,
	0, 0, 0, 1540, 2058, 2059, 2060, 0, 0, 0,
	0, 6210, 0, 2052, 2053, 2054, 2055, 2056, 2057, 0,
	1538, 0, 0, 0, 0, 0, 0, 3875, 0, 0,
	0, 0, 0, 0, 0, 0, 3883, 1539, 0, 3325,
	0, 0, 0, 0, 2068, 0, 0, 0, 0, 0,
	0, 0, 0, 2058, 2059, 2060, 0, 0, 0, 0,
	6148, 0, 2052, 2053, 2054, 2055, 2056, 2057, 3883, 0,
	0, 0, 0, 0, 1541, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2079, 0, 0, 2049,
	0, 3325, 0, 2061, 2062, 2063, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2604, 0, 0, 2605, 0,
	0, 0, 2610, 0, 2602, 0, 0, 0, 0, 2607,
	2611, 2606, 2068, 2608, 0, 0, 0, 2609, 2072, 2073,
	2603, 2058, 2059, 2060, 0, 0, 0, 2612, 6138, 0,
	2052, 2053, 2054, 2055, 2056, 2057, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 819, 819, 0, 819, 0, 0,
	819, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	819, 819, 0, 0, 0, 0, 0, 819, 0, 819,
	819, 819, 819, 819, 819, 819, 819, 819, 819, 819,
	0, 819, 0, 819, 0, 819, 819, 819, 819, 819,
	819, 0, 819, 819, 819, 0, 0, 819, 0, 0,
	0, 0, 0, 819, 0, 0, 0, 819, 819, 819,
	819, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2068, 0, 0, 0, 0, 787, 0,
	0, 0, 2058, 2059, 2060, 819, 819, 0, 0, 5987,
	0, 2052, 2053, 2054, 2055, 2056, 2057, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1071, 0, 0,
	1211, 1212, 0, 0, 0, 1608, 1071, 0, 0, 0,
	3325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1927, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 787,
	0, 0, 0, 0, 2079, 0, 0, 2049, 0, 0,
	0, 2061, 2062, 2063, 0, 0, 0, 1927, 0, 0,
	0, 0, 819, 2604, 0, 0, 2605, 1642, 0, 3325,
	2610, 0, 2602, 0, 787, 1071, 0, 2607, 2611, 2606,
	0, 2608, 0, 0, 0, 2609, 2072, 2073, 2603, 0,
	0, 1927, 0, 0, 0, 2612, 0, 0, 1071, 0,
	0, 1610, 2079, 0, 0, 2049, 0, 0, 0, 2061,
	2062, 2063, 0, 0, 5706, 0, 0, 0, 0, 0,
	0, 2604, 0, 0, 2605, 951, 0, 0, 2610, 1927,
	2602, 0, 0, 0, 0, 2607, 2611, 2606, 0, 2608,
	6163, 0, 0, 2609, 2072, 2073, 2603, 0, 0, 0,
	0, 0, 0, 2612, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 951, 0, 0, 0, 1071, 1071, 0, 0, 0,
	0, 0, 0, 0, 1071, 0, 0, 951, 787, 1599,
	0, 951, 0, 951, 0, 0, 0, 0, 0, 951,
	0, 0, 0, 0, 0, 0, 0, 819, 787, 0,
	0, 1609, 0, 0, 0, 0, 951, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 951, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 951, 951,
	0, 0, 0, 0, 0, 1927, 951, 0, 0, 0,
	0, 1605, 0, 0, 951, 0, 0, 0, 0, 0,
	0, 951, 0, 0, 0, 951, 0, 0, 951, 0,
	0, 951, 0, 787, 1602, 0, 0, 0, 0, 0,
	0, 0, 951, 0, 0, 0, 0, 0, 0, 0,
	951, 2068, 0, 0, 0, 0, 951, 0, 1607, 0,
	2058, 2059, 2060, 3325, 951, 0, 0, 5973, 951, 2052,
	2053, 2054, 2055, 2056, 2057, 0, 0, 0, 0, 0,
	0, 1927, 0, 0, 951, 0, 0, 0, 1598, 819,
	0, 1071, 819, 0, 819, 819, 0, 1071, 0, 1643,
	1613, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2079, 0, 0, 2049, 0, 0, 0, 2061, 2062, 2063,
	0, 0, 1640, 819, 0, 134, 0, 0, 1600, 2604,
	0, 0, 2605, 0, 0, 4448, 2610, 0, 2602, 0,
	0, 0, 1606, 2607, 2611, 2606, 0, 2608, 951, 0,
	951, 2609, 2072, 2073, 2603, 1071, 0, 951, 1603, 2079,
	0, 2612, 2049, 0, 0, 1601, 2061, 2062, 2063, 1611,
	0, 0, 0, 0, 4477, 0, 0, 0, 2604, 0,
	0, 2605, 0, 1927, 0, 2610, 0, 2602, 0, 951,
	0, 0, 2607, 2611, 2606, 0, 2608, 0, 0, 0,
	2609, 2072, 2073, 2603, 0, 0, 1604, 0, 0, 0,
	2612, 0, 0, 0, 0, 0, 1497, 0, 0, 0,
	0, 1498, 0, 0, 0, 1506, 0, 0, 0, 5663,
	0, 0, 0, 0, 0, 0, 0, 6035, 0, 0,
	0, 0, 0, 4514, 0, 0, 0, 0, 0, 1071,
	1071, 819, 819, 0, 819, 819, 0, 0, 819, 0,
	0, 0, 0, 819, 819, 0, 819, 0, 0, 0,
	819, 0, 0, 0, 1497, 0, 0, 0, 819, 1498,
	0, 0, 0, 1506, 2707, 0, 0, 3634, 0, 0,
	819, 0, 0, 0, 0, 0, 4541, 0, 819, 2068,
	0, 0, 0, 0, 0, 0, 0, 0, 2058, 2059,
	2060, 0, 0, 4558, 0, 5950, 1505, 2052, 2053, 2054,
	2055, 2056, 2057, 0, 0, 0, 0, 0, 819, 819,
	0, 0, 0, 0, 819, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1492, 0, 1510, 0, 0,
	819, 819, 0, 0, 0, 819, 0, 2068, 0, 0,
	0, 0, 0, 0, 819, 0, 2058, 2059, 2060, 0,
	819, 0, 0, 0, 1505, 2052, 2053, 2054, 2055, 2056,
	2057, 3325, 3325, 0, 819, 3325, 0, 0, 0, 0,
	1496, 0, 0, 0, 0, 819, 0, 787, 0, 0,
	0, 1494, 0, 0, 0, 1510, 787, 787, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1500, 0, 819,
	819, 819, 0, 0, 0, 0, 0, 819, 819, 819,
	0, 0, 819, 0, 0, 0, 0, 0, 0, 1927,
	0, 0, 0, 819, 0, 1927, 0, 0, 1496, 0,
	1495, 1071, 1502, 0, 0, 5347, 5348, 0, 1501, 1494,
	5351, 5352, 0, 0, 0, 819, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1500, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	819, 0, 0, 0, 0, 819, 0, 0, 0, 0,
	819, 0, 819, 1503, 0, 0, 0, 0, 1495, 0,
	1502, 1608, 2079, 0, 0, 2049, 1501, 0, 0, 2061,
	2062, 2063, 1071, 0, 0, 0, 0, 0, 0, 0,
	0, 2604, 0, 0, 2605, 0, 0, 0, 2610, 1071,
	2602, 0, 0, 0, 951, 2607, 2611, 2606, 1504, 2608,
	0, 0, 0, 2609, 2072, 2073, 2603, 0, 0, 1507,
	0, 1503, 0, 2612, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1632, 0, 0, 0, 0, 0, 0,
	0, 0, 1927, 1071, 0, 0, 0, 0, 0, 1071,
	0, 0, 3633, 0, 1509, 1508, 0, 0, 0, 951,
	951, 0, 0, 0, 0, 0, 1504, 1610, 0, 0,
	0, 0, 0, 0, 0, 2068, 0, 1507, 0, 951,
	951, 0, 0, 0, 2058, 2059, 2060, 0, 0, 951,
	0, 0, 0, 2052, 2053, 2054, 2055, 2056, 2057, 0,
	0, 0, 0, 0, 819, 0, 0, 0, 0, 0,
	1491, 0, 1509, 1508, 0, 0, 0, 4810, 0, 0,
	0, 0, 0, 0, 2068, 0, 0, 0, 0, 0,
	0, 1499, 0, 2058, 2059, 2060, 819, 0, 0, 0,
	5627, 0, 2052, 2053, 2054, 2055, 2056, 2057, 0, 0,
	0, 0, 0, 0, 0, 1599, 0, 0, 0, 0,
	0, 1512, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2707, 0, 0, 0, 0, 1609, 0, 1927,
	1927, 1927, 0, 0, 0, 0, 0, 0, 0, 1499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2079, 0, 0, 2049, 0, 0, 0, 2061, 2062,
	2063, 0, 0, 0, 0, 0, 0, 1605, 0, 1512,
	2604, 0, 787, 2605, 0, 0, 0, 2610, 0, 2602,
	1071, 1071, 0, 1071, 2607, 2611, 2606, 0, 2608, 0,
	1602, 0, 2609, 2072, 2073, 2603, 0, 0, 0, 0,
	0, 0, 2612, 0, 0, 0, 0, 0, 0, 0,
	0, 819, 0, 0, 1607, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 951, 0, 0, 0,
	0, 0, 0, 0, 0, 1071, 1071, 0, 2079, 951,
	0, 2049, 0, 0, 1598, 2061, 2062, 2063, 0, 0,
	0, 0, 0, 0, 4962, 1633, 1613, 2604, 0, 0,
	2605, 0, 0, 0, 2610, 951, 2602, 0, 0, 0,
	0, 2607, 2611, 2606, 0, 2608, 0, 0, 0, 2609,
	2072, 2073, 2603, 0, 0, 0, 0, 0, 1630, 2612,
	0, 134, 0, 0, 1600, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5012, 0, 1606, 0,
	0, 5017, 0, 951, 0, 0, 0, 1071, 0, 0,
	0, 0, 0, 0, 1603, 1071, 0, 0, 0, 0,
	0, 1601, 951, 951, 951, 1611, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2079, 0, 0, 2049, 0, 0, 0, 2061, 2062,
	2063, 3883, 0, 1071, 0, 0, 0, 0, 0, 0,
	2604, 0, 1604, 2605, 0, 951, 0, 2610, 787, 2602,
	0, 0, 0, 0, 2607, 2611, 2606, 951, 2608, 0,
	0, 819, 2609, 2072, 2073, 2603, 0, 0, 0, 0,
	0, 0, 2612, 0, 951, 0, 0, 0, 0, 0,
	951, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2068, 0, 0,
	0, 0, 0, 0, 0, 0, 2058, 2059, 2060, 0,
	0, 0, 1071, 5601, 0, 2052, 2053, 2054, 2055, 2056,
	2057, 0, 0, 0, 819, 0, 0, 0, 819, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 819, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 819, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 819, 819, 0, 0, 819, 819, 819, 0, 819,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	819, 0, 0, 0, 0, 0, 0, 0, 3450, 0,
	0, 0, 0, 819, 0, 819, 1608, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	819, 0, 0, 0, 0, 0, 0, 819, 0, 0,
	0, 819, 819, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1071, 0, 819, 0, 0, 0, 0,
	819, 0, 1071, 819, 819, 819, 819, 819, 819, 819,
	819, 819, 819, 819, 819, 819, 0, 819, 2878, 0,
	0, 0, 0, 0, 819, 819, 819, 1071, 0, 0,
	0, 0, 819, 0, 819, 0, 0, 0, 0, 0,
	0, 819, 1927, 0, 0, 819, 0, 0, 0, 0,
	819, 0, 1610, 0, 819, 0, 0, 0, 0, 0,
	0, 0, 819, 819, 819, 0, 0, 0, 0, 0,
	0, 819, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 819, 2068, 0, 819, 0,
	0, 0, 0, 0, 0, 2058, 2059, 2060, 0, 0,
	0, 0, 5579, 0, 2052, 2053, 2054, 2055, 2056, 2057,
	0, 0, 0, 0, 0, 819, 819, 0, 819, 5962,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1599, 0, 0, 0, 0, 0, 0, 0, 0, 819,
	0, 0, 0, 0, 0, 0, 0, 1071, 819, 819,
	0, 0, 1609, 0, 0, 0, 0, 0, 1071, 1071,
	0, 0, 1071, 2068, 0, 0, 0, 0, 951, 0,
	0, 0, 2058, 2059, 2060, 0, 0, 0, 0, 5557,
	819, 2052, 2053, 2054, 2055, 2056, 2057, 0, 0, 0,
	0, 0, 1605, 0, 0, 0, 1071, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5344, 1602, 0, 0, 0, 0,
	0, 0, 2079, 951, 0, 2049, 5354, 951, 951, 2061,
	2062, 2063, 0, 0, 0, 1035, 3451, 0, 0, 1607,
	0, 2604, 0, 0, 2605, 0, 819, 819, 2610, 0,
	2602, 0, 0, 0, 0, 2607, 2611, 2606, 0, 2608,
	0, 0, 0, 2609, 2072, 2073, 2603, 1927, 1071, 1927,
	0, 0, 0, 2612, 0, 0, 2068, 0, 0, 0,
	0, 1613, 0, 0, 0, 2058, 2059, 2060, 0, 819,
	0, 0, 5417, 0, 2052, 2053, 2054, 2055, 2056, 2057,
	0, 2079, 0, 0, 2049, 0, 0, 3883, 2061, 2062,
	2063, 0, 0, 0, 0, 0, 134, 1927, 0, 1600,
	2604, 0, 0, 2605, 0, 0, 0, 2610, 0, 2602,
	0, 0, 0, 1606, 2607, 2611, 2606, 0, 2608, 0,
	0, 0, 2609, 2072, 2073, 2603, 0, 0, 0, 1603,
	0, 0, 2612, 0, 0, 951, 1601, 0, 0, 0,
	1611, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3452, 0, 0, 0, 723, 0, 0,
	1927, 0, 1071, 0, 0, 0, 0, 0, 771, 771,
	771, 771, 794, 795, 0, 0, 0, 1604, 0, 3453,
	0, 0, 0, 0, 0, 0, 0, 951, 0, 0,
	0, 0, 951, 869, 869, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 911, 0, 0, 0, 0, 0, 937,
	0, 941, 0, 0, 0, 956, 957, 0, 0, 962,
	963, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 951, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 991, 0, 0, 0, 1927, 0, 1004, 0,
	1007, 0, 1009, 1010, 1011, 1012, 1013, 0, 0, 0,
	1022, 0, 0, 0, 1027, 0, 0, 0, 0, 0,
	1036, 6230, 0, 0, 0, 0, 0, 1087, 1089, 1091,
	0, 0, 0, 0, 0, 0, 819, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 819, 819, 0, 0, 0, 0, 819,
	819, 0, 2079, 0, 0, 2049, 819, 819, 0, 2061,
	2062, 2063, 0, 819, 0, 0, 0, 0, 0, 0,
	819, 2604, 6230, 0, 2605, 0, 0, 0, 2610, 0,
	2602, 819, 0, 0, 0, 2607, 2611, 2606, 0, 2608,
	0, 0, 5195, 2609, 2072, 2073, 2603, 0, 0, 0,
	6230, 0, 0, 2612, 0, 0, 0, 0, 0, 0,
	0, 0, 820, 0, 0, 0, 819, 0, 0, 0,
	0, 0, 0, 0, 819, 3883, 3883, 819, 0, 819,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1071, 0, 0, 0, 0, 819, 2079,
	0, 0, 2049, 0, 0, 819, 2061, 2062, 2063, 819,
	819, 0, 0, 819, 0, 0, 0, 0, 2604, 819,
	0, 2605, 0, 0, 0, 2610, 0, 2602, 0, 0,
	0, 819, 2607, 2611, 2606, 0, 2608, 0, 0, 0,
	2609, 2072, 2073, 2603, 0, 0, 0, 0, 0, 0,
	2612, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1071, 0,
	0, 0, 0, 1071, 0, 0, 0, 0, 0, 0,
	0, 1071, 0, 0, 0, 0, 0, 2068, 0, 0,
	1497, 0, 0, 0, 0, 1498, 2058, 2059, 2060, 1506,
	819, 0, 0, 5400, 0, 2052, 2053, 2054, 2055, 2056,
	2057, 0, 0, 0, 0, 0, 1927, 5157, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 819, 0, 0, 0, 0,
	0, 0, 951, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 819, 0, 0, 0, 0, 819, 1497,
	0, 1521, 0, 0, 1498, 0, 2068, 0, 1506, 953,
	0, 0, 0, 0, 0, 2058, 2059, 2060, 0, 0,
	953, 953, 5391, 0, 2052, 2053, 2054, 2055, 2056, 2057,
	1505, 0, 819, 0, 0, 0, 0, 0, 0, 0,
	0, 995, 953, 0, 0, 0, 995, 0, 995, 1071,
	0, 0, 0, 0, 0, 953, 953, 0, 0, 0,
	0, 1510, 951, 0, 0, 0, 951, 0, 0, 0,
	4429, 0, 0, 0, 0, 0, 0, 0, 953, 953,
	953, 0, 0, 2079, 0, 0, 2049, 0, 0, 0,
	2061, 2062, 2063, 0, 0, 951, 0, 0, 0, 1505,
	0, 1071, 2604, 0, 1496, 2605, 0, 951, 0, 2610,
	0, 2602, 0, 953, 0, 1519, 2607, 2611, 2606, 0,
	2608, 0, 819, 0, 2609, 2072, 2073, 2603, 0, 0,
	1510, 1500, 0, 0, 2612, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2079, 0,
	0, 2049, 1071, 1071, 0, 2061, 2062, 2063, 0, 0,
	0, 0, 0, 0, 0, 0, 1502, 2604, 0, 0,
	2605, 0, 1501, 1496, 2610, 0, 2602, 0, 0, 0,
	0, 2607, 2611, 2606, 0, 2608, 0, 0, 951, 2609,
	2072, 2073, 2603, 0, 0, 0, 0, 0, 1184, 2612,
	1500, 5132, 0, 0, 0, 0, 0, 0, 0, 0,
	771, 0, 0, 0, 0, 819, 0, 1503, 0, 0,
	0, 0, 0, 819, 819, 819, 0, 0, 0, 0,
	0, 0, 1215, 0, 0, 1502, 0, 0, 0, 0,
	0, 1501, 0, 0, 0, 0, 0, 2068, 0, 819,
	819, 0, 0, 819, 819, 819, 2058, 2059, 2060, 0,
	0, 0, 1520, 315, 0, 2052, 2053, 2054, 2055, 2056,
	2057, 0, 0, 1507, 0, 0, 0, 0, 0, 0,
	819, 0, 0, 0, 0, 0, 1503, 0, 0, 0,
	0, 0, 2079, 0, 0, 2049, 0, 819, 819, 2061,
	2062, 2063, 0, 869, 0, 0, 1517, 1071, 1509, 1508,
	0, 2604, 819, 819, 2605, 0, 0, 0, 2610, 0,
	2602, 1927, 0, 0, 0, 2607, 2611, 2606, 0, 2608,
	0, 1504, 0, 2609, 2072, 2073, 2603, 1431, 0, 0,
	0, 278, 1507, 2612, 2068, 0, 819, 0, 0, 0,
	0, 1071, 0, 2058, 2059, 2060, 0, 0, 0, 281,
	0, 0, 2052, 2053, 2054, 2055, 2056, 2057, 0, 0,
	0, 0, 0, 0, 0, 4428, 0, 1509, 1508, 2079,
	0, 0, 2049, 0, 0, 1499, 2061, 2062, 2063, 0,
	0, 1474, 0, 0, 1478, 0, 0, 0, 2604, 0,
	0, 2605, 819, 0, 0, 2610, 1071, 2602, 0, 0,
	5130, 5131, 2607, 2611, 2606, 1512, 2608, 0, 0, 0,
	2609, 2072, 2073, 2603, 819, 0, 0, 0, 0, 0,
	2612, 3883, 0, 0, 0, 1621, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1664, 0, 0, 0, 1499, 0, 0, 951, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 287, 0,
	952, 819, 0, 3158, 0, 0, 0, 0, 0, 0,
	0, 952, 952, 0, 1512, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 951, 951, 0, 283,
	0, 0, 0, 952, 0, 0, 0, 0, 0, 0,
	284, 0, 0, 0, 0, 0, 952, 952, 0, 819,
	0, 1239, 0, 0, 0, 819, 0, 0, 0, 0,
	0, 819, 0, 0, 0, 3157, 819, 0, 819, 952,
	952, 952, 288, 0, 953, 0, 0, 0, 0, 0,
	289, 819, 0, 0, 953, 0, 0, 953, 282, 0,
	3159, 0, 0, 0, 953, 0, 0, 953, 0, 819,
	0, 0, 0, 0, 952, 0, 819, 0, 0, 0,
	0, 1237, 0, 819, 0, 0, 0, 0, 2068, 0,
	819, 0, 0, 0, 0, 819, 3160, 2058, 2059, 2060,
	0, 0, 0, 0, 5134, 0, 2052, 2053, 2054, 2055,
	2056, 2057, 951, 0, 0, 0, 953, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 771, 0, 771, 771, 771, 0, 0, 771,
	771, 771, 0, 0, 771, 0, 0, 0, 1071, 0,
	0, 0, 0, 2068, 0, 1071, 0, 0, 261, 3161,
	1895, 291, 2058, 2059, 2060, 0, 1903, 1904, 0, 0,
	0, 2052, 2053, 2054, 2055, 2056, 2057, 0, 0, 0,
	1240, 0, 0, 3162, 819, 0, 0, 1927, 292, 0,
	0, 0, 0, 279, 0, 0, 293, 819, 0, 0,
	0, 819, 0, 0, 0, 0, 0, 0, 0, 951,
	819, 819, 285, 0, 0, 0, 0, 1241, 0, 0,
	0, 0, 0, 1242, 0, 0, 0, 819, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3156, 0,
	0, 0, 0, 0, 0, 1071, 0, 1071, 1071, 819,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 819, 0, 0,
	0, 0, 819, 819, 819, 0, 819, 0, 3154, 0,
	0, 0, 0, 0, 0, 819, 1927, 2068, 0, 0,
	0, 0, 0, 0, 0, 0, 2058, 2059, 2060, 0,
	0, 0, 0, 0, 0, 2052, 2053, 2054, 2055, 2056,
	2057, 0, 2079, 1071, 819, 2049, 1927, 3450, 0, 2061,
	2062, 2063, 0, 869, 0, 1608, 0, 0, 0, 0,
	0, 2604, 0, 1927, 2605, 0, 0, 0, 2610, 951,
	2602, 0, 0, 0, 819, 2607, 2611, 2606, 0, 2608,
	0, 0, 0, 2609, 2072, 2073, 2603, 0, 2660, 0,
	0, 0, 0, 2612, 0, 5126, 0, 0, 0, 0,
	0, 0, 0, 0, 2068, 0, 0, 0, 0, 0,
	0, 0, 0, 2058, 2059, 2060, 953, 2878, 0, 0,
	2698, 0, 2052, 2053, 2054, 2055, 2056, 2057, 0, 0,
	0, 0, 0, 953, 0, 0, 0, 0, 953, 0,
	0, 0, 953, 953, 0, 0, 0, 0, 0, 0,
	0, 1610, 0, 0, 0, 0, 0, 0, 819, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	953, 0, 2079, 0, 0, 2049, 0, 0, 0, 2061,
	2062, 2063, 953, 0, 819, 0, 819, 819, 953, 0,
	0, 2604, 819, 0, 2605, 0, 0, 0, 2610, 0,
	2602, 0, 0, 0, 0, 2607, 2611, 2606, 2825, 2608,
	0, 0, 0, 2609, 2072, 2073, 2603, 0, 0, 0,
	0, 0, 0, 2612, 0, 952, 0, 0, 819, 0,
	0, 0, 0, 0, 0, 952, 0, 0, 952, 1599,
	0, 0, 0, 0, 0, 952, 0, 0, 952, 0,
	0, 995, 0, 0, 0, 995, 995, 0, 0, 0,
	819, 1609, 0, 0, 0, 0, 0, 953, 0, 0,
	0, 819, 0, 1929, 819, 0, 0, 0, 0, 0,
	819, 819, 0, 0, 0, 2907, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 952, 0, 0,
	2079, 1605, 0, 2049, 951, 0, 0, 2061, 2062, 2063,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2604,
	0, 0, 2605, 0, 1602, 0, 2610, 819, 2602, 0,
	0, 0, 951, 2607, 2611, 2606, 0, 2608, 819, 0,
	0, 2609, 2072, 2073, 2603, 3451, 0, 0, 1607, 0,
	0, 2612, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3008, 0, 0, 3010,
	0, 0, 819, 819, 0, 2079, 819, 0, 2049, 0,
	0, 0, 2061, 2062, 2063, 0, 0, 0, 0, 0,
	1613, 0, 0, 951, 2604, 0, 819, 2605, 0, 0,
	0, 2610, 0, 2602, 0, 819, 0, 819, 2607, 2611,
	2606, 0, 2608, 0, 0, 0, 2609, 2072, 2073, 2603,
	3043, 0, 3045, 3046, 0, 134, 2612, 0, 3446, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1606, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 819, 0, 0, 0, 0, 1603, 0,
	0, 953, 0, 0, 819, 1601, 0, 0, 0, 1611,
	1929, 0, 1929, 0, 0, 0, 819, 0, 0, 0,
	0, 0, 3452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 953, 0, 0, 0, 0, 0, 953,
	0, 819, 0, 0, 0, 0, 1604, 0, 3453, 0,
	0, 0, 0, 0, 819, 3109, 0, 0, 3112, 0,
	0, 0, 1071, 0, 0, 0, 0, 0, 0, 0,
	0, 771, 771, 819, 0, 1927, 771, 771, 0, 771,
	771, 0, 0, 0, 0, 0, 0, 2068, 0, 0,
	0, 0, 0, 0, 0, 0, 2058, 2059, 2060, 0,
	0, 0, 0, 0, 0, 2052, 2053, 2054, 2055, 2056,
	2057, 0, 0, 0, 0, 0, 0, 952, 0, 0,
	0, 819, 819, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 952, 0, 1927, 819, 0, 952,
	0, 0, 0, 952, 952, 0, 0, 0, 0, 0,
	0, 0, 0, 819, 819, 0, 0, 0, 2079, 0,
	0, 2049, 0, 0, 1927, 2061, 2062, 2063, 0, 0,
	0, 952, 0, 0, 0, 0, 0, 2604, 0, 0,
	2605, 0, 0, 952, 2610, 0, 2602, 0, 0, 952,
	0, 2607, 2611, 2606, 0, 2608, 0, 0, 0, 2609,
	2072, 2073, 2603, 0, 0, 0, 0, 0, 0, 2612,
	0, 0, 0, 0, 0, 0, 0, 2068, 0, 0,
	0, 0, 2079, 0, 0, 2049, 2058, 2059, 2060, 2061,
	2062, 2063, 0, 5117, 953, 2052, 2053, 2054, 2055, 2056,
	2057, 2604, 0, 0, 2605, 0, 0, 0, 2610, 0,
	2602, 0, 0, 0, 0, 2607, 2611, 2606, 0, 2608,
	0, 0, 0, 2609, 2072, 2073, 2603, 0, 952, 0,
	0, 0, 0, 2612, 1928, 0, 2079, 0, 0, 2049,
	0, 0, 0, 2061, 2062, 2063, 0, 0, 4710, 0,
	0, 0, 0, 0, 0, 2604, 0, 0, 2605, 0,
	0, 0, 2610, 0, 2602, 0, 0, 0, 0, 2607,
	2611, 2606, 1032, 2608, 0, 0, 0, 2609, 2072, 2073,
	2603, 0, 0, 0, 0, 0, 0, 2612, 0, 0,
	0, 0, 953, 0, 953, 953, 953, 953, 0, 0,
	0, 0, 0, 0, 0, 2068, 0, 0, 0, 0,
	0, 0, 0, 0, 2058, 2059, 2060, 0, 0, 0,
	0, 5109, 0, 2052, 2053, 2054, 2055, 2056, 2057, 0,
	0, 2079, 0, 0, 2049, 0, 0, 0, 2061, 2062,
	2063, 0, 0, 0, 995, 995, 995, 0, 0, 0,
	2604, 0, 0, 2605, 0, 0, 0, 2610, 0, 2602,
	0, 0, 0, 0, 2607, 2611, 2606, 0, 2608, 0,
	953, 0, 2609, 2072, 2073, 2603, 0, 0, 0, 0,
	2068, 0, 2612, 0, 0, 0, 0, 0, 0, 2058,
	2059, 2060, 0, 0, 0, 0, 4967, 0, 2052, 2053,
	2054, 2055, 2056, 2057, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 952, 0, 0, 0, 0, 0, 0, 0,
	0, 1928, 0, 1928, 1497, 0, 0, 0, 0, 1498,
	0, 0, 0, 1506, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 952, 0, 0, 0, 0, 0,
	952, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 912, 0, 933, 0, 935, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 961, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4422, 0, 989, 990, 0,
	992, 0, 0, 0, 0, 0, 0, 0, 2079, 0,
	0, 2049, 0, 0, 0, 2061, 2062, 2063, 1023, 0,
	1026, 0, 0, 0, 1505, 0, 0, 2604, 0, 0,
	2605, 0, 0, 0, 2610, 0, 2602, 0, 0, 0,
	0, 2607, 2611, 2606, 0, 2608, 0, 0, 0, 2609,
	2072, 2073, 2603, 0, 0, 1510, 0, 0, 0, 2612,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1929, 0, 0, 0, 0, 0, 0, 0, 1496, 0,
	0, 0, 0, 4637, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2068, 0, 0, 0, 0, 0, 0,
	0, 0, 2058, 2059, 2060, 1500, 0, 0, 0, 4893,
	0, 2052, 2053, 2054, 2055, 2056, 2057, 0, 0, 2079,
	0, 0, 2049, 0, 0, 952, 2061, 2062, 2063, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2604, 0,
	1502, 2605, 0, 0, 0, 2610, 1501, 2602, 0, 0,
	0, 0, 2607, 2611, 2606, 0, 2608, 2068, 0, 0,
	2609, 2072, 2073, 2603, 0, 0, 2058, 2059, 2060, 0,
	2612, 0, 0, 4869, 0, 2052, 2053, 2054, 2055, 2056,
	2057, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2068, 0, 0, 0, 0, 0, 0, 0, 0,
	2058, 2059, 2060, 952, 0, 952, 952, 952, 952, 2052,
	2053, 2054, 2055, 2056, 2057, 2079, 1504, 0, 2049, 0,
	0, 0, 2061, 2062, 2063, 0, 0, 1507, 0, 0,
	0, 0, 0, 0, 2604, 0, 0, 2605, 0, 0,
	0, 2610, 0, 2602, 0, 0, 0, 0, 2607, 2611,
	2606, 0, 2608, 0, 0, 0, 2609, 2072, 2073, 2603,
	4421, 0, 1509, 1508, 0, 0, 2612, 0, 0, 0,
	0, 3478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 952, 0, 0, 0, 0, 2068, 0, 0, 0,
	0, 3492, 0, 0, 0, 2058, 2059, 2060, 0, 0,
	0, 0, 4650, 3509, 2052, 2053, 2054, 2055, 2056, 2057,
	0, 3520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1497, 0, 0, 0, 0,
	1498, 0, 0, 0, 1506, 0, 0, 0, 0, 1499,
	0, 0, 0, 3565, 3566, 3567, 0, 0, 0, 0,
	0, 3571, 0, 3572, 0, 0, 0, 0, 0, 0,
	0, 0, 3582, 0, 0, 0, 0, 0, 0, 1512,
	3593, 0, 3597, 3598, 3599, 3600, 0, 0, 3607, 0,
	3609, 3612, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3635, 3636, 3658, 0, 0, 3641,
	3642, 0, 3643, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3653, 3654, 3655,
	0, 0, 0, 0, 0, 1505, 0, 0, 0, 0,
	0, 0, 3673, 3674, 0, 0, 0, 0, 1402, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3686, 3687,
	0, 0, 3689, 3690, 0, 3692, 1510, 0, 0, 3694,
	0, 0, 0, 0, 0, 3699, 3700, 0, 0, 3702,
	0, 0, 3706, 2068, 3707, 0, 0, 0, 3710, 0,
	3712, 0, 2058, 2059, 2060, 0, 3713, 0, 0, 0,
	0, 2052, 2053, 2054, 2055, 2056, 2057, 0, 0, 1496,
	0, 0, 0, 0, 0, 3724, 3725, 3726, 0, 0,
	0, 1928, 0, 0, 3738, 0, 3739, 0, 0, 3742,
	0, 0, 0, 0, 0, 3744, 1500, 3745, 0, 0,
	3748, 0, 3750, 0, 0, 0, 0, 3752, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3767, 0, 0,
	0, 1502, 0, 0, 3770, 0, 0, 1501, 3772, 0,
	3776, 0, 0, 0, 0, 0, 0, 3793, 3794, 0,
	0, 0, 0, 0, 0, 3803, 0, 0, 0, 0,
	3811, 0, 1530, 0, 0, 0, 0, 0, 0, 0,
	4916, 3824, 0, 0, 2068, 0, 0, 0, 0, 2864,
	0, 0, 1503, 2058, 2059, 2060, 0, 0, 0, 0,
	4631, 0, 2052, 2053, 2054, 2055, 2056, 2057, 2079, 0,
	0, 2049, 0, 0, 0, 2061, 2062, 2063, 1450, 1451,
	4109, 0, 0, 0, 3861, 0, 3863, 2604, 0, 0,
	2605, 0, 1929, 0, 2610, 0, 2602, 1504, 0, 1532,
	0, 2607, 2611, 2606, 0, 2608, 0, 0, 1507, 2609,
	2072, 2073, 2603, 0, 0, 0, 0, 0, 0, 2612,
	0, 0, 0, 0, 0, 0, 0, 1929, 1486, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3657, 0, 1509, 1508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2068, 1929, 0, 1622, 1623, 0, 0, 0, 0, 2058,
	2059, 2060, 0, 0, 0, 0, 4127, 0, 2052, 2053,
	2054, 2055, 2056, 2057, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 953, 0, 0, 0, 1929,
	0, 3942, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1499, 0, 1531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4890,
	0, 953, 0, 0, 0, 0, 1305, 1758, 1760, 0,
	1512, 0, 0, 0, 0, 4913, 0, 953, 0, 0,
	0, 953, 0, 953, 0, 0, 0, 0, 0, 953,
	0, 0, 0, 0, 1281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4917, 0, 953, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 953, 4915, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 953, 953,
	0, 0, 0, 0, 1533, 1929, 953, 0, 0, 0,
	0, 0, 0, 0, 953, 0, 0, 0, 0, 0,
	0, 953, 0, 0, 0, 953, 0, 0, 953, 0,
	0, 953, 0, 0, 1534, 0, 0, 1535, 0, 0,
	0, 1536, 953, 0, 0, 0, 0, 0, 0, 0,
	953, 0, 0, 2648, 0, 0, 953, 0, 0, 0,
	0, 0, 0, 1537, 953, 0, 0, 0, 953, 0,
	0, 2079, 0, 0, 2049, 1893, 1894, 0, 2061, 2062,
	2063, 1929, 0, 0, 953, 0, 0, 0, 0, 0,
	2604, 0, 995, 2605, 995, 995, 0, 2610, 803, 2602,
	0, 1540, 0, 812, 2607, 2611, 2606, 0, 2608, 0,
	0, 0, 2609, 2072, 2073, 2603, 0, 0, 1538, 0,
	2079, 0, 2612, 2049, 4099, 0, 0, 2061, 2062, 2063,
	0, 0, 4094, 0, 0, 1539, 0, 4918, 4356, 2604,
	0, 0, 2605, 0, 0, 0, 2610, 0, 2602, 0,
	0, 0, 0, 2607, 2611, 2606, 0, 2608, 953, 0,
	953, 2609, 2072, 2073, 2603, 0, 0, 953, 0, 0,
	0, 2612, 1541, 4200, 0, 4203, 0, 0, 0, 0,
	0, 0, 2079, 0, 0, 2049, 0, 0, 0, 2061,
	2062, 2063, 0, 1929, 0, 0, 0, 0, 0, 953,
	0, 2604, 0, 0, 2605, 0, 0, 0, 2610, 0,
	2602, 0, 0, 4240, 0, 2607, 2611, 2606, 0, 2608,
	0, 0, 0, 2609, 2072, 2073, 2603, 0, 0, 0,
	2748, 0, 0, 2612, 0, 0, 0, 0, 0, 0,
	0, 4282, 0, 1928, 1123, 1124, 1126, 1130, 0, 4290,
	0, 4290, 0, 0, 0, 0, 0, 4299, 0, 0,
	0, 0, 995, 2068, 995, 995, 0, 0, 0, 0,
	0, 0, 2058, 2059, 2060, 0, 0, 0, 1928, 0,
	0, 2052, 2053, 2054, 2055, 2056, 2057, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2690, 2691,
	2692, 2693, 1928, 2694, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4367, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4384,
	4385, 4386, 4387, 0, 0, 0, 952, 0, 0, 0,
	1928, 0, 0, 0, 0, 0, 0, 0, 2780, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1497, 0, 0, 0, 0, 1498, 0, 0, 0, 1506,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 952, 0, 0, 4416, 4417, 4418, 0, 0,
	4423, 4424, 4425, 4426, 0, 0, 0, 0, 952, 0,
	0, 0, 952, 0, 952, 0, 0, 0, 0, 0,
	952, 0, 0, 0, 0, 1276, 1276, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 952, 0, 0,
	0, 1521, 0, 0, 0, 0, 0, 952, 0, 1929,
	0, 0, 0, 0, 0, 1929, 0, 0, 4447, 952,
	952, 0, 0, 0, 2893, 0, 1928, 952, 0, 0,
	1505, 0, 0, 0, 0, 952, 0, 0, 0, 0,
	0, 0, 952, 0, 0, 0, 952, 0, 0, 952,
	0, 0, 952, 0, 0, 0, 0, 4476, 0, 0,
	0, 1510, 0, 952, 0, 4478, 0, 0, 0, 0,
	0, 952, 0, 0, 0, 0, 0, 952, 0, 0,
	0, 0, 0, 0, 0, 952, 0, 0, 0, 952,
	0, 0, 0, 0, 0, 2966, 2967, 2968, 2969, 2970,
	0, 0, 1928, 4067, 1496, 952, 0, 0, 0, 0,
	0, 0, 0, 0, 953, 0, 0, 0, 3006, 0,
	0, 0, 0, 0, 0, 3009, 0, 0, 0, 0,
	0, 1500, 0, 0, 0, 0, 2068, 0, 0, 0,
	0, 0, 0, 0, 0, 2058, 2059, 2060, 0, 0,
	0, 0, 1929, 0, 2052, 2053, 2054, 2055, 2056, 2057,
	0, 4529, 0, 0, 0, 0, 1502, 4533, 0, 953,
	953, 0, 1501, 0, 0, 0, 0, 0, 0, 952,
	0, 952, 0, 0, 0, 2068, 0, 0, 952, 953,
	953, 0, 0, 0, 2058, 2059, 2060, 0, 0, 953,
	0, 0, 0, 2052, 2053, 2054, 2055, 2056, 2057, 0,
	1138, 0, 1141, 0, 1928, 0, 0, 1503, 0, 1143,
	952, 0, 0, 0, 0, 0, 4565, 4566, 0, 0,
	0, 0, 0, 4570, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2068, 0, 0,
	0, 0, 0, 0, 0, 0, 2058, 2059, 2060, 0,
	0, 0, 1504, 0, 0, 2052, 2053, 2054, 2055, 2056,
	2057, 0, 0, 1507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1929,
	1929, 1929, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3640, 812, 1509, 1508,
	1130, 0, 0, 2079, 3144, 3145, 2049, 0, 0, 0,
	2061, 2062, 2063, 0, 0, 4060, 0, 0, 0, 0,
	0, 0, 2604, 0, 0, 2605, 0, 0, 0, 2610,
	0, 2602, 0, 0, 0, 0, 2607, 2611, 2606, 0,
	2608, 0, 0, 0, 2609, 2072, 2073, 2603, 0, 0,
	0, 0, 0, 0, 2612, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1919, 0, 0, 0,
	2009, 0, 0, 0, 0, 1499, 953, 0, 2025, 0,
	2032, 0, 0, 0, 0, 2079, 0, 2043, 2049, 953,
	0, 0, 2061, 2062, 2063, 0, 0, 0, 2525, 2526,
	2527, 2528, 2529, 0, 2604, 1512, 0, 2605, 0, 2534,
	1608, 2610, 0, 2602, 0, 953, 0, 0, 2607, 2611,
	2606, 0, 2608, 0, 0, 0, 2609, 2072, 2073, 2603,
	0, 0, 0, 2552, 0, 0, 2612, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3216, 0, 0, 0, 0, 0, 0,
	1928, 0, 0, 953, 0, 0, 1928, 0, 2079, 0,
	0, 2049, 1594, 0, 0, 2061, 2062, 2063, 0, 0,
	0, 0, 953, 953, 953, 0, 0, 2604, 0, 0,
	2605, 0, 0, 0, 2610, 4783, 2602, 0, 0, 0,
	0, 2607, 2611, 2606, 0, 2608, 1610, 0, 0, 2609,
	2072, 2073, 2603, 0, 0, 0, 0, 0, 0, 2612,
	0, 0, 0, 0, 0, 953, 0, 4290, 0, 0,
	0, 0, 0, 0, 4811, 0, 2079, 953, 0, 2049,
	0, 995, 0, 2061, 2062, 2063, 0, 0, 0, 0,
	0, 0, 0, 0, 953, 2604, 0, 0, 2605, 0,
	953, 0, 2610, 0, 2602, 952, 0, 0, 0, 2607,
	2611, 2606, 0, 2608, 0, 0, 0, 2609, 2072, 2073,
	2603, 0, 0, 0, 0, 0, 0, 2612, 0, 0,
	0, 0, 0, 0, 1599, 0, 0, 0, 0, 0,
	0, 0, 1130, 1928, 1786, 0, 1130, 1130, 4290, 1801,
	0, 0, 0, 0, 0, 0, 1609, 0, 0, 0,
	952, 952, 0, 0, 4880, 4881, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	952, 952, 0, 0, 0, 0, 0, 0, 4900, 0,
	952, 0, 1130, 0, 0, 0, 1605, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4930, 0,
	0, 0, 0, 0, 0, 0, 0, 4932, 0, 1602,
	0, 0, 0, 0, 0, 0, 4934, 4935, 4936, 4937,
	0, 0, 4940, 4941, 0, 0, 4944, 4945, 4946, 4947,
	4948, 4949, 0, 1607, 0, 1886, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4961, 0, 0, 0,
	0, 0, 0, 0, 4965, 0, 4966, 0, 0, 0,
	4968, 1130, 0, 1598, 0, 0, 0, 0, 0, 0,
	1928, 1928, 1928, 0, 1595, 1613, 0, 0, 0, 4996,
	0, 0, 0, 0, 5001, 5002, 0, 0, 0, 5003,
	5004, 0, 1929, 0, 0, 0, 5008, 5009, 5010, 5011,
	0, 5013, 5014, 5015, 5016, 0, 0, 1592, 0, 5023,
	134, 0, 0, 1600, 0, 0, 0, 0, 0, 0,
	0, 2064, 0, 0, 0, 0, 0, 1606, 2546, 2548,
	2549, 0, 0, 0, 0, 0, 0, 0, 2068, 0,
	0, 0, 5046, 1603, 5047, 0, 0, 2058, 2059, 2060,
	1601, 0, 0, 0, 1611, 0, 2052, 2053, 2054, 2055,
	2056, 2057, 0, 0, 0, 0, 0, 952, 0, 0,
	2079, 0, 0, 2049, 0, 0, 0, 2061, 2062, 2063,
	952, 0, 0, 0, 0, 0, 0, 0, 0, 2604,
	0, 1604, 2605, 0, 0, 0, 2610, 0, 2602, 0,
	0, 0, 0, 2607, 2611, 2606, 952, 2608, 0, 0,
	0, 2609, 2072, 2073, 2603, 0, 0, 0, 0, 4054,
	2068, 2612, 0, 0, 0, 0, 0, 0, 953, 2058,
	2059, 2060, 0, 0, 0, 0, 0, 0, 2052, 2053,
	2054, 2055, 2056, 2057, 0, 0, 0, 2064, 0, 0,
	0, 0, 0, 0, 952, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 952, 952, 952, 0, 0, 0, 0,
	0, 0, 0, 953, 0, 2704, 0, 953, 953, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2731, 0, 2068, 0, 0, 0, 0, 0, 0,
	0, 0, 2058, 2059, 2060, 0, 952, 0, 0, 3276,
	0, 2052, 2053, 2054, 2055, 2056, 2057, 1929, 952, 1929,
	0, 0, 0, 0, 0, 3216, 0, 0, 0, 0,
	771, 0, 0, 0, 0, 952, 0, 0, 0, 0,
	0, 952, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1919, 1919, 1919, 0, 0, 0,
	0, 2068, 3434, 0, 0, 0, 0, 1929, 0, 0,
	2058, 2059, 2060, 0, 0, 3172, 0, 0, 0, 2052,
	2053, 2054, 2055, 2056, 2057, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 953, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3503, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1929, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3552, 0, 5266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 953, 2929, 0,
	0, 2934, 953, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2525, 2526, 0, 0, 0, 0, 0,
	0, 0, 0, 816, 0, 0, 0, 1276, 0, 0,
	0, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227,
	3228, 3229, 3230, 3231, 3232, 3233, 3234, 0, 3240, 0,
	0, 0, 953, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1929, 0, 0, 3645,
	3646, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1928, 5323, 0, 0, 0, 5325, 0,
	0, 0, 0, 0, 0, 0, 5328, 5329, 5330, 5331,
	5332, 0, 0, 5335, 5336, 5337, 5338, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5342, 5343, 2079, 5345,
	0, 2049, 0, 0, 0, 2061, 2062, 2063, 0, 5353,
	0, 0, 0, 1497, 0, 0, 0, 2604, 1498, 0,
	0, 0, 1506, 0, 2610, 0, 2602, 0, 0, 0,
	3058, 2607, 2611, 2606, 0, 2608, 0, 0, 0, 2609,
	2072, 2073, 2603, 0, 0, 0, 0, 0, 0, 2612,
	0, 0, 0, 0, 0, 0, 0, 5370, 5371, 5372,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5380, 0, 0,
	0, 0, 0, 2079, 2823, 2068, 2049, 0, 0, 0,
	2061, 2062, 2063, 0, 2058, 2059, 2060, 0, 0, 952,
	0, 0, 0, 2052, 2053, 2054, 2055, 2056, 2057, 2610,
	0, 2602, 0, 1505, 0, 0, 2607, 2611, 2606, 0,
	2608, 0, 0, 0, 2609, 2072, 2073, 2603, 3812, 0,
	0, 0, 0, 0, 2612, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 0, 0, 0, 5405,
	0, 0, 0, 0, 952, 0, 0, 0, 952, 952,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1050,
	1050, 0, 0, 0, 2064, 0, 0, 0, 0, 0,
	0, 0, 3862, 0, 3864, 0, 0, 1496, 0, 0,
	0, 0, 5447, 0, 0, 0, 0, 0, 1928, 0,
	1928, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1500, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1929, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 5511,
	0, 0, 0, 0, 5518, 0, 0, 0, 1928, 1502,
	0, 0, 953, 0, 0, 1501, 0, 0, 0, 0,
	0, 0, 0, 0, 2064, 0, 0, 0, 0, 4290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2064, 0, 0, 5562, 0, 0, 952, 2064, 5565, 3932,
	3934, 0, 0, 0, 5571, 0, 3940, 3941, 2064, 0,
	1503, 0, 0, 1497, 0, 0, 0, 0, 1498, 0,
	0, 1928, 1506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 953, 0, 0, 0, 953, 0, 952, 0,
	0, 0, 0, 952, 1229, 1504, 0, 5607, 5608, 278,
	0, 0, 0, 5613, 0, 0, 1507, 0, 0, 5615,
	0, 0, 0, 0, 0, 953, 0, 281, 0, 0,
	0, 0, 0, 0, 2817, 0, 0, 953, 0, 0,
	0, 0, 0, 5628, 5629, 0, 0, 0, 0, 2822,
	0, 1509, 1508, 952, 0, 0, 0, 0, 0, 1230,
	0, 0, 0, 1505, 0, 0, 1919, 1928, 0, 0,
	0, 0, 0, 0, 0, 0, 3299, 3301, 0, 0,
	0, 0, 0, 3307, 0, 3318, 3321, 0, 3332, 3333,
	3338, 3341, 0, 0, 1510, 0, 0, 3349, 0, 0,
	0, 3353, 3359, 3301, 3301, 3366, 3301, 0, 3301, 3301,
	3301, 0, 0, 0, 0, 0, 0, 0, 953, 3381,
	0, 0, 0, 3232, 3233, 3234, 3240, 0, 1499, 0,
	0, 1313, 0, 0, 0, 0, 287, 1496, 0, 0,
	0, 1227, 0, 0, 0, 0, 0, 1322, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1512, 0,
	0, 0, 0, 2068, 1500, 0, 0, 283, 0, 0,
	0, 0, 2058, 2059, 2060, 0, 0, 0, 284, 0,
	0, 2052, 2053, 2054, 2055, 2056, 2057, 0, 0, 1239,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1502,
	0, 0, 0, 1226, 0, 1501, 0, 0, 0, 0,
	288, 0, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 0, 0, 0, 0, 282, 0, 1228, 0,
	0, 0, 0, 0, 4290, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2068, 1237,
	1503, 1929, 5784, 0, 0, 0, 0, 2058, 2059, 2060,
	0, 0, 0, 0, 1235, 0, 2052, 2053, 2054, 2055,
	2056, 2057, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1520, 0, 0, 0, 0,
	5818, 0, 0, 5821, 0, 0, 1507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 294, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 1232, 0, 291,
	0, 0, 995, 0, 0, 0, 0, 0, 0, 2816,
	0, 1509, 1508, 0, 0, 0, 0, 1928, 1240, 0,
	0, 1233, 0, 0, 295, 0, 292, 0, 0, 0,
	0, 279, 0, 0, 293, 0, 0, 0, 0, 0,
	0, 0, 0, 952, 0, 0, 0, 0, 0, 0,
	285, 0, 0, 3704, 0, 1241, 0, 953, 0, 0,
	0, 1242, 0, 0, 0, 0, 286, 1048, 1048, 0,
	1234, 995, 296, 0, 0, 0, 1225, 0, 0, 0,
	0, 0, 0, 1049, 1049, 0, 0, 0, 1499, 0,
	0, 0, 280, 0, 0, 0, 953, 953, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2064, 2064, 2064, 2064, 2064, 0, 0, 0, 1512, 2064,
	0, 0, 3317, 952, 1236, 0, 1223, 952, 0, 0,
	0, 0, 0, 195, 0, 0, 0, 2064, 0, 0,
	225, 0, 0, 5956, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3328, 0, 0, 952, 0, 221, 0,
	0, 0, 199, 0, 0, 0, 0, 0, 952, 1497,
	0, 218, 5976, 5977, 1498, 0, 0, 0, 1506, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1050, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 953, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1545, 0, 0, 0, 0, 0, 0, 0, 0, 952,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 1050, 0, 0, 0,
	0, 0, 0, 2990, 0, 0, 0, 1929, 278, 0,
	3563, 4505, 4506, 0, 211, 0, 0, 6072, 0, 0,
	1510, 0, 0, 0, 0, 0, 281, 0, 4515, 953,
	6082, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 6098, 0, 0, 0, 0, 0,
	0, 0, 0, 1496, 0, 0, 0, 197, 0, 0,
	0, 0, 0, 0, 1919, 0, 0, 0, 0, 3957,
	3958, 198, 3960, 0, 0, 0, 2032, 0, 208, 0,
	1500, 0, 0, 0, 2534, 0, 203, 0, 0, 1050,
	0, 0, 1928, 0, 204, 0, 2043, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 1929, 0, 0, 0,
	0, 0, 0, 0, 0, 1502, 4568, 0, 0, 0,
	0, 1501, 0, 1130, 0, 287, 0, 0, 0, 0,
	2986, 0, 0, 0, 3990, 3991, 1929, 0, 0, 0,
	3997, 0, 0, 0, 0, 0, 0, 1124, 0, 6157,
	0, 0, 0, 1929, 0, 0, 283, 0, 0, 953,
	0, 0, 0, 0, 0, 0, 1503, 284, 0, 1050,
	1050, 0, 0, 0, 0, 0, 4026, 1124, 1239, 0,
	0, 0, 0, 0, 0, 210, 0, 0, 1124, 0,
	4038, 1921, 2988, 0, 0, 0, 0, 213, 0, 288,
	0, 4055, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 1504, 0, 0, 0, 282, 217, 2989, 0, 0,
	0, 0, 1507, 0, 196, 0, 0, 0, 952, 0,
	0, 0, 205, 3338, 3338, 3338, 0, 0, 1237, 0,
	3795, 0, 0, 3799, 0, 0, 0, 0, 212, 4110,
	0, 0, 0, 214, 0, 1544, 0, 1509, 1508, 209,
	0, 220, 0, 219, 201, 0, 0, 952, 952, 0,
	0, 4132, 0, 0, 200, 0, 0, 0, 0, 0,
	0, 224, 0, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4146, 0, 0, 0,
	0, 4150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 2991, 0, 291, 0,
	0, 0, 215, 0, 1130, 0, 0, 0, 0, 0,
	0, 6278, 0, 0, 1499, 0, 0, 1240, 0, 0,
	2992, 0, 0, 0, 0, 292, 0, 0, 0, 0,
	279, 0, 0, 293, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 0, 0, 0, 0, 285,
	995, 995, 0, 0, 1241, 0, 0, 0, 1050, 0,
	1242, 0, 0, 952, 0, 286, 0, 0, 1050, 2993,
	0, 0, 0, 0, 953, 2994, 0, 0, 0, 0,
	0, 0, 0, 3921, 3921, 3921, 3921, 3921, 3921, 3921,
	3921, 280, 0, 0, 0, 3921, 3921, 995, 269, 0,
	0, 0, 953, 278, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 4812, 0, 0, 0, 0, 0,
	0, 281, 0, 2987, 0, 0, 0, 0, 0, 0,
	4325, 0, 0, 0, 0, 0, 0, 0, 1928, 275,
	0, 0, 0, 0, 4831, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1050, 0, 1048, 0, 0, 0,
	952, 0, 4359, 953, 0, 0, 0, 0, 0, 0,
	0, 0, 1049, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2839, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2064, 2064, 2064, 2064, 2064, 2064,
	2064, 2064, 2064, 2064, 2064, 2064, 2064, 2064, 2064, 2064,
	0, 0, 0, 0, 0, 2064, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 0, 3328, 3328, 1048, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1928, 0, 0,
	1049, 1050, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 284, 0, 2064, 0, 2064, 1928, 0, 0,
	0, 0, 2064, 272, 0, 0, 0, 4442, 0, 0,
	0, 0, 0, 2064, 1928, 0, 2064, 266, 0, 4082,
	952, 3328, 3328, 3328, 288, 1929, 0, 2064, 2064, 0,
	0, 0, 289, 2064, 1803, 0, 2064, 0, 0, 0,
	282, 0, 0, 0, 2064, 0, 0, 0, 2064, 0,
	0, 0, 0, 0, 2064, 0, 0, 1048, 1050, 0,
	1050, 2064, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1049, 0, 0, 2064, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1929, 0, 0, 0,
	4187, 0, 4187, 0, 0, 0, 0, 1050, 0, 0,
	1050, 0, 0, 995, 995, 0, 1050, 0, 0, 0,
	0, 0, 0, 0, 1929, 0, 0, 4219, 1130, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 0, 0, 0, 0, 0, 1048, 1048, 0,
	261, 0, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1049, 1049, 0, 0, 4268, 0, 0,
	0, 0, 276, 0, 4279, 0, 0, 0, 295, 0,
	292, 0, 0, 1130, 1130, 279, 0, 0, 293, 0,
	0, 1387, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 0, 4306, 0, 0, 271,
	0, 0, 0, 0, 0, 273, 0, 0, 0, 0,
	286, 0, 0, 0, 270, 0, 296, 0, 0, 0,
	265, 0, 0, 0, 0, 0, 1386, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1919, 1050, 0, 1050, 1919, 952, 0, 0, 0, 1921,
	1921, 1921, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 0, 0, 0, 4600, 0, 0,
	0, 0, 0, 952, 0, 0, 0, 4608, 4609, 0,
	0, 4612, 0, 0, 0, 4615, 4399, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4620, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4626,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4636, 0, 0, 0,
	0, 0, 0, 4641, 952, 0, 1048, 3301, 3301, 0,
	0, 0, 0, 0, 0, 0, 1048, 0, 5216, 0,
	0, 4652, 1049, 0, 0, 0, 4654, 0, 0, 0,
	0, 0, 1049, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4673, 4674, 4675, 1050, 0, 0, 0, 0, 0, 2064,
	4681, 0, 0, 0, 0, 0, 0, 3349, 0, 0,
	0, 5258, 0, 0, 0, 0, 3299, 0, 0, 0,
	3301, 0, 0, 0, 0, 0, 0, 0, 4707, 4708,
	4709, 0, 0, 0, 0, 0, 0, 1276, 0, 0,
	0, 0, 1048, 0, 0, 0, 0, 1063, 1063, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1049, 0,
	0, 0, 0, 4495, 0, 0, 0, 0, 0, 0,
	0, 0, 1048, 0, 0, 0, 0, 1130, 0, 0,
	0, 0, 3301, 0, 4752, 0, 1928, 0, 1049, 0,
	0, 0, 1062, 1062, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4787, 0, 0, 0, 0,
	0, 0, 0, 0, 4792, 4793, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1048,
	0, 0, 0, 0, 0, 0, 0, 1928, 0, 0,
	0, 0, 0, 0, 0, 1049, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1928, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5361, 0, 3921, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1048, 0, 1048, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1049, 0, 1049, 0, 0, 0, 0, 0,
	0, 0, 2064, 2064, 0, 2064, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1048, 0, 0, 1048, 0,
	0, 0, 0, 0, 1048, 0, 0, 0, 0, 0,
	0, 1049, 0, 0, 1049, 2064, 2064, 0, 3328, 3328,
	1049, 0, 2064, 0, 0, 0, 0, 0, 0, 0,
	0, 4634, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4082, 4082, 0, 0, 0, 0, 0, 0, 0,
	0, 2064, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2064, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1497, 1530, 0, 0, 0, 1498, 0,
	2064, 0, 1506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3328, 3328, 3328, 3328, 3328,
	3328, 3328, 3328, 3328, 3328, 3328, 3328, 3328, 0, 3328,
	0, 4082, 4082, 4082, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2064, 0, 0, 0, 0,
	0, 1532, 0, 0, 3652, 0, 0, 0, 0, 1048,
	0, 1048, 0, 0, 0, 0, 0, 2064, 0, 0,
	0, 0, 0, 0, 0, 1049, 0, 1049, 0, 0,
	0, 2064, 0, 1505, 0, 2064, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1321, 0, 0, 0, 5584, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5599, 5600, 0,
	0, 1921, 5089, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4268, 0, 0, 5098,
	5099, 1921, 0, 1921, 0, 5103, 5104, 1496, 0, 0,
	0, 0, 5107, 5108, 0, 0, 0, 1921, 0, 5111,
	0, 0, 0, 0, 1531, 0, 5113, 0, 0, 0,
	0, 0, 0, 0, 1500, 0, 0, 2043, 0, 0,
	0, 0, 3328, 0, 0, 0, 0, 0, 0, 0,
	0, 1048, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4845, 4846, 1049, 4848, 1502,
	0, 0, 0, 0, 0, 1501, 0, 0, 0, 0,
	0, 0, 0, 5146, 0, 5149, 0, 0, 2839, 0,
	0, 0, 0, 0, 4879, 0, 0, 2839, 0, 0,
	0, 0, 4268, 0, 0, 0, 0, 0, 0, 0,
	2064, 5168, 0, 0, 0, 0, 1533, 0, 0, 0,
	1503, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2064, 0, 1534, 0, 0, 1535,
	0, 0, 0, 1536, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1529, 1050, 0, 0, 0,
	0, 0, 0, 0, 0, 1537, 1507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1050,
	0, 1497, 1530, 0, 0, 0, 1498, 0, 0, 0,
	1506, 0, 0, 0, 0, 0, 5253, 0, 0, 3650,
	0, 1509, 1508, 1540, 0, 0, 4992, 1047, 1047, 0,
	0, 0, 0, 0, 0, 0, 0, 2064, 0, 0,
	1538, 0, 0, 0, 0, 0, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1539, 0, 0,
	0, 5024, 0, 0, 0, 0, 0, 0, 0, 1532,
	0, 0, 1527, 0, 5278, 0, 2839, 3682, 0, 0,
	0, 0, 0, 0, 0, 3685, 0, 0, 0, 0,
	0, 1062, 0, 0, 1541, 0, 0, 0, 1499, 0,
	0, 1505, 0, 0, 5053, 0, 0, 0, 5307, 0,
	0, 0, 0, 0, 0, 0, 0, 5831, 5832, 0,
	0, 0, 0, 0, 1063, 0, 0, 0, 1512, 0,
	0, 0, 1510, 0, 3921, 0, 3921, 0, 0, 0,
	5075, 5075, 5075, 5075, 5075, 5075, 5075, 0, 5075, 5075,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1062,
	0, 0, 0, 0, 0, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1531, 0, 0, 2064, 0, 0, 5356, 0,
	5112, 0, 1500, 2064, 2064, 0, 0, 2064, 4082, 4082,
	2064, 0, 0, 0, 0, 2064, 0, 0, 0, 0,
	0, 2064, 0, 0, 0, 0, 0, 1063, 0, 0,
	0, 2064, 1050, 0, 0, 0, 2064, 1502, 1050, 0,
	0, 0, 0, 1501, 0, 0, 0, 2064, 1389, 2064,
	0, 4082, 4082, 4082, 4082, 4082, 4082, 4082, 4082, 4082,
	4082, 4082, 4082, 4082, 5952, 0, 0, 4082, 2064, 2064,
	2064, 0, 1062, 0, 0, 0, 2064, 0, 0, 0,
	0, 0, 0, 0, 1533, 0, 0, 0, 1503, 0,
	0, 5395, 0, 0, 0, 0, 0, 0, 0, 5397,
	5398, 5399, 2064, 2064, 2064, 0, 1050, 1063, 1063, 0,
	0, 0, 0, 0, 1534, 0, 0, 1535, 0, 0,
	0, 1536, 0, 0, 0, 5406, 0, 0, 0, 5409,
	5410, 5411, 0, 1529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1537, 1507, 0, 0, 2064, 0, 0,
	0, 0, 1062, 1062, 0, 5231, 3301, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5451, 0, 0, 0, 1525, 0, 1509,
	1508, 1540, 2064, 0, 0, 0, 0, 2064, 2064, 5468,
	0, 0, 0, 0, 0, 0, 1388, 5259, 1538, 0,
	1050, 1050, 0, 0, 0, 0, 0, 0, 0, 1921,
	0, 0, 0, 4082, 0, 1539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1541, 0, 0, 0, 1499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1048, 0, 0, 0,
	0, 6101, 0, 0, 0, 1048, 0, 0, 0, 0,
	0, 0, 1049, 0, 0, 0, 1512, 0, 0, 0,
	0, 1049, 0, 1293, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1065, 1065, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 961, 961, 0,
	0, 0, 0, 0, 1048, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1049, 1062, 0, 0, 0, 0, 0, 1048, 0, 0,
	0, 1062, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 6162, 1049, 0, 0, 0, 0, 0, 0,
	0, 0, 5365, 5366, 0, 5649, 0, 0, 0, 0,
	0, 0, 1050, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1063, 0, 3349, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5676, 0, 0,
	0, 0, 0, 0, 3921, 3921, 0, 3921, 125, 3921,
	0, 0, 1063, 0, 1048, 1048, 0, 0, 0, 0,
	5075, 0, 0, 1048, 0, 0, 0, 1062, 0, 0,
	1049, 1049, 1064, 1064, 852, 854, 0, 961, 0, 1049,
	0, 5708, 0, 1050, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 2064, 0, 0, 1062, 0, 0,
	3682, 0, 0, 2064, 2064, 0, 0, 0, 2064, 2064,
	0, 0, 2064, 2064, 0, 0, 2064, 0, 2064, 1063,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3328, 0, 0, 0, 1047, 0, 0, 0,
	0, 0, 0, 0, 3682, 0, 0, 0, 0, 0,
	1050, 2064, 0, 0, 2064, 0, 0, 0, 0, 1318,
	0, 0, 0, 0, 1062, 0, 0, 0, 0, 0,
	5779, 0, 0, 2064, 0, 0, 0, 5491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3328, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1063, 0, 1063, 0,
	1048, 0, 0, 5812, 1047, 0, 1048, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1049, 0, 0, 0,
	0, 0, 1049, 0, 0, 5828, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1063, 0, 0, 1063, 0,
	0, 1062, 0, 1062, 1063, 0, 0, 0, 2064, 0,
	4268, 0, 861, 2534, 0, 0, 0, 0, 5852, 5852,
	5852, 0, 5855, 0, 0, 0, 0, 0, 0, 0,
	0, 3301, 0, 2064, 1048, 0, 0, 0, 0, 0,
	1062, 0, 0, 1062, 0, 0, 0, 0, 0, 1062,
	1049, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2064, 0, 0, 0, 0, 1047, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2839, 3682, 0, 3682, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2064, 0, 0, 0, 3921, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1048, 1048,
	0, 0, 0, 0, 0, 0, 1050, 1050, 0, 0,
	0, 0, 0, 0, 1049, 1049, 0, 1047, 1047, 1063,
	2064, 1063, 2064, 2064, 2064, 0, 0, 0, 0, 0,
	0, 2064, 4082, 3328, 2064, 2064, 2064, 0, 0, 0,
	0, 0, 0, 0, 5975, 1044, 1044, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1062, 0, 1062, 0, 0, 0,
	5649, 0, 0, 893, 0, 0, 2064, 0, 5852, 0,
	0, 0, 0, 5718, 0, 0, 1130, 0, 1050, 0,
	0, 4082, 3328, 2064, 0, 0, 1050, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	975, 978, 980, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1050, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 6056, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	6065, 1063, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1048, 0, 0, 0, 0, 0, 1062, 0, 0, 0,
	0, 0, 0, 1050, 0, 0, 1049, 0, 0, 0,
	0, 0, 0, 0, 5649, 1921, 1047, 0, 0, 1921,
	0, 0, 0, 0, 0, 0, 1047, 0, 0, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 854, 0, 0, 0, 0,
	0, 1048, 0, 0, 2064, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1049, 1048, 4082,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2064, 0, 0, 1049, 0, 0, 0, 5898, 5899,
	5900, 5901, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1065, 1047, 1130, 0, 0, 3328, 0, 0, 4082,
	0, 0, 1048, 2064, 1050, 0, 0, 0, 1048, 5852,
	0, 0, 0, 1050, 0, 0, 0, 0, 1049, 0,
	6175, 0, 1047, 0, 1049, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1050, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 852,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2064, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1047,
	0, 0, 0, 0, 1065, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2064, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2064, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1919, 1064,
	0, 0, 0, 0, 0, 0, 0, 2064, 0, 0,
	2064, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2839, 0,
	0, 0, 0, 0, 1065, 1065, 1047, 0, 1047, 2839,
	2839, 0, 0, 3682, 0, 0, 0, 0, 0, 1048,
	1048, 0, 1048, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1049, 1049, 0, 1049, 0,
	0, 0, 0, 0, 0, 1047, 0, 1050, 1047, 0,
	0, 0, 0, 0, 1047, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1064, 0, 1048, 1048, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1049, 1049, 0, 0, 0, 0, 0, 0, 0, 0,
	2064, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3682,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1177, 0, 0, 0,
	0, 0, 0, 0, 0, 1183, 0, 1130, 0, 0,
	0, 0, 1064, 1064, 3328, 3328, 1048, 0, 3328, 0,
	0, 0, 0, 0, 1048, 0, 0, 0, 0, 0,
	0, 0, 1049, 0, 0, 0, 0, 0, 0, 0,
	1049, 2064, 0, 0, 0, 125, 0, 0, 0, 0,
	2064, 0, 0, 0, 0, 0, 0, 0, 0, 1047,
	0, 1047, 1048, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 1049, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3682, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1044, 0, 0, 1394, 4082, 4082,
	0, 4082, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1412, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 1063, 0, 1420, 1423, 0,
	1425, 1048, 0, 0, 0, 0, 0, 852, 0, 6232,
	852, 852, 0, 0, 0, 0, 0, 1049, 0, 0,
	2064, 0, 2546, 0, 0, 0, 0, 0, 0, 1065,
	0, 1062, 0, 0, 2536, 0, 0, 0, 2538, 2539,
	1062, 0, 1044, 1465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1065,
	0, 1047, 0, 0, 1063, 0, 0, 0, 0, 0,
	6232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 1547, 0, 1063, 0, 0,
	0, 1064, 0, 0, 0, 0, 0, 0, 6232, 0,
	0, 0, 5112, 0, 0, 0, 0, 0, 0, 1062,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1048, 0, 0, 0, 1065, 0, 0, 0,
	0, 1048, 1062, 0, 0, 0, 0, 0, 1049, 0,
	0, 0, 0, 0, 0, 1044, 0, 1049, 0, 0,
	0, 0, 0, 0, 0, 125, 1048, 0, 0, 0,
	0, 0, 0, 0, 1063, 1063, 0, 0, 0, 0,
	0, 0, 1049, 1063, 0, 0, 0, 1064, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1050, 0, 0, 1064, 0, 1062,
	1062, 0, 0, 1065, 0, 1065, 0, 259, 1062, 0,
	0, 0, 0, 0, 0, 1044, 1044, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 241,
	0, 0, 0, 0, 226, 0, 0, 0, 239, 1833,
	0, 0, 1065, 0, 0, 1065, 0, 0, 0, 0,
	1833, 1065, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1064, 0, 0, 0, 0, 5229,
	253, 232, 0, 0, 1050, 0, 1048, 0, 0, 0,
	0, 0, 2839, 0, 0, 0, 0, 1048, 1048, 0,
	0, 1048, 1049, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1049, 1049, 0, 0, 1049, 0, 0,
	1063, 0, 0, 0, 0, 0, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 1048, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1049, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 1064, 0, 1062, 0, 0, 0, 0,
	0, 1062, 0, 0, 0, 0, 233, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1063, 0, 0, 0, 0, 0,
	1064, 0, 234, 1064, 0, 0, 1065, 1048, 1065, 1064,
	0, 0, 0, 235, 0, 0, 0, 0, 0, 0,
	1050, 0, 0, 1049, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1044, 0, 0, 0, 237, 1062,
	0, 0, 0, 0, 1044, 251, 0, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 0, 0, 0, 0,
	0, 231, 0, 238, 0, 0, 0, 0, 0, 0,
	0, 0, 1050, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 227, 0, 0, 0, 1063, 1063,
	0, 0, 0, 0, 0, 0, 0, 0, 2595, 260,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1048, 0, 1050, 1050, 0, 0, 2645, 0, 0,
	1044, 0, 0, 1062, 1062, 0, 0, 1049, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1065, 0,
	0, 0, 242, 0, 1064, 0, 1064, 125, 0, 0,
	1044, 261, 243, 0, 244, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2713, 0, 0, 0,
	2717, 0, 0, 252, 0, 2729, 245, 0, 0, 249,
	125, 246, 0, 0, 0, 0, 228, 0, 0, 247,
	0, 0, 0, 0, 0, 0, 2777, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 2792, 254, 1044, 0, 0,
	0, 256, 0, 0, 0, 0, 0, 250, 0, 0,
	0, 257, 0, 0, 0, 2810, 0, 0, 0, 2814,
	0, 0, 0, 0, 0, 0, 0, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 1047, 0, 0, 0,
	0, 0, 0, 0, 0, 1047, 0, 0, 1050, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1063, 0, 0, 0, 0, 0, 1064, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1044, 0, 1044, 0, 0, 0,
	0, 0, 3682, 0, 0, 0, 0, 0, 0, 0,
	0, 2906, 0, 0, 0, 1062, 0, 0, 0, 2729,
	2729, 2729, 0, 0, 1047, 0, 0, 0, 0, 0,
	0, 0, 0, 1044, 0, 0, 1044, 0, 0, 0,
	0, 1063, 1044, 0, 0, 2940, 2941, 1047, 0, 0,
	0, 0, 1048, 0, 0, 0, 0, 3682, 1063, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1049, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1062, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3261,
	0, 0, 1063, 1062, 0, 0, 0, 0, 1063, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1047, 1047, 0, 0, 0, 0,
	0, 0, 1048, 1047, 0, 0, 0, 0, 0, 0,
	1048, 0, 0, 0, 0, 0, 0, 1062, 1049, 0,
	0, 0, 0, 1062, 0, 0, 1049, 0, 0, 0,
	0, 0, 0, 3054, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1044, 0, 1044,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1833, 1833, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1177, 1177, 0, 1177, 0,
	3108, 0, 0, 3110, 3111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1048, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1047, 0, 0, 0, 1049, 0, 1047, 0, 0, 1063,
	1063, 0, 1063, 0, 0, 0, 0, 0, 0, 5229,
	0, 0, 0, 0, 0, 0, 1050, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1048, 0, 0, 0, 0, 0, 0, 0, 0, 1044,
	0, 0, 0, 0, 1062, 1062, 1049, 1062, 0, 0,
	0, 0, 0, 0, 1063, 1063, 0, 0, 0, 0,
	0, 0, 0, 0, 1047, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1048, 1048, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1049, 1049, 1062,
	1062, 0, 0, 0, 0, 0, 1050, 0, 1050, 1050,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1833, 0, 0, 0, 0, 0, 1063, 0, 0, 0,
	3213, 0, 0, 1065, 1063, 0, 0, 0, 0, 0,
	0, 0, 1065, 0, 0, 0, 0, 0, 1047, 1047,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1062, 1063, 0, 1050, 0, 0, 0, 0, 1062,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1065, 0, 0, 0, 0, 0, 1062, 0, 0,
	0, 0, 0, 0, 0, 0, 1048, 0, 0, 0,
	0, 0, 0, 0, 1065, 0, 0, 0, 0, 0,
	0, 0, 1049, 0, 0, 0, 0, 0, 0, 0,
	0, 1063, 0, 0, 0, 3272, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1048, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 1049, 0, 0, 0,
	1064, 0, 0, 0, 0, 0, 1062, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3364, 0,
	0, 1065, 1065, 0, 0, 0, 0, 0, 0, 0,
	1065, 0, 0, 0, 0, 1048, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3261, 0, 0, 0, 0,
	0, 1049, 0, 0, 0, 0, 854, 0, 0, 0,
	1047, 0, 0, 0, 0, 0, 3406, 3406, 0, 1064,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1063, 0, 0, 0, 0, 0, 0, 0,
	0, 1063, 1064, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1062, 0, 0,
	0, 1047, 0, 0, 0, 0, 1062, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1047, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1062, 0, 0, 0, 0, 0, 0, 0, 1064,
	1064, 0, 0, 0, 0, 0, 0, 1065, 1064, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 1047, 0, 0, 0, 0, 0, 1047, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1063, 0, 0, 0,
	0, 1065, 0, 0, 0, 0, 0, 1063, 1063, 0,
	0, 1063, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1048, 0, 0, 0, 0, 0,
	0, 1062, 0, 0, 0, 1063, 0, 0, 0, 0,
	1049, 0, 1062, 1062, 0, 0, 1062, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1064, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 0, 0, 0, 0,
	1062, 0, 0, 0, 1044, 1065, 1065, 0, 0, 0,
	0, 0, 0, 1044, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1050, 0, 0, 0, 1063, 0, 0,
	0, 0, 0, 0, 1048, 0, 1048, 1048, 0, 1047,
	1047, 0, 1047, 0, 0, 0, 0, 0, 0, 0,
	1049, 0, 1049, 1049, 0, 0, 0, 0, 0, 1064,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1062, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1044, 1921, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1047, 1047, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1044, 0, 0, 0, 0,
	0, 0, 1048, 0, 0, 0, 0, 0, 0, 3479,
	0, 0, 0, 0, 0, 0, 0, 0, 1049, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1063, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1064, 1064, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1047, 0, 0, 0,
	0, 0, 1044, 1044, 1047, 0, 1062, 0, 0, 0,
	0, 1044, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3576, 3577, 0, 0, 0, 1065, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1047, 0, 0, 0, 0, 0, 0, 0,
	0, 3614, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3638, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3663, 0, 0, 0, 0, 0, 1065, 2536,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1065, 0, 0, 0, 3406,
	0, 1047, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3261, 0, 0, 0, 0, 1044, 1065,
	0, 0, 0, 0, 1044, 1065, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1064, 2536, 4019, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1063, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1044, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1047, 0, 0, 0, 1064, 0, 0, 0,
	0, 1047, 0, 0, 0, 0, 0, 1062, 0, 0,
	0, 0, 0, 1064, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1047, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1063, 0, 0, 0, 0, 0, 0, 0,
	1063, 0, 0, 0, 0, 0, 0, 1064, 0, 0,
	0, 0, 0, 1064, 0, 0, 0, 0, 0, 0,
	0, 4166, 0, 4170, 0, 0, 1044, 1044, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1062, 3885, 0,
	0, 0, 0, 0, 0, 1062, 1065, 1065, 0, 1065,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1065, 1065, 0, 0, 0, 1047, 0, 0, 0,
	0, 1048, 0, 0, 0, 0, 0, 1047, 1047, 0,
	0, 1047, 0, 0, 0, 0, 0, 1049, 1063, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 0, 0, 1047, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1062, 0, 0, 0, 0, 0, 0,
	1063, 0, 0, 1065, 0, 3987, 0, 0, 0, 0,
	0, 1065, 0, 0, 1064, 1064, 0, 1064, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1062, 0, 1047, 1044, 1065,
	0, 1063, 1063, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1064,
	1064, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1062, 1062, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1044,
	0, 0, 0, 0, 0, 0, 0, 0, 1065, 0,
	0, 0, 0, 0, 0, 0, 1044, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 0, 0, 0, 1064,
	0, 1047, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1044, 0, 0, 0, 0, 0, 1044, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1064, 0, 0,
	0, 0, 0, 0, 0, 0, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4193, 0, 4196, 0,
	0, 4201, 0, 0, 0, 0, 4207, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1065,
	1063, 1062, 0, 0, 0, 0, 0, 0, 1065, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4243, 0, 0, 1064, 0, 0, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1062, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1063, 0, 0, 0, 0,
	4295, 4296, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 0, 0, 2729, 0,
	1062, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1044, 1044, 0,
	1044, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1064, 0, 0,
	0, 0, 0, 0, 0, 0, 1064, 0, 0, 0,
	0, 0, 1047, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 1044, 1044, 1065, 1065, 0, 0, 1065, 0,
	0, 1064, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2536, 0, 0, 0, 0, 0,
	0, 0, 1065, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1047, 0, 0, 0, 0, 0, 0, 0,
	1047, 0, 0, 0, 1044, 0, 0, 0, 0, 0,
	0, 0, 1044, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4467, 0, 0, 0, 1065, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1044, 0, 0, 0, 1063, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 0, 1064, 1064, 125, 125, 1064, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3406, 0, 0, 3406,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1062,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1064, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1047, 1044,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	0, 0, 0, 0, 1063, 0, 1063, 1063, 1065, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1047, 0, 1064, 0, 0, 0, 0, 0, 0, 1062,
	0, 1062, 1062, 0, 0, 0, 0, 0, 1833, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1063, 0, 0, 0, 0, 0, 0, 0,
	0, 1047, 1047, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1044, 0, 0, 0, 0, 0, 0, 3406, 0, 1044,
	0, 0, 0, 0, 0, 0, 0, 1062, 0, 0,
	0, 0, 0, 4601, 4602, 0, 0, 0, 0, 4607,
	0, 0, 0, 0, 1044, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1064, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1047, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1065,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1044, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1044, 1044, 0, 0, 1044,
	1047, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1044, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1065,
	0, 0, 0, 0, 0, 1047, 0, 1065, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4794, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1044, 0, 4808, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1064, 0, 0,
	0, 4819, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2713, 0, 0,
	0, 0, 0, 0, 0, 1065, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1064, 0, 0,
	0, 0, 0, 0, 0, 1064, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1044,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3406, 3406, 0, 0, 3406, 0, 0, 1065, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1063, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1065, 1065,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1047, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1062, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1064, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1064, 0, 0, 0, 0,
	0, 0, 0, 0, 1047, 0, 1047, 1047, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1064, 1064, 0, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5094, 5095, 5096, 5097,
	1044, 0, 1047, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1065, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1065, 0, 0, 0, 0, 0, 0, 0,
	1044, 0, 0, 0, 0, 0, 0, 0, 1044, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1064, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	5236, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3406,
	0, 0, 0, 0, 0, 0, 1044, 0, 0, 0,
	1064, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 0, 0, 1044, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1044,
	1044, 1065, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1065, 0, 1065, 1065, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1064,
	0, 0, 0, 0, 1044, 0, 0, 0, 0, 0,
	0, 1047, 125, 0, 0, 0, 0, 0, 0, 1065,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1044, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 0, 1064,
	0, 1064, 1064, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1044, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1833, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	5517, 0, 3406, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1064, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 5568, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2536, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1044, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1044, 0, 1044, 1044, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5759, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5766, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1065, 0,
	0, 0, 0, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5806, 0, 0, 0,
	1044, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1064, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1926, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1931, 326, 1937, 343, 824, 1947, 392,
	429, 644, 1934, 1979, 489, 1984, 542, 546, 2008, 635,
	1941, 1944, 1954, 1957, 400, 1962, 829, 1970, 835, 1980,
	841, 1999, 611, 2005, 831, 832, 837, 331, 719, 634,
	705, 1993, 1939, 1997, 496, 1990, 1966, 2006, 1983, 1995,
	1976, 1981, 339, 1968, 1969, 1973, 1982, 833, 830, 834,
	840, 828, 838, 825, 836, 2003, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 1938, 1956, 445, 615,
	380, 469, 1989, 359, 502, 2002, 591, 466, 1996, 574,
	594, 1958, 486, 365, 525, 581, 582, 822, 827, 1946,
	843, 1933, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 1964, 477, 534, 691, 1936, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 1044,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 2004, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 1932, 328, 329, 330, 332, 333,
	334, 821, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 823, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 1948, 1949, 1950, 826, 1951, 1952, 1953, 372, 373,
	374, 375, 376, 377, 1955, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 1959, 395, 397, 1960, 398,
	401, 1961, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 1963, 411, 412, 414, 1965, 417, 418, 419,
	420, 421, 1967, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 1971, 442, 443, 444, 446, 1972, 447,
	448, 451, 452, 453, 454, 1974, 456, 664, 1975, 457,
	458, 459, 1977, 1978, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 839, 503, 504, 505, 506,
	507, 508, 509, 511, 1986, 513, 514, 515, 674, 516,
	517, 518, 519, 1987, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 1988, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 1991, 568, 678, 569,
	570, 571, 572, 573, 1992, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 1994,
	592, 593, 842, 595, 596, 597, 598, 599, 1998, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 2000, 2001, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 2007, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 1985, 1935, 1940, 1942, 1943, 1945, 0, 0, 0,
	0, 0, 0, 0, 0, 2082, 0, 0, 0, 0,
	0, 0, 2079, 0, 0, 2049, 0, 0, 1924, 2061,
	2062, 2063, 2093, 2095, 2077, 2122, 2143, 0, 2194, 2240,
	2210, 2065, 2327, 2333, 2066, 2394, 2398, 0, 2074, 2124,
	2050, 2174, 2189, 2204, 2216, 2069, 2075, 2067, 2331, 2070,
	2475, 2486, 2506, 2071, 2072, 2073, 2051, 2467, 2524, 2293,
	2452, 2104, 0, 2080, 2418, 0, 0, 2341, 2456, 0,
	0, 2118, 0, 0, 0, 0, 2266, 2255, 2289, 2402,
	2227, 2347, 2155, 2314, 2492, 2384, 2303, 2498, 2416, 2117,
	2183, 2167, 2219, 2284, 2425, 2100, 2184, 2259, 2490, 2179,
	2305, 0, 2146, 2349, 2491, 2454, 2302, 2465, 2435, 2460,
	2190, 2328, 2153, 2375, 2442, 2443, 2113, 2226, 2148, 2501,
	2098, 2158, 2166, 2336, 2137, 2344, 2522, 2276, 2409, 2359,
	2357, 0, 2316, 2385, 2517, 0, 0, 2203, 0, 2197,
	2335, 2509, 2144, 2483, 2378, 2340, 2278, 2412, 2447, 2199,
	2180, 2181, 2237, 2377, 2222, 2156, 2497, 2273, 2277, 2275,
	2271, 2268, 2272, 2269, 2270, 2274, 2224, 2267, 0, 0,
	2114, 2334, 2262, 2432, 2112, 2381, 2220, 2193, 0, 0,
	0, 2499, 2313, 2315, 0, 2468, 2263, 2261, 2172, 2171,
	2115, 2500, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091,
	2092, 2094, 2096, 2097, 2101, 2102, 2103, 2105, 2106, 2107,
	2108, 2109, 2110, 2111, 2119, 2120, 2121, 2123, 2126, 2127,
	2128, 2130, 2131, 2132, 2133, 2134, 2135, 2138, 2139, 2140,
	2141, 2142, 2145, 2147, 2149, 2150, 2151, 2152, 2154, 2157,
	2159, 2160, 2161, 2162, 2163, 2164, 2165, 2168, 2169, 0,
	2170, 2173, 2175, 2176, 2177, 2178, 2182, 2185, 2186, 2187,
	2188, 2191, 2192, 2195, 2196, 2198, 2200, 2201, 2202, 2205,
	0, 2206, 2207, 2208, 2209, 2211, 2212, 2213, 2214, 2215,
	2217, 0, 0, 2218, 2221, 2223, 2225, 2228, 2229, 2230,
	2231, 0, 2232, 2233, 2234, 2235, 2236, 2238, 0, 2239,
	2241, 2242, 2243, 2244, 2245, 2246, 2247, 2248, 2249, 2250,
	2251, 2252, 2253, 2254, 2257, 2258, 2260, 0, 2264, 2265,
	2280, 2281, 2282, 2283, 2285, 2287, 2288, 2286, 2290, 2291,
	2292, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 2301, 2304,
	2306, 2307, 0, 2308, 2309, 0, 2310, 2311, 2312, 2317,
	2318, 2319, 2320, 2321, 2322, 2323, 2324, 2325, 2326, 2329,
	2330, 2332, 2346, 2348, 0, 2350, 2351, 2352, 2353, 2354,
	2355, 2356, 2358, 2360, 2361, 2362, 2363, 2364, 2365, 2366,
	2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2376, 2379,
	2380, 2382, 2383, 2386, 2387, 2388, 2389, 2390, 2391, 2392,
	2393, 2395, 2396, 2397, 2399, 2400, 2401, 2403, 2404, 2405,
	2406, 2407, 2408, 2410, 2411, 2413, 2414, 2415, 0, 2417,
	2419, 2420, 2421, 2422, 2423, 2424, 2427, 2426, 2428, 2429,
	2430, 2431, 2433, 2434, 2436, 2437, 2438, 2439, 2440, 2441,
	2444, 2445, 2446, 2448, 2449, 2450, 2451, 2453, 2455, 2457,
	2459, 2458, 2461, 2462, 2463, 2464, 2466, 2469, 2470, 2471,
	2472, 2473, 2474, 2476, 2477, 2478, 2479, 2480, 2481, 2482,
	2484, 0, 2485, 2487, 2488, 2489, 2493, 2494, 2495, 2496,
	2502, 2503, 2504, 2505, 2507, 0, 0, 2508, 2510, 2511,
	2512, 2513, 2514, 2515, 2516, 2518, 2519, 2520, 2521, 0,
	2523, 2256, 2345, 2339, 2279, 2337, 2338, 2342, 2343, 0,
	0, 2099, 2116, 2125, 2129, 2136, 0, 2068, 0, 0,
	0, 0, 0, 0, 0, 0, 2058, 2059, 2060, 0,
	0, 0, 0, 0, 0, 2052, 2053, 2054, 2055, 2056,
	2057, 1926, 0, 6231, 804, 0, 0, 0, 0, 790,
	0, 0, 0, 0, 0, 0, 0, 0, 1931, 326,
	1937, 343, 824, 1947, 392, 429, 644, 1934, 1979, 489,
	1984, 542, 546, 2008, 635, 1941, 1944, 1954, 1957, 400,
	1962, 829, 1970, 835, 1980, 841, 1999, 611, 2005, 831,
	832, 837, 331, 719, 634, 705, 1993, 1939, 1997, 496,
	1990, 1966, 2006, 1983, 1995, 1976, 1981, 339, 1968, 1969,
	1973, 1982, 833, 830, 834, 840, 828, 838, 825, 836,
	2003, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 1938, 1956, 445, 615, 380, 469, 1989, 359, 502,
	2002, 591, 466, 1996, 574, 594, 1958, 486, 365, 525,
	581, 582, 822, 827, 1946, 843, 1933, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 1964, 477, 534,
	691, 1936, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 2004, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 1932,
	328, 329, 330, 332, 333, 334, 821, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 823, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 1948, 1949, 1950, 826,
	1951, 1952, 1953, 372, 373, 374, 375, 376, 377, 1955,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	1959, 395, 397, 1960, 398, 401, 1961, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 1963, 411, 412,
	414, 1965, 417, 418, 419, 420, 421, 1967, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 1971, 442,
	443, 444, 446, 1972, 447, 448, 451, 452, 453, 454,
	1974, 456, 664, 1975, 457, 458, 459, 1977, 1978, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	839, 503, 504, 505, 506, 507, 508, 509, 511, 1986,
	513, 514, 515, 674, 516, 517, 518, 519, 1987, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 1988,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 1991, 568, 678, 569, 570, 571, 572, 573, 1992,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 1994, 592, 593, 842, 595, 596,
	597, 598, 599, 1998, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 2000, 2001, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 2007, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 1985, 1935, 1940, 1942,
	1943, 1945, 1926, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1931,
	326, 1937, 343, 824, 1947, 392, 429, 644, 1934, 1979,
	489, 1984, 542, 546, 2008, 635, 1941, 1944, 1954, 1957,
	400, 1962, 829, 1970, 835, 1980, 841, 1999, 611, 2005,
	831, 832, 837, 331, 719, 634, 705, 1993, 1939, 1997,
	496, 1990, 1966, 2006, 1983, 1995, 1976, 1981, 339, 1968,
	1969, 1973, 1982, 833, 830, 834, 840, 828, 838, 825,
	836, 2003, 533, 467, 684, 560, 338, 384, 371, 413,
	455, 567, 1938, 1956, 445, 615, 380, 469, 1989, 359,
	502, 2002, 591, 466, 1996, 574, 594, 1958, 486, 365,
	525, 581, 582, 822, 827, 1946, 843, 1933, 369, 370,
	491, 351, 499, 696, 662, 554, 512, 510, 1964, 477,
	534, 691, 1936, 0, 399, 0, 394, 490, 630, 357,
	609, 528, 495, 449, 557, 586, 396, 381, 382, 425,
	527, 415, 367, 620, 659, 663, 661, 657, 654, 658,
	655, 656, 660, 416, 653, 0, 628, 637, 671, 651,
	679, 636, 676, 646, 391, 675, 640, 639, 685, 666,
	667, 621, 681, 652, 650, 643, 642, 638, 2004, 316,
	317, 318, 319, 320, 321, 322, 323, 324, 325, 327,
	1932, 328, 329, 330, 332, 333, 334, 821, 335, 336,
	337, 340, 341, 342, 344, 704, 345, 346, 347, 348,
	349, 350, 641, 823, 352, 353, 354, 355, 356, 358,
	360, 361, 362, 363, 364, 366, 368, 1948, 1949, 1950,
	826, 1951, 1952, 1953, 372, 373, 374, 375, 376, 377,
	1955, 378, 379, 383, 385, 386, 387, 388, 389, 390,
	393, 1959, 395, 397, 1960, 398, 401, 1961, 402, 403,
	404, 405, 406, 407, 408, 409, 645, 410, 1963, 411,
	412, 414, 1965, 417, 418, 419, 420, 421, 1967, 422,
	647, 648, 423, 424, 426, 427, 428, 430, 431, 432,
	433, 434, 435, 436, 437, 438, 439, 440, 441, 1971,
	442, 443, 444, 446, 1972, 447, 448, 451, 452, 453,
	454, 1974, 456, 664, 1975, 457, 458, 459, 1977, 1978,
	460, 461, 462, 463, 464, 465, 468, 665, 470, 471,
	472, 473, 474, 475, 476, 706, 478, 479, 480, 481,
	482, 483, 484, 668, 669, 485, 487, 488, 670, 672,
	673, 839, 503, 504, 505, 506, 507, 508, 509, 511,
	1986, 513, 514, 515, 674, 516, 517, 518, 519, 1987,
	520, 521, 522, 523, 524, 526, 529, 530, 531, 532,
	1988, 535, 536, 537, 538, 539, 540, 541, 543, 544,
	545, 547, 548, 549, 707, 550, 551, 552, 553, 677,
	555, 556, 708, 558, 559, 561, 562, 563, 564, 565,
	566, 717, 1991, 568, 678, 569, 570, 571, 572, 573,
	1992, 575, 576, 577, 578, 579, 580, 583, 584, 585,
	587, 588, 680, 589, 590, 1994, 592, 593, 842, 595,
	596, 597, 598, 599, 1998, 718, 600, 682, 601, 683,
	602, 603, 604, 605, 606, 607, 608, 610, 2000, 2001,
	612, 613, 614, 616, 617, 618, 619, 622, 623, 624,
	625, 626, 2007, 627, 629, 631, 709, 686, 687, 688,
	689, 690, 692, 693, 694, 695, 632, 633, 649, 500,
	494, 450, 492, 493, 497, 498, 501, 1985, 1935, 1940,
	1942, 1943, 1945, 1070, 0, 1700, 804, 0, 0, 0,
	919, 790, 0, 0, 0, 0, 0, 930, 931, 932,
	1931, 326, 1937, 343, 824, 1947, 392, 429, 0, 1934,
	1979, 489, 1984, 542, 546, 2008, 0, 1941, 1944, 1954,
	1957, 400, 1962, 829, 1970, 835, 1980, 841, 1999, 611,
	2005, 831, 832, 837, 331, 1067, 634, 705, 1993, 1939,
	1997, 4270, 1990, 1966, 2006, 1983, 1995, 1976, 1981, 339,
	1968, 1969, 1973, 1982, 833, 830, 834, 840, 828, 838,
	825, 836, 2003, 533, 467, 0, 560, 338, 384, 371,
	413, 455, 567, 1938, 1956, 445, 615, 380, 469, 1989,
	359, 502, 2002, 591, 466, 1996, 574, 594, 1958, 486,
	365, 525, 581, 582, 822, 827, 1946, 843, 1933, 369,
	370, 491, 351, 499, 0, 0, 554, 512, 510, 1964,
	477, 534, 0, 1936, 0, 399, 0, 394, 490, 630,
	357, 609, 528, 495, 449, 557, 586, 396, 381, 382,
	425, 527, 415, 367, 620, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 416, 1069, 0, 628, 1072, 1060,
	1052, 1053, 1054, 1055, 1056, 1057, 0, 1074, 1075, 1076,
	1077, 1078, 621, 1066, 1068, 1051, 1058, 1059, 1061, 2004,
	316, 317, 318, 319, 320, 321, 322, 323, 324, 325,
	327, 1932, 328, 329, 330, 332, 333, 334, 821, 335,
	336, 337, 340, 341, 342, 344, 704, 345, 346, 347,
	348, 349, 350, 0, 823, 352, 353, 354, 355, 356,
	358, 360, 361, 362, 363, 364, 366, 368, 1948, 1949,
	1950, 826, 1951, 1952, 1953, 372, 373, 374, 375, 376,
	377, 1955, 378, 379, 383, 385, 386, 387, 388, 389,
	390, 393, 1959, 395, 397, 1960, 398, 401, 1961, 402,
	403, 404, 405, 406, 407, 408, 409, 0, 410, 1963,
	411, 412, 414, 1965, 417, 418, 419, 420, 421, 1967,
	422, 0, 0, 423, 424, 426, 427, 428, 430, 431,
	432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	1971, 442, 443, 444, 446, 1972, 447, 448, 451, 452,
	453, 454, 1974, 456, 0, 1975, 457, 458, 459, 1977,
	1978, 460, 461, 462, 463, 464, 465, 468, 0, 470,
	471, 472, 473, 474, 475, 476, 706, 478, 479, 480,
	481, 482, 483, 484, 4269, 0, 485, 487, 488, 0,
	0, 0, 839, 503, 504, 505, 506, 507, 508, 509,
	511, 1986, 513, 514, 515, 0, 516, 517, 518, 519,
	1987, 520, 521, 522, 523, 524, 526, 529, 530, 531,
	532, 1988, 535, 536, 537, 538, 539, 540, 541, 543,
	544, 545, 547, 548, 549, 707, 550, 551, 552, 553,
	0, 555, 556, 708, 558, 559, 561, 562, 563, 564,
	565, 566, 717, 1991, 568, 2841, 569, 570, 571, 572,
	573, 1992, 575, 576, 577, 578, 579, 580, 583, 584,
	585, 587, 588, 0, 589, 590, 1994, 592, 593, 842,
	595, 596, 597, 598, 599, 1998, 718, 600, 0, 601,
	0, 602, 603, 604, 605, 606, 607, 608, 610, 2000,
	2001, 612, 613, 614, 616, 617, 618, 619, 622, 623,
	624, 625, 626, 2007, 627, 629, 631, 709, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 632, 633, 0,
	500, 494, 450, 492, 493, 497, 498, 501, 1985, 1935,
	1940, 1942, 1943, 1945, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 927, 928, 929, 0, 0, 0,
	0, 0, 0, 4271, 4272, 923, 924, 925, 926, 1070,
	0, 1700, 804, 0, 0, 0, 919, 790, 0, 0,
	0, 0, 0, 930, 931, 932, 1931, 326, 1937, 343,
	824, 1947, 392, 429, 0, 1934, 1979, 489, 1984, 542,
	546, 2008, 0, 1941, 1944, 1954, 1957, 400, 1962, 829,
	1970, 835, 1980, 841, 1999, 611, 2005, 831, 832, 837,
	331, 1067, 634, 705, 1993, 1939, 1997, 4270, 1990, 1966,
	2006, 1983, 1995, 1976, 1981, 339, 1968, 1969, 1973, 1982,
	833, 830, 834, 840, 828, 838, 825, 836, 2003, 533,
	467, 0, 560, 338, 384, 371, 413, 455, 567, 1938,
	1956, 445, 615, 380, 469, 1989, 359, 502, 2002, 591,
	466, 1996, 574, 594, 1958, 486, 365, 525, 581, 582,
	822, 827, 1946, 843, 1933, 369, 370, 491, 351, 499,
	0, 0, 554, 512, 510, 1964, 477, 534, 0, 1936,
	0, 399, 0, 394, 490, 630, 357, 609, 528, 495,
	449, 557, 586, 396, 381, 382, 425, 527, 415, 367,
	620, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	416, 1069, 0, 628, 1072, 1060, 1052, 1053, 1054, 1055,
	1056, 1057, 0, 1074, 1075, 1076, 1077, 1078, 621, 1066,
	1068, 1051, 1058, 1059, 1061, 2004, 316, 317, 318, 319,
	320, 321, 322, 323, 324, 325, 327, 1932, 328, 329,
	330, 332, 333, 334, 821, 335, 336, 337, 340, 341,
	342, 344, 704, 345, 346, 347, 348, 349, 350, 0,
	823, 352, 353, 354, 355, 356, 358, 360, 361, 362,
	363, 364, 366, 368, 1948, 1949, 1950, 826, 1951, 1952,
	1953, 372, 373, 374, 375, 376, 377, 1955, 378, 379,
	383, 385, 386, 387, 388, 389, 390, 393, 1959, 395,
	397, 1960, 398, 401, 1961, 402, 403, 404, 405, 406,
	407, 408, 409, 0, 410, 1963, 411, 412, 414, 1965,
	417, 418, 419, 420, 421, 1967, 422, 0, 0, 423,
	424, 426, 427, 428, 430, 431, 432, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 1971, 442, 443, 444,
	446, 1972, 447, 448, 451, 452, 453, 454, 1974, 456,
	0, 1975, 457, 458, 459, 1977, 1978, 460, 461, 462,
	463, 464, 465, 468, 0, 470, 471, 472, 473, 474,
	475, 476, 706, 478, 479, 480, 481, 482, 483, 484,
	4986, 0, 485, 487, 488, 0, 0, 0, 839, 503,
	504, 505, 506, 507, 508, 509, 511, 1986, 513, 514,
	515, 0, 516, 517, 518, 519, 1987, 520, 521, 522,
	523, 524, 526, 529, 530, 531, 532, 1988, 535, 536,
	537, 538, 539, 540, 541, 543, 544, 545, 547, 548,
	549, 707, 550, 551, 552, 553, 0, 555, 556, 708,
	558, 559, 561, 562, 563, 564, 565, 566, 717, 1991,
	568, 2841, 569, 570, 571, 572, 573, 1992, 575, 576,
	577, 578, 579, 580, 583, 584, 585, 587, 588, 0,
	589, 590, 1994, 592, 593, 842, 595, 596, 597, 598,
	599, 1998, 718, 600, 0, 601, 0, 602, 603, 604,
	605, 606, 607, 608, 610, 2000, 2001, 612, 613, 614,
	616, 617, 618, 619, 622, 623, 624, 625, 626, 2007,
	627, 629, 631, 709, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 632, 633, 0, 500, 494, 450, 492,
	493, 497, 498, 501, 1985, 1935, 1940, 1942, 1943, 1945,
	0, 0, 0, 0, 0, 0, 0, 0, 1926, 0,
	927, 928, 929, 0, 0, 0, 0, 0, 0, 4271,
	4272, 923, 924, 925, 926, 1931, 326, 1937, 343, 824,
	1947, 3628, 429, 644, 1934, 1979, 489, 1984, 542, 546,
	2008, 635, 1941, 1944, 1954, 1957, 400, 1962, 829, 1970,
	835, 1980, 841, 1999, 611, 2005, 831, 832, 837, 331,
	719, 634, 705, 1993, 1939, 1997, 496, 1990, 1966, 2006,
	1983, 1995, 1976, 1981, 339, 1968, 1969, 1973, 1982, 833,
	830, 834, 840, 828, 838, 825, 836, 2003, 533, 467,
	684, 560, 338, 384, 371, 413, 455, 3626, 1938, 1956,
	445, 615, 380, 469, 1989, 359, 502, 2002, 591, 466,
	1996, 574, 594, 1958, 486, 365, 525, 581, 582, 822,
	827, 1946, 843, 1933, 369, 370, 491, 351, 499, 696,
	662, 554, 512, 510, 1964, 477, 534, 691, 1936, 0,
	399, 0, 394, 490, 630, 357, 609, 528, 495, 449,
	557, 586, 396, 381, 382, 425, 527, 415, 367, 620,
	659, 663, 661, 657, 654, 658, 655, 656, 660, 416,
	653, 0, 628, 637, 671, 651, 679, 636, 676, 646,
	391, 675, 640, 639, 685, 666, 667, 621, 681, 652,
	650, 643, 642, 638, 2004, 316, 317, 318, 319, 320,
	3627, 322, 323, 324, 325, 327, 1932, 328, 329, 330,
	332, 333, 334, 821, 335, 336, 337, 340, 341, 342,
	344, 704, 345, 346, 347, 348, 349, 350, 641, 823,
	352, 353, 354, 355, 356, 358, 360, 361, 362, 363,
	364, 366, 368, 1948, 1949, 1950, 826, 1951, 1952, 1953,
	372, 373, 374, 375, 376, 377, 1955, 378, 379, 383,
	385, 386, 387, 388, 389, 390, 393, 1959, 395, 397,
	1960, 398, 401, 1961, 402, 403, 404, 405, 406, 407,
	408, 409, 645, 410, 1963, 411, 412, 414, 1965, 417,
	418, 419, 420, 421, 1967, 422, 647, 648, 423, 424,
	426, 427, 428, 430, 431, 432, 433, 434, 435, 436,
	437, 438, 439, 440, 441, 1971, 442, 443, 444, 446,
	1972, 447, 448, 451, 452, 453, 454, 1974, 456, 664,
	1975, 457, 458, 459, 1977, 1978, 460, 461, 462, 463,
	464, 465, 468, 665, 470, 471, 472, 473, 474, 475,
	476, 706, 478, 479, 480, 481, 482, 483, 484, 668,
	669, 485, 487, 488, 670, 672, 673, 839, 503, 504,
	505, 506, 507, 508, 509, 511, 1986, 513, 514, 515,
	674, 516, 517, 518, 519, 1987, 520, 521, 522, 523,
	524, 526, 529, 530, 531, 532, 1988, 535, 536, 537,
	538, 539, 540, 541, 543, 544, 545, 547, 548, 549,
	707, 550, 551, 552, 553, 677, 555, 556, 708, 558,
	559, 561, 562, 563, 564, 565, 566, 717, 1991, 568,
	678, 569, 570, 571, 572, 573, 1992, 575, 576, 577,
	578, 579, 580, 583, 584, 585, 587, 588, 680, 589,
	590, 1994, 592, 593, 842, 595, 596, 597, 598, 599,
	1998, 718, 600, 682, 601, 683, 602, 603, 604, 605,
	606, 607, 608, 610, 2000, 2001, 612, 613, 614, 616,
	617, 618, 619, 622, 623, 624, 625, 626, 2007, 627,
	629, 631, 709, 686, 687, 688, 689, 690, 692, 693,
	694, 695, 632, 633, 649, 500, 494, 450, 492, 493,
	497, 498, 501, 1985, 1935, 1940, 1942, 1943, 1945, 818,
	0, 1304, 804, 0, 1309, 1310, 1299, 790, 1289, 0,
	0, 0, 0, 0, 0, 0, 1916, 326, 0, 343,
	824, 0, 392, 429, 1294, 0, 1282, 489, 0, 542,
	546, 0, 635, 1314, 0, 1286, 1917, 400, 1307, 829,
	0, 835, 1308, 841, 1306, 611, 0, 831, 832, 837,
	331, 1383, 634, 705, 0, 0, 0, 1300, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 0, 0,
	833, 830, 834, 840, 828, 838, 825, 836, 0, 533,
	467, 684, 560, 338, 384, 371, 413, 455, 567, 0,
	0, 445, 615, 380, 469, 0, 359, 502, 1336, 591,
	466, 0, 574, 594, 0, 486, 365, 525, 581, 582,
	822, 827, 0, 843, 0, 369, 370, 491, 351, 499,
	696, 662, 554, 512, 510, 0, 477, 534, 691, 1295,
	0, 399, 0, 394, 490, 630, 357, 609, 528, 495,
	449, 557, 586, 396, 381, 382, 425, 527, 415, 367,
	620, 1364, 1366, 1362, 1358, 1359, 1324, 1325, 1365, 1361,
	416, 1360, 0, 628, 1369, 1380, 1377, 1382, 1368, 1381,
	1375, 1057, 675, 1372, 1371, 1385, 1378, 1379, 621, 1384,
	1323, 1376, 1374, 1373, 1370, 1915, 316, 317, 318, 319,
	320, 321, 322, 323, 324, 325, 327, 0, 328, 329,
	330, 332, 333, 334, 821, 335, 336, 337, 340, 341,
	342, 344, 704, 345, 346, 347, 348, 349, 350, 1348,
	1326, 352, 353, 354, 355, 356, 358, 360, 361, 362,
	363, 364, 366, 368, 1337, 1327, 1332, 1338, 1328, 1329,
	1333, 372, 373, 374, 375, 376, 377, 0, 378, 379,
	383, 385, 386, 387, 388, 389, 390, 393, 0, 395,
	397, 0, 398, 401, 0, 402, 403, 404, 405, 406,
	407, 408, 409, 1340, 410, 0, 411, 412, 414, 0,
	417, 418, 419, 420, 421, 0, 422, 1349, 1298, 423,
	424, 426, 427, 428, 430, 431, 432, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 0, 442, 443, 444,
	446, 0, 447, 448, 451, 452, 453, 454, 0, 456,
	1350, 0, 457, 458, 459, 1330, 1331, 460, 461, 462,
	463, 464, 465, 468, 1363, 470, 471, 472, 473, 474,
	475, 476, 706, 478, 479, 480, 481, 482, 483, 484,
	668, 1341, 485, 487, 488, 1347, 672, 1342, 839, 503,
	504, 505, 506, 507, 508, 509, 511, 0, 513, 514,
	515, 1343, 516, 517, 518, 519, 0, 520, 521, 522,
	523, 524, 526, 529, 530, 531, 532, 0, 535, 536,
	537, 538, 539, 540, 541, 543, 544, 545, 547, 548,
	549, 707, 550, 551, 552, 553, 1301, 555, 556, 708,
	558, 559, 561, 562, 563, 564, 565, 566, 717, 1334,
	568, 678, 569, 570, 571, 572, 573, 0, 575, 576,
	577, 578, 579, 580, 583, 584, 585, 587, 588, 1344,
	589, 590, 1335, 592, 593, 842, 595, 596, 597, 598,
	599, 0, 718, 600, 1345, 601, 1346, 602, 603, 604,
	605, 606, 607, 608, 610, 0, 1285, 612, 613, 614,
	616, 617, 618, 619, 622, 623, 624, 625, 626, 0,
	627, 629, 631, 709, 686, 1351, 1352, 1355, 1353, 1354,
	1356, 1357, 1367, 632, 633, 649, 500, 494, 450, 492,
	493, 497, 498, 501, 0, 0, 0, 1339, 0, 0,
	0, 1283, 0, 0, 818, 0, 1304, 804, 0, 1309,
	1310, 1299, 790, 1289, 0, 0, 1290, 1912, 0, 1279,
	1280, 1913, 326, 0, 343, 824, 0, 392, 429, 1294,
	0, 1282, 489, 0, 542, 546, 177, 635, 1314, 0,
	1286, 0, 400, 1307, 829, 0, 835, 1308, 841, 1306,
	611, 0, 831, 832, 837, 331, 1383, 634, 705, 0,
	0, 0, 1300, 174, 0, 0, 0, 175, 0, 0,
	339, 0, 0, 0, 0, 833, 830, 834, 840, 828,
	838, 825, 836, 0, 533, 467, 1166, 560, 338, 384,
	371, 413, 455, 567, 0, 0, 445, 615, 380, 469,
	0, 359, 502, 1336, 591, 466, 0, 574, 594, 0,
	486, 365, 525, 581, 582, 822, 827, 0, 843, 0,
	369, 370, 491, 351, 499, 696, 662, 554, 512, 510,
	0, 477, 534, 691, 1295, 0, 399, 0, 394, 490,
	630, 357, 609, 528, 495, 449, 557, 586, 396, 381,
	382, 425, 527, 415, 367, 620, 1364, 1366, 1362, 1358,
	1359, 1324, 1325, 1365, 1361, 416, 1360, 0, 628, 1369,
	1380, 1377, 1382, 1368, 1381, 1375, 1057, 675, 1372, 1371,
	1385, 1378, 1379, 621, 1384, 1323, 1376, 1374, 1373, 1370,
	0, 316, 317, 318, 319, 320, 321, 322, 323, 324,
	325, 327, 0, 328, 329, 330, 332, 333, 334, 821,
	335, 336, 337, 340, 341, 342, 344, 704, 345, 346,
	347, 348, 349, 350, 1348, 1326, 352, 353, 354, 355,
	356, 358, 360, 361, 362, 363, 364, 366, 368, 1337,
	1327, 1332, 1338, 1328, 1329, 1333, 372, 373, 374, 375,
	376, 377, 0, 378, 379, 383, 385, 386, 387, 388,
	389, 390, 393, 0, 395, 397, 0, 398, 401, 0,
	402, 403, 404, 405, 406, 407, 408, 409, 1340, 410,
	0, 411, 412, 414, 0, 417, 418, 419, 420, 421,
	0, 422, 1349, 1298, 423, 424, 426, 427, 428, 430,
	431, 432, 433, 434, 435, 436, 437, 438, 439, 440,
	441, 0, 442, 443, 444, 446, 0, 447, 448, 451,
	452, 453, 454, 0, 456, 1350, 0, 457, 458, 459,
	1330, 1331, 460, 461, 462, 463, 464, 465, 468, 1363,
	470, 471, 472, 473, 474, 475, 476, 706, 478, 479,
	480, 481, 482, 483, 484, 668, 1341, 485, 487, 488,
	1347, 672, 1342, 839, 503, 504, 505, 506, 507, 508,
	509, 511, 0, 513, 514, 515, 1343, 516, 517, 518,
	519, 0, 520, 521, 522, 523, 524, 526, 529, 530,
	531, 532, 0, 535, 536, 537, 538, 539, 540, 541,
	543, 544, 545, 547, 548, 549, 707, 550, 551, 552,
	553, 1301, 555, 556, 708, 558, 559, 561, 562, 563,
	564, 565, 566, 717, 1334, 568, 678, 569, 570, 571,
	572, 573, 0, 575, 576, 577, 578, 579, 580, 583,
	584, 585, 587, 588, 1344, 589, 590, 1335, 592, 593,
	842, 595, 596, 597, 598, 599, 0, 718, 600, 1345,
	601, 1346, 602, 603, 604, 605, 606, 607, 608, 610,
	0, 1285, 612, 613, 614, 616, 617, 618, 619, 622,
	623, 624, 625, 626, 0, 627, 629, 631, 709, 686,
	1351, 1352, 1355, 1353, 1354, 1356, 1357, 1367, 632, 633,
	649, 500, 494, 450, 492, 493, 497, 498, 501, 0,
	0, 0, 1339, 0, 0, 0, 1283, 0, 178, 818,
	0, 1304, 804, 0, 1309, 1310, 1299, 790, 1289, 0,
	0, 1290, 5842, 0, 1279, 1280, 0, 326, 0, 343,
	824, 0, 392, 429, 1294, 0, 1282, 489, 0, 542,
	546, 177, 635, 1314, 0, 1286, 0, 400, 1307, 829,
	0, 835, 1308, 841, 1306, 611, 0, 831, 832, 837,
	331, 1383, 634, 705, 0, 0, 0, 1300, 174, 0,
	0, 0, 175, 0, 0, 339, 0, 0, 0, 0,
	833, 830, 834, 840, 828, 838, 825, 836, 0, 533,
	467, 1166, 560, 338, 384, 371, 413, 455, 567, 0,
	0, 445, 615, 380, 469, 3358, 359, 502, 1336, 591,
	466, 0, 574, 594, 0, 486, 365, 525, 581, 582,
	822, 827, 0, 843, 0, 369, 370, 491, 351, 499,
	696, 662, 554, 512, 510, 0, 477, 534, 691, 1295,
	0, 399, 0, 394, 490, 630, 357, 609, 528, 495,
	449, 557, 586, 396, 381, 382, 425, 527, 415, 367,
	620, 1364, 1366, 1362, 1358, 1359, 1324, 1325, 1365, 1361,
	416, 1360, 0, 628, 1369, 1380, 1377, 1382, 1368, 1381,
	1375, 1057, 675, 1372, 1371, 1385, 1378, 1379, 621, 1384,
	1323, 1376, 1374, 1373, 1370, 0, 316, 317, 318, 319,
	320, 321, 322, 323, 324, 325, 327, 0, 328, 329,
	330, 332, 333, 334, 821, 335, 336, 337, 340, 341,
	342, 344, 704, 345, 346, 347, 348, 349, 350, 1348,
	1326, 352, 353, 354, 355, 356, 358, 360, 361, 362,
	363, 364, 366, 368, 1337, 1327, 1332, 1338, 1328, 1329,
	1333, 372, 373, 374, 375, 376, 377, 0, 378, 379,
	383, 385, 386, 387, 388, 389, 390, 393, 0, 395,
	397, 0, 398, 401, 0, 402, 403, 404, 405, 406,
	407, 408, 409, 1340, 410, 0, 411, 412, 414, 0,
	417, 418, 419, 420, 421, 0, 422, 1349, 1298, 423,
	424, 426, 427, 428, 430, 431, 432, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 0, 442, 443, 444,
	446, 0, 447, 448, 451, 452, 453, 454, 0, 456,
	1350, 0, 457, 458, 459, 1330, 1331, 460, 461, 462,
	463, 464, 465, 468, 1363, 470, 471, 472, 473, 474,
	475, 476, 706, 478, 479, 480, 481, 482, 483, 484,
	668, 1341, 485, 487, 488, 1347, 672, 1342, 839, 503,
	504, 505, 506, 507, 508, 509, 511, 0, 513, 514,
	515, 1343, 516, 517, 518, 519, 0, 520, 521, 522,
	523, 524, 526, 529, 530, 531, 532, 0, 535, 536,
	537, 538, 539, 540, 541, 543, 544, 545, 547, 548,
	549, 707, 550, 551, 552, 553, 1301, 555, 556, 708,
	558, 559, 561, 562, 563, 564, 565, 566, 717, 1334,
	568, 678, 569, 570, 571, 572, 573, 0, 575, 576,
	577, 578, 579, 580, 583, 584, 585, 587, 588, 1344,
	589, 590, 1335, 592, 593, 842, 595, 596, 597, 598,
	599, 0, 718, 600, 1345, 601, 1346, 602, 603, 604,
	605, 606, 607, 608, 610, 0, 1285, 612, 613, 614,
	616, 617, 618, 619, 622, 623, 624, 625, 626, 0,
	627, 629, 631, 709, 686, 1351, 1352, 1355, 1353, 1354,
	1356, 1357, 1367, 632, 633, 649, 500, 494, 450, 492,
	493, 497, 498, 501, 0, 0, 0, 1339, 0, 0,
	0, 1283, 0, 178, 818, 0, 1304, 804, 0, 1309,
	1310, 1299, 790, 1289, 0, 0, 1290, 0, 0, 1279,
	1280, 0, 326, 0, 343, 824, 0, 392, 429, 1294,
	0, 1282, 489, 0, 542, 546, 177, 635, 1314, 0,
	1286, 0, 400, 1307, 829, 0, 835, 1308, 841, 1306,
	611, 0, 831, 832, 837, 331, 1383, 634, 705, 0,
	0, 0, 1300, 174, 0, 0, 0, 175, 0, 0,
	339, 0, 0, 0, 0, 833, 830, 834, 840, 828,
	838, 825, 836, 0, 533, 467, 1166, 560, 338, 384,
	371, 413, 455, 567, 0, 0, 445, 615, 380, 469,
	0, 359, 502, 1336, 591, 466, 0, 574, 594, 0,
	486, 365, 525, 581, 582, 822, 827, 0, 843, 0,
	369, 370, 491, 351, 499, 696, 662, 554, 512, 510,
	0, 477, 534, 691, 1295, 0, 399, 0, 394, 490,
	630, 357, 609, 528, 495, 449, 557, 586, 396, 381,
	382, 425, 527, 415, 367, 620, 1364, 1366, 1362, 1358,
	1359, 1324, 1325, 1365, 1361, 416, 1360, 0, 628, 1369,
	1380, 1377, 1382, 1368, 1381, 1375, 1057, 675, 1372, 1371,
	1385, 1378, 1379, 621, 1384, 1323, 1376, 1374, 1373, 1370,
	0, 316, 317, 318, 319, 320, 321, 322, 323, 324,
	325, 327, 0, 328, 329, 330, 332, 333, 334, 821,
	335, 336, 337, 340, 341, 342, 344, 704, 345, 346,
	347, 348, 349, 350, 1348, 1326, 352, 353, 354, 355,
	356, 358, 360, 361, 362, 363, 364, 366, 368, 1337,
	1327, 1332, 1338, 1328, 1329, 1333, 372, 373, 374, 375,
	376, 377, 0, 378, 379, 383, 385, 386, 387, 388,
	389, 390, 393, 0, 395, 397, 0, 398, 401, 0,
	402, 403, 404, 405, 406, 407, 408, 409, 1340, 410,
	0, 411, 412, 414, 0, 417, 418, 419, 420, 421,
	0, 422, 1349, 1298, 423, 424, 426, 427, 428, 430,
	431, 432, 433, 434, 435, 436, 437, 438, 439, 440,
	441, 0, 442, 443, 444, 446, 0, 447, 448, 451,
	452, 453, 454, 0, 456, 1350, 0, 457, 458, 459,
	1330, 1331, 460, 461, 462, 463, 464, 465, 468, 1363,
	470, 471, 472, 473, 474, 475, 476, 706, 478, 479,
	480, 481, 482, 483, 484, 668, 1341, 485, 487, 488,
	1347, 672, 1342, 839, 503, 504, 505, 506, 507, 508,
	509, 511, 0, 513, 514, 515, 1343, 516, 517, 518,
	519, 0, 520, 521, 522, 523, 524, 526, 529, 530,
	531, 532, 0, 535, 536, 537, 538, 539, 540, 541,
	543, 544, 545, 547, 548, 549, 707, 550, 551, 552,
	553, 1301, 555, 556, 708, 558, 559, 561, 562, 563,
	564, 565, 566, 717, 1334, 568, 678, 569, 570, 571,
	572, 573, 0, 575, 576, 577, 578, 579, 580, 583,
	584, 585, 587, 588, 1344, 589, 590, 1335, 592, 593,
	842, 595, 596, 597, 598, 599, 0, 718, 600, 1345,
	601, 1346, 602, 603, 604, 605, 606, 607, 608, 610,
	0, 1285, 612, 613, 614, 616, 617, 618, 619, 622,
	623, 624, 625, 626, 0, 627, 629, 631, 709, 686,
	1351, 1352, 1355, 1353, 1354, 1356, 1357, 1367, 632, 633,
	649, 500, 494, 450, 492, 493, 497, 498, 501, 0,
	0, 0, 1339, 0, 0, 0, 1283, 0, 178, 818,
	0, 1304, 804, 0, 1309, 1310, 1299, 790, 1289, 0,
	0, 1290, 0, 0, 1279, 1280, 0, 326, 0, 343,
	824, 0, 392, 429, 1294, 0, 1282, 489, 0, 542,
	546, 0, 635, 1314, 0, 1286, 0, 400, 1307, 829,
	0, 835, 1308, 841, 1306, 611, 0, 831, 832, 837,
	331, 1383, 634, 705, 0, 0, 0, 1300, 0, 3339,
	0, 0, 0, 0, 0, 339, 0, 0, 0, 0,
	833, 830, 834, 840, 828, 838, 825, 836, 0, 533,
	467, 684, 560, 338, 384, 371, 413, 455, 567, 0,
	0, 445, 615, 380, 469, 0, 359, 502, 1336, 591,
	466, 0, 574, 594, 0, 486, 365, 525, 581, 582,
	822, 827, 0, 843, 0, 369, 370, 491, 351, 499,
	696, 662, 554, 512, 510, 0, 477, 534, 691, 1295,
	0, 399, 0, 394, 490, 630, 357, 609, 528, 495,
	449, 557, 586, 396, 381, 382, 425, 527, 415, 367,
	620, 1364, 1366, 1362, 1358, 1359, 1324, 1325, 1365, 1361,
	416, 1360, 0, 628, 1369, 1380, 1377, 1382, 1368, 1381,
	1375, 1057, 675, 1372, 1371, 1385, 1378, 1379, 621, 1384,
	1323, 1376, 1374, 1373, 1370, 0, 316, 317, 318, 319,
	320, 321, 322, 323, 324, 325, 327, 0, 328, 329,
	330, 332, 333, 334, 821, 335, 336, 337, 340, 341,
	342, 344, 704, 345, 346, 347, 348, 349, 350, 1348,
	1326, 352, 353, 354, 355, 356, 358, 360, 361, 362,
	363, 364, 366, 368, 1337, 1327, 1332, 1338, 1328, 1329,
	1333, 372, 373, 374, 375, 376, 377, 0, 378, 379,
	383, 385, 386, 387, 388, 389, 390, 393, 0, 395,
	397, 0, 398, 401, 0, 402, 403, 404, 405, 406,
	407, 408, 409, 1340, 410, 0, 411, 412, 414, 0,
	417, 418, 419, 420, 421, 0, 422, 1349, 1298, 423,
	424, 426, 427, 428, 430, 431, 432, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 0, 442, 443, 444,
	446, 0, 447, 448, 451, 452, 453, 454, 0, 456,
	1350, 3335, 457, 458, 459, 1330, 1331, 460, 461, 462,
	463, 464, 465, 468, 1363, 470, 471, 472, 473, 474,
	475, 476, 706, 478, 479, 480, 481, 482, 483, 484,
	668, 1341, 485, 487, 488, 1347, 672, 1342, 839, 503,
	504, 505, 506, 507, 508, 509, 511, 0, 513, 514,
	515, 1343, 516, 517, 518, 519, 0, 520, 521, 522,
	523, 524, 526, 529, 530, 531, 532, 0, 535, 536,
	537, 538, 539, 540, 541, 543, 544, 545, 547, 548,
	549, 707, 550, 551, 552, 553, 1301, 555, 556, 708,
	558, 559, 561, 562, 563, 564, 565, 566, 717, 1334,
	568, 678, 569, 570, 571, 572, 573, 0, 575, 576,
	577, 578, 579, 580, 583, 584, 585, 587, 588, 1344,
	589, 590, 1335, 592, 593, 842, 595, 596, 597, 598,
	599, 3336, 718, 600, 1345, 601, 1346, 602, 603, 604,
	605, 606, 607, 608, 610, 0, 1285, 612, 613, 614,
	616, 617, 618, 619, 622, 623, 624, 625, 626, 0,
	627, 629, 631, 709, 686, 1351, 1352, 1355, 1353, 1354,
	1356, 1357, 1367, 632, 633, 649, 500, 494, 450, 492,
	493, 497, 498, 501, 0, 0, 3334, 1339, 0, 0,
	0, 1283, 0, 818, 0, 1304, 804, 0, 1309, 1310,
	1299, 790, 1289, 0, 0, 0, 1290, 0, 0, 1279,
	1280, 326, 0, 343, 824, 0, 392, 429, 1294, 0,
	1282, 489, 0, 542, 546, 0, 635, 1314, 0, 1286,
	0, 400, 1307, 829, 0, 835, 1308, 841, 1306, 611,
	0, 831, 832, 837, 331, 1383, 634, 705, 0, 0,
	0, 1300, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 0, 0, 833, 830, 834, 840, 828, 838,
	825, 836, 0, 533, 467, 684, 560, 338, 384, 371,
	413, 455, 567, 0, 0, 445, 615, 380, 469, 0,
	359, 502, 1336, 591, 466, 0, 574, 594, 0, 486,
	365, 525, 581, 582, 822, 827, 0, 843, 0, 369,
	370, 491, 351, 499, 696, 662, 554, 512, 510, 0,
	477, 534, 691, 1295, 0, 399, 0, 394, 490, 630,
	357, 609, 528, 495, 449, 557, 586, 396, 381, 382,
	425, 527, 415, 367, 620, 1364, 1366, 1362, 1358, 1359,
	1324, 1325, 1365, 1361, 416, 1360, 0, 628, 1369, 1380,
	1377, 1382, 1368, 1381, 1375, 1057, 675, 1372, 1371, 1385,
	1378, 1379, 621, 1384, 1323, 1376, 1374, 1373, 1370, 0,
	316, 317, 318, 319, 320, 321, 322, 323, 324, 325,
	327, 0, 328, 329, 330, 332, 333, 334, 821, 335,
	336, 337, 340, 341, 342, 344, 704, 345, 346, 347,
	348, 349, 350, 1348, 1326, 352, 353, 354, 355, 356,
	358, 360, 361, 362, 363, 364, 366, 368, 1337, 1327,
	1332, 1338, 1328, 1329, 1333, 372, 373, 374, 375, 376,
	377, 0, 378, 379, 383, 385, 386, 387, 388, 389,
	390, 393, 0, 395, 397, 0, 398, 401, 0, 402,
	403, 404, 405, 406, 407, 408, 409, 1340, 410, 0,
	411, 412, 414, 0, 417, 418, 419, 420, 421, 0,
	422, 1349, 1298, 423, 424, 426, 427, 428, 430, 431,
	432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	0, 442, 443, 444, 446, 0, 447, 448, 451, 452,
	453, 454, 0, 456, 1350, 0, 457, 458, 459, 1330,
	1331, 460, 461, 462, 463, 464, 465, 468, 1363, 470,
	471, 472, 473, 474, 475, 476, 706, 478, 479, 480,
	481, 482, 483, 484, 668, 1341, 485, 487, 488, 1347,
	672, 1342, 839, 503, 504, 505, 506, 507, 508, 509,
	511, 0, 513, 514, 515, 1343, 516, 517, 518, 519,
	0, 520, 521, 522, 523, 524, 526, 529, 530, 531,
	532, 0, 535, 536, 537, 538, 539, 540, 541, 543,
	544, 545, 547, 548, 549, 707, 550, 551, 552, 553,
	1301, 555, 556, 708, 558, 559, 561, 562, 563, 564,
	565, 566, 717, 1334, 568, 678, 569, 570, 571, 572,
	573, 0, 575, 576, 577, 578, 579, 580, 583, 584,
	585, 587, 588, 1344, 589, 590, 1335, 592, 593, 842,
	595, 596, 597, 598, 599, 0, 718, 600, 1345, 601,
	1346, 602, 603, 604, 605, 606, 607, 608, 610, 0,
	1285, 612, 613, 614, 616, 617, 618, 619, 622, 623,
	624, 625, 626, 0, 627, 629, 631, 709, 686, 1351,
	1352, 1355, 1353, 1354, 1356, 1357, 1367, 632, 633, 649,
	500, 494, 450, 492, 493, 497, 498, 501, 0, 0,
	0, 1339, 0, 0, 0, 1283, 0, 0, 818, 0,
	1304, 804, 0, 1309, 1310, 1299, 790, 1289, 0, 0,
	1290, 0, 0, 1279, 1280, 1277, 326, 0, 343, 824,
	0, 392, 429, 1294, 0, 1282, 489, 0, 542, 546,
	0, 635, 1314, 0, 1286, 0, 400, 1307, 829, 0,
	835, 1308, 841, 1306, 611, 0, 831, 832, 837, 331,
	1383, 634, 705, 0, 0, 0, 1300, 0, 0, 0,
	0, 0, 0, 0, 339, 0, 0, 0, 0, 833,
	830, 834, 840, 828, 838, 825, 836, 0, 533, 467,
	684, 560, 338, 384, 371, 413, 455, 567, 0, 0,
	445, 615, 380, 469, 0, 359, 502, 1336, 591, 466,
	0, 574, 594, 0, 486, 365, 525, 581, 582, 822,
	827, 0, 843, 0, 369, 370, 491, 351, 499, 696,
	662, 554, 512, 510, 0, 477, 534, 691, 1295, 0,
	399, 0, 394, 490, 630, 357, 609, 528, 495, 449,
	557, 586, 396, 381, 382, 425, 527, 415, 367, 620,
	1364, 1366, 1362, 1358, 1359, 1324, 1325, 1365, 1361, 416,
	1360, 0, 628, 1369, 1380, 1377, 1382, 1368, 1381, 1375,
	1057, 675, 1372, 1371, 1385, 1378, 1379, 621, 1384, 1323,
	1376, 1374, 1373, 1370, 0, 316, 317, 318, 319, 320,
	321, 322, 323, 324, 325, 327, 0, 328, 329, 330,
	332, 333, 334, 821, 335, 336, 337, 340, 341, 342,
	344, 704, 345, 346, 347, 348, 349, 350, 1348, 1326,
	352, 353, 354, 355, 356, 358, 360, 361, 362, 363,
	364, 366, 368, 1337, 1327, 1332, 1338, 1328, 1329, 1333,
	372, 373, 374, 375, 376, 377, 0, 378, 379, 383,
	385, 386, 387, 388, 389, 390, 393, 0, 395, 397,
	0, 398, 401, 0, 402, 403, 404, 405, 406, 407,
	408, 409, 1340, 410, 0, 411, 412, 414, 0, 417,
	418, 419, 420, 421, 0, 422, 1349, 1298, 423, 424,
	426, 427, 428, 430, 431, 432, 433, 434, 435, 436,
	437, 438, 439, 440, 441, 0, 442, 443, 444, 446,
	0, 447, 448, 451, 452, 453, 454, 0, 456, 1350,
	0, 457, 458, 459, 1330, 1331, 460, 461, 462, 463,
	464, 465, 468, 1363, 470, 471, 472, 473, 474, 475,
	476, 706, 478, 479, 480, 481, 482, 483, 484, 668,
	1341, 485, 487, 488, 1347, 672, 1342, 839, 503, 504,
	505, 506, 507, 508, 509, 511, 0, 513, 514, 515,
	1343, 516, 517, 518, 519, 0, 520, 521, 522, 523,
	524, 526, 529, 530, 531, 532, 0, 535, 536, 537,
	538, 539, 540, 541, 543, 544, 545, 547, 548, 549,
	707, 550, 551, 552, 553, 1301, 555, 556, 708, 558,
	559, 561, 562, 563, 564, 565, 566, 717, 1334, 568,
	678, 569, 570, 571, 572, 573, 0, 575, 576, 577,
	578, 579, 580, 583, 584, 585, 587, 588, 1344, 589,
	590, 1335, 592, 593, 842, 595, 596, 597, 598, 599,
	0, 718, 600, 1345, 601, 1346, 602, 603, 604, 605,
	606, 607, 608, 610, 0, 1285, 612, 613, 614, 616,
	617, 618, 619, 622, 623, 624, 625, 626, 0, 627,
	629, 631, 709, 686, 1351, 1352, 1355, 1353, 1354, 1356,
	1357, 1367, 632, 633, 649, 500, 494, 450, 492, 493,
	497, 498, 501, 0, 0, 0, 1339, 0, 0, 0,
	1283, 0, 818, 0, 1304, 804, 0, 1309, 1310, 1299,
	790, 1289, 0, 2541, 3280, 1290, 0, 0, 1279, 1280,
	326, 0, 343, 824, 0, 392, 429, 1294, 0, 1282,
	489, 0, 542, 546, 0, 635, 1314, 0, 1286, 0,
	400, 1307, 829, 0, 835, 1308, 841, 1306, 611, 0,
	831, 832, 837, 331, 1383, 634, 705, 0, 0, 3241,
	1300, 0, 0, 0, 0, 0, 0, 0, 339, 0,
	0, 0, 0, 833, 830, 834, 840, 828, 838, 825,
	836, 0, 533, 467, 684, 560, 338, 384, 371, 413,
	455, 567, 0, 0, 445, 615, 380, 469, 0, 359,
	502, 1336, 591, 466, 0, 574, 594, 0, 486, 365,
	525, 581, 582, 822, 827, 0, 843, 0, 369, 370,
	491, 351, 499, 696, 662, 554, 512, 510, 0, 477,
	534, 691, 1295, 0, 399, 0, 394, 490, 630, 357,
	609, 528, 495, 449, 557, 586, 396, 381, 382, 425,
	527, 415, 367, 620, 1364, 1366, 1362, 1358, 1359, 1324,
	1325, 1365, 1361, 416, 1360, 0, 628, 1369, 1380, 1377,
	1382, 1368, 1381, 1375, 1057, 675, 1372, 1371, 1385, 1378,
	1379, 621, 1384, 1323, 1376, 1374, 1373, 1370, 0, 316,
	317, 318, 319, 320, 321, 322, 323, 324, 325, 327,
	0, 328, 329, 330, 332, 333, 334, 821, 335, 336,
	337, 340, 341, 342, 344, 704, 345, 346, 347, 348,
	349, 350, 1348, 1326, 352, 353, 354, 355, 356, 358,
	360, 361, 362, 363, 364, 366, 368, 1337, 1327, 1332,
	1338, 1328, 1329, 1333, 372, 373, 374, 375, 376, 377,
	0, 378, 379, 383, 385, 386, 387, 388, 389, 390,
	393, 0, 395, 397, 0, 398, 401, 0, 402, 403,
	404, 405, 406, 407, 408, 409, 1340, 410, 0, 411,
	412, 414, 0, 417, 418, 419, 420, 421, 0, 422,
	1349, 1298, 423, 424, 426, 427, 428, 430, 431, 432,
	433, 434, 435, 436, 437, 438, 439, 440, 441, 0,
	442, 443, 444, 446, 0, 447, 448, 451, 452, 453,
	454, 0, 456, 1350, 0, 457, 458, 459, 1330, 1331,
	460, 461, 462, 463, 464, 465, 468, 1363, 470, 471,
	472, 473, 474, 475, 476, 706, 478, 479, 480, 481,
	482, 483, 484, 668, 1341, 485, 487, 488, 1347, 672,
	1342, 839, 503, 504, 505, 506, 507, 508, 509, 511,
	0, 513, 514, 515, 1343, 516, 517, 518, 519, 0,
	520, 521, 522, 523, 524, 526, 529, 530, 531, 532,
	0, 535, 536, 537, 538, 539, 540, 541, 543, 544,
	545, 547, 548, 549, 707, 550, 551, 552, 553, 1301,
	555, 556, 708, 558, 559, 561, 562, 563, 564, 565,
	566, 717, 1334, 568, 678, 569, 570, 571, 572, 573,
	0, 575, 576, 577, 578, 579, 580, 583, 584, 585,
	587, 588, 1344, 589, 590, 1335, 592, 593, 842, 595,
	596, 597, 598, 599, 0, 718, 600, 1345, 601, 1346,
	602, 603, 604, 605, 606, 607, 608, 610, 0, 1285,
	612, 613, 614, 616, 617, 618, 619, 622, 623, 624,
	625, 626, 0, 627, 629, 631, 709, 686, 1351, 1352,
	1355, 1353, 1354, 1356, 1357, 1367, 632, 633, 649, 500,
	494, 450, 492, 493, 497, 498, 501, 0, 0, 0,
	1339, 0, 0, 0, 1283, 0, 818, 0, 1304, 804,
	0, 1309, 1310, 1299, 790, 1289, 0, 0, 0, 1290,
	0, 0, 1279, 1280, 326, 0, 343, 824, 0, 392,
	429, 1294, 0, 1282, 489, 0, 542, 546, 0, 635,
	1314, 0, 1286, 0, 400, 1307, 829, 0, 835, 1308,
	841, 1306, 611, 0, 831, 832, 837, 331, 1383, 634,
	705, 0, 0, 0, 1300, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 833, 830, 834,
	840, 828, 838, 825, 836, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 1336, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 822, 827, 0,
	843, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 1295, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 1364, 1366,
	1362, 1358, 1359, 1324, 1325, 1365, 1361, 416, 1360, 0,
	628, 1369, 1380, 1377, 1382, 1368, 1381, 1375, 1057, 675,
	1372, 1371, 1385, 1378, 1379, 621, 1384, 1323, 1376, 1374,
	1373, 1370, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 821, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 1348, 1326, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 1337, 1327, 1332, 1338, 1328, 1329, 1333, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	1340, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 1349, 1298, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 1350, 0, 457,
	458, 459, 1330, 1331, 460, 461, 462, 463, 464, 465,
	468, 1363, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 1341, 485,
	487, 488, 1347, 672, 1342, 839, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 1343, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 1301, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 1334, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 1344, 589, 590, 1335,
	592, 593, 842, 595, 596, 597, 598, 599, 0, 718,
	600, 1345, 601, 1346, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 1285, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 1351, 1352, 1355, 1353, 1354, 1356, 1357, 1367,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 0, 0, 0, 1339, 0, 0, 0, 1283, 0,
	818, 0, 1304, 804, 0, 1309, 1310, 1299, 790, 1289,
	0, 0, 0, 1290, 4629, 0, 1279, 1280, 326, 0,
	343, 824, 0, 392, 429, 1294, 0, 1282, 489, 0,
	542, 546, 0, 635, 1314, 0, 1286, 0, 400, 1307,
	829, 0, 835, 1308, 841, 1306, 611, 0, 831, 832,
	837, 331, 1383, 634, 705, 0, 0, 0, 1300, 0,
	0, 0, 0, 0, 0, 0, 339, 0, 0, 0,
	0, 833, 830, 834, 840, 828, 838, 825, 836, 0,
	533, 467, 684, 560, 338, 384, 371, 413, 455, 567,
	0, 0, 445, 615, 380, 469, 0, 359, 502, 1336,
	591, 466, 0, 574, 594, 0, 486, 365, 525, 581,
	582, 822, 827, 0, 843, 0, 369, 370, 491, 351,
	499, 696, 662, 554, 512, 510, 0, 477, 534, 691,
	1295, 0, 399, 0, 394, 490, 630, 357, 609, 528,
	495, 449, 557, 586, 396, 381, 382, 425, 527, 415,
	367, 620, 1364, 1366, 1362, 1358, 1359, 1324, 1325, 1365,
	1361, 416, 1360, 0, 628, 1369, 1380, 1377, 1382, 1368,
	1381, 1375, 1057, 675, 1372, 1371, 1385, 1378, 1379, 621,
	1384, 1323, 1376, 1374, 1373, 1370, 0, 316, 317, 318,
	319, 320, 321, 322, 323, 324, 325, 327, 0, 328,
	329, 330, 332, 333, 334, 821, 335, 336, 337, 340,
	341, 342, 344, 704, 345, 346, 347, 348, 349, 350,
	1348, 1326, 352, 353, 354, 355, 356, 358, 360, 361,
	362, 363, 364, 366, 368, 1337, 1327, 1332, 1338, 1328,
	1329, 1333, 372, 373, 374, 375, 376, 377, 0, 378,
	379, 383, 385, 386, 387, 388, 389, 390, 393, 0,
	395, 397, 0, 398, 401, 0, 402, 403, 404, 405,
	406, 407, 408, 409, 1340, 410, 0, 411, 412, 414,
	0, 417, 418, 419, 420, 421, 0, 422, 1349, 1298,
	423, 424, 426, 427, 428, 430, 431, 432, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 0, 442, 443,
	444, 446, 0, 447, 448, 451, 452, 453, 454, 0,
	456, 1350, 0, 457, 458, 459, 1330, 1331, 460, 461,
	462, 463, 464, 465, 468, 1363, 470, 471, 472, 473,
	474, 475, 476, 706, 478, 479, 480, 481, 482, 483,
	484, 668, 1341, 485, 487, 488, 1347, 672, 1342, 839,
	503, 504, 505, 506, 507, 508, 509, 511, 0, 513,
	514, 515, 1343, 516, 517, 518, 519, 0, 520, 521,
	522, 523, 524, 526, 529, 530, 531, 532, 0, 535,
	536, 537, 538, 539, 540, 541, 543, 544, 545, 547,
	548, 549, 707, 550, 551, 552, 553, 1301, 555, 556,
	708, 558, 559, 561, 562, 563, 564, 565, 566, 717,
	1334, 568, 678, 569, 570, 571, 572, 573, 0, 575,
	576, 577, 578, 579, 580, 583, 584, 585, 587, 588,
	1344, 589, 590, 1335, 592, 593, 842, 595, 596, 597,
	598, 599, 0, 718, 600, 1345, 601, 1346, 602, 603,
	604, 605, 606, 607, 608, 610, 0, 1285, 612, 613,
	614, 616, 617, 618, 619, 622, 623, 624, 625, 626,
	0, 627, 629, 631, 709, 686, 1351, 1352, 1355, 1353,
	1354, 1356, 1357, 1367, 632, 633, 649, 500, 494, 450,
	492, 493, 497, 498, 501, 0, 0, 0, 1339, 0,
	0, 0, 1283, 0, 818, 0, 1304, 804, 0, 1309,
	1310, 1299, 790, 1289, 0, 0, 0, 1290, 4592, 0,
	1279, 1280, 326, 0, 343, 824, 0, 392, 429, 1294,
	0, 1282, 489, 0, 542, 546, 0, 635, 1314, 0,
	1286, 0, 400, 1307, 829, 0, 835, 1308, 841, 1306,
	611, 0, 831, 832, 837, 331, 1383, 634, 705, 0,
	0, 0, 1300, 0, 3339, 0, 0, 0, 0, 0,
	339, 0, 0, 0, 0, 833, 830, 834, 840, 828,
	838, 825, 836, 0, 533, 467, 684, 560, 338, 384,
	371, 413, 455, 567, 0, 0, 445, 615, 380, 469,
	0, 359, 502, 1336, 591, 466, 0, 574, 594, 0,
	486, 365, 525, 581, 582, 822, 827, 0, 843, 0,
	369, 370, 491, 351, 499, 696, 662, 554, 512, 510,
	0, 477, 534, 691, 1295, 0, 399, 0, 394, 490,
	630, 357, 609, 528, 495, 449, 557, 586, 396, 381,
	382, 425, 527, 415, 367, 620, 1364, 1366, 1362, 1358,
	1359, 1324, 1325, 1365, 1361, 416, 1360, 0, 628, 1369,
	1380, 1377, 1382, 1368, 1381, 1375, 1057, 675, 1372, 1371,
	1385, 1378, 1379, 621, 1384, 1323, 1376, 1374, 1373, 1370,
	0, 316, 317, 318, 319, 320, 321, 322, 323, 324,
	325, 327, 0, 328, 329, 330, 332, 333, 334, 821,
	335, 336, 337, 340, 341, 342, 344, 704, 345, 346,
	347, 348, 349, 350, 1348, 1326, 352, 353, 354, 355,
	356, 358, 360, 361, 362, 363, 364, 366, 368, 1337,
	1327, 1332, 1338, 1328, 1329, 1333, 372, 373, 374, 375,
	376, 377, 0, 378, 379, 383, 385, 386, 387, 388,
	389, 390, 393, 0, 395, 397, 0, 398, 401, 0,
	402, 403, 404, 405, 406, 407, 408, 409, 1340, 410,
	0, 411, 412, 414, 0, 417, 418, 419, 420, 421,
	0, 422, 1349, 1298, 423, 424, 426, 427, 428, 430,
	431, 432, 433, 434, 435, 436, 437, 438, 439, 440,
	441, 0, 442, 443, 444, 446, 0, 447, 448, 451,
	452, 453, 454, 0, 456, 1350, 0, 457, 458, 459,
	1330, 1331, 460, 461, 462, 463, 464, 465, 468, 1363,
	470, 471, 472, 473, 474, 475, 476, 706, 478, 479,
	480, 481, 482, 483, 484, 668, 1341, 485, 487, 488,
	1347, 672, 1342, 839, 503, 504, 505, 506, 507, 508,
	509, 511, 0, 513, 514, 515, 1343, 516, 517, 518,
	519, 0, 520, 521, 522, 523, 524, 526, 529, 530,
	531, 532, 0, 535, 536, 537, 538, 539, 540, 541,
	543, 544, 545, 547, 548, 549, 707, 550, 551, 552,
	553, 1301, 555, 556, 708, 558, 559, 561, 562, 563,
	564, 565, 566, 717, 1334, 568, 678, 569, 570, 571,
	572, 573, 0, 575, 576, 577, 578, 579, 580, 583,
	584, 585, 587, 588, 1344, 589, 590, 1335, 592, 593,
	842, 595, 596, 597, 598, 599, 0, 718, 600, 1345,
	601, 1346, 602, 603, 604, 605, 606, 607, 608, 610,
	0, 1285, 612, 613, 614, 616, 617, 618, 619, 622,
	623, 624, 625, 626, 0, 627, 629, 631, 709, 686,
	1351, 1352, 1355, 1353, 1354, 1356, 1357, 1367, 632, 633,
	649, 500, 494, 450, 492, 493, 497, 498, 501, 0,
	0, 0, 1339, 0, 0, 0, 1283, 0, 818, 0,
	1304, 804, 0, 1309, 1310, 1299, 790, 1289, 0, 0,
	0, 1290, 0, 0, 1279, 1280, 326, 0, 343, 824,
	0, 392, 429, 1294, 0, 1282, 489, 0, 542, 546,
	0, 635, 1314, 0, 1286, 0, 400, 1307, 829, 0,
	835, 1308, 841, 1306, 611, 0, 831, 832, 837, 331,
	1383, 634, 705, 0, 0, 0, 1300, 0, 0, 0,
	0, 0, 0, 0, 339, 0, 0, 0, 0, 833,
	830, 834, 840, 828, 838, 825, 836, 0, 533, 467,
	684, 560, 338, 384, 371, 413, 455, 567, 0, 0,
	445, 615, 380, 469, 0, 359, 502, 1336, 591, 466,
	0, 574, 594, 0, 486, 365, 525, 581, 582, 822,
	827, 0, 843, 0, 369, 370, 491, 351, 499, 696,
	662, 554, 512, 510, 0, 477, 534, 691, 1295, 0,
	399, 0, 394, 490, 630, 357, 609, 528, 495, 449,
	557, 586, 396, 381, 382, 425, 527, 415, 367, 620,
	1364, 1366, 1362, 1358, 1359, 1324, 1325, 1365, 1361, 416,
	1360, 0, 628, 1369, 1380, 1377, 1382, 1368, 1381, 1375,
	1057, 675, 1372, 1371, 1385, 1378, 1379, 621, 1384, 1323,
	1376, 1374, 1373, 1370, 3951, 316, 317, 318, 319, 320,
	321, 322, 323, 324, 325, 327, 0, 328, 329, 330,
	332, 333, 334, 821, 335, 336, 337, 340, 341, 342,
	344, 704, 345, 346, 347, 348, 349, 350, 1348, 1326,
	352, 353, 354, 355, 356, 358, 360, 361, 362, 363,
	364, 366, 368, 1337, 1327, 1332, 1338, 1328, 1329, 1333,
	372, 373, 374, 375, 376, 377, 0, 378, 379, 383,
	385, 386, 387, 388, 389, 390, 393, 0, 395, 397,
	0, 398, 401, 0, 402, 403, 404, 405, 406, 407,
	408, 409, 1340, 410, 0, 411, 412, 414, 0, 417,
	418, 419, 420, 421, 0, 422, 1349, 1298, 423, 424,
	426, 427, 428, 430, 431, 432, 433, 434, 435, 436,
	437, 438, 439, 440, 441, 0, 442, 443, 444, 446,
	0, 447, 448, 451, 452, 453, 454, 0, 456, 1350,
	0, 457, 458, 459, 1330, 1331, 460, 461, 462, 463,
	464, 465, 468, 1363, 470, 471, 472, 473, 474, 475,
	476, 706, 478, 479, 480, 481, 482, 483, 484, 668,
	1341, 485, 487, 488, 1347, 672, 1342, 839, 503, 504,
	505, 506, 507, 508, 509, 511, 0, 513, 514, 515,
	1343, 516, 517, 518, 519, 0, 520, 521, 522, 523,
	524, 526, 529, 530, 531, 532, 0, 535, 536, 537,
	538, 539, 540, 541, 543, 544, 545, 547, 548, 549,
	707, 550, 551, 552, 553, 1301, 555, 556, 708, 558,
	559, 561, 562, 563, 564, 565, 566, 717, 1334, 568,
	678, 569, 570, 571, 572, 573, 0, 575, 576, 577,
	578, 579, 580, 583, 584, 585, 587, 588, 1344, 589,
	590, 1335, 592, 593, 842, 595, 596, 597, 598, 599,
	0, 718, 600, 1345, 601, 1346, 602, 603, 604, 605,
	606, 607, 608, 610, 0, 1285, 612, 613, 614, 616,
	617, 618, 619, 622, 623, 624, 625, 626, 0, 627,
	629, 631, 709, 686, 1351, 1352, 1355, 1353, 1354, 1356,
	1357, 1367, 632, 633, 649, 500, 494, 450, 492, 493,
	497, 498, 501, 0, 0, 0, 1339, 0, 0, 0,
	1283, 0, 818, 0, 1304, 804, 0, 1309, 1310, 1299,
	790, 1289, 0, 0, 0, 1290, 0, 0, 1279, 1280,
	326, 0, 343, 824, 0, 392, 429, 1294, 0, 1282,
	489, 0, 542, 546, 0, 635, 1314, 0, 1286, 0,
	400, 1307, 829, 0, 835, 1308, 841, 1306, 611, 0,
	831, 832, 837, 331, 1383, 634, 705, 0, 0, 0,
	1300, 0, 0, 0, 0, 0, 0, 0, 339, 0,
	0, 0, 0, 833, 830, 834, 840, 828, 838, 825,
	836, 0, 533, 467, 684, 560, 338, 384, 371, 413,
	455, 567, 0, 0, 445, 615, 380, 469, 3358, 359,
	502, 1336, 591, 466, 0, 574, 594, 0, 486, 365,
	525, 581, 582, 822, 827, 0, 843, 0, 369, 370,
	491, 351, 499, 696, 662, 554, 512, 510, 0, 477,
	534, 691, 1295, 0, 399, 0, 394, 490, 630, 357,
	609, 528, 495, 449, 557, 586, 396, 381, 382, 425,
	527, 415, 367, 620, 1364, 1366, 1362, 1358, 1359, 1324,
	1325, 1365, 1361, 416, 1360, 0, 628, 1369, 1380, 1377,
	1382, 1368, 1381, 1375, 1057, 675, 1372, 1371, 1385, 1378,
	1379, 621, 1384, 1323, 1376, 1374, 1373, 1370, 0, 316,
	317, 318, 319, 320, 321, 322, 323, 324, 325, 327,
	0, 328, 329, 330, 332, 333, 334, 821, 335, 336,
	337, 340, 341, 342, 344, 704, 345, 346, 347, 348,
	349, 350, 1348, 1326, 352, 353, 354, 355, 356, 358,
	360, 361, 362, 363, 364, 366, 368, 1337, 1327, 1332,
	1338, 1328, 1329, 1333, 372, 373, 374, 375, 376, 377,
	0, 378, 379, 383, 385, 386, 387, 388, 389, 390,
	393, 0, 395, 397, 0, 398, 401, 0, 402, 403,
	404, 405, 406, 407, 408, 409, 1340, 410, 0, 411,
	412, 414, 0, 417, 418, 419, 420, 421, 0, 422,
	1349, 1298, 423, 424, 426, 427, 428, 430, 431, 432,
	433, 434, 435, 436, 437, 438, 439, 440, 441, 0,
	442, 443, 444, 446, 0, 447, 448, 451, 452, 453,
	454, 0, 456, 1350, 0, 457, 458, 459, 1330, 1331,
	460, 461, 462, 463, 464, 465, 468, 1363, 470, 471,
	472, 473, 474, 475, 476, 706, 478, 479, 480, 481,
	482, 483, 484, 668, 1341, 485, 487, 488, 1347, 672,
	1342, 839, 503, 504, 505, 506, 507, 508, 509, 511,
	0, 513, 514, 515, 1343, 516, 517, 518, 519, 0,
	520, 521, 522, 523, 524, 526, 529, 530, 531, 532,
	0, 535, 536, 537, 538, 539, 540, 541, 543, 544,
	545, 547, 548, 549, 707, 550, 551, 552, 553, 1301,
	555, 556, 708, 558, 559, 561, 562, 563, 564, 565,
	566, 717, 1334, 568, 678, 569, 570, 571, 572, 573,
	0, 575, 576, 577, 578, 579, 580, 583, 584, 585,
	587, 588, 1344, 589, 590, 1335, 592, 593, 842, 595,
	596, 597, 598, 599, 0, 718, 600, 1345, 601, 1346,
	602, 603, 604, 605, 606, 607, 608, 610, 0, 1285,
	612, 613, 614, 616, 617, 618, 619, 622, 623, 624,
	625, 626, 0, 627, 629, 631, 709, 686, 1351, 1352,
	1355, 1353, 1354, 1356, 1357, 1367, 632, 633, 649, 500,
	494, 450, 492, 493, 497, 498, 501, 0, 0, 0,
	1339, 0, 0, 0, 1283, 0, 818, 0, 1304, 804,
	0, 1309, 1310, 1299, 790, 1289, 0, 0, 0, 1290,
	0, 0, 1279, 1280, 326, 0, 343, 824, 0, 392,
	429, 1294, 0, 1282, 489, 0, 542, 546, 0, 635,
	1314, 0, 1286, 0, 400, 1307, 829, 0, 835, 1308,
	841, 1306, 611, 0, 831, 832, 837, 331, 1383, 634,
	705, 0, 0, 0, 1300, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 833, 830, 834,
	840, 828, 838, 825, 836, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 1336, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 822, 827, 0,
	843, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 1295, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 1364, 1366,
	1362, 1358, 1359, 1324, 1325, 1365, 1361, 416, 1360, 0,
	628, 1369, 1380, 1377, 1382, 1368, 1381, 1375, 1057, 675,
	1372, 1371, 1385, 1378, 1379, 621, 1384, 1323, 1376, 1374,
	1373, 1370, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 821, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 1348, 1326, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 1337, 1327, 1332, 1338, 1328, 1329, 1333, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	1340, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 1349, 1298, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 1350, 0, 457,
	458, 459, 1330, 1331, 460, 461, 462, 463, 464, 465,
	468, 1363, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 1341, 485,
	487, 488, 1347, 672, 1342, 839, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 1343, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 1301, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 1334, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 1344, 589, 590, 1335,
	592, 593, 842, 595, 596, 597, 598, 599, 0, 718,
	600, 1345, 601, 1346, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 1285, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 1351, 1352, 1355, 1353, 1354, 1356, 1357, 1367,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 0, 0, 0, 1339, 0, 0, 0, 1283, 0,
	0, 818, 0, 1304, 804, 0, 1309, 1310, 1299, 790,
	1289, 0, 0, 1290, 3285, 0, 1279, 1280, 2026, 326,
	0, 343, 824, 0, 392, 429, 1294, 0, 1282, 489,
	0, 542, 546, 0, 635, 1314, 0, 1286, 0, 400,
	1307, 829, 0, 835, 1308, 841, 1306, 611, 0, 831,
	832, 837, 331, 1383, 634, 705, 0, 0, 0, 1300,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 833, 830, 834, 840, 828, 838, 825, 836,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	1336, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 822, 827, 0, 843, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 1295, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 1364, 1366, 1362, 1358, 1359, 1324, 1325,
	1365, 1361, 416, 1360, 0, 628, 1369, 1380, 1377, 1382,
	1368, 1381, 1375, 1057, 675, 1372, 1371, 1385, 1378, 1379,
	621, 1384, 1323, 1376, 1374, 1373, 1370, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 821, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 1348, 1326, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 1337, 1327, 1332, 1338,
	1328, 1329, 1333, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 1340, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 1349,
	1298, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 1350, 0, 457, 458, 459, 1330, 1331, 460,
	461, 462, 463, 464, 465, 468, 1363, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 1341, 485, 487, 488, 1347, 672, 1342,
	839, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 1343, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 1301, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 1334, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 1344, 589, 590, 1335, 592, 593, 842, 595, 596,
	597, 598, 599, 0, 718, 600, 1345, 601, 1346, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 1285, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 1351, 1352, 1355,
	1353, 1354, 1356, 1357, 1367, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 0, 0, 0, 1339,
	0, 0, 0, 1283, 0, 818, 0, 1304, 804, 0,
	1309, 1310, 1299, 790, 1289, 0, 0, 0, 1290, 0,
	0, 1279, 1280, 326, 0, 343, 824, 0, 392, 429,
	1294, 0, 1282, 489, 0, 542, 546, 0, 635, 1314,
	0, 1286, 0, 400, 1307, 829, 0, 835, 1308, 841,
	1306, 611, 0, 831, 832, 837, 331, 1383, 634, 705,
	0, 0, 0, 1300, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 0, 0, 833, 830, 834, 840,
	828, 838, 825, 836, 0, 533, 467, 684, 560, 338,
	384, 371, 413, 455, 567, 0, 0, 445, 615, 380,
	469, 0, 359, 502, 1336, 591, 466, 0, 574, 594,
	0, 486, 365, 525, 581, 582, 822, 827, 0, 843,
	0, 369, 370, 491, 351, 499, 696, 662, 554, 512,
	510, 0, 477, 534, 691, 1295, 0, 399, 0, 394,
	490, 630, 357, 609, 528, 495, 449, 557, 586, 396,
	381, 382, 425, 527, 415, 367, 620, 1364, 1366, 1362,
	1358, 1359, 1324, 1325, 1365, 1361, 416, 1360, 0, 628,
	1369, 1380, 1377, 1382, 1368, 1381, 1375, 1057, 675, 1372,
	1371, 1385, 1378, 1379, 621, 1384, 1323, 1376, 1374, 1373,
	1370, 0, 316, 317, 318, 319, 320, 321, 322, 323,
	324, 325, 327, 0, 328, 329, 330, 332, 333, 334,
	821, 335, 336, 337, 340, 341, 342, 344, 704, 345,
	346, 347, 348, 349, 350, 1348, 1326, 352, 353, 354,
	355, 356, 358, 360, 361, 362, 363, 364, 366, 368,
	1337, 1327, 1332, 1338, 1328, 1329, 1333, 372, 373, 374,
	375, 376, 377, 0, 378, 379, 383, 385, 386, 387,
	388, 389, 390, 393, 0, 395, 397, 0, 398, 401,
	0, 402, 403, 404, 405, 406, 407, 408, 409, 1340,
	410, 0, 411, 412, 414, 0, 417, 418, 419, 420,
	421, 0, 422, 1349, 1298, 423, 424, 426, 427, 428,
	430, 431, 432, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 0, 442, 443, 444, 446, 0, 447, 448,
	451, 452, 453, 454, 0, 456, 1350, 0, 457, 458,
	459, 1330, 1331, 460, 461, 462, 463, 464, 465, 468,
	1363, 470, 471, 472, 473, 474, 475, 476, 706, 478,
	479, 480, 481, 482, 483, 484, 668, 1341, 485, 487,
	488, 1347, 672, 1342, 839, 503, 504, 505, 506, 507,
	508, 509, 511, 0, 513, 514, 515, 1343, 516, 517,
	518, 519, 0, 520, 521, 522, 523, 524, 526, 529,
	530, 531, 532, 0, 535, 536, 537, 538, 539, 540,
	541, 543, 544, 545, 547, 548, 549, 707, 550, 551,
	552, 553, 1301, 555, 556, 708, 558, 559, 561, 562,
	563, 564, 565, 566, 717, 1334, 568, 678, 569, 570,
	571, 572, 573, 0, 575, 576, 577, 578, 579, 580,
	583, 584, 585, 587, 588, 1344, 589, 590, 1335, 592,
	593, 842, 595, 596, 597, 598, 599, 0, 718, 600,
	1345, 601, 1346, 602, 603, 604, 605, 606, 607, 608,
	610, 0, 1285, 612, 613, 614, 616, 617, 618, 619,
	622, 623, 624, 625, 626, 0, 627, 629, 631, 709,
	686, 1351, 1352, 1355, 1353, 1354, 1356, 1357, 1367, 632,
	633, 649, 500, 494, 450, 492, 493, 497, 498, 501,
	0, 0, 0, 1339, 0, 0, 0, 1283, 0, 818,
	0, 1304, 804, 0, 1309, 1310, 1299, 790, 1289, 0,
	0, 0, 1290, 0, 0, 1279, 1280, 326, 0, 343,
	824, 0, 392, 429, 1294, 0, 1282, 489, 0, 542,
	546, 0, 635, 1314, 0, 1286, 0, 400, 1307, 829,
	0, 835, 1308, 841, 1306, 611, 0, 831, 832, 837,
	331, 1383, 634, 705, 0, 0, 0, 1300, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 0, 0,
	833, 830, 834, 840, 828, 838, 825, 836, 0, 533,
	467, 684, 560, 338, 384, 371, 413, 455, 567, 0,
	0, 445, 615, 380, 469, 0, 359, 502, 1336, 591,
	466, 0, 574, 594, 0, 486, 365, 525, 581, 582,
	822, 827, 0, 843, 0, 5851, 370, 491, 351, 499,
	696, 662, 554, 512, 510, 0, 477, 534, 691, 1295,
	0, 399, 0, 394, 490, 630, 357, 609, 528, 495,
	449, 557, 586, 396, 381, 382, 425, 527, 415, 367,
	620, 1364, 1366, 1362, 1358, 1359, 1324, 1325, 1365, 1361,
	416, 1360, 0, 628, 1369, 1380, 1377, 1382, 1368, 1381,
	1375, 1057, 675, 1372, 1371, 1385, 1378, 1379, 621, 1384,
	1323, 1376, 1374, 1373, 1370, 0, 316, 317, 318, 319,
	320, 321, 322, 323, 324, 325, 327, 0, 328, 329,
	330, 332, 333, 334, 821, 335, 336, 337, 340, 341,
	342, 344, 704, 345, 346, 347, 348, 349, 350, 1348,
	1326, 352, 353, 354, 355, 356, 358, 360, 361, 362,
	363, 364, 366, 368, 1337, 1327, 1332, 1338, 1328, 1329,
	1333, 372, 373, 374, 375, 376, 377, 0, 378, 379,
	383, 385, 386, 387, 388, 389, 390, 393, 0, 395,
	397, 0, 398, 401, 0, 402, 403, 404, 405, 406,
	407, 408, 409, 1340, 410, 0, 411, 412, 414, 0,
	417, 418, 419, 420, 421, 0, 422, 1349, 1298, 423,
	424, 426, 427, 428, 430, 431, 432, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 0, 442, 443, 444,
	446, 0, 447, 448, 451, 452, 453, 454, 0, 456,
	1350, 0, 457, 458, 459, 1330, 1331, 460, 461, 462,
	463, 464, 465, 468, 1363, 470, 471, 472, 473, 474,
	475, 476, 706, 478, 479, 480, 481, 482, 483, 484,
	668, 1341, 485, 487, 488, 1347, 672, 1342, 839, 503,
	504, 505, 506, 507, 508, 509, 511, 0, 513, 514,
	515, 1343, 516, 517, 518, 519, 0, 520, 521, 522,
	523, 524, 526, 529, 530, 531, 532, 0, 535, 536,
	537, 538, 539, 540, 541, 543, 544, 545, 547, 548,
	549, 707, 550, 551, 552, 553, 1301, 555, 556, 708,
	558, 559, 561, 562, 563, 564, 565, 566, 717, 1334,
	568, 678, 569, 570, 571, 572, 573, 0, 575, 576,
	577, 578, 579, 580, 583, 584, 585, 587, 588, 1344,
	589, 590, 1335, 592, 593, 842, 595, 596, 597, 598,
	599, 0, 718, 600, 1345, 601, 1346, 602, 603, 604,
	605, 606, 5850, 608, 610, 0, 1285, 612, 613, 614,
	616, 617, 618, 619, 622, 623, 624, 625, 626, 0,
	627, 629, 631, 709, 686, 1351, 1352, 1355, 1353, 1354,
	1356, 1357, 1367, 632, 633, 649, 500, 494, 450, 492,
	493, 497, 498, 501, 0, 0, 0, 1339, 0, 0,
	0, 1283, 0, 818, 0, 1304, 804, 0, 1309, 1310,
	1299, 790, 1289, 0, 0, 0, 1290, 0, 0, 1279,
	1280, 326, 0, 343, 824, 0, 392, 429, 1294, 0,
	1282, 489, 0, 542, 546, 0, 635, 1314, 0, 1286,
	0, 400, 1307, 829, 0, 835, 1308, 841, 1306, 611,
	0, 831, 832, 837, 331, 1383, 634, 705, 0, 0,
	0, 1300, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 0, 0, 833, 830, 834, 840, 828, 838,
	825, 836, 0, 533, 467, 684, 560, 338, 384, 371,
	413, 455, 567, 0, 0, 445, 615, 380, 469, 0,
	359, 502, 1336, 591, 466, 0, 574, 594, 0, 486,
	365, 525, 581, 582, 822, 827, 0, 843, 0, 369,
	370, 491, 351, 499, 696, 662, 554, 512, 510, 0,
	477, 534, 691, 1295, 0, 399, 0, 394, 490, 630,
	357, 609, 528, 495, 449, 557, 586, 396, 381, 382,
	425, 527, 415, 367, 620, 1364, 1366, 1362, 1358, 1359,
	1324, 1325, 1365, 1361, 416, 1360, 0, 628, 1369, 1380,
	1377, 1382, 1368, 1381, 1375, 1057, 675, 1372, 1371, 1385,
	1378, 1379, 621, 1384, 1323, 1376, 1374, 1373, 1370, 0,
	316, 317, 318, 319, 320, 321, 322, 323, 324, 325,
	327, 0, 328, 329, 330, 332, 333, 334, 821, 335,
	336, 337, 340, 341, 342, 344, 704, 345, 346, 347,
	348, 349, 350, 1348, 1326, 352, 353, 354, 355, 356,
	358, 360, 361, 362, 363, 364, 366, 5655, 1337, 1327,
	1332, 1338, 1328, 1329, 1333, 372, 373, 374, 375, 376,
	377, 0, 378, 379, 383, 385, 386, 387, 388, 389,
	390, 393, 0, 395, 397, 0, 398, 401, 0, 402,
	403, 404, 405, 406, 407, 408, 409, 1340, 410, 0,
	411, 412, 414, 0, 417, 418, 419, 420, 421, 0,
	422, 1349, 5657, 423, 424, 426, 427, 428, 430, 431,
	432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	0, 442, 443, 444, 446, 0, 447, 448, 451, 452,
	453, 454, 0, 456, 1350, 0, 457, 458, 459, 1330,
	1331, 460, 461, 462, 463, 464, 465, 468, 1363, 470,
	471, 472, 473, 474, 475, 476, 706, 478, 479, 480,
	481, 482, 483, 484, 668, 1341, 485, 487, 488, 1347,
	672, 1342, 839, 503, 504, 505, 506, 507, 508, 509,
	511, 0, 513, 514, 515, 1343, 516, 517, 518, 519,
	0, 520, 521, 522, 523, 524, 526, 529, 530, 531,
	532, 0, 535, 536, 537, 538, 539, 540, 541, 543,
	544, 545, 547, 548, 549, 707, 550, 5656, 552, 553,
	1301, 555, 556, 708, 558, 559, 561, 562, 563, 564,
	565, 566, 717, 1334, 568, 678, 569, 570, 571, 572,
	573, 0, 575, 576, 577, 578, 579, 580, 583, 584,
	585, 587, 588, 1344, 589, 590, 1335, 592, 593, 842,
	595, 596, 597, 598, 599, 0, 718, 600, 1345, 601,
	1346, 602, 603, 604, 605, 606, 607, 608, 610, 0,
	1285, 612, 613, 614, 616, 617, 618, 619, 622, 623,
	624, 625, 626, 0, 627, 629, 631, 709, 686, 1351,
	1352, 1355, 1353, 1354, 1356, 1357, 1367, 632, 633, 649,
	500, 494, 450, 492, 493, 497, 498, 501, 0, 0,
	0, 1339, 0, 0, 0, 1283, 0, 818, 0, 1304,
	804, 0, 1309, 1310, 1299, 790, 1289, 0, 0, 0,
	5654, 0, 0, 1279, 1280, 326, 0, 343, 824, 0,
	392, 429, 1294, 0, 1282, 489, 0, 542, 546, 0,
	5849, 1314, 0, 1286, 0, 400, 1307, 829, 0, 835,
	1308, 841, 1306, 611, 0, 831, 832, 837, 331, 1383,
	634, 705, 0, 0, 0, 1300, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 0, 0, 833, 830,
	834, 840, 828, 838, 825, 836, 0, 533, 467, 684,
	560, 338, 384, 371, 413, 455, 567, 0, 0, 445,
	615, 380, 469, 0, 359, 502, 1336, 591, 466, 0,
	574, 594, 0, 486, 365, 525, 581, 582, 822, 827,
	0, 843, 0, 5851, 370, 491, 351, 499, 696, 662,
	554, 512, 510, 0, 477, 534, 691, 1295, 0, 399,
	0, 394, 490, 630, 357, 609, 528, 495, 449, 557,
	586, 396, 381, 382, 425, 527, 415, 367, 620, 1364,
	1366, 1362, 1358, 1359, 1324, 1325, 1365, 1361, 416, 1360,
	0, 628, 1369, 1380, 1377, 1382, 1368, 1381, 1375, 1057,
	675, 1372, 1371, 1385, 1378, 1379, 621, 1384, 1323, 1376,
	1374, 1373, 1370, 0, 316, 317, 318, 319, 320, 321,
	322, 323, 324, 325, 327, 0, 328, 329, 330, 332,
	333, 334, 821, 335, 336, 337, 340, 341, 342, 344,
	704, 345, 346, 347, 348, 349, 350, 1348, 1326, 352,
	353, 354, 355, 356, 358, 360, 361, 362, 363, 364,
	366, 368, 1337, 1327, 1332, 1338, 1328, 1329, 1333, 372,
	373, 374, 375, 376, 377, 0, 378, 379, 383, 385,
	386, 387, 388, 389, 390, 393, 0, 395, 397, 0,
	398, 401, 0, 402, 403, 404, 405, 406, 407, 408,
	409, 1340, 410, 0, 411, 412, 414, 0, 417, 418,
	419, 420, 421, 0, 422, 1349, 1298, 423, 424, 426,
	427, 428, 430, 431, 432, 433, 434, 435, 436, 437,
	438, 439, 440, 441, 0, 442, 443, 444, 446, 0,
	447, 448, 451, 452, 453, 454, 0, 456, 1350, 0,
	457, 458, 459, 1330, 1331, 460, 461, 462, 463, 464,
	465, 468, 1363, 470, 471, 472, 473, 474, 475, 476,
	706, 478, 479, 480, 481, 482, 483, 484, 668, 1341,
	485, 487, 488, 1347, 672, 1342, 839, 503, 504, 505,
	506, 507, 508, 509, 511, 0, 513, 514, 515, 1343,
	516, 517, 518, 519, 0, 520, 521, 522, 523, 524,
	526, 529, 530, 531, 532, 0, 535, 536, 537, 538,
	539, 540, 541, 543, 544, 545, 547, 548, 549, 707,
	550, 551, 552, 553, 1301, 555, 556, 708, 558, 559,
	561, 562, 563, 564, 565, 566, 717, 1334, 568, 678,
	569, 570, 571, 572, 573, 0, 575, 576, 577, 578,
	579, 580, 583, 584, 585, 587, 588, 1344, 589, 590,
	1335, 592, 593, 842, 595, 596, 597, 598, 599, 0,
	718, 600, 1345, 601, 1346, 602, 603, 604, 605, 606,
	5850, 608, 610, 0, 1285, 612, 613, 614, 616, 617,
	618, 619, 622, 623, 624, 625, 626, 0, 627, 629,
	631, 709, 686, 1351, 1352, 1355, 1353, 1354, 1356, 1357,
	1367, 632, 633, 649, 500, 494, 450, 492, 493, 497,
	498, 501, 0, 0, 0, 1339, 0, 0, 0, 1283,
	0, 818, 0, 1304, 804, 0, 1309, 1310, 1299, 790,
	1289, 0, 0, 0, 1290, 0, 0, 1279, 1280, 326,
	0, 343, 824, 0, 392, 429, 1294, 0, 1282, 489,
	0, 542, 546, 0, 635, 1314, 0, 1286, 0, 400,
	1307, 829, 0, 835, 1308, 841, 1306, 611, 0, 831,
	832, 837, 331, 1383, 634, 705, 0, 0, 0, 1300,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 833, 830, 834, 840, 828, 838, 825, 836,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	1336, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 822, 827, 0, 843, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 1295, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 1364, 1366, 1362, 1358, 1359, 1324, 1325,
	1365, 1361, 416, 1360, 0, 628, 1369, 1380, 1377, 1382,
	1368, 1381, 1375, 1057, 675, 1372, 1371, 1385, 1378, 1379,
	621, 1384, 1323, 1376, 1374, 1373, 1370, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 821, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 1348, 1326, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 1337, 1327, 1332, 1338,
	1328, 1329, 1333, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 1340, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 1349,
	1298, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 1350, 0, 457, 458, 459, 1330, 1331, 460,
	461, 462, 463, 464, 465, 468, 1363, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 5150, 668, 1341, 485, 487, 488, 1347, 672, 1342,
	839, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 1343, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 1301, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 1334, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 1344, 589, 590, 1335, 592, 593, 842, 595, 596,
	597, 598, 599, 0, 718, 600, 1345, 601, 1346, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 1285, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 1351, 1352, 1355,
	1353, 1354, 1356, 1357, 1367, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 0, 0, 0, 1339,
	0, 0, 0, 1283, 0, 818, 0, 1304, 804, 0,
	1309, 1310, 1299, 790, 1289, 0, 0, 0, 1290, 0,
	0, 1279, 1280, 326, 0, 343, 824, 0, 392, 429,
	1294, 0, 1282, 489, 0, 542, 546, 0, 635, 1314,
	0, 1286, 0, 400, 1307, 829, 0, 835, 1308, 841,
	1306, 611, 0, 831, 832, 837, 331, 1383, 634, 705,
	0, 0, 0, 1300, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 0, 0, 833, 830, 834, 840,
	828, 838, 825, 836, 0, 533, 467, 684, 560, 338,
	384, 371, 413, 455, 567, 0, 0, 445, 615, 380,
	469, 0, 359, 502, 1336, 591, 466, 0, 574, 594,
	0, 486, 365, 525, 581, 582, 822, 827, 0, 843,
	0, 369, 370, 491, 351, 499, 696, 662, 554, 512,
	510, 0, 477, 534, 691, 1295, 0, 399, 0, 394,
	490, 630, 357, 609, 528, 495, 449, 557, 586, 396,
	381, 382, 425, 527, 415, 367, 620, 1364, 1366, 1362,
	1358, 1359, 1324, 1325, 1365, 1361, 416, 1360, 0, 628,
	1369, 1380, 1377, 1382, 1368, 1381, 1375, 1057, 675, 1372,
	1371, 1385, 1378, 1379, 621, 1384, 1323, 1376, 1374, 1373,
	1370, 0, 316, 317, 318, 319, 320, 321, 322, 323,
	324, 325, 327, 0, 328, 329, 330, 332, 333, 334,
	821, 335, 336, 337, 340, 341, 342, 344, 704, 345,
	346, 347, 348, 349, 350, 1348, 1326, 352, 353, 354,
	355, 356, 358, 360, 361, 362, 363, 364, 366, 368,
	1337, 1327, 1332, 1338, 1328, 1329, 1333, 372, 373, 374,
	375, 376, 377, 0, 378, 379, 383, 385, 386, 387,
	388, 389, 390, 393, 0, 395, 397, 0, 398, 401,
	0, 402, 403, 404, 405, 406, 407, 408, 409, 1340,
	410, 0, 411, 412, 414, 0, 417, 418, 419, 420,
	421, 0, 422, 1349, 1298, 423, 424, 426, 427, 428,
	430, 431, 432, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 0, 442, 443, 444, 446, 0, 447, 448,
	451, 452, 453, 454, 0, 456, 1350, 0, 457, 458,
	459, 1330, 1331, 460, 461, 462, 463, 464, 465, 468,
	1363, 470, 471, 472, 473, 474, 475, 476, 706, 478,
	479, 480, 481, 482, 483, 484, 668, 1341, 485, 487,
	488, 1347, 672, 1342, 839, 503, 504, 505, 506, 507,
	508, 509, 511, 0, 513, 514, 515, 1343, 516, 517,
	518, 519, 0, 520, 521, 522, 523, 524, 526, 529,
	530, 531, 532, 0, 535, 536, 537, 538, 539, 540,
	541, 543, 544, 545, 547, 548, 549, 707, 550, 551,
	552, 553, 1301, 555, 556, 708, 558, 559, 561, 562,
	563, 564, 565, 566, 717, 1334, 568, 678, 569, 570,
	571, 572, 573, 0, 575, 576, 577, 578, 579, 580,
	583, 584, 585, 587, 588, 1344, 589, 590, 1335, 592,
	593, 842, 595, 596, 597, 598, 599, 0, 718, 600,
	1345, 601, 1346, 602, 603, 604, 605, 606, 607, 608,
	610, 0, 1285, 612, 613, 614, 616, 617, 618, 619,
	622, 623, 624, 625, 626, 0, 627, 629, 631, 709,
	5137, 1351, 1352, 1355, 1353, 1354, 1356, 1357, 1367, 632,
	633, 649, 500, 494, 450, 492, 493, 497, 498, 501,
	0, 0, 0, 1339, 0, 0, 0, 1283, 0, 818,
	0, 1304, 804, 0, 1309, 1310, 1299, 790, 1289, 0,
	0, 0, 1290, 0, 0, 1279, 1280, 326, 0, 343,
	824, 0, 392, 429, 1294, 0, 1282, 489, 0, 542,
	546, 0, 635, 1314, 0, 1286, 0, 400, 1307, 829,
	0, 835, 1308, 841, 1306, 611, 0, 831, 832, 837,
	331, 1383, 634, 705, 0, 0, 0, 1300, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 0, 0,
	833, 830, 834, 840, 828, 838, 825, 836, 0, 533,
	467, 684, 560, 338, 384, 371, 413, 455, 567, 0,
	0, 445, 615, 380, 469, 0, 359, 502, 1336, 591,
	466, 0, 574, 594, 0, 486, 365, 525, 581, 582,
	822, 827, 0, 843, 0, 4151, 370, 491, 351, 499,
	696, 662, 554, 512, 510, 0, 477, 534, 691, 1295,
	0, 399, 0, 394, 490, 630, 357, 609, 528, 495,
	449, 557, 586, 396, 381, 382, 425, 527, 415, 367,
	620, 1364, 1366, 1362, 1358, 1359, 1324, 1325, 1365, 1361,
	416, 1360, 0, 628, 1369, 1380, 1377, 1382, 1368, 1381,
	1375, 1057, 675, 1372, 1371, 1385, 1378, 1379, 621, 1384,
	1323, 1376, 1374, 1373, 1370, 0, 316, 317, 318, 319,
	320, 321, 322, 323, 324, 325, 327, 0, 328, 329,
	330, 332, 333, 334, 821, 335, 336, 337, 340, 341,
	342, 344, 704, 345, 346, 347, 348, 349, 350, 1348,
	1326, 352, 353, 354, 355, 356, 358, 360, 361, 362,
	363, 364, 366, 368, 1337, 1327, 1332, 1338, 1328, 1329,
	1333, 372, 373, 374, 375, 376, 377, 0, 378, 379,
	383, 385, 386, 387, 388, 389, 390, 393, 0, 395,
	397, 0, 398, 401, 0, 402, 403, 404, 405, 406,
	407, 408, 409, 1340, 410, 0, 411, 412, 414, 0,
	417, 418, 419, 420, 421, 0, 422, 1349, 1298, 423,
	424, 426, 427, 428, 430, 431, 432, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 0, 442, 443, 444,
	446, 0, 447, 448, 451, 452, 453, 454, 0, 456,
	1350, 0, 457, 458, 459, 1330, 1331, 460, 461, 462,
	463, 464, 465, 468, 1363, 470, 471, 472, 473, 474,
	475, 476, 706, 478, 479, 480, 481, 482, 483, 484,
	668, 1341, 485, 487, 488, 1347, 672, 1342, 839, 503,
	504, 505, 506, 507, 508, 509, 511, 0, 513, 514,
	515, 1343, 516, 517, 518, 519, 0, 520, 521, 522,
	523, 524, 526, 529, 530, 531, 532, 0, 535, 536,
	537, 538, 539, 540, 541, 543, 544, 545, 547, 548,
	549, 707, 550, 551, 552, 553, 1301, 555, 556, 708,
	558, 559, 561, 562, 563, 564, 565, 566, 717, 1334,
	568, 678, 569, 570, 571, 572, 573, 0, 575, 576,
	577, 578, 579, 580, 583, 584, 585, 587, 588, 1344,
	589, 590, 1335, 592, 593, 842, 595, 596, 597, 598,
	599, 0, 718, 600, 1345, 601, 1346, 602, 603, 604,
	605, 606, 607, 608, 610, 0, 1285, 612, 613, 614,
	616, 617, 618, 619, 622, 623, 624, 625, 626, 0,
	627, 629, 631, 709, 686, 1351, 1352, 1355, 1353, 1354,
	1356, 1357, 1367, 632, 633, 649, 500, 494, 450, 492,
	493, 497, 498, 501, 0, 0, 0, 1339, 0, 0,
	0, 1283, 0, 818, 0, 3191, 804, 0, 1309, 1310,
	1299, 790, 1289, 0, 0, 0, 1290, 0, 0, 1279,
	1280, 326, 0, 343, 824, 0, 392, 429, 1294, 0,
	1282, 489, 0, 542, 546, 0, 635, 1314, 0, 1286,
	0, 400, 1307, 829, 0, 835, 1308, 841, 1306, 611,
	0, 831, 832, 837, 331, 1383, 634, 705, 0, 0,
	0, 1300, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 0, 0, 833, 830, 834, 840, 828, 838,
	825, 836, 0, 533, 467, 684, 560, 338, 384, 371,
	413, 455, 567, 0, 0, 445, 615, 380, 469, 0,
	359, 502, 1336, 591, 466, 0, 574, 594, 0, 486,
	365, 525, 581, 582, 822, 827, 0, 843, 0, 369,
	370, 491, 351, 499, 696, 662, 554, 512, 510, 0,
	477, 534, 691, 1295, 0, 399, 0, 394, 490, 630,
	357, 609, 528, 495, 449, 557, 586, 396, 381, 382,
	425, 527, 415, 367, 620, 1364, 1366, 1362, 1358, 1359,
	1324, 1325, 1365, 1361, 416, 1360, 0, 628, 1369, 1380,
	1377, 1382, 1368, 1381, 1375, 1057, 675, 1372, 1371, 1385,
	1378, 1379, 621, 1384, 1323, 1376, 1374, 1373, 1370, 0,
	316, 317, 318, 319, 320, 321, 322, 323, 324, 325,
	327, 0, 328, 329, 330, 332, 333, 334, 821, 335,
	336, 337, 340, 341, 342, 344, 704, 345, 346, 347,
	348, 349, 350, 1348, 1326, 352, 353, 354, 355, 356,
	358, 360, 361, 362, 363, 364, 366, 368, 1337, 1327,
	1332, 1338, 1328, 1329, 1333, 372, 373, 374, 375, 376,
	377, 0, 378, 379, 383, 385, 386, 387, 388, 389,
	390, 393, 0, 395, 397, 0, 398, 401, 0, 402,
	403, 404, 405, 406, 407, 408, 409, 1340, 410, 0,
	411, 412, 414, 0, 417, 418, 419, 420, 421, 0,
	422, 1349, 1298, 423, 424, 426, 427, 428, 430, 431,
	432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	0, 442, 443, 444, 446, 0, 447, 448, 451, 452,
	453, 454, 0, 456, 1350, 0, 457, 458, 459, 1330,
	1331, 460, 461, 462, 463, 464, 465, 468, 1363, 470,
	471, 472, 473, 474, 475, 476, 706, 478, 479, 480,
	481, 482, 483, 484, 668, 1341, 485, 487, 488, 1347,
	672, 1342, 839, 503, 504, 505, 506, 507, 508, 509,
	511, 0, 513, 514, 515, 1343, 516, 517, 518, 519,
	0, 520, 521, 522, 523, 524, 526, 529, 530, 531,
	532, 0, 535, 536, 537, 538, 539, 540, 541, 543,
	544, 545, 547, 548, 549, 707, 550, 551, 552, 553,
	1301, 555, 556, 708, 558, 559, 561, 562, 563, 564,
	565, 566, 717, 1334, 568, 678, 569, 570, 571, 572,
	573, 0, 575, 576, 577, 578, 579, 580, 583, 584,
	585, 587, 588, 1344, 589, 590, 1335, 592, 593, 842,
	595, 596, 597, 598, 599, 0, 718, 600, 1345, 601,
	1346, 602, 603, 604, 605, 606, 607, 608, 610, 0,
	1285, 612, 613, 614, 616, 617, 618, 619, 622, 623,
	624, 625, 626, 0, 627, 629, 631, 709, 686, 1351,
	1352, 1355, 1353, 1354, 1356, 1357, 1367, 632, 633, 649,
	500, 494, 450, 492, 493, 497, 498, 501, 0, 0,
	0, 1339, 0, 0, 0, 1283, 0, 818, 0, 1304,
	804, 0, 1309, 1310, 1299, 790, 1289, 0, 0, 0,
	1290, 0, 0, 1279, 1280, 326, 0, 343, 824, 0,
	392, 429, 1294, 0, 1282, 489, 0, 542, 546, 0,
	635, 1314, 0, 1286, 0, 400, 1307, 829, 0, 835,
	1308, 841, 1306, 611, 0, 831, 832, 837, 331, 1383,
	634, 705, 0, 0, 0, 1300, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 0, 0, 833, 830,
	834, 840, 828, 838, 825, 836, 0, 533, 467, 684,
	560, 338, 384, 371, 413, 455, 567, 0, 0, 445,
	615, 380, 469, 0, 359, 502, 1336, 591, 466, 0,
	574, 594, 0, 486, 365, 525, 581, 582, 822, 827,
	0, 843, 0, 369, 370, 491, 351, 499, 696, 662,
	554, 512, 510, 0, 477, 534, 691, 1295, 0, 399,
	0, 394, 490, 630, 357, 609, 528, 495, 449, 557,
	586, 396, 381, 382, 425, 527, 415, 367, 620, 1364,
	1366, 1362, 1358, 1359, 1324, 1325, 1365, 1361, 416, 1360,
	0, 628, 1369, 1380, 1377, 1382, 1368, 1381, 1375, 1057,
	675, 1372, 1371, 1385, 1378, 1379, 621, 1384, 1323, 1376,
	1374, 1373, 1370, 0, 316, 317, 318, 319, 320, 321,
	322, 323, 324, 325, 327, 0, 328, 329, 330, 332,
	333, 334, 821, 335, 336, 337, 340, 341, 342, 344,
	704, 345, 346, 347, 348, 349, 350, 1348, 1326, 352,
	353, 354, 355, 356, 358, 360, 361, 362, 363, 364,
	366, 368, 1337, 1327, 1332, 1338, 1328, 1329, 1333, 372,
	373, 374, 375, 376, 377, 0, 378, 379, 383, 385,
	386, 387, 388, 389, 390, 393, 0, 395, 397, 0,
	398, 401, 0, 402, 403, 404, 405, 406, 407, 408,
	409, 1340, 410, 0, 411, 412, 414, 0, 417, 418,
	419, 420, 421, 0, 422, 1349, 1298, 423, 424, 426,
	427, 428, 430, 431, 432, 433, 434, 435, 436, 437,
	438, 439, 440, 441, 0, 442, 443, 444, 446, 0,
	447, 448, 451, 452, 453, 454, 0, 456, 1350, 0,
	457, 458, 459, 1330, 1331, 460, 461, 462, 463, 464,
	465, 468, 1363, 470, 471, 472, 473, 474, 475, 476,
	706, 478, 479, 480, 481, 482, 483, 484, 668, 1341,
	485, 487, 488, 1347, 672, 1342, 839, 503, 504, 505,
	506, 507, 508, 509, 511, 0, 513, 514, 515, 1343,
	516, 517, 518, 519, 0, 520, 521, 522, 523, 524,
	526, 529, 530, 531, 532, 0, 535, 536, 537, 538,
	539, 540, 541, 543, 544, 545, 547, 548, 549, 707,
	550, 551, 552, 553, 1301, 555, 556, 708, 558, 559,
	561, 562, 563, 564, 565, 566, 717, 1334, 568, 678,
	569, 570, 571, 572, 573, 0, 575, 576, 577, 578,
	579, 580, 583, 584, 585, 587, 588, 1344, 589, 590,
	1335, 592, 593, 842, 595, 596, 597, 598, 599, 0,
	718, 600, 1345, 601, 1346, 602, 603, 604, 605, 606,
	607, 608, 610, 0, 1285, 612, 613, 614, 616, 617,
	618, 619, 622, 623, 624, 625, 626, 0, 627, 629,
	631, 709, 686, 1351, 1352, 1355, 1353, 1354, 1356, 1357,
	1367, 632, 633, 649, 500, 494, 450, 492, 493, 497,
	498, 501, 0, 0, 0, 1339, 0, 0, 0, 1283,
	0, 818, 0, 1304, 804, 0, 1309, 1310, 1299, 790,
	1289, 0, 0, 0, 1290, 0, 0, 2034, 2035, 326,
	0, 343, 824, 0, 392, 429, 1294, 0, 0, 489,
	0, 542, 546, 0, 635, 1314, 0, 5467, 0, 400,
	1307, 829, 0, 835, 1308, 841, 1306, 611, 0, 831,
	832, 837, 331, 1383, 634, 705, 0, 0, 0, 1300,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 833, 830, 834, 840, 828, 838, 825, 836,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	1336, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 822, 827, 0, 843, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 1295, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 1364, 1366, 1362, 1358, 1359, 1324, 1325,
	1365, 1361, 416, 1360, 0, 628, 1369, 1380, 1377, 1382,
	1368, 1381, 1375, 1057, 675, 1372, 1371, 1385, 1378, 1379,
	621, 1384, 1323, 1376, 1374, 1373, 1370, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 821, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 1348, 1326, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 1337, 1327, 1332, 1338,
	1328, 1329, 1333, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 1340, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 1349,
	1298, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 1350, 0, 457, 458, 459, 1330, 1331, 460,
	461, 462, 463, 464, 465, 468, 1363, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 1341, 485, 487, 488, 1347, 672, 1342,
	839, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 1343, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 3329, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 1334, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 1344, 589, 590, 1335, 592, 593, 842, 595, 596,
	597, 598, 599, 0, 718, 600, 1345, 601, 1346, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 1351, 1352, 1355,
	1353, 1354, 1356, 1357, 1367, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 0, 0, 0, 1339,
	0, 0, 0, 0, 0, 818, 0, 1304, 804, 0,
	1309, 1310, 1299, 790, 1289, 0, 0, 0, 3185, 0,
	0, 3326, 3327, 326, 0, 343, 824, 0, 392, 429,
	1294, 0, 0, 489, 0, 542, 546, 0, 635, 1314,
	0, 0, 0, 400, 1307, 829, 0, 835, 1308, 841,
	1306, 611, 0, 831, 832, 837, 331, 1383, 634, 705,
	0, 0, 0, 1300, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 0, 0, 833, 830, 834, 840,
	828, 838, 825, 836, 0, 533, 467, 684, 560, 338,
	384, 371, 413, 455, 567, 0, 0, 445, 615, 380,
	469, 0, 359, 502, 1336, 591, 466, 0, 574, 594,
	0, 486, 365, 525, 581, 582, 822, 827, 0, 843,
	0, 369, 370, 491, 351, 499, 696, 662, 554, 512,
	510, 0, 477, 534, 691, 1295, 0, 399, 0, 394,
	490, 630, 357, 609, 528, 495, 449, 557, 586, 396,
	381, 382, 425, 527, 415, 367, 620, 1364, 1366, 1362,
	1358, 1359, 1324, 1325, 1365, 1361, 416, 1360, 0, 628,
	1369, 1380, 1377, 1382, 1368, 1381, 1375, 1057, 675, 1372,
	1371, 1385, 1378, 1379, 621, 1384, 1323, 1376, 1374, 1373,
	1370, 0, 316, 317, 318, 319, 320, 321, 322, 323,
	324, 325, 327, 0, 328, 329, 330, 332, 333, 334,
	821, 335, 336, 337, 340, 341, 342, 344, 704, 345,
	346, 347, 348, 349, 350, 1348, 1326, 352, 353, 354,
	355, 356, 358, 360, 361, 362, 363, 364, 366, 368,
	1337, 1327, 1332, 1338, 1328, 1329, 1333, 372, 373, 374,
	375, 376, 377, 0, 378, 379, 383, 385, 386, 387,
	388, 389, 390, 393, 0, 395, 397, 0, 398, 401,
	0, 402, 403, 404, 405, 406, 407, 408, 409, 1340,
	410, 0, 411, 412, 414, 0, 417, 418, 419, 420,
	421, 0, 422, 1349, 1298, 423, 424, 426, 427, 428,
	430, 431, 432, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 0, 442, 443, 444, 446, 0, 447, 448,
	451, 452, 453, 454, 0, 456, 1350, 0, 457, 458,
	459, 1330, 1331, 460, 461, 462, 463, 464, 465, 468,
	1363, 470, 471, 472, 473, 474, 475, 476, 706, 478,
	479, 480, 481, 482, 483, 484, 668, 1341, 485, 487,
	488, 1347, 672, 1342, 839, 503, 504, 505, 506, 507,
	508, 509, 511, 0, 513, 514, 515, 1343, 516, 517,
	518, 519, 0, 520, 521, 522, 523, 524, 526, 529,
	530, 531, 532, 0, 535, 536, 537, 538, 539, 540,
	541, 543, 544, 545, 547, 548, 549, 707, 550, 551,
	552, 553, 3329, 555, 556, 708, 558, 559, 561, 562,
	563, 564, 565, 566, 717, 1334, 568, 678, 569, 570,
	571, 572, 573, 0, 575, 576, 577, 578, 579, 580,
	583, 584, 585, 587, 588, 1344, 589, 590, 1335, 592,
	593, 842, 595, 596, 597, 598, 599, 0, 718, 600,
	1345, 601, 1346, 602, 603, 604, 605, 606, 607, 608,
	610, 0, 0, 612, 613, 614, 616, 617, 618, 619,
	622, 623, 624, 625, 626, 0, 627, 629, 631, 709,
	686, 1351, 1352, 1355, 1353, 1354, 1356, 1357, 1367, 632,
	633, 649, 500, 494, 450, 492, 493, 497, 498, 501,
	0, 0, 0, 1339, 0, 0, 0, 0, 0, 818,
	0, 1304, 804, 0, 1309, 1310, 0, 790, 1289, 0,
	0, 0, 3185, 0, 0, 3326, 3327, 326, 0, 343,
	824, 0, 392, 429, 1294, 0, 0, 489, 0, 542,
	546, 0, 635, 1314, 0, 0, 0, 400, 1307, 829,
	0, 835, 1308, 841, 1306, 611, 0, 831, 832, 837,
	331, 1383, 634, 705, 0, 0, 0, 496, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 0, 0,
	833, 830, 834, 840, 828, 838, 825, 836, 0, 533,
	467, 684, 560, 338, 384, 371, 413, 455, 567, 0,
	0, 445, 615, 380, 469, 0, 359, 502, 1336, 591,
	466, 0, 574, 594, 0, 486, 365, 525, 581, 582,
	822, 827, 0, 843, 0, 369, 370, 491, 351, 499,
	696, 662, 3184, 512, 510, 0, 477, 534, 691, 1295,
	0, 399, 0, 394, 490, 630, 357, 609, 528, 495,
	449, 557, 586, 396, 381, 382, 425, 527, 415, 367,
	620, 1364, 1366, 1362, 1358, 1359, 1324, 1325, 1365, 1361,
	416, 1360, 0, 628, 1369, 1380, 1377, 1382, 1368, 1381,
	1375, 1057, 675, 1372, 1371, 1385, 1378, 1379, 621, 1384,
	1323, 1376, 1374, 1373, 1370, 0, 316, 317, 318, 319,
	320, 321, 322, 323, 324, 325, 327, 0, 328, 329,
	330, 332, 333, 334, 821, 335, 336, 337, 340, 341,
	342, 344, 704, 345, 346, 347, 348, 349, 350, 1348,
	1326, 352, 353, 354, 355, 356, 358, 360, 361, 362,
	363, 364, 366, 368, 1337, 1327, 1332, 1338, 1328, 1329,
	1333, 372, 373, 374, 375, 376, 377, 0, 378, 379,
	383, 385, 386, 387, 388, 389, 390, 393, 0, 395,
	397, 0, 398, 401, 0, 402, 403, 404, 405, 406,
	407, 408, 409, 1340, 410, 0, 411, 412, 414, 0,
	417, 418, 419, 420, 421, 0, 422, 1349, 1298, 423,
	424, 426, 427, 428, 430, 431, 432, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 0, 442, 443, 444,
	446, 0, 447, 448, 451, 452, 453, 454, 0, 456,
	1350, 0, 457, 458, 459, 1330, 1331, 460, 461, 462,
	463, 464, 465, 468, 1363, 470, 471, 472, 473, 474,
	475, 476, 706, 478, 479, 480, 481, 482, 483, 484,
	668, 1341, 485, 487, 488, 1347, 672, 1342, 839, 503,
	504, 505, 506, 507, 508, 509, 511, 0, 513, 514,
	515, 1343, 516, 517, 518, 519, 0, 520, 521, 522,
	523, 524, 526, 529, 530, 531, 532, 0, 535, 536,
	537, 538, 539, 540, 541, 543, 544, 545, 547, 548,
	549, 707, 550, 551, 552, 553, 3183, 555, 556, 708,
	558, 559, 561, 562, 563, 564, 565, 566, 717, 1334,
	568, 678, 569, 570, 571, 572, 573, 0, 575, 576,
	577, 578, 579, 580, 583, 584, 585, 587, 588, 1344,
	589, 590, 1335, 592, 593, 842, 595, 596, 597, 598,
	599, 0, 718, 600, 1345, 601, 1346, 602, 603, 604,
	605, 606, 607, 608, 610, 0, 0, 612, 613, 614,
	616, 617, 618, 619, 622, 623, 624, 625, 626, 0,
	627, 629, 631, 709, 686, 1351, 1352, 1355, 1353, 1354,
	1356, 1357, 1367, 632, 633, 649, 500, 494, 450, 492,
	493, 497, 498, 501, 0, 0, 0, 1339, 0, 0,
	0, 0, 0, 818, 0, 1304, 804, 0, 1309, 1310,
	1299, 790, 1289, 0, 0, 0, 3185, 0, 0, 3181,
	3182, 326, 0, 343, 824, 0, 392, 429, 1294, 0,
	1282, 489, 0, 542, 546, 0, 0, 1314, 0, 1286,
	0, 400, 1307, 0, 0, 0, 1308, 0, 1306, 611,
	0, 0, 0, 0, 331, 1383, 634, 705, 0, 0,
	0, 1300, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 0, 0, 833, 830, 834, 840, 828, 838,
	825, 836, 0, 533, 467, 684, 560, 338, 384, 371,
	413, 455, 567, 0, 0, 445, 615, 380, 469, 0,
	359, 502, 1336, 591, 466, 0, 574, 594, 0, 486,
	365, 525, 581, 582, 822, 827, 0, 843, 0, 5851,
	370, 491, 351, 499, 696, 662, 554, 512, 510, 0,
	477, 534, 691, 1295, 0, 399, 0, 394, 490, 630,
	357, 609, 528, 495, 449, 557, 586, 396, 381, 382,
	425, 527, 415, 367, 620, 1364, 1366, 1362, 1358, 1359,
	1324, 1325, 1365, 1361, 416, 1360, 0, 628, 1369, 1380,
	1377, 1382, 1368, 1381, 1375, 1057, 675, 1372, 1371, 1385,
	1378, 1379, 621, 1384, 1323, 1376, 1374, 1373, 1370, 0,
	316, 317, 318, 319, 320, 321, 322, 323, 324, 325,
	327, 0, 328, 329, 330, 332, 333, 334, 821, 335,
	336, 337, 340, 341, 342, 344, 704, 345, 346, 347,
	348, 349, 350, 1348, 1326, 352, 353, 354, 355, 356,
	358, 360, 361, 362, 363, 364, 366, 368, 1337, 1327,
	1332, 1338, 1328, 1329, 1333, 372, 373, 374, 375, 376,
	377, 0, 378, 379, 383, 385, 386, 387, 388, 389,
	390, 393, 0, 395, 397, 0, 398, 401, 0, 402,
	403, 404, 405, 406, 407, 408, 409, 1340, 410, 0,
	411, 412, 414, 0, 417, 418, 419, 420, 421, 0,
	422, 1349, 1298, 423, 424, 426, 427, 428, 430, 431,
	432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	0, 442, 443, 444, 446, 0, 447, 448, 451, 452,
	453, 454, 0, 456, 1350, 0, 457, 458, 459, 1330,
	1331, 460, 461, 462, 463, 464, 465, 468, 1363, 470,
	471, 472, 473, 474, 475, 476, 706, 478, 479, 480,
	481, 482, 483, 484, 668, 1341, 485, 487, 488, 1347,
	672, 1342, 839, 503, 504, 505, 506, 507, 508, 509,
	511, 0, 513, 514, 515, 1343, 516, 517, 518, 519,
	0, 520, 521, 522, 523, 524, 526, 529, 530, 531,
	532, 0, 535, 536, 537, 538, 539, 540, 541, 543,
	544, 545, 547, 548, 549, 707, 550, 551, 552, 553,
	1301, 555, 556, 708, 558, 559, 561, 562, 563, 564,
	565, 566, 717, 1334, 568, 678, 569, 570, 571, 572,
	573, 0, 575, 576, 577, 578, 579, 580, 583, 584,
	585, 587, 588, 1344, 589, 590, 1335, 592, 593, 842,
	595, 596, 597, 598, 599, 0, 718, 600, 1345, 601,
	1346, 602, 603, 604, 605, 606, 5850, 608, 610, 0,
	1285, 612, 613, 614, 616, 617, 618, 619, 622, 623,
	624, 625, 626, 0, 627, 629, 631, 709, 686, 1351,
	1352, 1355, 1353, 1354, 1356, 1357, 1367, 632, 633, 649,
	500, 494, 450, 492, 493, 497, 498, 501, 0, 0,
	0, 1339, 0, 0, 0, 0, 0, 818, 0, 1304,
	804, 0, 1309, 1310, 0, 790, 1289, 0, 0, 0,
	1290, 0, 0, 1279, 1280, 326, 0, 343, 824, 0,
	392, 429, 1294, 0, 0, 489, 0, 542, 546, 0,
	635, 1314, 0, 0, 0, 400, 1307, 829, 0, 835,
	1308, 841, 1306, 611, 0, 831, 832, 837, 331, 1383,
	634, 705, 0, 0, 0, 496, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 0, 0, 833, 830,
	834, 840, 828, 838, 825, 836, 0, 533, 467, 684,
	560, 338, 384, 371, 413, 455, 567, 0, 0, 445,
	615, 380, 469, 0, 359, 502, 1336, 591, 466, 0,
	574, 594, 0, 486, 365, 525, 581, 582, 822, 827,
	0, 843, 0, 369, 370, 491, 351, 499, 696, 662,
	554, 512, 510, 0, 477, 534, 691, 1295, 0, 399,
	0, 394, 490, 630, 357, 609, 528, 495, 449, 557,
	586, 396, 381, 382, 425, 527, 415, 367, 620, 1364,
	1366, 1362, 1358, 1359, 1324, 1325, 1365, 1361, 416, 1360,
	0, 628, 1369, 1380, 1377, 1382, 1368, 1381, 1375, 1057,
	675, 1372, 1371, 1385, 1378, 1379, 621, 1384, 1323, 1376,
	1374, 1373, 1370, 0, 316, 317, 318, 319, 320, 321,
	322, 323, 324, 325, 327, 0, 328, 329, 330, 332,
	333, 334, 821, 335, 336, 337, 340, 341, 342, 344,
	704, 345, 346, 347, 348, 349, 350, 1348, 1326, 352,
	353, 354, 355, 356, 358, 360, 361, 362, 363, 364,
	366, 368, 1337, 1327, 1332, 1338, 1328, 1329, 1333, 372,
	373, 374, 375, 376, 377, 0, 378, 379, 383, 385,
	386, 387, 388, 389, 390, 393, 0, 395, 397, 0,
	398, 401, 0, 402, 403, 404, 405, 406, 407, 408,
	409, 1340, 410, 0, 411, 412, 414, 0, 417, 418,
	419, 420, 421, 0, 422, 1349, 1298, 423, 424, 426,
	427, 428, 430, 431, 432, 433, 434, 435, 436, 437,
	438, 439, 440, 441, 0, 442, 443, 444, 446, 0,
	447, 448, 451, 452, 453, 454, 0, 456, 1350, 0,
	457, 458, 459, 1330, 1331, 460, 461, 462, 463, 464,
	465, 468, 1363, 470, 471, 472, 473, 474, 475, 476,
	706, 478, 479, 480, 481, 482, 483, 484, 668, 1341,
	485, 487, 488, 1347, 672, 1342, 839, 503, 504, 505,
	506, 507, 508, 509, 511, 0, 513, 514, 515, 1343,
	516, 517, 518, 519, 0, 520, 521, 522, 523, 524,
	526, 529, 530, 531, 532, 0, 535, 536, 537, 538,
	539, 540, 541, 543, 544, 545, 547, 548, 549, 707,
	550, 551, 552, 553, 3329, 555, 556, 708, 558, 559,
	561, 562, 563, 564, 565, 566, 717, 1334, 568, 678,
	569, 570, 571, 572, 573, 0, 575, 576, 577, 578,
	579, 580, 583, 584, 585, 587, 588, 1344, 589, 590,
	1335, 592, 593, 842, 595, 596, 597, 598, 599, 0,
	718, 600, 1345, 601, 1346, 602, 603, 604, 605, 606,
	607, 608, 610, 0, 0, 612, 613, 614, 616, 617,
	618, 619, 622, 623, 624, 625, 626, 0, 627, 629,
	631, 709, 686, 1351, 1352, 1355, 1353, 1354, 1356, 1357,
	1367, 632, 633, 649, 500, 494, 450, 492, 493, 497,
	498, 501, 0, 0, 0, 1339, 0, 818, 0, 1304,
	804, 0, 1309, 1310, 0, 790, 1289, 0, 0, 0,
	0, 0, 0, 0, 3185, 326, 0, 343, 824, 0,
	392, 429, 1294, 0, 0, 489, 0, 542, 546, 0,
	635, 1314, 0, 0, 0, 400, 1307, 829, 0, 835,
	1308, 841, 1306, 611, 0, 831, 832, 837, 331, 1383,
	634, 705, 0, 0, 0, 496, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 0, 0, 833, 830,
	834, 840, 828, 838, 825, 836, 0, 533, 467, 684,
	560, 338, 384, 371, 413, 455, 567, 0, 0, 445,
	615, 380, 469, 0, 359, 502, 1336, 591, 466, 0,
	574, 594, 0, 486, 365, 525, 581, 582, 822, 827,
	0, 843, 0, 369, 370, 491, 351, 499, 696, 662,
	554, 512, 510, 0, 477, 534, 4750, 1295, 0, 399,
	0, 394, 490, 630, 357, 609, 528, 495, 449, 557,
	586, 396, 381, 382, 425, 527, 415, 367, 620, 1364,
	1366, 1362, 1358, 1359, 1324, 1325, 1365, 1361, 416, 1360,
	0, 628, 1369, 1380, 1377, 1382, 1368, 1381, 1375, 1057,
	675, 1372, 1371, 1385, 1378, 1379, 621, 1384, 1323, 1376,
	1374, 1373, 1370, 0, 316, 317, 318, 319, 320, 321,
	322, 323, 324, 325, 327, 0, 328, 329, 330, 332,
	333, 334, 821, 335, 336, 337, 340, 341, 342, 344,
	704, 345, 346, 347, 348, 349, 350, 1348, 1326, 352,
	353, 354, 355, 356, 358, 360, 361, 362, 363, 364,
	366, 368, 1337, 1327, 1332, 1338, 1328, 1329, 1333, 372,
	373, 374, 375, 376, 377, 0, 378, 379, 383, 385,
	386, 387, 388, 389, 390, 393, 0, 395, 397, 0,
	398, 401, 0, 402, 403, 404, 405, 406, 407, 408,
	409, 1340, 410, 0, 411, 412, 414, 0, 417, 418,
	419, 420, 421, 0, 422, 1349, 1298, 423, 424, 426,
	427, 428, 430, 431, 432, 433, 434, 435, 436, 437,
	438, 439, 440, 441, 0, 442, 443, 444, 446, 0,
	447, 448, 451, 452, 453, 454, 0, 456, 1350, 0,
	457, 458, 459, 1330, 1331, 460, 461, 462, 463, 464,
	465, 468, 1363, 470, 471, 472, 473, 474, 475, 476,
	706, 478, 479, 480, 481, 482, 483, 484, 668, 1341,
	485, 487, 488, 1347, 672, 1342, 839, 503, 504, 505,
	506, 507, 508, 509, 511, 0, 513, 514, 515, 1343,
	516, 517, 518, 519, 0, 520, 521, 522, 523, 524,
	526, 529, 530, 531, 532, 0, 535, 536, 537, 538,
	539, 540, 541, 543, 544, 545, 547, 548, 549, 707,
	550, 551, 552, 553, 3329, 555, 556, 708, 558, 559,
	561, 562, 563, 564, 565, 566, 717, 1334, 568, 678,
	569, 570, 571, 572, 573, 0, 575, 576, 577, 578,
	579, 580, 583, 584, 585, 587, 588, 1344, 589, 590,
	1335, 592, 593, 842, 595, 596, 597, 598, 599, 0,
	718, 600, 1345, 601, 1346, 602, 603, 604, 605, 606,
	607, 608, 610, 0, 0, 612, 613, 614, 616, 617,
	618, 619, 622, 623, 624, 625, 626, 0, 627, 629,
	631, 709, 686, 1351, 1352, 1355, 1353, 1354, 1356, 1357,
	1367, 632, 633, 649, 500, 494, 450, 492, 493, 497,
	498, 501, 0, 0, 0, 1339, 0, 818, 0, 1304,
	804, 0, 1309, 1310, 0, 790, 1289, 0, 0, 0,
	0, 0, 0, 0, 3185, 326, 0, 343, 824, 0,
	392, 429, 1294, 0, 0, 489, 0, 542, 546, 0,
	635, 1314, 0, 0, 0, 400, 1307, 829, 0, 835,
	1308, 841, 1306, 611, 0, 831, 832, 837, 331, 1383,
	634, 705, 0, 0, 0, 496, 0, 0, 0, 0,
	0, 0, 0, 4692, 0, 0, 0, 0, 833, 830,
	834, 840, 828, 838, 825, 836, 0, 533, 467, 684,
	560, 338, 384, 371, 413, 455, 567, 0, 0, 445,
	615, 380, 469, 0, 359, 502, 1336, 591, 466, 0,
	574, 594, 0, 486, 365, 525, 581, 582, 822, 827,
	0, 843, 0, 369, 370, 491, 351, 499, 696, 662,
	554, 512, 510, 0, 477, 534, 691, 1295, 0, 399,
	0, 394, 490, 630, 357, 609, 528, 495, 449, 557,
	586, 396, 381, 382, 425, 527, 415, 367, 620, 1364,
	1366, 1362, 1358, 1359, 1324, 1325, 1365, 1361, 416, 1360,
	0, 628, 1369, 1380, 1377, 1382, 1368, 1381, 1375, 1057,
	675, 1372, 1371, 1385, 1378, 1379, 621, 1384, 1323, 1376,
	1374, 1373, 1370, 0, 316, 317, 318, 319, 320, 321,
	322, 323, 324, 325, 327, 0, 328, 329, 330, 332,
	333, 334, 821, 335, 336, 337, 340, 341, 342, 344,
	704, 345, 346, 347, 348, 349, 350, 1348, 1326, 352,
	353, 354, 355, 356, 358, 360, 361, 362, 363, 364,
	366, 368, 1337, 1327, 1332, 1338, 1328, 1329, 1333, 372,
	373, 374, 375, 376, 377, 0, 378, 379, 383, 385,
	386, 387, 388, 389, 390, 393, 0, 395, 397, 0,
	398, 401, 0, 402, 403, 404, 405, 406, 407, 408,
	409, 1340, 410, 0, 411, 412, 414, 0, 417, 418,
	419, 420, 421, 0, 422, 1349, 1298, 423, 424, 426,
	427, 428, 430, 431, 432, 433, 434, 435, 436, 437,
	438, 439, 440, 441, 0, 442, 443, 444, 446, 0,
	447, 448, 451, 452, 453, 454, 0, 456, 1350, 0,
	457, 458, 459, 1330, 1331, 460, 461, 462, 463, 464,
	465, 468, 1363, 470, 471, 472, 473, 474, 475, 476,
	706, 478, 479, 480, 481, 482, 483, 484, 668, 1341,
	485, 487, 488, 1347, 672, 1342, 839, 503, 504, 505,
	506, 507, 508, 509, 511, 0, 513, 514, 515, 1343,
	516, 517, 518, 519, 0, 520, 521, 522, 523, 524,
	526, 529, 530, 531, 532, 0, 535, 536, 537, 538,
	539, 540, 541, 543, 544, 545, 547, 548, 549, 707,
	550, 551, 552, 553, 3329, 555, 556, 708, 558, 559,
	561, 562, 563, 564, 565, 566, 717, 1334, 568, 678,
	569, 570, 571, 572, 573, 0, 575, 576, 577, 578,
	579, 580, 583, 584, 585, 587, 588, 1344, 589, 590,
	1335, 592, 593, 842, 595, 596, 597, 598, 599, 0,
	718, 600, 1345, 601, 1346, 602, 603, 604, 605, 606,
	607, 608, 610, 0, 0, 612, 613, 614, 616, 617,
	618, 619, 622, 623, 624, 625, 626, 0, 627, 629,
	631, 709, 686, 1351, 1352, 1355, 1353, 1354, 1356, 1357,
	1367, 632, 633, 649, 500, 494, 450, 492, 493, 497,
	498, 501, 818, 0, 0, 1339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 343, 824, 3185, 392, 429, 644, 0, 0,
	489, 0, 542, 546, 177, 635, 0, 0, 0, 0,
	400, 0, 829, 0, 835, 0, 841, 0, 611, 0,
	831, 832, 837, 331, 719, 634, 705, 0, 0, 0,
	496, 174, 0, 0, 864, 175, 0, 0, 339, 0,
	0, 0, 0, 833, 830, 834, 840, 828, 838, 825,
	836, 0, 533, 467, 1166, 560, 338, 384, 371, 413,
	455, 567, 0, 0, 445, 615, 380, 469, 0, 359,
	502, 1336, 591, 466, 0, 574, 594, 0, 486, 365,
	525, 581, 582, 822, 827, 0, 843, 0, 369, 370,
	491, 351, 499, 3415, 3416, 3414, 512, 510, 0, 477,
	534, 691, 0, 0, 399, 0, 394, 490, 630, 357,
	609, 528, 495, 449, 557, 586, 396, 381, 382, 425,
	527, 415, 367, 620, 1364, 1366, 1362, 1358, 1359, 1324,
	1325, 1365, 1361, 416, 3421, 0, 628, 637, 671, 651,
	679, 636, 676, 646, 391, 675, 640, 639, 685, 666,
	667, 621, 681, 652, 650, 643, 642, 638, 0, 316,
	317, 318, 319, 320, 321, 322, 323, 324, 325, 327,
	0, 328, 329, 330, 332, 333, 334, 821, 335, 336,
	337, 340, 341, 342, 344, 704, 345, 346, 347, 348,
	349, 350, 1348, 1326, 352, 353, 354, 355, 356, 358,
	360, 361, 362, 363, 364, 366, 368, 1337, 1327, 1332,
	1338, 1328, 1329, 1333, 372, 373, 374, 375, 376, 377,
	0, 378, 379, 383, 385, 386, 387, 388, 389, 390,
	393, 0, 395, 397, 0, 398, 401, 0, 402, 403,
	404, 405, 406, 407, 408, 409, 1340, 410, 0, 411,
	412, 414, 0, 417, 418, 419, 420, 421, 0, 422,
	1349, 648, 423, 424, 426, 427, 428, 430, 431, 432,
	433, 434, 435, 436, 437, 438, 439, 440, 441, 0,
	442, 443, 444, 446, 0, 447, 448, 451, 452, 453,
	454, 3407, 456, 1350, 0, 457, 458, 459, 1330, 1331,
	460, 461, 462, 463, 464, 465, 468, 1363, 470, 471,
	472, 473, 474, 475, 476, 706, 478, 479, 480, 481,
	482, 483, 484, 668, 1341, 485, 487, 488, 1347, 672,
	1342, 839, 503, 504, 505, 506, 507, 508, 509, 511,
	0, 513, 514, 515, 1343, 516, 517, 518, 519, 0,
	520, 521, 522, 523, 524, 526, 529, 530, 531, 532,
	0, 535, 536, 537, 538, 539, 540, 541, 543, 544,
	545, 547, 548, 549, 707, 550, 551, 552, 553, 677,
	555, 556, 708, 558, 559, 561, 562, 563, 564, 565,
	566, 717, 1334, 568, 678, 569, 570, 571, 572, 573,
	0, 575, 576, 577, 578, 579, 580, 583, 584, 585,
	587, 588, 1344, 589, 590, 1335, 592, 593, 842, 595,
	596, 597, 598, 599, 0, 718, 600, 1345, 601, 1346,
	602, 603, 604, 605, 606, 607, 608, 610, 0, 0,
	612, 613, 614, 616, 617, 618, 619, 622, 623, 624,
	625, 626, 0, 627, 629, 631, 709, 686, 1351, 1352,
	1355, 1353, 1354, 1356, 1357, 1367, 632, 633, 649, 500,
	494, 450, 492, 493, 497, 498, 501, 0, 0, 0,
	1339, 0, 950, 0, 1700, 804, 178, 0, 0, 0,
	790, 0, 0, 0, 0, 0, 0, 0, 0, 3409,
	326, 0, 343, 824, 0, 392, 429, 644, 0, 0,
	489, 0, 542, 546, 0, 635, 0, 0, 5725, 0,
	400, 1794, 829, 0, 835, 0, 841, 1793, 611, 0,
	831, 832, 837, 331, 719, 634, 705, 0, 0, 0,
	496, 0, 0, 0, 0, 0, 0, 0, 339, 0,
	0, 0, 1795, 833, 830, 834, 840, 828, 838, 825,
	836, 0, 533, 467, 684, 560, 338, 384, 371, 413,
	455, 567, 0, 0, 445, 615, 380, 469, 0, 359,
	502, 0, 591, 466, 0, 574, 594, 0, 486, 365,
	525, 581, 582, 822, 827, 0, 843, 0, 369, 370,
	491, 351, 499, 696, 662, 554, 512, 510, 0, 477,
	534, 691, 0, 0, 399, 0, 394, 490, 630, 357,
	609, 528, 495, 449, 557, 586, 396, 381, 382, 425,
	527, 415, 367, 620, 659, 663, 661, 657, 654, 658,
	655, 656, 660, 416, 653, 0, 628, 637, 671, 651,
	679, 636, 676, 646, 391, 675, 640, 639, 685, 666,
	667, 621, 681, 652, 650, 643, 642, 638, 0, 316,
	317, 318, 319, 320, 321, 322, 323, 324, 325, 327,
	0, 328, 329, 330, 332, 333, 334, 821, 335, 336,
	337, 340, 341, 342, 344, 704, 345, 346, 347, 348,
	349, 350, 641, 823, 352, 353, 354, 355, 356, 358,
	360, 361, 362, 363, 364, 366, 368, 0, 0, 0,
	826, 0, 0, 0, 372, 373, 374, 375, 376, 377,
	0, 378, 379, 383, 385, 386, 387, 388, 389, 390,
	393, 0, 395, 397, 0, 398, 401, 0, 402, 403,
	404, 405, 406, 407, 408, 409, 645, 410, 0, 411,
	412, 414, 0, 417, 418, 419, 420, 421, 0, 422,
	647, 648, 423, 424, 426, 427, 428, 430, 431, 432,
	433, 434, 435, 436, 437, 438, 439, 440, 441, 0,
	442, 443, 444, 446, 0, 447, 448, 451, 452, 453,
	454, 0, 456, 664, 0, 457, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 465, 468, 665, 470, 471,
	472, 473, 474, 475, 476, 706, 478, 479, 480, 481,
	482, 483, 484, 668, 669, 485, 487, 488, 670, 672,
	673, 839, 503, 504, 505, 506, 507, 508, 509, 511,
	0, 513, 514, 515, 674, 516, 517, 518, 519, 0,
	520, 521, 522, 523, 524, 526, 529, 530, 531, 532,
	0, 535, 536, 537, 538, 539, 540, 541, 543, 544,
	545, 547, 548, 549, 707, 550, 551, 552, 553, 677,
	555, 556, 708, 558, 559, 561, 562, 563, 564, 565,
	566, 717, 0, 568, 678, 569, 570, 571, 572, 573,
	0, 575, 576, 577, 578, 579, 580, 583, 584, 585,
	587, 588, 680, 589, 590, 0, 592, 593, 842, 595,
	596, 597, 598, 599, 0, 718, 600, 682, 601, 683,
	602, 603, 604, 605, 606, 607, 608, 610, 0, 0,
	612, 613, 614, 616, 617, 618, 619, 622, 623, 624,
	625, 626, 0, 627, 629, 631, 709, 686, 687, 688,
	689, 690, 692, 693, 694, 695, 632, 633, 649, 500,
	494, 450, 492, 493, 497, 498, 501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 818, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 5726,
	0, 0, 1701, 1702, 5724, 326, 0, 343, 824, 0,
	392, 429, 644, 0, 0, 489, 0, 542, 546, 0,
	635, 0, 0, 0, 0, 400, 0, 829, 0, 835,
	0, 841, 0, 611, 0, 831, 832, 837, 331, 719,
	634, 705, 0, 0, 0, 496, 0, 0, 0, 864,
	0, 0, 0, 339, 0, 0, 0, 0, 833, 830,
	834, 840, 828, 838, 825, 836, 0, 533, 467, 684,
	560, 338, 384, 371, 413, 455, 567, 0, 0, 445,
	615, 380, 469, 0, 359, 502, 1336, 591, 466, 0,
	574, 594, 0, 486, 365, 525, 581, 582, 822, 827,
	0, 843, 0, 369, 370, 491, 351, 499, 3415, 3416,
	3414, 512, 510, 0, 477, 534, 691, 0, 0, 399,
	0, 394, 490, 630, 357, 609, 528, 495, 449, 557,
	586, 396, 381, 382, 425, 527, 415, 367, 620, 1364,
	1366, 1362, 1358, 1359, 1324, 1325, 1365, 1361, 416, 3421,
	0, 628, 637, 671, 651, 679, 636, 676, 646, 391,
	675, 640, 639, 685, 666, 667, 621, 681, 652, 650,
	643, 642, 638, 0, 316, 317, 318, 319, 320, 321,
	322, 323, 324, 325, 327, 0, 328, 329, 330, 332,
	333, 334, 821, 335, 336, 337, 340, 341, 342, 344,
	704, 345, 346, 347, 348, 349, 350, 1348, 1326, 352,
	353, 354, 355, 356, 358, 360, 361, 362, 363, 364,
	366, 368, 1337, 1327, 1332, 1338, 1328, 1329, 1333, 372,
	373, 374, 375, 376, 377, 0, 378, 379, 383, 385,
	386, 387, 388, 389, 390, 393, 0, 395, 397, 0,
	398, 401, 0, 402, 403, 404, 405, 406, 407, 408,
	409, 1340, 410, 0, 411, 412, 414, 0, 417, 418,
	419, 420, 421, 0, 422, 1349, 648, 423, 424, 426,
	427, 428, 430, 431, 432, 433, 434, 435, 436, 437,
	438, 439, 440, 441, 0, 442, 443, 444, 446, 0,
	447, 448, 451, 452, 453, 454, 3407, 456, 1350, 0,
	457, 458, 459, 1330, 1331, 460, 461, 462, 463, 464,
	465, 468, 1363, 470, 471, 472, 473, 474, 475, 476,
	706, 478, 479, 480, 481, 482, 483, 484, 668, 1341,
	485, 487, 488, 1347, 672, 1342, 839, 503, 504, 505,
	506, 507, 508, 509, 511, 0, 513, 514, 515, 1343,
	516, 517, 518, 519, 0, 520, 521, 522, 523, 524,
	526, 529, 530, 531, 532, 0, 535, 536, 537, 538,
	539, 540, 541, 543, 544, 545, 547, 548, 549, 707,
	550, 551, 552, 553, 677, 555, 556, 708, 558, 559,
	561, 562, 563, 564, 565, 566, 717, 1334, 568, 678,
	569, 570, 571, 572, 573, 0, 575, 576, 577, 578,
	579, 580, 583, 584, 585, 587, 588, 1344, 589, 590,
	1335, 592, 593, 842, 595, 596, 597, 598, 599, 0,
	718, 600, 1345, 601, 1346, 602, 603, 604, 605, 606,
	607, 608, 610, 0, 0, 612, 613, 614, 616, 617,
	618, 619, 622, 623, 624, 625, 626, 0, 627, 629,
	631, 709, 686, 1351, 1352, 1355, 1353, 1354, 1356, 1357,
	1367, 632, 633, 649, 500, 494, 450, 492, 493, 497,
	498, 501, 818, 0, 0, 1339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 343, 824, 3409, 392, 429, 644, 0, 0,
	489, 0, 542, 546, 0, 635, 0, 0, 0, 0,
	400, 0, 829, 0, 835, 0, 841, 0, 611, 0,
	831, 832, 837, 331, 719, 634, 705, 0, 0, 0,
	496, 0, 0, 0, 0, 0, 0, 0, 339, 0,
	0, 0, 0, 833, 830, 834, 840, 828, 838, 825,
	836, 0, 533, 467, 684, 560, 338, 384, 371, 413,
	455, 567, 0, 0, 445, 615, 380, 469, 0, 359,
	502, 1336, 591, 466, 0, 574, 594, 0, 486, 365,
	525, 581, 582, 822, 827, 0, 843, 0, 369, 370,
	491, 351, 499, 696, 662, 554, 512, 510, 0, 477,
	534, 691, 0, 0, 399, 0, 394, 490, 630, 357,
	609, 528, 495, 449, 557, 586, 396, 381, 382, 425,
	527, 415, 367, 620, 1364, 1366, 1362, 1358, 1359, 1324,
	1325, 1365, 1361, 416, 3421, 0, 628, 637, 671, 651,
	679, 636, 676, 646, 391, 675, 640, 639, 685, 666,
	667, 621, 681, 652, 650, 643, 642, 638, 0, 316,
	317, 318, 319, 320, 321, 322, 323, 324, 325, 327,
	0, 328, 329, 330, 332, 333, 334, 821, 335, 336,
	337, 340, 341, 342, 344, 704, 345, 346, 347, 348,
	349, 350, 1348, 1326, 352, 353, 354, 355, 356, 358,
	360, 361, 362, 363, 364, 366, 368, 1337, 1327, 1332,
	1338, 1328, 1329, 1333, 372, 373, 374, 375, 376, 377,
	0, 378, 379, 383, 385, 386, 387, 388, 389, 390,
	393, 0, 395, 397, 0, 398, 401, 0, 402, 403,
	404, 405, 406, 407, 408, 409, 1340, 410, 0, 411,
	412, 414, 0, 417, 418, 419, 420, 421, 0, 422,
	1349, 648, 423, 424, 426, 427, 428, 430, 431, 432,
	433, 434, 435, 436, 437, 438, 439, 440, 441, 0,
	442, 443, 444, 446, 0, 447, 448, 451, 452, 453,
	454, 0, 456, 1350, 0, 457, 458, 459, 1330, 1331,
	460, 461, 462, 463, 464, 465, 468, 1363, 470, 471,
	472, 473, 474, 475, 476, 706, 478, 479, 480, 481,
	482, 483, 484, 668, 1341, 485, 487, 488, 1347, 672,
	1342, 839, 503, 504, 505, 506, 507, 508, 509, 511,
	0, 513, 514, 515, 1343, 516, 517, 518, 519, 0,
	520, 521, 522, 523, 524, 526, 529, 530, 531, 532,
	0, 535, 536, 537, 538, 539, 540, 541, 543, 544,
	545, 547, 548, 549, 707, 550, 551, 552, 553, 677,
	555, 556, 708, 558, 559, 561, 562, 563, 564, 565,
	566, 717, 1334, 568, 678, 569, 570, 571, 572, 573,
	0, 575, 576, 577, 578, 579, 580, 583, 584, 585,
	587, 588, 1344, 589, 590, 1335, 592, 593, 842, 595,
	596, 597, 598, 599, 0, 718, 600, 1345, 601, 1346,
	602, 603, 604, 605, 606, 607, 608, 610, 0, 0,
	612, 613, 614, 616, 617, 618, 619, 622, 623, 624,
	625, 626, 0, 627, 629, 631, 709, 686, 1351, 1352,
	1355, 1353, 1354, 1356, 1357, 1367, 632, 633, 649, 500,
	494, 450, 492, 493, 497, 498, 501, 818, 0, 0,
	1339, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 343, 824, 4909,
	392, 429, 644, 0, 0, 489, 0, 542, 546, 0,
	635, 0, 0, 0, 0, 400, 0, 829, 0, 835,
	0, 841, 0, 611, 0, 831, 832, 837, 331, 719,
	634, 705, 0, 0, 0, 496, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 0, 0, 833, 830,
	834, 840, 828, 838, 825, 836, 0, 533, 467, 684,
	560, 338, 384, 371, 413, 455, 567, 0, 0, 445,
	615, 380, 469, 0, 359, 502, 1336, 591, 466, 0,
	574, 594, 0, 486, 365, 525, 581, 582, 822, 827,
	0, 843, 0, 369, 370, 491, 351, 499, 696, 662,
	554, 512, 510, 0, 477, 534, 691, 0, 0, 399,
	0, 394, 490, 630, 357, 609, 528, 495, 449, 557,
	586, 396, 381, 382, 425, 527, 415, 367, 620, 1364,
	1366, 1362, 1358, 1359, 1324, 1325, 1365, 1361, 416, 3421,
	0, 628, 637, 671, 651, 679, 636, 676, 646, 391,
	675, 640, 639, 685, 666, 667, 621, 681, 652, 650,
	643, 642, 638, 0, 316, 317, 318, 319, 320, 321,
	322, 323, 324, 325, 327, 0, 328, 329, 330, 332,
	333, 334, 821, 335, 336, 337, 340, 341, 342, 344,
	704, 345, 346, 347, 348, 349, 350, 1348, 1326, 352,
	353, 354, 355, 356, 358, 360, 361, 362, 363, 364,
	366, 368, 1337, 1327, 1332, 1338, 1328, 1329, 1333, 372,
	373, 374, 375, 376, 377, 0, 378, 379, 383, 385,
	386, 387, 388, 389, 390, 393, 0, 395, 397, 0,
	398, 401, 0, 402, 403, 404, 405, 406, 407, 408,
	409, 1340, 410, 0, 411, 412, 414, 0, 417, 418,
	419, 420, 421, 0, 422, 1349, 648, 423, 424, 426,
	427, 428, 430, 431, 432, 433, 434, 435, 436, 437,
	438, 439, 440, 441, 0, 442, 443, 444, 446, 0,
	447, 448, 451, 452, 453, 454, 0, 456, 1350, 0,
	457, 458, 459, 1330, 1331, 460, 461, 462, 463, 464,
	465, 468, 1363, 470, 471, 472, 473, 474, 475, 476,
	706, 478, 479, 480, 481, 482, 483, 484, 668, 1341,
	485, 487, 488, 1347, 672, 1342, 839, 503, 504, 505,
	506, 507, 508, 509, 511, 0, 513, 514, 515, 1343,
	516, 517, 518, 519, 0, 520, 521, 522, 523, 524,
	526, 529, 530, 531, 532, 0, 535, 536, 537, 538,
	539, 540, 541, 543, 544, 545, 547, 548, 549, 707,
	550, 551, 552, 553, 677, 555, 556, 708, 558, 559,
	561, 562, 563, 564, 565, 566, 717, 1334, 568, 678,
	569, 570, 571, 572, 573, 0, 575, 576, 577, 578,
	579, 580, 583, 584, 585, 587, 588, 1344, 589, 590,
	1335, 592, 593, 842, 595, 596, 597, 598, 599, 0,
	718, 600, 1345, 601, 1346, 602, 603, 604, 605, 606,
	607, 608, 610, 0, 0, 612, 613, 614, 616, 617,
	618, 619, 622, 623, 624, 625, 626, 0, 627, 629,
	631, 709, 686, 1351, 1352, 1355, 1353, 1354, 1356, 1357,
	1367, 632, 633, 649, 500, 494, 450, 492, 493, 497,
	498, 501, 818, 0, 0, 1339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 343, 824, 5917, 392, 429, 644, 0, 0,
	489, 0, 542, 546, 0, 635, 0, 0, 0, 0,
	400, 0, 829, 0, 835, 0, 841, 0, 611, 0,
	831, 832, 837, 331, 719, 634, 705, 0, 0, 0,
	496, 0, 0, 0, 0, 0, 0, 0, 339, 0,
	0, 0, 0, 833, 830, 834, 840, 828, 838, 825,
	836, 0, 533, 467, 684, 560, 338, 384, 371, 413,
	455, 567, 0, 0, 445, 615, 380, 469, 0, 359,
	502, 1336, 591, 466, 0, 574, 594, 0, 486, 365,
	525, 581, 582, 822, 827, 0, 843, 0, 369, 370,
	491, 351, 499, 696, 662, 554, 512, 510, 0, 477,
	534, 691, 0, 0, 399, 0, 394, 490, 630, 357,
	609, 528, 495, 449, 557, 586, 396, 381, 382, 425,
	527, 415, 367, 620, 1364, 1366, 1362, 1358, 1359, 1324,
	1325, 1365, 1361, 416, 3421, 0, 628, 637, 671, 651,
	679, 636, 676, 646, 391, 675, 640, 639, 685, 666,
	667, 621, 681, 652, 650, 643, 642, 638, 0, 316,
	317, 318, 319, 320, 321, 322, 323, 324, 325, 327,
	0, 328, 329, 330, 332, 333, 334, 821, 335, 336,
	337, 340, 341, 342, 344, 704, 345, 346, 347, 348,
	349, 350, 1348, 1326, 352, 353, 354, 355, 356, 358,
	360, 361, 362, 363, 364, 366, 368, 1337, 1327, 1332,
	1338, 1328, 1329, 1333, 372, 373, 374, 375, 376, 377,
	0, 378, 379, 383, 385, 386, 387, 388, 389, 390,
	393, 0, 395, 397, 0, 398, 401, 0, 402, 403,
	404, 405, 406, 407, 408, 409, 1340, 410, 0, 411,
	412, 414, 0, 417, 418, 419, 420, 421, 0, 422,
	1349, 648, 423, 424, 426, 427, 428, 430, 431, 432,
	433, 434, 435, 436, 437, 438, 439, 440, 441, 0,
	442, 443, 444, 446, 0, 447, 448, 451, 452, 453,
	454, 0, 456, 1350, 0, 457, 458, 459, 1330, 1331,
	460, 461, 462, 463, 464, 465, 468, 1363, 470, 471,
	472, 473, 474, 475, 476, 706, 478, 479, 480, 481,
	482, 483, 484, 668, 1341, 485, 487, 488, 1347, 672,
	1342, 839, 503, 504, 505, 506, 507, 508, 509, 511,
	0, 513, 514, 515, 1343, 516, 517, 518, 519, 0,
	520, 521, 522, 523, 524, 526, 529, 530, 531, 532,
	0, 535, 536, 537, 538, 539, 540, 541, 543, 544,
	545, 547, 548, 549, 707, 550, 551, 552, 553, 677,
	555, 556, 708, 558, 559, 561, 562, 563, 564, 565,
	566, 717, 1334, 568, 678, 569, 570, 571, 572, 573,
	0, 575, 576, 577, 578, 579, 580, 583, 584, 585,
	587, 588, 1344, 589, 590, 1335, 592, 593, 842, 595,
	596, 597, 598, 599, 0, 718, 600, 1345, 601, 1346,
	602, 603, 604, 605, 606, 607, 608, 610, 0, 0,
	612, 613, 614, 616, 617, 618, 619, 622, 623, 624,
	625, 626, 0, 627, 629, 631, 709, 686, 1351, 1352,
	1355, 1353, 1354, 1356, 1357, 1367, 632, 633, 649, 500,
	494, 450, 492, 493, 497, 498, 501, 818, 0, 0,
	1339, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 343, 824, 3551,
	392, 429, 644, 0, 0, 489, 0, 542, 546, 0,
	635, 0, 0, 0, 0, 400, 0, 829, 0, 835,
	0, 841, 0, 611, 0, 831, 832, 837, 331, 719,
	634, 705, 0, 0, 0, 496, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 0, 0, 833, 830,
	834, 840, 828, 838, 825, 836, 0, 533, 467, 684,
	560, 338, 384, 371, 413, 455, 567, 0, 0, 445,
	615, 380, 469, 0, 359, 502, 1336, 591, 466, 0,
	574, 594, 0, 486, 365, 525, 581, 582, 822, 827,
	0, 843, 0, 369, 370, 491, 351, 499, 3415, 3416,
	3414, 512, 510, 0, 477, 534, 691, 0, 0, 399,
	0, 394, 490, 630, 357, 609, 528, 495, 449, 557,
	586, 396, 381, 382, 425, 527, 415, 367, 620, 1364,
	1366, 1362, 1358, 1359, 1324, 1325, 1365, 1361, 416, 3421,
	0, 628, 637, 671, 651, 679, 636, 676, 646, 391,
	675, 640, 639, 685, 666, 667, 621, 681, 652, 650,
	643, 642, 638, 0, 316, 317, 318, 319, 320, 321,
	322, 323, 324, 325, 327, 0, 328, 329, 330, 332,
	333, 334, 821, 335, 336, 337, 340, 341, 342, 344,
	704, 345, 346, 347, 348, 349, 350, 1348, 1326, 352,
	353, 354, 355, 356, 358, 360, 361, 362, 363, 364,
	366, 368, 1337, 1327, 1332, 1338, 1328, 1329, 1333, 372,
	373, 374, 375, 376, 377, 0, 378, 379, 383, 385,
	386, 387, 388, 389, 390, 393, 0, 395, 397, 0,
	398, 401, 0, 402, 403, 404, 405, 406, 407, 408,
	409, 1340, 410, 0, 411, 412, 414, 0, 417, 418,
	419, 420, 421, 0, 422, 1349, 648, 423, 424, 426,
	427, 428, 430, 431, 432, 433, 434, 435, 436, 437,
	438, 439, 440, 441, 0, 442, 443, 444, 446, 0,
	447, 448, 451, 452, 453, 454, 0, 456, 1350, 0,
	457, 458, 459, 1330, 1331, 460, 461, 462, 463, 464,
	465, 468, 1363, 470, 471, 472, 473, 474, 475, 476,
	706, 478, 479, 480, 481, 482, 483, 484, 668, 1341,
	485, 487, 488, 1347, 672, 1342, 839, 503, 504, 505,
	506, 507, 508, 509, 511, 0, 513, 514, 515, 1343,
	516, 517, 518, 519, 0, 520, 521, 522, 523, 524,
	526, 529, 530, 531, 532, 0, 535, 536, 537, 538,
	539, 540, 541, 543, 544, 545, 547, 548, 549, 707,
	550, 551, 552, 553, 677, 555, 556, 708, 558, 559,
	561, 562, 563, 564, 565, 566, 717, 1334, 568, 678,
	569, 570, 571, 572, 573, 0, 575, 576, 577, 578,
	579, 580, 583, 584, 585, 587, 588, 1344, 589, 590,
	1335, 592, 593, 842, 595, 596, 597, 598, 599, 0,
	718, 600, 1345, 601, 1346, 602, 603, 604, 605, 606,
	607, 608, 610, 0, 0, 612, 613, 614, 616, 617,
	618, 619, 622, 623, 624, 625, 626, 0, 627, 629,
	631, 709, 686, 1351, 1352, 1355, 1353, 1354, 1356, 1357,
	1367, 632, 633, 649, 500, 494, 450, 492, 493, 497,
	498, 501, 0, 0, 0, 1339, 0, 950, 0, 1700,
	804, 0, 0, 0, 0, 790, 0, 0, 0, 0,
	0, 0, 0, 0, 171, 326, 0, 343, 824, 0,
	392, 429, 644, 0, 0, 489, 0, 542, 546, 0,
	635, 0, 0, 1798, 0, 400, 1794, 829, 0, 835,
	0, 841, 1793, 611, 0, 831, 832, 837, 331, 719,
	634, 705, 0, 0, 0, 496, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 0, 1795, 833, 830,
	834, 840, 828, 838, 825, 836, 0, 533, 467, 684,
	560, 338, 384, 371, 413, 455, 567, 0, 0, 445,
	615, 380, 469, 0, 359, 502, 0, 591, 466, 0,
	574, 594, 0, 486, 365, 525, 581, 582, 822, 827,
	0, 843, 0, 369, 370, 491, 351, 499, 696, 662,
	554, 512, 510, 0, 477, 534, 691, 0, 0, 399,
	0, 394, 490, 630, 357, 609, 528, 495, 449, 557,
	586, 396, 381, 382, 425, 527, 415, 367, 620, 659,
	663, 661, 657, 654, 658, 655, 656, 660, 416, 653,
	0, 628, 637, 671, 651, 679, 636, 676, 646, 391,
	675, 640, 639, 685, 666, 667, 621, 681, 652, 650,
	643, 642, 638, 0, 316, 317, 318, 319, 320, 321,
	322, 323, 324, 325, 327, 0, 328, 329, 330, 332,
	333, 334, 821, 335, 336, 337, 340, 341, 342, 344,
	704, 345, 346, 347, 348, 349, 350, 641, 823, 352,
	353, 354, 355, 356, 358, 360, 361, 362, 363, 364,
	366, 368, 0, 0, 0, 826, 0, 0, 0, 372,
	373, 374, 375, 376, 377, 0, 378, 379, 383, 385,
	386, 387, 388, 389, 390, 393, 0, 395, 397, 0,
	398, 401, 0, 402, 403, 404, 405, 406, 407, 408,
	409, 645, 410, 0, 411, 412, 414, 0, 417, 418,
	419, 420, 421, 0, 422, 647, 648, 423, 424, 426,
	427, 428, 430, 431, 432, 433, 434, 435, 436, 437,
	438, 439, 440, 441, 0, 442, 443, 444, 446, 0,
	447, 448, 451, 452, 453, 454, 0, 456, 664, 0,
	457, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	465, 468, 665, 470, 471, 472, 473, 474, 475, 476,
	706, 478, 479, 480, 481, 482, 483, 484, 668, 669,
	485, 487, 488, 670, 672, 673, 839, 503, 504, 505,
	506, 507, 508, 509, 511, 0, 513, 514, 515, 674,
	516, 517, 518, 519, 0, 520, 521, 522, 523, 524,
	526, 529, 530, 531, 532, 0, 535, 536, 537, 538,
	539, 540, 541, 543, 544, 545, 547, 548, 549, 707,
	550, 551, 552, 553, 677, 555, 556, 708, 558, 559,
	561, 562, 563, 564, 565, 566, 717, 0, 568, 678,
	569, 570, 571, 572, 573, 0, 575, 576, 577, 578,
	579, 580, 583, 584, 585, 587, 588, 680, 589, 590,
	0, 592, 593, 842, 595, 596, 597, 598, 599, 0,
	718, 600, 682, 601, 683, 602, 603, 604, 605, 606,
	607, 608, 610, 0, 0, 612, 613, 614, 616, 617,
	618, 619, 622, 623, 624, 625, 626, 0, 627, 629,
	631, 709, 686, 687, 688, 689, 690, 692, 693, 694,
	695, 632, 633, 649, 500, 494, 450, 492, 493, 497,
	498, 501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 950, 0, 1700, 804, 0, 0, 0, 0, 790,
	0, 0, 0, 0, 0, 0, 0, 1701, 1702, 326,
	0, 343, 824, 0, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 1789, 0, 400,
	1794, 829, 0, 835, 0, 841, 1793, 611, 0, 831,
	832, 837, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 1795, 833, 830, 834, 840, 828, 838, 825, 836,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 822, 827, 0, 843, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 821, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 823, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 826,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	839, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 842, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 950, 0, 1700, 804, 0,
	0, 0, 0, 790, 0, 0, 0, 0, 0, 0,
	0, 1701, 1702, 326, 0, 343, 824, 0, 392, 429,
	644, 0, 0, 489, 0, 542, 546, 0, 635, 0,
	0, 0, 0, 400, 1794, 829, 0, 835, 0, 841,
	1793, 611, 0, 831, 832, 837, 331, 719, 634, 705,
	0, 0, 0, 496, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 0, 1795, 833, 830, 834, 840,
	828, 838, 825, 836, 0, 533, 467, 684, 560, 338,
	384, 371, 413, 455, 567, 0, 0, 445, 615, 380,
	469, 0, 359, 502, 0, 591, 466, 0, 574, 594,
	0, 486, 365, 525, 581, 582, 822, 827, 0, 843,
	0, 369, 370, 491, 351, 499, 696, 662, 554, 512,
	510, 0, 477, 534, 691, 0, 0, 399, 0, 394,
	490, 630, 357, 609, 528, 495, 449, 557, 586, 396,
	381, 382, 425, 527, 415, 367, 620, 659, 663, 661,
	657, 654, 658, 655, 656, 660, 416, 653, 0, 628,
	637, 671, 651, 679, 636, 676, 646, 391, 675, 640,
	639, 685, 666, 667, 621, 681, 652, 650, 643, 642,
	638, 0, 316, 317, 318, 319, 320, 321, 322, 323,
	324, 325, 327, 0, 328, 329, 330, 332, 333, 334,
	821, 335, 336, 337, 340, 341, 342, 344, 704, 345,
	346, 347, 348, 349, 350, 641, 823, 352, 353, 354,
	355, 356, 358, 360, 361, 362, 363, 364, 366, 368,
	0, 0, 0, 826, 0, 0, 0, 372, 373, 374,
	375, 376, 377, 0, 378, 379, 383, 385, 386, 387,
	388, 389, 390, 393, 0, 395, 397, 0, 398, 401,
	0, 402, 403, 404, 405, 406, 407, 408, 409, 645,
	410, 0, 411, 412, 414, 0, 417, 418, 419, 420,
	421, 0, 422, 647, 648, 423, 424, 426, 427, 428,
	430, 431, 432, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 0, 442, 443, 444, 446, 0, 447, 448,
	451, 452, 453, 454, 0, 456, 664, 0, 457, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 465, 468,
	665, 470, 471, 472, 473, 474, 475, 476, 706, 478,
	479, 480, 481, 482, 483, 484, 668, 669, 485, 487,
	488, 670, 672, 673, 839, 503, 504, 505, 506, 507,
	508, 509, 511, 0, 513, 514, 515, 674, 516, 517,
	518, 519, 0, 520, 521, 522, 523, 524, 526, 529,
	530, 531, 532, 0, 535, 536, 537, 538, 539, 540,
	541, 543, 544, 545, 547, 548, 549, 707, 550, 551,
	552, 553, 677, 555, 556, 708, 558, 559, 561, 562,
	563, 564, 565, 566, 717, 0, 568, 678, 569, 570,
	571, 572, 573, 0, 575, 576, 577, 578, 579, 580,
	583, 584, 585, 587, 588, 680, 589, 590, 0, 592,
	593, 842, 595, 596, 597, 598, 599, 0, 718, 600,
	682, 601, 683, 602, 603, 604, 605, 606, 607, 608,
	610, 0, 0, 612, 613, 614, 616, 617, 618, 619,
	622, 623, 624, 625, 626, 0, 627, 629, 631, 709,
	686, 687, 688, 689, 690, 692, 693, 694, 695, 632,
	633, 649, 500, 494, 450, 492, 493, 497, 498, 501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 950,
	0, 0, 804, 0, 0, 0, 0, 790, 0, 0,
	0, 0, 0, 0, 0, 1701, 1702, 326, 0, 343,
	824, 0, 392, 429, 644, 0, 0, 489, 0, 542,
	546, 0, 635, 0, 0, 3698, 0, 400, 1794, 829,
	0, 835, 0, 841, 1793, 611, 0, 831, 832, 837,
	331, 719, 634, 705, 0, 0, 0, 496, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 0, 1795,
	833, 830, 834, 840, 828, 838, 825, 836, 0, 533,
	467, 684, 560, 338, 384, 371, 413, 455, 567, 0,
	0, 445, 615, 380, 469, 0, 359, 502, 0, 591,
	466, 0, 574, 594, 0, 486, 365, 525, 581, 582,
	822, 827, 0, 843, 0, 369, 370, 491, 351, 499,
	696, 662, 554, 512, 510, 0, 477, 534, 691, 0,
	0, 399, 0, 394, 490, 630, 357, 609, 528, 495,
	449, 557, 586, 396, 381, 382, 425, 527, 415, 367,
	620, 659, 663, 661, 657, 654, 658, 655, 656, 660,
	416, 653, 0, 628, 637, 671, 651, 679, 636, 676,
	646, 391, 675, 640, 639, 685, 666, 667, 621, 681,
	652, 650, 643, 642, 638, 0, 316, 317, 318, 319,
	320, 321, 322, 323, 324, 325, 327, 0, 328, 329,
	330, 332, 333, 334, 821, 335, 336, 337, 340, 341,
	342, 344, 704, 345, 346, 347, 348, 349, 350, 641,
	823, 352, 353, 354, 355, 356, 358, 360, 361, 362,
	363, 364, 366, 368, 0, 0, 0, 826, 0, 0,
	0, 372, 373, 374, 375, 376, 377, 0, 378, 379,
	383, 385, 386, 387, 388, 389, 390, 393, 0, 395,
	397, 0, 398, 401, 0, 402, 403, 404, 405, 406,
	407, 408, 409, 645, 410, 0, 411, 412, 414, 0,
	417, 418, 419, 420, 421, 0, 422, 647, 648, 423,
	424, 426, 427, 428, 430, 431, 432, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 0, 442, 443, 444,
	446, 0, 447, 448, 451, 452, 453, 454, 0, 456,
	664, 0, 457, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 465, 468, 665, 470, 471, 472, 473, 474,
	475, 476, 706, 478, 479, 480, 481, 482, 483, 484,
	668, 669, 485, 487, 488, 670, 672, 673, 839, 503,
	504, 505, 506, 507, 508, 509, 511, 0, 513, 514,
	515, 674, 516, 517, 518, 519, 0, 520, 521, 522,
	523, 524, 526, 529, 530, 531, 532, 0, 535, 536,
	537, 538, 539, 540, 541, 543, 544, 545, 547, 548,
	549, 707, 550, 551, 552, 553, 677, 555, 556, 708,
	558, 559, 561, 562, 563, 564, 565, 566, 717, 0,
	568, 678, 569, 570, 571, 572, 573, 0, 575, 576,
	577, 578, 579, 580, 583, 584, 585, 587, 588, 680,
	589, 590, 0, 592, 593, 842, 595, 596, 597, 598,
	599, 0, 718, 600, 682, 601, 683, 602, 603, 604,
	605, 606, 607, 608, 610, 0, 0, 612, 613, 614,
	616, 617, 618, 619, 622, 623, 624, 625, 626, 0,
	627, 629, 631, 709, 686, 687, 688, 689, 690, 692,
	693, 694, 695, 632, 633, 649, 500, 494, 450, 492,
	493, 497, 498, 501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 950, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 788,
	789, 326, 0, 343, 824, 0, 392, 429, 644, 0,
	0, 489, 0, 542, 546, 177, 635, 0, 0, 0,
	0, 400, 0, 829, 0, 835, 0, 841, 0, 611,
	0, 831, 832, 837, 331, 719, 634, 705, 0, 0,
	0, 496, 174, 0, 0, 0, 175, 0, 0, 339,
	0, 0, 0, 0, 833, 830, 834, 840, 828, 838,
	825, 836, 0, 533, 467, 1166, 560, 338, 384, 371,
	413, 455, 567, 0, 0, 445, 615, 380, 469, 0,
	359, 502, 0, 591, 466, 0, 574, 594, 0, 486,
	365, 525, 581, 582, 822, 827, 0, 843, 172, 369,
	370, 491, 351, 499, 696, 662, 554, 512, 510, 0,
	477, 534, 691, 0, 0, 399, 0, 394, 490, 630,
	357, 609, 528, 495, 449, 557, 586, 396, 381, 382,
	425, 527, 415, 367, 620, 659, 663, 661, 657, 654,
	658, 655, 656, 660, 416, 653, 0, 628, 637, 671,
	651, 679, 636, 676, 646, 391, 675, 640, 639, 685,
	666, 667, 621, 681, 652, 650, 643, 642, 638, 0,
	316, 317, 318, 319, 320, 321, 322, 323, 324, 325,
	327, 173, 328, 329, 330, 332, 333, 334, 821, 335,
	336, 337, 340, 341, 342, 344, 704, 345, 346, 347,
	348, 349, 350, 641, 823, 352, 353, 354, 355, 356,
	358, 360, 361, 362, 363, 364, 366, 368, 0, 0,
	0, 826, 0, 0, 0, 372, 373, 374, 375, 376,
	377, 0, 378, 379, 383, 385, 386, 387, 388, 389,
	390, 393, 0, 395, 397, 0, 398, 401, 0, 402,
	403, 404, 405, 406, 407, 408, 409, 645, 410, 0,
	411, 412, 414, 0, 417, 418, 419, 420, 421, 0,
	422, 647, 648, 423, 424, 426, 427, 428, 430, 431,
	432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	0, 442, 443, 444, 446, 0, 447, 448, 451, 452,
	453, 454, 0, 456, 664, 0, 457, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 465, 468, 665, 470,
	471, 472, 473, 474, 475, 476, 706, 478, 479, 480,
	481, 482, 483, 484, 668, 669, 485, 487, 488, 670,
	672, 673, 839, 503, 504, 505, 506, 507, 508, 509,
	511, 0, 513, 514, 515, 674, 516, 517, 518, 519,
	0, 520, 521, 522, 523, 524, 526, 529, 530, 531,
	532, 0, 535, 536, 537, 538, 539, 540, 541, 543,
	544, 545, 547, 548, 549, 707, 550, 551, 552, 553,
	677, 555, 556, 708, 558, 559, 561, 562, 563, 564,
	565, 566, 717, 0, 568, 678, 569, 570, 571, 572,
	573, 0, 575, 576, 577, 578, 579, 580, 583, 584,
	585, 587, 588, 680, 589, 590, 0, 592, 593, 842,
	595, 596, 597, 598, 599, 0, 718, 600, 682, 601,
	683, 602, 603, 604, 605, 606, 607, 608, 610, 0,
	0, 612, 613, 614, 616, 617, 618, 619, 622, 623,
	624, 625, 626, 0, 627, 629, 631, 709, 686, 687,
	688, 689, 690, 692, 693, 694, 695, 632, 633, 649,
	500, 494, 450, 492, 493, 497, 498, 501, 818, 0,
	0, 0, 0, 0, 1169, 0, 0, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 326, 0, 343, 824,
	171, 392, 429, 644, 0, 0, 489, 0, 542, 546,
	0, 635, 0, 0, 0, 0, 400, 0, 829, 0,
	835, 0, 841, 0, 611, 0, 831, 832, 837, 331,
	719, 634, 705, 0, 0, 0, 496, 0, 0, 0,
	0, 0, 0, 0, 339, 0, 0, 0, 0, 833,
	830, 834, 840, 828, 838, 825, 836, 0, 533, 467,
	684, 560, 338, 384, 371, 413, 455, 567, 0, 0,
	445, 615, 380, 469, 0, 359, 502, 0, 591, 466,
	0, 574, 594, 0, 486, 365, 525, 581, 582, 822,
	827, 0, 843, 0, 369, 370, 491, 351, 499, 696,
	662, 554, 512, 510, 0, 477, 534, 691, 0, 0,
	399, 0, 394, 490, 630, 357, 609, 528, 495, 449,
	557, 586, 396, 381, 382, 425, 527, 415, 367, 620,
	659, 663, 661, 657, 654, 658, 655, 656, 660, 416,
	653, 0, 628, 637, 671, 651, 679, 636, 676, 646,
	391, 675, 640, 639, 685, 666, 667, 621, 681, 652,
	650, 643, 642, 638, 0, 316, 317, 318, 319, 320,
	321, 322, 323, 324, 325, 327, 0, 328, 329, 330,
	332, 333, 334, 821, 335, 336, 337, 340, 341, 342,
	344, 704, 345, 346, 347, 348, 349, 350, 641, 823,
	352, 353, 354, 355, 356, 358, 360, 361, 362, 363,
	364, 366, 368, 0, 0, 0, 826, 0, 0, 0,
	372, 373, 374, 375, 376, 377, 0, 378, 379, 383,
	385, 386, 387, 388, 389, 390, 393, 0, 395, 397,
	0, 398, 401, 0, 402, 403, 404, 405, 406, 407,
	408, 409, 645, 410, 0, 411, 412, 414, 0, 417,
	418, 419, 420, 421, 0, 422, 647, 648, 423, 424,
	426, 427, 428, 430, 431, 432, 433, 434, 435, 436,
	437, 438, 439, 440, 441, 0, 442, 443, 444, 446,
	0, 447, 448, 451, 452, 453, 454, 0, 456, 664,
	0, 457, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 465, 468, 665, 470, 471, 472, 473, 474, 475,
	476, 706, 478, 479, 480, 481, 482, 483, 484, 668,
	669, 485, 487, 488, 670, 672, 673, 839, 503, 504,
	505, 506, 507, 508, 509, 511, 0, 513, 514, 515,
	674, 516, 517, 518, 519, 0, 520, 521, 522, 523,
	524, 526, 529, 530, 531, 532, 0, 535, 536, 537,
	538, 539, 540, 541, 543, 544, 545, 547, 548, 549,
	707, 550, 551, 552, 553, 677, 555, 556, 708, 558,
	559, 561, 562, 563, 564, 565, 566, 717, 0, 568,
	678, 569, 570, 571, 572, 573, 0, 575, 576, 577,
	578, 579, 580, 583, 584, 585, 587, 588, 680, 589,
	590, 0, 592, 593, 842, 595, 596, 597, 598, 599,
	0, 718, 600, 682, 601, 683, 602, 603, 604, 605,
	606, 607, 608, 610, 0, 0, 612, 613, 614, 616,
	617, 618, 619, 622, 623, 624, 625, 626, 0, 627,
	629, 631, 709, 686, 687, 688, 689, 690, 692, 693,
	694, 695, 632, 633, 649, 500, 494, 450, 492, 493,
	497, 498, 501, 313, 0, 0, 0, 0, 0, 0,
	919, 0, 0, 0, 0, 0, 0, 930, 931, 932,
	0, 326, 0, 343, 0, 5622, 392, 429, 644, 0,
	0, 489, 0, 542, 546, 0, 635, 0, 0, 0,
	0, 400, 0, 0, 0, 0, 0, 0, 0, 611,
	0, 0, 0, 0, 331, 719, 634, 705, 0, 0,
	0, 496, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 533, 467, 684, 560, 338, 384, 371,
	413, 455, 567, 0, 0, 445, 615, 380, 469, 0,
	359, 502, 0, 591, 466, 0, 574, 594, 0, 486,
	365, 525, 581, 582, 0, 0, 0, 0, 0, 369,
	370, 491, 351, 499, 696, 662, 554, 512, 510, 0,
	477, 534, 691, 0, 0, 399, 0, 394, 490, 630,
	357, 609, 528, 495, 449, 557, 586, 396, 381, 382,
	425, 527, 415, 367, 620, 659, 663, 661, 657, 654,
	658, 655, 656, 660, 416, 653, 0, 628, 637, 671,
	651, 679, 636, 676, 646, 391, 675, 640, 639, 685,
	666, 667, 621, 681, 652, 650, 643, 642, 638, 0,
	316, 317, 318, 319, 320, 321, 322, 323, 324, 325,
	327, 0, 328, 329, 330, 332, 333, 334, 0, 335,
	336, 337, 340, 341, 342, 344, 704, 345, 346, 347,
	348, 349, 350, 641, 0, 352, 353, 354, 355, 356,
	358, 360, 361, 362, 363, 364, 366, 368, 0, 0,
	0, 0, 0, 0, 0, 372, 373, 374, 375, 376,
	377, 0, 378, 379, 383, 385, 386, 387, 388, 389,
	390, 393, 0, 395, 397, 0, 398, 401, 0, 402,
	403, 404, 405, 406, 407, 408, 409, 645, 410, 0,
	411, 412, 414, 0, 417, 418, 419, 420, 421, 0,
	422, 647, 648, 423, 424, 426, 427, 428, 430, 431,
	432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	0, 442, 443, 444, 446, 0, 447, 448, 451, 452,
	453, 454, 0, 456, 664, 0, 457, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 465, 468, 665, 470,
	471, 472, 473, 474, 475, 476, 706, 478, 479, 480,
	481, 482, 483, 484, 668, 669, 485, 487, 488, 670,
	672, 673, 0, 503, 504, 505, 506, 507, 508, 509,
	511, 0, 513, 514, 515, 674, 516, 517, 518, 519,
	0, 520, 521, 522, 523, 524, 526, 529, 530, 531,
	532, 0, 535, 536, 537, 538, 539, 540, 541, 543,
	544, 545, 547, 548, 549, 707, 550, 551, 552, 553,
	677, 555, 556, 708, 558, 559, 561, 562, 563, 564,
	565, 566, 717, 0, 568, 678, 569, 570, 571, 572,
	573, 0, 575, 576, 577, 578, 579, 580, 583, 584,
	585, 587, 588, 680, 589, 590, 0, 592, 593, 0,
	595, 596, 597, 598, 599, 0, 718, 600, 682, 601,
	683, 602, 603, 604, 605, 606, 607, 608, 610, 0,
	0, 612, 613, 614, 616, 617, 618, 619, 622, 623,
	624, 625, 626, 0, 627, 629, 631, 709, 686, 687,
	688, 689, 690, 692, 693, 694, 695, 632, 633, 649,
	500, 494, 450, 492, 493, 497, 498, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 927, 928, 929, 0, 0, 0,
	0, 0, 313, 921, 922, 923, 924, 925, 926, 919,
	0, 0, 0, 0, 0, 0, 930, 931, 932, 0,
	326, 0, 343, 0, 0, 392, 429, 644, 0, 0,
	489, 0, 542, 546, 0, 635, 0, 0, 0, 0,
	400, 0, 0, 0, 0, 0, 0, 0, 611, 0,
	0, 0, 0, 331, 719, 634, 705, 0, 0, 0,
	5597, 0, 0, 0, 0, 0, 0, 0, 339, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 533, 467, 684, 560, 338, 384, 371, 413,
	455, 567, 0, 0, 445, 615, 380, 469, 0, 359,
	502, 0, 591, 466, 0, 574, 594, 0, 486, 365,
	525, 581, 582, 0, 0, 0, 0, 0, 369, 370,
	491, 351, 499, 696, 662, 554, 512, 510, 0, 477,
	534, 691, 0, 0, 399, 0, 394, 490, 630, 357,
	609, 528, 495, 449, 557, 586, 396, 381, 382, 425,
	527, 415, 367, 620, 659, 663, 661, 657, 654, 658,
	655, 656, 660, 416, 653, 0, 628, 637, 671, 651,
	679, 636, 676, 646, 391, 675, 640, 639, 685, 666,
	667, 621, 681, 652, 650, 643, 642, 638, 0, 316,
	317, 318, 319, 320, 321, 322, 323, 324, 325, 327,
	0, 328, 329, 330, 332, 333, 334, 0, 335, 336,
	337, 340, 341, 342, 344, 704, 345, 346, 347, 348,
	349, 350, 641, 0, 352, 353, 354, 355, 356, 358,
	360, 361, 362, 363, 364, 366, 368, 0, 0, 0,
	0, 0, 0, 0, 372, 373, 374, 375, 376, 377,
	0, 378, 379, 383, 385, 386, 387, 388, 389, 390,
	393, 0, 395, 397, 0, 398, 401, 0, 402, 403,
	404, 405, 406, 407, 408, 409, 645, 410, 0, 411,
	412, 414, 0, 417, 418, 419, 420, 421, 0, 422,
	647, 648, 423, 424, 426, 427, 428, 430, 431, 432,
	433, 434, 435, 436, 437, 438, 439, 440, 441, 0,
	442, 443, 444, 446, 0, 447, 448, 451, 452, 453,
	454, 0, 456, 664, 0, 457, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 465, 468, 665, 470, 471,
	472, 473, 474, 475, 476, 706, 478, 479, 480, 481,
	482, 483, 484, 668, 669, 485, 487, 488, 670, 672,
	673, 0, 503, 504, 505, 506, 507, 508, 509, 511,
	0, 513, 514, 515, 674, 516, 517, 518, 519, 0,
	520, 521, 522, 523, 524, 526, 529, 530, 531, 532,
	0, 535, 536, 537, 538, 539, 540, 541, 543, 544,
	545, 547, 548, 549, 707, 550, 551, 552, 553, 677,
	555, 556, 708, 558, 559, 561, 562, 563, 564, 565,
	566, 717, 0, 568, 678, 569, 570, 571, 572, 573,
	0, 575, 576, 577, 578, 579, 580, 583, 584, 585,
	587, 588, 680, 589, 590, 0, 592, 593, 0, 595,
	596, 597, 598, 599, 0, 718, 600, 682, 601, 683,
	602, 603, 604, 605, 606, 607, 608, 610, 0, 0,
	612, 613, 614, 616, 617, 618, 619, 622, 623, 624,
	625, 626, 0, 627, 629, 631, 709, 686, 687, 688,
	689, 690, 692, 693, 694, 695, 632, 633, 649, 500,
	494, 450, 492, 493, 497, 498, 501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 927, 928, 929, 0, 0, 0, 0,
	0, 313, 921, 922, 923, 924, 925, 926, 919, 0,
	0, 0, 0, 0, 0, 930, 931, 932, 0, 326,
	0, 343, 0, 0, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 3818, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 3819, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 927, 928, 929, 0, 0, 0, 0, 0,
	313, 921, 922, 923, 924, 925, 926, 919, 0, 0,
	0, 0, 0, 0, 930, 931, 932, 0, 326, 0,
	343, 0, 0, 392, 429, 644, 0, 0, 489, 0,
	542, 546, 0, 635, 0, 0, 0, 0, 400, 0,
	0, 0, 0, 0, 0, 0, 611, 0, 0, 0,
	0, 331, 719, 634, 705, 0, 0, 0, 496, 0,
	0, 0, 0, 0, 0, 0, 339, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	533, 467, 684, 560, 338, 384, 371, 413, 455, 567,
	0, 0, 445, 615, 380, 469, 0, 359, 502, 0,
	591, 466, 0, 574, 594, 0, 486, 365, 525, 581,
	582, 0, 0, 0, 0, 0, 369, 370, 491, 351,
	499, 696, 662, 554, 512, 510, 0, 477, 534, 691,
	0, 0, 399, 0, 394, 490, 630, 357, 609, 528,
	495, 449, 557, 586, 396, 381, 382, 425, 527, 415,
	367, 620, 659, 663, 661, 657, 654, 658, 655, 656,
	660, 416, 653, 0, 628, 637, 671, 651, 679, 636,
	676, 646, 391, 675, 640, 639, 685, 666, 667, 621,
	681, 652, 650, 643, 642, 638, 0, 316, 317, 318,
	319, 320, 321, 322, 323, 324, 325, 327, 0, 328,
	329, 330, 332, 333, 334, 0, 335, 336, 337, 340,
	341, 342, 344, 704, 345, 346, 347, 1901, 349, 350,
	641, 0, 352, 353, 354, 355, 356, 358, 360, 361,
	362, 363, 364, 366, 368, 0, 0, 0, 0, 0,
	0, 0, 372, 373, 374, 375, 376, 377, 0, 378,
	379, 383, 385, 386, 387, 388, 389, 390, 393, 0,
	395, 397, 0, 398, 401, 0, 402, 403, 404, 405,
	406, 407, 408, 409, 645, 1902, 0, 411, 412, 414,
	0, 417, 418, 419, 420, 421, 0, 422, 647, 648,
	423, 424, 426, 427, 428, 430, 431, 432, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 0, 442, 443,
	444, 446, 0, 447, 448, 451, 452, 453, 454, 0,
	456, 664, 0, 457, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 465, 468, 665, 470, 471, 472, 473,
	474, 475, 476, 706, 478, 479, 480, 481, 482, 483,
	484, 668, 669, 485, 487, 488, 670, 672, 673, 0,
	503, 504, 505, 506, 507, 508, 509, 511, 0, 513,
	514, 515, 674, 516, 517, 518, 519, 0, 520, 521,
	522, 523, 524, 526, 529, 530, 531, 532, 0, 535,
	536, 537, 538, 539, 540, 541, 543, 544, 545, 547,
	548, 549, 707, 550, 551, 552, 553, 677, 555, 556,
	708, 558, 559, 561, 562, 563, 564, 565, 566, 717,
	0, 568, 678, 569, 570, 571, 572, 573, 0, 575,
	576, 577, 578, 579, 580, 583, 584, 585, 587, 588,
	680, 589, 590, 0, 592, 593, 0, 595, 596, 597,
	598, 599, 0, 718, 600, 682, 601, 683, 602, 603,
	604, 605, 606, 607, 608, 610, 0, 0, 612, 613,
	614, 616, 617, 618, 619, 622, 623, 624, 625, 626,
	0, 627, 629, 631, 709, 686, 687, 688, 689, 690,
	692, 693, 694, 695, 632, 633, 649, 500, 494, 450,
	492, 493, 497, 498, 501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 927, 928, 929, 0, 0, 0, 0, 0, 313,
	921, 922, 923, 924, 925, 926, 919, 0, 0, 0,
	0, 0, 0, 930, 931, 932, 0, 326, 0, 343,
	0, 0, 392, 429, 644, 0, 0, 489, 0, 542,
	546, 0, 635, 0, 0, 0, 0, 400, 0, 0,
	0, 0, 0, 0, 0, 611, 0, 0, 0, 0,
	331, 719, 634, 705, 0, 0, 0, 496, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 533,
	467, 684, 560, 338, 384, 371, 413, 455, 567, 0,
	0, 445, 615, 380, 469, 0, 359, 502, 0, 591,
	466, 0, 574, 594, 0, 486, 365, 525, 581, 582,
	0, 0, 0, 0, 0, 369, 370, 491, 351, 499,
	696, 662, 554, 512, 510, 0, 477, 534, 691, 0,
	0, 399, 0, 394, 490, 630, 357, 609, 528, 495,
	449, 557, 586, 396, 381, 382, 425, 527, 415, 367,
	620, 659, 663, 661, 657, 654, 658, 655, 656, 660,
	416, 653, 0, 628, 637, 671, 651, 679, 636, 676,
	646, 391, 675, 640, 639, 685, 666, 667, 621, 681,
	652, 650, 643, 642, 638, 0, 316, 317, 318, 319,
	320, 321, 322, 323, 324, 325, 327, 0, 328, 329,
	330, 332, 333, 334, 0, 335, 336, 337, 340, 341,
	342, 344, 704, 345, 346, 347, 1000, 349, 350, 641,
	0, 352, 353, 354, 355, 356, 358, 360, 361, 362,
	363, 364, 366, 368, 0, 0, 0, 0, 0, 0,
	0, 372, 373, 374, 375, 376, 377, 0, 378, 379,
	383, 385, 386, 387, 388, 389, 390, 393, 0, 395,
	397, 0, 398, 401, 0, 402, 403, 404, 405, 406,
	407, 408, 409, 645, 1001, 0, 411, 412, 414, 0,
	417, 418, 419, 420, 421, 0, 422, 647, 648, 423,
	424, 426, 427, 428, 430, 431, 432, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 0, 442, 443, 444,
	446, 0, 447, 448, 451, 452, 453, 454, 0, 456,
	664, 0, 457, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 465, 468, 665, 470, 471, 472, 473, 474,
	475, 476, 706, 478, 479, 480, 481, 482, 483, 484,
	668, 669, 485, 487, 488, 670, 672, 673, 0, 503,
	504, 505, 506, 507, 508, 509, 511, 0, 513, 514,
	515, 674, 516, 517, 518, 519, 0, 520, 521, 522,
	523, 524, 526, 529, 530, 531, 532, 0, 535, 536,
	537, 538, 539, 540, 541, 543, 544, 545, 547, 548,
	549, 707, 550, 551, 552, 553, 677, 555, 556, 708,
	558, 559, 561, 562, 563, 564, 565, 566, 717, 0,
	568, 678, 569, 570, 571, 572, 573, 0, 575, 576,
	577, 578, 579, 580, 583, 584, 585, 587, 588, 680,
	589, 590, 0, 592, 593, 0, 595, 596, 597, 598,
	599, 0, 718, 600, 682, 601, 683, 602, 603, 604,
	605, 606, 607, 608, 610, 0, 0, 612, 613, 614,
	616, 617, 618, 619, 622, 623, 624, 625, 626, 0,
	627, 629, 631, 709, 686, 687, 688, 689, 690, 692,
	693, 694, 695, 632, 633, 649, 500, 494, 450, 492,
	493, 497, 498, 501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	927, 928, 929, 0, 0, 0, 0, 0, 313, 921,
	922, 923, 924, 925, 926, 919, 0, 0, 0, 0,
	0, 0, 930, 931, 932, 0, 326, 0, 343, 0,
	0, 392, 429, 644, 0, 0, 489, 0, 542, 546,
	0, 635, 0, 0, 0, 0, 400, 0, 0, 0,
	0, 0, 0, 0, 611, 0, 0, 0, 0, 331,
	719, 634, 705, 0, 0, 0, 496, 0, 0, 0,
	0, 0, 0, 0, 339, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 533, 467,
	684, 560, 338, 384, 371, 413, 455, 567, 0, 0,
	445, 615, 380, 469, 0, 359, 502, 0, 591, 466,
	0, 574, 594, 0, 486, 365, 525, 581, 582, 0,
	0, 0, 0, 0, 369, 370, 491, 351, 499, 696,
	662, 554, 512, 510, 0, 477, 534, 691, 0, 0,
	399, 0, 394, 490, 630, 357, 609, 528, 495, 449,
	557, 586, 396, 381, 382, 425, 527, 415, 367, 620,
	659, 663, 661, 657, 654, 658, 655, 656, 660, 416,
	653, 0, 628, 637, 671, 651, 679, 636, 676, 646,
	391, 675, 640, 639, 685, 666, 667, 621, 681, 652,
	650, 643, 642, 638, 0, 316, 317, 318, 319, 320,
	321, 322, 323, 324, 325, 327, 0, 328, 329, 330,
	332, 333, 334, 0, 335, 336, 337, 340, 341, 342,
	344, 704, 345, 346, 347, 915, 349, 350, 641, 0,
	352, 353, 354, 355, 356, 358, 360, 361, 362, 363,
	364, 366, 368, 0, 0, 0, 0, 0, 0, 0,
	372, 373, 374, 375, 376, 377, 0, 378, 379, 383,
	385, 386, 387, 388, 389, 390, 393, 0, 395, 397,
	0, 398, 401, 0, 402, 403, 404, 405, 406, 407,
	408, 409, 645, 916, 0, 411, 412, 414, 0, 417,
	418, 419, 420, 421, 0, 422, 647, 648, 423, 424,
	426, 427, 428, 430, 431, 432, 433, 434, 435, 436,
	437, 438, 439, 440, 441, 0, 442, 443, 444, 446,
	0, 447, 448, 451, 452, 453, 454, 0, 456, 664,
	0, 457, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 465, 468, 665, 470, 471, 472, 473, 474, 475,
	476, 706, 478, 479, 480, 481, 482, 483, 484, 668,
	669, 485, 487, 488, 670, 672, 673, 0, 503, 504,
	505, 506, 507, 508, 509, 511, 0, 513, 514, 515,
	674, 516, 517, 518, 519, 0, 520, 521, 522, 523,
	524, 526, 529, 530, 531, 532, 0, 535, 536, 537,
	538, 539, 540, 541, 543, 544, 545, 547, 548, 549,
	707, 550, 551, 552, 553, 677, 555, 556, 708, 558,
	559, 561, 562, 563, 564, 565, 566, 717, 0, 568,
	678, 569, 570, 571, 572, 573, 0, 575, 576, 577,
	578, 579, 580, 583, 584, 585, 587, 588, 680, 589,
	590, 0, 592, 593, 0, 595, 596, 597, 598, 599,
	0, 718, 600, 682, 601, 683, 602, 603, 604, 605,
	606, 607, 608, 610, 0, 0, 612, 613, 614, 616,
	617, 618, 619, 622, 623, 624, 625, 626, 0, 627,
	629, 631, 709, 686, 687, 688, 689, 690, 692, 693,
	694, 695, 632, 633, 649, 500, 494, 450, 492, 493,
	497, 498, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 818, 0, 0, 927,
	928, 929, 0, 0, 0, 0, 0, 0, 921, 922,
	923, 924, 925, 926, 326, 0, 343, 824, 0, 392,
	429, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 829, 0, 835, 0,
	841, 0, 611, 0, 831, 832, 837, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 833, 830, 834,
	840, 828, 838, 825, 836, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 1336, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 822, 827, 0,
	843, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 1364, 1366,
	1362, 1358, 1359, 1324, 1325, 1365, 1361, 416, 3421, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 821, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 1348, 1326, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 1337, 1327, 1332, 1338, 1328, 1329, 1333, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	1340, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 1349, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 1350, 0, 457,
	458, 459, 1330, 1331, 460, 461, 462, 463, 464, 465,
	468, 1363, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 1341, 485,
	487, 488, 1347, 672, 1342, 839, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 1343, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 1334, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 1344, 589, 590, 1335,
	592, 593, 842, 595, 596, 597, 598, 599, 0, 718,
	600, 1345, 601, 1346, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 1351, 1352, 1355, 1353, 1354, 1356, 1357, 1367,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 950, 0, 0, 1339, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 824, 0, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 829, 0, 835, 0, 841, 0, 611, 0, 831,
	832, 837, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 833, 830, 834, 840, 828, 838, 825, 836,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 822, 827, 0, 843, 172, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 173,
	328, 329, 330, 332, 333, 334, 821, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 823, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 826,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	839, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 842, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 1169, 0, 790, 0, 0, 0, 0, 0,
	0, 0, 0, 782, 326, 0, 343, 0, 0, 392,
	429, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 786, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 785, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 777, 778, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 779, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 784, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 783, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 775, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 776, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 780, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	818, 0, 1304, 804, 0, 1309, 1310, 0, 790, 0,
	0, 0, 0, 0, 0, 0, 788, 789, 326, 0,
	343, 824, 0, 392, 429, 644, 0, 0, 489, 0,
	542, 546, 0, 635, 0, 0, 0, 0, 400, 1307,
	829, 0, 835, 1308, 841, 1306, 611, 0, 831, 832,
	837, 331, 1383, 634, 705, 0, 0, 0, 496, 0,
	0, 0, 0, 0, 0, 0, 339, 0, 0, 0,
	0, 833, 830, 834, 840, 828, 838, 825, 836, 0,
	533, 467, 684, 560, 338, 384, 371, 413, 455, 567,
	0, 0, 445, 615, 380, 469, 0, 359, 502, 0,
	591, 466, 0, 574, 594, 0, 486, 365, 525, 581,
	582, 822, 827, 0, 843, 0, 369, 370, 491, 351,
	499, 696, 662, 554, 512, 510, 0, 477, 534, 691,
	0, 0, 399, 0, 394, 490, 630, 357, 609, 528,
	495, 449, 557, 586, 396, 381, 382, 425, 527, 415,
	367, 620, 659, 663, 661, 657, 654, 658, 655, 656,
	660, 416, 6206, 0, 628, 1369, 1380, 1377, 1382, 1368,
	1381, 1375, 1057, 675, 1372, 1371, 1385, 1378, 1379, 621,
	1384, 1323, 1376, 1374, 1373, 1370, 0, 316, 317, 318,
	319, 320, 321, 322, 323, 324, 325, 327, 0, 328,
	329, 330, 332, 333, 334, 821, 335, 336, 337, 340,
	341, 342, 344, 704, 345, 346, 347, 348, 349, 350,
	641, 823, 352, 353, 354, 355, 356, 358, 360, 361,
	362, 363, 364, 366, 368, 0, 0, 0, 826, 0,
	0, 0, 372, 373, 374, 375, 376, 377, 0, 378,
	379, 383, 385, 386, 387, 388, 389, 390, 393, 0,
	395, 397, 0, 398, 401, 0, 402, 403, 404, 405,
	406, 407, 408, 409, 645, 410, 0, 411, 412, 414,
	0, 417, 418, 419, 420, 421, 0, 422, 647, 648,
	423, 424, 426, 427, 428, 430, 431, 432, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 0, 442, 443,
	444, 446, 0, 447, 448, 451, 452, 453, 454, 0,
	456, 664, 0, 457, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 465, 468, 665, 470, 471, 472, 473,
	474, 475, 476, 706, 478, 479, 480, 481, 482, 483,
	484, 668, 669, 485, 487, 488, 670, 672, 673, 839,
	503, 504, 505, 506, 507, 508, 509, 511, 0, 513,
	514, 515, 674, 516, 517, 518, 519, 0, 520, 521,
	522, 523, 524, 526, 529, 530, 531, 532, 0, 535,
	536, 537, 538, 539, 540, 541, 543, 544, 545, 547,
	548, 549, 707, 550, 551, 552, 553, 677, 555, 556,
	708, 558, 559, 561, 562, 563, 564, 565, 566, 717,
	0, 568, 678, 569, 570, 571, 572, 573, 0, 575,
	576, 577, 578, 579, 580, 583, 584, 585, 587, 588,
	680, 589, 590, 0, 592, 593, 842, 595, 596, 597,
	598, 599, 0, 718, 600, 682, 601, 683, 602, 603,
	604, 605, 606, 607, 608, 610, 0, 0, 612, 613,
	614, 616, 617, 618, 619, 622, 623, 624, 625, 626,
	0, 627, 629, 631, 709, 686, 687, 688, 689, 690,
	692, 693, 694, 695, 632, 633, 649, 500, 494, 450,
	492, 493, 497, 498, 501, 313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 343, 0, 0, 392, 429,
	644, 0, 0, 489, 0, 542, 546, 0, 635, 0,
	0, 0, 0, 400, 0, 0, 0, 0, 0, 0,
	0, 611, 0, 0, 0, 0, 331, 719, 634, 705,
	0, 0, 0, 496, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 533, 467, 684, 560, 338,
	384, 371, 413, 455, 567, 0, 0, 445, 615, 380,
	469, 0, 359, 502, 0, 591, 466, 0, 574, 594,
	0, 486, 365, 525, 581, 582, 0, 0, 0, 0,
	0, 369, 370, 491, 351, 499, 696, 662, 554, 512,
	510, 0, 477, 534, 691, 0, 0, 399, 0, 394,
	490, 630, 357, 609, 528, 495, 449, 557, 586, 396,
	381, 382, 425, 527, 415, 367, 620, 659, 663, 661,
	657, 654, 658, 655, 656, 660, 416, 653, 0, 628,
	637, 671, 651, 679, 636, 676, 646, 391, 675, 640,
	639, 685, 666, 667, 621, 681, 652, 650, 643, 642,
	638, 0, 316, 317, 318, 319, 320, 321, 322, 323,
	324, 325, 327, 0, 328, 329, 330, 332, 333, 334,
	0, 335, 336, 337, 340, 341, 342, 344, 704, 345,
	346, 347, 348, 349, 350, 641, 0, 352, 353, 354,
	355, 356, 358, 360, 361, 362, 363, 364, 366, 368,
	0, 0, 0, 0, 0, 0, 0, 372, 373, 374,
	375, 376, 377, 0, 378, 379, 383, 385, 386, 387,
	388, 389, 390, 393, 0, 395, 397, 0, 398, 401,
	0, 402, 403, 404, 405, 406, 407, 408, 409, 645,
	410, 0, 411, 412, 414, 0, 417, 418, 419, 420,
	421, 0, 422, 647, 648, 423, 424, 426, 427, 428,
	430, 431, 432, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 0, 442, 443, 444, 446, 0, 447, 448,
	451, 452, 453, 454, 0, 456, 664, 0, 457, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 465, 468,
	665, 470, 471, 472, 473, 474, 475, 476, 706, 478,
	479, 480, 481, 482, 483, 484, 668, 669, 485, 487,
	488, 670, 672, 673, 0, 503, 504, 505, 506, 507,
	508, 509, 511, 0, 513, 514, 515, 674, 516, 517,
	518, 519, 0, 520, 521, 522, 523, 524, 526, 529,
	530, 531, 532, 0, 535, 536, 537, 538, 539, 540,
	541, 543, 544, 545, 547, 548, 549, 707, 550, 551,
	552, 553, 677, 555, 556, 708, 558, 559, 561, 562,
	563, 564, 565, 566, 717, 0, 568, 678, 569, 570,
	571, 572, 573, 0, 575, 576, 577, 578, 579, 580,
	583, 584, 585, 587, 588, 680, 589, 590, 0, 592,
	593, 0, 595, 596, 597, 598, 599, 0, 718, 600,
	682, 601, 683, 602, 603, 604, 605, 606, 607, 608,
	610, 0, 0, 612, 613, 614, 616, 617, 618, 619,
	622, 623, 624, 625, 626, 0, 627, 629, 631, 709,
	686, 687, 688, 689, 690, 692, 693, 694, 695, 632,
	633, 649, 500, 494, 450, 492, 493, 497, 498, 501,
	313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	343, 0, 0, 392, 429, 644, 0, 6048, 489, 0,
	542, 546, 0, 635, 0, 0, 0, 0, 400, 0,
	0, 0, 0, 0, 0, 0, 611, 0, 0, 0,
	0, 331, 719, 634, 705, 0, 0, 0, 496, 0,
	0, 0, 0, 0, 0, 0, 339, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	533, 467, 684, 560, 338, 384, 371, 413, 455, 567,
	0, 0, 445, 615, 380, 469, 0, 359, 502, 0,
	591, 466, 0, 574, 594, 0, 486, 365, 525, 581,
	582, 0, 0, 0, 0, 0, 369, 370, 491, 351,
	499, 696, 662, 554, 512, 510, 0, 477, 534, 691,
	0, 0, 399, 0, 394, 490, 630, 357, 609, 528,
	495, 449, 557, 586, 396, 381, 382, 425, 527, 415,
	367, 620, 659, 663, 661, 657, 654, 658, 655, 656,
	660, 416, 653, 0, 628, 637, 671, 651, 679, 636,
	676, 646, 391, 675, 640, 639, 685, 666, 667, 621,
	681, 652, 650, 643, 642, 638, 0, 316, 317, 318,
	319, 320, 321, 322, 323, 324, 325, 327, 0, 328,
	329, 330, 332, 333, 334, 0, 335, 336, 337, 340,
	341, 342, 344, 704, 345, 346, 347, 348, 349, 350,
	641, 0, 352, 353, 354, 355, 356, 358, 360, 361,
	362, 363, 364, 366, 368, 0, 0, 0, 0, 0,
	0, 0, 372, 373, 374, 375, 376, 377, 0, 378,
	379, 383, 385, 386, 387, 388, 389, 390, 393, 0,
	395, 397, 0, 398, 401, 0, 402, 403, 404, 405,
	406, 407, 408, 409, 645, 410, 0, 411, 412, 414,
	0, 417, 418, 419, 420, 421, 0, 422, 647, 648,
	423, 424, 426, 427, 428, 430, 431, 432, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 0, 442, 443,
	444, 446, 0, 447, 448, 451, 452, 453, 454, 0,
	456, 664, 0, 457, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 465, 468, 665, 470, 471, 472, 473,
	474, 475, 476, 706, 478, 479, 480, 481, 482, 483,
	484, 668, 669, 485, 487, 488, 670, 672, 673, 0,
	503, 504, 505, 506, 507, 508, 509, 511, 0, 513,
	514, 515, 674, 516, 517, 518, 519, 0, 520, 521,
	522, 523, 524, 526, 529, 530, 531, 532, 0, 535,
	536, 537, 538, 539, 540, 541, 543, 544, 545, 547,
	548, 549, 707, 550, 551, 552, 553, 677, 555, 556,
	708, 558, 559, 561, 562, 563, 564, 565, 566, 717,
	0, 568, 678, 569, 570, 571, 572, 573, 0, 575,
	576, 577, 578, 579, 580, 583, 584, 585, 587, 588,
	680, 589, 590, 0, 592, 593, 0, 595, 596, 597,
	598, 599, 0, 718, 600, 682, 601, 683, 602, 603,
	604, 605, 606, 607, 608, 610, 0, 0, 612, 613,
	614, 616, 617, 618, 619, 622, 623, 624, 625, 626,
	0, 627, 629, 631, 709, 686, 687, 688, 689, 690,
	692, 693, 694, 695, 632, 633, 649, 500, 494, 450,
	492, 493, 497, 498, 501, 313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 343, 0, 0, 392, 429,
	644, 0, 5906, 489, 0, 542, 546, 0, 635, 0,
	0, 0, 0, 400, 0, 0, 0, 0, 0, 0,
	0, 611, 0, 0, 0, 0, 331, 719, 634, 705,
	0, 0, 0, 496, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 533, 467, 684, 560, 338,
	384, 371, 413, 455, 567, 0, 0, 445, 615, 380,
	469, 0, 359, 502, 0, 591, 466, 0, 574, 594,
	0, 486, 365, 525, 581, 582, 0, 0, 0, 0,
	0, 369, 370, 491, 351, 499, 696, 662, 554, 512,
	510, 0, 477, 534, 691, 0, 0, 399, 0, 394,
	490, 630, 357, 609, 528, 495, 449, 557, 586, 396,
	381, 382, 425, 527, 415, 367, 620, 659, 663, 661,
	657, 654, 658, 655, 656, 660, 416, 653, 0, 628,
	637, 671, 651, 679, 636, 676, 646, 391, 675, 640,
	639, 685, 666, 667, 621, 681, 652, 650, 643, 642,
	638, 0, 316, 317, 318, 319, 320, 321, 322, 323,
	324, 325, 327, 0, 328, 329, 330, 332, 333, 334,
	0, 335, 336, 337, 340, 341, 342, 344, 704, 345,
	346, 347, 348, 349, 350, 641, 0, 352, 353, 354,
	355, 356, 358, 360, 361, 362, 363, 364, 366, 368,
	0, 0, 0, 0, 0, 0, 0, 372, 373, 374,
	375, 376, 377, 0, 378, 379, 383, 385, 386, 387,
	388, 389, 390, 393, 0, 395, 397, 0, 398, 401,
	0, 402, 403, 404, 405, 406, 407, 408, 409, 645,
	410, 0, 411, 412, 414, 0, 417, 418, 419, 420,
	421, 0, 422, 647, 648, 423, 424, 426, 427, 428,
	430, 431, 432, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 0, 442, 443, 444, 446, 0, 447, 448,
	451, 452, 453, 454, 0, 456, 664, 0, 457, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 465, 468,
	665, 470, 471, 472, 473, 474, 475, 476, 706, 478,
	479, 480, 481, 482, 483, 484, 668, 669, 485, 487,
	488, 670, 672, 673, 0, 503, 504, 505, 506, 507,
	508, 509, 511, 0, 513, 514, 515, 674, 516, 517,
	518, 519, 0, 520, 521, 522, 523, 524, 526, 529,
	530, 531, 532, 0, 535, 536, 537, 538, 539, 540,
	541, 543, 544, 545, 547, 548, 549, 707, 550, 551,
	552, 553, 677, 555, 556, 708, 558, 559, 561, 562,
	563, 564, 565, 566, 717, 0, 568, 678, 569, 570,
	571, 572, 573, 0, 575, 576, 577, 578, 579, 580,
	583, 584, 585, 587, 588, 680, 589, 590, 0, 592,
	593, 0, 595, 596, 597, 598, 599, 0, 718, 600,
	682, 601, 683, 602, 603, 604, 605, 606, 607, 608,
	610, 0, 0, 612, 613, 614, 616, 617, 618, 619,
	622, 623, 624, 625, 626, 0, 627, 629, 631, 709,
	686, 687, 688, 689, 690, 692, 693, 694, 695, 632,
	633, 649, 500, 494, 450, 492, 493, 497, 498, 501,
	313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	343, 0, 0, 392, 429, 644, 0, 5903, 489, 0,
	542, 546, 0, 635, 0, 0, 0, 0, 400, 0,
	0, 0, 0, 0, 0, 0, 611, 0, 0, 0,
	0, 331, 719, 634, 705, 0, 0, 0, 496, 0,
	0, 0, 0, 0, 0, 0, 339, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	533, 467, 684, 560, 338, 384, 371, 413, 455, 567,
	0, 0, 445, 615, 380, 469, 0, 359, 502, 0,
	591, 466, 0, 574, 594, 0, 486, 365, 525, 581,
	582, 0, 0, 0, 0, 0, 369, 370, 491, 351,
	499, 696, 662, 554, 512, 510, 0, 477, 534, 691,
	0, 0, 399, 0, 394, 490, 630, 357, 609, 528,
	495, 449, 557, 586, 396, 381, 382, 425, 527, 415,
	367, 620, 659, 663, 661, 657, 654, 658, 655, 656,
	660, 416, 653, 0, 628, 637, 671, 651, 679, 636,
	676, 646, 391, 675, 640, 639, 685, 666, 667, 621,
	681, 652, 650, 643, 642, 638, 0, 316, 317, 318,
	319, 320, 321, 322, 323, 324, 325, 327, 0, 328,
	329, 330, 332, 333, 334, 0, 335, 336, 337, 340,
	341, 342, 344, 704, 345, 346, 347, 348, 349, 350,
	641, 0, 352, 353, 354, 355, 356, 358, 360, 361,
	362, 363, 364, 366, 368, 0, 0, 0, 0, 0,
	0, 0, 372, 373, 374, 375, 376, 377, 0, 378,
	379, 383, 385, 386, 387, 388, 389, 390, 393, 0,
	395, 397, 0, 398, 401, 0, 402, 403, 404, 405,
	406, 407, 408, 409, 645, 410, 0, 411, 412, 414,
	0, 417, 418, 419, 420, 421, 0, 422, 647, 648,
	423, 424, 426, 427, 428, 430, 431, 432, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 0, 442, 443,
	444, 446, 0, 447, 448, 451, 452, 453, 454, 0,
	456, 664, 0, 457, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 465, 468, 665, 470, 471, 472, 473,
	474, 475, 476, 706, 478, 479, 480, 481, 482, 483,
	484, 668, 669, 485, 487, 488, 670, 672, 673, 0,
	503, 504, 505, 506, 507, 508, 509, 511, 0, 513,
	514, 515, 674, 516, 517, 518, 519, 0, 520, 521,
	522, 523, 524, 526, 529, 530, 531, 532, 0, 535,
	536, 537, 538, 539, 540, 541, 543, 544, 545, 547,
	548, 549, 707, 550, 551, 552, 553, 677, 555, 556,
	708, 558, 559, 561, 562, 563, 564, 565, 566, 717,
	0, 568, 678, 569, 570, 571, 572, 573, 0, 575,
	576, 577, 578, 579, 580, 583, 584, 585, 587, 588,
	680, 589, 590, 0, 592, 593, 0, 595, 596, 597,
	598, 599, 0, 718, 600, 682, 601, 683, 602, 603,
	604, 605, 606, 607, 608, 610, 0, 0, 612, 613,
	614, 616, 617, 618, 619, 622, 623, 624, 625, 626,
	0, 627, 629, 631, 709, 686, 687, 688, 689, 690,
	692, 693, 694, 695, 632, 633, 649, 500, 494, 450,
	492, 493, 497, 498, 501, 313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 343, 0, 0, 392, 429,
	644, 0, 800, 489, 0, 542, 546, 177, 635, 0,
	0, 0, 0, 400, 0, 0, 0, 0, 0, 0,
	0, 611, 0, 0, 0, 0, 331, 719, 634, 705,
	0, 0, 0, 496, 174, 0, 0, 0, 175, 0,
	0, 339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 533, 467, 1166, 560, 338,
	384, 371, 413, 455, 567, 0, 0, 445, 615, 380,
	469, 0, 359, 502, 0, 591, 466, 0, 574, 594,
	0, 486, 365, 525, 581, 582, 0, 0, 0, 0,
	0, 369, 370, 491, 351, 499, 696, 662, 554, 512,
	510, 0, 477, 534, 691, 0, 0, 399, 0, 394,
	490, 630, 357, 609, 528, 495, 449, 557, 586, 396,
	381, 382, 425, 527, 415, 367, 620, 659, 663, 661,
	657, 654, 658, 655, 656, 660, 416, 653, 0, 628,
	637, 671, 651, 679, 636, 676, 646, 391, 675, 640,
	639, 685, 666, 667, 621, 681, 652, 650, 643, 642,
	638, 0, 316, 317, 318, 319, 320, 321, 322, 323,
	324, 325, 327, 0, 328, 329, 330, 332, 333, 334,
	0, 335, 336, 337, 340, 341, 342, 344, 704, 345,
	346, 347, 348, 349, 350, 641, 0, 352, 353, 354,
	355, 356, 358, 360, 361, 362, 363, 364, 366, 368,
	0, 0, 0, 0, 0, 0, 0, 372, 373, 374,
	375, 376, 377, 0, 378, 379, 383, 385, 386, 387,
	388, 389, 390, 393, 0, 395, 397, 0, 398, 401,
	0, 402, 403, 404, 405, 406, 407, 408, 409, 645,
	410, 0, 411, 412, 414, 0, 417, 418, 419, 420,
	421, 0, 422, 647, 648, 423, 424, 426, 427, 428,
	430, 431, 432, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 0, 442, 443, 444, 446, 0, 447, 448,
	451, 452, 453, 454, 0, 456, 664, 0, 457, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 465, 468,
	665, 470, 471, 472, 473, 474, 475, 476, 706, 478,
	479, 480, 481, 482, 483, 484, 668, 669, 485, 487,
	488, 670, 672, 673, 0, 503, 504, 505, 506, 507,
	508, 509, 511, 0, 513, 514, 515, 674, 516, 517,
	518, 519, 0, 520, 521, 522, 523, 524, 526, 529,
	530, 531, 532, 0, 535, 536, 537, 538, 539, 540,
	541, 543, 544, 545, 547, 548, 549, 707, 550, 551,
	552, 553, 677, 555, 556, 708, 558, 559, 561, 562,
	563, 564, 565, 566, 717, 0, 568, 678, 569, 570,
	571, 572, 573, 0, 575, 576, 577, 578, 579, 580,
	583, 584, 585, 587, 588, 680, 589, 590, 0, 592,
	593, 0, 595, 596, 597, 598, 599, 0, 718, 600,
	682, 601, 683, 602, 603, 604, 605, 606, 607, 608,
	610, 0, 0, 612, 613, 614, 616, 617, 618, 619,
	622, 623, 624, 625, 626, 0, 627, 629, 631, 709,
	686, 687, 688, 689, 690, 692, 693, 694, 695, 632,
	633, 649, 500, 494, 450, 492, 493, 497, 498, 501,
	950, 0, 0, 804, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	343, 824, 171, 392, 429, 644, 0, 0, 489, 0,
	542, 546, 0, 635, 0, 0, 0, 0, 400, 1794,
	829, 0, 835, 0, 841, 1793, 611, 0, 831, 832,
	837, 331, 719, 634, 705, 0, 0, 0, 496, 0,
	0, 0, 0, 0, 0, 0, 339, 0, 0, 0,
	1795, 833, 830, 834, 840, 828, 838, 825, 836, 0,
	533, 467, 684, 560, 338, 384, 371, 413, 455, 567,
	0, 0, 445, 615, 380, 469, 0, 359, 502, 0,
	591, 466, 0, 574, 594, 0, 486, 365, 525, 581,
	582, 822, 827, 0, 843, 0, 369, 370, 491, 351,
	499, 696, 662, 554, 512, 510, 0, 477, 534, 691,
	0, 0, 399, 0, 394, 490, 630, 357, 609, 528,
	495, 449, 557, 586, 396, 381, 382, 425, 527, 415,
	367, 620, 659, 663, 661, 657, 654, 658, 655, 656,
	660, 416, 653, 0, 628, 637, 671, 651, 679, 636,
	676, 646, 391, 675, 640, 639, 685, 666, 667, 621,
	681, 652, 650, 643, 642, 638, 0, 316, 317, 318,
	319, 320, 321, 322, 323, 324, 325, 327, 0, 328,
	329, 330, 332, 333, 334, 821, 335, 336, 337, 340,
	341, 342, 344, 704, 345, 346, 347, 348, 349, 350,
	641, 823, 352, 353, 354, 355, 356, 358, 360, 361,
	362, 363, 364, 366, 368, 0, 0, 0, 826, 0,
	0, 0, 372, 373, 374, 375, 376, 377, 0, 378,
	379, 383, 385, 386, 387, 388, 389, 390, 393, 0,
	395, 397, 0, 398, 401, 0, 402, 403, 404, 405,
	406, 407, 408, 409, 645, 410, 0, 411, 412, 414,
	0, 417, 418, 419, 420, 421, 0, 422, 647, 648,
	423, 424, 426, 427, 428, 430, 431, 432, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 0, 442, 443,
	444, 446, 0, 447, 448, 451, 452, 453, 454, 0,
	456, 664, 0, 457, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 465, 468, 665, 470, 471, 472, 473,
	474, 475, 476, 706, 478, 479, 480, 481, 482, 483,
	484, 668, 669, 485, 487, 488, 670, 672, 673, 839,
	503, 504, 505, 506, 507, 508, 509, 511, 0, 513,
	514, 515, 674, 516, 517, 518, 519, 0, 520, 521,
	522, 523, 524, 526, 529, 530, 531, 532, 0, 535,
	536, 537, 538, 539, 540, 541, 543, 544, 545, 547,
	548, 549, 707, 550, 551, 552, 553, 677, 555, 556,
	708, 558, 559, 561, 562, 563, 564, 565, 566, 717,
	0, 568, 678, 569, 570, 571, 572, 573, 0, 575,
	576, 577, 578, 579, 580, 583, 584, 585, 587, 588,
	680, 589, 590, 0, 592, 593, 842, 595, 596, 597,
	598, 599, 0, 718, 600, 682, 601, 683, 602, 603,
	604, 605, 606, 607, 608, 610, 0, 0, 612, 613,
	614, 616, 617, 618, 619, 622, 623, 624, 625, 626,
	0, 627, 629, 631, 709, 686, 687, 688, 689, 690,
	692, 693, 694, 695, 632, 633, 649, 500, 494, 450,
	492, 493, 497, 498, 501, 950, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 343, 824, 0, 392, 429,
	644, 0, 0, 489, 0, 542, 546, 0, 635, 0,
	0, 0, 0, 400, 0, 829, 0, 835, 0, 841,
	0, 611, 0, 831, 832, 837, 331, 719, 634, 705,
	0, 0, 0, 496, 0, 0, 0, 0, 0, 0,
	0, 339, 3884, 0, 0, 0, 833, 830, 834, 840,
	828, 838, 825, 836, 0, 533, 467, 684, 560, 338,
	384, 371, 413, 455, 567, 0, 0, 445, 615, 380,
	469, 0, 359, 502, 0, 591, 466, 0, 574, 594,
	0, 486, 365, 525, 581, 582, 822, 827, 0, 843,
	0, 369, 370, 491, 351, 499, 696, 662, 554, 512,
	510, 0, 477, 534, 691, 0, 0, 399, 0, 394,
	490, 630, 357, 609, 528, 495, 449, 557, 586, 396,
	381, 382, 425, 527, 415, 367, 620, 659, 663, 661,
	657, 654, 658, 655, 656, 660, 416, 653, 0, 628,
	637, 671, 651, 679, 636, 676, 646, 391, 675, 640,
	639, 685, 666, 667, 621, 681, 652, 650, 643, 642,
	638, 0, 316, 317, 318, 319, 320, 321, 322, 323,
	324, 325, 327, 0, 328, 329, 330, 332, 333, 334,
	821, 335, 336, 337, 340, 341, 342, 344, 704, 345,
	346, 347, 348, 349, 350, 641, 823, 352, 353, 354,
	355, 356, 358, 360, 361, 362, 363, 364, 366, 368,
	0, 0, 947, 826, 0, 0, 948, 372, 373, 374,
	375, 376, 377, 0, 378, 379, 383, 385, 386, 387,
	388, 389, 390, 393, 0, 395, 397, 0, 398, 401,
	0, 402, 403, 404, 405, 406, 407, 408, 409, 645,
	410, 0, 411, 412, 414, 0, 417, 418, 419, 420,
	421, 0, 422, 647, 648, 423, 424, 426, 427, 428,
	430, 431, 432, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 0, 442, 443, 444, 446, 0, 447, 448,
	451, 452, 453, 454, 0, 456, 664, 0, 457, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 465, 468,
	665, 470, 471, 472, 473, 474, 475, 476, 706, 478,
	479, 480, 481, 482, 483, 484, 668, 669, 485, 487,
	488, 670, 672, 673, 839, 503, 504, 505, 506, 507,
	508, 509, 511, 0, 513, 514, 515, 674, 516, 517,
	518, 519, 0, 520, 521, 522, 523, 524, 526, 529,
	530, 531, 532, 0, 535, 536, 537, 538, 539, 540,
	541, 543, 544, 545, 547, 548, 549, 707, 550, 551,
	552, 553, 677, 555, 556, 708, 558, 559, 561, 562,
	563, 564, 565, 566, 717, 949, 568, 678, 569, 570,
	571, 572, 573, 0, 575, 576, 577, 578, 579, 580,
	583, 584, 585, 587, 588, 680, 589, 590, 0, 592,
	593, 842, 595, 596, 597, 598, 599, 0, 718, 600,
	682, 601, 683, 602, 603, 604, 605, 606, 607, 608,
	610, 0, 0, 612, 613, 614, 616, 617, 618, 619,
	622, 623, 624, 625, 626, 0, 627, 629, 631, 709,
	686, 687, 688, 689, 690, 692, 693, 694, 695, 632,
	633, 649, 500, 494, 450, 492, 493, 497, 498, 501,
	950, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	343, 824, 0, 392, 429, 644, 0, 0, 489, 0,
	542, 546, 0, 635, 0, 0, 0, 0, 400, 0,
	829, 0, 835, 0, 841, 0, 611, 0, 831, 832,
	837, 331, 719, 634, 705, 0, 0, 0, 496, 0,
	0, 0, 0, 0, 0, 0, 339, 0, 0, 0,
	0, 833, 830, 834, 840, 828, 838, 825, 836, 0,
	533, 467, 684, 560, 338, 384, 371, 413, 455, 567,
	0, 0, 445, 615, 380, 469, 0, 359, 502, 2708,
	591, 466, 0, 574, 594, 0, 486, 365, 525, 581,
	582, 822, 827, 0, 843, 0, 369, 370, 491, 351,
	499, 696, 662, 554, 512, 510, 0, 477, 534, 691,
	0, 0, 399, 0, 394, 490, 630, 357, 609, 528,
	495, 449, 557, 586, 396, 381, 382, 425, 527, 415,
	367, 620, 659, 663, 661, 657, 654, 658, 655, 656,
	660, 416, 653, 0, 628, 637, 671, 651, 679, 636,
	676, 646, 391, 675, 640, 639, 685, 666, 667, 621,
	681, 652, 650, 643, 642, 638, 0, 316, 317, 318,
	319, 320, 321, 322, 323, 324, 325, 327, 0, 328,
	329, 330, 332, 333, 334, 821, 335, 336, 337, 340,
	341, 342, 344, 704, 345, 346, 347, 348, 349, 350,
	641, 823, 352, 353, 354, 355, 356, 358, 360, 361,
	362, 363, 364, 366, 368, 0, 0, 947, 826, 0,
	0, 948, 372, 373, 374, 375, 376, 377, 0, 378,
	379, 383, 385, 386, 387, 388, 389, 390, 393, 0,
	395, 397, 0, 398, 401, 0, 402, 403, 404, 405,
	406, 407, 408, 409, 645, 410, 0, 411, 412, 414,
	0, 417, 418, 419, 420, 421, 0, 422, 647, 648,
	423, 424, 426, 427, 428, 430, 431, 432, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 0, 442, 443,
	444, 446, 0, 447, 448, 451, 452, 453, 454, 0,
	456, 664, 0, 457, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 465, 468, 665, 470, 471, 472, 473,
	474, 475, 476, 706, 478, 479, 480, 481, 482, 483,
	484, 668, 669, 485, 487, 488, 670, 672, 673, 839,
	503, 504, 505, 506, 507, 508, 509, 511, 0, 513,
	514, 515, 674, 516, 517, 518, 519, 0, 520, 521,
	522, 523, 524, 526, 529, 530, 531, 532, 0, 535,
	536, 537, 538, 539, 540, 541, 543, 544, 545, 547,
	548, 549, 707, 550, 551, 552, 553, 677, 555, 556,
	708, 558, 559, 561, 562, 563, 564, 565, 566, 717,
	949, 568, 678, 569, 570, 571, 572, 573, 0, 575,
	576, 577, 578, 579, 580, 583, 584, 585, 587, 588,
	680, 589, 590, 0, 592, 593, 842, 595, 596, 597,
	598, 599, 0, 718, 600, 682, 601, 683, 602, 603,
	604, 605, 606, 607, 608, 610, 0, 0, 612, 613,
	614, 616, 617, 618, 619, 622, 623, 624, 625, 626,
	0, 627, 629, 631, 709, 686, 687, 688, 689, 690,
	692, 693, 694, 695, 632, 633, 649, 500, 494, 450,
	492, 493, 497, 498, 501, 313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 343, 0, 0, 392, 429,
	644, 0, 0, 489, 0, 542, 546, 0, 635, 0,
	0, 0, 0, 400, 0, 0, 0, 0, 0, 0,
	0, 611, 0, 0, 0, 0, 331, 719, 634, 705,
	0, 0, 0, 496, 0, 0, 0, 864, 2724, 0,
	0, 339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 533, 467, 684, 560, 338,
	384, 371, 413, 455, 567, 0, 0, 445, 615, 380,
	469, 0, 359, 502, 0, 591, 466, 0, 574, 594,
	0, 486, 365, 525, 581, 582, 0, 0, 0, 0,
	0, 369, 370, 491, 351, 499, 696, 662, 554, 512,
	510, 0, 477, 534, 691, 0, 0, 399, 0, 394,
	490, 630, 357, 609, 528, 495, 449, 557, 586, 396,
	381, 382, 425, 527, 415, 367, 620, 659, 663, 661,
	657, 654, 658, 655, 656, 660, 416, 653, 0, 628,
	637, 671, 651, 679, 636, 676, 646, 391, 675, 640,
	639, 685, 666, 667, 621, 681, 652, 650, 643, 642,
	638, 0, 316, 317, 318, 319, 320, 321, 322, 323,
	324, 325, 327, 0, 328, 329, 330, 332, 333, 334,
	0, 335, 336, 337, 340, 341, 342, 344, 704, 345,
	346, 347, 348, 349, 350, 641, 0, 352, 353, 354,
	355, 356, 358, 360, 361, 362, 363, 364, 366, 368,
	0, 0, 0, 2728, 0, 0, 0, 372, 373, 374,
	375, 376, 377, 0, 378, 379, 383, 385, 386, 387,
	388, 389, 390, 393, 0, 395, 397, 0, 398, 401,
	0, 402, 403, 404, 405, 406, 407, 408, 409, 645,
	410, 0, 411, 412, 414, 0, 417, 418, 419, 420,
	421, 0, 422, 647, 648, 423, 424, 426, 427, 428,
	430, 431, 432, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 0, 442, 443, 444, 446, 0, 447, 448,
	451, 452, 453, 454, 0, 456, 664, 0, 457, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 465, 468,
	665, 470, 471, 472, 473, 474, 475, 476, 706, 478,
	479, 480, 481, 482, 483, 484, 668, 669, 485, 487,
	488, 670, 672, 673, 0, 503, 504, 505, 506, 507,
	508, 509, 511, 0, 513, 514, 515, 674, 516, 517,
	518, 519, 0, 520, 521, 522, 523, 524, 526, 529,
	530, 531, 532, 0, 535, 536, 537, 538, 539, 540,
	541, 543, 544, 545, 547, 548, 549, 707, 550, 551,
	552, 553, 677, 555, 556, 708, 558, 559, 561, 562,
	563, 564, 565, 566, 717, 0, 568, 678, 569, 570,
	571, 572, 573, 0, 575, 576, 577, 578, 579, 580,
	583, 584, 585, 587, 588, 680, 589, 590, 0, 2725,
	593, 0, 595, 596, 597, 598, 599, 0, 718, 600,
	682, 601, 683, 602, 603, 604, 605, 606, 607, 608,
	610, 0, 0, 612, 613, 614, 616, 617, 618, 619,
	622, 623, 624, 625, 626, 0, 627, 629, 631, 709,
	686, 687, 688, 689, 690, 692, 693, 694, 695, 632,
	633, 649, 500, 494, 450, 492, 493, 497, 498, 501,
	950, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1021, 326, 0,
	343, 824, 1449, 392, 429, 644, 0, 0, 489, 0,
	542, 546, 0, 635, 0, 0, 0, 0, 400, 0,
	829, 0, 835, 0, 841, 0, 611, 0, 831, 832,
	837, 331, 719, 634, 705, 0, 0, 0, 496, 0,
	0, 0, 0, 0, 0, 0, 339, 0, 0, 0,
	0, 833, 830, 834, 840, 828, 838, 825, 836, 0,
	533, 467, 684, 560, 338, 384, 371, 413, 455, 567,
	0, 0, 445, 615, 380, 469, 0, 359, 502, 0,
	591, 466, 0, 574, 594, 0, 486, 365, 525, 581,
	582, 822, 827, 0, 843, 0, 369, 370, 491, 351,
	499, 696, 662, 554, 512, 510, 0, 477, 534, 691,
	0, 0, 399, 0, 394, 490, 630, 357, 609, 528,
	495, 449, 557, 586, 396, 381, 382, 425, 527, 415,
	367, 620, 659, 663, 661, 657, 654, 658, 655, 656,
	660, 416, 653, 0, 628, 637, 671, 651, 679, 636,
	676, 646, 391, 675, 640, 639, 685, 666, 667, 621,
	681, 652, 650, 643, 642, 638, 0, 316, 317, 318,
	319, 320, 321, 322, 323, 324, 325, 327, 0, 328,
	329, 330, 332, 333, 334, 821, 335, 336, 337, 340,
	341, 342, 344, 704, 345, 346, 347, 348, 349, 350,
	641, 823, 352, 353, 354, 355, 356, 358, 360, 361,
	362, 363, 364, 366, 368, 0, 0, 947, 826, 0,
	0, 948, 372, 373, 374, 375, 376, 377, 0, 378,
	379, 383, 385, 386, 387, 388, 389, 390, 393, 0,
	395, 397, 0, 398, 401, 0, 402, 403, 404, 405,
	406, 407, 408, 409, 645, 410, 0, 411, 412, 414,
	0, 417, 418, 419, 420, 421, 0, 422, 647, 648,
	423, 424, 426, 427, 428, 430, 431, 432, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 0, 442, 443,
	444, 446, 0, 447, 448, 451, 452, 453, 454, 0,
	456, 664, 0, 457, 458, 459, 0, 0, 460, 461,
	462, 463, 1019, 465, 468, 665, 470, 471, 472, 473,
	474, 475, 476, 706, 478, 479, 480, 481, 482, 483,
	484, 668, 669, 485, 487, 488, 670, 672, 673, 839,
	503, 504, 505, 506, 507, 508, 509, 511, 0, 513,
	514, 515, 674, 516, 517, 518, 519, 0, 520, 521,
	522, 523, 524, 526, 529, 530, 531, 532, 0, 535,
	536, 537, 538, 539, 540, 541, 543, 544, 545, 547,
	548, 549, 707, 550, 551, 552, 553, 677, 555, 556,
	708, 558, 559, 561, 562, 563, 564, 565, 566, 717,
	949, 568, 678, 569, 570, 571, 572, 573, 0, 575,
	576, 577, 578, 579, 580, 583, 584, 585, 587, 588,
	680, 589, 590, 0, 592, 593, 842, 595, 596, 597,
	598, 599, 0, 718, 600, 682, 601, 683, 602, 603,
	604, 605, 606, 607, 608, 610, 0, 0, 612, 613,
	614, 616, 617, 618, 619, 622, 623, 624, 625, 626,
	0, 627, 629, 631, 709, 686, 687, 688, 689, 690,
	692, 693, 694, 695, 632, 633, 649, 500, 494, 450,
	492, 493, 497, 498, 501, 950, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1017, 326, 0, 343, 824, 0, 392, 429,
	644, 0, 0, 489, 0, 542, 546, 0, 635, 0,
	0, 0, 0, 400, 0, 829, 0, 835, 0, 841,
	0, 611, 0, 831, 832, 837, 331, 719, 634, 705,
	0, 0, 0, 496, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 0, 0, 833, 830, 834, 840,
	828, 838, 825, 836, 0, 533, 467, 684, 560, 338,
	384, 371, 413, 455, 567, 0, 0, 445, 615, 380,
	469, 0, 359, 502, 0, 591, 466, 0, 574, 594,
	0, 486, 365, 525, 581, 582, 822, 827, 0, 843,
	0, 369, 370, 491, 351, 499, 696, 662, 554, 512,
	510, 0, 477, 534, 691, 0, 0, 399, 0, 394,
	490, 630, 357, 609, 528, 495, 449, 557, 586, 396,
	381, 382, 425, 527, 415, 367, 620, 659, 663, 661,
	657, 654, 658, 655, 656, 660, 416, 653, 0, 628,
	637, 671, 651, 679, 636, 676, 646, 391, 675, 640,
	639, 685, 666, 667, 621, 681, 652, 650, 643, 642,
	638, 0, 316, 317, 318, 319, 320, 321, 322, 323,
	324, 325, 327, 0, 328, 329, 330, 332, 333, 334,
	821, 335, 336, 337, 340, 341, 342, 344, 704, 345,
	346, 347, 348, 349, 350, 641, 823, 352, 353, 354,
	355, 356, 358, 360, 361, 362, 363, 364, 366, 368,
	0, 0, 947, 826, 0, 0, 948, 372, 373, 374,
	375, 376, 377, 0, 378, 379, 383, 385, 386, 387,
	388, 389, 390, 393, 0, 395, 397, 0, 398, 401,
	0, 402, 403, 404, 405, 406, 407, 408, 409, 645,
	410, 0, 411, 412, 414, 0, 417, 418, 419, 420,
	421, 0, 422, 647, 648, 423, 424, 426, 427, 428,
	430, 431, 432, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 0, 442, 443, 444, 446, 0, 447, 448,
	451, 452, 453, 454, 0, 456, 664, 0, 457, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 465, 468,
	665, 470, 471, 472, 473, 474, 475, 476, 706, 478,
	479, 480, 481, 482, 483, 484, 668, 669, 485, 487,
	488, 670, 672, 673, 839, 503, 504, 505, 506, 507,
	508, 509, 511, 0, 513, 514, 515, 674, 516, 517,
	518, 519, 0, 520, 521, 522, 523, 524, 526, 529,
	530, 531, 532, 0, 535, 536, 537, 538, 539, 540,
	541, 543, 544, 545, 547, 548, 549, 707, 550, 551,
	552, 553, 677, 555, 556, 708, 558, 559, 561, 562,
	563, 564, 565, 566, 717, 949, 568, 678, 569, 570,
	571, 572, 573, 0, 575, 576, 577, 578, 579, 580,
	583, 584, 585, 587, 588, 680, 589, 590, 0, 592,
	593, 842, 595, 596, 597, 598, 599, 0, 718, 600,
	682, 601, 683, 602, 603, 604, 605, 606, 607, 608,
	610, 0, 0, 612, 613, 614, 616, 617, 618, 619,
	622, 623, 624, 625, 626, 0, 627, 629, 631, 709,
	686, 687, 688, 689, 690, 692, 693, 694, 695, 632,
	633, 649, 500, 494, 450, 492, 493, 497, 498, 501,
	950, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	343, 824, 0, 392, 429, 644, 0, 0, 489, 0,
	542, 546, 0, 635, 0, 0, 0, 0, 400, 0,
	829, 0, 835, 0, 841, 0, 611, 0, 831, 832,
	837, 331, 719, 634, 705, 0, 0, 0, 496, 0,
	0, 0, 0, 0, 0, 0, 339, 0, 0, 0,
	0, 833, 830, 834, 840, 828, 838, 825, 836, 0,
	533, 467, 684, 560, 338, 384, 371, 413, 455, 567,
	0, 0, 445, 615, 380, 469, 0, 359, 502, 0,
	591, 466, 0, 574, 594, 0, 486, 365, 525, 581,
	582, 822, 827, 0, 843, 0, 369, 370, 491, 351,
	499, 696, 662, 554, 512, 510, 0, 477, 534, 691,
	0, 0, 399, 0, 394, 490, 630, 357, 609, 528,
	495, 449, 557, 586, 396, 381, 382, 425, 527, 415,
	367, 620, 659, 663, 661, 657, 654, 658, 655, 656,
	660, 416, 653, 0, 628, 637, 671, 651, 679, 636,
	676, 646, 391, 675, 640, 639, 685, 666, 667, 621,
	681, 652, 650, 643, 642, 638, 0, 316, 317, 318,
	319, 320, 321, 322, 323, 324, 325, 327, 0, 328,
	329, 330, 332, 333, 334, 821, 335, 336, 337, 340,
	341, 342, 344, 704, 345, 346, 347, 348, 349, 350,
	641, 823, 352, 353, 354, 355, 356, 358, 360, 361,
	362, 363, 364, 366, 368, 0, 0, 947, 826, 0,
	0, 948, 372, 373, 374, 375, 376, 377, 0, 378,
	379, 383, 385, 386, 387, 388, 389, 390, 393, 0,
	395, 397, 0, 398, 401, 0, 402, 403, 404, 405,
	406, 407, 408, 409, 645, 410, 0, 411, 412, 414,
	0, 417, 418, 419, 420, 421, 0, 422, 647, 648,
	423, 424, 426, 427, 428, 430, 431, 432, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 0, 442, 443,
	444, 446, 0, 447, 448, 451, 452, 453, 454, 0,
	456, 664, 0, 457, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 465, 468, 665, 470, 471, 472, 473,
	474, 475, 476, 706, 478, 479, 480, 481, 482, 483,
	484, 668, 669, 485, 487, 488, 670, 672, 673, 839,
	503, 504, 505, 506, 507, 508, 509, 511, 0, 513,
	514, 515, 674, 516, 517, 518, 519, 0, 520, 521,
	522, 523, 524, 526, 529, 530, 531, 532, 0, 535,
	536, 537, 538, 539, 540, 541, 543, 544, 545, 547,
	548, 549, 707, 550, 551, 552, 553, 677, 555, 556,
	708, 558, 559, 561, 562, 563, 564, 565, 566, 717,
	949, 568, 678, 569, 570, 571, 572, 573, 0, 575,
	576, 577, 578, 579, 580, 583, 584, 585, 587, 588,
	680, 589, 590, 0, 592, 593, 842, 595, 596, 597,
	598, 599, 0, 718, 600, 682, 601, 683, 602, 603,
	604, 605, 606, 607, 608, 610, 0, 0, 612, 613,
	614, 616, 617, 618, 619, 622, 623, 624, 625, 626,
	0, 627, 629, 631, 709, 686, 687, 688, 689, 690,
	692, 693, 694, 695, 632, 633, 649, 500, 494, 450,
	492, 493, 497, 498, 501, 313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 4163, 343, 0, 0, 392, 429,
	644, 0, 0, 489, 0, 542, 546, 0, 635, 0,
	0, 0, 0, 400, 0, 0, 0, 0, 0, 0,
	0, 611, 0, 0, 0, 0, 331, 719, 634, 705,
	0, 0, 0, 496, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 533, 467, 684, 560, 338,
	384, 371, 413, 455, 567, 0, 0, 445, 615, 380,
	469, 0, 359, 502, 0, 591, 466, 0, 574, 594,
	0, 486, 365, 525, 581, 582, 0, 0, 0, 0,
	0, 369, 370, 491, 351, 499, 696, 662, 554, 512,
	510, 0, 477, 534, 691, 0, 0, 399, 0, 394,
	490, 630, 357, 609, 528, 495, 449, 557, 586, 396,
	381, 382, 425, 527, 415, 367, 620, 659, 663, 661,
	657, 654, 658, 655, 656, 660, 416, 653, 0, 628,
	637, 671, 651, 679, 636, 676, 646, 391, 675, 640,
	639, 685, 666, 667, 621, 681, 652, 650, 643, 642,
	638, 0, 316, 317, 318, 319, 320, 321, 322, 323,
	324, 325, 327, 0, 328, 329, 330, 332, 333, 334,
	0, 335, 336, 337, 340, 341, 342, 344, 704, 345,
	346, 347, 348, 349, 350, 641, 0, 352, 353, 354,
	355, 356, 358, 360, 361, 362, 363, 364, 366, 368,
	0, 0, 0, 0, 0, 0, 0, 372, 373, 374,
	375, 376, 377, 0, 378, 379, 383, 385, 386, 387,
	388, 389, 390, 393, 0, 395, 397, 0, 398, 401,
	0, 402, 403, 404, 405, 406, 407, 408, 409, 645,
	410, 0, 411, 412, 414, 0, 417, 418, 419, 420,
	421, 0, 422, 647, 648, 423, 424, 426, 427, 428,
	430, 431, 432, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 0, 442, 443, 444, 446, 0, 447, 448,
	451, 452, 453, 454, 0, 456, 664, 0, 457, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 465, 468,
	665, 470, 471, 472, 473, 474, 475, 476, 706, 478,
	479, 480, 481, 482, 483, 484, 668, 669, 485, 487,
	488, 670, 672, 673, 0, 503, 504, 505, 506, 507,
	508, 509, 511, 0, 513, 514, 515, 674, 516, 517,
	518, 519, 0, 520, 521, 522, 523, 524, 526, 529,
	530, 531, 532, 0, 535, 536, 537, 538, 539, 540,
	541, 543, 544, 545, 547, 548, 549, 707, 550, 551,
	552, 553, 677, 555, 556, 708, 558, 559, 561, 562,
	563, 564, 565, 566, 717, 0, 568, 678, 569, 570,
	571, 572, 573, 0, 575, 576, 577, 578, 579, 580,
	583, 584, 585, 587, 588, 680, 589, 590, 0, 592,
	593, 0, 595, 596, 597, 598, 599, 0, 718, 600,
	682, 601, 683, 602, 603, 604, 605, 606, 607, 608,
	610, 0, 0, 612, 613, 614, 616, 617, 618, 619,
	622, 623, 624, 625, 626, 0, 627, 629, 631, 709,
	686, 687, 688, 689, 690, 692, 693, 694, 695, 632,
	633, 649, 500, 494, 450, 492, 493, 497, 498, 501,
	0, 950, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 824, 1272, 392, 1101, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 829, 0, 835, 0, 841, 0, 611, 0, 831,
	832, 837, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 833, 830, 834, 840, 828, 838, 825, 836,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 822, 827, 0, 843, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 821, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 823, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 947, 826,
	0, 0, 948, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	839, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 949, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 842, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 950, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 824, 0, 392,
	1099, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 829, 0, 835, 0,
	841, 0, 611, 0, 831, 832, 837, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 833, 830, 834,
	840, 828, 838, 825, 836, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 822, 827, 0,
	843, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 821, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 823, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 947, 826, 0, 0, 948, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 839, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 949, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 842, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 950, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 824, 0, 392, 1096, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 829, 0, 835, 0, 841, 0, 611, 0, 831,
	832, 837, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 833, 830, 834, 840, 828, 838, 825, 836,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 822, 827, 0, 843, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 821, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 823, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 947, 826,
	0, 0, 948, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 1094, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	839, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 949, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 842, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 950, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 824, 0, 392,
	429, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 829, 0, 835, 0,
	841, 0, 611, 0, 831, 832, 837, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 833, 830, 834,
	840, 828, 838, 825, 836, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 822, 827, 0,
	843, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 821, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 823, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 947, 826, 0, 0, 948, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 943, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 839, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 949, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 842, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 950, 0, 0, 804, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 824, 0, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 1785, 0, 400,
	0, 829, 0, 835, 0, 841, 0, 611, 0, 831,
	832, 837, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 833, 830, 834, 840, 828, 838, 825, 836,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 822, 827, 0, 843, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 821, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 823, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 826,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	839, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 842, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	429, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 2628, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 950, 0, 0, 804,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 824, 4745, 392,
	429, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 829, 0, 835, 0,
	841, 0, 611, 0, 831, 832, 837, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 833, 830, 834,
	840, 828, 838, 825, 836, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 822, 827, 0,
	843, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 821, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 823, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 826, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 839, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 842, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 4043, 392,
	429, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 818, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 824, 1395, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 829, 0, 835, 0, 841, 0, 611, 0, 831,
	832, 837, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 833, 830, 834, 840, 828, 838, 825, 836,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 822, 827, 0, 843, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 821, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 823, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 826,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	839, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 842, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 950, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 824, 0, 392,
	429, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 829, 0, 835, 0,
	841, 0, 611, 0, 831, 832, 837, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 833, 830, 834,
	840, 828, 838, 825, 836, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 822, 827, 0,
	843, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 821, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 823, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 826, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 839, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 842, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 3476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 824, 0, 392, 429, 0, 0, 0, 489,
	0, 542, 546, 0, 0, 0, 0, 0, 0, 400,
	0, 829, 2835, 835, 0, 841, 0, 611, 0, 831,
	832, 837, 331, 1067, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 833, 830, 834, 840, 828, 838, 825, 836,
	0, 533, 467, 0, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 822, 827, 0, 843, 0, 369, 370, 491,
	351, 499, 0, 0, 554, 512, 510, 0, 477, 534,
	0, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 416, 1069, 0, 628, 1072, 1060, 1052, 1053,
	1054, 1055, 1056, 1057, 0, 1074, 1075, 1076, 1077, 1078,
	621, 1066, 1068, 1051, 1058, 1059, 1061, 2838, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 821, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 0, 823, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 826,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 0, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 0,
	0, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 0, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 0, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 0, 0, 485, 487, 488, 0, 2836, 0,
	839, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 0, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 0, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 2841, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 0, 589, 590, 0, 592, 593, 842, 595, 596,
	597, 598, 599, 0, 718, 600, 0, 601, 0, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 0, 0, 0, 313,
	0, 0, 0, 0, 0, 632, 633, 2837, 500, 494,
	450, 492, 493, 497, 498, 501, 3471, 326, 0, 343,
	0, 0, 392, 2752, 644, 0, 0, 489, 0, 542,
	546, 0, 635, 0, 0, 0, 0, 400, 0, 0,
	0, 0, 0, 3469, 0, 611, 0, 0, 0, 0,
	331, 719, 634, 705, 0, 0, 0, 496, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 533,
	467, 684, 560, 338, 384, 371, 413, 455, 567, 0,
	0, 445, 615, 380, 469, 0, 359, 502, 0, 591,
	466, 0, 574, 594, 0, 486, 365, 525, 581, 582,
	0, 0, 2756, 0, 0, 369, 370, 491, 351, 499,
	696, 662, 554, 512, 510, 0, 477, 534, 691, 0,
	0, 399, 0, 394, 490, 630, 357, 609, 528, 495,
	449, 557, 586, 396, 381, 382, 425, 527, 415, 367,
	620, 659, 663, 661, 657, 654, 658, 655, 656, 660,
	416, 653, 0, 628, 637, 671, 651, 679, 636, 676,
	646, 391, 675, 640, 639, 685, 666, 667, 621, 681,
	652, 650, 643, 642, 638, 0, 316, 317, 318, 319,
	320, 321, 322, 323, 324, 325, 327, 0, 328, 329,
	330, 332, 333, 334, 0, 335, 336, 337, 340, 341,
	342, 344, 704, 345, 346, 347, 348, 349, 350, 641,
	0, 352, 353, 354, 355, 356, 358, 360, 361, 362,
	363, 364, 366, 368, 0, 0, 0, 0, 0, 0,
	0, 372, 373, 374, 375, 376, 377, 0, 378, 379,
	383, 385, 386, 387, 388, 389, 390, 393, 0, 395,
	397, 0, 398, 401, 0, 2762, 403, 404, 405, 406,
	407, 408, 409, 645, 410, 0, 411, 412, 414, 2761,
	417, 418, 419, 420, 421, 0, 422, 647, 648, 423,
	424, 426, 427, 428, 430, 431, 432, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 0, 442, 443, 444,
	446, 0, 447, 448, 451, 452, 453, 454, 0, 456,
	664, 0, 457, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 465, 468, 665, 470, 471, 472, 473, 474,
	475, 476, 706, 478, 479, 480, 481, 482, 483, 484,
	668, 669, 485, 487, 488, 670, 672, 673, 0, 503,
	504, 505, 506, 507, 508, 509, 511, 0, 513, 514,
	515, 674, 516, 517, 518, 519, 2760, 520, 521, 522,
	523, 524, 526, 529, 530, 531, 532, 0, 535, 536,
	537, 538, 539, 540, 541, 543, 544, 545, 547, 548,
	549, 707, 550, 551, 552, 553, 677, 555, 556, 708,
	558, 559, 561, 562, 563, 564, 565, 566, 717, 0,
	568, 678, 569, 570, 571, 572, 573, 0, 575, 576,
	577, 578, 579, 580, 583, 584, 585, 587, 588, 680,
	589, 590, 0, 592, 593, 0, 595, 596, 597, 598,
	599, 0, 718, 600, 682, 601, 683, 602, 603, 604,
	605, 606, 607, 608, 610, 0, 2759, 612, 613, 614,
	616, 617, 618, 619, 622, 623, 624, 625, 626, 0,
	627, 629, 631, 709, 686, 687, 688, 689, 690, 692,
	693, 694, 695, 632, 633, 649, 500, 494, 450, 492,
	493, 497, 498, 501, 313, 0, 0, 0, 2758, 2753,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 343, 0, 0, 392, 429, 644,
	0, 0, 489, 0, 542, 546, 0, 635, 0, 0,
	0, 0, 400, 0, 0, 0, 3433, 0, 0, 0,
	611, 0, 0, 0, 0, 331, 719, 634, 705, 0,
	0, 0, 496, 0, 0, 0, 0, 0, 0, 0,
	339, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 533, 467, 684, 560, 338, 384,
	371, 413, 455, 567, 0, 0, 445, 615, 380, 469,
	0, 359, 502, 0, 591, 466, 0, 574, 594, 0,
	486, 365, 525, 581, 582, 0, 0, 2756, 0, 0,
	369, 370, 491, 351, 499, 696, 662, 554, 512, 510,
	0, 477, 534, 691, 0, 0, 399, 0, 394, 490,
	630, 357, 609, 528, 495, 449, 557, 586, 396, 381,
	382, 425, 527, 415, 367, 620, 659, 663, 661, 657,
	654, 658, 655, 656, 660, 416, 653, 0, 628, 637,
	671, 651, 679, 636, 676, 646, 391, 675, 640, 639,
	685, 666, 667, 621, 681, 652, 650, 643, 642, 638,
	0, 316, 317, 318, 319, 320, 321, 322, 323, 324,
	325, 327, 0, 328, 329, 330, 332, 333, 334, 0,
	335, 336, 337, 340, 341, 342, 344, 704, 345, 346,
	347, 348, 349, 350, 641, 0, 352, 353, 354, 355,
	356, 358, 360, 361, 362, 363, 364, 366, 368, 0,
	0, 0, 0, 0, 0, 0, 372, 373, 374, 375,
	376, 377, 0, 378, 379, 383, 385, 386, 387, 388,
	389, 390, 393, 0, 395, 397, 0, 398, 401, 0,
	2762, 403, 404, 405, 406, 407, 408, 409, 645, 410,
	0, 411, 412, 414, 2761, 417, 418, 419, 420, 421,
	0, 422, 647, 648, 423, 424, 426, 427, 428, 430,
	431, 432, 433, 434, 435, 436, 437, 438, 439, 440,
	441, 0, 442, 443, 444, 446, 0, 447, 448, 451,
	452, 453, 454, 0, 456, 664, 0, 457, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 465, 468, 665,
	470, 471, 472, 473, 474, 475, 476, 706, 478, 479,
	480, 481, 482, 483, 484, 668, 669, 485, 487, 488,
	670, 672, 673, 0, 503, 504, 505, 506, 507, 508,
	509, 511, 0, 513, 514, 515, 674, 516, 517, 518,
	519, 2760, 520, 521, 522, 523, 524, 526, 529, 530,
	531, 532, 0, 535, 536, 537, 538, 539, 540, 541,
	543, 544, 545, 547, 548, 549, 707, 550, 551, 552,
	553, 677, 555, 556, 708, 558, 559, 561, 562, 563,
	564, 565, 566, 717, 0, 568, 678, 569, 570, 571,
	572, 573, 0, 575, 576, 577, 578, 579, 580, 583,
	584, 585, 587, 588, 680, 589, 590, 0, 592, 593,
	0, 595, 596, 597, 598, 599, 0, 718, 600, 682,
	601, 683, 602, 603, 604, 605, 606, 607, 608, 610,
	0, 2759, 612, 613, 614, 616, 617, 618, 619, 622,
	623, 624, 625, 626, 0, 627, 629, 631, 709, 686,
	687, 688, 689, 690, 692, 693, 694, 695, 632, 633,
	649, 500, 494, 450, 492, 493, 497, 498, 501, 313,
	0, 0, 0, 2758, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 343,
	0, 0, 392, 429, 644, 0, 0, 489, 0, 542,
	546, 0, 635, 0, 0, 0, 0, 400, 0, 0,
	0, 0, 0, 0, 0, 611, 0, 0, 0, 0,
	331, 719, 634, 705, 0, 0, 0, 496, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 533,
	467, 684, 560, 338, 384, 371, 413, 455, 567, 0,
	0, 445, 615, 380, 469, 0, 359, 502, 0, 591,
	466, 0, 574, 594, 0, 486, 365, 525, 581, 582,
	0, 0, 2756, 0, 0, 369, 370, 491, 351, 499,
	696, 662, 554, 512, 510, 0, 477, 534, 691, 0,
	0, 399, 0, 394, 490, 630, 357, 609, 528, 495,
	449, 557, 586, 396, 381, 382, 425, 527, 415, 367,
	620, 659, 663, 661, 657, 654, 658, 655, 656, 660,
	416, 653, 0, 628, 637, 671, 651, 679, 636, 676,
	646, 391, 675, 640, 639, 685, 666, 667, 621, 681,
	652, 650, 643, 642, 638, 0, 316, 317, 318, 319,
	320, 321, 322, 323, 324, 325, 327, 0, 328, 329,
	330, 332, 333, 334, 0, 335, 336, 337, 340, 341,
	342, 344, 704, 345, 346, 347, 348, 349, 350, 641,
	0, 352, 353, 354, 355, 356, 358, 360, 361, 362,
	363, 364, 366, 368, 0, 0, 0, 0, 0, 0,
	0, 372, 373, 374, 375, 376, 377, 0, 378, 379,
	383, 385, 386, 387, 388, 389, 390, 393, 0, 395,
	397, 0, 398, 401, 0, 2762, 403, 404, 405, 406,
	407, 408, 409, 645, 410, 0, 411, 412, 414, 2761,
	417, 418, 419, 420, 421, 0, 422, 647, 648, 423,
	424, 426, 427, 428, 430, 431, 432, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 0, 442, 443, 444,
	446, 0, 447, 448, 451, 452, 453, 454, 0, 456,
	664, 0, 457, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 465, 468, 665, 470, 471, 472, 473, 474,
	475, 476, 706, 478, 479, 480, 481, 482, 483, 484,
	668, 669, 485, 487, 488, 670, 672, 673, 0, 503,
	504, 505, 506, 507, 508, 509, 511, 0, 513, 514,
	515, 674, 516, 517, 518, 519, 2760, 520, 521, 522,
	523, 524, 526, 529, 530, 531, 532, 0, 535, 536,
	537, 538, 539, 540, 541, 543, 544, 545, 547, 548,
	549, 707, 550, 551, 552, 553, 677, 555, 556, 708,
	558, 559, 561, 562, 563, 564, 565, 566, 717, 0,
	568, 678, 569, 570, 571, 572, 573, 0, 575, 576,
	577, 578, 579, 580, 583, 584, 585, 587, 588, 680,
	589, 590, 0, 592, 593, 0, 595, 596, 597, 598,
	599, 0, 718, 600, 682, 601, 683, 602, 603, 604,
	605, 606, 607, 608, 610, 0, 2759, 612, 613, 614,
	616, 617, 618, 619, 622, 623, 624, 625, 626, 0,
	627, 629, 631, 709, 686, 687, 688, 689, 690, 692,
	693, 694, 695, 632, 633, 649, 500, 494, 450, 492,
	493, 497, 498, 501, 1070, 0, 0, 0, 2758, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 343, 824, 0, 392, 429, 0,
	0, 0, 489, 0, 542, 546, 0, 0, 0, 0,
	0, 0, 400, 0, 829, 2835, 835, 0, 841, 0,
	611, 0, 831, 832, 837, 331, 1067, 634, 705, 0,
	0, 0, 496, 0, 0, 0, 0, 0, 0, 0,
	339, 0, 0, 0, 0, 833, 830, 834, 840, 828,
	838, 825, 836, 0, 533, 467, 0, 560, 338, 384,
	371, 413, 455, 567, 0, 0, 445, 615, 380, 469,
	0, 359, 502, 0, 591, 466, 0, 574, 594, 0,
	486, 365, 525, 581, 582, 822, 827, 0, 843, 0,
	369, 370, 491, 351, 499, 0, 0, 554, 512, 510,
	0, 477, 534, 0, 0, 0, 399, 0, 394, 490,
	630, 357, 609, 528, 495, 449, 557, 586, 396, 381,
	382, 425, 527, 415, 367, 620, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 416, 1069, 0, 628, 1072,
	1060, 1052, 1053, 1054, 1055, 1056, 1057, 0, 1074, 1075,
	1076, 1077, 1078, 621, 1066, 1068, 1051, 1058, 1059, 1061,
	2838, 316, 317, 318, 319, 320, 321, 322, 323, 324,
	325, 327, 0, 328, 329, 330, 332, 333, 334, 821,
	335, 336, 337, 340, 341, 342, 344, 704, 345, 346,
	347, 348, 349, 350, 0, 823, 352, 353, 354, 355,
	356, 358, 360, 361, 362, 363, 364, 366, 368, 0,
	0, 0, 826, 0, 0, 0, 372, 373, 374, 375,
	376, 377, 0, 378, 379, 383, 385, 386, 387, 388,
	389, 390, 393, 0, 395, 397, 0, 398, 401, 0,
	402, 403, 404, 405, 406, 407, 408, 409, 0, 410,
	0, 411, 412, 414, 0, 417, 418, 419, 420, 421,
	0, 422, 0, 0, 423, 424, 426, 427, 428, 430,
	431, 432, 433, 434, 435, 436, 437, 438, 439, 440,
	441, 0, 442, 443, 444, 446, 0, 447, 448, 451,
	452, 453, 454, 0, 456, 0, 0, 457, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 465, 468, 0,
	470, 471, 472, 473, 474, 475, 476, 706, 478, 479,
	480, 481, 482, 483, 484, 0, 0, 485, 487, 488,
	0, 2836, 0, 839, 503, 504, 505, 506, 507, 508,
	509, 511, 0, 513, 514, 515, 0, 516, 517, 518,
	519, 0, 520, 521, 522, 523, 524, 526, 529, 530,
	531, 532, 0, 535, 536, 537, 538, 539, 540, 541,
	543, 544, 545, 547, 548, 549, 707, 550, 551, 552,
	553, 0, 555, 556, 708, 558, 559, 561, 562, 563,
	564, 565, 566, 717, 0, 568, 2841, 569, 570, 571,
	572, 573, 0, 575, 576, 577, 578, 579, 580, 583,
	584, 585, 587, 588, 0, 589, 590, 0, 592, 593,
	842, 595, 596, 597, 598, 599, 0, 718, 600, 0,
	601, 0, 602, 603, 604, 605, 606, 607, 608, 610,
	0, 0, 612, 613, 614, 616, 617, 618, 619, 622,
	623, 624, 625, 626, 0, 627, 629, 631, 709, 0,
	0, 0, 0, 1070, 0, 0, 0, 0, 632, 633,
	2837, 500, 494, 450, 492, 493, 497, 498, 501, 0,
	0, 326, 0, 343, 824, 0, 392, 429, 0, 0,
	0, 489, 0, 542, 546, 0, 0, 0, 0, 0,
	0, 400, 3456, 829, 2835, 835, 0, 841, 0, 611,
	0, 831, 832, 837, 331, 1067, 634, 705, 0, 0,
	0, 496, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 0, 0, 833, 830, 834, 840, 828, 838,
	825, 836, 0, 533, 467, 0, 560, 338, 384, 371,
	413, 455, 567, 0, 0, 445, 615, 380, 469, 0,
	359, 502, 0, 591, 466, 0, 574, 594, 0, 486,
	365, 525, 581, 582, 822, 827, 0, 843, 0, 369,
	370, 491, 351, 499, 0, 0, 554, 512, 510, 0,
	477, 534, 0, 0, 0, 399, 0, 394, 490, 630,
	357, 609, 528, 495, 449, 557, 586, 396, 381, 382,
	425, 527, 415, 367, 620, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 416, 1069, 0, 628, 1072, 1060,
	1052, 1053, 1054, 1055, 1056, 1057, 0, 1074, 1075, 1076,
	1077, 1078, 621, 1066, 1068, 1051, 1058, 1059, 1061, 2838,
	316, 317, 318, 319, 320, 321, 322, 323, 324, 325,
	327, 0, 328, 329, 330, 332, 333, 334, 821, 335,
	336, 337, 340, 341, 342, 344, 704, 345, 346, 347,
	348, 349, 350, 0, 823, 352, 353, 354, 355, 356,
	358, 360, 361, 362, 363, 364, 366, 368, 0, 0,
	0, 826, 0, 0, 0, 372, 373, 374, 375, 376,
	377, 0, 378, 379, 383, 385, 386, 387, 388, 389,
	390, 393, 0, 395, 397, 0, 398, 401, 0, 402,
	403, 404, 405, 406, 407, 408, 409, 0, 410, 0,
	411, 412, 414, 0, 417, 418, 419, 420, 421, 0,
	422, 0, 0, 423, 424, 426, 427, 428, 430, 431,
	432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	0, 442, 443, 444, 446, 0, 447, 448, 451, 452,
	453, 454, 0, 456, 0, 0, 457, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 465, 468, 0, 470,
	471, 472, 473, 474, 475, 476, 706, 478, 479, 480,
	481, 482, 483, 484, 0, 0, 485, 487, 488, 0,
	2836, 0, 839, 503, 504, 505, 506, 507, 508, 509,
	511, 0, 513, 514, 515, 0, 516, 517, 518, 519,
	0, 520, 521, 522, 523, 524, 526, 529, 530, 531,
	532, 0, 535, 536, 537, 538, 539, 540, 541, 543,
	544, 545, 547, 548, 549, 707, 550, 551, 552, 553,
	0, 555, 556, 708, 558, 559, 561, 562, 563, 564,
	565, 566, 717, 0, 568, 2841, 569, 570, 571, 572,
	573, 0, 575, 576, 577, 578, 579, 580, 583, 584,
	585, 587, 588, 0, 589, 590, 0, 592, 593, 842,
	595, 596, 597, 598, 599, 0, 718, 600, 0, 601,
	0, 602, 603, 604, 605, 606, 607, 608, 610, 0,
	0, 612, 613, 614, 616, 617, 618, 619, 622, 623,
	624, 625, 626, 0, 627, 629, 631, 709, 0, 0,
	0, 313, 0, 0, 0, 0, 0, 632, 633, 2837,
	500, 494, 450, 492, 493, 497, 498, 501, 727, 732,
	0, 343, 0, 731, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 2830, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	729, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 3827, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 730,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 727, 732, 0, 343, 0, 731, 392,
	429, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 729, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 735, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 730, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 727, 732,
	0, 343, 0, 731, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	729, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 730,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2721, 326, 0, 343, 0, 0, 392,
	429, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 864, 2724,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 2728, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	2725, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1832, 326,
	0, 343, 0, 0, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 1818, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 1824, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 1825, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 1820, 417, 1821, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 1826, 1827,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 1828, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 1822, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 1823, 553, 677, 555,
	556, 1829, 558, 559, 561, 562, 1819, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 1830, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 1831, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	429, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 864, 2724,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 2728, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	2725, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 732,
	0, 343, 0, 731, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	729, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 730,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3610, 326, 0, 343, 0, 0, 392,
	429, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 3611, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3601, 326,
	0, 343, 0, 0, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	3602, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 974, 326, 0, 343, 0, 0, 392,
	973, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 864, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 864, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	429, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 5290, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	4163, 343, 0, 0, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	429, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 4892, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 4873,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 4175, 343, 0, 0, 392,
	429, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 4342, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 804,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	429, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 790,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	429, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	3209, 0, 0, 0, 496, 0, 0, 0, 0, 3212,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 3210, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 3208, 596, 3207, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 3211, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 703, 326,
	0, 343, 0, 0, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	1551, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 864, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1549, 326,
	0, 343, 0, 0, 392, 1548, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1216, 326, 0, 343, 0, 0, 392,
	429, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 306, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 1115, 335, 336, 337,
	340, 341, 342, 344, 307, 345, 1114, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 309, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 310, 550, 551, 552, 553, 677, 555,
	556, 308, 558, 559, 561, 562, 563, 564, 565, 566,
	1112, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 302, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 311, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 977, 326, 0, 343, 0, 0, 392,
	976, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 797, 326,
	0, 343, 0, 0, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 796, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 793, 326, 0, 343, 0, 0, 392,
	429, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 760, 326,
	0, 343, 0, 0, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 757, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	759, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 758, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 703, 326, 0, 343, 0, 0, 392,
	429, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 699, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 701, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 700,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 6180, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	429, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 4809, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	429, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 3933, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 3800, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	429, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 306, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 307,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 309,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 310, 550,
	551, 552, 553, 677, 555, 556, 308, 558, 559, 561,
	562, 563, 564, 565, 566, 1112, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 302,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	311, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 306, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 307, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 309, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 310, 550, 551, 552, 553, 677, 555,
	556, 308, 558, 559, 561, 562, 563, 564, 565, 566,
	2881, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 2882, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 311, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	3703, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 3596, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	3594, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 3580, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	429, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 306, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 307,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 309,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 310, 550,
	551, 552, 553, 677, 555, 556, 2921, 558, 559, 561,
	562, 563, 564, 565, 566, 2881, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 2882,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	311, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 306, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 307, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 309, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 310, 550, 551, 552, 553, 677, 555,
	556, 2910, 558, 559, 561, 562, 563, 564, 565, 566,
	2881, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 2882, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 311, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	429, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 306, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 307,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 309,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 310, 550,
	551, 552, 553, 677, 555, 556, 2880, 558, 559, 561,
	562, 563, 564, 565, 566, 2881, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 2882,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	311, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 306, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 307, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 309, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 310, 550, 551, 552, 553, 677, 555,
	556, 308, 558, 559, 561, 562, 563, 564, 565, 566,
	1112, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 2853, 0, 595, 596,
	597, 598, 599, 0, 302, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 311, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	2712, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 2651, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	429, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 1811, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 1761, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	1759, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 1755, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	1466, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 1426, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	1421, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	1415, 343, 0, 0, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	0, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	1092, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 1090, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	1088, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 1037, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	1033, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 1030, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	1024, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 1005, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	981, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 979, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	960, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 942, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	938, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 936, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	910, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 718,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 867, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	429, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 719, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 677, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 722,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 554, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	720, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 0, 0, 392,
	429, 644, 0, 0, 489, 0, 542, 546, 0, 635,
	0, 0, 0, 0, 400, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 0, 331, 306, 634,
	300, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 467, 684, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 0, 0, 0,
	0, 0, 369, 370, 491, 351, 499, 696, 662, 554,
	512, 510, 0, 477, 534, 691, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 659, 663,
	661, 657, 654, 658, 655, 656, 660, 416, 653, 0,
	628, 637, 671, 651, 679, 636, 676, 646, 391, 675,
	640, 639, 685, 666, 667, 621, 681, 652, 650, 643,
	642, 638, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 0, 335, 336, 337, 340, 341, 342, 344, 307,
	345, 346, 347, 348, 349, 350, 641, 0, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 0, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	645, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 647, 648, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 664, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 665, 470, 471, 472, 473, 474, 475, 476, 309,
	478, 479, 480, 481, 482, 483, 484, 668, 669, 485,
	487, 488, 670, 672, 673, 0, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 674, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 310, 550,
	551, 552, 553, 677, 555, 556, 308, 558, 559, 561,
	562, 563, 564, 565, 566, 301, 0, 568, 678, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 680, 589, 590, 0,
	592, 593, 0, 595, 596, 597, 598, 599, 0, 302,
	600, 682, 601, 683, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	311, 686, 687, 688, 689, 690, 692, 693, 694, 695,
	632, 633, 649, 500, 494, 450, 492, 493, 497, 498,
	501, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 343, 0, 0, 392, 429, 644, 0, 0, 489,
	0, 542, 546, 0, 635, 0, 0, 0, 0, 400,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 331, 719, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 467, 684, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 0, 0, 0, 0, 0, 369, 370, 491,
	351, 499, 696, 662, 0, 512, 510, 0, 477, 534,
	691, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 659, 663, 661, 657, 654, 658, 655,
	656, 660, 416, 653, 0, 628, 637, 671, 651, 679,
	636, 676, 646, 391, 675, 640, 639, 685, 666, 667,
	621, 681, 652, 650, 643, 642, 638, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 0, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 641, 0, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 0,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 645, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 647,
	648, 0, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 664, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 665, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 668, 669, 485, 487, 488, 670, 672, 673,
	0, 503, 504, 505, 506, 507, 508, 0, 511, 0,
	513, 514, 515, 674, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 0, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 677, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 678, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 680, 589, 590, 0, 592, 593, 0, 595, 596,
	597, 598, 599, 0, 718, 600, 682, 601, 683, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 686, 687, 688, 689,
	690, 692, 693, 694, 695, 632, 633, 649, 500, 494,
	450, 492, 493, 497, 498, 501, 1070, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 343, 824, 0, 392,
	429, 0, 0, 0, 489, 0, 542, 546, 0, 0,
	0, 0, 0, 0, 400, 0, 829, 2835, 835, 0,
	841, 0, 611, 0, 831, 832, 837, 331, 1067, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 833, 830, 834,
	840, 828, 838, 825, 836, 0, 533, 467, 0, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 822, 827, 0,
	843, 0, 369, 370, 491, 351, 499, 0, 0, 554,
	512, 510, 0, 477, 534, 0, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 416, 1069, 0,
	628, 1072, 1060, 1052, 1053, 1054, 1055, 1056, 1057, 0,
	1074, 1075, 1076, 1077, 1078, 621, 1066, 1068, 1051, 1058,
	1059, 1061, 2838, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 821, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 0, 823, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 826, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	0, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 0, 0, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 0, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 0, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 0, 0, 485,
	487, 488, 0, 2836, 0, 839, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 0, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 0, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 2841, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 0, 589, 590, 0,
	592, 593, 842, 595, 596, 597, 598, 599, 0, 718,
	600, 0, 601, 0, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 0, 0, 1070, 0, 0, 0, 0, 0, 0,
	632, 633, 2837, 500, 494, 450, 492, 493, 497, 498,
	501, 326, 0, 343, 824, 0, 392, 429, 0, 0,
	0, 489, 0, 542, 546, 0, 0, 0, 0, 0,
	0, 400, 0, 829, 0, 835, 2886, 841, 0, 611,
	0, 831, 832, 837, 331, 1067, 634, 705, 0, 0,
	0, 496, 0, 0, 0, 0, 4211, 0, 0, 339,
	0, 0, 0, 0, 833, 830, 834, 840, 828, 838,
	825, 836, 0, 533, 467, 0, 560, 338, 384, 371,
	413, 455, 567, 0, 0, 445, 615, 380, 469, 0,
	359, 502, 0, 591, 466, 0, 574, 594, 0, 486,
	365, 525, 581, 582, 822, 827, 0, 843, 0, 369,
	370, 491, 351, 499, 0, 0, 554, 512, 510, 0,
	477, 534, 0, 0, 0, 399, 0, 394, 490, 630,
	357, 609, 528, 495, 449, 557, 586, 396, 381, 382,
	425, 527, 415, 367, 620, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 416, 1069, 0, 628, 1072, 1060,
	1052, 1053, 1054, 1055, 1056, 1057, 0, 1074, 1075, 1076,
	1077, 1078, 621, 1066, 1068, 1051, 1058, 1059, 1061, 0,
	316, 317, 318, 319, 320, 321, 322, 323, 324, 325,
	327, 0, 328, 329, 330, 332, 333, 334, 821, 335,
	336, 337, 340, 341, 342, 344, 704, 345, 346, 347,
	348, 349, 350, 0, 823, 352, 353, 354, 355, 356,
	358, 360, 361, 362, 363, 364, 366, 368, 0, 0,
	0, 826, 0, 0, 0, 372, 373, 374, 375, 376,
	377, 0, 378, 379, 383, 385, 386, 387, 388, 389,
	390, 393, 0, 395, 397, 0, 398, 401, 0, 402,
	403, 404, 405, 406, 407, 408, 409, 0, 410, 0,
	411, 412, 414, 0, 417, 418, 419, 420, 421, 0,
	422, 0, 0, 423, 424, 426, 427, 428, 430, 431,
	432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	0, 442, 443, 444, 446, 0, 447, 448, 451, 452,
	453, 454, 0, 456, 0, 0, 457, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 465, 468, 0, 470,
	471, 472, 473, 474, 475, 476, 706, 478, 479, 480,
	481, 482, 483, 484, 0, 0, 485, 487, 488, 0,
	0, 0, 839, 503, 504, 505, 506, 507, 508, 509,
	511, 0, 513, 514, 515, 0, 516, 517, 518, 519,
	0, 520, 521, 522, 523, 524, 526, 529, 530, 531,
	532, 0, 535, 536, 537, 538, 539, 540, 541, 543,
	544, 545, 547, 548, 549, 707, 550, 551, 552, 553,
	0, 555, 556, 708, 558, 559, 561, 562, 563, 564,
	565, 566, 717, 0, 568, 2841, 569, 570, 571, 572,
	573, 0, 575, 576, 577, 578, 579, 580, 583, 584,
	585, 587, 588, 0, 589, 590, 0, 592, 593, 842,
	595, 596, 597, 598, 599, 0, 718, 600, 0, 601,
	0, 602, 603, 604, 605, 606, 607, 608, 610, 0,
	0, 612, 613, 614, 616, 617, 618, 619, 622, 623,
	624, 625, 626, 0, 627, 629, 631, 709, 0, 0,
	1070, 0, 0, 0, 0, 0, 0, 632, 633, 0,
	500, 494, 450, 492, 493, 497, 498, 501, 326, 0,
	343, 824, 0, 392, 429, 0, 0, 0, 489, 0,
	542, 546, 0, 0, 0, 0, 0, 0, 400, 0,
	829, 0, 835, 0, 841, 0, 611, 0, 831, 832,
	837, 331, 1067, 634, 705, 0, 0, 0, 496, 0,
	0, 0, 0, 0, 0, 0, 339, 0, 0, 0,
	0, 833, 830, 834, 840, 828, 838, 825, 836, 0,
	533, 467, 0, 560, 338, 384, 371, 413, 455, 567,
	0, 0, 445, 615, 380, 469, 0, 359, 502, 0,
	591, 466, 0, 574, 594, 0, 486, 365, 525, 581,
	582, 822, 827, 0, 843, 0, 369, 370, 491, 351,
	499, 0, 0, 554, 512, 510, 6214, 477, 534, 0,
	0, 0, 399, 0, 394, 490, 630, 357, 609, 528,
	495, 449, 557, 586, 396, 381, 382, 425, 527, 415,
	367, 620, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 416, 1069, 0, 628, 1072, 1060, 1052, 1053, 1054,
	1055, 1056, 1057, 0, 1074, 1075, 1076, 1077, 1078, 621,
	1066, 1068, 1051, 1058, 1059, 1061, 0, 316, 317, 318,
	319, 320, 321, 322, 323, 324, 325, 327, 0, 328,
	329, 330, 332, 333, 334, 821, 335, 336, 337, 340,
	341, 342, 344, 704, 345, 346, 347, 348, 349, 350,
	0, 823, 352, 353, 354, 355, 356, 358, 360, 361,
	362, 363, 364, 366, 368, 0, 0, 0, 826, 0,
	0, 0, 372, 373, 374, 375, 376, 377, 0, 378,
	379, 383, 385, 386, 387, 388, 389, 390, 393, 0,
	395, 397, 0, 398, 401, 0, 402, 403, 404, 405,
	406, 407, 408, 409, 0, 410, 0, 411, 412, 414,
	0, 417, 418, 419, 420, 421, 0, 422, 0, 0,
	423, 424, 426, 427, 428, 430, 431, 432, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 0, 442, 443,
	444, 446, 0, 447, 448, 451, 452, 453, 454, 0,
	456, 0, 0, 457, 458, 459, 0, 0, 460, 461,
	462, 463, 464, 465, 468, 0, 470, 471, 472, 473,
	474, 475, 476, 706, 478, 479, 480, 481, 482, 483,
	484, 0, 0, 485, 487, 488, 0, 0, 0, 839,
	503, 504, 505, 506, 507, 508, 509, 511, 0, 513,
	514, 515, 0, 516, 517, 518, 519, 0, 520, 521,
	522, 523, 524, 526, 529, 530, 531, 532, 0, 535,
	536, 537, 538, 539, 540, 541, 543, 544, 545, 547,
	548, 549, 707, 550, 551, 552, 553, 0, 555, 556,
	708, 558, 559, 561, 562, 563, 564, 565, 566, 717,
	0, 568, 1042, 569, 570, 571, 572, 573, 0, 575,
	576, 577, 578, 579, 580, 583, 584, 585, 587, 588,
	0, 589, 590, 0, 592, 593, 842, 595, 596, 597,
	598, 599, 0, 718, 600, 0, 601, 0, 602, 603,
	604, 605, 606, 607, 608, 610, 0, 0, 612, 613,
	614, 616, 617, 618, 619, 622, 623, 624, 625, 626,
	0, 627, 629, 631, 709, 0, 0, 1070, 0, 0,
	0, 0, 0, 0, 632, 633, 0, 500, 494, 450,
	492, 493, 497, 498, 501, 326, 0, 343, 824, 0,
	392, 429, 0, 0, 0, 489, 0, 542, 546, 0,
	0, 0, 0, 0, 0, 400, 0, 829, 0, 835,
	0, 841, 0, 611, 0, 831, 832, 837, 331, 1067,
	634, 705, 0, 0, 0, 496, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 0, 0, 833, 830,
	834, 840, 828, 838, 825, 836, 0, 533, 467, 0,
	560, 338, 384, 371, 413, 455, 567, 0, 0, 445,
	615, 380, 469, 0, 359, 502, 0, 591, 466, 0,
	574, 594, 0, 486, 365, 525, 581, 582, 822, 827,
	0, 843, 0, 369, 370, 491, 351, 499, 0, 0,
	554, 512, 510, 5883, 477, 534, 0, 0, 0, 399,
	0, 394, 490, 630, 357, 609, 528, 495, 449, 557,
	586, 396, 381, 382, 425, 527, 415, 367, 620, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 416, 1069,
	0, 628, 1072, 1060, 1052, 1053, 1054, 1055, 1056, 1057,
	0, 1074, 1075, 1076, 1077, 1078, 621, 1066, 1068, 1051,
	1058, 1059, 1061, 0, 316, 317, 318, 319, 320, 321,
	322, 323, 324, 325, 327, 0, 328, 329, 330, 332,
	333, 334, 821, 335, 336, 337, 340, 341, 342, 344,
	704, 345, 346, 347, 348, 349, 350, 0, 823, 352,
	353, 354, 355, 356, 358, 360, 361, 362, 363, 364,
	366, 368, 0, 0, 0, 826, 0, 0, 0, 372,
	373, 374, 375, 376, 377, 0, 378, 379, 383, 385,
	386, 387, 388, 389, 390, 393, 0, 395, 397, 0,
	398, 401, 0, 402, 403, 404, 405, 406, 407, 408,
	409, 0, 410, 0, 411, 412, 414, 0, 417, 418,
	419, 420, 421, 0, 422, 0, 0, 423, 424, 426,
	427, 428, 430, 431, 432, 433, 434, 435, 436, 437,
	438, 439, 440, 441, 0, 442, 443, 444, 446, 0,
	447, 448, 451, 452, 453, 454, 0, 456, 0, 0,
	457, 458, 459, 0, 0, 460, 461, 462, 463, 464,
	465, 468, 0, 470, 471, 472, 473, 474, 475, 476,
	706, 478, 479, 480, 481, 482, 483, 484, 0, 0,
	485, 487, 488, 0, 0, 0, 839, 503, 504, 505,
	506, 507, 508, 509, 511, 0, 513, 514, 515, 0,
	516, 517, 518, 519, 0, 520, 521, 522, 523, 524,
	526, 529, 530, 531, 532, 0, 535, 536, 537, 538,
	539, 540, 541, 543, 544, 545, 547, 548, 549, 707,
	550, 551, 552, 553, 0, 555, 556, 708, 558, 559,
	561, 562, 563, 564, 565, 566, 717, 0, 568, 1042,
	569, 570, 571, 572, 573, 0, 575, 576, 577, 578,
	579, 580, 583, 584, 585, 587, 588, 0, 589, 590,
	0, 592, 593, 842, 595, 596, 597, 598, 599, 0,
	718, 600, 0, 601, 0, 602, 603, 604, 605, 606,
	607, 608, 610, 0, 0, 612, 613, 614, 616, 617,
	618, 619, 622, 623, 624, 625, 626, 0, 627, 629,
	631, 709, 0, 0, 1070, 0, 0, 0, 0, 0,
	0, 632, 633, 0, 500, 494, 450, 492, 493, 497,
	498, 501, 326, 0, 343, 824, 0, 392, 429, 0,
	0, 0, 489, 0, 542, 546, 0, 0, 0, 0,
	0, 0, 400, 0, 829, 0, 835, 0, 841, 0,
	611, 0, 831, 832, 837, 331, 1067, 634, 705, 0,
	0, 0, 496, 0, 0, 0, 0, 0, 0, 0,
	339, 0, 0, 0, 0, 833, 830, 834, 840, 828,
	838, 825, 836, 0, 533, 467, 0, 560, 338, 384,
	371, 413, 455, 567, 0, 0, 445, 615, 380, 469,
	0, 359, 502, 0, 591, 466, 0, 574, 594, 0,
	486, 365, 525, 581, 582, 822, 827, 0, 843, 0,
	369, 370, 491, 351, 499, 0, 0, 554, 512, 510,
	0, 477, 534, 0, 0, 0, 399, 0, 394, 490,
	630, 357, 609, 528, 495, 449, 557, 586, 396, 381,
	382, 425, 527, 415, 367, 620, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 416, 1069, 0, 628, 1072,
	1060, 1052, 1053, 1054, 1055, 1056, 1057, 0, 1074, 1075,
	1076, 1077, 1078, 621, 1066, 1068, 1051, 1058, 1059, 1061,
	0, 316, 317, 318, 319, 320, 321, 322, 323, 324,
	325, 327, 0, 328, 329, 330, 332, 333, 334, 821,
	335, 336, 337, 340, 341, 342, 344, 704, 345, 346,
	347, 348, 349, 350, 0, 823, 352, 353, 354, 355,
	356, 358, 360, 361, 362, 363, 364, 366, 368, 0,
	0, 0, 826, 0, 0, 0, 372, 373, 374, 375,
	376, 377, 0, 378, 379, 383, 385, 386, 387, 388,
	389, 390, 393, 0, 395, 397, 0, 398, 401, 0,
	402, 403, 404, 405, 406, 407, 408, 409, 0, 410,
	0, 411, 412, 414, 0, 417, 418, 419, 420, 421,
	0, 422, 0, 0, 423, 424, 426, 427, 428, 430,
	431, 432, 433, 434, 435, 436, 437, 438, 439, 440,
	441, 0, 442, 443, 444, 446, 0, 447, 448, 451,
	452, 453, 454, 0, 456, 0, 0, 457, 458, 459,
	0, 0, 460, 461, 462, 463, 464, 465, 468, 0,
	470, 471, 472, 473, 474, 475, 476, 706, 478, 479,
	480, 481, 482, 483, 484, 4461, 0, 485, 487, 488,
	0, 0, 0, 839, 503, 504, 505, 506, 507, 508,
	509, 511, 0, 513, 514, 515, 0, 516, 517, 518,
	519, 0, 520, 521, 522, 523, 524, 526, 529, 530,
	531, 532, 0, 535, 536, 537, 538, 539, 540, 541,
	543, 544, 545, 547, 548, 549, 707, 550, 551, 552,
	553, 0, 555, 556, 708, 558, 559, 561, 562, 563,
	564, 565, 566, 717, 0, 568, 1042, 569, 570, 571,
	572, 573, 0, 575, 576, 577, 578, 579, 580, 583,
	584, 585, 587, 588, 0, 589, 590, 0, 592, 593,
	842, 595, 596, 597, 598, 599, 0, 718, 600, 0,
	601, 0, 602, 603, 604, 605, 606, 607, 608, 610,
	0, 0, 612, 613, 614, 616, 617, 618, 619, 622,
	623, 624, 625, 626, 0, 627, 629, 631, 709, 0,
	0, 1070, 0, 0, 0, 0, 0, 0, 632, 633,
	0, 500, 494, 450, 492, 493, 497, 498, 501, 326,
	0, 343, 824, 0, 392, 429, 0, 0, 0, 489,
	0, 542, 546, 0, 0, 0, 0, 0, 0, 400,
	0, 829, 0, 835, 0, 841, 0, 611, 0, 831,
	832, 837, 331, 1067, 634, 705, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 833, 830, 834, 840, 828, 838, 825, 836,
	0, 533, 467, 0, 560, 338, 384, 371, 413, 455,
	567, 0, 0, 445, 615, 380, 469, 0, 359, 502,
	0, 591, 466, 0, 574, 594, 0, 486, 365, 525,
	581, 582, 822, 827, 0, 843, 0, 369, 370, 491,
	351, 499, 0, 0, 554, 512, 510, 0, 477, 534,
	0, 0, 0, 399, 0, 394, 490, 630, 357, 609,
	528, 495, 449, 557, 586, 396, 381, 382, 425, 527,
	415, 367, 620, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 416, 1069, 0, 628, 1072, 1060, 1052, 1053,
	1054, 1055, 1056, 1057, 0, 1074, 1075, 1076, 1077, 1078,
	621, 1066, 1068, 1051, 1058, 1059, 1061, 0, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 327, 0,
	328, 329, 330, 332, 333, 334, 821, 335, 336, 337,
	340, 341, 342, 344, 704, 345, 346, 347, 348, 349,
	350, 0, 823, 352, 353, 354, 355, 356, 358, 360,
	361, 362, 363, 364, 366, 368, 0, 0, 0, 826,
	0, 0, 0, 372, 373, 374, 375, 376, 377, 0,
	378, 379, 383, 385, 386, 387, 388, 389, 390, 393,
	0, 395, 397, 0, 398, 401, 0, 402, 403, 404,
	405, 406, 407, 408, 409, 0, 410, 0, 411, 412,
	414, 0, 417, 418, 419, 420, 421, 0, 422, 0,
	0, 423, 424, 426, 427, 428, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 0, 442,
	443, 444, 446, 0, 447, 448, 451, 452, 453, 454,
	0, 456, 0, 0, 457, 458, 459, 0, 0, 460,
	461, 462, 463, 464, 465, 468, 0, 470, 471, 472,
	473, 474, 475, 476, 706, 478, 479, 480, 481, 482,
	483, 484, 2905, 0, 485, 487, 488, 0, 0, 0,
	839, 503, 504, 505, 506, 507, 508, 509, 511, 0,
	513, 514, 515, 0, 516, 517, 518, 519, 0, 520,
	521, 522, 523, 524, 526, 529, 530, 531, 532, 0,
	535, 536, 537, 538, 539, 540, 541, 543, 544, 545,
	547, 548, 549, 707, 550, 551, 552, 553, 0, 555,
	556, 708, 558, 559, 561, 562, 563, 564, 565, 566,
	717, 0, 568, 1042, 569, 570, 571, 572, 573, 0,
	575, 576, 577, 578, 579, 580, 583, 584, 585, 587,
	588, 0, 589, 590, 0, 592, 593, 842, 595, 596,
	597, 598, 599, 0, 718, 600, 0, 601, 0, 602,
	603, 604, 605, 606, 607, 608, 610, 0, 0, 612,
	613, 614, 616, 617, 618, 619, 622, 623, 624, 625,
	626, 0, 627, 629, 631, 709, 0, 0, 1070, 0,
	0, 0, 0, 0, 0, 632, 633, 0, 500, 494,
	450, 492, 493, 497, 498, 501, 326, 0, 343, 824,
	0, 392, 429, 0, 0, 0, 489, 0, 542, 546,
	0, 0, 0, 0, 0, 0, 400, 0, 829, 0,
	835, 0, 841, 0, 611, 0, 831, 832, 837, 331,
	1067, 634, 705, 0, 0, 0, 496, 0, 0, 0,
	0, 0, 0, 0, 339, 0, 0, 0, 0, 833,
	830, 834, 840, 828, 838, 825, 836, 0, 533, 467,
	0, 560, 338, 384, 371, 413, 455, 567, 0, 0,
	445, 615, 380, 469, 0, 359, 502, 0, 591, 466,
	0, 574, 594, 0, 486, 365, 525, 581, 582, 822,
	827, 0, 843, 0, 369, 370, 491, 351, 499, 0,
	0, 554, 512, 510, 0, 477, 534, 0, 0, 0,
	399, 0, 394, 490, 630, 357, 609, 528, 495, 449,
	557, 586, 396, 381, 382, 425, 527, 415, 367, 620,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 416,
	1069, 0, 628, 1072, 1060, 1052, 1053, 1054, 1055, 1056,
	1057, 0, 1074, 1075, 1076, 1077, 1078, 621, 1066, 1068,
	1051, 1058, 1059, 1061, 0, 316, 317, 318, 319, 320,
	321, 322, 323, 324, 325, 327, 0, 328, 329, 330,
	332, 333, 334, 821, 335, 336, 337, 340, 341, 342,
	344, 704, 345, 346, 347, 348, 349, 350, 0, 823,
	352, 353, 354, 355, 356, 358, 360, 361, 362, 363,
	364, 366, 368, 0, 0, 0, 826, 0, 0, 0,
	372, 373, 374, 375, 376, 377, 0, 378, 379, 383,
	385, 386, 387, 388, 389, 390, 393, 0, 395, 397,
	0, 398, 401, 0, 402, 403, 404, 405, 406, 407,
	408, 409, 0, 410, 0, 411, 412, 414, 0, 417,
	418, 419, 420, 421, 0, 422, 0, 0, 423, 424,
	426, 427, 428, 430, 431, 432, 433, 434, 435, 436,
	437, 438, 439, 440, 441, 0, 442, 443, 444, 446,
	0, 447, 448, 451, 452, 453, 454, 0, 456, 0,
	0, 457, 458, 459, 0, 0, 460, 461, 462, 463,
	464, 465, 468, 0, 470, 471, 472, 473, 474, 475,
	476, 706, 478, 479, 480, 481, 482, 483, 484, 0,
	0, 485, 487, 488, 0, 0, 0, 839, 503, 504,
	505, 506, 507, 508, 509, 511, 0, 513, 514, 515,
	0, 516, 517, 518, 519, 0, 520, 521, 522, 523,
	524, 526, 529, 530, 531, 532, 0, 535, 536, 537,
	538, 539, 540, 541, 543, 544, 545, 547, 548, 549,
	707, 550, 551, 552, 553, 0, 555, 556, 708, 558,
	559, 561, 562, 563, 564, 565, 566, 717, 0, 568,
	1042, 569, 570, 571, 572, 573, 0, 575, 576, 577,
	578, 579, 580, 583, 584, 585, 587, 588, 0, 589,
	590, 0, 592, 593, 842, 595, 596, 597, 598, 599,
	0, 718, 600, 0, 601, 0, 602, 603, 604, 605,
	606, 607, 608, 610, 0, 0, 612, 613, 614, 616,
	617, 618, 619, 622, 623, 624, 625, 626, 0, 627,
	629, 631, 709, 0, 0, 1070, 0, 0, 0, 0,
	0, 0, 632, 633, 0, 500, 494, 450, 492, 493,
	497, 498, 501, 326, 0, 343, 824, 0, 392, 429,
	0, 0, 0, 489, 0, 542, 546, 0, 0, 0,
	0, 0, 0, 400, 0, 829, 0, 835, 0, 841,
	0, 611, 0, 831, 832, 837, 331, 1067, 634, 705,
	0, 0, 0, 496, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 0, 0, 833, 830, 834, 840,
	828, 838, 825, 836, 0, 533, 467, 0, 560, 338,
	384, 371, 413, 455, 567, 0, 0, 445, 615, 380,
	469, 0, 359, 502, 0, 591, 466, 0, 574, 594,
	0, 486, 365, 525, 581, 582, 822, 827, 0, 843,
	0, 369, 370, 491, 351, 499, 0, 0, 554, 512,
	510, 0, 477, 534, 0, 0, 0, 399, 0, 394,
	490, 630, 357, 609, 528, 495, 449, 557, 586, 396,
	381, 382, 425, 527, 415, 367, 620, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 416, 1069, 0, 628,
	1072, 1060, 1052, 1053, 1054, 1055, 1056, 1057, 0, 1074,
	1075, 1076, 1077, 1078, 621, 1066, 1068, 1051, 1058, 1059,
	1061, 0, 316, 317, 318, 319, 320, 321, 322, 323,
	324, 325, 327, 0, 328, 329, 330, 332, 333, 334,
	821, 335, 336, 337, 340, 341, 342, 344, 704, 345,
	346, 347, 348, 349, 350, 0, 823, 352, 353, 354,
	355, 356, 358, 360, 361, 362, 363, 364, 366, 368,
	0, 0, 0, 826, 0, 0, 0, 372, 373, 374,
	375, 376, 377, 0, 378, 379, 383, 385, 386, 387,
	388, 389, 390, 393, 0, 395, 397, 0, 398, 401,
	0, 402, 403, 404, 405, 406, 407, 408, 409, 0,
	410, 0, 411, 412, 414, 0, 417, 418, 419, 420,
	421, 0, 422, 0, 0, 423, 424, 426, 427, 428,
	430, 431, 432, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 0, 442, 443, 444, 446, 0, 447, 448,
	451, 452, 453, 454, 0, 456, 0, 0, 457, 458,
	459, 0, 0, 460, 461, 462, 463, 464, 465, 468,
	0, 470, 471, 472, 473, 474, 475, 476, 706, 478,
	479, 480, 481, 482, 483, 484, 0, 0, 485, 487,
	488, 0, 0, 0, 839, 503, 504, 505, 506, 507,
	508, 509, 511, 0, 513, 514, 515, 0, 516, 517,
	518, 519, 0, 520, 521, 522, 523, 524, 526, 529,
	530, 531, 532, 0, 535, 536, 537, 538, 539, 540,
	541, 543, 544, 545, 547, 548, 549, 707, 550, 551,
	552, 553, 0, 555, 556, 708, 558, 559, 561, 562,
	563, 564, 565, 566, 717, 0, 568, 2841, 569, 570,
	571, 572, 573, 0, 575, 576, 577, 578, 579, 580,
	583, 584, 585, 587, 588, 0, 589, 590, 0, 592,
	593, 842, 595, 596, 597, 598, 599, 0, 718, 600,
	0, 601, 0, 602, 603, 604, 605, 606, 607, 608,
	610, 0, 0, 612, 613, 614, 616, 617, 618, 619,
	622, 623, 624, 625, 626, 0, 627, 629, 631, 709,
	0, 0, 1070, 0, 0, 0, 0, 0, 0, 632,
	633, 0, 500, 494, 450, 492, 493, 497, 498, 501,
	326, 0, 343, 824, 0, 392, 1080, 0, 0, 0,
	489, 0, 542, 546, 0, 0, 0, 0, 0, 0,
	400, 0, 829, 0, 835, 0, 841, 0, 611, 0,
	831, 832, 837, 331, 1067, 634, 705, 0, 0, 0,
	496, 0, 0, 0, 0, 0, 0, 0, 339, 0,
	0, 0, 0, 833, 830, 834, 840, 828, 838, 825,
	836, 0, 533, 467, 0, 560, 338, 384, 371, 413,
	455, 567, 0, 0, 445, 615, 380, 469, 0, 359,
	502, 0, 591, 466, 0, 574, 594, 0, 486, 365,
	525, 581, 582, 822, 827, 0, 843, 0, 369, 370,
	491, 351, 499, 0, 0, 554, 512, 510, 0, 477,
	534, 0, 0, 0, 399, 0, 394, 490, 630, 357,
	609, 528, 495, 449, 557, 586, 396, 381, 382, 425,
	527, 415, 367, 620, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 416, 1069, 0, 628, 1072, 1060, 1052,
	1053, 1054, 1055, 1056, 1057, 0, 1074, 1075, 1076, 1077,
	1078, 621, 1066, 1068, 1051, 1058, 1059, 1061, 0, 316,
	317, 318, 319, 320, 321, 322, 323, 324, 325, 327,
	0, 328, 329, 330, 332, 333, 334, 821, 335, 336,
	337, 340, 341, 342, 344, 704, 345, 346, 347, 348,
	349, 350, 0, 823, 352, 353, 354, 355, 356, 358,
	360, 361, 362, 363, 364, 366, 368, 0, 0, 0,
	826, 0, 0, 0, 372, 373, 374, 375, 376, 377,
	0, 378, 379, 383, 385, 386, 387, 388, 389, 390,
	393, 0, 395, 397, 0, 398, 401, 0, 402, 403,
	404, 405, 406, 407, 408, 409, 0, 410, 0, 411,
	412, 414, 0, 417, 418, 419, 420, 421, 0, 422,
	0, 0, 423, 424, 426, 427, 428, 430, 431, 432,
	433, 434, 435, 436, 437, 438, 439, 440, 441, 0,
	442, 443, 444, 446, 0, 447, 448, 451, 452, 453,
	454, 0, 456, 0, 0, 457, 458, 459, 0, 0,
	460, 461, 462, 463, 464, 465, 468, 0, 470, 471,
	472, 473, 474, 475, 476, 706, 478, 479, 480, 481,
	482, 483, 484, 0, 0, 485, 487, 488, 0, 0,
	0, 839, 503, 504, 505, 506, 507, 508, 509, 511,
	0, 513, 514, 515, 0, 516, 517, 518, 519, 0,
	520, 521, 522, 523, 524, 526, 529, 530, 531, 532,
	0, 535, 536, 537, 538, 539, 540, 541, 543, 544,
	545, 547, 548, 549, 707, 550, 551, 552, 553, 0,
	555, 556, 708, 558, 559, 561, 562, 563, 564, 565,
	566, 717, 0, 568, 1042, 569, 570, 571, 572, 573,
	0, 575, 576, 577, 578, 579, 580, 583, 584, 585,
	587, 588, 0, 589, 590, 0, 592, 593, 842, 595,
	596, 597, 598, 599, 0, 718, 600, 0, 601, 0,
	602, 603, 604, 605, 606, 607, 608, 610, 0, 0,
	612, 613, 614, 616, 617, 618, 619, 622, 623, 624,
	625, 626, 0, 627, 629, 631, 709, 0, 0, 1070,
	0, 0, 0, 0, 0, 0, 632, 633, 0, 500,
	494, 450, 492, 493, 497, 498, 501, 326, 0, 343,
	824, 0, 392, 1039, 0, 0, 0, 489, 0, 542,
	546, 0, 0, 0, 0, 0, 0, 400, 0, 829,
	0, 835, 0, 841, 0, 611, 0, 831, 832, 837,
	331, 1067, 634, 705, 0, 0, 0, 496, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 0, 0,
	833, 830, 834, 840, 828, 838, 825, 836, 0, 533,
	467, 0, 560, 338, 384, 371, 413, 455, 567, 0,
	0, 445, 615, 380, 469, 0, 359, 502, 0, 591,
	466, 0, 574, 594, 0, 486, 365, 525, 581, 582,
	822, 827, 0, 843, 0, 369, 370, 491, 351, 499,
	0, 0, 554, 512, 510, 0, 477, 534, 0, 0,
	0, 399, 0, 394, 490, 630, 357, 609, 528, 495,
	449, 557, 586, 396, 381, 382, 425, 527, 415, 367,
	620, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	416, 1069, 0, 628, 1072, 1060, 1052, 1053, 1054, 1055,
	1056, 1057, 0, 1074, 1075, 1076, 1077, 1078, 621, 1066,
	1068, 1051, 1058, 1059, 1061, 0, 316, 317, 318, 319,
	320, 321, 322, 323, 324, 325, 327, 0, 328, 329,
	330, 332, 333, 334, 821, 335, 336, 337, 340, 341,
	342, 344, 704, 345, 346, 347, 348, 349, 350, 0,
	823, 352, 353, 354, 355, 356, 358, 360, 361, 362,
	363, 364, 366, 368, 0, 0, 0, 826, 0, 0,
	0, 372, 373, 374, 375, 376, 377, 0, 378, 379,
	383, 385, 386, 387, 388, 389, 390, 393, 0, 395,
	397, 0, 398, 401, 0, 402, 403, 404, 405, 406,
	407, 408, 409, 0, 410, 0, 411, 412, 414, 0,
	417, 418, 419, 420, 421, 0, 422, 0, 0, 423,
	424, 426, 427, 428, 430, 431, 432, 433, 434, 435,
	436, 437, 438, 439, 440, 441, 0, 442, 443, 444,
	446, 0, 447, 448, 451, 452, 453, 454, 0, 456,
	0, 0, 457, 458, 459, 0, 0, 460, 461, 462,
	463, 464, 465, 468, 0, 470, 471, 472, 473, 474,
	475, 476, 706, 478, 479, 480, 481, 482, 483, 484,
	0, 0, 485, 487, 488, 0, 0, 0, 839, 503,
	504, 505, 506, 507, 508, 509, 511, 0, 513, 514,
	515, 0, 516, 517, 518, 519, 0, 520, 521, 522,
	523, 524, 526, 529, 530, 531, 532, 0, 535, 536,
	537, 538, 539, 540, 541, 543, 544, 545, 547, 548,
	549, 707, 550, 551, 552, 553, 0, 555, 556, 708,
	558, 559, 561, 562, 563, 564, 565, 566, 717, 0,
	568, 1042, 569, 570, 571, 572, 573, 0, 575, 576,
	577, 578, 579, 580, 583, 584, 585, 587, 588, 0,
	589, 590, 0, 592, 593, 842, 595, 596, 597, 598,
	599, 0, 718, 600, 0, 601, 0, 602, 603, 604,
	605, 606, 607, 608, 610, 0, 0, 612, 613, 614,
	616, 617, 618, 619, 622, 623, 624, 625, 626, 0,
	627, 629, 631, 709, 0, 0, 1070, 0, 0, 0,
	0, 0, 0, 632, 633, 0, 500, 494, 450, 492,
	493, 497, 498, 501, 326, 0, 343, 824, 0, 392,
	429, 0, 0, 0, 489, 0, 542, 546, 0, 0,
	0, 0, 0, 0, 400, 0, 829, 0, 835, 0,
	841, 0, 611, 0, 831, 832, 837, 331, 1067, 634,
	705, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 833, 830, 834,
	840, 828, 838, 825, 836, 0, 533, 467, 0, 560,
	338, 384, 371, 413, 455, 567, 0, 0, 445, 615,
	380, 469, 0, 359, 502, 0, 591, 466, 0, 574,
	594, 0, 486, 365, 525, 581, 582, 822, 827, 0,
	843, 0, 369, 370, 491, 351, 499, 0, 0, 554,
	512, 510, 0, 477, 534, 0, 0, 0, 399, 0,
	394, 490, 630, 357, 609, 528, 495, 449, 557, 586,
	396, 381, 382, 425, 527, 415, 367, 620, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 416, 1069, 0,
	628, 1072, 1060, 1052, 1053, 1054, 1055, 1056, 1057, 0,
	1074, 1075, 1076, 1077, 1078, 621, 1066, 1068, 1051, 1058,
	1059, 1061, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 0, 328, 329, 330, 332, 333,
	334, 821, 335, 336, 337, 340, 341, 342, 344, 704,
	345, 346, 347, 348, 349, 350, 0, 823, 352, 353,
	354, 355, 356, 358, 360, 361, 362, 363, 364, 366,
	368, 0, 0, 0, 826, 0, 0, 0, 372, 373,
	374, 375, 376, 377, 0, 378, 379, 383, 385, 386,
	387, 388, 389, 390, 393, 0, 395, 397, 0, 398,
	401, 0, 402, 403, 404, 405, 406, 407, 408, 409,
	0, 410, 0, 411, 412, 414, 0, 417, 418, 419,
	420, 421, 0, 422, 0, 0, 423, 424, 426, 427,
	428, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 0, 442, 443, 444, 446, 0, 447,
	448, 451, 452, 453, 454, 0, 456, 0, 0, 457,
	458, 459, 0, 0, 460, 461, 462, 463, 464, 465,
	468, 0, 470, 471, 472, 473, 474, 475, 476, 706,
	478, 479, 480, 481, 482, 483, 484, 0, 0, 485,
	487, 488, 0, 0, 0, 839, 503, 504, 505, 506,
	507, 508, 509, 511, 0, 513, 514, 515, 0, 516,
	517, 518, 519, 0, 520, 521, 522, 523, 524, 526,
	529, 530, 531, 532, 0, 535, 536, 537, 538, 539,
	540, 541, 543, 544, 545, 547, 548, 549, 707, 550,
	551, 552, 553, 0, 555, 556, 708, 558, 559, 561,
	562, 563, 564, 565, 566, 717, 0, 568, 0, 569,
	570, 571, 572, 573, 0, 575, 576, 577, 578, 579,
	580, 583, 584, 585, 587, 588, 0, 589, 590, 0,
	592, 593, 842, 595, 596, 597, 598, 599, 0, 718,
	600, 0, 601, 0, 602, 603, 604, 605, 606, 607,
	608, 610, 0, 0, 612, 613, 614, 616, 617, 618,
	619, 622, 623, 624, 625, 626, 0, 627, 629, 631,
	709, 0, 0, 1070, 0, 0, 0, 0, 0, 0,
	632, 633, 0, 500, 494, 450, 492, 493, 497, 498,
	501, 326, 0, 343, 824, 0, 392, 429, 0, 0,
	0, 489, 0, 542, 546, 0, 0, 0, 0, 0,
	0, 400, 0, 829, 0, 835, 0, 841, 0, 611,
	0, 831, 832, 837, 331, 0, 634, 705, 0, 0,
	0, 496, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 0, 0, 833, 830, 834, 840, 828, 838,
	825, 836, 0, 533, 467, 0, 560, 338, 384, 371,
	413, 455, 567, 0, 0, 445, 615, 380, 469, 0,
	359, 502, 0, 591, 466, 0, 574, 594, 0, 486,
	365, 525, 581, 582, 822, 827, 0, 843, 0, 369,
	370, 491, 351, 499, 0, 0, 554, 512, 510, 0,
	477, 534, 0, 0, 0, 399, 0, 394, 490, 630,
	357, 609, 528, 495, 449, 557, 586, 396, 381, 382,
	425, 527, 415, 367, 620, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 416, 0, 0, 628, 0, 0,
	0, 0, 0, 0, 0, 391, 0, 0, 0, 0,
	0, 0, 621, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 319, 320, 321, 322, 323, 324, 325,
	327, 0, 328, 329, 330, 332, 333, 334, 821, 335,
	336, 337, 340, 341, 342, 344, 704, 345, 346, 347,
	348, 349, 350, 0, 823, 352, 353, 354, 355, 356,
	358, 360, 361, 362, 363, 364, 366, 368, 0, 0,
	0, 826, 0, 0, 0, 372, 373, 374, 375, 376,
	377, 0, 378, 379, 383, 385, 386, 387, 388, 389,
	390, 393, 0, 395, 397, 0, 398, 401, 0, 402,
	403, 404, 405, 406, 407, 408, 409, 0, 410, 0,
	411, 412, 414, 0, 417, 418, 419, 420, 421, 0,
	422, 0, 0, 423, 424, 426, 427, 428, 430, 431,
	432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	0, 442, 443, 444, 446, 0, 447, 448, 451, 452,
	453, 454, 0, 456, 0, 0, 457, 458, 459, 0,
	0, 460, 461, 462, 463, 464, 465, 468, 0, 470,
	471, 472, 473, 474, 475, 476, 706, 478, 479, 480,
	481, 482, 483, 484, 0, 0, 485, 487, 488, 0,
	0, 0, 839, 503, 504, 505, 506, 507, 508, 509,
	511, 0, 513, 514, 515, 0, 516, 517, 518, 519,
	0, 520, 521, 522, 523, 524, 526, 529, 530, 531,
	532, 0, 535, 536, 537, 538, 539, 540, 541, 543,
	544, 545, 547, 548, 549, 707, 550, 551, 552, 553,
	0, 555, 556, 708, 558, 559, 561, 562, 563, 564,
	565, 566, 717, 0, 568, 0, 569, 570, 571, 572,
	573, 0, 575, 576, 577, 578, 579, 580, 583, 584,
	585, 587, 588, 0, 589, 590, 0, 592, 593, 842,
	595, 596, 597, 598, 599, 0, 718, 600, 0, 601,
	0, 602, 603, 604, 605, 606, 607, 608, 610, 0,
	0, 612, 613, 614, 616, 617, 618, 619, 622, 623,
	624, 625, 626, 0, 627, 629, 631, 709, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 632, 633, 0,
	500, 494, 450, 492, 493, 497, 498, 501,
}

var yyPact = [...]int32{
	6564, -1000, 404, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1660, 1660, -1000, -1000, 3764, 1369, 15290, 19107,
	15836, 3835, 2416, 107792, 85572, 1660, 1826, 1752, 1750, 86582,
	107287, 106782, 71937, 71432, 1604, 1423, 1402, 85067, 1368, 1338,
	-1000, 2264, 86582, 54302, 54302, 84562, 86582, 84057, 86582, 56836,
	86582, 4813, 4115, 4115, 4046, 2701, 2962, 66937, -1000, 1711,
	1119, 1463, -1000, -1000, 4569, 75977, 389, 106277, 86582, 1300,
	6564, 4643, -1000, -1000, 2808, 4053, 75977, 4177, 4050, 1463,
	86582, -1000, 2119, 2796, 2212, 4601, 105772, 86582, 86582, 52774,
	86582, 3818, 105267, 104762, 3241, 104257, 63402, 3834, 1811, 86582,
	86582, 2551, 103752, 86582, 86582, 1335, 3066, 60876, 60876, -1000,
	-1000, 1896, 1873, -1000, -1000, -1000, 75472, 83552, 103247, 102742,
	1670, 3237, 2587, 66937, 86582, 86582, 86582, 86582, 66937, 60876,
	2705, 52245, 102237, 66937, 86582, 66937, 86582, 86582, 86582, 86582,
	86582, 1810, 60371, 59866, 86582, 101732, 3817, 86582, 86582, 2357,
	3457, -1000, 101227, 100722, 100217, 113185, 112698, 4732, 4724, 2987,
	4724, 99712, 99207, 98702, 4104, 62897, 62392, 61887, -1000, -1000,
	-1000, 1669, 3221, -1000, -1000, -1000, 3813, 2546, 1809, -1000,
	2703, -1000, -1000, -1000, -1000, -1000, -1000, 1662, 4103, -1000,
	88602, 83047, 2565, -1000, -1000, 1132, 4402, 4813, 4813, 4588,
	65422, 1537, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4401,
	2725, 3140, 498, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	4643, 2808, 4643, 4813, 4216, 4813, -1000, -1000, -1000, -1000,
	86582, -1000, 4813, 1332, -1000, 4045, 532, 1096, -1000, 935,
	935, 935, 3719, 935, 4043, 1528, 570, 976, -1000, 3664,
	1781, 49119, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1703,
	3676, 53797, -1000, 86582, 53797, -1000, 498, 4400, 2721, 3139,
	-1000, 53797, 86582, 2591, 53797, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 86582, 4169, 4169, 4169, 4169, 937,
	937, 4169, 4169, 1455, 1348, -1000, -1000, -1000, 4807, 4807,
	-1000, -1000, -1000, -1000, 1026, -1000, 82542, -1000, -1000, -1000,
	-1000, 386, -1000, -1000, -1000, 75977, -1000, 75977, 14802, 3597,
	2962, -1000, -1000, 65422, -1000, 1326, -1000, 501, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3155, 4552, 4552, 4552, 4102,
	1711, -1000, -1000, 909, 895, 1119, 30159, 30159, -1000, 4042,
	-1000, 421, -1000, 501, 66432, 1321, 383, 86582, -1000, 1122,
	383, 35301, -1000, -1000, 2663, -1000, 427, -1000, 2634, 2040,
	-1000, 3021, 86582, 3798, 98197, 75977, 75977, 883, -1000, -1000,
	-1000, -1000, -1000, 935, 97692, 86582, 1661, 97187, 4731, 66937,
	66937, 86582, 1808, 66937, 3589, 2348, -1000, 2218, 3138, -1000,
	4638, 1884, 4749, 473, 1148, 86582, 86582, -1000, 476, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1398, 2371, 1367, 4628, 1884, 4627, 3426,
	96682, 1766, 4626, 3596, 1884, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1658, 86582, 2405, 4041, 86582, 1122,
	4625, -1000, 3578, 3081, 111724, 86582, 1884, 1884, -1000, -1000,
	-1000, -1000, 8392, 4714, 4544, 10018, 4707, 4543, 17159, 4704,
	15337, 4701, 82037, 81532, 3424, 86582, 81027, 2698, 1318, 2629,
	2638, 3229, 2283, 13639, 1318, -1000, 501, 2280, 3344, 86582,
	86582, 86582, 2680, 1311, 4040, 4697, 8620, 2940, 7864, 2365,
	1756, 2740, 4038, 4037, 86582, 2270, 1912, 4542, 2257, 3584,
	1912, 4542, 2554, 2636, 4696, 2258, 2767, 3349, -1000, 1113,
	4695, 435, -1000, 4693, 566, -1000, 4034, 4692, 479, 4691,
	-1000, 3471, 113672, -1000, -1000, -1000, -1000, -1000, 1885, -1000,
	459, -1000, -1000, -1000, -1000, -1000, 1202, 3218, 1197, 1197,
	1197, -1000, -1000, -1000, -1000, -1000, 676, 694, -1000, -1000,
	-1000, -1000, 3195, 1310, 3195, 3195, -1000, 3223, 3195, 479,
	4690, 96177, 1309, 4689, 95672, 95167, 3582, 4602, 4688, 1884,
	4686, -1000, 4685, 60876, 3592, 165, 4684, -1000, 165, 4683,
	165, 4682, -1000, 3422, -1000, 2256, -1000, -1000, -1000, 4731,
	60876, -1000, 3115, -1000, 4780, 63907, 427, 4813, 3660, 47577,
	47063, 86582, 645, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3034, -1000, 2618, -1000, -1000, -1000, -1000, -1000, -1000,
	94662, -1000, -1000, -1000, 4788, 111724, 72947, 60876, 73957, 1302,
	86582, -1000, 86582, -1000, -1000, -1000, -1000, 72947, 3581, 60876,
	3577, 1781, -1000, 563, -1000, 48091, 1300, -1000, -1000, -1000,
	-1000, 3664, -1000, 562, -1000, 385, -1000, 1122, 552, -1000,
	2608, -1000, 487, 3875, 4027, 501, 4731, 4731, 4731, -1000,
	-1000, -1000, -1000, 447, 2603, -1000, 86582, -1000, 86582, 86582,
	86582, 4169, 4169, 86582, 86582, 86582, 4169, 4169, 86582, 4169,
	4169, -1000, -1000, -1000, 35301, -1000, -1000, -1000, 4813, 591,
	-1000, 225, 86582, 86582, 86582, 111724, 111724, 66937, 66937, 51716,
	86582, 86582, 66937, 66937, 3574, 3444, 1297, -1000, -1000, -1000,
	-1000, -1000, -1000, 4025, 65422, -1000, -1000, 27585, 501, -1000,
	23942, 35301, 3146, 3561, 3572, 1942, 4106, 3157, -1000, 34787,
	2739, 39413, 3656, 1119, -1000, -1000, 1119, 1119, 35301, -1000,
	3155, -1000, -1000, 4048, 191, -1000, 24461, -1000, -1000, 35301,
	35301, 35301, 35301, 35301, 2418, 4604, -1000, -1000, -1000, -1000,
	29130, -1000, -1000, 501, 1177, 939, -1000, -1000, 1290, -1000,
	1104, 1282, 501, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1413, 4813, 1412, 35301, 1629, 2924, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1280, 1278, 3567, -1000, 1273, 1271,
	1268, 1265, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1263,
	1261, 1259, 1258, 1255, 1253, 1251, 1249, 1246, 1242, 1241,
	1240, 1239, 1238, 1235, 1233, 1232, 1225, 1224, 1218, 1217,
	1123, 1216, 1215, 1213, 1211, 1209, 1207, 1204, -1000, 3195,
	-1000, 3195, 3195, 1197, 1197, 1202, -1000, -1000, 3223, 3195,
	1197, -1000, -1000, 694, 676, -1000, -1000, -1000, -1000, -1000,
	434, 1190, -1000, 501, -1000, 86582, 35301, 86582, 383, 4787,
	86582, 441, 14089, -1000, 3102, 2808, -1000, 2115, -1000, -1000,
	-1000, 1114, 4786, 64412, -1000, 86582, 3900, 3897, 4385, 4134,
	1011, 4621, 4784, 935, 86582, 7181, 4620, 94157, -1000, 1188,
	1188, 2888, 86582, 1187, 111724, 2697, 2048, -1000, 60876, 4727,
	4681, 2361, -1000, -1000, 111724, -1000, 445, 25508, -1000, 25508,
	4558, 3885, 50129, -1000, 780, 86582, 86582, 86582, 86582, -1000,
	86582, 4680, -1000, 4679, 86582, 1076, 4616, 1672, 4813, 4678,
	58856, 4615, -1000, 93652, 4023, 2579, 60876, 86582, 1802, 4021,
	4676, -1000, 72442, 1148, 4813, 4783, 3565, -1000, -1000, 207,
	-1000, 1895, 2023, -1000, 2395, 2391, 68435, 1832, 1824, 3669,
	4017, 2232, 1862, 86582, 2936, 86582, 3654, 4381, 1022, 2839,
	2178, -1000, 1185, 75977, 1924, 207, -1000, 4380, 3029, 2382,
	2936, 1168, 86582, 1923, 207, 4379, 7181, 2022, -1000, 2968,
	113672, 1113, -1000, 4096, -1000, 1113, 1113, 4093, 2511, 1884,
	1884, -1000, 86582, 207, 1917, 2021, 86582, 14801, 4674, 4540,
	14511, 4673, 86582, -1000, 968, -1000, 4378, 2164, 4376, -1000,
	70439, 4375, 2149, 4374, 1680, 4373, 2147, 4372, 4369, 4367,
	2361, -1000, 93147, 3094, -1000, 2361, -1000, -1000, 1383, -1000,
	4112, -1000, -1000, -1000, -1000, 3722, -1000, 3757, 2492, 1960,
	3668, 4366, 4365, 6219, 92642, 4364, 3027, -1000, -1000, 4016,
	4513, -1000, -1000, -1000, -1000, 2072, 2805, -1000, 2625, 1113,
	1113, 86582, -1000, 86582, -1000, -1000, 501, 4359, 3731, -1000,
	-1000, 2329, 3884, 3882, 1004, 4351, -1000, 111237, 86582, 86582,
	4344, 6219, 92137, 4340, 3026, 4339, 59361, 73452, 73452, 4335,
	4334, 6219, 91632, 4331, 3025, 4330, 4325, 4318, 1498, -1000,
	4317, 4531, 4314, 1014, 4813, 2322, 2318, 2317, -1000, -1000,
	1148, 4312, 86582, 86582, 2489, 4309, -1000, 2584, 3040, 2584,
	4308, 58856, -1000, 2584, 2584, 4304, 1022, 1022, 4302, 4301,
	1947, 4298, 86582, 86582, 86582, 86582, 86582, 3262, 3178, 3177,
	898, 382, 4297, -1000, 3148, -1000, 15411, 2137, 2611, 2404,
	-1000, 4810, 4809, -1000, 86582, 86582, -1000, -1000, -1000, 86582,
	86582, -1000, 86582, 86582, 111724, -1000, 111724, 1357, 1358, 3470,
	-1000, 4807, 4295, -1000, 4294, 4288, 4287, -1000, 1184, -1000,
	593, 35301, -1000, 4807, -1000, -1000, -1000, -1000, 4807, -1000,
	4404, 4393, 4807, -1000, 1181, -1000, 4807, -1000, -1000, 3195,
	3195, -1000, -1000, 111724, 435, 4672, 111724, -1000, 3881, 4671,
	3880, 4670, 111724, -1000, 86582, 1178, 86582, 86582, 572, 58856,
	4669, 60876, 60876, 60876, 60876, -1000, -1000, -1000, -1000, -1000,
	86582, 500, 4780, 1825, -1000, -1000, -1000, -1000, 366, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 366, -1000, -1000,
	-1000, -1000, -1000, 1404, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 86582, -1000, 1463, 433, -1000, 4286, 315, 86582, 86582,
	2195, 66937, 66937, 66937, 86582, 86582, 86582, 3443, 86582, 86582,
	86582, 86582, 2073, -1000, 426, -1000, 86582, 430, -1000, -1000,
	422, 4175, 71937, 227, 73957, -1000, 1781, 53797, -1000, -1000,
	-1000, 3662, 86582, 86582, -1000, 86582, -1000, 86582, -1000, 86582,
	86582, 86582, 86582, 86582, -1000, 3435, -1000, -1000, -1000, -1000,
	2089, -1000, -1000, -1000, -1000, 86582, 86582, -1000, -1000, -1000,
	86582, 86582, -1000, 86582, 86582, 420, -1000, 75977, 2459, 2308,
	4602, 2829, 2822, 4476, 4475, 4473, 4468, 4465, 4464, 4462,
	4457, 86582, 86582, 4015, 4014, 4456, 4454, 111724, 1113, 111724,
	10384, -1000, -1000, 867, 33, 35301, 35301, 35301, -1000, 14089,
	4796, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13785,
	-36, -1000, -1000, -1000, -1000, -1000, 2005, 4119, -1000, 1584,
	-1000, 1987, -1000, -1000, 365, 14089, -1000, 40955, -1000, -1000,
	-1000, 2526, 14089, -1000, 38899, 38899, 2069, 86582, 2728, -1000,
	2728, 166, -1000, 6686, 3146, 3561, 4174, 80522, 30159, 111724,
	86582, 4392, 35301, 35301, 35301, 35301, 35301, 35301, 35301, 35301,
	35301, 35301, 35301, 35301, 35301, 35301, 35301, 35301, 4467, 35301,
	4284, 3783, -1000, -1000, 4280, 1135, 1971, 25508, -1000, -1000,
	1164, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 542, 542, 461, 14592, 14592,
	991, 1177, 4572, 501, 13717, 361, 613, 501, -1000, -1000,
	-1000, 30674, 35301, 50129, 34272, 501, -1000, 27585, -1000, 1949,
	4807, 4480, 14089, 2924, 4058, 1491, 1176, 35301, 35301, 1173,
	4807, 4807, 4807, 4807, 35301, 2181, 35301, 35301, 40441, 35301,
	35301, 29645, 35301, 35301, 35301, 35301, 35301, 2495, 35301, 3034,
	41983, 2490, 35301, 33758, 28615, 35301, 35301, 35301, 866, 35301,
	35301, 35301, 3034, 4174, 35301, 863, 406, -1000, 3891, 396,
	35301, -1000, 86582, 4392, 35301, 35301, 35301, 35301, 4284, 3783,
	4280, 1135, 1164, -1000, -1000, -1000, 1995, 2309, -1000, 4012,
	-1000, 3724, 57341, 3830, 86582, 564, -1000, 1382, 86582, -1000,
	-1000, 4127, 44533, 44533, 3681, 3681, -1000, -1000, 68940, 86582,
	3652, 3841, 4667, 2975, 4580, 1163, -1000, 7181, 2802, 4665,
	3996, 4614, -1000, 10914, 69950, 9225, 2156, -1000, -1000, 3644,
	3169, 1148, -1000, 67947, 2661, 86582, 86582, 1657, -1000, -1000,
	-1000, -1000, -1000, -1000, 2424, 86582, -1000, -1000, -1000, 25508,
	-1000, 388, -1000, 1380, 3559, 86582, -1000, 86582, 1157, 1148,
	1148, 1148, 1148, 1148, -1000, 86582, 2132, 86582, 1852, 68940,
	3643, 4664, 2916, -1000, -1000, 86582, 2046, -1000, -1000, 4662,
	2870, 4779, 4613, 935, 25508, 4824, -1000, 4778, 3018, 46048,
	86582, 1880, 555, -1000, 75977, 4539, 569, 935, -1000, 421,
	-1000, 2315, 111724, 4813, 2870, 2870, 3532, 86582, 86582, 86582,
	-1000, 1814, -1000, -1000, 2542, 86582, -1000, 86582, 25508, 86582,
	86582, -1000, 4612, 91127, -1000, 111724, 86582, -1000, 1146, 3903,
	1582, 1578, 3853, 80017, 86582, 90622, 90117, 86582, 86582, 74967,
	1872, 1865, 86582, 2607, 74462, 86582, 2601, -1000, 86582, 2171,
	-1000, -1000, 60876, -1000, 3773, 2595, 27074, 8334, 86582, 86582,
	3995, 86582, 13158, 86582, 86582, -1000, 86582, -1000, -1000, -1000,
	-1000, -1000, 1113, -1000, -1000, -1000, 86582, 86582, 1113, 1113,
	16801, 86582, 86582, 86582, 12243, 207, 1913, 2004, 3024, 86582,
	1922, 207, 1911, 1966, 75977, 1983, 86582, 86582, 60876, 381,
	-1000, -1000, 112211, 108802, -1000, 2444, -1000, -1000, -1000, 459,
	-1000, 113672, 86582, 86582, 60876, -1000, 86582, 86582, 60876, 86582,
	60876, -1000, -1000, 86582, 1678, -1000, 48605, -1000, -1000, 86582,
	86582, -1000, 4512, 89612, 35301, 4510, 86582, -1000, 86582, -1000,
	1142, 4509, 86582, 60876, 86582, -1000, -1000, -1000, 89107, -1000,
	79512, 3122, 1990, 60876, 3993, 4508, 3992, 2776, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 60876, 60876, 4277, 4276, 86582,
	86582, 86582, 25508, 60876, 378, 358, 2622, 3991, 86582, -1000,
	79512, 60876, 3990, 86582, -1000, 337, 337, 337, 60876, 86582,
	-1000, 79512, 60876, 3988, 86582, 60876, 86582, -1000, 60876, -1000,
	-1000, 86582, -1000, 86582, -1000, 4585, 86582, 86582, -1000, 60876,
	2248, 2288, 4272, -1000, 4271, 2403, -1000, 60876, 2631, -1000,
	88602, 86582, -1000, 60876, 2045, 2631, -1000, -1000, 86582, -1000,
	-1000, 60876, 86582, 1034, 86582, 60876, 3795, 2613, 1071, 2597,
	2689, 86582, 86582, 4813, 4723, 86582, 4813, 88097, 25508, 86582,
	3369, 60876, 86582, 4265, 86582, 86582, 66937, 1141, 111724, 66937,
	51187, 66937, 66937, 3553, 111724, 86582, -1000, -1000, 71937, 70927,
	2136, 2519, 4262, -1000, -1000, 435, -1000, 566, -1000, 4602,
	3987, -1000, 479, 1663, 4807, 1357, 1356, 862, 2527, 2183,
	2219, 2083, 4807, -1000, 373, 860, 859, 4398, 4397, 858,
	35301, 850, -1000, -1000, 479, -1000, 86582, 4777, 86582, 86582,
	86582, 86582, 2659, 4602, 3327, 1884, -1000, -1000, 2043, 3550,
	-1000, 165, 165, 165, 4584, 60876, 2808, 48091, 1949, 4807,
	-1000, -1000, 111724, -1000, 58351, 86582, 315, 315, 3413, 86582,
	335, -1000, 335, 335, 97, 117, 97, 1113, 332, 460,
	-1000, 97, 97, 117, 4534, 4524, 4523, 4521, 4519, -1000,
	25508, 4092, 362, 86582, -1000, -1000, 58351, 3986, 325, 4602,
	494, -1000, -1000, 86582, -1000, -1000, -1000, -1000, 3875, -1000,
	-1000, -1000, -1000, -1000, 3543, 2854, 2853, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2533, 2186,
	2182, 2522, -1000, -1000, -1000, -1000, 4527, 4527, 4527, 4527,
	4527, 4527, 4527, 4527, 3874, 3872, 87592, 86582, 4527, 4527,
	2658, 4451, 4774, 86582, 86582, 86582, 111724, 111724, 66937, 66937,
	3437, 66937, 66937, -1000, 846, 33244, -1000, 1476, -48, -48,
	35301, 35301, -1000, 35301, -1000, 3767, -1000, 35301, 2526, 4153,
	-1000, 4811, 4811, 1127, -1000, 29130, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2576, 315, 35301, 518, 1397,
	-1000, -1000, -1000, -1000, 4122, 44533, -1000, 4115, 4115, 1867,
	1836, 4115, 86582, -1000, -1000, -1000, -1000, 4395, -1000, 354,
	354, 411, 411, 411, -1000, 636, 636, 636, 636, 636,
	636, 461, 14592, 14507, 1723, 35301, 35301, 4258, 4270, 1135,
	1482, 35301, -1000, 3609, -1000, -1000, -1000, 4171, -1000, -1000,
	2470, 3419, -1000, -1000, -1000, -1000, 3473, 40441, 40441, -1000,
	-1000, -1000, 29130, 1131, -1000, -1000, -1000, -1000, 50129, -1000,
	1130, 35301, -1000, -1000, 4535, -1000, -1000, 35301, 124, 101,
	-1000, -1000, 356, 838, 348, -1000, 33, -1000, 836, 3210,
	-1000, 35301, 1491, 1129, -1000, 65927, 4132, 3337, 3317, 533,
	1488, 13634, 35301, 833, 832, 831, 829, 13552, 823, 4170,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2125, 820,
	819, 12981, 314, 817, 2894, -1000, 40441, 40441, 40441, 1127,
	816, 815, 7005, 12919, 32730, 32730, 32730, 814, 12870, 35301,
	142, 6400, 338, 330, 320, 313, 25508, 307, -1000, 12557,
	35301, 3533, 25508, 2261, 305, 419, 810, -1000, 111724, 533,
	410, 1406, 809, -1000, 501, 3419, 12144, 3744, -1000, 309,
	303, 286, 35301, 4122, 301, -1000, -1000, 1126, -1000, 3833,
	-1000, 14089, -1000, -1000, -1000, 3747, 3737, 3310, -1000, -1000,
	297, -1000, -1000, -1000, -1000, 4127, 64412, 35301, 294, -1000,
	501, 3747, 38385, 118, 3976, 76987, 76987, 46553, -1000, 43508,
	78502, 76987, 76987, 1374, 4168, 1125, 1124, 501, -1000, -1000,
	-1000, 1123, 3896, 3782, -1000, 3782, 807, 274, -1000, 111724,
	-1000, -1000, -1000, 86582, 1025, 86582, 3417, 86582, 86582, 86582,
	4772, 1022, 86582, 86582, 75977, 4661, 109289, 2461, 9225, -1000,
	4813, 65422, 3542, -1000, -1000, 293, -1000, -1000, 1837, 2461,
	3967, -1000, -1000, -1000, 3641, -1000, -1000, 2156, -1000, 806,
	-56, 4091, 291, -1000, -1000, -1000, 1117, 86582, 2861, 935,
	86582, 4727, 2135, 2150, 3117, -1000, 2445, -1000, -1000, 25508,
	26019, 1801, -1000, 799, 266, -1000, 111724, 4813, -1000, -1000,
	-1000, -1000, -1000, 1269, -1000, 86582, 65422, 65422, -1000, 1884,
	1493, 1852, -1000, 86582, 1858, 86582, 798, 86582, 86582, 3049,
	1766, 86582, 3537, -1000, -1000, 4807, 60876, 60876, 2541, 4530,
	2374, 2373, -1000, -1000, 4109, 1694, 60876, 1463, 4659, 3841,
	3196, 4580, 3527, 4830, 2856, -1000, -1000, 467, -1000, 501,
	-1000, 35301, 1122, 4585, -1000, 73452, 935, 2127, 569, 4125,
	4125, 86582, 794, 4253, -1000, -1000, 4252, 4251, -1000, -1000,
	79007, -1000, -1000, 281, -1000, 581, 3573, 3182, 4658, -1000,
	4611, 1906, 1712, 35301, 1120, -1000, 2790, 1252, 1118, 1115,
	86582, 2003, 3792, -1000, 4657, 4602, 4656, 4602, -1000, -1000,
	-1000, -1000, -1000, 86582, 86582, 86582, 86582, -1000, 2057, -1000,
	-1000, -1000, -1000, 2056, -1000, 2593, -1000, -1000, -1000, -1000,
	-1000, 2788, 2051, 280, -1000, -1000, 25508, 25508, 25508, 4813,
	-1000, 207, -1000, 1894, 1921, 2718, -1000, 2954, -1000, 207,
	4247, 2711, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 207,
	4246, 7181, 1573, -1000, 4241, -1000, 207, 1898, 1559, 86582,
	86582, 86582, 3985, 11802, 86582, 86582, 86582, 86582, 10087, 4239,
	1498, 1852, 4238, -1000, -1000, -1000, -1000, 108802, 112211, -1000,
	112211, -1000, 459, -1000, 585, 459, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	4236, -1000, 4602, 4654, 14089, -1000, -1000, 1936, 35301, -1000,
	-1000, -1000, -1000, -1000, -1000, 2953, 2749, 4507, -1000, -1000,
	-1000, 165, 86582, 60876, 2610, 2845, -1000, 279, -1000, 1366,
	-1000, -1000, 110750, 111724, 4231, 3854, 60876, 86582, -1000, -1000,
	-1000, 2952, -1000, -1000, -1000, -1000, -1000, 2950, -1000, -1000,
	-1000, -1000, -1000, 499, -1000, 499, 499, -1000, 4227, 4225,
	3016, 86582, 60876, -1000, -1000, -1000, -1000, -1000, -1000, 86582,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1944, 4224,
	2126, 4223, 2123, 4220, -1000, 4219, 2120, 4218, 2117, 4214,
	2568, 2567, 2563, -1000, 4213, 4212, 4813, 4609, 4602, -1000,
	4653, 4602, 273, -1000, -1000, 3145, 3142, -1000, 3787, -1000,
	65422, -1000, -1000, -1000, 111724, -1000, -1000, -1000, 86582, 86582,
	-1000, -1000, 111724, -1000, -1000, 3982, 3974, 1523, 86582, 60876,
	60876, 60876, -1000, -1000, -1000, 86582, -1000, -1000, 1346, 1344,
	4807, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 793,
	-1000, -1000, 1393, -1000, -1000, 1393, 268, -1000, -1000, 435,
	111724, 4602, 3871, 4602, 3870, 86582, -1000, 262, -1000, -1000,
	1111, 86582, 58856, -1000, 2594, -1000, 427, -1000, -1000, 792,
	-1000, 448, -1000, -1000, 60876, -1000, 86582, 97, 66937, 249,
	-1000, 86582, 86582, 2116, 2112, 2105, 2104, 2103, 269, -1000,
	1982, 60876, -1000, -1000, 196, 72947, -1000, 60876, -1000, -1000,
	1463, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2980, 2977,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	86582, 86582, 4450, 86582, 4448, -1000, -1000, 86582, 4527, 111724,
	4446, 4440, 4437, 4435, 4434, 4432, 4431, 1113, 4430, 4429,
	-1000, 35301, -1000, 789, 787, 35301, 786, 14089, 14089, 1343,
	14089, -1000, -1000, 4152, -1000, 1833, -1000, -1000, 32216, 237,
	-1000, -1000, 1397, -1000, 1088, -1000, 3781, 4057, 35301, 118,
	86582, 86582, 4115, 4115, 4115, 4115, 86582, -1000, 35301, 35301,
	870, 702, 35301, 40441, 40441, -1000, 35301, 601, -1000, -1000,
	-1000, -1000, 4166, -1000, -1000, 2464, 3419, 35301, -1000, -1000,
	1721, 1713, -1000, -1000, -1000, -1000, 4477, 3054, 261, -1000,
	29130, 785, 31702, 235, -1000, 501, 12028, -1000, -1000, 1355,
	-1000, -1000, -1000, 776, 4813, 2990, -1000, 35301, 11897, -1000,
	1476, -1000, -1000, 108297, 35301, 3419, 3973, 3972, 35301, 35301,
	3328, 4088, -1000, -1000, 3261, 11710, -1000, -1000, -1000, -1000,
	111724, -1000, 35301, -1000, 2517, -1000, -1000, 35301, -1000, 111724,
	40441, 40441, 40441, 40441, 40441, 40441, 40441, 40441, 40441, 40441,
	40441, 40441, 40441, 3233, 40441, 1104, 527, 527, 527, -1000,
	-1000, 31188, 35301, 35301, 111724, 775, 774, 767, -1000, 35301,
	142, 35301, -1000, -1000, -1000, -1000, 260, -1000, 35301, 25508,
	1706, 765, 43003, 257, 1673, -1000, 3419, 35301, -1000, 1406,
	3744, 35301, 3968, 3960, 3744, -1000, 764, -1000, 763, 35301,
	35301, 35301, 11615, 4057, -1000, 1463, -1000, -1000, 30159, 1200,
	1463, 1287, 86582, 501, 3747, -1000, 14089, 1363, 86582, -1000,
	14089, 3640, 44533, 3917, 3916, 44533, 4028, 3904, 3904, 3904,
	-1000, 1842, -1000, 86582, 1103, -1000, 76987, 78502, 76987, 76987,
	61381, 761, 3976, -1000, -1000, 64917, 1100, -1000, -1000, -1000,
	3622, 1097, 42493, 35301, 501, 35301, 1884, -1000, -1000, -1000,
	3867, 2773, 68940, -1000, 2378, 69445, 1025, 3924, 1022, 1539,
	-1000, 1009, 4771, 1026, 1463, -1000, 256, 7181, 3853, 86582,
	9225, 1094, -1000, -1000, -1000, 3151, 35301, -1000, -1000, 232,
	-1000, 230, 1754, -1000, 108802, 35301, 35301, -1000, 86582, 2156,
	86582, 3966, -1000, -1000, 4087, 108802, 108802, -1000, 4828, 26019,
	1093, 86582, 4580, 1090, 87087, 60876, 4727, -1000, 86582, -1000,
	-1000, 86582, 3239, -1000, 4604, 1542, 1089, 40441, 86582, 3295,
	-1000, 2890, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1088, 4810, 4809, 111724, -1000, 86582, 4562, 754, 224, -1000,
	-1000, 86582, -1000, -1000, -1000, -1000, -1000, 1087, -1000, -1000,
	473, -1000, -1000, -1000, 2773, 1025, 901, 3411, 1672, 1493,
	58856, -1000, 165, 165, 60876, 60876, -1000, -1000, 4813, 4813,
	937, 4813, 165, 4584, 86582, 4580, 2457, 86582, -1000, 4210,
	3816, -1000, 86582, 44533, 46048, 11561, 3952, -1000, -1000, 4125,
	77997, 4125, -1000, 1085, -1000, 499, 3418, 4813, 86582, 86582,
	-1000, -1000, -1000, -1000, 25508, 26019, 25508, -1000, 3825, -1000,
	-1000, -1000, 86582, 4652, 3085, -1000, 77492, -1000, 3853, 11497,
	86582, 2901, 86582, 86582, -1000, 86582, 45038, -1000, -1000, 3187,
	12509, 1022, 2879, 2572, 1749, -1000, -1000, 1884, 1941, 2901,
	86582, -1000, 86582, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2026, 86582, -1000, -1000, 27074, -1000, -1000, -1000, -1000, -1000,
	86582, 86582, 86582, 86582, 1919, 4085, 86582, 86582, 1918, 4084,
	86582, 86582, 86582, 86582, 86582, 86582, -1000, 4209, -1000, 2941,
	207, 1892, 1365, 2700, -1000, 4208, -1000, 207, 1877, 1078,
	86582, -1000, 60876, -1000, -1000, -1000, 1748, 579, 86582, -1000,
	86582, -1000, 11254, 2901, 86582, -1000, 2748, -1000, -1000, 4207,
	2102, 4206, 4199, 2351, 3107, 2098, 4196, 25508, -1000, 26555,
	738, 736, 732, 86582, 4591, 1084, 165, 2233, 86582, 86582,
	-1000, -1000, -1000, 86582, 86582, 3951, -1000, -1000, 1498, 1034,
	86582, 86582, 86582, 86582, 60876, 86582, 86582, 86582, 86582, 60876,
	3525, 3576, 3530, 86582, 4813, 3143, 4651, -1000, 86582, -1000,
	-1000, 1747, 3047, -1000, 4770, 3865, 3864, 2600, 2091, 2091,
	3517, 97, 165, 165, -1000, 4602, -1000, -1000, 1341, -1000,
	-1000, -1000, -1000, -1000, 731, -1000, 86582, -1000, 86582, 4602,
	-1000, 3327, 3327, -1000, 2042, -1000, 3044, 4813, 2866, 58351,
	2868, -1000, 97, -1000, 1113, 460, -1000, 86582, 86582, 86582,
	86582, 86582, -1000, 25508, -1000, -1000, -1000, -1000, -1000, 4602,
	4164, 227, -1000, -1000, -1000, 4428, 4427, 4527, 4426, 4527,
	4424, -1000, 729, 4528, 4528, 4528, 4528, 4528, 4528, 4528,
	4423, 4528, 4528, 1476, -1000, -1000, -1000, -1000, -1000, 1831,
	-1000, 255, -1000, 35301, -1000, 50129, -1000, -1000, 4055, 4082,
	14089, -1000, -1000, 86582, 86582, 86582, 86582, -1000, 553, 653,
	35301, 35301, 488, 1861, 1574, 653, 35301, 35301, -1000, -1000,
	478, 2719, 2713, 35301, 35301, -1000, 11179, -1000, 254, -1000,
	35301, -1000, -1000, 4813, -1000, -1000, 14089, 35301, 727, 2379,
	-1000, 11051, 3744, 4506, 4505, -1000, -1000, 3744, 35301, 3342,
	-1000, 726, 14089, 718, 10921, -1000, 246, 246, 407, 407,
	407, -1000, 766, 766, 766, 766, 766, 766, 527, 4160,
	3226, -1000, 3404, 10478, 10391, 10247, 713, -1000, -1000, -1000,
	142, 10182, -1000, 37871, -1000, -1000, 712, 1640, 1635, -1000,
	4077, 41983, 3346, -1000, 35301, 194, 37357, 3744, -1000, -1000,
	711, -1000, 4502, 4500, 710, -1000, -1000, 9938, 9938, 9938,
	113672, 4055, 703, 191, 3698, 45038, 3667, -1000, -1000, 3724,
	-1000, -1000, 35301, -1000, 86582, 3976, 44533, 44533, 3954, 3913,
	44533, -1000, -1000, -1000, -1000, -1000, 66937, 1080, 86582, -1000,
	-1000, -1000, -1000, 76987, 1079, 86582, 86582, -1000, 53292, 3533,
	1077, 187, 9841, 1065, 1884, 3334, -1000, 2378, 1074, -1000,
	2848, 3841, -1000, 4081, 240, -1000, -1000, -1000, 4594, 3573,
	1846, 3089, -1000, -1000, 68940, 86582, 3638, 2973, 4584, 4583,
	4580, -1000, 1072, 3946, 2461, 114159, -1000, 14089, 4813, 3512,
	111724, -1000, 14089, 14089, 2289, -1000, 68, 86582, 108802, -1000,
	229, -1000, 1117, -1000, 4130, 2757, 4769, 86582, 1007, 4608,
	-1000, 2174, -1000, -1000, -1000, 4585, 4585, 35301, 3404, 935,
	4762, -1000, 4557, -1000, -1000, 3863, -1000, -1000, 86582, -1000,
	4813, -1000, 2132, 25508, 445, 2038, 3573, 68940, 3636, 86582,
	2892, -1000, 2033, 165, 165, -1000, -1000, -1000, -1000, -1000,
	4760, 1846, 66937, -1000, -1000, 3204, -1000, 4516, 3854, 60876,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 118, -1000, -1000,
	46048, -1000, -1000, -1000, -1000, 35301, -1000, 1817, 2913, 4159,
	-1000, -1000, -1000, -1000, 1038, 4180, -1000, 86582, 1493, -1000,
	76482, -1000, -1000, -1000, 228, -1000, 1958, -1000, 2876, 2782,
	-1000, 226, 2901, 221, 218, -1000, 4593, 952, 4560, 35301,
	4499, 4722, 4720, -1000, -1000, 3295, 4498, 4759, 1034, -1000,
	-1000, -1000, -1000, 3295, -1000, 2524, 111724, 1113, 1034, 4602,
	4602, -1000, -1000, -1000, -1000, 4195, 4194, -1000, 86582, 60876,
	-1000, -1000, 86582, 60876, -1000, -1000, -1000, -1000, 4193, -1000,
	86582, 86582, 86582, 86582, 86582, 1914, 4080, 86582, 86582, 86582,
	86582, -1000, -1000, -1000, 1744, -1000, 4602, -1000, -1000, -1000,
	86582, 86582, 60876, 86582, 21, -1000, 4807, 4807, 111724, 170,
	-1000, 4807, 4807, 86582, 60876, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1464, 35301,
	4192, -1000, -1000, -1000, -1000, 2935, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 86582, 86582,
	86582, 86582, 4650, 4602, -1000, 4813, 4813, -1000, 4602, 111724,
	111724, 86582, 86582, 86582, 4190, -1000, -1000, -1000, -1000, -1000,
	-1000, 4158, 71937, -1000, -1000, 4602, 4602, 4602, -1000, -1000,
	215, 86582, -1000, -1000, -1000, -1000, 1520, -1000, 97, 97,
	97, 97, 97, -1000, -1000, 58351, 4602, 4527, 4527, -1000,
	4527, -1000, 4527, 4419, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 4528, -1000, -1000, 700, -1000, -1000, 9600,
	695, 1632, 35301, 4552, -1000, -1000, -1000, -1000, 653, 653,
	35301, 35301, 35301, 653, 478, -1000, -1000, 653, 653, -1000,
	-1000, 9521, -1000, 14089, -1000, 1476, 4078, -1000, 690, -1000,
	-1000, 688, 166, 86582, -1000, -1000, 35301, 40441, 4157, -1000,
	35301, 35301, 35301, -1000, -1000, 214, 211, 1070, -1000, -1000,
	-1000, -1000, 3346, 4077, -1000, -1000, 9070, 687, 1899, 14089,
	3305, 686, -1000, -1000, -1000, -1000, 3744, 35301, 3721, 3744,
	2555, 1632, 3811, 3706, 210, -1000, 86582, 3285, 14089, -1000,
	-1000, 3954, -1000, 1069, 35301, 44533, -1000, 1068, 86582, 208,
	-1000, 86582, 198, 197, 111724, 193, -1000, 4758, 3633, 39927,
	35301, 3784, -1000, 4641, 4641, 3794, -1000, 3483, 25508, 1065,
	4813, 3841, 86582, 3249, 3249, 3417, 86582, -1000, 69445, 2445,
	1496, 2378, -1000, 86582, 2730, 685, 1025, 86582, 86582, -1000,
	-1000, 1879, 4757, 45038, 75977, -1000, 192, -1000, 112211, -1000,
	446, -1000, 1731, -1000, 3511, 1732, 4156, 190, -1000, 682,
	1974, 1957, 1786, 86582, 1463, 186, 68940, 4649, 4727, -1000,
	4496, 3843, 3843, 8957, 2557, 967, -1000, 86582, -1000, -1000,
	182, -1000, 86582, 2029, 672, 86582, 1493, 3043, 86582, 1463,
	-1000, 1058, 2457, 86582, 1056, 4591, 165, 444, 8870, 66937,
	4754, 4754, 86582, 26019, 1055, 1048, 1044, -1000, -1000, -1000,
	-1000, 2901, 2811, -1000, -1000, -1000, -1000, -1000, 2811, 2293,
	2811, 45038, 50658, -1000, 86582, 86582, -1000, 8641, -1000, 4648,
	4645, -1000, -1000, 1043, -1000, 4756, 4562, -1000, -1000, -1000,
	-1000, 86582, 86582, 2459, 412, 2459, 402, 86582, -1000, -1000,
	-1000, 4189, -1000, 86582, 60876, -1000, -1000, 4188, -1000, -1000,
	-1000, 2901, -1000, -1000, -1000, -1000, 2351, 50129, 49624, -1000,
	3107, 1036, 1035, -1000, -1000, 1031, 8288, 86582, 86582, 418,
	415, 1883, 97, 3508, -1000, -1000, -1000, -1000, 4562, 667,
	-1000, -1000, -1000, 58351, 58351, 3944, -1000, -1000, -1000, -1000,
	-1000, -1000, 196, -1000, -1000, -1000, -1000, -1000, 4527, -1000,
	-1000, -1000, -1000, -1000, 86582, 14089, 36329, 653, 653, 653,
	-1000, 2596, 35301, -1000, -1000, -1000, 8239, 849, 40441, 14089,
	14089, 14089, -1000, 35301, -1000, 35301, -1000, -1000, -1000, 1738,
	-1000, -1000, 3405, 163, -1000, 4755, 665, 3941, 35301, -1000,
	-1000, -1000, -1000, -1000, -1000, 3410, 3721, 652, -1000, 2806,
	-1000, 3804, 3814, 3778, -1000, 4122, 45038, -1000, 1463, -1000,
	86582, 14089, -1000, 35301, 169, -1000, 168, -1000, -1000, 1374,
	53292, -1000, 1030, 86582, 161, -1000, 1816, 40441, 7981, -1000,
	-1000, 3703, 35301, 3700, -1000, 3710, -1000, -1000, -1000, 4749,
	4749, -1000, -1000, 4749, 4749, 3481, 4813, 158, -1000, 44018,
	4122, -1000, 3417, 156, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3924, 1029, -1000, -1000,
	3841, -1000, -1000, 3615, 3613, 2773, 2378, 1025, 1026, 1518,
	1457, 1456, 1463, 146, 3853, 114159, 9225, -1000, -1000, 394,
	-1000, -1000, 111724, 4479, 3000, 1732, -1000, 2462, -1000, -1000,
	-1000, 86582, -1000, -1000, 4587, 4586, -1000, -1000, 86582, 1683,
	-1000, 4583, 4580, 86582, -1000, 2785, -1000, 2481, 3929, 2345,
	1005, 35301, 2930, -1000, 25508, 1493, 86582, 2773, 1025, -1000,
	3398, 1493, 4584, 644, 66937, -1000, 4823, -1000, 44533, -1000,
	4754, -1000, 2903, -1000, -1000, -1000, 67442, 35301, 35301, 2445,
	4585, 1024, 4585, 86582, 4585, -1000, -1000, 1023, 3771, 1022,
	-1000, 4560, -1000, -1000, 35301, 2817, 3845, -1000, -1000, -1000,
	1891, -1000, 1878, -1000, 86582, 2459, 401, 86582, -1000, 1039,
	3491, -1000, 111724, -1000, 111724, 111724, 35301, -1000, -1000, -1000,
	86582, -1000, -1000, 86582, 86582, 86582, 86582, 4602, -1000, 448,
	428, 2091, 4602, -1000, 153, -1000, 4750, 148, -1000, 14089,
	-1000, -1000, -1000, -1000, 28100, 1021, 1019, 742, 630, 36843,
	36843, 36843, 142, 35301, 849, 145, 129, -1000, 3283, 3360,
	3402, 3552, 35301, 25508, -1000, 3466, 14089, -1000, -1000, 596,
	3940, -1000, -1000, -1000, 86582, 3796, 3785, 64412, -1000, -1000,
	-1000, 114, 112, -1000, -1000, -1000, -1000, 86582, 100, -1000,
	110263, 39927, 130, 25508, 3404, 3600, 86582, 3702, 14089, 3712,
	4076, 4813, 4813, 4813, 4813, 56331, 4495, 55826, -1000, -1000,
	25508, -1000, -1000, -1000, -1000, -1000, 57846, -1000, 3924, -1000,
	1846, 45543, 2445, 3417, -1000, -1000, 2378, 3841, 3573, 4584,
	-1000, 1509, 1507, 4583, 2810, 1017, -1000, 2461, -1000, -1000,
	2966, 1010, 1973, -1000, -1000, 4749, -1000, -1000, 3114, -1000,
	2905, 2898, -1000, -1000, -1000, 4748, 987, 1855, -1000, 2781,
	-1000, 3937, 3933, 3756, -1000, -1000, -1000, -1000, 7181, 7923,
	4743, 86582, -1000, -1000, 1493, 2028, 3573, 86582, -1000, -1000,
	-1000, 1008, 98, -1000, 118, -1000, -1000, -1000, 94, -1000,
	4807, 92, 88, 3843, 86582, 3843, 935, 3843, 50129, 1397,
	3771, -1000, 7665, 1005, -1000, 35301, 86582, 86582, -1000, -1000,
	1854, -1000, 2298, 1908, 2298, 84, 82, 81, 7337, 117,
	117, 1883, -1000, 97, -1000, -1000, -1000, 4136, -1000, 86582,
	1003, 36329, -1000, 35301, 35301, 1000, -1000, 2984, -1000, 41469,
	2476, 2153, 6788, 2984, 2984, 14089, -1000, -1000, -1000, 3721,
	3366, 3363, -1000, 3394, -1000, 3376, 3401, 3392, -1000, -1000,
	-1000, -1000, 3439, 398, 4075, 4074, 399, 4736, 2222, 78,
	-1000, 86582, 3694, 3619, -1000, 41983, -1000, 3627, -1000, -1000,
	-1000, 3691, 3774, -1000, -1000, 3688, 1145, 3697, -1000, -1000,
	-1000, -1000, 68, -1000, 55321, 68, -1000, -1000, 67, -1000,
	-1000, 1846, -1000, 65, -1000, 952, 4560, 35301, 3924, 3841,
	3417, 2378, -1000, -1000, -1000, -1000, 4604, 997, 45038, -1000,
	2457, 35301, -1000, -1000, -1000, 86582, 2995, 66937, 66937, 1463,
	68940, 86582, -1000, -1000, 3760, -1000, 3758, 3046, 3046, 2084,
	1881, 2351, -1000, -1000, 86582, 2024, 1493, 588, -1000, 4821,
	-1000, 67442, -1000, -1000, 4187, -1000, 62, -1000, 2557, 4122,
	574, -1000, 1397, -1000, -1000, 14089, 2459, 2459, 86582, -1000,
	-1000, -1000, 4072, -1000, 66937, -1000, -1000, -1000, 86582, 58351,
	-1000, -1000, -1000, 32, 27, 36329, -1000, 2273, 4640, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 567, 3932, 3931, -1000,
	-1000, 3373, -1000, 3371, -1000, 3721, -1000, 86582, 86582, 86582,
	-1000, -1000, 86582, -1000, 994, -1000, -1000, 3694, -1000, 40441,
	40441, 4494, -1000, 40441, -1000, 3533, 984, -1000, 64412, -1000,
	-1000, 3724, 86582, 3824, 981, -1000, -1000, 68, -1000, -1000,
	57846, -1000, -1000, 45543, 86582, 86582, 7196, 1846, 3417, 3924,
	3841, 4580, 45038, 13, 66937, 7108, -1000, -1000, 2138, 48,
	35, 4583, -1000, -1000, 3173, -1000, -1000, 4493, -1000, -1000,
	-1000, 21, 1493, 86582, -1000, -1000, -1000, -1000, 979, 2901,
	-1000, 2901, 3929, -1000, -1000, -1000, -1000, -1000, 2459, 86582,
	-1000, -1000, 428, -1000, -1000, -7, 2122, -1000, -1000, 1590,
	35815, -1000, 3362, 3361, -1000, -1000, 3927, 3862, 390, 374,
	-1000, 35301, -1000, 3404, 3404, -1000, 3404, 3626, 86077, 5,
	3250, -13, -1000, 35301, -1000, -1000, -1000, -1000, 4560, -1000,
	3924, 1846, 3417, 1846, -20, -1000, 2810, 978, -1000, 4479,
	4186, 4135, -1000, -1000, 935, 935, -1000, 1493, 35301, -1000,
	2901, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3356, 3350,
	3414, 54816, 86582, 86582, 86582, 7059, 86582, -21, -1000, 109776,
	3607, 3821, 3743, -31, 86582, 1846, -1000, 3924, 4122, -1000,
	45038, 4604, 24997, 2965, 1929, 1900, -1000, -1000, -1000, -51,
	2901, -1000, -1000, -1000, 4532, 1137, -1000, -1000, -1000, -1000,
	-1000, -53, 3721, 86077, 3612, 1905, 4820, -1000, -1000, -1000,
	3724, -1000, -1000, -1000, 1846, -1000, -1000, 4580, -55, -1000,
	-1000, -1000, -1000, -1000, 2457, 4579, 4566, -1000, 54816, 35301,
	-1000, 565, -1000, -1000, 3405, 3602, 3602, 4819, 3728, 3244,
	-1000, 1846, -1000, 24997, 66937, 2895, 2891, 3838, -48, -1000,
	3360, 3405, 3721, -1000, 914, 86582, 3821, 4122, -1000, 899,
	66937, 66937, 86582, 551, 3721, 3360, -1000, 86077, 3625, -1000,
	-1000, 24997, -1000, -1000, -1000, 4813, -1000, 3721, -61, 449,
	-63, -1000, -1000, 86077, -1000, -67, -1000,
}

var yyPgo = [...]int16{
	0, 5342, 5341, 3387, 139, 0, 27, 9545, 5339, 193,
	286, 364, 5338, 115, 52, 11662, 156, 96, 443, 375,
	5336, 5326, 5325, 5323, 32, 5322, 349, 5232, 10373, 9912,
	120, 5319, 295, 3253, 5318, 380, 300, 189, 5313, 210,
	5312, 5311, 170, 214, 5310, 273, 5309, 431, 5307, 25,
	5304, 5301, 251, 162, 398, 421, 422, 424, 5299, 345,
	395, 339, 357, 342, 5298, 12378, 130, 2491, 12, 5296,
	5292, 337, 5290, 5287, 5285, 325, 5284, 274, 5282, 5281,
	5279, 5278, 46, 389, 5278, 5277, 334, 5276, 5273, 5271,
	108, 5270, 5267, 5265, 5264, 284, 319, 320, 5263, 309,
	336, 3618, 252, 12746, 14423, 5262, 367, 91, 1021, 183,
	14991, 5261, 17929, 5259, 5257, 17576, 17428, 16941, 5255, 16306,
	16261, 131, 241, 216, 350, 361, 410, 285, 415, 645,
	392, 24, 198, 390, 5254, 5253, 5252, 171, 5251, 5250,
	63, 61, 324, 5249, 5248, 81, 28, 54, 420, 394,
	5246, 5245, 427, 5244, 5243, 12774, 76, 195, 5241, 110,
	5240, 329, 331, 66, 51, 5239, 328, 271, 298, 42,
	270, 192, 57, 186, 333, 5238, 5237, 5235, 5234, 101,
	257, 89, 17673, 434, 429, 165, 157, 154, 151, 5233,
	206, 204, 5230, 5227, 5223, 5222, 5221, 5220, 5219, 5217,
	5216, 5215, 5214, 5213, 5212, 5210, 5206, 5205, 5204, 5200,
	5199, 5198, 30, 31, 5197, 5196, 254, 255, 268, 318,
	5195, 321, 153, 7, 47, 163, 142, 5194, 5193, 5192,
	5189, 22, 88, 15, 5188, 5187, 5186, 378, 5185, 426,
	5184, 5183, 243, 307, 5180, 5178, 3494, 799, 3498, 5177,
	99, 305, 5174, 5173, 5172, 127, 5170, 5169, 5168, 87,
	5168, 48, 74, 5167, 40, 314, 356, 278, 409, 36,
	287, 436, 272, 5166, 425, 393, 383, 93, 190, 16,
	218, 184, 262, 5165, 253, 5163, 5162, 5162, 419, 311,
	249, 250, 145, 136, 5161, 442, 5160, 418, 5159, 5157,
	5156, 5153, 316, 233, 78, 5152, 225, 5151, 103, 5149,
	5148, 105, 315, 21, 60, 5147, 50, 111, 39, 172,
	5146, 79, 312, 1, 17, 11, 5145, 260, 5144, 80,
	5143, 308, 265, 5142, 323, 269, 5141, 322, 77, 6,
	5, 5139, 2, 8, 4, 14, 267, 5138, 58, 5136,
	98, 5130, 245, 173, 126, 5129, 121, 5126, 67, 44,
	125, 5125, 5124, 5123, 129, 49, 5122, 109, 5121, 181,
	292, 5120, 5119, 5118, 23, 43, 122, 68, 71, 59,
	35, 95, 56, 5117, 5115, 38, 97, 5114, 217, 37,
	10, 75, 289, 112, 5113, 19, 26, 18, 353, 1674,
	374, 373, 5112, 290, 400, 397, 448, 3626, 128, 381,
	34, 215, 5110, 211, 5109, 41, 5108, 104, 65, 174,
	69, 62, 5107, 53, 209, 5106, 86, 386, 5105, 297,
	1927, 18032, 5100, 164, 293, 441, 70, 5097, 221, 175,
	5096, 20, 343, 107, 455, 404, 5095, 362, 5095, 5094,
	5092, 179, 177, 119, 5088, 123, 5087, 5085, 5084, 5083,
	402, 5081, 5080, 5079, 5078, 5077, 5076, 5074, 5073, 5071,
	5070, 5067, 5066, 5063, 5062, 5059, 5058, 5056, 5055, 5054,
	433, 450, 5052, 365, 5051, 446, 348, 5050, 403, 5048,
	132, 5047, 401, 354, 5046, 5045, 5044, 359, 447, 417,
	411, 5042, 232, 405, 45, 5041, 82, 423, 4551, 194,
	114, 83, 5040, 5037, 188, 220, 5034, 185, 5033, 445,
	275, 432, 149, 146, 5032, 5031, 5030, 5029, 5026, 5025,
	5023, 5022, 5019, 5018, 5010, 5008, 5007, 5006, 5005, 5001,
	4999, 4998, 4996, 4995, 4994, 4992, 4990, 4989, 4988, 4987,
	4985, 4984, 4983, 4980, 4978, 4977, 4976, 4975, 4974, 4973,
	4972, 4969, 4967, 4966, 4964, 4963, 4960, 4959, 4958, 4957,
	4956, 4955, 4954, 4953, 4952, 4951, 4950, 4948, 4946, 4945,
	4942, 4941, 4939, 4936, 4934, 237, 224, 4932, 4931, 4927,
	370, 369, 413, 4924, 196, 279, 412, 208, 4923, 296,
	428, 222, 223, 100, 4922, 4920, 118, 4919, 4916, 4915,
	414, 4913, 439, 4912, 4911, 4909, 4908, 169, 117, 4906,
	90, 167, 435, 55, 4905, 4901, 219, 294, 113, 116,
	4900, 4899, 4897, 4895, 4893, 182, 4892, 4889, 226, 72,
	4886, 288, 231, 438, 3173, 371, 430, 4885, 408, 4884,
	138, 416, 4883, 248, 247, 94, 368, 4881, 106, 4880,
	4879, 303, 456, 202, 363, 4874, 4873, 73, 4872, 4870,
	240, 299, 4868, 4867, 4864, 4861, 4857, 4856, 3, 92,
	33, 9, 4855, 4852, 29, 4851, 4850, 283, 4848, 4847,
	388, 84, 85, 4846, 4845, 4843, 15007, 280, 4842, 4840,
	212, 13, 4839, 4839, 3527, 437, 4835, 64,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 19, 19, 396, 396, 430, 430, 430,
	33, 33, 34, 34, 35, 35, 36, 36, 49, 49,
	49, 5, 5, 5, 6, 6, 6, 6, 6, 8,
	8, 7, 13, 13, 14, 14, 62, 431, 431, 32,
	32, 16, 16, 18, 18, 697, 697, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 15, 15, 17, 17,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 693, 693, 693,
	693, 693, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 101, 103, 102, 102, 102,
	110, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 125, 125, 69, 69, 96,
	96, 100, 100, 99, 99, 99, 99, 97, 97, 70,
	70, 70, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 83, 83, 85, 85, 85, 85, 85, 86,
	86, 86, 87, 12, 12, 12, 12, 12, 12, 12,
	12, 88, 88, 89, 81, 90, 90, 218, 218, 91,
	91, 91, 92, 92, 92, 93, 93, 94, 94, 94,
	94, 303, 303, 303, 650, 650, 132, 132, 132, 132,
	132, 132, 132, 82, 82, 95, 95, 95, 72, 73,
	73, 76, 76, 75, 74, 74, 77, 77, 77, 80,
	80, 130, 130, 130, 78, 78, 79, 165, 165, 165,
	158, 158, 158, 158, 158, 158, 167, 167, 167, 167,
	166, 166, 166, 166, 166, 168, 168, 168, 168, 168,
	129, 129, 108, 108, 108, 108, 108, 108, 126, 126,
	126, 109, 109, 109, 109, 109, 109, 109, 109, 104,
	104, 104, 106, 107, 21, 122, 122, 123, 123, 111,
	111, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 118, 118, 114, 114, 694, 694, 695, 695,
	105, 105, 105, 105, 105, 105, 115, 116, 119, 120,
	117, 117, 117, 117, 696, 127, 127, 127, 128, 128,
	113, 113, 155, 155, 157, 157, 159, 159, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	156, 156, 131, 131, 136, 136, 133, 133, 162, 162,
	161, 161, 179, 179, 182, 182, 183, 183, 181, 181,
	181, 181, 181, 181, 181, 181, 148, 148, 149, 149,
	150, 150, 152, 153, 153, 153, 153, 151, 151, 154,
	154, 154, 184, 184, 184, 184, 184, 184, 184, 273,
	273, 272, 272, 275, 275, 275, 275, 276, 276, 277,
	277, 278, 278, 278, 278, 278, 278, 278, 278, 278,
	278, 278, 278, 433, 433, 434, 434, 434, 435, 435,
	435, 289, 289, 289, 289, 289, 289, 290, 290, 290,
	290, 291, 291, 292, 292, 293, 293, 293, 294, 294,
	295, 295, 297, 298, 298, 298, 299, 299, 299, 300,
	300, 300, 301, 301, 279, 279, 221, 221, 221, 242,
	282, 282, 281, 281, 281, 281, 284, 284, 284, 284,
	284, 283, 283, 285, 285, 286, 286, 287, 287, 288,
	288, 302, 302, 311, 311, 307, 307, 308, 309, 309,
	310, 310, 655, 305, 305, 304, 304, 306, 317, 317,
	319, 319, 318, 318, 318, 318, 320, 320, 321, 321,
	312, 312, 313, 313, 314, 314, 314, 315, 315, 316,
	316, 316, 316, 316, 322, 327, 326, 326, 338, 338,
	328, 328, 329, 330, 330, 333, 333, 332, 332, 334,
	334, 334, 335, 335, 335, 336, 336, 331, 331, 337,
	337, 340, 340, 341, 341, 341, 341, 341, 341, 341,
	341, 342, 342, 342, 342, 339, 339, 343, 343, 343,
	343, 343, 343, 343, 343, 343, 344, 344, 344, 344,
	344, 345, 345, 346, 346, 347, 347, 323, 323, 324,
	324, 324, 324, 324, 324, 325, 325, 185, 432, 432,
	211, 211, 211, 211, 211, 233, 233, 212, 212, 216,
	186, 213, 213, 219, 219, 217, 214, 214, 187, 296,
	296, 188, 215, 215, 189, 189, 236, 236, 237, 237,
	243, 243, 243, 252, 252, 253, 253, 255, 255, 256,
	256, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 254, 257, 257, 262, 263,
	263, 263, 263, 263, 263, 258, 258, 264, 269, 269,
	269, 269, 265, 265, 265, 265, 42, 42, 407, 407,
	407, 407, 407, 407, 407, 407, 406, 406, 406, 405,
	405, 405, 405, 405, 268, 268, 612, 612, 267, 267,
	698, 698, 639, 639, 238, 238, 239, 239, 240, 240,
	241, 241, 225, 225, 225, 225, 225, 234, 234, 235,
	235, 226, 226, 228, 229, 230, 230, 230, 230, 230,
	223, 220, 220, 220, 227, 227, 227, 260, 260, 261,
	261, 231, 231, 231, 232, 232, 224, 224, 163, 163,
	163, 164, 164, 164, 222, 222, 190, 190, 190, 190,
	190, 190, 409, 409, 409, 409, 409, 409, 409, 409,
	348, 348, 349, 349, 352, 352, 352, 355, 363, 363,
	363, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 411, 411, 412, 412, 413, 413, 414, 414, 350,
	350, 351, 351, 356, 356, 357, 357, 358, 358, 358,
	358, 359, 362, 362, 415, 415, 416, 416, 417, 10,
	41, 353, 367, 367, 368, 368, 368, 368, 371, 371,
	371, 371, 374, 374, 374, 419, 419, 422, 422, 424,
	424, 424, 424, 420, 420, 423, 423, 423, 423, 423,
	423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
	423, 699, 699, 37, 37, 37, 418, 418, 421, 421,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 354,
	354, 370, 370, 370, 370, 370, 370, 370, 372, 372,
	361, 361, 360, 360, 376, 376, 375, 375, 375, 375,
	380, 380, 380, 380, 380, 377, 378, 379, 379, 379,
	379, 379, 381, 381, 382, 382, 383, 384, 384, 385,
	385, 385, 410, 410, 389, 389, 389, 389, 390, 390,
	391, 391, 392, 191, 191, 373, 373, 393, 393, 395,
	395, 394, 394, 397, 397, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 398, 398, 24, 24,
	399, 399, 11, 508, 508, 508, 508, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 401, 401,
	401, 402, 403, 403, 700, 700, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 530, 531,
	531, 532, 532, 533, 534, 534, 454, 454, 454, 644,
	644, 644, 647, 647, 647, 647, 646, 646, 648, 648,
	455, 456, 456, 456, 456, 485, 485, 488, 489, 489,
	489, 491, 491, 491, 460, 460, 460, 460, 460, 460,
	460, 457, 457, 461, 461, 486, 486, 487, 487, 492,
	490, 490, 458, 458, 458, 458, 458, 459, 459, 195,
	195, 195, 195, 195, 493, 493, 196, 196, 196, 494,
	494, 495, 495, 496, 496, 197, 198, 198, 198, 198,
	198, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 47, 47, 48, 48, 443, 98,
	98, 98, 98, 442, 84, 84, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 365, 365, 366, 366, 366, 366, 366, 366, 386,
	387, 387, 388, 388, 388, 388, 449, 449, 449, 449,
	651, 651, 652, 652, 653, 653, 653, 654, 654, 654,
	654, 654, 656, 656, 656, 656, 656, 657, 121, 121,
	121, 658, 658, 659, 659, 661, 661, 661, 661, 661,
	666, 666, 660, 660, 667, 667, 667, 453, 685, 685,
	668, 668, 649, 649, 451, 451, 669, 669, 669, 671,
	671, 670, 670, 670, 670, 670, 676, 676, 677, 677,
	679, 674, 674, 675, 675, 682, 672, 672, 702, 702,
	673, 673, 680, 680, 701, 701, 678, 678, 678, 681,
	681, 681, 681, 683, 683, 452, 452, 452, 452, 259,
	259, 684, 684, 684, 684, 524, 524, 524, 524, 525,
	526, 526, 526, 526, 594, 594, 597, 527, 527, 528,
	529, 535, 536, 536, 536, 536, 536, 536, 536, 537,
	537, 537, 537, 537, 537, 537, 537, 537, 537, 537,
	537, 537, 537, 537, 537, 541, 541, 585, 585, 703,
	703, 542, 542, 543, 543, 586, 586, 588, 588, 588,
	588, 544, 587, 587, 589, 545, 545, 545, 545, 545,
	545, 545, 545, 545, 545, 545, 545, 545, 566, 567,
	567, 595, 595, 595, 595, 591, 591, 590, 590, 603,
	603, 568, 568, 569, 569, 569, 599, 599, 600, 600,
	601, 601, 570, 570, 570, 570, 571, 571, 572, 573,
	573, 602, 602, 634, 634, 634, 634, 635, 635, 642,
	636, 637, 637, 638, 540, 540, 540, 540, 540, 583,
	583, 584, 584, 640, 640, 641, 641, 522, 522, 523,
	437, 437, 438, 436, 436, 436, 439, 439, 440, 440,
	440, 440, 645, 645, 645, 645, 645, 645, 645, 645,
	645, 645, 645, 643, 643, 643, 643, 271, 271, 274,
	274, 266, 266, 686, 686, 686, 686, 686, 686, 686,
	688, 688, 688, 270, 270, 9, 9, 9, 9, 690,
	690, 497, 497, 497, 687, 687, 687, 687, 687, 689,
	689, 689, 689, 498, 498, 408, 408, 408, 408, 408,
	408, 426, 426, 38, 38, 39, 40, 40, 43, 43,
	43, 43, 44, 44, 46, 46, 46, 46, 427, 428,
	428, 429, 429, 546, 546, 547, 607, 607, 607, 607,
	604, 604, 606, 605, 605, 548, 608, 608, 549, 549,
	550, 551, 609, 609, 613, 613, 614, 614, 614, 614,
	614, 615, 615, 616, 616, 617, 617, 618, 618, 552,
	619, 619, 553, 553, 554, 554, 621, 621, 626, 626,
	626, 555, 555, 555, 556, 556, 556, 556, 622, 622,
	627, 627, 627, 627, 627, 627, 627, 280, 280, 557,
	558, 558, 558, 558, 558, 558, 558, 558, 558, 559,
	559, 559, 620, 620, 620, 560, 630, 630, 623, 623,
	628, 628, 628, 628, 628, 610, 610, 691, 691, 691,
	692, 692, 561, 562, 562, 624, 624, 629, 629, 563,
	564, 625, 625, 625, 625, 565, 565, 611, 611, 631,
	631, 632, 632, 633, 633, 53, 53, 53, 52, 52,
	169, 169, 172, 172, 172, 172, 172, 175, 176, 177,
	178, 173, 173, 170, 171, 171, 174, 174, 137, 137,
	138, 138, 140, 142, 142, 142, 141, 143, 143, 139,
	139, 144, 144, 144, 144, 145, 145, 146, 146, 146,
	146, 146, 147, 147, 147, 147, 147, 55, 55, 55,
	55, 54, 54, 56, 56, 56, 56, 56, 56, 57,
	57, 58, 58, 59, 60, 60, 60, 61, 61, 63,
	63, 64, 64, 462, 462, 462, 462, 462, 462, 462,
	462, 462, 462, 462, 462, 463, 463, 704, 704, 704,
	481, 481, 481, 464, 470, 468, 465, 465, 466, 466,
	466, 466, 480, 480, 469, 467, 467, 467, 467, 467,
	467, 499, 499, 500, 500, 482, 482, 482, 482, 482,
	482, 483, 483, 483, 483, 483, 483, 483, 483, 483,
	521, 521, 471, 472, 472, 473, 473, 474, 474, 475,
	501, 501, 484, 484, 484, 513, 513, 513, 506, 506,
	506, 506, 506, 506, 502, 502, 502, 502, 502, 503,
	503, 507, 507, 507, 507, 507, 520, 520, 520, 520,
	520, 520, 520, 520, 520, 520, 520, 520, 520, 520,
	520, 520, 520, 520, 520, 520, 520, 504, 504, 509,
	509, 511, 511, 505, 505, 514, 512, 512, 512, 510,
	510, 50, 50, 45, 45, 51, 51, 134, 135, 135,
	450, 450, 450, 444, 444, 662, 662, 662, 662, 662,
	662, 662, 662, 662, 662, 662, 662, 662, 662, 662,
	662, 662, 664, 664, 663, 663, 663, 665, 665, 665,
	665, 665, 705, 705, 441, 441, 441, 441, 445, 445,
	538, 539, 446, 446, 447, 447, 447, 447, 448, 448,
	448, 448, 199, 244, 244, 244, 244, 244, 244, 245,
	245, 245, 200, 200, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	246, 246, 247, 247, 201, 201, 202, 249, 249, 180,
	180, 180, 180, 180, 203, 203, 203, 250, 250, 251,
	204, 204, 204, 204, 205, 206, 206, 207, 20, 20,
	208, 209, 22, 22, 23, 23, 23, 23, 23, 23,
	23, 23, 210, 476, 476, 476, 476, 476, 476, 476,
	476, 476, 476, 476, 476, 476, 476, 476, 476, 476,
	476, 515, 515, 477, 477, 477, 477, 477, 477, 477,
	477, 477, 477, 516, 516, 517, 517, 478, 518, 518,
	519, 519, 479, 574, 574, 574, 574, 574, 574, 574,
	574, 574, 574, 574, 574, 574, 574, 574, 574, 574,
	574, 574, 574, 574, 574, 574, 574, 574, 574, 574,
	575, 575, 575, 575, 575, 575, 575, 575, 575, 575,
	575, 575, 575, 575, 575, 575, 575, 575, 575, 575,
	575, 575, 575, 575, 576, 577, 577, 577, 577, 577,
	577, 26, 26, 578, 579, 579, 579, 579, 592, 592,
	593, 593, 596, 596, 596, 598, 598, 598, 598, 598,
	598, 598, 706, 706, 580, 581, 581, 581, 581, 581,
	581, 707, 707, 582, 25, 25, 25,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	2, 0, 3, 0, 2, 0, 1, 0, 2, 2,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 1, 2, 3,
	0, 1, 3, 1, 3, 1, 0, 3, 3, 4,
	4, 4, 4, 3, 2, 1, 1, 2, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 5, 3, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 3, 3, 2, 2, 3, 5,
	4, 6, 3, 5, 4, 6, 4, 6, 5, 7,
	3, 2, 4, 2, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 3, 4, 4,
	6, 3, 3, 4, 3, 4, 4, 5, 4, 5,
	1, 1, 3, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 5,
	6, 3, 4, 1, 1, 2, 4, 1, 1, 1,
	2, 2, 2, 2, 1, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 6, 2, 3, 5, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 2, 1,
	2, 1, 0, 2, 2, 3, 5, 0, 2, 4,
	3, 1, 5, 1, 1, 4, 1, 4, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 6,
	4, 4, 6, 4, 4, 4, 4, 4, 6, 5,
	5, 5, 4, 6, 4, 4, 4, 4, 5, 7,
	7, 9, 4, 6, 5, 5, 7, 7, 4, 7,
	4, 6, 6, 4, 5, 4, 5, 3, 11, 8,
	9, 8, 1, 0, 5, 5, 3, 3, 5, 3,
	2, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 5, 3, 4, 1, 3, 3, 1, 2,
	2, 0, 1, 2, 0, 2, 3, 3, 3, 4,
	0, 1, 1, 1, 1, 2, 3, 4, 5, 6,
	8, 6, 6, 1, 3, 1, 3, 3, 5, 1,
	0, 1, 2, 4, 2, 0, 3, 3, 2, 1,
	3, 4, 3, 5, 4, 3, 5, 1, 1, 1,
	1, 4, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 3, 2, 3, 2, 0,
	1, 3, 2, 3, 5, 6, 2, 3, 3, 4,
	0, 1, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 3, 0, 2,
	3, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 1, 3, 3, 2, 4, 1, 5, 2,
	5, 2, 5, 2, 1, 3, 3, 0, 1, 0,
	3, 0, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 0, 5, 0, 5, 0, 0, 1,
	1, 3, 1, 1, 3, 3, 1, 1, 1, 2,
	4, 4, 2, 3, 5, 5, 1, 3, 1, 0,
	1, 2, 3, 2, 4, 2, 3, 2, 0, 1,
	2, 0, 9, 9, 2, 1, 4, 4, 4, 1,
	0, 1, 3, 3, 2, 1, 1, 2, 0, 1,
	3, 2, 3, 2, 3, 1, 4, 2, 3, 2,
	3, 2, 3, 1, 1, 2, 2, 4, 1, 2,
	3, 3, 4, 5, 4, 5, 4, 2, 2, 2,
	1, 1, 0, 5, 2, 2, 2, 3, 1, 0,
	1, 3, 9, 1, 2, 0, 7, 7, 0, 10,
	6, 0, 4, 5, 2, 0, 2, 4, 0, 1,
	1, 0, 5, 2, 4, 1, 1, 4, 5, 4,
	0, 2, 0, 1, 0, 1, 5, 1, 0, 2,
	0, 2, 6, 2, 0, 1, 3, 2, 4, 0,
	1, 3, 2, 1, 0, 1, 3, 3, 2, 0,
	2, 2, 2, 3, 3, 4, 1, 3, 3, 2,
	7, 12, 1, 3, 2, 3, 3, 1, 2, 2,
	2, 2, 1, 2, 13, 2, 2, 0, 2, 0,
	1, 3, 3, 1, 3, 1, 3, 3, 3, 3,
	3, 0, 3, 3, 0, 3, 0, 7, 7, 3,
	0, 2, 1, 1, 1, 1, 1, 1, 2, 2,
	1, 3, 3, 6, 0, 3, 0, 2, 3, 2,
	3, 4, 4, 3, 3, 0, 5, 2, 5, 2,
	0, 4, 2, 1, 0, 1, 0, 1, 3, 3,
	6, 7, 5, 7, 9, 2, 0, 7, 1, 3,
	1, 4, 4, 7, 2, 1, 1, 1, 3, 2,
	8, 1, 3, 3, 5, 2, 1, 3, 7, 2,
	0, 10, 1, 2, 9, 11, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 3, 0, 1, 3, 2,
	0, 1, 1, 3, 3, 1, 1, 3, 3, 3,
	3, 4, 4, 3, 3, 2, 1, 3, 2, 1,
	1, 1, 1, 3, 0, 1, 3, 1, 1, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 2, 2,
	1, 3, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 0, 2, 0,
	1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
	1, 0, 4, 4, 4, 5, 5, 2, 5, 3,
	5, 2, 0, 3, 1, 2, 5, 5, 8, 3,
	4, 8, 5, 0, 4, 3, 0, 1, 3, 1,
	3, 2, 2, 4, 4, 5, 2, 0, 1, 1,
	0, 2, 2, 0, 2, 0, 13, 16, 12, 15,
	14, 17, 1, 1, 2, 2, 2, 2, 1, 0,
	1, 0, 1, 3, 1, 1, 1, 3, 3, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 0, 2, 2, 1, 0, 3,
	0, 1, 3, 1, 1, 2, 4, 6, 6, 10,
	1, 2, 1, 3, 4, 0, 1, 3, 2, 1,
	1, 6, 2, 0, 3, 1, 1, 2, 1, 2,
	2, 2, 2, 3, 0, 1, 2, 1, 2, 1,
	3, 2, 3, 1, 2, 2, 2, 1, 2, 3,
	1, 2, 2, 2, 2, 3, 3, 3, 1, 3,
	1, 1, 0, 1, 1, 0, 1, 0, 3, 0,
	2, 1, 4, 4, 5, 2, 5, 5, 7, 3,
	1, 5, 9, 3, 9, 4, 11, 10, 2, 0,
	1, 3, 3, 6, 4, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	3, 3, 4, 0, 1, 0, 6, 1, 3, 3,
	3, 5, 2, 0, 3, 4, 4, 0, 2, 0,
	4, 0, 3, 16, 19, 1, 0, 2, 0, 4,
	0, 1, 3, 2, 0, 4, 6, 4, 6, 4,
	4, 6, 4, 6, 5, 7, 5, 7, 4, 6,
	10, 13, 10, 13, 11, 14, 1, 3, 1, 0,
	1, 3, 1, 1, 1, 1, 1, 2, 5, 3,
	6, 4, 6, 6, 9, 5, 7, 6, 6, 5,
	5, 5, 5, 9, 4, 5, 7, 6, 4, 8,
	4, 2, 4, 3, 6, 4, 3, 3, 3, 2,
	2, 3, 4, 4, 3, 3, 3, 3, 3, 3,
	4, 4, 3, 2, 3, 2, 2, 3, 4, 3,
	2, 2, 3, 4, 4, 4, 5, 1, 4, 4,
	4, 3, 3, 2, 1, 0, 6, 4, 6, 4,
	6, 8, 4, 6, 4, 6, 5, 7, 9, 7,
	9, 7, 9, 8, 4, 6, 2, 3, 3, 2,
	5, 1, 1, 2, 3, 2, 1, 1, 2, 1,
	2, 2, 4, 3, 5, 1, 3, 2, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 6, 5, 3, 5, 1, 0, 1, 3, 2,
	1, 1, 2, 3, 4, 3, 2, 4, 4, 6,
	4, 4, 2, 5, 2, 0, 5, 5, 5, 1,
	1, 1, 1, 3, 0, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 1, 2, 1, 1, 1,
	3, 3, 3, 3, 3, 2, 1, 3, 2, 3,
	5, 5, 5, 2, 1, 3, 6, 6, 6, 6,
	6, 8, 8, 6, 6, 7, 9, 9, 8, 10,
	6, 6, 6, 6, 6, 6, 6, 8, 6, 8,
	6, 8, 7, 9, 6, 8, 7, 9, 8, 10,
	8, 10, 9, 11, 8, 10, 9, 11, 8, 8,
	7, 6, 6, 6, 6, 8, 8, 8, 8, 6,
	9, 0, 2, 2, 1, 2, 2, 2, 2, 3,
	1, 3, 3, 1, 5, 3, 9, 12, 7, 7,
	3, 2, 1, 3, 1, 3, 3, 3, 3, 2,
	2, 1, 1, 1, 1, 2, 1, 1, 1, 4,
	5, 1, 0, 1, 2, 2, 2, 2, 1, 1,
	1, 3, 3, 5, 1, 4, 0, 2, 3, 0,
	1, 1, 2, 1, 17, 21, 1, 1, 2, 1,
	3, 1, 1, 1, 3, 1, 2, 0, 1, 2,
	4, 1, 1, 1, 1, 1, 3, 0, 1, 0,
	1, 1, 4, 0, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 2, 0, 9, 11, 12, 14, 3,
	0, 3, 4, 4, 0, 6, 4, 9, 7, 5,
	3, 5, 7, 9, 1, 3, 1, 3, 5, 5,
	6, 6, 4, 6, 6, 5, 7, 9, 6, 6,
	5, 4, 4, 3, 6, 6, 6, 6, 4, 7,
	5, 8, 7, 8, 6, 5, 8, 1, 0, 1,
	0, 4, 6, 5, 8, 2, 0, 2, 2, 2,
	1, 5, 2, 0, 2, 6, 6, 6, 10, 6,
	6, 6, 9, 9, 6, 6, 9, 6, 7, 7,
	6, 2, 2, 2, 2, 1, 2, 1, 0, 1,
	2, 10, 13, 5, 4, 4, 2, 0, 2, 2,
	1, 0, 11, 14, 12, 15, 8, 11, 8, 7,
	9, 1, 1, 3, 3, 5, 6, 1, 3, 1,
	3, 1, 3, 3, 7, 9, 9, 8, 6, 1,
	0, 1, 3, 3, 1, 5, 3, 8, 11, 6,
	1, 0, 5, 2, 3, 0, 2, 0, 1, 1,
	1, 1, 1, 3, 3, 2, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 3, 1,
	3, 1, 1, 1, 1, 3, 5, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 3, 2, 2, 1, 2, 2,
	2, 2, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 2, 0, 2, 0, 4, 1, 3, 1, 2,
	2, 2, 1, 1, 1, 1, 1, 3, 3, 1,
	3, 1, 3, 11, 13, 5, 1, 2, 2, 1,
	1, 3, 5, 1, 3, 7, 2, 0, 5, 5,
	10, 8, 2, 0, 2, 0, 1, 1, 1, 1,
	1, 2, 0, 2, 0, 4, 0, 5, 0, 8,
	1, 1, 8, 11, 6, 8, 1, 3, 1, 1,
	3, 4, 7, 6, 5, 5, 5, 5, 1, 3,
	4, 4, 4, 3, 4, 3, 1, 4, 0, 8,
	5, 5, 6, 7, 7, 7, 4, 4, 5, 11,
	10, 10, 2, 2, 0, 13, 2, 0, 1, 3,
	5, 5, 3, 6, 2, 1, 0, 2, 4, 0,
	1, 3, 6, 8, 8, 1, 3, 5, 5, 10,
	10, 11, 11, 5, 5, 6, 10, 1, 0, 2,
	0, 1, 0, 2, 2, 1, 1, 0, 4, 0,
	1, 3, 1, 1, 1, 1, 1, 2, 4, 4,
	5, 2, 0, 3, 1, 3, 4, 3, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 3, 3, 3, 0, 1, 4, 2, 2, 2,
	2, 2, 3, 2, 2, 3, 0, 2, 2, 1,
	1, 1, 0, 2, 4, 5, 6, 4, 5, 2,
	3, 1, 1, 1, 1, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 2, 3, 2,
	5, 4, 3, 3, 3, 3, 3, 1, 1, 0,
	2, 3, 0, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 0, 3, 6, 3, 5, 3, 5, 3,
	5, 2, 0, 2, 0, 1, 2, 2, 2, 3,
	3, 2, 2, 3, 3, 1, 1, 3, 3, 2,
	1, 1, 8, 8, 11, 5, 7, 6, 9, 5,
	2, 0, 3, 3, 3, 7, 7, 10, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 4, 5, 1,
	3, 2, 2, 2, 2, 2, 1, 2, 2, 4,
	3, 2, 2, 2, 2, 2, 2, 3, 2, 2,
	2, 2, 5, 5, 5, 5, 5, 1, 3, 1,
	2, 3, 0, 3, 1, 2, 1, 1, 1, 3,
	0, 1, 3, 1, 3, 1, 3, 6, 4, 0,
	5, 5, 5, 1, 2, 4, 5, 1, 1, 1,
	1, 3, 3, 2, 2, 1, 2, 2, 2, 2,
	1, 2, 1, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 2, 1, 3,
	7, 4, 1, 3, 4, 6, 4, 8, 1, 1,
	1, 1, 7, 2, 2, 2, 2, 3, 0, 2,
	2, 0, 2, 2, 1, 2, 3, 3, 3, 3,
	4, 4, 3, 3, 3, 4, 4, 3, 4, 4,
	1, 1, 1, 0, 2, 2, 5, 3, 0, 1,
	1, 1, 1, 1, 3, 9, 12, 3, 0, 6,
	2, 3, 2, 3, 2, 2, 2, 3, 2, 0,
	2, 5, 3, 0, 2, 2, 2, 3, 1, 3,
	1, 2, 5, 6, 6, 6, 6, 6, 6, 6,
	6, 8, 9, 8, 6, 6, 9, 9, 9, 7,
	10, 1, 1, 8, 8, 8, 8, 8, 8, 8,
	9, 8, 8, 2, 0, 1, 1, 2, 1, 2,
	1, 2, 2, 6, 6, 6, 6, 6, 6, 6,
	9, 9, 6, 6, 6, 8, 6, 8, 8, 8,
	8, 6, 8, 6, 8, 7, 9, 7, 9, 6,
	6, 6, 6, 6, 6, 6, 7, 7, 6, 9,
	9, 6, 6, 6, 6, 6, 6, 8, 8, 8,
	6, 7, 6, 6, 7, 8, 8, 8, 10, 9,
	8, 1, 0, 5, 5, 4, 6, 6, 1, 0,
	1, 2, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 4, 11, 11, 11, 13, 9,
	11, 1, 1, 6, 2, 2, 0,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -463, -179, -185, -186, -187,
	-188, -189, -190, -191, -192, -193, -194, -449, -450, -451,
	-452, -522, -523, -524, -525, -526, -527, -528, -530, -531,
	-532, -533, -534, -529, -535, -536, -537, -538, -539, -540,
	-541, -542, -543, -544, -545, -566, -567, -568, -569, -570,
	-571, -572, -573, -546, -547, -548, -549, -550, -551, -552,
	-553, -554, -555, -556, -557, -558, -559, -560, -561, -562,
	-563, -564, -565, -454, -455, -462, -464, -465, -466, -467,
	-468, -469, -470, -471, -472, -473, -474, -475, -456, -457,
	-461, -458, -459, -195, -196, -197, -198, -199, -200, -201,
	-202, -203, -204, -205, -206, -207, -208, -209, -210, -476,
	-477, -478, -479, -574, -575, -576, -577, -578, -579, -580,
	-581, -582, 266, 212, -181, -182, -294, 111, 26, 22,
	27, 394, 390, 93, 401, 191, 436, 228, 407, 413,
	397, 378, 290, 405, 274, 475, -490, 428, 223, 395,
	220, 259, 250, 280, 345, 222, 273, 249, 328, 472,
	358, 329, 333, 462, 226, 418, 109, 214, -184, -183,
	-293, 531, 119, 202, 63, 67, -301, 36, 518, 86,
	540, -704, 486, 457, -704, 96, 97, 98, 99, 531,
	-252, 115, -409, -373, -35, 33, 414, 247, 261, 62,
	464, 454, 225, 276, 284, 422, 103, -437, 268, 449,
	375, 194, 438, 387, 443, 512, -610, 406, 71, 453,
	451, 58, 289, 473, 471, 40, 67, 307, 419, 480,
	85, 284, 104, 199, 225, 236, 247, 261, 286, 71,
	-612, 62, 375, 385, 387, 409, 414, 422, 443, 412,
	460, 268, 406, 103, 449, 438, 454, 464, 276, 40,
	322, 384, -404, -407, -406, 464, 261, 307, 512, 62,
	458, 443, 247, 449, 364, 103, 406, 71, 67, 419,
	480, 85, 284, 225, 236, 438, 454, 194, 268, 276,
	-612, 387, 414, 422, 375, 412, 460, 85, 364, -644,
	58, 423, 457, -645, -643, -271, 56, 217, 414, 347,
	406, 488, -5, 4, -27, -28, 191, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 22, 201, 203, 204,
	205, 55, 206, 207, 208, 210, 211, 212, 88, 70,
	213, 214, 215, 24, 216, 218, 219, 220, 221, 222,
	223, 123, 226, 227, 228, 229, 230, 141, 231, 101,
	232, 233, 234, 235, 236, 111, 237, 154, 238, 120,
	121, 90, 246, 247, 248, 249, 250, 251, 253, 254,
	98, 149, 150, 255, 89, 256, 257, 258, 259, 260,
	261, 176, 27, 262, 138, 264, 148, 265, 267, 136,
	42, 268, 270, 271, 272, 273, 274, 275, 276, 277,
	279, 281, 282, 91, 283, 153, 165, 285, 286, 287,
	288, 289, 291, 294, 295, 151, 296, 297, 298, 28,
	299, 300, 301, 302, 303, 304, 305, 306, 307, 308,
	309, 310, 312, 313, 314, 96, 315, 317, 318, 145,
	503, 319, 320, 321, 322, 92, 324, 327, 328, 329,
	332, 333, 334, 335, 336, 337, 105, 85, 338, 99,
	340, 341, 342, 343, 344, 345, 346, 131, 348, 349,
	350, 351, 352, 353, 354, 357, 110, 358, 359, 32,
	139, 122, 504, 505, 502, 144, 62, 506, 507, 124,
	501, 508, 102, 364, 365, 366, 367, 368, 369, 370,
	129, 371, 128, 373, 374, 375, 377, 378, 379, 380,
	382, 383, 384, 385, 386, 112, 387, 152, 143, 388,
	389, 390, 391, 84, 132, 393, 394, 395, 396, 397,
	398, 399, 34, 400, 401, 402, 35, 403, 404, 405,
	407, 408, 409, 410, 127, 412, 413, 146, 415, 416,
	87, 417, 418, 419, 420, 421, 422, 93, 425, 427,
	428, 429, 430, 431, 107, 433, 434, 435, 436, 437,
	438, 113, 114, 439, 440, 441, 147, 442, 443, 445,
	446, 104, 448, 449, 108, 451, 452, 453, 454, 455,
	458, 460, 462, 463, 464, 465, 466, 467, 468, 142,
	469, 50, 472, 473, 474, 97, 475, 476, 477, 478,
	155, 183, 479, 480, 481, 482, 483, 485, 168, 486,
	140, 487, 498, 499, 57, 37, 173, 169, 189, 179,
	178, 224, 188, 187, 29, 278, 175, 292, 293, 500,
	186, 171, 185, 166, 160, 162, 163, 159, 161, 156,
	164, 158, 126, 157, 325, 339, 181, 182, 355, 356,
	360, 170, 361, 362, 376, 177, 174, 411, 426, 172,
	444, 184, 459, 461, 86, 180, 489, 490, 491, 492,
	493, 133, 494, 495, 496, 497, 125, -647, -646, 56,
	457, 423, -271, 21, 217, 58, 347, 406, 414, 488,
	-704, 457, -704, 379, -704, 379, -5, 423, 457, 56,
	413, -5, 457, -7, -5, -502, -503, 21, -507, 63,
	392, 26, 22, -5, -502, 290, -503, -5, -460, -490,
	118, 531, -179, -185, -186, -187, -188, -522, -523, 26,
	-241, 531, 79, -239, 531, 118, -271, 56, 457, 423,
	21, 531, -239, -496, 531, 21, 451, 453, 374, 420,
	-242, -7, -248, -242, -246, 349, 382, 91, 92, 193,
	396, -102, 21, 285, 210, 64, 45, -101, 534, 535,
	12, -248, -242, 21, -7, -7, 378, 21, -5, -5,
	536, -5, -21, -103, 7, -697, 67, -697, 74, 320,
	-518, -519, -103, 321, -132, -650, -104, -5, 4, -27,
	-29, 209, 115, 225, 25, 81, 242, 116, 79, 44,
	76, 52, 53, 75, 77, 46, 82, 54, 80, 363,
	78, 48, 450, 118, -170, -131, 470, 316, 269, 509,
	-183, -184, -182, -181, -182, -293, -285, -286, 21, 41,
	-433, -431, -434, -5, 66, 541, -295, 84, -297, -7,
	-295, 531, -3, -481, 30, -498, -497, -687, 318, 389,
	252, 31, 73, -435, -433, 64, 73, -180, -179, -185,
	-186, -187, -188, -431, 67, 480, 84, 419, 307, 286,
	385, 460, 117, 199, 458, -611, 463, 34, -19, -5,
	28, -7, -15, -5, -156, 221, 279, -159, -5, 11,
	-160, 534, 535, 536, 537, 538, 539, 525, 526, 527,
	18, 19, 20, -15, 87, -15, 28, -7, 28, 246,
	67, -7, 28, 336, -11, -508, -9, 241, 245, 424,
	4, -27, -28, -29, 85, 460, -7, -7, 340, -396,
	28, -15, -7, -7, 531, 236, -11, -11, 453, 451,
	453, 451, -433, 28, 21, -431, 28, 21, -431, 28,
	-431, 28, 480, 67, 246, 93, 401, -442, -650, -15,
	-15, -7, -15, -441, -650, -29, -5, -11, -508, 321,
	221, 279, -443, -156, -7, 28, -441, -7, -441, -7,
	-7, -7, -7, -7, 460, -11, -508, 21, -11, 336,
	-508, 21, -7, -15, 28, 87, -15, -7, 383, 139,
	28, -17, -15, 28, -13, -7, -7, 28, -268, 28,
	-108, -109, 426, -111, -112, -118, -114, -117, -110, -696,
	-104, 186, 171, 172, 173, 174, 175, 176, 187, 188,
	170, 189, -119, -120, -115, -116, 184, 56, 185, 166,
	4, -27, 169, -105, 178, 179, 180, 181, 182, -268,
	28, 25, -33, 28, 221, 279, -33, -7, 28, -7,
	28, -7, 28, 70, 336, -399, 28, -508, -399, 28,
	-399, 28, 480, 246, 67, 87, 340, 460, 321, 480,
	70, -644, 423, -644, 219, 209, -497, 431, 64, 61,
	527, 533, 57, -103, -103, -688, -103, 40, -270, -9,
	-103, 506, 57, 318, 209, -481, -498, -481, -103, -481,
	61, -103, -5, -103, -249, 531, 74, 61, 541, 383,
	531, -259, 531, -259, -259, 104, -259, 74, 506, 64,
	506, -239, -460, -485, -488, -489, 86, -9, -490, 515,
	473, -238, 116, -485, -486, -487, -492, -431, -485, 57,
	318, 209, -485, -431, -7, -5, -494, 414, -495, 307,
	67, 104, 247, -485, -244, -242, -247, -246, -247, -247,
	-247, -102, -102, -247, -247, -247, -102, 21, -247, -102,
	21, -101, -101, -250, 531, -7, 21, -20, 541, -18,
	-433, -18, -404, 514, -405, 464, 261, 199, 286, 62,
	117, -406, 385, 409, 458, 322, 512, 307, -407, 247,
	406, 443, 449, -516, 130, -519, -270, 531, -96, -99,
	533, 529, -148, -55, -150, 130, -56, -57, -152, 68,
	280, 69, -153, -53, 21, 41, -53, -53, 70, -170,
	-131, 532, 532, -273, -272, -275, -65, 536, -67, 534,
	535, -155, 31, 516, -130, 471, 40, -69, -68, 13,
	531, -72, -70, -182, 29, 134, -78, -79, 293, 11,
	62, 411, -5, -101, 6, -103, 49, 43, 47, 9,
	10, -650, -693, -110, 38, -132, -331, -71, -112, -694,
	-695, -117, -696, 185, 161, 162, 225, 240, 243, 244,
	330, 331, 241, 245, 424, 447, 103, 239, 242, 512,
	278, 356, 362, 376, 444, 459, 461, 360, 224, 292,
	325, 490, 491, 493, 494, 492, 495, 496, 159, 160,
	166, 164, 158, 339, 156, 163, 157, 497, 173, 169,
	189, 179, 178, 188, 187, 175, 186, 171, 181, 182,
	170, 174, 172, 56, 184, 180, -119, -120, -115, -116,
	-272, 74, 536, -96, -431, 531, 531, 541, -295, -32,
	531, -129, -65, 218, 354, 541, -687, 327, 66, 487,
	252, -432, -431, 93, -5, 23, -435, -435, 532, -259,
	-431, 28, -251, -431, 480, -431, 28, -36, 25, -650,
	-650, -7, 460, -650, 130, -612, -409, 473, 209, -439,
	31, -37, 36, 518, -639, 23, -122, 533, -427, 531,
	-15, -15, 533, -427, 23, 368, 257, 452, 231, -427,
	64, 31, -37, 31, 140, -431, 28, -599, 464, 31,
	130, 28, -37, 480, -7, -608, 365, 74, -7, -32,
	31, -426, 130, 36, 232, -108, -15, -37, -37, -398,
	-401, 398, 93, -400, 207, 256, 196, 22, 27, 477,
	223, 264, 258, 309, 354, 122, 31, 365, 401, 400,
	153, -39, 507, 29, 45, -398, -402, 398, -26, 207,
	354, 93, 29, 45, -398, 398, -420, 93, -423, 354,
	23, 213, 90, 305, 335, 338, 342, 364, 419, 436,
	402, 473, 29, -398, 398, 93, 29, -431, 28, 21,
	-433, 28, 140, -643, -271, -646, 398, 93, 365, -47,
	531, 398, 93, 365, 394, 398, 93, 365, 398, 365,
	36, -592, 93, 394, -648, -593, -455, -596, -598, 4,
	232, 148, 332, 449, 452, 398, -403, 27, 93, 196,
	477, 365, 398, -444, 93, 365, -26, -662, 354, 215,
	404, 441, 300, 434, 482, 277, 418, 324, 31, 237,
	127, 445, -649, 366, -455, -47, -96, 398, -521, 196,
	27, -7, -15, -15, 93, 365, -98, 531, 74, 29,
	398, -444, 93, 365, -26, 398, 93, 196, 27, 365,
	398, -444, 93, 365, -26, 398, 365, 398, -600, -39,
	365, 479, 398, 93, 232, 394, 196, 27, 264, 258,
	430, 365, 74, 74, -7, 398, -37, -480, 45, -480,
	398, 130, -37, -480, -480, 398, 93, 401, 365, 398,
	93, 365, 29, 368, 257, 452, 231, 398, 196, 27,
	93, -446, 365, -447, 22, 97, -521, 93, -501, -265,
	6, 534, 535, -102, 29, 541, -430, 24, 35, 29,
	541, -430, 74, 29, 541, -430, 29, -126, 134, -109,
	-124, 531, 498, 344, 248, 297, 341, -125, 417, -123,
	-122, 531, -113, 531, 177, -123, -123, -123, 531, -127,
	518, 519, 531, -127, -128, 183, 531, -128, -128, 178,
	179, -128, -430, 29, -17, 28, 531, 29, -15, 28,
	-15, 28, 130, -430, 29, -37, 29, 29, -399, 130,
	28, 541, 29, 29, 29, 140, 368, 257, 452, 231,
	-36, -399, 219, 23, -270, 40, -103, 120, -274, 40,
	-266, -269, -265, 49, 43, 74, -270, -274, 40, -5,
	-686, -103, 4, -110, -265, 40, 58, -690, 260, 234,
	327, 413, -5, 23, -692, -108, -520, -16, 67, 419,
	284, 286, 385, 409, 247, 261, 321, 322, 367, 414,
	449, 464, 21, -431, -399, -507, 531, -14, -62, -5,
	-14, -520, 130, -399, 130, -460, 532, 541, -491, -269,
	-265, -239, 532, 541, -32, 532, 327, 532, -493, 83,
	74, -36, -36, -36, 532, 121, 115, 314, 203, 416,
	354, -242, -242, -242, -242, -247, -247, -242, -242, -242,
	-247, -247, -242, -247, -247, -129, -103, 541, -22, 45,
	-25, 235, 402, -15, -15, -7, -108, -108, -442, -441,
	-443, 221, 279, -7, -7, -441, -441, 130, 139, 531,
	74, -270, 532, 536, -82, 190, 21, 41, -95, -65,
	-107, -104, -99, -106, 536, -6, 4, -27, -28, -29,
	-30, 21, 202, 119, 30, 510, 134, 23, 94, 60,
	511, 38, 512, 513, 39, 514, 117, 26, 239, 240,
	241, 243, 244, 245, 40, 252, 95, 41, 109, 263,
	266, 269, 43, 280, 130, 284, 64, 290, 71, 72,
	45, 311, 316, 73, 323, 326, 68, 330, 331, 31,
	47, 69, 74, 66, 33, 509, 372, 381, 392, 100,
	63, 424, 432, 59, 447, 67, 106, 61, 456, 49,
	470, 471, 103, 83, 190, 51, 65, 484, 36, -65,
	-100, -54, -55, -149, -148, -152, 130, 389, 97, 354,
	427, 503, -57, -56, -58, -65, 21, -64, 91, 349,
	-59, -60, -65, -67, 534, 535, -151, 122, -183, -183,
	-183, -171, -174, -65, -148, -55, -288, 73, 541, 14,
	39, 55, 534, 535, 536, 537, 538, 539, 525, 526,
	527, 18, 19, 20, -155, 30, 33, 46, 516, 44,
	48, 52, 53, 54, 37, 45, -158, 23, -8, 11,
	62, -159, 4, -31, 191, 192, 193, 194, 195, 196,
	197, 198, 199, 21, 200, 22, 201, 202, 119, 510,
	94, 203, 204, 205, 60, 206, 207, 208, 209, 210,
	211, 212, 173, 115, 169, 189, 511, 88, 70, 213,
	214, 215, 24, 216, 38, 512, 217, 218, 219, 513,
	220, 221, 222, 223, 224, 225, 514, 123, 226, 227,
	228, 229, 230, 25, 141, 231, 101, 232, 117, 233,
	234, 235, 236, 111, 237, 81, 154, 238, 120, 239,
	240, 241, 242, 243, 244, 245, 121, 90, 246, 247,
	249, 188, 187, 250, 40, 251, 252, 253, 254, 98,
	149, 150, 255, 89, 95, 256, 257, 258, 259, 41,
	109, 260, 261, 176, 27, 262, 263, 138, 264, 148,
	265, 266, 267, 136, 42, 268, 270, 271, 272, 273,
	29, 274, 275, 276, 277, 278, 43, 279, 282, 91,
	175, 283, 153, 284, 165, 285, 116, 79, 286, 287,
	288, 289, 291, 292, 293, 294, 295, 151, 296, 298,
	28, 299, 300, 301, 302, 303, 304, 305, 306, 307,
	308, 309, 310, 311, 312, 76, 500, 313, 314, 96,
	315, 186, 171, 185, 317, 318, 75, 166, 160, 162,
	163, 159, 161, 156, 164, 158, 126, 157, 145, 503,
	319, 320, 321, 322, 92, 323, 326, 324, 325, 77,
	327, 328, 329, 58, 330, 331, 332, 333, 334, 335,
	336, 337, 105, 85, 338, 99, 339, 340, 342, 343,
	345, 346, 347, 181, 82, 182, 131, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 31, 110, 358,
	359, 47, 360, 32, 170, 139, 122, 504, 505, 502,
	144, 66, 506, 507, 124, 501, 361, 80, 362, 102,
	364, 365, 366, 367, 368, 369, 370, 129, 371, 128,
	372, 373, 374, 375, 376, 377, 378, 379, 380, 381,
	382, 383, 384, 385, 386, 112, 387, 152, 143, 388,
	389, 174, 390, 391, 84, 132, 392, 393, 394, 395,
	396, 397, 398, 399, 34, 400, 401, 402, 35, 403,
	404, 405, 78, 406, 407, 408, 409, 410, 411, 127,
	412, 413, 146, 414, 415, 416, 87, 418, 63, 419,
	420, 421, 422, 423, 424, 93, 426, 425, 427, 428,
	429, 430, 172, 431, 432, 107, 433, 434, 435, 436,
	437, 438, 113, 114, 439, 440, 441, 147, 442, 443,
	444, 445, 59, 446, 104, 447, 67, 448, 450, 449,
	108, 451, 452, 453, 454, 106, 455, 56, 184, 456,
	457, 458, 459, 460, 461, 49, 462, 463, 464, 465,
	466, 467, 468, 142, 469, 471, 50, 472, 473, 474,
	97, 103, 83, 475, 476, 477, 478, 155, 86, 180,
	190, 118, 479, 480, 481, 482, 51, 483, 486, 140,
	487, 488, 489, 490, 491, 492, 493, 133, 494, 495,
	496, 497, 125, 499, 57, -65, -65, -65, -65, -65,
	363, -374, 32, -97, -65, -129, -182, -96, -182, -182,
	-77, 529, 531, 531, 531, -96, -103, 531, -103, -103,
	531, -73, -65, -136, 485, -133, 281, 531, 531, 130,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, -288, 531, -431, -129, -297, 23, -13,
	541, 532, 39, 55, 30, 33, 46, 44, 48, 52,
	37, 45, 62, 218, -687, -689, 389, 399, 421, -211,
	-179, 102, 531, 40, 23, -213, -219, -217, 531, -5,
	-5, -296, 83, 83, 61, -236, 64, 61, 531, 122,
	370, -259, 31, 23, -259, -431, -585, -420, 354, 31,
	-19, 28, -5, -651, 531, -651, -669, 211, 198, 315,
	-7, -634, -636, 531, -108, 321, 480, 84, -508, -440,
	-190, -191, -451, -452, 26, 29, -592, 365, -108, 533,
	-106, -428, -429, -6, -610, 83, -156, 531, 267, 388,
	-15, -15, -15, -15, -15, 29, -586, 29, -7, 531,
	370, 31, -601, -600, -103, 29, -602, -508, 103, 31,
	-499, -438, 28, -431, 74, 332, -508, -431, 464, 74,
	29, 21, -622, -627, 67, 448, -5, -434, 242, -431,
	-427, -103, 23, 130, -499, -499, 541, 61, -700, 117,
	514, 168, 335, 473, 194, 449, -386, 414, 531, 370,
	370, -353, 28, 514, -354, -5, 117, -370, 513, 471,
	381, 284, 270, -700, 117, -700, 117, 117, 74, 460,
	201, 400, 412, 411, 460, 412, 411, -431, 309, 153,
	-15, 122, 61, -386, 298, 411, 531, -433, 449, 61,
	255, 370, -431, 449, 61, -423, 414, 90, 338, 342,
	-109, -265, -699, 70, -265, -265, 70, 346, -37, -37,
	-431, 61, -700, 414, -431, -398, 398, 93, -26, 29,
	45, -398, 398, 93, 29, -7, 61, 414, 61, -48,
	532, -654, -656, -107, -121, 45, 361, 500, 190, -104,
	-108, 426, 61, 414, 61, 479, 61, 414, 61, 61,
	61, -592, -644, 449, 225, -596, -706, 527, 68, 61,
	117, 40, 31, 117, 40, 31, 414, -640, 117, -641,
	513, 31, 117, 61, 61, -705, -662, 35, 93, -645,
	414, 423, 457, 61, 255, 74, 47, 418, 254, 317,
	324, -265, -265, -15, -5, 61, 103, 398, 365, 83,
	83, 414, 531, 61, -108, 355, -431, -7, 61, -705,
	414, 61, 255, 61, -427, -622, -622, -622, 61, 61,
	-705, 414, 61, 255, 61, 61, 61, -39, 61, -103,
	47, 61, -427, 387, -103, 387, 387, 387, -427, 61,
	-431, -431, 398, -607, 365, 264, 258, 61, -500, -648,
	93, 247, -648, 61, -602, -500, -648, -648, 61, -386,
	-386, 61, 61, 438, 414, 61, -15, -15, -15, -15,
	-15, 61, 208, 155, 155, 208, 155, 208, 531, 414,
	541, 61, 208, -587, -405, -404, 199, 512, 261, 286,
	62, 385, 409, 458, 464, 414, -513, -484, 290, 405,
	45, 130, 365, 6, 6, -17, -15, -13, -7, -15,
	-7, -108, -268, 529, 529, -126, 134, -101, 61, 61,
	61, 61, 531, -123, -129, -101, -101, 56, 56, -101,
	531, -101, -128, -128, -268, -430, 29, -108, 83, 29,
	83, 29, -108, -7, 531, -7, -7, -430, -602, 29,
	-508, -399, -399, -399, -431, 61, 457, 541, -103, 531,
	-5, -180, 541, 532, 61, 541, -16, -16, 246, 422,
	-445, -441, -445, -445, -13, -17, -13, 139, -50, -45,
	-5, -13, -13, -17, 448, 420, 287, 386, 410, -510,
	36, 291, -14, 541, 532, 532, 64, -502, -503, -510,
	-503, -460, -488, -240, 119, -486, -492, -486, -431, -7,
	-431, -431, -7, -19, -245, 36, 168, 416, -242, -242,
	-242, -242, -242, -242, 532, -433, -24, 359, -23, 194,
	411, 427, 272, -430, 298, 298, 52, 52, 52, 52,
	52, 52, 52, 52, -15, -15, 74, 74, 52, 52,
	-108, -265, -108, -404, 514, -405, 464, 261, 199, 286,
	322, 385, 409, 532, -131, 541, -170, -95, -82, -82,
	16, 17, 530, 542, 66, 503, 427, 541, -60, -63,
	-67, 534, 535, 411, 127, 531, -63, 411, 127, -61,
	-101, 6, -61, -154, 359, 430, -16, 541, 83, -163,
	94, 95, -54, -149, -276, 64, -425, 453, 451, 58,
	289, 473, 67, -431, -275, -108, -15, 56, 58, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, 46, 44, 48, 37, 45,
	-65, 61, 47, 31, 49, 43, 50, 41, 260, 357,
	-167, -166, 350, 351, 352, 353, 166, -162, 59, 60,
	-161, -182, 531, -165, 510, 432, 21, -6, 531, -130,
	411, 531, -182, 41, 31, -99, 532, 541, -129, -80,
	530, -77, -129, -156, -129, 532, -82, -124, -101, -76,
	-75, 51, -133, 71, -142, 508, 531, -332, -67, -65,
	-327, -65, 531, -101, -101, -101, -101, -65, -87, -12,
	4, 498, 344, 248, 297, 341, 417, -103, -65, -88,
	-83, -65, -82, -89, -66, -67, 534, 535, -155, 411,
	-85, -83, -65, -65, 511, 326, 456, -86, -65, 64,
	-129, -65, -129, -129, -129, -129, 346, -90, -218, -65,
	-690, -67, 346, -65, -82, -333, -337, -332, 100, -65,
	-330, -181, -337, -327, -182, -327, -65, -327, 532, -327,
	-327, -327, -690, -276, -129, 532, 532, -298, 85, 31,
	532, -65, 468, 229, 389, -220, 74, -233, 103, 104,
	-212, -216, -5, 86, -5, -276, 541, 527, -214, -217,
	-97, -221, 65, -277, -278, -433, -182, 323, -289, 531,
	-302, -312, -322, -303, 127, 125, 126, -5, -132, -71,
	-331, 166, -278, -237, 112, -237, -348, -349, -352, -5,
	-353, -355, -354, 46, -15, 122, -410, 83, 29, 273,
	-397, 36, 531, 29, 74, 31, 404, -658, -659, -661,
	23, 321, 458, 484, -662, -652, 532, -653, -654, -658,
	-671, -670, 96, 98, 97, 462, 122, 198, -427, 536,
	-635, 509, -637, -642, -638, -654, 4, 321, -7, -431,
	480, -439, -409, -35, -19, -5, -367, -106, 532, 541,
	527, 130, -7, -305, -304, -306, -5, 531, -427, -427,
	-427, -427, -427, -15, -588, 414, 479, 64, 24, -7,
	-590, -591, -595, 295, 354, 478, -348, 122, 29, 284,
	-7, 422, 29, -482, -483, 446, 197, 406, 45, 371,
	265, 469, 309, 4, 232, 476, 103, 23, 31, -259,
	-6, 7, -609, 23, -619, 307, 67, -621, -626, -5,
	-303, 531, -15, 448, -426, 541, -433, 45, -96, -259,
	-259, 387, -108, -103, -400, -7, -7, -7, 505, 223,
	340, -7, -7, -387, -388, -6, -431, -431, 31, -353,
	28, -108, -7, 531, -374, -392, 83, 503, 503, -393,
	83, -5, -101, -7, 28, -5, 28, -7, -7, -7,
	-7, 21, 103, 460, 412, 460, 412, -7, 327, -7,
	21, 103, -7, 327, -431, 411, -508, -46, 110, 79,
	40, 83, 327, -40, -43, -417, 93, 196, 27, -10,
	-6, -398, -401, 398, 93, -7, -7, 74, -431, -398,
	398, -7, -7, -7, -265, -15, -15, -265, -265, -398,
	398, -420, 93, -7, -7, -7, -398, 398, 93, 61,
	-700, 414, 255, -431, 449, 61, -700, 414, -433, 398,
	-590, -591, 365, -7, -7, -508, 532, 541, -107, -121,
	-656, -121, -104, 361, -122, -104, -7, -7, -508, -7,
	-7, -508, -7, -508, -7, 479, -102, -269, 40, -7,
	-7, 47, -7, 28, -65, 47, -7, -7, 531, 47,
	-7, -508, -7, -7, -508, 74, 47, 74, 254, 317,
	-11, -399, 61, 61, -7, -7, -7, -664, -663, -6,
	-508, 532, 541, 541, 398, -616, 61, 74, -7, -7,
	-508, 74, -7, -508, -7, -7, -508, 74, -7, -508,
	-7, -508, -7, -13, -426, -13, -13, -508, 398, 398,
	-26, 61, 61, 400, 201, -11, -483, -7, -11, 422,
	-7, -508, -7, -42, -102, 40, -7, -508, 93, 398,
	93, 398, 93, 365, -427, 398, 93, 398, 93, 365,
	196, 22, 27, -7, -7, -103, -34, 28, -306, -103,
	28, -5, -664, -7, -447, 196, 27, -508, -5, -589,
	61, -7, -15, -442, 531, -108, -441, -443, 221, 279,
	-441, -441, 130, -108, -7, -502, -502, 290, 414, 406,
	103, 61, -430, -430, -430, 74, -430, 530, -101, -101,
	529, 532, 344, 297, 341, -125, 341, -125, -125, -101,
	532, 532, 532, 57, 57, 532, -129, 532, -430, -17,
	23, -7, -15, -7, -15, 321, -430, -594, -597, 153,
	-37, 422, 130, -436, 36, -508, -497, -266, -124, -101,
	-108, -504, -509, -508, 71, -431, 140, -13, 541, -51,
	-265, 541, 533, 45, 45, 45, 45, 45, -505, -514,
	-6, 70, 532, -62, -504, 74, -430, 64, -486, -493,
	130, 296, 296, 343, 427, 272, 427, 272, 97, 411,
	-515, -103, 47, -515, -515, -515, -515, -515, -515, -515,
	83, 83, -15, 261, -15, -515, -515, 321, 52, 23,
	-15, -15, -7, -108, -108, -442, -441, 139, -441, -441,
	532, 190, -95, -131, -131, 541, -131, -65, -65, -100,
	-65, 97, -59, -63, 66, 36, -101, 6, 531, -129,
	334, -174, -157, -159, 62, -164, 517, -279, 65, -277,
	-697, -697, 453, 451, 453, 451, -697, -431, 57, 42,
	-65, -65, 61, -162, 59, -161, 42, -65, 47, 49,
	43, 50, 41, 260, 357, -167, -166, 64, 357, -168,
	36, 168, 155, 134, 139, 146, -66, -66, -129, -182,
	531, -156, 531, -129, 41, -97, -65, 530, 530, 541,
	532, 532, 532, -131, 532, -74, -75, 263, -65, -142,
	531, -141, -5, 531, 65, -334, 47, 192, 155, 542,
	-336, 509, -346, -345, 515, -65, 532, 532, 532, 532,
	23, 532, 64, 532, 541, 532, 532, 372, 532, 14,
	534, 535, 536, 537, 538, 539, 525, 526, 527, 18,
	19, 20, -155, 52, 45, 62, -66, -66, -66, 532,
	532, 48, 64, 130, 23, -86, -86, -86, 532, 64,
	-129, 541, 532, 532, 532, 532, -6, 532, 541, 23,
	-65, -318, 129, -6, 541, 532, -334, 541, 532, -108,
	-335, 541, 47, 192, -346, 532, -168, 532, -337, 541,
	541, 541, -65, -279, 532, 531, 85, -222, 100, 101,
	155, 532, 541, -97, -221, -219, -65, 532, 541, -222,
	-65, 120, 541, 81, -290, 75, 82, 79, 77, 78,
	76, -282, -281, 23, -5, -282, -182, -302, -312, -322,
	-182, -289, -278, -284, -281, 23, -5, -282, -282, -311,
	518, 64, 531, 531, -96, 74, -243, -103, 113, 114,
	-243, 532, 541, -431, -350, 531, -431, -49, 36, 168,
	-7, -431, -251, -7, 23, -386, -14, -431, -433, 29,
	-657, 67, -121, -667, -453, 212, 403, -661, -666, -103,
	-270, -660, 130, 532, 541, 40, 527, -667, 74, 33,
	122, -671, 532, 532, 509, 541, 70, 532, 541, 527,
	-7, 295, -259, -431, 67, 209, -439, -368, 117, -369,
	-371, 39, 31, 47, 471, 381, 513, 40, 392, 288,
	252, 311, -429, -408, -121, -30, -157, -265, -103, 355,
	62, 534, 535, 464, 532, 541, -108, -583, -584, -103,
	-427, 64, -7, -270, -270, -37, -415, 507, -595, -603,
	-7, 295, 478, -603, 532, -431, -431, 246, -599, -7,
	130, -101, -399, -399, 406, 71, -103, 47, 371, 371,
	68, 474, -399, -179, 29, -410, 273, 51, -397, -613,
	130, 4, 295, 64, 541, -65, -32, -426, -627, -259,
	414, -259, -280, 65, -280, -13, 532, 61, 61, 61,
	-44, -5, 40, 532, 541, 527, 533, -358, 130, 40,
	-36, 282, 29, 31, -414, -413, 439, -370, 270, -65,
	531, -365, 307, 531, -392, 531, 531, -7, -403, 27,
	93, 401, 196, -422, -267, -39, -424, 402, 93, -365,
	29, -430, 29, -430, -7, -7, -7, -7, 418, 418,
	327, 307, 418, 532, 541, -417, -417, -10, -41, -103,
	61, -700, 117, 414, 93, 364, 276, 61, 93, 364,
	61, 414, 61, 61, -700, 414, -7, -7, -7, 74,
	-398, 398, 93, -7, -7, -7, -7, -398, 398, 93,
	61, -39, 61, -654, -121, -121, 538, -122, 61, -430,
	29, -641, -65, -365, 276, 313, 47, -7, -508, 398,
	93, 365, 398, 196, 27, 93, 365, 541, 532, 527,
	-108, 355, -108, 61, -617, 83, -399, -431, 276, 276,
	-426, -426, -426, 61, 61, 255, -7, -508, -7, 438,
	61, 414, 61, 414, 61, 61, 414, 61, 414, 61,
	336, 336, 336, 61, 61, -103, 31, -430, 29, -430,
	532, -267, 93, -270, -108, -15, -15, -108, 74, 74,
	506, -13, -399, -399, -508, -15, 530, 530, -101, 532,
	-127, -127, 532, -430, -108, -430, 83, -430, 83, -7,
	532, 541, 531, -7, -602, 246, 354, 532, -511, 541,
	36, -508, -13, -441, 541, -45, -5, 414, 414, 414,
	414, 414, -510, 541, -512, 506, 49, 43, -508, -510,
	-520, -399, -179, 272, 272, -7, -7, 52, -15, 52,
	-7, -515, -108, 52, 52, 52, 52, 52, 52, 52,
	-265, 52, 52, -95, 532, 532, 532, 530, 66, 36,
	455, -129, 532, 541, -164, 531, 91, 92, -52, 71,
	-65, -431, -431, -697, -697, -697, -697, -431, -65, -65,
	42, 42, -65, -66, -66, -65, 42, 64, 357, -168,
	-65, 471, 471, 30, 30, 532, -65, 532, -129, 532,
	541, 532, -77, 532, -103, 266, -65, 106, -170, -143,
	-5, -65, -168, 74, 74, -327, -327, -335, 70, 166,
	532, -108, -65, -167, -65, -108, -66, -66, -66, -66,
	-66, -66, -66, -66, -66, -66, -66, -66, -66, 41,
	31, 260, -66, -65, -65, -65, -108, 532, 532, 532,
	-129, -65, 532, 541, -218, -6, -91, 380, 442, 532,
	-67, -319, 70, 532, 541, -93, 479, -168, -332, -346,
	-337, -327, 74, 74, -337, 532, 532, -65, -65, -65,
	23, -52, -180, -272, -227, 531, 74, -179, -179, 102,
	-216, -222, 527, -217, 122, -278, 75, 75, -278, -290,
	75, -291, 80, -291, -291, -134, 450, -5, 531, -282,
	-284, -282, -282, 532, -5, 531, 531, 124, 531, -67,
	133, -327, -65, -37, -253, -698, 83, -381, 310, -352,
	-363, -382, -383, 370, -351, -356, -357, -354, -5, -350,
	-389, 74, -386, 505, 531, 122, 370, 23, -250, -179,
	532, -585, -393, -7, -658, 531, 206, -65, 541, 541,
	464, -653, -65, -65, -431, -670, -14, 74, 70, -642,
	-635, -638, 4, -408, 531, -603, -397, 531, -431, 28,
	-508, -7, -15, 252, 47, -374, 503, 531, -66, -431,
	-419, 201, 70, 253, 299, -108, -306, -317, 39, 532,
	541, -15, -586, 531, -122, -381, -350, 531, 370, 140,
	-601, -415, -602, -399, -399, -103, -103, -102, -103, -436,
	-438, -397, -701, 286, 385, -604, -606, -5, -615, 61,
	-614, 21, 63, 96, 97, 98, -603, -277, -626, 532,
	74, -280, -5, 242, -280, 531, -426, 36, 168, -103,
	-7, -7, -388, -408, -6, 86, -353, 29, -412, -411,
	230, -5, 40, 532, -14, -366, 31, 252, 311, 354,
	-7, -14, -365, -14, -361, -360, -231, -5, -303, 531,
	31, 275, 298, 246, -423, 288, 31, 275, 438, -386,
	-413, -411, -386, 288, -424, 93, 464, -37, 438, -5,
	-7, 418, -7, -43, -7, -7, -7, -7, 449, 70,
	-7, -7, 449, 70, -7, -7, -7, -7, -7, -7,
	61, 276, 61, -700, 414, 93, 364, 61, 61, -700,
	414, -7, -508, 464, 538, -7, -7, 532, -7, 313,
	61, 414, 61, 61, -623, -628, 62, 286, 439, -624,
	-629, 62, 286, 414, 61, -663, 355, -665, -121, -30,
	-157, -265, -103, 532, 532, 532, -7, -618, 36, 531,
	398, -7, -7, -7, -7, 74, -39, -42, -7, -7,
	-7, -7, -508, -7, -7, -7, -7, -508, 130, 130,
	34, 130, 28, -7, -103, 211, 198, 29, -5, 464,
	23, 83, 83, 321, -506, 448, 287, 410, 420, 465,
	415, -506, 130, -430, 530, 532, -7, -7, -430, -597,
	-594, 422, 246, -103, -510, -509, 290, -265, -13, -13,
	-13, -13, -13, -514, -430, 64, -510, 52, 52, -515,
	52, -515, 52, 532, -517, -103, 47, -517, -517, -517,
	-517, -517, -517, 52, -517, -517, -131, 455, 532, -65,
	-156, -173, 72, 70, -431, -431, -431, -431, -65, -65,
	42, 30, 30, -65, -65, 319, 319, -65, -65, 532,
	532, -65, -103, -65, 532, -139, 370, 532, -337, 47,
	47, -337, -171, 148, 532, 532, 64, 64, 41, 260,
	42, 130, 64, 532, 532, -81, -129, 489, 532, 483,
	483, -319, 70, -67, 132, 155, -65, -94, 541, -65,
	354, -337, 532, 47, 47, 532, -338, 129, -338, -338,
	-109, -173, 532, 109, -261, -231, 117, -233, -65, -242,
	-278, -278, -292, 83, 74, 75, -278, -650, 531, -13,
	-281, 531, -304, -304, -5, -307, -308, -303, -318, 531,
	541, -215, -225, -234, -235, 51, -255, -256, 531, -37,
	150, -382, 531, 304, 271, -410, 70, 532, 541, -367,
	36, -358, -390, 449, 228, -348, -15, 122, 273, -436,
	-684, 36, -397, 531, 74, -667, -310, -655, -107, -104,
	-685, -103, 130, -108, -676, 393, -431, -635, 532, -625,
	64, 61, -631, 312, 23, -14, 531, 31, -439, -369,
	31, -426, -426, -65, -259, 23, 40, 83, -15, -103,
	-416, -417, 422, -358, -348, 122, -7, 284, 422, 23,
	-390, -650, 273, 30, 45, -617, -399, -621, -65, 286,
	500, 286, 64, 527, 36, 45, 64, -353, -415, -5,
	40, -365, 532, 252, 476, 299, 253, 309, 532, 532,
	532, 541, 36, -232, -224, 39, -232, -65, 47, 28,
	28, -419, 47, 23, -42, -419, -108, -265, -42, -430,
	-430, 61, 61, -7, -399, -7, -399, 61, -7, -7,
	-7, -7, -7, 449, 70, -7, -7, -7, -7, 464,
	-430, -365, -7, -7, -508, -7, 541, -101, -101, -108,
	541, -101, -101, -7, -508, 513, -65, 61, 276, -13,
	-13, -15, -13, 29, -430, -103, -103, -430, -108, -108,
	-7, -7, -7, 61, 64, -502, -430, -430, -430, 532,
	-7, 506, -504, -430, -515, -515, -515, -515, 52, -517,
	532, 532, 532, -137, 484, -65, -53, -65, -65, -65,
	532, -131, 70, 532, 532, -7, -65, -66, 64, -65,
	-65, -65, 532, 541, 532, 531, -319, 532, 532, 435,
	155, 532, -337, -328, -329, -327, -339, -340, 40, -341,
	136, 47, 49, 43, 50, 138, -337, -92, 306, 354,
	-137, -299, 87, 97, 110, 532, 541, -7, 155, -292,
	531, -65, -278, 531, -13, 532, -304, 532, 532, 532,
	541, -309, 23, 123, -320, -321, -66, 40, -65, -222,
	-225, -226, 30, -226, 105, 31, -254, 115, 116, 149,
	47, 154, 151, 152, 42, 153, 148, -257, -262, -6,
	-255, -103, -410, -16, -364, 227, 230, 233, 251, 298,
	288, 308, 438, 439, 21, -364, -49, -5, -356, 507,
	-382, -7, 27, 98, 380, 532, -350, -431, -7, 513,
	216, 58, 23, -261, -433, 541, 532, -121, 266, -668,
	-4, -453, 464, -672, 130, -677, -679, -674, 348, 502,
	-683, 64, 532, 532, 433, 433, -632, -633, 478, 354,
	-603, -179, 532, 29, -391, 83, -391, 532, -375, 337,
	298, 531, -7, 532, 541, -7, 422, 532, -431, -415,
	246, -7, -179, 531, -701, -606, 531, -618, 64, 532,
	-441, -620, 23, -620, -15, -408, 531, 531, 531, -367,
	-376, 303, -376, 392, -376, -360, -156, 62, -396, -15,
	-15, 532, 29, 29, 531, 23, -317, -7, -7, -24,
	93, -24, 93, -7, 61, -7, -399, 61, -628, -156,
	-443, -441, 531, -629, 531, 531, 531, 532, -7, -7,
	-707, 36, 518, -707, 34, -707, 130, -317, 532, -504,
	-504, 74, -510, -515, -138, -140, -5, -169, -172, -65,
	-175, -177, -176, -178, 531, 238, 408, 293, -144, 388,
	127, 294, -129, 130, -66, -129, -90, 499, 354, -343,
	168, 36, 541, 23, 532, 74, -65, 134, 139, -342,
	-340, 532, 306, -300, 90, 89, 88, 93, -279, -231,
	-179, -13, -129, 532, 532, -311, -308, 531, -313, -314,
	-5, 541, 532, 23, -66, -326, 23, 106, -65, 106,
	105, -639, -639, -639, -639, 152, 31, 47, -103, 532,
	541, -263, -269, -265, 536, 40, 531, -279, -49, 532,
	-389, 531, -367, -410, 127, 127, -381, -382, -350, -250,
	506, 513, 513, -179, 532, -393, -655, -658, 540, -108,
	-680, 51, -702, 262, -679, -675, 67, 411, -365, -431,
	36, 36, -603, 478, -684, -397, -431, 307, -372, 354,
	-380, -377, -378, 74, 79, 369, 429, -421, 531, -65,
	-630, 279, -417, -415, -7, -381, -350, 140, -415, -436,
	532, -650, -605, 7, -277, -620, 301, 205, -362, -359,
	-9, -129, -129, -426, 531, -426, -431, -426, 531, -163,
	-386, -232, -65, 298, -38, 83, 449, 449, -7, -24,
	93, -7, -691, 130, -691, -692, -692, -692, -65, -17,
	-17, -15, -15, -13, -430, -511, -430, -506, -430, 541,
	23, 541, 532, 531, 531, 425, 532, -145, -146, 37,
	467, 120, -65, -145, -145, -65, 532, 532, 155, -344,
	145, 144, 140, 134, 140, 134, 141, 142, -329, -6,
	136, 532, 74, -14, 91, 91, -213, 532, 532, -304,
	532, 541, -108, 130, -321, 541, -6, -338, -5, -228,
	-229, 109, 97, 98, -230, 109, 96, 70, -103, -103,
	-103, -103, -14, 536, 47, -14, 536, -262, -258, -264,
	-269, -389, -390, -384, -385, -5, -303, 531, -49, -382,
	-410, -358, -436, 506, 506, -684, -395, 303, 531, -667,
	273, 531, -673, 411, 437, -639, 130, 286, 286, 23,
	531, 449, 309, -378, 74, -377, 74, 97, 98, -420,
	532, 23, -15, -415, 422, -358, -7, 531, 532, 541,
	532, 541, -101, 532, 532, -391, -14, -391, -259, -391,
	-156, -164, -163, 532, -421, -65, -7, -7, 449, -418,
	391, 87, 509, -418, 532, 532, 532, 532, -707, 64,
	-140, -141, -172, -129, -129, 531, -147, 270, -146, 377,
	283, 411, 377, 283, -147, -147, -342, 143, 143, 140,
	140, 134, 140, 134, 140, 138, 136, 93, 70, 70,
	-279, -283, 23, -135, 399, 532, -314, -315, -316, 4,
	40, 31, 47, 128, 124, -67, 123, 110, 93, 110,
	-223, 102, 531, 40, 86, 107, 108, -14, 536, 532,
	541, -390, 532, 541, -224, -224, -65, -389, -410, -49,
	-382, -374, 531, -261, -701, -65, -682, -5, 262, -441,
	-441, -179, -7, -379, 354, 35, 24, 93, -379, 532,
	440, -623, -7, 422, -415, 532, 7, -359, 61, -365,
	532, -365, -375, -279, 532, -164, -24, -24, -7, 70,
	-441, -15, -504, 532, 532, -169, 120, 71, 455, 354,
	30, 532, 74, 74, 140, 140, -340, -5, -14, -14,
	-5, 531, -316, -66, -66, 47, -66, -318, 531, -213,
	-233, -212, 86, 531, -264, -385, -396, -396, 532, -390,
	-49, -389, -410, -397, -394, -231, 532, -650, 532, 411,
	541, 541, -684, 195, 47, 40, -415, -7, 531, -380,
	-365, -24, -15, -430, 532, 411, 501, -146, 146, 146,
	74, 61, 83, 93, 93, -65, 123, -323, -324, -5,
	131, 155, 532, -129, -224, -389, -390, -49, -390, 532,
	541, -395, 531, -680, 61, 64, -259, -259, -415, -129,
	-365, 147, 147, 136, -68, -650, 166, -5, -5, -5,
	532, -313, 532, 541, 130, -108, -347, 128, -223, -223,
	102, 532, -396, -390, -389, -279, -231, -374, -678, -681,
	-101, 6, -103, -6, 273, 433, 433, 532, 40, 531,
	532, -339, -324, 124, -325, -345, 29, 128, 7, -233,
	-390, -397, 532, 541, -701, 36, 36, -68, -82, 532,
	-343, -325, -325, 7, 123, 23, 155, -390, -681, -650,
	286, 286, 83, -131, -344, -343, -339, 531, -7, -223,
	-279, 531, -441, -441, -5, 532, -342, -344, -323, 123,
	-678, -342, 532, 531, 532, -323, 532,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 2969, 2969, 1542, -2, 0, 1824, -2, 1887,
	1887, 0, 0, 0, 0, 2969, 0, 2969, 2969, 0,
	0, 0, 0, 0, 1629, 1901, 1897, 0, 1897, 2324,
	2325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 166, 166, 0, 0, 0, 0, -2, 1533,
	1628, 0, 2300, 2301, 1664, 0, 1575, 0, 0, 0,
	-2, 2972, 2967, 2968, 2724, 0, 0, 0, 0, 1629,
	0, 1823, 0, 0, 2868, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 0, 0, 0, 0, 0, 1952,
	1953, 0, 0, -2, 2125, 2845, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1886, 0, 0, 0, 0, 0, 2335, 131, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 2331, 2332,
	2333, 0, 0, 2337, 2338, 2339, 0, 0, 0, 1870,
	0, 1873, 1874, 1875, 1876, 1877, 1878, 0, 0, 2256,
	325, 436, 470, 2261, 2672, 0, 553, 209, 426, -2,
	417, 503, 2687, 141, 142, 143, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 207, 208, 210, 211, 212, 213, 214,
	215, 216, 217, 218, 219, 220, 221, 222, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 280, 281, 282, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	295, 296, 297, 298, 299, 300, 301, 302, 303, 304,
	305, 306, 307, 308, 309, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 323, 324,
	326, 327, 328, 329, 330, 331, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 342, 344, 345, 346,
	347, 348, 349, 350, 351, 352, 353, 354, 355, 356,
	357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 372, 373, 374, 375, 376,
	377, 378, 379, 380, 381, 382, 383, 384, 385, 386,
	387, 388, 389, 390, 391, 392, 393, 394, 395, 396,
	397, 398, 399, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 412, 413, 414, 415, 416,
	418, 419, 420, 421, 422, 423, 424, 425, 427, 428,
	429, 430, 431, 432, 433, 434, 435, 437, 438, 439,
	440, 441, 442, 443, 444, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 457, 458, 459,
	460, 461, 462, 463, 464, 465, 466, 467, 468, 469,
	471, 472, 473, 474, 475, 476, 477, 478, 479, 480,
	481, 482, 483, 484, 485, 486, 487, 488, 489, 490,
	491, 492, 493, 494, 495, 496, 497, 498, 499, 500,
	501, 502, 504, 505, 506, 507, 508, 509, 510, 511,
	512, 513, 514, 515, 516, 517, 518, 519, 520, 521,
	522, 523, 524, 525, 526, 527, 528, 529, 530, 531,
	532, 533, 534, 535, 536, 537, 538, 539, 540, 541,
	542, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	552, 554, 555, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 565, 566, 567, 568, 569, 2270, 2262, 553,
	470, 436, 2266, 2267, 209, 325, 343, 417, 426, 503,
	2972, 2724, 2972, 0, 2972, 0, 2957, 436, 470, 553,
	424, 2959, 470, 3178, 151, 0, 3034, 3035, 3039, 2520,
	2520, 2520, 190, 2520, 0, 0, 3034, 2520, 2271, 1897,
	1629, 0, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2661,
	1895, 0, 1900, 2296, 0, 1896, 2302, 553, 470, 436,
	2306, 0, 2312, 0, 0, 2326, 2327, 2328, 2329, 2330,
	3148, 1649, 3152, 3154, 0, -2, -2, -2, -2, 182,
	405, 3173, 3173, -2, -2, 3170, 3171, 1247, 0, 0,
	1245, 3153, 3174, 3175, 3188, 3190, 384, 3192, 3194, 3195,
	3196, 3199, 3200, 1464, 1246, 0, 165, 0, 1887, 3244,
	3247, 3248, 3250, 0, 3252, 0, 1384, 0, -2, -2,
	1461, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 588,
	589, 590, 591, 592, -2, 0, 2877, 2877, 2877, 0,
	-2, 1546, 1547, 0, 1547, 0, 1580, 0, 1663, 1665,
	1574, 1603, 1604, 157, 0, 0, 1625, 400, 1630, 160,
	1626, 0, 2, 2965, 0, 2966, 2723, 2711, 0, 0,
	2717, 0, 0, 0, 1608, 0, 0, 0, 3179, 3180,
	3181, 3182, 3183, 2520, 0, 0, 0, 0, 137, 0,
	0, 0, 0, 0, 0, 1887, 2867, -2, 0, -2,
	294, 2055, 1893, 176, 0, 213, 275, 1530, 0, 1516,
	1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526,
	1527, 1528, 1529, 2553, 0, 0, 294, 2055, 294, 0,
	0, 2617, 294, 330, 2055, 2162, 2163, 2164, 2165, 2166,
	2705, 2706, 2707, 2708, 0, 0, 2767, 0, 0, 160,
	294, 125, 2732, 0, 0, 0, 2055, 2055, 1954, 1955,
	1956, 1957, 0, 294, 0, 3312, 294, 0, 0, 294,
	0, 294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3319, 0, 3312, 0, -2, 3126, 0, 2162, 0,
	213, 275, 0, 0, 0, 294, 3312, 0, 3312, 0,
	0, 0, 0, 0, 0, 0, -2, 2982, 0, 330,
	-2, 2982, 0, 0, 294, 0, 0, 0, 3021, 0,
	294, 129, 178, 294, 129, 152, 0, 294, 129, 294,
	1884, 1450, 0, 1451, 1452, 1453, 1454, 1455, 1264, 1458,
	1468, 1471, 1472, 1473, 1474, 1475, 1511, 256, 1468, 1468,
	1468, 1481, 1482, 1483, 1484, 1485, 1507, 1507, 1250, 1504,
	1459, 1460, 1509, 1497, 1509, 1509, 1492, 0, 1509, 129,
	294, 0, 0, 0, 0, 0, 0, 129, 294, -2,
	294, 2537, 294, 0, 330, 2987, 294, 2160, 2985, 294,
	2989, 294, 2334, 0, 2336, 0, 1868, 1869, 1872, 137,
	0, 2257, 436, 2258, 211, 0, 2259, 0, 0, 0,
	0, 0, 0, 2675, 2676, 2677, 2700, 2701, 2678, 2703,
	2704, 0, 2263, 0, 2265, 2953, 2954, 2955, 2963, 2956,
	0, 2964, 2958, 2962, 0, 0, 0, 0, 0, 3036,
	0, 3041, 0, 3042, 3043, 3044, 3045, 0, 0, 0,
	0, 1629, 2273, 0, 2275, 2283, 557, 2278, 2279, 2280,
	2660, 1897, 1894, 0, 2293, 2295, 2297, 160, 0, 2303,
	0, 2305, 0, 2315, 0, -2, 137, 137, 137, 2319,
	2320, 2321, 2322, 0, 0, 3155, 0, 3172, 0, 0,
	0, 3173, 3173, 0, 0, 0, 3173, 3173, 0, 3173,
	3173, 1248, 1249, 3184, 0, 3191, 3193, 3197, 0, 3203,
	163, 3346, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2335, 1879, 1880,
	1881, 1882, 1883, 0, 0, 3249, 3251, 0, 1385, 1269,
	0, 1272, 2932, 1559, 1556, 0, 2929, 2930, 1560, 0,
	0, 0, 1568, 0, 2875, 2876, 0, 0, 0, -2,
	0, 1544, 1545, 1670, 1579, 1581, 1585, 1586, 1123, 0,
	0, 0, 0, 0, 0, 2024, 1190, 1213, 1214, 1277,
	0, 1217, 1218, 1219, 516, 0, 1224, 1225, 520, 1512,
	363, 549, 1267, 1232, 1233, 1234, 1235, 1236, 1237, 1238,
	1239, 0, 0, 0, 1400, 1535, 1537, 1281, 1227, 1228,
	1229, 1230, 1231, -2, 530, 527, 572, 1283, 1284, 1286,
	1288, 1290, 1292, 1293, 1294, 1295, 1296, 1297, -2, 0,
	517, 541, 545, 546, 552, 555, 556, 542, 513, 519,
	536, 560, 561, 563, 565, 562, 566, 567, 529, 526,
	-2, 532, 533, 537, 531, 528, 535, 568, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 538, -2,
	-2, -2, -2, -2, -2, -2, 1486, 1487, 1488, 1489,
	1670, 0, 1605, 158, 1606, 0, 0, 0, 1627, 0,
	0, 0, 1440, 2970, 0, 0, 2713, 0, 2715, 2716,
	2718, 0, 1788, 0, 1609, 0, 1810, 0, 0, 0,
	2520, 294, 0, 2520, 0, 2568, 294, 124, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 1958, 0, 2526,
	0, 3319, 2053, 2054, 0, 1892, 177, 0, 2551, 0,
	2846, 0, 0, 2552, 0, 0, 0, 0, 0, 2558,
	0, 0, 2576, 0, 0, 0, 294, 2621, 0, 0,
	0, 0, 2992, 0, 0, 0, 0, 0, 0, 0,
	0, 2801, 0, 0, 0, 0, 0, 2992, 2992, 2135,
	2148, 2235, 0, 2156, 0, 0, 0, 2235, 2235, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2227, 0, 0, 0, 2137, 2139, 0, 0, 0,
	3311, 0, 0, 0, 2140, 0, 2571, 0, 2033, 0,
	0, 0, 2037, 2052, 2040, 0, 0, 0, 0, 2055,
	-2, 2050, 0, 2142, 2235, 0, 0, 3312, 294, 0,
	0, 294, 0, 2307, 0, 2308, 0, 0, 0, 2353,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3329,
	3319, 3315, 0, 0, 3334, 3318, 2269, 3320, 3333, 3325,
	0, 3327, 3328, 3330, 3331, 0, 2542, 0, 0, 0,
	0, 0, 0, 3123, 0, 0, 0, 3093, 3311, 0,
	0, 3097, 3098, 3099, 3100, 0, 0, 3105, 0, 0,
	0, 0, 3110, 0, 2473, 3124, -2, 0, 0, 3010,
	3011, 0, 0, 0, 0, 0, 2348, 0, 0, 0,
	0, 3123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3123, 0, 0, 0, 0, 0, 0, 2614, 2615,
	0, 0, 0, 0, 0, 0, 0, 0, 2826, 2827,
	0, 0, 0, 0, 0, 0, 2994, 0, 0, 0,
	0, 0, 2994, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3131, 0, 3132, 0, 2583, 1887, 0, 0, 0,
	1862, 0, 0, 1865, 0, 0, 2237, 127, 128, 0,
	0, 2239, 0, 0, 0, 2242, 0, 1442, 1446, 1450,
	1456, 0, 1251, 1252, 1253, 1254, 1255, 1256, 1265, 1469,
	1468, 0, 1476, 0, 1477, 1478, 1479, 1480, 0, 1501,
	0, 0, 0, 1503, 1499, 1508, 0, 1490, 1491, 1509,
	1509, 1495, 2244, 0, 129, 294, 0, 130, 0, 294,
	0, 294, 0, 2254, 0, 0, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 1871, 2340, 2341, 2342, 2343,
	0, 0, 0, 0, 2679, 2680, 2682, 2673, 2683, 2685,
	2689, 2691, 2692, 1858, 1859, 1860, 1861, 2684, 2686, 2688,
	2674, 2693, 2694, 0, 2697, 2698, 2699, 2681, 2709, 2710,
	2264, 424, 2961, 1629, 0, 2850, 0, 3046, 0, 432,
	0, 283, 390, 420, 238, 255, 318, 319, 373, 426,
	463, 475, 0, 161, 3080, 3040, 0, 0, 154, 156,
	0, 0, 0, 3080, 0, 2272, 1629, 0, 2277, 2281,
	2282, 1899, 2296, 0, 2299, 2296, 2304, 2310, 2311, 0,
	0, 0, 0, 124, 2323, 3151, 3143, 3144, 3145, 3146,
	0, 3156, 3157, 3158, 3159, 0, 0, 3162, 3163, 3164,
	0, 0, 3167, 0, 0, 0, 3198, 0, 2159, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 275, 0, 0, 0, 0, 0, 0, 0,
	1887, 3243, 1386, 0, 1533, 0, 0, 0, 1393, 1395,
	0, -2, 1270, 1273, 1274, 1462, 144, 145, 146, 147,
	148, 593, 594, 595, 596, 597, 598, 599, 600, 601,
	602, 603, 604, 605, 606, 607, 608, 609, 610, 611,
	612, 613, 614, 615, 616, 617, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 638, 639, 640, 641,
	642, 643, 644, 645, 646, 647, 648, 649, 650, 651,
	652, 653, 654, 655, 656, 657, 658, 659, 660, 661,
	662, 663, 664, 665, 666, 667, 668, 669, 670, 1271,
	0, 1550, 2931, 1551, 1558, 1561, 0, 0, 1563, 0,
	1565, 0, 2927, 2928, 2933, 2941, 2942, 0, 2951, 2952,
	2939, 0, 2943, -2, 0, 0, 1571, 0, 1576, 1577,
	1578, 2893, 2894, 1940, 2932, 1559, 1588, 0, 0, 0,
	725, 693, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525,
	1526, 1527, 1528, 1529, 0, 686, 940, -2, 0, -2,
	1027, 858, 1161, 1163, -2, 837, 0, 0, 1584, -2,
	937, 1420, 149, 150, 671, 672, 673, 674, 675, 676,
	677, 678, 679, 680, 681, 682, 683, 684, 685, 687,
	688, 689, 690, 691, 692, 694, 695, 696, 697, 698,
	699, 700, 702, 703, 704, 705, 706, 707, 708, 709,
	710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
	720, 721, 722, 723, 724, 726, 727, 728, 729, 730,
	731, 732, 733, 734, 735, 736, 737, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 793, 794, 795, 796, 797, 798, 799, 800,
	801, 802, 803, 804, 805, 806, 807, 808, 809, 810,
	811, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 833, 834, 835, 836, 838, 839, 840, 841, 842,
	843, 844, 845, 846, 847, 848, 849, 850, 851, 852,
	853, 854, 855, 856, 857, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 938, 939, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
	1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
	1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077,
	1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
	1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097,
	1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107,
	1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117,
	1118, 1119, 1120, 1121, 1122, 1128, 1129, 1143, 1146, 1147,
	0, 0, 0, 1215, 1440, 0, -2, 1220, 1221, 1222,
	1223, 0, 0, 0, 0, -2, 1240, 0, 1242, 1264,
	0, 0, 1399, 1537, 0, 2905, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1343, 0, 1343,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1740, 1740, 0, 0, 0, 0, 0,
	0, 0, 0, 1588, 0, 0, 0, 1631, 1635, 0,
	0, 1642, 0, 0, 0, 0, 1422, 1424, 0, 0,
	1538, 0, 0, 2971, 2712, 2714, 0, 0, 2722, 1923,
	1790, 0, 0, 0, 0, 1588, 1801, 0, 0, 1277,
	1610, 1648, 0, 0, 1819, 1819, 1816, 1817, 1961, 0,
	0, 2113, 0, 0, 2134, 0, 2565, 2567, 0, 0,
	0, 294, 123, 2452, 0, 2452, 0, 2476, 2477, 0,
	0, 0, 2550, 0, 0, 0, 0, 0, 2667, 2666,
	2668, 2669, 2670, 2671, -2, 124, 2529, 3329, 2013, 0,
	1465, 0, 2749, 2751, 0, 0, 1531, 1684, 0, 0,
	0, 0, 0, 0, 2560, 0, 2573, 0, 2608, 1961,
	0, 0, 0, 2620, 2616, 0, 0, 2631, 2632, 0,
	2974, 0, 294, 2520, 0, 0, 2766, 2773, 0, 0,
	0, 0, 2732, 2808, 0, 462, -2, 2520, 2816, 0,
	2731, 0, 0, 0, 2973, 2975, 0, 0, 0, 0,
	2234, 0, 2199, 2200, 0, 0, 2220, 0, 0, 0,
	0, 2167, 294, 0, 2191, 0, 0, 2070, 0, 2024,
	0, 0, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2213, 0, 0,
	2215, 2216, 0, 2221, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2034, 0, 2038, 2043, 2044,
	2035, 2036, 0, 2051, 2041, 2042, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2144, 2235, 0, 0, 0,
	0, 2146, 2235, 0, 0, 2608, 0, 0, 0, 0,
	2345, 2346, 0, 0, 2441, 2442, 2443, 2444, 2446, -2,
	2448, 0, 0, 0, 0, 3313, 0, 0, 0, 0,
	0, 3314, 2268, 463, 0, 3321, 0, 3332, 3326, 0,
	0, 2233, 0, 0, 0, 0, 0, 2545, 0, 2654,
	0, 0, 0, 0, 0, 3090, 3094, 3122, 0, 2472,
	426, 436, 470, 0, 0, 0, 0, 0, 3103, 3104,
	3106, 3107, 3108, 3109, 3111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2784, 0, 0, 3091,
	426, 0, 0, 0, 2804, 2806, 2805, 2807, 0, 0,
	3092, 426, 0, 0, 0, 0, 0, 2613, 0, 2618,
	2619, 0, 2820, 0, 2821, 2732, 0, 0, 2828, 0,
	0, 3312, 0, 2755, 0, 2756, 2759, 0, 2976, 2978,
	0, 0, 2979, 0, 0, 2977, 2980, 2981, 0, 2768,
	2769, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 0, 0, 0, 0, 0,
	0, 0, 0, 2581, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3019, 3020, 0, 0,
	0, 0, 0, 1863, 1864, 129, 179, 129, 153, 129,
	0, 1885, 129, 0, 0, 1443, 1447, 0, 0, 0,
	0, 0, 0, 1470, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 1494, 129, 2246, 0, 0, 0, 0,
	0, 0, 0, 129, 0, -2, 2538, 2539, 0, 0,
	2161, 2988, 2986, 2990, 2665, 0, 0, 0, 1264, 0,
	2960, 3176, 0, 3177, 0, 0, 3047, 3048, 0, 0,
	3051, 3128, 3052, 3053, 3054, 3055, 3056, 0, 3058, 3081,
	3083, 3059, 3060, 3061, 0, 0, 0, 0, 0, 3015,
	0, 0, 0, 0, 3037, 2519, 0, 0, 3034, 129,
	0, 2274, 2276, 2296, 1898, 2292, 2298, 2294, 2315, 2314,
	2313, 2316, 2317, 2318, 0, 0, 0, 3147, 3160, 3161,
	3165, 3166, 3168, 3169, 3187, 164, 3201, 2158, 0, 0,
	0, 3208, 3210, 3212, 3344, 3345, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1387, 0, 0, 1532, 1533, 1533, 1533,
	0, 0, 1275, 1272, 1557, 0, 1566, 0, 0, 0,
	2944, 0, 0, -2, -2, 0, 2940, 2949, 2950, 2945,
	-2, -2, 2946, 1562, 1569, 0, 1567, 0, 0, 1943,
	1938, 1939, 1554, 1555, 1645, 0, 1669, -2, -2, 325,
	286, -2, 0, 175, 1582, 1124, 1125, 0, 1127, 1130,
	1131, 1132, 1133, 1134, 1135, -2, -2, -2, -2, -2,
	-2, 1142, 1144, 1145, -2, 1423, 1425, 0, 1538, 0,
	-2, 0, 1160, 0, 1165, 1167, 1169, 0, 1182, 1184,
	0, 1439, 1426, 1427, 1428, 1429, 1430, 0, 0, 1539,
	1177, 1540, 0, 0, 1417, 1418, 1419, 1583, 0, 1164,
	0, 0, 1181, 2022, 0, 1278, 1277, 0, 0, 0,
	1408, 1409, 0, 0, 0, -2, 1533, 1243, 0, 1405,
	1401, 0, 2905, 0, 1280, 0, 0, 1731, 1123, 0,
	1736, 1774, 0, 0, 0, 0, 0, 0, 0, 0,
	1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 0, 0,
	0, 1395, 1342, 0, 0, 1191, 0, 0, 0, 549,
	0, 0, 1395, 0, 0, 0, 0, 0, 1440, 0,
	1351, 0, 0, 0, 0, 0, 0, 0, 1365, 1368,
	0, 0, 0, 0, 0, 1731, 0, 1725, 0, 1395,
	1734, 1774, 0, 1723, -2, 1439, 0, 1740, 1337, 0,
	0, 0, 0, 1645, 0, 1607, 1643, 0, 1633, 0,
	159, 1441, 2719, 2720, 2721, 1945, 0, 0, 1795, 1796,
	0, 1797, 1277, 1794, 1789, 1648, 0, 0, 0, 1806,
	1805, 1945, 0, 1809, 1589, 1651, 1651, 0, 1595, 0,
	1660, 1651, 1651, 1674, 422, 569, 534, 157, 1381, 1382,
	1383, 525, 0, 0, 1818, 0, 0, 1960, 1962, 156,
	1964, 1965, 1966, 0, 1990, 0, 140, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2466, 2451, 2453,
	0, 0, 0, 2458, 2459, 0, 2431, 2432, 2434, 2466,
	0, 2479, 2481, 2482, 2483, 2485, 2478, 0, 2549, 0,
	0, 0, 0, 2637, 2641, 2639, 1459, 0, 2865, 2520,
	0, 2525, 0, 0, 0, -2, 2541, 1466, 2748, 0,
	0, 0, 2852, 0, 1683, 1685, 0, 2650, 2564, 2554,
	2555, 2556, 2557, 0, 2575, 0, 0, 0, 2580, 2055,
	2005, 2607, 2605, 0, 0, 0, 0, 0, 0, 0,
	2617, 0, 0, 2991, 2995, 0, 0, 0, 0, 0,
	0, 0, 3005, 3006, 0, 0, 0, 0, 0, 2113,
	0, 2134, 2775, 0, 0, 2790, 2791, 0, 2796, 2798,
	2799, 0, 160, 2732, 2803, 0, 2520, 0, -2, 2818,
	2818, 0, 0, 0, 2157, 2376, 0, 0, 2196, 2198,
	0, 2219, 3264, 0, 2420, 2423, 0, 137, 0, 2169,
	294, 1988, 0, 0, 0, 2411, 0, 0, 0, 0,
	0, 1889, 0, 2411, 294, 129, 294, 129, 2193, 2197,
	2201, 2204, 2205, 0, 0, 0, 0, 2209, 0, 2206,
	2207, 2208, 2212, 0, 2214, 0, 2217, 2222, 2744, 2745,
	2746, 0, 0, 0, 2736, 2738, 437, 185, 257, 0,
	2009, 2136, 2149, 2235, 0, 0, 2384, 0, 2231, 2138,
	0, 0, 2378, 3271, 2039, 2045, 2046, 2047, 2049, 2141,
	0, 2572, 0, 2380, 0, 3273, 2143, 2235, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, -2, 0, 2356, 3253, 3280, 2344, 0, 0, 2440,
	0, 2439, 1468, 2445, 1468, 1468, 2357, 3254, 3281, 2358,
	3255, 3282, 2359, 3283, 3316, 3317, 3322, 3323, 3324, 2360,
	0, 2543, 129, 294, 2232, 2544, 3256, 0, 0, 2411,
	2548, 3284, 2363, 3258, 3285, 0, 0, 0, 3101, 3102,
	2364, 2984, 0, 0, 0, 0, 3259, 0, 3112, 3116,
	3288, 2349, 0, 0, 0, 2786, 0, 0, 2370, 3262,
	3291, 0, 2371, 3302, 2372, 3263, 3292, 0, 2373, 3293,
	2374, 3300, 2375, 2732, 2822, 2732, 2732, 3303, 0, 0,
	0, 0, 0, 2757, 2758, 2401, 2993, 2983, 2402, 0,
	2403, 3295, 2404, 2794, 1866, 1867, 3266, 3296, 0, 0,
	0, 0, 0, 0, 3343, 0, 0, 0, 0, 0,
	0, 0, 0, 2409, 0, 0, 0, 0, 129, 2648,
	294, 129, 0, 3279, 3133, 0, 0, 3294, 1889, 2582,
	0, 2585, 2586, 2587, 0, 2589, 2590, 2591, 213, 275,
	2594, 2595, 0, 2597, 3257, 0, 0, 0, 0, 0,
	0, 0, 2236, 2238, 2240, 0, 2243, 1448, 0, 0,
	0, 1457, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 0,
	1467, 1510, 1507, 1505, 1506, 1507, 0, 1496, 2245, 129,
	0, 129, 0, 129, 0, 0, 2255, 0, 2534, 2536,
	0, 0, 0, 2659, 0, 2540, 2260, 2690, 2695, 0,
	2851, 3072, 3067, 3069, 0, 162, 0, 3050, 0, 3057,
	3085, 0, 0, 0, 0, 0, 0, 0, 3080, 3074,
	0, 0, 3038, 155, 3080, 0, 3017, 0, 2291, 2309,
	0, 3149, 3150, 3202, 3204, 3211, 3205, 3206, 0, 0,
	3213, 3231, 3232, 3214, 3215, 3216, 3217, 3218, 3219, 3220,
	0, 0, 0, 255, 0, 3224, 3225, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1388, 0, 1394, 0, 0, 0, 0, 1396, 1397, 0,
	1271, 1564, 2934, 0, 2937, 0, 2947, 2948, 0, 0,
	1570, 2895, 1943, 1514, 0, 2897, 0, 2879, 0, 1587,
	0, 0, 166, 166, 166, 166, 0, 174, 0, 0,
	-2, -2, 0, 0, 0, 1178, 0, -2, 1162, 1166,
	1168, 1170, 0, 1183, 1186, 0, 1439, 0, 1185, 1188,
	0, 0, 1431, 1432, 1433, 1434, 0, 0, 0, 1179,
	0, 0, 0, 0, 2023, 1216, 1441, 1406, 1407, 0,
	1226, 1513, -2, 0, 0, 0, 1402, 0, 0, 1279,
	0, 2903, 2904, 2908, 0, 1439, 0, 0, 0, 0,
	1734, 0, 1715, 1773, 0, 0, 1285, 1287, 1289, 1291,
	0, 1300, 0, 1301, 0, 1303, 1304, 0, 1305, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1193, 1194, 1208, 1306,
	1307, 0, 0, 0, 0, 0, 0, 0, 1312, 0,
	1350, 0, 1314, 1315, 1316, 1317, 0, 1322, 0, 0,
	1371, 0, 0, 0, 0, 1328, 1439, 0, 1330, 1774,
	1740, 0, 0, 0, 1740, 1333, 0, 1335, 0, 0,
	0, 0, 0, 2879, 1666, 1629, 1634, 1787, 0, 1926,
	0, 0, 0, 1799, 1945, 1802, 1803, 0, 0, 1808,
	1646, 234, 0, 0, 0, 0, 0, 1622, 1622, 1622,
	1620, 1591, 1650, 0, 1655, 1593, 1651, 1660, 1651, 1651,
	-2, 1595, 0, 1597, 1656, 0, 1655, 1599, 1601, 1671,
	0, 0, 0, 0, -2, 0, 2055, 1820, 1821, 1822,
	-2, 2103, 0, 1970, 2105, 0, 1990, 2117, 0, 0,
	2112, 2520, 0, 3188, 0, 2133, 0, 2568, 2128, 0,
	2452, 0, 2447, 2428, 2464, 0, 0, 2454, 2455, 2460,
	2456, 2457, 0, 2430, 0, 0, 0, 2429, 0, 0,
	0, 0, 2633, 2634, 0, 0, 0, 2640, 0, 0,
	0, 0, 2134, 0, 0, 0, 2528, 2012, 0, 2015,
	2016, 0, 0, 2061, 2024, 0, 0, 0, 0, 0,
	2018, 0, 2750, 2752, 2725, 2726, 2727, 2728, 2729, 2730,
	363, 1518, 1519, 0, 2562, 0, 1689, 0, 2649, 2651,
	2559, 0, 2577, 2578, 2579, 2576, 2598, 0, 2606, 2601,
	2609, 2602, 2604, 2603, 2103, 1990, 0, 0, 2621, 2005,
	0, 2996, 2997, 2998, 0, 0, 3001, 3002, 0, 0,
	0, 0, 3009, 2665, 0, 2134, 0, 0, 2765, 2782,
	0, 2772, 0, 0, 0, 0, 0, 2802, 2809, 2818,
	0, 2818, 2813, 0, 2815, 2732, 0, 0, 0, 0,
	2218, 2742, 2743, 2419, 0, 0, 0, 2228, 0, 2000,
	2229, 2230, 0, 0, 1984, 1987, 0, 2069, 2128, 0,
	0, 2073, 0, 0, 2411, 0, 0, 2127, 2171, 0,
	0, 0, 0, 2184, 0, 2190, 2027, -2, 0, 2192,
	0, 2188, 0, 2195, 2202, 2210, 2203, 2211, 2223, 2224,
	0, 0, 2225, 2735, 0, 2739, 2740, 2741, 2008, 2010,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2382, 0, 3275, 0,
	2145, 2235, 0, 0, 2386, 0, 3277, 2147, 2235, 0,
	0, 2599, 0, 2347, 2437, 2438, 0, 1468, 0, 2546,
	0, 2653, 0, 2656, 0, 3095, 0, 2365, 3286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3304, 0,
	0, 0, 0, 0, 2788, 0, 2783, 0, 0, 0,
	2825, 2823, 2824, 0, 0, 0, 2400, 3301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2644, 0, 3134, 0, 3136,
	3130, 0, 0, 2584, 0, 0, 0, 0, 0, 0,
	0, 3022, 3023, 3024, 3287, 129, 1449, 1444, 0, 1266,
	1500, 1502, 1498, 2247, 0, 2249, 0, 2251, 0, 129,
	2532, 0, 0, 2629, 0, 2663, 0, 0, 3080, 0,
	0, 3070, 3049, 3129, 0, 3082, 3084, 0, 0, 0,
	0, 0, 3016, 0, 3075, 3076, 3077, 3078, 3079, 129,
	0, 3080, 3142, 3207, 3209, 0, 0, 0, 0, 0,
	0, 3229, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1533, 1389, 1391, 1392, 1276, 2935, 0,
	2938, 0, 1415, 0, 2896, 0, 1941, 1942, 2892, 0,
	1644, 167, 168, 0, 0, 0, 0, 173, 1126, -2,
	0, 0, -2, 0, 0, -2, 0, 0, 1187, 1189,
	-2, 1436, 1438, 0, 0, 1541, 0, -2, 0, 1412,
	0, -2, 1410, 1388, 1244, 1398, 1404, 0, 0, 2910,
	2907, 0, 1740, 0, 0, 1727, 1728, 1740, 0, 1772,
	1282, 0, 1352, 0, 0, 1192, 1195, 1196, 1197, 1198,
	1199, 1200, -2, -2, -2, -2, -2, -2, 1207, 0,
	0, 1211, 1363, 0, 1346, 1347, 0, 1309, 1310, 1311,
	1349, 0, 1318, 0, 1366, 1367, 0, 0, 0, 1324,
	1692, 0, 203, 1325, 0, 1380, 0, 1740, 1726, 1739,
	0, 1724, 0, 0, 0, 1334, 1336, 1719, 1719, 1719,
	0, 2892, 0, 1944, 0, 0, 0, 1791, 1792, 0,
	1798, 1800, 0, 1807, 0, 1590, 0, 0, 0, 0,
	0, 1617, 1621, 1618, 1619, 1592, 0, 1653, 0, 1594,
	1598, 1600, 1602, 1611, 1653, 0, 0, 1673, 0, 0,
	564, 0, 0, 1830, 2055, 0, 1890, 2105, 0, 1963,
	1967, 2113, 2104, 0, 0, 1991, 1993, 1994, 2013, 0,
	2119, 0, 138, 139, 1961, 0, 0, 0, 2665, 2524,
	2134, 2566, 0, 0, 2466, 0, 2469, 2467, 0, 0,
	0, 2433, 2435, 2436, 2487, 2480, 2484, 0, 0, 2638,
	0, 2642, 0, 2643, 0, 2870, 0, 0, 0, 294,
	2667, 0, 2017, 2019, 2060, 2732, 2732, 0, 2065, 2520,
	0, 2025, 0, 2020, 2021, 0, 1686, 1687, 0, 2563,
	0, 2561, 2574, 0, 2610, 0, 0, 1961, 0, 0,
	0, 2626, 0, 2999, 3000, 3003, 3004, 3007, 3008, 2657,
	0, 2119, 0, 2504, 2505, 0, 2760, 0, 2786, 0,
	2774, 2776, 2777, 2778, 2779, 2780, 2789, 2792, 2797, 2800,
	0, 2810, 2811, 2812, 2814, 0, 2819, 0, 0, 0,
	2388, 2394, 2421, 2422, 2425, 0, 2168, 0, 2005, 1983,
	0, 1985, 1986, 2411, 0, 2412, 0, 2414, 0, 0,
	2122, 0, 2075, 0, 0, 2080, 0, 1937, 1937, 0,
	0, 2175, 2185, 1888, 2031, 0, 0, 0, 0, 2179,
	2181, 2182, 2180, 0, 2028, 0, 0, 0, 0, 129,
	129, 2226, 2747, 2737, 2377, 0, 0, 3265, 0, 0,
	3310, 2385, 0, 0, 2379, 3272, 2390, 2381, 0, 3274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2362, 3299, 2449, 0, 2361, 129, 2411, 3305, 3096,
	0, 0, 0, 0, 2853, 2838, 0, 0, 0, 2854,
	2855, 0, 0, 0, 0, 3113, 3114, 3115, 3117, 3118,
	3119, 3120, 3121, 2350, 2352, 2351, 2368, 2771, 0, 0,
	0, 3306, 3307, 2398, 2399, 0, 2628, 2795, 2405, 3267,
	2406, 3268, 3297, 2407, 3269, 2408, 3270, 3298, 0, 0,
	0, 0, 0, 129, 2647, 0, 0, 132, 129, 0,
	0, 0, 0, 0, 0, 3028, 3029, 3030, 3031, 3032,
	3033, 0, 0, 2241, 1445, 129, 129, 129, 2253, 2535,
	0, 0, 2664, 2696, 3012, 3068, 0, 3086, 3062, 3063,
	3064, 3065, 3066, 3073, 3013, 0, 129, 0, 0, 3221,
	0, 3223, 0, 0, 3233, 3245, 3246, 3234, 3235, 3236,
	3237, 3238, 3239, 0, 3241, 3242, 0, 2936, 1414, 1441,
	0, 2899, 0, 2877, 169, 170, 171, 172, -2, -2,
	0, 0, 0, -2, -2, 1435, 1437, -2, -2, 1180,
	1411, 1441, 1241, 1403, 1534, 1533, 0, 1536, 0, 1729,
	1730, 0, 1735, 0, 1299, 1302, 0, 0, 0, 1212,
	0, 0, 0, 1308, 1313, 0, 0, 559, 1323, 1369,
	1370, 1693, 0, 1694, 1690, 1691, 0, 0, 0, 1375,
	351, 0, 1331, 1732, 1733, 1332, 1740, 0, 1756, 1740,
	1374, 2899, 1638, 0, 0, 1929, 0, 0, 1804, 1647,
	1612, 0, 1614, 0, 0, 0, 1616, 0, 0, 0,
	1596, 0, 0, 0, 151, 0, 1675, 1679, 0, 0,
	0, 1945, 1812, 1912, 1912, 0, 1814, 1827, 0, 1830,
	0, 2113, 0, 0, 0, 140, 0, 1989, 0, 1995,
	0, 2105, 3189, 0, 0, 0, 1990, 0, 0, 3185,
	2515, 0, 0, 0, 0, 2426, 0, 1680, 0, 1463,
	-2, 2461, 0, 2462, 2497, 0, 2514, 0, 2635, 0,
	0, 0, 2872, 0, 0, 0, 1961, 0, 2527, 2014,
	0, 2121, 2121, 0, 2089, 0, 2026, 0, 1688, 2652,
	0, 2006, 0, 0, 0, 0, 2005, 0, 0, 0,
	2662, 0, 0, 0, 0, 2788, 2781, 0, 0, 0,
	2834, 2834, 0, 0, 0, 0, 0, 2170, 2013, 1981,
	1982, 2071, 2085, 2413, 2417, 2415, 2416, 2418, 2085, 0,
	2085, 0, 0, 1931, 126, 0, 1932, 0, 2172, 0,
	0, 2032, 2173, 0, 2177, 0, 1689, 2030, 2178, 2187,
	2194, 0, 0, 2159, 0, 2159, 0, 0, 2392, 3309,
	2383, 0, 3276, 0, 0, 2396, 2387, 0, 3278, 2450,
	2547, 2655, 2366, 3260, 3289, 2367, 0, 0, 0, 2844,
	0, 0, 0, 3261, 3290, 0, 0, 0, 0, 0,
	0, 0, 3339, 0, 2410, 2645, 2646, 3135, 1689, 0,
	2592, 2593, 2596, 0, 0, 0, 2248, 2250, 2252, 2533,
	2630, 3071, 3080, 3018, 3227, 3228, 3222, 3226, 0, 3240,
	1390, 1416, 1515, 1572, 0, 2891, 0, -2, -2, -2,
	1413, 2914, 0, 1737, 1738, 1771, 1362, -2, 0, 1348,
	1344, 1345, 1319, 0, 1320, 0, 1695, 1326, 1327, 0,
	1376, 1329, 1765, 1718, 1720, 0, 0, 0, 0, 1742,
	1743, 1744, 1745, 1746, 1747, 1750, 1754, 0, 1372, 0,
	1573, 1641, 0, 0, 1922, 1645, 0, 1925, 0, 1613,
	0, 1624, 1615, 0, 0, 1654, 0, 1657, 1659, 1674,
	0, 1677, 0, 0, 0, 1696, 0, 0, 1717, 1811,
	1813, 0, 0, 0, 1907, 0, 1829, 1831, 1832, 1893,
	1893, 1835, 1836, 1893, 1893, 0, 0, 0, 1846, 1854,
	1645, 1825, 140, 0, 1968, 1971, 1972, 1973, 1974, 1975,
	1976, 1977, 1978, 1979, 1980, 1969, 2117, 0, 1992, 2013,
	2113, 2118, 2114, 0, 0, 2103, 2105, 1990, 3188, 0,
	0, 0, 0, 0, 2128, 0, 2452, 1682, 2465, 0,
	2470, 2471, 0, 2503, 2499, 2486, 2488, 0, 2491, 2492,
	2411, 0, 2636, 2860, 0, 0, 2866, 2871, 0, 0,
	2869, 2524, 2134, 0, 2062, 0, 2063, 2079, 2094, 0,
	2059, 0, 2837, 2004, 0, 2005, 0, 2103, 1990, 2611,
	0, 2005, 2665, 0, 0, 2761, 0, 2770, 0, 2817,
	2834, 2831, 0, 2830, 2859, 2424, 0, 0, 0, 2011,
	2732, 0, 2732, 0, 2732, 2081, 2082, 363, 1940, 125,
	1936, 1937, 2176, 2186, 0, 0, 2734, 2389, 2395, 2150,
	0, 2152, 0, 2391, 0, 2159, 0, 0, 2839, 2849,
	2849, 2842, 0, 2856, 0, 0, 0, 2785, 2369, 3308,
	0, 3341, 3342, 0, 0, 0, 0, 129, 2588, 3072,
	129, 0, 129, 3230, 2898, 2900, 0, 2878, 2880, 2882,
	2883, 2884, 2885, 2886, 0, 233, 419, 520, 0, 0,
	0, 0, 2909, 0, -2, 0, 0, 1377, 1378, 1770,
	0, 0, 0, 0, 1339, 0, 1741, 1748, 1749, 0,
	0, 1341, 1373, 1632, 0, 0, 0, 0, 1924, 1930,
	1793, 0, 0, 1652, 1658, 1672, 1676, 0, 0, 1702,
	0, 0, 0, 0, 1699, 1719, 0, 0, 1911, 0,
	1909, 0, 0, 0, 0, 0, 0, 0, 1845, 1828,
	0, 1848, 1849, 1850, 1851, 1852, 0, 1815, 2117, 2102,
	2119, 0, 1996, 140, 2115, 2116, 2105, 2113, 0, 2665,
	2521, 0, 0, 2524, 2130, 0, 1681, 2466, 2468, 2463,
	0, 0, 0, 2498, 2489, 1893, 2493, 2494, 0, 2513,
	0, 0, 2873, 2874, 2516, 0, 0, 0, 2064, 0,
	2066, 2090, 2091, 0, 2086, 2087, 2088, 2067, 0, 0,
	0, 0, 2007, 2622, 2005, 0, 0, 0, 2627, 2658,
	2753, 0, 0, 2763, 2793, 2829, 2832, 2833, 0, 2002,
	0, 0, 0, 2121, 0, 2121, 2520, 2121, 0, 1943,
	1940, 1933, 0, 2059, 2189, 0, 0, 0, 2393, 2154,
	0, 2397, 2057, 0, 2057, 0, 0, 0, 0, 3335,
	3336, 0, 3337, 3340, 3137, 3025, 3026, 0, 3014, 0,
	0, 0, 2887, 0, 0, 0, 2906, 2926, 2915, -2,
	478, 234, 0, 2926, 2926, 1361, 1321, 1364, 1379, 1754,
	0, 0, 1757, 0, 1759, 0, 0, 0, 1721, 1722,
	1755, 1340, 0, 0, 0, 0, 1645, 1662, 3089, 0,
	1700, 0, 1704, 0, 1697, 0, 1698, 0, 1716, 1902,
	1903, 0, 0, 1914, 1904, 0, 0, 0, 1833, 1834,
	1837, 1838, 1839, 1840, 0, 1843, 1844, 1847, 0, 1855,
	1857, 2119, 1948, 0, 2107, 1937, 1937, 0, 2117, 2113,
	140, 2105, 3186, 2522, 2523, 2517, 2024, 0, 0, 2427,
	0, 0, 2496, 2500, 2501, 0, 0, 0, 0, 0,
	1961, 0, 2078, 2092, 0, 2093, 0, 0, 0, 0,
	0, 0, 2836, 2624, 0, 0, 2005, 0, 2762, 0,
	1997, 0, 2001, 1998, 0, 2411, 0, 2411, 2089, 1645,
	0, 1934, 1943, 2174, 2183, 2733, 2159, 2159, 0, 2840,
	2056, 2847, 0, 2841, 0, 2857, 2858, 2787, 0, 0,
	2901, 2902, 2881, 0, 0, 0, 2911, 0, 0, 2917,
	2918, 2919, 2920, 2921, 2912, 2913, 0, 1767, 1769, 1758,
	1760, 0, 1763, 0, 1764, 1751, 1752, 0, 0, 0,
	1921, 1623, 0, 3087, 0, 1678, 1703, 1706, 1707, 0,
	0, 0, 1712, 0, 1705, 0, 0, 1905, 0, 1906,
	1915, 0, 0, 0, 0, 1908, 1910, 1841, 1842, 1853,
	0, 1946, 2106, 0, 126, 126, 0, 2119, 140, 2117,
	2113, 2134, 0, 0, 0, 0, 2490, 2495, 0, 2863,
	2864, 2524, 2120, 2095, 0, 2098, 2099, 0, 2096, 2058,
	2068, 2835, 2005, 0, 2612, 2754, 2764, 2003, 0, 2072,
	2084, 2074, 2094, 2411, 2083, 1935, 2151, 2153, 2159, 0,
	2843, 3338, 129, 2889, 2888, 0, 0, 2923, 2924, 0,
	0, 1338, 0, 0, 1761, 1762, 0, 0, 0, 0,
	1661, 0, 1708, 1709, 1710, 1711, 1713, 0, 0, 1913,
	0, 0, 1919, 0, 1856, 2108, 2109, 2110, 1937, 1950,
	2117, 2119, 140, 2119, 0, 2131, 2130, 0, 2502, 2503,
	0, 0, 2518, 2097, 2520, 2520, 2623, 2005, 0, 2411,
	2077, 2155, 2848, 3027, 2890, 2922, 2925, 2916, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1777, 0,
	-2, 0, 0, 0, 126, 2119, 1949, 2117, 1645, 2129,
	0, 2024, 2508, 0, 0, 0, 2100, 2101, 2625, 0,
	2076, 1766, 1768, 1753, 0, 0, -2, 1640, 1636, 1637,
	3088, 0, 1756, 0, 0, 1786, 0, 1775, 1916, 1917,
	0, 1920, 2111, 1947, 2119, 2123, 2132, 2134, 0, 2506,
	2509, 2510, 2511, 2512, 0, 0, 0, 1999, 0, 0,
	1701, 0, 1778, 1779, 1765, 1786, 1786, 0, 0, 0,
	1951, 2119, 2474, 0, 0, 0, 0, 0, 1533, 1714,
	1770, 1765, 1756, 1785, 0, 0, 0, 1645, 2507, 0,
	0, 0, 0, 0, 1754, 1770, 1782, 0, 0, 1918,
	2124, 2508, 2861, 2862, 1639, 0, 1780, 1754, 0, 0,
	0, 1781, 1783, 0, 2475, 0, 1784,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 538, 3, 3,
	531, 532, 536, 534, 541, 535, 533, 537, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 542, 540,
	525, 527, 526, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 529, 3, 530, 539,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 528, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:595
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:610
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:618
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:633
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:636
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:645
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:646
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:647
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:648
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:649
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:650
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:651
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:652
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:653
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:654
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:655
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:656
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:657
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:658
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:659
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:660
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:661
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:662
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:663
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:664
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:665
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:666
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:667
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:668
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:669
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:670
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:671
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:672
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:673
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:674
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:675
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:676
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:677
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:678
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:679
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:680
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:681
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:682
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:683
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:684
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:685
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:686
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:687
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:688
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:689
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:690
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:691
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:692
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:693
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:694
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:695
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:696
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:697
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:698
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:699
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:700
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:701
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:702
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:703
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:704
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:705
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:706
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:707
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:708
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:709
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:710
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:711
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:712
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:713
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:714
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:715
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:716
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:717
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:718
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:719
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:720
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:721
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:722
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:723
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:724
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:725
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:726
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:727
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:728
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:729
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:730
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:731
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:732
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:733
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:734
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:735
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:736
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:737
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:738
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:739
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:740
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:741
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:742
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:743
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:744
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:745
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:746
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:747
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:748
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:749
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:750
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:751
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:752
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:753
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:754
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:755
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:756
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:757
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:758
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:759
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:760
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:762
		{
			yyVAL.stmt = nil
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:773
		{
			yyVAL.str = yyDollar[1].str
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:774
		{
			yyVAL.str = ""
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:778
		{
			yyVAL.list = yyDollar[1].list
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:779
		{
			yyVAL.list = nil
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:783
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:784
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:785
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:789
		{
			yyVAL.ival = 1
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:790
		{
			yyVAL.ival = 0
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:794
		{
			yyVAL.ival = 1
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:795
		{
			yyVAL.ival = 0
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:799
		{
			yyVAL.bval = true
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:800
		{
			yyVAL.bval = false
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:804
		{
			yyVAL.bval = true
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:805
		{
			yyVAL.bval = false
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:809
		{
			yyVAL.list = yyDollar[2].list
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:810
		{
			yyVAL.list = nil
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:811
		{
			yyVAL.list = nil
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:820
		{
			yyVAL.str = yyDollar[1].str
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:821
		{
			yyVAL.str = yyDollar[1].str
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:822
		{
			yyVAL.str = yyDollar[1].str
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:826
		{
			yyVAL.str = yyDollar[1].str
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:827
		{
			yyVAL.str = yyDollar[1].str
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:828
		{
			yyVAL.str = yyDollar[1].str
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:829
		{
			yyVAL.str = yyDollar[1].str
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:830
		{
			yyVAL.str = yyDollar[1].str
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:833
		{
			yyVAL.str = yyDollar[1].str
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:834
		{
			yyVAL.str = yyDollar[1].str
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:837
		{
			yyVAL.str = yyDollar[1].str
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:842
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:846
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:855
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:859
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:866
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:873
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:880
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:909
		{
			yyVAL.list = yyDollar[2].list
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:910
		{
			yyVAL.list = nil
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:915
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:919
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:928
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:932
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:945
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:951
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:957
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:963
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:969
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:976
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:983
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:989
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:995
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1004
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1008
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1020
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1024
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1034
		{
			yyVAL.str = "abort"
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1035
		{
			yyVAL.str = "absent"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1036
		{
			yyVAL.str = "absolute"
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1037
		{
			yyVAL.str = "access"
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1038
		{
			yyVAL.str = "action"
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1039
		{
			yyVAL.str = "add"
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1040
		{
			yyVAL.str = "admin"
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1041
		{
			yyVAL.str = "after"
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1042
		{
			yyVAL.str = "aggregate"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1043
		{
			yyVAL.str = "also"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1044
		{
			yyVAL.str = "alter"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1045
		{
			yyVAL.str = "always"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1046
		{
			yyVAL.str = "asensitive"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1047
		{
			yyVAL.str = "assertion"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1048
		{
			yyVAL.str = "assignment"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.str = "at"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.str = "atomic"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.str = "attach"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1052
		{
			yyVAL.str = "attribute"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "backward"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "before"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "begin"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "breadth"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "by"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "cache"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "call"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "called"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "cascade"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "cascaded"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "catalog"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "chain"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "characteristics"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "checkpoint"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "class"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "close"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "cluster"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "columns"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "comment"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "comments"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "commit"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "committed"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "compression"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "conditional"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "configuration"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "conflict"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "connection"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "constraints"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "content"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "continue"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "conversion"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "copy"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "cost"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "csv"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "cube"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "current"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "cursor"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "cycle"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "data"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "database"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "day"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "deallocate"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "declare"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "defaults"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "deferred"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "definer"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "delete"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "delimiter"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "delimiters"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "depends"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "depth"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "detach"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "dictionary"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "disable"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "discard"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "document"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "domain"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "double"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "drop"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "each"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "empty"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "enable"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "encoding"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "encrypted"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "enum"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "error"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "escape"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "event"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "exclude"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "excluding"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "exclusive"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "execute"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "explain"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "expression"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "extension"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "external"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "family"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "filter"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "finalize"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "first"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "following"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "force"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "format"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "forward"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "function"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "functions"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "generated"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "global"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "granted"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "groups"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "handler"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "header"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "hold"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "hour"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "identity"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "if"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "immediate"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "immutable"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "implicit"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "import"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "include"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "including"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "increment"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "indent"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "index"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "indexes"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "inherit"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "inherits"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "inline"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "input"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "insensitive"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "insert"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "instead"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "invoker"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "isolation"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.str = "keep"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1169
		{
			yyVAL.str = "key"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.str = "keys"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "label"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "language"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "large"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.str = "last"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.str = "leakproof"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			yyVAL.str = "level"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1177
		{
			yyVAL.str = "listen"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = "load"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = "local"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "location"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "lock"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "locked"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "logged"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "mapping"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "match"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "matched"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "materialized"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "maxvalue"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "merge"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "method"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "minute"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "minvalue"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "mode"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1194
		{
			yyVAL.str = "month"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "move"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "name"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "names"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.str = "nested"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.str = "new"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.str = "next"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.str = "nfc"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "nfd"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "nfkc"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = "nfkd"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = "no"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = "normalized"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1207
		{
			yyVAL.str = "nothing"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1208
		{
			yyVAL.str = "notify"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1209
		{
			yyVAL.str = "nowait"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1210
		{
			yyVAL.str = "nulls"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.str = "object"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1212
		{
			yyVAL.str = "of"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1213
		{
			yyVAL.str = "off"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1214
		{
			yyVAL.str = "oids"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.str = "old"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1216
		{
			yyVAL.str = "omit"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1217
		{
			yyVAL.str = "operator"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.str = "option"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.str = "options"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "ordinality"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "others"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "over"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "overriding"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "owned"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "owner"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "parallel"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "parameter"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "parser"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "partial"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "partition"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "passing"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "password"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "path"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "plan"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.str = "plans"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1236
		{
			yyVAL.str = "policy"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.str = "preceding"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1238
		{
			yyVAL.str = "prepare"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1239
		{
			yyVAL.str = "prepared"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1240
		{
			yyVAL.str = "preserve"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.str = "prior"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1242
		{
			yyVAL.str = "privileges"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1243
		{
			yyVAL.str = "procedural"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1244
		{
			yyVAL.str = "procedure"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.str = "procedures"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1246
		{
			yyVAL.str = "program"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1247
		{
			yyVAL.str = "publication"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1248
		{
			yyVAL.str = "quote"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1249
		{
			yyVAL.str = "quotes"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1250
		{
			yyVAL.str = "range"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1251
		{
			yyVAL.str = "read"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1252
		{
			yyVAL.str = "reassign"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.str = "recheck"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1254
		{
			yyVAL.str = "recursive"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1255
		{
			yyVAL.str = "ref"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1256
		{
			yyVAL.str = "referencing"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "refresh"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.str = "reindex"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.str = "relative"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "release"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "rename"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "repeatable"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "replace"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "replica"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "reset"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "restart"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "restrict"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "return"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.str = "returns"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1270
		{
			yyVAL.str = "revoke"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "role"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "rollback"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "rollup"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "routine"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "routines"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "rows"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "rule"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "savepoint"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.str = "scalar"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1280
		{
			yyVAL.str = "schema"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1281
		{
			yyVAL.str = "schemas"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1282
		{
			yyVAL.str = "scroll"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.str = "search"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1284
		{
			yyVAL.str = "second"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1285
		{
			yyVAL.str = "security"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1286
		{
			yyVAL.str = "sequence"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1287
		{
			yyVAL.str = "sequences"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1288
		{
			yyVAL.str = "serializable"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1289
		{
			yyVAL.str = "server"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1290
		{
			yyVAL.str = "session"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1291
		{
			yyVAL.str = "set"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1292
		{
			yyVAL.str = "sets"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1293
		{
			yyVAL.str = "share"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1294
		{
			yyVAL.str = "show"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1295
		{
			yyVAL.str = "simple"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1296
		{
			yyVAL.str = "skip"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1297
		{
			yyVAL.str = "snapshot"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1298
		{
			yyVAL.str = "source"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1299
		{
			yyVAL.str = "sql"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1300
		{
			yyVAL.str = "stable"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.str = "standalone"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.str = "start"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "statement"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "statistics"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "stdin"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "stdout"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "storage"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "stored"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "strict"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "string"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.str = "strip"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1312
		{
			yyVAL.str = "subscription"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			yyVAL.str = "support"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1314
		{
			yyVAL.str = "sysid"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.str = "system"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1316
		{
			yyVAL.str = "tables"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1317
		{
			yyVAL.str = "tablespace"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1318
		{
			yyVAL.str = "target"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1319
		{
			yyVAL.str = "temp"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1320
		{
			yyVAL.str = "template"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1321
		{
			yyVAL.str = "temporary"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1322
		{
			yyVAL.str = "text"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1323
		{
			yyVAL.str = "ties"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1324
		{
			yyVAL.str = "transaction"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1325
		{
			yyVAL.str = "transform"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1326
		{
			yyVAL.str = "trigger"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1327
		{
			yyVAL.str = "truncate"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1328
		{
			yyVAL.str = "trusted"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1329
		{
			yyVAL.str = "type"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1330
		{
			yyVAL.str = "types"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1331
		{
			yyVAL.str = "uescape"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1332
		{
			yyVAL.str = "unbounded"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1333
		{
			yyVAL.str = "uncommitted"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1334
		{
			yyVAL.str = "unconditional"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1335
		{
			yyVAL.str = "unencrypted"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = "unknown"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "unlisten"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "unlogged"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "until"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "update"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "vacuum"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "valid"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "validate"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "validator"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1345
		{
			yyVAL.str = "value"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1346
		{
			yyVAL.str = "varying"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1347
		{
			yyVAL.str = "version"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1348
		{
			yyVAL.str = "view"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1349
		{
			yyVAL.str = "views"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1350
		{
			yyVAL.str = "volatile"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1351
		{
			yyVAL.str = "whitespace"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1352
		{
			yyVAL.str = "within"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1353
		{
			yyVAL.str = "without"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1354
		{
			yyVAL.str = "work"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1355
		{
			yyVAL.str = "wrapper"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1356
		{
			yyVAL.str = "write"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1357
		{
			yyVAL.str = "xml"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "year"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "yes"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "zone"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1374
		{
			yyVAL.str = "between"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1375
		{
			yyVAL.str = "bigint"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1376
		{
			yyVAL.str = "bit"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1377
		{
			yyVAL.str = "boolean"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.str = "char"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1379
		{
			yyVAL.str = "character"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1380
		{
			yyVAL.str = "coalesce"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1381
		{
			yyVAL.str = "dec"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1382
		{
			yyVAL.str = "decimal"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1383
		{
			yyVAL.str = "exists"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1384
		{
			yyVAL.str = "extract"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1385
		{
			yyVAL.str = "float"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1386
		{
			yyVAL.str = "greatest"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1387
		{
			yyVAL.str = "grouping"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1388
		{
			yyVAL.str = "inout"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1389
		{
			yyVAL.str = "int"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1390
		{
			yyVAL.str = "integer"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1391
		{
			yyVAL.str = "interval"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1392
		{
			yyVAL.str = "json"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "json_array"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.str = "json_arrayagg"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.str = "json_exists"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1396
		{
			yyVAL.str = "json_object"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.str = "json_objectagg"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.str = "json_query"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1399
		{
			yyVAL.str = "json_scalar"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1400
		{
			yyVAL.str = "json_serialize"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1401
		{
			yyVAL.str = "json_table"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.str = "json_value"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1403
		{
			yyVAL.str = "least"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1404
		{
			yyVAL.str = "merge_action"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1405
		{
			yyVAL.str = "national"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1406
		{
			yyVAL.str = "nchar"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1407
		{
			yyVAL.str = "none"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1408
		{
			yyVAL.str = "normalize"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.str = "nullif"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1410
		{
			yyVAL.str = "numeric"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1411
		{
			yyVAL.str = "out"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1412
		{
			yyVAL.str = "overlay"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1413
		{
			yyVAL.str = "position"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1414
		{
			yyVAL.str = "precision"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1415
		{
			yyVAL.str = "real"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.str = "row"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1417
		{
			yyVAL.str = "setof"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "smallint"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1419
		{
			yyVAL.str = "substring"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "time"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "timestamp"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "treat"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "trim"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "values"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "varchar"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "xmlattributes"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "xmlconcat"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "xmlelement"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "xmlexists"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "xmlforest"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "xmlparse"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "xmlpi"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "xmlroot"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "xmlserialize"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = "xmltable"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "authorization"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "binary"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "collation"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "concurrently"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "cross"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1455
		{
			yyVAL.str = "current_schema"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1456
		{
			yyVAL.str = "freeze"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1457
		{
			yyVAL.str = "full"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.str = "ilike"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1459
		{
			yyVAL.str = "inner"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1460
		{
			yyVAL.str = "is"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1461
		{
			yyVAL.str = "isnull"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1462
		{
			yyVAL.str = "join"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.str = "left"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = "like"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1465
		{
			yyVAL.str = "natural"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1466
		{
			yyVAL.str = "notnull"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.str = "outer"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1468
		{
			yyVAL.str = "overlaps"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "right"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1470
		{
			yyVAL.str = "similar"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.str = "tablesample"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1472
		{
			yyVAL.str = "verbose"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "all"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "analyse"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "analyze"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "and"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "any"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.str = "array"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1488
		{
			yyVAL.str = "as"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = "asc"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = "asymmetric"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.str = "both"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1492
		{
			yyVAL.str = "case"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			yyVAL.str = "cast"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "check"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "collate"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "column"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.str = "constraint"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1498
		{
			yyVAL.str = "create"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1499
		{
			yyVAL.str = "current_catalog"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = "current_date"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "current_role"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "current_time"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "current_timestamp"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "current_user"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "default"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "deferrable"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "desc"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "distinct"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "do"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "else"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "end"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "except"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "false"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "fetch"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "for"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "foreign"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "from"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "grant"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "group"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "having"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "in"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "initially"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "intersect"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "into"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "lateral"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "leading"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "limit"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "localtime"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "localtimestamp"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "not"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "null"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "offset"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "on"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "only"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "or"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "order"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "placing"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "primary"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "references"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "returning"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "select"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "session_user"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "some"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "symmetric"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "system_user"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "table"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "then"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "to"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "trailing"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "true"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "union"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "unique"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "user"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "using"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "variadic"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "when"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "where"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "window"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "with"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "abort"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "absent"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "absolute"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "access"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "action"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "add"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1578
		{
			yyVAL.str = "admin"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1579
		{
			yyVAL.str = "after"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1580
		{
			yyVAL.str = "aggregate"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1581
		{
			yyVAL.str = "all"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1582
		{
			yyVAL.str = "also"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1583
		{
			yyVAL.str = "alter"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1584
		{
			yyVAL.str = "always"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1585
		{
			yyVAL.str = "analyse"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1586
		{
			yyVAL.str = "analyze"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1587
		{
			yyVAL.str = "and"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1588
		{
			yyVAL.str = "any"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1589
		{
			yyVAL.str = "asc"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1590
		{
			yyVAL.str = "asensitive"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "assertion"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "assignment"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			yyVAL.str = "asymmetric"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1594
		{
			yyVAL.str = "at"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.str = "atomic"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "attach"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "attribute"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "authorization"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "backward"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "before"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "begin"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "between"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "bigint"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "binary"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "bit"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "boolean"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "both"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "breadth"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "by"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "cache"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "call"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "called"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "cascade"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "cascaded"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "case"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "cast"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "catalog"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "chain"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "characteristics"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "check"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "checkpoint"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "class"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "close"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "cluster"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "coalesce"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "collate"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "collation"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "column"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "columns"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "comment"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "comments"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "commit"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "committed"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "compression"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "concurrently"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "conditional"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "configuration"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "conflict"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "connection"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "constraint"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "constraints"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "content"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "continue"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "conversion"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "copy"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "cost"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "cross"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "csv"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "cube"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "current"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "current_catalog"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "current_date"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "current_role"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "current_schema"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "current_time"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "current_timestamp"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "current_user"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "cursor"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "cycle"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "data"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "database"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "deallocate"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "dec"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "decimal"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "declare"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "default"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "defaults"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "deferrable"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "deferred"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "definer"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "delete"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "delimiter"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "delimiters"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "depends"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "depth"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "desc"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "detach"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "dictionary"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "disable"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "discard"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "distinct"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "do"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "document"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "domain"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "double"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "drop"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "each"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "else"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "empty"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "enable"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "encoding"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "encrypted"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "end"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "enum"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "error"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "escape"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "event"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "exclude"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "excluding"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "exclusive"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "execute"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "exists"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "explain"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "expression"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "extension"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "external"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "extract"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "false"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "family"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "finalize"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "first"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "float"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "following"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "force"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "foreign"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "format"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "forward"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "freeze"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "full"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "function"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "functions"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "generated"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "global"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "granted"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "greatest"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "grouping"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "groups"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "handler"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "header"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "hold"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "identity"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "if"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "ilike"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "immediate"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "immutable"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "implicit"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "import"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "in"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "include"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "including"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "increment"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "indent"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "index"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "indexes"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "inherit"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "inherits"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "initially"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "inline"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "inner"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "inout"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "input"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "insensitive"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "insert"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "instead"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.str = "int"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1756
		{
			yyVAL.str = "integer"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1757
		{
			yyVAL.str = "interval"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1758
		{
			yyVAL.str = "invoker"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.str = "is"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.str = "isolation"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1761
		{
			yyVAL.str = "join"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1762
		{
			yyVAL.str = "json"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.str = "json_array"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1764
		{
			yyVAL.str = "json_arrayagg"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1765
		{
			yyVAL.str = "json_exists"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1766
		{
			yyVAL.str = "json_object"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1767
		{
			yyVAL.str = "json_objectagg"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1768
		{
			yyVAL.str = "json_query"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.str = "json_scalar"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1770
		{
			yyVAL.str = "json_serialize"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.str = "json_table"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1772
		{
			yyVAL.str = "json_value"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1773
		{
			yyVAL.str = "keep"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1774
		{
			yyVAL.str = "key"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			yyVAL.str = "keys"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1776
		{
			yyVAL.str = "label"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1777
		{
			yyVAL.str = "language"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1778
		{
			yyVAL.str = "large"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1779
		{
			yyVAL.str = "last"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1780
		{
			yyVAL.str = "lateral"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.str = "leading"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1782
		{
			yyVAL.str = "leakproof"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1783
		{
			yyVAL.str = "least"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1784
		{
			yyVAL.str = "left"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1785
		{
			yyVAL.str = "level"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1786
		{
			yyVAL.str = "like"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1787
		{
			yyVAL.str = "listen"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1788
		{
			yyVAL.str = "load"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1789
		{
			yyVAL.str = "local"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1790
		{
			yyVAL.str = "localtime"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1791
		{
			yyVAL.str = "localtimestamp"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1792
		{
			yyVAL.str = "location"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1793
		{
			yyVAL.str = "lock"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1794
		{
			yyVAL.str = "locked"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1795
		{
			yyVAL.str = "logged"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1796
		{
			yyVAL.str = "mapping"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1797
		{
			yyVAL.str = "match"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1798
		{
			yyVAL.str = "matched"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1799
		{
			yyVAL.str = "materialized"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1800
		{
			yyVAL.str = "maxvalue"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1801
		{
			yyVAL.str = "merge"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1802
		{
			yyVAL.str = "merge_action"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1803
		{
			yyVAL.str = "method"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1804
		{
			yyVAL.str = "minvalue"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1805
		{
			yyVAL.str = "mode"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1806
		{
			yyVAL.str = "move"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1807
		{
			yyVAL.str = "name"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1808
		{
			yyVAL.str = "names"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1809
		{
			yyVAL.str = "national"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1810
		{
			yyVAL.str = "natural"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1811
		{
			yyVAL.str = "nchar"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1812
		{
			yyVAL.str = "nested"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1813
		{
			yyVAL.str = "new"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1814
		{
			yyVAL.str = "next"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1815
		{
			yyVAL.str = "nfc"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1816
		{
			yyVAL.str = "nfd"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1817
		{
			yyVAL.str = "nfkc"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1818
		{
			yyVAL.str = "nfkd"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1819
		{
			yyVAL.str = "no"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1820
		{
			yyVAL.str = "none"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1821
		{
			yyVAL.str = "normalize"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1822
		{
			yyVAL.str = "normalized"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1823
		{
			yyVAL.str = "not"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1824
		{
			yyVAL.str = "nothing"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1825
		{
			yyVAL.str = "notify"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1826
		{
			yyVAL.str = "nowait"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1827
		{
			yyVAL.str = "null"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1828
		{
			yyVAL.str = "nullif"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1829
		{
			yyVAL.str = "nulls"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1830
		{
			yyVAL.str = "numeric"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1831
		{
			yyVAL.str = "object"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1832
		{
			yyVAL.str = "of"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1833
		{
			yyVAL.str = "off"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1834
		{
			yyVAL.str = "oids"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1835
		{
			yyVAL.str = "old"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1836
		{
			yyVAL.str = "omit"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1837
		{
			yyVAL.str = "only"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1838
		{
			yyVAL.str = "operator"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1839
		{
			yyVAL.str = "option"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1840
		{
			yyVAL.str = "options"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1841
		{
			yyVAL.str = "or"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1842
		{
			yyVAL.str = "ordinality"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1843
		{
			yyVAL.str = "others"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1844
		{
			yyVAL.str = "out"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1845
		{
			yyVAL.str = "outer"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1846
		{
			yyVAL.str = "overlay"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1847
		{
			yyVAL.str = "overriding"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1848
		{
			yyVAL.str = "owned"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1849
		{
			yyVAL.str = "owner"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1850
		{
			yyVAL.str = "parallel"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1851
		{
			yyVAL.str = "parameter"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1852
		{
			yyVAL.str = "parser"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1853
		{
			yyVAL.str = "partial"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1854
		{
			yyVAL.str = "partition"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1855
		{
			yyVAL.str = "passing"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1856
		{
			yyVAL.str = "password"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1857
		{
			yyVAL.str = "path"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1858
		{
			yyVAL.str = "placing"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1859
		{
			yyVAL.str = "plan"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1860
		{
			yyVAL.str = "plans"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1861
		{
			yyVAL.str = "policy"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1862
		{
			yyVAL.str = "position"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1863
		{
			yyVAL.str = "preceding"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1864
		{
			yyVAL.str = "prepare"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1865
		{
			yyVAL.str = "prepared"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1866
		{
			yyVAL.str = "preserve"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1867
		{
			yyVAL.str = "primary"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1868
		{
			yyVAL.str = "prior"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1869
		{
			yyVAL.str = "privileges"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1870
		{
			yyVAL.str = "procedural"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1871
		{
			yyVAL.str = "procedure"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1872
		{
			yyVAL.str = "procedures"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1873
		{
			yyVAL.str = "program"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1874
		{
			yyVAL.str = "publication"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1875
		{
			yyVAL.str = "quote"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1876
		{
			yyVAL.str = "quotes"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1877
		{
			yyVAL.str = "range"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1878
		{
			yyVAL.str = "read"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1879
		{
			yyVAL.str = "real"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1880
		{
			yyVAL.str = "reassign"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1881
		{
			yyVAL.str = "recheck"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1882
		{
			yyVAL.str = "recursive"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1883
		{
			yyVAL.str = "ref"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1884
		{
			yyVAL.str = "references"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1885
		{
			yyVAL.str = "referencing"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1886
		{
			yyVAL.str = "refresh"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1887
		{
			yyVAL.str = "reindex"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1888
		{
			yyVAL.str = "relative"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1889
		{
			yyVAL.str = "release"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1890
		{
			yyVAL.str = "rename"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1891
		{
			yyVAL.str = "repeatable"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1892
		{
			yyVAL.str = "replace"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1893
		{
			yyVAL.str = "replica"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1894
		{
			yyVAL.str = "reset"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1895
		{
			yyVAL.str = "restart"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1896
		{
			yyVAL.str = "restrict"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1897
		{
			yyVAL.str = "return"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1898
		{
			yyVAL.str = "returns"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1899
		{
			yyVAL.str = "revoke"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1900
		{
			yyVAL.str = "right"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1901
		{
			yyVAL.str = "role"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1902
		{
			yyVAL.str = "rollback"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1903
		{
			yyVAL.str = "rollup"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1904
		{
			yyVAL.str = "routine"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1905
		{
			yyVAL.str = "routines"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1906
		{
			yyVAL.str = "row"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1907
		{
			yyVAL.str = "rows"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1908
		{
			yyVAL.str = "rule"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1909
		{
			yyVAL.str = "savepoint"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1910
		{
			yyVAL.str = "scalar"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1911
		{
			yyVAL.str = "schema"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1912
		{
			yyVAL.str = "schemas"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1913
		{
			yyVAL.str = "scroll"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1914
		{
			yyVAL.str = "search"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1915
		{
			yyVAL.str = "security"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1916
		{
			yyVAL.str = "select"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1917
		{
			yyVAL.str = "sequence"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1918
		{
			yyVAL.str = "sequences"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1919
		{
			yyVAL.str = "serializable"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1920
		{
			yyVAL.str = "server"
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1921
		{
			yyVAL.str = "session"
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1922
		{
			yyVAL.str = "session_user"
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1923
		{
			yyVAL.str = "set"
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1924
		{
			yyVAL.str = "setof"
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1925
		{
			yyVAL.str = "sets"
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1926
		{
			yyVAL.str = "share"
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1927
		{
			yyVAL.str = "show"
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1928
		{
			yyVAL.str = "similar"
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1929
		{
			yyVAL.str = "simple"
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1930
		{
			yyVAL.str = "skip"
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1931
		{
			yyVAL.str = "smallint"
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1932
		{
			yyVAL.str = "snapshot"
		}
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1933
		{
			yyVAL.str = "some"
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1934
		{
			yyVAL.str = "source"
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1935
		{
			yyVAL.str = "sql"
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1936
		{
			yyVAL.str = "stable"
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1937
		{
			yyVAL.str = "standalone"
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1938
		{
			yyVAL.str = "start"
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1939
		{
			yyVAL.str = "statement"
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1940
		{
			yyVAL.str = "statistics"
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1941
		{
			yyVAL.str = "stdin"
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1942
		{
			yyVAL.str = "stdout"
		}
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1943
		{
			yyVAL.str = "storage"
		}
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1944
		{
			yyVAL.str = "stored"
		}
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1945
		{
			yyVAL.str = "strict"
		}
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1946
		{
			yyVAL.str = "string"
		}
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1947
		{
			yyVAL.str = "strip"
		}
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1948
		{
			yyVAL.str = "subscription"
		}
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1949
		{
			yyVAL.str = "substring"
		}
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1950
		{
			yyVAL.str = "support"
		}
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1951
		{
			yyVAL.str = "symmetric"
		}
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1952
		{
			yyVAL.str = "sysid"
		}
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1953
		{
			yyVAL.str = "system"
		}
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1954
		{
			yyVAL.str = "system_user"
		}
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1955
		{
			yyVAL.str = "table"
		}
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1956
		{
			yyVAL.str = "tables"
		}
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1957
		{
			yyVAL.str = "tablesample"
		}
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1958
		{
			yyVAL.str = "tablespace"
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1959
		{
			yyVAL.str = "target"
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1960
		{
			yyVAL.str = "temp"
		}
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1961
		{
			yyVAL.str = "template"
		}
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1962
		{
			yyVAL.str = "temporary"
		}
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1963
		{
			yyVAL.str = "text"
		}
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1964
		{
			yyVAL.str = "then"
		}
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1965
		{
			yyVAL.str = "ties"
		}
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1966
		{
			yyVAL.str = "time"
		}
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1967
		{
			yyVAL.str = "timestamp"
		}
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1968
		{
			yyVAL.str = "trailing"
		}
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1969
		{
			yyVAL.str = "transaction"
		}
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1970
		{
			yyVAL.str = "transform"
		}
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1971
		{
			yyVAL.str = "treat"
		}
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1972
		{
			yyVAL.str = "trigger"
		}
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1973
		{
			yyVAL.str = "trim"
		}
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1974
		{
			yyVAL.str = "true"
		}
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1975
		{
			yyVAL.str = "truncate"
		}
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1976
		{
			yyVAL.str = "trusted"
		}
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1977
		{
			yyVAL.str = "type"
		}
	case 1077:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1978
		{
			yyVAL.str = "types"
		}
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1979
		{
			yyVAL.str = "uescape"
		}
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1980
		{
			yyVAL.str = "unbounded"
		}
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1981
		{
			yyVAL.str = "uncommitted"
		}
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1982
		{
			yyVAL.str = "unconditional"
		}
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1983
		{
			yyVAL.str = "unencrypted"
		}
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1984
		{
			yyVAL.str = "unique"
		}
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1985
		{
			yyVAL.str = "unknown"
		}
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1986
		{
			yyVAL.str = "unlisten"
		}
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1987
		{
			yyVAL.str = "unlogged"
		}
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1988
		{
			yyVAL.str = "until"
		}
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1989
		{
			yyVAL.str = "update"
		}
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1990
		{
			yyVAL.str = "user"
		}
	case 1090:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1991
		{
			yyVAL.str = "using"
		}
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1992
		{
			yyVAL.str = "vacuum"
		}
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1993
		{
			yyVAL.str = "valid"
		}
	case 1093:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1994
		{
			yyVAL.str = "validate"
		}
	case 1094:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1995
		{
			yyVAL.str = "validator"
		}
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1996
		{
			yyVAL.str = "value"
		}
	case 1096:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1997
		{
			yyVAL.str = "values"
		}
	case 1097:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1998
		{
			yyVAL.str = "varchar"
		}
	case 1098:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1999
		{
			yyVAL.str = "variadic"
		}
	case 1099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2000
		{
			yyVAL.str = "verbose"
		}
	case 1100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2001
		{
			yyVAL.str = "version"
		}
	case 1101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2002
		{
			yyVAL.str = "view"
		}
	case 1102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2003
		{
			yyVAL.str = "views"
		}
	case 1103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2004
		{
			yyVAL.str = "volatile"
		}
	case 1104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2005
		{
			yyVAL.str = "when"
		}
	case 1105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2006
		{
			yyVAL.str = "whitespace"
		}
	case 1106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2007
		{
			yyVAL.str = "work"
		}
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2008
		{
			yyVAL.str = "wrapper"
		}
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2009
		{
			yyVAL.str = "write"
		}
	case 1109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2010
		{
			yyVAL.str = "xml"
		}
	case 1110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2011
		{
			yyVAL.str = "xmlattributes"
		}
	case 1111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2012
		{
			yyVAL.str = "xmlconcat"
		}
	case 1112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2013
		{
			yyVAL.str = "xmlelement"
		}
	case 1113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2014
		{
			yyVAL.str = "xmlexists"
		}
	case 1114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2015
		{
			yyVAL.str = "xmlforest"
		}
	case 1115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2016
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2017
		{
			yyVAL.str = "xmlparse"
		}
	case 1117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2018
		{
			yyVAL.str = "xmlpi"
		}
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2019
		{
			yyVAL.str = "xmlroot"
		}
	case 1119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2020
		{
			yyVAL.str = "xmlserialize"
		}
	case 1120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2021
		{
			yyVAL.str = "xmltable"
		}
	case 1121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2022
		{
			yyVAL.str = "yes"
		}
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2023
		{
			yyVAL.str = "zone"
		}
	case 1123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2038
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2040
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2044
		{
			collateClause := ast.NewCollateClause(yyDollar[3].list)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1126:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2050
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2055
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2060
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2065
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2070
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2075
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2080
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2085
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2090
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2095
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2100
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2105
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2110
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2115
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2120
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2125
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2130
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2134
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2138
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2142
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2146
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2150
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2154
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1149:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2159
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2166
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1151:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2171
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2178
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1153:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2183
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2190
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1155:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2195
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2202
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1157:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2209
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1158:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2216
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1159:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2223
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2230
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2234
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2238
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2242
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2246
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlaps"))
			leftList := yyDollar[1].list
			rightList := yyDollar[3].list
			combinedList := ast.NewNodeList()
			combinedList.Items = append(leftList.Items, rightList.Items...)
			yyVAL.node = ast.NewFuncCall(funcName, combinedList, 0)
		}
	case 1165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2255
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_TRUE)
		}
	case 1166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2259
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_TRUE)
		}
	case 1167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2263
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_FALSE)
		}
	case 1168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2267
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_FALSE)
		}
	case 1169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2271
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_UNKNOWN)
		}
	case 1170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2275
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_UNKNOWN)
		}
	case 1171:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2279
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1172:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2284
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1173:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2289
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1174:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2294
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1175:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2299
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1176:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2304
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2309
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2314
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2319
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			sublink := ast.NewSubLink(subLinkType, yyDollar[4].stmt)
			sublink.Testexpr = yyDollar[1].node
			sublink.OperName = operName
			yyVAL.node = sublink
		}
	case 1180:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2328
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			if subLinkType == ast.ANY_SUBLINK {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ANY, operName, yyDollar[1].node, yyDollar[5].node, 0)
			} else {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ALL, operName, yyDollar[1].node, yyDollar[5].node, 0)
			}
		}
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2338
		{
			yylex.Error("UNIQUE predicate is not yet implemented")
		}
	case 1182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2342
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
		}
	case 1183:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2347
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2353
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2359
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[3].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2366
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1187:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2373
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[4].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1188:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2381
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[3].ival)
			uniqueKeys := yyDollar[4].bval
			yyVAL.node = ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
		}
	case 1189:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2398
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[4].ival)
			uniqueKeys := yyDollar[5].bval
			jsonPredicate := ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(jsonPredicate))
		}
	case 1190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2417
		{
			yyVAL.node = ast.NewSetToDefault(0, 0, 0)
		}
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2422
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2424
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2428
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2433
		{
			yyVAL.node = doNegate(yyDollar[2].node, 0)
		}
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2437
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2442
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2447
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2452
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2457
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2462
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2467
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2472
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2477
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2482
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2487
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2492
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2497
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2501
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1209:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2505
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1210:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2510
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2515
		{
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2520
		{
			args := ast.NewNodeList(yyDollar[1].node)
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2527
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2528
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2530
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1216:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2539
		{
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewParenExpr(ast.NewA_Indirection(yyDollar[2].node, yyDollar[4].list, 0), 0)
			} else {
				yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
			}
		}
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2546
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2547
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2549
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2553
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2558
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2562
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2566
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2570
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2576
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2582
		{
			exprList := yyDollar[3].list
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     exprList,
			}
			yyVAL.node = grouping
		}
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2599
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2600
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2601
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2602
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2603
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2607
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2611
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2615
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2619
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2623
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2627
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2631
		{
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2635
		{
			// This is a bit constant per SQL99
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2640
		{
			// generic type 'literal' syntax
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1241:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2647
		{
			// generic syntax with a type modifier
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			// For now, we'll skip the error checking for NamedArgExpr and ORDER BY
			// TODO: Add proper validation when needed
			typeName.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[6].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2657
		{
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, yyDollar[1].typnam, 0)
		}
	case 1243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2662
		{
			t := yyDollar[1].typnam
			t.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1244:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2669
		{
			t := yyDollar[1].typnam
			// INTERVAL_FULL_RANGE equivalent and precision
			fullRange := ast.NewInteger(ast.INTERVAL_FULL_RANGE)
			precision := ast.NewInteger(yyDollar[3].ival)
			t.Typmods = ast.NewNodeList(fullRange, precision)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[5].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2680
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2683
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2686
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2687
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2688
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2692
		{
			yyVAL.typnam = makeTypeNameFromNodeList(ast.NewNodeList(ast.NewString("interval")))
		}
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2699
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR))
		}
	case 1252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2701
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MONTH))
		}
	case 1253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2703
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY))
		}
	case 1254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2705
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR))
		}
	case 1255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2707
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MINUTE))
		}
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2709
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2711
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR | ast.INTERVAL_MASK_MONTH))
		}
	case 1258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2715
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR))
		}
	case 1259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2719
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2723
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2734
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2738
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2749
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1264:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2760
		{
			yyVAL.list = nil
		}
	case 1265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2765
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_SECOND))
		}
	case 1266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2769
		{
			yyVAL.list = ast.NewNodeList(
				ast.NewInteger(ast.INTERVAL_MASK_SECOND),
				ast.NewInteger(yyDollar[3].ival), // precision
			)
		}
	case 1267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2779
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2783
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2793
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2797
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2803
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2804
		{
			yyVAL.node = nil
		}
	case 1273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2808
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2812
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2816
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1276:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2820
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1277:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2825
		{
			yyVAL.list = nil
		}
	case 1278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2827
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2839
		{
			funcCall := yyDollar[1].node.(*ast.FuncCall)

			// Apply within_group_clause if present
			if yyDollar[2].list != nil {
				// WITHIN GROUP (ORDER BY ...) - store the sort list
				funcCall.AggOrder = yyDollar[2].list
				funcCall.AggWithinGroup = true
			}

			// Apply filter_clause if present
			if yyDollar[3].node != nil {
				// FILTER (WHERE condition) - store the filter expression
				funcCall.AggFilter = yyDollar[3].node
			}

			// Apply over_clause if present (window functions)
			if yyDollar[4].windef != nil {
				funcCall.Over = yyDollar[4].windef
			}

			yyVAL.node = funcCall
		}
	case 1280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2863
		{
			jsonAgg := yyDollar[1].node

			// Create or get the Constructor
			var constructor *ast.JsonAggConstructor

			// Handle the filter_clause and over_clause by setting them in the Constructor
			switch jsonFunc := jsonAgg.(type) {
			case *ast.JsonObjectAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			case *ast.JsonArrayAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			}

			// Set filter and over clauses outside the switch (DRY)
			if constructor != nil {
				if yyDollar[2].node != nil {
					constructor.AggFilter = yyDollar[2].node.(ast.Node)
				}
				if yyDollar[3].windef != nil {
					constructor.Over = yyDollar[3].windef
				}
			}

			yyVAL.node = jsonAgg
		}
	case 1281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2896
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1282:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2902
		{
			// SystemFuncName("pg_collation_for")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("pg_collation_for"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2910
		{
			// makeSQLValueFunction(SVFOP_CURRENT_DATE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_DATE, 0, -1, 0)
		}
	case 1284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2915
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME, 0, -1, 0)
		}
	case 1285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2920
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2925
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP, 0, -1, 0)
		}
	case 1287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2930
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2935
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME, 0, -1, 0)
		}
	case 1289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2940
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2945
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP, 0, -1, 0)
		}
	case 1291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2950
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2955
		{
			// makeSQLValueFunction(SVFOP_CURRENT_ROLE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_ROLE, 0, -1, 0)
		}
	case 1293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2960
		{
			// makeSQLValueFunction(SVFOP_CURRENT_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_USER, 0, -1, 0)
		}
	case 1294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2965
		{
			// makeSQLValueFunction(SVFOP_SESSION_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_SESSION_USER, 0, -1, 0)
		}
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2970
		{
			// SystemFuncName("system_user")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("system_user"))
			funcCall := ast.NewFuncCall(funcName, nil, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2978
		{
			// makeSQLValueFunction(SVFOP_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_USER, 0, -1, 0)
		}
	case 1297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2983
		{
			// makeSQLValueFunction(SVFOP_CURRENT_CATALOG, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_CATALOG, 0, -1, 0)
		}
	case 1298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2988
		{
			// makeSQLValueFunction(SVFOP_CURRENT_SCHEMA, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_SCHEMA, 0, -1, 0)
		}
	case 1299:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2993
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[3].node, yyDollar[5].typnam, 0)
		}
	case 1300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2997
		{
			// SystemFuncName("extract")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("extract"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3005
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1302:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3013
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			args := ast.NewNodeList(yyDollar[3].node)
			args.Items = append(args.Items, ast.NewA_Const(ast.NewString(yyDollar[5].str), -1))
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1303:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3023
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1304:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3031
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3039
		{
			// SystemFuncName("position")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("position"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3047
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3055
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1308:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3063
		{
			// SystemFuncName("treat")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), llast(yyDollar[5].typnam.Names))
			args := ast.NewNodeList(yyDollar[3].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1309:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3072
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1310:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3080
		{
			// SystemFuncName("ltrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("ltrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1311:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3088
		{
			// SystemFuncName("rtrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("rtrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3096
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1313:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3104
		{
			// makeSimpleA_Expr(AEXPR_NULLIF, "=", $3, $5, @1)
			operName := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NULLIF, operName, yyDollar[3].node, yyDollar[5].node, 0)
		}
	case 1314:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3110
		{
			// CoalesceExpr *c = makeNode(CoalesceExpr); c->args = $3; c->location = @1
			yyVAL.node = ast.NewCoalesceExpr(0, yyDollar[3].list)
		}
	case 1315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3115
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_GREATEST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_GREATEST, yyDollar[3].list, 0)
		}
	case 1316:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3120
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_LEAST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_LEAST, yyDollar[3].list, 0)
		}
	case 1317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3125
		{
			// makeXmlExpr(IS_XMLCONCAT, NULL, NIL, $3, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLCONCAT, "", nil, nil, yyDollar[3].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1318:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3130
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1319:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3135
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1320:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3140
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, $6, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, yyDollar[6].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1321:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3145
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, $8, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, yyDollar[8].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3150
		{
			// makeXmlExpr(IS_XMLFOREST, NULL, $3, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLFOREST, "", yyDollar[3].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1323:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3155
		{
			// makeXmlExpr(IS_XMLPARSE, NULL, NIL, list_make2($4, makeBoolAConst($5, -1)), @1)
			// x->xmloption = $3
			wsOption := ast.NewA_Const(ast.NewBoolean(yyDollar[5].bval), -1)
			args := ast.NewNodeList(yyDollar[4].node, wsOption)
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPARSE, "", nil, nil, args, xmlOption, false, 0, -1, 0)
		}
	case 1324:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3164
		{
			// SystemFuncName("xmlexists") - xmlexists(A PASSING [BY REF] B [BY REF]) is converted to xmlexists(A, B)
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("xmlexists"))
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[4].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1325:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3173
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1326:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3178
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, list_make1($6), @1)
			args := ast.NewNodeList(yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1327:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3184
		{
			// makeXmlExpr(IS_XMLROOT, NULL, NIL, list_make3(...), @1)
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[5].node, yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLROOT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1328:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3190
		{
			/* Support for legacy (non-standard) json_object() */
			funcName := ast.NewNodeList(ast.NewString("json_object"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1329:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3201
		{
			n := ast.NewJsonObjectConstructor(yyDollar[3].list, yyDollar[4].bval, yyDollar[5].bval)
			if yyDollar[6].node != nil {
				n.Output = yyDollar[6].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1330:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3209
		{
			n := ast.NewJsonObjectConstructor(nil, false, false)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1331:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3221
		{
			n := ast.NewJsonArrayConstructor(yyDollar[3].list, yyDollar[4].bval)
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1332:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3233
		{
			n := ast.NewJsonArrayQueryConstructor(yyDollar[3].stmt, true) /* XXX: absent_on_null = true */
			if yyDollar[4].node != nil {
				n.Format = yyDollar[4].node.(*ast.JsonFormat)
			}
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3246
		{
			n := ast.NewJsonArrayConstructor(nil, true)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1334:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3254
		{
			n := ast.NewJsonParseExpr(yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[4].bval)
			n.Output = nil
			yyVAL.node = n
		}
	case 1335:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3260
		{
			n := ast.NewJsonScalarExpr(yyDollar[3].node.(ast.Expr))
			n.Output = nil
			yyVAL.node = n
		}
	case 1336:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3266
		{
			n := ast.NewJsonSerializeExpr(yyDollar[3].node.(*ast.JsonValueExpr))
			if yyDollar[4].node != nil {
				n.Output = yyDollar[4].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3274
		{
			m := ast.NewMergeSupportFunc(ast.TEXTOID, ast.InvalidOid, 0)
			yyVAL.node = m
		}
	case 1338:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:3285
		{
			n := ast.NewJsonFuncExpr(ast.JSON_QUERY_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			n.Wrapper = ast.JsonWrapper(yyDollar[8].ival)
			n.Quotes = ast.JsonQuotes(yyDollar[9].ival)
			if yyDollar[10].node != nil {
				behaviors := yyDollar[10].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1339:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3310
		{
			n := ast.NewJsonFuncExpr(ast.JSON_EXISTS_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			n.Output = nil
			if yyDollar[7].node != nil {
				n.OnError = yyDollar[7].node.(*ast.JsonBehavior)
			}
			yyVAL.node = n
		}
	case 1340:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3326
		{
			n := ast.NewJsonFuncExpr(ast.JSON_VALUE_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			if yyDollar[8].node != nil {
				behaviors := yyDollar[8].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1341:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3346
		{
			// XmlSerialize node - n->xmloption = $3; n->expr = $4; n->typeName = $6; n->indent = $7;
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlSerialize(xmlOption, yyDollar[4].node, yyDollar[6].typnam, yyDollar[7].bval, 0)
		}
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3356
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3360
		{
			yyVAL.list = nil
		}
	case 1344:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3367
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1345:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3371
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3375
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node)
		}
	case 1347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3379
		{
			sysTypeName := &ast.TypeName{
				Names:   ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("int4")),
				Typemod: -1,
			}
			tc := ast.NewTypeCast(yyDollar[3].node, sysTypeName, -1)
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, ast.NewInteger(1), tc)
		}
	case 1348:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3388
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3395
		{
			yyDollar[3].list.Append(yyDollar[1].node)
			yyVAL.list = yyDollar[3].list
		}
	case 1350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3400
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3404
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3411
		{
			// list_make2(makeStringConst($1, @1), $3)
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str), yyDollar[3].node)
		}
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3421
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3422
		{
			yyVAL.str = "year"
		}
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3423
		{
			yyVAL.str = "month"
		}
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3424
		{
			yyVAL.str = "day"
		}
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3425
		{
			yyVAL.str = "hour"
		}
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3426
		{
			yyVAL.str = "minute"
		}
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3427
		{
			yyVAL.str = "second"
		}
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3428
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1361:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3433
		{
			/* overlay(A PLACING B FROM C FOR D) is converted to overlay(A, B, C, D) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 1362:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3438
		{
			/* overlay(A PLACING B FROM C) is converted to overlay(A, B, C) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3446
		{
			yyVAL.list = ast.NewNodeList(yyDollar[3].node, yyDollar[1].node)
		}
	case 1364:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3449
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3454
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3458
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3466
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3470
		{
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3475
		{
			yyVAL.bval = true
		}
	case 1370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3476
		{
			yyVAL.bval = false
		}
	case 1371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3477
		{
			yyVAL.bval = false
		}
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3480
		{
			yyVAL.bval = true
		}
	case 1373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3481
		{
			yyVAL.bval = false
		}
	case 1374:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3482
		{
			yyVAL.bval = false
		}
	case 1375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3487
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3491
		{
			yyVAL.node = ast.NewA_Const(ast.NewNull(), 0)
		}
	case 1377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3498
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_YES)), 0)
		}
	case 1378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3502
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO)), 0)
		}
	case 1379:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3506
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO_VALUE)), 0)
		}
	case 1380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3510
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_OMITTED)), 0)
		}
	case 1381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3517
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3518
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3519
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3523
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3527
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3538
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1387:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3542
		{
			// Special case for aggregates like COUNT(*) - set AggStar to true
			funcCall := ast.NewFuncCall(yyDollar[1].list, nil, 0)
			funcCall.AggStar = true
			yyVAL.node = funcCall
		}
	case 1388:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3549
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1389:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3555
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1390:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3561
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1391:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3569
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1392:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3575
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3583
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3587
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3594
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3598
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3602
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1398:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3609
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3614
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3615
		{
			yyVAL.node = nil
		}
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3619
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3621
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3629
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3635
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3636
		{
			yyVAL.node = nil
		}
	case 1406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3641
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3645
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3649
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3654
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3656
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3663
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3664
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1413:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3666
		{
			nodeList := yyDollar[2].list
			nodeList.Append(yyDollar[4].node)
			yyVAL.list = nodeList
		}
	case 1414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3673
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3674
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1416:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3678
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3684
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3685
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3686
		{
			yyVAL.ival = int(ast.ALL_SUBLINK)
		}
	case 1420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3691
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3695
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3699
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~"))
		}
	case 1423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3703
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~"))
		}
	case 1424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3707
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~*"))
		}
	case 1425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3711
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~*"))
		}
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3717
		{
			yyVAL.str = "NFC"
		}
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3718
		{
			yyVAL.str = "NFD"
		}
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3719
		{
			yyVAL.str = "NFKC"
		}
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3720
		{
			yyVAL.str = "NFKD"
		}
	case 1430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3724
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3725
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3726
		{
			yyVAL.ival = int(ast.JS_TYPE_ARRAY)
		}
	case 1433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3727
		{
			yyVAL.ival = int(ast.JS_TYPE_OBJECT)
		}
	case 1434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3728
		{
			yyVAL.ival = int(ast.JS_TYPE_SCALAR)
		}
	case 1435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3732
		{
			yyVAL.bval = true
		}
	case 1436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3733
		{
			yyVAL.bval = true
		}
	case 1437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3734
		{
			yyVAL.bval = false
		}
	case 1438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3735
		{
			yyVAL.bval = false
		}
	case 1439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3736
		{
			yyVAL.bval = false
		}
	case 1440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3741
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3745
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3754
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.ArrayBounds = yyDollar[2].list
		}
	case 1443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3759
		{
			yyVAL.typnam = yyDollar[2].typnam
			yyVAL.typnam.ArrayBounds = yyDollar[3].list
			yyVAL.typnam.Setof = true
		}
	case 1444:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3765
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(yyDollar[4].ival))
		}
	case 1445:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3770
		{
			yyVAL.typnam = yyDollar[2].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(yyDollar[5].ival))
			yyVAL.typnam.Setof = true
		}
	case 1446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3776
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(-1))
		}
	case 1447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3781
		{
			yyVAL.typnam = yyDollar[2].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(-1))
			yyVAL.typnam.Setof = true
		}
	case 1448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3790
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList()
			} else {
				yyVAL.list = yyDollar[1].list
			}
			yyVAL.list.Append(ast.NewInteger(-1))
		}
	case 1449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3799
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList()
			} else {
				yyVAL.list = yyDollar[1].list
			}
			yyVAL.list.Append(ast.NewInteger(yyDollar[3].ival))
		}
	case 1450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3808
		{
			yyVAL.list = nil
		}
	case 1451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3813
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3814
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3815
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3816
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3817
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3819
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3824
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.Typmods = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_FULL_RANGE), ast.NewInteger(yyDollar[3].ival))
		}
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3828
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3831
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3832
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3833
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3836
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3839
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3842
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3846
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3850
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3857
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3861
		{
			yyVAL.list = nil
		}
	case 1469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3867
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3873
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3884
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3888
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3892
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3896
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3900
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3904
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3908
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3912
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3917
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3922
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3927
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3933
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3937
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3943
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3947
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3953
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3957
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for BitWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3965
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3969
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for CharacterWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3977
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3985
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3993
		{
			yyVAL.str = "varchar"
		}
	case 1493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3997
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4005
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4013
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1496:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4023
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4034
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1498:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4048
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			tn := makeTypeNameFromString(typeName)
			tn.Typmods = yyDollar[4].list
			yyVAL.typnam = tn
		}
	case 1499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4062
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1500:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4074
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			tn := makeTypeNameFromString(typeName)
			tn.Typmods = ast.NewNodeList(ast.NewInteger(yyDollar[3].ival))
			yyVAL.typnam = tn
		}
	case 1501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4086
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1502:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4096
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			tn := makeTypeNameFromString(typeName)
			tn.Typmods = ast.NewNodeList(ast.NewInteger(yyDollar[3].ival))
			yyVAL.typnam = tn
		}
	case 1503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4108
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4120
		{
			yyVAL.typnam = makeTypeNameFromString("json")
		}
	case 1505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4125
		{
			yyVAL.ival = 1
		}
	case 1506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4126
		{
			yyVAL.ival = 0
		}
	case 1507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4127
		{
			yyVAL.ival = 0
		}
	case 1508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4130
		{
			yyVAL.ival = 1
		}
	case 1509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4131
		{
			yyVAL.ival = 0
		}
	case 1510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4135
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4145
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4152
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4156
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4163
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4167
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4172
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4173
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4176
		{
			yyVAL.str = "+"
		}
	case 1519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4177
		{
			yyVAL.str = "-"
		}
	case 1520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4178
		{
			yyVAL.str = "*"
		}
	case 1521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4179
		{
			yyVAL.str = "/"
		}
	case 1522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4180
		{
			yyVAL.str = "%"
		}
	case 1523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4181
		{
			yyVAL.str = "^"
		}
	case 1524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4182
		{
			yyVAL.str = "<"
		}
	case 1525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4183
		{
			yyVAL.str = ">"
		}
	case 1526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4184
		{
			yyVAL.str = "="
		}
	case 1527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4185
		{
			yyVAL.str = "<="
		}
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4186
		{
			yyVAL.str = ">="
		}
	case 1529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4187
		{
			yyVAL.str = "<>"
		}
	case 1530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4191
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4195
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4204
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4205
		{
			yyVAL.list = nil
		}
	case 1534:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4210
		{
			// WITHIN GROUP (ORDER BY ...) for ordered-set aggregates
			yyVAL.list = yyDollar[4].list
		}
	case 1535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4214
		{
			yyVAL.list = nil
		}
	case 1536:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4219
		{
			// FILTER (WHERE condition) for aggregate filtering
			yyVAL.node = yyDollar[4].node
		}
	case 1537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4223
		{
			yyVAL.node = nil
		}
	case 1538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4227
		{
			yyVAL.ival = 0
		}
	case 1539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4228
		{
			yyVAL.ival = 0
		}
	case 1540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4232
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4237
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4252
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4253
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4257
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4258
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4267
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4268
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4277
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4279
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			// Use NodeList directly for SortClause
			selectStmt.SortClause = yyDollar[2].list
			yyVAL.stmt = selectStmt
		}
	case 1550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4286
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			selectStmt.LockingClause = yyDollar[3].list // Set the locking clause
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1551:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4298
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			if yyDollar[3].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[3].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[3].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[3].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4310
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4316
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			yyVAL.stmt = selectStmt
		}
	case 1554:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4323
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			if yyDollar[5].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[5].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[5].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[5].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1555:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4336
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[5].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4355
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4356
		{
			yyVAL.list = nil
		}
	case 1558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4360
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4361
		{
			yyVAL.list = nil
		}
	case 1560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4366
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4370
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4378
		{
			lockingClause := &ast.LockingClause{
				BaseNode:   ast.BaseNode{Tag: ast.T_LockingClause},
				Strength:   ast.LockClauseStrength(yyDollar[1].ival),
				LockedRels: yyDollar[2].list, // Store as *NodeList directly
				WaitPolicy: ast.LockWaitPolicy(yyDollar[3].ival),
			}
			yyVAL.node = lockingClause
		}
	case 1563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4390
		{
			yyVAL.ival = int(ast.LCS_FORUPDATE)
		}
	case 1564:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4391
		{
			yyVAL.ival = int(ast.LCS_FORNOKEYUPDATE)
		}
	case 1565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4392
		{
			yyVAL.ival = int(ast.LCS_FORSHARE)
		}
	case 1566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4393
		{
			yyVAL.ival = int(ast.LCS_FORKEYSHARE)
		}
	case 1567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4397
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4398
		{
			yyVAL.list = nil
		}
	case 1569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4403
		{
			yyVAL.ival = int(ast.LockWaitError)
		}
	case 1570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4404
		{
			yyVAL.ival = int(ast.LockWaitSkip)
		}
	case 1571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4405
		{
			yyVAL.ival = int(ast.LockWaitBlock)
		}
	case 1572:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4416
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1573:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4435
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4453
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4463
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4468
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_UNION, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4473
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_INTERSECT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1578:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4478
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_EXCEPT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4489
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4490
		{
			yyVAL.list = nil
		}
	case 1581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4494
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4495
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4500
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4504
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4509
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4514
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4525
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4526
		{
			yyVAL.list = nil
		}
	case 1589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4530
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4531
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4540
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4548
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			rangeTableSample := yyDollar[3].node.(*ast.RangeTableSample)
			rangeTableSample.Relation = rangeVar
			yyVAL.node = rangeTableSample
		}
	case 1593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4558
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4569
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4580
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4584
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4590
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			funcAliasList := yyDollar[2].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4608
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			funcAliasList := yyDollar[3].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4627
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4635
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4644
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4652
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4664
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4670
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4677
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4683
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1607:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4689
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4699
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4703
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4709
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4726
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1612:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4730
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1613:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4739
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1614:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4765
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1615:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4791
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1616:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4799
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4809
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4810
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4811
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4812
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4817
		{
			yyVAL.ival = 1
		}
	case 1622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4818
		{
			yyVAL.ival = 0
		}
	case 1623:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4828
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4839
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4850
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4854
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4858
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4864
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4865
		{
			yyVAL.with = nil
		}
	case 1630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4870
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4874
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1632:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4882
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4910
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4911
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4912
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1636:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4917
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1637:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4923
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4929
		{
			yyVAL.node = nil
		}
	case 1639:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4936
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1640:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4945
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4953
		{
			yyVAL.node = nil
		}
	case 1642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4964
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = ast.NewNodeList(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1643:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4972
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists.Append(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4986
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4987
		{
			yyVAL.node = nil
		}
	case 1646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4995
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1647:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4997
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1648:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5001
		{
			yyVAL.node = nil
		}
	case 1649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5005
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5013
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5014
		{
			yyVAL.alias = nil
		}
	case 1652:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5019
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5024
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1654:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5028
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5033
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5044
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].alias, nil)
		}
	case 1657:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5048
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[3].list)
		}
	case 1658:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5052
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[4].list)
		}
	case 1659:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5057
		{
			alias := ast.NewAlias(yyDollar[1].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[3].list)
		}
	case 1660:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5062
		{
			yyVAL.list = ast.NewNodeList(nil, nil)
		}
	case 1661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5070
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1662:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5074
		{
			yyVAL.alias = nil
		}
	case 1663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5082
		{
			yyVAL.ival = 1
		}
	case 1664:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5083
		{
			yyVAL.ival = 0
		}
	case 1665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5087
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1666:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5088
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5092
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5093
		{
			yyVAL.list = nil
		}
	case 1669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5103
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].node.(*ast.RangeVar), nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5106
		{
			yyVAL.into = nil
		}
	case 1671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5117
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1672:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5126
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5136
		{
			yyVAL.ival = 1
		}
	case 1674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5137
		{
			yyVAL.ival = 0
		}
	case 1675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5143
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5147
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5154
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1678:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5163
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1679:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5164
		{
			yyVAL.list = nil
		}
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5174
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5178
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5190
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5203
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1684:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5204
		{
			yyVAL.list = nil
		}
	case 1685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5210
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5214
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5223
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5234
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5239
		{
			yyVAL.node = nil
		}
	case 1690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5244
		{
			yyVAL.str = "BY REF"
		}
	case 1691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5245
		{
			yyVAL.str = "BY VALUE"
		}
	case 1692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5251
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5255
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5259
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1695:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5263
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5271
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5275
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5283
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5288
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1700:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5297
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1701:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:5305
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5316
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5320
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5329
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5334
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5339
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5349
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5353
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5362
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5366
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5370
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5374
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5378
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1714:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:5391
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5415
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5426
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5427
		{
			yyVAL.node = nil
		}
	case 1718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5432
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1719:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5433
		{
			yyVAL.node = nil
		}
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5437
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5438
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5443
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5449
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1724:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5450
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5456
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5460
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5472
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1728:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5476
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5483
		{
			yyVAL.bval = false
		}
	case 1730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5484
		{
			yyVAL.bval = true
		}
	case 1731:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5485
		{
			yyVAL.bval = false
		}
	case 1732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5489
		{
			yyVAL.bval = false
		}
	case 1733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5490
		{
			yyVAL.bval = true
		}
	case 1734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5491
		{
			yyVAL.bval = true
		}
	case 1735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5496
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1736:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5497
		{
			yyVAL.list = nil
		}
	case 1737:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5508
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)

			yyVAL.node = ast.NewJsonObjectAgg(constructor, yyDollar[3].node.(*ast.JsonKeyValue), yyDollar[4].bval, yyDollar[5].bval)
		}
	case 1738:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5523
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)
			constructor.AggOrder = yyDollar[4].list
			yyVAL.node = ast.NewJsonArrayAgg(constructor, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].bval)
		}
	case 1739:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5536
		{
			var jsonFormat *ast.JsonFormat
			if yyDollar[3].node != nil {
				jsonFormat = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonOutput(yyDollar[2].typnam, ast.NewJsonReturning(jsonFormat, 0, 0))
		}
	case 1740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5543
		{
			yyVAL.node = nil
		}
	case 1741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5549
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5557
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5568
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5569
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5570
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5571
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5572
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1748:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5573
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5574
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5575
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5580
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1752:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5584
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1753:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5588
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1754:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5592
		{
			yyVAL.node = nil
		}
	case 1755:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5597
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1756:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5598
		{
			yyVAL.node = nil
		}
	case 1757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5603
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5604
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5605
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5606
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1761:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5607
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1762:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5608
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5609
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5610
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1765:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5611
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1766:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5616
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5617
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1768:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5618
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1769:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5619
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1770:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5620
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1771:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5626
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5646
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5656
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1774:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5657
		{
			yyVAL.node = nil
		}
	case 1775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5662
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1776:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5663
		{
			yyVAL.node = nil
		}
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5669
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1778:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5673
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1779:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5682
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1780:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5691
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1781:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5705
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1782:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5719
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1783:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5730
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1784:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5739
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5750
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1786:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5751
		{
			yyVAL.node = nil
		}
	case 1787:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5767
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5779
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1789:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5783
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5792
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1791:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5798
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1792:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5805
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1793:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5812
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1794:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5820
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5829
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5830
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5835
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1798:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5839
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1799:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5847
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1800:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5859
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5872
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1802:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5876
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1803:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5887
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1804:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5893
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5913
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5919
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1807:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5920
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1808:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5930
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5942
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1810:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5946
		{
			yyVAL.list = nil
		}
	case 1811:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5961
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5978
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1813:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5982
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1814:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5993
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1815:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:6017
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6053
		{
			yyVAL.ival = 1
		}
	case 1817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6054
		{
			yyVAL.ival = 0
		}
	case 1818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6058
		{
			yyVAL.ival = 1
		}
	case 1819:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6059
		{
			yyVAL.ival = 0
		}
	case 1820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6063
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6064
		{
			yyVAL.str = ""
		}
	case 1822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6065
		{
			yyVAL.str = ""
		}
	case 1823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6070
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1824:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6073
		{
			yyVAL.node = nil
		}
	case 1825:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6078
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1826:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6081
		{
			yyVAL.node = nil
		}
	case 1827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6085
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1828:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6086
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1829:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6091
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1830:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6099
		{
			yyVAL.list = nil
		}
	case 1831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6106
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6110
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1833:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6114
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1834:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6118
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6122
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6126
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1837:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6130
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1838:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6134
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1839:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6138
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1840:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6142
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1841:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6146
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1842:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6150
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1843:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6154
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1844:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6158
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1845:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6162
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6170
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1847:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6174
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1848:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6181
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6187
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6188
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6189
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6190
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1853:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6191
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1854:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6192
		{
			yyVAL.node = nil
		}
	case 1855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6197
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1856:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6201
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6207
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6211
		{
			yyVAL.str = "true"
		}
	case 1859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6212
		{
			yyVAL.str = "false"
		}
	case 1860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6213
		{
			yyVAL.str = "on"
		}
	case 1861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6214
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6218
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1863:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6219
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6221
		{
			f := ast.NewFloat(yyDollar[2].str)
			doNegateFloat(f)
			yyVAL.node = f
		}
	case 1865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6226
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6230
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6231
		{
			yyVAL.node = nil
		}
	case 1868:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6235
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1869:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6236
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6237
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1871:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6238
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1872:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6239
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6240
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6241
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6242
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6246
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6247
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6248
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6252
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6253
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6254
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6255
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6256
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6261
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1885:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6266
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6273
		{
			yyVAL.bval = true
		}
	case 1887:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6274
		{
			yyVAL.bval = false
		}
	case 1888:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6278
		{
			yyVAL.ival = 1
		}
	case 1889:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6279
		{
			yyVAL.ival = 0
		}
	case 1892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6295
		{
			yyVAL.node = nil
		}
	case 1893:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6297
		{
			yyVAL.node = nil
		}
	case 1894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6305
		{
			yyVAL.ival = 1
		}
	case 1895:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6306
		{
			yyVAL.ival = 0
		}
	case 1896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6310
		{
			yyVAL.ival = 1
		}
	case 1897:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6311
		{
			yyVAL.ival = 0
		}
	case 1898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6315
		{
			yyVAL.ival = 1
		}
	case 1899:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6316
		{
			yyVAL.ival = 0
		}
	case 1900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6320
		{
			yyVAL.ival = 1
		}
	case 1901:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6321
		{
			yyVAL.ival = 0
		}
	case 1902:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6330
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1903:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6336
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1904:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6342
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1905:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6348
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1906:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6354
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1907:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6362
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1908:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6363
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1909:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6367
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1910:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6368
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1911:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6372
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1912:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6373
		{
			yyVAL.node = nil
		}
	case 1913:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6378
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6393
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1915:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6402
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1916:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6409
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1917:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6416
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1918:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6429
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1919:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6442
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1920:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6451
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1921:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6466
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1922:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6476
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1923:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6484
		{
			yyVAL.onconflict = nil
		}
	case 1924:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6495
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1925:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6504
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1926:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6511
		{
			yyVAL.node = nil
		}
	case 1927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6522
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1928:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6526
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6533
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1930:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6537
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1931:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6544
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1932:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6549
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1933:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6554
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1934:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6562
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1935:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6573
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1936:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6587
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1937:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6588
		{
			yyVAL.list = nil
		}
	case 1938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6592
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6593
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1940:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6594
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1941:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6598
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1942:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6599
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1943:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6600
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1944:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6605
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1945:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6609
		{
			yyVAL.list = nil
		}
	case 1946:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6630
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1947:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:6646
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1948:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:6663
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1949:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:6679
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1950:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6696
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1951:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:6713
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6731
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6732
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1954:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6733
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1955:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6734
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1956:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6735
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1957:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6736
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6737
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1959:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6738
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6742
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1961:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6743
		{
			yyVAL.list = nil
		}
	case 1962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6748
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1963:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6753
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6760
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6761
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6762
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1967:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6767
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1968:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6774
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1969:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6778
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1970:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6782
		{
			yyVAL.ival = 0
		}
	case 1971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6788
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6789
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6790
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6791
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6792
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6793
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6794
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6795
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6796
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6797
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1981:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6802
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1982:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6803
		{
			yyVAL.str = "default"
		}
	case 1983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6807
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1984:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6808
		{
			yyVAL.str = ""
		}
	case 1985:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6812
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1986:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6813
		{
			yyVAL.str = "default"
		}
	case 1987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6817
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1988:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6818
		{
			yyVAL.str = ""
		}
	case 1989:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6823
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1990:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6824
		{
			yyVAL.list = nil
		}
	case 1991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6829
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1992:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6835
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6842
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6843
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1995:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6848
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 1996:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6854
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 1997:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6865
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 1998:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6894
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 1999:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6903
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 2000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6913
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 2001:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6922
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 2002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6929
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2003:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6933
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 2004:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6941
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2005:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6942
		{
			yyVAL.list = nil
		}
	case 2006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6947
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2007:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6951
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2008:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6959
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 2009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6965
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6970
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2011:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6975
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			colDef.Constraints = yyDollar[6].list
			yyVAL.node = colDef
		}
	case 2012:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6987
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2013:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6992
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2014:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6999
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 2015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7004
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7005
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2017:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7007
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 2018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7020
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 2019:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7025
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 2020:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7030
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 2021:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7035
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 2022:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7043
		{
			yyVAL.bval = true
		}
	case 2023:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7044
		{
			yyVAL.bval = false
		}
	case 2024:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7045
		{
			yyVAL.bval = true
		}
	case 2025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7049
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 2026:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7050
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 2027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7055
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2028:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7057
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7062
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 2030:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7066
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 2031:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7070
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 2032:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7080
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 2033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7086
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2034:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7087
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2035:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7092
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 2036:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7096
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 2037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7100
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 2038:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7104
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 2039:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7108
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 2040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7112
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 2041:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7116
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 2042:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7120
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 2043:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7124
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 2044:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7128
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 2045:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7132
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 2046:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7136
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 2047:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7140
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 2048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7144
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 2049:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7148
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 2050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7152
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 2051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7158
		{
		}
	case 2052:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7159
		{
		}
	case 2053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7163
		{
		}
	case 2054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7164
		{
		}
	case 2055:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7165
		{
		}
	case 2056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7170
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 2057:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7177
		{
			yyVAL.bval = false
		}
	case 2058:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7181
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2059:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7182
		{
			yyVAL.list = nil
		}
	case 2060:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7187
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 2061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7191
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 2062:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7195
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 2063:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7204
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 2064:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7210
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 2065:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7216
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 2066:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7222
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 2067:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7239
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 2068:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7246
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 2069:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7256
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 2070:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7261
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2071:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7266
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 2072:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7274
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2073:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7285
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 2074:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7296
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2075:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7306
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 2076:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7317
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 2077:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7338
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 2078:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7352
		{
			yyVAL.bval = true
		}
	case 2079:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7353
		{
			yyVAL.bval = false
		}
	case 2080:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7359
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2081:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7365
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2082:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7373
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 2083:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7378
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 2084:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7386
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2085:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7390
		{
			yyVAL.list = nil
		}
	case 2086:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7397
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 2087:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7401
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 2088:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7405
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2089:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7409
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2090:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7416
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2091:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7426
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2092:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7436
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 2093:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7443
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2094:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7450
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2095:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7465
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 2096:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7478
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 2097:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7485
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2098:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7492
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7499
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7506
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7513
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2102:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7522
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2103:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7523
		{
			yyVAL.list = nil
		}
	case 2104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7527
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 2105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7528
		{
			yyVAL.partspec = nil
		}
	case 2106:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7533
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 2107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7541
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7546
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7554
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7561
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2111:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7568
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 2112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7577
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2113:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7578
		{
			yyVAL.str = ""
		}
	case 2114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7582
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 2115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7583
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 2116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7584
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 2117:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7585
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 2118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7589
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7590
		{
			yyVAL.str = ""
		}
	case 2120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7594
		{
			yyVAL.str = yyDollar[4].str
		}
	case 2121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7595
		{
			yyVAL.str = ""
		}
	case 2122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7599
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2123:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:7612
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 2124:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:7627
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 2125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7643
		{
			yyVAL.bval = true
		}
	case 2126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7644
		{
			yyVAL.bval = false
		}
	case 2127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7648
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7649
		{
			yyVAL.str = "btree"
		}
	case 2129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7653
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7654
		{
			yyVAL.list = nil
		}
	case 2131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7659
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7664
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7672
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7673
		{
			yyVAL.list = nil
		}
	case 2135:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7685
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2136:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7691
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7698
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2138:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7704
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7711
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7720
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 2141:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7726
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7733
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 2143:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7739
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2144:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7746
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 2145:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7752
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2146:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7759
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2147:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7765
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7772
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2149:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7781
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2150:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7791
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2151:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7798
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2152:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7806
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2153:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7813
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2154:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7821
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 2155:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:7828
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 2156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7839
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7844
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7852
		{
			yyVAL.bval = true
		}
	case 2159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7853
		{
			yyVAL.bval = false
		}
	case 2160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7858
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].rolespec)
		}
	case 2161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7863
		{
			yyDollar[1].list.Append(yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 2162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7871
		{
			roleSpec := yyDollar[1].rolespec

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 2163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7902
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.rolespec = roleSpec
		}
	case 2164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7925
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 2165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7932
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 2166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7939
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 2167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7950
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2168:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7957
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7964
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2170:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7971
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2171:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7978
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 2172:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7983
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 2173:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7988
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 2174:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7993
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 2175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7998
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 2176:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8003
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2177:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8010
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 2178:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8015
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 2179:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8022
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2180:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8027
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8032
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2182:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8037
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2183:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8042
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8052
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 2185:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8057
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2186:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8064
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2187:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8071
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2188:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8079
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2189:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8090
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 2190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8100
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 2191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8105
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 2192:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8110
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8121
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 2194:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8126
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2195:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8134
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8142
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 2197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8147
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 2198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8152
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 2199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8157
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 2200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8162
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 2201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8167
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 2202:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8172
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 2203:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8177
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 2204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8182
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 2205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8187
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 2206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8192
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 2207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8197
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 2208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8202
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 2209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8207
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 2210:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8212
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 2211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8217
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 2212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8222
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 2213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8227
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 2214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8232
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 2215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8237
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 2216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8243
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 2217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8248
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].rolespec
			yyVAL.node = cmd
		}
	case 2218:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8255
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 2219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8260
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 2220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8265
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 2221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8270
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 2222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8275
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 2223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8280
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 2224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8285
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 2225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8290
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 2226:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8295
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 2227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8299
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 2228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8307
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8315
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8322
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8333
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8342
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8343
		{
			yyVAL.node = nil
		}
	case 2234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8347
		{
		}
	case 2235:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8348
		{
		}
	case 2236:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8359
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8372
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2238:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8385
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8398
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2240:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8411
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2241:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8426
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8441
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2243:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8454
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8467
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2245:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8480
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8493
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2247:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8506
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2248:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8520
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_CAST
			n.Objects = ast.NewNodeList(ast.NewNodeList(yyDollar[5].typnam, yyDollar[7].typnam))
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = (yyDollar[3].ival == 1)
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2249:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8534
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			// Create a new list with the USING name prepended to any_name
			objects := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				objects.Append(item)
			}
			n.Objects = ast.NewNodeList(objects)
			n.RemoveType = ast.OBJECT_OPCLASS
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2250:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8552
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			// Create a new list with the USING name prepended to any_name
			objects := ast.NewNodeList(ast.NewString(yyDollar[8].str))
			for _, item := range yyDollar[6].list.Items {
				objects.Append(item)
			}
			n.Objects = ast.NewNodeList(objects)
			n.RemoveType = ast.OBJECT_OPCLASS
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2251:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8571
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			// Create a new list with the USING name prepended to any_name
			objects := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				objects.Append(item)
			}
			n.Objects = ast.NewNodeList(objects)
			n.RemoveType = ast.OBJECT_OPFAMILY
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2252:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8589
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			// Create a new list with the USING name prepended to any_name
			objects := ast.NewNodeList(ast.NewString(yyDollar[8].str))
			for _, item := range yyDollar[6].list.Items {
				objects.Append(item)
			}
			n.Objects = ast.NewNodeList(objects)
			n.RemoveType = ast.OBJECT_OPFAMILY
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2253:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8608
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TRANSFORM
			n.Objects = ast.NewNodeList(ast.NewNodeList(yyDollar[5].typnam, ast.NewString(yyDollar[7].str)))
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = (yyDollar[3].ival == 1)
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8622
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_SUBSCRIPTION
			n.Objects = ast.NewNodeList(ast.NewNodeList(ast.NewString(yyDollar[3].str)))
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2255:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8635
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_SUBSCRIPTION
			n.Objects = ast.NewNodeList(ast.NewNodeList(ast.NewString(yyDollar[5].str)))
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8651
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8657
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 2258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8663
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8672
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 2260:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8676
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 2261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8679
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8683
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8685
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 2264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8689
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 2265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8693
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 2266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8700
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 2267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8704
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 2268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8710
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8711
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8715
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 2271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8724
		{
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[2].stmt, nil)
		}
	case 2272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8728
		{
			options := ast.NewNodeList(ast.NewDefElem("analyze", nil))
			if yyDollar[3].ival != 0 {
				options.Append(ast.NewDefElem("verbose", nil))
			}
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[4].stmt, options)
		}
	case 2273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8736
		{
			options := ast.NewNodeList(ast.NewDefElem("verbose", nil))
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[3].stmt, options)
		}
	case 2274:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8741
		{
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[5].stmt, yyDollar[3].list)
		}
	case 2275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8748
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8752
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8760
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 2278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8766
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8767
		{
			yyVAL.str = "analyze"
		}
	case 2280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8768
		{
			yyVAL.str = "format"
		}
	case 2281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8772
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8773
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2283:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8774
		{
			yyVAL.node = nil
		}
	case 2284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8778
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8779
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8780
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8781
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8782
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8783
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8784
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2291:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8793
		{
			var optionsList *ast.NodeList
			if yyDollar[2].ival != 0 || yyDollar[3].ival != 0 || yyDollar[4].ival != 0 || yyDollar[5].ival != 0 {
				optionsList = ast.NewNodeList()
				if yyDollar[2].ival != 0 {
					optionsList.Append(ast.NewDefElem("full", ast.NewBoolean(true)))
				}
				if yyDollar[3].ival != 0 {
					optionsList.Append(ast.NewDefElem("freeze", ast.NewBoolean(true)))
				}
				if yyDollar[4].ival != 0 {
					optionsList.Append(ast.NewDefElem("verbose", ast.NewBoolean(true)))
				}
				if yyDollar[5].ival != 0 {
					optionsList.Append(ast.NewDefElem("analyze", ast.NewBoolean(true)))
				}
			}

			yyVAL.stmt = ast.NewVacuumStmt(optionsList, yyDollar[6].list)
		}
	case 2292:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8814
		{
			yyVAL.stmt = ast.NewVacuumStmt(yyDollar[3].list, yyDollar[5].list)
		}
	case 2293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8821
		{
			var optionsList *ast.NodeList
			if yyDollar[2].ival != 0 {
				optionsList = ast.NewNodeList(ast.NewDefElem("verbose", ast.NewBoolean(true)))
			}

			yyVAL.stmt = ast.NewAnalyzeStmt(optionsList, yyDollar[3].list)
		}
	case 2294:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8830
		{
			yyVAL.stmt = ast.NewAnalyzeStmt(yyDollar[3].list, yyDollar[5].list)
		}
	case 2295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8836
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8837
		{
			yyVAL.list = nil
		}
	case 2297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8842
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].vacrel)
		}
	case 2298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8846
		{
			yyDollar[1].list.Append(yyDollar[3].vacrel)
			yyVAL.list = yyDollar[1].list
		}
	case 2299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8854
		{
			yyVAL.vacrel = ast.NewVacuumRelation(yyDollar[1].rangevar, yyDollar[2].list)
		}
	case 2300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8860
		{
			yyVAL.str = "analyze"
		}
	case 2301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8861
		{
			yyVAL.str = "analyse"
		}
	case 2302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8870
		{
			yyVAL.stmt = ast.NewVariableShowStmt(yyDollar[2].str)
		}
	case 2303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8874
		{
			yyVAL.stmt = ast.NewVariableShowStmt("timezone")
		}
	case 2304:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8878
		{
			yyVAL.stmt = ast.NewVariableShowStmt("transaction_isolation")
		}
	case 2305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8882
		{
			yyVAL.stmt = ast.NewVariableShowStmt("session_authorization")
		}
	case 2306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8886
		{
			yyVAL.stmt = ast.NewVariableShowStmt("all")
		}
	case 2307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8897
		{
			yyVAL.stmt = ast.NewAlterSystemStmt(yyDollar[4].vsetstmt)
		}
	case 2308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8901
		{
			yyVAL.stmt = ast.NewAlterSystemStmt(yyDollar[4].vsetstmt)
		}
	case 2309:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8912
		{
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[5].rangevar, yyDollar[6].str, yyDollar[3].list)
		}
	case 2310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8916
		{
			yyVAL.stmt = ast.NewClusterStmt(nil, "", yyDollar[3].list)
		}
	case 2311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8920
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[3].rangevar, yyDollar[4].str, params)
		}
	case 2312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8929
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(nil, "", params)
		}
	case 2313:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8938
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[5].rangevar, yyDollar[3].str, params)
		}
	case 2314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8949
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8950
		{
			yyVAL.str = ""
		}
	case 2316:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8959
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.ReindexObjectType(yyDollar[3].ival), yyDollar[5].rangevar, "", params)
		}
	case 2317:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8972
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.REINDEX_OBJECT_SCHEMA, nil, yyDollar[5].str, params)
		}
	case 2318:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8985
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.ReindexObjectType(yyDollar[3].ival), nil, yyDollar[5].str, params)
		}
	case 2319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9000
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_INDEX)
		}
	case 2320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9001
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_TABLE)
		}
	case 2321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9005
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_SYSTEM)
		}
	case 2322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9006
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_DATABASE)
		}
	case 2323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9010
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9011
		{
			yyVAL.list = nil
		}
	case 2325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9020
		{
			yyVAL.stmt = ast.NewCheckPointStmt()
		}
	case 2326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9031
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_ALL)
		}
	case 2327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9035
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_TEMP)
		}
	case 2328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9039
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_TEMP)
		}
	case 2329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9043
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_PLANS)
		}
	case 2330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9047
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_SEQUENCES)
		}
	case 2331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9054
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 2332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9055
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 2333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9056
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 2334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9057
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 2335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9058
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 2336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9059
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 2337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9060
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 2338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9061
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 2339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9062
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 2340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9063
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 2341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9064
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 2342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9065
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 2343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9066
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 2344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9079
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9080
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9085
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9089
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9097
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode: ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:  yyDollar[1].list,
				Objargs:  yyDollar[2].list,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9109
		{
			yylex.Error("Use NONE to denote the missing argument of a unary operator.")
			return 1
		}
	case 2350:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9114
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, yyDollar[4].typnam)
		}
	case 2351:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9116
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[4].typnam)
		}
	case 2352:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9118
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, nil)
		}
	case 2353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9122
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9135
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 2355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9137
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 2356:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9141
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2357:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9152
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2358:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9163
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2359:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9174
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2360:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9185
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2361:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9196
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2362:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9208
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2363:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9219
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2364:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9230
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2365:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9241
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2366:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9252
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2367:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9269
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2368:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9286
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2369:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9298
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2370:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9310
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2371:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9321
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2372:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9332
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2373:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9343
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2374:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9354
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2375:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9365
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2376:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9376
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2377:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9387
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2378:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9398
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2379:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9409
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2380:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9420
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2381:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9431
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2382:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9442
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2383:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9453
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2384:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9464
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2385:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9475
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2386:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9486
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2387:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9497
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2388:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9508
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2389:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9521
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2390:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9534
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2391:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9547
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2392:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9560
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2393:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9573
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2394:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9586
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2395:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9598
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2396:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9610
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2397:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9623
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2398:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9636
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2399:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9648
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2400:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9660
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2401:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9671
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2402:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9682
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2403:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9693
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2404:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9704
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2405:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9715
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2406:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9726
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2407:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9737
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2408:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9748
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2409:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9759
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2410:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9770
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9796
		{
			yyVAL.ival = 0
		}
	case 2412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9798
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 2413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9812
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 2414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9813
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 2415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9814
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 2416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9815
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 2417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9816
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 2418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9817
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 2419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9821
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9826
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9831
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9839
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9843
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2424:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9847
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 2425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9851
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 2426:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9865
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 2427:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:9879
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 2428:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9895
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2429:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9910
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9925
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9926
		{
			yyVAL.list = nil
		}
	case 2432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9931
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9935
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9943
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9947
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9952
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9960
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9969
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9978
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9987
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9996
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10007
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10008
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10009
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10010
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10011
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10015
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10019
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10021
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				// TODO: Add %TYPE indicator
			}
		}
	case 2450:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10031
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				Setof: true,
			}
		}
	case 2451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10043
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2452:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10044
		{
			yyVAL.list = nil
		}
	case 2453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10049
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10055
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10063
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10067
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10071
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10075
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10079
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10086
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10092
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10102
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2463:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10108
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10116
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10120
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10132
		{
			yyVAL.node = nil
		}
	case 2467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10139
		{
			yyVAL.stmt = &ast.ReturnStmt{
				ReturnVal: yyDollar[2].node,
			}
		}
	case 2468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10148
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10158
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10164
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10165
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10170
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10174
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2474:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:10190
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2475:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:10222
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10253
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10254
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10255
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10260
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10262
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10302
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10309
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10316
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10323
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10330
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10339
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10340
		{
			yyVAL.list = nil
		}
	case 2488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10344
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10349
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2490:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10357
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10368
		{
			yyVAL.bval = true
		}
	case 2492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10369
		{
			yyVAL.bval = false
		}
	case 2493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10373
		{
			yyVAL.bval = true
		}
	case 2494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10374
		{
			yyVAL.bval = false
		}
	case 2495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10378
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10383
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2497:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10387
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10399
		{
			yyVAL.bval = true
		}
	case 2501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10400
		{
			yyVAL.bval = false
		}
	case 2502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10404
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2503:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10405
		{
			yyVAL.node = nil
		}
	case 2506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10414
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10419
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10423
		{
			yyVAL.list = nil
		}
	case 2509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10428
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10431
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10432
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10433
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10437
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10438
		{
			yyVAL.rangevar = nil
		}
	case 2515:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10451
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2516:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10467
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2517:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:10483
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2518:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:10499
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10516
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10517
		{
			yyVAL.list = nil
		}
	case 2521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10521
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10522
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10523
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10524
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2525:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10535
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = yyDollar[5].rolespec
			n.SchemaElts = yyDollar[6].list
			yyVAL.stmt = n
		}
	case 2526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10542
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = nil
			n.SchemaElts = yyDollar[4].list
			yyVAL.stmt = n
		}
	case 2527:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10549
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = yyDollar[8].rolespec
			n.SchemaElts = yyDollar[9].list
			yyVAL.stmt = n
		}
	case 2528:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10556
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = nil
			n.SchemaElts = yyDollar[7].list
			yyVAL.stmt = n
		}
	case 2529:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10572
		{
			n := ast.NewCreatedbStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10585
		{
			n := ast.NewDropdbStmt(yyDollar[3].str, false, nil)
			yyVAL.stmt = n
		}
	case 2531:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10590
		{
			n := ast.NewDropdbStmt(yyDollar[5].str, true, nil)
			yyVAL.stmt = n
		}
	case 2532:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10595
		{
			n := ast.NewDropdbStmt(yyDollar[3].str, false, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2533:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10600
		{
			n := ast.NewDropdbStmt(yyDollar[5].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10607
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10608
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Append(yyDollar[3].defelt)
		}
	case 2536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10612
		{
			yyVAL.defelt = ast.NewDefElem("force", nil)
		}
	case 2537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10622
		{
			n := ast.NewDropTableSpaceStmt(yyDollar[3].str, false)
			yyVAL.stmt = n
		}
	case 2538:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10627
		{
			n := ast.NewDropTableSpaceStmt(yyDollar[5].str, true)
			yyVAL.stmt = n
		}
	case 2539:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10641
		{
			n := ast.NewDropOwnedStmt(yyDollar[4].list, yyDollar[5].dropBehav)
			yyVAL.stmt = n
		}
	case 2540:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10649
		{
			n := ast.NewReassignOwnedStmt(yyDollar[4].list, yyDollar[6].rolespec)
			yyVAL.stmt = n
		}
	case 2541:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10663
		{
			n := ast.NewCreateDomainStmt(yyDollar[3].list, yyDollar[5].typnam)
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			n.Constraints = constraints
			n.CollClause = collClause
			yyVAL.stmt = n
		}
	case 2542:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10681
		{
			n := ast.NewAlterDomainStmt('T', yyDollar[3].list)
			n.Def = yyDollar[4].node
			yyVAL.stmt = n
		}
	case 2543:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10687
		{
			n := ast.NewAlterDomainStmt('N', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2544:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10692
		{
			n := ast.NewAlterDomainStmt('O', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2545:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10697
		{
			n := ast.NewAlterDomainStmt('C', yyDollar[3].list)
			n.Def = yyDollar[5].node
			yyVAL.stmt = n
		}
	case 2546:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10703
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[6].str
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			yyVAL.stmt = n
		}
	case 2547:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10711
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[8].str
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			yyVAL.stmt = n
		}
	case 2548:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10719
		{
			n := ast.NewAlterDomainStmt('V', yyDollar[3].list)
			n.Name = yyDollar[6].str
			yyVAL.stmt = n
		}
	case 2549:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10734
		{
			// Extract actual arguments from aggr_args which returns [args, position_indicator]
			var args *ast.NodeList
			if yyDollar[5].list != nil && yyDollar[5].list.Len() > 0 {
				// First element contains the actual arguments (or nil for *)
				if firstElem, ok := yyDollar[5].list.Items[0].(*ast.NodeList); ok {
					args = firstElem
				} else if yyDollar[5].list.Items[0] == nil {
					// Special case for COUNT(*) - create a list with a single nil element
					args = ast.NewNodeList(nil)
				}
			}
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, false, yyDollar[4].list, args, yyDollar[6].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2550:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10750
		{
			// old-style (pre-8.2) syntax for CREATE AGGREGATE
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, true, yyDollar[4].list, nil, yyDollar[5].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2551:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10756
		{
			n := ast.NewDefineStmt(ast.OBJECT_OPERATOR, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10761
		{
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10766
		{
			// Shell type (identified by lack of definition)
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, nil, false, false)
			yyVAL.stmt = n
		}
	case 2554:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10772
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSPARSER, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2555:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10777
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSDICTIONARY, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2556:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10782
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSTEMPLATE, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2557:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10787
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSCONFIGURATION, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10792
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2559:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10797
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, yyDollar[7].list, true, false)
			yyVAL.stmt = n
		}
	case 2560:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10802
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, ast.NewNodeList(yyDollar[5].list), false, false)
			yyVAL.stmt = n
		}
	case 2561:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10807
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, ast.NewNodeList(yyDollar[8].list), true, false)
			yyVAL.stmt = n
		}
	case 2562:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10812
		{
			typevar, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(fmt.Sprintf("invalid type name: %v", err))
				return 1
			}

			n := ast.NewCompositeTypeStmt(typevar, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2563:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10823
		{
			n := ast.NewCreateEnumStmt(yyDollar[3].list, yyDollar[7].list)
			yyVAL.stmt = n
		}
	case 2564:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10828
		{
			n := ast.NewCreateRangeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2565:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10842
		{
			n := ast.NewCreateSeqStmt(yyDollar[4].rangevar, yyDollar[5].list, 0, false, false)
			yyVAL.stmt = n
		}
	case 2566:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10847
		{
			n := ast.NewCreateSeqStmt(yyDollar[7].rangevar, yyDollar[8].list, 0, false, true)
			yyVAL.stmt = n
		}
	case 2567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10854
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10855
		{
			yyVAL.list = nil
		}
	case 2569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10858
		{
		}
	case 2570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10859
		{
		}
	case 2571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10870
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[3].rangevar, yyDollar[4].list, false, false)
		}
	case 2572:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10874
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[5].rangevar, yyDollar[6].list, false, true)
		}
	case 2573:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10887
		{
			n := ast.NewCreateExtensionStmt(yyDollar[3].str, false, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2574:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10892
		{
			n := ast.NewCreateExtensionStmt(yyDollar[6].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10900
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10909
		{
			yyVAL.list = nil
		}
	case 2577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10916
		{
			yyVAL.defelt = ast.NewDefElem("schema", ast.NewString(yyDollar[2].str))
		}
	case 2578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10920
		{
			yyVAL.defelt = ast.NewDefElem("version", ast.NewString(yyDollar[2].str))
		}
	case 2579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10924
		{
			yylex.Error("CREATE EXTENSION ... FROM is no longer supported")
			return 1
		}
	case 2580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10929
		{
			yyVAL.defelt = ast.NewDefElem("cascade", ast.NewBoolean(true))
		}
	case 2581:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10942
		{
			n := ast.NewAlterExtensionStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10950
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10959
		{
			yyVAL.list = nil
		}
	case 2584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10966
		{
			yyVAL.defelt = ast.NewDefElem("to", ast.NewString(yyDollar[2].str))
		}
	case 2585:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10979
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), ast.NewString(yyDollar[6].str))
		}
	case 2586:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10983
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), yyDollar[6].list)
		}
	case 2587:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10987
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_AGGREGATE), yyDollar[6].objwithargs)
		}
	case 2588:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10991
		{
			// CAST takes two TypeNames as a NodeList
			list := ast.NewNodeList(yyDollar[7].typnam)
			list.Append(yyDollar[9].typnam)
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_CAST), list)
		}
	case 2589:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10998
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_DOMAIN), yyDollar[6].typnam)
		}
	case 2590:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11002
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_FUNCTION), yyDollar[6].objwithargs)
		}
	case 2591:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11006
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPERATOR), yyDollar[6].objwithargs)
		}
	case 2592:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11010
		{
			// OPERATOR CLASS takes method name + class name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then class name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPCLASS), list)
		}
	case 2593:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11019
		{
			// OPERATOR FAMILY takes method name + family name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then family name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPFAMILY), list)
		}
	case 2594:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11028
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_PROCEDURE), yyDollar[6].objwithargs)
		}
	case 2595:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11032
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_ROUTINE), yyDollar[6].objwithargs)
		}
	case 2596:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11036
		{
			list := ast.NewNodeList(yyDollar[7].typnam, ast.NewString(yyDollar[9].str))
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TRANSFORM), list)
		}
	case 2597:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11041
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TYPE), yyDollar[6].typnam)
		}
	case 2598:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11053
		{
			yyVAL.stmt = ast.NewCreateFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2599:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11059
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2600:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11063
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, nil)
		}
	case 2601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11069
		{
			yyVAL.defelt = ast.NewDefElem("handler", yyDollar[2].list)
		}
	case 2602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11070
		{
			yyVAL.defelt = ast.NewDefElem("handler", nil)
		}
	case 2603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11071
		{
			yyVAL.defelt = ast.NewDefElem("validator", yyDollar[2].list)
		}
	case 2604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11072
		{
			yyVAL.defelt = ast.NewDefElem("validator", nil)
		}
	case 2605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11076
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11077
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11081
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2608:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11082
		{
			yyVAL.list = nil
		}
	case 2609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11086
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11087
		{
			result := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				result.Append(item)
			}
			yyVAL.list = result
		}
	case 2611:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11104
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].str, yyDollar[9].str, yyDollar[10].list, false)
		}
	case 2612:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11109
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[6].str, yyDollar[7].str, yyDollar[8].str, yyDollar[12].str, yyDollar[13].list, true)
		}
	case 2613:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11115
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].list, true)
		}
	case 2614:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11119
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, nil, true)
		}
	case 2615:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11123
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, "", yyDollar[4].list, false)
		}
	case 2616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11129
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11130
		{
			yyVAL.str = ""
		}
	case 2618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11134
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11135
		{
			yyVAL.str = ""
		}
	case 2620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11139
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11140
		{
			yyVAL.str = ""
		}
	case 2622:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11153
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[6].list, yyDollar[8].list, yyDollar[10].str, yyDollar[11].list, nil, false)
		}
	case 2623:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:11159
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[9].list, yyDollar[11].list, yyDollar[13].str, yyDollar[14].list, nil, true)
		}
	case 2624:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:11165
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[8].list, ast.NewNodeList(yyDollar[7].rangevar), yyDollar[11].str, yyDollar[12].list, yyDollar[9].partboundspec, false)
		}
	case 2625:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:11171
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[11].list, ast.NewNodeList(yyDollar[10].rangevar), yyDollar[14].str, yyDollar[15].list, yyDollar[12].partboundspec, true)
		}
	case 2626:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11183
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list, false)
		}
	case 2627:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11187
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[8].rolespec, yyDollar[10].str, yyDollar[11].list, true)
		}
	case 2628:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11193
		{
			yyVAL.stmt = ast.NewAlterUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list)
		}
	case 2629:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11199
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, false)
		}
	case 2630:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11203
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[7].rolespec, yyDollar[9].str, true)
		}
	case 2631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11209
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11210
		{
			yyVAL.rolespec = ast.NewRoleSpec(ast.ROLESPEC_CURRENT_USER, "")
		}
	case 2633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11215
		{
			// For aggregates like COUNT(*)
			// Return a list with [nil, -1] matching PostgreSQL's list_make2(NIL, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(nil, ast.NewInteger(-1))
		}
	case 2634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11221
		{
			// Regular aggregate arguments
			// Return a list with [args, -1] matching PostgreSQL's list_make2($2, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(yyDollar[2].list, ast.NewInteger(-1))
		}
	case 2635:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11227
		{
			// Ordered-set aggregate without direct arguments
			// Return a list with [args, 0] matching PostgreSQL's list_make2($4, makeInteger(0))
			yyVAL.list = ast.NewNodeList(yyDollar[4].list, ast.NewInteger(0))
		}
	case 2636:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11233
		{
			// Hypothetical-set aggregate
			// This is the only case requiring consistency checking in PostgreSQL
			result, err := makeOrderedSetArgs(yyDollar[2].list, yyDollar[5].list)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.list = result
		}
	case 2637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11247
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11251
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11259
		{
			yyVAL.node = yyDollar[1].funparam
		}
	case 2640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11266
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11273
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11277
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11285
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2644:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11292
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			n.NewValIsAfter = true
			yyVAL.stmt = n
		}
	case 2645:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11300
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = false
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2646:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11309
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = true
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2647:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11318
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.OldVal = yyDollar[6].str
			n.NewVal = yyDollar[8].str
			n.SkipIfNewValExists = false
			yyVAL.stmt = n
		}
	case 2648:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11326
		{
			// Following PostgreSQL's approach - DROP VALUE is parsed but not implemented
			// PostgreSQL throws an error saying "dropping an enum value is not implemented"
			yylex.Error("dropping an enum value is not implemented")
			return 1
		}
	case 2649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11342
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11344
		{
			yyVAL.list = nil
		}
	case 2651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11349
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11351
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11356
		{
			if constraint, ok := yyDollar[3].node.(*ast.Constraint); ok {
				constraint.Conname = yyDollar[2].str
				yyVAL.node = constraint
			} else {
				yyVAL.node = yyDollar[3].node
			}
		}
	case 2654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11365
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2655:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11370
		{
			n := ast.NewConstraint(ast.CONSTR_CHECK)
			n.RawExpr = yyDollar[3].node
			n.CookedExpr = "" // Empty string, not nil
			// Process constraint attributes from $5
			processConstraintAttributeSpec(yyDollar[5].ival, n)
			// PostgreSQL: n->initially_valid = !n->skip_validation
			n.InitiallyValid = !n.SkipValidation
			yyVAL.node = n
		}
	case 2656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11381
		{
			n := ast.NewConstraint(ast.CONSTR_NOTNULL)
			// In PostgreSQL, domain NOT NULL constraints have keys = list_make1(makeString("value"))
			n.Keys = ast.NewNodeList(ast.NewString("value"))
			// Process constraint attributes from $3
			processConstraintAttributeSpec(yyDollar[3].ival, n)
			// PostgreSQL sets initially_valid = true for NOT NULL (no NOT VALID support yet)
			n.InitiallyValid = true
			yyVAL.node = n
		}
	case 2657:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11401
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[7].stmt, yyDollar[5].into, ast.OBJECT_MATVIEW, false, false)
			/* cram additional flags into the IntoClause */
			yyDollar[5].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[5].into.SkipData = !yyDollar[8].bval
			yyVAL.stmt = ctas
		}
	case 2658:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11409
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[10].stmt, yyDollar[8].into, ast.OBJECT_MATVIEW, false, true)
			/* cram additional flags into the IntoClause */
			yyDollar[8].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[8].into.SkipData = !yyDollar[11].bval
			yyVAL.stmt = ctas
		}
	case 2659:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11420
		{
			n := ast.NewRefreshMatViewStmt(yyDollar[4].bval, !yyDollar[6].bval, yyDollar[5].rangevar)
			yyVAL.stmt = n
		}
	case 2660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11426
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 2661:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11427
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 2662:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11432
		{
			yyVAL.into = &ast.IntoClause{
				Rel:            yyDollar[1].rangevar,
				ColNames:       yyDollar[2].list,
				AccessMethod:   yyDollar[3].str,
				Options:        yyDollar[4].list,
				TableSpaceName: yyDollar[5].str,
			}
		}
	case 2663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11444
		{
			yyVAL.bval = true
		}
	case 2664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11445
		{
			yyVAL.bval = false
		}
	case 2665:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11446
		{
			yyVAL.bval = true
		}
	case 2666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11451
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].stmt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11460
		{
			yyVAL.list = nil
		}
	case 2672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11471
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11473
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11477
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11482
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11487
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11492
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11500
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11505
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11510
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11514
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11525
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11533
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11537
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11541
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11545
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11552
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11556
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11563
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11569
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11576
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11577
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11581
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11582
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11584
		{
			t := yyDollar[1].typnam
			t.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 2696:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11591
		{
			t := yyDollar[1].typnam
			// INTERVAL_FULL_RANGE equivalent and precision
			t.Typmods = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_FULL_RANGE), ast.NewInteger(yyDollar[3].ival))
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[5].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 2697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11598
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11599
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11600
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11604
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11605
		{
			yyVAL.str = "default"
		}
	case 2702:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11606
		{
			yyVAL.str = ""
		}
	case 2703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11610
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11611
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11615
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11616
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11617
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11618
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11622
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11623
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11628
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11634
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11639
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11647
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11651
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11655
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11659
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11663
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11669
		{
			yyVAL.str = "read uncommitted"
		}
	case 2720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11670
		{
			yyVAL.str = "read committed"
		}
	case 2721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11671
		{
			yyVAL.str = "repeatable read"
		}
	case 2722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11672
		{
			yyVAL.str = "serializable"
		}
	case 2723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11676
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2724:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11677
		{
			yyVAL.list = nil
		}
	case 2725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11681
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11682
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11683
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11686
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11687
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11688
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11692
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2732:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11693
		{
			yyVAL.list = nil
		}
	case 2733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11697
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11698
		{
			yyVAL.node = nil
		}
	case 2735:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11702
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11707
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2737:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11712
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11720
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11724
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11730
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11736
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11742
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11743
		{
			yyVAL.str = ""
		}
	case 2744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11747
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11748
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11749
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11750
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11754
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11759
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11764
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11771
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2752:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11772
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2753:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11783
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[9].list, nil)
		}
	case 2754:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11787
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[11].list, yyDollar[8].list)
		}
	case 2755:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11793
		{
			yyVAL.stmt = ast.NewAlterEventTrigStmt(yyDollar[4].str, ast.TriggerFires(yyDollar[5].ival))
		}
	case 2756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11799
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_ORIGIN)
		}
	case 2757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11800
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_REPLICA)
		}
	case 2758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11801
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ALWAYS)
		}
	case 2759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11802
		{
			yyVAL.ival = int(ast.TRIGGER_DISABLED)
		}
	case 2760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11807
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2761:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11812
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2762:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11820
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[4].list)
		}
	case 2763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11827
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(ast.NewString(yyDollar[1].str))
		}
	case 2764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11832
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2765:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11846
		{
			yyVAL.stmt = ast.NewCreateTableSpaceStmt(yyDollar[3].str, yyDollar[4].rolespec, yyDollar[6].str, yyDollar[7].list)
		}
	case 2766:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11852
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 2767:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11853
		{
			yyVAL.rolespec = nil
		}
	case 2768:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11858
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, false)
		}
	case 2769:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11862
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, true)
		}
	case 2770:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11877
		{
			yyVAL.stmt = ast.NewCreatePolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].bval, yyDollar[7].str, yyDollar[8].list, yyDollar[9].node, yyDollar[10].node)
		}
	case 2771:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11885
		{
			yyVAL.stmt = ast.NewAlterPolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].list, yyDollar[7].node, yyDollar[8].node)
		}
	case 2772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11892
		{
			// Check for "permissive" or "restrictive" (case-insensitive)
			if strings.EqualFold(yyDollar[2].str, "permissive") {
				yyVAL.bval = true
			} else if strings.EqualFold(yyDollar[2].str, "restrictive") {
				yyVAL.bval = false
			} else {
				// Parser will error on invalid value
				yylex.Error("unrecognized row security option")
				return 1
			}
		}
	case 2773:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11904
		{
			yyVAL.bval = true
		}
	case 2774:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11908
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11909
		{
			yyVAL.str = "all"
		}
	case 2776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11913
		{
			yyVAL.str = "all"
		}
	case 2777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11914
		{
			yyVAL.str = "select"
		}
	case 2778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11915
		{
			yyVAL.str = "insert"
		}
	case 2779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11916
		{
			yyVAL.str = "update"
		}
	case 2780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11917
		{
			yyVAL.str = "delete"
		}
	case 2781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11921
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2782:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11922
		{
			// Default to PUBLIC when no TO clause is specified
			publicRole := ast.NewRoleSpec(ast.ROLESPEC_PUBLIC, "")
			yyVAL.list = ast.NewNodeList(publicRole)
		}
	case 2783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11930
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2784:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11931
		{
			yyVAL.list = nil
		}
	case 2785:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11935
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2786:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11936
		{
			yyVAL.node = nil
		}
	case 2787:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11940
		{
			yyVAL.node = yyDollar[4].node
		}
	case 2788:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11941
		{
			yyVAL.node = nil
		}
	case 2789:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11952
		{
			yyVAL.stmt = ast.NewCreateAmStmt(yyDollar[4].str, ast.AmType(yyDollar[6].ival), yyDollar[8].list)
		}
	case 2790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11958
		{
			yyVAL.ival = int(ast.AMTYPE_INDEX)
		}
	case 2791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11959
		{
			yyVAL.ival = int(ast.AMTYPE_TABLE)
		}
	case 2792:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11970
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[3].list, yyDollar[4].list, yyDollar[6].list, yyDollar[8].list, "", false, false)
		}
	case 2793:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11974
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[6].list, yyDollar[7].list, yyDollar[9].list, yyDollar[11].list, "", false, true)
		}
	case 2794:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11981
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[3].list, yyDollar[6].node, false)
		}
	case 2795:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11985
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[5].list, yyDollar[8].node, true)
		}
	case 2796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11991
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].statelem)
		}
	case 2797:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11992
		{
			yyDollar[1].list.Append(yyDollar[3].statelem)
			yyVAL.list = yyDollar[1].list
		}
	case 2798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11996
		{
			yyVAL.statelem = ast.NewStatsElem(yyDollar[1].str)
		}
	case 2799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11997
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[1].node)
		}
	case 2800:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11998
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[2].node)
		}
	case 2801:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12009
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, false, yyDollar[4].list)
		}
	case 2802:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12013
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, true, yyDollar[7].list)
		}
	case 2803:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12017
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, yyDollar[5].list, false, yyDollar[6].list)
		}
	case 2804:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12024
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, yyDollar[5].list, nil, ast.AP_SetOptions)
		}
	case 2805:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12028
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_AddObjects)
		}
	case 2806:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12032
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_SetObjects)
		}
	case 2807:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12036
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_DropObjects)
		}
	case 2808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12042
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2809:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12043
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2810:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12048
		{
			pubTable := ast.NewPublicationTable(yyDollar[2].rangevar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_TABLE, pubTable)
		}
	case 2811:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12053
		{
			yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_TABLES_IN_SCHEMA, yyDollar[4].str)
		}
	case 2812:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12057
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA)
		}
	case 2813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12061
		{
			// If either a row filter or column list is specified, create a PublicationTable object
			if yyDollar[2].list != nil || yyDollar[3].node != nil {
				// Create a simple RangeVar from the ColId
				rangeVar := ast.NewRangeVar(yyDollar[1].str, "", "")
				pubTable := ast.NewPublicationTable(rangeVar, yyDollar[3].node, yyDollar[2].list)
				yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
			} else {
				yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_CONTINUATION, yyDollar[1].str)
			}
		}
	case 2814:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12073
		{
			rangeVar := makeRangeVarFromQualifiedName(yyDollar[1].str, yyDollar[2].list, -1)
			pubTable := ast.NewPublicationTable(rangeVar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2815:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12079
		{
			pubTable := ast.NewPublicationTable(yyDollar[1].rangevar, yyDollar[3].node, yyDollar[2].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12084
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_CONTINUATION)
		}
	case 2817:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12090
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2818:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12091
		{
			yyVAL.node = nil
		}
	case 2819:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12102
		{
			yyVAL.stmt = ast.NewCreateSubscriptionStmt(yyDollar[3].str, yyDollar[5].str, yyDollar[7].list, yyDollar[8].list)
		}
	case 2820:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12109
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_OPTIONS, "", nil, yyDollar[5].list)
		}
	case 2821:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12113
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_CONNECTION, yyDollar[5].str, nil, nil)
		}
	case 2822:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12117
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_REFRESH, "", nil, yyDollar[6].list)
		}
	case 2823:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12121
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ADD_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2824:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12125
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_DROP_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2825:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12129
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SET_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2826:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12133
		{
			enableOpt := ast.NewNodeList()
			enableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(true)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, enableOpt)
		}
	case 2827:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12139
		{
			disableOpt := ast.NewNodeList()
			disableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(false)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, disableOpt)
		}
	case 2828:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12145
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SKIP, "", nil, yyDollar[5].list)
		}
	case 2829:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12158
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, yyDollar[10].objwithargs, ast.CoercionContext(yyDollar[11].ival), false)
		}
	case 2830:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12162
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), false)
		}
	case 2831:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12166
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), true)
		}
	case 2832:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12172
		{
			yyVAL.ival = int(ast.COERCION_IMPLICIT)
		}
	case 2833:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12173
		{
			yyVAL.ival = int(ast.COERCION_ASSIGNMENT)
		}
	case 2834:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12174
		{
			yyVAL.ival = int(ast.COERCION_EXPLICIT)
		}
	case 2835:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:12186
		{
			yyVAL.stmt = ast.NewCreateOpClassStmt(yyDollar[4].list, yyDollar[11].list, yyDollar[10].str, yyDollar[8].typnam, yyDollar[13].list, yyDollar[5].bval)
		}
	case 2836:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12192
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2837:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12193
		{
			yyVAL.list = nil
		}
	case 2838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12197
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2839:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12198
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2840:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12203
		{
			// Create ObjectWithArgs for simple operator
			owa := ast.NewObjectWithArgs(yyDollar[3].list, nil, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, yyDollar[4].list)
		}
	case 2841:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12209
		{
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, yyDollar[3].objwithargs, yyDollar[4].list)
		}
	case 2842:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12213
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[3].objwithargs, nil)
		}
	case 2843:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12217
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[6].objwithargs, yyDollar[4].list)
		}
	case 2844:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12221
		{
			yyVAL.node = ast.NewOpClassItemStorage(yyDollar[2].typnam)
		}
	case 2845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12227
		{
			yyVAL.bval = true
		}
	case 2846:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12228
		{
			yyVAL.bval = false
		}
	case 2847:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12232
		{
			yyVAL.list = nil
		}
	case 2848:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12233
		{
			yyVAL.list = yyDollar[4].list
		}
	case 2849:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12234
		{
			yyVAL.list = nil
		}
	case 2850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12238
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].typnam)
		}
	case 2851:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12239
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2852:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12250
		{
			yyVAL.stmt = ast.NewCreateOpFamilyStmt(yyDollar[4].list, yyDollar[6].str)
		}
	case 2853:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12263
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, false, yyDollar[8].list)
		}
	case 2854:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12267
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, true, yyDollar[8].list)
		}
	case 2855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12273
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2856:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12274
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2857:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12279
		{
			// Create ObjectWithArgs for operator with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, nil)
		}
	case 2858:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12285
		{
			// Create ObjectWithArgs for function with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, owa, nil)
		}
	case 2859:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12300
		{
			yyVAL.stmt = ast.NewCreateConversionStmt(yyDollar[4].list, yyDollar[6].str, yyDollar[8].str, yyDollar[10].list, yyDollar[2].bval)
		}
	case 2860:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12313
		{
			yyVAL.stmt = ast.NewCreateTransformStmt(yyDollar[2].bval, yyDollar[5].typnam, yyDollar[7].str, linitial(yyDollar[9].list), lsecond(yyDollar[9].list))
		}
	case 2861:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12320
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs)  // fromsql
			yyVAL.list.Append(yyDollar[11].objwithargs) // tosql
		}
	case 2862:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12326
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[11].objwithargs) // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs)  // tosql
		}
	case 2863:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12332
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs) // fromsql
			yyVAL.list.Append(nil)                     // tosql
		}
	case 2864:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12338
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(nil)                     // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs) // tosql
		}
	case 2865:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12353
		{
			// Parameterless CREATE LANGUAGE is now treated as CREATE EXTENSION
			yyVAL.stmt = ast.NewCreateExtensionStmt(yyDollar[6].str, yyDollar[2].bval, nil)
		}
	case 2866:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12359
		{
			yyVAL.stmt = ast.NewCreatePLangStmt(yyDollar[2].bval, yyDollar[6].str, yyDollar[8].list, yyDollar[9].list, yyDollar[10].list, yyDollar[3].bval)
		}
	case 2867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12365
		{
			yyVAL.bval = true
		}
	case 2868:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12366
		{
			yyVAL.bval = false
		}
	case 2869:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12371
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2870:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12372
		{
			yyVAL.list = nil
		}
	case 2871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12376
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2872:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12377
		{
			yyVAL.list = nil
		}
	case 2873:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12381
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2874:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12382
		{
			yyVAL.list = nil
		}
	case 2875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12385
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_ALL
		}
	case 2876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12386
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DISTINCT
		}
	case 2877:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12387
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DEFAULT
		}
	case 2878:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12392
		{
			yyVAL.groupClause = &ast.GroupClause{
				Distinct: yyDollar[3].setquant == ast.SET_QUANTIFIER_DISTINCT,
				List:     yyDollar[4].list,
			}
		}
	case 2879:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12399
		{
			yyVAL.groupClause = nil
		}
	case 2880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12405
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2881:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12406
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12410
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12411
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12412
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12413
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12414
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2887:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12419
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_EMPTY, ast.NewNodeList(), 0)
		}
	case 2888:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12426
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_ROLLUP, yyDollar[3].list, 0)
		}
	case 2889:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12433
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_CUBE, yyDollar[3].list, 0)
		}
	case 2890:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12440
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_SETS, yyDollar[4].list, 0)
		}
	case 2891:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12449
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2892:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12450
		{
			yyVAL.node = nil
		}
	case 2893:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12457
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12461
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2895:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12462
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2896:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12467
		{
			sortBy := ast.NewSortBy(yyDollar[1].node, ast.SORTBY_USING, ast.SortByNulls(yyDollar[4].ival), 0)
			// Use qual_all_Op (NodeList) directly for UseOp
			sortBy.UseOp = yyDollar[3].list
			yyVAL.node = sortBy
		}
	case 2897:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12474
		{
			yyVAL.node = ast.NewSortBy(yyDollar[1].node, ast.SortByDir(yyDollar[2].ival), ast.SortByNulls(yyDollar[3].ival), 0)
		}
	case 2898:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12485
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2899:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12487
		{
			yyVAL.list = nil
		}
	case 2900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12492
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[1].windef)
		}
	case 2901:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12497
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[3].windef)
		}
	case 2902:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12505
		{
			n := yyDollar[3].windef
			n.Name = yyDollar[1].str
			yyVAL.windef = n
		}
	case 2903:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12514
		{
			yyVAL.windef = yyDollar[2].windef
		}
	case 2904:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12516
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			yyVAL.windef = n
		}
	case 2905:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12523
		{
			yyVAL.windef = nil
		}
	case 2906:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12528
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.PartitionClause = yyDollar[3].list
			n.OrderClause = yyDollar[4].list

			n.FrameOptions = yyDollar[5].windef.FrameOptions
			n.StartOffset = yyDollar[5].windef.StartOffset
			n.EndOffset = yyDollar[5].windef.EndOffset
			yyVAL.windef = n
		}
	case 2907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12542
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2908:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12543
		{
			yyVAL.str = ""
		}
	case 2909:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12547
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2910:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12548
		{
			yyVAL.list = nil
		}
	case 2911:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12553
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_RANGE
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2912:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12560
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_ROWS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2913:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12567
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_GROUPS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2914:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12574
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12585
		{
			n := yyDollar[1].windef
			// reject invalid cases - these would be runtime errors in PostgreSQL
			if (n.FrameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (n.FrameOptions & ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 {
				yylex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			n.FrameOptions |= ast.FRAMEOPTION_END_CURRENT_ROW
			yyVAL.windef = n
		}
	case 2916:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12599
		{
			n1 := yyDollar[2].windef
			n2 := yyDollar[4].windef

			// form merged options
			frameOptions := n1.FrameOptions
			// shift converts START_ options to END_ options
			frameOptions |= (n2.FrameOptions << 1)
			frameOptions |= ast.FRAMEOPTION_BETWEEN

			// reject invalid cases
			if (frameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (frameOptions & ast.FRAMEOPTION_END_UNBOUNDED_PRECEDING) != 0 {
				yylex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_CURRENT_ROW) != 0 &&
				(frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 {
				yylex.Error("frame starting from current row cannot have preceding rows")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 &&
				((frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 ||
					(frameOptions&ast.FRAMEOPTION_END_CURRENT_ROW) != 0) {
				yylex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			n1.FrameOptions = frameOptions
			n1.EndOffset = n2.StartOffset
			yyVAL.windef = n1
		}
	case 2917:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12634
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_PRECEDING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2918:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12642
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2919:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12650
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_CURRENT_ROW
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2920:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12658
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_PRECEDING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2921:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12666
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_FOLLOWING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2922:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12676
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_CURRENT_ROW
		}
	case 2923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12677
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_GROUP
		}
	case 2924:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12678
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_TIES
		}
	case 2925:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12679
		{
			yyVAL.ival = 0
		}
	case 2926:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12680
		{
			yyVAL.ival = 0
		}
	case 2927:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12689
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[2].node
		}
	case 2928:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12694
		{
			yyVAL.selectLimit = yyDollar[2].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[1].node
		}
	case 2929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12699
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12703
		{
			n := &selectLimit{}
			n.limitOffset = yyDollar[1].node
			n.limitCount = nil
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12713
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2932:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12714
		{
			yyVAL.selectLimit = nil
		}
	case 2933:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12719
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[2].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2934:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12727
		{
			// Disabled because it was too confusing - PostgreSQL error
			yylex.Error("LIMIT #,# syntax is not supported. Use separate LIMIT and OFFSET clauses.")
			return 1
		}
	case 2935:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12734
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2936:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12742
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2937:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12750
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2938:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12758
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2939:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12769
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2940:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12772
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12776
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12778
		{
			/* LIMIT ALL is represented as a NULL constant */
			yyVAL.node = ast.NewA_Const(ast.NewNull(), -1)
		}
	case 2943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12785
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12798
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2945:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12800
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("+")}}, nil, yyDollar[2].node, -1)
		}
	case 2946:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12804
		{
			// Create a unary minus expression
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("-")}}, nil, yyDollar[2].node, -1)
		}
	case 2947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12811
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), -1)
		}
	case 2948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12812
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), -1)
		}
	case 2949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12817
		{
			yyVAL.ival = 0
		}
	case 2950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12818
		{
			yyVAL.ival = 0
		}
	case 2951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12822
		{
			yyVAL.ival = 0
		}
	case 2952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12823
		{
			yyVAL.ival = 0
		}
	case 2953:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12836
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2954:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12842
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_START)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2955:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12848
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2956:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12854
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2957:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12860
		{
			stmt := ast.NewSavepointStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2958:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12865
		{
			stmt := ast.NewReleaseStmt(yyDollar[3].str)
			yyVAL.stmt = stmt
		}
	case 2959:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12870
		{
			stmt := ast.NewReleaseStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2960:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12875
		{
			stmt := ast.NewRollbackToStmt(yyDollar[5].str)
			yyVAL.stmt = stmt
		}
	case 2961:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12880
		{
			stmt := ast.NewRollbackToStmt(yyDollar[4].str)
			yyVAL.stmt = stmt
		}
	case 2962:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12885
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_PREPARE)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2963:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12891
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2964:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12897
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2965:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12906
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2966:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12912
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_BEGIN)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12919
		{
		}
	case 2968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12920
		{
		}
	case 2969:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12921
		{
		}
	case 2970:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12925
		{
			yyVAL.bval = true
		}
	case 2971:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12926
		{
			yyVAL.bval = false
		}
	case 2972:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12927
		{
			yyVAL.bval = false
		}
	case 2973:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12940
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_ROLE, yyDollar[3].str, yyDollar[5].list)
		}
	case 2974:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12947
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_USER, yyDollar[3].str, yyDollar[5].list)
		}
	case 2975:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12954
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_GROUP, yyDollar[3].str, yyDollar[5].list)
		}
	case 2976:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12961
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2977:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12967
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2978:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12976
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2979:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12980
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2980:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12984
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2981:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12988
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2982:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12994
		{
			yyVAL.str = ""
		}
	case 2983:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12995
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2984:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13000
		{
			options := ast.NewNodeList(ast.NewDefElem("rolemembers", yyDollar[6].list))
			stmt := ast.NewAlterRoleStmt(yyDollar[3].rolespec, options)
			stmt.Action = yyDollar[4].ival
			yyVAL.stmt = stmt
		}
	case 2985:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13010
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2986:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13014
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2987:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13018
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2988:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13022
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2989:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13026
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2990:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13030
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2991:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13038
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 2992:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13049
		{
			yyVAL.list = nil
		}
	case 2993:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13054
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 2994:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13065
		{
			yyVAL.list = nil
		}
	case 2995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13069
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2996:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13071
		{
			yyVAL.defelt = ast.NewDefElem("sysid", ast.NewInteger(yyDollar[2].ival))
		}
	case 2997:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13075
		{
			yyVAL.defelt = ast.NewDefElem("adminmembers", yyDollar[2].list)
		}
	case 2998:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13079
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 2999:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13083
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 3000:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13087
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 3001:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13094
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[2].str))
		}
	case 3002:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13098
		{
			yyVAL.defelt = ast.NewDefElem("password", nil)
		}
	case 3003:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13102
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[3].str))
		}
	case 3004:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13106
		{
			yylex.Error("UNENCRYPTED PASSWORD is no longer supported")
			return 1
		}
	case 3005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13111
		{
			yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(true))
		}
	case 3006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13115
		{
			// Handle identifiers like PostgreSQL does with string comparisons
			if yyDollar[1].str == "superuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nosuperuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createrole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreaterole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createdb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreatedb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(false))
			} else if yyDollar[1].str == "login" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nologin" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(false))
			} else if yyDollar[1].str == "replication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(true))
			} else if yyDollar[1].str == "noreplication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(false))
			} else if yyDollar[1].str == "bypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nobypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(false))
			} else if yyDollar[1].str == "noinherit" {
				yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(false))
			} else {
				// Return error for unrecognized role option
				yylex.Error("unrecognized role option \"" + yyDollar[1].str + "\"")
				yyVAL.defelt = nil
			}
		}
	case 3007:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13150
		{
			yyVAL.defelt = ast.NewDefElem("connectionlimit", ast.NewInteger(yyDollar[3].ival))
		}
	case 3008:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13154
		{
			yyVAL.defelt = ast.NewDefElem("validUntil", ast.NewString(yyDollar[3].str))
		}
	case 3009:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13158
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 3010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13164
		{
			yyVAL.ival = 1
		}
	case 3011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13165
		{
			yyVAL.ival = -1
		}
	case 3012:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:13177
		{
			n := ast.NewGrantStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.GrantOption = yyDollar[7].bval
			n.Grantor = yyDollar[8].rolespec
			yyVAL.stmt = n
		}
	case 3013:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:13189
		{
			n := ast.NewRevokeStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.Grantor = yyDollar[7].rolespec
			n.Behavior = yyDollar[8].dropBehav
			yyVAL.stmt = n
		}
	case 3014:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:13198
		{
			n := ast.NewRevokeStmt(yyDollar[7].privtarget.objtype, yyDollar[7].privtarget.objs, yyDollar[5].list, yyDollar[9].list)
			n.Targtype = yyDollar[7].privtarget.targtype
			n.GrantOption = true
			n.Grantor = yyDollar[10].rolespec
			n.Behavior = yyDollar[11].dropBehav
			yyVAL.stmt = n
		}
	case 3015:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13210
		{
			stmt := ast.NewGrantRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			yyVAL.stmt = stmt
		}
	case 3016:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13216
		{
			stmt := ast.NewGrantRoleStmtWithOptions(yyDollar[2].list, yyDollar[4].list, yyDollar[6].list)
			stmt.Grantor = yyDollar[7].rolespec
			yyVAL.stmt = stmt
		}
	case 3017:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13225
		{
			stmt := ast.NewRevokeRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			stmt.Behavior = yyDollar[6].dropBehav
			yyVAL.stmt = stmt
		}
	case 3018:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:13232
		{
			opt := ast.NewDefElem(yyDollar[2].str, ast.NewBoolean(false))
			stmt := ast.NewRevokeRoleStmt(yyDollar[5].list, yyDollar[7].list)
			stmt.Opt = &ast.NodeList{Items: []ast.Node{opt}}
			stmt.Grantor = yyDollar[8].rolespec
			stmt.Behavior = yyDollar[9].dropBehav
			yyVAL.stmt = stmt
		}
	case 3019:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13251
		{
			yyVAL.stmt = ast.NewAlterDefaultPrivilegesStmt(yyDollar[4].list, yyDollar[5].node.(*ast.GrantStmt))
		}
	case 3020:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13257
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3021:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13258
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 3022:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13263
		{
			yyVAL.defelt = ast.NewDefElem("schemas", yyDollar[3].list)
		}
	case 3023:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13267
		{
			yyVAL.defelt = ast.NewDefElem("roles", yyDollar[3].list)
		}
	case 3024:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13271
		{
			yyVAL.defelt = ast.NewDefElem("roles", yyDollar[3].list)
		}
	case 3025:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13283
		{
			n := ast.NewGrantStmt(ast.ObjectType(yyDollar[4].ival), nil, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.GrantOption = yyDollar[7].bval
			yyVAL.node = n
		}
	case 3026:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13291
		{
			n := ast.NewRevokeStmt(ast.ObjectType(yyDollar[4].ival), nil, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.Behavior = yyDollar[7].dropBehav
			yyVAL.node = n
		}
	case 3027:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:13299
		{
			n := ast.NewRevokeStmt(ast.ObjectType(yyDollar[7].ival), nil, yyDollar[5].list, yyDollar[9].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.GrantOption = true
			n.Behavior = yyDollar[10].dropBehav
			yyVAL.node = n
		}
	case 3028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13309
		{
			yyVAL.ival = int(ast.OBJECT_TABLE)
		}
	case 3029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13310
		{
			yyVAL.ival = int(ast.OBJECT_FUNCTION)
		}
	case 3030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13311
		{
			yyVAL.ival = int(ast.OBJECT_FUNCTION)
		}
	case 3031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13312
		{
			yyVAL.ival = int(ast.OBJECT_SEQUENCE)
		}
	case 3032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13313
		{
			yyVAL.ival = int(ast.OBJECT_TYPE)
		}
	case 3033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13314
		{
			yyVAL.ival = int(ast.OBJECT_SCHEMA)
		}
	case 3034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13319
		{
			yyVAL.list = yyDollar[1].list
		}
	case 3035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13321
		{
			yyVAL.list = nil
		}
	case 3036:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13323
		{
			yyVAL.list = nil
		}
	case 3037:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13325
		{
			ap := ast.NewAccessPriv("", yyDollar[3].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 3038:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13330
		{
			ap := ast.NewAccessPriv("", yyDollar[4].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 3039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13336
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].accesspriv)
		}
	case 3040:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13337
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].accesspriv)
			yyVAL.list = yyDollar[1].list
		}
	case 3041:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13341
		{
			yyVAL.accesspriv = ast.NewAccessPriv("SELECT", yyDollar[2].list)
		}
	case 3042:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13345
		{
			yyVAL.accesspriv = ast.NewAccessPriv("REFERENCES", yyDollar[2].list)
		}
	case 3043:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13349
		{
			yyVAL.accesspriv = ast.NewAccessPriv("CREATE", yyDollar[2].list)
		}
	case 3044:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13353
		{
			yyVAL.accesspriv = ast.NewAccessPriv("ALTER SYSTEM", nil)
		}
	case 3045:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13357
		{
			yyVAL.accesspriv = ast.NewAccessPriv(yyDollar[1].str, yyDollar[2].list)
		}
	case 3046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13367
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[1].list,
			}
		}
	case 3047:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13375
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[2].list,
			}
		}
	case 3048:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13383
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[2].list,
			}
		}
	case 3049:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13391
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FDW,
				objs:     yyDollar[4].list,
			}
		}
	case 3050:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13399
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FOREIGN_SERVER,
				objs:     yyDollar[3].list,
			}
		}
	case 3051:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13407
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[2].list,
			}
		}
	case 3052:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13415
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[2].list,
			}
		}
	case 3053:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13423
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[2].list,
			}
		}
	case 3054:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13431
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DATABASE,
				objs:     yyDollar[2].list,
			}
		}
	case 3055:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13439
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DOMAIN,
				objs:     yyDollar[2].list,
			}
		}
	case 3056:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13447
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LANGUAGE,
				objs:     yyDollar[2].list,
			}
		}
	case 3057:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13455
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LARGEOBJECT,
				objs:     yyDollar[3].list,
			}
		}
	case 3058:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13463
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PARAMETER_ACL,
				objs:     yyDollar[2].list,
			}
		}
	case 3059:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13471
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SCHEMA,
				objs:     yyDollar[2].list,
			}
		}
	case 3060:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13479
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLESPACE,
				objs:     yyDollar[2].list,
			}
		}
	case 3061:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13487
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TYPE,
				objs:     yyDollar[2].list,
			}
		}
	case 3062:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13495
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[5].list,
			}
		}
	case 3063:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13503
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[5].list,
			}
		}
	case 3064:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13511
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[5].list,
			}
		}
	case 3065:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13519
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[5].list,
			}
		}
	case 3066:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13527
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[5].list,
			}
		}
	case 3067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13538
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rolespec)
		}
	case 3068:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13539
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 3069:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13543
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 3070:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13544
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 3071:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13549
		{
			yyVAL.bval = true
		}
	case 3072:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13550
		{
			yyVAL.bval = false
		}
	case 3073:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13554
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13555
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3075:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13560
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 3076:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13566
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 3077:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13567
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 3078:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13568
		{
			yyVAL.node = ast.NewBoolean(false)
		}
	case 3079:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13571
		{
			yyVAL.rolespec = yyDollar[3].rolespec
		}
	case 3080:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13572
		{
			yyVAL.rolespec = nil
		}
	case 3081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13577
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 3082:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13581
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 3083:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13589
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3084:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13593
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 3085:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13598
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 3086:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13599
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 3087:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13603
		{
			n := ast.NewRangeTableSample(nil, yyDollar[2].list, yyDollar[4].list, yyDollar[6].node, 0)
			yyVAL.node = n
		}
	case 3088:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13611
		{
			yyVAL.node = yyDollar[3].node
		}
	case 3089:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13615
		{
			yyVAL.node = nil
		}
	case 3090:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13629
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_FUNCTION, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3091:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13634
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_PROCEDURE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3092:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13639
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_ROUTINE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3093:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13647
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3094:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13648
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3095:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13654
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 3096:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13658
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 3097:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13662
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 3098:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13666
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 3099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13670
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 3100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13674
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 3101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13678
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 3102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13682
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 3103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13686
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 3104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13690
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 3105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13694
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 3106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13698
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 3107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13702
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 3108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13706
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 3109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13710
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 3110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13714
		{
			/* we abuse the normal content of a DefElem here */
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 3111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13719
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 3112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13725
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13726
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13731
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13735
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 3116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13739
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13745
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 3118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13746
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 3119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13747
		{
			yyVAL.node = yyDollar[1].list
		}
	case 3120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13748
		{
			yyVAL.node = yyDollar[1].node
		}
	case 3121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13749
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 3124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13760
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = yyDollar[1].list
			n.Objargs = ast.ExtractArgTypes(yyDollar[2].list)
			n.ObjfuncArgs = yyDollar[2].list
			yyVAL.objwithargs = n
		}
	case 3125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13773
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13780
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13787
		{
			n := ast.NewEmptyObjectWithArgs()
			nameList := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			// Append indirection elements
			for i := 0; i < yyDollar[2].list.Len(); i++ {
				nameList.Append(yyDollar[2].list.Items[i])
			}
			n.Objname = nameList
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13801
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 3129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13803
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 3130:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13815
		{
			n := ast.NewAlterTypeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 3131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13823
		{
			relation, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error("invalid type name")
				return 1
			}
			n := ast.NewAlterTableStmt(relation, yyDollar[4].list)
			n.Objtype = ast.OBJECT_TYPE // Mark this as a composite type alteration
			yyVAL.stmt = n
		}
	case 3132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13836
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 3133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13837
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 3134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13843
		{
			n := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			n.Behavior = yyDollar[4].dropBehav
			yyVAL.node = n
		}
	case 3135:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13850
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			yyVAL.node = n
		}
	case 3136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13858
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			yyVAL.node = n
		}
	case 3137:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:13866
		{
			def := ast.NewColumnDef(yyDollar[3].str, yyDollar[6].typnam, -1)
			n := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, def)
			n.Behavior = yyDollar[8].dropBehav
			/* We only use these fields of the ColumnDef node */
			def.TypeName = yyDollar[6].typnam
			if collClause, ok := yyDollar[7].node.(*ast.CollateClause); ok {
				def.Collclause = collClause
			}
			def.RawDefault = nil
			yyVAL.node = n
		}
	case 3138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13887
		{
			yyVAL.ival = int(ast.CMD_SELECT)
		}
	case 3139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13888
		{
			yyVAL.ival = int(ast.CMD_UPDATE)
		}
	case 3140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13889
		{
			yyVAL.ival = int(ast.CMD_DELETE)
		}
	case 3141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13890
		{
			yyVAL.ival = int(ast.CMD_INSERT)
		}
	case 3142:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13900
		{
			yyVAL.stmt = ast.NewDeclareCursorStmt(yyDollar[2].str, yyDollar[3].ival|yyDollar[5].ival|ast.CURSOR_OPT_FAST_PLAN, yyDollar[7].stmt)
		}
	case 3143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13907
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_BINARY
		}
	case 3144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13911
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_INSENSITIVE
		}
	case 3145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13915
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_ASENSITIVE
		}
	case 3146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13919
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_SCROLL
		}
	case 3147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13923
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_NO_SCROLL
		}
	case 3148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13926
		{
			yyVAL.ival = 0
		}
	case 3149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13929
		{
			yyVAL.ival = ast.CURSOR_OPT_HOLD
		}
	case 3150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13930
		{
			yyVAL.ival = 0
		}
	case 3151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13931
		{
			yyVAL.ival = 0
		}
	case 3152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13935
		{
			stmt := yyDollar[2].stmt.(*ast.FetchStmt)
			stmt.IsMove = false
			yyVAL.stmt = stmt
		}
	case 3153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13941
		{
			stmt := yyDollar[2].stmt.(*ast.FetchStmt)
			stmt.IsMove = true
			yyVAL.stmt = stmt
		}
	case 3154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13949
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[1].str, false)
		}
	case 3155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13953
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[2].str, false)
		}
	case 3156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13957
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[3].str, false)
		}
	case 3157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13961
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, 1, yyDollar[3].str, false)
		}
	case 3158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13965
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, 1, yyDollar[3].str, false)
		}
	case 3159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13969
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, -1, yyDollar[3].str, false)
		}
	case 3160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13973
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13977
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_RELATIVE, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13981
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, int64(yyDollar[1].ival), yyDollar[3].str, false)
		}
	case 3163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13985
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, ast.FETCH_ALL, yyDollar[3].str, false)
		}
	case 3164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13989
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[3].str, false)
		}
	case 3165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13993
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13997
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, ast.FETCH_ALL, yyDollar[4].str, false)
		}
	case 3167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14001
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, 1, yyDollar[3].str, false)
		}
	case 3168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14005
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14009
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, ast.FETCH_ALL, yyDollar[4].str, false)
		}
	case 3170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14014
		{
			yyVAL.ival = 0
		}
	case 3171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14015
		{
			yyVAL.ival = 0
		}
	case 3172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14019
		{
			yyVAL.ival = 0
		}
	case 3173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14020
		{
			yyVAL.ival = 0
		}
	case 3174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14025
		{
			name := yyDollar[2].str
			yyVAL.stmt = ast.NewClosePortalStmt(&name)
		}
	case 3175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14030
		{
			yyVAL.stmt = ast.NewClosePortalStmt(nil)
		}
	case 3176:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14042
		{
			yyVAL.stmt = ast.NewPrepareStmt(yyDollar[2].str, yyDollar[3].list, yyDollar[5].stmt)
		}
	case 3177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14049
		{
			yyVAL.list = yyDollar[2].list
		}
	case 3178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14052
		{
			yyVAL.list = nil
		}
	case 3179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14056
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14057
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14058
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14059
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14060
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14064
		{
			yyVAL.stmt = ast.NewExecuteStmt(yyDollar[2].str, yyDollar[3].list)
		}
	case 3185:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14068
		{
			executeStmt := ast.NewExecuteStmt(yyDollar[7].str, yyDollar[8].list)
			ctas := ast.NewCreateTableAsStmt(executeStmt, yyDollar[4].into, ast.OBJECT_TABLE, false, false)
			// Set relpersistence from OptTemp (following PostgreSQL pattern)
			yyDollar[4].into.Rel.RelPersistence = yyDollar[2].rune
			// Set skipData from opt_with_data (following PostgreSQL pattern)
			yyDollar[4].into.SkipData = !yyDollar[9].bval
			yyVAL.stmt = ctas
		}
	case 3186:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:14078
		{
			executeStmt := ast.NewExecuteStmt(yyDollar[10].str, yyDollar[11].list)
			ctas := ast.NewCreateTableAsStmt(executeStmt, yyDollar[7].into, ast.OBJECT_TABLE, false, true)
			// Set relpersistence from OptTemp (following PostgreSQL pattern)
			yyDollar[7].into.Rel.RelPersistence = yyDollar[2].rune
			// Set skipData from opt_with_data (following PostgreSQL pattern)
			yyDollar[7].into.SkipData = !yyDollar[12].bval
			yyVAL.stmt = ctas
		}
	case 3187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14091
		{
			yyVAL.list = yyDollar[2].list
		}
	case 3188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14094
		{
			yyVAL.list = nil
		}
	case 3189:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14100
		{
			into := ast.NewIntoClause(yyDollar[1].rangevar, yyDollar[2].list, yyDollar[3].str, yyDollar[4].list, yyDollar[5].oncommit, yyDollar[6].str, nil, false, 0)
			yyVAL.into = into
		}
	case 3190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14108
		{
			yyVAL.stmt = ast.NewDeallocateStmt(yyDollar[2].str)
		}
	case 3191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14112
		{
			yyVAL.stmt = ast.NewDeallocateStmt(yyDollar[3].str)
		}
	case 3192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14116
		{
			yyVAL.stmt = ast.NewDeallocateAllStmt()
		}
	case 3193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14120
		{
			yyVAL.stmt = ast.NewDeallocateAllStmt()
		}
	case 3194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14131
		{
			yyVAL.stmt = ast.NewListenStmt(yyDollar[2].str)
		}
	case 3195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14142
		{
			yyVAL.stmt = ast.NewUnlistenStmt(yyDollar[2].str)
		}
	case 3196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14146
		{
			yyVAL.stmt = ast.NewUnlistenAllStmt()
		}
	case 3197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14157
		{
			yyVAL.stmt = ast.NewNotifyStmt(yyDollar[2].str, yyDollar[3].str)
		}
	case 3198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14167
		{
			yyVAL.str = yyDollar[2].str
		}
	case 3199:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14168
		{
			yyVAL.str = ""
		}
	case 3200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14177
		{
			yyVAL.stmt = ast.NewLoadStmt(yyDollar[2].str)
		}
	case 3201:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14188
		{
			stmt := ast.NewLockStmt(yyDollar[3].list, ast.LockMode(yyDollar[4].ival))
			stmt.Nowait = yyDollar[5].bval
			yyVAL.stmt = stmt
		}
	case 3202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14200
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 3203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14201
		{
			yyVAL.ival = int(ast.AccessExclusiveLock)
		}
	case 3204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14205
		{
			yyVAL.ival = int(ast.AccessShareLock)
		}
	case 3205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14206
		{
			yyVAL.ival = int(ast.RowShareLock)
		}
	case 3206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14207
		{
			yyVAL.ival = int(ast.RowExclusiveLock)
		}
	case 3207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14208
		{
			yyVAL.ival = int(ast.ShareUpdateExclusiveLock)
		}
	case 3208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14209
		{
			yyVAL.ival = int(ast.ShareLock)
		}
	case 3209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14210
		{
			yyVAL.ival = int(ast.ShareRowExclusiveLock)
		}
	case 3210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14211
		{
			yyVAL.ival = int(ast.ExclusiveLock)
		}
	case 3211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14212
		{
			yyVAL.ival = int(ast.AccessExclusiveLock)
		}
	case 3212:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14221
		{
			stmt := ast.NewTruncateStmt(yyDollar[3].list)
			stmt.RestartSeqs = yyDollar[4].bval
			stmt.Behavior = yyDollar[5].dropBehav
			yyVAL.stmt = stmt
		}
	case 3213:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14235
		{
			yyVAL.stmt = ast.NewCommentStmt(yyDollar[3].objType, yyDollar[4].list, yyDollar[6].str)
		}
	case 3214:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14239
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_COLUMN, yyDollar[4].list, yyDollar[6].str)
		}
	case 3215:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14243
		{
			yyVAL.stmt = ast.NewCommentStmt(yyDollar[3].objType, ast.NewString(yyDollar[4].str), yyDollar[6].str)
		}
	case 3216:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14247
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_TYPE, yyDollar[4].typnam, yyDollar[6].str)
		}
	case 3217:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14251
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_DOMAIN, yyDollar[4].typnam, yyDollar[6].str)
		}
	case 3218:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14255
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_AGGREGATE, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3219:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14259
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_FUNCTION, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3220:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14263
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_OPERATOR, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3221:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14267
		{
			// For table constraints, append constraint name to table name list
			newObj := yyDollar[6].list
			newObj.Append(ast.NewString(yyDollar[4].str))
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_TABCONSTRAINT, newObj, yyDollar[8].str)
		}
	case 3222:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14274
		{
			// For domain constraints, we need a list of [TypeName, constraint_name]
			// This matches PostgreSQL's approach where they comment:
			// "should use Typename not any_name in the production, but
			// there's a shift/reduce conflict if we do that, so fix it up here."
			objList := ast.NewNodeList()
			objList.Append(makeTypeNameFromNodeList(yyDollar[7].list)) // Convert any_name to TypeName
			objList.Append(ast.NewString(yyDollar[4].str))             // Add constraint name
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_DOMCONSTRAINT, objList, yyDollar[9].str)
		}
	case 3223:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14285
		{
			// For object types that need name ON any_name: append name to any_name list
			newObj := yyDollar[6].list
			newObj.Append(ast.NewString(yyDollar[4].str))
			yyVAL.stmt = ast.NewCommentStmt(yyDollar[3].objType, newObj, yyDollar[8].str)
		}
	case 3224:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14292
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_PROCEDURE, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3225:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14296
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_ROUTINE, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3226:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14300
		{
			// Transform: typename + language name
			transformObj := ast.NewNodeList()
			transformObj.Append(yyDollar[5].typnam)             // Typename
			transformObj.Append(ast.NewString(yyDollar[7].str)) // Language name
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_TRANSFORM, transformObj, yyDollar[9].str)
		}
	case 3227:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14308
		{
			// Operator class: access method + class name
			opclassObj := ast.NewNodeList()
			opclassObj.Append(ast.NewString(yyDollar[7].str)) // Access method name first
			for _, item := range yyDollar[5].list.Items {
				opclassObj.Append(item) // Class name parts
			}
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_OPCLASS, opclassObj, yyDollar[9].str)
		}
	case 3228:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14318
		{
			// Operator family: access method + family name
			opfamilyObj := ast.NewNodeList()
			opfamilyObj.Append(ast.NewString(yyDollar[7].str)) // Access method name first
			for _, item := range yyDollar[5].list.Items {
				opfamilyObj.Append(item) // Family name parts
			}
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_OPFAMILY, opfamilyObj, yyDollar[9].str)
		}
	case 3229:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14328
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_LARGEOBJECT, yyDollar[5].node, yyDollar[7].str)
		}
	case 3230:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:14332
		{
			// Cast: source type + target type
			castObj := ast.NewNodeList()
			castObj.Append(yyDollar[5].typnam) // Source typename
			castObj.Append(yyDollar[7].typnam) // Target typename
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_CAST, castObj, yyDollar[10].str)
		}
	case 3231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14346
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14347
		{
			yyVAL.str = ""
		}
	case 3233:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14356
		{
			yyVAL.stmt = ast.NewSecLabelStmt(yyDollar[5].objType, yyDollar[6].list, yyDollar[3].str, yyDollar[8].str)
		}
	case 3234:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14360
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_COLUMN, yyDollar[6].list, yyDollar[3].str, yyDollar[8].str)
		}
	case 3235:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14364
		{
			yyVAL.stmt = ast.NewSecLabelStmt(yyDollar[5].objType, ast.NewString(yyDollar[6].str), yyDollar[3].str, yyDollar[8].str)
		}
	case 3236:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14368
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_TYPE, yyDollar[6].typnam, yyDollar[3].str, yyDollar[8].str)
		}
	case 3237:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14372
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_DOMAIN, yyDollar[6].typnam, yyDollar[3].str, yyDollar[8].str)
		}
	case 3238:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14376
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_AGGREGATE, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3239:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14380
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_FUNCTION, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3240:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14384
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_LARGEOBJECT, yyDollar[7].node, yyDollar[3].str, yyDollar[9].str)
		}
	case 3241:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14388
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_PROCEDURE, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3242:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14392
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_ROUTINE, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14402
		{
			yyVAL.str = yyDollar[2].str
		}
	case 3244:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14403
		{
			yyVAL.str = ""
		}
	case 3245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14407
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14408
		{
			yyVAL.str = ""
		}
	case 3247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14417
		{
			yyVAL.stmt = ast.NewDoStmt(yyDollar[2].list)
		}
	case 3248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14427
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14428
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Append(yyDollar[2].defelt)
		}
	case 3250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14433
		{
			yyVAL.defelt = ast.NewDefElem("as", ast.NewString(yyDollar[1].str))
		}
	case 3251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14437
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 3252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14448
		{
			yyVAL.stmt = ast.NewCallStmt(yyDollar[2].node.(*ast.FuncCall))
		}
	case 3253:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14461
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_AGGREGATE, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3254:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14468
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_COLLATION, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3255:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14475
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_CONVERSION, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3256:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14482
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_DOMAIN, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3257:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14489
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_EXTENSION, yyDollar[6].str)
			stmt.Object = ast.NewString(yyDollar[3].str)
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3258:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14496
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_FUNCTION, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3259:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14503
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_OPERATOR, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3260:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14510
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_OPCLASS, yyDollar[9].str)
			// Create list with access method name first, then class name
			objList := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				objList.Append(item)
			}
			stmt.Object = objList
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3261:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14522
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_OPFAMILY, yyDollar[9].str)
			// Create list with access method name first, then family name
			objList := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				objList.Append(item)
			}
			stmt.Object = objList
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3262:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14534
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_PROCEDURE, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3263:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14541
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_ROUTINE, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3264:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14548
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TABLE, yyDollar[6].str)
			stmt.Relation = yyDollar[3].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3265:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14555
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TABLE, yyDollar[8].str)
			stmt.Relation = yyDollar[5].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3266:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14562
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_STATISTIC_EXT, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3267:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14569
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSPARSER, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3268:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14576
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSDICTIONARY, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3269:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14583
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSTEMPLATE, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3270:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14590
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSCONFIGURATION, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3271:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14597
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_SEQUENCE, yyDollar[6].str)
			stmt.Relation = yyDollar[3].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3272:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14604
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_SEQUENCE, yyDollar[8].str)
			stmt.Relation = yyDollar[5].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3273:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14611
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_VIEW, yyDollar[6].str)
			stmt.Relation = yyDollar[3].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3274:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14618
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_VIEW, yyDollar[8].str)
			stmt.Relation = yyDollar[5].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3275:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14625
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_MATVIEW, yyDollar[7].str)
			stmt.Relation = yyDollar[4].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3276:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14632
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_MATVIEW, yyDollar[9].str)
			stmt.Relation = yyDollar[6].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3277:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14639
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_FOREIGN_TABLE, yyDollar[7].str)
			stmt.Relation = yyDollar[4].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3278:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14646
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_FOREIGN_TABLE, yyDollar[9].str)
			stmt.Relation = yyDollar[6].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3279:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14653
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TYPE, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3280:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14669
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3281:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14678
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3282:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14687
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3283:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14696
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_DATABASE,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3284:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14705
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3285:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14714
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3286:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14723
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newowner:   yyDollar[7].rolespec,
			}
		}
	case 3287:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14732
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_LARGEOBJECT,
				Object:     yyDollar[4].node,
				Newowner:   yyDollar[7].rolespec,
			}
		}
	case 3288:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14741
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_OPERATOR,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3289:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14750
		{
			list := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newowner:   yyDollar[9].rolespec,
			}
		}
	case 3290:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14763
		{
			list := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newowner:   yyDollar[9].rolespec,
			}
		}
	case 3291:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14776
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3292:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14785
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3293:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14794
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_SCHEMA,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3294:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14803
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3295:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14812
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TABLESPACE,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3296:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14821
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3297:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14830
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newowner:   yyDollar[8].rolespec,
			}
		}
	case 3298:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14839
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newowner:   yyDollar[8].rolespec,
			}
		}
	case 3299:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14848
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newowner:   yyDollar[8].rolespec,
			}
		}
	case 3300:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14857
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3301:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14866
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newowner:   yyDollar[7].rolespec,
			}
		}
	case 3302:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14875
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3303:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14884
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3304:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14902
		{
			yyVAL.stmt = ast.NewAlterOperatorStmt(yyDollar[3].objwithargs, yyDollar[6].list)
		}
	case 3305:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14915
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_FUNCTION, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Object = yyDollar[3].objwithargs
			yyVAL.stmt = stmt
		}
	case 3306:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14921
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_PROCEDURE, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Object = yyDollar[3].objwithargs
			yyVAL.stmt = stmt
		}
	case 3307:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14927
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_ROUTINE, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Object = yyDollar[3].objwithargs
			yyVAL.stmt = stmt
		}
	case 3308:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:14933
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_TRIGGER, ast.NewString(yyDollar[10].str), yyDollar[6].bval)
			stmt.Relation = yyDollar[5].rangevar
			stmt.Object = ast.NewString(yyDollar[3].str)
			yyVAL.stmt = stmt
		}
	case 3309:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14940
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_MATVIEW, ast.NewString(yyDollar[9].str), yyDollar[5].bval)
			stmt.Relation = yyDollar[4].rangevar
			yyVAL.stmt = stmt
		}
	case 3310:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14946
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_INDEX, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Relation = yyDollar[3].rangevar
			yyVAL.stmt = stmt
		}
	case 3311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14953
		{
			yyVAL.bval = true
		}
	case 3312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14954
		{
			yyVAL.bval = false
		}
	case 3313:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14965
		{
			yyVAL.stmt = ast.NewAlterCollationStmt(yyDollar[3].list)
		}
	case 3314:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14978
		{
			yyVAL.stmt = ast.NewAlterDatabaseStmt(yyDollar[3].str, yyDollar[5].list)
		}
	case 3315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14982
		{
			yyVAL.stmt = ast.NewAlterDatabaseStmt(yyDollar[3].str, yyDollar[4].list)
		}
	case 3316:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14986
		{
			optList := ast.NewNodeList()
			optList.Append(ast.NewDefElem("tablespace", ast.NewString(yyDollar[6].str)))
			yyVAL.stmt = ast.NewAlterDatabaseStmt(yyDollar[3].str, optList)
		}
	case 3317:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14992
		{
			yyVAL.stmt = ast.NewAlterDatabaseRefreshCollStmt(yyDollar[3].str)
		}
	case 3318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14998
		{
			yyVAL.list = yyDollar[1].list
		}
	case 3319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14999
		{
			yyVAL.list = nil
		}
	case 3320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15003
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:15004
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:15009
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, ast.NewInteger(yyDollar[3].ival))
		}
	case 3323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:15013
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, ast.NewString(yyDollar[3].str))
		}
	case 3324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:15017
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15023
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:15024
		{
			yyVAL.str = "connection_limit"
		}
	case 3327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15025
		{
			yyVAL.str = "encoding"
		}
	case 3328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15026
		{
			yyVAL.str = "location"
		}
	case 3329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15027
		{
			yyVAL.str = "owner"
		}
	case 3330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15028
		{
			yyVAL.str = "tablespace"
		}
	case 3331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15029
		{
			yyVAL.str = "template"
		}
	case 3332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15032
		{
		}
	case 3333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:15033
		{
		}
	case 3334:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:15038
		{
			yyVAL.stmt = ast.NewAlterDatabaseSetStmt(yyDollar[3].str, yyDollar[4].vsetstmt)
		}
	case 3335:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:15051
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_ADD_MAPPING, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			stmt.Dicts = yyDollar[11].list
			stmt.Override = false
			stmt.Replace = false
			yyVAL.stmt = stmt
		}
	case 3336:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:15060
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			stmt.Dicts = yyDollar[11].list
			stmt.Override = true
			stmt.Replace = false
			yyVAL.stmt = stmt
		}
	case 3337:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:15069
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_REPLACE_DICT, yyDollar[5].list)
			stmt.Tokentype = nil
			// Create a list with two elements: old dict and new dict
			stmt.Dicts = ast.NewNodeList()
			stmt.Dicts.Append(yyDollar[9].list)
			stmt.Dicts.Append(yyDollar[11].list)
			stmt.Override = false
			stmt.Replace = true
			yyVAL.stmt = stmt
		}
	case 3338:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:15081
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			// Create a list with two elements: old dict and new dict
			stmt.Dicts = ast.NewNodeList()
			stmt.Dicts.Append(yyDollar[11].list)
			stmt.Dicts.Append(yyDollar[13].list)
			stmt.Override = false
			stmt.Replace = true
			yyVAL.stmt = stmt
		}
	case 3339:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:15093
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_DROP_MAPPING, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3340:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:15100
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_DROP_MAPPING, yyDollar[5].list)
			stmt.Tokentype = yyDollar[11].list
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3343:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15121
		{
			yyVAL.stmt = ast.NewAlterTSDictionaryStmt(yyDollar[5].list, yyDollar[6].list)
		}
	case 3344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:15131
		{
			yyVAL.bval = false
		}
	case 3345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:15132
		{
			yyVAL.bval = true
		}
	case 3346:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:15133
		{
			yyVAL.bval = false
		}
	}
	goto yystack /* stack new state and value */
}
