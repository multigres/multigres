// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
	"strings"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// SelectLimit - Private struct for the result of opt_select_limit production
// Mirrors PostgreSQL's SelectLimit from gram.y:126-132
type selectLimit struct {
	limitOffset ast.Node
	limitCount  ast.Node
	limitOption ast.LimitOption
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// PrivTarget - represents a privilege target for GRANT/REVOKE statements
// Internal struct for handling privilege_target grammar rule
type PrivTarget struct {
	targtype ast.GrantTargetType
	objtype  ast.ObjectType
	objs     *ast.NodeList
}

// ImportQual - Private struct for the result of import_qualification production
// Matches PostgreSQL's ImportQual from gram.y
type ImportQual struct {
	typ        ast.ImportForeignSchemaType
	tableNames *ast.NodeList
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:58
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node        ast.Node
	stmt        ast.Stmt
	stmtList    []ast.Stmt
	list        *ast.NodeList
	groupClause *ast.GroupClause
	selectLimit *selectLimit

	// Specific AST node types
	into                *ast.IntoClause
	onconflict          *ast.OnConflictClause
	windef              *ast.WindowDef
	createStmt          *ast.CreateStmt
	createAsStmt        *ast.CreateTableAsStmt
	createAssertionStmt *ast.CreateAssertionStmt
	ruleStmt            *ast.RuleStmt
	indexStmt           *ast.IndexStmt
	alterStmt           *ast.AlterTableStmt
	dropStmt            *ast.DropStmt
	columnDef           *ast.ColumnDef
	constraint          *ast.Constraint
	indexElem           *ast.IndexElem
	alterCmd            *ast.AlterTableCmd
	with                *ast.WithClause
	rangevar            *ast.RangeVar
	objType             ast.ObjectType
	dropBehav           ast.DropBehavior
	setquant            ast.SetQuantifier
	typnam              *ast.TypeName
	partspec            *ast.PartitionSpec
	partboundspec       *ast.PartitionBoundSpec
	oncommit            ast.OnCommitAction
	defelt              *ast.DefElem
	target              *ast.ResTarget            // For select targets, insert columns
	alias               *ast.Alias                // For table and column aliases
	jtype               ast.JoinType              // For join type specifications
	jexpr               *ast.JoinExpr             // For joined table expressions
	keyaction           *ast.KeyAction            // For foreign key actions
	keyactions          *ast.KeyActions           // For foreign key action sets
	funparam            *ast.FunctionParameter    // For function parameters
	funparammode        ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt            *ast.VariableSetStmt      // For SET/RESET statements
	rolespec            *ast.RoleSpec
	objwithargs         *ast.ObjectWithArgs
	statelem            *ast.StatsElem
	accesspriv          *ast.AccessPriv             // For privilege specifications
	privtarget          *PrivTarget                 // For privilege target specifications
	vacrel              *ast.VacuumRelation         // For vacuum relation specifications
	importqual          *ImportQual                 // For import qualification specifications
	importqualtype      ast.ImportForeignSchemaType // For import qualification type

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const VALUES = 57428
const SEARCH = 57429
const BREADTH = 57430
const DEPTH = 57431
const CYCLE = 57432
const FIRST_P = 57433
const LAST_P = 57434
const SET = 57435
const ASC = 57436
const DESC = 57437
const INSERT = 57438
const UPDATE = 57439
const DELETE_P = 57440
const MERGE = 57441
const RETURNING = 57442
const CONFLICT = 57443
const OVERRIDING = 57444
const USER = 57445
const SYSTEM_P = 57446
const MATCHED = 57447
const THEN = 57448
const SOURCE = 57449
const TARGET = 57450
const DO = 57451
const NOTHING = 57452
const COPY = 57453
const PROGRAM = 57454
const STDIN = 57455
const STDOUT = 57456
const BINARY = 57457
const FREEZE = 57458
const CONSTRAINT = 57459
const VERBOSE = 57460
const ANALYZE = 57461
const CURRENT_P = 57462
const CURSOR = 57463
const OF = 57464
const COLUMNS = 57465
const ORDINALITY = 57466
const XMLTABLE = 57467
const JSON_TABLE = 57468
const ROWS = 57469
const PATH = 57470
const PASSING = 57471
const FOR = 57472
const NESTED = 57473
const REF_P = 57474
const XMLNAMESPACES = 57475
const ARRAY = 57476
const ERROR = 57477
const ERROR_P = 57478
const EMPTY = 57479
const EMPTY_P = 57480
const OBJECT_P = 57481
const WRAPPER = 57482
const CONDITIONAL = 57483
const UNCONDITIONAL = 57484
const QUOTES = 57485
const OMIT = 57486
const KEEP = 57487
const SCALAR = 57488
const STRING_P = 57489
const ENCODING = 57490
const DELIMITER = 57491
const DELIMITERS = 57492
const HEADER_P = 57493
const QUOTE = 57494
const FORCE = 57495
const CSV = 57496
const VALUE_P = 57497
const JSON_QUERY = 57498
const JSON_VALUE = 57499
const JSON_SERIALIZE = 57500
const JSON_OBJECT = 57501
const JSON_ARRAY = 57502
const JSON_OBJECTAGG = 57503
const JSON_ARRAYAGG = 57504
const JSON_EXISTS = 57505
const JSON_SCALAR = 57506
const FORMAT = 57507
const JSON = 57508
const UTF8 = 57509
const WITHOUT = 57510
const BIT = 57511
const NUMERIC = 57512
const INTEGER = 57513
const SMALLINT = 57514
const BIGINT = 57515
const REAL = 57516
const FLOAT_P = 57517
const DOUBLE_P = 57518
const PRECISION = 57519
const CHARACTER = 57520
const CHAR_P = 57521
const VARCHAR = 57522
const NATIONAL = 57523
const NCHAR = 57524
const VARYING = 57525
const TIMESTAMP = 57526
const INTERVAL = 57527
const INT_P = 57528
const DECIMAL_P = 57529
const DEC = 57530
const BOOLEAN_P = 57531
const VARIADIC = 57532
const ABORT_P = 57533
const ABSENT = 57534
const ABSOLUTE_P = 57535
const ACCESS = 57536
const ACTION = 57537
const ADD_P = 57538
const ADMIN = 57539
const AFTER = 57540
const AGGREGATE = 57541
const ALSO = 57542
const ALWAYS = 57543
const ASSERTION = 57544
const ANALYSE = 57545
const ASENSITIVE = 57546
const ASSIGNMENT = 57547
const ATOMIC = 57548
const ATTACH = 57549
const ATTRIBUTE = 57550
const AUTHORIZATION = 57551
const BACKWARD = 57552
const BEFORE = 57553
const BEGIN_P = 57554
const CACHE = 57555
const CALL = 57556
const CALLED = 57557
const CASCADED = 57558
const CATALOG_P = 57559
const CHAIN = 57560
const CHARACTERISTICS = 57561
const CHECKPOINT = 57562
const CLASS = 57563
const CLOSE = 57564
const CLUSTER = 57565
const COALESCE = 57566
const COLLATION = 57567
const COMMENT = 57568
const COMMENTS = 57569
const COMMIT = 57570
const COMMITTED = 57571
const COMPRESSION = 57572
const CONFIGURATION = 57573
const CONNECTION = 57574
const CONSTRAINTS = 57575
const CONTENT_P = 57576
const CONTINUE_P = 57577
const CONVERSION_P = 57578
const COST = 57579
const CUBE = 57580
const CURRENT_CATALOG = 57581
const CURRENT_DATE = 57582
const CURRENT_ROLE = 57583
const CURRENT_SCHEMA = 57584
const CURRENT_TIME = 57585
const CURRENT_TIMESTAMP = 57586
const CURRENT_USER = 57587
const DATA_P = 57588
const DATABASE = 57589
const DAY_P = 57590
const DEALLOCATE = 57591
const DECLARE = 57592
const DEFAULTS = 57593
const DEFERRABLE = 57594
const DEFERRED = 57595
const DEFINER = 57596
const DEPENDS = 57597
const DETACH = 57598
const DICTIONARY = 57599
const DISABLE_P = 57600
const DISCARD = 57601
const DOCUMENT_P = 57602
const DOMAIN_P = 57603
const EACH = 57604
const ELSE = 57605
const ENABLE_P = 57606
const ENCRYPTED = 57607
const END_P = 57608
const ENUM_P = 57609
const EVENT = 57610
const EXCEPT = 57611
const EXCLUDE = 57612
const EXCLUDING = 57613
const EXCLUSIVE = 57614
const EXECUTE = 57615
const EXPLAIN = 57616
const EXPRESSION = 57617
const EXTENSION = 57618
const EXTERNAL = 57619
const EXTRACT = 57620
const FAMILY = 57621
const FETCH = 57622
const FILTER = 57623
const FINALIZE = 57624
const FOLLOWING = 57625
const FOREIGN = 57626
const FORWARD = 57627
const FUNCTION = 57628
const FUNCTIONS = 57629
const GENERATED = 57630
const GLOBAL = 57631
const GRANT = 57632
const GRANTED = 57633
const GREATEST = 57634
const GROUPING = 57635
const GROUPS = 57636
const HANDLER = 57637
const HOLD = 57638
const HOUR_P = 57639
const IDENTITY_P = 57640
const IMMEDIATE = 57641
const IMMUTABLE = 57642
const IMPLICIT_P = 57643
const IMPORT_P = 57644
const INCLUDE = 57645
const INCLUDING = 57646
const INCREMENT = 57647
const INDENT = 57648
const INDEX = 57649
const INDEXES = 57650
const INHERIT = 57651
const INHERITS = 57652
const INITIALLY = 57653
const INLINE_P = 57654
const INPUT_P = 57655
const INSENSITIVE = 57656
const INSTEAD = 57657
const INTERSECT = 57658
const INVOKER = 57659
const ISOLATION = 57660
const KEYS = 57661
const LABEL = 57662
const LANGUAGE = 57663
const LARGE_P = 57664
const LATERAL_P = 57665
const LEAKPROOF = 57666
const LEAST = 57667
const LEADING = 57668
const LEVEL = 57669
const LISTEN = 57670
const LOAD = 57671
const LOCALTIME = 57672
const LOCALTIMESTAMP = 57673
const LOCATION = 57674
const LOCK_P = 57675
const LOCKED = 57676
const LOGGED = 57677
const MAPPING = 57678
const MATCH = 57679
const MAXVALUE = 57680
const MERGE_ACTION = 57681
const METHOD = 57682
const MINUTE_P = 57683
const MINVALUE = 57684
const MODE = 57685
const MONTH_P = 57686
const MOVE = 57687
const NAME_P = 57688
const NAMES = 57689
const NEW = 57690
const NEXT = 57691
const NFC = 57692
const NFD = 57693
const NFKC = 57694
const NFKD = 57695
const NO = 57696
const NONE = 57697
const NORMALIZE = 57698
const NORMALIZED = 57699
const NOTIFY = 57700
const NOWAIT = 57701
const NULLIF = 57702
const OUT_P = 57703
const OVERLAY = 57704
const OVERLAPS = 57705
const OWNED = 57706
const OWNER = 57707
const PARALLEL = 57708
const PARAMETER = 57709
const PARSER = 57710
const PARTIAL = 57711
const PARTITION = 57712
const PASSWORD = 57713
const PLACING = 57714
const PLAN = 57715
const PLANS = 57716
const POLICY = 57717
const POSITION = 57718
const PRECEDING = 57719
const PREPARE = 57720
const PREPARED = 57721
const PRESERVE = 57722
const PRIMARY = 57723
const PRIOR = 57724
const PRIVILEGES = 57725
const PROCEDURAL = 57726
const PROCEDURE = 57727
const PROCEDURES = 57728
const PUBLICATION = 57729
const RANGE = 57730
const READ = 57731
const REASSIGN = 57732
const RECHECK = 57733
const REFERENCES = 57734
const REFERENCING = 57735
const REFRESH = 57736
const REINDEX = 57737
const RELATIVE_P = 57738
const RELEASE = 57739
const RENAME = 57740
const REPEATABLE = 57741
const REPLICA = 57742
const RESET = 57743
const RESTART = 57744
const RETURN = 57745
const RETURNS = 57746
const REVOKE = 57747
const ROLE = 57748
const ROLLBACK = 57749
const ROLLUP = 57750
const ROUTINE = 57751
const ROUTINES = 57752
const ROW = 57753
const RULE = 57754
const SAVEPOINT = 57755
const SCHEMA = 57756
const SCHEMAS = 57757
const SCROLL = 57758
const SECOND_P = 57759
const SECURITY = 57760
const SEQUENCE = 57761
const SEQUENCES = 57762
const SERIALIZABLE = 57763
const SERVER = 57764
const SESSION = 57765
const SESSION_USER = 57766
const SETS = 57767
const SETOF = 57768
const SHARE = 57769
const SHOW = 57770
const SIMPLE = 57771
const SKIP = 57772
const SNAPSHOT = 57773
const SOME = 57774
const SQL_P = 57775
const STABLE = 57776
const STANDALONE_P = 57777
const START = 57778
const STATEMENT = 57779
const STATISTICS = 57780
const STORAGE = 57781
const STORED = 57782
const STRICT_P = 57783
const STRIP_P = 57784
const SUBSCRIPTION = 57785
const SUBSTRING = 57786
const SUPPORT = 57787
const SYSID = 57788
const SYSTEM_USER = 57789
const TABLES = 57790
const TABLESPACE = 57791
const TABLESAMPLE = 57792
const TEMP = 57793
const TEMPLATE = 57794
const TEMPORARY = 57795
const TEXT_P = 57796
const TIES = 57797
const TRAILING = 57798
const TRANSACTION = 57799
const TRANSFORM = 57800
const TREAT = 57801
const TRIGGER = 57802
const TRIM = 57803
const TRUNCATE = 57804
const TRUSTED = 57805
const TYPE_P = 57806
const TYPES_P = 57807
const UESCAPE = 57808
const UNBOUNDED = 57809
const UNCOMMITTED = 57810
const UNENCRYPTED = 57811
const UNION = 57812
const UNIQUE = 57813
const UNLISTEN = 57814
const UNLOGGED = 57815
const UNTIL = 57816
const VACUUM = 57817
const VALID = 57818
const VALIDATE = 57819
const VALIDATOR = 57820
const VERSION_P = 57821
const VIEW = 57822
const VIEWS = 57823
const VOLATILE = 57824
const WHITESPACE_P = 57825
const WINDOW = 57826
const WITHIN = 57827
const WORK = 57828
const WRITE = 57829
const XML_P = 57830
const XMLATTRIBUTES = 57831
const XMLCONCAT = 57832
const XMLELEMENT = 57833
const XMLEXISTS = 57834
const XMLFOREST = 57835
const XMLPARSE = 57836
const XMLPI = 57837
const XMLROOT = 57838
const XMLSERIALIZE = 57839
const YEAR_P = 57840
const YES_P = 57841
const INOUT = 57842
const OTHERS = 57843
const OLD = 57844
const KEY = 57845
const OFF = 57846
const OIDS = 57847
const OPTION = 57848
const OPTIONS = 57849
const OVER = 57850
const ORDER = 57851
const ANY = 57852
const BOTH = 57853
const CAST = 57854
const CHECK = 57855
const COLUMN = 57856
const FORMAT_LA = 57857
const NOT_LA = 57858
const NULLS_LA = 57859
const WITH_LA = 57860
const WITHOUT_LA = 57861
const MODE_TYPE_NAME = 57862
const MODE_PLPGSQL_EXPR = 57863
const MODE_PLPGSQL_ASSIGN1 = 57864
const MODE_PLPGSQL_ASSIGN2 = 57865
const MODE_PLPGSQL_ASSIGN3 = 57866
const UMINUS = 57867

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ASSERTION",
	"ANALYSE",
	"ASENSITIVE",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:15513

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 130,
	540, 130,
	-2, 1637,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 133,
	1, 1551,
	26, 1551,
	36, 1551,
	74, 1551,
	100, 1551,
	532, 1551,
	540, 1551,
	-2, 1555,
	-1, 136,
	67, 1965,
	84, 1965,
	85, 2713,
	236, 2898,
	307, 2132,
	419, 1965,
	480, 1965,
	-2, 143,
	-1, 177,
	68, 1554,
	69, 1554,
	130, 1554,
	269, 1554,
	280, 1554,
	316, 1554,
	470, 1554,
	509, 1554,
	-2, 1556,
	-1, 189,
	1, 130,
	540, 130,
	-2, 1637,
	-1, 233,
	85, 2712,
	-2, 1964,
	-1, 325,
	61, 351,
	64, 351,
	527, 351,
	533, 351,
	-2, 2754,
	-1, 768,
	85, 2713,
	-2, 1965,
	-1, 794,
	1, 354,
	540, 354,
	-2, 3227,
	-1, 795,
	1, 395,
	540, 395,
	-2, 3227,
	-1, 796,
	1, 286,
	540, 286,
	-2, 3227,
	-1, 797,
	1, 328,
	540, 328,
	-2, 3227,
	-1, 802,
	1, 290,
	540, 290,
	-2, 3227,
	-1, 803,
	1, 207,
	540, 207,
	-2, 3227,
	-1, 837,
	7, 1467,
	16, 1467,
	17, 1467,
	531, 1467,
	-2, 149,
	-1, 838,
	7, 1468,
	16, 1468,
	17, 1468,
	531, 1468,
	-2, 150,
	-1, 863,
	68, 1540,
	69, 1540,
	130, 1540,
	280, 1540,
	-2, 1557,
	-1, 869,
	68, 1541,
	69, 1541,
	130, 1541,
	280, 1541,
	-2, 1560,
	-1, 927,
	84, 1965,
	480, 1965,
	-2, 142,
	-1, 929,
	209, 131,
	-2, 2719,
	-1, 1016,
	531, 1469,
	-2, 3177,
	-1, 1037,
	93, 3034,
	398, 2168,
	401, 3034,
	-2, 2061,
	-1, 1041,
	93, 3034,
	398, 2168,
	401, 3034,
	-2, 2061,
	-1, 1123,
	531, 2061,
	-2, 2560,
	-1, 1224,
	74, 159,
	-2, 165,
	-1, 1308,
	68, 1540,
	69, 1540,
	130, 1540,
	280, 1540,
	-2, 1561,
	-1, 1362,
	7, 1258,
	531, 1258,
	-2, 532,
	-1, 1377,
	7, 583,
	16, 583,
	17, 583,
	531, 583,
	-2, 1306,
	-1, 1399,
	7, 1512,
	-2, 533,
	-1, 1407,
	7, 1482,
	-2, 516,
	-1, 1408,
	7, 1517,
	531, 1517,
	-2, 517,
	-1, 1409,
	7, 1489,
	-2, 518,
	-1, 1410,
	7, 1517,
	531, 1517,
	-2, 519,
	-1, 1411,
	7, 1517,
	531, 1517,
	-2, 520,
	-1, 1412,
	7, 1476,
	-2, 522,
	-1, 1413,
	7, 1476,
	-2, 523,
	-1, 1414,
	7, 1519,
	-2, 526,
	-1, 1415,
	7, 1479,
	-2, 530,
	-1, 1416,
	7, 1480,
	-2, 531,
	-1, 1418,
	7, 1517,
	531, 1517,
	-2, 547,
	-1, 1419,
	7, 1476,
	-2, 551,
	-1, 1420,
	7, 1483,
	-2, 556,
	-1, 1421,
	7, 1481,
	-2, 559,
	-1, 1422,
	7, 1515,
	-2, 561,
	-1, 1423,
	7, 1515,
	-2, 562,
	-1, 1424,
	7, 1500,
	531, 1500,
	-2, 566,
	-1, 1581,
	6, 2061,
	12, 2061,
	534, 2061,
	535, 2061,
	-2, 2054,
	-1, 1657,
	531, 1393,
	-2, 3179,
	-1, 1980,
	16, 1471,
	17, 1471,
	-2, 1392,
	-1, 2092,
	127, 2996,
	411, 2996,
	-2, 1131,
	-1, 2126,
	21, 1430,
	432, 1430,
	510, 1430,
	-2, 893,
	-1, 2128,
	21, 1432,
	432, 1432,
	510, 1432,
	-2, 840,
	-1, 2133,
	1, 709,
	26, 709,
	36, 709,
	64, 709,
	65, 709,
	68, 709,
	69, 709,
	71, 709,
	72, 709,
	73, 709,
	74, 709,
	100, 709,
	130, 709,
	269, 709,
	280, 709,
	316, 709,
	470, 709,
	484, 709,
	509, 709,
	515, 709,
	532, 709,
	540, 709,
	541, 709,
	-2, 1546,
	-1, 2138,
	21, 1524,
	432, 1524,
	510, 1524,
	-2, 1520,
	-1, 2595,
	68, 1555,
	69, 1555,
	130, 1555,
	269, 1555,
	280, 1555,
	316, 1555,
	470, 1555,
	509, 1555,
	-2, 1227,
	-1, 2604,
	7, 1393,
	531, 1393,
	-2, 1276,
	-1, 2734,
	117, 143,
	307, 2132,
	460, 143,
	-2, 1965,
	-1, 2787,
	536, 165,
	-2, 2550,
	-1, 2823,
	531, 2134,
	-2, 275,
	-1, 2900,
	40, 1476,
	134, 1476,
	509, 1476,
	527, 1476,
	529, 1476,
	532, 1476,
	541, 1476,
	-2, 1471,
	-1, 3114,
	531, 2061,
	-2, 2561,
	-1, 3257,
	36, 3001,
	66, 3001,
	-2, 557,
	-1, 3258,
	36, 3002,
	66, 3002,
	-2, 430,
	-1, 3264,
	127, 2999,
	411, 2999,
	-2, 1240,
	-1, 3265,
	127, 3000,
	411, 3000,
	-2, 1241,
	-1, 3281,
	1, 475,
	26, 475,
	36, 475,
	64, 475,
	65, 475,
	68, 475,
	69, 475,
	71, 475,
	72, 475,
	74, 475,
	100, 475,
	130, 475,
	269, 475,
	280, 475,
	316, 475,
	470, 475,
	484, 475,
	509, 475,
	515, 475,
	529, 475,
	532, 475,
	533, 475,
	540, 475,
	-2, 174,
	-1, 3282,
	1, 473,
	26, 473,
	36, 473,
	64, 473,
	65, 473,
	68, 473,
	69, 473,
	71, 473,
	72, 473,
	74, 473,
	100, 473,
	130, 473,
	269, 473,
	280, 473,
	316, 473,
	470, 473,
	484, 473,
	509, 473,
	515, 473,
	529, 473,
	532, 473,
	533, 473,
	540, 473,
	-2, 174,
	-1, 3285,
	1, 492,
	26, 492,
	36, 492,
	64, 492,
	65, 492,
	68, 492,
	69, 492,
	71, 492,
	72, 492,
	74, 492,
	100, 492,
	130, 492,
	269, 492,
	280, 492,
	316, 492,
	470, 492,
	484, 492,
	509, 492,
	515, 492,
	529, 492,
	532, 492,
	533, 492,
	540, 492,
	-2, 174,
	-1, 3299,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1144,
	-1, 3300,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1145,
	-1, 3301,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1146,
	-1, 3302,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1147,
	-1, 3303,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1148,
	-1, 3304,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1149,
	-1, 3308,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1156,
	-1, 3314,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1160,
	-1, 3359,
	363, 1420,
	-2, 1423,
	-1, 3438,
	68, 1555,
	69, 1555,
	130, 1555,
	269, 1555,
	280, 1555,
	316, 1555,
	470, 1555,
	509, 1555,
	-2, 1227,
	-1, 3561,
	209, 131,
	-2, 2719,
	-1, 3635,
	536, 166,
	-2, 2550,
	-1, 3748,
	507, 2635,
	-2, 2628,
	-1, 4074,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1158,
	-1, 4075,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1162,
	-1, 4081,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1164,
	-1, 4116,
	363, 1419,
	-2, 1422,
	-1, 4254,
	75, 1659,
	76, 1659,
	77, 1659,
	78, 1659,
	79, 1659,
	81, 1659,
	82, 1659,
	-2, 1555,
	-1, 4268,
	531, 1393,
	-2, 166,
	-1, 4274,
	150, 1899,
	-2, 1834,
	-1, 4468,
	6, 2061,
	12, 2061,
	534, 2061,
	535, 2061,
	-2, 2035,
	-1, 4702,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1157,
	-1, 4705,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1166,
	-1, 4708,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1161,
	-1, 4713,
	52, 0,
	53, 0,
	54, 0,
	-2, 1179,
	-1, 4720,
	21, 1429,
	432, 1429,
	510, 1429,
	-2, 1521,
	-1, 4724,
	363, 1421,
	-2, 1424,
	-1, 4755,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1209,
	-1, 4756,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1210,
	-1, 4757,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1211,
	-1, 4758,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1212,
	-1, 4759,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1213,
	-1, 4760,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1214,
	-1, 5195,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1159,
	-1, 5196,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1163,
	-1, 5200,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1165,
	-1, 5201,
	52, 0,
	53, 0,
	54, 0,
	-2, 1180,
	-1, 5204,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1181,
	-1, 5205,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1183,
	-1, 5328,
	540, 130,
	-2, 1637,
	-1, 5497,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1167,
	-1, 5498,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1182,
	-1, 5499,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1184,
	-1, 5507,
	52, 0,
	-2, 1217,
	-1, 5767,
	52, 0,
	-2, 1218,
	-1, 5954,
	37, 0,
	44, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 515,
	-1, 6180,
	532, 2708,
	540, 2708,
	-2, 1637,
	-1, 6269,
	540, 1551,
	-2, 1555,
	-1, 6303,
	7, 1784,
	-2, 352,
	-1, 6318,
	532, 2708,
	540, 2708,
	-2, 1637,
	-1, 6331,
	7, 1512,
	-2, 533,
}

const yyPrivate = 57344

const yyLast = 120363

var yyAct = [...]int16{
	740, 6300, 5782, 5772, 6353, 5964, 6354, 6148, 1327, 3396,
	3461, 5309, 4061, 1115, 4137, 6370, 6271, 4947, 3515, 5783,
	6301, 134, 980, 2590, 864, 5526, 874, 179, 113, 761,
	9, 5801, 4281, 5953, 5874, 5403, 1850, 3707, 5853, 3200,
	3464, 5318, 6031, 760, 8, 6014, 4452, 6136, 5750, 2700,
	6019, 2684, 5660, 4195, 5262, 5069, 4059, 6191, 3510, 6272,
	5903, 3500, 6104, 1569, 5802, 759, 7, 4854, 5751, 3966,
	6087, 5261, 4125, 5656, 5748, 5881, 5732, 4438, 5876, 2706,
	132, 3273, 5875, 4298, 5588, 5253, 5524, 1024, 5565, 5952,
	5129, 3570, 5926, 3477, 1484, 4631, 3955, 1052, 1873, 5402,
	1522, 4376, 5683, 4850, 5637, 5325, 4278, 1898, 3666, 4379,
	3562, 3522, 4263, 3702, 3421, 1252, 4921, 5070, 5092, 5276,
	5075, 5283, 1109, 5000, 4353, 5692, 4951, 4299, 4, 766,
	22, 1655, 78, 4858, 5293, 3161, 5594, 4863, 2807, 5289,
	762, 10, 3479, 328, 328, 1989, 1207, 155, 3506, 732,
	737, 4221, 749, 753, 5571, 765, 21, 328, 5269, 2733,
	20, 2732, 19, 767, 109, 763, 105, 3850, 817, 818,
	820, 764, 23, 2731, 13, 5493, 4784, 836, 1876, 3487,
	179, 2730, 12, 5171, 4914, 882, 1302, 3624, 4555, 1479,
	4339, 4246, 1062, 5188, 2100, 3967, 882, 3982, 1354, 3504,
	882, 3949, 1461, 1129, 741, 3805, 929, 3701, 933, 938,
	933, 3950, 933, 3545, 1552, 4356, 179, 4467, 933, 9,
	3625, 2799, 4446, 933, 4984, 179, 3651, 4423, 910, 2771,
	2895, 2762, 1979, 8, 3536, 2766, 2756, 882, 882, 882,
	882, 3761, 909, 792, 836, 933, 933, 3532, 933, 1017,
	3550, 3571, 938, 3549, 1017, 7, 1017, 1355, 3548, 2705,
	3502, 872, 1014, 4257, 908, 4238, 933, 1027, 933, 1029,
	1744, 3422, 1313, 933, 3465, 4249, 906, 3371, 758, 6,
	938, 1770, 4136, 1017, 1017, 1017, 836, 4691, 3324, 4824,
	4204, 3151, 3240, 1875, 1332, 133, 934, 2686, 1977, 3478,
	755, 1258, 4465, 896, 2599, 3588, 4093, 824, 2930, 1780,
	1627, 2818, 5525, 3706, 881, 3662, 328, 328, 882, 22,
	1855, 78, 1466, 1438, 2784, 1507, 3535, 879, 4270, 2742,
	10, 3524, 3486, 1287, 1488, 3482, 155, 1481, 903, 911,
	3485, 3484, 2685, 4129, 2592, 21, 3364, 3368, 3325, 20,
	3475, 19, 3331, 109, 3411, 105, 3334, 750, 2101, 3263,
	3253, 23, 2089, 13, 2069, 1917, 1213, 1122, 1896, 1761,
	2140, 12, 1849, 895, 1023, 833, 1734, 1288, 964, 993,
	1768, 3804, 3600, 2893, 966, 1559, 3587, 319, 3586, 1534,
	1531, 928, 1982, 1055, 203, 3497, 3278, 3394, 2614, 1323,
	1314, 201, 2072, 2090, 1866, 789, 2070, 1530, 811, 272,
	1263, 1215, 1203, 3170, 754, 1120, 1113, 3009, 226, 1107,
	1758, 1615, 1059, 2936, 2783, 1618, 1612, 2770, 2712, 887,
	2105, 772, 744, 800, 800, 1847, 177, 1295, 2763, 1296,
	1659, 2073, 2071, 320, 1297, 1634, 1600, 304, 133, 1342,
	713, 902, 3430, 830, 274, 1202, 1785, 894, 2108, 178,
	5733, 321, 892, 1708, 1950, 2901, 885, 5736, 6, 5733,
	4206, 863, 2108, 6297, 871, 873, 4004, 907, 4153, 4130,
	826, 900, 4319, 2661, 133, 3162, 6296, 4062, 3247, 6422,
	6125, 6420, 1748, 133, 1132, 1134, 1153, 2661, 6338, 2662,
	6379, 2138, 1748, 1749, 2108, 4318, 6418, 6378, 2120, 2121,
	2122, 5924, 3163, 1749, 4320, 6338, 6379, 1748, 2138, 1748,
	2663, 2108, 1748, 2664, 868, 4633, 3470, 2669, 1749, 2661,
	1749, 3163, 6366, 1749, 2666, 2670, 2665, 5680, 2667, 1235,
	1748, 5986, 2668, 2131, 2132, 2662, 2661, 1748, 1748, 5197,
	1524, 1749, 2671, 3529, 6363, 6346, 4039, 3163, 1749, 1749,
	3124, 6337, 2662, 2659, 2659, 742, 752, 1524, 1338, 2671,
	6338, 4153, 5714, 5712, 939, 4163, 4164, 4165, 6312, 937,
	5806, 950, 951, 952, 6305, 250, 4414, 6313, 6287, 781,
	6264, 6222, 2108, 4226, 3990, 1338, 1186, 5946, 4153, 5546,
	2659, 6221, 4163, 4164, 4165, 717, 987, 988, 6208, 4167,
	2659, 1008, 806, 806, 5199, 4207, 870, 3165, 775, 4169,
	6160, 6157, 937, 6133, 4131, 4058, 6094, 4112, 1018, 6161,
	6158, 1951, 4365, 1948, 6093, 3136, 4167, 2106, 4113, 869,
	6092, 1036, 1039, 3136, 6072, 5445, 4169, 1167, 6071, 3136,
	937, 6068, 6066, 2659, 889, 5985, 5983, 2659, 5982, 5962,
	6069, 6067, 5961, 5847, 5986, 2659, 5832, 1751, 4192, 5822,
	5805, 2659, 5546, 5797, 5796, 1844, 5665, 5654, 5823, 5804,
	3279, 2138, 4365, 1751, 2108, 5666, 3165, 1338, 5643, 4357,
	4153, 868, 1155, 6274, 4163, 4164, 4165, 4320, 6273, 1100,
	1116, 1118, 899, 3165, 5627, 1198, 5198, 1338, 5559, 2661,
	4153, 1168, 4709, 5626, 4163, 4164, 4165, 5560, 5558, 1751,
	5557, 5555, 5545, 3239, 5514, 2662, 4717, 4365, 4167, 4365,
	1751, 5546, 2671, 2659, 5512, 5478, 5399, 1181, 4169, 1746,
	3163, 1061, 1061, 5513, 4622, 5400, 5398, 5397, 4167, 4236,
	5391, 1338, 5336, 4111, 4153, 3165, 3165, 5304, 4169, 3165,
	5207, 4320, 4632, 5185, 2659, 5990, 5305, 2659, 897, 2659,
	1946, 5149, 2659, 882, 4156, 4157, 4158, 4159, 4873, 4786,
	1946, 1825, 1224, 179, 4775, 4718, 5946, 3165, 4787, 4621,
	5944, 4613, 4591, 4776, 2659, 1190, 1192, 1193, 4622, 1195,
	2659, 4548, 4169, 1195, 4549, 4484, 4434, 4645, 4322, 4308,
	4231, 4225, 4218, 4548, 4485, 4435, 5775, 4323, 4309, 4232,
	4226, 2659, 4199, 4191, 4189, 882, 4188, 882, 4187, 1825,
	3271, 4039, 4192, 2659, 4186, 2659, 4116, 2659, 872, 898,
	4114, 3985, 5449, 2659, 1338, 2659, 5287, 4153, 2107, 2659,
	3165, 4163, 4164, 4165, 2113, 2114, 2115, 2116, 3927, 2138,
	3808, 3753, 2108, 4716, 3564, 3454, 3450, 2659, 5245, 3809,
	3754, 3198, 3167, 3565, 1751, 2659, 1341, 1341, 6317, 3166,
	2659, 3165, 2797, 3137, 882, 4167, 6318, 2661, 3165, 2660,
	4704, 1341, 3136, 4924, 1309, 4169, 2138, 4882, 2659, 2108,
	1923, 4881, 882, 2662, 1453, 882, 882, 1916, 4723, 1905,
	2671, 4686, 4636, 4365, 882, 882, 1905, 882, 1914, 836,
	836, 3165, 2669, 836, 2661, 4276, 1911, 1905, 4215, 2666,
	2670, 2665, 1904, 2667, 3165, 1905, 933, 933, 3165, 4214,
	2662, 1905, 5734, 4213, 4039, 1844, 1187, 2671, 3974, 1810,
	3632, 5734, 3810, 3351, 3251, 3131, 3041, 1436, 1912, 1825,
	1257, 882, 1458, 3470, 4205, 1751, 884, 1259, 5851, 1259,
	1772, 189, 2739, 4201, 1751, 4159, 2116, 5059, 2111, 2112,
	2113, 2114, 2115, 2116, 1431, 809, 2739, 933, 1158, 3859,
	1825, 1444, 2111, 2112, 2113, 2114, 2115, 2116, 4154, 4155,
	4156, 4157, 4158, 4159, 882, 882, 2127, 328, 328, 4632,
	809, 5566, 4436, 3852, 4415, 2117, 2118, 2119, 4437, 1746,
	1825, 1825, 933, 933, 2111, 2112, 2113, 2114, 2115, 2116,
	4632, 1772, 4133, 2739, 1817, 186, 1810, 1234, 4527, 1804,
	1825, 2111, 2112, 2113, 2114, 2115, 2116, 903, 903, 6411,
	1741, 133, 873, 1305, 1306, 1751, 809, 1755, 1772, 3975,
	1487, 1350, 183, 4415, 1751, 1825, 184, 5404, 4868, 1240,
	1241, 1187, 3632, 1245, 1248, 1487, 1187, 1290, 1492, 1567,
	1311, 1289, 4160, 4161, 4162, 188, 6151, 1160, 947, 948,
	949, 4154, 4155, 4156, 4157, 4158, 4159, 941, 942, 943,
	944, 945, 946, 933, 1290, 2107, 933, 933, 1289, 4160,
	4161, 4162, 2111, 2112, 2113, 2114, 2115, 2116, 4154, 4155,
	4156, 4157, 4158, 4159, 1158, 6385, 809, 1157, 1260, 1946,
	2698, 1772, 6152, 2739, 3414, 1249, 1290, 183, 1191, 2748,
	1289, 184, 1206, 1311, 1617, 4868, 1310, 1591, 6149, 1429,
	6229, 2698, 823, 1285, 6212, 1206, 6203, 3470, 1206, 805,
	188, 1858, 1308, 1781, 1782, 1206, 1781, 1782, 1206, 871,
	1209, 1201, 5976, 5927, 5951, 1486, 1779, 4932, 804, 1783,
	1871, 5894, 1187, 5950, 5784, 1175, 882, 1200, 749, 1174,
	1897, 1176, 1897, 1178, 5777, 5740, 5669, 882, 5662, 1445,
	1795, 4160, 4161, 4162, 2111, 2112, 2113, 2114, 2115, 2116,
	4154, 4155, 4156, 4157, 4158, 4159, 1432, 1168, 5645, 5615,
	5521, 4160, 4161, 4162, 5518, 5504, 1212, 179, 1494, 1217,
	4154, 4155, 4156, 4157, 4158, 4159, 1221, 1261, 834, 1232,
	5503, 1907, 5492, 5490, 5259, 5252, 1690, 5249, 806, 806,
	5235, 5230, 806, 806, 1341, 5222, 1760, 1250, 1251, 5221,
	2749, 3860, 933, 933, 5211, 5170, 5140, 836, 1017, 938,
	5090, 5089, 1017, 1017, 4154, 4155, 4156, 4157, 4158, 4159,
	5088, 1958, 1270, 1284, 4923, 1964, 1965, 1341, 1493, 2601,
	1499, 1341, 4836, 4809, 3858, 1502, 1973, 1895, 4799, 1341,
	4798, 1341, 1512, 4782, 1520, 1009, 1291, 1292, 1341, 4772,
	1015, 870, 4771, 1771, 4770, 1015, 4869, 1015, 4726, 1341,
	1341, 1341, 1341, 1341, 4720, 1528, 1529, 1984, 4679, 1476,
	1341, 1822, 4678, 4677, 869, 1237, 1238, 1239, 4931, 3663,
	1242, 1243, 1244, 1247, 1015, 1015, 1015, 1009, 1835, 4630,
	4610, 1657, 4427, 1437, 1341, 4384, 1455, 1456, 4160, 4161,
	4162, 1776, 1777, 1778, 4364, 3344, 4317, 4154, 4155, 4156,
	4157, 4158, 4159, 1475, 4371, 1707, 4275, 4209, 2699, 1713,
	2760, 4202, 2111, 2112, 2113, 2114, 2115, 2116, 4182, 4174,
	1892, 1959, 4173, 4869, 4152, 4150, 4149, 4145, 1784, 2699,
	1637, 2127, 1901, 2747, 1556, 4143, 2802, 1565, 4142, 1584,
	872, 4141, 4140, 1675, 4118, 1685, 4115, 823, 4034, 2111,
	2112, 2113, 2114, 2115, 2116, 3934, 3932, 1489, 2994, 3929,
	3928, 5663, 2805, 3918, 3449, 882, 1341, 3442, 3237, 2802,
	1861, 823, 1741, 823, 823, 3040, 2962, 2600, 809, 180,
	1594, 1526, 1457, 2688, 1159, 2689, 774, 1356, 1596, 1445,
	1160, 1819, 1656, 1500, 882, 2805, 1834, 2711, 1595, 717,
	1689, 1839, 771, 1672, 774, 1682, 1864, 6048, 1199, 1930,
	200, 1931, 1932, 1933, 186, 3345, 1936, 1937, 1938, 1737,
	1899, 1941, 1188, 938, 1865, 133, 933, 933, 933, 933,
	806, 933, 1710, 1191, 5139, 1714, 1715, 807, 808, 6419,
	2802, 183, 2703, 6407, 882, 184, 6403, 187, 1191, 882,
	6315, 6281, 6251, 6246, 2787, 1984, 6239, 2743, 6170, 4310,
	180, 6103, 807, 808, 188, 1168, 2805, 4127, 2816, 5345,
	1913, 2759, 809, 1168, 1168, 882, 5882, 933, 1920, 1921,
	1922, 1246, 1788, 1789, 4867, 882, 1792, 1290, 1432, 2658,
	2697, 1289, 3039, 2963, 882, 6065, 6036, 6033, 1638, 5949,
	5948, 2809, 1489, 2803, 1668, 805, 5912, 6150, 1742, 1743,
	2746, 1638, 5908, 1638, 882, 4279, 1253, 5834, 882, 1168,
	1159, 186, 5800, 5728, 804, 1856, 1160, 871, 5727, 5726,
	871, 871, 5706, 5690, 1970, 180, 2803, 5689, 806, 806,
	5688, 806, 5678, 5675, 328, 1903, 2138, 5295, 183, 2108,
	1893, 1089, 184, 5553, 2595, 5550, 5515, 5321, 2597, 2598,
	5299, 2856, 5286, 5278, 1957, 5275, 328, 5094, 4970, 937,
	1189, 188, 1910, 4927, 2661, 2600, 4688, 4703, 807, 808,
	1874, 4911, 5055, 933, 806, 2955, 4901, 4812, 4898, 4878,
	2662, 4841, 4839, 4831, 2602, 1981, 2596, 2671, 1168, 4623,
	882, 4457, 4456, 4451, 328, 2604, 6365, 2803, 2787, 2787,
	2787, 1439, 1338, 2644, 328, 4153, 2815, 2806, 2844, 4163,
	4164, 4165, 4267, 4266, 1777, 1776, 4219, 2848, 4052, 4124,
	4106, 1778, 4104, 3336, 882, 882, 3959, 3891, 3785, 809,
	3660, 2804, 1489, 3573, 3517, 3342, 4168, 3376, 3370, 180,
	2806, 5316, 3113, 4167, 933, 933, 933, 933, 933, 2679,
	1955, 1956, 1784, 4169, 2082, 2081, 1489, 2812, 2074, 870,
	1740, 3091, 870, 870, 2804, 133, 933, 933, 2673, 3083,
	4808, 2103, 2104, 2847, 933, 2774, 5049, 2722, 2713, 2653,
	2824, 2826, 2097, 186, 2861, 2098, 2099, 2682, 1772, 2809,
	186, 1774, 2651, 1341, 2650, 2649, 2648, 2647, 2646, 2645,
	1934, 1935, 2643, 2642, 2641, 1939, 1940, 4454, 1942, 1943,
	183, 2806, 2640, 2639, 184, 2638, 2637, 183, 2636, 2635,
	2634, 184, 2809, 2633, 2632, 938, 938, 2873, 2631, 2630,
	1981, 1017, 1017, 188, 1017, 2804, 1017, 2629, 836, 836,
	188, 2628, 2627, 1338, 3107, 2626, 4153, 2625, 2624, 2680,
	4163, 4164, 4165, 2138, 2894, 882, 2108, 2623, 2788, 2622,
	1617, 1489, 1617, 3066, 2621, 882, 1617, 1617, 1851, 1851,
	2620, 1863, 2892, 2619, 2617, 2616, 3020, 3021, 2709, 2791,
	2652, 2661, 2603, 937, 4167, 2601, 2656, 1789, 1788, 780,
	3068, 3134, 1968, 2809, 4169, 1792, 890, 2662, 882, 882,
	2740, 1017, 1017, 1017, 2671, 933, 1894, 773, 3152, 1797,
	1787, 933, 1668, 1601, 1908, 1897, 198, 1435, 2714, 179,
	1286, 749, 910, 749, 2988, 1184, 985, 783, 2736, 2744,
	882, 4680, 882, 882, 4608, 882, 909, 882, 2869, 2870,
	882, 882, 4607, 2711, 770, 3917, 3074, 3103, 5382, 3075,
	1489, 179, 4324, 4815, 4550, 3566, 3471, 4264, 908, 2918,
	2724, 3133, 1781, 1782, 4060, 5733, 1338, 882, 3015, 4153,
	2738, 1482, 5053, 4163, 4164, 4165, 2795, 2796, 4491, 4138,
	186, 933, 933, 1482, 2932, 2609, 187, 6372, 2606, 2827,
	1742, 1743, 1709, 2825, 2879, 1341, 1341, 1341, 5845, 180,
	1468, 1469, 3147, 5844, 1472, 3242, 3243, 183, 3155, 2802,
	2798, 184, 2788, 2788, 2788, 5047, 2876, 4169, 3238, 2882,
	5454, 5622, 3164, 3146, 1514, 3148, 4504, 3514, 3153, 3154,
	188, 868, 2975, 911, 4493, 2805, 4311, 6089, 4135, 3369,
	186, 4377, 806, 2940, 3340, 1440, 806, 806, 5609, 2993,
	3120, 3121, 3122, 3742, 6178, 1981, 2999, 3171, 2912, 3736,
	1553, 2138, 2916, 2872, 2108, 6029, 2800, 183, 2120, 2121,
	2122, 184, 2932, 3084, 6028, 5843, 3139, 3140, 4449, 3117,
	2663, 2940, 4649, 2664, 807, 808, 6373, 2669, 4648, 2661,
	188, 2940, 2822, 187, 2666, 2670, 2665, 5481, 2667, 4601,
	3646, 1197, 2668, 2131, 2132, 2662, 180, 1341, 1170, 3199,
	4866, 4910, 2671, 3665, 1341, 1341, 2970, 882, 2077, 5639,
	806, 806, 2976, 2977, 2978, 3169, 2981, 882, 1341, 3664,
	933, 3249, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
	1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 6289, 1341,
	3010, 3016, 3013, 1447, 2965, 2802, 3017, 3018, 2929, 2111,
	2112, 2113, 2114, 2115, 2116, 2613, 5494, 3046, 3045, 3135,
	5378, 907, 5237, 1765, 1692, 5349, 2803, 5236, 5771, 5621,
	3556, 2805, 192, 2802, 4347, 4334, 1513, 133, 867, 2821,
	1463, 4343, 1143, 731, 3341, 937, 937, 2802, 3192, 3193,
	3073, 3076, 915, 3194, 3195, 3111, 3196, 3197, 2937, 2805,
	2727, 191, 1250, 1251, 1136, 3589, 4160, 4161, 4162, 133,
	1003, 913, 1766, 2805, 4789, 4154, 4155, 4156, 4157, 4158,
	4159, 1691, 3078, 5867, 729, 866, 3584, 3095, 915, 3772,
	2906, 3072, 4460, 1061, 3086, 3104, 2937, 3914, 3108, 3087,
	3109, 2802, 3110, 3090, 3112, 4506, 2937, 3092, 4401, 5392,
	2138, 4715, 4714, 2108, 1688, 187, 1767, 3093, 3094, 1764,
	5633, 192, 187, 5640, 3590, 5438, 3583, 2805, 2681, 2820,
	1061, 5651, 2862, 3098, 4381, 180, 2865, 2866, 2661, 5124,
	2806, 4080, 3105, 3241, 5058, 3270, 2138, 5021, 3179, 2108,
	191, 3181, 169, 1053, 2662, 2077, 1471, 4883, 4461, 1508,
	1206, 2671, 192, 3457, 2804, 4363, 2779, 3143, 3144, 3145,
	1141, 2819, 2803, 5770, 2661, 2837, 2836, 4073, 3537, 3539,
	3538, 1035, 4829, 921, 3187, 976, 3172, 2802, 3174, 3173,
	2662, 191, 1769, 3683, 3180, 1692, 768, 2671, 1009, 1015,
	2803, 3129, 727, 1015, 1015, 3681, 186, 4160, 4161, 4162,
	2952, 2953, 169, 2805, 2803, 5184, 4154, 4155, 4156, 4157,
	4158, 4159, 2809, 1553, 2835, 2078, 2111, 2112, 2113, 2114,
	2115, 2116, 3645, 183, 5379, 768, 2801, 184, 4683, 865,
	2801, 3682, 6198, 3630, 2802, 186, 5071, 5310, 3591, 3227,
	3229, 4502, 5519, 3680, 1833, 5650, 188, 2138, 1944, 6086,
	2108, 4463, 6225, 6049, 2120, 2121, 2122, 4069, 2803, 4068,
	2805, 5921, 183, 1763, 5920, 2801, 184, 5432, 868, 4494,
	1831, 2801, 4349, 2669, 5037, 2661, 2806, 806, 756, 181,
	2666, 2670, 2665, 3744, 2667, 188, 2802, 5734, 2079, 3335,
	5033, 2662, 3224, 1483, 3226, 3339, 1762, 3741, 2671, 6090,
	2804, 6224, 187, 2801, 2806, 1483, 2931, 4382, 2801, 2854,
	4447, 3260, 2805, 4138, 3266, 6180, 5620, 2849, 2806, 2801,
	4160, 4161, 4162, 5393, 2594, 4067, 784, 4066, 2804, 4154,
	4155, 4156, 4157, 4158, 4159, 5023, 992, 3738, 991, 990,
	4570, 989, 2804, 6362, 2803, 3025, 2801, 6361, 5647, 1765,
	3252, 932, 2801, 953, 231, 955, 2801, 6038, 2809, 204,
	5878, 975, 187, 182, 2080, 4345, 982, 3277, 3288, 3024,
	3276, 1727, 2806, 3338, 3384, 180, 4348, 823, 5646, 1156,
	3589, 1830, 1498, 6039, 231, 4647, 2809, 3250, 1010, 1011,
	6201, 1013, 3456, 3141, 2931, 2831, 2804, 1725, 1766, 3268,
	2809, 2803, 2078, 3264, 3264, 1628, 2127, 6062, 1496, 1044,
	161, 1047, 231, 916, 1448, 2117, 2118, 2119, 5668, 5367,
	5361, 4001, 4147, 2874, 2111, 2112, 2113, 2114, 2115, 2116,
	2655, 4148, 5146, 165, 3289, 4342, 4628, 2076, 914, 3590,
	3953, 3846, 1767, 4341, 4347, 1764, 2726, 3597, 5026, 161,
	3749, 4343, 4483, 2803, 2809, 4344, 4462, 4468, 2806, 3999,
	5072, 1341, 1341, 938, 1341, 1832, 3581, 1341, 4480, 4479,
	3269, 1629, 165, 900, 914, 2079, 3360, 1341, 1341, 5131,
	2857, 2948, 2804, 3746, 1341, 3923, 1341, 1341, 1341, 1341,
	1341, 1341, 1341, 1341, 1341, 1341, 1341, 4346, 1341, 3920,
	1341, 1769, 1341, 1341, 1341, 1341, 1341, 1341, 1724, 1341,
	1341, 1341, 3428, 921, 1341, 2806, 920, 3225, 1769, 1495,
	1341, 4338, 933, 2675, 1341, 1341, 1341, 1341, 3191, 5078,
	5066, 3582, 2808, 2676, 3540, 6227, 4643, 4642, 2138, 2804,
	2809, 2108, 3466, 3921, 3468, 2120, 2121, 2122, 2688, 4641,
	3357, 2080, 3491, 3491, 139, 2677, 2926, 2663, 3503, 933,
	2664, 1769, 1553, 3591, 2669, 2925, 2661, 2806, 4640, 3142,
	3158, 2666, 2670, 2665, 1630, 2667, 4000, 4639, 4579, 2668,
	2131, 2132, 2662, 4577, 3435, 232, 4574, 882, 4002, 2671,
	4572, 2804, 1726, 139, 2832, 922, 3561, 2809, 4421, 1763,
	3905, 3262, 5132, 1497, 3056, 2834, 2833, 5135, 3572, 2908,
	2904, 3203, 5133, 5073, 3998, 232, 933, 2888, 3387, 1769,
	2816, 1145, 872, 2111, 2112, 2113, 2114, 2115, 2116, 5859,
	2856, 6288, 6267, 6109, 3692, 1341, 6226, 1984, 1620, 1620,
	5130, 3626, 933, 232, 2846, 4395, 882, 6132, 3907, 2809,
	5879, 3841, 4300, 5095, 2830, 3835, 4350, 5134, 1639, 2111,
	2112, 2113, 2114, 2115, 2116, 3813, 5020, 3388, 4545, 3159,
	1611, 882, 882, 3617, 3011, 2816, 1711, 1706, 187, 787,
	1006, 3592, 918, 3615, 1658, 3668, 3534, 3672, 3863, 3206,
	1717, 757, 4349, 3160, 899, 5333, 3857, 3636, 3637, 4541,
	882, 5695, 3836, 3157, 3661, 2959, 6088, 3652, 3458, 3061,
	5880, 3389, 3638, 882, 3386, 4351, 2998, 187, 1721, 1603,
	1229, 1687, 1607, 2997, 2996, 788, 271, 1613, 933, 933,
	180, 3156, 1015, 1015, 4546, 1015, 3609, 1015, 2958, 1009,
	1009, 882, 1049, 1632, 3631, 3346, 882, 230, 4399, 229,
	3492, 3492, 2127, 1598, 1686, 900, 785, 1230, 786, 4948,
	897, 2117, 2118, 2119, 4398, 3355, 1679, 3085, 4856, 1477,
	2111, 2112, 2113, 2114, 2115, 2116, 1626, 230, 3557, 229,
	3431, 919, 1622, 1622, 6108, 4345, 1341, 3390, 3633, 2596,
	3374, 5612, 5213, 2852, 3062, 2811, 4348, 234, 3438, 1477,
	328, 2810, 1015, 1015, 1015, 230, 2894, 229, 923, 3494,
	3494, 3728, 5763, 3063, 3774, 2894, 3437, 3439, 1665, 3441,
	3627, 3443, 3444, 3445, 3533, 3335, 1517, 233, 3204, 312,
	3349, 898, 1677, 937, 1981, 3612, 873, 4544, 3361, 3492,
	5050, 3513, 1981, 4301, 3205, 3473, 3480, 3480, 2589, 3343,
	3840, 3760, 3496, 3201, 924, 1631, 920, 133, 4949, 926,
	4499, 3806, 5613, 3007, 4711, 4495, 1621, 1621, 3385, 3006,
	4092, 3366, 328, 1156, 3656, 4344, 5873, 5538, 6107, 1442,
	6194, 4991, 3868, 2087, 3426, 3261, 3405, 3869, 3745, 3420,
	2868, 6193, 3919, 3474, 3997, 3647, 1140, 3572, 3494, 3878,
	1231, 1571, 4003, 3424, 3885, 4626, 2858, 933, 836, 3447,
	979, 1017, 938, 1017, 1017, 3543, 3446, 4346, 4583, 3362,
	749, 749, 5661, 4054, 3893, 5539, 3897, 3898, 4582, 3377,
	3378, 3379, 3380, 2776, 4581, 1678, 4481, 3806, 3699, 2927,
	3690, 3469, 3685, 1915, 3574, 3575, 3576, 3577, 3578, 6195,
	3499, 3906, 1341, 3865, 3059, 1760, 3436, 3831, 933, 3737,
	1228, 933, 1719, 933, 3610, 3743, 1623, 1623, 1573, 5604,
	3005, 4542, 1869, 5860, 3830, 4468, 899, 3832, 3833, 5764,
	4394, 3635, 143, 1446, 3756, 3758, 3755, 3560, 1007, 3559,
	1722, 1604, 3563, 3862, 1608, 1716, 3558, 3606, 1718, 1610,
	2737, 3856, 3811, 3003, 4540, 2951, 4547, 3326, 3327, 3328,
	3329, 823, 1925, 4627, 1735, 1443, 5128, 4021, 1924, 1730,
	1605, 3798, 3943, 1720, 1602, 1599, 1897, 1606, 1614, 1698,
	3553, 2725, 1609, 1142, 3894, 143, 1020, 828, 882, 4543,
	5203, 3608, 897, 2127, 6044, 5202, 4991, 3641, 3773, 1219,
	866, 3795, 2117, 2118, 2119, 3936, 3867, 2717, 1597, 1172,
	3983, 2111, 2112, 2113, 2114, 2115, 2116, 1226, 4198, 3060,
	2716, 5064, 2913, 5762, 4536, 5342, 4851, 6050, 5396, 1490,
	1491, 933, 933, 1624, 1624, 1731, 1625, 1625, 933, 933,
	1666, 1572, 5871, 836, 1017, 1694, 1017, 1017, 3987, 3709,
	1341, 1927, 4992, 3605, 1680, 1341, 1341, 4030, 1341, 4032,
	4033, 5051, 1341, 898, 3796, 3623, 3708, 2840, 4482, 3639,
	1341, 3716, 3971, 2949, 3902, 3903, 4037, 4038, 4040, 4453,
	1527, 4500, 1341, 3748, 3669, 3747, 4496, 1676, 3757, 3726,
	3491, 2088, 3658, 3733, 5614, 6041, 917, 882, 3875, 5785,
	6032, 5301, 5693, 5917, 2859, 3851, 5395, 3996, 2860, 6043,
	3209, 4993, 1168, 5005, 3208, 1663, 1664, 4413, 5901, 2845,
	1341, 1341, 2922, 806, 2718, 5595, 1341, 4917, 5596, 806,
	806, 5597, 1842, 1574, 5300, 3995, 2950, 2940, 1729, 4331,
	3163, 5153, 1341, 1341, 5018, 3797, 6397, 1341, 1697, 5598,
	872, 3607, 5394, 938, 4994, 5076, 1341, 6396, 3611, 2858,
	6192, 1926, 1341, 1575, 6046, 314, 1576, 6045, 5380, 5366,
	1577, 3595, 313, 4918, 3861, 3866, 1341, 806, 1843, 1467,
	4126, 2615, 2707, 4063, 1695, 1298, 5600, 1341, 1103, 1298,
	1300, 5885, 1578, 5457, 5046, 4117, 5599, 3842, 3837, 1799,
	1801, 1929, 3843, 3845, 4560, 4559, 5601, 4535, 3864, 3843,
	1700, 1341, 1341, 1341, 5900, 4497, 1699, 4992, 5372, 1341,
	1341, 1341, 2840, 2839, 1341, 3890, 4408, 872, 3881, 6359,
	1581, 3879, 937, 3317, 6035, 1341, 4657, 6105, 1298, 1300,
	4105, 4656, 4728, 3321, 3127, 3319, 6176, 1579, 3365, 3316,
	5856, 3318, 3320, 1868, 5225, 4566, 4763, 1341, 1317, 3739,
	2984, 2973, 3952, 1928, 1580, 2945, 4762, 1747, 4190, 2851,
	4217, 3922, 3924, 3925, 4197, 832, 4993, 4908, 1449, 1867,
	3012, 2688, 1341, 5672, 806, 1138, 5147, 1341, 3492, 1004,
	4248, 4248, 836, 5008, 3491, 4260, 4248, 4248, 4056, 960,
	1294, 1582, 4086, 4387, 4084, 3622, 986, 1733, 4082, 1525,
	4083, 4085, 3963, 3961, 3962, 4985, 5311, 1702, 882, 4994,
	882, 2915, 1150, 882, 2672, 3892, 1168, 3032, 1897, 882,
	882, 3900, 1837, 4335, 3915, 3916, 5602, 5603, 1146, 1148,
	1728, 1150, 3037, 3926, 3986, 3035, 1696, 3494, 4036, 5121,
	1693, 1478, 1220, 1173, 3992, 1952, 1953, 5006, 3993, 3542,
	6197, 3038, 5120, 3721, 2595, 3036, 3043, 882, 3330, 3724,
	3725, 4879, 6276, 1661, 872, 1786, 1735, 4916, 2839, 5077,
	5007, 3883, 1701, 1775, 3480, 4206, 4130, 1790, 1791, 1661,
	4742, 806, 6392, 3964, 3, 3038, 791, 1299, 3036, 4064,
	4065, 1299, 5774, 4070, 882, 882, 4282, 2859, 4972, 806,
	4029, 2860, 3965, 2743, 6304, 4332, 4089, 5963, 3335, 5548,
	4287, 3034, 4043, 4047, 4046, 4094, 3266, 3330, 4312, 5241,
	5520, 4224, 4132, 3951, 3189, 4291, 4442, 4233, 5297, 1341,
	4055, 2595, 4103, 2787, 5220, 3128, 1236, 4409, 4407, 3398,
	1299, 6327, 5242, 4057, 6292, 1738, 6326, 6291, 4432, 1736,
	4121, 5371, 3322, 6116, 1137, 4290, 5966, 5965, 1005, 1110,
	6115, 1341, 4293, 5226, 3033, 4077, 4090, 6121, 959, 4031,
	4079, 5970, 4907, 6122, 4405, 4764, 4258, 5969, 5971, 5972,
	3492, 6119, 3492, 4420, 3149, 4422, 6233, 6120, 4007, 4008,
	4009, 4010, 4011, 4012, 4013, 4109, 4027, 4028, 4915, 4019,
	4020, 4383, 5968, 5819, 4097, 4050, 4050, 6232, 5967, 4098,
	4120, 4087, 4355, 937, 4123, 4286, 4099, 4470, 4208, 5820,
	4207, 4131, 6118, 6117, 5773, 4096, 190, 5891, 4283, 5780,
	4973, 4418, 1660, 4933, 5781, 3352, 3356, 3970, 3358, 3494,
	3882, 3494, 3326, 3327, 3328, 3329, 4210, 4095, 1660, 3323,
	810, 4336, 4297, 834, 834, 4245, 3190, 1829, 4426, 1593,
	1504, 4261, 4262, 4179, 4180, 4181, 1967, 3416, 3417, 3418,
	3419, 3609, 2596, 4200, 891, 6124, 4250, 6123, 4254, 2750,
	2751, 2752, 2753, 4256, 2754, 1050, 1341, 1277, 3448, 6328,
	5975, 3077, 2856, 1759, 5115, 4440, 5927, 4354, 5117, 793,
	793, 3326, 3327, 3328, 3329, 1824, 4392, 4393, 4088, 5738,
	1511, 4227, 3604, 4229, 4253, 882, 4402, 4486, 4487, 4255,
	4228, 1851, 4252, 4251, 5818, 4268, 5635, 5330, 4274, 5137,
	2841, 5528, 5584, 4534, 5533, 5113, 1524, 5580, 5531, 3973,
	5532, 5534, 834, 4411, 4390, 4307, 3994, 4305, 6137, 3954,
	3899, 3567, 3349, 1294, 2794, 4302, 2618, 2075, 193, 1966,
	1902, 1900, 1806, 1712, 1474, 4425, 1283, 4196, 5254, 4316,
	3612, 726, 6373, 728, 730, 6139, 6342, 5838, 5837, 5364,
	6369, 6391, 6142, 4466, 6138, 4439, 4840, 6415, 6299, 6144,
	5114, 6140, 4403, 4378, 4212, 4352, 933, 933, 4203, 5563,
	5116, 5314, 4817, 4373, 4374, 5577, 5578, 1823, 133, 4315,
	3593, 1168, 1510, 933, 4370, 3541, 3509, 2842, 2096, 1846,
	3178, 774, 4388, 4375, 5263, 2933, 273, 5530, 2920, 5535,
	1523, 4561, 4492, 4562, 4563, 2828, 2954, 4057, 5586, 5579,
	2923, 5582, 5583, 5585, 5581, 1211, 3498, 2788, 5543, 2922,
	823, 3697, 6147, 4417, 5997, 5998, 4505, 4419, 6145, 5863,
	882, 5544, 4522, 5260, 3602, 6001, 5996, 1168, 1168, 3658,
	5812, 4448, 6141, 6153, 6154, 3152, 4638, 4441, 6000, 4459,
	4455, 6390, 5810, 5813, 2921, 5575, 4525, 2894, 4526, 882,
	3696, 3462, 3463, 1194, 3698, 2957, 6152, 5292, 4223, 3610,
	194, 195, 196, 197, 4528, 4524, 3432, 3027, 3028, 3029,
	3030, 3031, 6345, 1981, 4326, 4222, 806, 4557, 933, 4488,
	4956, 3695, 194, 195, 196, 4602, 2924, 6055, 6056, 6056,
	3067, 6055, 3606, 4045, 3274, 3275, 1341, 3070, 4366, 5542,
	1341, 6146, 5790, 3084, 4689, 4690, 4222, 4329, 4327, 4328,
	4593, 4391, 4469, 1341, 4378, 3855, 4272, 4273, 1452, 5574,
	5980, 5979, 4957, 1341, 5787, 882, 882, 5789, 5788, 1139,
	1046, 882, 954, 1341, 1341, 6152, 3608, 1341, 1341, 1341,
	6250, 1341, 4239, 4244, 4242, 4243, 4241, 4980, 4237, 4240,
	4635, 3467, 1341, 4532, 4220, 4958, 4959, 4960, 974, 311,
	3453, 6398, 1259, 6294, 3511, 1341, 5657, 1341, 5919, 1009,
	4603, 4604, 1015, 4687, 1015, 1015, 3667, 4644, 4556, 2591,
	5356, 5127, 1341, 4651, 5126, 6295, 4849, 4619, 4733, 1341,
	4617, 4015, 4014, 1341, 1341, 1918, 3101, 3099, 3605, 4823,
	4244, 4242, 4243, 4241, 2961, 2960, 2745, 1341, 4511, 3493,
	3493, 2692, 1341, 4518, 3452, 1341, 1341, 1341, 1341, 1341,
	1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 2691, 1341,
	3663, 4825, 5272, 3603, 4820, 4819, 1341, 1341, 1341, 4864,
	6293, 5877, 6231, 6230, 1341, 872, 1341, 4314, 4592, 4314,
	4625, 6054, 6052, 1341, 4653, 5977, 5778, 1341, 5743, 5322,
	5100, 4965, 1341, 4796, 4795, 4737, 1341, 4736, 4594, 4600,
	4599, 4510, 3988, 3601, 1341, 1341, 1341, 4269, 4239, 4244,
	4242, 4243, 4241, 1341, 4237, 4240, 3933, 3466, 4890, 3912,
	4313, 4778, 3824, 2688, 3818, 3814, 3607, 3491, 3493, 4611,
	3491, 3794, 4612, 3611, 3218, 3219, 179, 3792, 4830, 910,
	3714, 4248, 4260, 4248, 4248, 4248, 3552, 3519, 3460, 3221,
	4837, 4629, 3220, 909, 2946, 1445, 4637, 1341, 1341, 2829,
	1341, 2780, 1168, 4655, 2775, 4551, 4553, 2816, 1969, 1919,
	4861, 1753, 4652, 1704, 1703, 908, 1669, 1518, 1430, 133,
	1196, 1185, 827, 5480, 1009, 1015, 2106, 1015, 1015, 905,
	901, 5189, 1341, 4692, 3367, 6217, 6127, 6126, 6002, 5239,
	5502, 1341, 1341, 1300, 882, 5433, 1897, 5271, 4239, 4244,
	4242, 4243, 4241, 5303, 4237, 4240, 5270, 5190, 5038, 5034,
	4891, 4741, 4321, 3984, 4676, 882, 2867, 2864, 4036, 1307,
	1144, 834, 933, 4100, 4101, 1127, 4400, 2919, 1341, 882,
	825, 4900, 4682, 4049, 1909, 3248, 4062, 4595, 4424, 5340,
	911, 5383, 5339, 6319, 3476, 4598, 3572, 4609, 4909, 4128,
	5384, 805, 933, 6320, 4696, 4697, 4698, 4699, 6097, 5642,
	4814, 2696, 4681, 4048, 2695, 5508, 5473, 4862, 5381, 5385,
	804, 5224, 5162, 3290, 4053, 4710, 4265, 4712, 4146, 2595,
	4091, 3958, 4875, 4615, 4871, 882, 3279, 4877, 3168, 4952,
	904, 893, 4170, 4171, 4172, 3491, 3626, 4731, 4725, 6206,
	5719, 4865, 4967, 4889, 4945, 4740, 5716, 5472, 4860, 5456,
	5426, 5421, 5420, 5079, 5068, 3492, 4735, 4746, 3492, 5067,
	5065, 4899, 1179, 4258, 2816, 4738, 4739, 5052, 4986, 4896,
	5045, 4954, 1897, 4946, 4897, 1897, 4585, 1897, 5002, 4584,
	4580, 4578, 4576, 4575, 4777, 4573, 4571, 4565, 4564, 4554,
	4355, 4102, 5024, 3652, 4529, 4979, 4523, 4521, 4503, 4791,
	4107, 806, 4501, 4498, 4430, 4429, 4792, 3349, 4929, 4665,
	4428, 4935, 4930, 4076, 3494, 4806, 4805, 3494, 907, 4664,
	4943, 4813, 4997, 4810, 4811, 4804, 4822, 4790, 4962, 4078,
	3333, 4072, 5001, 1752, 133, 4833, 3960, 1756, 4794, 133,
	133, 3908, 3887, 4961, 3839, 5009, 4832, 4971, 4834, 4835,
	4816, 3480, 4826, 4827, 3480, 4893, 4818, 4852, 3838, 4821,
	3800, 3799, 2894, 834, 3315, 834, 3332, 3333, 4184, 4888,
	3138, 3082, 4874, 2894, 2894, 4354, 3081, 4884, 1793, 4989,
	3533, 4978, 4996, 1571, 4998, 1803, 3080, 3079, 4872, 1807,
	3042, 1809, 3026, 3023, 1812, 3022, 1814, 4894, 1816, 4892,
	4844, 3019, 4355, 3014, 133, 3008, 3806, 3000, 2992, 2989,
	5123, 2987, 2986, 2985, 2983, 3627, 2980, 2979, 4937, 4938,
	5014, 5017, 2974, 2972, 2969, 3349, 2964, 2956, 4846, 2944,
	4744, 2935, 4926, 3492, 3492, 2934, 2911, 4920, 2910, 4748,
	4934, 2909, 4928, 2907, 2905, 2903, 4936, 2889, 2887, 2855,
	1573, 2850, 2843, 2693, 4944, 3931, 4963, 5003, 3291, 3089,
	3292, 3930, 1218, 4981, 4769, 1171, 1981, 1161, 4966, 3088,
	4969, 5488, 5180, 5169, 5167, 882, 3492, 4793, 5165, 5164,
	4675, 4797, 4977, 4674, 4672, 4671, 4670, 4354, 4669, 4668,
	4667, 4941, 3494, 3494, 4666, 4662, 4660, 4022, 3223, 3222,
	3217, 3216, 5019, 3983, 5015, 3215, 5016, 1341, 3214, 938,
	3213, 5136, 3212, 5028, 3211, 4057, 5084, 882, 882, 882,
	882, 5183, 3210, 5854, 1341, 1341, 3365, 6278, 823, 3480,
	1341, 1341, 823, 6243, 6277, 3494, 823, 1341, 1341, 3312,
	6009, 4673, 4908, 5411, 1341, 823, 3310, 3313, 3309, 5373,
	3311, 1341, 5407, 5251, 5048, 5250, 5217, 3493, 5102, 5216,
	4537, 5054, 1341, 3793, 3786, 3782, 3778, 2947, 4006, 2092,
	823, 3980, 5173, 1572, 5080, 3979, 4397, 3978, 3977, 5155,
	5156, 5157, 5158, 5159, 3976, 2991, 5085, 5151, 3634, 2881,
	1709, 1564, 1555, 1303, 806, 877, 5187, 1341, 4108, 6364,
	5355, 5083, 3348, 1166, 5101, 1341, 235, 5404, 1341, 5163,
	1341, 1748, 3347, 1304, 4922, 878, 6382, 6381, 3516, 5319,
	3956, 1524, 1749, 2591, 5865, 5864, 5022, 4057, 5093, 5002,
	3084, 1250, 1251, 5401, 5307, 927, 1341, 5346, 4587, 4444,
	3491, 3491, 3991, 5264, 3491, 5145, 3655, 3614, 5152, 4919,
	836, 3520, 2769, 2761, 5144, 2708, 2701, 4248, 1521, 3572,
	5281, 3851, 836, 5160, 1509, 1574, 1503, 1501, 1480, 6228,
	806, 5174, 5175, 5176, 5177, 5178, 5179, 4286, 5181, 5182,
	5572, 893, 5705, 5704, 5655, 5462, 5122, 4982, 3503, 933,
	4654, 4589, 4531, 4473, 4471, 1575, 4443, 4404, 1576, 4294,
	3598, 3594, 1577, 3518, 3512, 3118, 806, 5255, 5256, 3102,
	3100, 882, 5320, 3097, 2707, 2885, 5285, 2880, 882, 2781,
	2765, 2757, 1897, 2755, 1578, 2735, 1828, 1827, 1826, 1821,
	1820, 1818, 1341, 5302, 1815, 1813, 1811, 1808, 5298, 1805,
	1798, 4057, 1794, 933, 1757, 1754, 1750, 1745, 1723, 5312,
	5279, 5280, 2816, 1670, 1587, 1583, 5219, 1563, 1554, 3493,
	5308, 3493, 1581, 5409, 5408, 3290, 3874, 1104, 836, 2734,
	1467, 1102, 6130, 6059, 6047, 1485, 5945, 5369, 5684, 1579,
	5238, 5323, 5776, 5353, 5707, 5623, 3626, 5562, 5317, 5412,
	5368, 1341, 5306, 5354, 5343, 5125, 1580, 4870, 4289, 4023,
	3937, 3620, 3508, 2816, 3613, 1838, 5388, 2793, 5003, 2723,
	2702, 2683, 2657, 5363, 1872, 809, 5257, 3065, 5258, 823,
	806, 3244, 3245, 809, 6389, 1341, 3064, 3492, 5362, 5344,
	5350, 5351, 809, 1582, 6374, 6204, 5897, 4051, 3492, 3492,
	806, 5284, 3492, 809, 3618, 4895, 4412, 2917, 5277, 5855,
	2863, 4848, 1359, 1358, 1351, 5390, 2674, 1164, 1859, 3579,
	3492, 5360, 5328, 5641, 6174, 5636, 5332, 5858, 5638, 6037,
	5634, 2715, 5630, 4303, 5082, 4306, 3523, 4295, 3530, 937,
	1653, 5266, 712, 2928, 3547, 3629, 3494, 2721, 2720, 5649,
	5648, 5341, 5884, 5338, 5074, 3621, 3812, 3494, 3494, 4953,
	4955, 3494, 4410, 925, 5009, 5387, 806, 3619, 1516, 4706,
	4707, 3004, 5896, 4950, 5347, 1341, 5348, 1841, 1151, 3494,
	1619, 1616, 3886, 5405, 3580, 5335, 3044, 4368, 4367, 5440,
	129, 5326, 128, 127, 3480, 3480, 933, 126, 3480, 5267,
	5268, 125, 124, 5273, 2894, 123, 122, 121, 56, 55,
	54, 53, 52, 51, 50, 49, 48, 5166, 749, 5168,
	76, 75, 5374, 74, 73, 3627, 72, 71, 70, 5315,
	69, 3722, 3723, 5376, 68, 67, 66, 65, 5375, 330,
	64, 63, 62, 61, 3492, 133, 4749, 4750, 4751, 4752,
	4753, 4754, 4755, 4756, 4757, 4758, 4759, 4760, 4761, 60,
	4765, 5413, 5386, 59, 58, 5296, 57, 4684, 5215, 47,
	1341, 5417, 46, 5218, 45, 5410, 44, 43, 1341, 1341,
	1341, 42, 41, 5414, 40, 39, 38, 37, 35, 34,
	33, 32, 31, 36, 30, 29, 28, 27, 26, 3126,
	3125, 829, 1282, 3494, 1341, 1341, 3057, 4646, 1341, 1341,
	1341, 3981, 5482, 5458, 5459, 1739, 5461, 5501, 5423, 782,
	5086, 4721, 5425, 5248, 1227, 1225, 1906, 1204, 1214, 3058,
	3599, 120, 119, 3096, 118, 1341, 117, 95, 94, 93,
	92, 91, 90, 89, 88, 87, 86, 85, 84, 5,
	83, 98, 1341, 3491, 100, 5527, 99, 97, 96, 5281,
	3116, 82, 81, 80, 3851, 79, 77, 1341, 1341, 18,
	17, 4325, 1732, 2729, 3851, 6270, 6177, 216, 834, 6042,
	882, 834, 1450, 2741, 5607, 3280, 4861, 4464, 5359, 4445,
	4983, 1557, 6262, 3650, 6018, 882, 4855, 202, 4773, 5872,
	4340, 4337, 5002, 882, 4990, 4853, 5154, 5902, 4999, 4859,
	3889, 3505, 4857, 5589, 3501, 5606, 838, 6341, 5529, 4134,
	3429, 3434, 5474, 5523, 5808, 5564, 2816, 6135, 5324, 5331,
	5644, 5561, 5282, 3569, 185, 179, 5786, 5592, 9, 4912,
	5541, 3451, 2690, 876, 5489, 882, 875, 6129, 1312, 5824,
	5556, 6013, 8, 4952, 5587, 971, 5610, 5496, 5294, 1017,
	5576, 4847, 933, 199, 3939, 1183, 3941, 971, 971, 5676,
	3188, 1233, 5682, 5624, 7, 5554, 769, 3177, 5554, 1210,
	2694, 5002, 938, 838, 933, 933, 5291, 3207, 838, 971,
	5290, 5999, 5618, 838, 5995, 838, 5994, 5516, 4807, 3459,
	5616, 5288, 971, 971, 3472, 5658, 5700, 5549, 5570, 2678,
	116, 5590, 115, 114, 5540, 1092, 1092, 112, 5605, 5608,
	5569, 111, 838, 838, 838, 838, 5573, 938, 1017, 971,
	971, 971, 5652, 110, 4860, 5001, 5632, 5631, 22, 108,
	78, 5723, 5711, 806, 5713, 5625, 107, 5671, 106, 10,
	104, 3492, 806, 806, 103, 155, 834, 834, 5593, 102,
	101, 25, 24, 5685, 21, 16, 971, 5415, 20, 5698,
	19, 15, 109, 5679, 105, 5749, 14, 1341, 5691, 5677,
	23, 5003, 13, 1341, 4016, 4018, 11, 5687, 5756, 1341,
	12, 4024, 4025, 5754, 1341, 5755, 1341, 5753, 3337, 834,
	3492, 5446, 5447, 5694, 5697, 5696, 5450, 5451, 4355, 1341,
	3494, 940, 5708, 2135, 5721, 3254, 5735, 5737, 3267, 5448,
	1301, 2095, 5741, 5742, 1293, 5761, 4732, 5002, 5212, 5747,
	2612, 6131, 4828, 1066, 1341, 1067, 1773, 5628, 5791, 1064,
	1094, 836, 1667, 5720, 5803, 5244, 4788, 3480, 1341, 5722,
	5725, 5537, 5552, 1341, 4779, 3397, 3393, 3382, 3404, 3494,
	5003, 5232, 3353, 1336, 5739, 1335, 3363, 4119, 2610, 1330,
	5467, 5468, 1331, 1326, 2086, 2083, 3972, 3150, 2890, 3492,
	3694, 5792, 4431, 5830, 4489, 3700, 5918, 6, 3873, 2142,
	1949, 3202, 1947, 4354, 821, 1256, 3383, 2137, 5745, 2,
	1, 0, 5653, 133, 0, 5831, 5825, 0, 0, 0,
	5769, 0, 0, 0, 0, 0, 0, 5718, 133, 0,
	0, 5484, 5485, 882, 5486, 0, 5487, 5674, 0, 0,
	0, 0, 0, 0, 0, 0, 882, 0, 3494, 0,
	0, 0, 0, 133, 1341, 0, 0, 0, 0, 5836,
	5794, 0, 5798, 5869, 5814, 5815, 0, 836, 5816, 5817,
	0, 3491, 5799, 0, 5840, 0, 0, 0, 5861, 0,
	1341, 1341, 0, 0, 3493, 5868, 882, 3493, 0, 0,
	0, 0, 0, 0, 0, 0, 5522, 1341, 0, 5536,
	0, 0, 5416, 0, 0, 0, 0, 0, 0, 5839,
	5835, 0, 0, 0, 5841, 0, 5003, 0, 0, 1341,
	0, 0, 5849, 933, 5848, 5842, 933, 933, 933, 5850,
	5284, 5857, 0, 0, 5833, 3492, 0, 4366, 0, 0,
	0, 0, 0, 4057, 0, 0, 0, 5923, 1341, 3492,
	5866, 0, 0, 1341, 1341, 1341, 0, 1341, 0, 5887,
	0, 5893, 937, 5889, 5898, 5892, 1341, 5890, 0, 0,
	5886, 0, 5913, 0, 0, 5899, 0, 0, 1897, 0,
	0, 2688, 0, 5907, 0, 5909, 0, 5911, 0, 0,
	0, 3572, 0, 5915, 3494, 1341, 0, 0, 0, 0,
	5993, 0, 0, 0, 5974, 5928, 0, 937, 3494, 1897,
	0, 1897, 0, 5929, 0, 5930, 5931, 5793, 0, 0,
	5933, 0, 806, 5934, 5941, 6020, 0, 5939, 872, 0,
	5914, 0, 5981, 133, 5991, 6017, 5942, 0, 0, 0,
	0, 0, 0, 5958, 5959, 0, 0, 0, 5937, 5326,
	0, 5589, 5973, 0, 0, 0, 6015, 0, 0, 6023,
	834, 0, 3493, 3493, 0, 0, 0, 0, 0, 3492,
	0, 834, 834, 0, 0, 834, 933, 0, 6030, 0,
	0, 5274, 5984, 5989, 5992, 5978, 0, 0, 0, 6025,
	0, 0, 5846, 834, 0, 0, 0, 6024, 6012, 1897,
	0, 5233, 0, 938, 0, 3493, 0, 971, 133, 6026,
	1341, 0, 0, 0, 0, 0, 6007, 0, 6010, 0,
	971, 0, 0, 971, 6034, 0, 0, 0, 3494, 6027,
	971, 0, 0, 971, 0, 5749, 0, 1341, 0, 1341,
	1341, 0, 0, 6040, 6051, 1341, 0, 0, 0, 6053,
	6076, 0, 6057, 0, 0, 5746, 0, 6114, 6063, 6016,
	6079, 0, 0, 0, 1168, 3480, 0, 0, 0, 0,
	0, 6073, 0, 6075, 0, 6077, 0, 5803, 6106, 0,
	6061, 1341, 971, 6082, 6128, 0, 6080, 0, 0, 6091,
	6078, 0, 0, 0, 0, 0, 0, 0, 0, 5370,
	1897, 0, 6096, 0, 6021, 6100, 6074, 0, 6099, 6098,
	0, 6112, 6113, 1341, 0, 0, 0, 834, 6159, 0,
	0, 0, 0, 3492, 5002, 838, 838, 1341, 0, 806,
	0, 6175, 0, 0, 0, 0, 1017, 1017, 0, 2816,
	838, 6134, 2595, 6172, 0, 6169, 6162, 6163, 6167, 6187,
	6188, 0, 0, 0, 6186, 3372, 0, 0, 0, 179,
	0, 6185, 6184, 5904, 0, 0, 3399, 0, 838, 838,
	0, 0, 838, 6166, 0, 0, 6183, 0, 3425, 0,
	6211, 3372, 3494, 1017, 6168, 0, 0, 933, 0, 5852,
	0, 0, 6179, 0, 1341, 6171, 6218, 0, 6182, 0,
	5312, 0, 0, 0, 6196, 6199, 0, 6155, 0, 0,
	6207, 2856, 6209, 0, 6214, 6215, 6235, 1897, 1897, 6210,
	6205, 6238, 0, 0, 0, 0, 0, 6213, 1341, 1341,
	0, 0, 1341, 6234, 0, 1092, 0, 2688, 0, 0,
	0, 3466, 6223, 0, 0, 0, 0, 0, 0, 0,
	6248, 6165, 6020, 933, 933, 0, 6202, 6220, 0, 0,
	0, 5002, 0, 836, 0, 0, 0, 6257, 0, 4596,
	4597, 0, 0, 6240, 0, 6254, 6255, 0, 6261, 0,
	1874, 6249, 1874, 1874, 0, 6015, 4606, 6245, 6247, 6258,
	0, 0, 6186, 0, 6252, 0, 0, 179, 0, 6185,
	6184, 0, 6253, 5003, 1168, 0, 0, 0, 933, 0,
	0, 0, 0, 1092, 6183, 6263, 0, 6260, 0, 1341,
	0, 6275, 3492, 0, 6236, 6237, 5507, 0, 0, 0,
	1341, 0, 0, 0, 0, 6282, 6182, 6302, 0, 0,
	0, 0, 1341, 0, 0, 0, 6284, 0, 6283, 0,
	0, 6268, 6290, 0, 0, 0, 3493, 0, 0, 5987,
	0, 6309, 0, 6311, 0, 0, 0, 3493, 3493, 5826,
	0, 3493, 1341, 937, 0, 0, 0, 971, 0, 0,
	0, 3494, 6307, 6310, 0, 836, 6332, 6333, 6334, 3493,
	5803, 4661, 6279, 6329, 971, 6259, 6316, 6314, 933, 0,
	971, 0, 6343, 6344, 5002, 0, 0, 0, 971, 971,
	6348, 6181, 0, 0, 6350, 0, 6189, 6321, 6322, 6325,
	6347, 6336, 0, 0, 834, 6360, 0, 133, 6352, 6302,
	6186, 6021, 133, 0, 1092, 179, 971, 6185, 6184, 0,
	5003, 0, 0, 6358, 6070, 6371, 6375, 5527, 971, 6368,
	3492, 6376, 6183, 6367, 971, 836, 1341, 0, 6351, 3492,
	0, 6377, 0, 6383, 6386, 6384, 0, 6380, 0, 0,
	0, 836, 6323, 834, 6182, 0, 6394, 6387, 6388, 6393,
	0, 6401, 6400, 0, 0, 0, 6308, 1017, 1017, 6410,
	6405, 0, 0, 6412, 6302, 6414, 6406, 6413, 5527, 6399,
	6408, 6409, 6416, 838, 6402, 0, 6417, 6358, 0, 3494,
	6302, 6421, 0, 3493, 1092, 1092, 838, 838, 3494, 0,
	0, 838, 838, 0, 0, 0, 0, 0, 0, 0,
	1015, 0, 0, 971, 0, 6358, 838, 0, 6349, 1986,
	838, 0, 0, 0, 5904, 0, 0, 0, 838, 6181,
	838, 0, 834, 0, 0, 0, 0, 838, 0, 0,
	0, 0, 0, 0, 0, 6269, 0, 0, 838, 838,
	838, 838, 838, 0, 0, 0, 0, 0, 0, 838,
	0, 0, 0, 5003, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1015,
	0, 0, 3492, 838, 0, 0, 0, 0, 0, 0,
	5767, 0, 0, 0, 3909, 0, 3910, 0, 3911, 0,
	0, 3913, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1168, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3935, 0, 0, 0, 0, 0, 0,
	0, 0, 3942, 0, 3944, 0, 3945, 3946, 3947, 0,
	3948, 3494, 0, 0, 0, 0, 0, 2138, 0, 5807,
	2108, 0, 0, 0, 2120, 2121, 2122, 0, 0, 0,
	0, 0, 0, 0, 0, 838, 2663, 6181, 0, 2664,
	0, 0, 0, 2669, 0, 2661, 0, 0, 834, 0,
	2666, 2670, 2665, 133, 2667, 0, 0, 0, 2668, 2131,
	2132, 2662, 834, 0, 0, 4906, 0, 0, 2671, 3989,
	0, 0, 2138, 0, 1092, 2108, 0, 5765, 971, 2120,
	2121, 2122, 0, 0, 1092, 0, 0, 1986, 5768, 1986,
	0, 2663, 0, 0, 2664, 4925, 0, 0, 2669, 0,
	2661, 0, 0, 0, 0, 2666, 2670, 2665, 0, 2667,
	971, 0, 0, 2668, 2131, 2132, 2662, 971, 0, 0,
	0, 0, 0, 2671, 0, 0, 0, 0, 5795, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2138, 0, 0, 2108, 0,
	0, 0, 2120, 2121, 2122, 0, 0, 0, 0, 0,
	3493, 1092, 0, 0, 2663, 0, 0, 2664, 5895, 0,
	0, 2669, 834, 2661, 0, 0, 0, 0, 2666, 2670,
	2665, 0, 2667, 0, 0, 0, 2668, 2131, 2132, 2662,
	0, 1092, 0, 0, 0, 6355, 2671, 0, 6340, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3493,
	3399, 3399, 0, 0, 0, 0, 1131, 3272, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3274, 3275,
	0, 0, 0, 0, 2138, 0, 0, 2108, 0, 0,
	0, 2120, 2121, 2122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2663, 5905, 5906, 2664, 0, 1092, 6355,
	2669, 0, 2661, 0, 0, 0, 0, 2666, 2670, 2665,
	0, 2667, 0, 0, 0, 2668, 2131, 2132, 2662, 3399,
	3399, 3399, 0, 0, 0, 2671, 0, 6355, 3493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2138, 0, 0, 2108,
	0, 0, 2594, 2120, 2121, 2122, 834, 0, 0, 0,
	0, 0, 0, 0, 0, 2663, 0, 0, 2664, 0,
	0, 0, 2669, 0, 2661, 1092, 0, 1092, 0, 2666,
	2670, 2665, 0, 4175, 0, 0, 0, 2668, 2131, 2132,
	2662, 0, 838, 0, 0, 0, 0, 2671, 0, 4176,
	0, 0, 0, 0, 0, 0, 4780, 0, 0, 0,
	0, 0, 0, 0, 1092, 0, 2138, 1092, 0, 2108,
	0, 0, 0, 2120, 2121, 2122, 1092, 0, 0, 0,
	838, 838, 0, 838, 0, 838, 0, 838, 838, 0,
	0, 0, 2669, 971, 2661, 971, 971, 971, 971, 2666,
	2670, 2665, 0, 2667, 0, 0, 0, 2668, 2131, 2132,
	2662, 0, 965, 0, 3493, 4177, 0, 2671, 4781, 0,
	0, 0, 0, 0, 965, 965, 0, 0, 3493, 0,
	0, 0, 0, 0, 0, 0, 2138, 0, 0, 2108,
	0, 0, 0, 2120, 2121, 2122, 1019, 0, 0, 0,
	838, 838, 838, 0, 0, 2663, 0, 0, 2664, 1037,
	1041, 0, 2669, 0, 2661, 0, 0, 0, 0, 2666,
	2670, 2665, 0, 2667, 0, 971, 0, 2668, 2131, 2132,
	2662, 0, 0, 0, 0, 0, 6111, 2671, 0, 0,
	0, 0, 2127, 6101, 6102, 0, 0, 0, 0, 0,
	0, 2117, 2118, 2119, 0, 834, 0, 0, 0, 0,
	2111, 2112, 2113, 2114, 2115, 2116, 0, 1015, 1015, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1092, 0, 1092, 0,
	4472, 0, 4474, 0, 838, 838, 838, 2127, 3493, 0,
	0, 0, 0, 0, 0, 0, 2117, 2118, 2119, 6241,
	6242, 0, 5313, 6244, 1015, 2111, 2112, 2113, 2114, 2115,
	2116, 0, 4185, 0, 0, 0, 0, 0, 2138, 0,
	6110, 2108, 0, 0, 0, 2120, 2121, 2122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2663, 0, 0,
	2664, 0, 0, 0, 2669, 0, 2661, 0, 0, 0,
	0, 2666, 2670, 2665, 0, 2667, 5357, 0, 0, 2668,
	2131, 2132, 2662, 0, 0, 0, 0, 0, 0, 2671,
	2127, 0, 0, 834, 0, 0, 0, 0, 0, 2117,
	2118, 2119, 834, 0, 6265, 0, 0, 4530, 2111, 2112,
	2113, 2114, 2115, 2116, 0, 0, 838, 0, 1571, 0,
	0, 0, 0, 838, 838, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 838, 1092, 0,
	0, 838, 838, 838, 838, 838, 838, 838, 838, 838,
	838, 838, 838, 838, 838, 838, 838, 0, 838, 0,
	0, 0, 3493, 0, 0, 0, 1986, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2127,
	0, 0, 0, 0, 0, 1573, 0, 0, 2117, 2118,
	2119, 0, 0, 0, 0, 0, 0, 2111, 2112, 2113,
	2114, 2115, 2116, 4588, 0, 0, 4590, 0, 0, 2138,
	0, 0, 2108, 0, 0, 0, 2120, 2121, 2122, 0,
	0, 0, 0, 0, 0, 0, 6330, 0, 2663, 0,
	0, 2664, 0, 0, 0, 2669, 0, 2661, 0, 0,
	0, 0, 2666, 2670, 2665, 834, 2667, 0, 0, 0,
	2668, 2131, 2132, 2662, 0, 0, 6306, 0, 0, 0,
	2671, 2127, 0, 0, 4614, 0, 4616, 0, 4618, 5460,
	2117, 2118, 2119, 0, 0, 0, 0, 0, 0, 2111,
	2112, 2113, 2114, 2115, 2116, 0, 6324, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 6330, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1572, 0,
	0, 0, 6395, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1015, 1015,
	0, 2127, 0, 0, 0, 0, 2138, 0, 0, 2108,
	2117, 2118, 2119, 2120, 2121, 2122, 0, 0, 0, 2111,
	2112, 2113, 2114, 2115, 2116, 2663, 0, 0, 2664, 0,
	0, 3493, 2669, 0, 2661, 0, 0, 0, 0, 2666,
	2670, 2665, 0, 2667, 0, 0, 0, 2668, 2131, 2132,
	2662, 0, 0, 5010, 0, 0, 0, 2671, 0, 0,
	0, 0, 0, 0, 0, 0, 3399, 3399, 0, 0,
	1574, 2127, 0, 0, 0, 0, 0, 0, 0, 0,
	2117, 2118, 2119, 0, 0, 0, 0, 6335, 0, 2111,
	2112, 2113, 2114, 2115, 2116, 0, 0, 0, 0, 0,
	1575, 0, 0, 1576, 0, 0, 0, 1577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2707,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3399, 3399, 3399, 3399, 3399, 3399, 3399,
	3399, 3399, 3399, 3399, 3399, 3399, 0, 3399, 0, 3493,
	0, 0, 0, 0, 0, 0, 0, 1581, 3493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1579, 4783, 0, 0, 0, 0,
	3372, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1580, 0, 0, 0, 5686, 0, 0, 0, 0,
	0, 0, 0, 2127, 0, 0, 0, 0, 0, 0,
	0, 0, 2117, 2118, 2119, 0, 0, 5701, 5702, 6266,
	0, 2111, 2112, 2113, 2114, 2115, 2116, 1571, 1582, 0,
	0, 0, 0, 2138, 0, 5011, 2108, 0, 0, 0,
	2120, 2121, 2122, 0, 2925, 4842, 0, 0, 0, 0,
	0, 0, 2663, 0, 0, 2664, 0, 0, 0, 2669,
	0, 2661, 0, 0, 0, 0, 2666, 2670, 2665, 0,
	2667, 0, 0, 0, 2668, 2131, 2132, 2662, 0, 0,
	0, 0, 0, 0, 2671, 0, 0, 0, 0, 0,
	838, 838, 0, 838, 1573, 0, 838, 0, 0, 0,
	0, 3493, 0, 0, 0, 0, 838, 838, 0, 0,
	0, 0, 0, 838, 0, 838, 838, 838, 838, 838,
	838, 838, 838, 838, 838, 838, 3399, 838, 0, 838,
	0, 838, 838, 838, 838, 838, 838, 0, 838, 838,
	838, 0, 0, 838, 0, 0, 0, 0, 0, 838,
	0, 0, 0, 838, 838, 838, 838, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2127, 0, 0, 0, 0, 0,
	0, 838, 838, 2117, 2118, 2119, 0, 0, 0, 0,
	6256, 0, 2111, 2112, 2113, 2114, 2115, 2116, 0, 0,
	0, 0, 0, 1092, 0, 0, 0, 0, 0, 0,
	0, 0, 1092, 0, 0, 0, 0, 1572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1986,
	0, 0, 1649, 0, 4985, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	5008, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 838, 1986, 0, 0, 0, 0,
	838, 0, 0, 0, 0, 0, 0, 0, 0, 5012,
	0, 1538, 1571, 1092, 0, 0, 1539, 0, 0, 0,
	1547, 0, 5010, 0, 1683, 0, 0, 0, 0, 1986,
	0, 2127, 0, 0, 0, 0, 1092, 0, 0, 1574,
	2117, 2118, 2119, 0, 0, 0, 0, 6095, 0, 2111,
	2112, 2113, 2114, 2115, 2116, 0, 0, 0, 1651, 0,
	0, 0, 0, 971, 0, 0, 0, 1986, 0, 1575,
	0, 0, 1576, 0, 0, 0, 1577, 0, 0, 1573,
	5935, 5936, 3729, 0, 0, 0, 0, 0, 2707, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1578, 1649,
	0, 0, 0, 2938, 0, 0, 0, 0, 0, 971,
	0, 1546, 0, 1092, 1092, 0, 0, 0, 0, 0,
	0, 0, 1092, 0, 5138, 971, 0, 0, 0, 971,
	0, 971, 0, 0, 0, 0, 1581, 971, 5143, 0,
	0, 0, 1551, 0, 0, 838, 1640, 0, 0, 0,
	0, 0, 0, 1579, 971, 0, 0, 0, 0, 0,
	0, 2939, 0, 0, 971, 0, 0, 0, 1650, 5161,
	1580, 0, 5013, 4447, 0, 0, 971, 971, 0, 0,
	0, 0, 0, 1986, 971, 1537, 0, 0, 0, 0,
	0, 0, 971, 0, 0, 1651, 0, 0, 0, 971,
	0, 0, 1572, 971, 0, 0, 971, 1582, 1646, 971,
	0, 0, 1541, 0, 0, 0, 0, 0, 0, 0,
	971, 0, 0, 0, 0, 0, 0, 0, 971, 6060,
	0, 1643, 0, 0, 971, 0, 0, 0, 0, 0,
	0, 0, 971, 0, 0, 0, 971, 1543, 0, 0,
	0, 0, 0, 1542, 0, 1648, 0, 0, 0, 1986,
	0, 0, 971, 0, 0, 2809, 0, 838, 2127, 1092,
	838, 0, 838, 838, 0, 1092, 0, 2117, 2118, 2119,
	0, 0, 0, 1640, 6081, 1639, 2111, 2112, 2113, 2114,
	2115, 2116, 0, 5240, 1574, 0, 1684, 1654, 1544, 0,
	0, 0, 0, 0, 0, 1650, 0, 0, 0, 0,
	0, 838, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1575, 2728, 0, 1576, 0, 1681,
	0, 1577, 143, 0, 0, 1641, 0, 0, 0, 0,
	0, 0, 0, 1570, 971, 1646, 0, 0, 0, 1647,
	0, 971, 0, 1578, 1548, 0, 1092, 2767, 971, 0,
	0, 0, 0, 0, 2777, 1644, 0, 0, 1643, 0,
	0, 0, 1642, 0, 0, 0, 1652, 2138, 0, 0,
	2108, 0, 1986, 0, 2120, 2121, 2122, 3727, 971, 1550,
	1549, 1581, 1648, 0, 0, 0, 2663, 0, 0, 2664,
	0, 0, 0, 2669, 0, 2661, 0, 0, 1579, 0,
	2666, 2670, 2665, 1645, 2667, 0, 0, 0, 2668, 2131,
	2132, 2662, 0, 0, 0, 1580, 0, 0, 2671, 0,
	0, 0, 0, 1538, 1654, 0, 0, 0, 1539, 0,
	6219, 0, 1547, 0, 0, 0, 0, 0, 0, 0,
	1092, 1092, 838, 838, 0, 838, 838, 0, 0, 838,
	0, 0, 1582, 0, 838, 838, 1540, 838, 0, 143,
	0, 838, 1641, 0, 0, 0, 0, 0, 0, 838,
	0, 0, 0, 0, 0, 0, 1647, 0, 0, 0,
	0, 838, 0, 0, 0, 0, 1553, 0, 0, 838,
	0, 0, 1644, 0, 4520, 0, 982, 982, 0, 1642,
	0, 0, 0, 1652, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 838,
	838, 0, 0, 1546, 0, 838, 0, 0, 0, 0,
	0, 0, 5418, 5419, 0, 0, 0, 0, 0, 0,
	1645, 838, 838, 0, 0, 0, 838, 0, 0, 2767,
	0, 6285, 0, 0, 1551, 838, 0, 2138, 0, 0,
	2108, 838, 0, 0, 2120, 2121, 2122, 0, 0, 5439,
	0, 0, 0, 0, 0, 838, 2663, 0, 0, 2664,
	0, 0, 0, 2669, 0, 2661, 838, 0, 0, 0,
	2666, 2670, 2665, 0, 2667, 0, 0, 1537, 2668, 2131,
	2132, 2662, 0, 0, 0, 0, 0, 0, 2671, 0,
	838, 838, 838, 0, 0, 0, 0, 0, 838, 838,
	838, 0, 0, 838, 1541, 0, 5463, 0, 0, 0,
	1986, 5466, 0, 0, 838, 0, 1986, 0, 0, 0,
	0, 982, 1092, 0, 0, 0, 0, 0, 5475, 5476,
	5477, 0, 0, 0, 0, 0, 838, 0, 0, 1543,
	2767, 0, 3119, 0, 0, 1542, 0, 0, 0, 0,
	0, 5483, 0, 137, 0, 0, 5766, 136, 138, 0,
	0, 838, 0, 0, 0, 0, 838, 186, 0, 0,
	0, 838, 0, 838, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1544, 0, 0, 1092, 183, 0, 0, 0, 184, 0,
	0, 0, 0, 3399, 0, 0, 0, 0, 0, 0,
	0, 1092, 0, 0, 0, 0, 971, 188, 0, 0,
	0, 0, 0, 0, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1545, 0, 0, 0, 0,
	175, 0, 135, 0, 0, 0, 1548, 0, 0, 0,
	181, 0, 0, 0, 0, 1986, 1092, 0, 0, 0,
	0, 0, 1092, 0, 0, 3399, 0, 0, 0, 0,
	0, 0, 971, 971, 0, 0, 0, 0, 0, 4519,
	0, 1550, 1549, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 971, 971, 0, 0, 0, 0, 0, 0,
	0, 0, 971, 0, 0, 2138, 0, 0, 2108, 0,
	0, 0, 2120, 2121, 2122, 0, 0, 5809, 838, 0,
	0, 0, 144, 0, 2663, 0, 0, 2664, 0, 0,
	0, 2669, 0, 2661, 182, 0, 0, 0, 2666, 2670,
	2665, 0, 2667, 0, 0, 176, 2668, 2131, 2132, 2662,
	838, 159, 2127, 164, 157, 0, 2671, 173, 1540, 146,
	0, 2117, 2118, 2119, 0, 0, 0, 0, 6058, 0,
	2111, 2112, 2113, 2114, 2115, 2116, 0, 0, 0, 0,
	166, 161, 0, 0, 0, 0, 0, 0, 1553, 0,
	160, 0, 0, 1986, 1986, 1986, 0, 5629, 0, 0,
	0, 0, 0, 0, 165, 153, 0, 0, 0, 0,
	0, 162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1092, 1092, 0, 1092, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 167,
	170, 0, 0, 0, 171, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 838, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3399, 0, 169,
	971, 0, 0, 0, 0, 0, 0, 0, 0, 1092,
	1092, 0, 0, 971, 0, 0, 0, 0, 0, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 140, 0, 0, 0, 139, 158, 0, 149, 971,
	0, 0, 143, 0, 4301, 0, 152, 0, 147, 0,
	0, 0, 2127, 0, 148, 0, 3399, 0, 0, 174,
	0, 2117, 2118, 2119, 0, 0, 0, 0, 0, 156,
	2111, 2112, 2113, 2114, 2115, 2116, 0, 145, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 1092, 0, 0, 0, 0, 0, 0, 0, 1092,
	0, 0, 0, 172, 0, 0, 971, 971, 971, 0,
	0, 0, 0, 168, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1092, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 971, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 0, 0, 0, 2138, 0, 971,
	2108, 0, 180, 0, 2120, 2121, 2122, 0, 0, 0,
	0, 0, 0, 0, 971, 0, 2663, 0, 0, 2664,
	971, 0, 0, 2669, 0, 2661, 0, 0, 0, 0,
	2666, 2670, 2665, 0, 2667, 0, 0, 0, 2668, 2131,
	2132, 2662, 0, 0, 0, 0, 0, 0, 2671, 0,
	0, 0, 0, 1092, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 838, 0, 5938, 0, 838,
	5940, 0, 0, 5943, 0, 0, 0, 0, 0, 0,
	0, 0, 838, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 838, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 838, 838, 0, 0, 838, 838, 838, 0,
	838, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 838, 0, 3399, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 838, 0, 838, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2127, 838, 0, 0, 0, 0, 0, 0, 838, 2117,
	2118, 2119, 838, 838, 0, 0, 0, 0, 2111, 2112,
	2113, 2114, 2115, 2116, 1092, 0, 838, 0, 0, 0,
	0, 838, 0, 1092, 838, 838, 838, 838, 838, 838,
	838, 838, 838, 838, 838, 838, 838, 0, 838, 0,
	0, 0, 0, 0, 0, 838, 838, 838, 1092, 0,
	0, 0, 0, 838, 0, 838, 0, 0, 0, 0,
	0, 0, 838, 1986, 0, 0, 838, 0, 0, 0,
	0, 838, 0, 0, 0, 838, 0, 0, 0, 0,
	0, 0, 0, 838, 838, 838, 0, 0, 0, 0,
	0, 2138, 838, 0, 2108, 0, 0, 0, 2120, 2121,
	2122, 0, 0, 0, 0, 0, 838, 0, 0, 838,
	2663, 0, 0, 2664, 0, 0, 0, 2669, 0, 2661,
	0, 0, 0, 0, 2666, 2670, 2665, 0, 2667, 0,
	0, 0, 2668, 2131, 2132, 2662, 838, 838, 0, 838,
	0, 0, 2671, 0, 0, 0, 0, 0, 0, 6143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 838, 0, 0, 0, 0, 0, 0, 0, 1092,
	838, 838, 0, 0, 0, 0, 0, 0, 0, 0,
	1092, 1092, 0, 2138, 1092, 0, 2108, 0, 0, 0,
	2120, 2121, 2122, 0, 0, 971, 0, 0, 0, 0,
	0, 0, 2663, 0, 0, 2664, 0, 838, 0, 2669,
	0, 2661, 0, 0, 0, 0, 2666, 2670, 2665, 0,
	2667, 0, 0, 1092, 2668, 2131, 2132, 2662, 0, 0,
	0, 0, 0, 0, 2671, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 0, 0, 0, 971, 971, 0, 0, 0, 0,
	1538, 0, 0, 0, 0, 1539, 0, 0, 0, 1547,
	0, 0, 0, 0, 838, 838, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3399, 3399, 0, 0,
	3399, 0, 0, 0, 0, 1986, 1092, 1986, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 838, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3693, 1562, 2127, 0, 0, 0, 1352, 0, 0, 0,
	0, 2117, 2118, 2119, 0, 1986, 0, 0, 5729, 0,
	2111, 2112, 2113, 2114, 2115, 2116, 0, 0, 0, 0,
	1546, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3752, 0, 6286, 0,
	0, 2138, 0, 971, 2108, 0, 0, 0, 2120, 2121,
	2122, 1551, 3765, 0, 0, 0, 3768, 0, 3770, 0,
	2663, 0, 0, 2664, 0, 0, 0, 2669, 1986, 2661,
	1092, 0, 0, 0, 2666, 2670, 2665, 0, 2667, 0,
	0, 3788, 2668, 2131, 2132, 2662, 0, 0, 0, 0,
	0, 3791, 2671, 0, 1537, 971, 0, 0, 0, 0,
	971, 0, 0, 965, 0, 0, 0, 0, 0, 0,
	0, 3807, 0, 0, 0, 0, 0, 0, 0, 3817,
	0, 1541, 0, 0, 0, 0, 3820, 0, 0, 0,
	3823, 0, 0, 3826, 0, 0, 3828, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3834, 0, 0,
	0, 2138, 971, 0, 2108, 965, 1543, 0, 2120, 2121,
	2122, 965, 1542, 0, 0, 1986, 0, 1056, 0, 3848,
	2663, 0, 0, 3854, 0, 0, 0, 2669, 0, 2661,
	0, 0, 0, 0, 2666, 2670, 2665, 0, 2667, 3884,
	0, 0, 2668, 2131, 2132, 2662, 0, 0, 0, 0,
	0, 0, 2671, 0, 0, 0, 838, 1544, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 838, 838, 0, 0, 0, 0, 838,
	838, 0, 0, 0, 0, 0, 838, 838, 0, 0,
	0, 0, 0, 838, 0, 0, 2127, 0, 0, 0,
	838, 0, 1545, 0, 0, 2117, 2118, 2119, 0, 0,
	0, 838, 5703, 1548, 2111, 2112, 2113, 2114, 2115, 2116,
	0, 3957, 1069, 1069, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3968, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 838, 0, 1550, 1549,
	0, 0, 0, 0, 838, 0, 0, 838, 0, 838,
	0, 0, 0, 0, 0, 3968, 0, 0, 739, 0,
	0, 0, 0, 1092, 0, 0, 0, 0, 838, 790,
	790, 790, 790, 813, 814, 838, 0, 0, 0, 838,
	838, 0, 0, 838, 0, 0, 0, 0, 2127, 838,
	0, 0, 0, 0, 888, 888, 0, 2117, 2118, 2119,
	0, 838, 0, 0, 5681, 0, 2111, 2112, 2113, 2114,
	2115, 2116, 0, 0, 931, 1540, 0, 0, 0, 0,
	957, 0, 961, 0, 0, 0, 0, 977, 978, 0,
	0, 983, 984, 0, 0, 0, 0, 0, 1092, 0,
	0, 0, 0, 1092, 0, 1553, 0, 0, 0, 0,
	0, 1092, 0, 0, 1012, 0, 0, 0, 0, 0,
	1025, 0, 1028, 0, 1030, 1031, 1032, 1033, 1034, 0,
	0, 838, 1043, 0, 0, 0, 1048, 0, 0, 0,
	0, 839, 1057, 0, 3525, 0, 0, 1986, 0, 1111,
	0, 0, 1649, 0, 1123, 1125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 838, 0, 0,
	0, 0, 0, 0, 971, 2138, 0, 0, 2108, 0,
	0, 0, 2120, 2121, 2122, 838, 0, 0, 0, 0,
	838, 0, 0, 0, 2663, 0, 0, 2664, 0, 0,
	0, 2669, 0, 2661, 0, 0, 0, 0, 2666, 2670,
	2665, 0, 2667, 0, 2939, 0, 2668, 2131, 2132, 2662,
	0, 0, 0, 0, 838, 0, 2671, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1092, 0, 0, 0, 0, 2127, 0, 1651, 0,
	0, 0, 0, 0, 971, 2117, 2118, 2119, 971, 0,
	0, 0, 5659, 0, 2111, 2112, 2113, 2114, 2115, 2116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 0, 0, 1092, 0, 0, 0, 2138, 0, 971,
	2108, 0, 0, 0, 2120, 2121, 2122, 0, 0, 0,
	0, 0, 0, 0, 838, 0, 2663, 0, 0, 2664,
	0, 0, 0, 2669, 0, 2661, 0, 0, 0, 0,
	2666, 2670, 2665, 0, 2667, 0, 1640, 0, 2668, 2131,
	2132, 2662, 0, 0, 1092, 1092, 0, 0, 2671, 0,
	0, 0, 0, 0, 0, 0, 2127, 973, 1650, 0,
	0, 0, 0, 0, 0, 2117, 2118, 2119, 0, 973,
	973, 0, 0, 0, 2111, 2112, 2113, 2114, 2115, 2116,
	0, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	1016, 973, 0, 0, 0, 1016, 0, 1016, 1646, 0,
	0, 0, 0, 0, 973, 973, 0, 0, 3525, 838,
	0, 0, 0, 0, 0, 0, 1649, 838, 838, 838,
	0, 1643, 0, 0, 1016, 1016, 1016, 0, 0, 0,
	0, 973, 973, 973, 0, 0, 0, 0, 0, 0,
	0, 0, 3526, 838, 838, 1648, 0, 838, 838, 838,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 973, 0,
	0, 0, 0, 0, 838, 0, 2138, 0, 2939, 2108,
	0, 0, 0, 2120, 2121, 2122, 0, 1654, 0, 0,
	0, 838, 838, 0, 0, 2663, 0, 0, 2664, 0,
	0, 1092, 2669, 0, 2661, 0, 838, 838, 0, 2666,
	2670, 2665, 1651, 2667, 0, 1986, 0, 2668, 2131, 2132,
	2662, 0, 143, 0, 0, 1641, 0, 2671, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1647,
	0, 838, 0, 0, 0, 0, 1092, 0, 0, 0,
	2138, 0, 0, 2108, 0, 1644, 0, 2120, 2121, 2122,
	0, 0, 1642, 0, 0, 0, 1652, 0, 0, 2663,
	0, 0, 2664, 0, 0, 0, 2669, 0, 2661, 3527,
	0, 0, 0, 2666, 2670, 2665, 0, 2667, 0, 0,
	5292, 2668, 2131, 2132, 2662, 0, 0, 0, 838, 0,
	1640, 2671, 1092, 1645, 0, 3528, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	838, 0, 1650, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4539, 0, 1223,
	0, 0, 0, 971, 0, 0, 0, 0, 0, 0,
	0, 790, 1646, 0, 0, 0, 0, 838, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2127, 0, 1069, 1254, 0, 1643, 4568, 0, 0, 2117,
	2118, 2119, 971, 971, 0, 0, 5517, 0, 2111, 2112,
	2113, 2114, 2115, 2116, 0, 0, 3526, 0, 0, 1648,
	0, 0, 0, 0, 0, 0, 838, 0, 0, 0,
	0, 0, 838, 0, 0, 0, 0, 0, 838, 0,
	0, 0, 0, 838, 0, 838, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 838, 0,
	0, 1654, 0, 0, 888, 4605, 0, 0, 0, 0,
	1069, 0, 0, 0, 0, 0, 838, 0, 0, 0,
	0, 0, 0, 838, 0, 0, 0, 0, 0, 0,
	838, 0, 0, 0, 0, 0, 143, 838, 1470, 3521,
	0, 1473, 838, 0, 0, 0, 0, 0, 0, 0,
	0, 2767, 2127, 1647, 0, 0, 0, 0, 0, 971,
	0, 2117, 2118, 2119, 0, 0, 4634, 0, 5500, 1644,
	2111, 2112, 2113, 2114, 2115, 2116, 1642, 0, 0, 0,
	1652, 4650, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3527, 1515, 0, 1092, 1519, 0, 0,
	0, 0, 0, 1092, 0, 0, 0, 0, 1862, 0,
	0, 0, 0, 0, 0, 0, 0, 1645, 0, 3528,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1069, 0, 838, 0, 0, 1986, 0, 1662, 0,
	0, 0, 0, 0, 0, 0, 838, 0, 0, 973,
	838, 0, 0, 1705, 0, 0, 0, 0, 971, 838,
	838, 0, 973, 0, 0, 973, 0, 0, 0, 0,
	0, 0, 973, 0, 0, 973, 838, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1092, 0, 1092, 1092, 838, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1069, 1069, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 973, 0, 0, 838, 0, 0,
	0, 2127, 838, 838, 838, 0, 838, 0, 0, 0,
	2117, 2118, 2119, 0, 0, 838, 1986, 5491, 0, 2111,
	2112, 2113, 2114, 2115, 2116, 0, 0, 0, 0, 0,
	0, 0, 0, 1836, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1092, 838, 0, 1986, 137, 0, 0,
	0, 136, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 0, 1986, 0, 0, 0, 0, 0, 971,
	0, 0, 0, 0, 838, 2127, 0, 0, 0, 0,
	0, 0, 0, 0, 2117, 2118, 2119, 0, 183, 0,
	0, 0, 184, 2111, 2112, 2113, 2114, 2115, 2116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 0, 0, 0, 0, 142, 0,
	0, 0, 0, 790, 0, 790, 790, 790, 0, 0,
	790, 790, 790, 0, 175, 790, 135, 0, 0, 0,
	0, 0, 0, 0, 181, 0, 0, 0, 0, 0,
	0, 1954, 0, 0, 0, 0, 0, 1962, 1963, 838,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 838, 0, 838, 838,
	0, 1069, 0, 0, 838, 0, 0, 0, 0, 292,
	0, 1069, 4904, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 144, 295, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 0,
	838, 0, 0, 0, 0, 0, 0, 131, 0, 176,
	0, 0, 0, 0, 0, 159, 0, 164, 157, 0,
	0, 173, 0, 146, 0, 0, 0, 2767, 0, 0,
	0, 0, 838, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 838, 166, 161, 838, 0, 0, 0,
	0, 0, 0, 0, 160, 838, 838, 0, 1069, 973,
	0, 130, 0, 0, 0, 0, 0, 0, 165, 153,
	0, 0, 0, 0, 0, 162, 973, 0, 0, 971,
	0, 0, 973, 0, 0, 151, 0, 0, 1069, 0,
	973, 973, 0, 0, 888, 0, 301, 141, 0, 0,
	0, 3232, 838, 0, 0, 0, 0, 971, 0, 0,
	0, 0, 0, 838, 0, 0, 0, 0, 973, 0,
	0, 0, 0, 167, 170, 0, 0, 297, 171, 2719,
	973, 0, 0, 0, 0, 0, 973, 0, 298, 0,
	163, 0, 0, 0, 0, 0, 0, 838, 838, 1278,
	0, 838, 0, 169, 0, 1069, 0, 0, 0, 0,
	5057, 0, 2758, 3231, 0, 0, 0, 0, 971, 0,
	302, 838, 0, 150, 0, 0, 0, 0, 303, 0,
	838, 0, 838, 0, 0, 140, 296, 0, 3233, 139,
	158, 0, 149, 0, 0, 0, 143, 0, 0, 1016,
	152, 0, 147, 1016, 1016, 0, 0, 0, 148, 1276,
	0, 0, 5107, 174, 0, 973, 0, 5112, 0, 0,
	0, 1988, 0, 156, 3234, 0, 0, 0, 0, 0,
	0, 145, 0, 0, 0, 0, 0, 0, 838, 0,
	0, 0, 1069, 0, 1069, 0, 0, 0, 0, 838,
	0, 2886, 0, 0, 0, 0, 0, 172, 0, 0,
	0, 838, 0, 0, 0, 0, 0, 168, 0, 3968,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1069, 0, 0, 1069, 0, 271, 3235, 0, 305,
	0, 838, 0, 1069, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 838, 0, 0, 0, 1279, 0,
	0, 3236, 1092, 187, 0, 0, 306, 0, 0, 0,
	0, 293, 0, 838, 307, 1986, 180, 2138, 2968, 0,
	2108, 0, 0, 0, 2120, 2121, 2122, 0, 0, 0,
	299, 0, 0, 0, 0, 1280, 2663, 0, 0, 2664,
	0, 1281, 0, 2669, 0, 2661, 300, 0, 0, 0,
	2666, 2670, 2665, 0, 2667, 0, 3230, 0, 2668, 2131,
	2132, 2662, 0, 0, 838, 838, 0, 0, 2671, 0,
	0, 0, 294, 0, 0, 0, 0, 0, 0, 1986,
	838, 0, 2138, 0, 0, 2108, 0, 0, 0, 2120,
	2121, 2122, 0, 0, 0, 0, 838, 838, 0, 3069,
	973, 2663, 3071, 0, 2664, 0, 3228, 1986, 2669, 1988,
	2661, 1988, 0, 0, 0, 2666, 2670, 2665, 0, 2667,
	0, 0, 0, 2668, 2131, 2132, 2662, 0, 0, 0,
	0, 0, 973, 2671, 0, 5254, 0, 0, 0, 973,
	0, 0, 0, 1069, 0, 1069, 0, 0, 0, 0,
	0, 2138, 331, 0, 2108, 0, 3106, 0, 2120, 2121,
	2122, 0, 0, 0, 0, 0, 0, 0, 3114, 3115,
	2663, 0, 0, 2664, 0, 0, 0, 2669, 0, 2661,
	0, 0, 0, 0, 2666, 2670, 2665, 0, 2667, 0,
	0, 0, 2668, 2131, 2132, 2662, 0, 0, 2138, 0,
	0, 2108, 2671, 0, 5229, 2120, 2121, 2122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2663, 0, 0,
	2664, 0, 0, 0, 2669, 0, 2661, 0, 0, 0,
	0, 2666, 2670, 2665, 0, 2667, 0, 0, 0, 2668,
	2131, 2132, 2662, 0, 0, 0, 0, 0, 0, 2671,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3183, 2138, 0, 3186,
	2108, 0, 0, 0, 2120, 2121, 2122, 0, 0, 0,
	0, 0, 790, 790, 0, 1069, 2663, 790, 790, 2664,
	790, 790, 0, 2669, 0, 2661, 0, 0, 5227, 0,
	2666, 2670, 2665, 0, 2667, 0, 0, 0, 2668, 2131,
	2132, 2662, 0, 2138, 0, 0, 2108, 5228, 2671, 0,
	2120, 2121, 2122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2663, 0, 973, 2664, 0, 0, 0, 2669,
	0, 2661, 0, 0, 0, 0, 2666, 2670, 2665, 0,
	2667, 0, 0, 0, 2668, 2131, 2132, 2662, 0, 0,
	0, 0, 0, 0, 2671, 0, 5223, 0, 972, 0,
	2138, 0, 0, 2108, 0, 0, 0, 2120, 2121, 2122,
	972, 972, 0, 0, 0, 0, 0, 0, 0, 2663,
	0, 0, 2664, 0, 5443, 0, 2669, 0, 2661, 0,
	0, 0, 972, 2666, 2670, 2665, 5453, 2667, 0, 0,
	0, 2668, 2131, 2132, 2662, 972, 972, 0, 0, 0,
	0, 2671, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1016, 1016, 0, 1016, 0, 1016, 0, 0,
	0, 0, 972, 972, 972, 973, 0, 973, 973, 973,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2138, 0, 0, 2108, 0, 0, 972,
	2120, 2121, 2122, 0, 0, 0, 0, 0, 0, 3968,
	0, 0, 2663, 0, 0, 2664, 0, 0, 0, 2669,
	0, 2661, 1016, 1016, 1016, 0, 2666, 2670, 2665, 0,
	2667, 0, 0, 0, 2668, 2131, 2132, 2662, 0, 0,
	0, 0, 2127, 0, 2671, 0, 0, 973, 0, 0,
	0, 2117, 2118, 2119, 0, 0, 0, 0, 0, 0,
	2111, 2112, 2113, 2114, 2115, 2116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3051, 0, 0, 0,
	0, 292, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	0, 0, 0, 0, 0, 0, 0, 2127, 0, 0,
	0, 0, 0, 0, 0, 0, 2117, 2118, 2119, 0,
	0, 0, 0, 5231, 0, 2111, 2112, 2113, 2114, 2115,
	2116, 2138, 0, 0, 2108, 0, 0, 0, 2120, 2121,
	2122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2663, 0, 0, 2664, 0, 0, 0, 2669, 0, 2661,
	0, 0, 0, 0, 2666, 2670, 2665, 0, 2667, 0,
	0, 0, 2668, 2131, 2132, 2662, 2127, 0, 0, 0,
	0, 0, 2671, 0, 0, 2117, 2118, 2119, 0, 0,
	0, 0, 0, 0, 2111, 2112, 2113, 2114, 2115, 2116,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 3047, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2127, 0, 0, 0, 0, 0, 0,
	0, 0, 2117, 2118, 2119, 0, 0, 0, 0, 297,
	0, 2111, 2112, 2113, 2114, 2115, 2116, 0, 0, 0,
	298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1278, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3049, 0, 0, 1988, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	303, 0, 2127, 0, 0, 0, 0, 0, 296, 0,
	3050, 2117, 2118, 2119, 0, 0, 0, 0, 0, 0,
	2111, 2112, 2113, 2114, 2115, 2116, 0, 0, 0, 3968,
	3968, 1276, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2127, 0,
	0, 0, 0, 0, 0, 0, 0, 2117, 2118, 2119,
	0, 0, 0, 0, 0, 0, 2111, 2112, 2113, 2114,
	2115, 2116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2127, 0, 0, 271, 3052,
	0, 305, 0, 0, 2117, 2118, 2119, 0, 0, 0,
	1069, 5214, 0, 2111, 2112, 2113, 2114, 2115, 2116, 1069,
	1279, 0, 0, 3053, 0, 0, 0, 0, 306, 0,
	972, 0, 0, 293, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 972, 0, 0, 972, 0, 0, 0,
	0, 0, 299, 972, 0, 0, 972, 1280, 0, 0,
	0, 0, 0, 1281, 0, 0, 0, 0, 300, 0,
	0, 0, 3054, 0, 0, 0, 0, 0, 3055, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1069, 0, 0, 0, 294, 0, 0, 0, 2127, 0,
	0, 0, 0, 0, 0, 972, 0, 2117, 2118, 2119,
	0, 0, 0, 1069, 5206, 0, 2111, 2112, 2113, 2114,
	2115, 2116, 0, 0, 0, 0, 3048, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2138, 0, 0, 2108, 0, 0, 0, 2120, 2121,
	2122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2663, 0, 0, 2664, 0, 0, 0, 2669, 0, 2661,
	0, 0, 0, 0, 2666, 2670, 2665, 0, 2667, 0,
	0, 0, 2668, 2131, 2132, 2662, 0, 0, 0, 0,
	1069, 1069, 2671, 3554, 0, 0, 0, 0, 0, 1069,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3568, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3585, 0, 0, 0, 0,
	0, 0, 0, 3596, 1538, 0, 2127, 0, 0, 1539,
	0, 0, 0, 1547, 0, 2117, 2118, 2119, 0, 0,
	0, 0, 5062, 0, 2111, 2112, 2113, 2114, 2115, 2116,
	1538, 0, 0, 0, 0, 1539, 3642, 3643, 3644, 1547,
	0, 0, 0, 0, 3648, 0, 3649, 0, 0, 0,
	0, 0, 0, 0, 0, 3659, 0, 0, 0, 0,
	0, 0, 0, 3670, 0, 3674, 3675, 3676, 3677, 0,
	0, 3684, 0, 3686, 3689, 3711, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3712, 3713, 0,
	0, 0, 3718, 3719, 0, 3720, 0, 0, 0, 0,
	0, 1533, 0, 0, 1546, 0, 0, 0, 0, 0,
	3730, 3731, 3732, 0, 0, 0, 1069, 0, 0, 0,
	0, 0, 1069, 0, 0, 3750, 3751, 0, 0, 0,
	1546, 0, 0, 0, 0, 1551, 0, 0, 0, 0,
	0, 3763, 3764, 0, 0, 3766, 3767, 0, 3769, 0,
	0, 0, 3771, 0, 0, 0, 0, 0, 3776, 3777,
	0, 1551, 3779, 0, 0, 3783, 0, 3784, 0, 0,
	972, 3787, 0, 3789, 0, 0, 0, 0, 1537, 3790,
	0, 0, 0, 0, 0, 0, 0, 972, 0, 1535,
	0, 0, 0, 972, 0, 0, 0, 0, 3801, 3802,
	3803, 972, 972, 1069, 1537, 1541, 0, 3815, 0, 3816,
	0, 0, 3819, 0, 0, 1535, 0, 0, 3821, 0,
	3822, 0, 0, 3825, 0, 3827, 0, 0, 0, 972,
	3829, 1541, 0, 0, 0, 0, 0, 0, 1536, 0,
	1543, 972, 0, 0, 0, 0, 1542, 972, 0, 0,
	3844, 1988, 0, 0, 0, 0, 0, 3847, 0, 0,
	0, 3849, 0, 3853, 1536, 0, 1543, 0, 0, 0,
	3870, 3871, 1542, 0, 0, 0, 0, 0, 3880, 0,
	0, 1538, 0, 3888, 0, 0, 1539, 1988, 0, 0,
	1547, 1544, 0, 0, 3901, 0, 0, 1069, 1069, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1538, 3968, 0, 0, 1544, 1539, 0,
	0, 1988, 1547, 0, 0, 0, 972, 0, 0, 0,
	0, 0, 1987, 0, 0, 2138, 1545, 3938, 2108, 3940,
	0, 0, 2120, 2121, 2122, 0, 0, 1548, 0, 0,
	0, 0, 1562, 0, 2663, 973, 0, 2664, 0, 1988,
	0, 2669, 1545, 2661, 0, 0, 0, 0, 2666, 2670,
	2665, 0, 2667, 1548, 0, 0, 2668, 2131, 2132, 2662,
	3710, 1546, 1550, 1549, 4513, 0, 2671, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 973, 0, 0, 0, 0, 1532, 0, 1550, 1549,
	0, 0, 1551, 1546, 0, 0, 2127, 973, 0, 0,
	0, 973, 0, 973, 0, 2117, 2118, 2119, 0, 973,
	0, 0, 4988, 0, 2111, 2112, 2113, 2114, 2115, 2116,
	0, 0, 0, 0, 1551, 0, 973, 0, 0, 0,
	0, 0, 0, 0, 0, 1537, 973, 0, 0, 1540,
	0, 0, 0, 0, 0, 0, 1560, 4026, 973, 973,
	0, 0, 0, 0, 0, 1988, 973, 0, 0, 0,
	0, 0, 1541, 0, 973, 1540, 0, 1537, 0, 1553,
	0, 973, 0, 0, 0, 973, 0, 0, 973, 1069,
	0, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 973, 0, 1541, 1553, 0, 1543, 0, 0,
	973, 972, 0, 1542, 0, 0, 973, 0, 0, 0,
	1987, 0, 1987, 0, 973, 0, 0, 0, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1543,
	0, 1988, 0, 972, 973, 1542, 0, 0, 0, 0,
	972, 0, 1016, 0, 1016, 1016, 0, 0, 1544, 0,
	1069, 0, 0, 0, 0, 0, 0, 2138, 0, 0,
	2108, 0, 0, 0, 2120, 2121, 2122, 0, 1069, 4803,
	0, 0, 0, 0, 0, 0, 2663, 0, 0, 2664,
	1544, 0, 0, 2669, 0, 2661, 0, 0, 0, 0,
	2666, 2670, 2665, 1561, 2667, 0, 0, 0, 2668, 2131,
	2132, 2662, 0, 0, 1548, 0, 0, 0, 2671, 0,
	0, 0, 0, 1069, 0, 0, 973, 0, 0, 1069,
	0, 0, 0, 973, 2138, 1545, 0, 2108, 0, 0,
	973, 2120, 2121, 2122, 0, 0, 1548, 1558, 0, 1550,
	1549, 0, 0, 2663, 0, 0, 2664, 0, 0, 0,
	2669, 0, 2661, 0, 1988, 0, 0, 2666, 2670, 2665,
	973, 2667, 0, 0, 0, 2668, 2131, 2132, 2662, 4512,
	0, 1550, 1549, 0, 0, 2671, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1540, 0, 0, 0,
	0, 0, 0, 0, 0, 1016, 0, 1016, 1016, 4284,
	0, 2138, 4288, 0, 2108, 972, 0, 0, 2120, 2121,
	2122, 0, 0, 0, 0, 0, 1553, 0, 1540, 0,
	2663, 0, 0, 2664, 0, 0, 0, 2669, 0, 2661,
	0, 0, 0, 0, 2666, 2670, 2665, 0, 2667, 0,
	0, 4330, 2668, 2131, 2132, 2662, 0, 0, 1553, 0,
	0, 0, 2671, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4372,
	0, 1069, 1069, 0, 1069, 0, 0, 4380, 0, 4380,
	0, 0, 0, 0, 0, 4389, 0, 0, 0, 0,
	2127, 0, 0, 0, 0, 0, 4730, 0, 0, 2117,
	2118, 2119, 0, 0, 0, 0, 4964, 0, 2111, 2112,
	2113, 2114, 2115, 2116, 0, 0, 972, 0, 972, 972,
	972, 972, 0, 0, 0, 0, 1069, 1069, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4458, 0, 0, 2138, 0,
	0, 2108, 0, 0, 0, 2120, 2121, 2122, 4475, 4476,
	4477, 4478, 0, 0, 0, 0, 0, 2663, 0, 0,
	2664, 0, 1988, 0, 2669, 0, 2661, 0, 1988, 0,
	0, 2666, 2670, 2665, 0, 2667, 0, 0, 972, 2668,
	2131, 2132, 2662, 0, 0, 0, 0, 0, 1069, 2671,
	0, 0, 0, 0, 2138, 0, 1069, 2108, 0, 0,
	0, 2120, 2121, 2122, 4507, 4508, 4509, 0, 0, 4514,
	4515, 4516, 4517, 2663, 0, 0, 2664, 0, 0, 0,
	2669, 0, 2661, 0, 0, 0, 0, 2666, 2670, 2665,
	0, 2667, 0, 0, 1069, 2668, 2131, 2132, 2662, 0,
	0, 0, 0, 2138, 0, 2671, 2108, 0, 0, 0,
	2120, 2121, 2122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2663, 0, 0, 2664, 0, 4538, 973, 2669,
	0, 2661, 0, 0, 0, 0, 2666, 2670, 2665, 0,
	2667, 0, 0, 0, 2668, 2131, 2132, 2662, 0, 0,
	0, 0, 0, 0, 2671, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4567, 1988, 0, 0,
	0, 0, 2127, 0, 4569, 0, 0, 0, 0, 1441,
	1069, 2117, 2118, 2119, 973, 973, 0, 0, 0, 0,
	2111, 2112, 2113, 2114, 2115, 2116, 0, 0, 0, 0,
	2138, 0, 0, 2108, 973, 973, 0, 2120, 2121, 2122,
	0, 0, 4193, 0, 973, 0, 0, 0, 0, 2663,
	0, 0, 2664, 0, 0, 0, 2669, 0, 2661, 0,
	0, 0, 0, 2666, 2670, 2665, 0, 2667, 0, 2127,
	0, 2668, 2131, 2132, 2662, 0, 0, 0, 2117, 2118,
	2119, 2671, 0, 0, 0, 4743, 0, 2111, 2112, 2113,
	2114, 2115, 2116, 1538, 0, 0, 0, 0, 1539, 1987,
	0, 4620, 1547, 0, 0, 0, 0, 0, 0, 0,
	0, 4624, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1069, 0, 0, 0, 1988, 1988, 1988, 0, 0,
	1069, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3735, 1069, 0, 0, 0, 0,
	0, 0, 4658, 4659, 0, 0, 2127, 0, 0, 4663,
	0, 0, 0, 0, 0, 2117, 2118, 2119, 0, 0,
	0, 1344, 0, 1546, 2111, 2112, 2113, 2114, 2115, 2116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1551, 0, 0, 0, 0, 0,
	0, 0, 973, 0, 0, 2138, 0, 0, 2108, 0,
	0, 0, 2120, 2121, 2122, 973, 0, 0, 0, 0,
	0, 0, 0, 0, 2663, 0, 0, 2664, 0, 0,
	0, 2669, 0, 2661, 0, 0, 0, 1537, 2666, 2670,
	2665, 973, 2667, 0, 0, 0, 2668, 2131, 2132, 2662,
	0, 0, 0, 0, 0, 0, 2671, 0, 4183, 0,
	0, 0, 0, 0, 1541, 0, 1069, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1069, 1069, 0,
	0, 1069, 0, 0, 0, 0, 0, 0, 0, 973,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1543,
	0, 0, 0, 2127, 0, 1542, 0, 0, 973, 973,
	973, 0, 2117, 2118, 2119, 0, 0, 0, 0, 4724,
	1069, 2111, 2112, 2113, 2114, 2115, 2116, 0, 0, 0,
	0, 0, 822, 0, 0, 0, 0, 831, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1544, 0, 0, 0, 0, 0, 973, 0, 0, 2127,
	0, 0, 0, 0, 0, 0, 0, 0, 2117, 2118,
	2119, 973, 0, 0, 0, 4406, 0, 2111, 2112, 2113,
	2114, 2115, 2116, 0, 0, 0, 973, 0, 0, 0,
	0, 0, 973, 1069, 0, 1545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1548, 0, 2127, 0,
	0, 0, 0, 0, 0, 0, 0, 2117, 2118, 2119,
	0, 0, 4876, 0, 4211, 0, 2111, 2112, 2113, 2114,
	2115, 2116, 0, 0, 0, 0, 0, 0, 0, 3734,
	0, 1550, 1549, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4380,
	0, 0, 0, 0, 0, 0, 4905, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1162, 1163, 1165, 1169, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2127, 0, 1069, 0, 0,
	0, 0, 0, 0, 2117, 2118, 2119, 0, 1540, 0,
	0, 0, 204, 2111, 2112, 2113, 2114, 2115, 2116, 235,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4380, 0, 0, 0, 0, 0, 231, 1553, 0,
	0, 208, 0, 0, 0, 0, 0, 4975, 4976, 0,
	228, 0, 0, 2138, 0, 0, 2108, 0, 0, 0,
	2120, 2121, 2122, 0, 0, 4178, 0, 0, 0, 0,
	0, 4995, 2663, 0, 0, 2664, 0, 0, 0, 2669,
	0, 2661, 215, 0, 0, 1988, 2666, 2670, 2665, 0,
	2667, 5025, 0, 0, 2668, 2131, 2132, 2662, 0, 0,
	5027, 0, 0, 0, 2671, 0, 0, 0, 0, 5029,
	5030, 5031, 5032, 0, 0, 5035, 5036, 0, 0, 5039,
	5040, 5041, 5042, 5043, 5044, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 5056,
	0, 0, 0, 0, 0, 0, 0, 5060, 0, 5061,
	0, 0, 0, 5063, 0, 0, 0, 0, 0, 0,
	0, 0, 1987, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5091, 221, 0, 0, 0, 5096, 5097, 0,
	0, 217, 5098, 5099, 0, 0, 0, 0, 0, 5103,
	5104, 5105, 5106, 0, 5108, 5109, 5110, 5111, 1987, 0,
	2127, 0, 5118, 0, 211, 0, 0, 0, 0, 2117,
	2118, 2119, 0, 0, 0, 0, 0, 0, 2111, 2112,
	2113, 2114, 2115, 2116, 0, 0, 206, 973, 0, 0,
	0, 0, 1987, 0, 0, 5141, 0, 5142, 0, 0,
	207, 0, 0, 0, 0, 0, 5148, 218, 0, 0,
	1069, 0, 0, 0, 0, 212, 0, 0, 0, 0,
	0, 0, 0, 213, 0, 0, 972, 0, 232, 0,
	1987, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 973, 0, 0, 0, 973, 973, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1988, 972, 1988,
	1069, 0, 972, 0, 972, 0, 0, 0, 1069, 0,
	972, 0, 0, 0, 0, 1315, 1315, 0, 0, 0,
	0, 0, 0, 0, 220, 0, 0, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 223, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1988, 0, 972,
	972, 1177, 0, 1180, 0, 227, 1987, 972, 0, 0,
	1182, 0, 0, 205, 0, 972, 0, 0, 0, 0,
	0, 214, 972, 0, 0, 0, 972, 0, 0, 972,
	0, 0, 972, 0, 0, 973, 0, 222, 0, 0,
	0, 0, 224, 972, 0, 0, 0, 0, 219, 0,
	230, 972, 229, 210, 0, 790, 0, 972, 0, 1538,
	1988, 0, 0, 209, 1539, 972, 0, 0, 1547, 972,
	234, 0, 233, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1987, 0, 0, 972, 0, 973, 1069, 0,
	0, 0, 973, 0, 0, 0, 0, 0, 0, 0,
	0, 831, 0, 0, 1169, 0, 0, 0, 0, 0,
	0, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1069, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1988, 0, 1546,
	0, 0, 0, 0, 0, 0, 0, 972, 0, 0,
	0, 5365, 0, 0, 972, 0, 0, 0, 2127, 0,
	0, 972, 0, 0, 0, 0, 0, 2117, 2118, 2119,
	1551, 1069, 1069, 0, 0, 0, 2111, 2112, 2113, 2114,
	2115, 2116, 0, 0, 0, 1987, 0, 0, 0, 0,
	2138, 972, 0, 2108, 0, 0, 0, 2120, 2121, 2122,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2663,
	0, 0, 2664, 1537, 0, 0, 2669, 0, 2661, 0,
	0, 0, 0, 2666, 2670, 2665, 0, 2667, 0, 0,
	0, 2668, 2131, 2132, 2662, 0, 0, 0, 0, 0,
	1541, 2671, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 5422, 0, 0, 0, 5424, 0, 0, 0, 0,
	0, 0, 0, 5427, 5428, 5429, 5430, 5431, 0, 0,
	5434, 5435, 5436, 5437, 0, 1543, 0, 0, 0, 0,
	0, 1542, 0, 5441, 5442, 0, 5444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1544, 0, 1069, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5469, 5470, 5471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1978, 0, 0, 0,
	2068, 0, 0, 0, 5479, 0, 0, 0, 2084, 0,
	2091, 1545, 0, 1069, 0, 0, 0, 2102, 0, 0,
	0, 0, 1548, 0, 0, 0, 0, 0, 2584, 2585,
	2586, 2587, 2588, 0, 0, 0, 0, 0, 0, 2593,
	0, 0, 1169, 0, 0, 0, 0, 0, 1845, 0,
	1169, 1169, 0, 1860, 0, 3717, 0, 1550, 1549, 1988,
	0, 0, 0, 2611, 0, 0, 0, 0, 0, 1069,
	0, 0, 0, 0, 0, 0, 0, 0, 5505, 0,
	0, 0, 0, 1987, 0, 2138, 973, 0, 2108, 1987,
	1538, 0, 2120, 2121, 2122, 1539, 1169, 4144, 0, 1547,
	0, 0, 0, 0, 2663, 0, 0, 2664, 0, 0,
	0, 2669, 0, 2661, 0, 0, 0, 0, 2666, 2670,
	2665, 5547, 2667, 0, 0, 0, 2668, 2131, 2132, 2662,
	0, 0, 0, 0, 1540, 0, 2671, 0, 0, 0,
	0, 0, 0, 2138, 0, 0, 2108, 0, 0, 1945,
	2120, 2121, 2122, 0, 0, 0, 0, 0, 0, 0,
	0, 2884, 2663, 0, 1553, 2664, 973, 0, 5611, 2669,
	973, 2661, 0, 0, 5619, 1169, 2666, 2670, 2665, 0,
	2667, 0, 0, 0, 2668, 2131, 2132, 2662, 0, 972,
	1546, 4151, 0, 0, 2671, 0, 0, 0, 0, 973,
	4380, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 973, 0, 0, 5664, 0, 0, 0, 0, 5667,
	0, 1551, 0, 0, 0, 5673, 0, 0, 1987, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2605, 2607, 2608, 972, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1537, 972, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 972, 0, 0, 5709, 5710,
	0, 0, 0, 0, 5715, 0, 0, 0, 0, 0,
	5717, 1541, 0, 0, 973, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5730, 5731, 0, 0, 0, 0,
	1069, 0, 0, 0, 0, 0, 1543, 0, 0, 0,
	0, 0, 1542, 0, 0, 2127, 0, 0, 5744, 0,
	0, 0, 0, 0, 2117, 2118, 2119, 0, 0, 0,
	0, 0, 1320, 2111, 2112, 2113, 2114, 2115, 2116, 0,
	0, 0, 0, 0, 0, 0, 1987, 1987, 1987, 0,
	0, 0, 0, 0, 0, 0, 0, 1544, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2764, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1069, 0, 1069, 1069, 0, 0, 2792, 0, 0,
	0, 0, 1545, 0, 0, 0, 0, 1988, 0, 0,
	0, 0, 0, 1548, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2138, 0, 0, 2108, 0, 0, 835, 2120,
	2121, 2122, 0, 972, 0, 0, 2883, 0, 1550, 1549,
	0, 2663, 0, 0, 2664, 0, 972, 0, 2669, 0,
	2661, 0, 0, 0, 0, 2666, 2670, 2665, 0, 2667,
	1069, 0, 0, 2668, 2131, 2132, 2662, 2138, 0, 0,
	2108, 0, 972, 2671, 2120, 2121, 2122, 0, 4380, 0,
	1016, 0, 0, 0, 0, 0, 2663, 0, 0, 2664,
	0, 0, 0, 2669, 0, 2661, 5888, 0, 0, 0,
	2666, 2670, 2665, 0, 2667, 0, 0, 0, 2668, 2131,
	2132, 2662, 0, 0, 0, 1540, 0, 0, 2671, 0,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 973, 0, 0, 0, 972,
	972, 972, 0, 0, 5922, 1553, 0, 5925, 0, 1016,
	0, 0, 0, 0, 2990, 0, 0, 2995, 0, 0,
	2127, 0, 0, 0, 0, 0, 0, 0, 0, 2117,
	2118, 2119, 0, 0, 973, 973, 0, 0, 2111, 2112,
	2113, 2114, 2115, 2116, 0, 0, 0, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 972, 2127, 0,
	0, 0, 0, 972, 0, 0, 0, 2117, 2118, 2119,
	0, 0, 0, 0, 3350, 0, 2111, 2112, 2113, 2114,
	2115, 2116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1978, 1978, 1978, 0, 0, 2138,
	0, 0, 2108, 0, 0, 0, 2120, 2121, 2122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2663, 0,
	0, 2664, 0, 0, 0, 2669, 0, 2661, 0, 0,
	0, 973, 2666, 2670, 2665, 0, 2667, 0, 0, 0,
	2668, 2131, 2132, 2662, 1071, 1071, 0, 0, 0, 0,
	2671, 0, 0, 0, 0, 0, 0, 0, 0, 6064,
	0, 0, 0, 0, 3132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 6084, 6085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1538, 1571, 1988, 0,
	0, 1539, 0, 2584, 2585, 1547, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1315, 0, 0,
	973, 3293, 3294, 3295, 3296, 3297, 3298, 3299, 3300, 3301,
	3302, 3303, 3304, 3305, 3306, 3307, 3308, 0, 3314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1987, 0, 0, 0,
	0, 0, 0, 0, 1573, 0, 0, 1568, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 6190, 1988, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	6200, 0, 0, 0, 0, 0, 0, 1551, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1988, 0,
	0, 0, 0, 1538, 6216, 0, 0, 0, 1539, 0,
	0, 0, 1547, 0, 0, 1988, 4138, 2127, 0, 0,
	0, 973, 0, 0, 0, 0, 2117, 2118, 2119, 0,
	1537, 0, 0, 0, 0, 2111, 2112, 2113, 2114, 2115,
	2116, 0, 0, 0, 0, 0, 0, 1572, 0, 1069,
	0, 0, 0, 0, 0, 0, 0, 1541, 972, 0,
	0, 0, 2127, 0, 0, 0, 0, 0, 0, 0,
	0, 2117, 2118, 2119, 2878, 0, 3246, 0, 0, 0,
	2111, 2112, 2113, 2114, 2115, 2116, 0, 0, 0, 0,
	0, 0, 1543, 0, 0, 0, 0, 0, 1542, 0,
	0, 0, 0, 1546, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 972, 0, 0, 0, 972, 972, 6280,
	0, 0, 0, 0, 0, 1268, 0, 0, 0, 0,
	292, 0, 0, 0, 1551, 0, 0, 0, 0, 1574,
	0, 0, 0, 1544, 0, 0, 0, 0, 295, 0,
	0, 0, 1538, 0, 0, 0, 0, 1539, 1987, 0,
	1987, 1547, 0, 0, 0, 0, 1361, 0, 0, 1575,
	0, 0, 1576, 0, 0, 0, 1577, 1537, 0, 0,
	1269, 0, 0, 0, 0, 0, 0, 0, 1570, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1578, 1548,
	0, 0, 0, 0, 1541, 0, 0, 0, 1987, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1586, 0, 0, 0, 0, 0, 0,
	0, 0, 1566, 0, 1550, 1549, 1581, 1016, 1016, 1543,
	0, 0, 0, 0, 0, 1542, 972, 0, 0, 0,
	0, 0, 1546, 1579, 2127, 0, 0, 301, 0, 0,
	0, 973, 1266, 2117, 2118, 2119, 0, 0, 0, 0,
	1580, 1987, 2111, 2112, 2113, 2114, 2115, 2116, 0, 0,
	0, 0, 0, 1551, 1016, 0, 0, 0, 297, 973,
	1544, 279, 0, 0, 0, 0, 292, 0, 972, 298,
	291, 0, 0, 972, 0, 0, 0, 1582, 0, 6404,
	1278, 1540, 0, 0, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1265, 0, 1537, 0, 0, 0,
	0, 302, 289, 0, 0, 1561, 0, 0, 0, 303,
	0, 1553, 0, 0, 0, 0, 1548, 296, 0, 1267,
	973, 0, 0, 1541, 0, 972, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1987, 0,
	1276, 0, 0, 0, 0, 0, 1978, 0, 1649, 2877,
	0, 1550, 1549, 0, 0, 1274, 3373, 3375, 1543, 0,
	0, 0, 0, 3381, 1542, 3392, 3395, 0, 3406, 3407,
	3412, 3415, 0, 0, 0, 0, 0, 3423, 0, 0,
	0, 3427, 3433, 3375, 3375, 3440, 3375, 0, 3375, 3375,
	3375, 0, 0, 301, 0, 0, 0, 0, 285, 3455,
	0, 0, 0, 3306, 3307, 3308, 3314, 0, 308, 1544,
	1673, 0, 1070, 1070, 0, 0, 0, 271, 1271, 0,
	305, 0, 0, 0, 297, 0, 0, 0, 1540, 0,
	0, 0, 0, 0, 0, 298, 0, 0, 0, 1279,
	0, 0, 1272, 0, 1651, 309, 286, 306, 0, 0,
	0, 0, 293, 0, 1545, 307, 0, 0, 1553, 0,
	276, 0, 0, 0, 0, 1548, 0, 302, 0, 0,
	0, 299, 0, 0, 1071, 303, 1280, 1988, 0, 0,
	0, 0, 1281, 296, 0, 282, 0, 300, 0, 0,
	0, 1273, 0, 310, 0, 0, 0, 1264, 1585, 0,
	1550, 1549, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 0, 0, 294, 3616, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1640, 0, 0, 0, 0, 0, 0, 0,
	0, 1988, 0, 0, 0, 1275, 3391, 1262, 0, 0,
	0, 0, 1071, 0, 1650, 0, 0, 0, 1016, 1016,
	0, 0, 0, 288, 0, 0, 0, 0, 1649, 1988,
	0, 0, 0, 0, 308, 0, 0, 1540, 0, 0,
	0, 0, 0, 271, 283, 0, 305, 0, 0, 0,
	0, 0, 0, 0, 1646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1426, 290, 0, 1553, 284, 0,
	0, 309, 0, 306, 0, 0, 0, 1643, 293, 0,
	1987, 307, 0, 269, 0, 0, 0, 0, 0, 0,
	1635, 0, 0, 0, 0, 0, 0, 299, 0, 0,
	0, 1648, 281, 0, 0, 251, 0, 972, 287, 0,
	236, 0, 0, 300, 249, 0, 0, 280, 0, 310,
	0, 0, 0, 275, 1651, 3781, 0, 0, 240, 0,
	0, 1639, 0, 1071, 0, 0, 0, 0, 0, 294,
	0, 0, 1674, 1654, 0, 0, 263, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 278, 0, 0, 0, 1671, 3640, 0, 143, 0,
	0, 1641, 0, 0, 0, 0, 0, 972, 0, 0,
	0, 972, 0, 0, 0, 1647, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1644, 1640, 1071, 1071, 0, 0, 0, 1642, 0,
	972, 0, 1652, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 1650, 1980, 0, 0, 0, 0,
	0, 0, 243, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1645,
	0, 0, 0, 0, 0, 0, 0, 0, 244, 0,
	0, 0, 0, 0, 1646, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 2123, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 0, 1643, 0, 1169,
	0, 0, 0, 0, 247, 0, 0, 0, 0, 0,
	0, 261, 0, 0, 0, 972, 0, 0, 0, 268,
	0, 1648, 0, 1163, 0, 0, 0, 241, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1084, 1084, 0, 0, 0, 0, 0, 0, 0, 0,
	237, 1639, 0, 1163, 0, 0, 0, 0, 0, 0,
	0, 0, 1636, 1654, 1163, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1633, 0, 0, 143, 0,
	0, 1641, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1647, 3872, 0, 252, 3876,
	0, 0, 0, 1071, 0, 0, 0, 271, 253, 0,
	254, 1644, 0, 1071, 0, 0, 0, 0, 1642, 1978,
	0, 0, 1652, 0, 4041, 4042, 0, 4044, 1987, 262,
	0, 2091, 255, 0, 0, 259, 0, 256, 0, 2593,
	0, 0, 238, 0, 0, 257, 0, 0, 0, 0,
	0, 2102, 0, 0, 0, 0, 0, 0, 0, 1645,
	0, 265, 0, 0, 0, 0, 258, 0, 0, 0,
	0, 0, 264, 0, 0, 0, 0, 266, 0, 0,
	0, 0, 0, 260, 0, 0, 0, 267, 0, 4074,
	4075, 0, 0, 1169, 0, 4081, 0, 0, 0, 0,
	1071, 0, 0, 239, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2900, 4110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4122, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4139, 0, 0, 0,
	0, 0, 1070, 0, 0, 0, 972, 0, 0, 0,
	0, 0, 4005, 4005, 4005, 4005, 4005, 4005, 4005, 4005,
	0, 0, 0, 0, 4005, 4005, 0, 0, 3412, 3412,
	3412, 0, 0, 0, 0, 0, 0, 1071, 0, 0,
	0, 0, 0, 0, 4194, 972, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4216, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1070, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4230, 0, 0, 0, 0, 4234, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1071, 0, 1071, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 1071, 0, 0, 1071, 0, 0, 0,
	0, 0, 0, 0, 0, 1071, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1070, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1987,
	0, 2123, 0, 0, 0, 0, 0, 0, 4416, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4450, 1070, 1070, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4271,
	0, 4271, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4304, 1169, 0,
	0, 2123, 0, 0, 0, 1071, 0, 1071, 0, 0,
	0, 0, 0, 1980, 1980, 1980, 0, 2123, 0, 1987,
	0, 0, 0, 0, 2123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2123, 0, 0, 4358, 0,
	0, 0, 0, 0, 0, 4369, 0, 0, 0, 1987,
	0, 0, 0, 0, 1169, 1169, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1987, 0, 0, 0,
	0, 0, 972, 0, 0, 4533, 0, 4396, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1084, 0, 0, 0, 0, 0, 0, 1071, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1070, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1070, 0, 0, 0, 0, 0, 0, 4490, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1084, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1070, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1070, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1978, 0, 0, 0, 1978,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1084,
	972, 0, 0, 0, 0, 4586, 0, 0, 0, 0,
	0, 0, 4693, 0, 0, 1070, 0, 0, 0, 1169,
	0, 0, 4701, 4702, 0, 0, 4705, 0, 0, 0,
	4708, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4713, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4719, 0, 0, 0, 0, 0,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4729, 0, 0, 0, 0, 0, 0, 4734, 1084,
	1084, 0, 3375, 3375, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4745, 0, 0, 0,
	0, 4747, 1070, 0, 1070, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4766, 4767, 4768, 0, 0,
	0, 0, 0, 0, 0, 4774, 0, 0, 0, 0,
	0, 1070, 3423, 0, 1070, 0, 0, 0, 0, 0,
	0, 3373, 0, 1070, 4005, 3375, 0, 0, 0, 0,
	0, 0, 0, 4800, 4801, 4802, 0, 0, 0, 0,
	0, 0, 1315, 0, 0, 0, 0, 2123, 2123, 2123,
	2123, 2123, 0, 0, 0, 0, 2123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3375, 1987, 4845,
	3402, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4727, 4880, 0, 0, 0, 0, 0, 0, 0, 0,
	4885, 4886, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1987, 0, 0, 0, 0, 0, 0, 1084,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1084,
	1425, 0, 0, 0, 0, 1980, 0, 0, 0, 0,
	1987, 0, 0, 1070, 0, 1070, 0, 0, 0, 0,
	1360, 0, 0, 0, 0, 1980, 0, 1980, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1980, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2900, 0, 0, 0, 1084, 0, 0, 0,
	0, 2900, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1070, 4358, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1084, 0, 0, 0, 0, 0, 0,
	0, 0, 1071, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1071, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4939, 4940, 0, 4942, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4974, 0, 0, 0, 0, 0, 0, 0, 4358, 0,
	1084, 0, 1084, 0, 0, 0, 1083, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2900, 3759, 0, 0, 1068, 1068, 0, 0,
	0, 3762, 0, 0, 0, 0, 0, 0, 0, 1084,
	0, 0, 1084, 0, 0, 0, 0, 0, 0, 0,
	0, 1084, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5186, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5195, 5196, 0, 0, 0, 0, 5200,
	5201, 0, 0, 0, 0, 0, 5204, 5205, 0, 0,
	0, 0, 0, 5208, 0, 0, 0, 0, 0, 0,
	5210, 0, 5087, 0, 0, 0, 0, 0, 0, 0,
	0, 2102, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5243, 0, 5246,
	0, 0, 0, 0, 0, 0, 0, 0, 1071, 0,
	0, 0, 0, 0, 1071, 0, 0, 0, 0, 0,
	0, 0, 5150, 0, 0, 5265, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1084, 0, 1084, 0, 0, 0, 0, 0, 0,
	0, 0, 4005, 0, 4005, 0, 0, 0, 5172, 5172,
	5172, 5172, 5172, 5172, 5172, 0, 5172, 5172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1071, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 5209, 0,
	0, 5352, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2123, 2123, 2123, 2123,
	2123, 2123, 2123, 2123, 2123, 2123, 2123, 2123, 2123, 2123,
	2123, 2123, 0, 0, 0, 0, 0, 2123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	5377, 0, 0, 1084, 3402, 3402, 0, 0, 0, 1071,
	1071, 0, 0, 0, 0, 0, 0, 0, 1980, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5406, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2123, 0, 2123, 0,
	0, 0, 0, 0, 2123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2123, 0, 0, 2123, 0,
	0, 4166, 0, 3402, 3402, 3402, 0, 0, 0, 2123,
	2123, 0, 0, 0, 0, 2123, 0, 0, 2123, 0,
	0, 0, 0, 5329, 0, 0, 2123, 0, 0, 0,
	2123, 0, 0, 0, 0, 0, 2123, 0, 0, 0,
	0, 0, 0, 2123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5455, 0, 0, 0, 2123, 0,
	0, 0, 0, 0, 0, 0, 5358, 0, 0, 0,
	1070, 0, 0, 0, 0, 0, 0, 0, 0, 1070,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1071, 0, 0, 0, 0, 0, 0, 0, 5495,
	1070, 0, 0, 0, 0, 0, 0, 5497, 5498, 5499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1070, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5506, 0, 0, 0, 5509, 5510, 5511,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1071, 0, 3375, 0, 0, 0, 0, 2123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3759, 5551, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5568, 0, 0,
	1070, 1070, 0, 0, 0, 0, 0, 0, 0, 1070,
	0, 0, 5464, 5465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3759, 0, 0, 0, 0,
	0, 1071, 0, 0, 0, 1428, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4005, 4005, 0, 4005,
	0, 4005, 0, 0, 0, 0, 1068, 0, 0, 0,
	0, 0, 5172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1068, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1070, 0, 0, 0,
	0, 0, 1070, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 5591,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5752, 0, 0, 0,
	0, 0, 0, 2900, 3759, 0, 3759, 0, 0, 0,
	0, 0, 0, 0, 0, 3423, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 5779, 0,
	0, 0, 0, 1070, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1068, 0, 0, 1071, 1071,
	0, 0, 0, 0, 4358, 0, 0, 0, 0, 0,
	0, 0, 5811, 0, 0, 0, 0, 0, 1084, 0,
	0, 0, 0, 0, 0, 0, 0, 1084, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 1086, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1070, 1070, 0,
	0, 0, 0, 0, 0, 1068, 1068, 0, 0, 0,
	1071, 0, 0, 0, 0, 0, 0, 0, 1071, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1084, 0,
	0, 0, 0, 5883, 0, 0, 0, 0, 0, 0,
	4005, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1084, 0, 0, 2123, 2123, 1071, 2123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1427, 5916, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2123, 2123, 0,
	3402, 3402, 0, 0, 2123, 0, 0, 0, 5932, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4166, 4166, 0, 0, 0, 0, 0,
	0, 0, 0, 2123, 0, 0, 0, 2593, 1084, 1084,
	0, 0, 5957, 5957, 5957, 2123, 5960, 1084, 5821, 0,
	0, 1169, 1071, 0, 0, 3375, 0, 0, 0, 0,
	0, 0, 2123, 0, 1980, 0, 0, 0, 1980, 0,
	0, 0, 0, 0, 0, 0, 0, 3402, 3402, 3402,
	3402, 3402, 3402, 3402, 3402, 3402, 3402, 3402, 3402, 3402,
	0, 3402, 0, 4166, 4166, 4166, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 1070,
	0, 0, 0, 0, 0, 1083, 0, 2123, 0, 0,
	0, 0, 0, 0, 0, 1068, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1068, 1357, 0, 0, 2123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2123, 0, 0, 0, 2123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1071, 0, 0, 0, 0, 0, 0,
	1070, 0, 1071, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1084, 0, 0, 0, 1070, 6083,
	1084, 0, 1083, 0, 0, 0, 0, 1071, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1068, 0, 0, 0, 5752, 0, 0, 0,
	0, 0, 1083, 0, 5957, 0, 0, 0, 0, 0,
	0, 0, 0, 1070, 0, 0, 0, 0, 0, 1070,
	0, 0, 1068, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 1085, 0, 0, 0, 0, 0, 0, 0,
	3402, 0, 0, 0, 0, 0, 6003, 6004, 6005, 6006,
	0, 1084, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1169, 0, 0, 0, 0, 0, 0, 0, 1083,
	0, 0, 6164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 6173, 0, 0, 1068,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2900, 2123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2900,
	2900, 0, 0, 3759, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2123, 0, 1084, 1084, 0, 0, 0,
	0, 0, 0, 5752, 0, 0, 1083, 0, 1083, 0,
	0, 0, 1071, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1068, 0, 1068, 0,
	0, 0, 1065, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 1083, 0,
	0, 1070, 1070, 0, 1070, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 0, 1068, 0, 0, 1068, 0,
	0, 0, 0, 0, 0, 0, 2123, 1068, 0, 0,
	0, 0, 0, 0, 0, 3759, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1070, 1070, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 5957, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 6298,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1070, 0,
	0, 0, 0, 0, 0, 0, 1070, 1084, 0, 3759,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 0, 0, 0, 0, 0, 1083, 0, 1083,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1070, 0, 2123, 1068, 0, 1068,
	1169, 0, 0, 0, 2123, 2123, 0, 0, 2123, 4166,
	4166, 2123, 0, 0, 0, 0, 2123, 0, 0, 0,
	0, 0, 2123, 0, 0, 1978, 0, 0, 1084, 0,
	0, 0, 2123, 0, 0, 0, 0, 2123, 0, 0,
	0, 0, 0, 0, 0, 0, 1084, 0, 2123, 1086,
	2123, 0, 4166, 4166, 4166, 4166, 4166, 4166, 4166, 4166,
	4166, 4166, 4166, 4166, 4166, 0, 0, 0, 4166, 2123,
	2123, 2123, 0, 0, 0, 0, 0, 2123, 0, 0,
	1070, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1084, 0, 0, 0, 0, 0, 1084, 0, 0,
	0, 0, 0, 2123, 2123, 2123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1068,
	0, 0, 0, 0, 0, 0, 0, 0, 2123, 0,
	0, 0, 0, 0, 0, 0, 0, 6357, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 0, 2605, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2123, 0, 0, 0, 0, 2123, 2123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1070, 0, 0, 0, 0, 0, 0, 0, 0,
	1070, 0, 1071, 0, 0, 4166, 0, 0, 0, 0,
	0, 6357, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1070, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 6357,
	1086, 1086, 0, 5209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1084,
	1084, 0, 1084, 0, 0, 0, 0, 5327, 0, 0,
	0, 0, 1071, 0, 0, 0, 0, 0, 0, 0,
	2900, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1084, 1084, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1070, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1070, 1070, 0,
	0, 1070, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 880, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1084, 0, 0, 0,
	1070, 0, 0, 0, 1084, 0, 0, 0, 0, 1085,
	1071, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 0, 1084, 0, 0, 0, 0, 0, 0, 0,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1071, 0, 0, 0, 0, 0, 0, 2123,
	0, 0, 0, 1070, 0, 0, 0, 0, 2123, 2123,
	0, 0, 1065, 2123, 2123, 0, 0, 2123, 2123, 0,
	0, 2123, 0, 2123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3402, 0, 0,
	0, 0, 0, 1071, 1071, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2123, 0, 1084, 2123,
	1085, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1065, 0, 0, 0, 0, 0, 0, 1086, 0, 3402,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 912, 0, 0, 0, 0, 1070, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	996, 999, 1001, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 2123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1084,
	0, 0, 0, 0, 0, 0, 0, 0, 1084, 0,
	2123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1071, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1065, 0, 1084, 0, 0, 0, 0, 0, 2123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1154, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 3759, 0, 0, 0, 0,
	0, 1086, 0, 1086, 1068, 0, 0, 0, 0, 0,
	0, 0, 0, 1068, 0, 0, 0, 0, 2123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 1065, 1065, 1086, 0, 0, 0, 0, 0, 0,
	0, 3759, 1086, 0, 0, 0, 0, 0, 2123, 0,
	2123, 2123, 2123, 0, 1083, 0, 0, 0, 0, 2123,
	4166, 3402, 2123, 2123, 2123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1068, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 1084, 0, 0, 0, 0, 0,
	1085, 0, 0, 0, 0, 1084, 1084, 1068, 0, 1084,
	1085, 0, 0, 0, 2123, 0, 0, 0, 0, 0,
	1070, 0, 0, 0, 0, 0, 0, 0, 0, 4166,
	3402, 2123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1084, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 1083, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1068, 1068, 0, 0, 0, 0,
	0, 0, 0, 1068, 0, 0, 0, 1085, 0, 0,
	1070, 0, 0, 0, 0, 0, 0, 0, 1070, 0,
	0, 0, 1086, 0, 1086, 0, 0, 0, 0, 0,
	0, 1084, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1065, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1065, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 5327, 0, 0, 0, 0,
	0, 0, 1071, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2123, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	4166, 0, 0, 0, 0, 1084, 0, 0, 1070, 0,
	1068, 0, 2123, 0, 0, 0, 1068, 0, 1065, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3402, 0, 0,
	4166, 0, 0, 0, 2123, 0, 0, 0, 1065, 0,
	0, 1085, 0, 1085, 0, 0, 0, 0, 0, 0,
	1070, 0, 0, 1071, 0, 1071, 1071, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 0, 1085, 0, 0, 0, 1068, 0, 0,
	0, 0, 1085, 0, 0, 1216, 0, 0, 0, 0,
	0, 1070, 1070, 0, 1222, 1065, 2123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1071, 0, 0, 0, 0, 0, 0, 2123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2123, 0, 0, 0, 0,
	0, 1083, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2123, 1068, 1068, 2123, 0, 0, 0, 0, 0, 0,
	0, 0, 1065, 0, 1065, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1451, 0, 0, 0, 0, 0,
	0, 1065, 0, 0, 1065, 0, 1459, 1462, 0, 1464,
	0, 0, 0, 1065, 0, 0, 0, 0, 1084, 0,
	0, 0, 1085, 0, 1085, 0, 0, 0, 1070, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1505, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1070, 0, 0, 2123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1588, 0, 1084, 0,
	0, 0, 0, 0, 0, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1070,
	3402, 3402, 0, 1083, 3402, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1068, 0, 0, 0, 2123, 0, 0,
	0, 0, 0, 0, 1085, 0, 2123, 0, 0, 0,
	0, 0, 0, 1065, 0, 1065, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 1068, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4166, 4166, 1084, 4166, 0, 0,
	0, 0, 1068, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 1154, 0,
	0, 0, 0, 0, 0, 0, 0, 1068, 1084, 1154,
	0, 2123, 0, 1068, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1065, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1084,
	1084, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1070, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 0, 1086, 0,
	0, 1071, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 1083, 0, 1083, 0,
	0, 0, 0, 0, 1980, 0, 0, 0, 0, 1086,
	0, 1070, 0, 1070, 1070, 1068, 1068, 0, 1068, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1083, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2654, 0, 0,
	1068, 1068, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1084, 0, 0, 0, 0, 0, 0, 0, 0,
	1070, 0, 0, 0, 0, 0, 2704, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	1086, 0, 0, 0, 0, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 1084, 0, 0,
	1083, 0, 0, 0, 0, 0, 2773, 0, 0, 0,
	0, 2778, 1068, 0, 0, 0, 2790, 0, 0, 0,
	1068, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2838, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2853, 0, 1068, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2871, 0, 0, 0,
	2875, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 1086, 0, 0, 0, 0,
	0, 1086, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1068, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2967, 0, 0, 0, 0, 0, 0, 1085,
	2790, 2790, 2790, 0, 0, 0, 0, 0, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3001, 3002, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 1084, 1085,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1068, 0, 0, 0, 0,
	0, 0, 1085, 0, 1068, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1068,
	0, 0, 0, 0, 0, 0, 1086, 1086, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1065, 0, 0, 0, 0, 0, 0, 3123, 0, 1065,
	0, 0, 0, 0, 0, 0, 0, 3130, 0, 1084,
	0, 1084, 1084, 0, 0, 0, 0, 0, 0, 1085,
	1085, 0, 0, 0, 0, 0, 0, 0, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1154, 1154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1065, 0, 3176, 0, 1216, 1216, 0, 1216, 0, 3182,
	1083, 0, 3184, 3185, 0, 0, 0, 0, 1084, 0,
	0, 1083, 1083, 1065, 0, 1083, 0, 0, 0, 0,
	1068, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1068, 1068, 0, 0, 1068, 0, 0, 0, 1070,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1068, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1065, 1065, 0, 0, 0, 1085, 0, 0, 1086, 1065,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1068, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1154,
	0, 0, 1085, 0, 0, 0, 0, 1086, 0, 3287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 1086, 0,
	0, 1083, 0, 0, 0, 0, 1065, 0, 0, 0,
	0, 0, 1065, 0, 0, 0, 0, 0, 0, 0,
	0, 1068, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1085, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 1086, 0, 1086, 0, 0, 0, 1065, 1065, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1086, 1086, 0, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1084, 0, 0,
	0, 0, 0, 0, 1068, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 0, 1086, 0, 1085, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1068, 0, 0, 0, 0, 0,
	0, 0, 1068, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 0, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1065,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1065, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 1065, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1068, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1065, 1083, 0, 0, 0, 0, 1065,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1068, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 1085, 0, 1085, 0, 0, 0, 0, 0, 3555,
	1086, 0, 0, 0, 0, 1083, 1083, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1068, 1068, 0, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1085, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3653, 3654, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3691, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3715, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 1065, 1065, 0, 1065, 0, 0, 0, 0, 0,
	0, 0, 0, 3740, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 1086, 0, 0, 0, 0,
	0, 0, 0, 1085, 0, 0, 1086, 1086, 0, 0,
	1086, 0, 1068, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1065, 1065, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 1068, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1065, 0,
	0, 0, 0, 1068, 0, 0, 1065, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1065, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1086, 0, 0, 0,
	1065, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1216, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1065, 0, 0, 1068, 0, 0, 0, 0, 0,
	1065, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1085, 1085, 0, 4071,
	1085, 0, 0, 0, 0, 1065, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 1083, 0, 1083, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1068, 0, 1068, 1068, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1065, 0, 0, 0,
	0, 0, 0, 0, 1068, 0, 0, 1065, 1065, 0,
	0, 1065, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
	1065, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4277, 0, 4280, 0, 0, 4285, 1085, 0, 0, 0,
	0, 4292, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 0, 4333,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4385, 4386, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2790, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 1065, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 1086, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4558, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1086, 1083, 0, 0, 0, 0, 0, 0,
	1065, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1068, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 1154, 0, 0, 0, 0, 0, 0, 0, 0,
	1065, 0, 0, 0, 0, 0, 0, 0, 1065, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4694, 4695, 0,
	0, 0, 0, 4700, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1065, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1065, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1065, 1065, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 0, 1086, 1086, 0, 0, 4887, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4902, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1085, 0,
	0, 4913, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 0, 1065, 0,
	0, 0, 0, 0, 0, 0, 0, 2773, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1065,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 1085, 1085, 0, 0, 0, 0, 0, 5191,
	5192, 5193, 5194, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1065, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1065, 0, 1065, 1065, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1086, 0,
	0, 0, 0, 5334, 0, 0, 0, 0, 0, 0,
	5337, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1065, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5617, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5670, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1065,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 5862, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 5870, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1985, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 5910, 1990,
	342, 1996, 359, 843, 2006, 407, 444, 659, 1993, 2038,
	504, 2043, 557, 561, 2067, 650, 2000, 2003, 2013, 2016,
	415, 2021, 848, 2029, 854, 2039, 860, 2058, 626, 2064,
	850, 851, 856, 347, 735, 649, 721, 2052, 1998, 2056,
	511, 2049, 2025, 2065, 2042, 2054, 2035, 2040, 355, 2027,
	2028, 2032, 2041, 852, 849, 853, 859, 847, 857, 844,
	855, 2062, 548, 482, 699, 575, 354, 399, 386, 428,
	470, 582, 1997, 2015, 460, 630, 395, 484, 2048, 375,
	517, 2061, 606, 481, 2055, 589, 609, 2017, 501, 380,
	540, 596, 597, 841, 846, 2005, 862, 1992, 384, 385,
	506, 367, 514, 711, 677, 569, 527, 525, 2023, 492,
	549, 706, 1995, 0, 414, 0, 409, 505, 645, 373,
	624, 543, 510, 464, 572, 601, 411, 396, 397, 440,
	542, 430, 382, 635, 674, 678, 676, 672, 669, 673,
	670, 671, 675, 431, 668, 0, 643, 652, 686, 666,
	694, 651, 691, 661, 406, 690, 655, 654, 700, 681,
	682, 636, 696, 667, 665, 658, 657, 653, 2063, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 343,
	345, 1991, 344, 346, 348, 349, 350, 840, 351, 352,
	353, 356, 357, 358, 360, 719, 361, 362, 363, 364,
	365, 366, 656, 842, 368, 369, 370, 371, 372, 374,
	376, 720, 377, 378, 379, 381, 383, 2007, 2008, 2009,
	845, 2010, 2011, 2012, 387, 388, 389, 390, 391, 392,
	2014, 393, 394, 398, 400, 401, 402, 403, 404, 405,
	408, 2018, 410, 412, 2019, 413, 416, 2020, 417, 418,
	419, 420, 421, 422, 423, 424, 660, 425, 2022, 426,
	427, 429, 2024, 432, 433, 434, 435, 436, 2026, 437,
	662, 663, 438, 439, 441, 442, 443, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 2030,
	457, 458, 459, 461, 2031, 462, 463, 466, 467, 468,
	469, 2033, 471, 679, 2034, 472, 473, 474, 2036, 2037,
	475, 476, 477, 478, 479, 480, 483, 680, 485, 486,
	487, 488, 489, 490, 491, 722, 493, 494, 495, 496,
	497, 498, 499, 683, 684, 500, 502, 503, 685, 687,
	688, 858, 518, 519, 520, 521, 522, 523, 524, 526,
	2045, 528, 529, 530, 689, 531, 532, 533, 534, 2046,
	535, 536, 537, 538, 539, 541, 544, 545, 546, 547,
	2047, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 562, 563, 564, 723, 565, 566, 567, 568, 692,
	570, 571, 724, 573, 574, 576, 577, 578, 579, 580,
	581, 733, 2050, 583, 693, 584, 585, 586, 587, 588,
	2051, 590, 591, 592, 593, 594, 595, 598, 599, 600,
	602, 603, 695, 604, 605, 2053, 607, 608, 861, 610,
	611, 612, 613, 614, 2057, 734, 615, 697, 616, 698,
	617, 618, 619, 620, 621, 622, 623, 625, 2059, 2060,
	627, 628, 629, 631, 632, 633, 634, 637, 638, 639,
	640, 641, 2066, 642, 644, 646, 725, 701, 702, 703,
	704, 705, 707, 708, 709, 710, 647, 648, 664, 515,
	509, 465, 507, 508, 512, 513, 516, 2044, 1994, 1999,
	2001, 2002, 2004, 0, 0, 0, 0, 0, 0, 0,
	0, 2141, 0, 0, 0, 0, 0, 0, 2138, 0,
	0, 2108, 0, 0, 1983, 2120, 2121, 2122, 2152, 2154,
	2136, 2181, 2202, 0, 2253, 2299, 2269, 2124, 2386, 2392,
	2125, 2453, 2457, 0, 2133, 2183, 2109, 2233, 2248, 2263,
	2275, 2128, 2134, 2126, 2390, 2129, 2534, 2545, 2565, 2130,
	2131, 2132, 2110, 2526, 2583, 2352, 2511, 2163, 0, 2139,
	2477, 0, 0, 2400, 2515, 0, 0, 2177, 0, 0,
	0, 0, 2325, 2314, 2348, 2461, 2286, 2406, 2214, 2373,
	2551, 2443, 2362, 2557, 2475, 2176, 2242, 2226, 2278, 2343,
	2484, 2159, 2243, 2318, 2549, 2238, 2364, 0, 2205, 2408,
	2550, 2513, 2361, 2524, 2494, 2519, 2249, 2387, 2212, 2434,
	2501, 2502, 2172, 2285, 2207, 2560, 2157, 2217, 2225, 2395,
	2196, 2403, 2581, 2335, 2468, 2418, 2416, 0, 2375, 2444,
	2576, 0, 0, 2262, 0, 2256, 2394, 2568, 2203, 2542,
	2437, 2399, 2337, 2471, 2506, 2258, 2239, 2240, 2296, 2436,
	2281, 2215, 2556, 2332, 2336, 2334, 2330, 2327, 2331, 2328,
	2329, 2333, 2283, 2326, 0, 0, 2173, 2393, 2321, 2491,
	2171, 2440, 2279, 2252, 0, 0, 0, 2558, 2372, 2374,
	0, 2527, 2322, 2320, 2231, 2230, 2174, 2559, 2143, 2144,
	2145, 2146, 2147, 2148, 2149, 2150, 2151, 2153, 2155, 2161,
	2156, 2160, 2162, 2164, 2165, 2166, 2167, 2168, 2169, 2170,
	2178, 2179, 2180, 2182, 2185, 2186, 2187, 2189, 2190, 2191,
	2192, 2193, 2194, 2197, 2198, 2199, 2200, 2201, 2204, 2206,
	2208, 2209, 2210, 2211, 2213, 2216, 2218, 2219, 2220, 2221,
	2222, 2223, 2224, 2227, 2228, 0, 2229, 2232, 2234, 2235,
	2236, 2237, 2241, 2244, 2245, 2246, 2247, 2250, 2251, 2254,
	2255, 2257, 2259, 2260, 2261, 2264, 0, 2265, 2266, 2267,
	2268, 2270, 2271, 2272, 2273, 2274, 2276, 0, 0, 2277,
	2280, 2282, 2284, 2287, 2288, 2289, 2290, 0, 2291, 2292,
	2293, 2294, 2295, 2297, 0, 2298, 2300, 2301, 2302, 2303,
	2304, 2305, 2306, 2307, 2308, 2309, 2310, 2311, 2312, 2313,
	2316, 2317, 2319, 0, 2323, 2324, 2339, 2340, 2341, 2342,
	2344, 2346, 2347, 2345, 2349, 2350, 2351, 2353, 2354, 2355,
	2356, 2357, 2358, 2359, 2360, 2363, 2365, 2366, 0, 2367,
	2368, 0, 2369, 2370, 2371, 2376, 2377, 2378, 2379, 2380,
	2381, 2382, 2383, 2384, 2385, 2388, 2389, 2391, 2405, 2407,
	0, 2409, 2410, 2411, 2412, 2413, 2414, 2415, 2417, 2419,
	2420, 2421, 2422, 2423, 2424, 2425, 2426, 2427, 2428, 2429,
	2430, 2431, 2432, 2433, 2435, 2438, 2439, 2441, 2442, 2445,
	2446, 2447, 2448, 2449, 2450, 2451, 2452, 2454, 2455, 2456,
	2458, 2459, 2460, 2462, 2463, 2464, 2465, 2466, 2467, 2469,
	2470, 2472, 2473, 2474, 0, 2476, 2478, 2479, 2480, 2481,
	2482, 2483, 2486, 2485, 2487, 2488, 2489, 2490, 2492, 2493,
	2495, 2496, 2497, 2498, 2499, 2500, 2503, 2504, 2505, 2507,
	2508, 2509, 2510, 2512, 2514, 2516, 2518, 2517, 2520, 2521,
	2522, 2523, 2525, 2528, 2529, 2530, 2531, 2532, 2533, 2535,
	2536, 2537, 2538, 2539, 2540, 2541, 2543, 0, 2544, 2546,
	2547, 2548, 2552, 2553, 2554, 2555, 2561, 2562, 2563, 2564,
	2566, 0, 0, 2567, 2569, 2570, 2571, 2572, 2573, 2574,
	2575, 2577, 2578, 2579, 2580, 0, 2582, 2315, 2404, 2398,
	2338, 2396, 2397, 2401, 2402, 0, 0, 2158, 2175, 2184,
	2188, 2195, 0, 2127, 0, 0, 0, 0, 0, 0,
	0, 0, 2117, 2118, 2119, 0, 0, 0, 0, 0,
	0, 2111, 2112, 2113, 2114, 2115, 2116, 1985, 0, 6356,
	823, 0, 0, 0, 0, 809, 0, 0, 0, 0,
	0, 0, 0, 0, 1990, 342, 1996, 359, 843, 2006,
	407, 444, 659, 1993, 2038, 504, 2043, 557, 561, 2067,
	650, 2000, 2003, 2013, 2016, 415, 2021, 848, 2029, 854,
	2039, 860, 2058, 626, 2064, 850, 851, 856, 347, 735,
	649, 721, 2052, 1998, 2056, 511, 2049, 2025, 2065, 2042,
	2054, 2035, 2040, 355, 2027, 2028, 2032, 2041, 852, 849,
	853, 859, 847, 857, 844, 855, 2062, 548, 482, 699,
	575, 354, 399, 386, 428, 470, 582, 1997, 2015, 460,
	630, 395, 484, 2048, 375, 517, 2061, 606, 481, 2055,
	589, 609, 2017, 501, 380, 540, 596, 597, 841, 846,
	2005, 862, 1992, 384, 385, 506, 367, 514, 711, 677,
	569, 527, 525, 2023, 492, 549, 706, 1995, 0, 414,
	0, 409, 505, 645, 373, 624, 543, 510, 464, 572,
	601, 411, 396, 397, 440, 542, 430, 382, 635, 674,
	678, 676, 672, 669, 673, 670, 671, 675, 431, 668,
	0, 643, 652, 686, 666, 694, 651, 691, 661, 406,
	690, 655, 654, 700, 681, 682, 636, 696, 667, 665,
	658, 657, 653, 2063, 332, 333, 334, 335, 336, 337,
	338, 339, 340, 341, 343, 345, 1991, 344, 346, 348,
	349, 350, 840, 351, 352, 353, 356, 357, 358, 360,
	719, 361, 362, 363, 364, 365, 366, 656, 842, 368,
	369, 370, 371, 372, 374, 376, 720, 377, 378, 379,
	381, 383, 2007, 2008, 2009, 845, 2010, 2011, 2012, 387,
	388, 389, 390, 391, 392, 2014, 393, 394, 398, 400,
	401, 402, 403, 404, 405, 408, 2018, 410, 412, 2019,
	413, 416, 2020, 417, 418, 419, 420, 421, 422, 423,
	424, 660, 425, 2022, 426, 427, 429, 2024, 432, 433,
	434, 435, 436, 2026, 437, 662, 663, 438, 439, 441,
	442, 443, 445, 446, 447, 448, 449, 450, 451, 452,
	453, 454, 455, 456, 2030, 457, 458, 459, 461, 2031,
	462, 463, 466, 467, 468, 469, 2033, 471, 679, 2034,
	472, 473, 474, 2036, 2037, 475, 476, 477, 478, 479,
	480, 483, 680, 485, 486, 487, 488, 489, 490, 491,
	722, 493, 494, 495, 496, 497, 498, 499, 683, 684,
	500, 502, 503, 685, 687, 688, 858, 518, 519, 520,
	521, 522, 523, 524, 526, 2045, 528, 529, 530, 689,
	531, 532, 533, 534, 2046, 535, 536, 537, 538, 539,
	541, 544, 545, 546, 547, 2047, 550, 551, 552, 553,
	554, 555, 556, 558, 559, 560, 562, 563, 564, 723,
	565, 566, 567, 568, 692, 570, 571, 724, 573, 574,
	576, 577, 578, 579, 580, 581, 733, 2050, 583, 693,
	584, 585, 586, 587, 588, 2051, 590, 591, 592, 593,
	594, 595, 598, 599, 600, 602, 603, 695, 604, 605,
	2053, 607, 608, 861, 610, 611, 612, 613, 614, 2057,
	734, 615, 697, 616, 698, 617, 618, 619, 620, 621,
	622, 623, 625, 2059, 2060, 627, 628, 629, 631, 632,
	633, 634, 637, 638, 639, 640, 641, 2066, 642, 644,
	646, 725, 701, 702, 703, 704, 705, 707, 708, 709,
	710, 647, 648, 664, 515, 509, 465, 507, 508, 512,
	513, 516, 2044, 1994, 1999, 2001, 2002, 2004, 1985, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1990, 342, 1996, 359, 843,
	2006, 407, 444, 659, 1993, 2038, 504, 2043, 557, 561,
	2067, 650, 2000, 2003, 2013, 2016, 415, 2021, 848, 2029,
	854, 2039, 860, 2058, 626, 2064, 850, 851, 856, 347,
	735, 649, 721, 2052, 1998, 2056, 511, 2049, 2025, 2065,
	2042, 2054, 2035, 2040, 355, 2027, 2028, 2032, 2041, 852,
	849, 853, 859, 847, 857, 844, 855, 2062, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 1997, 2015,
	460, 630, 395, 484, 2048, 375, 517, 2061, 606, 481,
	2055, 589, 609, 2017, 501, 380, 540, 596, 597, 841,
	846, 2005, 862, 1992, 384, 385, 506, 367, 514, 711,
	677, 569, 527, 525, 2023, 492, 549, 706, 1995, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	674, 678, 676, 672, 669, 673, 670, 671, 675, 431,
	668, 0, 643, 652, 686, 666, 694, 651, 691, 661,
	406, 690, 655, 654, 700, 681, 682, 636, 696, 667,
	665, 658, 657, 653, 2063, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 1991, 344, 346,
	348, 349, 350, 840, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 656, 842,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 2007, 2008, 2009, 845, 2010, 2011, 2012,
	387, 388, 389, 390, 391, 392, 2014, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 2018, 410, 412,
	2019, 413, 416, 2020, 417, 418, 419, 420, 421, 422,
	423, 424, 660, 425, 2022, 426, 427, 429, 2024, 432,
	433, 434, 435, 436, 2026, 437, 662, 663, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 2030, 457, 458, 459, 461,
	2031, 462, 463, 466, 467, 468, 469, 2033, 471, 679,
	2034, 472, 473, 474, 2036, 2037, 475, 476, 477, 478,
	479, 480, 483, 680, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	684, 500, 502, 503, 685, 687, 688, 858, 518, 519,
	520, 521, 522, 523, 524, 526, 2045, 528, 529, 530,
	689, 531, 532, 533, 534, 2046, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 2047, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 692, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 2050, 583,
	693, 584, 585, 586, 587, 588, 2051, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 695, 604,
	605, 2053, 607, 608, 861, 610, 611, 612, 613, 614,
	2057, 734, 615, 697, 616, 698, 617, 618, 619, 620,
	621, 622, 623, 625, 2059, 2060, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 2066, 642,
	644, 646, 725, 701, 702, 703, 704, 705, 707, 708,
	709, 710, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 2044, 1994, 1999, 2001, 2002, 2004, 1091,
	0, 1741, 823, 0, 0, 0, 939, 809, 0, 0,
	0, 0, 0, 950, 951, 952, 1990, 342, 1996, 359,
	843, 2006, 407, 444, 0, 1993, 2038, 504, 2043, 557,
	561, 2067, 0, 2000, 2003, 2013, 2016, 415, 2021, 848,
	2029, 854, 2039, 860, 2058, 626, 2064, 850, 851, 856,
	347, 1088, 649, 721, 2052, 1998, 2056, 4360, 2049, 2025,
	2065, 2042, 2054, 2035, 2040, 355, 2027, 2028, 2032, 2041,
	852, 849, 853, 859, 847, 857, 844, 855, 2062, 548,
	482, 0, 575, 354, 399, 386, 428, 470, 582, 1997,
	2015, 460, 630, 395, 484, 2048, 375, 517, 2061, 606,
	481, 2055, 589, 609, 2017, 501, 380, 540, 596, 597,
	841, 846, 2005, 862, 1992, 384, 385, 506, 367, 514,
	0, 0, 569, 527, 525, 2023, 492, 549, 0, 1995,
	0, 414, 0, 409, 505, 645, 373, 624, 543, 510,
	464, 572, 601, 411, 396, 397, 440, 542, 430, 382,
	635, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	431, 1090, 0, 643, 1093, 1081, 1073, 1074, 1075, 1076,
	1077, 1078, 0, 1095, 1096, 1097, 1098, 1099, 636, 1087,
	1089, 1072, 1079, 1080, 1082, 2063, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 343, 345, 1991, 344,
	346, 348, 349, 350, 840, 351, 352, 353, 356, 357,
	358, 360, 719, 361, 362, 363, 364, 365, 366, 0,
	842, 368, 369, 370, 371, 372, 374, 376, 720, 377,
	378, 379, 381, 383, 2007, 2008, 2009, 845, 2010, 2011,
	2012, 387, 388, 389, 390, 391, 392, 2014, 393, 394,
	398, 400, 401, 402, 403, 404, 405, 408, 2018, 410,
	412, 2019, 413, 416, 2020, 417, 418, 419, 420, 421,
	422, 423, 424, 0, 425, 2022, 426, 427, 429, 2024,
	432, 433, 434, 435, 436, 2026, 437, 0, 0, 438,
	439, 441, 442, 443, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 2030, 457, 458, 459,
	461, 2031, 462, 463, 466, 467, 468, 469, 2033, 471,
	0, 2034, 472, 473, 474, 2036, 2037, 475, 476, 477,
	478, 479, 480, 483, 0, 485, 486, 487, 488, 489,
	490, 491, 722, 493, 494, 495, 496, 497, 498, 499,
	4359, 0, 500, 502, 503, 0, 0, 0, 858, 518,
	519, 520, 521, 522, 523, 524, 526, 2045, 528, 529,
	530, 0, 531, 532, 533, 534, 2046, 535, 536, 537,
	538, 539, 541, 544, 545, 546, 547, 2047, 550, 551,
	552, 553, 554, 555, 556, 558, 559, 560, 562, 563,
	564, 723, 565, 566, 567, 568, 0, 570, 571, 724,
	573, 574, 576, 577, 578, 579, 580, 581, 733, 2050,
	583, 2902, 584, 585, 586, 587, 588, 2051, 590, 591,
	592, 593, 594, 595, 598, 599, 600, 602, 603, 0,
	604, 605, 2053, 607, 608, 861, 610, 611, 612, 613,
	614, 2057, 734, 615, 0, 616, 0, 617, 618, 619,
	620, 621, 622, 623, 625, 2059, 2060, 627, 628, 629,
	631, 632, 633, 634, 637, 638, 639, 640, 641, 2066,
	642, 644, 646, 725, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 647, 648, 0, 515, 509, 465, 507,
	508, 512, 513, 516, 2044, 1994, 1999, 2001, 2002, 2004,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	947, 948, 949, 0, 0, 0, 0, 0, 0, 4361,
	4362, 943, 944, 945, 946, 1091, 0, 1741, 823, 0,
	0, 0, 939, 809, 0, 0, 0, 0, 0, 950,
	951, 952, 1990, 342, 1996, 359, 843, 2006, 407, 444,
	0, 1993, 2038, 504, 2043, 557, 561, 2067, 0, 2000,
	2003, 2013, 2016, 415, 2021, 848, 2029, 854, 2039, 860,
	2058, 626, 2064, 850, 851, 856, 347, 1088, 649, 721,
	2052, 1998, 2056, 4360, 2049, 2025, 2065, 2042, 2054, 2035,
	2040, 355, 2027, 2028, 2032, 2041, 852, 849, 853, 859,
	847, 857, 844, 855, 2062, 548, 482, 0, 575, 354,
	399, 386, 428, 470, 582, 1997, 2015, 460, 630, 395,
	484, 2048, 375, 517, 2061, 606, 481, 2055, 589, 609,
	2017, 501, 380, 540, 596, 597, 841, 846, 2005, 862,
	1992, 384, 385, 506, 367, 514, 0, 0, 569, 527,
	525, 2023, 492, 549, 0, 1995, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 431, 1090, 0, 643,
	1093, 1081, 1073, 1074, 1075, 1076, 1077, 1078, 0, 1095,
	1096, 1097, 1098, 1099, 636, 1087, 1089, 1072, 1079, 1080,
	1082, 2063, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 1991, 344, 346, 348, 349, 350,
	840, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 0, 842, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	2007, 2008, 2009, 845, 2010, 2011, 2012, 387, 388, 389,
	390, 391, 392, 2014, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 2018, 410, 412, 2019, 413, 416,
	2020, 417, 418, 419, 420, 421, 422, 423, 424, 0,
	425, 2022, 426, 427, 429, 2024, 432, 433, 434, 435,
	436, 2026, 437, 0, 0, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 2030, 457, 458, 459, 461, 2031, 462, 463,
	466, 467, 468, 469, 2033, 471, 0, 2034, 472, 473,
	474, 2036, 2037, 475, 476, 477, 478, 479, 480, 483,
	0, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 5081, 0, 500, 502,
	503, 0, 0, 0, 858, 518, 519, 520, 521, 522,
	523, 524, 526, 2045, 528, 529, 530, 0, 531, 532,
	533, 534, 2046, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 2047, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 0, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 2050, 583, 2902, 584, 585,
	586, 587, 588, 2051, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 0, 604, 605, 2053, 607,
	608, 861, 610, 611, 612, 613, 614, 2057, 734, 615,
	0, 616, 0, 617, 618, 619, 620, 621, 622, 623,
	625, 2059, 2060, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 2066, 642, 644, 646, 725,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 647,
	648, 0, 515, 509, 465, 507, 508, 512, 513, 516,
	2044, 1994, 1999, 2001, 2002, 2004, 0, 0, 0, 0,
	0, 0, 0, 0, 1985, 0, 947, 948, 949, 0,
	0, 0, 0, 0, 0, 4361, 4362, 943, 944, 945,
	946, 1990, 342, 1996, 359, 843, 2006, 3705, 444, 659,
	1993, 2038, 504, 2043, 557, 561, 2067, 650, 2000, 2003,
	2013, 2016, 415, 2021, 848, 2029, 854, 2039, 860, 2058,
	626, 2064, 850, 851, 856, 347, 735, 649, 721, 2052,
	1998, 2056, 511, 2049, 2025, 2065, 2042, 2054, 2035, 2040,
	355, 2027, 2028, 2032, 2041, 852, 849, 853, 859, 847,
	857, 844, 855, 2062, 548, 482, 699, 575, 354, 399,
	386, 428, 470, 3703, 1997, 2015, 460, 630, 395, 484,
	2048, 375, 517, 2061, 606, 481, 2055, 589, 609, 2017,
	501, 380, 540, 596, 597, 841, 846, 2005, 862, 1992,
	384, 385, 506, 367, 514, 711, 677, 569, 527, 525,
	2023, 492, 549, 706, 1995, 0, 414, 0, 409, 505,
	645, 373, 624, 543, 510, 464, 572, 601, 411, 396,
	397, 440, 542, 430, 382, 635, 674, 678, 676, 672,
	669, 673, 670, 671, 675, 431, 668, 0, 643, 652,
	686, 666, 694, 651, 691, 661, 406, 690, 655, 654,
	700, 681, 682, 636, 696, 667, 665, 658, 657, 653,
	2063, 332, 333, 334, 335, 336, 3704, 338, 339, 340,
	341, 343, 345, 1991, 344, 346, 348, 349, 350, 840,
	351, 352, 353, 356, 357, 358, 360, 719, 361, 362,
	363, 364, 365, 366, 656, 842, 368, 369, 370, 371,
	372, 374, 376, 720, 377, 378, 379, 381, 383, 2007,
	2008, 2009, 845, 2010, 2011, 2012, 387, 388, 389, 390,
	391, 392, 2014, 393, 394, 398, 400, 401, 402, 403,
	404, 405, 408, 2018, 410, 412, 2019, 413, 416, 2020,
	417, 418, 419, 420, 421, 422, 423, 424, 660, 425,
	2022, 426, 427, 429, 2024, 432, 433, 434, 435, 436,
	2026, 437, 662, 663, 438, 439, 441, 442, 443, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 2030, 457, 458, 459, 461, 2031, 462, 463, 466,
	467, 468, 469, 2033, 471, 679, 2034, 472, 473, 474,
	2036, 2037, 475, 476, 477, 478, 479, 480, 483, 680,
	485, 486, 487, 488, 489, 490, 491, 722, 493, 494,
	495, 496, 497, 498, 499, 683, 684, 500, 502, 503,
	685, 687, 688, 858, 518, 519, 520, 521, 522, 523,
	524, 526, 2045, 528, 529, 530, 689, 531, 532, 533,
	534, 2046, 535, 536, 537, 538, 539, 541, 544, 545,
	546, 547, 2047, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 562, 563, 564, 723, 565, 566, 567,
	568, 692, 570, 571, 724, 573, 574, 576, 577, 578,
	579, 580, 581, 733, 2050, 583, 693, 584, 585, 586,
	587, 588, 2051, 590, 591, 592, 593, 594, 595, 598,
	599, 600, 602, 603, 695, 604, 605, 2053, 607, 608,
	861, 610, 611, 612, 613, 614, 2057, 734, 615, 697,
	616, 698, 617, 618, 619, 620, 621, 622, 623, 625,
	2059, 2060, 627, 628, 629, 631, 632, 633, 634, 637,
	638, 639, 640, 641, 2066, 642, 644, 646, 725, 701,
	702, 703, 704, 705, 707, 708, 709, 710, 647, 648,
	664, 515, 509, 465, 507, 508, 512, 513, 516, 2044,
	1994, 1999, 2001, 2002, 2004, 837, 0, 1343, 823, 0,
	1348, 1349, 1338, 809, 1328, 0, 0, 0, 0, 0,
	0, 0, 1975, 342, 0, 359, 843, 0, 407, 444,
	1333, 0, 1321, 504, 0, 557, 561, 0, 650, 1353,
	0, 1325, 1976, 415, 1346, 848, 0, 854, 1347, 860,
	1345, 626, 0, 850, 851, 856, 347, 1422, 649, 721,
	0, 0, 0, 1339, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 852, 849, 853, 859,
	847, 857, 844, 855, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 1375, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 841, 846, 0, 862,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 1334, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 1403, 1405, 1401,
	1397, 1398, 1363, 1364, 1404, 1400, 431, 1399, 0, 643,
	1408, 1419, 1416, 1421, 1407, 1420, 1414, 1078, 690, 1411,
	1410, 1424, 1417, 1418, 636, 1423, 1362, 1415, 1413, 1412,
	1409, 1974, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	840, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 1387, 1365, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	1376, 1366, 1371, 1377, 1367, 1368, 1372, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 1379,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 1388, 1337, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 1389, 0, 472, 473,
	474, 1369, 1370, 475, 476, 477, 478, 479, 480, 483,
	1402, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 1380, 500, 502,
	503, 1386, 687, 1381, 858, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 1382, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 1340, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 1373, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 1383, 604, 605, 1374, 607,
	608, 861, 610, 611, 612, 613, 614, 0, 734, 615,
	1384, 616, 1385, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 1324, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 1390, 1391, 1394, 1392, 1393, 1395, 1396, 1406, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	0, 0, 0, 1378, 0, 0, 0, 1322, 0, 0,
	837, 0, 1343, 823, 0, 1348, 1349, 1338, 809, 1328,
	0, 0, 1329, 1971, 0, 1318, 1319, 1972, 342, 0,
	359, 843, 0, 407, 444, 1333, 0, 1321, 504, 0,
	557, 561, 186, 650, 1353, 0, 1325, 0, 415, 1346,
	848, 0, 854, 1347, 860, 1345, 626, 0, 850, 851,
	856, 347, 1422, 649, 721, 0, 0, 0, 1339, 183,
	0, 0, 0, 184, 0, 0, 355, 0, 0, 0,
	0, 852, 849, 853, 859, 847, 857, 844, 855, 0,
	548, 482, 1205, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 1375,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 841, 846, 0, 862, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	1334, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404,
	1400, 431, 1399, 0, 643, 1408, 1419, 1416, 1421, 1407,
	1420, 1414, 1078, 690, 1411, 1410, 1424, 1417, 1418, 636,
	1423, 1362, 1415, 1413, 1412, 1409, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 840, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	1387, 1365, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 1376, 1366, 1371, 1377, 1367,
	1368, 1372, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 1379, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 1388, 1337,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 1389, 0, 472, 473, 474, 1369, 1370, 475, 476,
	477, 478, 479, 480, 483, 1402, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 1380, 500, 502, 503, 1386, 687, 1381, 858,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 1382, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 1340, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	1373, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	1383, 604, 605, 1374, 607, 608, 861, 610, 611, 612,
	613, 614, 0, 734, 615, 1384, 616, 1385, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 1324, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 1390, 1391, 1394, 1392,
	1393, 1395, 1396, 1406, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 0, 0, 0, 1378, 0,
	0, 0, 1322, 0, 187, 837, 0, 1343, 823, 0,
	1348, 1349, 1338, 809, 1328, 0, 0, 1329, 5947, 0,
	1318, 1319, 0, 342, 0, 359, 843, 0, 407, 444,
	1333, 0, 1321, 504, 0, 557, 561, 186, 650, 1353,
	0, 1325, 0, 415, 1346, 848, 0, 854, 1347, 860,
	1345, 626, 0, 850, 851, 856, 347, 1422, 649, 721,
	0, 0, 0, 1339, 183, 0, 0, 0, 184, 0,
	0, 355, 0, 0, 0, 0, 852, 849, 853, 859,
	847, 857, 844, 855, 0, 548, 482, 1205, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 3432, 375, 517, 1375, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 841, 846, 0, 862,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 1334, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 1403, 1405, 1401,
	1397, 1398, 1363, 1364, 1404, 1400, 431, 1399, 0, 643,
	1408, 1419, 1416, 1421, 1407, 1420, 1414, 1078, 690, 1411,
	1410, 1424, 1417, 1418, 636, 1423, 1362, 1415, 1413, 1412,
	1409, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	840, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 1387, 1365, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	1376, 1366, 1371, 1377, 1367, 1368, 1372, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 1379,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 1388, 1337, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 1389, 0, 472, 473,
	474, 1369, 1370, 475, 476, 477, 478, 479, 480, 483,
	1402, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 1380, 500, 502,
	503, 1386, 687, 1381, 858, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 1382, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 1340, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 1373, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 1383, 604, 605, 1374, 607,
	608, 861, 610, 611, 612, 613, 614, 0, 734, 615,
	1384, 616, 1385, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 1324, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 1390, 1391, 1394, 1392, 1393, 1395, 1396, 1406, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	0, 0, 0, 1378, 0, 0, 0, 1322, 0, 187,
	837, 0, 1343, 823, 0, 1348, 1349, 1338, 809, 1328,
	0, 0, 1329, 0, 0, 1318, 1319, 0, 342, 0,
	359, 843, 0, 407, 444, 1333, 0, 1321, 504, 0,
	557, 561, 186, 650, 1353, 0, 1325, 0, 415, 1346,
	848, 0, 854, 1347, 860, 1345, 626, 0, 850, 851,
	856, 347, 1422, 649, 721, 0, 0, 0, 1339, 183,
	0, 0, 0, 184, 0, 0, 355, 0, 0, 0,
	0, 852, 849, 853, 859, 847, 857, 844, 855, 0,
	548, 482, 1205, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 1375,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 841, 846, 0, 862, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	1334, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404,
	1400, 431, 1399, 0, 643, 1408, 1419, 1416, 1421, 1407,
	1420, 1414, 1078, 690, 1411, 1410, 1424, 1417, 1418, 636,
	1423, 1362, 1415, 1413, 1412, 1409, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 840, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	1387, 1365, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 1376, 1366, 1371, 1377, 1367,
	1368, 1372, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 1379, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 1388, 1337,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 1389, 0, 472, 473, 474, 1369, 1370, 475, 476,
	477, 478, 479, 480, 483, 1402, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 1380, 500, 502, 503, 1386, 687, 1381, 858,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 1382, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 1340, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	1373, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	1383, 604, 605, 1374, 607, 608, 861, 610, 611, 612,
	613, 614, 0, 734, 615, 1384, 616, 1385, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 1324, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 1390, 1391, 1394, 1392,
	1393, 1395, 1396, 1406, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 0, 0, 0, 1378, 0,
	0, 0, 1322, 0, 187, 837, 0, 1343, 823, 0,
	1348, 1349, 1338, 809, 1328, 0, 0, 1329, 0, 0,
	1318, 1319, 0, 342, 0, 359, 843, 0, 407, 444,
	1333, 0, 1321, 504, 0, 557, 561, 0, 650, 1353,
	0, 1325, 0, 415, 1346, 848, 0, 854, 1347, 860,
	1345, 626, 0, 850, 851, 856, 347, 1422, 649, 721,
	0, 0, 0, 1339, 0, 3413, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 852, 849, 853, 859,
	847, 857, 844, 855, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 1375, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 841, 846, 0, 862,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 1334, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 1403, 1405, 1401,
	1397, 1398, 1363, 1364, 1404, 1400, 431, 1399, 0, 643,
	1408, 1419, 1416, 1421, 1407, 1420, 1414, 1078, 690, 1411,
	1410, 1424, 1417, 1418, 636, 1423, 1362, 1415, 1413, 1412,
	1409, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	840, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 1387, 1365, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	1376, 1366, 1371, 1377, 1367, 1368, 1372, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 1379,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 1388, 1337, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 1389, 3409, 472, 473,
	474, 1369, 1370, 475, 476, 477, 478, 479, 480, 483,
	1402, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 1380, 500, 502,
	503, 1386, 687, 1381, 858, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 1382, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 1340, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 1373, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 1383, 604, 605, 1374, 607,
	608, 861, 610, 611, 612, 613, 614, 3410, 734, 615,
	1384, 616, 1385, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 1324, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 1390, 1391, 1394, 1392, 1393, 1395, 1396, 1406, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	0, 0, 3408, 1378, 0, 0, 0, 1322, 0, 837,
	0, 1343, 823, 0, 1348, 1349, 1338, 809, 1328, 0,
	0, 0, 1329, 0, 0, 1318, 1319, 342, 0, 359,
	843, 0, 407, 444, 1333, 0, 1321, 504, 0, 557,
	561, 0, 650, 1353, 0, 1325, 0, 415, 1346, 848,
	0, 854, 1347, 860, 1345, 626, 0, 850, 851, 856,
	347, 1422, 649, 721, 0, 0, 0, 1339, 0, 0,
	0, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	852, 849, 853, 859, 847, 857, 844, 855, 0, 548,
	482, 699, 575, 354, 399, 386, 428, 470, 582, 0,
	0, 460, 630, 395, 484, 0, 375, 517, 1375, 606,
	481, 0, 589, 609, 0, 501, 380, 540, 596, 597,
	841, 846, 0, 862, 0, 384, 385, 506, 367, 514,
	711, 677, 569, 527, 525, 0, 492, 549, 706, 1334,
	0, 414, 0, 409, 505, 645, 373, 624, 543, 510,
	464, 572, 601, 411, 396, 397, 440, 542, 430, 382,
	635, 1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404, 1400,
	431, 1399, 0, 643, 1408, 1419, 1416, 1421, 1407, 1420,
	1414, 1078, 690, 1411, 1410, 1424, 1417, 1418, 636, 1423,
	1362, 1415, 1413, 1412, 1409, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 343, 345, 0, 344,
	346, 348, 349, 350, 840, 351, 352, 353, 356, 357,
	358, 360, 719, 361, 362, 363, 364, 365, 366, 1387,
	1365, 368, 369, 370, 371, 372, 374, 376, 720, 377,
	378, 379, 381, 383, 1376, 1366, 1371, 1377, 1367, 1368,
	1372, 387, 388, 389, 390, 391, 392, 0, 393, 394,
	398, 400, 401, 402, 403, 404, 405, 408, 0, 410,
	412, 0, 413, 416, 0, 417, 418, 419, 420, 421,
	422, 423, 424, 1379, 425, 0, 426, 427, 429, 0,
	432, 433, 434, 435, 436, 0, 437, 1388, 1337, 438,
	439, 441, 442, 443, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 0, 457, 458, 459,
	461, 0, 462, 463, 466, 467, 468, 469, 0, 471,
	1389, 0, 472, 473, 474, 1369, 1370, 475, 476, 477,
	478, 479, 480, 483, 1402, 485, 486, 487, 488, 489,
	490, 491, 722, 493, 494, 495, 496, 497, 498, 499,
	683, 1380, 500, 502, 503, 1386, 687, 1381, 858, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 528, 529,
	530, 1382, 531, 532, 533, 534, 0, 535, 536, 537,
	538, 539, 541, 544, 545, 546, 547, 0, 550, 551,
	552, 553, 554, 555, 556, 558, 559, 560, 562, 563,
	564, 723, 565, 566, 567, 568, 1340, 570, 571, 724,
	573, 574, 576, 577, 578, 579, 580, 581, 733, 1373,
	583, 693, 584, 585, 586, 587, 588, 0, 590, 591,
	592, 593, 594, 595, 598, 599, 600, 602, 603, 1383,
	604, 605, 1374, 607, 608, 861, 610, 611, 612, 613,
	614, 0, 734, 615, 1384, 616, 1385, 617, 618, 619,
	620, 621, 622, 623, 625, 0, 1324, 627, 628, 629,
	631, 632, 633, 634, 637, 638, 639, 640, 641, 0,
	642, 644, 646, 725, 701, 1390, 1391, 1394, 1392, 1393,
	1395, 1396, 1406, 647, 648, 664, 515, 509, 465, 507,
	508, 512, 513, 516, 0, 0, 0, 1378, 0, 0,
	0, 1322, 0, 0, 837, 0, 1343, 823, 0, 1348,
	1349, 1338, 809, 1328, 0, 0, 1329, 0, 0, 1318,
	1319, 1316, 342, 0, 359, 843, 0, 407, 444, 1333,
	0, 1321, 504, 0, 557, 561, 0, 650, 1353, 0,
	1325, 0, 415, 1346, 848, 0, 854, 1347, 860, 1345,
	626, 0, 850, 851, 856, 347, 1422, 649, 721, 0,
	0, 0, 1339, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 852, 849, 853, 859, 847,
	857, 844, 855, 0, 548, 482, 699, 575, 354, 399,
	386, 428, 470, 582, 0, 0, 460, 630, 395, 484,
	0, 375, 517, 1375, 606, 481, 0, 589, 609, 0,
	501, 380, 540, 596, 597, 841, 846, 0, 862, 0,
	384, 385, 506, 367, 514, 711, 677, 569, 527, 525,
	0, 492, 549, 706, 1334, 0, 414, 0, 409, 505,
	645, 373, 624, 543, 510, 464, 572, 601, 411, 396,
	397, 440, 542, 430, 382, 635, 1403, 1405, 1401, 1397,
	1398, 1363, 1364, 1404, 1400, 431, 1399, 0, 643, 1408,
	1419, 1416, 1421, 1407, 1420, 1414, 1078, 690, 1411, 1410,
	1424, 1417, 1418, 636, 1423, 1362, 1415, 1413, 1412, 1409,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 343, 345, 0, 344, 346, 348, 349, 350, 840,
	351, 352, 353, 356, 357, 358, 360, 719, 361, 362,
	363, 364, 365, 366, 1387, 1365, 368, 369, 370, 371,
	372, 374, 376, 720, 377, 378, 379, 381, 383, 1376,
	1366, 1371, 1377, 1367, 1368, 1372, 387, 388, 389, 390,
	391, 392, 0, 393, 394, 398, 400, 401, 402, 403,
	404, 405, 408, 0, 410, 412, 0, 413, 416, 0,
	417, 418, 419, 420, 421, 422, 423, 424, 1379, 425,
	0, 426, 427, 429, 0, 432, 433, 434, 435, 436,
	0, 437, 1388, 1337, 438, 439, 441, 442, 443, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 0, 457, 458, 459, 461, 0, 462, 463, 466,
	467, 468, 469, 0, 471, 1389, 0, 472, 473, 474,
	1369, 1370, 475, 476, 477, 478, 479, 480, 483, 1402,
	485, 486, 487, 488, 489, 490, 491, 722, 493, 494,
	495, 496, 497, 498, 499, 683, 1380, 500, 502, 503,
	1386, 687, 1381, 858, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 528, 529, 530, 1382, 531, 532, 533,
	534, 0, 535, 536, 537, 538, 539, 541, 544, 545,
	546, 547, 0, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 562, 563, 564, 723, 565, 566, 567,
	568, 1340, 570, 571, 724, 573, 574, 576, 577, 578,
	579, 580, 581, 733, 1373, 583, 693, 584, 585, 586,
	587, 588, 0, 590, 591, 592, 593, 594, 595, 598,
	599, 600, 602, 603, 1383, 604, 605, 1374, 607, 608,
	861, 610, 611, 612, 613, 614, 0, 734, 615, 1384,
	616, 1385, 617, 618, 619, 620, 621, 622, 623, 625,
	0, 1324, 627, 628, 629, 631, 632, 633, 634, 637,
	638, 639, 640, 641, 0, 642, 644, 646, 725, 701,
	1390, 1391, 1394, 1392, 1393, 1395, 1396, 1406, 647, 648,
	664, 515, 509, 465, 507, 508, 512, 513, 516, 0,
	0, 0, 1378, 0, 0, 0, 1322, 0, 837, 0,
	1343, 823, 0, 1348, 1349, 1338, 809, 1328, 0, 2600,
	3354, 1329, 0, 0, 1318, 1319, 342, 0, 359, 843,
	0, 407, 444, 1333, 0, 1321, 504, 0, 557, 561,
	0, 650, 1353, 0, 1325, 0, 415, 1346, 848, 0,
	854, 1347, 860, 1345, 626, 0, 850, 851, 856, 347,
	1422, 649, 721, 0, 0, 3315, 1339, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 852,
	849, 853, 859, 847, 857, 844, 855, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 1375, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 841,
	846, 0, 862, 0, 384, 385, 506, 367, 514, 711,
	677, 569, 527, 525, 0, 492, 549, 706, 1334, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404, 1400, 431,
	1399, 0, 643, 1408, 1419, 1416, 1421, 1407, 1420, 1414,
	1078, 690, 1411, 1410, 1424, 1417, 1418, 636, 1423, 1362,
	1415, 1413, 1412, 1409, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 840, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 1387, 1365,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 1376, 1366, 1371, 1377, 1367, 1368, 1372,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 1379, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 1388, 1337, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 1389,
	0, 472, 473, 474, 1369, 1370, 475, 476, 477, 478,
	479, 480, 483, 1402, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	1380, 500, 502, 503, 1386, 687, 1381, 858, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	1382, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 1340, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 1373, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 1383, 604,
	605, 1374, 607, 608, 861, 610, 611, 612, 613, 614,
	0, 734, 615, 1384, 616, 1385, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 1324, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 1390, 1391, 1394, 1392, 1393, 1395,
	1396, 1406, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 0, 0, 0, 1378, 0, 0, 0,
	1322, 0, 837, 0, 1343, 823, 0, 1348, 1349, 1338,
	809, 1328, 0, 0, 0, 1329, 0, 0, 1318, 1319,
	342, 0, 359, 843, 0, 407, 444, 1333, 0, 1321,
	504, 0, 557, 561, 0, 650, 1353, 0, 1325, 0,
	415, 1346, 848, 0, 854, 1347, 860, 1345, 626, 0,
	850, 851, 856, 347, 1422, 649, 721, 0, 0, 0,
	1339, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 852, 849, 853, 859, 847, 857, 844,
	855, 0, 548, 482, 699, 575, 354, 399, 386, 428,
	470, 582, 0, 0, 460, 630, 395, 484, 0, 375,
	517, 1375, 606, 481, 0, 589, 609, 0, 501, 380,
	540, 596, 597, 841, 846, 0, 862, 0, 384, 385,
	506, 367, 514, 711, 677, 569, 527, 525, 0, 492,
	549, 706, 1334, 0, 414, 0, 409, 505, 645, 373,
	624, 543, 510, 464, 572, 601, 411, 396, 397, 440,
	542, 430, 382, 635, 1403, 1405, 1401, 1397, 1398, 1363,
	1364, 1404, 1400, 431, 1399, 0, 643, 1408, 1419, 1416,
	1421, 1407, 1420, 1414, 1078, 690, 1411, 1410, 1424, 1417,
	1418, 636, 1423, 1362, 1415, 1413, 1412, 1409, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 343,
	345, 0, 344, 346, 348, 349, 350, 840, 351, 352,
	353, 356, 357, 358, 360, 719, 361, 362, 363, 364,
	365, 366, 1387, 1365, 368, 369, 370, 371, 372, 374,
	376, 720, 377, 378, 379, 381, 383, 1376, 1366, 1371,
	1377, 1367, 1368, 1372, 387, 388, 389, 390, 391, 392,
	0, 393, 394, 398, 400, 401, 402, 403, 404, 405,
	408, 0, 410, 412, 0, 413, 416, 0, 417, 418,
	419, 420, 421, 422, 423, 424, 1379, 425, 0, 426,
	427, 429, 0, 432, 433, 434, 435, 436, 0, 437,
	1388, 1337, 438, 439, 441, 442, 443, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 0,
	457, 458, 459, 461, 0, 462, 463, 466, 467, 468,
	469, 0, 471, 1389, 0, 472, 473, 474, 1369, 1370,
	475, 476, 477, 478, 479, 480, 483, 1402, 485, 486,
	487, 488, 489, 490, 491, 722, 493, 494, 495, 496,
	497, 498, 499, 683, 1380, 500, 502, 503, 1386, 687,
	1381, 858, 518, 519, 520, 521, 522, 523, 524, 526,
	0, 528, 529, 530, 1382, 531, 532, 533, 534, 0,
	535, 536, 537, 538, 539, 541, 544, 545, 546, 547,
	0, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 562, 563, 564, 723, 565, 566, 567, 568, 1340,
	570, 571, 724, 573, 574, 576, 577, 578, 579, 580,
	581, 733, 1373, 583, 693, 584, 585, 586, 587, 588,
	0, 590, 591, 592, 593, 594, 595, 598, 599, 600,
	602, 603, 1383, 604, 605, 1374, 607, 608, 861, 610,
	611, 612, 613, 614, 0, 734, 615, 1384, 616, 1385,
	617, 618, 619, 620, 621, 622, 623, 625, 0, 1324,
	627, 628, 629, 631, 632, 633, 634, 637, 638, 639,
	640, 641, 0, 642, 644, 646, 725, 701, 1390, 1391,
	1394, 1392, 1393, 1395, 1396, 1406, 647, 648, 664, 515,
	509, 465, 507, 508, 512, 513, 516, 0, 0, 0,
	1378, 0, 0, 0, 1322, 0, 837, 0, 1343, 823,
	0, 1348, 1349, 1338, 809, 1328, 0, 0, 0, 1329,
	4722, 0, 1318, 1319, 342, 0, 359, 843, 0, 407,
	444, 1333, 0, 1321, 504, 0, 557, 561, 0, 650,
	1353, 0, 1325, 0, 415, 1346, 848, 0, 854, 1347,
	860, 1345, 626, 0, 850, 851, 856, 347, 1422, 649,
	721, 0, 0, 0, 1339, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 852, 849, 853,
	859, 847, 857, 844, 855, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 1375, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 841, 846, 0,
	862, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 1334, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 1403, 1405,
	1401, 1397, 1398, 1363, 1364, 1404, 1400, 431, 1399, 0,
	643, 1408, 1419, 1416, 1421, 1407, 1420, 1414, 1078, 690,
	1411, 1410, 1424, 1417, 1418, 636, 1423, 1362, 1415, 1413,
	1412, 1409, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 840, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 1387, 1365, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 1376, 1366, 1371, 1377, 1367, 1368, 1372, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	1379, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 1388, 1337, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 1389, 0, 472,
	473, 474, 1369, 1370, 475, 476, 477, 478, 479, 480,
	483, 1402, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 1380, 500,
	502, 503, 1386, 687, 1381, 858, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 1382, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 1340, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 1373, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 1383, 604, 605, 1374,
	607, 608, 861, 610, 611, 612, 613, 614, 0, 734,
	615, 1384, 616, 1385, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 1324, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 1390, 1391, 1394, 1392, 1393, 1395, 1396, 1406,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 0, 0, 0, 1378, 0, 0, 0, 1322, 0,
	837, 0, 1343, 823, 0, 1348, 1349, 1338, 809, 1328,
	0, 0, 0, 1329, 4685, 0, 1318, 1319, 342, 0,
	359, 843, 0, 407, 444, 1333, 0, 1321, 504, 0,
	557, 561, 0, 650, 1353, 0, 1325, 0, 415, 1346,
	848, 0, 854, 1347, 860, 1345, 626, 0, 850, 851,
	856, 347, 1422, 649, 721, 0, 0, 0, 1339, 0,
	3413, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 852, 849, 853, 859, 847, 857, 844, 855, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 1375,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 841, 846, 0, 862, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	1334, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404,
	1400, 431, 1399, 0, 643, 1408, 1419, 1416, 1421, 1407,
	1420, 1414, 1078, 690, 1411, 1410, 1424, 1417, 1418, 636,
	1423, 1362, 1415, 1413, 1412, 1409, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 840, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	1387, 1365, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 1376, 1366, 1371, 1377, 1367,
	1368, 1372, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 1379, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 1388, 1337,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 1389, 0, 472, 473, 474, 1369, 1370, 475, 476,
	477, 478, 479, 480, 483, 1402, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 1380, 500, 502, 503, 1386, 687, 1381, 858,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 1382, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 1340, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	1373, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	1383, 604, 605, 1374, 607, 608, 861, 610, 611, 612,
	613, 614, 0, 734, 615, 1384, 616, 1385, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 1324, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 1390, 1391, 1394, 1392,
	1393, 1395, 1396, 1406, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 0, 0, 0, 1378, 0,
	0, 0, 1322, 0, 837, 0, 1343, 823, 0, 1348,
	1349, 1338, 809, 1328, 0, 0, 0, 1329, 0, 0,
	1318, 1319, 342, 0, 359, 843, 0, 407, 444, 1333,
	0, 1321, 504, 0, 557, 561, 0, 650, 1353, 0,
	1325, 0, 415, 1346, 848, 0, 854, 1347, 860, 1345,
	626, 0, 850, 851, 856, 347, 1422, 649, 721, 0,
	0, 0, 1339, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 852, 849, 853, 859, 847,
	857, 844, 855, 0, 548, 482, 699, 575, 354, 399,
	386, 428, 470, 582, 0, 0, 460, 630, 395, 484,
	0, 375, 517, 1375, 606, 481, 0, 589, 609, 0,
	501, 380, 540, 596, 597, 841, 846, 0, 862, 0,
	384, 385, 506, 367, 514, 711, 677, 569, 527, 525,
	0, 492, 549, 706, 1334, 0, 414, 0, 409, 505,
	645, 373, 624, 543, 510, 464, 572, 601, 411, 396,
	397, 440, 542, 430, 382, 635, 1403, 1405, 1401, 1397,
	1398, 1363, 1364, 1404, 1400, 431, 1399, 0, 643, 1408,
	1419, 1416, 1421, 1407, 1420, 1414, 1078, 690, 1411, 1410,
	1424, 1417, 1418, 636, 1423, 1362, 1415, 1413, 1412, 1409,
	4035, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 343, 345, 0, 344, 346, 348, 349, 350, 840,
	351, 352, 353, 356, 357, 358, 360, 719, 361, 362,
	363, 364, 365, 366, 1387, 1365, 368, 369, 370, 371,
	372, 374, 376, 720, 377, 378, 379, 381, 383, 1376,
	1366, 1371, 1377, 1367, 1368, 1372, 387, 388, 389, 390,
	391, 392, 0, 393, 394, 398, 400, 401, 402, 403,
	404, 405, 408, 0, 410, 412, 0, 413, 416, 0,
	417, 418, 419, 420, 421, 422, 423, 424, 1379, 425,
	0, 426, 427, 429, 0, 432, 433, 434, 435, 436,
	0, 437, 1388, 1337, 438, 439, 441, 442, 443, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 0, 457, 458, 459, 461, 0, 462, 463, 466,
	467, 468, 469, 0, 471, 1389, 0, 472, 473, 474,
	1369, 1370, 475, 476, 477, 478, 479, 480, 483, 1402,
	485, 486, 487, 488, 489, 490, 491, 722, 493, 494,
	495, 496, 497, 498, 499, 683, 1380, 500, 502, 503,
	1386, 687, 1381, 858, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 528, 529, 530, 1382, 531, 532, 533,
	534, 0, 535, 536, 537, 538, 539, 541, 544, 545,
	546, 547, 0, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 562, 563, 564, 723, 565, 566, 567,
	568, 1340, 570, 571, 724, 573, 574, 576, 577, 578,
	579, 580, 581, 733, 1373, 583, 693, 584, 585, 586,
	587, 588, 0, 590, 591, 592, 593, 594, 595, 598,
	599, 600, 602, 603, 1383, 604, 605, 1374, 607, 608,
	861, 610, 611, 612, 613, 614, 0, 734, 615, 1384,
	616, 1385, 617, 618, 619, 620, 621, 622, 623, 625,
	0, 1324, 627, 628, 629, 631, 632, 633, 634, 637,
	638, 639, 640, 641, 0, 642, 644, 646, 725, 701,
	1390, 1391, 1394, 1392, 1393, 1395, 1396, 1406, 647, 648,
	664, 515, 509, 465, 507, 508, 512, 513, 516, 0,
	0, 0, 1378, 0, 0, 0, 1322, 0, 837, 0,
	1343, 823, 0, 1348, 1349, 1338, 809, 1328, 0, 0,
	0, 1329, 0, 0, 1318, 1319, 342, 0, 359, 843,
	0, 407, 444, 1333, 0, 1321, 504, 0, 557, 561,
	0, 650, 1353, 0, 1325, 0, 415, 1346, 848, 0,
	854, 1347, 860, 1345, 626, 0, 850, 851, 856, 347,
	1422, 649, 721, 0, 0, 0, 1339, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 852,
	849, 853, 859, 847, 857, 844, 855, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 3432, 375, 517, 1375, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 841,
	846, 0, 862, 0, 384, 385, 506, 367, 514, 711,
	677, 569, 527, 525, 0, 492, 549, 706, 1334, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404, 1400, 431,
	1399, 0, 643, 1408, 1419, 1416, 1421, 1407, 1420, 1414,
	1078, 690, 1411, 1410, 1424, 1417, 1418, 636, 1423, 1362,
	1415, 1413, 1412, 1409, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 840, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 1387, 1365,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 1376, 1366, 1371, 1377, 1367, 1368, 1372,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 1379, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 1388, 1337, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 1389,
	0, 472, 473, 474, 1369, 1370, 475, 476, 477, 478,
	479, 480, 483, 1402, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	1380, 500, 502, 503, 1386, 687, 1381, 858, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	1382, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 1340, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 1373, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 1383, 604,
	605, 1374, 607, 608, 861, 610, 611, 612, 613, 614,
	0, 734, 615, 1384, 616, 1385, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 1324, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 1390, 1391, 1394, 1392, 1393, 1395,
	1396, 1406, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 0, 0, 0, 1378, 0, 0, 0,
	1322, 0, 837, 0, 1343, 823, 0, 1348, 1349, 1338,
	809, 1328, 0, 0, 0, 1329, 0, 0, 1318, 1319,
	342, 0, 359, 843, 0, 407, 444, 1333, 0, 1321,
	504, 0, 557, 561, 0, 650, 1353, 0, 1325, 0,
	415, 1346, 848, 0, 854, 1347, 860, 1345, 626, 0,
	850, 851, 856, 347, 1422, 649, 721, 0, 0, 0,
	1339, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 852, 849, 853, 859, 847, 857, 844,
	855, 0, 548, 482, 699, 575, 354, 399, 386, 428,
	470, 582, 0, 0, 460, 630, 395, 484, 0, 375,
	517, 1375, 606, 481, 0, 589, 609, 0, 501, 380,
	540, 596, 597, 841, 846, 0, 862, 0, 384, 385,
	506, 367, 514, 711, 677, 569, 527, 525, 0, 492,
	549, 706, 1334, 0, 414, 0, 409, 505, 645, 373,
	624, 543, 510, 464, 572, 601, 411, 396, 397, 440,
	542, 430, 382, 635, 1403, 1405, 1401, 1397, 1398, 1363,
	1364, 1404, 1400, 431, 1399, 0, 643, 1408, 1419, 1416,
	1421, 1407, 1420, 1414, 1078, 690, 1411, 1410, 1424, 1417,
	1418, 636, 1423, 1362, 1415, 1413, 1412, 1409, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 343,
	345, 0, 344, 346, 348, 349, 350, 840, 351, 352,
	353, 356, 357, 358, 360, 719, 361, 362, 363, 364,
	365, 366, 1387, 1365, 368, 369, 370, 371, 372, 374,
	376, 720, 377, 378, 379, 381, 383, 1376, 1366, 1371,
	1377, 1367, 1368, 1372, 387, 388, 389, 390, 391, 392,
	0, 393, 394, 398, 400, 401, 402, 403, 404, 405,
	408, 0, 410, 412, 0, 413, 416, 0, 417, 418,
	419, 420, 421, 422, 423, 424, 1379, 425, 0, 426,
	427, 429, 0, 432, 433, 434, 435, 436, 0, 437,
	1388, 1337, 438, 439, 441, 442, 443, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 0,
	457, 458, 459, 461, 0, 462, 463, 466, 467, 468,
	469, 0, 471, 1389, 0, 472, 473, 474, 1369, 1370,
	475, 476, 477, 478, 479, 480, 483, 1402, 485, 486,
	487, 488, 489, 490, 491, 722, 493, 494, 495, 496,
	497, 498, 499, 683, 1380, 500, 502, 503, 1386, 687,
	1381, 858, 518, 519, 520, 521, 522, 523, 524, 526,
	0, 528, 529, 530, 1382, 531, 532, 533, 534, 0,
	535, 536, 537, 538, 539, 541, 544, 545, 546, 547,
	0, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 562, 563, 564, 723, 565, 566, 567, 568, 1340,
	570, 571, 724, 573, 574, 576, 577, 578, 579, 580,
	581, 733, 1373, 583, 693, 584, 585, 586, 587, 588,
	0, 590, 591, 592, 593, 594, 595, 598, 599, 600,
	602, 603, 1383, 604, 605, 1374, 607, 608, 861, 610,
	611, 612, 613, 614, 0, 734, 615, 1384, 616, 1385,
	617, 618, 619, 620, 621, 622, 623, 625, 0, 1324,
	627, 628, 629, 631, 632, 633, 634, 637, 638, 639,
	640, 641, 0, 642, 644, 646, 725, 701, 1390, 1391,
	1394, 1392, 1393, 1395, 1396, 1406, 647, 648, 664, 515,
	509, 465, 507, 508, 512, 513, 516, 0, 0, 0,
	1378, 0, 0, 0, 1322, 0, 0, 837, 0, 1343,
	823, 0, 1348, 1349, 1338, 809, 1328, 0, 0, 1329,
	3359, 0, 1318, 1319, 2085, 342, 0, 359, 843, 0,
	407, 444, 1333, 0, 1321, 504, 0, 557, 561, 0,
	650, 1353, 0, 1325, 0, 415, 1346, 848, 0, 854,
	1347, 860, 1345, 626, 0, 850, 851, 856, 347, 1422,
	649, 721, 0, 0, 0, 1339, 0, 0, 0, 0,
	0, 0, 0, 355, 0, 0, 0, 0, 852, 849,
	853, 859, 847, 857, 844, 855, 0, 548, 482, 699,
	575, 354, 399, 386, 428, 470, 582, 0, 0, 460,
	630, 395, 484, 0, 375, 517, 1375, 606, 481, 0,
	589, 609, 0, 501, 380, 540, 596, 597, 841, 846,
	0, 862, 0, 384, 385, 506, 367, 514, 711, 677,
	569, 527, 525, 0, 492, 549, 706, 1334, 0, 414,
	0, 409, 505, 645, 373, 624, 543, 510, 464, 572,
	601, 411, 396, 397, 440, 542, 430, 382, 635, 1403,
	1405, 1401, 1397, 1398, 1363, 1364, 1404, 1400, 431, 1399,
	0, 643, 1408, 1419, 1416, 1421, 1407, 1420, 1414, 1078,
	690, 1411, 1410, 1424, 1417, 1418, 636, 1423, 1362, 1415,
	1413, 1412, 1409, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 340, 341, 343, 345, 0, 344, 346, 348,
	349, 350, 840, 351, 352, 353, 356, 357, 358, 360,
	719, 361, 362, 363, 364, 365, 366, 1387, 1365, 368,
	369, 370, 371, 372, 374, 376, 720, 377, 378, 379,
	381, 383, 1376, 1366, 1371, 1377, 1367, 1368, 1372, 387,
	388, 389, 390, 391, 392, 0, 393, 394, 398, 400,
	401, 402, 403, 404, 405, 408, 0, 410, 412, 0,
	413, 416, 0, 417, 418, 419, 420, 421, 422, 423,
	424, 1379, 425, 0, 426, 427, 429, 0, 432, 433,
	434, 435, 436, 0, 437, 1388, 1337, 438, 439, 441,
	442, 443, 445, 446, 447, 448, 449, 450, 451, 452,
	453, 454, 455, 456, 0, 457, 458, 459, 461, 0,
	462, 463, 466, 467, 468, 469, 0, 471, 1389, 0,
	472, 473, 474, 1369, 1370, 475, 476, 477, 478, 479,
	480, 483, 1402, 485, 486, 487, 488, 489, 490, 491,
	722, 493, 494, 495, 496, 497, 498, 499, 683, 1380,
	500, 502, 503, 1386, 687, 1381, 858, 518, 519, 520,
	521, 522, 523, 524, 526, 0, 528, 529, 530, 1382,
	531, 532, 533, 534, 0, 535, 536, 537, 538, 539,
	541, 544, 545, 546, 547, 0, 550, 551, 552, 553,
	554, 555, 556, 558, 559, 560, 562, 563, 564, 723,
	565, 566, 567, 568, 1340, 570, 571, 724, 573, 574,
	576, 577, 578, 579, 580, 581, 733, 1373, 583, 693,
	584, 585, 586, 587, 588, 0, 590, 591, 592, 593,
	594, 595, 598, 599, 600, 602, 603, 1383, 604, 605,
	1374, 607, 608, 861, 610, 611, 612, 613, 614, 0,
	734, 615, 1384, 616, 1385, 617, 618, 619, 620, 621,
	622, 623, 625, 0, 1324, 627, 628, 629, 631, 632,
	633, 634, 637, 638, 639, 640, 641, 0, 642, 644,
	646, 725, 701, 1390, 1391, 1394, 1392, 1393, 1395, 1396,
	1406, 647, 648, 664, 515, 509, 465, 507, 508, 512,
	513, 516, 0, 0, 0, 1378, 0, 0, 0, 1322,
	0, 837, 0, 1343, 823, 0, 1348, 1349, 1338, 809,
	1328, 0, 0, 0, 1329, 0, 0, 1318, 1319, 342,
	0, 359, 843, 0, 407, 444, 1333, 0, 1321, 504,
	0, 557, 561, 0, 650, 1353, 0, 1325, 0, 415,
	1346, 848, 0, 854, 1347, 860, 1345, 626, 0, 850,
	851, 856, 347, 1422, 649, 721, 0, 0, 0, 1339,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 852, 849, 853, 859, 847, 857, 844, 855,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	1375, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 841, 846, 0, 862, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 1334, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 1403, 1405, 1401, 1397, 1398, 1363, 1364,
	1404, 1400, 431, 1399, 0, 643, 1408, 1419, 1416, 1421,
	1407, 1420, 1414, 1078, 690, 1411, 1410, 1424, 1417, 1418,
	636, 1423, 1362, 1415, 1413, 1412, 1409, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 840, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 1387, 1365, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 1376, 1366, 1371, 1377,
	1367, 1368, 1372, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 1379, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 1388,
	1337, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 1389, 0, 472, 473, 474, 1369, 1370, 475,
	476, 477, 478, 479, 480, 483, 1402, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 1380, 500, 502, 503, 1386, 687, 1381,
	858, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 1382, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 1340, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 1373, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 1383, 604, 605, 1374, 607, 608, 861, 610, 611,
	612, 613, 614, 0, 734, 615, 1384, 616, 1385, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 1324, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 1390, 1391, 1394,
	1392, 1393, 1395, 1396, 1406, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 0, 0, 0, 1378,
	0, 0, 0, 1322, 0, 837, 0, 1343, 823, 0,
	1348, 1349, 1338, 809, 1328, 0, 0, 0, 1329, 0,
	0, 1318, 1319, 342, 0, 359, 843, 0, 407, 444,
	1333, 0, 1321, 504, 0, 557, 561, 0, 650, 1353,
	0, 1325, 0, 415, 1346, 848, 0, 854, 1347, 860,
	1345, 626, 0, 850, 851, 856, 347, 1422, 649, 721,
	0, 0, 0, 1339, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 852, 849, 853, 859,
	847, 857, 844, 855, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 1375, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 841, 846, 0, 862,
	0, 5956, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 1334, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 1403, 1405, 1401,
	1397, 1398, 1363, 1364, 1404, 1400, 431, 1399, 0, 643,
	1408, 1419, 1416, 1421, 1407, 1420, 1414, 1078, 690, 1411,
	1410, 1424, 1417, 1418, 636, 1423, 1362, 1415, 1413, 1412,
	1409, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	840, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 1387, 1365, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	1376, 1366, 1371, 1377, 1367, 1368, 1372, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 1379,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 1388, 1337, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 1389, 0, 472, 473,
	474, 1369, 1370, 475, 476, 477, 478, 479, 480, 483,
	1402, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 1380, 500, 502,
	503, 1386, 687, 1381, 858, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 1382, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 1340, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 1373, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 1383, 604, 605, 1374, 607,
	608, 861, 610, 611, 612, 613, 614, 0, 734, 615,
	1384, 616, 1385, 617, 618, 619, 620, 621, 5955, 623,
	625, 0, 1324, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 1390, 1391, 1394, 1392, 1393, 1395, 1396, 1406, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	0, 0, 0, 1378, 0, 0, 0, 1322, 0, 837,
	0, 1343, 823, 0, 1348, 1349, 1338, 809, 1328, 0,
	0, 0, 1329, 0, 0, 1318, 1319, 342, 0, 359,
	843, 0, 407, 444, 1333, 0, 1321, 504, 0, 557,
	561, 0, 650, 1353, 0, 1325, 0, 415, 1346, 848,
	0, 854, 1347, 860, 1345, 626, 0, 850, 851, 856,
	347, 1422, 649, 721, 0, 0, 0, 1339, 0, 0,
	0, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	852, 849, 853, 859, 847, 857, 844, 855, 0, 548,
	482, 699, 575, 354, 399, 386, 428, 470, 582, 0,
	0, 460, 630, 395, 484, 0, 375, 517, 1375, 606,
	481, 0, 589, 609, 0, 501, 380, 540, 596, 597,
	841, 846, 0, 862, 0, 384, 385, 506, 367, 514,
	711, 677, 569, 527, 525, 0, 492, 549, 706, 1334,
	0, 414, 0, 409, 505, 645, 373, 624, 543, 510,
	464, 572, 601, 411, 396, 397, 440, 542, 430, 382,
	635, 1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404, 1400,
	431, 1399, 0, 643, 1408, 1419, 1416, 1421, 1407, 1420,
	1414, 1078, 690, 1411, 1410, 1424, 1417, 1418, 636, 1423,
	1362, 1415, 1413, 1412, 1409, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 343, 345, 0, 344,
	346, 348, 349, 350, 840, 351, 352, 353, 356, 357,
	358, 360, 719, 361, 362, 363, 364, 365, 366, 1387,
	1365, 368, 369, 370, 371, 372, 374, 376, 720, 377,
	378, 379, 381, 5758, 1376, 1366, 1371, 1377, 1367, 1368,
	1372, 387, 388, 389, 390, 391, 392, 0, 393, 394,
	398, 400, 401, 402, 403, 404, 405, 408, 0, 410,
	412, 0, 413, 416, 0, 417, 418, 419, 420, 421,
	422, 423, 424, 1379, 425, 0, 426, 427, 429, 0,
	432, 433, 434, 435, 436, 0, 437, 1388, 5760, 438,
	439, 441, 442, 443, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 0, 457, 458, 459,
	461, 0, 462, 463, 466, 467, 468, 469, 0, 471,
	1389, 0, 472, 473, 474, 1369, 1370, 475, 476, 477,
	478, 479, 480, 483, 1402, 485, 486, 487, 488, 489,
	490, 491, 722, 493, 494, 495, 496, 497, 498, 499,
	683, 1380, 500, 502, 503, 1386, 687, 1381, 858, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 528, 529,
	530, 1382, 531, 532, 533, 534, 0, 535, 536, 537,
	538, 539, 541, 544, 545, 546, 547, 0, 550, 551,
	552, 553, 554, 555, 556, 558, 559, 560, 562, 563,
	564, 723, 565, 5759, 567, 568, 1340, 570, 571, 724,
	573, 574, 576, 577, 578, 579, 580, 581, 733, 1373,
	583, 693, 584, 585, 586, 587, 588, 0, 590, 591,
	592, 593, 594, 595, 598, 599, 600, 602, 603, 1383,
	604, 605, 1374, 607, 608, 861, 610, 611, 612, 613,
	614, 0, 734, 615, 1384, 616, 1385, 617, 618, 619,
	620, 621, 622, 623, 625, 0, 1324, 627, 628, 629,
	631, 632, 633, 634, 637, 638, 639, 640, 641, 0,
	642, 644, 646, 725, 701, 1390, 1391, 1394, 1392, 1393,
	1395, 1396, 1406, 647, 648, 664, 515, 509, 465, 507,
	508, 512, 513, 516, 0, 0, 0, 1378, 0, 0,
	0, 1322, 0, 837, 0, 1343, 823, 0, 1348, 1349,
	1338, 809, 1328, 0, 0, 0, 5757, 0, 0, 1318,
	1319, 342, 0, 359, 843, 0, 407, 444, 1333, 0,
	1321, 504, 0, 557, 561, 0, 5954, 1353, 0, 1325,
	0, 415, 1346, 848, 0, 854, 1347, 860, 1345, 626,
	0, 850, 851, 856, 347, 1422, 649, 721, 0, 0,
	0, 1339, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 852, 849, 853, 859, 847, 857,
	844, 855, 0, 548, 482, 699, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 0,
	375, 517, 1375, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 841, 846, 0, 862, 0, 5956,
	385, 506, 367, 514, 711, 677, 569, 527, 525, 0,
	492, 549, 706, 1334, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 1403, 1405, 1401, 1397, 1398,
	1363, 1364, 1404, 1400, 431, 1399, 0, 643, 1408, 1419,
	1416, 1421, 1407, 1420, 1414, 1078, 690, 1411, 1410, 1424,
	1417, 1418, 636, 1423, 1362, 1415, 1413, 1412, 1409, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 840, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 1387, 1365, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 1376, 1366,
	1371, 1377, 1367, 1368, 1372, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 1379, 425, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 1388, 1337, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 0, 471, 1389, 0, 472, 473, 474, 1369,
	1370, 475, 476, 477, 478, 479, 480, 483, 1402, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 683, 1380, 500, 502, 503, 1386,
	687, 1381, 858, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 1382, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	1340, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 1373, 583, 693, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 1383, 604, 605, 1374, 607, 608, 861,
	610, 611, 612, 613, 614, 0, 734, 615, 1384, 616,
	1385, 617, 618, 619, 620, 621, 5955, 623, 625, 0,
	1324, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 701, 1390,
	1391, 1394, 1392, 1393, 1395, 1396, 1406, 647, 648, 664,
	515, 509, 465, 507, 508, 512, 513, 516, 0, 0,
	0, 1378, 0, 0, 0, 1322, 0, 837, 0, 1343,
	823, 0, 1348, 1349, 1338, 809, 1328, 0, 0, 0,
	1329, 0, 0, 1318, 1319, 342, 0, 359, 843, 0,
	407, 444, 1333, 0, 1321, 504, 0, 557, 561, 0,
	650, 1353, 0, 1325, 0, 415, 1346, 848, 0, 854,
	1347, 860, 1345, 626, 0, 850, 851, 856, 347, 1422,
	649, 721, 0, 0, 0, 1339, 0, 0, 0, 0,
	0, 0, 0, 355, 0, 0, 0, 0, 852, 849,
	853, 859, 847, 857, 844, 855, 0, 548, 482, 699,
	575, 354, 399, 386, 428, 470, 582, 0, 0, 460,
	630, 395, 484, 0, 375, 517, 1375, 606, 481, 0,
	589, 609, 0, 501, 380, 540, 596, 597, 841, 846,
	0, 862, 0, 384, 385, 506, 367, 514, 711, 677,
	569, 527, 525, 0, 492, 549, 706, 1334, 0, 414,
	0, 409, 505, 645, 373, 624, 543, 510, 464, 572,
	601, 411, 396, 397, 440, 542, 430, 382, 635, 1403,
	1405, 1401, 1397, 1398, 1363, 1364, 1404, 1400, 431, 1399,
	0, 643, 1408, 1419, 1416, 1421, 1407, 1420, 1414, 1078,
	690, 1411, 1410, 1424, 1417, 1418, 636, 1423, 1362, 1415,
	1413, 1412, 1409, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 340, 341, 343, 345, 0, 344, 346, 348,
	349, 350, 840, 351, 352, 353, 356, 357, 358, 360,
	719, 361, 362, 363, 364, 365, 366, 1387, 1365, 368,
	369, 370, 371, 372, 374, 376, 720, 377, 378, 379,
	381, 383, 1376, 1366, 1371, 1377, 1367, 1368, 1372, 387,
	388, 389, 390, 391, 392, 0, 393, 394, 398, 400,
	401, 402, 403, 404, 405, 408, 0, 410, 412, 0,
	413, 416, 0, 417, 418, 419, 420, 421, 422, 423,
	424, 1379, 425, 0, 426, 427, 429, 0, 432, 433,
	434, 435, 436, 0, 437, 1388, 1337, 438, 439, 441,
	442, 443, 445, 446, 447, 448, 449, 450, 451, 452,
	453, 454, 455, 456, 0, 457, 458, 459, 461, 0,
	462, 463, 466, 467, 468, 469, 0, 471, 1389, 0,
	472, 473, 474, 1369, 1370, 475, 476, 477, 478, 479,
	480, 483, 1402, 485, 486, 487, 488, 489, 490, 491,
	722, 493, 494, 495, 496, 497, 498, 5247, 683, 1380,
	500, 502, 503, 1386, 687, 1381, 858, 518, 519, 520,
	521, 522, 523, 524, 526, 0, 528, 529, 530, 1382,
	531, 532, 533, 534, 0, 535, 536, 537, 538, 539,
	541, 544, 545, 546, 547, 0, 550, 551, 552, 553,
	554, 555, 556, 558, 559, 560, 562, 563, 564, 723,
	565, 566, 567, 568, 1340, 570, 571, 724, 573, 574,
	576, 577, 578, 579, 580, 581, 733, 1373, 583, 693,
	584, 585, 586, 587, 588, 0, 590, 591, 592, 593,
	594, 595, 598, 599, 600, 602, 603, 1383, 604, 605,
	1374, 607, 608, 861, 610, 611, 612, 613, 614, 0,
	734, 615, 1384, 616, 1385, 617, 618, 619, 620, 621,
	622, 623, 625, 0, 1324, 627, 628, 629, 631, 632,
	633, 634, 637, 638, 639, 640, 641, 0, 642, 644,
	646, 725, 701, 1390, 1391, 1394, 1392, 1393, 1395, 1396,
	1406, 647, 648, 664, 515, 509, 465, 507, 508, 512,
	513, 516, 0, 0, 0, 1378, 0, 0, 0, 1322,
	0, 837, 0, 1343, 823, 0, 1348, 1349, 1338, 809,
	1328, 0, 0, 0, 1329, 0, 0, 1318, 1319, 342,
	0, 359, 843, 0, 407, 444, 1333, 0, 1321, 504,
	0, 557, 561, 0, 650, 1353, 0, 1325, 0, 415,
	1346, 848, 0, 854, 1347, 860, 1345, 626, 0, 850,
	851, 856, 347, 1422, 649, 721, 0, 0, 0, 1339,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 852, 849, 853, 859, 847, 857, 844, 855,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	1375, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 841, 846, 0, 862, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 1334, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 1403, 1405, 1401, 1397, 1398, 1363, 1364,
	1404, 1400, 431, 1399, 0, 643, 1408, 1419, 1416, 1421,
	1407, 1420, 1414, 1078, 690, 1411, 1410, 1424, 1417, 1418,
	636, 1423, 1362, 1415, 1413, 1412, 1409, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 840, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 1387, 1365, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 1376, 1366, 1371, 1377,
	1367, 1368, 1372, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 1379, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 1388,
	1337, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 1389, 0, 472, 473, 474, 1369, 1370, 475,
	476, 477, 478, 479, 480, 483, 1402, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 1380, 500, 502, 503, 1386, 687, 1381,
	858, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 1382, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 1340, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 1373, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 1383, 604, 605, 1374, 607, 608, 861, 610, 611,
	612, 613, 614, 0, 734, 615, 1384, 616, 1385, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 1324, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 5234, 1390, 1391, 1394,
	1392, 1393, 1395, 1396, 1406, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 0, 0, 0, 1378,
	0, 0, 0, 1322, 0, 837, 0, 1343, 823, 0,
	1348, 1349, 1338, 809, 1328, 0, 0, 0, 1329, 0,
	0, 1318, 1319, 342, 0, 359, 843, 0, 407, 444,
	1333, 0, 1321, 504, 0, 557, 561, 0, 650, 1353,
	0, 1325, 0, 415, 1346, 848, 0, 854, 1347, 860,
	1345, 626, 0, 850, 851, 856, 347, 1422, 649, 721,
	0, 0, 0, 1339, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 852, 849, 853, 859,
	847, 857, 844, 855, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 1375, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 841, 846, 0, 862,
	0, 4235, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 1334, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 1403, 1405, 1401,
	1397, 1398, 1363, 1364, 1404, 1400, 431, 1399, 0, 643,
	1408, 1419, 1416, 1421, 1407, 1420, 1414, 1078, 690, 1411,
	1410, 1424, 1417, 1418, 636, 1423, 1362, 1415, 1413, 1412,
	1409, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	840, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 1387, 1365, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	1376, 1366, 1371, 1377, 1367, 1368, 1372, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 1379,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 1388, 1337, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 1389, 0, 472, 473,
	474, 1369, 1370, 475, 476, 477, 478, 479, 480, 483,
	1402, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 1380, 500, 502,
	503, 1386, 687, 1381, 858, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 1382, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 1340, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 1373, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 1383, 604, 605, 1374, 607,
	608, 861, 610, 611, 612, 613, 614, 0, 734, 615,
	1384, 616, 1385, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 1324, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 1390, 1391, 1394, 1392, 1393, 1395, 1396, 1406, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	0, 0, 0, 1378, 0, 0, 0, 1322, 0, 837,
	0, 3265, 823, 0, 1348, 1349, 1338, 809, 1328, 0,
	0, 0, 1329, 0, 0, 1318, 1319, 342, 0, 359,
	843, 0, 407, 444, 1333, 0, 1321, 504, 0, 557,
	561, 0, 650, 1353, 0, 1325, 0, 415, 1346, 848,
	0, 854, 1347, 860, 1345, 626, 0, 850, 851, 856,
	347, 1422, 649, 721, 0, 0, 0, 1339, 0, 0,
	0, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	852, 849, 853, 859, 847, 857, 844, 855, 0, 548,
	482, 699, 575, 354, 399, 386, 428, 470, 582, 0,
	0, 460, 630, 395, 484, 0, 375, 517, 1375, 606,
	481, 0, 589, 609, 0, 501, 380, 540, 596, 597,
	841, 846, 0, 862, 0, 384, 385, 506, 367, 514,
	711, 677, 569, 527, 525, 0, 492, 549, 706, 1334,
	0, 414, 0, 409, 505, 645, 373, 624, 543, 510,
	464, 572, 601, 411, 396, 397, 440, 542, 430, 382,
	635, 1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404, 1400,
	431, 1399, 0, 643, 1408, 1419, 1416, 1421, 1407, 1420,
	1414, 1078, 690, 1411, 1410, 1424, 1417, 1418, 636, 1423,
	1362, 1415, 1413, 1412, 1409, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 343, 345, 0, 344,
	346, 348, 349, 350, 840, 351, 352, 353, 356, 357,
	358, 360, 719, 361, 362, 363, 364, 365, 366, 1387,
	1365, 368, 369, 370, 371, 372, 374, 376, 720, 377,
	378, 379, 381, 383, 1376, 1366, 1371, 1377, 1367, 1368,
	1372, 387, 388, 389, 390, 391, 392, 0, 393, 394,
	398, 400, 401, 402, 403, 404, 405, 408, 0, 410,
	412, 0, 413, 416, 0, 417, 418, 419, 420, 421,
	422, 423, 424, 1379, 425, 0, 426, 427, 429, 0,
	432, 433, 434, 435, 436, 0, 437, 1388, 1337, 438,
	439, 441, 442, 443, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 0, 457, 458, 459,
	461, 0, 462, 463, 466, 467, 468, 469, 0, 471,
	1389, 0, 472, 473, 474, 1369, 1370, 475, 476, 477,
	478, 479, 480, 483, 1402, 485, 486, 487, 488, 489,
	490, 491, 722, 493, 494, 495, 496, 497, 498, 499,
	683, 1380, 500, 502, 503, 1386, 687, 1381, 858, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 528, 529,
	530, 1382, 531, 532, 533, 534, 0, 535, 536, 537,
	538, 539, 541, 544, 545, 546, 547, 0, 550, 551,
	552, 553, 554, 555, 556, 558, 559, 560, 562, 563,
	564, 723, 565, 566, 567, 568, 1340, 570, 571, 724,
	573, 574, 576, 577, 578, 579, 580, 581, 733, 1373,
	583, 693, 584, 585, 586, 587, 588, 0, 590, 591,
	592, 593, 594, 595, 598, 599, 600, 602, 603, 1383,
	604, 605, 1374, 607, 608, 861, 610, 611, 612, 613,
	614, 0, 734, 615, 1384, 616, 1385, 617, 618, 619,
	620, 621, 622, 623, 625, 0, 1324, 627, 628, 629,
	631, 632, 633, 634, 637, 638, 639, 640, 641, 0,
	642, 644, 646, 725, 701, 1390, 1391, 1394, 1392, 1393,
	1395, 1396, 1406, 647, 648, 664, 515, 509, 465, 507,
	508, 512, 513, 516, 0, 0, 0, 1378, 0, 0,
	0, 1322, 0, 837, 0, 1343, 823, 0, 1348, 1349,
	1338, 809, 1328, 0, 0, 0, 1329, 0, 0, 1318,
	1319, 342, 0, 359, 843, 0, 407, 444, 1333, 0,
	1321, 504, 0, 557, 561, 0, 650, 1353, 0, 1325,
	0, 415, 1346, 848, 0, 854, 1347, 860, 1345, 626,
	0, 850, 851, 856, 347, 1422, 649, 721, 0, 0,
	0, 1339, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 852, 849, 853, 859, 847, 857,
	844, 855, 0, 548, 482, 699, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 0,
	375, 517, 1375, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 841, 846, 0, 862, 0, 384,
	385, 506, 367, 514, 711, 677, 569, 527, 525, 0,
	492, 549, 706, 1334, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 1403, 1405, 1401, 1397, 1398,
	1363, 1364, 1404, 1400, 431, 1399, 0, 643, 1408, 1419,
	1416, 1421, 1407, 1420, 1414, 1078, 690, 1411, 1410, 1424,
	1417, 1418, 636, 1423, 1362, 1415, 1413, 1412, 1409, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 840, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 1387, 1365, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 1376, 1366,
	1371, 1377, 1367, 1368, 1372, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 1379, 425, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 1388, 1337, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 0, 471, 1389, 0, 472, 473, 474, 1369,
	1370, 475, 476, 477, 478, 479, 480, 483, 1402, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 683, 1380, 500, 502, 503, 1386,
	687, 1381, 858, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 1382, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	1340, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 1373, 583, 693, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 1383, 604, 605, 1374, 607, 608, 861,
	610, 611, 612, 613, 614, 0, 734, 615, 1384, 616,
	1385, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	1324, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 701, 1390,
	1391, 1394, 1392, 1393, 1395, 1396, 1406, 647, 648, 664,
	515, 509, 465, 507, 508, 512, 513, 516, 0, 0,
	0, 1378, 0, 0, 0, 1322, 0, 837, 0, 1343,
	823, 0, 1348, 1349, 1338, 809, 1328, 0, 0, 0,
	1329, 0, 0, 2093, 2094, 342, 0, 359, 843, 0,
	407, 444, 1333, 0, 0, 504, 0, 557, 561, 0,
	650, 1353, 0, 5567, 0, 415, 1346, 848, 0, 854,
	1347, 860, 1345, 626, 0, 850, 851, 856, 347, 1422,
	649, 721, 0, 0, 0, 1339, 0, 0, 0, 0,
	0, 0, 0, 355, 0, 0, 0, 0, 852, 849,
	853, 859, 847, 857, 844, 855, 0, 548, 482, 699,
	575, 354, 399, 386, 428, 470, 582, 0, 0, 460,
	630, 395, 484, 0, 375, 517, 1375, 606, 481, 0,
	589, 609, 0, 501, 380, 540, 596, 597, 841, 846,
	0, 862, 0, 384, 385, 506, 367, 514, 711, 677,
	569, 527, 525, 0, 492, 549, 706, 1334, 0, 414,
	0, 409, 505, 645, 373, 624, 543, 510, 464, 572,
	601, 411, 396, 397, 440, 542, 430, 382, 635, 1403,
	1405, 1401, 1397, 1398, 1363, 1364, 1404, 1400, 431, 1399,
	0, 643, 1408, 1419, 1416, 1421, 1407, 1420, 1414, 1078,
	690, 1411, 1410, 1424, 1417, 1418, 636, 1423, 1362, 1415,
	1413, 1412, 1409, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 340, 341, 343, 345, 0, 344, 346, 348,
	349, 350, 840, 351, 352, 353, 356, 357, 358, 360,
	719, 361, 362, 363, 364, 365, 366, 1387, 1365, 368,
	369, 370, 371, 372, 374, 376, 720, 377, 378, 379,
	381, 383, 1376, 1366, 1371, 1377, 1367, 1368, 1372, 387,
	388, 389, 390, 391, 392, 0, 393, 394, 398, 400,
	401, 402, 403, 404, 405, 408, 0, 410, 412, 0,
	413, 416, 0, 417, 418, 419, 420, 421, 422, 423,
	424, 1379, 425, 0, 426, 427, 429, 0, 432, 433,
	434, 435, 436, 0, 437, 1388, 1337, 438, 439, 441,
	442, 443, 445, 446, 447, 448, 449, 450, 451, 452,
	453, 454, 455, 456, 0, 457, 458, 459, 461, 0,
	462, 463, 466, 467, 468, 469, 0, 471, 1389, 0,
	472, 473, 474, 1369, 1370, 475, 476, 477, 478, 479,
	480, 483, 1402, 485, 486, 487, 488, 489, 490, 491,
	722, 493, 494, 495, 496, 497, 498, 499, 683, 1380,
	500, 502, 503, 1386, 687, 1381, 858, 518, 519, 520,
	521, 522, 523, 524, 526, 0, 528, 529, 530, 1382,
	531, 532, 533, 534, 0, 535, 536, 537, 538, 539,
	541, 544, 545, 546, 547, 0, 550, 551, 552, 553,
	554, 555, 556, 558, 559, 560, 562, 563, 564, 723,
	565, 566, 567, 568, 3403, 570, 571, 724, 573, 574,
	576, 577, 578, 579, 580, 581, 733, 1373, 583, 693,
	584, 585, 586, 587, 588, 0, 590, 591, 592, 593,
	594, 595, 598, 599, 600, 602, 603, 1383, 604, 605,
	1374, 607, 608, 861, 610, 611, 612, 613, 614, 0,
	734, 615, 1384, 616, 1385, 617, 618, 619, 620, 621,
	622, 623, 625, 0, 0, 627, 628, 629, 631, 632,
	633, 634, 637, 638, 639, 640, 641, 0, 642, 644,
	646, 725, 701, 1390, 1391, 1394, 1392, 1393, 1395, 1396,
	1406, 647, 648, 664, 515, 509, 465, 507, 508, 512,
	513, 516, 0, 0, 0, 1378, 0, 0, 0, 0,
	0, 837, 0, 1343, 823, 0, 1348, 1349, 1338, 809,
	1328, 0, 0, 0, 3259, 0, 0, 3400, 3401, 342,
	0, 359, 843, 0, 407, 444, 1333, 0, 0, 504,
	0, 557, 561, 0, 650, 1353, 0, 0, 0, 415,
	1346, 848, 0, 854, 1347, 860, 1345, 626, 0, 850,
	851, 856, 347, 1422, 649, 721, 0, 0, 0, 1339,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 852, 849, 853, 859, 847, 857, 844, 855,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	1375, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 841, 846, 0, 862, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 1334, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 1403, 1405, 1401, 1397, 1398, 1363, 1364,
	1404, 1400, 431, 1399, 0, 643, 1408, 1419, 1416, 1421,
	1407, 1420, 1414, 1078, 690, 1411, 1410, 1424, 1417, 1418,
	636, 1423, 1362, 1415, 1413, 1412, 1409, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 840, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 1387, 1365, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 1376, 1366, 1371, 1377,
	1367, 1368, 1372, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 1379, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 1388,
	1337, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 1389, 0, 472, 473, 474, 1369, 1370, 475,
	476, 477, 478, 479, 480, 483, 1402, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 1380, 500, 502, 503, 1386, 687, 1381,
	858, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 1382, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 3403, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 1373, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 1383, 604, 605, 1374, 607, 608, 861, 610, 611,
	612, 613, 614, 0, 734, 615, 1384, 616, 1385, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 1390, 1391, 1394,
	1392, 1393, 1395, 1396, 1406, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 0, 0, 0, 1378,
	0, 0, 0, 0, 0, 837, 0, 1343, 823, 0,
	1348, 1349, 0, 809, 1328, 0, 0, 0, 3259, 0,
	0, 3400, 3401, 342, 0, 359, 843, 0, 407, 444,
	1333, 0, 0, 504, 0, 557, 561, 0, 650, 1353,
	0, 0, 0, 415, 1346, 848, 0, 854, 1347, 860,
	1345, 626, 0, 850, 851, 856, 347, 1422, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 852, 849, 853, 859,
	847, 857, 844, 855, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 1375, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 841, 846, 0, 862,
	0, 384, 385, 506, 367, 514, 711, 677, 3258, 527,
	525, 0, 492, 549, 706, 1334, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 1403, 1405, 1401,
	1397, 1398, 1363, 1364, 1404, 1400, 431, 1399, 0, 643,
	1408, 1419, 1416, 1421, 1407, 1420, 1414, 1078, 690, 1411,
	1410, 1424, 1417, 1418, 636, 1423, 1362, 1415, 1413, 1412,
	1409, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	840, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 1387, 1365, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	1376, 1366, 1371, 1377, 1367, 1368, 1372, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 1379,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 1388, 1337, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 1389, 0, 472, 473,
	474, 1369, 1370, 475, 476, 477, 478, 479, 480, 483,
	1402, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 1380, 500, 502,
	503, 1386, 687, 1381, 858, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 1382, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 3257, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 1373, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 1383, 604, 605, 1374, 607,
	608, 861, 610, 611, 612, 613, 614, 0, 734, 615,
	1384, 616, 1385, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 1390, 1391, 1394, 1392, 1393, 1395, 1396, 1406, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	0, 0, 0, 1378, 0, 0, 0, 0, 0, 837,
	0, 1343, 823, 0, 1348, 1349, 1338, 809, 1328, 0,
	0, 0, 3259, 0, 0, 3255, 3256, 342, 0, 359,
	843, 0, 407, 444, 1333, 0, 1321, 504, 0, 557,
	561, 0, 0, 1353, 0, 1325, 0, 415, 1346, 0,
	0, 0, 1347, 0, 1345, 626, 0, 0, 0, 0,
	347, 1422, 649, 721, 0, 0, 0, 1339, 0, 0,
	0, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	852, 849, 853, 859, 847, 857, 844, 855, 0, 548,
	482, 699, 575, 354, 399, 386, 428, 470, 582, 0,
	0, 460, 630, 395, 484, 0, 375, 517, 1375, 606,
	481, 0, 589, 609, 0, 501, 380, 540, 596, 597,
	841, 846, 0, 862, 0, 5956, 385, 506, 367, 514,
	711, 677, 569, 527, 525, 0, 492, 549, 706, 1334,
	0, 414, 0, 409, 505, 645, 373, 624, 543, 510,
	464, 572, 601, 411, 396, 397, 440, 542, 430, 382,
	635, 1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404, 1400,
	431, 1399, 0, 643, 1408, 1419, 1416, 1421, 1407, 1420,
	1414, 1078, 690, 1411, 1410, 1424, 1417, 1418, 636, 1423,
	1362, 1415, 1413, 1412, 1409, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 343, 345, 0, 344,
	346, 348, 349, 350, 840, 351, 352, 353, 356, 357,
	358, 360, 719, 361, 362, 363, 364, 365, 366, 1387,
	1365, 368, 369, 370, 371, 372, 374, 376, 720, 377,
	378, 379, 381, 383, 1376, 1366, 1371, 1377, 1367, 1368,
	1372, 387, 388, 389, 390, 391, 392, 0, 393, 394,
	398, 400, 401, 402, 403, 404, 405, 408, 0, 410,
	412, 0, 413, 416, 0, 417, 418, 419, 420, 421,
	422, 423, 424, 1379, 425, 0, 426, 427, 429, 0,
	432, 433, 434, 435, 436, 0, 437, 1388, 1337, 438,
	439, 441, 442, 443, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 0, 457, 458, 459,
	461, 0, 462, 463, 466, 467, 468, 469, 0, 471,
	1389, 0, 472, 473, 474, 1369, 1370, 475, 476, 477,
	478, 479, 480, 483, 1402, 485, 486, 487, 488, 489,
	490, 491, 722, 493, 494, 495, 496, 497, 498, 499,
	683, 1380, 500, 502, 503, 1386, 687, 1381, 858, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 528, 529,
	530, 1382, 531, 532, 533, 534, 0, 535, 536, 537,
	538, 539, 541, 544, 545, 546, 547, 0, 550, 551,
	552, 553, 554, 555, 556, 558, 559, 560, 562, 563,
	564, 723, 565, 566, 567, 568, 1340, 570, 571, 724,
	573, 574, 576, 577, 578, 579, 580, 581, 733, 1373,
	583, 693, 584, 585, 586, 587, 588, 0, 590, 591,
	592, 593, 594, 595, 598, 599, 600, 602, 603, 1383,
	604, 605, 1374, 607, 608, 861, 610, 611, 612, 613,
	614, 0, 734, 615, 1384, 616, 1385, 617, 618, 619,
	620, 621, 5955, 623, 625, 0, 1324, 627, 628, 629,
	631, 632, 633, 634, 637, 638, 639, 640, 641, 0,
	642, 644, 646, 725, 701, 1390, 1391, 1394, 1392, 1393,
	1395, 1396, 1406, 647, 648, 664, 515, 509, 465, 507,
	508, 512, 513, 516, 0, 0, 0, 1378, 0, 0,
	0, 0, 0, 837, 0, 1343, 823, 0, 1348, 1349,
	0, 809, 1328, 0, 0, 0, 1329, 0, 0, 1318,
	1319, 342, 0, 359, 843, 0, 407, 444, 1333, 0,
	0, 504, 0, 557, 561, 0, 650, 1353, 0, 0,
	0, 415, 1346, 848, 0, 854, 1347, 860, 1345, 626,
	0, 850, 851, 856, 347, 1422, 649, 721, 0, 0,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 852, 849, 853, 859, 847, 857,
	844, 855, 0, 548, 482, 699, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 0,
	375, 517, 1375, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 841, 846, 0, 862, 0, 384,
	385, 506, 367, 514, 711, 677, 569, 527, 525, 0,
	492, 549, 706, 1334, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 1403, 1405, 1401, 1397, 1398,
	1363, 1364, 1404, 1400, 431, 1399, 0, 643, 1408, 1419,
	1416, 1421, 1407, 1420, 1414, 1078, 690, 1411, 1410, 1424,
	1417, 1418, 636, 1423, 1362, 1415, 1413, 1412, 1409, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 840, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 1387, 1365, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 1376, 1366,
	1371, 1377, 1367, 1368, 1372, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 1379, 425, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 1388, 1337, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 0, 471, 1389, 0, 472, 473, 474, 1369,
	1370, 475, 476, 477, 478, 479, 480, 483, 1402, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 683, 1380, 500, 502, 503, 1386,
	687, 1381, 858, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 1382, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	3403, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 1373, 583, 693, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 1383, 604, 605, 1374, 607, 608, 861,
	610, 611, 612, 613, 614, 0, 734, 615, 1384, 616,
	1385, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	0, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 701, 1390,
	1391, 1394, 1392, 1393, 1395, 1396, 1406, 647, 648, 664,
	515, 509, 465, 507, 508, 512, 513, 516, 0, 0,
	0, 1378, 0, 837, 0, 1343, 823, 0, 1348, 1349,
	0, 809, 1328, 0, 0, 0, 0, 0, 0, 0,
	3259, 342, 0, 359, 843, 0, 407, 444, 1333, 0,
	0, 504, 0, 557, 561, 0, 650, 1353, 0, 0,
	0, 415, 1346, 848, 0, 854, 1347, 860, 1345, 626,
	0, 850, 851, 856, 347, 1422, 649, 721, 0, 0,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 852, 849, 853, 859, 847, 857,
	844, 855, 0, 548, 482, 699, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 0,
	375, 517, 1375, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 841, 846, 0, 862, 0, 384,
	385, 506, 367, 514, 711, 677, 569, 527, 525, 0,
	492, 549, 4843, 1334, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 1403, 1405, 1401, 1397, 1398,
	1363, 1364, 1404, 1400, 431, 1399, 0, 643, 1408, 1419,
	1416, 1421, 1407, 1420, 1414, 1078, 690, 1411, 1410, 1424,
	1417, 1418, 636, 1423, 1362, 1415, 1413, 1412, 1409, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 840, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 1387, 1365, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 1376, 1366,
	1371, 1377, 1367, 1368, 1372, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 1379, 425, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 1388, 1337, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 0, 471, 1389, 0, 472, 473, 474, 1369,
	1370, 475, 476, 477, 478, 479, 480, 483, 1402, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 683, 1380, 500, 502, 503, 1386,
	687, 1381, 858, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 1382, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	3403, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 1373, 583, 693, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 1383, 604, 605, 1374, 607, 608, 861,
	610, 611, 612, 613, 614, 0, 734, 615, 1384, 616,
	1385, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	0, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 701, 1390,
	1391, 1394, 1392, 1393, 1395, 1396, 1406, 647, 648, 664,
	515, 509, 465, 507, 508, 512, 513, 516, 0, 0,
	0, 1378, 0, 837, 0, 1343, 823, 0, 1348, 1349,
	0, 809, 1328, 0, 0, 0, 0, 0, 0, 0,
	3259, 342, 0, 359, 843, 0, 407, 444, 1333, 0,
	0, 504, 0, 557, 561, 0, 650, 1353, 0, 0,
	0, 415, 1346, 848, 0, 854, 1347, 860, 1345, 626,
	0, 850, 851, 856, 347, 1422, 649, 721, 0, 0,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 4785,
	0, 0, 0, 0, 852, 849, 853, 859, 847, 857,
	844, 855, 0, 548, 482, 699, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 0,
	375, 517, 1375, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 841, 846, 0, 862, 0, 384,
	385, 506, 367, 514, 711, 677, 569, 527, 525, 0,
	492, 549, 706, 1334, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 1403, 1405, 1401, 1397, 1398,
	1363, 1364, 1404, 1400, 431, 1399, 0, 643, 1408, 1419,
	1416, 1421, 1407, 1420, 1414, 1078, 690, 1411, 1410, 1424,
	1417, 1418, 636, 1423, 1362, 1415, 1413, 1412, 1409, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 840, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 1387, 1365, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 1376, 1366,
	1371, 1377, 1367, 1368, 1372, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 1379, 425, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 1388, 1337, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 0, 471, 1389, 0, 472, 473, 474, 1369,
	1370, 475, 476, 477, 478, 479, 480, 483, 1402, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 683, 1380, 500, 502, 503, 1386,
	687, 1381, 858, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 1382, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	3403, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 1373, 583, 693, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 1383, 604, 605, 1374, 607, 608, 861,
	610, 611, 612, 613, 614, 0, 734, 615, 1384, 616,
	1385, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	0, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 701, 1390,
	1391, 1394, 1392, 1393, 1395, 1396, 1406, 647, 648, 664,
	515, 509, 465, 507, 508, 512, 513, 516, 837, 0,
	0, 1378, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 342, 0, 359, 843,
	3259, 407, 444, 659, 0, 0, 504, 0, 557, 561,
	186, 650, 0, 0, 0, 0, 415, 0, 848, 0,
	854, 0, 860, 0, 626, 0, 850, 851, 856, 347,
	735, 649, 721, 0, 0, 0, 511, 183, 0, 0,
	883, 184, 0, 0, 355, 0, 0, 0, 0, 852,
	849, 853, 859, 847, 857, 844, 855, 0, 548, 482,
	1205, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 1375, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 841,
	846, 0, 862, 0, 384, 385, 506, 367, 514, 3489,
	3490, 3488, 527, 525, 0, 492, 549, 706, 0, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404, 1400, 431,
	3495, 0, 643, 652, 686, 666, 694, 651, 691, 661,
	406, 690, 655, 654, 700, 681, 682, 636, 696, 667,
	665, 658, 657, 653, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 840, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 1387, 1365,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 1376, 1366, 1371, 1377, 1367, 1368, 1372,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 1379, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 1388, 663, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 3481, 471, 1389,
	0, 472, 473, 474, 1369, 1370, 475, 476, 477, 478,
	479, 480, 483, 1402, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	1380, 500, 502, 503, 1386, 687, 1381, 858, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	1382, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 692, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 1373, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 1383, 604,
	605, 1374, 607, 608, 861, 610, 611, 612, 613, 614,
	0, 734, 615, 1384, 616, 1385, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 0, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 1390, 1391, 1394, 1392, 1393, 1395,
	1396, 1406, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 0, 0, 0, 1378, 0, 970, 0,
	1741, 823, 187, 0, 0, 0, 809, 0, 0, 0,
	0, 0, 0, 0, 0, 3483, 342, 0, 359, 843,
	0, 407, 444, 659, 0, 0, 504, 0, 557, 561,
	0, 650, 0, 0, 5828, 0, 415, 1853, 848, 0,
	854, 0, 860, 1852, 626, 0, 850, 851, 856, 347,
	735, 649, 721, 0, 0, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 1854, 852,
	849, 853, 859, 847, 857, 844, 855, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 0, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 841,
	846, 0, 862, 0, 384, 385, 506, 367, 514, 711,
	677, 569, 527, 525, 0, 492, 549, 706, 0, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	674, 678, 676, 672, 669, 673, 670, 671, 675, 431,
	668, 0, 643, 652, 686, 666, 694, 651, 691, 661,
	406, 690, 655, 654, 700, 681, 682, 636, 696, 667,
	665, 658, 657, 653, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 840, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 656, 842,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 0, 0, 0, 845, 0, 0, 0,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 660, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 662, 663, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 679,
	0, 472, 473, 474, 0, 0, 475, 476, 477, 478,
	479, 480, 483, 680, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	684, 500, 502, 503, 685, 687, 688, 858, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	689, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 692, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 0, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 695, 604,
	605, 0, 607, 608, 861, 610, 611, 612, 613, 614,
	0, 734, 615, 697, 616, 698, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 0, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 702, 703, 704, 705, 707, 708,
	709, 710, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 837, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 5829, 0, 0, 1742, 1743,
	5827, 342, 0, 359, 843, 0, 407, 444, 659, 0,
	0, 504, 0, 557, 561, 0, 650, 0, 0, 0,
	0, 415, 0, 848, 0, 854, 0, 860, 0, 626,
	0, 850, 851, 856, 347, 735, 649, 721, 0, 0,
	0, 511, 0, 0, 0, 883, 0, 0, 0, 355,
	0, 0, 0, 0, 852, 849, 853, 859, 847, 857,
	844, 855, 0, 548, 482, 699, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 0,
	375, 517, 1375, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 841, 846, 0, 862, 0, 384,
	385, 506, 367, 514, 3489, 3490, 3488, 527, 525, 0,
	492, 549, 706, 0, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 1403, 1405, 1401, 1397, 1398,
	1363, 1364, 1404, 1400, 431, 3495, 0, 643, 652, 686,
	666, 694, 651, 691, 661, 406, 690, 655, 654, 700,
	681, 682, 636, 696, 667, 665, 658, 657, 653, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 840, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 1387, 1365, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 1376, 1366,
	1371, 1377, 1367, 1368, 1372, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 1379, 425, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 1388, 663, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 3481, 471, 1389, 0, 472, 473, 474, 1369,
	1370, 475, 476, 477, 478, 479, 480, 483, 1402, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 683, 1380, 500, 502, 503, 1386,
	687, 1381, 858, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 1382, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	692, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 1373, 583, 693, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 1383, 604, 605, 1374, 607, 608, 861,
	610, 611, 612, 613, 614, 0, 734, 615, 1384, 616,
	1385, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	0, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 701, 1390,
	1391, 1394, 1392, 1393, 1395, 1396, 1406, 647, 648, 664,
	515, 509, 465, 507, 508, 512, 513, 516, 837, 0,
	0, 1378, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 342, 0, 359, 843,
	3483, 407, 444, 659, 0, 0, 504, 0, 557, 561,
	0, 650, 0, 0, 0, 0, 415, 0, 848, 0,
	854, 0, 860, 0, 626, 0, 850, 851, 856, 347,
	735, 649, 721, 0, 0, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 852,
	849, 853, 859, 847, 857, 844, 855, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 1375, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 841,
	846, 0, 862, 0, 384, 385, 506, 367, 514, 711,
	677, 569, 527, 525, 0, 492, 549, 706, 0, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404, 1400, 431,
	3495, 0, 643, 652, 686, 666, 694, 651, 691, 661,
	406, 690, 655, 654, 700, 681, 682, 636, 696, 667,
	665, 658, 657, 653, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 840, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 1387, 1365,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 1376, 1366, 1371, 1377, 1367, 1368, 1372,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 1379, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 1388, 663, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 1389,
	0, 472, 473, 474, 1369, 1370, 475, 476, 477, 478,
	479, 480, 483, 1402, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	1380, 500, 502, 503, 1386, 687, 1381, 858, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	1382, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 692, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 1373, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 1383, 604,
	605, 1374, 607, 608, 861, 610, 611, 612, 613, 614,
	0, 734, 615, 1384, 616, 1385, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 0, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 1390, 1391, 1394, 1392, 1393, 1395,
	1396, 1406, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 837, 0, 0, 1378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 359, 843, 5004, 407, 444, 659, 0,
	0, 504, 0, 557, 561, 0, 650, 0, 0, 0,
	0, 415, 0, 848, 0, 854, 0, 860, 0, 626,
	0, 850, 851, 856, 347, 735, 649, 721, 0, 0,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 852, 849, 853, 859, 847, 857,
	844, 855, 0, 548, 482, 699, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 0,
	375, 517, 1375, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 841, 846, 0, 862, 0, 384,
	385, 506, 367, 514, 711, 677, 569, 527, 525, 0,
	492, 549, 706, 0, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 1403, 1405, 1401, 1397, 1398,
	1363, 1364, 1404, 1400, 431, 3495, 0, 643, 652, 686,
	666, 694, 651, 691, 661, 406, 690, 655, 654, 700,
	681, 682, 636, 696, 667, 665, 658, 657, 653, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 840, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 1387, 1365, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 1376, 1366,
	1371, 1377, 1367, 1368, 1372, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 1379, 425, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 1388, 663, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 0, 471, 1389, 0, 472, 473, 474, 1369,
	1370, 475, 476, 477, 478, 479, 480, 483, 1402, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 683, 1380, 500, 502, 503, 1386,
	687, 1381, 858, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 1382, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	692, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 1373, 583, 693, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 1383, 604, 605, 1374, 607, 608, 861,
	610, 611, 612, 613, 614, 0, 734, 615, 1384, 616,
	1385, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	0, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 701, 1390,
	1391, 1394, 1392, 1393, 1395, 1396, 1406, 647, 648, 664,
	515, 509, 465, 507, 508, 512, 513, 516, 837, 0,
	0, 1378, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 342, 0, 359, 843,
	6022, 407, 444, 659, 0, 0, 504, 0, 557, 561,
	0, 650, 0, 0, 0, 0, 415, 0, 848, 0,
	854, 0, 860, 0, 626, 0, 850, 851, 856, 347,
	735, 649, 721, 0, 0, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 852,
	849, 853, 859, 847, 857, 844, 855, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 1375, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 841,
	846, 0, 862, 0, 384, 385, 506, 367, 514, 711,
	677, 569, 527, 525, 0, 492, 549, 706, 0, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	1403, 1405, 1401, 1397, 1398, 1363, 1364, 1404, 1400, 431,
	3495, 0, 643, 652, 686, 666, 694, 651, 691, 661,
	406, 690, 655, 654, 700, 681, 682, 636, 696, 667,
	665, 658, 657, 653, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 840, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 1387, 1365,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 1376, 1366, 1371, 1377, 1367, 1368, 1372,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 1379, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 1388, 663, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 1389,
	0, 472, 473, 474, 1369, 1370, 475, 476, 477, 478,
	479, 480, 483, 1402, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	1380, 500, 502, 503, 1386, 687, 1381, 858, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	1382, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 692, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 1373, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 1383, 604,
	605, 1374, 607, 608, 861, 610, 611, 612, 613, 614,
	0, 734, 615, 1384, 616, 1385, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 0, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 1390, 1391, 1394, 1392, 1393, 1395,
	1396, 1406, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 837, 0, 0, 1378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 359, 843, 3628, 407, 444, 659, 0,
	0, 504, 0, 557, 561, 0, 650, 0, 0, 0,
	0, 415, 0, 848, 0, 854, 0, 860, 0, 626,
	0, 850, 851, 856, 347, 735, 649, 721, 0, 0,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 852, 849, 853, 859, 847, 857,
	844, 855, 0, 548, 482, 699, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 0,
	375, 517, 1375, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 841, 846, 0, 862, 0, 384,
	385, 506, 367, 514, 3489, 3490, 3488, 527, 525, 0,
	492, 549, 706, 0, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 1403, 1405, 1401, 1397, 1398,
	1363, 1364, 1404, 1400, 431, 3495, 0, 643, 652, 686,
	666, 694, 651, 691, 661, 406, 690, 655, 654, 700,
	681, 682, 636, 696, 667, 665, 658, 657, 653, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 840, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 1387, 1365, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 1376, 1366,
	1371, 1377, 1367, 1368, 1372, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 1379, 425, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 1388, 663, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 0, 471, 1389, 0, 472, 473, 474, 1369,
	1370, 475, 476, 477, 478, 479, 480, 483, 1402, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 683, 1380, 500, 502, 503, 1386,
	687, 1381, 858, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 1382, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	692, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 1373, 583, 693, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 1383, 604, 605, 1374, 607, 608, 861,
	610, 611, 612, 613, 614, 0, 734, 615, 1384, 616,
	1385, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	0, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 701, 1390,
	1391, 1394, 1392, 1393, 1395, 1396, 1406, 647, 648, 664,
	515, 509, 465, 507, 508, 512, 513, 516, 0, 0,
	0, 1378, 0, 970, 0, 1741, 823, 0, 0, 0,
	0, 809, 0, 0, 0, 0, 0, 0, 0, 0,
	180, 342, 0, 359, 843, 0, 407, 444, 659, 0,
	0, 504, 0, 557, 561, 0, 650, 0, 0, 1857,
	0, 415, 1853, 848, 0, 854, 0, 860, 1852, 626,
	0, 850, 851, 856, 347, 735, 649, 721, 0, 0,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 1854, 852, 849, 853, 859, 847, 857,
	844, 855, 0, 548, 482, 699, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 0,
	375, 517, 0, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 841, 846, 0, 862, 0, 384,
	385, 506, 367, 514, 711, 677, 569, 527, 525, 0,
	492, 549, 706, 0, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 674, 678, 676, 672, 669,
	673, 670, 671, 675, 431, 668, 0, 643, 652, 686,
	666, 694, 651, 691, 661, 406, 690, 655, 654, 700,
	681, 682, 636, 696, 667, 665, 658, 657, 653, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 840, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 656, 842, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 0, 0,
	0, 845, 0, 0, 0, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 660, 425, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 662, 663, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 0, 471, 679, 0, 472, 473, 474, 0,
	0, 475, 476, 477, 478, 479, 480, 483, 680, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 683, 684, 500, 502, 503, 685,
	687, 688, 858, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 689, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	692, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 0, 583, 693, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 695, 604, 605, 0, 607, 608, 861,
	610, 611, 612, 613, 614, 0, 734, 615, 697, 616,
	698, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	0, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 701, 702,
	703, 704, 705, 707, 708, 709, 710, 647, 648, 664,
	515, 509, 465, 507, 508, 512, 513, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 970, 0, 1741,
	823, 0, 0, 0, 0, 809, 0, 0, 0, 0,
	0, 0, 0, 1742, 1743, 342, 0, 359, 843, 0,
	407, 444, 659, 0, 0, 504, 0, 557, 561, 0,
	650, 0, 0, 1848, 0, 415, 1853, 848, 0, 854,
	0, 860, 1852, 626, 0, 850, 851, 856, 347, 735,
	649, 721, 0, 0, 0, 511, 0, 0, 0, 0,
	0, 0, 0, 355, 0, 0, 0, 1854, 852, 849,
	853, 859, 847, 857, 844, 855, 0, 548, 482, 699,
	575, 354, 399, 386, 428, 470, 582, 0, 0, 460,
	630, 395, 484, 0, 375, 517, 0, 606, 481, 0,
	589, 609, 0, 501, 380, 540, 596, 597, 841, 846,
	0, 862, 0, 384, 385, 506, 367, 514, 711, 677,
	569, 527, 525, 0, 492, 549, 706, 0, 0, 414,
	0, 409, 505, 645, 373, 624, 543, 510, 464, 572,
	601, 411, 396, 397, 440, 542, 430, 382, 635, 674,
	678, 676, 672, 669, 673, 670, 671, 675, 431, 668,
	0, 643, 652, 686, 666, 694, 651, 691, 661, 406,
	690, 655, 654, 700, 681, 682, 636, 696, 667, 665,
	658, 657, 653, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 340, 341, 343, 345, 0, 344, 346, 348,
	349, 350, 840, 351, 352, 353, 356, 357, 358, 360,
	719, 361, 362, 363, 364, 365, 366, 656, 842, 368,
	369, 370, 371, 372, 374, 376, 720, 377, 378, 379,
	381, 383, 0, 0, 0, 845, 0, 0, 0, 387,
	388, 389, 390, 391, 392, 0, 393, 394, 398, 400,
	401, 402, 403, 404, 405, 408, 0, 410, 412, 0,
	413, 416, 0, 417, 418, 419, 420, 421, 422, 423,
	424, 660, 425, 0, 426, 427, 429, 0, 432, 433,
	434, 435, 436, 0, 437, 662, 663, 438, 439, 441,
	442, 443, 445, 446, 447, 448, 449, 450, 451, 452,
	453, 454, 455, 456, 0, 457, 458, 459, 461, 0,
	462, 463, 466, 467, 468, 469, 0, 471, 679, 0,
	472, 473, 474, 0, 0, 475, 476, 477, 478, 479,
	480, 483, 680, 485, 486, 487, 488, 489, 490, 491,
	722, 493, 494, 495, 496, 497, 498, 499, 683, 684,
	500, 502, 503, 685, 687, 688, 858, 518, 519, 520,
	521, 522, 523, 524, 526, 0, 528, 529, 530, 689,
	531, 532, 533, 534, 0, 535, 536, 537, 538, 539,
	541, 544, 545, 546, 547, 0, 550, 551, 552, 553,
	554, 555, 556, 558, 559, 560, 562, 563, 564, 723,
	565, 566, 567, 568, 692, 570, 571, 724, 573, 574,
	576, 577, 578, 579, 580, 581, 733, 0, 583, 693,
	584, 585, 586, 587, 588, 0, 590, 591, 592, 593,
	594, 595, 598, 599, 600, 602, 603, 695, 604, 605,
	0, 607, 608, 861, 610, 611, 612, 613, 614, 0,
	734, 615, 697, 616, 698, 617, 618, 619, 620, 621,
	622, 623, 625, 0, 0, 627, 628, 629, 631, 632,
	633, 634, 637, 638, 639, 640, 641, 0, 642, 644,
	646, 725, 701, 702, 703, 704, 705, 707, 708, 709,
	710, 647, 648, 664, 515, 509, 465, 507, 508, 512,
	513, 516, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 970, 0, 1741, 823, 0, 0, 0, 0, 809,
	0, 0, 0, 0, 0, 0, 0, 1742, 1743, 342,
	0, 359, 843, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	1853, 848, 0, 854, 0, 860, 1852, 626, 0, 850,
	851, 856, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 1854, 852, 849, 853, 859, 847, 857, 844, 855,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 841, 846, 0, 862, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 840, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 842, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 845,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	858, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 861, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 970, 0, 0, 823, 0,
	0, 0, 0, 809, 0, 0, 0, 0, 0, 0,
	0, 1742, 1743, 342, 0, 359, 843, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 3775, 0, 415, 1853, 848, 0, 854, 0, 860,
	1852, 626, 0, 850, 851, 856, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 1854, 852, 849, 853, 859,
	847, 857, 844, 855, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 841, 846, 0, 862,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	840, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 842, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 845, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 858, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 861, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 970,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 807, 808, 342, 0, 359,
	843, 0, 407, 444, 659, 0, 0, 504, 0, 557,
	561, 186, 650, 0, 0, 0, 0, 415, 0, 848,
	0, 854, 0, 860, 0, 626, 0, 850, 851, 856,
	347, 735, 649, 721, 0, 0, 0, 511, 183, 0,
	0, 0, 184, 0, 0, 355, 0, 0, 0, 0,
	852, 849, 853, 859, 847, 857, 844, 855, 0, 548,
	482, 1205, 575, 354, 399, 386, 428, 470, 582, 0,
	0, 460, 630, 395, 484, 0, 375, 517, 0, 606,
	481, 0, 589, 609, 0, 501, 380, 540, 596, 597,
	841, 846, 0, 862, 181, 384, 385, 506, 367, 514,
	711, 677, 569, 527, 525, 0, 492, 549, 706, 0,
	0, 414, 0, 409, 505, 645, 373, 624, 543, 510,
	464, 572, 601, 411, 396, 397, 440, 542, 430, 382,
	635, 674, 678, 676, 672, 669, 673, 670, 671, 675,
	431, 668, 0, 643, 652, 686, 666, 694, 651, 691,
	661, 406, 690, 655, 654, 700, 681, 682, 636, 696,
	667, 665, 658, 657, 653, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 343, 345, 182, 344,
	346, 348, 349, 350, 840, 351, 352, 353, 356, 357,
	358, 360, 719, 361, 362, 363, 364, 365, 366, 656,
	842, 368, 369, 370, 371, 372, 374, 376, 720, 377,
	378, 379, 381, 383, 0, 0, 0, 845, 0, 0,
	0, 387, 388, 389, 390, 391, 392, 0, 393, 394,
	398, 400, 401, 402, 403, 404, 405, 408, 0, 410,
	412, 0, 413, 416, 0, 417, 418, 419, 420, 421,
	422, 423, 424, 660, 425, 0, 426, 427, 429, 0,
	432, 433, 434, 435, 436, 0, 437, 662, 663, 438,
	439, 441, 442, 443, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 0, 457, 458, 459,
	461, 0, 462, 463, 466, 467, 468, 469, 0, 471,
	679, 0, 472, 473, 474, 0, 0, 475, 476, 477,
	478, 479, 480, 483, 680, 485, 486, 487, 488, 489,
	490, 491, 722, 493, 494, 495, 496, 497, 498, 499,
	683, 684, 500, 502, 503, 685, 687, 688, 858, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 528, 529,
	530, 689, 531, 532, 533, 534, 0, 535, 536, 537,
	538, 539, 541, 544, 545, 546, 547, 0, 550, 551,
	552, 553, 554, 555, 556, 558, 559, 560, 562, 563,
	564, 723, 565, 566, 567, 568, 692, 570, 571, 724,
	573, 574, 576, 577, 578, 579, 580, 581, 733, 0,
	583, 693, 584, 585, 586, 587, 588, 0, 590, 591,
	592, 593, 594, 595, 598, 599, 600, 602, 603, 695,
	604, 605, 0, 607, 608, 861, 610, 611, 612, 613,
	614, 0, 734, 615, 697, 616, 698, 617, 618, 619,
	620, 621, 622, 623, 625, 0, 0, 627, 628, 629,
	631, 632, 633, 634, 637, 638, 639, 640, 641, 0,
	642, 644, 646, 725, 701, 702, 703, 704, 705, 707,
	708, 709, 710, 647, 648, 664, 515, 509, 465, 507,
	508, 512, 513, 516, 837, 0, 0, 0, 0, 0,
	1208, 0, 0, 187, 0, 0, 0, 0, 0, 0,
	0, 0, 342, 0, 359, 843, 180, 407, 444, 659,
	0, 0, 504, 0, 557, 561, 0, 650, 0, 0,
	0, 0, 415, 0, 848, 0, 854, 0, 860, 0,
	626, 0, 850, 851, 856, 347, 735, 649, 721, 0,
	0, 0, 511, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 852, 849, 853, 859, 847,
	857, 844, 855, 0, 548, 482, 699, 575, 354, 399,
	386, 428, 470, 582, 0, 0, 460, 630, 395, 484,
	0, 375, 517, 0, 606, 481, 0, 589, 609, 0,
	501, 380, 540, 596, 597, 841, 846, 0, 862, 0,
	384, 385, 506, 367, 514, 711, 677, 569, 527, 525,
	0, 492, 549, 706, 0, 0, 414, 0, 409, 505,
	645, 373, 624, 543, 510, 464, 572, 601, 411, 396,
	397, 440, 542, 430, 382, 635, 674, 678, 676, 672,
	669, 673, 670, 671, 675, 431, 668, 0, 643, 652,
	686, 666, 694, 651, 691, 661, 406, 690, 655, 654,
	700, 681, 682, 636, 696, 667, 665, 658, 657, 653,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 343, 345, 0, 344, 346, 348, 349, 350, 840,
	351, 352, 353, 356, 357, 358, 360, 719, 361, 362,
	363, 364, 365, 366, 656, 842, 368, 369, 370, 371,
	372, 374, 376, 720, 377, 378, 379, 381, 383, 0,
	0, 0, 845, 0, 0, 0, 387, 388, 389, 390,
	391, 392, 0, 393, 394, 398, 400, 401, 402, 403,
	404, 405, 408, 0, 410, 412, 0, 413, 416, 0,
	417, 418, 419, 420, 421, 422, 423, 424, 660, 425,
	0, 426, 427, 429, 0, 432, 433, 434, 435, 436,
	0, 437, 662, 663, 438, 439, 441, 442, 443, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 0, 457, 458, 459, 461, 0, 462, 463, 466,
	467, 468, 469, 0, 471, 679, 0, 472, 473, 474,
	0, 0, 475, 476, 477, 478, 479, 480, 483, 680,
	485, 486, 487, 488, 489, 490, 491, 722, 493, 494,
	495, 496, 497, 498, 499, 683, 684, 500, 502, 503,
	685, 687, 688, 858, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 528, 529, 530, 689, 531, 532, 533,
	534, 0, 535, 536, 537, 538, 539, 541, 544, 545,
	546, 547, 0, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 562, 563, 564, 723, 565, 566, 567,
	568, 692, 570, 571, 724, 573, 574, 576, 577, 578,
	579, 580, 581, 733, 0, 583, 693, 584, 585, 586,
	587, 588, 0, 590, 591, 592, 593, 594, 595, 598,
	599, 600, 602, 603, 695, 604, 605, 0, 607, 608,
	861, 610, 611, 612, 613, 614, 0, 734, 615, 697,
	616, 698, 617, 618, 619, 620, 621, 622, 623, 625,
	0, 0, 627, 628, 629, 631, 632, 633, 634, 637,
	638, 639, 640, 641, 0, 642, 644, 646, 725, 701,
	702, 703, 704, 705, 707, 708, 709, 710, 647, 648,
	664, 515, 509, 465, 507, 508, 512, 513, 516, 329,
	0, 0, 0, 0, 0, 0, 939, 0, 0, 0,
	0, 0, 0, 950, 951, 952, 0, 342, 0, 359,
	0, 5724, 407, 444, 659, 0, 0, 504, 0, 557,
	561, 0, 650, 0, 0, 0, 0, 415, 0, 0,
	0, 0, 0, 0, 0, 626, 0, 0, 0, 0,
	347, 735, 649, 721, 0, 0, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	482, 699, 575, 354, 399, 386, 428, 470, 582, 0,
	0, 460, 630, 395, 484, 0, 375, 517, 0, 606,
	481, 0, 589, 609, 0, 501, 380, 540, 596, 597,
	0, 0, 0, 0, 0, 384, 385, 506, 367, 514,
	711, 677, 569, 527, 525, 0, 492, 549, 706, 0,
	0, 414, 0, 409, 505, 645, 373, 624, 543, 510,
	464, 572, 601, 411, 396, 397, 440, 542, 430, 382,
	635, 674, 678, 676, 672, 669, 673, 670, 671, 675,
	431, 668, 0, 643, 652, 686, 666, 694, 651, 691,
	661, 406, 690, 655, 654, 700, 681, 682, 636, 696,
	667, 665, 658, 657, 653, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 343, 345, 0, 344,
	346, 348, 349, 350, 0, 351, 352, 353, 356, 357,
	358, 360, 719, 361, 362, 363, 364, 365, 366, 656,
	0, 368, 369, 370, 371, 372, 374, 376, 720, 377,
	378, 379, 381, 383, 0, 0, 0, 0, 0, 0,
	0, 387, 388, 389, 390, 391, 392, 0, 393, 394,
	398, 400, 401, 402, 403, 404, 405, 408, 0, 410,
	412, 0, 413, 416, 0, 417, 418, 419, 420, 421,
	422, 423, 424, 660, 425, 0, 426, 427, 429, 0,
	432, 433, 434, 435, 436, 0, 437, 662, 663, 438,
	439, 441, 442, 443, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 0, 457, 458, 459,
	461, 0, 462, 463, 466, 467, 468, 469, 0, 471,
	679, 0, 472, 473, 474, 0, 0, 475, 476, 477,
	478, 479, 480, 483, 680, 485, 486, 487, 488, 489,
	490, 491, 722, 493, 494, 495, 496, 497, 498, 499,
	683, 684, 500, 502, 503, 685, 687, 688, 0, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 528, 529,
	530, 689, 531, 532, 533, 534, 0, 535, 536, 537,
	538, 539, 541, 544, 545, 546, 547, 0, 550, 551,
	552, 553, 554, 555, 556, 558, 559, 560, 562, 563,
	564, 723, 565, 566, 567, 568, 692, 570, 571, 724,
	573, 574, 576, 577, 578, 579, 580, 581, 733, 0,
	583, 693, 584, 585, 586, 587, 588, 0, 590, 591,
	592, 593, 594, 595, 598, 599, 600, 602, 603, 695,
	604, 605, 0, 607, 608, 0, 610, 611, 612, 613,
	614, 0, 734, 615, 697, 616, 698, 617, 618, 619,
	620, 621, 622, 623, 625, 0, 0, 627, 628, 629,
	631, 632, 633, 634, 637, 638, 639, 640, 641, 0,
	642, 644, 646, 725, 701, 702, 703, 704, 705, 707,
	708, 709, 710, 647, 648, 664, 515, 509, 465, 507,
	508, 512, 513, 516, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	947, 948, 949, 0, 0, 0, 0, 0, 329, 941,
	942, 943, 944, 945, 946, 939, 0, 0, 0, 0,
	0, 0, 950, 951, 952, 0, 342, 0, 359, 0,
	0, 407, 444, 659, 0, 0, 504, 0, 557, 561,
	0, 650, 0, 0, 0, 0, 415, 0, 0, 0,
	0, 0, 0, 0, 626, 0, 0, 0, 0, 347,
	735, 649, 721, 0, 0, 0, 5699, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 548, 482,
	699, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 0, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 0,
	0, 0, 0, 0, 384, 385, 506, 367, 514, 711,
	677, 569, 527, 525, 0, 492, 549, 706, 0, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	674, 678, 676, 672, 669, 673, 670, 671, 675, 431,
	668, 0, 643, 652, 686, 666, 694, 651, 691, 661,
	406, 690, 655, 654, 700, 681, 682, 636, 696, 667,
	665, 658, 657, 653, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 0, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 656, 0,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 0, 0, 0, 0, 0, 0, 0,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 660, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 662, 663, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 679,
	0, 472, 473, 474, 0, 0, 475, 476, 477, 478,
	479, 480, 483, 680, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 683,
	684, 500, 502, 503, 685, 687, 688, 0, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	689, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 692, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 0, 583,
	693, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 695, 604,
	605, 0, 607, 608, 0, 610, 611, 612, 613, 614,
	0, 734, 615, 697, 616, 698, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 0, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 701, 702, 703, 704, 705, 707, 708,
	709, 710, 647, 648, 664, 515, 509, 465, 507, 508,
	512, 513, 516, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 947,
	948, 949, 0, 0, 0, 0, 0, 329, 941, 942,
	943, 944, 945, 946, 939, 0, 0, 0, 0, 0,
	0, 950, 951, 952, 0, 342, 0, 359, 0, 0,
	407, 444, 659, 0, 0, 504, 0, 557, 561, 0,
	650, 0, 0, 0, 0, 415, 0, 0, 0, 0,
	0, 0, 0, 626, 0, 0, 0, 0, 347, 735,
	649, 721, 0, 0, 0, 511, 0, 0, 0, 0,
	0, 0, 0, 355, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 548, 482, 699,
	575, 354, 399, 386, 428, 470, 582, 0, 0, 460,
	630, 395, 484, 0, 375, 517, 0, 606, 481, 0,
	589, 609, 0, 501, 380, 540, 596, 597, 0, 0,
	0, 0, 0, 384, 385, 506, 367, 514, 711, 677,
	569, 527, 525, 0, 492, 549, 706, 0, 0, 414,
	0, 409, 505, 645, 373, 624, 543, 510, 464, 572,
	601, 411, 396, 397, 440, 542, 430, 382, 635, 674,
	678, 676, 672, 669, 673, 670, 671, 675, 431, 668,
	0, 643, 652, 686, 666, 694, 651, 691, 661, 406,
	690, 655, 654, 700, 681, 682, 636, 696, 667, 665,
	658, 657, 653, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 340, 341, 343, 345, 0, 344, 346, 348,
	349, 350, 0, 351, 352, 353, 356, 357, 358, 360,
	719, 361, 362, 363, 3895, 365, 366, 656, 0, 368,
	369, 370, 371, 372, 374, 376, 720, 377, 378, 379,
	381, 383, 0, 0, 0, 0, 0, 0, 0, 387,
	388, 389, 390, 391, 392, 0, 393, 394, 398, 400,
	401, 402, 403, 404, 405, 408, 0, 410, 412, 0,
	413, 416, 0, 417, 418, 419, 420, 421, 422, 423,
	424, 660, 3896, 0, 426, 427, 429, 0, 432, 433,
	434, 435, 436, 0, 437, 662, 663, 438, 439, 441,
	442, 443, 445, 446, 447, 448, 449, 450, 451, 452,
	453, 454, 455, 456, 0, 457, 458, 459, 461, 0,
	462, 463, 466, 467, 468, 469, 0, 471, 679, 0,
	472, 473, 474, 0, 0, 475, 476, 477, 478, 479,
	480, 483, 680, 485, 486, 487, 488, 489, 490, 491,
	722, 493, 494, 495, 496, 497, 498, 499, 683, 684,
	500, 502, 503, 685, 687, 688, 0, 518, 519, 520,
	521, 522, 523, 524, 526, 0, 528, 529, 530, 689,
	531, 532, 533, 534, 0, 535, 536, 537, 538, 539,
	541, 544, 545, 546, 547, 0, 550, 551, 552, 553,
	554, 555, 556, 558, 559, 560, 562, 563, 564, 723,
	565, 566, 567, 568, 692, 570, 571, 724, 573, 574,
	576, 577, 578, 579, 580, 581, 733, 0, 583, 693,
	584, 585, 586, 587, 588, 0, 590, 591, 592, 593,
	594, 595, 598, 599, 600, 602, 603, 695, 604, 605,
	0, 607, 608, 0, 610, 611, 612, 613, 614, 0,
	734, 615, 697, 616, 698, 617, 618, 619, 620, 621,
	622, 623, 625, 0, 0, 627, 628, 629, 631, 632,
	633, 634, 637, 638, 639, 640, 641, 0, 642, 644,
	646, 725, 701, 702, 703, 704, 705, 707, 708, 709,
	710, 647, 648, 664, 515, 509, 465, 507, 508, 512,
	513, 516, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 947, 948,
	949, 0, 0, 0, 0, 0, 329, 941, 942, 943,
	944, 945, 946, 939, 0, 0, 0, 0, 0, 0,
	950, 951, 952, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 1960, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 1961, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 947, 948, 949,
	0, 0, 0, 0, 0, 329, 941, 942, 943, 944,
	945, 946, 939, 0, 0, 0, 0, 0, 0, 950,
	951, 952, 0, 342, 0, 359, 0, 0, 407, 1108,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 1105, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	1106, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 947, 948, 949, 0,
	0, 0, 0, 0, 329, 941, 942, 943, 944, 945,
	946, 939, 0, 0, 0, 0, 0, 0, 950, 951,
	952, 0, 342, 0, 359, 0, 0, 407, 444, 659,
	0, 0, 504, 0, 557, 561, 0, 650, 0, 0,
	0, 0, 415, 0, 0, 0, 0, 0, 0, 0,
	626, 0, 0, 0, 0, 347, 735, 649, 721, 0,
	0, 0, 511, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 482, 699, 575, 354, 399,
	386, 428, 470, 582, 0, 0, 460, 630, 395, 484,
	0, 375, 517, 0, 606, 481, 0, 589, 609, 0,
	501, 380, 540, 596, 597, 0, 0, 0, 0, 0,
	384, 385, 506, 367, 514, 711, 677, 569, 527, 525,
	0, 492, 549, 706, 0, 0, 414, 0, 409, 505,
	645, 373, 624, 543, 510, 464, 572, 601, 411, 396,
	397, 440, 542, 430, 382, 635, 674, 678, 676, 672,
	669, 673, 670, 671, 675, 431, 668, 0, 643, 652,
	686, 666, 694, 651, 691, 661, 406, 690, 655, 654,
	700, 681, 682, 636, 696, 667, 665, 658, 657, 653,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 343, 345, 0, 344, 346, 348, 349, 350, 0,
	351, 352, 353, 356, 357, 358, 360, 719, 361, 362,
	363, 1021, 365, 366, 656, 0, 368, 369, 370, 371,
	372, 374, 376, 720, 377, 378, 379, 381, 383, 0,
	0, 0, 0, 0, 0, 0, 387, 388, 389, 390,
	391, 392, 0, 393, 394, 398, 400, 401, 402, 403,
	404, 405, 408, 0, 410, 412, 0, 413, 416, 0,
	417, 418, 419, 420, 421, 422, 423, 424, 660, 1022,
	0, 426, 427, 429, 0, 432, 433, 434, 435, 436,
	0, 437, 662, 663, 438, 439, 441, 442, 443, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 0, 457, 458, 459, 461, 0, 462, 463, 466,
	467, 468, 469, 0, 471, 679, 0, 472, 473, 474,
	0, 0, 475, 476, 477, 478, 479, 480, 483, 680,
	485, 486, 487, 488, 489, 490, 491, 722, 493, 494,
	495, 496, 497, 498, 499, 683, 684, 500, 502, 503,
	685, 687, 688, 0, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 528, 529, 530, 689, 531, 532, 533,
	534, 0, 535, 536, 537, 538, 539, 541, 544, 545,
	546, 547, 0, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 562, 563, 564, 723, 565, 566, 567,
	568, 692, 570, 571, 724, 573, 574, 576, 577, 578,
	579, 580, 581, 733, 0, 583, 693, 584, 585, 586,
	587, 588, 0, 590, 591, 592, 593, 594, 595, 598,
	599, 600, 602, 603, 695, 604, 605, 0, 607, 608,
	0, 610, 611, 612, 613, 614, 0, 734, 615, 697,
	616, 698, 617, 618, 619, 620, 621, 622, 623, 625,
	0, 0, 627, 628, 629, 631, 632, 633, 634, 637,
	638, 639, 640, 641, 0, 642, 644, 646, 725, 701,
	702, 703, 704, 705, 707, 708, 709, 710, 647, 648,
	664, 515, 509, 465, 507, 508, 512, 513, 516, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 947, 948, 949, 0, 0,
	0, 0, 0, 329, 941, 942, 943, 944, 945, 946,
	939, 0, 0, 0, 0, 0, 0, 950, 951, 952,
	0, 342, 0, 359, 0, 0, 407, 444, 659, 0,
	0, 504, 0, 557, 561, 0, 650, 0, 0, 0,
	0, 415, 0, 0, 0, 0, 0, 0, 0, 626,
	0, 0, 0, 0, 347, 735, 649, 721, 0, 0,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 548, 482, 699, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 0,
	375, 517, 0, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 0, 0, 0, 0, 0, 384,
	385, 506, 367, 514, 711, 677, 569, 527, 525, 0,
	492, 549, 706, 0, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 674, 678, 676, 672, 669,
	673, 670, 671, 675, 431, 668, 0, 643, 652, 686,
	666, 694, 651, 691, 661, 406, 690, 655, 654, 700,
	681, 682, 636, 696, 667, 665, 658, 657, 653, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 0, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	935, 365, 366, 656, 0, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 0, 0,
	0, 0, 0, 0, 0, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 660, 936, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 662, 663, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 0, 471, 679, 0, 472, 473, 474, 0,
	0, 475, 476, 477, 478, 479, 480, 483, 680, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 683, 684, 500, 502, 503, 685,
	687, 688, 0, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 689, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	692, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 0, 583, 693, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 695, 604, 605, 0, 607, 608, 0,
	610, 611, 612, 613, 614, 0, 734, 615, 697, 616,
	698, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	0, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 701, 702,
	703, 704, 705, 707, 708, 709, 710, 647, 648, 664,
	515, 509, 465, 507, 508, 512, 513, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 837, 0, 0, 947, 948, 949, 0, 0, 0,
	0, 0, 0, 941, 942, 943, 944, 945, 946, 342,
	0, 359, 843, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 848, 0, 854, 0, 860, 0, 626, 0, 850,
	851, 856, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 852, 849, 853, 859, 847, 857, 844, 855,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	1375, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 841, 846, 0, 862, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 1403, 1405, 1401, 1397, 1398, 1363, 1364,
	1404, 1400, 431, 3495, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 840, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 1387, 1365, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 1376, 1366, 1371, 1377,
	1367, 1368, 1372, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 1379, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 1388,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 1389, 0, 472, 473, 474, 1369, 1370, 475,
	476, 477, 478, 479, 480, 483, 1402, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 1380, 500, 502, 503, 1386, 687, 1381,
	858, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 1382, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 1373, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 1383, 604, 605, 1374, 607, 608, 861, 610, 611,
	612, 613, 614, 0, 734, 615, 1384, 616, 1385, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 1390, 1391, 1394,
	1392, 1393, 1395, 1396, 1406, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 970, 0, 0, 1378,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 843, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 848, 0, 854, 0,
	860, 0, 626, 0, 850, 851, 856, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 852, 849, 853,
	859, 847, 857, 844, 855, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 841, 846, 0,
	862, 181, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 182, 344, 346, 348, 349,
	350, 840, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 842, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 845, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 858, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 861, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 1208, 0, 809,
	0, 0, 0, 0, 0, 0, 0, 0, 801, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 805, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 804, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 796, 797,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	798, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 803, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 802, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 794, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 795,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 799, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 837, 0, 1343, 823, 0,
	1348, 1349, 0, 809, 0, 0, 0, 0, 0, 0,
	0, 807, 808, 342, 0, 359, 843, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 1346, 848, 0, 854, 1347, 860,
	1345, 626, 0, 850, 851, 856, 347, 1422, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 852, 849, 853, 859,
	847, 857, 844, 855, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 841, 846, 0, 862,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 6331, 0, 643,
	1408, 1419, 1416, 1421, 1407, 1420, 1414, 1078, 690, 1411,
	1410, 1424, 1417, 1418, 636, 1423, 1362, 1415, 1413, 1412,
	1409, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	840, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 842, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 845, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 858, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 861, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 6156, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 444, 659, 0, 6011, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 0, 0, 407, 444,
	659, 0, 6008, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 0, 0, 0, 0,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	0, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 0, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 0, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 0, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 444, 659, 0, 819, 504, 0,
	557, 561, 186, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 183,
	0, 0, 0, 184, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 1205, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 970, 0, 0, 823, 0,
	0, 0, 0, 0, 187, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 843, 180, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 1853, 848, 0, 854, 0, 860,
	1852, 626, 0, 850, 851, 856, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 1854, 852, 849, 853, 859,
	847, 857, 844, 855, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 841, 846, 0, 862,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	840, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 842, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 845, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 858, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 861, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	970, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 843, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	848, 0, 854, 0, 860, 0, 626, 0, 850, 851,
	856, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 3969, 0, 0,
	0, 852, 849, 853, 859, 847, 857, 844, 855, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 841, 846, 0, 862, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 840, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 842, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 967, 845, 0,
	0, 968, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 858,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	969, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 861, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 843, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 848, 0, 854, 0, 860,
	0, 626, 0, 850, 851, 856, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 852, 849, 853, 859,
	847, 857, 844, 855, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 2768, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 841, 846, 0, 862,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	840, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 842, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 967, 845, 0, 0, 968, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 858, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 969, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 861, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	359, 0, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 883, 2785, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 2789, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 2786, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1042, 342, 0, 359, 843, 1489, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 848, 0, 854, 0, 860,
	0, 626, 0, 850, 851, 856, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 852, 849, 853, 859,
	847, 857, 844, 855, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 841, 846, 0, 862,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	840, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 842, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 967, 845, 0, 0, 968, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 1040, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 858, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 969, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 861, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	970, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1038, 342, 0,
	359, 843, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	848, 0, 854, 0, 860, 0, 626, 0, 850, 851,
	856, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 852, 849, 853, 859, 847, 857, 844, 855, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 841, 846, 0, 862, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 840, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 842, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 967, 845, 0,
	0, 968, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 858,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	969, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 861, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 359, 843, 0, 407, 444,
	659, 0, 0, 504, 0, 557, 561, 0, 650, 0,
	0, 0, 0, 415, 0, 848, 0, 854, 0, 860,
	0, 626, 0, 850, 851, 856, 347, 735, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 852, 849, 853, 859,
	847, 857, 844, 855, 0, 548, 482, 699, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 841, 846, 0, 862,
	0, 384, 385, 506, 367, 514, 711, 677, 569, 527,
	525, 0, 492, 549, 706, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 674, 678, 676,
	672, 669, 673, 670, 671, 675, 431, 668, 0, 643,
	652, 686, 666, 694, 651, 691, 661, 406, 690, 655,
	654, 700, 681, 682, 636, 696, 667, 665, 658, 657,
	653, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	840, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 656, 842, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 967, 845, 0, 0, 968, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 660,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 662, 663, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 679, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	680, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 683, 684, 500, 502,
	503, 685, 687, 688, 858, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 689, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 692, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 969, 583, 693, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 695, 604, 605, 0, 607,
	608, 861, 610, 611, 612, 613, 614, 0, 734, 615,
	697, 616, 698, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	701, 702, 703, 704, 705, 707, 708, 709, 710, 647,
	648, 664, 515, 509, 465, 507, 508, 512, 513, 516,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 4247,
	359, 0, 0, 407, 444, 659, 0, 0, 504, 0,
	557, 561, 0, 650, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 347, 735, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 482, 699, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 0, 0, 0, 0, 0, 384, 385, 506, 367,
	514, 711, 677, 569, 527, 525, 0, 492, 549, 706,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 674, 678, 676, 672, 669, 673, 670, 671,
	675, 431, 668, 0, 643, 652, 686, 666, 694, 651,
	691, 661, 406, 690, 655, 654, 700, 681, 682, 636,
	696, 667, 665, 658, 657, 653, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 0, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	656, 0, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 0, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 660, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 662, 663,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 679, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 680, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 683, 684, 500, 502, 503, 685, 687, 688, 0,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 689, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 692, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 693, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	695, 604, 605, 0, 607, 608, 0, 610, 611, 612,
	613, 614, 0, 734, 615, 697, 616, 698, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 701, 702, 703, 704, 705,
	707, 708, 709, 710, 647, 648, 664, 515, 509, 465,
	507, 508, 512, 513, 516, 0, 970, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 843, 1311, 407,
	1135, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 848, 0, 854, 0,
	860, 0, 626, 0, 850, 851, 856, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 852, 849, 853,
	859, 847, 857, 844, 855, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 841, 846, 0,
	862, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 840, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 842, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 967, 845, 0, 0, 968, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 858, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 969, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 861, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 970, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 843, 0, 407, 1133, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 848, 0, 854, 0, 860, 0, 626, 0, 850,
	851, 856, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 852, 849, 853, 859, 847, 857, 844, 855,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 841, 846, 0, 862, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 840, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 842, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 967, 845,
	0, 0, 968, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	858, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 969, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 861, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 970, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 843, 0, 407,
	1130, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 848, 0, 854, 0,
	860, 0, 626, 0, 850, 851, 856, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 852, 849, 853,
	859, 847, 857, 844, 855, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 841, 846, 0,
	862, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 840, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 842, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 967, 845, 0, 0, 968, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 1128, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 858, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 969, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 861, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 970, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 843, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 848, 0, 854, 0, 860, 0, 626, 0, 850,
	851, 856, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 852, 849, 853, 859, 847, 857, 844, 855,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 841, 846, 0, 862, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 840, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 842, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 967, 845,
	0, 0, 968, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 963, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	858, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 969, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 861, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 970, 0, 0, 823,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 843, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 1840, 0, 415, 0, 848, 0, 854, 0,
	860, 0, 626, 0, 850, 851, 856, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 852, 849, 853,
	859, 847, 857, 844, 855, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 841, 846, 0,
	862, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 840, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 842, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 845, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 858, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 861, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 2687, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 970, 0, 0, 823, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 843, 4838, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 848, 0, 854, 0, 860, 0, 626, 0, 850,
	851, 856, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 852, 849, 853, 859, 847, 857, 844, 855,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 841, 846, 0, 862, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 840, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 842, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 845,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	858, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 861, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 4127, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 837, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 843, 1434, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 848, 0, 854, 0,
	860, 0, 626, 0, 850, 851, 856, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 852, 849, 853,
	859, 847, 857, 844, 855, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 841, 846, 0,
	862, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 840, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 842, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 845, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 858, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 861, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 970, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 843, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 848, 0, 854, 0, 860, 0, 626, 0, 850,
	851, 856, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 852, 849, 853, 859, 847, 857, 844, 855,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 841, 846, 0, 862, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 840, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 842, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 845,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	858, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 861, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 837, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 843, 0, 407,
	1121, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 848, 0, 854, 0,
	860, 0, 626, 0, 850, 851, 856, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 852, 849, 853,
	859, 847, 857, 844, 855, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 841, 846, 0,
	862, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 840, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 842, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 845, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 858, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 861, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 837, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 843, 0, 407, 1119, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 848, 0, 854, 0, 860, 0, 626, 0, 850,
	851, 856, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 852, 849, 853, 859, 847, 857, 844, 855,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 841, 846, 0, 862, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 840, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 842, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 845,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	858, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 861, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 837, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 843, 0, 407,
	1117, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 848, 0, 854, 0,
	860, 0, 626, 0, 850, 851, 856, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 852, 849, 853,
	859, 847, 857, 844, 855, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 841, 846, 0,
	862, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 840, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 842, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 845, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 858, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 861, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 837, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 843, 0, 407, 1114, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 848, 0, 854, 0, 860, 0, 626, 0, 850,
	851, 856, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 852, 849, 853, 859, 847, 857, 844, 855,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 841, 846, 0, 862, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 840, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 842, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 845,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	858, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 861, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 3551, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 843, 0, 407,
	444, 0, 0, 0, 504, 0, 557, 561, 0, 0,
	0, 0, 0, 0, 415, 0, 848, 2896, 854, 0,
	860, 0, 626, 0, 850, 851, 856, 347, 1088, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 852, 849, 853,
	859, 847, 857, 844, 855, 0, 548, 482, 0, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 841, 846, 0,
	862, 0, 384, 385, 506, 367, 514, 0, 0, 569,
	527, 525, 0, 492, 549, 0, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 431, 1090, 0,
	643, 1093, 1081, 1073, 1074, 1075, 1076, 1077, 1078, 0,
	1095, 1096, 1097, 1098, 1099, 636, 1087, 1089, 1072, 1079,
	1080, 1082, 2899, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 840, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 0, 842, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 845, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	0, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 0, 0, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 0, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 0, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 0, 0, 500,
	502, 503, 0, 2897, 0, 858, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 0, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 0, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 2902, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 0, 604, 605, 0,
	607, 608, 861, 610, 611, 612, 613, 614, 0, 734,
	615, 0, 616, 0, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 0, 0, 0, 329, 0, 0, 0, 0, 0,
	647, 648, 2898, 515, 509, 465, 507, 508, 512, 513,
	516, 3546, 342, 0, 359, 0, 0, 407, 2813, 659,
	0, 0, 504, 0, 557, 561, 0, 650, 0, 0,
	0, 0, 415, 0, 0, 0, 0, 0, 3544, 0,
	626, 0, 0, 0, 0, 347, 735, 649, 721, 0,
	0, 0, 511, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 482, 699, 575, 354, 399,
	386, 428, 470, 582, 0, 0, 460, 630, 395, 484,
	0, 375, 517, 0, 606, 481, 0, 589, 609, 0,
	501, 380, 540, 596, 597, 0, 0, 2817, 0, 0,
	384, 385, 506, 367, 514, 711, 677, 569, 527, 525,
	0, 492, 549, 706, 0, 0, 414, 0, 409, 505,
	645, 373, 624, 543, 510, 464, 572, 601, 411, 396,
	397, 440, 542, 430, 382, 635, 674, 678, 676, 672,
	669, 673, 670, 671, 675, 431, 668, 0, 643, 652,
	686, 666, 694, 651, 691, 661, 406, 690, 655, 654,
	700, 681, 682, 636, 696, 667, 665, 658, 657, 653,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 343, 345, 0, 344, 346, 348, 349, 350, 0,
	351, 352, 353, 356, 357, 358, 360, 719, 361, 362,
	363, 364, 365, 366, 656, 0, 368, 369, 370, 371,
	372, 374, 376, 720, 377, 378, 379, 381, 383, 0,
	0, 0, 0, 0, 0, 0, 387, 388, 389, 390,
	391, 392, 0, 393, 394, 398, 400, 401, 402, 403,
	404, 405, 408, 0, 410, 412, 0, 413, 416, 0,
	2823, 418, 419, 420, 421, 422, 423, 424, 660, 425,
	0, 426, 427, 429, 2822, 432, 433, 434, 435, 436,
	0, 437, 662, 663, 438, 439, 441, 442, 443, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 0, 457, 458, 459, 461, 0, 462, 463, 466,
	467, 468, 469, 0, 471, 679, 0, 472, 473, 474,
	0, 0, 475, 476, 477, 478, 479, 480, 483, 680,
	485, 486, 487, 488, 489, 490, 491, 722, 493, 494,
	495, 496, 497, 498, 499, 683, 684, 500, 502, 503,
	685, 687, 688, 0, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 528, 529, 530, 689, 531, 532, 533,
	534, 2821, 535, 536, 537, 538, 539, 541, 544, 545,
	546, 547, 0, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 562, 563, 564, 723, 565, 566, 567,
	568, 692, 570, 571, 724, 573, 574, 576, 577, 578,
	579, 580, 581, 733, 0, 583, 693, 584, 585, 586,
	587, 588, 0, 590, 591, 592, 593, 594, 595, 598,
	599, 600, 602, 603, 695, 604, 605, 0, 607, 608,
	0, 610, 611, 612, 613, 614, 0, 734, 615, 697,
	616, 698, 617, 618, 619, 620, 621, 622, 623, 625,
	0, 2820, 627, 628, 629, 631, 632, 633, 634, 637,
	638, 639, 640, 641, 0, 642, 644, 646, 725, 701,
	702, 703, 704, 705, 707, 708, 709, 710, 647, 648,
	664, 515, 509, 465, 507, 508, 512, 513, 516, 329,
	0, 0, 0, 2819, 2814, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 342, 0, 359,
	0, 0, 407, 444, 659, 0, 0, 504, 0, 557,
	561, 0, 650, 0, 0, 0, 0, 415, 0, 0,
	0, 3507, 0, 0, 0, 626, 0, 0, 0, 0,
	347, 735, 649, 721, 0, 0, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	482, 699, 575, 354, 399, 386, 428, 470, 582, 0,
	0, 460, 630, 395, 484, 0, 375, 517, 0, 606,
	481, 0, 589, 609, 0, 501, 380, 540, 596, 597,
	0, 0, 2817, 0, 0, 384, 385, 506, 367, 514,
	711, 677, 569, 527, 525, 0, 492, 549, 706, 0,
	0, 414, 0, 409, 505, 645, 373, 624, 543, 510,
	464, 572, 601, 411, 396, 397, 440, 542, 430, 382,
	635, 674, 678, 676, 672, 669, 673, 670, 671, 675,
	431, 668, 0, 643, 652, 686, 666, 694, 651, 691,
	661, 406, 690, 655, 654, 700, 681, 682, 636, 696,
	667, 665, 658, 657, 653, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 343, 345, 0, 344,
	346, 348, 349, 350, 0, 351, 352, 353, 356, 357,
	358, 360, 719, 361, 362, 363, 364, 365, 366, 656,
	0, 368, 369, 370, 371, 372, 374, 376, 720, 377,
	378, 379, 381, 383, 0, 0, 0, 0, 0, 0,
	0, 387, 388, 389, 390, 391, 392, 0, 393, 394,
	398, 400, 401, 402, 403, 404, 405, 408, 0, 410,
	412, 0, 413, 416, 0, 2823, 418, 419, 420, 421,
	422, 423, 424, 660, 425, 0, 426, 427, 429, 2822,
	432, 433, 434, 435, 436, 0, 437, 662, 663, 438,
	439, 441, 442, 443, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 0, 457, 458, 459,
	461, 0, 462, 463, 466, 467, 468, 469, 0, 471,
	679, 0, 472, 473, 474, 0, 0, 475, 476, 477,
	478, 479, 480, 483, 680, 485, 486, 487, 488, 489,
	490, 491, 722, 493, 494, 495, 496, 497, 498, 499,
	683, 684, 500, 502, 503, 685, 687, 688, 0, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 528, 529,
	530, 689, 531, 532, 533, 534, 2821, 535, 536, 537,
	538, 539, 541, 544, 545, 546, 547, 0, 550, 551,
	552, 553, 554, 555, 556, 558, 559, 560, 562, 563,
	564, 723, 565, 566, 567, 568, 692, 570, 571, 724,
	573, 574, 576, 577, 578, 579, 580, 581, 733, 0,
	583, 693, 584, 585, 586, 587, 588, 0, 590, 591,
	592, 593, 594, 595, 598, 599, 600, 602, 603, 695,
	604, 605, 0, 607, 608, 0, 610, 611, 612, 613,
	614, 0, 734, 615, 697, 616, 698, 617, 618, 619,
	620, 621, 622, 623, 625, 0, 2820, 627, 628, 629,
	631, 632, 633, 634, 637, 638, 639, 640, 641, 0,
	642, 644, 646, 725, 701, 702, 703, 704, 705, 707,
	708, 709, 710, 647, 648, 664, 515, 509, 465, 507,
	508, 512, 513, 516, 329, 0, 0, 0, 2819, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 342, 0, 359, 0, 0, 407, 444, 659,
	0, 0, 504, 0, 557, 561, 0, 650, 0, 0,
	0, 0, 415, 0, 0, 0, 0, 0, 0, 0,
	626, 0, 0, 0, 0, 347, 735, 649, 721, 0,
	0, 0, 511, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 482, 699, 575, 354, 399,
	386, 428, 470, 582, 0, 0, 460, 630, 395, 484,
	0, 375, 517, 0, 606, 481, 0, 589, 609, 0,
	501, 380, 540, 596, 597, 0, 0, 2817, 0, 0,
	384, 385, 506, 367, 514, 711, 677, 569, 527, 525,
	0, 492, 549, 706, 0, 0, 414, 0, 409, 505,
	645, 373, 624, 543, 510, 464, 572, 601, 411, 396,
	397, 440, 542, 430, 382, 635, 674, 678, 676, 672,
	669, 673, 670, 671, 675, 431, 668, 0, 643, 652,
	686, 666, 694, 651, 691, 661, 406, 690, 655, 654,
	700, 681, 682, 636, 696, 667, 665, 658, 657, 653,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 343, 345, 0, 344, 346, 348, 349, 350, 0,
	351, 352, 353, 356, 357, 358, 360, 719, 361, 362,
	363, 364, 365, 366, 656, 0, 368, 369, 370, 371,
	372, 374, 376, 720, 377, 378, 379, 381, 383, 0,
	0, 0, 0, 0, 0, 0, 387, 388, 389, 390,
	391, 392, 0, 393, 394, 398, 400, 401, 402, 403,
	404, 405, 408, 0, 410, 412, 0, 413, 416, 0,
	2823, 418, 419, 420, 421, 422, 423, 424, 660, 425,
	0, 426, 427, 429, 2822, 432, 433, 434, 435, 436,
	0, 437, 662, 663, 438, 439, 441, 442, 443, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 0, 457, 458, 459, 461, 0, 462, 463, 466,
	467, 468, 469, 0, 471, 679, 0, 472, 473, 474,
	0, 0, 475, 476, 477, 478, 479, 480, 483, 680,
	485, 486, 487, 488, 489, 490, 491, 722, 493, 494,
	495, 496, 497, 498, 499, 683, 684, 500, 502, 503,
	685, 687, 688, 0, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 528, 529, 530, 689, 531, 532, 533,
	534, 2821, 535, 536, 537, 538, 539, 541, 544, 545,
	546, 547, 0, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 562, 563, 564, 723, 565, 566, 567,
	568, 692, 570, 571, 724, 573, 574, 576, 577, 578,
	579, 580, 581, 733, 0, 583, 693, 584, 585, 586,
	587, 588, 0, 590, 591, 592, 593, 594, 595, 598,
	599, 600, 602, 603, 695, 604, 605, 0, 607, 608,
	0, 610, 611, 612, 613, 614, 0, 734, 615, 697,
	616, 698, 617, 618, 619, 620, 621, 622, 623, 625,
	0, 2820, 627, 628, 629, 631, 632, 633, 634, 637,
	638, 639, 640, 641, 0, 642, 644, 646, 725, 701,
	702, 703, 704, 705, 707, 708, 709, 710, 647, 648,
	664, 515, 509, 465, 507, 508, 512, 513, 516, 1091,
	0, 0, 0, 2819, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 342, 0, 359,
	843, 0, 407, 444, 0, 0, 0, 504, 0, 557,
	561, 0, 0, 0, 0, 0, 0, 415, 0, 848,
	2896, 854, 0, 860, 0, 626, 0, 850, 851, 856,
	347, 1088, 649, 721, 0, 0, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	852, 849, 853, 859, 847, 857, 844, 855, 0, 548,
	482, 0, 575, 354, 399, 386, 428, 470, 582, 0,
	0, 460, 630, 395, 484, 0, 375, 517, 0, 606,
	481, 0, 589, 609, 0, 501, 380, 540, 596, 597,
	841, 846, 0, 862, 0, 384, 385, 506, 367, 514,
	0, 0, 569, 527, 525, 0, 492, 549, 0, 0,
	0, 414, 0, 409, 505, 645, 373, 624, 543, 510,
	464, 572, 601, 411, 396, 397, 440, 542, 430, 382,
	635, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	431, 1090, 0, 643, 1093, 1081, 1073, 1074, 1075, 1076,
	1077, 1078, 0, 1095, 1096, 1097, 1098, 1099, 636, 1087,
	1089, 1072, 1079, 1080, 1082, 2899, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 343, 345, 0, 344,
	346, 348, 349, 350, 840, 351, 352, 353, 356, 357,
	358, 360, 719, 361, 362, 363, 364, 365, 366, 0,
	842, 368, 369, 370, 371, 372, 374, 376, 720, 377,
	378, 379, 381, 383, 0, 0, 0, 845, 0, 0,
	0, 387, 388, 389, 390, 391, 392, 0, 393, 394,
	398, 400, 401, 402, 403, 404, 405, 408, 0, 410,
	412, 0, 413, 416, 0, 417, 418, 419, 420, 421,
	422, 423, 424, 0, 425, 0, 426, 427, 429, 0,
	432, 433, 434, 435, 436, 0, 437, 0, 0, 438,
	439, 441, 442, 443, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 0, 457, 458, 459,
	461, 0, 462, 463, 466, 467, 468, 469, 0, 471,
	0, 0, 472, 473, 474, 0, 0, 475, 476, 477,
	478, 479, 480, 483, 0, 485, 486, 487, 488, 489,
	490, 491, 722, 493, 494, 495, 496, 497, 498, 499,
	0, 0, 500, 502, 503, 0, 2897, 0, 858, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 528, 529,
	530, 0, 531, 532, 533, 534, 0, 535, 536, 537,
	538, 539, 541, 544, 545, 546, 547, 0, 550, 551,
	552, 553, 554, 555, 556, 558, 559, 560, 562, 563,
	564, 723, 565, 566, 567, 568, 0, 570, 571, 724,
	573, 574, 576, 577, 578, 579, 580, 581, 733, 0,
	583, 2902, 584, 585, 586, 587, 588, 0, 590, 591,
	592, 593, 594, 595, 598, 599, 600, 602, 603, 0,
	604, 605, 0, 607, 608, 861, 610, 611, 612, 613,
	614, 0, 734, 615, 0, 616, 0, 617, 618, 619,
	620, 621, 622, 623, 625, 0, 0, 627, 628, 629,
	631, 632, 633, 634, 637, 638, 639, 640, 641, 0,
	642, 644, 646, 725, 0, 0, 0, 0, 1091, 0,
	0, 0, 0, 647, 648, 2898, 515, 509, 465, 507,
	508, 512, 513, 516, 0, 0, 342, 0, 359, 843,
	0, 407, 444, 0, 0, 0, 504, 0, 557, 561,
	0, 0, 0, 0, 0, 0, 415, 3531, 848, 2896,
	854, 0, 860, 0, 626, 0, 850, 851, 856, 347,
	1088, 649, 721, 0, 0, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 852,
	849, 853, 859, 847, 857, 844, 855, 0, 548, 482,
	0, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 0, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 841,
	846, 0, 862, 0, 384, 385, 506, 367, 514, 0,
	0, 569, 527, 525, 0, 492, 549, 0, 0, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 431,
	1090, 0, 643, 1093, 1081, 1073, 1074, 1075, 1076, 1077,
	1078, 0, 1095, 1096, 1097, 1098, 1099, 636, 1087, 1089,
	1072, 1079, 1080, 1082, 2899, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 840, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 0, 842,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 0, 0, 0, 845, 0, 0, 0,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 0, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 0, 0, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 0,
	0, 472, 473, 474, 0, 0, 475, 476, 477, 478,
	479, 480, 483, 0, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 0,
	0, 500, 502, 503, 0, 2897, 0, 858, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	0, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 0, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 0, 583,
	2902, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 0, 604,
	605, 0, 607, 608, 861, 610, 611, 612, 613, 614,
	0, 734, 615, 0, 616, 0, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 0, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 0, 0, 0, 329, 0, 0, 0,
	0, 0, 647, 648, 2898, 515, 509, 465, 507, 508,
	512, 513, 516, 743, 748, 0, 359, 0, 747, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 2891, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 745, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 3904, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 746, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 743, 748,
	0, 359, 0, 747, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	745, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 751, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 746,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 743, 748, 0, 359, 0, 747, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 745, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 746, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2782, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 883, 2785, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 2789,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 2786, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1891, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 1877,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 1883,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 1884, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 1879, 432, 1880, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 1885, 1886, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 1887,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 1881, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 1882, 568, 692, 570, 571, 1888, 573, 574, 576,
	577, 1878, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 1889, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 1890, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 883, 2785, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 2789,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 2786, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 748, 0, 359, 0, 747, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 745, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 746, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3687, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	3688, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3678, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 3679, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 995, 342,
	0, 359, 0, 0, 407, 994, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 883, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 883, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 5389, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 4247, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 4987, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 4968, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	4259, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 4433, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 823, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 809, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 3283, 0, 0, 0, 511,
	0, 0, 0, 0, 3286, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 3284, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 3282, 611,
	3281, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	3285, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 718, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 1592, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 883, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1590, 342, 0, 359, 0, 0, 407,
	1589, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1255, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1152, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 322, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 1150, 351, 352, 353,
	356, 357, 358, 360, 323, 361, 1149, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 325, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 326, 565, 566, 567, 568, 692, 570,
	571, 324, 573, 574, 576, 577, 578, 579, 580, 581,
	1147, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 318, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 327, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 998, 342, 0, 359, 0, 0, 407,
	997, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 816, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 815, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 812, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 779, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 776, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	778, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 777, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 718, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 714, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 716, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 715,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 6303, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 4903, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 4017, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 3877, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 322, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 323,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 325,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 326, 565,
	566, 567, 568, 692, 570, 571, 324, 573, 574, 576,
	577, 578, 579, 580, 581, 1147, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 318,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	327, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 322, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 323, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 325, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 326, 565, 566, 567, 568, 692, 570,
	571, 324, 573, 574, 576, 577, 578, 579, 580, 581,
	2942, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 2943, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 327, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	3780, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 3673, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	3671, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 3657, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	3175, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 322, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 323, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 325, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 326, 565, 566, 567, 568, 692, 570,
	571, 2982, 573, 574, 576, 577, 578, 579, 580, 581,
	2942, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 2943, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 327, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 322, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 323,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 325,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 326, 565,
	566, 567, 568, 692, 570, 571, 2971, 573, 574, 576,
	577, 578, 579, 580, 581, 2942, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 2943,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	327, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 322, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 323, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 325, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 326, 565, 566, 567, 568, 692, 570,
	571, 2941, 573, 574, 576, 577, 578, 579, 580, 581,
	2942, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 2943, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 327, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 322, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 323,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 325,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 326, 565,
	566, 567, 568, 692, 570, 571, 324, 573, 574, 576,
	577, 578, 579, 580, 581, 1147, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 2914, 0, 610, 611, 612, 613, 614, 0, 318,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	327, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 2772, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	2710, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	1870, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	1802, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 1800, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	1796, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 1506, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	1465, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 1460, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 1454, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 0, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 1126, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	1124, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 1112, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	1058, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 1054, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	1051, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 1045, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	1026, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 1002, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	1000, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 981, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	962, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 958, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	956, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 930, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 734, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 886, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 735, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 692, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 738, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 569,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 736, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 0, 0, 407, 444, 659, 0, 0, 504,
	0, 557, 561, 0, 650, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 347, 322, 649, 315, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 482, 699, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 0, 0, 0, 0, 0, 384, 385, 506,
	367, 514, 711, 677, 569, 527, 525, 0, 492, 549,
	706, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 674, 678, 676, 672, 669, 673, 670,
	671, 675, 431, 668, 0, 643, 652, 686, 666, 694,
	651, 691, 661, 406, 690, 655, 654, 700, 681, 682,
	636, 696, 667, 665, 658, 657, 653, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 0, 351, 352, 353,
	356, 357, 358, 360, 323, 361, 362, 363, 364, 365,
	366, 656, 0, 368, 369, 370, 371, 372, 374, 376,
	317, 377, 378, 379, 381, 383, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 660, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 662,
	663, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 679, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 680, 485, 486, 487,
	488, 489, 490, 491, 325, 493, 494, 495, 496, 497,
	498, 499, 683, 684, 500, 502, 503, 685, 687, 688,
	0, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 689, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 326, 565, 566, 567, 568, 692, 570,
	571, 324, 573, 574, 576, 577, 578, 579, 580, 581,
	316, 0, 583, 693, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 695, 604, 605, 0, 607, 608, 0, 610, 611,
	612, 613, 614, 0, 318, 615, 697, 616, 698, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 327, 701, 702, 703, 704,
	705, 707, 708, 709, 710, 647, 648, 664, 515, 509,
	465, 507, 508, 512, 513, 516, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 359, 0, 0, 407,
	444, 659, 0, 0, 504, 0, 557, 561, 0, 650,
	0, 0, 0, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 347, 735, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 482, 699, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 0, 0, 0,
	0, 0, 384, 385, 506, 367, 514, 711, 677, 0,
	527, 525, 0, 492, 549, 706, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 674, 678,
	676, 672, 669, 673, 670, 671, 675, 431, 668, 0,
	643, 652, 686, 666, 694, 651, 691, 661, 406, 690,
	655, 654, 700, 681, 682, 636, 696, 667, 665, 658,
	657, 653, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 0, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 656, 0, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	660, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 662, 663, 0, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 679, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 680, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 683, 684, 500,
	502, 503, 685, 687, 688, 0, 518, 519, 520, 521,
	522, 523, 0, 526, 0, 528, 529, 530, 689, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	0, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 692, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 693, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 695, 604, 605, 0,
	607, 608, 0, 610, 611, 612, 613, 614, 0, 734,
	615, 697, 616, 698, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 701, 702, 703, 704, 705, 707, 708, 709, 710,
	647, 648, 664, 515, 509, 465, 507, 508, 512, 513,
	516, 1091, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 359, 843, 0, 407, 444, 0, 0, 0, 504,
	0, 557, 561, 0, 0, 0, 0, 0, 0, 415,
	0, 848, 2896, 854, 0, 860, 0, 626, 0, 850,
	851, 856, 347, 1088, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 852, 849, 853, 859, 847, 857, 844, 855,
	0, 548, 482, 0, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 841, 846, 0, 862, 0, 384, 385, 506,
	367, 514, 0, 0, 569, 527, 525, 0, 492, 549,
	0, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 431, 1090, 0, 643, 1093, 1081, 1073, 1074,
	1075, 1076, 1077, 1078, 0, 1095, 1096, 1097, 1098, 1099,
	636, 1087, 1089, 1072, 1079, 1080, 1082, 2899, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 840, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 0, 842, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 845,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 0, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 0,
	0, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 0, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 0, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 0, 0, 500, 502, 503, 0, 2897, 0,
	858, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 0, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 0, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 2902, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 0, 604, 605, 0, 607, 608, 861, 610, 611,
	612, 613, 614, 0, 734, 615, 0, 616, 0, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 0, 0, 1091, 0,
	0, 0, 0, 0, 0, 647, 648, 2898, 515, 509,
	465, 507, 508, 512, 513, 516, 342, 0, 359, 843,
	0, 407, 444, 0, 0, 0, 504, 0, 557, 561,
	0, 0, 0, 0, 0, 0, 415, 0, 848, 0,
	854, 2947, 860, 0, 626, 0, 850, 851, 856, 347,
	1088, 649, 721, 0, 0, 0, 511, 0, 0, 0,
	0, 4296, 0, 0, 355, 0, 0, 0, 0, 852,
	849, 853, 859, 847, 857, 844, 855, 0, 548, 482,
	0, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 0, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 841,
	846, 0, 862, 0, 384, 385, 506, 367, 514, 0,
	0, 569, 527, 525, 0, 492, 549, 0, 0, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 431,
	1090, 0, 643, 1093, 1081, 1073, 1074, 1075, 1076, 1077,
	1078, 0, 1095, 1096, 1097, 1098, 1099, 636, 1087, 1089,
	1072, 1079, 1080, 1082, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 840, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 0, 842,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 0, 0, 0, 845, 0, 0, 0,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 0, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 0, 0, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 0,
	0, 472, 473, 474, 0, 0, 475, 476, 477, 478,
	479, 480, 483, 0, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 0,
	0, 500, 502, 503, 0, 0, 0, 858, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	0, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 0, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 0, 583,
	2902, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 0, 604,
	605, 0, 607, 608, 861, 610, 611, 612, 613, 614,
	0, 734, 615, 0, 616, 0, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 0, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 0, 0, 1091, 0, 0, 0, 0,
	0, 0, 647, 648, 0, 515, 509, 465, 507, 508,
	512, 513, 516, 342, 0, 359, 843, 0, 407, 444,
	0, 0, 0, 504, 0, 557, 561, 0, 0, 0,
	0, 0, 0, 415, 0, 848, 0, 854, 0, 860,
	0, 626, 0, 850, 851, 856, 347, 1088, 649, 721,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 852, 849, 853, 859,
	847, 857, 844, 855, 0, 548, 482, 0, 575, 354,
	399, 386, 428, 470, 582, 0, 0, 460, 630, 395,
	484, 0, 375, 517, 0, 606, 481, 0, 589, 609,
	0, 501, 380, 540, 596, 597, 841, 846, 0, 862,
	0, 384, 385, 506, 367, 514, 0, 0, 569, 527,
	525, 6339, 492, 549, 0, 0, 0, 414, 0, 409,
	505, 645, 373, 624, 543, 510, 464, 572, 601, 411,
	396, 397, 440, 542, 430, 382, 635, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 431, 1090, 0, 643,
	1093, 1081, 1073, 1074, 1075, 1076, 1077, 1078, 0, 1095,
	1096, 1097, 1098, 1099, 636, 1087, 1089, 1072, 1079, 1080,
	1082, 0, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 343, 345, 0, 344, 346, 348, 349, 350,
	840, 351, 352, 353, 356, 357, 358, 360, 719, 361,
	362, 363, 364, 365, 366, 0, 842, 368, 369, 370,
	371, 372, 374, 376, 720, 377, 378, 379, 381, 383,
	0, 0, 0, 845, 0, 0, 0, 387, 388, 389,
	390, 391, 392, 0, 393, 394, 398, 400, 401, 402,
	403, 404, 405, 408, 0, 410, 412, 0, 413, 416,
	0, 417, 418, 419, 420, 421, 422, 423, 424, 0,
	425, 0, 426, 427, 429, 0, 432, 433, 434, 435,
	436, 0, 437, 0, 0, 438, 439, 441, 442, 443,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 0, 457, 458, 459, 461, 0, 462, 463,
	466, 467, 468, 469, 0, 471, 0, 0, 472, 473,
	474, 0, 0, 475, 476, 477, 478, 479, 480, 483,
	0, 485, 486, 487, 488, 489, 490, 491, 722, 493,
	494, 495, 496, 497, 498, 499, 0, 0, 500, 502,
	503, 0, 0, 0, 858, 518, 519, 520, 521, 522,
	523, 524, 526, 0, 528, 529, 530, 0, 531, 532,
	533, 534, 0, 535, 536, 537, 538, 539, 541, 544,
	545, 546, 547, 0, 550, 551, 552, 553, 554, 555,
	556, 558, 559, 560, 562, 563, 564, 723, 565, 566,
	567, 568, 0, 570, 571, 724, 573, 574, 576, 577,
	578, 579, 580, 581, 733, 0, 583, 1063, 584, 585,
	586, 587, 588, 0, 590, 591, 592, 593, 594, 595,
	598, 599, 600, 602, 603, 0, 604, 605, 0, 607,
	608, 861, 610, 611, 612, 613, 614, 0, 734, 615,
	0, 616, 0, 617, 618, 619, 620, 621, 622, 623,
	625, 0, 0, 627, 628, 629, 631, 632, 633, 634,
	637, 638, 639, 640, 641, 0, 642, 644, 646, 725,
	0, 0, 1091, 0, 0, 0, 0, 0, 0, 647,
	648, 0, 515, 509, 465, 507, 508, 512, 513, 516,
	342, 0, 359, 843, 0, 407, 444, 0, 0, 0,
	504, 0, 557, 561, 0, 0, 0, 0, 0, 0,
	415, 0, 848, 0, 854, 0, 860, 0, 626, 0,
	850, 851, 856, 347, 1088, 649, 721, 0, 0, 0,
	511, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 852, 849, 853, 859, 847, 857, 844,
	855, 0, 548, 482, 0, 575, 354, 399, 386, 428,
	470, 582, 0, 0, 460, 630, 395, 484, 0, 375,
	517, 0, 606, 481, 0, 589, 609, 0, 501, 380,
	540, 596, 597, 841, 846, 0, 862, 0, 384, 385,
	506, 367, 514, 0, 0, 569, 527, 525, 5988, 492,
	549, 0, 0, 0, 414, 0, 409, 505, 645, 373,
	624, 543, 510, 464, 572, 601, 411, 396, 397, 440,
	542, 430, 382, 635, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 431, 1090, 0, 643, 1093, 1081, 1073,
	1074, 1075, 1076, 1077, 1078, 0, 1095, 1096, 1097, 1098,
	1099, 636, 1087, 1089, 1072, 1079, 1080, 1082, 0, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 343,
	345, 0, 344, 346, 348, 349, 350, 840, 351, 352,
	353, 356, 357, 358, 360, 719, 361, 362, 363, 364,
	365, 366, 0, 842, 368, 369, 370, 371, 372, 374,
	376, 720, 377, 378, 379, 381, 383, 0, 0, 0,
	845, 0, 0, 0, 387, 388, 389, 390, 391, 392,
	0, 393, 394, 398, 400, 401, 402, 403, 404, 405,
	408, 0, 410, 412, 0, 413, 416, 0, 417, 418,
	419, 420, 421, 422, 423, 424, 0, 425, 0, 426,
	427, 429, 0, 432, 433, 434, 435, 436, 0, 437,
	0, 0, 438, 439, 441, 442, 443, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 0,
	457, 458, 459, 461, 0, 462, 463, 466, 467, 468,
	469, 0, 471, 0, 0, 472, 473, 474, 0, 0,
	475, 476, 477, 478, 479, 480, 483, 0, 485, 486,
	487, 488, 489, 490, 491, 722, 493, 494, 495, 496,
	497, 498, 499, 0, 0, 500, 502, 503, 0, 0,
	0, 858, 518, 519, 520, 521, 522, 523, 524, 526,
	0, 528, 529, 530, 0, 531, 532, 533, 534, 0,
	535, 536, 537, 538, 539, 541, 544, 545, 546, 547,
	0, 550, 551, 552, 553, 554, 555, 556, 558, 559,
	560, 562, 563, 564, 723, 565, 566, 567, 568, 0,
	570, 571, 724, 573, 574, 576, 577, 578, 579, 580,
	581, 733, 0, 583, 1063, 584, 585, 586, 587, 588,
	0, 590, 591, 592, 593, 594, 595, 598, 599, 600,
	602, 603, 0, 604, 605, 0, 607, 608, 861, 610,
	611, 612, 613, 614, 0, 734, 615, 0, 616, 0,
	617, 618, 619, 620, 621, 622, 623, 625, 0, 0,
	627, 628, 629, 631, 632, 633, 634, 637, 638, 639,
	640, 641, 0, 642, 644, 646, 725, 0, 0, 1091,
	0, 0, 0, 0, 0, 0, 647, 648, 0, 515,
	509, 465, 507, 508, 512, 513, 516, 342, 0, 359,
	843, 0, 407, 444, 0, 0, 0, 504, 0, 557,
	561, 0, 0, 0, 0, 0, 0, 415, 0, 848,
	0, 854, 0, 860, 0, 626, 0, 850, 851, 856,
	347, 1088, 649, 721, 0, 0, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	852, 849, 853, 859, 847, 857, 844, 855, 0, 548,
	482, 0, 575, 354, 399, 386, 428, 470, 582, 0,
	0, 460, 630, 395, 484, 0, 375, 517, 0, 606,
	481, 0, 589, 609, 0, 501, 380, 540, 596, 597,
	841, 846, 0, 862, 0, 384, 385, 506, 367, 514,
	0, 0, 569, 527, 525, 0, 492, 549, 0, 0,
	0, 414, 0, 409, 505, 645, 373, 624, 543, 510,
	464, 572, 601, 411, 396, 397, 440, 542, 430, 382,
	635, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	431, 1090, 0, 643, 1093, 1081, 1073, 1074, 1075, 1076,
	1077, 1078, 0, 1095, 1096, 1097, 1098, 1099, 636, 1087,
	1089, 1072, 1079, 1080, 1082, 0, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 343, 345, 0, 344,
	346, 348, 349, 350, 840, 351, 352, 353, 356, 357,
	358, 360, 719, 361, 362, 363, 364, 365, 366, 0,
	842, 368, 369, 370, 371, 372, 374, 376, 720, 377,
	378, 379, 381, 383, 0, 0, 0, 845, 0, 0,
	0, 387, 388, 389, 390, 391, 392, 0, 393, 394,
	398, 400, 401, 402, 403, 404, 405, 408, 0, 410,
	412, 0, 413, 416, 0, 417, 418, 419, 420, 421,
	422, 423, 424, 0, 425, 0, 426, 427, 429, 0,
	432, 433, 434, 435, 436, 0, 437, 0, 0, 438,
	439, 441, 442, 443, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 0, 457, 458, 459,
	461, 0, 462, 463, 466, 467, 468, 469, 0, 471,
	0, 0, 472, 473, 474, 0, 0, 475, 476, 477,
	478, 479, 480, 483, 0, 485, 486, 487, 488, 489,
	490, 491, 722, 493, 494, 495, 496, 497, 498, 499,
	4552, 0, 500, 502, 503, 0, 0, 0, 858, 518,
	519, 520, 521, 522, 523, 524, 526, 0, 528, 529,
	530, 0, 531, 532, 533, 534, 0, 535, 536, 537,
	538, 539, 541, 544, 545, 546, 547, 0, 550, 551,
	552, 553, 554, 555, 556, 558, 559, 560, 562, 563,
	564, 723, 565, 566, 567, 568, 0, 570, 571, 724,
	573, 574, 576, 577, 578, 579, 580, 581, 733, 0,
	583, 1063, 584, 585, 586, 587, 588, 0, 590, 591,
	592, 593, 594, 595, 598, 599, 600, 602, 603, 0,
	604, 605, 0, 607, 608, 861, 610, 611, 612, 613,
	614, 0, 734, 615, 0, 616, 0, 617, 618, 619,
	620, 621, 622, 623, 625, 0, 0, 627, 628, 629,
	631, 632, 633, 634, 637, 638, 639, 640, 641, 0,
	642, 644, 646, 725, 0, 0, 1091, 0, 0, 0,
	0, 0, 0, 647, 648, 0, 515, 509, 465, 507,
	508, 512, 513, 516, 342, 0, 359, 843, 0, 407,
	444, 0, 0, 0, 504, 0, 557, 561, 0, 0,
	0, 0, 0, 0, 415, 0, 848, 0, 854, 0,
	860, 0, 626, 0, 850, 851, 856, 347, 1088, 649,
	721, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 852, 849, 853,
	859, 847, 857, 844, 855, 0, 548, 482, 0, 575,
	354, 399, 386, 428, 470, 582, 0, 0, 460, 630,
	395, 484, 0, 375, 517, 0, 606, 481, 0, 589,
	609, 0, 501, 380, 540, 596, 597, 841, 846, 0,
	862, 0, 384, 385, 506, 367, 514, 0, 0, 569,
	527, 525, 0, 492, 549, 0, 0, 0, 414, 0,
	409, 505, 645, 373, 624, 543, 510, 464, 572, 601,
	411, 396, 397, 440, 542, 430, 382, 635, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 431, 1090, 0,
	643, 1093, 1081, 1073, 1074, 1075, 1076, 1077, 1078, 0,
	1095, 1096, 1097, 1098, 1099, 636, 1087, 1089, 1072, 1079,
	1080, 1082, 0, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 343, 345, 0, 344, 346, 348, 349,
	350, 840, 351, 352, 353, 356, 357, 358, 360, 719,
	361, 362, 363, 364, 365, 366, 0, 842, 368, 369,
	370, 371, 372, 374, 376, 720, 377, 378, 379, 381,
	383, 0, 0, 0, 845, 0, 0, 0, 387, 388,
	389, 390, 391, 392, 0, 393, 394, 398, 400, 401,
	402, 403, 404, 405, 408, 0, 410, 412, 0, 413,
	416, 0, 417, 418, 419, 420, 421, 422, 423, 424,
	0, 425, 0, 426, 427, 429, 0, 432, 433, 434,
	435, 436, 0, 437, 0, 0, 438, 439, 441, 442,
	443, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 0, 457, 458, 459, 461, 0, 462,
	463, 466, 467, 468, 469, 0, 471, 0, 0, 472,
	473, 474, 0, 0, 475, 476, 477, 478, 479, 480,
	483, 0, 485, 486, 487, 488, 489, 490, 491, 722,
	493, 494, 495, 496, 497, 498, 499, 2966, 0, 500,
	502, 503, 0, 0, 0, 858, 518, 519, 520, 521,
	522, 523, 524, 526, 0, 528, 529, 530, 0, 531,
	532, 533, 534, 0, 535, 536, 537, 538, 539, 541,
	544, 545, 546, 547, 0, 550, 551, 552, 553, 554,
	555, 556, 558, 559, 560, 562, 563, 564, 723, 565,
	566, 567, 568, 0, 570, 571, 724, 573, 574, 576,
	577, 578, 579, 580, 581, 733, 0, 583, 1063, 584,
	585, 586, 587, 588, 0, 590, 591, 592, 593, 594,
	595, 598, 599, 600, 602, 603, 0, 604, 605, 0,
	607, 608, 861, 610, 611, 612, 613, 614, 0, 734,
	615, 0, 616, 0, 617, 618, 619, 620, 621, 622,
	623, 625, 0, 0, 627, 628, 629, 631, 632, 633,
	634, 637, 638, 639, 640, 641, 0, 642, 644, 646,
	725, 0, 0, 1091, 0, 0, 0, 0, 0, 0,
	647, 648, 0, 515, 509, 465, 507, 508, 512, 513,
	516, 342, 0, 359, 843, 0, 407, 444, 0, 0,
	0, 504, 0, 557, 561, 0, 0, 0, 0, 0,
	0, 415, 0, 848, 0, 854, 0, 860, 0, 626,
	0, 850, 851, 856, 347, 1088, 649, 721, 0, 0,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 852, 849, 853, 859, 847, 857,
	844, 855, 0, 548, 482, 0, 575, 354, 399, 386,
	428, 470, 582, 0, 0, 460, 630, 395, 484, 0,
	375, 517, 0, 606, 481, 0, 589, 609, 0, 501,
	380, 540, 596, 597, 841, 846, 0, 862, 0, 384,
	385, 506, 367, 514, 0, 0, 569, 527, 525, 0,
	492, 549, 0, 0, 0, 414, 0, 409, 505, 645,
	373, 624, 543, 510, 464, 572, 601, 411, 396, 397,
	440, 542, 430, 382, 635, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 431, 1090, 0, 643, 1093, 1081,
	1073, 1074, 1075, 1076, 1077, 1078, 0, 1095, 1096, 1097,
	1098, 1099, 636, 1087, 1089, 1072, 1079, 1080, 1082, 0,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	343, 345, 0, 344, 346, 348, 349, 350, 840, 351,
	352, 353, 356, 357, 358, 360, 719, 361, 362, 363,
	364, 365, 366, 0, 842, 368, 369, 370, 371, 372,
	374, 376, 720, 377, 378, 379, 381, 383, 0, 0,
	0, 845, 0, 0, 0, 387, 388, 389, 390, 391,
	392, 0, 393, 394, 398, 400, 401, 402, 403, 404,
	405, 408, 0, 410, 412, 0, 413, 416, 0, 417,
	418, 419, 420, 421, 422, 423, 424, 0, 425, 0,
	426, 427, 429, 0, 432, 433, 434, 435, 436, 0,
	437, 0, 0, 438, 439, 441, 442, 443, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	0, 457, 458, 459, 461, 0, 462, 463, 466, 467,
	468, 469, 0, 471, 0, 0, 472, 473, 474, 0,
	0, 475, 476, 477, 478, 479, 480, 483, 0, 485,
	486, 487, 488, 489, 490, 491, 722, 493, 494, 495,
	496, 497, 498, 499, 0, 0, 500, 502, 503, 0,
	0, 0, 858, 518, 519, 520, 521, 522, 523, 524,
	526, 0, 528, 529, 530, 0, 531, 532, 533, 534,
	0, 535, 536, 537, 538, 539, 541, 544, 545, 546,
	547, 0, 550, 551, 552, 553, 554, 555, 556, 558,
	559, 560, 562, 563, 564, 723, 565, 566, 567, 568,
	0, 570, 571, 724, 573, 574, 576, 577, 578, 579,
	580, 581, 733, 0, 583, 1063, 584, 585, 586, 587,
	588, 0, 590, 591, 592, 593, 594, 595, 598, 599,
	600, 602, 603, 0, 604, 605, 0, 607, 608, 861,
	610, 611, 612, 613, 614, 0, 734, 615, 0, 616,
	0, 617, 618, 619, 620, 621, 622, 623, 625, 0,
	0, 627, 628, 629, 631, 632, 633, 634, 637, 638,
	639, 640, 641, 0, 642, 644, 646, 725, 0, 0,
	1091, 0, 0, 0, 0, 0, 0, 647, 648, 0,
	515, 509, 465, 507, 508, 512, 513, 516, 342, 0,
	359, 843, 0, 407, 444, 0, 0, 0, 504, 0,
	557, 561, 0, 0, 0, 0, 0, 0, 415, 0,
	848, 0, 854, 0, 860, 0, 626, 0, 850, 851,
	856, 347, 1088, 649, 721, 0, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 852, 849, 853, 859, 847, 857, 844, 855, 0,
	548, 482, 0, 575, 354, 399, 386, 428, 470, 582,
	0, 0, 460, 630, 395, 484, 0, 375, 517, 0,
	606, 481, 0, 589, 609, 0, 501, 380, 540, 596,
	597, 841, 846, 0, 862, 0, 384, 385, 506, 367,
	514, 0, 0, 569, 527, 525, 0, 492, 549, 0,
	0, 0, 414, 0, 409, 505, 645, 373, 624, 543,
	510, 464, 572, 601, 411, 396, 397, 440, 542, 430,
	382, 635, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 431, 1090, 0, 643, 1093, 1081, 1073, 1074, 1075,
	1076, 1077, 1078, 0, 1095, 1096, 1097, 1098, 1099, 636,
	1087, 1089, 1072, 1079, 1080, 1082, 0, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 343, 345, 0,
	344, 346, 348, 349, 350, 840, 351, 352, 353, 356,
	357, 358, 360, 719, 361, 362, 363, 364, 365, 366,
	0, 842, 368, 369, 370, 371, 372, 374, 376, 720,
	377, 378, 379, 381, 383, 0, 0, 0, 845, 0,
	0, 0, 387, 388, 389, 390, 391, 392, 0, 393,
	394, 398, 400, 401, 402, 403, 404, 405, 408, 0,
	410, 412, 0, 413, 416, 0, 417, 418, 419, 420,
	421, 422, 423, 424, 0, 425, 0, 426, 427, 429,
	0, 432, 433, 434, 435, 436, 0, 437, 0, 0,
	438, 439, 441, 442, 443, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 0, 457, 458,
	459, 461, 0, 462, 463, 466, 467, 468, 469, 0,
	471, 0, 0, 472, 473, 474, 0, 0, 475, 476,
	477, 478, 479, 480, 483, 0, 485, 486, 487, 488,
	489, 490, 491, 722, 493, 494, 495, 496, 497, 498,
	499, 0, 0, 500, 502, 503, 0, 0, 0, 858,
	518, 519, 520, 521, 522, 523, 524, 526, 0, 528,
	529, 530, 0, 531, 532, 533, 534, 0, 535, 536,
	537, 538, 539, 541, 544, 545, 546, 547, 0, 550,
	551, 552, 553, 554, 555, 556, 558, 559, 560, 562,
	563, 564, 723, 565, 566, 567, 568, 0, 570, 571,
	724, 573, 574, 576, 577, 578, 579, 580, 581, 733,
	0, 583, 2902, 584, 585, 586, 587, 588, 0, 590,
	591, 592, 593, 594, 595, 598, 599, 600, 602, 603,
	0, 604, 605, 0, 607, 608, 861, 610, 611, 612,
	613, 614, 0, 734, 615, 0, 616, 0, 617, 618,
	619, 620, 621, 622, 623, 625, 0, 0, 627, 628,
	629, 631, 632, 633, 634, 637, 638, 639, 640, 641,
	0, 642, 644, 646, 725, 0, 0, 1091, 0, 0,
	0, 0, 0, 0, 647, 648, 0, 515, 509, 465,
	507, 508, 512, 513, 516, 342, 0, 359, 843, 0,
	407, 1101, 0, 0, 0, 504, 0, 557, 561, 0,
	0, 0, 0, 0, 0, 415, 0, 848, 0, 854,
	0, 860, 0, 626, 0, 850, 851, 856, 347, 1088,
	649, 721, 0, 0, 0, 511, 0, 0, 0, 0,
	0, 0, 0, 355, 0, 0, 0, 0, 852, 849,
	853, 859, 847, 857, 844, 855, 0, 548, 482, 0,
	575, 354, 399, 386, 428, 470, 582, 0, 0, 460,
	630, 395, 484, 0, 375, 517, 0, 606, 481, 0,
	589, 609, 0, 501, 380, 540, 596, 597, 841, 846,
	0, 862, 0, 384, 385, 506, 367, 514, 0, 0,
	569, 527, 525, 0, 492, 549, 0, 0, 0, 414,
	0, 409, 505, 645, 373, 624, 543, 510, 464, 572,
	601, 411, 396, 397, 440, 542, 430, 382, 635, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 431, 1090,
	0, 643, 1093, 1081, 1073, 1074, 1075, 1076, 1077, 1078,
	0, 1095, 1096, 1097, 1098, 1099, 636, 1087, 1089, 1072,
	1079, 1080, 1082, 0, 332, 333, 334, 335, 336, 337,
	338, 339, 340, 341, 343, 345, 0, 344, 346, 348,
	349, 350, 840, 351, 352, 353, 356, 357, 358, 360,
	719, 361, 362, 363, 364, 365, 366, 0, 842, 368,
	369, 370, 371, 372, 374, 376, 720, 377, 378, 379,
	381, 383, 0, 0, 0, 845, 0, 0, 0, 387,
	388, 389, 390, 391, 392, 0, 393, 394, 398, 400,
	401, 402, 403, 404, 405, 408, 0, 410, 412, 0,
	413, 416, 0, 417, 418, 419, 420, 421, 422, 423,
	424, 0, 425, 0, 426, 427, 429, 0, 432, 433,
	434, 435, 436, 0, 437, 0, 0, 438, 439, 441,
	442, 443, 445, 446, 447, 448, 449, 450, 451, 452,
	453, 454, 455, 456, 0, 457, 458, 459, 461, 0,
	462, 463, 466, 467, 468, 469, 0, 471, 0, 0,
	472, 473, 474, 0, 0, 475, 476, 477, 478, 479,
	480, 483, 0, 485, 486, 487, 488, 489, 490, 491,
	722, 493, 494, 495, 496, 497, 498, 499, 0, 0,
	500, 502, 503, 0, 0, 0, 858, 518, 519, 520,
	521, 522, 523, 524, 526, 0, 528, 529, 530, 0,
	531, 532, 533, 534, 0, 535, 536, 537, 538, 539,
	541, 544, 545, 546, 547, 0, 550, 551, 552, 553,
	554, 555, 556, 558, 559, 560, 562, 563, 564, 723,
	565, 566, 567, 568, 0, 570, 571, 724, 573, 574,
	576, 577, 578, 579, 580, 581, 733, 0, 583, 1063,
	584, 585, 586, 587, 588, 0, 590, 591, 592, 593,
	594, 595, 598, 599, 600, 602, 603, 0, 604, 605,
	0, 607, 608, 861, 610, 611, 612, 613, 614, 0,
	734, 615, 0, 616, 0, 617, 618, 619, 620, 621,
	622, 623, 625, 0, 0, 627, 628, 629, 631, 632,
	633, 634, 637, 638, 639, 640, 641, 0, 642, 644,
	646, 725, 0, 0, 1091, 0, 0, 0, 0, 0,
	0, 647, 648, 0, 515, 509, 465, 507, 508, 512,
	513, 516, 342, 0, 359, 843, 0, 407, 1060, 0,
	0, 0, 504, 0, 557, 561, 0, 0, 0, 0,
	0, 0, 415, 0, 848, 0, 854, 0, 860, 0,
	626, 0, 850, 851, 856, 347, 1088, 649, 721, 0,
	0, 0, 511, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 852, 849, 853, 859, 847,
	857, 844, 855, 0, 548, 482, 0, 575, 354, 399,
	386, 428, 470, 582, 0, 0, 460, 630, 395, 484,
	0, 375, 517, 0, 606, 481, 0, 589, 609, 0,
	501, 380, 540, 596, 597, 841, 846, 0, 862, 0,
	384, 385, 506, 367, 514, 0, 0, 569, 527, 525,
	0, 492, 549, 0, 0, 0, 414, 0, 409, 505,
	645, 373, 624, 543, 510, 464, 572, 601, 411, 396,
	397, 440, 542, 430, 382, 635, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 431, 1090, 0, 643, 1093,
	1081, 1073, 1074, 1075, 1076, 1077, 1078, 0, 1095, 1096,
	1097, 1098, 1099, 636, 1087, 1089, 1072, 1079, 1080, 1082,
	0, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 343, 345, 0, 344, 346, 348, 349, 350, 840,
	351, 352, 353, 356, 357, 358, 360, 719, 361, 362,
	363, 364, 365, 366, 0, 842, 368, 369, 370, 371,
	372, 374, 376, 720, 377, 378, 379, 381, 383, 0,
	0, 0, 845, 0, 0, 0, 387, 388, 389, 390,
	391, 392, 0, 393, 394, 398, 400, 401, 402, 403,
	404, 405, 408, 0, 410, 412, 0, 413, 416, 0,
	417, 418, 419, 420, 421, 422, 423, 424, 0, 425,
	0, 426, 427, 429, 0, 432, 433, 434, 435, 436,
	0, 437, 0, 0, 438, 439, 441, 442, 443, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 0, 457, 458, 459, 461, 0, 462, 463, 466,
	467, 468, 469, 0, 471, 0, 0, 472, 473, 474,
	0, 0, 475, 476, 477, 478, 479, 480, 483, 0,
	485, 486, 487, 488, 489, 490, 491, 722, 493, 494,
	495, 496, 497, 498, 499, 0, 0, 500, 502, 503,
	0, 0, 0, 858, 518, 519, 520, 521, 522, 523,
	524, 526, 0, 528, 529, 530, 0, 531, 532, 533,
	534, 0, 535, 536, 537, 538, 539, 541, 544, 545,
	546, 547, 0, 550, 551, 552, 553, 554, 555, 556,
	558, 559, 560, 562, 563, 564, 723, 565, 566, 567,
	568, 0, 570, 571, 724, 573, 574, 576, 577, 578,
	579, 580, 581, 733, 0, 583, 1063, 584, 585, 586,
	587, 588, 0, 590, 591, 592, 593, 594, 595, 598,
	599, 600, 602, 603, 0, 604, 605, 0, 607, 608,
	861, 610, 611, 612, 613, 614, 0, 734, 615, 0,
	616, 0, 617, 618, 619, 620, 621, 622, 623, 625,
	0, 0, 627, 628, 629, 631, 632, 633, 634, 637,
	638, 639, 640, 641, 0, 642, 644, 646, 725, 0,
	0, 1091, 0, 0, 0, 0, 0, 0, 647, 648,
	0, 515, 509, 465, 507, 508, 512, 513, 516, 342,
	0, 359, 843, 0, 407, 444, 0, 0, 0, 504,
	0, 557, 561, 0, 0, 0, 0, 0, 0, 415,
	0, 848, 0, 854, 0, 860, 0, 626, 0, 850,
	851, 856, 347, 1088, 649, 721, 0, 0, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 852, 849, 853, 859, 847, 857, 844, 855,
	0, 548, 482, 0, 575, 354, 399, 386, 428, 470,
	582, 0, 0, 460, 630, 395, 484, 0, 375, 517,
	0, 606, 481, 0, 589, 609, 0, 501, 380, 540,
	596, 597, 841, 846, 0, 862, 0, 384, 385, 506,
	367, 514, 0, 0, 569, 527, 525, 0, 492, 549,
	0, 0, 0, 414, 0, 409, 505, 645, 373, 624,
	543, 510, 464, 572, 601, 411, 396, 397, 440, 542,
	430, 382, 635, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 431, 1090, 0, 643, 1093, 1081, 1073, 1074,
	1075, 1076, 1077, 1078, 0, 1095, 1096, 1097, 1098, 1099,
	636, 1087, 1089, 1072, 1079, 1080, 1082, 0, 332, 333,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 345,
	0, 344, 346, 348, 349, 350, 840, 351, 352, 353,
	356, 357, 358, 360, 719, 361, 362, 363, 364, 365,
	366, 0, 842, 368, 369, 370, 371, 372, 374, 376,
	720, 377, 378, 379, 381, 383, 0, 0, 0, 845,
	0, 0, 0, 387, 388, 389, 390, 391, 392, 0,
	393, 394, 398, 400, 401, 402, 403, 404, 405, 408,
	0, 410, 412, 0, 413, 416, 0, 417, 418, 419,
	420, 421, 422, 423, 424, 0, 425, 0, 426, 427,
	429, 0, 432, 433, 434, 435, 436, 0, 437, 0,
	0, 438, 439, 441, 442, 443, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 0, 457,
	458, 459, 461, 0, 462, 463, 466, 467, 468, 469,
	0, 471, 0, 0, 472, 473, 474, 0, 0, 475,
	476, 477, 478, 479, 480, 483, 0, 485, 486, 487,
	488, 489, 490, 491, 722, 493, 494, 495, 496, 497,
	498, 499, 0, 0, 500, 502, 503, 0, 0, 0,
	858, 518, 519, 520, 521, 522, 523, 524, 526, 0,
	528, 529, 530, 0, 531, 532, 533, 534, 0, 535,
	536, 537, 538, 539, 541, 544, 545, 546, 547, 0,
	550, 551, 552, 553, 554, 555, 556, 558, 559, 560,
	562, 563, 564, 723, 565, 566, 567, 568, 0, 570,
	571, 724, 573, 574, 576, 577, 578, 579, 580, 581,
	733, 0, 583, 0, 584, 585, 586, 587, 588, 0,
	590, 591, 592, 593, 594, 595, 598, 599, 600, 602,
	603, 0, 604, 605, 0, 607, 608, 861, 610, 611,
	612, 613, 614, 0, 734, 615, 0, 616, 0, 617,
	618, 619, 620, 621, 622, 623, 625, 0, 0, 627,
	628, 629, 631, 632, 633, 634, 637, 638, 639, 640,
	641, 0, 642, 644, 646, 725, 0, 0, 1091, 0,
	0, 0, 0, 0, 0, 647, 648, 0, 515, 509,
	465, 507, 508, 512, 513, 516, 342, 0, 359, 843,
	0, 407, 444, 0, 0, 0, 504, 0, 557, 561,
	0, 0, 0, 0, 0, 0, 415, 0, 848, 0,
	854, 0, 860, 0, 626, 0, 850, 851, 856, 347,
	0, 649, 721, 0, 0, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 852,
	849, 853, 859, 847, 857, 844, 855, 0, 548, 482,
	0, 575, 354, 399, 386, 428, 470, 582, 0, 0,
	460, 630, 395, 484, 0, 375, 517, 0, 606, 481,
	0, 589, 609, 0, 501, 380, 540, 596, 597, 841,
	846, 0, 862, 0, 384, 385, 506, 367, 514, 0,
	0, 569, 527, 525, 0, 492, 549, 0, 0, 0,
	414, 0, 409, 505, 645, 373, 624, 543, 510, 464,
	572, 601, 411, 396, 397, 440, 542, 430, 382, 635,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 431,
	0, 0, 643, 0, 0, 0, 0, 0, 0, 0,
	406, 0, 0, 0, 0, 0, 0, 636, 0, 0,
	0, 0, 0, 0, 0, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 343, 345, 0, 344, 346,
	348, 349, 350, 840, 351, 352, 353, 356, 357, 358,
	360, 719, 361, 362, 363, 364, 365, 366, 0, 842,
	368, 369, 370, 371, 372, 374, 376, 720, 377, 378,
	379, 381, 383, 0, 0, 0, 845, 0, 0, 0,
	387, 388, 389, 390, 391, 392, 0, 393, 394, 398,
	400, 401, 402, 403, 404, 405, 408, 0, 410, 412,
	0, 413, 416, 0, 417, 418, 419, 420, 421, 422,
	423, 424, 0, 425, 0, 426, 427, 429, 0, 432,
	433, 434, 435, 436, 0, 437, 0, 0, 438, 439,
	441, 442, 443, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 0, 457, 458, 459, 461,
	0, 462, 463, 466, 467, 468, 469, 0, 471, 0,
	0, 472, 473, 474, 0, 0, 475, 476, 477, 478,
	479, 480, 483, 0, 485, 486, 487, 488, 489, 490,
	491, 722, 493, 494, 495, 496, 497, 498, 499, 0,
	0, 500, 502, 503, 0, 0, 0, 858, 518, 519,
	520, 521, 522, 523, 524, 526, 0, 528, 529, 530,
	0, 531, 532, 533, 534, 0, 535, 536, 537, 538,
	539, 541, 544, 545, 546, 547, 0, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 562, 563, 564,
	723, 565, 566, 567, 568, 0, 570, 571, 724, 573,
	574, 576, 577, 578, 579, 580, 581, 733, 0, 583,
	0, 584, 585, 586, 587, 588, 0, 590, 591, 592,
	593, 594, 595, 598, 599, 600, 602, 603, 0, 604,
	605, 0, 607, 608, 861, 610, 611, 612, 613, 614,
	0, 734, 615, 0, 616, 0, 617, 618, 619, 620,
	621, 622, 623, 625, 0, 0, 627, 628, 629, 631,
	632, 633, 634, 637, 638, 639, 640, 641, 0, 642,
	644, 646, 725, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 647, 648, 0, 515, 509, 465, 507, 508,
	512, 513, 516,
}

var yyPact = [...]int32{
	10945, -1000, 431, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1705, 1705, -1000, -1000, 3904, 1365, 14169, 16503, 16119, 4014,
	2605, 3078, 113487, 90762, 1705, 1875, 1835, 1794, 91772, 112982,
	112477, 76622, 76117, 2300, 1393, 1356, 90257, 1338, 1376, -1000,
	2445, 91772, 56967, 56967, 89752, 91772, 89247, 91772, 59501, 91772,
	4992, 4283, 4283, 4218, 2857, 3144, 69602, -1000, 1899, 1074,
	999, -1000, -1000, 4754, 80662, 425, 111972, 91772, 1345, 10945,
	4831, -1000, -1000, 2864, 4227, 80662, 4346, 4226, 999, 91772,
	-1000, 2134, 2979, 2536, 4781, 111467, 91772, 91772, 55439, 91772,
	3985, 110962, 110457, 3422, 109952, 66067, 4013, 91772, 1855, 91772,
	91772, 2710, 109447, 91772, 91772, 1375, 3260, 63541, 63541, -1000,
	-1000, 2028, 2025, -1000, -1000, -1000, 80157, 88742, 108942, 108437,
	1720, 3412, 2727, 69602, 91772, 91772, 91772, 91772, 69602, 63541,
	2855, 54910, 107932, 69602, 91772, 69602, 91772, 91772, 91772, 91772,
	91772, 1851, 63036, 62531, 91772, 107427, 3983, 91772, 91772, 2499,
	3646, -1000, 106922, 106417, 105912, 118880, 118393, 4926, 4919, 54381,
	4919, 105407, 72127, 71622, 71117, 70612, 104902, 104397, 4275, 65562,
	65057, 64552, -1000, -1000, -1000, 1714, 3408, -1000, -1000, -1000,
	3982, 2696, 1840, -1000, 2852, -1000, -1000, -1000, -1000, -1000,
	-1000, 1692, 4270, 2347, -1000, 93792, 88237, 87732, 2582, -1000,
	-1000, 1063, 4590, 4992, 4992, 4743, 68087, 1582, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4588, 2881, 3334, 554, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 4831, 2864, 4831, 4992,
	4381, 4992, -1000, -1000, -1000, -1000, 91772, -1000, 4992, 1374,
	-1000, 4217, 535, 1109, -1000, 987, 987, 987, 3889, 987,
	4216, 1575, 641, 972, -1000, 3803, 2339, 51255, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2494, 3829,
	56462, -1000, 91772, 56462, -1000, 554, 4585, 2871, 3333, -1000,
	56462, 91772, 2793, 56462, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 91772, 4326, 4326, 4326, 4326, 998, 998,
	4326, 4326, 1530, 1114, -1000, -1000, -1000, 4983, 4983, -1000,
	-1000, -1000, -1000, 1055, -1000, 87227, -1000, -1000, -1000, -1000,
	419, -1000, -1000, -1000, 80662, -1000, 80662, 15953, 3736, 3144,
	-1000, -1000, 68087, -1000, 1369, -1000, 575, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3360, 4752, 4752, 4752, 4269, 1899,
	-1000, -1000, 614, 611, 1074, 32295, 32295, -1000, 4214, -1000,
	448, -1000, 575, 69097, 1366, 416, 91772, -1000, 1150, 416,
	37437, -1000, -1000, 2801, -1000, 450, -1000, 2796, 2067, -1000,
	3216, 91772, 3965, 103892, 80662, 80662, 920, -1000, -1000, -1000,
	-1000, -1000, 987, 103387, 91772, 1690, 102882, 4925, 69602, 69602,
	91772, 1826, 69602, 91772, 3734, 2482, -1000, 2436, 3332, -1000,
	4817, 1915, 4932, 542, 1181, 91772, 91772, -1000, 545, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1205, 2291, 1399, 4816, 1915, 4815, 3620,
	102377, 1825, 4813, 3782, 1915, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1686, 1491, 91772, 2601, 4213, 91772,
	1150, 4807, -1000, 3800, 3267, 117419, 91772, 1915, 1915, -1000,
	-1000, -1000, -1000, 12578, 4909, 4727, 12829, 4908, 4726, 15724,
	4906, 16020, 4905, 86722, 86217, 3619, 91772, 85712, 2800, 1362,
	2766, 2769, 2774, 2518, 16457, 1362, -1000, 575, 2426, 3536,
	91772, 91772, 91772, 2865, 1361, 4212, 4904, 16237, 2879, 7871,
	2496, 1846, 3142, 4210, 4209, 91772, 2419, 1927, 4725, 2418,
	3733, 1927, 4725, 2737, 2765, 4899, 2280, 3132, 3552, -1000,
	1044, 4898, 478, -1000, 4897, 523, -1000, 4207, 4896, 516,
	4895, -1000, 3659, 119367, -1000, -1000, -1000, -1000, -1000, 1905,
	-1000, 527, -1000, -1000, -1000, -1000, -1000, 1240, 3396, 1237,
	1237, 1237, -1000, -1000, -1000, -1000, -1000, 645, 648, -1000,
	-1000, -1000, -1000, 3382, 1359, 3382, 3382, -1000, 3399, 3382,
	516, 4893, 101872, 1358, 4891, 101367, 100862, 498, 4890, -1000,
	3732, 4767, 4888, 495, 4887, -1000, 495, 4886, 495, 4885,
	493, 4882, -1000, 1915, 4881, -1000, 4880, 63541, 3777, 288,
	4879, -1000, 288, 4878, 288, 4877, -1000, 3617, -1000, 2153,
	-1000, -1000, -1000, 4925, 63541, 91772, -1000, 3303, -1000, 4962,
	66572, 3069, -1000, 404, -1000, 450, 4992, 3799, 49713, 49199,
	91772, 1436, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3209, -1000, 2785, -1000, -1000, -1000, -1000, -1000, -1000, 100357,
	-1000, -1000, -1000, 4971, 117419, 77632, 63541, 78642, 1355, 91772,
	-1000, 91772, -1000, -1000, -1000, -1000, 77632, 3731, 63541, 3730,
	2339, -1000, 400, -1000, 50227, 1345, -1000, -1000, -1000, 4287,
	3803, -1000, 394, -1000, 417, -1000, 1150, 386, -1000, 2756,
	-1000, 375, 4052, 4205, 575, 4925, 4925, 4925, -1000, -1000,
	-1000, -1000, 368, 3037, -1000, 91772, -1000, 91772, 91772, 91772,
	4326, 4326, 91772, 91772, 91772, 4326, 4326, 91772, 4326, 4326,
	-1000, -1000, -1000, 37437, -1000, -1000, -1000, 4992, 588, -1000,
	229, 91772, 91772, 91772, 117419, 117419, 69602, 69602, 53852, 91772,
	91772, 69602, 69602, 3729, 3627, 1341, -1000, -1000, -1000, -1000,
	-1000, -1000, 4204, 68087, -1000, -1000, 29721, 575, -1000, 26078,
	37437, 3311, 3723, 3727, 2188, 4244, 3307, -1000, 36923, 2932,
	41549, 3796, 1074, -1000, -1000, 1074, 1074, 37437, -1000, 3360,
	-1000, -1000, 4223, 307, -1000, 26597, -1000, -1000, 37437, 37437,
	37437, 37437, 37437, 2625, 4771, -1000, -1000, -1000, -1000, 31266,
	-1000, -1000, 575, 1188, 918, -1000, -1000, 1334, -1000, 1133,
	1331, 575, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1437, 4992, 1434, 37437, 1660, 3090, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1324, 1323, 3726, -1000, 1322, 1319, 1313,
	1308, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1306, 1297,
	1296, 1294, 1291, 1290, 1286, 1278, 1277, 1273, 1272, 1269,
	1268, 1267, 1265, 1264, 1262, 1261, 1253, 1252, 1251, 1152,
	1248, 1247, 1246, 1245, 1244, 1243, 1241, -1000, 3382, -1000,
	3382, 3382, 1237, 1237, 1240, -1000, -1000, 3399, 3382, 1237,
	-1000, -1000, 648, 645, -1000, -1000, -1000, -1000, -1000, 564,
	1228, -1000, 575, -1000, 91772, 37437, 91772, 416, 4969, 91772,
	357, 15628, -1000, 3296, 2864, -1000, 2274, -1000, -1000, -1000,
	1727, 4968, 67077, -1000, 91772, 4085, 4068, 4572, 4320, 1029,
	4805, 4967, 987, 91772, 4540, 4804, 99852, -1000, 1227, 1227,
	2999, 91772, 1226, 4966, 117419, 2850, 2106, -1000, 63541, 4923,
	4876, 2775, -1000, -1000, 117419, -1000, 453, 27644, -1000, 27644,
	4746, 4063, 52265, -1000, 872, 91772, 91772, 91772, 91772, -1000,
	91772, 4874, -1000, 4872, 91772, 1010, 4802, 1675, 4992, 4871,
	61521, 4801, -1000, 99347, 1224, 4200, 2741, 63541, 91772, 1832,
	4197, 4870, -1000, 77127, 1181, 4992, 4964, 3724, -1000, -1000,
	341, -1000, 1929, 2258, -1000, 2571, 2565, 73120, 1856, 1852,
	3818, 4195, 2334, 1894, 91772, 3104, 91772, 3795, 4571, 1040,
	3011, 2373, -1000, 1222, 80662, 2008, 341, -1000, 4570, 3204,
	2563, 3104, 1271, 91772, 2000, 341, 4568, 4540, 2206, -1000,
	3259, 119367, 1044, -1000, 4267, -1000, 1044, 1044, 4266, 2684,
	1915, 1915, -1000, 91772, 341, 1982, 2149, 91772, 15871, 4868,
	4724, 15018, 4866, 91772, -1000, 927, -1000, 4567, 2343, 4566,
	-1000, 75124, 4564, 2336, 4563, 1741, 4562, 2335, 4560, 4557,
	4555, 2775, -1000, 98842, 3286, -1000, 2775, -1000, -1000, 1412,
	-1000, 4279, -1000, -1000, -1000, -1000, 3867, -1000, 3909, 2665,
	2021, 3808, 4554, 4550, 8008, 98337, 4548, 3200, -1000, -1000,
	4190, 4700, -1000, -1000, -1000, -1000, 2203, 3009, -1000, 2821,
	1044, 1044, 91772, -1000, 91772, -1000, -1000, 575, 4546, 3892,
	-1000, -1000, 2480, 4062, 4061, 1032, 4545, -1000, 116932, 91772,
	91772, 4543, 8008, 97832, 4542, 3196, 4541, 62026, 78137, 78137,
	4536, 4535, 8008, 97327, 4533, 3195, 4532, 4531, 4530, 1533,
	-1000, 4528, 4718, 4527, 1041, 4992, 2477, 2476, 2469, -1000,
	-1000, 1181, 4526, 91772, 91772, 2745, 4524, -1000, 2721, 3223,
	2721, 4522, 61521, -1000, 2721, 2721, 4520, 1040, 1040, 4514,
	4512, 2071, 4511, 91772, 91772, 91772, 91772, 91772, 3456, 3380,
	3377, 1031, 415, 4509, -1000, 3348, -1000, 11954, 2330, 2804,
	2588, -1000, 5000, 4991, -1000, 91772, 91772, -1000, -1000, -1000,
	91772, 91772, -1000, 91772, 91772, 117419, -1000, 117419, 1397, 1400,
	3657, -1000, 4983, 4506, -1000, 4505, 4495, 4490, -1000, 1218,
	-1000, 600, 37437, -1000, 4983, -1000, -1000, -1000, -1000, 4983,
	-1000, 4593, 4583, 4983, -1000, 1210, -1000, 4983, -1000, -1000,
	3382, 3382, -1000, -1000, 117419, 478, 4864, 117419, -1000, 4054,
	4861, 4053, 4860, -1000, 52265, 52265, 117419, -1000, 91772, -1000,
	69602, 69602, -1000, 69602, -1000, 69602, -1000, 69602, 69602, 1191,
	91772, 91772, 524, 61521, 4856, 63541, 63541, 63541, 63541, -1000,
	-1000, -1000, -1000, -1000, 91772, 499, 3366, 4962, 1874, -1000,
	-1000, -1000, -1000, -1000, 91772, -1000, -1000, 414, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 414, -1000, -1000, -1000,
	-1000, -1000, 1410, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	91772, -1000, 999, 351, -1000, 4489, 404, 91772, 91772, 2287,
	69602, 69602, 69602, 91772, 91772, 91772, 3545, 91772, 91772, 91772,
	91772, 2423, 449, -1000, 91772, 347, -1000, -1000, 340, 4344,
	76622, 240, 78642, -1000, 2339, 56462, -1000, -1000, -1000, 96822,
	3801, 91772, 91772, -1000, 91772, -1000, 91772, -1000, 91772, 91772,
	91772, 91772, 91772, -1000, 3588, -1000, -1000, -1000, -1000, 2252,
	-1000, -1000, -1000, -1000, 91772, 91772, -1000, -1000, -1000, 91772,
	91772, -1000, 91772, 91772, 339, -1000, 80662, 2634, 2557, 4767,
	3006, 3002, 4650, 4642, 4640, 4638, 4636, 4633, 4629, 4628,
	91772, 91772, 4188, 4185, 4627, 4626, 117419, 1044, 117419, 11052,
	-1000, -1000, 906, 182, 37437, 37437, 37437, -1000, 15628, 4985,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15436, -54,
	-1000, -1000, -1000, -1000, -1000, 2001, 4289, -1000, 1608, -1000,
	2100, -1000, -1000, 413, 15628, -1000, 43091, -1000, -1000, -1000,
	2614, 15628, -1000, 41035, 41035, 2180, 91772, 2874, -1000, 2874,
	289, -1000, 6704, 3311, 3723, 4342, 85207, 32295, 117419, 91772,
	4582, 37437, 37437, 37437, 37437, 37437, 37437, 37437, 37437, 37437,
	37437, 37437, 37437, 37437, 37437, 37437, 37437, 4682, 37437, 4483,
	3392, -1000, -1000, 4487, 1172, 2003, 27644, -1000, -1000, 1184,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 578, 578, 444, 6945, 6945, 954,
	1188, 4751, 575, 15082, 412, 548, 575, -1000, -1000, -1000,
	32810, 37437, 52265, 36408, 575, -1000, 29721, -1000, 2241, 4983,
	4655, 15628, 3090, 4233, 1511, 1187, 37437, 37437, 1186, 4983,
	4983, 4983, 4983, 37437, 2510, 37437, 37437, 42577, 37437, 37437,
	31781, 37437, 37437, 37437, 37437, 37437, 2683, 37437, 3209, 44119,
	2678, 37437, 35894, 30751, 37437, 37437, 37437, 905, 37437, 37437,
	37437, 3209, 4342, 37437, 902, 334, -1000, 4069, 333, 37437,
	-1000, 91772, 4582, 37437, 37437, 37437, 37437, 4483, 3392, 4487,
	1172, 1184, -1000, -1000, -1000, 2064, 2459, -1000, 4184, -1000,
	3888, 60006, 4005, 91772, 616, -1000, 1409, 91772, -1000, -1000,
	4299, 46669, 46669, 3834, 3834, -1000, -1000, 73625, 91772, 3794,
	4021, 4855, 1734, 4762, 1183, -1000, 4540, 2956, 4854, 4183,
	4800, -1000, 10325, 74635, 10061, 2212, -1000, -1000, 3793, 3351,
	1181, -1000, 72632, 4182, 2849, 91772, 91772, 1680, -1000, -1000,
	-1000, -1000, -1000, -1000, 2466, 91772, -1000, -1000, -1000, 27644,
	-1000, 332, -1000, 1408, 3721, 91772, -1000, 91772, 1182, 1181,
	1181, 1181, 1181, 1181, -1000, 91772, 2192, 91772, 1900, 73625,
	3788, 4852, 3077, -1000, -1000, 91772, 2165, -1000, -1000, 4851,
	3767, 4961, 4796, 987, 37437, 27644, 5017, -1000, 4958, 3188,
	48184, 91772, 1925, 531, -1000, 80662, 4723, 607, 987, -1000,
	448, -1000, 2465, 117419, 4992, 3767, 3767, 9538, 91772, 91772,
	91772, -1000, 1857, -1000, -1000, 2695, 91772, -1000, 91772, 27644,
	91772, 91772, -1000, 4795, 96317, -1000, 117419, 91772, -1000, 1179,
	4087, 1606, 1590, 4033, 84702, 91772, 95812, 95307, 91772, 91772,
	79652, 1923, 1911, 91772, 2755, 79147, 91772, 2753, -1000, 91772,
	2363, -1000, -1000, 63541, -1000, 3911, 2751, 29210, 12552, 91772,
	91772, 4176, 91772, 14607, 91772, 91772, -1000, 91772, -1000, -1000,
	-1000, -1000, -1000, 1044, -1000, -1000, -1000, 91772, 91772, 1044,
	1044, 7929, 91772, 91772, 91772, 13721, 341, 1978, 2063, 3194,
	91772, 1988, 341, 1972, 2009, 80662, 2225, 91772, 91772, 63541,
	329, -1000, -1000, 117906, 114497, -1000, 2630, -1000, -1000, -1000,
	527, -1000, 119367, 91772, 91772, 63541, -1000, 91772, 91772, 63541,
	91772, 63541, -1000, -1000, 91772, 1740, -1000, 50741, -1000, -1000,
	91772, 91772, -1000, 4699, 94802, 37437, 4698, 91772, -1000, 91772,
	-1000, 1177, 4697, 91772, 63541, 91772, -1000, -1000, -1000, 94297,
	-1000, 84197, 3322, 2088, 63541, 4173, 4696, 4167, 2937, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 63541, 63541, 4480, 4479,
	91772, 91772, 91772, 27644, 63541, 328, 411, 2744, 4161, 91772,
	-1000, 84197, 63541, 4160, 91772, -1000, 409, 409, 409, 63541,
	91772, -1000, 84197, 63541, 4158, 91772, 63541, 91772, -1000, 63541,
	-1000, -1000, 91772, -1000, 91772, -1000, 4765, 91772, 91772, -1000,
	63541, 2397, 2444, 4477, -1000, 4463, 2590, -1000, 63541, 2872,
	-1000, 93792, 91772, -1000, 63541, 2159, 2872, -1000, -1000, 91772,
	-1000, -1000, 63541, 91772, 973, 91772, 63541, 3962, 2743, 896,
	2735, 3000, 91772, 91772, 4992, 4918, 91772, 4992, 93287, 27644,
	91772, 3544, 63541, 91772, 4461, 91772, 91772, 69602, 1176, 117419,
	69602, 53323, 69602, 69602, 3720, 117419, 91772, -1000, -1000, 76622,
	75612, 2326, 2685, 4460, -1000, -1000, 478, -1000, 523, -1000,
	4767, 4155, -1000, 516, 1697, 4983, 1397, 1396, 901, 2688,
	2342, 2284, 2224, 4983, -1000, 326, 898, 897, 4584, 4578,
	894, 37437, 893, -1000, -1000, 516, -1000, 91772, 4957, 91772,
	91772, 91772, 91772, -1000, 498, 2841, 4767, -1000, 495, 495,
	495, -1000, 493, 3470, 1915, -1000, -1000, 2158, 3719, -1000,
	288, 288, 288, 4764, 63541, 4337, 1175, 4455, -1000, 2864,
	-1000, 50227, 2241, 4983, -1000, -1000, 117419, -1000, 61016, 404,
	404, 3597, 91772, 408, 408, 408, 178, 198, 178, 1044,
	407, 526, -1000, 178, 178, 198, 4719, 4713, 4712, 4710,
	4706, -1000, 27644, 4263, 309, 91772, -1000, -1000, 61016, 4138,
	405, 4767, 530, -1000, -1000, 4791, 987, 91772, -1000, -1000,
	-1000, -1000, 4052, -1000, -1000, -1000, -1000, -1000, 3716, 3029,
	3001, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2691, 2327, 2289, 2631, -1000, -1000, -1000, -1000,
	4701, 4701, 4701, 4701, 4701, 4701, 4701, 4701, 4049, 4048,
	92782, 91772, 4701, 4701, 2836, 4625, 4956, 91772, 91772, 91772,
	117419, 117419, 69602, 69602, 3530, 69602, 69602, -1000, 886, 35380,
	-1000, 1502, 15, 15, 37437, 37437, -1000, 37437, -1000, 3936,
	-1000, 37437, 2614, 4317, -1000, 5011, 5011, 1167, -1000, 31266,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2729,
	404, 37437, 563, 1427, -1000, -1000, -1000, -1000, 4291, 46669,
	-1000, 4283, 4283, 2014, 1946, 4283, 91772, -1000, -1000, -1000,
	-1000, 4454, -1000, 318, 318, 437, 437, 437, -1000, 885,
	885, 885, 885, 885, 885, 444, 6945, 9780, 2265, 37437,
	37437, 4432, 4450, 1172, 2229, 37437, -1000, 3451, -1000, -1000,
	-1000, 4336, -1000, -1000, 2653, 3579, -1000, -1000, -1000, -1000,
	3570, 42577, 42577, -1000, -1000, -1000, 31266, 1171, -1000, -1000,
	-1000, -1000, 52265, -1000, 1169, 37437, -1000, -1000, 4737, -1000,
	-1000, 37437, 223, 97, -1000, -1000, 308, 884, 304, -1000,
	182, -1000, 882, 3387, -1000, 37437, 1511, 1168, -1000, 68592,
	4304, 3529, 3467, 490, 1509, 15391, 37437, 880, 879, 876,
	873, 15024, 865, 4334, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2030, 864, 863, 14769, 403, 862, 1671, -1000,
	42577, 42577, 42577, 1167, 860, 857, 6875, 14232, 34866, 34866,
	34866, 856, 13874, 37437, 226, 6621, 302, 296, 294, 292,
	27644, 291, -1000, 13669, 37437, 3738, 27644, 2667, 290, 432,
	849, -1000, 117419, 490, 423, 1444, 845, -1000, 575, 3579,
	13572, 3906, -1000, 402, 398, 387, 37437, 4291, 280, -1000,
	-1000, 1165, -1000, 4009, -1000, 15628, -1000, -1000, -1000, 3915,
	3897, 3466, -1000, -1000, 279, -1000, -1000, -1000, -1000, 4299,
	67077, 37437, 278, -1000, 575, 3915, 40521, 208, 4007, 81672,
	81672, 48689, -1000, 45644, 83187, 81672, 81672, 1419, 4332, 1162,
	1161, 575, -1000, -1000, -1000, 1152, 4143, 3943, -1000, 3943,
	844, 384, -1000, 117419, -1000, -1000, -1000, 91772, 1054, 91772,
	3560, 91772, 91772, 4764, 91772, 4955, 1040, 91772, 91772, 80662,
	4850, 114984, 2580, 10061, -1000, 4992, 68087, 3715, -1000, -1000,
	277, -1000, -1000, 1489, 2580, 4156, -1000, -1000, -1000, 3787,
	-1000, -1000, 2212, -1000, 834, -27, 4262, 276, -1000, -1000,
	-1000, 1405, 3951, 91772, 3034, 987, 91772, 4923, 2098, 2196,
	3314, -1000, 2544, -1000, -1000, 27644, 28155, 1831, -1000, 832,
	372, -1000, 117419, 4992, -1000, -1000, -1000, -1000, -1000, 1310,
	-1000, 91772, 68087, 68087, -1000, 1915, 1514, 1900, -1000, 91772,
	1969, 91772, 823, 91772, 91772, 3247, 1825, 91772, 3714, -1000,
	-1000, 4983, 63541, 63541, 2714, 4709, 2533, 2517, -1000, -1000,
	4278, 1764, 63541, 999, 4848, 4021, 13523, 3365, 4762, 3713,
	5022, 3012, -1000, -1000, 522, -1000, 575, -1000, 37437, 1150,
	4765, -1000, 78137, 987, 2324, 607, 4293, 4293, 91772, 820,
	4429, -1000, -1000, 4424, 4423, -1000, -1000, 83692, -1000, -1000,
	274, -1000, 485, 3755, 3344, 4847, -1000, 4788, 2011, 1788,
	37437, 1142, -1000, 2962, 1256, 1141, 1140, 91772, 2195, 3959,
	-1000, 4845, 4767, 4844, 4767, -1000, -1000, -1000, -1000, -1000,
	91772, 91772, 91772, 91772, -1000, 2191, -1000, -1000, -1000, -1000,
	2190, -1000, 2749, -1000, -1000, -1000, -1000, -1000, 2951, 2174,
	273, -1000, -1000, 27644, 27644, 27644, 4992, -1000, 341, -1000,
	1897, 1995, 2912, -1000, 3129, -1000, 341, 4422, 2907, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 341, 4421, 4540, 1967,
	-1000, 4417, -1000, 341, 1945, 1821, 91772, 91772, 91772, 4137,
	12861, 91772, 91772, 91772, 91772, 8351, 4416, 1533, 1900, 4415,
	-1000, -1000, -1000, -1000, 114497, 117906, -1000, 117906, -1000, 527,
	-1000, 500, 527, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 4413, -1000, 4767,
	4843, 15628, -1000, -1000, 1933, 37437, -1000, -1000, -1000, -1000,
	-1000, -1000, 3121, 2901, 4693, -1000, -1000, -1000, 288, 91772,
	63541, 2746, 2781, -1000, 272, -1000, 1407, -1000, -1000, 116445,
	117419, 4408, 4035, 63541, 91772, -1000, -1000, -1000, 3119, -1000,
	-1000, -1000, -1000, -1000, 3118, -1000, -1000, -1000, -1000, -1000,
	514, -1000, 514, 514, -1000, 4407, 4406, 3190, 91772, 63541,
	-1000, -1000, -1000, -1000, -1000, -1000, 91772, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2042, 4405, 2316, 4404, 2312,
	4402, -1000, 4401, 2309, 4400, 2304, 4399, 2738, 2732, 2722,
	-1000, 4398, 4395, 4992, 4787, 4767, -1000, 4842, 4767, 260,
	-1000, -1000, 3347, 3343, -1000, 3957, -1000, 68087, -1000, -1000,
	-1000, 117419, -1000, -1000, -1000, 91772, 91772, -1000, -1000, 117419,
	-1000, -1000, 4136, 4135, 1573, 91772, 63541, 63541, 63541, -1000,
	-1000, -1000, 91772, -1000, -1000, 1392, 1384, 4983, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 818, -1000, -1000, 1424,
	-1000, -1000, 1424, 259, -1000, -1000, 478, 117419, 4767, 4047,
	4767, 4044, -1000, 91772, -1000, -1000, -1000, -1000, -1000, 257,
	-1000, -1000, 1138, 91772, 61521, -1000, 2799, -1000, 2154, 80662,
	-1000, 450, -1000, -1000, 817, -1000, 489, -1000, -1000, 63541,
	91772, 178, 371, -1000, 91772, 91772, 2303, 2294, 2275, 2263,
	2262, 266, -1000, 2019, 63541, -1000, -1000, 221, 77632, -1000,
	63541, 4841, -1000, -1000, 999, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3159, 3154, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 91772, 91772, 4624, 91772, 4623, -1000,
	-1000, 91772, 4701, 117419, 4622, 4618, 4617, 4616, 4614, 4613,
	4612, 1044, 4611, 4608, -1000, 37437, -1000, 801, 800, 37437,
	796, 15628, 15628, 1381, 15628, -1000, -1000, 4316, -1000, 1913,
	-1000, -1000, 34352, 370, -1000, -1000, 1427, -1000, 1115, -1000,
	3953, 4232, 37437, 208, 91772, 91772, 4283, 4283, 4283, 4283,
	91772, -1000, 37437, 37437, 1605, 848, 37437, 42577, 42577, -1000,
	37437, 670, -1000, -1000, -1000, -1000, 4331, -1000, -1000, 2647,
	3579, 37437, -1000, -1000, 1771, 1770, -1000, -1000, -1000, -1000,
	833, 696, 253, -1000, 31266, 792, 33838, 367, -1000, 575,
	13467, -1000, -1000, 1116, -1000, -1000, -1000, 786, 4992, 3166,
	-1000, 37437, 13310, -1000, 1502, -1000, -1000, 113992, 37437, 3579,
	4133, 4131, 37437, 37437, 3528, 4261, -1000, -1000, 3414, 13203,
	-1000, -1000, -1000, -1000, 117419, -1000, 37437, -1000, 2797, -1000,
	-1000, 37437, -1000, 117419, 42577, 42577, 42577, 42577, 42577, 42577,
	42577, 42577, 42577, 42577, 42577, 42577, 42577, 3415, 42577, 1133,
	464, 464, 464, -1000, -1000, 33324, 37437, 37437, 117419, 782,
	780, 777, -1000, 37437, 226, 37437, -1000, -1000, -1000, -1000,
	252, -1000, 37437, 27644, 6566, 771, 45139, 247, 1725, -1000,
	3579, 37437, -1000, 1444, 3906, 37437, 4130, 4129, 3906, -1000,
	768, -1000, 766, 37437, 37437, 37437, 13136, 4232, -1000, 999,
	-1000, -1000, 32295, 1219, 999, 1555, 91772, 575, 3915, -1000,
	15628, 1406, 91772, -1000, 15628, 3780, 46669, 4100, 4099, 46669,
	4064, 4091, 4091, 4091, -1000, 1862, -1000, 91772, 1132, -1000,
	81672, 83187, 81672, 81672, 64046, 760, 4007, -1000, -1000, 67582,
	1131, -1000, -1000, -1000, 3762, 1130, 44629, 37437, 575, 37437,
	1915, -1000, -1000, -1000, 4043, 2906, 73625, -1000, 2538, 74130,
	1054, 4105, 1040, 1585, -1000, 1023, 4954, -1000, 1055, 999,
	-1000, 246, 4540, 4033, 91772, 10061, 1128, -1000, -1000, -1000,
	3355, 37437, -1000, -1000, 360, -1000, 356, 1823, -1000, 114497,
	37437, 37437, -1000, 91772, 2212, 91772, 4154, -1000, -1000, 4260,
	114497, 114497, -1000, 5021, 28155, 4393, -1000, -1000, -1000, -1000,
	1127, 91772, 4762, 1125, 92277, 63541, 4923, -1000, 91772, -1000,
	-1000, 91772, 3420, -1000, 4771, 1588, 1120, 42577, 91772, 3497,
	-1000, 3064, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1115, 5000, 4991, 117419, -1000, 91772, 4755, 752, 352, -1000,
	-1000, 91772, -1000, -1000, -1000, -1000, -1000, 1112, -1000, -1000,
	542, -1000, -1000, -1000, 2906, 1054, 807, 3593, 1675, 1514,
	61521, -1000, 288, 288, 63541, 63541, -1000, -1000, 4992, 4992,
	998, 4992, 288, 4764, 91772, 4762, -1000, 2613, 91772, -1000,
	4390, 3999, -1000, 91772, 46669, 48184, 12894, 4127, -1000, -1000,
	4293, 82682, 4293, -1000, 1107, -1000, 514, 3562, 4992, 91772,
	91772, -1000, -1000, -1000, -1000, 27644, 28155, 27644, -1000, 4001,
	-1000, -1000, -1000, 91772, 4838, 3275, -1000, 82177, -1000, 4033,
	12470, 91772, 2990, 91772, 91772, -1000, 91772, 47174, -1000, -1000,
	3272, 7674, 1040, 3046, 2713, 1813, -1000, -1000, 1915, 2037,
	2990, 91772, -1000, 91772, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2170, 91772, -1000, -1000, 29210, -1000, -1000, -1000, -1000,
	-1000, 91772, 91772, 91772, 91772, 1981, 4259, 91772, 91772, 1965,
	4258, 91772, 91772, 91772, 91772, 91772, 91772, -1000, 4389, -1000,
	3108, 341, 1934, 1342, 2887, -1000, 4386, -1000, 341, 1891,
	1238, 91772, -1000, 63541, -1000, -1000, -1000, 1810, 439, 91772,
	-1000, 91772, -1000, 12060, 2990, 91772, -1000, 2898, -1000, -1000,
	4379, 2256, 4378, 4373, 2314, 3283, 2255, 4372, 27644, -1000,
	28691, 748, 739, 738, 91772, 4772, 1106, 288, 2395, 91772,
	91772, -1000, -1000, -1000, 91772, 91772, 4126, -1000, -1000, 1533,
	973, 91772, 91772, 91772, 91772, 63541, 91772, 91772, 91772, 91772,
	63541, 3705, 3760, 3770, 91772, 4992, 3341, 4837, -1000, 91772,
	-1000, -1000, 1805, 3237, -1000, 4952, 4041, 4038, 2835, 2332,
	2332, 3699, 178, 288, 288, -1000, 4767, -1000, -1000, 974,
	-1000, -1000, -1000, -1000, -1000, 734, -1000, 91772, -1000, 91772,
	4767, -1000, 3470, 3470, -1000, 2150, -1000, 3230, 91772, 239,
	4992, 3039, 61016, 3041, -1000, 178, 1044, 526, -1000, 91772,
	91772, 91772, 91772, 91772, -1000, 27644, -1000, -1000, -1000, -1000,
	-1000, 4767, 4328, 240, 91772, -1000, -1000, -1000, 4607, 4606,
	4701, 4602, 4701, 4601, -1000, 733, 4705, 4705, 4705, 4705,
	4705, 4705, 4705, 4600, 4705, 4705, 1502, -1000, -1000, -1000,
	-1000, -1000, 1890, -1000, 231, -1000, 37437, -1000, 52265, -1000,
	-1000, 4229, 4257, 15628, -1000, -1000, 91772, 91772, 91772, 91772,
	-1000, 458, 1822, 37437, 37437, 507, 676, 584, 1822, 37437,
	37437, -1000, -1000, 2376, 2866, 2861, 37437, 37437, -1000, 11922,
	-1000, 228, -1000, 37437, -1000, -1000, 4992, -1000, -1000, 15628,
	37437, 732, 2562, -1000, 11819, 3906, 4692, 4689, -1000, -1000,
	3906, 37437, 3486, -1000, 727, 15628, 723, 11762, -1000, 238,
	238, 436, 436, 436, -1000, 740, 740, 740, 740, 740,
	740, 464, 4327, 3403, -1000, 1812, 11716, 11647, 11600, 719,
	-1000, -1000, -1000, 226, 11531, -1000, 40007, -1000, -1000, 718,
	1674, 1669, -1000, 4239, 44119, 3487, -1000, 37437, 327, 39493,
	3906, -1000, -1000, 715, -1000, 4688, 4686, 713, -1000, -1000,
	11466, 11466, 11466, 119367, 4229, 712, 307, 3854, 47174, 3807,
	-1000, -1000, 3888, -1000, -1000, 37437, -1000, 91772, 4007, 46669,
	46669, 4243, 4097, 46669, -1000, -1000, -1000, -1000, -1000, 69602,
	1104, 91772, -1000, -1000, -1000, -1000, 81672, 1102, 91772, 91772,
	-1000, 55957, 3738, 1101, 305, 10479, 1086, 1915, 3478, -1000,
	2538, 1099, -1000, 3020, 4021, -1000, 4253, 225, -1000, -1000,
	-1000, 4778, 3755, 1928, 3278, -1000, -1000, 73625, 91772, 3779,
	1448, 4764, 4763, 4762, -1000, 1096, 4125, 2580, 119854, -1000,
	15628, 4992, 3697, 117419, -1000, 15628, 15628, 2442, -1000, 162,
	91772, 114497, -1000, 220, -1000, 1405, -1000, 91772, 4298, 2903,
	4951, 91772, 1008, 4786, -1000, 2124, -1000, -1000, -1000, 4765,
	4765, 37437, 1812, 987, 4950, -1000, 4740, -1000, -1000, 4037,
	-1000, -1000, 91772, -1000, 4992, -1000, 2192, 27644, 453, 2138,
	3755, 73625, 3757, 91772, 3075, -1000, 2137, 288, 288, -1000,
	-1000, -1000, -1000, -1000, 4947, 1928, 2990, 69602, -1000, -1000,
	3378, -1000, 4684, 4035, 63541, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 208, -1000, -1000, 48184, -1000, -1000, -1000, -1000,
	37437, -1000, 1864, 3072, 4324, -1000, -1000, -1000, -1000, 1401,
	4325, -1000, 91772, 1514, -1000, 81167, -1000, -1000, -1000, 218,
	-1000, 1987, -1000, 3043, 2909, -1000, 215, 2990, 214, 204,
	-1000, 4777, 1028, 4748, 37437, 4685, 4916, 4915, -1000, -1000,
	3497, 4676, 4946, 973, -1000, -1000, -1000, -1000, 3497, -1000,
	7225, 117419, 1044, 973, 4767, 4767, -1000, -1000, -1000, -1000,
	4371, 4370, -1000, 91772, 63541, -1000, -1000, 91772, 63541, -1000,
	-1000, -1000, -1000, 4369, -1000, 91772, 91772, 91772, 91772, 91772,
	1958, 4245, 91772, 91772, 91772, 91772, -1000, -1000, -1000, 1791,
	-1000, 4767, -1000, -1000, -1000, 91772, 91772, 63541, 91772, 104,
	-1000, 4983, 4983, 117419, 301, -1000, 4983, 4983, 91772, 63541,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1487, 37437, 4368, -1000, -1000, -1000, -1000,
	3107, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 91772, 91772, 91772, 91772, 4836, 4767, -1000,
	4992, 4992, -1000, 4767, 117419, 117419, 91772, 91772, 91772, 4366,
	-1000, -1000, -1000, -1000, -1000, -1000, 4322, 76622, -1000, -1000,
	4767, 4767, 4767, -1000, -1000, 203, 91772, -1000, 4220, -1000,
	-1000, -1000, -1000, 1571, -1000, 178, 178, 178, 178, 178,
	-1000, -1000, 61016, 4767, 4701, 4701, -1000, 4701, -1000, 4701,
	4599, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	4705, -1000, -1000, 711, -1000, -1000, 10405, 710, 1662, 37437,
	4752, -1000, -1000, -1000, -1000, 1822, 1822, 37437, 37437, 37437,
	1822, 2376, -1000, -1000, 1822, 1822, -1000, -1000, 10226, -1000,
	15628, -1000, 1502, 4240, -1000, 708, -1000, -1000, 693, 289,
	91772, -1000, -1000, 37437, 42577, 4321, -1000, 37437, 37437, 37437,
	-1000, -1000, 202, 192, 1095, -1000, -1000, -1000, -1000, 3487,
	4239, -1000, -1000, 10104, 692, 1947, 15628, 3465, 688, -1000,
	-1000, -1000, -1000, 3906, 37437, 3791, 3906, 2711, 1662, 3952,
	3851, 190, -1000, 91772, 3454, 15628, -1000, -1000, 4243, -1000,
	1094, 37437, 46669, -1000, 1092, 91772, 189, -1000, 91772, 188,
	186, 117419, 176, -1000, 4944, 3776, 42063, 37437, 3946, -1000,
	4830, 4830, 3954, -1000, 3790, 27644, 1086, 4992, 4021, 91772,
	3088, 3088, 3560, 91772, -1000, 74130, 2544, 1521, 2538, -1000,
	91772, 2904, 687, 1054, 91772, 4764, 91772, -1000, -1000, 1943,
	4942, 47174, 80662, -1000, 172, -1000, 117906, -1000, 8601, -1000,
	1786, -1000, 3696, 1751, 4315, 156, -1000, 4291, 686, 2085,
	2055, 1907, 91772, 999, 145, 73625, 4835, 4923, -1000, 4675,
	4023, 4023, 9670, 2725, 900, -1000, 91772, -1000, -1000, 144,
	-1000, 91772, 2136, 664, 91772, 1514, 3227, 91772, 999, -1000,
	1082, 2613, 91772, 1081, 4772, 288, 473, 9472, 69602, 4935,
	4935, 91772, 28155, 1079, 1076, 1072, -1000, -1000, -1000, -1000,
	2990, 2989, -1000, -1000, -1000, -1000, -1000, 2989, 2449, 2989,
	47174, 52794, -1000, 91772, 91772, -1000, 9370, -1000, 4834, 4833,
	-1000, -1000, 1071, -1000, 4941, 4755, -1000, -1000, -1000, -1000,
	91772, 91772, 2634, 480, 2634, 479, 91772, -1000, -1000, -1000,
	4365, -1000, 91772, 63541, -1000, -1000, 4359, -1000, -1000, -1000,
	2990, -1000, -1000, -1000, -1000, 2314, 52265, 51760, -1000, 3283,
	1068, 1067, -1000, -1000, 1062, 9116, 91772, 91772, 424, 433,
	1909, 178, 3679, -1000, -1000, -1000, -1000, 4755, 663, -1000,
	-1000, -1000, 61016, 61016, 4124, -1000, -1000, -1000, -1000, -1000,
	91772, -1000, 221, -1000, -1000, -1000, -1000, -1000, 4701, -1000,
	-1000, -1000, -1000, -1000, 91772, 15628, 38465, 1822, 1822, 1822,
	-1000, 2825, 37437, -1000, -1000, -1000, 8496, 1935, 42577, 15628,
	15628, 15628, -1000, 37437, -1000, 37437, -1000, -1000, -1000, 1804,
	-1000, -1000, 3556, 275, -1000, 4939, 662, 4122, 37437, -1000,
	-1000, -1000, -1000, -1000, -1000, 3595, 3791, 652, -1000, 2983,
	-1000, 3974, 3979, 3949, -1000, 4291, 47174, -1000, 999, -1000,
	91772, 15628, -1000, 37437, 142, -1000, 141, -1000, -1000, 1419,
	55957, -1000, 1061, 91772, 138, -1000, 557, 42577, 8764, -1000,
	-1000, 3876, 37437, 3864, -1000, 3878, -1000, -1000, -1000, 4932,
	4932, -1000, -1000, 4932, 4932, 3672, 4992, 137, -1000, 46154,
	4291, -1000, 3560, 134, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 4105, 1056, -1000, -1000,
	4021, -1000, -1000, 3751, 3750, 2906, 2538, 1054, -1000, 1055,
	1549, 1470, 1465, 999, 131, 4033, 119854, 10061, -1000, -1000,
	428, -1000, -1000, 117419, 4652, 3178, 1751, -1000, 2702, -1000,
	-1000, -1000, 91772, -1000, 3850, -1000, 4769, 4768, -1000, -1000,
	91772, 1735, -1000, 4763, 4762, 91772, -1000, 2925, -1000, 2662,
	4107, 2421, 1015, 37437, 3102, -1000, 27644, 1514, 91772, 2906,
	1054, -1000, 3587, 1514, 4764, 649, 69602, -1000, 5009, -1000,
	46669, -1000, 4935, -1000, 3103, -1000, -1000, -1000, 70107, 37437,
	37437, 2544, 4765, 1051, 4765, 91772, 4765, -1000, -1000, 1045,
	3940, 1040, -1000, 4748, -1000, -1000, 37437, 2995, 4025, -1000,
	-1000, -1000, 1955, -1000, 1952, -1000, 91772, 2634, 418, 91772,
	-1000, 1043, 3666, -1000, 117419, -1000, 117419, 117419, 37437, -1000,
	-1000, -1000, 91772, -1000, -1000, 91772, 91772, 91772, 91772, 4767,
	-1000, 489, 468, 2332, 1514, 4767, -1000, 249, -1000, 4933,
	245, -1000, 15628, -1000, -1000, -1000, -1000, 30236, 1039, 1038,
	758, 642, 38979, 38979, 38979, 226, 37437, 1935, 130, 127,
	-1000, 3452, 3512, 3568, 3537, 37437, 27644, -1000, 3654, 15628,
	-1000, -1000, 640, 4121, -1000, -1000, -1000, 91772, 3970, 3969,
	67077, -1000, -1000, -1000, 126, 124, -1000, -1000, -1000, -1000,
	91772, 123, -1000, 115958, 42063, 224, 27644, 1812, 3739, 91772,
	3857, 15628, 3869, 4238, 4992, 4992, 4992, 4992, 58996, 4673,
	58491, -1000, -1000, 27644, -1000, -1000, -1000, -1000, -1000, 60511,
	-1000, 4105, -1000, 1928, 47679, 2544, 3560, -1000, -1000, 2538,
	4021, 3755, 4764, -1000, 1548, 1539, 4763, 2987, 1036, -1000,
	2580, -1000, -1000, 3151, 1035, 2086, -1000, -1000, 4932, -1000,
	-1000, 3155, -1000, 2984, 3071, 3068, -1000, -1000, -1000, 4931,
	946, 1944, -1000, 2908, -1000, 4118, 4117, 3930, -1000, -1000,
	-1000, -1000, 4540, 8306, 4930, 91772, -1000, -1000, 1514, 2125,
	3755, 91772, -1000, -1000, -1000, 1034, 120, -1000, 208, -1000,
	-1000, -1000, 119, -1000, 4983, 116, 112, 4023, 91772, 4023,
	987, 4023, 52265, 1427, 3940, -1000, 7692, 1015, -1000, 37437,
	91772, 91772, -1000, -1000, 1940, -1000, 2455, 1930, 2455, 108,
	102, 94, 7455, 198, 198, 1909, -1000, 178, -1000, -1000,
	-1000, 4314, -1000, -1000, 91772, 1006, 38465, -1000, 37437, 37437,
	1000, -1000, 3157, -1000, 43605, 2641, 2362, 6793, 3157, 3157,
	15628, -1000, -1000, -1000, 3791, 3517, 3510, -1000, 3583, -1000,
	3582, 3547, 3533, -1000, -1000, -1000, -1000, 3639, 397, 4237,
	4236, 422, 4929, 2388, 91, -1000, 91772, 3844, 3758, -1000,
	44119, -1000, 3766, -1000, -1000, -1000, 3848, 3948, -1000, -1000,
	3842, 1046, 3866, -1000, -1000, -1000, -1000, 162, -1000, 57986,
	162, -1000, -1000, 89, -1000, -1000, 1928, -1000, 88, -1000,
	1028, 4748, 37437, 4105, 4021, 3560, 2538, -1000, -1000, -1000,
	-1000, 4771, 997, 47174, -1000, 2613, 37437, -1000, -1000, -1000,
	91772, 3174, 1924, -1000, -1000, 69602, 69602, 999, 73625, 91772,
	-1000, -1000, 3931, -1000, 3934, 2996, 2996, 3018, 1932, 2314,
	-1000, -1000, 91772, 2108, 1514, 624, -1000, 5008, -1000, 70107,
	-1000, -1000, 4358, -1000, 76, -1000, 2725, 4291, 622, -1000,
	1427, -1000, -1000, 15628, 2634, 2634, 91772, -1000, -1000, -1000,
	4235, -1000, 69602, -1000, -1000, -1000, 91772, 61016, -1000, -1000,
	-1000, 69, 59, 38465, -1000, 2321, 4819, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 618, 4109, 4108, -1000, -1000, 3567,
	-1000, 3546, -1000, 3791, -1000, 91772, 91772, 91772, -1000, -1000,
	91772, -1000, 995, -1000, -1000, 3844, -1000, 42577, 42577, 4666,
	-1000, 42577, -1000, 3738, 992, -1000, 67077, -1000, -1000, 3888,
	91772, 3994, 991, -1000, -1000, 162, -1000, -1000, 60511, -1000,
	-1000, 47679, 91772, 91772, 7328, 1928, 3560, 4105, 4021, 4762,
	47174, 58, 69602, 7157, -1000, -1000, 2361, -1000, -1000, -1000,
	1984, -1000, -1000, -1000, -1000, -1000, 3926, 157, 152, 4763,
	-1000, -1000, 3367, -1000, -1000, 4667, -1000, -1000, -1000, 104,
	1514, 91772, -1000, -1000, -1000, -1000, 990, 2990, -1000, 2990,
	4107, -1000, -1000, -1000, -1000, -1000, 2634, 91772, -1000, -1000,
	468, -1000, -1000, 56, 2360, -1000, -1000, 1627, 37951, -1000,
	3501, 3498, -1000, -1000, 4106, 4042, 393, 380, -1000, 37437,
	-1000, 1812, 1812, -1000, 1812, 3765, 91267, -15, 3449, 52,
	-1000, 37437, -1000, -1000, -1000, -1000, 4748, -1000, 4105, 1928,
	3560, 1928, 46, -1000, 2987, 989, -1000, 4652, 614, 611,
	346, -1000, -1000, 4302, 4309, -1000, -1000, 987, 987, -1000,
	1514, 37437, -1000, 2990, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3499, 3494, 3653, 57481, 91772, 91772, 91772, 7015, 91772,
	29, -1000, 115471, 3748, 3989, 3910, 23, 91772, 1928, -1000,
	4105, 4291, -1000, 47174, 4771, 27133, 3146, -1000, 1984, 2054,
	2050, -1000, -1000, -1000, 22, 2990, -1000, -1000, -1000, 4739,
	1145, -1000, -1000, -1000, -1000, -1000, 0, 3791, 91267, 3756,
	1938, 5007, -1000, -1000, -1000, 3888, -1000, -1000, -1000, 1928,
	-1000, -1000, 4762, -25, -1000, -1000, -1000, -1000, -1000, 2613,
	-1000, 4761, 4760, -1000, 57481, 37437, -1000, 593, -1000, -1000,
	3556, 3744, 3744, 4997, 3858, 3427, -1000, 1928, -1000, 27133,
	69602, 3061, 3050, 4018, 15, -1000, 3512, 3556, 3791, -1000,
	985, 91772, 3989, 4291, -1000, 982, 69602, 69602, 91772, 517,
	3791, 3512, -1000, 91267, 3764, -1000, -1000, 27133, -1000, -1000,
	-1000, 4992, -1000, 3791, -26, 978, -41, -1000, -1000, 91267,
	-1000, -43, -1000,
}

var yyPgo = [...]int16{
	0, 5620, 5619, 3584, 128, 0, 37, 9807, 5617, 384,
	313, 378, 5616, 119, 107, 2283, 178, 97, 301, 391,
	5615, 5614, 5612, 5611, 39, 5610, 385, 5159, 11612, 10081,
	145, 5609, 323, 3378, 5608, 394, 322, 337, 5606, 214,
	5605, 5604, 167, 207, 5602, 291, 5600, 446, 5598, 32,
	5597, 5596, 287, 186, 406, 442, 437, 439, 5595, 362,
	403, 359, 368, 360, 5594, 13659, 1011, 3448, 8, 5593,
	5592, 1457, 5589, 5588, 5587, 346, 5586, 304, 5585, 5583,
	5582, 5581, 9, 397, 415, 5578, 354, 5577, 5576, 5575,
	114, 5574, 5571, 5566, 5565, 298, 333, 344, 5562, 377,
	364, 449, 270, 13841, 15408, 5560, 392, 232, 465, 192,
	9636, 5559, 19516, 5556, 5555, 19365, 18985, 18030, 5553, 18010,
	16524, 230, 241, 281, 369, 380, 420, 309, 456, 1134,
	399, 24, 198, 398, 5552, 5551, 5550, 175, 5549, 5548,
	74, 72, 347, 5546, 5545, 89, 33, 62, 441, 402,
	5544, 5541, 444, 5540, 5538, 15302, 87, 215, 5533, 370,
	5531, 356, 352, 81, 56, 5518, 348, 288, 306, 48,
	292, 194, 68, 193, 358, 5517, 5515, 5513, 5508, 278,
	276, 80, 294, 459, 436, 65, 43, 29, 140, 5506,
	181, 173, 5496, 5491, 5485, 171, 5482, 5481, 5480, 5479,
	5474, 5470, 165, 5468, 5466, 5459, 163, 5453, 5441, 5437,
	28, 5433, 5432, 5430, 5429, 40, 51, 5424, 5421, 274,
	297, 271, 342, 5419, 350, 151, 7, 35, 139, 154,
	5418, 5416, 5414, 5411, 54, 99, 10, 5410, 5406, 5400,
	395, 5399, 431, 5397, 5396, 243, 328, 5391, 5390, 3636,
	539, 3586, 5385, 115, 202, 5383, 5381, 5380, 134, 5378,
	5374, 5371, 49, 71, 84, 5369, 45, 689, 372, 302,
	422, 36, 320, 461, 272, 5368, 435, 400, 396, 93,
	299, 12, 227, 191, 275, 5367, 263, 5366, 5363, 5363,
	430, 335, 265, 289, 158, 26, 21, 466, 5362, 429,
	5361, 5360, 5356, 5354, 341, 179, 91, 5353, 251, 5352,
	121, 5351, 5348, 112, 340, 31, 64, 5347, 47, 116,
	53, 176, 5345, 88, 332, 1, 20, 15, 5344, 312,
	5343, 86, 5341, 257, 277, 5340, 343, 290, 5339, 452,
	85, 25, 19, 5338, 2, 3, 5, 14, 282, 5337,
	61, 5334, 106, 5332, 260, 199, 148, 5331, 133, 5329,
	77, 60, 123, 5328, 5327, 5325, 136, 46, 5324, 110,
	5321, 190, 311, 5320, 5319, 5317, 23, 52, 125, 82,
	78, 57, 34, 103, 67, 5316, 5314, 50, 138, 5313,
	226, 137, 11, 73, 315, 108, 5312, 42, 22, 18,
	407, 203, 389, 390, 5311, 310, 409, 410, 454, 3787,
	124, 401, 58, 224, 5310, 222, 5309, 101, 5308, 113,
	70, 184, 79, 75, 5307, 63, 217, 5305, 100, 334,
	5303, 329, 3457, 20402, 5302, 142, 314, 451, 96, 5299,
	5297, 229, 189, 5296, 5295, 5293, 59, 16, 13, 367,
	122, 445, 416, 419, 5292, 376, 5291, 5290, 5289, 161,
	159, 127, 5286, 131, 5285, 5285, 5285, 5283, 5282, 5281,
	5278, 5277, 5276, 5274, 414, 5271, 5270, 5269, 5268, 5267,
	5266, 5265, 5264, 5263, 5262, 5261, 5260, 5259, 5258, 5257,
	5256, 5254, 5252, 5251, 463, 462, 5250, 382, 5249, 455,
	366, 5248, 412, 5247, 146, 5246, 411, 365, 5245, 5244,
	5239, 373, 457, 427, 417, 5235, 204, 413, 69, 5231,
	90, 432, 6786, 195, 135, 95, 5227, 5226, 197, 476,
	5222, 183, 5221, 453, 293, 5220, 5219, 440, 155, 129,
	5218, 5217, 5216, 5215, 5214, 5213, 5212, 5211, 5210, 5209,
	5208, 5207, 5206, 5205, 5204, 5202, 5201, 5197, 5196, 5194,
	5192, 5189, 5186, 5184, 5183, 5179, 5163, 5162, 5161, 5160,
	5157, 5156, 5155, 5154, 5150, 5148, 5147, 5146, 5144, 5143,
	5141, 5140, 5136, 5135, 5134, 5133, 5132, 5131, 5130, 5129,
	5128, 5127, 5126, 5125, 5122, 5121, 5117, 5113, 5112, 5110,
	5108, 5107, 259, 236, 5106, 5104, 5102, 388, 386, 426,
	5101, 201, 305, 425, 211, 5100, 5100, 5098, 5097, 325,
	438, 231, 235, 109, 5093, 5092, 126, 5091, 5088, 5087,
	418, 5083, 447, 5082, 5080, 5079, 5076, 188, 118, 5075,
	102, 187, 424, 55, 5074, 5073, 220, 324, 117, 120,
	5072, 5071, 5070, 5069, 5068, 213, 5067, 5064, 253, 94,
	5063, 308, 258, 443, 3212, 387, 450, 5062, 421, 5060,
	1061, 428, 5058, 247, 250, 105, 383, 5057, 111, 5056,
	5055, 331, 553, 205, 381, 5054, 5053, 83, 5052, 5051,
	234, 326, 5050, 5049, 5048, 5047, 5046, 5045, 4, 104,
	38, 6, 5044, 5043, 41, 5042, 5038, 303, 5037, 5036,
	404, 92, 98, 5034, 5033, 5032, 16056, 307, 5031, 5030,
	221, 5030, 17, 5029, 3726, 423, 5027, 76,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 19, 19, 398, 398, 432, 432, 432, 33, 33,
	34, 34, 35, 35, 36, 36, 49, 49, 49, 5,
	5, 5, 6, 6, 6, 6, 6, 8, 8, 7,
	13, 13, 14, 14, 62, 433, 433, 32, 32, 16,
	16, 18, 18, 717, 717, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 15, 15, 17, 17, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 713, 713, 713, 713, 713,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 101, 103, 102, 102, 102, 110, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 125, 125, 69, 69, 96, 96, 100,
	100, 99, 99, 99, 99, 97, 97, 70, 70, 70,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	83, 83, 85, 85, 85, 85, 85, 86, 86, 86,
	87, 12, 12, 12, 12, 12, 12, 12, 12, 88,
	88, 89, 81, 90, 90, 221, 221, 91, 91, 91,
	92, 92, 92, 93, 93, 94, 94, 94, 94, 305,
	305, 305, 670, 670, 132, 132, 132, 132, 132, 132,
	132, 82, 82, 95, 95, 95, 72, 73, 73, 76,
	76, 75, 74, 74, 77, 77, 77, 80, 80, 130,
	130, 130, 78, 78, 79, 165, 165, 165, 158, 158,
	158, 158, 158, 158, 167, 167, 167, 167, 166, 166,
	166, 166, 166, 168, 168, 168, 168, 168, 129, 129,
	108, 108, 108, 108, 108, 108, 126, 126, 126, 109,
	109, 109, 109, 109, 109, 109, 109, 104, 104, 104,
	106, 107, 21, 122, 122, 123, 123, 111, 111, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	118, 118, 114, 114, 714, 714, 715, 715, 105, 105,
	105, 105, 105, 105, 115, 116, 119, 120, 117, 117,
	117, 117, 716, 127, 127, 127, 128, 128, 113, 113,
	155, 155, 157, 157, 159, 159, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 156, 156,
	131, 131, 136, 136, 133, 133, 162, 162, 161, 161,
	179, 179, 182, 182, 183, 183, 181, 181, 181, 181,
	181, 181, 181, 181, 148, 148, 149, 149, 150, 150,
	152, 153, 153, 153, 153, 151, 151, 154, 154, 154,
	184, 184, 184, 184, 184, 184, 184, 275, 275, 274,
	274, 277, 277, 277, 277, 278, 278, 279, 279, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 435, 435, 436, 436, 436, 437, 437, 437, 291,
	291, 291, 291, 291, 291, 292, 292, 292, 292, 293,
	293, 294, 294, 295, 295, 295, 296, 296, 297, 297,
	299, 300, 300, 300, 301, 301, 301, 302, 302, 302,
	303, 303, 281, 281, 224, 224, 224, 245, 284, 284,
	283, 283, 283, 283, 286, 286, 286, 286, 286, 285,
	285, 287, 287, 288, 288, 289, 289, 290, 290, 304,
	304, 313, 313, 309, 309, 310, 311, 311, 312, 312,
	675, 307, 307, 306, 306, 308, 319, 319, 321, 321,
	320, 320, 320, 320, 322, 322, 323, 323, 314, 314,
	315, 315, 316, 316, 316, 317, 317, 318, 318, 318,
	318, 318, 324, 329, 328, 328, 340, 340, 330, 330,
	331, 332, 332, 335, 335, 334, 334, 336, 336, 336,
	337, 337, 337, 338, 338, 333, 333, 339, 339, 342,
	342, 343, 343, 343, 343, 343, 343, 343, 343, 344,
	344, 344, 344, 341, 341, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 346, 346, 346, 346, 346, 347,
	347, 348, 348, 349, 349, 325, 325, 326, 326, 326,
	326, 326, 326, 327, 327, 185, 434, 434, 214, 214,
	214, 214, 214, 236, 236, 215, 215, 219, 186, 216,
	216, 222, 222, 220, 217, 217, 187, 298, 298, 188,
	218, 218, 189, 189, 239, 239, 240, 240, 246, 246,
	246, 255, 255, 256, 256, 258, 258, 259, 259, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 260, 260, 264, 265, 265, 265,
	265, 265, 265, 261, 261, 266, 271, 271, 271, 271,
	267, 267, 267, 267, 42, 42, 409, 409, 409, 409,
	409, 409, 409, 409, 408, 408, 408, 407, 407, 407,
	407, 407, 270, 270, 632, 632, 269, 269, 718, 718,
	659, 659, 241, 241, 242, 242, 243, 243, 244, 244,
	228, 228, 228, 228, 228, 237, 237, 238, 238, 229,
	229, 231, 232, 233, 233, 233, 233, 233, 226, 223,
	223, 223, 230, 230, 230, 263, 263, 234, 234, 234,
	235, 235, 227, 227, 163, 163, 163, 164, 164, 164,
	225, 225, 190, 190, 190, 190, 190, 190, 411, 411,
	411, 411, 411, 411, 411, 411, 350, 350, 351, 351,
	354, 354, 354, 357, 365, 365, 365, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 413, 413, 414,
	414, 415, 415, 416, 416, 352, 352, 353, 353, 358,
	358, 359, 359, 360, 360, 360, 360, 361, 364, 364,
	417, 417, 418, 418, 419, 10, 41, 355, 369, 369,
	370, 370, 370, 370, 373, 373, 373, 373, 376, 376,
	376, 421, 421, 424, 424, 426, 426, 426, 426, 422,
	422, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 719, 719, 37,
	37, 37, 420, 420, 423, 423, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 356, 356, 372, 372, 372,
	372, 372, 372, 372, 374, 374, 363, 363, 362, 362,
	378, 378, 377, 377, 377, 377, 382, 382, 382, 382,
	382, 379, 380, 381, 381, 381, 381, 381, 383, 383,
	384, 384, 385, 386, 386, 387, 387, 387, 412, 412,
	391, 391, 391, 391, 392, 392, 393, 393, 394, 191,
	191, 375, 375, 395, 395, 397, 397, 396, 396, 399,
	399, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 400, 400, 24, 24, 401, 401, 11, 522,
	522, 522, 522, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 403, 403, 403, 404, 405, 405,
	720, 720, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 546, 547, 547, 548, 548, 549,
	550, 550, 467, 467, 467, 467, 467, 467, 468, 468,
	469, 469, 462, 462, 462, 664, 664, 664, 667, 667,
	667, 667, 666, 666, 668, 668, 463, 464, 617, 617,
	618, 618, 466, 465, 616, 616, 721, 721, 470, 470,
	470, 470, 499, 499, 502, 503, 503, 503, 505, 505,
	505, 474, 474, 474, 474, 474, 474, 474, 474, 474,
	474, 471, 471, 475, 475, 500, 500, 501, 501, 506,
	504, 504, 472, 472, 472, 472, 472, 473, 473, 198,
	198, 198, 198, 198, 507, 507, 199, 199, 199, 508,
	508, 509, 509, 510, 510, 200, 201, 201, 201, 201,
	201, 406, 406, 406, 406, 406, 406, 406, 406, 406,
	406, 406, 406, 406, 47, 47, 48, 48, 450, 98,
	98, 98, 98, 449, 84, 84, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 367, 367, 368, 368, 368, 368, 368, 368, 388,
	389, 389, 390, 390, 390, 390, 457, 457, 457, 457,
	671, 671, 672, 672, 673, 673, 673, 674, 674, 674,
	674, 674, 676, 676, 676, 676, 676, 677, 121, 121,
	121, 678, 678, 679, 679, 681, 681, 681, 681, 681,
	686, 686, 680, 680, 687, 687, 687, 461, 705, 705,
	688, 688, 669, 669, 459, 459, 689, 689, 689, 691,
	691, 690, 690, 690, 690, 690, 696, 696, 697, 697,
	699, 694, 694, 695, 695, 702, 692, 692, 723, 723,
	693, 693, 700, 700, 722, 722, 698, 698, 698, 701,
	701, 701, 701, 703, 703, 460, 460, 460, 460, 262,
	262, 704, 704, 704, 704, 540, 540, 540, 540, 541,
	542, 542, 542, 542, 611, 611, 614, 543, 543, 544,
	545, 551, 552, 552, 552, 552, 552, 552, 552, 553,
	553, 553, 553, 553, 553, 553, 553, 553, 553, 553,
	553, 553, 553, 553, 553, 557, 557, 602, 602, 558,
	558, 559, 559, 603, 603, 605, 605, 605, 605, 560,
	604, 604, 606, 561, 561, 561, 561, 561, 561, 561,
	561, 561, 561, 561, 561, 561, 582, 583, 583, 612,
	612, 612, 612, 608, 608, 607, 607, 623, 623, 584,
	584, 585, 585, 585, 619, 619, 620, 620, 621, 621,
	586, 586, 586, 586, 587, 535, 535, 536, 536, 588,
	588, 589, 590, 590, 622, 622, 654, 654, 654, 654,
	655, 655, 662, 656, 657, 657, 658, 556, 556, 556,
	556, 556, 600, 600, 601, 601, 660, 660, 661, 661,
	538, 538, 539, 196, 195, 195, 197, 443, 443, 443,
	444, 444, 446, 446, 446, 446, 446, 447, 447, 439,
	439, 439, 440, 440, 441, 438, 438, 438, 442, 442,
	445, 445, 445, 445, 665, 665, 665, 665, 665, 665,
	665, 665, 665, 665, 665, 663, 663, 663, 663, 273,
	273, 276, 276, 268, 268, 706, 706, 706, 706, 706,
	706, 706, 708, 708, 708, 272, 272, 9, 9, 9,
	9, 710, 710, 511, 511, 511, 707, 707, 707, 707,
	707, 709, 709, 709, 709, 512, 512, 410, 410, 410,
	410, 410, 410, 428, 428, 38, 38, 39, 40, 40,
	43, 43, 43, 43, 44, 44, 46, 46, 46, 46,
	429, 430, 430, 431, 431, 562, 562, 563, 627, 627,
	627, 627, 624, 624, 626, 625, 625, 564, 628, 628,
	565, 565, 566, 567, 629, 629, 633, 633, 634, 634,
	634, 634, 634, 635, 635, 636, 636, 637, 637, 638,
	638, 568, 639, 639, 569, 569, 570, 570, 641, 641,
	646, 646, 646, 571, 571, 571, 572, 572, 572, 572,
	642, 642, 647, 647, 647, 647, 647, 647, 647, 282,
	282, 573, 574, 574, 574, 574, 574, 574, 574, 574,
	574, 575, 575, 575, 640, 640, 640, 576, 650, 650,
	643, 643, 648, 648, 648, 648, 648, 630, 630, 711,
	711, 711, 712, 712, 577, 578, 578, 644, 644, 649,
	649, 579, 580, 645, 645, 645, 645, 581, 581, 631,
	631, 651, 651, 652, 652, 653, 653, 53, 53, 53,
	52, 52, 169, 169, 172, 172, 172, 172, 172, 175,
	176, 177, 178, 173, 173, 170, 171, 171, 174, 174,
	137, 137, 138, 138, 140, 142, 142, 142, 141, 143,
	143, 139, 139, 144, 144, 144, 144, 145, 145, 146,
	146, 146, 146, 146, 147, 147, 147, 147, 147, 55,
	55, 55, 55, 54, 54, 56, 56, 56, 56, 56,
	56, 57, 57, 58, 58, 59, 60, 60, 60, 61,
	61, 63, 63, 64, 64, 476, 476, 476, 476, 476,
	476, 476, 476, 476, 476, 476, 476, 477, 477, 724,
	724, 724, 495, 495, 495, 478, 484, 482, 479, 479,
	480, 480, 480, 480, 494, 494, 483, 481, 481, 481,
	481, 481, 481, 513, 513, 514, 514, 496, 496, 496,
	496, 496, 496, 497, 497, 497, 497, 497, 497, 497,
	497, 497, 537, 537, 485, 486, 486, 487, 487, 488,
	488, 489, 515, 515, 498, 498, 498, 527, 527, 527,
	520, 520, 520, 520, 520, 520, 516, 516, 516, 516,
	516, 517, 517, 521, 521, 521, 521, 521, 534, 534,
	534, 534, 534, 534, 534, 534, 534, 534, 534, 534,
	534, 534, 534, 534, 534, 534, 534, 534, 534, 518,
	518, 523, 523, 525, 525, 519, 519, 528, 526, 526,
	526, 524, 524, 50, 50, 45, 45, 51, 51, 134,
	135, 135, 458, 458, 458, 451, 451, 682, 682, 682,
	682, 682, 682, 682, 682, 682, 682, 682, 682, 682,
	682, 682, 682, 682, 684, 684, 683, 683, 683, 685,
	685, 685, 685, 685, 725, 725, 448, 448, 448, 448,
	452, 452, 453, 453, 554, 555, 454, 454, 455, 455,
	455, 455, 456, 456, 456, 456, 202, 247, 247, 247,
	247, 247, 247, 248, 248, 248, 203, 203, 251, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 249, 249, 250, 250, 204, 204,
	205, 252, 252, 180, 180, 180, 180, 180, 206, 206,
	206, 253, 253, 254, 207, 207, 207, 207, 208, 209,
	209, 210, 20, 20, 211, 212, 22, 22, 23, 23,
	23, 23, 23, 23, 23, 23, 213, 490, 490, 490,
	490, 490, 490, 490, 490, 490, 490, 490, 490, 490,
	490, 490, 490, 490, 490, 529, 529, 491, 491, 491,
	491, 491, 491, 491, 491, 491, 491, 530, 530, 531,
	531, 492, 532, 532, 533, 533, 493, 591, 591, 591,
	591, 591, 591, 591, 591, 591, 591, 591, 591, 591,
	591, 591, 591, 591, 591, 591, 591, 591, 591, 591,
	591, 591, 591, 591, 592, 592, 592, 592, 592, 592,
	592, 592, 592, 592, 592, 592, 592, 592, 592, 592,
	592, 592, 592, 592, 592, 592, 592, 592, 593, 594,
	594, 594, 594, 594, 594, 26, 26, 595, 596, 596,
	596, 596, 609, 609, 610, 610, 613, 613, 613, 615,
	615, 615, 615, 615, 615, 615, 726, 726, 597, 598,
	598, 598, 598, 598, 598, 727, 727, 599, 25, 25,
	25,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 2, 0,
	3, 0, 2, 0, 1, 0, 2, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 2, 3, 0, 1,
	3, 1, 3, 1, 0, 3, 3, 4, 4, 4,
	4, 3, 2, 1, 1, 2, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 5, 3, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 3, 3, 2, 2, 3, 5, 4, 6,
	3, 5, 4, 6, 4, 6, 5, 7, 3, 2,
	4, 2, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 3, 4, 4, 6, 3,
	3, 4, 3, 4, 4, 5, 4, 5, 1, 1,
	3, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 5, 6, 3,
	4, 1, 1, 2, 4, 1, 1, 1, 2, 2,
	2, 2, 1, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 6,
	2, 3, 5, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 2, 1, 2, 1,
	0, 2, 2, 3, 5, 0, 2, 4, 3, 1,
	5, 1, 1, 4, 1, 4, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 6, 4, 4,
	6, 4, 4, 4, 4, 4, 6, 5, 5, 5,
	4, 6, 4, 4, 4, 4, 5, 7, 7, 9,
	4, 6, 5, 5, 7, 7, 4, 7, 4, 6,
	6, 4, 5, 4, 5, 3, 11, 8, 9, 8,
	1, 0, 5, 5, 3, 3, 5, 3, 2, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	5, 3, 4, 1, 3, 3, 1, 2, 2, 0,
	1, 2, 0, 2, 3, 3, 3, 4, 0, 1,
	1, 1, 1, 2, 3, 4, 5, 6, 8, 6,
	6, 1, 3, 1, 3, 3, 5, 1, 0, 1,
	2, 4, 2, 0, 3, 3, 2, 1, 3, 4,
	3, 5, 4, 3, 5, 1, 1, 1, 1, 4,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 3, 2, 3, 2, 0, 1, 3,
	2, 3, 5, 6, 2, 3, 3, 4, 0, 1,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 2, 3, 3, 0, 2, 3, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	1, 3, 3, 2, 4, 1, 5, 2, 5, 2,
	5, 2, 1, 3, 3, 0, 1, 0, 3, 0,
	1, 4, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 0, 5, 0, 5, 0, 0, 1, 1, 3,
	1, 1, 3, 3, 1, 1, 1, 2, 4, 4,
	2, 3, 5, 5, 1, 3, 1, 0, 1, 2,
	3, 2, 4, 2, 3, 2, 0, 1, 2, 0,
	9, 9, 2, 1, 4, 4, 4, 1, 0, 1,
	3, 3, 2, 1, 1, 2, 0, 1, 3, 2,
	3, 2, 3, 1, 4, 2, 3, 2, 3, 2,
	3, 1, 1, 2, 2, 4, 1, 2, 3, 3,
	4, 5, 4, 5, 4, 2, 2, 2, 1, 1,
	0, 5, 2, 2, 2, 3, 1, 0, 1, 3,
	9, 1, 2, 0, 7, 7, 0, 10, 6, 0,
	4, 5, 2, 0, 2, 4, 0, 1, 1, 0,
	5, 2, 4, 1, 1, 4, 5, 4, 0, 2,
	0, 1, 0, 1, 5, 1, 1, 2, 0, 2,
	6, 2, 0, 1, 3, 2, 4, 0, 1, 3,
	2, 1, 0, 1, 3, 3, 2, 0, 2, 2,
	2, 3, 3, 4, 1, 3, 3, 2, 7, 12,
	1, 3, 2, 3, 3, 1, 2, 2, 2, 2,
	1, 2, 13, 2, 2, 0, 2, 0, 1, 3,
	3, 1, 3, 1, 3, 3, 3, 3, 3, 0,
	3, 3, 0, 3, 0, 7, 7, 3, 0, 2,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 3,
	3, 6, 0, 3, 0, 2, 3, 2, 3, 4,
	4, 3, 3, 0, 5, 2, 5, 2, 0, 4,
	2, 1, 0, 1, 0, 1, 3, 3, 6, 7,
	5, 7, 9, 2, 0, 7, 1, 3, 1, 4,
	4, 7, 2, 1, 1, 1, 3, 2, 8, 1,
	3, 3, 5, 2, 1, 3, 7, 2, 0, 10,
	1, 2, 9, 11, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 3, 0, 1, 3, 2, 0, 1,
	1, 3, 3, 1, 1, 3, 3, 3, 3, 4,
	4, 3, 3, 2, 1, 3, 2, 1, 1, 1,
	1, 3, 0, 1, 3, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 2, 2, 1, 3,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 0, 2, 0, 1, 0,
	1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
	4, 4, 4, 5, 5, 2, 5, 3, 5, 2,
	0, 3, 1, 2, 5, 5, 8, 3, 4, 8,
	5, 0, 4, 3, 0, 1, 3, 2, 2, 4,
	4, 5, 2, 0, 1, 1, 0, 2, 2, 0,
	2, 0, 13, 16, 12, 15, 14, 17, 1, 1,
	2, 2, 2, 2, 1, 0, 1, 0, 1, 3,
	1, 1, 1, 3, 3, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 1,
	0, 2, 2, 1, 0, 3, 0, 1, 3, 1,
	1, 2, 4, 6, 6, 10, 1, 2, 1, 3,
	4, 0, 1, 3, 2, 1, 1, 6, 2, 0,
	3, 1, 1, 2, 1, 2, 2, 2, 2, 3,
	0, 1, 2, 1, 2, 1, 3, 2, 3, 1,
	2, 2, 2, 1, 2, 3, 1, 2, 2, 2,
	2, 3, 3, 3, 1, 3, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 0, 2, 1, 4, 4,
	5, 2, 5, 5, 7, 3, 1, 5, 9, 3,
	9, 4, 11, 10, 2, 0, 1, 3, 3, 6,
	4, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 3, 3, 4, 0,
	1, 0, 6, 1, 3, 3, 3, 5, 2, 0,
	3, 4, 4, 0, 2, 0, 4, 0, 3, 16,
	19, 1, 0, 2, 0, 4, 0, 1, 3, 2,
	0, 4, 6, 4, 6, 4, 4, 6, 4, 6,
	5, 7, 5, 7, 4, 6, 10, 13, 10, 13,
	11, 14, 1, 3, 1, 0, 1, 3, 1, 1,
	1, 1, 1, 2, 5, 3, 6, 4, 6, 6,
	9, 5, 7, 6, 6, 5, 5, 5, 5, 9,
	4, 5, 7, 6, 4, 8, 4, 2, 4, 3,
	6, 4, 3, 3, 3, 2, 2, 3, 4, 4,
	3, 3, 3, 3, 3, 3, 4, 4, 3, 2,
	3, 2, 2, 3, 4, 3, 2, 2, 3, 4,
	4, 4, 5, 1, 4, 4, 4, 3, 3, 2,
	1, 0, 6, 4, 6, 4, 6, 8, 4, 6,
	4, 6, 5, 7, 9, 7, 9, 7, 9, 8,
	4, 6, 4, 6, 4, 6, 4, 6, 4, 6,
	4, 6, 2, 3, 3, 2, 5, 1, 1, 2,
	3, 2, 1, 1, 2, 1, 2, 4, 1, 1,
	1, 1, 10, 4, 1, 1, 1, 1, 2, 4,
	3, 5, 1, 3, 2, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 6, 5, 3, 5, 1, 0, 1, 3, 2,
	1, 1, 2, 3, 4, 3, 2, 4, 4, 6,
	4, 4, 2, 5, 2, 0, 5, 5, 5, 1,
	1, 1, 1, 3, 0, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 1, 2, 1, 1, 1,
	3, 3, 3, 3, 3, 2, 1, 3, 2, 3,
	5, 5, 5, 2, 1, 3, 6, 6, 6, 6,
	6, 8, 8, 6, 6, 7, 9, 9, 8, 10,
	6, 6, 6, 6, 6, 6, 6, 8, 6, 8,
	6, 8, 7, 9, 6, 8, 7, 9, 8, 10,
	8, 10, 9, 11, 8, 10, 9, 11, 8, 8,
	7, 6, 6, 6, 6, 8, 8, 8, 8, 6,
	9, 0, 2, 2, 1, 2, 2, 2, 2, 3,
	1, 3, 3, 1, 5, 3, 9, 12, 7, 7,
	3, 2, 1, 3, 1, 3, 3, 3, 3, 2,
	2, 1, 1, 1, 1, 2, 1, 1, 1, 4,
	5, 1, 0, 1, 2, 2, 2, 2, 1, 1,
	1, 3, 3, 5, 1, 4, 0, 2, 3, 0,
	1, 1, 2, 1, 17, 21, 1, 1, 2, 1,
	3, 1, 1, 1, 3, 1, 2, 0, 1, 2,
	4, 1, 1, 1, 1, 1, 3, 0, 1, 0,
	1, 1, 4, 0, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 2, 0, 9, 11, 12, 14, 3,
	0, 3, 4, 4, 0, 6, 4, 9, 7, 5,
	3, 5, 7, 9, 1, 3, 1, 3, 5, 5,
	6, 6, 4, 6, 6, 5, 7, 9, 6, 6,
	5, 4, 4, 3, 6, 6, 6, 6, 4, 7,
	5, 8, 7, 8, 6, 5, 8, 1, 0, 4,
	6, 5, 8, 2, 0, 2, 2, 2, 1, 5,
	2, 0, 2, 6, 6, 6, 10, 6, 6, 6,
	9, 9, 6, 6, 9, 6, 7, 7, 6, 2,
	2, 2, 2, 1, 2, 1, 0, 1, 2, 10,
	13, 5, 4, 4, 2, 0, 2, 2, 1, 0,
	11, 14, 12, 15, 11, 4, 0, 2, 1, 8,
	11, 8, 7, 9, 1, 1, 3, 3, 5, 6,
	1, 3, 1, 3, 1, 3, 3, 7, 9, 9,
	8, 6, 1, 0, 1, 3, 3, 1, 5, 3,
	8, 11, 6, 8, 7, 10, 13, 1, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 0, 1, 0, 5, 2, 3, 0, 2, 0,
	1, 1, 1, 1, 1, 3, 3, 2, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 3, 5, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 3, 2, 2, 1,
	2, 2, 2, 2, 1, 1, 0, 1, 1, 1,
	1, 1, 1, 2, 0, 2, 0, 4, 1, 3,
	1, 2, 2, 2, 1, 1, 1, 1, 1, 3,
	3, 1, 3, 1, 3, 11, 13, 5, 1, 2,
	2, 1, 1, 3, 5, 1, 3, 7, 2, 0,
	5, 5, 10, 8, 2, 0, 2, 0, 1, 1,
	1, 1, 1, 2, 0, 2, 0, 4, 0, 5,
	0, 8, 1, 1, 8, 11, 6, 8, 1, 3,
	1, 1, 3, 4, 7, 6, 5, 5, 5, 5,
	1, 3, 4, 4, 4, 3, 4, 3, 1, 4,
	0, 8, 5, 5, 6, 7, 7, 7, 4, 4,
	5, 11, 10, 10, 2, 2, 0, 13, 2, 0,
	1, 3, 5, 5, 3, 6, 2, 1, 0, 2,
	4, 0, 1, 3, 6, 8, 8, 1, 3, 5,
	5, 10, 10, 11, 11, 5, 5, 6, 10, 1,
	0, 2, 0, 1, 0, 2, 2, 1, 1, 0,
	4, 0, 1, 3, 1, 1, 1, 1, 1, 2,
	4, 4, 5, 2, 0, 3, 1, 3, 4, 3,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 3, 3, 3, 0, 1, 4, 2,
	2, 2, 2, 2, 3, 2, 2, 3, 0, 2,
	2, 1, 1, 1, 0, 2, 4, 5, 6, 4,
	5, 2, 3, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 2,
	3, 2, 5, 4, 3, 3, 3, 3, 3, 1,
	1, 0, 2, 3, 0, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 0, 3, 6, 3, 5, 3,
	5, 3, 5, 2, 0, 2, 0, 1, 2, 2,
	2, 3, 3, 2, 2, 3, 3, 1, 1, 3,
	3, 2, 1, 1, 8, 8, 11, 5, 7, 6,
	9, 5, 2, 0, 3, 3, 3, 7, 7, 10,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 4,
	5, 1, 3, 2, 2, 2, 2, 2, 1, 2,
	2, 4, 3, 2, 2, 2, 2, 2, 2, 3,
	2, 2, 2, 2, 5, 5, 5, 5, 5, 1,
	3, 1, 2, 3, 0, 3, 1, 2, 1, 1,
	1, 3, 0, 1, 3, 1, 3, 1, 3, 6,
	4, 0, 5, 5, 5, 1, 2, 4, 5, 1,
	1, 1, 1, 3, 3, 2, 2, 1, 2, 2,
	2, 2, 1, 2, 1, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 2,
	1, 3, 1, 3, 7, 4, 1, 3, 4, 6,
	4, 8, 1, 1, 1, 1, 7, 2, 2, 2,
	2, 3, 0, 2, 2, 0, 2, 2, 1, 2,
	3, 3, 3, 3, 4, 4, 3, 3, 3, 4,
	4, 3, 4, 4, 1, 1, 1, 0, 2, 2,
	5, 3, 0, 1, 1, 1, 1, 1, 3, 9,
	12, 3, 0, 6, 2, 3, 2, 3, 2, 2,
	2, 3, 2, 0, 2, 5, 3, 0, 2, 2,
	2, 3, 1, 3, 1, 2, 5, 6, 6, 6,
	6, 6, 6, 6, 6, 8, 9, 8, 6, 6,
	9, 9, 9, 7, 10, 1, 1, 8, 8, 8,
	8, 8, 8, 8, 9, 8, 8, 2, 0, 1,
	1, 2, 1, 2, 1, 2, 2, 6, 6, 6,
	6, 6, 6, 6, 9, 9, 6, 6, 6, 8,
	6, 8, 8, 8, 8, 6, 8, 6, 8, 7,
	9, 7, 9, 6, 6, 6, 6, 6, 6, 6,
	7, 7, 6, 9, 9, 6, 6, 6, 6, 6,
	6, 8, 8, 8, 6, 7, 6, 6, 7, 8,
	8, 8, 10, 9, 8, 1, 0, 5, 5, 4,
	6, 6, 1, 0, 1, 2, 3, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 4, 11,
	11, 11, 13, 9, 11, 1, 1, 6, 2, 2,
	0,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -477, -179, -185, -186, -187,
	-188, -189, -190, -191, -192, -193, -194, -457, -458, -459,
	-460, -538, -539, -195, -196, -197, -540, -541, -542, -543,
	-544, -546, -547, -548, -549, -550, -545, -551, -552, -553,
	-554, -555, -556, -557, -558, -559, -560, -561, -582, -583,
	-584, -585, -586, -587, -588, -589, -590, -562, -563, -564,
	-565, -566, -567, -568, -569, -570, -571, -572, -573, -574,
	-575, -576, -577, -578, -579, -580, -581, -462, -463, -464,
	-467, -468, -469, -476, -478, -479, -480, -481, -482, -483,
	-484, -485, -486, -487, -488, -489, -470, -471, -475, -472,
	-473, -198, -199, -200, -201, -202, -203, -204, -205, -206,
	-207, -208, -209, -210, -211, -212, -213, -490, -491, -492,
	-493, -591, -592, -593, -594, -595, -596, -597, -598, -599,
	266, 212, -181, -182, -296, 111, 26, 22, 27, 394,
	390, 302, 93, 401, 191, 436, 228, 407, 413, 397,
	378, 290, 405, 274, 475, -504, 428, 223, 395, 220,
	259, 250, 280, 345, 222, 273, 249, 328, 472, 358,
	329, 333, 462, 226, 418, 109, 214, -184, -183, -295,
	531, 119, 203, 63, 67, -303, 36, 518, 86, 540,
	-724, 486, 457, -724, 96, 97, 98, 99, 531, -255,
	115, -411, -375, -35, 33, 414, 247, 261, 62, 464,
	454, 225, 276, 284, 422, 103, -440, 202, 268, 449,
	375, 194, 438, 387, 443, 512, -630, 406, 71, 453,
	451, 58, 289, 473, 471, 40, 67, 307, 419, 480,
	85, 284, 104, 199, 225, 236, 247, 261, 286, 71,
	-632, 62, 375, 385, 387, 409, 414, 422, 443, 412,
	460, 268, 406, 103, 449, 438, 454, 464, 276, 40,
	322, 384, -406, -409, -408, 464, 261, 307, 512, 62,
	458, 443, 286, 385, 409, 199, 247, 449, 364, 103,
	406, 71, 67, 419, 480, 85, 284, 225, 236, 438,
	454, 194, 268, 276, -632, 387, 414, 422, 375, 412,
	460, 85, 364, 284, -664, 58, 423, 233, 457, -665,
	-663, -273, 56, 217, 414, 347, 406, 488, -5, 4,
	-27, -28, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 22, 201, 204, 202, 205, 55, 206, 207,
	208, 210, 211, 212, 88, 70, 213, 214, 215, 24,
	216, 218, 219, 220, 221, 222, 223, 123, 226, 227,
	228, 229, 230, 141, 231, 101, 232, 234, 235, 236,
	111, 237, 154, 238, 120, 121, 90, 246, 247, 248,
	249, 250, 251, 253, 254, 98, 149, 150, 255, 89,
	256, 257, 258, 259, 260, 261, 176, 27, 262, 138,
	264, 148, 265, 267, 136, 42, 268, 270, 271, 272,
	273, 274, 275, 276, 277, 279, 281, 282, 91, 283,
	153, 165, 285, 286, 287, 288, 289, 291, 294, 295,
	151, 296, 297, 298, 28, 299, 300, 301, 302, 303,
	304, 305, 306, 307, 308, 309, 310, 312, 313, 314,
	96, 315, 317, 318, 145, 503, 319, 320, 321, 322,
	92, 324, 327, 328, 329, 332, 333, 334, 335, 336,
	337, 105, 85, 338, 99, 340, 341, 342, 343, 344,
	345, 346, 131, 348, 349, 350, 351, 352, 353, 354,
	357, 110, 358, 359, 32, 139, 122, 504, 505, 502,
	144, 62, 506, 507, 124, 501, 508, 102, 364, 365,
	366, 367, 368, 369, 370, 129, 371, 128, 373, 374,
	375, 377, 378, 379, 380, 382, 383, 384, 385, 386,
	112, 387, 152, 143, 388, 389, 390, 391, 84, 132,
	393, 394, 395, 396, 397, 398, 399, 34, 400, 401,
	402, 35, 403, 404, 405, 407, 408, 409, 410, 127,
	412, 413, 146, 415, 416, 87, 417, 418, 419, 420,
	421, 422, 93, 425, 427, 428, 429, 430, 431, 107,
	433, 434, 435, 436, 437, 438, 113, 114, 439, 440,
	441, 147, 442, 443, 445, 446, 104, 448, 449, 108,
	451, 452, 453, 454, 455, 458, 460, 462, 463, 464,
	465, 466, 467, 468, 142, 469, 50, 472, 473, 474,
	97, 475, 476, 477, 478, 155, 183, 479, 480, 481,
	482, 483, 485, 168, 486, 140, 487, 498, 499, 57,
	37, 173, 169, 189, 179, 178, 224, 188, 187, 29,
	278, 175, 292, 293, 500, 186, 171, 185, 166, 160,
	162, 163, 159, 161, 156, 164, 158, 126, 157, 325,
	339, 181, 182, 355, 356, 360, 170, 361, 362, 376,
	177, 174, 411, 426, 172, 444, 184, 459, 461, 86,
	180, 489, 490, 491, 492, 493, 133, 494, 495, 496,
	497, 125, -667, -666, 56, 457, 423, -273, 21, 217,
	233, 58, 347, 406, 414, 488, -724, 457, -724, 379,
	-724, 379, -5, 423, 457, 56, 413, -5, 457, -7,
	-5, -516, -517, 21, -521, 63, 392, 26, 22, -5,
	-516, 290, -517, -5, -474, -504, 118, 531, -179, -185,
	-186, -187, -188, -202, -195, -538, -539, -206, 26, -244,
	531, 79, -242, 531, 118, -273, 56, 457, 423, 21,
	531, -242, -510, 531, 21, 451, 453, 374, 420, -245,
	-7, -251, -245, -249, 349, 382, 91, 92, 193, 396,
	-102, 21, 285, 210, 64, 45, -101, 534, 535, 12,
	-251, -245, 21, -7, -7, 378, 21, -5, -5, 536,
	-5, -21, -103, 7, -717, 67, -717, 74, 320, -532,
	-533, -103, 321, -132, -670, -104, -5, 4, -27, -29,
	209, 115, 225, 25, 81, 242, 116, 79, 44, 76,
	52, 53, 75, 77, 46, 82, 54, 80, 363, 78,
	48, 450, 118, -170, -131, 470, 316, 269, 509, -183,
	-184, -182, -181, -182, -295, -287, -288, 21, 41, -435,
	-433, -436, -5, 66, 541, -297, 84, -299, -7, -297,
	531, -3, -495, 30, -512, -511, -707, 318, 389, 252,
	31, 73, -437, -435, 64, 73, -180, -179, -185, -186,
	-187, -188, -433, 67, 480, 84, 419, 307, 286, 385,
	460, 117, 199, 412, 458, -631, 463, 34, -19, -5,
	28, -7, -15, -5, -156, 221, 279, -159, -5, 11,
	-160, 534, 535, 536, 537, 538, 539, 525, 526, 527,
	18, 19, 20, -15, 87, -15, 28, -7, 28, 246,
	67, -7, 28, 336, -11, -522, -9, 241, 245, 424,
	4, -27, -28, -29, 85, -15, 460, -7, -7, 340,
	-398, 28, -15, -7, -7, 531, 236, -11, -11, 453,
	451, 453, 451, -435, 28, 21, -433, 28, 21, -433,
	28, -433, 28, 480, 67, 246, 93, 401, -449, -670,
	-15, -15, -7, -15, -448, -670, -29, -5, -11, -522,
	321, 221, 279, -450, -156, -7, 28, -448, -7, -448,
	-7, -7, -7, -7, -7, 460, -11, -522, 21, -11,
	336, -522, 21, -7, -15, 28, 87, -15, -7, 383,
	139, 28, -17, -15, 28, -13, -7, -7, 28, -270,
	28, -108, -109, 426, -111, -112, -118, -114, -117, -110,
	-716, -104, 186, 171, 172, 173, 174, 175, 176, 187,
	188, 170, 189, -119, -120, -115, -116, 184, 56, 185,
	166, 4, -27, 169, -105, 178, 179, 180, 181, 182,
	-270, 28, 25, -33, 28, 221, 279, -453, 28, -450,
	-33, -7, 28, -452, 28, -448, -452, 28, -452, 28,
	-84, 28, -449, -7, 28, -7, 28, 70, 336, -401,
	28, -522, -401, 28, -401, 28, 480, 246, 67, 87,
	340, 460, 321, 480, 70, 414, -664, 423, -664, 219,
	209, -617, 21, -16, -433, -511, 431, 64, 61, 527,
	533, 57, -103, -103, -708, -103, 40, -272, -9, -103,
	506, 57, 318, 209, -495, -512, -495, -103, -495, 61,
	-103, -5, -103, -252, 531, 74, 61, 541, 383, 531,
	-262, 531, -262, -262, 104, -262, 74, 506, 64, 506,
	-242, -474, -499, -502, -503, 86, -9, -504, 515, -411,
	-241, 116, -499, -500, -501, -506, -433, -499, 57, 318,
	209, -499, -433, -7, -5, -508, 414, -509, 307, 67,
	104, 247, -499, -247, -245, -250, -249, -250, -250, -250,
	-102, -102, -250, -250, -250, -102, 21, -250, -102, 21,
	-101, -101, -253, 531, -7, 21, -20, 541, -18, -435,
	-18, -406, 514, -407, 464, 261, 199, 286, 62, 117,
	-408, 385, 409, 458, 322, 512, 307, -409, 247, 406,
	443, 449, -530, 130, -533, -272, 531, -96, -99, 533,
	529, -148, -55, -150, 130, -56, -57, -152, 68, 280,
	69, -153, -53, 21, 41, -53, -53, 70, -170, -131,
	532, 532, -275, -274, -277, -65, 536, -67, 534, 535,
	-155, 31, 516, -130, 471, 40, -69, -68, 13, 531,
	-72, -70, -182, 29, 134, -78, -79, 293, 11, 62,
	411, -5, -101, 6, -103, 49, 43, 47, 9, 10,
	-670, -713, -110, 38, -132, -333, -71, -112, -714, -715,
	-117, -716, 185, 161, 162, 225, 240, 243, 244, 330,
	331, 241, 245, 424, 447, 103, 239, 242, 512, 278,
	356, 362, 376, 444, 459, 461, 360, 224, 292, 325,
	490, 491, 493, 494, 492, 495, 496, 159, 160, 166,
	164, 158, 339, 156, 163, 157, 497, 173, 169, 189,
	179, 178, 188, 187, 175, 186, 171, 181, 182, 170,
	174, 172, 56, 184, 180, -119, -120, -115, -116, -274,
	74, 536, -96, -433, 531, 531, 541, -297, -32, 531,
	-129, -65, 218, 354, 541, -707, 327, 66, 487, 252,
	-434, -433, 93, -5, 23, -437, -437, 532, -262, -433,
	28, -254, -433, 480, -433, 28, -36, 25, -670, -670,
	-7, 460, -670, -7, 130, -632, -411, 473, 209, -442,
	31, -37, 36, 518, -659, 23, -122, 533, -429, 531,
	-15, -15, 533, -429, 23, 368, 257, 452, 231, -429,
	64, 31, -37, 31, 140, -433, 28, -619, 464, 31,
	130, 28, -37, 480, 513, -7, -628, 365, 74, -7,
	-32, 31, -428, 130, 36, 232, -108, -15, -37, -37,
	-400, -403, 398, 93, -402, 207, 256, 196, 22, 27,
	477, 223, 264, 258, 309, 354, 122, 31, 365, 401,
	400, 153, -39, 507, 29, 45, -400, -404, 398, -26,
	207, 354, 93, 29, 45, -400, 398, -422, 93, -425,
	354, 23, 213, 90, 305, 335, 338, 342, 364, 419,
	436, 402, 473, 29, -400, 398, 93, 29, -433, 28,
	21, -435, 28, 140, -663, -273, -666, 398, 93, 365,
	-47, 531, 398, 93, 365, 394, 398, 93, 365, 398,
	365, 36, -609, 93, 394, -668, -610, -463, -613, -615,
	4, 232, 148, 332, 449, 452, 398, -405, 27, 93,
	196, 477, 365, 398, -451, 93, 365, -26, -682, 354,
	215, 404, 441, 300, 434, 482, 277, 418, 324, 31,
	237, 127, 445, -669, 366, -463, -47, -96, 398, -537,
	196, 27, -7, -15, -15, 93, 365, -98, 531, 74,
	29, 398, -451, 93, 365, -26, 398, 93, 196, 27,
	365, 398, -451, 93, 365, -26, 398, 365, 398, -620,
	-39, 365, 479, 398, 93, 232, 394, 196, 27, 264,
	258, 430, 365, 74, 74, -7, 398, -37, -494, 45,
	-494, 398, 130, -37, -494, -494, 398, 93, 401, 365,
	398, 93, 365, 29, 368, 257, 452, 231, 398, 196,
	27, 93, -454, 365, -455, 22, 97, -537, 93, -515,
	-267, 6, 534, 535, -102, 29, 541, -432, 24, 35,
	29, 541, -432, 74, 29, 541, -432, 29, -126, 134,
	-109, -124, 531, 498, 344, 248, 297, 341, -125, 417,
	-123, -122, 531, -113, 531, 177, -123, -123, -123, 531,
	-127, 518, 519, 531, -127, -128, 183, 531, -128, -128,
	178, 179, -128, -432, 29, -17, 28, 531, 29, -15,
	28, -15, 28, -432, 541, 29, 130, -432, 29, -432,
	541, 29, -432, 29, -432, 29, -432, 541, 29, -37,
	29, 29, -401, 130, 28, 541, 29, 29, 29, 140,
	368, 257, 452, 231, -36, -401, -7, 219, 23, -272,
	40, -618, 253, 299, 541, -103, 120, -276, 40, -268,
	-271, -267, 49, 43, 74, -272, -276, 40, -5, -706,
	-103, 4, -110, -267, 40, 58, -710, 260, 234, 327,
	413, -5, 23, -712, -108, -534, -16, 67, 419, 284,
	286, 385, 409, 247, 261, 321, 322, 367, 414, 449,
	464, 21, -401, -521, 531, -14, -62, -5, -14, -534,
	130, -401, 130, -474, 532, 541, -505, -271, -267, 67,
	-242, 532, 541, -32, 532, 327, 532, -507, 83, 74,
	-36, -36, -36, 532, 121, 115, 314, 204, 416, 354,
	-245, -245, -245, -245, -250, -250, -245, -245, -245, -250,
	-250, -245, -250, -250, -129, -103, 541, -22, 45, -25,
	235, 402, -15, -15, -7, -108, -108, -449, -448, -450,
	221, 279, -7, -7, -448, -448, 130, 139, 531, 74,
	-272, 532, 536, -82, 190, 21, 41, -95, -65, -107,
	-104, -99, -106, 536, -6, 4, -27, -28, -29, -30,
	21, 203, 119, 30, 510, 134, 23, 94, 60, 511,
	38, 512, 513, 39, 514, 117, 26, 239, 240, 241,
	243, 244, 245, 40, 252, 95, 41, 109, 263, 266,
	269, 43, 280, 130, 284, 64, 290, 71, 72, 45,
	311, 316, 73, 323, 326, 68, 330, 331, 31, 47,
	69, 74, 66, 33, 509, 372, 381, 392, 100, 63,
	424, 432, 59, 447, 67, 106, 61, 456, 49, 470,
	471, 103, 83, 190, 51, 65, 484, 36, -65, -100,
	-54, -55, -149, -148, -152, 130, 389, 97, 354, 427,
	503, -57, -56, -58, -65, 21, -64, 91, 349, -59,
	-60, -65, -67, 534, 535, -151, 122, -183, -183, -183,
	-171, -174, -65, -148, -55, -290, 73, 541, 14, 39,
	55, 534, 535, 536, 537, 538, 539, 525, 526, 527,
	18, 19, 20, -155, 30, 33, 46, 516, 44, 48,
	52, 53, 54, 37, 45, -158, 23, -8, 11, 62,
	-159, 4, -31, 191, 192, 193, 194, 195, 196, 197,
	198, 199, 21, 200, 22, 201, 203, 119, 510, 94,
	204, 202, 205, 60, 206, 207, 208, 209, 210, 211,
	212, 173, 115, 169, 189, 511, 88, 70, 213, 214,
	215, 24, 216, 38, 512, 217, 218, 219, 513, 220,
	221, 222, 223, 224, 225, 514, 123, 226, 227, 228,
	229, 230, 25, 141, 231, 101, 232, 117, 233, 234,
	235, 236, 111, 237, 81, 154, 238, 120, 239, 240,
	241, 242, 243, 244, 245, 121, 90, 246, 247, 249,
	188, 187, 250, 40, 251, 252, 253, 254, 98, 149,
	150, 255, 89, 95, 256, 257, 258, 259, 41, 109,
	260, 261, 176, 27, 262, 263, 138, 264, 148, 265,
	266, 267, 136, 42, 268, 270, 271, 272, 273, 29,
	274, 275, 276, 277, 278, 43, 279, 282, 91, 175,
	283, 153, 284, 165, 285, 116, 79, 286, 287, 288,
	289, 291, 292, 293, 294, 295, 151, 296, 298, 28,
	299, 300, 301, 302, 303, 304, 305, 306, 307, 308,
	309, 310, 311, 312, 76, 500, 313, 314, 96, 315,
	186, 171, 185, 317, 318, 75, 166, 160, 162, 163,
	159, 161, 156, 164, 158, 126, 157, 145, 503, 319,
	320, 321, 322, 92, 323, 326, 324, 325, 77, 327,
	328, 329, 58, 330, 331, 332, 333, 334, 335, 336,
	337, 105, 85, 338, 99, 339, 340, 342, 343, 345,
	346, 347, 181, 82, 182, 131, 348, 349, 350, 351,
	352, 353, 354, 355, 356, 357, 31, 110, 358, 359,
	47, 360, 32, 170, 139, 122, 504, 505, 502, 144,
	66, 506, 507, 124, 501, 361, 80, 362, 102, 364,
	365, 366, 367, 368, 369, 370, 129, 371, 128, 372,
	373, 374, 375, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 385, 386, 112, 387, 152, 143, 388, 389,
	174, 390, 391, 84, 132, 392, 393, 394, 395, 396,
	397, 398, 399, 34, 400, 401, 402, 35, 403, 404,
	405, 78, 406, 407, 408, 409, 410, 411, 127, 412,
	413, 146, 414, 415, 416, 87, 418, 63, 419, 420,
	421, 422, 423, 424, 93, 426, 425, 427, 428, 429,
	430, 172, 431, 432, 107, 433, 434, 435, 436, 437,
	438, 113, 114, 439, 440, 441, 147, 442, 443, 444,
	445, 59, 446, 104, 447, 67, 448, 450, 449, 108,
	451, 452, 453, 454, 106, 455, 56, 184, 456, 457,
	458, 459, 460, 461, 49, 462, 463, 464, 465, 466,
	467, 468, 142, 469, 471, 50, 472, 473, 474, 97,
	103, 83, 475, 476, 477, 478, 155, 86, 180, 190,
	118, 479, 480, 481, 482, 51, 483, 486, 140, 487,
	488, 489, 490, 491, 492, 493, 133, 494, 495, 496,
	497, 125, 499, 57, -65, -65, -65, -65, -65, 363,
	-376, 32, -97, -65, -129, -182, -96, -182, -182, -77,
	529, 531, 531, 531, -96, -103, 531, -103, -103, 531,
	-73, -65, -136, 485, -133, 281, 531, 531, 130, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, -290, 531, -433, -129, -299, 23, -13, 541,
	532, 39, 55, 30, 33, 46, 44, 48, 52, 37,
	45, 62, 218, -707, -709, 389, 399, 421, -214, -179,
	102, 531, 40, 23, -216, -222, -220, 531, -5, -5,
	-298, 83, 83, 61, -239, 64, 61, 531, 122, 370,
	-262, 31, 23, -262, -433, -602, -422, 354, 31, -19,
	28, -5, -671, 531, -671, -689, 211, 198, 315, -7,
	-654, -656, 531, 23, -108, 321, 480, 84, -522, -445,
	-190, -191, -459, -460, 26, 29, -609, 365, -108, 533,
	-106, -430, -431, -6, -630, 83, -156, 531, 267, 388,
	-15, -15, -15, -15, -15, 29, -603, 29, -7, 531,
	370, 31, -621, -620, -103, 29, -622, -522, 103, 31,
	-513, -441, 28, -433, 531, 74, 332, -522, -433, 464,
	74, 29, 21, -642, -647, 67, 448, -5, -436, 242,
	-433, -429, -103, 23, 130, -513, -513, 541, 61, -720,
	117, 514, 168, 335, 473, 194, 449, -388, 414, 531,
	370, 370, -355, 28, 514, -356, -5, 117, -372, 513,
	471, 381, 284, 270, -720, 117, -720, 117, 117, 74,
	460, 201, 400, 412, 411, 460, 412, 411, -433, 309,
	153, -15, 122, 61, -388, 298, 411, 531, -435, 449,
	61, 255, 370, -433, 449, 61, -425, 414, 90, 338,
	342, -109, -267, -719, 70, -267, -267, 70, 346, -37,
	-37, -433, 61, -720, 414, -433, -400, 398, 93, -26,
	29, 45, -400, 398, 93, 29, -7, 61, 414, 61,
	-48, 532, -674, -676, -107, -121, 45, 361, 500, 190,
	-104, -108, 426, 61, 414, 61, 479, 61, 414, 61,
	61, 61, -609, -664, 449, 225, -613, -726, 527, 68,
	61, 117, 40, 31, 117, 40, 31, 414, -660, 117,
	-661, 513, 31, 117, 61, 61, -725, -682, 35, 93,
	-665, 414, 423, 457, 61, 255, 74, 47, 418, 254,
	317, 324, -267, -267, -15, -5, 61, 103, 398, 365,
	83, 83, 414, 531, 61, -108, 355, -433, -7, 61,
	-725, 414, 61, 255, 61, -429, -642, -642, -642, 61,
	61, -725, 414, 61, 255, 61, 61, 61, -39, 61,
	-103, 47, 61, -429, 387, -103, 387, 387, 387, -429,
	61, -433, -433, 398, -627, 365, 264, 258, 61, -514,
	-668, 93, 247, -668, 61, -622, -514, -668, -668, 61,
	-388, -388, 61, 61, 438, 414, 61, -15, -15, -15,
	-15, -15, 61, 208, 155, 155, 208, 155, 208, 531,
	414, 541, 61, 208, -604, -407, -406, 199, 512, 261,
	286, 62, 385, 409, 458, 464, 414, -527, -498, 290,
	405, 45, 130, 365, 6, 6, -17, -15, -13, -7,
	-15, -7, -108, -270, 529, 529, -126, 134, -101, 61,
	61, 61, 61, 531, -123, -129, -101, -101, 56, 56,
	-101, 531, -101, -128, -128, -270, -432, 29, -108, 83,
	29, 83, 29, -450, -453, -108, -7, -448, -452, -452,
	-452, -449, -84, 531, -7, -7, -432, -622, 29, -522,
	-401, -401, -401, -433, 61, -535, -536, 68, 269, 457,
	-433, 541, -103, 531, -5, -180, 541, 532, 61, -16,
	-16, 246, 422, -452, -452, -452, -13, -17, -13, 139,
	-50, -45, -5, -13, -13, -17, 448, 420, 287, 386,
	410, -524, 36, 291, -14, 541, 532, 532, 64, -516,
	-517, -524, -517, -474, -502, 28, -433, -243, 119, -500,
	-506, -500, -433, -7, -433, -433, -7, -19, -248, 36,
	168, 416, -245, -245, -245, -245, -245, -245, 532, -435,
	-24, 359, -23, 194, 411, 427, 272, -432, 298, 298,
	52, 52, 52, 52, 52, 52, 52, 52, -15, -15,
	74, 74, 52, 52, -108, -267, -108, -406, 514, -407,
	464, 261, 199, 286, 322, 385, 409, 532, -131, 541,
	-170, -95, -82, -82, 16, 17, 530, 542, 66, 503,
	427, 541, -60, -63, -67, 534, 535, 411, 127, 531,
	-63, 411, 127, -61, -101, 6, -61, -154, 359, 430,
	-16, 541, 83, -163, 94, 95, -54, -149, -278, 64,
	-427, 453, 451, 58, 289, 473, 67, -433, -277, -108,
	-15, 56, 58, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, 46,
	44, 48, 37, 45, -65, 61, 47, 31, 49, 43,
	50, 41, 260, 357, -167, -166, 350, 351, 352, 353,
	166, -162, 59, 60, -161, -182, 531, -165, 510, 432,
	21, -6, 531, -130, 411, 531, -182, 41, 31, -99,
	532, 541, -129, -80, 530, -77, -129, -156, -129, 532,
	-82, -124, -101, -76, -75, 51, -133, 71, -142, 508,
	531, -334, -67, -65, -329, -65, 531, -101, -101, -101,
	-101, -65, -87, -12, 4, 498, 344, 248, 297, 341,
	417, -103, -65, -88, -83, -65, -82, -89, -66, -67,
	534, 535, -155, 411, -85, -83, -65, -65, 511, 326,
	456, -86, -65, 64, -129, -65, -129, -129, -129, -129,
	346, -90, -221, -65, -710, -67, 346, -65, -82, -335,
	-339, -334, 100, -65, -332, -181, -339, -329, -182, -329,
	-65, -329, 532, -329, -329, -329, -710, -278, -129, 532,
	532, -300, 85, 31, 532, -65, 468, 229, 389, -223,
	74, -236, 103, 104, -215, -219, -5, 86, -5, -278,
	541, 527, -217, -220, -97, -224, 65, -279, -280, -435,
	-182, 323, -291, 531, -304, -314, -324, -305, 127, 125,
	126, -5, -132, -71, -333, 166, -280, -240, 112, -240,
	-350, -351, -354, -5, -355, -357, -356, 46, -15, 122,
	-412, 83, 29, -179, 273, -399, 36, 531, 29, 74,
	31, 404, -678, -679, -681, 23, 321, 458, 484, -682,
	-672, 532, -673, -674, -678, -691, -690, 96, 98, 97,
	462, 122, 198, -429, 536, -655, 509, -657, -662, -658,
	-674, 4, 74, 321, -7, -433, 480, -442, -411, -35,
	-19, -5, -369, -106, 532, 541, 527, 130, -7, -307,
	-306, -308, -5, 531, -429, -429, -429, -429, -429, -15,
	-605, 414, 479, 64, 24, -7, -607, -608, -612, 295,
	354, 478, -350, 122, 29, 284, -7, 422, 29, -496,
	-497, 446, 197, 406, 45, 371, 265, 469, 309, 4,
	232, 476, 103, 23, 31, -262, -65, -6, 7, -629,
	23, -639, 307, 67, -641, -646, -5, -305, 531, -15,
	448, -428, 541, -435, 45, -96, -262, -262, 387, -108,
	-103, -402, -7, -7, -7, 505, 223, 340, -7, -7,
	-389, -390, -6, -433, -433, 31, -355, 28, -108, -7,
	531, -376, -394, 83, 503, 503, -395, 83, -5, -101,
	-7, 28, -5, 28, -7, -7, -7, -7, 21, 103,
	460, 412, 460, 412, -7, 327, -7, 21, 103, -7,
	327, -433, 411, -522, -46, 110, 79, 40, 83, 327,
	-40, -43, -419, 93, 196, 27, -10, -6, -400, -403,
	398, 93, -7, -7, 74, -433, -400, 398, -7, -7,
	-7, -267, -15, -15, -267, -267, -400, 398, -422, 93,
	-7, -7, -7, -400, 398, 93, 61, -720, 414, 255,
	-433, 449, 61, -720, 414, -435, 398, -607, -608, 365,
	-7, -7, -522, 532, 541, -107, -121, -676, -121, -104,
	361, -122, -104, -7, -7, -522, -7, -7, -522, -7,
	-522, -7, 479, -102, -271, 40, -7, -7, 47, -7,
	28, -65, 47, -7, -7, 531, 47, -7, -522, -7,
	-7, -522, 74, 47, 74, 254, 317, -11, -401, 61,
	61, -7, -7, -7, -684, -683, -6, -522, 532, 541,
	541, 398, -636, 61, 74, -7, -7, -522, 74, -7,
	-522, -7, -7, -522, 74, -7, -522, -7, -522, -7,
	-13, -428, -13, -13, -522, 398, 398, -26, 61, 61,
	400, 201, -11, -497, -7, -11, 422, -7, -522, -7,
	-42, -102, 40, -7, -522, 93, 398, 93, 398, 93,
	365, -429, 398, 93, 398, 93, 365, 196, 22, 27,
	-7, -7, -103, -34, 28, -308, -103, 28, -5, -684,
	-7, -455, 196, 27, -522, -5, -606, 61, -7, -15,
	-449, 531, -108, -448, -450, 221, 279, -448, -448, 130,
	-108, -7, -516, -516, 290, 414, 406, 103, 61, -432,
	-432, -432, 74, -432, 530, -101, -101, 529, 532, 344,
	297, 341, -125, 341, -125, -125, -101, 532, 532, 532,
	57, 57, 532, -129, 532, -432, -17, 23, -7, -15,
	-7, -15, -432, 321, -432, -432, -432, -432, -432, -611,
	-614, 153, -37, 422, 130, -438, 36, -522, 64, 531,
	61, -511, -268, -124, -101, -108, -518, -523, -522, 71,
	140, -13, -51, -267, 541, 533, 45, 45, 45, 45,
	45, -519, -528, -6, 70, 532, -62, -518, 74, -432,
	64, 31, -500, -507, 130, 296, 296, 343, 427, 272,
	427, 272, 97, 411, -529, -103, 47, -529, -529, -529,
	-529, -529, -529, -529, 83, 83, -15, 261, -15, -529,
	-529, 321, 52, 23, -15, -15, -7, -108, -108, -449,
	-448, 139, -448, -448, 532, 190, -95, -131, -131, 541,
	-131, -65, -65, -100, -65, 97, -59, -63, 66, 36,
	-101, 6, 531, -129, 334, -174, -157, -159, 62, -164,
	517, -281, 65, -279, -717, -717, 453, 451, 453, 451,
	-717, -433, 57, 42, -65, -65, 61, -162, 59, -161,
	42, -65, 47, 49, 43, 50, 41, 260, 357, -167,
	-166, 64, 357, -168, 36, 168, 155, 134, 139, 146,
	-66, -66, -129, -182, 531, -156, 531, -129, 41, -97,
	-65, 530, 530, 541, 532, 532, 532, -131, 532, -74,
	-75, 263, -65, -142, 531, -141, -5, 531, 65, -336,
	47, 192, 155, 542, -338, 509, -348, -347, 515, -65,
	532, 532, 532, 532, 23, 532, 64, 532, 541, 532,
	532, 372, 532, 14, 534, 535, 536, 537, 538, 539,
	525, 526, 527, 18, 19, 20, -155, 52, 45, 62,
	-66, -66, -66, 532, 532, 48, 64, 130, 23, -86,
	-86, -86, 532, 64, -129, 541, 532, 532, 532, 532,
	-6, 532, 541, 23, -65, -320, 129, -6, 541, 532,
	-336, 541, 532, -108, -337, 541, 47, 192, -348, 532,
	-168, 532, -339, 541, 541, 541, -65, -281, 532, 531,
	85, -225, 100, 101, 155, 532, 541, -97, -224, -222,
	-65, 532, 541, -225, -65, 120, 541, 81, -292, 75,
	82, 79, 77, 78, 76, -284, -283, 23, -5, -284,
	-182, -304, -314, -324, -182, -291, -280, -286, -283, 23,
	-5, -284, -284, -313, 518, 64, 531, 531, -96, 74,
	-246, -103, 113, 114, -246, 532, 541, -433, -352, 531,
	-433, -49, 36, 168, -7, -433, -254, -438, -7, 23,
	-388, -14, -433, -435, 29, -677, 67, -121, -687, -461,
	212, 403, -681, -686, -103, -272, -680, 130, 532, 541,
	40, 527, -687, 74, 33, 122, -691, 532, 532, 509,
	541, 70, 532, 541, 527, -456, 63, 97, 98, 96,
	-7, 295, -262, -433, 67, 209, -442, -370, 117, -371,
	-373, 39, 31, 47, 471, 381, 513, 40, 392, 288,
	252, 311, -431, -410, -121, -30, -157, -267, -103, 355,
	62, 534, 535, 464, 532, 541, -108, -600, -601, -103,
	-429, 64, -7, -272, -272, -37, -417, 507, -612, -623,
	-7, 295, 478, -623, 532, -433, -433, 246, -619, -7,
	130, -101, -401, -401, 406, 71, -103, 47, 371, 371,
	68, 474, -401, -179, 29, -412, 532, 273, 51, -399,
	-633, 130, 4, 295, 64, 541, -65, -32, -428, -647,
	-262, 414, -262, -282, 65, -282, -13, 532, 61, 61,
	61, -44, -5, 40, 532, 541, 527, 533, -360, 130,
	40, -36, 282, 29, 31, -416, -415, 439, -372, 270,
	-65, 531, -367, 307, 531, -394, 531, 531, -7, -405,
	27, 93, 401, 196, -424, -269, -39, -426, 402, 93,
	-367, 29, -432, 29, -432, -7, -7, -7, -7, 418,
	418, 327, 307, 418, 532, 541, -419, -419, -10, -41,
	-103, 61, -720, 117, 414, 93, 364, 276, 61, 93,
	364, 61, 414, 61, 61, -720, 414, -7, -7, -7,
	74, -400, 398, 93, -7, -7, -7, -7, -400, 398,
	93, 61, -39, 61, -674, -121, -121, 538, -122, 61,
	-432, 29, -661, -65, -367, 276, 313, 47, -7, -522,
	398, 93, 365, 398, 196, 27, 93, 365, 541, 532,
	527, -108, 355, -108, 61, -637, 83, -401, -433, 276,
	276, -428, -428, -428, 61, 61, 255, -7, -522, -7,
	438, 61, 414, 61, 414, 61, 61, 414, 61, 414,
	61, 336, 336, 336, 61, 61, -103, 31, -432, 29,
	-432, 532, -269, 93, -272, -108, -15, -15, -108, 74,
	74, 506, -13, -401, -401, -522, -15, 530, 530, -101,
	532, -127, -127, 532, -432, -108, -432, 83, -432, 83,
	-7, 532, 541, 531, -7, -622, 246, 354, 422, -18,
	532, -525, 541, 36, -522, -13, 541, -45, -5, 414,
	414, 414, 414, 414, -524, 541, -526, 506, 49, 43,
	-522, -524, -534, -401, 29, -179, 272, 272, -7, -7,
	52, -15, 52, -7, -529, -108, 52, 52, 52, 52,
	52, 52, 52, -267, 52, 52, -95, 532, 532, 532,
	530, 66, 36, 455, -129, 532, 541, -164, 531, 91,
	92, -52, 71, -65, -433, -433, -717, -717, -717, -717,
	-433, -65, -65, 42, 42, -65, -66, -66, -65, 42,
	64, 357, -168, -65, 471, 471, 30, 30, 532, -65,
	532, -129, 532, 541, 532, -77, 532, -103, 266, -65,
	106, -170, -143, -5, -65, -168, 74, 74, -329, -329,
	-337, 70, 166, 532, -108, -65, -167, -65, -108, -66,
	-66, -66, -66, -66, -66, -66, -66, -66, -66, -66,
	-66, -66, 41, 31, 260, -66, -65, -65, -65, -108,
	532, 532, 532, -129, -65, 532, 541, -221, -6, -91,
	380, 442, 532, -67, -321, 70, 532, 541, -93, 479,
	-168, -334, -348, -339, -329, 74, 74, -339, 532, 532,
	-65, -65, -65, 23, -52, -180, -274, -230, 531, 74,
	-179, -179, 102, -219, -225, 527, -220, 122, -280, 75,
	75, -280, -292, 75, -293, 80, -293, -293, -134, 450,
	-5, 531, -284, -286, -284, -284, 532, -5, 531, 531,
	124, 531, -67, 133, -329, -65, -37, -256, -718, 83,
	-383, 310, -354, -365, -384, -385, 370, -353, -358, -359,
	-356, -5, -352, -391, 74, -388, 505, 531, 122, 370,
	23, -253, -179, 532, -602, -395, -7, -678, 531, 206,
	-65, 541, 541, 464, -673, -65, -65, -433, -690, -14,
	74, 70, -662, -655, -658, 4, -410, 61, 531, -623,
	-399, 531, -433, 28, -522, -7, -15, 252, 47, -376,
	503, 531, -66, -433, -421, 201, 70, 253, 299, -108,
	-308, -319, 39, 532, 541, -15, -603, 531, -122, -383,
	-352, 531, 370, 140, -621, -417, -622, -401, -401, -103,
	-103, -102, -103, -438, -441, -399, -367, -722, 286, 385,
	-624, -626, -5, -635, 61, -634, 21, 63, 96, 97,
	98, -623, -279, -646, 532, 74, -282, -5, 242, -282,
	531, -428, 36, 168, -103, -7, -7, -390, -410, -6,
	86, -355, 29, -414, -413, 230, -5, 40, 532, -14,
	-368, 31, 252, 311, 354, -7, -14, -367, -14, -363,
	-362, -234, -5, -305, 531, 31, 275, 298, 246, -425,
	288, 31, 275, 438, -388, -415, -413, -388, 288, -426,
	93, 464, -37, 438, -5, -7, 418, -7, -43, -7,
	-7, -7, -7, 449, 70, -7, -7, 449, 70, -7,
	-7, -7, -7, -7, -7, 61, 276, 61, -720, 414,
	93, 364, 61, 61, -720, 414, -7, -522, 464, 538,
	-7, -7, 532, -7, 313, 61, 414, 61, 61, -643,
	-648, 62, 286, 439, -644, -649, 62, 286, 414, 61,
	-683, 355, -685, -121, -30, -157, -267, -103, 532, 532,
	532, -7, -638, 36, 531, 398, -7, -7, -7, -7,
	74, -39, -42, -7, -7, -7, -7, -522, -7, -7,
	-7, -7, -522, 130, 130, 34, 130, 28, -7, -103,
	211, 198, 29, -5, 464, 23, 83, 83, 321, -520,
	448, 287, 410, 420, 465, 415, -520, 130, -432, 530,
	532, -7, -7, -432, -614, -611, 422, 246, -7, 532,
	-103, -524, -523, 290, -267, -13, -13, -13, -13, -13,
	-528, -432, 64, -524, 52, 52, -529, 52, -529, 52,
	532, -531, -103, 47, -531, -531, -531, -531, -531, -531,
	52, -531, -531, -131, 455, 532, -65, -156, -173, 72,
	70, -433, -433, -433, -433, -65, -65, 42, 30, 30,
	-65, -65, 319, 319, -65, -65, 532, 532, -65, -103,
	-65, 532, -139, 370, 532, -339, 47, 47, -339, -171,
	148, 532, 532, 64, 64, 41, 260, 42, 130, 64,
	532, 532, -81, -129, 489, 532, 483, 483, -321, 70,
	-67, 132, 155, -65, -94, 541, -65, 354, -339, 532,
	47, 47, 532, -340, 129, -340, -340, -109, -173, 532,
	109, -263, -234, 117, -236, -65, -245, -280, -280, -294,
	83, 74, 75, -280, -670, 531, -13, -283, 531, -306,
	-306, -5, -309, -310, -305, -320, 531, 541, -218, -228,
	-237, -238, 51, -258, -259, 531, -37, 150, -384, 531,
	304, 271, -412, 70, 532, 541, -369, 36, -360, -392,
	449, 228, -350, -15, 122, -179, 273, -438, -704, 36,
	-399, 531, 74, -687, -312, -675, -107, -104, -705, -103,
	130, -108, -696, 393, -433, -655, 532, -433, -645, 64,
	61, -651, 312, 23, -14, 531, 31, -442, -371, 31,
	-428, -428, -65, -262, 23, 40, 83, -15, -103, -418,
	-419, 422, -360, -350, 122, -7, 284, 422, 23, -392,
	-670, 273, 30, 45, -637, -401, -641, -65, 286, 500,
	286, 64, 527, 36, 45, 64, -355, -417, -5, 40,
	-367, 532, 252, 476, 299, 253, 309, 532, 532, 532,
	541, 36, -235, -227, 39, -235, -65, 47, 28, 28,
	-421, 47, 23, -42, -421, -108, -267, -42, -432, -432,
	61, 61, -7, -401, -7, -401, 61, -7, -7, -7,
	-7, -7, 449, 70, -7, -7, -7, -7, 464, -432,
	-367, -7, -7, -522, -7, 541, -101, -101, -108, 541,
	-101, -101, -7, -522, 513, -65, 61, 276, -13, -13,
	-15, -13, 29, -432, -103, -103, -432, -108, -108, -7,
	-7, -7, 61, 64, -516, -432, -432, -432, 532, -7,
	73, 506, -518, -432, -529, -529, -529, -529, 52, -531,
	532, 532, 532, -137, 484, -65, -53, -65, -65, -65,
	532, -131, 70, 532, 532, -7, -65, -66, 64, -65,
	-65, -65, 532, 541, 532, 531, -321, 532, 532, 435,
	155, 532, -339, -330, -331, -329, -341, -342, 40, -343,
	136, 47, 49, 43, 50, 138, -339, -92, 306, 354,
	-137, -301, 87, 97, 110, 532, 541, -7, 155, -294,
	531, -65, -280, 531, -13, 532, -306, 532, 532, 532,
	541, -311, 23, 123, -322, -323, -66, 40, -65, -225,
	-228, -229, 30, -229, 105, 31, -257, 115, 116, 149,
	47, 154, 151, 152, 42, 153, 148, -260, -264, -6,
	-258, -103, -412, -16, -366, 227, 230, 233, 251, 298,
	288, 308, 438, 439, 21, -366, -49, -5, -358, 507,
	-384, -7, 27, 98, 380, 532, -352, -433, -438, -7,
	513, 216, 58, 23, -263, -435, 541, 532, -121, 266,
	-688, -4, -461, 464, -692, 130, -697, -699, -694, 348,
	502, -703, 64, 532, -281, 532, 433, 433, -652, -653,
	478, 354, -623, -179, 532, 29, -393, 83, -393, 532,
	-377, 337, 298, 531, -7, 532, 541, -7, 422, 532,
	-433, -417, 246, -7, -179, 531, -722, -626, 531, -638,
	64, 532, -448, -640, 23, -640, -15, -410, 531, 531,
	531, -369, -378, 303, -378, 392, -378, -362, -156, 62,
	-398, -15, -15, 532, 29, 29, 531, 23, -319, -7,
	-7, -24, 93, -24, 93, -7, 61, -7, -401, 61,
	-648, -156, -450, -448, 531, -649, 531, 531, 531, 532,
	-7, -7, -727, 36, 518, -727, 34, -727, 130, -319,
	532, -518, -518, 74, -7, -524, -529, -138, -140, -5,
	-169, -172, -65, -175, -177, -176, -178, 531, 238, 408,
	293, -144, 388, 127, 294, -129, 130, -66, -129, -90,
	499, 354, -345, 168, 36, 541, 23, 532, 74, -65,
	134, 139, -344, -342, 532, 306, -302, 90, 89, 88,
	93, -281, -234, -179, -13, -129, 532, 532, -313, -310,
	531, -315, -316, -5, 541, 532, 23, -66, -328, 23,
	106, -65, 106, 105, -659, -659, -659, -659, 152, 31,
	47, -103, 532, 541, -265, -271, -267, 536, 40, 531,
	-281, -49, 532, -391, 531, -369, -412, 127, 127, -383,
	-384, -352, -253, 506, 513, 513, -179, 532, -395, -675,
	-678, 540, -108, -700, 51, -723, 262, -699, -695, 67,
	411, -367, -433, 109, 36, 36, -623, 478, -704, -399,
	-433, 307, -374, 354, -382, -379, -380, 74, 79, 369,
	429, -423, 531, -65, -650, 279, -419, -417, -7, -383,
	-352, 140, -417, -438, 532, -670, -625, 7, -279, -640,
	301, 205, -364, -361, -9, -129, -129, -428, 531, -428,
	-433, -428, 531, -163, -388, -235, -65, 298, -38, 83,
	449, 449, -7, -24, 93, -7, -711, 130, -711, -712,
	-712, -712, -65, -17, -17, -15, -15, -13, -432, -525,
	-432, -520, -417, -432, 541, 23, 541, 532, 531, 531,
	425, 532, -145, -146, 37, 467, 120, -65, -145, -145,
	-65, 532, 532, 155, -346, 145, 144, 140, 134, 140,
	134, 141, 142, -331, -6, 136, 532, 74, -14, 91,
	91, -216, 532, 532, -306, 532, 541, -108, 130, -323,
	541, -6, -340, -5, -231, -232, 109, 97, 98, -233,
	109, 96, 70, -103, -103, -103, -103, -14, 536, 47,
	-14, 536, -264, -261, -266, -271, -391, -392, -386, -387,
	-5, -305, 531, -49, -384, -412, -360, -438, 506, 506,
	-704, -397, 303, 531, -687, 273, 531, -693, 411, 437,
	-659, 130, -439, 315, 200, 286, 286, 23, 531, 449,
	309, -380, 74, -379, 74, 97, 98, -422, 532, 23,
	-15, -417, 422, -360, -7, 531, 532, 541, 532, 541,
	-101, 532, 532, -393, -14, -393, -262, -393, -156, -164,
	-163, 532, -423, -65, -7, -7, 449, -420, 391, 87,
	509, -420, 532, 532, 532, 532, -727, 64, -140, -141,
	-172, -129, -129, 531, -147, 270, -146, 377, 283, 411,
	377, 283, -147, -147, -344, 143, 143, 140, 140, 134,
	140, 134, 140, 138, 136, 93, 70, 70, -281, -285,
	23, -135, 399, 532, -316, -317, -318, 4, 40, 31,
	47, 128, 124, -67, 123, 110, 93, 110, -226, 102,
	531, 40, 86, 107, 108, -14, 536, 532, 541, -392,
	532, 541, -227, -227, -65, -391, -412, -49, -384, -376,
	531, -263, -722, -65, -702, -5, 262, -443, 110, -446,
	531, -179, -185, -186, -187, -210, -296, -448, -448, -179,
	-7, -381, 354, 35, 24, 93, -381, 532, 440, -643,
	-7, 422, -417, 532, 7, -361, 61, -367, 532, -367,
	-377, -281, 532, -164, -24, -24, -7, 70, -448, -15,
	-518, 532, 532, -169, 120, 71, 455, 354, 30, 532,
	74, 74, 140, 140, -342, -5, -14, -14, -5, 531,
	-318, -66, -66, 47, -66, -320, 531, -216, -236, -215,
	86, 531, -266, -387, -398, -398, 532, -392, -49, -391,
	-412, -399, -396, -234, 532, -670, 532, 411, -181, -182,
	-444, -447, -446, 541, 541, -704, 195, 47, 40, -417,
	-7, 531, -382, -367, -24, -15, -432, 532, 411, 501,
	-146, 146, 146, 74, 61, 83, 93, 93, -65, 123,
	-325, -326, -5, 131, 155, 532, -129, -227, -391, -392,
	-49, -392, 532, 541, -397, 531, -700, 532, 540, 61,
	64, -262, -262, -417, -129, -367, 147, 147, 136, -68,
	-670, 166, -5, -5, -5, 532, -315, 532, 541, 130,
	-108, -349, 128, -226, -226, 102, 532, -398, -392, -391,
	-281, -234, -376, -698, -701, -101, 6, -103, -6, 273,
	-447, 433, 433, 532, 40, 531, 532, -341, -326, 124,
	-327, -347, 29, 128, 7, -236, -392, -399, 532, 541,
	-722, 36, 36, -68, -82, 532, -345, -327, -327, 7,
	123, 23, 155, -392, -701, -670, 286, 286, 83, -131,
	-346, -345, -341, 531, -7, -226, -281, 531, -448, -448,
	-5, 532, -344, -346, -325, 123, -698, -344, 532, 531,
	532, -325, 532,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	3021, 3021, 1550, -2, 0, 1832, -2, 1895, 1895, 0,
	0, 0, 0, 0, 3021, 0, 3021, 3021, 0, 0,
	0, 0, 0, 1637, 1909, 1905, 0, 1905, 2354, 2355,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 174, 0, 0, 0, 0, -2, 1541, 1636,
	0, 2330, 2331, 1672, 0, 1583, 0, 0, 0, -2,
	3024, 3019, 3020, 2776, 0, 0, 0, 0, 1637, 0,
	1831, 0, 0, 2920, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 0, 0, 0, 0, 1958,
	1959, 0, 0, -2, 2131, 2897, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1894, 0, 0, 0, 0, 0, 2365, 139, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2361, 2362, 2363, 0, 0, 2367, 2368, 2369,
	0, 0, 0, 1878, 0, 1881, 1882, 1883, 1884, 1885,
	1886, 0, 0, 0, 2272, 333, 444, 234, 478, 2277,
	2724, 0, 561, 217, 434, -2, 425, 511, 2739, 149,
	150, 151, 188, 189, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 207, 208, 209, 210, 211, 212, 213, 214, 215,
	216, 218, 219, 220, 221, 222, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 233, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 282, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 292, 293, 294, 295, 296, 297,
	298, 299, 300, 301, 302, 303, 304, 305, 306, 307,
	308, 309, 310, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 334, 335, 336, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	349, 350, 352, 353, 354, 355, 356, 357, 358, 359,
	360, 361, 362, 363, 364, 365, 366, 367, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
	390, 391, 392, 393, 394, 395, 396, 397, 398, 399,
	400, 401, 402, 403, 404, 405, 406, 407, 408, 409,
	410, 411, 412, 413, 414, 415, 416, 417, 418, 419,
	420, 421, 422, 423, 424, 426, 427, 428, 429, 430,
	431, 432, 433, 435, 436, 437, 438, 439, 440, 441,
	442, 443, 445, 446, 447, 448, 449, 450, 451, 452,
	453, 454, 455, 456, 457, 458, 459, 460, 461, 462,
	463, 464, 465, 466, 467, 468, 469, 470, 471, 472,
	473, 474, 475, 476, 477, 479, 480, 481, 482, 483,
	484, 485, 486, 487, 488, 489, 490, 491, 492, 493,
	494, 495, 496, 497, 498, 499, 500, 501, 502, 503,
	504, 505, 506, 507, 508, 509, 510, 512, 513, 514,
	515, 516, 517, 518, 519, 520, 521, 522, 523, 524,
	525, 526, 527, 528, 529, 530, 531, 532, 533, 534,
	535, 536, 537, 538, 539, 540, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
	555, 556, 557, 558, 559, 560, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 2286, 2278, 561, 478, 444, 2282, 2283, 217,
	234, 333, 351, 425, 434, 511, 3024, 2776, 3024, 0,
	3024, 0, 3009, 444, 478, 561, 432, 3011, 478, 3232,
	159, 0, 3086, 3087, 3091, 2550, 2550, 2550, 198, 2550,
	0, 0, 3086, 2550, 2298, 1905, 1637, 0, 2311, 2312,
	2313, 2314, 2315, 2316, 2317, 2318, 2319, 2320, -2, 1903,
	0, 1908, 2326, 0, 1904, 2332, 561, 478, 444, 2336,
	0, 2342, 0, 0, 2356, 2357, 2358, 2359, 2360, 3202,
	1657, 3206, 3208, 0, -2, -2, -2, -2, 190, 413,
	3227, 3227, -2, -2, 3224, 3225, 1255, 0, 0, 1253,
	3207, 3228, 3229, 3242, 3244, 392, 3246, 3248, 3249, 3250,
	3253, 3254, 1472, 1254, 0, 173, 0, 1895, 3298, 3301,
	3302, 3304, 0, 3306, 0, 1392, 0, -2, -2, 1469,
	578, 579, 580, 581, 582, 583, 584, 585, 586, 587,
	588, 589, 590, 591, 592, 593, 594, 595, 596, 597,
	598, 599, 600, -2, 0, 2929, 2929, 2929, 0, -2,
	1554, 1555, 0, 1555, 0, 1588, 0, 1671, 1673, 1582,
	1611, 1612, 165, 0, 0, 1633, 408, 1638, 168, 1634,
	0, 2, 3017, 0, 3018, 2775, 2763, 0, 0, 2769,
	0, 0, 0, 1616, 0, 0, 0, 3233, 3234, 3235,
	3236, 3237, 2550, 0, 0, 0, 0, 145, 0, 0,
	0, 0, 0, 0, 0, 1895, 2919, -2, 0, -2,
	302, 2061, 1901, 184, 0, 221, 283, 1538, 0, 1524,
	1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534,
	1535, 1536, 1537, 2583, 0, 0, 302, 2061, 302, 0,
	0, 2645, 302, 338, 2061, 2168, 2169, 2170, 2171, 2172,
	2757, 2758, 2759, 2760, 0, 0, 0, 2819, 0, 0,
	168, 302, 133, 2784, 0, 0, 0, 2061, 2061, 1960,
	1961, 1962, 1963, 0, 302, 0, 3366, 302, 0, 0,
	302, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3373, 0, 3366, 0, -2, 3178, 0, 2168,
	0, 221, 283, 0, 0, 0, 302, 3366, 0, 3366,
	0, 0, 0, 0, 0, 0, 0, -2, 3034, 0,
	338, -2, 3034, 0, 0, 302, 0, 0, 0, 3073,
	0, 302, 137, 186, 302, 137, 160, 0, 302, 137,
	302, 1892, 1458, 0, 1459, 1460, 1461, 1462, 1463, 1272,
	1466, 1476, 1479, 1480, 1481, 1482, 1483, 1519, 264, 1476,
	1476, 1476, 1489, 1490, 1491, 1492, 1493, 1515, 1515, 1258,
	1512, 1467, 1468, 1517, 1505, 1517, 1517, 1500, 0, 1517,
	137, 302, 0, 0, 0, 221, 283, 137, 302, 3182,
	0, 137, 302, 137, 302, 3180, 137, 302, 137, 302,
	137, 302, 2384, -2, 302, 2567, 302, 0, 338, 3039,
	302, 2166, 3037, 302, 3041, 302, 2364, 0, 2366, 0,
	1876, 1877, 1880, 145, 0, 0, 2273, 444, 2274, 219,
	0, 0, 2288, 2289, 169, 2275, 0, 0, 0, 0,
	0, 0, 2727, 2728, 2729, 2752, 2753, 2730, 2755, 2756,
	0, 2279, 0, 2281, 3005, 3006, 3007, 3015, 3008, 0,
	3016, 3010, 3014, 0, 0, 0, 0, 0, 3088, 0,
	3093, 0, 3094, 3095, 3096, 3097, 0, 0, 0, 0,
	1637, 2300, 0, 2302, 2310, 565, 2305, 2306, 2307, 0,
	1905, 1902, 0, 2323, 2325, 2327, 168, 0, 2333, 0,
	2335, 0, 2345, 0, -2, 145, 145, 145, 2349, 2350,
	2351, 2352, 0, 0, 3209, 0, 3226, 0, 0, 0,
	3227, 3227, 0, 0, 0, 3227, 3227, 0, 3227, 3227,
	1256, 1257, 3238, 0, 3245, 3247, 3251, 0, 3257, 171,
	3400, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2365, 1887, 1888, 1889,
	1890, 1891, 0, 0, 3303, 3305, 0, 1393, 1277, 0,
	1280, 2984, 1567, 1564, 0, 2981, 2982, 1568, 0, 0,
	0, 1576, 0, 2927, 2928, 0, 0, 0, -2, 0,
	1552, 1553, 1678, 1587, 1589, 1593, 1594, 1131, 0, 0,
	0, 0, 0, 0, 2030, 1198, 1221, 1222, 1285, 0,
	1225, 1226, 1227, 524, 0, 1232, 1233, 528, 1520, 371,
	557, 1275, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247,
	0, 0, 0, 1408, 1543, 1545, 1289, 1235, 1236, 1237,
	1238, 1239, -2, 538, 535, 580, 1291, 1292, 1294, 1296,
	1298, 1300, 1301, 1302, 1303, 1304, 1305, -2, 0, 525,
	549, 553, 554, 560, 563, 564, 550, 521, 527, 544,
	568, 569, 571, 573, 570, 574, 575, 537, 534, -2,
	540, 541, 545, 539, 536, 543, 576, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 546, -2, -2,
	-2, -2, -2, -2, -2, 1494, 1495, 1496, 1497, 1678,
	0, 1613, 166, 1614, 0, 0, 0, 1635, 0, 0,
	0, 1448, 3022, 0, 0, 2765, 0, 2767, 2768, 2770,
	0, 1796, 0, 1617, 0, 1818, 0, 0, 0, 2550,
	302, 0, 2550, 0, 2598, 302, 132, 144, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1964, 0, 2556,
	0, 3373, 2059, 2060, 0, 1900, 185, 0, 2581, 0,
	2898, 0, 0, 2582, 0, 0, 0, 0, 0, 2588,
	0, 0, 2604, 0, 0, 0, 302, 2649, 0, 0,
	0, 0, 3044, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2853, 0, 0, 0, 0, 0, 3044, 3044,
	2141, 2154, 2241, 0, 2162, 0, 0, 0, 2241, 2241,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2233, 0, 0, 0, 2143, 2145, 0, 0,
	0, 3365, 0, 0, 0, 2146, 0, 2599, 0, 2039,
	0, 0, 0, 2043, 2058, 2046, 0, 0, 0, 0,
	2061, -2, 2056, 0, 2148, 2241, 0, 0, 3366, 302,
	0, 0, 302, 0, 2337, 0, 2338, 0, 0, 0,
	2383, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3383, 3373, 3369, 0, 0, 3388, 3372, 2285, 3374, 3387,
	3379, 0, 3381, 3382, 3384, 3385, 0, 2572, 0, 0,
	0, 0, 0, 0, 3175, 0, 0, 0, 3145, 3365,
	0, 0, 3149, 3150, 3151, 3152, 0, 0, 3157, 0,
	0, 0, 0, 3162, 0, 2503, 3176, -2, 0, 0,
	3062, 3063, 0, 0, 0, 0, 0, 2378, 0, 0,
	0, 0, 3175, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3175, 0, 0, 0, 0, 0, 0, 2642,
	2643, 0, 0, 0, 0, 0, 0, 0, 0, 2878,
	2879, 0, 0, 0, 0, 0, 0, 3046, 0, 0,
	0, 0, 0, 3046, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3185, 0, 3186, 0, 2611, 1895, 0, 0,
	0, 1870, 0, 0, 1873, 0, 0, 2243, 135, 136,
	0, 0, 2245, 0, 0, 0, 2248, 0, 1450, 1454,
	1458, 1464, 0, 1259, 1260, 1261, 1262, 1263, 1264, 1273,
	1477, 1476, 0, 1484, 0, 1485, 1486, 1487, 1488, 0,
	1509, 0, 0, 0, 1511, 1507, 1516, 0, 1498, 1499,
	1517, 1517, 1503, 2250, 0, 137, 302, 0, 138, 0,
	302, 0, 302, 2270, 0, 0, 0, 2260, 0, 2262,
	0, 0, 2264, 0, 2266, 0, 2268, 0, 0, 0,
	0, 0, 137, 0, 0, 0, 0, 0, 0, 1879,
	2370, 2371, 2372, 2373, 0, 0, 2656, 0, 0, 2731,
	2732, 2287, 2290, 2291, 0, 2734, 2725, 2735, 2737, 2741,
	2743, 2744, 1866, 1867, 1868, 1869, 2736, 2738, 2740, 2726,
	2745, 2746, 0, 2749, 2750, 2751, 2733, 2761, 2762, 2280,
	432, 3013, 1637, 0, 2902, 0, 3098, 0, 440, 0,
	291, 398, 428, 246, 263, 326, 327, 381, 434, 471,
	483, 0, 3132, 3092, 0, 0, 162, 164, 0, 0,
	0, 3132, 0, 2299, 1637, 0, 2304, 2308, 2309, 0,
	1907, 2326, 0, 2329, 2326, 2334, 2340, 2341, 0, 0,
	0, 0, 132, 2353, 3205, 3197, 3198, 3199, 3200, 0,
	3210, 3211, 3212, 3213, 0, 0, 3216, 3217, 3218, 0,
	0, 3221, 0, 0, 0, 3252, 0, 2165, 0, 137,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	221, 283, 0, 0, 0, 0, 0, 0, 0, 1895,
	3297, 1394, 0, 1541, 0, 0, 0, 1401, 1403, 0,
	-2, 1278, 1281, 1282, 1470, 152, 153, 154, 155, 156,
	601, 602, 603, 604, 605, 606, 607, 608, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 618, 619, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 638, 639, 640,
	641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 666, 667, 668, 669, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 1279, 0,
	1558, 2983, 1559, 1566, 1569, 0, 0, 1571, 0, 1573,
	0, 2979, 2980, 2985, 2993, 2994, 0, 3003, 3004, 2991,
	0, 2995, -2, 0, 0, 1579, 0, 1584, 1585, 1586,
	2945, 2946, 1946, 2984, 1567, 1596, 0, 0, 0, 733,
	701, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534,
	1535, 1536, 1537, 0, 694, 948, -2, 0, -2, 1035,
	866, 1169, 1171, -2, 845, 0, 0, 1592, -2, 945,
	1428, 157, 158, 679, 680, 681, 682, 683, 684, 685,
	686, 687, 688, 689, 690, 691, 692, 693, 695, 696,
	697, 698, 699, 700, 702, 703, 704, 705, 706, 707,
	708, 710, 711, 712, 713, 714, 715, 716, 717, 718,
	719, 720, 721, 722, 723, 724, 725, 726, 727, 728,
	729, 730, 731, 732, 734, 735, 736, 737, 738, 739,
	740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	841, 842, 843, 844, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 867, 868, 869, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 946, 947, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 990, 991, 992, 993, 994, 995,
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
	1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
	1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
	1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
	1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
	1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106,
	1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
	1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126,
	1127, 1128, 1129, 1130, 1136, 1137, 1151, 1154, 1155, 0,
	0, 0, 1223, 1448, 0, -2, 1228, 1229, 1230, 1231,
	0, 0, 0, 0, -2, 1248, 0, 1250, 1272, 0,
	0, 1407, 1545, 0, 2957, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1351, 0, 1351, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1748, 1748, 0, 0, 0, 0, 0, 0,
	0, 0, 1596, 0, 0, 0, 1639, 1643, 0, 0,
	1650, 0, 0, 0, 0, 1430, 1432, 0, 0, 1546,
	0, 0, 3023, 2764, 2766, 0, 0, 2774, 1931, 1798,
	0, 0, 0, 0, 1596, 1809, 0, 0, 1285, 1618,
	1656, 0, 0, 1827, 1827, 1824, 1825, 1967, 0, 0,
	2119, 0, 0, 2140, 0, 2595, 2597, 0, 0, 0,
	302, 131, 2482, 0, 2482, 0, 2506, 2507, 0, 0,
	0, 2580, 0, 0, 0, 0, 0, 0, 2719, 2718,
	2720, 2721, 2722, 2723, -2, 132, 2559, 3383, 2019, 0,
	1473, 0, 2801, 2803, 0, 0, 1539, 1692, 0, 0,
	0, 0, 0, 0, 2590, 0, 2601, 0, 2636, 1967,
	0, 0, 0, 2648, 2644, 0, 0, 2664, 2665, 0,
	3026, 0, 302, 2550, 0, 0, 0, 2818, 2825, 0,
	0, 0, 0, 2784, 2860, 0, 470, -2, 2550, 2868,
	0, 2783, 0, 0, 0, 3025, 3027, 0, 0, 0,
	0, 2240, 0, 2205, 2206, 0, 0, 2226, 0, 0,
	0, 0, 2173, 302, 0, 2197, 0, 0, 2076, 0,
	2030, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2219, 0,
	0, 2221, 2222, 0, 2227, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2040, 0, 2044, 2049,
	2050, 2041, 2042, 0, 2057, 2047, 2048, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2150, 2241, 0, 0,
	0, 0, 2152, 2241, 0, 0, 2636, 0, 0, 0,
	0, 2375, 2376, 0, 0, 2471, 2472, 2473, 2474, 2476,
	-2, 2478, 0, 0, 0, 0, 3367, 0, 0, 0,
	0, 0, 3368, 2284, 471, 0, 3375, 0, 3386, 3380,
	0, 0, 2239, 0, 0, 0, 0, 0, 2575, 0,
	2687, 0, 0, 0, 0, 0, 3142, 3146, 3174, 0,
	2502, 434, 444, 478, 0, 0, 0, 0, 0, 3155,
	3156, 3158, 3159, 3160, 3161, 3163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2836, 0, 0,
	3143, 434, 0, 0, 0, 2856, 2858, 2857, 2859, 0,
	0, 3144, 434, 0, 0, 0, 0, 0, 2641, 0,
	2646, 2647, 0, 2872, 0, 2873, 2784, 0, 0, 2880,
	0, 0, 3366, 0, 2807, 0, 2808, 2811, 0, 3028,
	3030, 0, 0, 3031, 0, 0, 3029, 3032, 3033, 0,
	2820, 2821, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 2609, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3071, 3072, 0,
	0, 0, 0, 0, 1871, 1872, 137, 187, 137, 161,
	137, 0, 1893, 137, 0, 0, 1451, 1455, 0, 0,
	0, 0, 0, 0, 1478, 0, 0, 0, 0, 0,
	0, 0, 0, 1501, 1502, 137, 2252, 0, 0, 0,
	0, 0, 0, 3183, 137, 0, 137, 3181, 137, 137,
	137, 2385, 137, 0, -2, 2568, 2569, 0, 0, 2167,
	3040, 3038, 3042, 2717, 0, 0, 0, 0, 2658, 0,
	170, 0, 1272, 0, 3012, 3230, 0, 3231, 0, 3099,
	3100, 0, 0, 3103, 3104, 3105, 3106, 3107, 3108, 0,
	3110, 3133, 3135, 3111, 3112, 3113, 0, 0, 0, 0,
	0, 3067, 0, 0, 0, 0, 3089, 2549, 0, 0,
	3086, 137, 0, 2301, 2303, 302, 2550, 2326, 1906, 2322,
	2328, 2324, 2345, 2344, 2343, 2346, 2347, 2348, 0, 0,
	0, 3201, 3214, 3215, 3219, 3220, 3222, 3223, 3241, 172,
	3255, 2164, 0, 0, 0, 3262, 3264, 3266, 3398, 3399,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1395, 0, 0,
	1540, 1541, 1541, 1541, 0, 0, 1283, 1280, 1565, 0,
	1574, 0, 0, 0, 2996, 0, 0, -2, -2, 0,
	2992, 3001, 3002, 2997, -2, -2, 2998, 1570, 1577, 0,
	1575, 0, 0, 1949, 1944, 1945, 1562, 1563, 1653, 0,
	1677, -2, -2, 333, 294, -2, 0, 183, 1590, 1132,
	1133, 0, 1135, 1138, 1139, 1140, 1141, 1142, 1143, -2,
	-2, -2, -2, -2, -2, 1150, 1152, 1153, -2, 1431,
	1433, 0, 1546, 0, -2, 0, 1168, 0, 1173, 1175,
	1177, 0, 1190, 1192, 0, 1447, 1434, 1435, 1436, 1437,
	1438, 0, 0, 1547, 1185, 1548, 0, 0, 1425, 1426,
	1427, 1591, 0, 1172, 0, 0, 1189, 2028, 0, 1286,
	1285, 0, 0, 0, 1416, 1417, 0, 0, 0, -2,
	1541, 1251, 0, 1413, 1409, 0, 2957, 0, 1288, 0,
	0, 1739, 1131, 0, 1744, 1782, 0, 0, 0, 0,
	0, 0, 0, 0, 1361, 1362, 1363, 1364, 1365, 1366,
	1367, 1368, 0, 0, 0, 1403, 1350, 0, 0, 1199,
	0, 0, 0, 557, 0, 0, 1403, 0, 0, 0,
	0, 0, 1448, 0, 1359, 0, 0, 0, 0, 0,
	0, 0, 1373, 1376, 0, 0, 0, 0, 0, 1739,
	0, 1733, 0, 1403, 1742, 1782, 0, 1731, -2, 1447,
	0, 1748, 1345, 0, 0, 0, 0, 1653, 0, 1615,
	1651, 0, 1641, 0, 167, 1449, 2771, 2772, 2773, 1951,
	0, 0, 1803, 1804, 0, 1805, 1285, 1802, 1797, 1656,
	0, 0, 0, 1814, 1813, 1951, 0, 1817, 1597, 1659,
	1659, 0, 1603, 0, 1668, 1659, 1659, 1682, 430, 577,
	542, 165, 1389, 1390, 1391, 533, 0, 0, 1826, 0,
	0, 1966, 1968, 164, 1970, 1971, 1972, 0, 1996, 0,
	148, 0, 0, 2717, 0, 0, 0, 0, 0, 0,
	0, 0, 2496, 2481, 2483, 0, 0, 0, 2488, 2489,
	0, 2461, 2462, 2464, 2496, 0, 2509, 2511, 2512, 2513,
	2515, 2508, 0, 2579, 0, 0, 0, 0, 2670, 2674,
	2672, 1467, 0, 0, 2917, 2550, 0, 2555, 0, 0,
	0, -2, 2571, 1474, 2800, 0, 0, 0, 2904, 0,
	1691, 1693, 0, 2683, 2594, 2584, 2585, 2586, 2587, 0,
	2603, 0, 0, 0, 2608, 2061, 2011, 2635, 2633, 0,
	0, 0, 0, 0, 0, 0, 2645, 0, 0, 3043,
	3047, 0, 0, 0, 0, 0, 0, 0, 3057, 3058,
	0, 0, 0, 0, 0, 2119, 0, 0, 2140, 2827,
	0, 0, 2842, 2843, 0, 2848, 2850, 2851, 0, 168,
	2784, 2855, 0, 2550, 0, -2, 2870, 2870, 0, 0,
	0, 2163, 2406, 0, 0, 2202, 2204, 0, 2225, 3318,
	0, 2450, 2453, 0, 145, 0, 2175, 302, 1994, 0,
	0, 0, 2441, 0, 0, 0, 0, 0, 1897, 0,
	2441, 302, 137, 302, 137, 2199, 2203, 2207, 2210, 2211,
	0, 0, 0, 0, 2215, 0, 2212, 2213, 2214, 2218,
	0, 2220, 0, 2223, 2228, 2796, 2797, 2798, 0, 0,
	0, 2788, 2790, 445, 193, 265, 0, 2015, 2142, 2155,
	2241, 0, 0, 2414, 0, 2237, 2144, 0, 0, 2408,
	3325, 2045, 2051, 2052, 2053, 2055, 2147, 0, 2600, 0,
	2410, 0, 3327, 2149, 2241, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, -2, 0,
	2386, 3307, 3334, 2374, 0, 0, 2470, 0, 2469, 1476,
	2475, 1476, 1476, 2387, 3308, 3335, 2388, 3309, 3336, 2389,
	3337, 3370, 3371, 3376, 3377, 3378, 2390, 0, 2573, 137,
	302, 2238, 2574, 3310, 0, 0, 2441, 2578, 3338, 2393,
	3312, 3339, 0, 0, 0, 3153, 3154, 2394, 3036, 0,
	0, 0, 0, 3313, 0, 3164, 3168, 3342, 2379, 0,
	0, 0, 2838, 0, 0, 2400, 3316, 3345, 0, 2401,
	3356, 2402, 3317, 3346, 0, 2403, 3347, 2404, 3354, 2405,
	2784, 2874, 2784, 2784, 3357, 0, 0, 0, 0, 0,
	2809, 2810, 2431, 3045, 3035, 2432, 0, 2433, 3349, 2434,
	2846, 1874, 1875, 3320, 3350, 0, 0, 0, 0, 0,
	0, 3397, 0, 0, 0, 0, 0, 0, 0, 0,
	2439, 0, 0, 0, 0, 137, 2681, 302, 137, 0,
	3333, 3187, 0, 0, 3348, 1897, 2610, 0, 2613, 2614,
	2615, 0, 2617, 2618, 2619, 221, 283, 2622, 2623, 0,
	2625, 3311, 0, 0, 0, 0, 0, 0, 0, 2242,
	2244, 2246, 0, 2249, 1456, 0, 0, 0, 1465, 1265,
	1266, 1267, 1268, 1269, 1270, 1271, 0, 1475, 1518, 1515,
	1513, 1514, 1515, 0, 1504, 2251, 137, 0, 137, 0,
	137, 0, 2271, 0, 2261, 2263, 2265, 2267, 2269, 0,
	2564, 2566, 0, 0, 0, 2692, 0, 2570, 0, 0,
	2657, 2276, 2742, 2747, 0, 2903, 3124, 3119, 3121, 0,
	0, 3102, 3109, 3137, 0, 0, 0, 0, 0, 0,
	0, 3132, 3126, 0, 0, 3090, 163, 3132, 0, 3069,
	0, 0, 2321, 2339, 0, 3203, 3204, 3256, 3258, 3265,
	3259, 3260, 0, 0, 3267, 3285, 3286, 3268, 3269, 3270,
	3271, 3272, 3273, 3274, 0, 0, 0, 263, 0, 3278,
	3279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1396, 0, 1402, 0, 0, 0,
	0, 1404, 1405, 0, 1279, 1572, 2986, 0, 2989, 0,
	2999, 3000, 0, 0, 1578, 2947, 1949, 1522, 0, 2949,
	0, 2931, 0, 1595, 0, 0, 174, 174, 174, 174,
	0, 182, 0, 0, -2, -2, 0, 0, 0, 1186,
	0, -2, 1170, 1174, 1176, 1178, 0, 1191, 1194, 0,
	1447, 0, 1193, 1196, 0, 0, 1439, 1440, 1441, 1442,
	0, 0, 0, 1187, 0, 0, 0, 0, 2029, 1224,
	1449, 1414, 1415, 0, 1234, 1521, -2, 0, 0, 0,
	1410, 0, 0, 1287, 0, 2955, 2956, 2960, 0, 1447,
	0, 0, 0, 0, 1742, 0, 1723, 1781, 0, 0,
	1293, 1295, 1297, 1299, 0, 1308, 0, 1309, 0, 1311,
	1312, 0, 1313, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1201, 1202, 1216, 1314, 1315, 0, 0, 0, 0, 0,
	0, 0, 1320, 0, 1358, 0, 1322, 1323, 1324, 1325,
	0, 1330, 0, 0, 1379, 0, 0, 0, 0, 1336,
	1447, 0, 1338, 1782, 1748, 0, 0, 0, 1748, 1341,
	0, 1343, 0, 0, 0, 0, 0, 2931, 1674, 1637,
	1642, 1795, 0, 1934, 0, 0, 0, 1807, 1951, 1810,
	1811, 0, 0, 1816, 1654, 242, 0, 0, 0, 0,
	0, 1630, 1630, 1630, 1628, 1599, 1658, 0, 1663, 1601,
	1659, 1668, 1659, 1659, -2, 1603, 0, 1605, 1664, 0,
	1663, 1607, 1609, 1679, 0, 0, 0, 0, -2, 0,
	2061, 1828, 1829, 1830, -2, 2109, 0, 1976, 2111, 0,
	1996, 2123, 0, 0, 2118, 2550, 0, 2694, 3242, 0,
	2139, 0, 2598, 2134, 0, 2482, 0, 2477, 2458, 2494,
	0, 0, 2484, 2485, 2490, 2486, 2487, 0, 2460, 0,
	0, 0, 2459, 0, 0, 0, 0, 2666, 2667, 0,
	0, 0, 2673, 0, 0, 0, 3192, 3193, 3194, 3195,
	0, 0, 2140, 0, 0, 0, 2558, 2018, 0, 2021,
	2022, 0, 0, 2067, 2030, 0, 0, 0, 0, 0,
	2024, 0, 2802, 2804, 2777, 2778, 2779, 2780, 2781, 2782,
	371, 1526, 1527, 0, 2592, 0, 1697, 0, 2682, 2684,
	2589, 0, 2605, 2606, 2607, 2604, 2626, 0, 2634, 2629,
	2637, 2630, 2632, 2631, 2109, 1996, 0, 0, 2649, 2011,
	0, 3048, 3049, 3050, 0, 0, 3053, 3054, 0, 0,
	0, 0, 3061, 2717, 0, 2140, 2441, 0, 0, 2817,
	2834, 0, 2824, 0, 0, 0, 0, 0, 2854, 2861,
	2870, 0, 2870, 2865, 0, 2867, 2784, 0, 0, 0,
	0, 2224, 2794, 2795, 2449, 0, 0, 0, 2234, 0,
	2006, 2235, 2236, 0, 0, 1990, 1993, 0, 2075, 2134,
	0, 0, 2079, 0, 0, 2441, 0, 0, 2133, 2177,
	0, 0, 0, 0, 2190, 0, 2196, 2033, -2, 0,
	2198, 0, 2194, 0, 2201, 2208, 2216, 2209, 2217, 2229,
	2230, 0, 0, 2231, 2787, 0, 2791, 2792, 2793, 2014,
	2016, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2412, 0, 3329,
	0, 2151, 2241, 0, 0, 2416, 0, 3331, 2153, 2241,
	0, 0, 2627, 0, 2377, 2467, 2468, 0, 1476, 0,
	2576, 0, 2686, 0, 2689, 0, 3147, 0, 2395, 3340,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3358,
	0, 0, 0, 0, 0, 2840, 0, 2835, 0, 0,
	0, 2877, 2875, 2876, 0, 0, 0, 2430, 3355, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2677, 0, 3188, 0,
	3190, 3184, 0, 0, 2612, 0, 0, 0, 0, 0,
	0, 0, 3074, 3075, 3076, 3341, 137, 1457, 1452, 0,
	1274, 1508, 1510, 1506, 2253, 0, 2255, 0, 2257, 0,
	137, 2562, 0, 0, 2662, 0, 2715, 0, 0, 0,
	0, 3132, 0, 0, 3122, 3101, 0, 3134, 3136, 0,
	0, 0, 0, 0, 3068, 0, 3127, 3128, 3129, 3130,
	3131, 137, 0, 3132, 0, 3196, 3261, 3263, 0, 0,
	0, 0, 0, 0, 3283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1541, 1397, 1399, 1400,
	1284, 2987, 0, 2990, 0, 1423, 0, 2948, 0, 1947,
	1948, 2944, 0, 1652, 175, 176, 0, 0, 0, 0,
	181, 1134, -2, 0, 0, -2, 0, 0, -2, 0,
	0, 1195, 1197, -2, 1444, 1446, 0, 0, 1549, 0,
	-2, 0, 1420, 0, -2, 1418, 1396, 1252, 1406, 1412,
	0, 0, 2962, 2959, 0, 1748, 0, 0, 1735, 1736,
	1748, 0, 1780, 1290, 0, 1360, 0, 0, 1200, 1203,
	1204, 1205, 1206, 1207, 1208, -2, -2, -2, -2, -2,
	-2, 1215, 0, 0, 1219, 1371, 0, 1354, 1355, 0,
	1317, 1318, 1319, 1357, 0, 1326, 0, 1374, 1375, 0,
	0, 0, 1332, 1700, 0, 211, 1333, 0, 1388, 0,
	1748, 1734, 1747, 0, 1732, 0, 0, 0, 1342, 1344,
	1727, 1727, 1727, 0, 2944, 0, 1950, 0, 0, 0,
	1799, 1800, 0, 1806, 1808, 0, 1815, 0, 1598, 0,
	0, 0, 0, 0, 1625, 1629, 1626, 1627, 1600, 0,
	1661, 0, 1602, 1606, 1608, 1610, 1619, 1661, 0, 0,
	1681, 0, 0, 572, 0, 0, 1838, 2061, 0, 1898,
	2111, 0, 1969, 1973, 2119, 2110, 0, 0, 1997, 1999,
	2000, 2019, 0, 2125, 0, 146, 147, 1967, 0, 0,
	0, 2717, 2554, 2140, 2596, 0, 0, 2496, 0, 2499,
	2497, 0, 0, 0, 2463, 2465, 2466, 2517, 2510, 2514,
	0, 0, 2671, 0, 2675, 0, 2676, 0, 0, 2922,
	0, 0, 0, 302, 2719, 0, 2023, 2025, 2066, 2784,
	2784, 0, 2071, 2550, 0, 2031, 0, 2026, 2027, 0,
	1694, 1695, 0, 2593, 0, 2591, 2602, 0, 2638, 0,
	0, 1967, 0, 0, 0, 2659, 0, 3051, 3052, 3055,
	3056, 3059, 3060, 2690, 0, 2125, 2693, 0, 2534, 2535,
	0, 2812, 0, 2838, 0, 2826, 2828, 2829, 2830, 2831,
	2832, 2841, 2844, 2849, 2852, 0, 2862, 2863, 2864, 2866,
	0, 2871, 0, 0, 0, 2418, 2424, 2451, 2452, 2455,
	0, 2174, 0, 2011, 1989, 0, 1991, 1992, 2441, 0,
	2442, 0, 2444, 0, 0, 2128, 0, 2081, 0, 0,
	2086, 0, 1943, 1943, 0, 0, 2181, 2191, 1896, 2037,
	0, 0, 0, 0, 2185, 2187, 2188, 2186, 0, 2034,
	0, 0, 0, 0, 137, 137, 2232, 2799, 2789, 2407,
	0, 0, 3319, 0, 0, 3364, 2415, 0, 0, 2409,
	3326, 2420, 2411, 0, 3328, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2392, 3353, 2479, 0,
	2391, 137, 2441, 3359, 3148, 0, 0, 0, 0, 2905,
	2890, 0, 0, 0, 2906, 2907, 0, 0, 0, 0,
	3165, 3166, 3167, 3169, 3170, 3171, 3172, 3173, 2380, 2382,
	2381, 2398, 2823, 0, 0, 0, 3360, 3361, 2428, 2429,
	0, 2661, 2847, 2435, 3321, 2436, 3322, 3351, 2437, 3323,
	2438, 3324, 3352, 0, 0, 0, 0, 0, 137, 2680,
	0, 0, 140, 137, 0, 0, 0, 0, 0, 0,
	3080, 3081, 3082, 3083, 3084, 3085, 0, 0, 2247, 1453,
	137, 137, 137, 2259, 2565, 0, 0, 2716, 0, 2655,
	2748, 3064, 3120, 0, 3138, 3114, 3115, 3116, 3117, 3118,
	3125, 3065, 0, 137, 0, 0, 3275, 0, 3277, 0,
	0, 3287, 3299, 3300, 3288, 3289, 3290, 3291, 3292, 3293,
	0, 3295, 3296, 0, 2988, 1422, 1449, 0, 2951, 0,
	2929, 177, 178, 179, 180, -2, -2, 0, 0, 0,
	-2, -2, 1443, 1445, -2, -2, 1188, 1419, 1449, 1249,
	1411, 1542, 1541, 0, 1544, 0, 1737, 1738, 0, 1743,
	0, 1307, 1310, 0, 0, 0, 1220, 0, 0, 0,
	1316, 1321, 0, 0, 567, 1331, 1377, 1378, 1701, 0,
	1702, 1698, 1699, 0, 0, 0, 1383, 359, 0, 1339,
	1740, 1741, 1340, 1748, 0, 1764, 1748, 1382, 2951, 1646,
	0, 0, 1935, 0, 0, 1812, 1655, 1620, 0, 1622,
	0, 0, 0, 1624, 0, 0, 0, 1604, 0, 0,
	0, 159, 0, 1683, 1687, 0, 0, 0, 1951, 1820,
	1920, 1920, 0, 1822, 1835, 0, 1838, 0, 2119, 0,
	0, 0, 148, 0, 1995, 0, 2001, 0, 2111, 3243,
	0, 0, 0, 1996, 0, 2717, 0, 3239, 2545, 0,
	0, 0, 0, 2456, 0, 1688, 0, 1471, -2, 2491,
	0, 2492, 2527, 0, 2544, 0, 2668, 1653, 0, 0,
	0, 2924, 0, 0, 0, 1967, 0, 2557, 2020, 0,
	2127, 2127, 0, 2095, 0, 2032, 0, 1696, 2685, 0,
	2012, 0, 0, 0, 0, 2011, 0, 0, 0, 2714,
	0, 0, 0, 0, 2840, 2833, 0, 0, 0, 2886,
	2886, 0, 0, 0, 0, 0, 2176, 2019, 1987, 1988,
	2077, 2091, 2443, 2447, 2445, 2446, 2448, 2091, 0, 2091,
	0, 0, 1937, 134, 0, 1938, 0, 2178, 0, 0,
	2038, 2179, 0, 2183, 0, 1697, 2036, 2184, 2193, 2200,
	0, 0, 2165, 0, 2165, 0, 0, 2422, 3363, 2413,
	0, 3330, 0, 0, 2426, 2417, 0, 3332, 2480, 2577,
	2688, 2396, 3314, 3343, 2397, 0, 0, 0, 2896, 0,
	0, 0, 3315, 3344, 0, 0, 0, 0, 0, 0,
	0, 3393, 0, 2440, 2678, 2679, 3189, 1697, 0, 2620,
	2621, 2624, 0, 0, 0, 2254, 2256, 2258, 2563, 2663,
	0, 3123, 3132, 3070, 3281, 3282, 3276, 3280, 0, 3294,
	1398, 1424, 1523, 1580, 0, 2943, 0, -2, -2, -2,
	1421, 2966, 0, 1745, 1746, 1779, 1370, -2, 0, 1356,
	1352, 1353, 1327, 0, 1328, 0, 1703, 1334, 1335, 0,
	1384, 1337, 1773, 1726, 1728, 0, 0, 0, 0, 1750,
	1751, 1752, 1753, 1754, 1755, 1758, 1762, 0, 1380, 0,
	1581, 1649, 0, 0, 1930, 1653, 0, 1933, 0, 1621,
	0, 1632, 1623, 0, 0, 1662, 0, 1665, 1667, 1682,
	0, 1685, 0, 0, 0, 1704, 0, 0, 1725, 1819,
	1821, 0, 0, 0, 1915, 0, 1837, 1839, 1840, 1901,
	1901, 1843, 1844, 1901, 1901, 0, 0, 0, 1854, 1862,
	1653, 1833, 148, 0, 1974, 1977, 1978, 1979, 1980, 1981,
	1982, 1983, 1984, 1985, 1986, 1975, 2123, 0, 1998, 2019,
	2119, 2124, 2120, 0, 0, 2109, 2111, 1996, 2695, 3242,
	0, 0, 0, 0, 0, 2134, 0, 2482, 1690, 2495,
	0, 2500, 2501, 0, 2533, 2529, 2516, 2518, 0, 2521,
	2522, 2441, 0, 2669, 0, 2912, 0, 0, 2918, 2923,
	0, 0, 2921, 2554, 2140, 0, 2068, 0, 2069, 2085,
	2100, 0, 2065, 0, 2889, 2010, 0, 2011, 0, 2109,
	1996, 2639, 0, 2011, 2717, 0, 0, 2813, 0, 2822,
	0, 2869, 2886, 2883, 0, 2882, 2911, 2454, 0, 0,
	0, 2017, 2784, 0, 2784, 0, 2784, 2087, 2088, 371,
	1946, 133, 1942, 1943, 2182, 2192, 0, 0, 2786, 2419,
	2425, 2156, 0, 2158, 0, 2421, 0, 2165, 0, 0,
	2891, 2901, 2901, 2894, 0, 2908, 0, 0, 0, 2837,
	2399, 3362, 0, 3395, 3396, 0, 0, 0, 0, 137,
	2616, 3124, 137, 0, 2011, 137, 3284, 2950, 2952, 0,
	2930, 2932, 2934, 2935, 2936, 2937, 2938, 0, 241, 427,
	528, 0, 0, 0, 0, 2961, 0, -2, 0, 0,
	1385, 1386, 1778, 0, 0, 0, 0, 1347, 0, 1749,
	1756, 1757, 0, 0, 1349, 1381, 1640, 0, 0, 0,
	0, 1932, 1936, 1801, 0, 0, 1660, 1666, 1680, 1684,
	0, 0, 1710, 0, 0, 0, 0, 1707, 1727, 0,
	0, 1919, 0, 1917, 0, 0, 0, 0, 0, 0,
	0, 1853, 1836, 0, 1856, 1857, 1858, 1859, 1860, 0,
	1823, 2123, 2108, 2125, 0, 2002, 148, 2121, 2122, 2111,
	2119, 0, 2717, 2551, 0, 0, 2554, 2136, 0, 1689,
	2496, 2498, 2493, 0, 0, 0, 2528, 2519, 1901, 2523,
	2524, 0, 2543, 2711, 0, 0, 2925, 2926, 2546, 0,
	0, 0, 2070, 0, 2072, 2096, 2097, 0, 2092, 2093,
	2094, 2073, 0, 0, 0, 0, 2013, 2650, 2011, 0,
	0, 0, 2660, 2691, 2805, 0, 0, 2815, 2845, 2881,
	2884, 2885, 0, 2008, 0, 0, 0, 2127, 0, 2127,
	2550, 2127, 0, 1949, 1946, 1939, 0, 2065, 2195, 0,
	0, 0, 2423, 2160, 0, 2427, 2063, 0, 2063, 0,
	0, 0, 0, 3389, 3390, 0, 3391, 3394, 3191, 3077,
	3078, 0, 2654, 3066, 0, 0, 0, 2939, 0, 0,
	0, 2958, 2978, 2967, -2, 486, 242, 0, 2978, 2978,
	1369, 1329, 1372, 1387, 1762, 0, 0, 1765, 0, 1767,
	0, 0, 0, 1729, 1730, 1763, 1348, 0, 0, 0,
	0, 1653, 1670, 3141, 0, 1708, 0, 1712, 0, 1705,
	0, 1706, 0, 1724, 1910, 1911, 0, 0, 1922, 1912,
	0, 0, 0, 1841, 1842, 1845, 1846, 1847, 1848, 0,
	1851, 1852, 1855, 0, 1863, 1865, 2125, 1954, 0, 2113,
	1943, 1943, 0, 2123, 2119, 148, 2111, 3240, 2552, 2553,
	2547, 2030, 0, 0, 2457, 0, 0, 2526, 2530, 2531,
	0, 0, 1637, 2709, 2710, 0, 0, 0, 1967, 0,
	2084, 2098, 0, 2099, 0, 0, 0, 0, 0, 0,
	2888, 2652, 0, 0, 2011, 0, 2814, 0, 2003, 0,
	2007, 2004, 0, 2441, 0, 2441, 2095, 1653, 0, 1940,
	1949, 2180, 2189, 2785, 2165, 2165, 0, 2892, 2062, 2899,
	0, 2893, 0, 2909, 2910, 2839, 0, 0, 2953, 2954,
	2933, 0, 0, 0, 2963, 0, 0, 2969, 2970, 2971,
	2972, 2973, 2964, 2965, 0, 1775, 1777, 1766, 1768, 0,
	1771, 0, 1772, 1759, 1760, 0, 0, 0, 1929, 1631,
	0, 3139, 0, 1686, 1711, 1714, 1715, 0, 0, 0,
	1720, 0, 1713, 0, 0, 1913, 0, 1914, 1923, 0,
	0, 0, 0, 1916, 1918, 1849, 1850, 1861, 0, 1952,
	2112, 0, 134, 134, 0, 2125, 148, 2123, 2119, 2140,
	0, 0, 0, 0, 2520, 2525, 0, 2696, 2697, 2698,
	-2, 2702, 2703, 2704, 2705, 2706, 0, 2915, 2916, 2554,
	2126, 2101, 0, 2104, 2105, 0, 2102, 2064, 2074, 2887,
	2011, 0, 2640, 2806, 2816, 2009, 0, 2078, 2090, 2080,
	2100, 2441, 2089, 1941, 2157, 2159, 2165, 0, 2895, 3392,
	137, 2941, 2940, 0, 0, 2975, 2976, 0, 0, 1346,
	0, 0, 1769, 1770, 0, 0, 0, 0, 1669, 0,
	1716, 1717, 1718, 1719, 1721, 0, 0, 1921, 0, 0,
	1927, 0, 1864, 2114, 2115, 2116, 1943, 1956, 2123, 2125,
	148, 2125, 0, 2137, 2136, 0, 2532, 2533, 1550, -2,
	0, 2701, 2707, 0, 0, 2548, 2103, 2550, 2550, 2651,
	2011, 0, 2441, 2083, 2161, 2900, 3079, 2942, 2974, 2977,
	2968, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1785, 0, -2, 0, 0, 0, 134, 2125, 1955,
	2123, 1653, 2135, 0, 2030, 2538, 0, 2699, -2, 0,
	0, 2106, 2107, 2653, 0, 2082, 1774, 1776, 1761, 0,
	0, -2, 1648, 1644, 1645, 3140, 0, 1764, 0, 0,
	1794, 0, 1783, 1924, 1925, 0, 1928, 2117, 1953, 2125,
	2129, 2138, 2140, 0, 2536, 2539, 2540, 2541, 2542, 0,
	2700, 0, 0, 2005, 0, 0, 1709, 0, 1786, 1787,
	1773, 1794, 1794, 0, 0, 0, 1957, 2125, 2504, 0,
	0, 0, 0, 0, 1541, 1722, 1778, 1773, 1764, 1793,
	0, 0, 0, 1653, 2537, 0, 0, 0, 0, 0,
	1762, 1778, 1790, 0, 0, 1926, 2130, 2538, 2913, 2914,
	1647, 0, 1788, 1762, 0, 0, 0, 1789, 1791, 0,
	2505, 0, 1792,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 538, 3, 3,
	531, 532, 536, 534, 541, 535, 533, 537, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 542, 540,
	525, 527, 526, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 529, 3, 530, 539,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 528, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:611
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:626
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:634
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:649
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:652
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:656
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:657
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:658
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:659
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:660
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:661
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:662
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:663
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:664
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:665
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:666
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:667
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:668
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:669
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:670
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:671
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:672
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:673
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:674
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:675
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:676
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:677
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:678
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:679
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:680
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:681
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:682
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:683
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:684
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:685
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:686
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:687
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:688
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:689
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:690
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:691
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:692
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:693
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:694
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:695
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:696
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:697
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:698
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:699
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:700
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:701
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:702
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:703
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:704
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:705
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:706
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:707
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:708
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:709
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:710
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:711
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:712
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:713
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:714
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:715
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:716
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:717
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:718
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:719
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:720
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:721
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:722
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:723
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:724
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:725
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:726
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:727
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:728
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:729
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:730
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:731
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:732
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:733
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:734
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:735
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:736
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:737
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:738
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:739
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:740
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:741
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:742
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:743
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:744
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:745
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:746
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:747
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:748
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:749
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:750
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:751
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:752
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:753
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:754
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:755
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:756
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:757
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:758
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:759
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:760
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:761
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:762
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:763
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:764
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:765
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:766
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:767
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:768
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:769
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:770
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:771
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:772
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:773
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:774
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:775
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:776
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:777
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:778
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:779
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:781
		{
			yyVAL.stmt = nil
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:792
		{
			yyVAL.str = yyDollar[1].str
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:793
		{
			yyVAL.str = ""
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:797
		{
			yyVAL.list = yyDollar[1].list
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:798
		{
			yyVAL.list = nil
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:802
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:803
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:804
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:808
		{
			yyVAL.ival = 1
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:809
		{
			yyVAL.ival = 0
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:813
		{
			yyVAL.ival = 1
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:814
		{
			yyVAL.ival = 0
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:818
		{
			yyVAL.bval = true
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:819
		{
			yyVAL.bval = false
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:823
		{
			yyVAL.bval = true
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:824
		{
			yyVAL.bval = false
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:828
		{
			yyVAL.list = yyDollar[2].list
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:829
		{
			yyVAL.list = nil
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:830
		{
			yyVAL.list = nil
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:839
		{
			yyVAL.str = yyDollar[1].str
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:840
		{
			yyVAL.str = yyDollar[1].str
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:841
		{
			yyVAL.str = yyDollar[1].str
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:845
		{
			yyVAL.str = yyDollar[1].str
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:846
		{
			yyVAL.str = yyDollar[1].str
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:847
		{
			yyVAL.str = yyDollar[1].str
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:848
		{
			yyVAL.str = yyDollar[1].str
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:849
		{
			yyVAL.str = yyDollar[1].str
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:852
		{
			yyVAL.str = yyDollar[1].str
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:853
		{
			yyVAL.str = yyDollar[1].str
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:856
		{
			yyVAL.str = yyDollar[1].str
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:861
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:865
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:874
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:878
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:885
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:892
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:899
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:928
		{
			yyVAL.list = yyDollar[2].list
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:929
		{
			yyVAL.list = nil
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:934
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:938
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:947
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:951
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:964
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:970
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:976
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:982
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:988
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:995
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1002
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1008
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1014
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1023
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1027
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1039
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1043
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "abort"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "absent"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "absolute"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "access"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "action"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "add"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "admin"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "after"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "aggregate"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "also"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "alter"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "always"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "asensitive"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "assertion"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "assignment"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "at"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "atomic"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "attach"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "attribute"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "backward"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "before"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "begin"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "breadth"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "by"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "cache"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "call"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "called"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "cascade"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "cascaded"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "catalog"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "chain"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "characteristics"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "checkpoint"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "class"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "close"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "cluster"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "columns"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "comment"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "comments"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "commit"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "committed"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "compression"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "conditional"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "configuration"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "conflict"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "connection"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "constraints"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "content"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "continue"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "conversion"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "copy"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "cost"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "csv"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "cube"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "current"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "cursor"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "cycle"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "data"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "database"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "day"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "deallocate"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "declare"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "defaults"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "deferred"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "definer"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "delete"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "delimiter"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "delimiters"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "depends"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "depth"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "detach"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "dictionary"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "disable"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "discard"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "document"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "domain"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "double"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "drop"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "each"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "empty"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "enable"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "encoding"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "encrypted"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "enum"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "error"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "escape"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "event"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "exclude"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "excluding"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "exclusive"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "execute"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "explain"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "expression"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "extension"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "external"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "family"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "filter"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "finalize"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "first"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "following"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "force"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "format"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "forward"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "function"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "functions"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "generated"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "global"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "granted"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "groups"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "handler"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "header"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "hold"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "hour"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "identity"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "if"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.str = "immediate"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1169
		{
			yyVAL.str = "immutable"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.str = "implicit"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "import"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "include"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "including"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.str = "increment"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.str = "indent"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			yyVAL.str = "index"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1177
		{
			yyVAL.str = "indexes"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = "inherit"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = "inherits"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "inline"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "input"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "insensitive"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "insert"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "instead"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "invoker"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "isolation"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "keep"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "key"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "keys"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "label"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "language"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "large"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "last"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1194
		{
			yyVAL.str = "leakproof"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "level"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "listen"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "load"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.str = "local"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.str = "location"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.str = "lock"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.str = "locked"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "logged"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "mapping"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = "match"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = "matched"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = "materialized"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1207
		{
			yyVAL.str = "maxvalue"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1208
		{
			yyVAL.str = "merge"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1209
		{
			yyVAL.str = "method"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1210
		{
			yyVAL.str = "minute"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.str = "minvalue"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1212
		{
			yyVAL.str = "mode"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1213
		{
			yyVAL.str = "month"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1214
		{
			yyVAL.str = "move"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.str = "name"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1216
		{
			yyVAL.str = "names"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1217
		{
			yyVAL.str = "nested"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.str = "new"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.str = "next"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "nfc"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "nfd"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "nfkc"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "nfkd"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "no"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "normalized"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "nothing"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "notify"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "nowait"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "nulls"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "object"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "of"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "off"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "oids"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "old"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.str = "omit"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1236
		{
			yyVAL.str = "operator"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.str = "option"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1238
		{
			yyVAL.str = "options"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1239
		{
			yyVAL.str = "ordinality"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1240
		{
			yyVAL.str = "others"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.str = "over"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1242
		{
			yyVAL.str = "overriding"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1243
		{
			yyVAL.str = "owned"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1244
		{
			yyVAL.str = "owner"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.str = "parallel"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1246
		{
			yyVAL.str = "parameter"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1247
		{
			yyVAL.str = "parser"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1248
		{
			yyVAL.str = "partial"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1249
		{
			yyVAL.str = "partition"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1250
		{
			yyVAL.str = "passing"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1251
		{
			yyVAL.str = "password"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1252
		{
			yyVAL.str = "path"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.str = "plan"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1254
		{
			yyVAL.str = "plans"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1255
		{
			yyVAL.str = "policy"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1256
		{
			yyVAL.str = "preceding"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "prepare"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.str = "prepared"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.str = "preserve"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "prior"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "privileges"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "procedural"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "procedure"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "procedures"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "program"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "publication"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "quote"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "quotes"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.str = "range"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1270
		{
			yyVAL.str = "read"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "reassign"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "recheck"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "recursive"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "ref"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "referencing"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "refresh"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "reindex"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "relative"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.str = "release"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1280
		{
			yyVAL.str = "rename"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1281
		{
			yyVAL.str = "repeatable"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1282
		{
			yyVAL.str = "replace"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.str = "replica"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1284
		{
			yyVAL.str = "reset"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1285
		{
			yyVAL.str = "restart"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1286
		{
			yyVAL.str = "restrict"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1287
		{
			yyVAL.str = "return"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1288
		{
			yyVAL.str = "returns"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1289
		{
			yyVAL.str = "revoke"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1290
		{
			yyVAL.str = "role"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1291
		{
			yyVAL.str = "rollback"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1292
		{
			yyVAL.str = "rollup"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1293
		{
			yyVAL.str = "routine"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1294
		{
			yyVAL.str = "routines"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1295
		{
			yyVAL.str = "rows"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1296
		{
			yyVAL.str = "rule"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1297
		{
			yyVAL.str = "savepoint"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1298
		{
			yyVAL.str = "scalar"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1299
		{
			yyVAL.str = "schema"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1300
		{
			yyVAL.str = "schemas"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.str = "scroll"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.str = "search"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "second"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "security"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "sequence"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "sequences"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "serializable"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "server"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "session"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "set"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.str = "sets"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1312
		{
			yyVAL.str = "share"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			yyVAL.str = "show"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1314
		{
			yyVAL.str = "simple"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.str = "skip"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1316
		{
			yyVAL.str = "snapshot"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1317
		{
			yyVAL.str = "source"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1318
		{
			yyVAL.str = "sql"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1319
		{
			yyVAL.str = "stable"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1320
		{
			yyVAL.str = "standalone"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1321
		{
			yyVAL.str = "start"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1322
		{
			yyVAL.str = "statement"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1323
		{
			yyVAL.str = "statistics"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1324
		{
			yyVAL.str = "stdin"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1325
		{
			yyVAL.str = "stdout"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1326
		{
			yyVAL.str = "storage"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1327
		{
			yyVAL.str = "stored"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1328
		{
			yyVAL.str = "strict"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1329
		{
			yyVAL.str = "string"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1330
		{
			yyVAL.str = "strip"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1331
		{
			yyVAL.str = "subscription"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1332
		{
			yyVAL.str = "support"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1333
		{
			yyVAL.str = "sysid"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1334
		{
			yyVAL.str = "system"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1335
		{
			yyVAL.str = "tables"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = "tablespace"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "target"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "temp"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "template"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "temporary"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "text"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "ties"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "transaction"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "transform"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1345
		{
			yyVAL.str = "trigger"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1346
		{
			yyVAL.str = "truncate"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1347
		{
			yyVAL.str = "trusted"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1348
		{
			yyVAL.str = "type"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1349
		{
			yyVAL.str = "types"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1350
		{
			yyVAL.str = "uescape"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1351
		{
			yyVAL.str = "unbounded"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1352
		{
			yyVAL.str = "uncommitted"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1353
		{
			yyVAL.str = "unconditional"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1354
		{
			yyVAL.str = "unencrypted"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1355
		{
			yyVAL.str = "unknown"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1356
		{
			yyVAL.str = "unlisten"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1357
		{
			yyVAL.str = "unlogged"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "until"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "update"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "vacuum"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1361
		{
			yyVAL.str = "valid"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1362
		{
			yyVAL.str = "validate"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.str = "validator"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1364
		{
			yyVAL.str = "value"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1365
		{
			yyVAL.str = "varying"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1366
		{
			yyVAL.str = "version"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1367
		{
			yyVAL.str = "view"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1368
		{
			yyVAL.str = "views"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1369
		{
			yyVAL.str = "volatile"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1370
		{
			yyVAL.str = "whitespace"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.str = "within"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1372
		{
			yyVAL.str = "without"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1373
		{
			yyVAL.str = "work"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1374
		{
			yyVAL.str = "wrapper"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1375
		{
			yyVAL.str = "write"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1376
		{
			yyVAL.str = "xml"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1377
		{
			yyVAL.str = "year"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.str = "yes"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1379
		{
			yyVAL.str = "zone"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "between"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.str = "bigint"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.str = "bit"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1396
		{
			yyVAL.str = "boolean"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.str = "char"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.str = "character"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1399
		{
			yyVAL.str = "coalesce"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1400
		{
			yyVAL.str = "dec"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1401
		{
			yyVAL.str = "decimal"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.str = "exists"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1403
		{
			yyVAL.str = "extract"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1404
		{
			yyVAL.str = "float"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1405
		{
			yyVAL.str = "greatest"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1406
		{
			yyVAL.str = "grouping"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1407
		{
			yyVAL.str = "inout"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1408
		{
			yyVAL.str = "int"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.str = "integer"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1410
		{
			yyVAL.str = "interval"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1411
		{
			yyVAL.str = "json"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1412
		{
			yyVAL.str = "json_array"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1413
		{
			yyVAL.str = "json_arrayagg"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1414
		{
			yyVAL.str = "json_exists"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1415
		{
			yyVAL.str = "json_object"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.str = "json_objectagg"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1417
		{
			yyVAL.str = "json_query"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "json_scalar"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1419
		{
			yyVAL.str = "json_serialize"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "json_table"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "json_value"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "least"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "merge_action"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "national"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "nchar"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "none"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "normalize"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "nullif"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "numeric"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "out"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "overlay"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "position"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "precision"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "real"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "row"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = "setof"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1437
		{
			yyVAL.str = "smallint"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1438
		{
			yyVAL.str = "substring"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1439
		{
			yyVAL.str = "time"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1440
		{
			yyVAL.str = "timestamp"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1441
		{
			yyVAL.str = "treat"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1442
		{
			yyVAL.str = "trim"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1443
		{
			yyVAL.str = "values"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1444
		{
			yyVAL.str = "varchar"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1445
		{
			yyVAL.str = "xmlattributes"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1446
		{
			yyVAL.str = "xmlconcat"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1447
		{
			yyVAL.str = "xmlelement"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1448
		{
			yyVAL.str = "xmlexists"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1449
		{
			yyVAL.str = "xmlforest"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "xmlparse"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "xmlpi"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "xmlroot"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "xmlserialize"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1455
		{
			yyVAL.str = "xmltable"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "authorization"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1470
		{
			yyVAL.str = "binary"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.str = "collation"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1472
		{
			yyVAL.str = "concurrently"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.str = "cross"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.str = "current_schema"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1475
		{
			yyVAL.str = "freeze"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1476
		{
			yyVAL.str = "full"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.str = "ilike"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "inner"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1479
		{
			yyVAL.str = "is"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.str = "isnull"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1481
		{
			yyVAL.str = "join"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "left"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "like"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "natural"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "notnull"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "outer"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.str = "overlaps"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1488
		{
			yyVAL.str = "right"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = "similar"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = "tablesample"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.str = "verbose"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "all"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "analyse"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "analyze"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "and"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "any"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "array"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "as"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "asc"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "asymmetric"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "both"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "case"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "cast"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "check"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "collate"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "column"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "constraint"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "create"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "current_catalog"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "current_date"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "current_role"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "current_time"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "current_timestamp"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "current_user"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "default"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "deferrable"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "desc"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "distinct"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "do"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "else"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "end"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "except"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "false"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "fetch"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "for"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "foreign"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "from"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "grant"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "group"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "having"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "in"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "initially"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "intersect"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "into"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "lateral"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "leading"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "limit"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "localtime"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "localtimestamp"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "not"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "null"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "offset"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "on"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "only"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "or"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "order"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "placing"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "primary"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "references"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "returning"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "select"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "session_user"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "some"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "symmetric"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "system_user"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "table"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "then"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "to"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "trailing"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "true"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "union"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "unique"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "user"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "using"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "variadic"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "when"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "where"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "window"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1578
		{
			yyVAL.str = "with"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "abort"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "absent"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			yyVAL.str = "absolute"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1594
		{
			yyVAL.str = "access"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.str = "action"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "add"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "admin"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "after"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "aggregate"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "all"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "also"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "alter"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "always"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "analyse"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "analyze"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "and"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "any"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "asc"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "asensitive"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "assertion"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "assignment"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "asymmetric"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "at"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "atomic"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "attach"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "attribute"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "authorization"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "backward"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "before"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "begin"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "between"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "bigint"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "binary"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "bit"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "boolean"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "both"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "breadth"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "by"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "cache"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "call"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "called"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "cascade"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "cascaded"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "case"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "cast"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "catalog"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "chain"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "characteristics"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "check"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "checkpoint"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "class"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "close"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "cluster"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "coalesce"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "collate"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "collation"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "column"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "columns"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "comment"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "comments"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "commit"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "committed"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "compression"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "concurrently"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "conditional"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "configuration"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "conflict"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "connection"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "constraint"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "constraints"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "content"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "continue"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "conversion"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "copy"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "cost"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "cross"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "csv"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "cube"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "current"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "current_catalog"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "current_date"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "current_role"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "current_schema"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "current_time"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "current_timestamp"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "current_user"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "cursor"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "cycle"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "data"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "database"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "deallocate"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "dec"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "decimal"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "declare"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "default"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "defaults"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "deferrable"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "deferred"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "definer"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "delete"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "delimiter"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "delimiters"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "depends"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "depth"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "desc"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "detach"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "dictionary"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "disable"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "discard"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "distinct"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "do"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "document"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "domain"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "double"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "drop"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "each"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "else"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "empty"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "enable"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "encoding"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "encrypted"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "end"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "enum"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "error"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "escape"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "event"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "exclude"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "excluding"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "exclusive"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "execute"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "exists"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "explain"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "expression"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "extension"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "external"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "extract"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "false"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "family"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "finalize"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "first"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "float"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "following"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "force"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "foreign"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "format"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "forward"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "freeze"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "full"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "function"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "functions"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "generated"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "global"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "granted"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "greatest"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "grouping"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "groups"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "handler"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "header"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "hold"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "identity"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "if"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "ilike"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "immediate"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "immutable"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.str = "implicit"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1756
		{
			yyVAL.str = "import"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1757
		{
			yyVAL.str = "in"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1758
		{
			yyVAL.str = "include"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.str = "including"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.str = "increment"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1761
		{
			yyVAL.str = "indent"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1762
		{
			yyVAL.str = "index"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.str = "indexes"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1764
		{
			yyVAL.str = "inherit"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1765
		{
			yyVAL.str = "inherits"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1766
		{
			yyVAL.str = "initially"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1767
		{
			yyVAL.str = "inline"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1768
		{
			yyVAL.str = "inner"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.str = "inout"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1770
		{
			yyVAL.str = "input"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.str = "insensitive"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1772
		{
			yyVAL.str = "insert"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1773
		{
			yyVAL.str = "instead"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1774
		{
			yyVAL.str = "int"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			yyVAL.str = "integer"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1776
		{
			yyVAL.str = "interval"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1777
		{
			yyVAL.str = "invoker"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1778
		{
			yyVAL.str = "is"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1779
		{
			yyVAL.str = "isolation"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1780
		{
			yyVAL.str = "join"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.str = "json"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1782
		{
			yyVAL.str = "json_array"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1783
		{
			yyVAL.str = "json_arrayagg"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1784
		{
			yyVAL.str = "json_exists"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1785
		{
			yyVAL.str = "json_object"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1786
		{
			yyVAL.str = "json_objectagg"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1787
		{
			yyVAL.str = "json_query"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1788
		{
			yyVAL.str = "json_scalar"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1789
		{
			yyVAL.str = "json_serialize"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1790
		{
			yyVAL.str = "json_table"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1791
		{
			yyVAL.str = "json_value"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1792
		{
			yyVAL.str = "keep"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1793
		{
			yyVAL.str = "key"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1794
		{
			yyVAL.str = "keys"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1795
		{
			yyVAL.str = "label"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1796
		{
			yyVAL.str = "language"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1797
		{
			yyVAL.str = "large"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1798
		{
			yyVAL.str = "last"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1799
		{
			yyVAL.str = "lateral"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1800
		{
			yyVAL.str = "leading"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1801
		{
			yyVAL.str = "leakproof"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1802
		{
			yyVAL.str = "least"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1803
		{
			yyVAL.str = "left"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1804
		{
			yyVAL.str = "level"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1805
		{
			yyVAL.str = "like"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1806
		{
			yyVAL.str = "listen"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1807
		{
			yyVAL.str = "load"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1808
		{
			yyVAL.str = "local"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1809
		{
			yyVAL.str = "localtime"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1810
		{
			yyVAL.str = "localtimestamp"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1811
		{
			yyVAL.str = "location"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1812
		{
			yyVAL.str = "lock"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1813
		{
			yyVAL.str = "locked"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1814
		{
			yyVAL.str = "logged"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1815
		{
			yyVAL.str = "mapping"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1816
		{
			yyVAL.str = "match"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1817
		{
			yyVAL.str = "matched"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1818
		{
			yyVAL.str = "materialized"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1819
		{
			yyVAL.str = "maxvalue"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1820
		{
			yyVAL.str = "merge"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1821
		{
			yyVAL.str = "merge_action"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1822
		{
			yyVAL.str = "method"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1823
		{
			yyVAL.str = "minvalue"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1824
		{
			yyVAL.str = "mode"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1825
		{
			yyVAL.str = "move"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1826
		{
			yyVAL.str = "name"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1827
		{
			yyVAL.str = "names"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1828
		{
			yyVAL.str = "national"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1829
		{
			yyVAL.str = "natural"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1830
		{
			yyVAL.str = "nchar"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1831
		{
			yyVAL.str = "nested"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1832
		{
			yyVAL.str = "new"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1833
		{
			yyVAL.str = "next"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1834
		{
			yyVAL.str = "nfc"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1835
		{
			yyVAL.str = "nfd"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1836
		{
			yyVAL.str = "nfkc"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1837
		{
			yyVAL.str = "nfkd"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1838
		{
			yyVAL.str = "no"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1839
		{
			yyVAL.str = "none"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1840
		{
			yyVAL.str = "normalize"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1841
		{
			yyVAL.str = "normalized"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1842
		{
			yyVAL.str = "not"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1843
		{
			yyVAL.str = "nothing"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1844
		{
			yyVAL.str = "notify"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1845
		{
			yyVAL.str = "nowait"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1846
		{
			yyVAL.str = "null"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1847
		{
			yyVAL.str = "nullif"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1848
		{
			yyVAL.str = "nulls"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1849
		{
			yyVAL.str = "numeric"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1850
		{
			yyVAL.str = "object"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1851
		{
			yyVAL.str = "of"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1852
		{
			yyVAL.str = "off"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1853
		{
			yyVAL.str = "oids"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1854
		{
			yyVAL.str = "old"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1855
		{
			yyVAL.str = "omit"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1856
		{
			yyVAL.str = "only"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1857
		{
			yyVAL.str = "operator"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1858
		{
			yyVAL.str = "option"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1859
		{
			yyVAL.str = "options"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1860
		{
			yyVAL.str = "or"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1861
		{
			yyVAL.str = "ordinality"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1862
		{
			yyVAL.str = "others"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1863
		{
			yyVAL.str = "out"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1864
		{
			yyVAL.str = "outer"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1865
		{
			yyVAL.str = "overlay"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1866
		{
			yyVAL.str = "overriding"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1867
		{
			yyVAL.str = "owned"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1868
		{
			yyVAL.str = "owner"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1869
		{
			yyVAL.str = "parallel"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1870
		{
			yyVAL.str = "parameter"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1871
		{
			yyVAL.str = "parser"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1872
		{
			yyVAL.str = "partial"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1873
		{
			yyVAL.str = "partition"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1874
		{
			yyVAL.str = "passing"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1875
		{
			yyVAL.str = "password"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1876
		{
			yyVAL.str = "path"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1877
		{
			yyVAL.str = "placing"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1878
		{
			yyVAL.str = "plan"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1879
		{
			yyVAL.str = "plans"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1880
		{
			yyVAL.str = "policy"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1881
		{
			yyVAL.str = "position"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1882
		{
			yyVAL.str = "preceding"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1883
		{
			yyVAL.str = "prepare"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1884
		{
			yyVAL.str = "prepared"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1885
		{
			yyVAL.str = "preserve"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1886
		{
			yyVAL.str = "primary"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1887
		{
			yyVAL.str = "prior"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1888
		{
			yyVAL.str = "privileges"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1889
		{
			yyVAL.str = "procedural"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1890
		{
			yyVAL.str = "procedure"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1891
		{
			yyVAL.str = "procedures"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1892
		{
			yyVAL.str = "program"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1893
		{
			yyVAL.str = "publication"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1894
		{
			yyVAL.str = "quote"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1895
		{
			yyVAL.str = "quotes"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1896
		{
			yyVAL.str = "range"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1897
		{
			yyVAL.str = "read"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1898
		{
			yyVAL.str = "real"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1899
		{
			yyVAL.str = "reassign"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1900
		{
			yyVAL.str = "recheck"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1901
		{
			yyVAL.str = "recursive"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1902
		{
			yyVAL.str = "ref"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1903
		{
			yyVAL.str = "references"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1904
		{
			yyVAL.str = "referencing"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1905
		{
			yyVAL.str = "refresh"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1906
		{
			yyVAL.str = "reindex"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1907
		{
			yyVAL.str = "relative"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1908
		{
			yyVAL.str = "release"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1909
		{
			yyVAL.str = "rename"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1910
		{
			yyVAL.str = "repeatable"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1911
		{
			yyVAL.str = "replace"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1912
		{
			yyVAL.str = "replica"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1913
		{
			yyVAL.str = "reset"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1914
		{
			yyVAL.str = "restart"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1915
		{
			yyVAL.str = "restrict"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1916
		{
			yyVAL.str = "return"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1917
		{
			yyVAL.str = "returns"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1918
		{
			yyVAL.str = "revoke"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1919
		{
			yyVAL.str = "right"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1920
		{
			yyVAL.str = "role"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1921
		{
			yyVAL.str = "rollback"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1922
		{
			yyVAL.str = "rollup"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1923
		{
			yyVAL.str = "routine"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1924
		{
			yyVAL.str = "routines"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1925
		{
			yyVAL.str = "row"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1926
		{
			yyVAL.str = "rows"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1927
		{
			yyVAL.str = "rule"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1928
		{
			yyVAL.str = "savepoint"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1929
		{
			yyVAL.str = "scalar"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1930
		{
			yyVAL.str = "schema"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1931
		{
			yyVAL.str = "schemas"
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1932
		{
			yyVAL.str = "scroll"
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1933
		{
			yyVAL.str = "search"
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1934
		{
			yyVAL.str = "security"
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1935
		{
			yyVAL.str = "select"
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1936
		{
			yyVAL.str = "sequence"
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1937
		{
			yyVAL.str = "sequences"
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1938
		{
			yyVAL.str = "serializable"
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1939
		{
			yyVAL.str = "server"
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1940
		{
			yyVAL.str = "session"
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1941
		{
			yyVAL.str = "session_user"
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1942
		{
			yyVAL.str = "set"
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1943
		{
			yyVAL.str = "setof"
		}
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1944
		{
			yyVAL.str = "sets"
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1945
		{
			yyVAL.str = "share"
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1946
		{
			yyVAL.str = "show"
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1947
		{
			yyVAL.str = "similar"
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1948
		{
			yyVAL.str = "simple"
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1949
		{
			yyVAL.str = "skip"
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1950
		{
			yyVAL.str = "smallint"
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1951
		{
			yyVAL.str = "snapshot"
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1952
		{
			yyVAL.str = "some"
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1953
		{
			yyVAL.str = "source"
		}
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1954
		{
			yyVAL.str = "sql"
		}
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1955
		{
			yyVAL.str = "stable"
		}
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1956
		{
			yyVAL.str = "standalone"
		}
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1957
		{
			yyVAL.str = "start"
		}
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1958
		{
			yyVAL.str = "statement"
		}
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1959
		{
			yyVAL.str = "statistics"
		}
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1960
		{
			yyVAL.str = "stdin"
		}
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1961
		{
			yyVAL.str = "stdout"
		}
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1962
		{
			yyVAL.str = "storage"
		}
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1963
		{
			yyVAL.str = "stored"
		}
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1964
		{
			yyVAL.str = "strict"
		}
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1965
		{
			yyVAL.str = "string"
		}
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1966
		{
			yyVAL.str = "strip"
		}
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1967
		{
			yyVAL.str = "subscription"
		}
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1968
		{
			yyVAL.str = "substring"
		}
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1969
		{
			yyVAL.str = "support"
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1970
		{
			yyVAL.str = "symmetric"
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1971
		{
			yyVAL.str = "sysid"
		}
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1972
		{
			yyVAL.str = "system"
		}
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1973
		{
			yyVAL.str = "system_user"
		}
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1974
		{
			yyVAL.str = "table"
		}
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1975
		{
			yyVAL.str = "tables"
		}
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1976
		{
			yyVAL.str = "tablesample"
		}
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1977
		{
			yyVAL.str = "tablespace"
		}
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1978
		{
			yyVAL.str = "target"
		}
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1979
		{
			yyVAL.str = "temp"
		}
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1980
		{
			yyVAL.str = "template"
		}
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1981
		{
			yyVAL.str = "temporary"
		}
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1982
		{
			yyVAL.str = "text"
		}
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1983
		{
			yyVAL.str = "then"
		}
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1984
		{
			yyVAL.str = "ties"
		}
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1985
		{
			yyVAL.str = "time"
		}
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1986
		{
			yyVAL.str = "timestamp"
		}
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1987
		{
			yyVAL.str = "trailing"
		}
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1988
		{
			yyVAL.str = "transaction"
		}
	case 1077:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1989
		{
			yyVAL.str = "transform"
		}
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1990
		{
			yyVAL.str = "treat"
		}
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1991
		{
			yyVAL.str = "trigger"
		}
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1992
		{
			yyVAL.str = "trim"
		}
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1993
		{
			yyVAL.str = "true"
		}
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1994
		{
			yyVAL.str = "truncate"
		}
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1995
		{
			yyVAL.str = "trusted"
		}
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1996
		{
			yyVAL.str = "type"
		}
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1997
		{
			yyVAL.str = "types"
		}
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1998
		{
			yyVAL.str = "uescape"
		}
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1999
		{
			yyVAL.str = "unbounded"
		}
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2000
		{
			yyVAL.str = "uncommitted"
		}
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2001
		{
			yyVAL.str = "unconditional"
		}
	case 1090:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2002
		{
			yyVAL.str = "unencrypted"
		}
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2003
		{
			yyVAL.str = "unique"
		}
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2004
		{
			yyVAL.str = "unknown"
		}
	case 1093:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2005
		{
			yyVAL.str = "unlisten"
		}
	case 1094:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2006
		{
			yyVAL.str = "unlogged"
		}
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2007
		{
			yyVAL.str = "until"
		}
	case 1096:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2008
		{
			yyVAL.str = "update"
		}
	case 1097:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2009
		{
			yyVAL.str = "user"
		}
	case 1098:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2010
		{
			yyVAL.str = "using"
		}
	case 1099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2011
		{
			yyVAL.str = "vacuum"
		}
	case 1100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2012
		{
			yyVAL.str = "valid"
		}
	case 1101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2013
		{
			yyVAL.str = "validate"
		}
	case 1102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2014
		{
			yyVAL.str = "validator"
		}
	case 1103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2015
		{
			yyVAL.str = "value"
		}
	case 1104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2016
		{
			yyVAL.str = "values"
		}
	case 1105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2017
		{
			yyVAL.str = "varchar"
		}
	case 1106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2018
		{
			yyVAL.str = "variadic"
		}
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2019
		{
			yyVAL.str = "verbose"
		}
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2020
		{
			yyVAL.str = "version"
		}
	case 1109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2021
		{
			yyVAL.str = "view"
		}
	case 1110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2022
		{
			yyVAL.str = "views"
		}
	case 1111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2023
		{
			yyVAL.str = "volatile"
		}
	case 1112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2024
		{
			yyVAL.str = "when"
		}
	case 1113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2025
		{
			yyVAL.str = "whitespace"
		}
	case 1114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2026
		{
			yyVAL.str = "work"
		}
	case 1115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2027
		{
			yyVAL.str = "wrapper"
		}
	case 1116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2028
		{
			yyVAL.str = "write"
		}
	case 1117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2029
		{
			yyVAL.str = "xml"
		}
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2030
		{
			yyVAL.str = "xmlattributes"
		}
	case 1119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2031
		{
			yyVAL.str = "xmlconcat"
		}
	case 1120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2032
		{
			yyVAL.str = "xmlelement"
		}
	case 1121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2033
		{
			yyVAL.str = "xmlexists"
		}
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2034
		{
			yyVAL.str = "xmlforest"
		}
	case 1123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2035
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2036
		{
			yyVAL.str = "xmlparse"
		}
	case 1125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2037
		{
			yyVAL.str = "xmlpi"
		}
	case 1126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2038
		{
			yyVAL.str = "xmlroot"
		}
	case 1127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2039
		{
			yyVAL.str = "xmlserialize"
		}
	case 1128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2040
		{
			yyVAL.str = "xmltable"
		}
	case 1129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2041
		{
			yyVAL.str = "yes"
		}
	case 1130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2042
		{
			yyVAL.str = "zone"
		}
	case 1131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2057
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2059
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2063
		{
			collateClause := ast.NewCollateClause(yyDollar[3].list)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1134:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2069
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2074
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2079
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2084
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2089
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2094
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2099
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2104
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2109
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2114
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2119
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2124
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2129
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2134
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2139
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2144
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2149
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2153
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2157
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2161
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2165
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2169
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2173
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1157:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2178
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2185
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1159:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2190
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2197
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1161:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2202
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2209
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1163:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2214
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2221
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1165:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2228
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1166:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2235
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1167:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2242
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2249
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2253
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2257
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2261
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2265
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlaps"))
			leftList := yyDollar[1].list
			rightList := yyDollar[3].list
			combinedList := ast.NewNodeList()
			combinedList.Items = append(leftList.Items, rightList.Items...)
			yyVAL.node = ast.NewFuncCall(funcName, combinedList, 0)
		}
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2274
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_TRUE)
		}
	case 1174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2278
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_TRUE)
		}
	case 1175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2282
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_FALSE)
		}
	case 1176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2286
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_FALSE)
		}
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2290
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_UNKNOWN)
		}
	case 1178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2294
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_UNKNOWN)
		}
	case 1179:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2298
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1180:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2303
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1181:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2308
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1182:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2313
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2318
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1184:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2323
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2328
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2333
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1187:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2338
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			sublink := ast.NewSubLink(subLinkType, yyDollar[4].stmt)
			sublink.Testexpr = yyDollar[1].node
			sublink.OperName = operName
			yyVAL.node = sublink
		}
	case 1188:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2347
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			if subLinkType == ast.ANY_SUBLINK {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ANY, operName, yyDollar[1].node, yyDollar[5].node, 0)
			} else {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ALL, operName, yyDollar[1].node, yyDollar[5].node, 0)
			}
		}
	case 1189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2357
		{
			yylex.Error("UNIQUE predicate is not yet implemented")
		}
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2361
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
		}
	case 1191:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2366
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2372
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1193:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2378
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[3].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2385
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2392
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[4].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2400
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[3].ival)
			uniqueKeys := yyDollar[4].bval
			yyVAL.node = ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
		}
	case 1197:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2417
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[4].ival)
			uniqueKeys := yyDollar[5].bval
			jsonPredicate := ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(jsonPredicate))
		}
	case 1198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2436
		{
			yyVAL.node = ast.NewSetToDefault(0, 0, 0)
		}
	case 1199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2441
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2443
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2447
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2452
		{
			yyVAL.node = doNegate(yyDollar[2].node, 0)
		}
	case 1203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2456
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2461
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2466
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2471
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2476
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2481
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2486
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2491
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2496
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2501
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2506
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2511
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2516
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2520
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1217:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2524
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1218:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2529
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2534
		{
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2539
		{
			args := ast.NewNodeList(yyDollar[1].node)
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2546
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2547
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2549
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2558
		{
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewParenExpr(ast.NewA_Indirection(yyDollar[2].node, yyDollar[4].list, 0), 0)
			} else {
				yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
			}
		}
	case 1225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2565
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2566
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2568
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2572
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2577
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2581
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2585
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2589
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2595
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2601
		{
			exprList := yyDollar[3].list
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     exprList,
			}
			yyVAL.node = grouping
		}
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2618
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2619
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2620
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2621
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2622
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2626
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2630
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2634
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2638
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2642
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2646
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2650
		{
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2654
		{
			// This is a bit constant per SQL99
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2659
		{
			// generic type 'literal' syntax
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1249:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2666
		{
			// generic syntax with a type modifier
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			// For now, we'll skip the error checking for NamedArgExpr and ORDER BY
			// TODO: Add proper validation when needed
			typeName.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[6].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2676
		{
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, yyDollar[1].typnam, 0)
		}
	case 1251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2681
		{
			t := yyDollar[1].typnam
			t.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1252:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2688
		{
			t := yyDollar[1].typnam
			// INTERVAL_FULL_RANGE equivalent and precision
			fullRange := ast.NewInteger(ast.INTERVAL_FULL_RANGE)
			precision := ast.NewInteger(yyDollar[3].ival)
			t.Typmods = ast.NewNodeList(fullRange, precision)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[5].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2699
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2702
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2705
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2706
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2707
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2711
		{
			yyVAL.typnam = makeTypeNameFromNodeList(ast.NewNodeList(ast.NewString("interval")))
		}
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2718
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR))
		}
	case 1260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2720
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MONTH))
		}
	case 1261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2722
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY))
		}
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2724
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR))
		}
	case 1263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2726
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MINUTE))
		}
	case 1264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2728
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2730
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR | ast.INTERVAL_MASK_MONTH))
		}
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2734
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR))
		}
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2738
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2742
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2753
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2757
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2768
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2779
		{
			yyVAL.list = nil
		}
	case 1273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2784
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_SECOND))
		}
	case 1274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2788
		{
			yyVAL.list = ast.NewNodeList(
				ast.NewInteger(ast.INTERVAL_MASK_SECOND),
				ast.NewInteger(yyDollar[3].ival), // precision
			)
		}
	case 1275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2798
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2802
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2812
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2816
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2822
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1280:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2823
		{
			yyVAL.node = nil
		}
	case 1281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2827
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2831
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2835
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1284:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2839
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1285:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2844
		{
			yyVAL.list = nil
		}
	case 1286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2846
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2858
		{
			funcCall := yyDollar[1].node.(*ast.FuncCall)

			// Apply within_group_clause if present
			if yyDollar[2].list != nil {
				// WITHIN GROUP (ORDER BY ...) - store the sort list
				funcCall.AggOrder = yyDollar[2].list
				funcCall.AggWithinGroup = true
			}

			// Apply filter_clause if present
			if yyDollar[3].node != nil {
				// FILTER (WHERE condition) - store the filter expression
				funcCall.AggFilter = yyDollar[3].node
			}

			// Apply over_clause if present (window functions)
			if yyDollar[4].windef != nil {
				funcCall.Over = yyDollar[4].windef
			}

			yyVAL.node = funcCall
		}
	case 1288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2882
		{
			jsonAgg := yyDollar[1].node

			// Create or get the Constructor
			var constructor *ast.JsonAggConstructor

			// Handle the filter_clause and over_clause by setting them in the Constructor
			switch jsonFunc := jsonAgg.(type) {
			case *ast.JsonObjectAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			case *ast.JsonArrayAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			}

			// Set filter and over clauses outside the switch (DRY)
			if constructor != nil {
				if yyDollar[2].node != nil {
					constructor.AggFilter = yyDollar[2].node.(ast.Node)
				}
				if yyDollar[3].windef != nil {
					constructor.Over = yyDollar[3].windef
				}
			}

			yyVAL.node = jsonAgg
		}
	case 1289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2915
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1290:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2921
		{
			// SystemFuncName("pg_collation_for")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("pg_collation_for"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2929
		{
			// makeSQLValueFunction(SVFOP_CURRENT_DATE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_DATE, 0, -1, 0)
		}
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2934
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME, 0, -1, 0)
		}
	case 1293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2939
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2944
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP, 0, -1, 0)
		}
	case 1295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2949
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2954
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME, 0, -1, 0)
		}
	case 1297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2959
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2964
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP, 0, -1, 0)
		}
	case 1299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2969
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2974
		{
			// makeSQLValueFunction(SVFOP_CURRENT_ROLE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_ROLE, 0, -1, 0)
		}
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2979
		{
			// makeSQLValueFunction(SVFOP_CURRENT_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_USER, 0, -1, 0)
		}
	case 1302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2984
		{
			// makeSQLValueFunction(SVFOP_SESSION_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_SESSION_USER, 0, -1, 0)
		}
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2989
		{
			// SystemFuncName("system_user")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("system_user"))
			funcCall := ast.NewFuncCall(funcName, nil, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2997
		{
			// makeSQLValueFunction(SVFOP_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_USER, 0, -1, 0)
		}
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3002
		{
			// makeSQLValueFunction(SVFOP_CURRENT_CATALOG, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_CATALOG, 0, -1, 0)
		}
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3007
		{
			// makeSQLValueFunction(SVFOP_CURRENT_SCHEMA, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_SCHEMA, 0, -1, 0)
		}
	case 1307:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3012
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[3].node, yyDollar[5].typnam, 0)
		}
	case 1308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3016
		{
			// SystemFuncName("extract")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("extract"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3024
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1310:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3032
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			args := ast.NewNodeList(yyDollar[3].node)
			args.Items = append(args.Items, ast.NewA_Const(ast.NewString(yyDollar[5].str), -1))
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3042
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3050
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1313:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3058
		{
			// SystemFuncName("position")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("position"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1314:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3066
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3074
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1316:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3082
		{
			// SystemFuncName("treat")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), llast(yyDollar[5].typnam.Names))
			args := ast.NewNodeList(yyDollar[3].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1317:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3091
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1318:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3099
		{
			// SystemFuncName("ltrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("ltrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1319:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3107
		{
			// SystemFuncName("rtrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("rtrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1320:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3115
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1321:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3123
		{
			// makeSimpleA_Expr(AEXPR_NULLIF, "=", $3, $5, @1)
			operName := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NULLIF, operName, yyDollar[3].node, yyDollar[5].node, 0)
		}
	case 1322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3129
		{
			// CoalesceExpr *c = makeNode(CoalesceExpr); c->args = $3; c->location = @1
			yyVAL.node = ast.NewCoalesceExpr(0, yyDollar[3].list)
		}
	case 1323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3134
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_GREATEST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_GREATEST, yyDollar[3].list, 0)
		}
	case 1324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3139
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_LEAST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_LEAST, yyDollar[3].list, 0)
		}
	case 1325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3144
		{
			// makeXmlExpr(IS_XMLCONCAT, NULL, NIL, $3, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLCONCAT, "", nil, nil, yyDollar[3].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1326:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3149
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1327:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3154
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1328:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3159
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, $6, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, yyDollar[6].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1329:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3164
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, $8, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, yyDollar[8].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1330:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3169
		{
			// makeXmlExpr(IS_XMLFOREST, NULL, $3, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLFOREST, "", yyDollar[3].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1331:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3174
		{
			// makeXmlExpr(IS_XMLPARSE, NULL, NIL, list_make2($4, makeBoolAConst($5, -1)), @1)
			// x->xmloption = $3
			wsOption := ast.NewA_Const(ast.NewBoolean(yyDollar[5].bval), -1)
			args := ast.NewNodeList(yyDollar[4].node, wsOption)
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPARSE, "", nil, nil, args, xmlOption, false, 0, -1, 0)
		}
	case 1332:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3183
		{
			// SystemFuncName("xmlexists") - xmlexists(A PASSING [BY REF] B [BY REF]) is converted to xmlexists(A, B)
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("xmlexists"))
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[4].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1333:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3192
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1334:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3197
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, list_make1($6), @1)
			args := ast.NewNodeList(yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1335:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3203
		{
			// makeXmlExpr(IS_XMLROOT, NULL, NIL, list_make3(...), @1)
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[5].node, yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLROOT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3209
		{
			/* Support for legacy (non-standard) json_object() */
			funcName := ast.NewNodeList(ast.NewString("json_object"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1337:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3220
		{
			n := ast.NewJsonObjectConstructor(yyDollar[3].list, yyDollar[4].bval, yyDollar[5].bval)
			if yyDollar[6].node != nil {
				n.Output = yyDollar[6].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3228
		{
			n := ast.NewJsonObjectConstructor(nil, false, false)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1339:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3240
		{
			n := ast.NewJsonArrayConstructor(yyDollar[3].list, yyDollar[4].bval)
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1340:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3252
		{
			n := ast.NewJsonArrayQueryConstructor(yyDollar[3].stmt, true) /* XXX: absent_on_null = true */
			if yyDollar[4].node != nil {
				n.Format = yyDollar[4].node.(*ast.JsonFormat)
			}
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1341:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3265
		{
			n := ast.NewJsonArrayConstructor(nil, true)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1342:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3273
		{
			n := ast.NewJsonParseExpr(yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[4].bval)
			n.Output = nil
			yyVAL.node = n
		}
	case 1343:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3279
		{
			n := ast.NewJsonScalarExpr(yyDollar[3].node.(ast.Expr))
			n.Output = nil
			yyVAL.node = n
		}
	case 1344:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3285
		{
			n := ast.NewJsonSerializeExpr(yyDollar[3].node.(*ast.JsonValueExpr))
			if yyDollar[4].node != nil {
				n.Output = yyDollar[4].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3293
		{
			m := ast.NewMergeSupportFunc(ast.TEXTOID, ast.InvalidOid, 0)
			yyVAL.node = m
		}
	case 1346:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:3304
		{
			n := ast.NewJsonFuncExpr(ast.JSON_QUERY_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			n.Wrapper = ast.JsonWrapper(yyDollar[8].ival)
			n.Quotes = ast.JsonQuotes(yyDollar[9].ival)
			if yyDollar[10].node != nil {
				behaviors := yyDollar[10].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1347:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3329
		{
			n := ast.NewJsonFuncExpr(ast.JSON_EXISTS_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			n.Output = nil
			if yyDollar[7].node != nil {
				n.OnError = yyDollar[7].node.(*ast.JsonBehavior)
			}
			yyVAL.node = n
		}
	case 1348:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3345
		{
			n := ast.NewJsonFuncExpr(ast.JSON_VALUE_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			if yyDollar[8].node != nil {
				behaviors := yyDollar[8].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1349:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3365
		{
			// XmlSerialize node - n->xmloption = $3; n->expr = $4; n->typeName = $6; n->indent = $7;
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlSerialize(xmlOption, yyDollar[4].node, yyDollar[6].typnam, yyDollar[7].bval, 0)
		}
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3375
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3379
		{
			yyVAL.list = nil
		}
	case 1352:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3386
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1353:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3390
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3394
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node)
		}
	case 1355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3398
		{
			sysTypeName := &ast.TypeName{
				Names:   ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("int4")),
				Typemod: -1,
			}
			tc := ast.NewTypeCast(yyDollar[3].node, sysTypeName, -1)
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, ast.NewInteger(1), tc)
		}
	case 1356:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3407
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3414
		{
			yyDollar[3].list.Append(yyDollar[1].node)
			yyVAL.list = yyDollar[3].list
		}
	case 1358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3419
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3423
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3430
		{
			// list_make2(makeStringConst($1, @1), $3)
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str), yyDollar[3].node)
		}
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3440
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3441
		{
			yyVAL.str = "year"
		}
	case 1363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3442
		{
			yyVAL.str = "month"
		}
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3443
		{
			yyVAL.str = "day"
		}
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3444
		{
			yyVAL.str = "hour"
		}
	case 1366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3445
		{
			yyVAL.str = "minute"
		}
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3446
		{
			yyVAL.str = "second"
		}
	case 1368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3447
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1369:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3452
		{
			/* overlay(A PLACING B FROM C FOR D) is converted to overlay(A, B, C, D) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 1370:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3457
		{
			/* overlay(A PLACING B FROM C) is converted to overlay(A, B, C) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3465
		{
			yyVAL.list = ast.NewNodeList(yyDollar[3].node, yyDollar[1].node)
		}
	case 1372:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3468
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3473
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3477
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3485
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3489
		{
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3494
		{
			yyVAL.bval = true
		}
	case 1378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3495
		{
			yyVAL.bval = false
		}
	case 1379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3496
		{
			yyVAL.bval = false
		}
	case 1380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3499
		{
			yyVAL.bval = true
		}
	case 1381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3500
		{
			yyVAL.bval = false
		}
	case 1382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3501
		{
			yyVAL.bval = false
		}
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3506
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3510
		{
			yyVAL.node = ast.NewA_Const(ast.NewNull(), 0)
		}
	case 1385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3517
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_YES)), 0)
		}
	case 1386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3521
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO)), 0)
		}
	case 1387:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3525
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO_VALUE)), 0)
		}
	case 1388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3529
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_OMITTED)), 0)
		}
	case 1389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3536
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3537
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3538
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3542
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3546
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3557
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1395:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3561
		{
			// Special case for aggregates like COUNT(*) - set AggStar to true
			funcCall := ast.NewFuncCall(yyDollar[1].list, nil, 0)
			funcCall.AggStar = true
			yyVAL.node = funcCall
		}
	case 1396:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3568
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1397:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3574
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1398:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3580
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1399:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3588
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1400:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3594
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3602
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3606
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3613
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3617
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3621
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1406:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3628
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3633
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3634
		{
			yyVAL.node = nil
		}
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3638
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3640
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3648
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3654
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3655
		{
			yyVAL.node = nil
		}
	case 1414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3660
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3664
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3668
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3673
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3675
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3682
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3683
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1421:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3685
		{
			nodeList := yyDollar[2].list
			nodeList.Append(yyDollar[4].node)
			yyVAL.list = nodeList
		}
	case 1422:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3692
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3693
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1424:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3697
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3703
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3704
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3705
		{
			yyVAL.ival = int(ast.ALL_SUBLINK)
		}
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3710
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3714
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3718
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~"))
		}
	case 1431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3722
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~"))
		}
	case 1432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3726
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~*"))
		}
	case 1433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3730
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~*"))
		}
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3736
		{
			yyVAL.str = "NFC"
		}
	case 1435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3737
		{
			yyVAL.str = "NFD"
		}
	case 1436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3738
		{
			yyVAL.str = "NFKC"
		}
	case 1437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3739
		{
			yyVAL.str = "NFKD"
		}
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3743
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3744
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3745
		{
			yyVAL.ival = int(ast.JS_TYPE_ARRAY)
		}
	case 1441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3746
		{
			yyVAL.ival = int(ast.JS_TYPE_OBJECT)
		}
	case 1442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3747
		{
			yyVAL.ival = int(ast.JS_TYPE_SCALAR)
		}
	case 1443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3751
		{
			yyVAL.bval = true
		}
	case 1444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3752
		{
			yyVAL.bval = true
		}
	case 1445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3753
		{
			yyVAL.bval = false
		}
	case 1446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3754
		{
			yyVAL.bval = false
		}
	case 1447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3755
		{
			yyVAL.bval = false
		}
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3760
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3764
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3773
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.ArrayBounds = yyDollar[2].list
		}
	case 1451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3778
		{
			yyVAL.typnam = yyDollar[2].typnam
			yyVAL.typnam.ArrayBounds = yyDollar[3].list
			yyVAL.typnam.Setof = true
		}
	case 1452:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3784
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(yyDollar[4].ival))
		}
	case 1453:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3789
		{
			yyVAL.typnam = yyDollar[2].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(yyDollar[5].ival))
			yyVAL.typnam.Setof = true
		}
	case 1454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3795
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(-1))
		}
	case 1455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3800
		{
			yyVAL.typnam = yyDollar[2].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(-1))
			yyVAL.typnam.Setof = true
		}
	case 1456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3809
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList()
			} else {
				yyVAL.list = yyDollar[1].list
			}
			yyVAL.list.Append(ast.NewInteger(-1))
		}
	case 1457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3818
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList()
			} else {
				yyVAL.list = yyDollar[1].list
			}
			yyVAL.list.Append(ast.NewInteger(yyDollar[3].ival))
		}
	case 1458:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3827
		{
			yyVAL.list = nil
		}
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3832
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3833
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3834
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3835
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3836
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3838
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3843
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.Typmods = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_FULL_RANGE), ast.NewInteger(yyDollar[3].ival))
		}
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3847
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3850
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3851
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3852
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3855
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3858
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3861
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3865
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3869
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3876
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3880
		{
			yyVAL.list = nil
		}
	case 1477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3886
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3892
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3903
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3907
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3911
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3915
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3919
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3923
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3927
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3931
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3936
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3941
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3946
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3952
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3956
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3962
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3966
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3972
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3976
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for BitWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3984
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3988
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for CharacterWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3996
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4004
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4012
		{
			yyVAL.str = "varchar"
		}
	case 1501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4016
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4024
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4032
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4042
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4053
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4067
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			tn := makeTypeNameFromString(typeName)
			tn.Typmods = yyDollar[4].list
			yyVAL.typnam = tn
		}
	case 1507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4081
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1508:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4093
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			tn := makeTypeNameFromString(typeName)
			tn.Typmods = ast.NewNodeList(ast.NewInteger(yyDollar[3].ival))
			yyVAL.typnam = tn
		}
	case 1509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4105
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1510:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4115
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			tn := makeTypeNameFromString(typeName)
			tn.Typmods = ast.NewNodeList(ast.NewInteger(yyDollar[3].ival))
			yyVAL.typnam = tn
		}
	case 1511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4127
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4139
		{
			yyVAL.typnam = makeTypeNameFromString("json")
		}
	case 1513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4144
		{
			yyVAL.ival = 1
		}
	case 1514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4145
		{
			yyVAL.ival = 0
		}
	case 1515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4146
		{
			yyVAL.ival = 0
		}
	case 1516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4149
		{
			yyVAL.ival = 1
		}
	case 1517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4150
		{
			yyVAL.ival = 0
		}
	case 1518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4154
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4164
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4171
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4175
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4182
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4186
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4191
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4192
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4195
		{
			yyVAL.str = "+"
		}
	case 1527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4196
		{
			yyVAL.str = "-"
		}
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4197
		{
			yyVAL.str = "*"
		}
	case 1529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4198
		{
			yyVAL.str = "/"
		}
	case 1530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4199
		{
			yyVAL.str = "%"
		}
	case 1531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4200
		{
			yyVAL.str = "^"
		}
	case 1532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4201
		{
			yyVAL.str = "<"
		}
	case 1533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4202
		{
			yyVAL.str = ">"
		}
	case 1534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4203
		{
			yyVAL.str = "="
		}
	case 1535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4204
		{
			yyVAL.str = "<="
		}
	case 1536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4205
		{
			yyVAL.str = ">="
		}
	case 1537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4206
		{
			yyVAL.str = "<>"
		}
	case 1538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4210
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4214
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4223
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4224
		{
			yyVAL.list = nil
		}
	case 1542:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4229
		{
			// WITHIN GROUP (ORDER BY ...) for ordered-set aggregates
			yyVAL.list = yyDollar[4].list
		}
	case 1543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4233
		{
			yyVAL.list = nil
		}
	case 1544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4238
		{
			// FILTER (WHERE condition) for aggregate filtering
			yyVAL.node = yyDollar[4].node
		}
	case 1545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4242
		{
			yyVAL.node = nil
		}
	case 1546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4246
		{
			yyVAL.ival = 0
		}
	case 1547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4247
		{
			yyVAL.ival = 0
		}
	case 1548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4251
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4256
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4271
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4272
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4276
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4277
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4286
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4287
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4296
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4298
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			// Use NodeList directly for SortClause
			selectStmt.SortClause = yyDollar[2].list
			yyVAL.stmt = selectStmt
		}
	case 1558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4305
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			selectStmt.LockingClause = yyDollar[3].list // Set the locking clause
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1559:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4317
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			if yyDollar[3].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[3].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[3].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[3].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4329
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4335
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			yyVAL.stmt = selectStmt
		}
	case 1562:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4342
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			if yyDollar[5].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[5].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[5].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[5].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1563:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4355
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[5].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4374
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4375
		{
			yyVAL.list = nil
		}
	case 1566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4379
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4380
		{
			yyVAL.list = nil
		}
	case 1568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4385
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4389
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4397
		{
			lockingClause := &ast.LockingClause{
				BaseNode:   ast.BaseNode{Tag: ast.T_LockingClause},
				Strength:   ast.LockClauseStrength(yyDollar[1].ival),
				LockedRels: yyDollar[2].list, // Store as *NodeList directly
				WaitPolicy: ast.LockWaitPolicy(yyDollar[3].ival),
			}
			yyVAL.node = lockingClause
		}
	case 1571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4409
		{
			yyVAL.ival = int(ast.LCS_FORUPDATE)
		}
	case 1572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4410
		{
			yyVAL.ival = int(ast.LCS_FORNOKEYUPDATE)
		}
	case 1573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4411
		{
			yyVAL.ival = int(ast.LCS_FORSHARE)
		}
	case 1574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4412
		{
			yyVAL.ival = int(ast.LCS_FORKEYSHARE)
		}
	case 1575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4416
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4417
		{
			yyVAL.list = nil
		}
	case 1577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4422
		{
			yyVAL.ival = int(ast.LockWaitError)
		}
	case 1578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4423
		{
			yyVAL.ival = int(ast.LockWaitSkip)
		}
	case 1579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4424
		{
			yyVAL.ival = int(ast.LockWaitBlock)
		}
	case 1580:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4435
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1581:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4454
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4472
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4482
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4487
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_UNION, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4492
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_INTERSECT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4497
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_EXCEPT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4508
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4509
		{
			yyVAL.list = nil
		}
	case 1589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4513
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4514
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4519
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4523
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4528
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4533
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4544
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4545
		{
			yyVAL.list = nil
		}
	case 1597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4549
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4550
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4559
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4567
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			rangeTableSample := yyDollar[3].node.(*ast.RangeTableSample)
			rangeTableSample.Relation = rangeVar
			yyVAL.node = rangeTableSample
		}
	case 1601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4577
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4588
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4599
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1604:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4603
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4609
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			funcAliasList := yyDollar[2].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4627
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			funcAliasList := yyDollar[3].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4646
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4654
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4663
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4671
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4683
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4689
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4696
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4702
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1615:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4708
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4718
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4722
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4728
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4745
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1620:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4749
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1621:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4758
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1622:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4784
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1623:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4810
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1624:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4818
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4828
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4829
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4830
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4831
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4836
		{
			yyVAL.ival = 1
		}
	case 1630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4837
		{
			yyVAL.ival = 0
		}
	case 1631:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4847
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4858
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4869
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4873
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4877
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4883
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4884
		{
			yyVAL.with = nil
		}
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4889
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4893
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1640:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4901
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4929
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4930
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4931
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1644:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4936
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1645:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4942
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4948
		{
			yyVAL.node = nil
		}
	case 1647:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4955
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1648:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4964
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4972
		{
			yyVAL.node = nil
		}
	case 1650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4983
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = ast.NewNodeList(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1651:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4991
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists.Append(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5005
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1653:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5006
		{
			yyVAL.node = nil
		}
	case 1654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5014
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1655:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5016
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1656:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5020
		{
			yyVAL.node = nil
		}
	case 1657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5024
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5032
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1659:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5033
		{
			yyVAL.alias = nil
		}
	case 1660:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5038
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5043
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1662:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5047
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5052
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5063
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].alias, nil)
		}
	case 1665:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5067
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[3].list)
		}
	case 1666:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5071
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[4].list)
		}
	case 1667:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5076
		{
			alias := ast.NewAlias(yyDollar[1].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[3].list)
		}
	case 1668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5081
		{
			yyVAL.list = ast.NewNodeList(nil, nil)
		}
	case 1669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5089
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5093
		{
			yyVAL.alias = nil
		}
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5101
		{
			yyVAL.ival = 1
		}
	case 1672:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5102
		{
			yyVAL.ival = 0
		}
	case 1673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5106
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1674:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5107
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5111
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5112
		{
			yyVAL.list = nil
		}
	case 1677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5122
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].node.(*ast.RangeVar), nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1678:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5125
		{
			yyVAL.into = nil
		}
	case 1679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5136
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1680:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5145
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5155
		{
			yyVAL.ival = 1
		}
	case 1682:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5156
		{
			yyVAL.ival = 0
		}
	case 1683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5162
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5166
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5173
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1686:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5182
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1687:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5183
		{
			yyVAL.list = nil
		}
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5193
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5197
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5209
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5222
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5223
		{
			yyVAL.list = nil
		}
	case 1693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5229
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5233
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5242
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5253
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1697:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5258
		{
			yyVAL.node = nil
		}
	case 1698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5263
		{
			yyVAL.str = "BY REF"
		}
	case 1699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5264
		{
			yyVAL.str = "BY VALUE"
		}
	case 1700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5270
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5274
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5278
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1703:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5282
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5290
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5294
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5302
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5307
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1708:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5316
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1709:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:5324
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5335
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5339
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5348
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5353
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5358
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5368
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5372
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5381
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5385
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5389
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5393
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5397
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1722:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:5410
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5434
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5445
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1725:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5446
		{
			yyVAL.node = nil
		}
	case 1726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5451
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1727:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5452
		{
			yyVAL.node = nil
		}
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5456
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5457
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5462
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5468
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5469
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5475
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5479
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5491
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5495
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1737:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5502
		{
			yyVAL.bval = false
		}
	case 1738:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5503
		{
			yyVAL.bval = true
		}
	case 1739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5504
		{
			yyVAL.bval = false
		}
	case 1740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5508
		{
			yyVAL.bval = false
		}
	case 1741:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5509
		{
			yyVAL.bval = true
		}
	case 1742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5510
		{
			yyVAL.bval = true
		}
	case 1743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5515
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5516
		{
			yyVAL.list = nil
		}
	case 1745:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5527
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)

			yyVAL.node = ast.NewJsonObjectAgg(constructor, yyDollar[3].node.(*ast.JsonKeyValue), yyDollar[4].bval, yyDollar[5].bval)
		}
	case 1746:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5542
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)
			constructor.AggOrder = yyDollar[4].list
			yyVAL.node = ast.NewJsonArrayAgg(constructor, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].bval)
		}
	case 1747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5555
		{
			var jsonFormat *ast.JsonFormat
			if yyDollar[3].node != nil {
				jsonFormat = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonOutput(yyDollar[2].typnam, ast.NewJsonReturning(jsonFormat, 0, 0))
		}
	case 1748:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5562
		{
			yyVAL.node = nil
		}
	case 1749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5568
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5576
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5587
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5588
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5589
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5590
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5591
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5592
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5593
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5594
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5599
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5603
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1761:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5607
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1762:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5611
		{
			yyVAL.node = nil
		}
	case 1763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5616
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1764:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5617
		{
			yyVAL.node = nil
		}
	case 1765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5622
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5623
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5624
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5625
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1769:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5626
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1770:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5627
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1771:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5628
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5629
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1773:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5630
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1774:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5635
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5636
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1776:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5637
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5638
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1778:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5639
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1779:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5645
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5665
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5675
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1782:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5676
		{
			yyVAL.node = nil
		}
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5681
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1784:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5682
		{
			yyVAL.node = nil
		}
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5688
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1786:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5692
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1787:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5701
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1788:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5710
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1789:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5724
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1790:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5738
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1791:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5749
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1792:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5758
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1793:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5769
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1794:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5770
		{
			yyVAL.node = nil
		}
	case 1795:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5786
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5798
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1797:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5802
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5811
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1799:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5817
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1800:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5824
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1801:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5831
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1802:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5839
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5848
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5849
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5854
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1806:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5858
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1807:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5866
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1808:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5878
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5891
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1810:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5895
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5906
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1812:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5912
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1813:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5932
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5938
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1815:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5939
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1816:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5949
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1817:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5961
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1818:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5965
		{
			yyVAL.list = nil
		}
	case 1819:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5980
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5997
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1821:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6001
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1822:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6012
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1823:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:6036
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6072
		{
			yyVAL.ival = 1
		}
	case 1825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6073
		{
			yyVAL.ival = 0
		}
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6077
		{
			yyVAL.ival = 1
		}
	case 1827:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6078
		{
			yyVAL.ival = 0
		}
	case 1828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6082
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6083
		{
			yyVAL.str = ""
		}
	case 1830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6084
		{
			yyVAL.str = ""
		}
	case 1831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6089
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1832:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6092
		{
			yyVAL.node = nil
		}
	case 1833:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6097
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1834:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6100
		{
			yyVAL.node = nil
		}
	case 1835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6104
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1836:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6105
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1837:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6110
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1838:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6118
		{
			yyVAL.list = nil
		}
	case 1839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6125
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6129
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1841:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6133
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1842:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6137
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6141
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6145
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1845:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6149
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1846:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6153
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1847:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6157
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1848:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6161
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1849:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6165
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1850:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6169
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1851:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6173
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1852:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6177
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1853:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6181
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6189
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1855:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6193
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1856:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6200
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6206
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6207
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6208
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6209
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1861:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6210
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1862:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6211
		{
			yyVAL.node = nil
		}
	case 1863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6216
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1864:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6220
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6226
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6230
		{
			yyVAL.str = "true"
		}
	case 1867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6231
		{
			yyVAL.str = "false"
		}
	case 1868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6232
		{
			yyVAL.str = "on"
		}
	case 1869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6233
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6237
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1871:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6238
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1872:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6240
		{
			f := ast.NewFloat(yyDollar[2].str)
			doNegateFloat(f)
			yyVAL.node = f
		}
	case 1873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6245
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6249
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6250
		{
			yyVAL.node = nil
		}
	case 1876:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6254
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1877:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6255
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6256
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1879:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6257
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1880:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6258
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6259
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6260
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6261
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6265
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6266
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6267
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6271
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6272
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6273
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6274
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6275
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6280
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1893:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6285
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6292
		{
			yyVAL.bval = true
		}
	case 1895:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6293
		{
			yyVAL.bval = false
		}
	case 1896:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6297
		{
			yyVAL.ival = 1
		}
	case 1897:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6298
		{
			yyVAL.ival = 0
		}
	case 1900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6314
		{
			yyVAL.node = nil
		}
	case 1901:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6316
		{
			yyVAL.node = nil
		}
	case 1902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6324
		{
			yyVAL.ival = 1
		}
	case 1903:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6325
		{
			yyVAL.ival = 0
		}
	case 1904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6329
		{
			yyVAL.ival = 1
		}
	case 1905:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6330
		{
			yyVAL.ival = 0
		}
	case 1906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6334
		{
			yyVAL.ival = 1
		}
	case 1907:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6335
		{
			yyVAL.ival = 0
		}
	case 1908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6339
		{
			yyVAL.ival = 1
		}
	case 1909:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6340
		{
			yyVAL.ival = 0
		}
	case 1910:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6349
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1911:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6355
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1912:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6361
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1913:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6367
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1914:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6373
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1915:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6381
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1916:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6382
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1917:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6386
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1918:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6387
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1919:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6391
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1920:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6392
		{
			yyVAL.node = nil
		}
	case 1921:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6397
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6412
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6421
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1924:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6428
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1925:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6435
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1926:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6448
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1927:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6461
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1928:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6470
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1929:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6485
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1930:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6495
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1931:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6503
		{
			yyVAL.onconflict = nil
		}
	case 1932:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6514
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1933:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6523
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1934:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6530
		{
			yyVAL.node = nil
		}
	case 1935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6537
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1936:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6541
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1937:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6548
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1938:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6553
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1939:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6558
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1940:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6566
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1941:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6577
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1942:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6591
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1943:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6592
		{
			yyVAL.list = nil
		}
	case 1944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6596
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6597
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1946:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6598
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1947:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6602
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1948:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6603
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1949:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6604
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1950:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6609
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1951:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6613
		{
			yyVAL.list = nil
		}
	case 1952:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6634
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1953:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:6650
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1954:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:6667
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1955:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:6683
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1956:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6700
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1957:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:6717
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6735
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6736
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1960:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6737
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1961:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6738
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1962:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6739
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1963:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6740
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6741
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1965:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6742
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6746
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1967:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6747
		{
			yyVAL.list = nil
		}
	case 1968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6752
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1969:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6757
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6764
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6765
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6766
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1973:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6771
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1974:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6778
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1975:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6782
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1976:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6786
		{
			yyVAL.ival = 0
		}
	case 1977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6792
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6793
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6794
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6795
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6796
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6797
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6798
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6799
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6800
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6801
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1987:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6806
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1988:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6807
		{
			yyVAL.str = "default"
		}
	case 1989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6811
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1990:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6812
		{
			yyVAL.str = ""
		}
	case 1991:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6816
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1992:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6817
		{
			yyVAL.str = "default"
		}
	case 1993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6821
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1994:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6822
		{
			yyVAL.str = ""
		}
	case 1995:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6827
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1996:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6828
		{
			yyVAL.list = nil
		}
	case 1997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6833
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1998:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6839
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6846
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6847
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2001:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6852
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 2002:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6858
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 2003:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6869
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 2004:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6898
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 2005:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6907
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 2006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6917
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 2007:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6926
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 2008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6933
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2009:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6937
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 2010:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6945
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2011:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6946
		{
			yyVAL.list = nil
		}
	case 2012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6951
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2013:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6955
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2014:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6963
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 2015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6969
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6974
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2017:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6979
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			colDef.Constraints = yyDollar[6].list
			yyVAL.node = colDef
		}
	case 2018:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6991
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2019:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6996
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2020:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7003
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 2021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7008
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7009
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2023:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7011
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 2024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7024
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 2025:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7029
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 2026:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7034
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 2027:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7039
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 2028:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7047
		{
			yyVAL.bval = true
		}
	case 2029:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7048
		{
			yyVAL.bval = false
		}
	case 2030:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7049
		{
			yyVAL.bval = true
		}
	case 2031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7053
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 2032:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7054
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 2033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7059
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2034:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7061
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7066
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 2036:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7070
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 2037:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7074
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 2038:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7084
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 2039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7090
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2040:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7091
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2041:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7096
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 2042:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7100
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 2043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7104
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 2044:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7108
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 2045:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7112
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 2046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7116
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 2047:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7120
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 2048:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7124
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 2049:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7128
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 2050:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7132
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 2051:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7136
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 2052:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7140
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 2053:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7144
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 2054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7148
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 2055:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7152
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 2056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7156
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 2057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7162
		{
		}
	case 2058:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7163
		{
		}
	case 2059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7167
		{
		}
	case 2060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7168
		{
		}
	case 2061:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7169
		{
		}
	case 2062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7174
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 2063:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7181
		{
			yyVAL.bval = false
		}
	case 2064:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7185
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2065:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7186
		{
			yyVAL.list = nil
		}
	case 2066:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7191
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 2067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7195
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 2068:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7199
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 2069:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7208
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 2070:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7214
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 2071:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7220
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 2072:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7226
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 2073:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7243
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 2074:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7250
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 2075:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7260
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 2076:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7265
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2077:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7270
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 2078:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7278
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2079:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7289
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 2080:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7300
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2081:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7310
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 2082:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7321
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 2083:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7342
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 2084:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7356
		{
			yyVAL.bval = true
		}
	case 2085:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7357
		{
			yyVAL.bval = false
		}
	case 2086:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7363
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2087:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7369
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2088:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7377
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 2089:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7382
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 2090:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7390
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2091:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7394
		{
			yyVAL.list = nil
		}
	case 2092:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7401
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 2093:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7405
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 2094:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7409
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2095:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7413
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2096:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7420
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2097:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7430
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2098:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7440
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 2099:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7447
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2100:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7454
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7469
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 2102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7482
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 2103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7489
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7496
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7503
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7510
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7517
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7526
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7527
		{
			yyVAL.list = nil
		}
	case 2110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7531
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 2111:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7532
		{
			yyVAL.partspec = nil
		}
	case 2112:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7537
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 2113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7545
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7550
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7558
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7565
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2117:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7572
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 2118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7581
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7582
		{
			yyVAL.str = ""
		}
	case 2120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7586
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 2121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7587
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 2122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7588
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 2123:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7589
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 2124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7593
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7594
		{
			yyVAL.str = ""
		}
	case 2126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7598
		{
			yyVAL.str = yyDollar[4].str
		}
	case 2127:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7599
		{
			yyVAL.str = ""
		}
	case 2128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7603
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2129:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:7616
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 2130:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:7631
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 2131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7647
		{
			yyVAL.bval = true
		}
	case 2132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7648
		{
			yyVAL.bval = false
		}
	case 2133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7652
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7653
		{
			yyVAL.str = "btree"
		}
	case 2135:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7657
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7658
		{
			yyVAL.list = nil
		}
	case 2137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7663
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7668
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7676
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7677
		{
			yyVAL.list = nil
		}
	case 2141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7689
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2142:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7695
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7702
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2144:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7708
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7715
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7724
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 2147:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7730
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7737
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 2149:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7743
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2150:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7750
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 2151:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7756
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2152:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7763
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2153:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7769
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7776
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2155:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7785
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2156:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7795
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2157:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7802
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2158:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7810
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2159:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7817
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2160:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7825
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 2161:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:7832
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 2162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7843
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7848
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7856
		{
			yyVAL.bval = true
		}
	case 2165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7857
		{
			yyVAL.bval = false
		}
	case 2166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7862
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].rolespec)
		}
	case 2167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7867
		{
			yyDollar[1].list.Append(yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 2168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7875
		{
			roleSpec := yyDollar[1].rolespec

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 2169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7906
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.rolespec = roleSpec
		}
	case 2170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7929
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 2171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7936
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 2172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7943
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 2173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7954
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2174:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7961
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7968
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2176:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7975
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2177:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7982
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 2178:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7987
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 2179:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7992
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 2180:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7997
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 2181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8002
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 2182:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8007
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8014
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 2184:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8019
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 2185:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8026
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2186:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8031
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2187:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8036
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2188:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8041
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2189:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8046
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8056
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 2191:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8061
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2192:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8068
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2193:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8075
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8083
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2195:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8094
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 2196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8104
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 2197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8109
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 2198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8114
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8125
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 2200:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8130
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8138
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8146
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 2203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8151
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 2204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8156
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 2205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8161
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 2206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8166
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 2207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8171
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 2208:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8176
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 2209:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8181
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 2210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8186
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 2211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8191
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 2212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8196
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 2213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8201
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 2214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8206
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 2215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8211
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 2216:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8216
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 2217:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8221
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 2218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8226
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 2219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8231
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 2220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8236
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 2221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8241
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 2222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8247
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 2223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8252
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].rolespec
			yyVAL.node = cmd
		}
	case 2224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8259
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 2225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8264
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 2226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8269
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 2227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8274
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 2228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8279
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 2229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8284
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 2230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8289
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 2231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8294
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 2232:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8299
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 2233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8303
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 2234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8311
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8319
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8326
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8337
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8346
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8347
		{
			yyVAL.node = nil
		}
	case 2240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8351
		{
		}
	case 2241:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8352
		{
		}
	case 2242:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8363
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8376
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2244:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8389
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8402
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2246:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8415
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2247:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8430
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8445
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2249:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8458
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8471
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2251:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8484
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2252:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8497
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2253:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8510
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2254:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8524
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_CAST
			n.Objects = ast.NewNodeList(ast.NewNodeList(yyDollar[5].typnam, yyDollar[7].typnam))
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = (yyDollar[3].ival == 1)
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2255:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8538
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			// Create a new list with the USING name prepended to any_name
			objects := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				objects.Append(item)
			}
			n.Objects = ast.NewNodeList(objects)
			n.RemoveType = ast.OBJECT_OPCLASS
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2256:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8556
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			// Create a new list with the USING name prepended to any_name
			objects := ast.NewNodeList(ast.NewString(yyDollar[8].str))
			for _, item := range yyDollar[6].list.Items {
				objects.Append(item)
			}
			n.Objects = ast.NewNodeList(objects)
			n.RemoveType = ast.OBJECT_OPCLASS
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2257:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8575
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			// Create a new list with the USING name prepended to any_name
			objects := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				objects.Append(item)
			}
			n.Objects = ast.NewNodeList(objects)
			n.RemoveType = ast.OBJECT_OPFAMILY
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2258:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8593
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			// Create a new list with the USING name prepended to any_name
			objects := ast.NewNodeList(ast.NewString(yyDollar[8].str))
			for _, item := range yyDollar[6].list.Items {
				objects.Append(item)
			}
			n.Objects = ast.NewNodeList(objects)
			n.RemoveType = ast.OBJECT_OPFAMILY
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2259:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8612
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TRANSFORM
			n.Objects = ast.NewNodeList(ast.NewNodeList(yyDollar[5].typnam, ast.NewString(yyDollar[7].str)))
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = (yyDollar[3].ival == 1)
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8626
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_SUBSCRIPTION
			n.Objects = ast.NewNodeList(ast.NewNodeList(ast.NewString(yyDollar[3].str)))
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2261:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8639
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_SUBSCRIPTION
			n.Objects = ast.NewNodeList(ast.NewNodeList(ast.NewString(yyDollar[5].str)))
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8659
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_FUNCTION
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2263:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8671
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_FUNCTION
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8683
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_PROCEDURE
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2265:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8695
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_PROCEDURE
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8707
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_ROUTINE
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2267:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8719
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_ROUTINE
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8734
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_AGGREGATE
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2269:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8746
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_AGGREGATE
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8761
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_OPERATOR
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2271:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8773
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}
			n.RemoveType = ast.OBJECT_OPERATOR
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8788
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8794
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 2274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8800
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8809
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 2276:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8813
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 2277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8816
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8820
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8822
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 2280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8826
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 2281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8830
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 2282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8837
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 2283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8841
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 2284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8847
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8848
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8852
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 2287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8861
		{
			yyVAL.stmt = ast.NewConstraintsSetStmt(yyDollar[3].list, yyDollar[4].bval)
		}
	case 2288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8867
		{
			yyVAL.list = nil
		}
	case 2289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8868
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8872
		{
			yyVAL.bval = true
		}
	case 2291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8873
		{
			yyVAL.bval = false
		}
	case 2292:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8885
		{
			n := ast.NewSelectStmt()
			n.DistinctClause = yyDollar[1].list
			n.TargetList = yyDollar[2].list
			n.FromClause = yyDollar[3].list
			n.WhereClause = yyDollar[4].node
			if yyDollar[5].groupClause != nil {
				n.GroupClause = yyDollar[5].groupClause.List
				n.GroupDistinct = yyDollar[5].groupClause.Distinct
			}
			n.HavingClause = yyDollar[6].node
			n.WindowClause = yyDollar[7].list
			n.SortClause = yyDollar[8].list
			if yyDollar[9].selectLimit != nil {
				n.LimitOffset = yyDollar[9].selectLimit.limitOffset
				n.LimitCount = yyDollar[9].selectLimit.limitCount
				n.LimitOption = yyDollar[9].selectLimit.limitOption
			}
			n.LockingClause = yyDollar[10].list
			yyVAL.stmt = n
		}
	case 2293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8910
		{
			n := ast.NewPLAssignStmt(yyDollar[1].str, yyDollar[4].stmt.(*ast.SelectStmt))
			n.Indirection = yyDollar[2].list
			yyVAL.stmt = n
		}
	case 2294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8918
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8919
		{
			yyVAL.str = fmt.Sprintf("$%d", yyDollar[1].ival)
		}
	case 2298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8933
		{
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[2].stmt, nil)
		}
	case 2299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8937
		{
			options := ast.NewNodeList(ast.NewDefElem("analyze", nil))
			if yyDollar[3].ival != 0 {
				options.Append(ast.NewDefElem("verbose", nil))
			}
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[4].stmt, options)
		}
	case 2300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8945
		{
			options := ast.NewNodeList(ast.NewDefElem("verbose", nil))
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[3].stmt, options)
		}
	case 2301:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8950
		{
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[5].stmt, yyDollar[3].list)
		}
	case 2302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8957
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8961
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8969
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 2305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8975
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8976
		{
			yyVAL.str = "analyze"
		}
	case 2307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8977
		{
			yyVAL.str = "format"
		}
	case 2308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8981
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8982
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8983
		{
			yyVAL.node = nil
		}
	case 2311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8987
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8988
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8989
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8990
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8991
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8992
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8993
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8994
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8995
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8996
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2321:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9005
		{
			var optionsList *ast.NodeList
			if yyDollar[2].ival != 0 || yyDollar[3].ival != 0 || yyDollar[4].ival != 0 || yyDollar[5].ival != 0 {
				optionsList = ast.NewNodeList()
				if yyDollar[2].ival != 0 {
					optionsList.Append(ast.NewDefElem("full", ast.NewBoolean(true)))
				}
				if yyDollar[3].ival != 0 {
					optionsList.Append(ast.NewDefElem("freeze", ast.NewBoolean(true)))
				}
				if yyDollar[4].ival != 0 {
					optionsList.Append(ast.NewDefElem("verbose", ast.NewBoolean(true)))
				}
				if yyDollar[5].ival != 0 {
					optionsList.Append(ast.NewDefElem("analyze", ast.NewBoolean(true)))
				}
			}

			yyVAL.stmt = ast.NewVacuumStmt(optionsList, yyDollar[6].list)
		}
	case 2322:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9026
		{
			yyVAL.stmt = ast.NewVacuumStmt(yyDollar[3].list, yyDollar[5].list)
		}
	case 2323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9033
		{
			var optionsList *ast.NodeList
			if yyDollar[2].ival != 0 {
				optionsList = ast.NewNodeList(ast.NewDefElem("verbose", ast.NewBoolean(true)))
			}

			yyVAL.stmt = ast.NewAnalyzeStmt(optionsList, yyDollar[3].list)
		}
	case 2324:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9042
		{
			yyVAL.stmt = ast.NewAnalyzeStmt(yyDollar[3].list, yyDollar[5].list)
		}
	case 2325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9048
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9049
		{
			yyVAL.list = nil
		}
	case 2327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9054
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].vacrel)
		}
	case 2328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9058
		{
			yyDollar[1].list.Append(yyDollar[3].vacrel)
			yyVAL.list = yyDollar[1].list
		}
	case 2329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9066
		{
			yyVAL.vacrel = ast.NewVacuumRelation(yyDollar[1].rangevar, yyDollar[2].list)
		}
	case 2330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9072
		{
			yyVAL.str = "analyze"
		}
	case 2331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9073
		{
			yyVAL.str = "analyse"
		}
	case 2332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9082
		{
			yyVAL.stmt = ast.NewVariableShowStmt(yyDollar[2].str)
		}
	case 2333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9086
		{
			yyVAL.stmt = ast.NewVariableShowStmt("timezone")
		}
	case 2334:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9090
		{
			yyVAL.stmt = ast.NewVariableShowStmt("transaction_isolation")
		}
	case 2335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9094
		{
			yyVAL.stmt = ast.NewVariableShowStmt("session_authorization")
		}
	case 2336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9098
		{
			yyVAL.stmt = ast.NewVariableShowStmt("all")
		}
	case 2337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9109
		{
			yyVAL.stmt = ast.NewAlterSystemStmt(yyDollar[4].vsetstmt)
		}
	case 2338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9113
		{
			yyVAL.stmt = ast.NewAlterSystemStmt(yyDollar[4].vsetstmt)
		}
	case 2339:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9124
		{
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[5].rangevar, yyDollar[6].str, yyDollar[3].list)
		}
	case 2340:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9128
		{
			yyVAL.stmt = ast.NewClusterStmt(nil, "", yyDollar[3].list)
		}
	case 2341:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9132
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[3].rangevar, yyDollar[4].str, params)
		}
	case 2342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9141
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(nil, "", params)
		}
	case 2343:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9150
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[5].rangevar, yyDollar[3].str, params)
		}
	case 2344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9161
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9162
		{
			yyVAL.str = ""
		}
	case 2346:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9171
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.ReindexObjectType(yyDollar[3].ival), yyDollar[5].rangevar, "", params)
		}
	case 2347:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9184
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.REINDEX_OBJECT_SCHEMA, nil, yyDollar[5].str, params)
		}
	case 2348:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9197
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.ReindexObjectType(yyDollar[3].ival), nil, yyDollar[5].str, params)
		}
	case 2349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9212
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_INDEX)
		}
	case 2350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9213
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_TABLE)
		}
	case 2351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9217
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_SYSTEM)
		}
	case 2352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9218
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_DATABASE)
		}
	case 2353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9222
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9223
		{
			yyVAL.list = nil
		}
	case 2355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9232
		{
			yyVAL.stmt = ast.NewCheckPointStmt()
		}
	case 2356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9243
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_ALL)
		}
	case 2357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9247
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_TEMP)
		}
	case 2358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9251
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_TEMP)
		}
	case 2359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9255
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_PLANS)
		}
	case 2360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9259
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_SEQUENCES)
		}
	case 2361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9266
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 2362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9267
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 2363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9268
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 2364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9269
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 2365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9270
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 2366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9271
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 2367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9272
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 2368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9273
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 2369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9274
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 2370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9275
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 2371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9276
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 2372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9277
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 2373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9278
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 2374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9291
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9292
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9297
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9301
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9309
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode: ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:  yyDollar[1].list,
				Objargs:  yyDollar[2].list,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9321
		{
			yylex.Error("Use NONE to denote the missing argument of a unary operator.")
			return 1
		}
	case 2380:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9326
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, yyDollar[4].typnam)
		}
	case 2381:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9328
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[4].typnam)
		}
	case 2382:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9330
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, nil)
		}
	case 2383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9334
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9347
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 2385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9349
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 2386:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9353
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2387:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9364
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2388:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9375
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2389:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9386
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2390:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9397
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2391:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9408
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2392:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9420
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2393:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9431
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2394:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9442
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2395:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9453
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2396:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9464
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2397:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9481
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2398:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9498
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2399:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9510
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2400:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9522
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2401:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9533
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2402:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9544
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2403:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9555
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2404:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9566
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2405:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9577
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2406:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9588
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2407:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9599
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2408:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9610
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2409:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9621
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2410:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9632
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2411:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9643
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2412:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9654
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2413:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9665
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2414:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9676
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2415:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9687
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2416:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9698
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2417:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9709
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2418:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9720
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2419:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9733
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2420:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9746
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2421:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9759
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2422:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9772
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2423:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9785
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2424:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9798
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2425:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9810
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2426:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9822
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2427:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9835
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2428:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9848
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2429:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9860
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2430:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9872
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2431:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9883
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2432:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9894
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2433:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9905
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2434:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9916
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2435:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9927
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2436:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9938
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2437:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9949
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2438:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9960
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2439:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9971
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2440:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9982
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10008
		{
			yyVAL.ival = 0
		}
	case 2442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10010
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 2443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10024
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 2444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10025
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 2445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10026
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 2446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10027
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 2447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10028
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 2448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10029
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 2449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10033
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10038
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10043
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10051
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10055
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2454:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10059
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 2455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10063
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 2456:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10077
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 2457:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:10091
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 2458:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10107
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2459:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10122
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10137
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10138
		{
			yyVAL.list = nil
		}
	case 2462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10143
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10147
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10155
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10159
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10164
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10172
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10181
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10190
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10199
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10208
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10219
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10220
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10221
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10222
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10223
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10227
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10231
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10233
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				// TODO: Add %TYPE indicator
			}
		}
	case 2480:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10243
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				Setof: true,
			}
		}
	case 2481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10255
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10256
		{
			yyVAL.list = nil
		}
	case 2483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10261
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10267
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10275
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10279
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10283
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10287
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10291
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10298
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10304
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10314
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2493:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10320
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10328
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10332
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10344
		{
			yyVAL.node = nil
		}
	case 2497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10351
		{
			yyVAL.stmt = &ast.ReturnStmt{
				ReturnVal: yyDollar[2].node,
			}
		}
	case 2498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10360
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10370
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10376
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10377
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10382
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10386
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2504:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:10402
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2505:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:10434
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10465
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10466
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10467
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10472
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10474
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10514
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10521
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10528
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10535
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10542
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10551
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10552
		{
			yyVAL.list = nil
		}
	case 2518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10556
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10561
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2520:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10569
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10580
		{
			yyVAL.bval = true
		}
	case 2522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10581
		{
			yyVAL.bval = false
		}
	case 2523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10585
		{
			yyVAL.bval = true
		}
	case 2524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10586
		{
			yyVAL.bval = false
		}
	case 2525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10590
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10595
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10599
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10611
		{
			yyVAL.bval = true
		}
	case 2531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10612
		{
			yyVAL.bval = false
		}
	case 2532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10616
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10617
		{
			yyVAL.node = nil
		}
	case 2536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10626
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10631
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10635
		{
			yyVAL.list = nil
		}
	case 2539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10640
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10643
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10644
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10645
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10649
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10650
		{
			yyVAL.rangevar = nil
		}
	case 2545:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10663
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2546:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10679
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2547:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:10695
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2548:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:10711
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10728
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10729
		{
			yyVAL.list = nil
		}
	case 2551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10733
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10734
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10735
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10736
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2555:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10747
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = yyDollar[5].rolespec
			n.SchemaElts = yyDollar[6].list
			yyVAL.stmt = n
		}
	case 2556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10754
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = nil
			n.SchemaElts = yyDollar[4].list
			yyVAL.stmt = n
		}
	case 2557:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10761
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = yyDollar[8].rolespec
			n.SchemaElts = yyDollar[9].list
			yyVAL.stmt = n
		}
	case 2558:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10768
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = nil
			n.SchemaElts = yyDollar[7].list
			yyVAL.stmt = n
		}
	case 2559:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10784
		{
			n := ast.NewCreatedbStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10797
		{
			n := ast.NewDropdbStmt(yyDollar[3].str, false, nil)
			yyVAL.stmt = n
		}
	case 2561:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10802
		{
			n := ast.NewDropdbStmt(yyDollar[5].str, true, nil)
			yyVAL.stmt = n
		}
	case 2562:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10807
		{
			n := ast.NewDropdbStmt(yyDollar[3].str, false, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2563:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10812
		{
			n := ast.NewDropdbStmt(yyDollar[5].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10819
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10820
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Append(yyDollar[3].defelt)
		}
	case 2566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10824
		{
			yyVAL.defelt = ast.NewDefElem("force", nil)
		}
	case 2567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10834
		{
			n := ast.NewDropTableSpaceStmt(yyDollar[3].str, false)
			yyVAL.stmt = n
		}
	case 2568:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10839
		{
			n := ast.NewDropTableSpaceStmt(yyDollar[5].str, true)
			yyVAL.stmt = n
		}
	case 2569:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10853
		{
			n := ast.NewDropOwnedStmt(yyDollar[4].list, yyDollar[5].dropBehav)
			yyVAL.stmt = n
		}
	case 2570:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10861
		{
			n := ast.NewReassignOwnedStmt(yyDollar[4].list, yyDollar[6].rolespec)
			yyVAL.stmt = n
		}
	case 2571:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10875
		{
			n := ast.NewCreateDomainStmt(yyDollar[3].list, yyDollar[5].typnam)
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			n.Constraints = constraints
			n.CollClause = collClause
			yyVAL.stmt = n
		}
	case 2572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10893
		{
			n := ast.NewAlterDomainStmt('T', yyDollar[3].list)
			n.Def = yyDollar[4].node
			yyVAL.stmt = n
		}
	case 2573:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10899
		{
			n := ast.NewAlterDomainStmt('N', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2574:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10904
		{
			n := ast.NewAlterDomainStmt('O', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2575:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10909
		{
			n := ast.NewAlterDomainStmt('C', yyDollar[3].list)
			n.Def = yyDollar[5].node
			yyVAL.stmt = n
		}
	case 2576:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10915
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[6].str
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			yyVAL.stmt = n
		}
	case 2577:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10923
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[8].str
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			yyVAL.stmt = n
		}
	case 2578:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10931
		{
			n := ast.NewAlterDomainStmt('V', yyDollar[3].list)
			n.Name = yyDollar[6].str
			yyVAL.stmt = n
		}
	case 2579:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10946
		{
			// Extract actual arguments from aggr_args which returns [args, position_indicator]
			var args *ast.NodeList
			if yyDollar[5].list != nil && yyDollar[5].list.Len() > 0 {
				// First element contains the actual arguments (or nil for *)
				if firstElem, ok := yyDollar[5].list.Items[0].(*ast.NodeList); ok {
					args = firstElem
				} else if yyDollar[5].list.Items[0] == nil {
					// Special case for COUNT(*) - create a list with a single nil element
					args = ast.NewNodeList(nil)
				}
			}
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, false, yyDollar[4].list, args, yyDollar[6].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2580:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10962
		{
			// old-style (pre-8.2) syntax for CREATE AGGREGATE
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, true, yyDollar[4].list, nil, yyDollar[5].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10968
		{
			n := ast.NewDefineStmt(ast.OBJECT_OPERATOR, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10973
		{
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10978
		{
			// Shell type (identified by lack of definition)
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, nil, false, false)
			yyVAL.stmt = n
		}
	case 2584:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10984
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSPARSER, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2585:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10989
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSDICTIONARY, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2586:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10994
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSTEMPLATE, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2587:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10999
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSCONFIGURATION, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11004
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2589:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11009
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, yyDollar[7].list, true, false)
			yyVAL.stmt = n
		}
	case 2590:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11014
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, ast.NewNodeList(yyDollar[5].list), false, false)
			yyVAL.stmt = n
		}
	case 2591:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11019
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, ast.NewNodeList(yyDollar[8].list), true, false)
			yyVAL.stmt = n
		}
	case 2592:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11024
		{
			typevar, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(fmt.Sprintf("invalid type name: %v", err))
				return 1
			}

			n := ast.NewCompositeTypeStmt(typevar, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2593:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11035
		{
			n := ast.NewCreateEnumStmt(yyDollar[3].list, yyDollar[7].list)
			yyVAL.stmt = n
		}
	case 2594:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11040
		{
			n := ast.NewCreateRangeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2595:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11054
		{
			n := ast.NewCreateSeqStmt(yyDollar[4].rangevar, yyDollar[5].list, 0, false, false)
			yyVAL.stmt = n
		}
	case 2596:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11059
		{
			n := ast.NewCreateSeqStmt(yyDollar[7].rangevar, yyDollar[8].list, 0, false, true)
			yyVAL.stmt = n
		}
	case 2597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11066
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11067
		{
			yyVAL.list = nil
		}
	case 2599:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11078
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[3].rangevar, yyDollar[4].list, false, false)
		}
	case 2600:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11082
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[5].rangevar, yyDollar[6].list, false, true)
		}
	case 2601:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11095
		{
			n := ast.NewCreateExtensionStmt(yyDollar[3].str, false, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2602:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11100
		{
			n := ast.NewCreateExtensionStmt(yyDollar[6].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11108
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11117
		{
			yyVAL.list = nil
		}
	case 2605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11124
		{
			yyVAL.defelt = ast.NewDefElem("schema", ast.NewString(yyDollar[2].str))
		}
	case 2606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11128
		{
			yyVAL.defelt = ast.NewDefElem("version", ast.NewString(yyDollar[2].str))
		}
	case 2607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11132
		{
			yylex.Error("CREATE EXTENSION ... FROM is no longer supported")
			return 1
		}
	case 2608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11137
		{
			yyVAL.defelt = ast.NewDefElem("cascade", ast.NewBoolean(true))
		}
	case 2609:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11150
		{
			n := ast.NewAlterExtensionStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11158
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11167
		{
			yyVAL.list = nil
		}
	case 2612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11174
		{
			yyVAL.defelt = ast.NewDefElem("to", ast.NewString(yyDollar[2].str))
		}
	case 2613:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11187
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), ast.NewString(yyDollar[6].str))
		}
	case 2614:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11191
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), yyDollar[6].list)
		}
	case 2615:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11195
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_AGGREGATE), yyDollar[6].objwithargs)
		}
	case 2616:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11199
		{
			// CAST takes two TypeNames as a NodeList
			list := ast.NewNodeList(yyDollar[7].typnam)
			list.Append(yyDollar[9].typnam)
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_CAST), list)
		}
	case 2617:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11206
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_DOMAIN), yyDollar[6].typnam)
		}
	case 2618:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11210
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_FUNCTION), yyDollar[6].objwithargs)
		}
	case 2619:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11214
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPERATOR), yyDollar[6].objwithargs)
		}
	case 2620:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11218
		{
			// OPERATOR CLASS takes method name + class name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then class name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPCLASS), list)
		}
	case 2621:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11227
		{
			// OPERATOR FAMILY takes method name + family name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then family name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPFAMILY), list)
		}
	case 2622:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11236
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_PROCEDURE), yyDollar[6].objwithargs)
		}
	case 2623:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11240
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_ROUTINE), yyDollar[6].objwithargs)
		}
	case 2624:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11244
		{
			list := ast.NewNodeList(yyDollar[7].typnam, ast.NewString(yyDollar[9].str))
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TRANSFORM), list)
		}
	case 2625:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11249
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TYPE), yyDollar[6].typnam)
		}
	case 2626:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11261
		{
			yyVAL.stmt = ast.NewCreateFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2627:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11267
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2628:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11271
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, nil)
		}
	case 2629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11277
		{
			yyVAL.defelt = ast.NewDefElem("handler", yyDollar[2].list)
		}
	case 2630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11278
		{
			yyVAL.defelt = ast.NewDefElem("handler", nil)
		}
	case 2631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11279
		{
			yyVAL.defelt = ast.NewDefElem("validator", yyDollar[2].list)
		}
	case 2632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11280
		{
			yyVAL.defelt = ast.NewDefElem("validator", nil)
		}
	case 2633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11284
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11285
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11289
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11290
		{
			yyVAL.list = nil
		}
	case 2637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11294
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11295
		{
			result := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				result.Append(item)
			}
			yyVAL.list = result
		}
	case 2639:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11312
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].str, yyDollar[9].str, yyDollar[10].list, false)
		}
	case 2640:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11317
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[6].str, yyDollar[7].str, yyDollar[8].str, yyDollar[12].str, yyDollar[13].list, true)
		}
	case 2641:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11323
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].list, true)
		}
	case 2642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11327
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, nil, true)
		}
	case 2643:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11331
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, "", yyDollar[4].list, false)
		}
	case 2644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11337
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11338
		{
			yyVAL.str = ""
		}
	case 2646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11342
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11343
		{
			yyVAL.str = ""
		}
	case 2648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11347
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11348
		{
			yyVAL.str = ""
		}
	case 2650:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11361
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[6].list, yyDollar[8].list, yyDollar[10].str, yyDollar[11].list, nil, false)
		}
	case 2651:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:11367
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[9].list, yyDollar[11].list, yyDollar[13].str, yyDollar[14].list, nil, true)
		}
	case 2652:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:11373
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[8].list, ast.NewNodeList(yyDollar[7].rangevar), yyDollar[11].str, yyDollar[12].list, yyDollar[9].partboundspec, false)
		}
	case 2653:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:11379
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[11].list, ast.NewNodeList(yyDollar[10].rangevar), yyDollar[14].str, yyDollar[15].list, yyDollar[12].partboundspec, true)
		}
	case 2654:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11393
		{
			stmt := ast.NewImportForeignSchemaStmt(
				ast.NewString(yyDollar[8].str),    // server name
				ast.NewString(yyDollar[4].str),    // remote schema
				ast.NewString(yyDollar[10].str),   // local schema
				yyDollar[5].importqual.typ,        // list type
				yyDollar[5].importqual.tableNames, // table list
				yyDollar[11].list,                 // options
			)
			yyVAL.stmt = stmt
		}
	case 2655:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11408
		{
			qual := &ImportQual{
				typ:        yyDollar[1].importqualtype,
				tableNames: yyDollar[3].list,
			}
			yyVAL.importqual = qual
		}
	case 2656:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11416
		{
			qual := &ImportQual{
				typ:        ast.FDW_IMPORT_SCHEMA_ALL,
				tableNames: nil,
			}
			yyVAL.importqual = qual
		}
	case 2657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11426
		{
			yyVAL.importqualtype = ast.FDW_IMPORT_SCHEMA_LIMIT_TO
		}
	case 2658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11427
		{
			yyVAL.importqualtype = ast.FDW_IMPORT_SCHEMA_EXCEPT
		}
	case 2659:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11437
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list, false)
		}
	case 2660:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11441
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[8].rolespec, yyDollar[10].str, yyDollar[11].list, true)
		}
	case 2661:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11447
		{
			yyVAL.stmt = ast.NewAlterUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list)
		}
	case 2662:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11453
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, false)
		}
	case 2663:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11457
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[7].rolespec, yyDollar[9].str, true)
		}
	case 2664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11463
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11464
		{
			yyVAL.rolespec = ast.NewRoleSpec(ast.ROLESPEC_CURRENT_USER, "")
		}
	case 2666:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11469
		{
			// For aggregates like COUNT(*)
			// Return a list with [nil, -1] matching PostgreSQL's list_make2(NIL, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(nil, ast.NewInteger(-1))
		}
	case 2667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11475
		{
			// Regular aggregate arguments
			// Return a list with [args, -1] matching PostgreSQL's list_make2($2, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(yyDollar[2].list, ast.NewInteger(-1))
		}
	case 2668:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11481
		{
			// Ordered-set aggregate without direct arguments
			// Return a list with [args, 0] matching PostgreSQL's list_make2($4, makeInteger(0))
			yyVAL.list = ast.NewNodeList(yyDollar[4].list, ast.NewInteger(0))
		}
	case 2669:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11487
		{
			// Hypothetical-set aggregate
			// This is the only case requiring consistency checking in PostgreSQL
			result, err := makeOrderedSetArgs(yyDollar[2].list, yyDollar[5].list)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.list = result
		}
	case 2670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11501
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11505
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11513
		{
			yyVAL.node = yyDollar[1].funparam
		}
	case 2673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11520
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11527
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11531
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11539
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2677:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11546
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			n.NewValIsAfter = true
			yyVAL.stmt = n
		}
	case 2678:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11554
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = false
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2679:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11563
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = true
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2680:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11572
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.OldVal = yyDollar[6].str
			n.NewVal = yyDollar[8].str
			n.SkipIfNewValExists = false
			yyVAL.stmt = n
		}
	case 2681:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11580
		{
			// Following PostgreSQL's approach - DROP VALUE is parsed but not implemented
			// PostgreSQL throws an error saying "dropping an enum value is not implemented"
			yylex.Error("dropping an enum value is not implemented")
			return 1
		}
	case 2682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11596
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2683:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11598
		{
			yyVAL.list = nil
		}
	case 2684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11603
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11605
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11610
		{
			if constraint, ok := yyDollar[3].node.(*ast.Constraint); ok {
				constraint.Conname = yyDollar[2].str
				yyVAL.node = constraint
			} else {
				yyVAL.node = yyDollar[3].node
			}
		}
	case 2687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11619
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2688:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11624
		{
			n := ast.NewConstraint(ast.CONSTR_CHECK)
			n.RawExpr = yyDollar[3].node
			n.CookedExpr = "" // Empty string, not nil
			// Process constraint attributes from $5
			processConstraintAttributeSpec(yyDollar[5].ival, n)
			// PostgreSQL: n->initially_valid = !n->skip_validation
			n.InitiallyValid = !n.SkipValidation
			yyVAL.node = n
		}
	case 2689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11635
		{
			n := ast.NewConstraint(ast.CONSTR_NOTNULL)
			// In PostgreSQL, domain NOT NULL constraints have keys = list_make1(makeString("value"))
			n.Keys = ast.NewNodeList(ast.NewString("value"))
			// Process constraint attributes from $3
			processConstraintAttributeSpec(yyDollar[3].ival, n)
			// PostgreSQL sets initially_valid = true for NOT NULL (no NOT VALID support yet)
			n.InitiallyValid = true
			yyVAL.node = n
		}
	case 2690:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11655
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[7].stmt, yyDollar[5].into, ast.OBJECT_MATVIEW, false, false)
			/* cram additional flags into the IntoClause */
			yyDollar[5].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[5].into.SkipData = !yyDollar[8].bval
			yyVAL.stmt = ctas
		}
	case 2691:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11663
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[10].stmt, yyDollar[8].into, ast.OBJECT_MATVIEW, false, true)
			/* cram additional flags into the IntoClause */
			yyDollar[8].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[8].into.SkipData = !yyDollar[11].bval
			yyVAL.stmt = ctas
		}
	case 2692:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11674
		{
			n := ast.NewRefreshMatViewStmt(yyDollar[4].bval, !yyDollar[6].bval, yyDollar[5].rangevar)
			yyVAL.stmt = n
		}
	case 2693:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11689
		{
			yylex.Error("CREATE ASSERTION is not yet implemented")
			return 1
			// PostgreSQL doesn't actually implement CREATE ASSERTION yet.
			// $$ = ast.NewCreateAssertionStmt($3, $6, nil)
		}
	case 2694:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11705
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[6].stmt, yyDollar[4].into, ast.OBJECT_TABLE, false, false)
			/* cram additional flags into the IntoClause */
			if yyDollar[4].into.Rel != nil {
				yyDollar[4].into.Rel.RelPersistence = yyDollar[2].rune
			}
			yyDollar[4].into.SkipData = !yyDollar[7].bval
			yyVAL.stmt = ctas
		}
	case 2695:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11715
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[9].stmt, yyDollar[7].into, ast.OBJECT_TABLE, false, true)
			/* cram additional flags into the IntoClause */
			if yyDollar[7].into.Rel != nil {
				yyDollar[7].into.Rel.RelPersistence = yyDollar[2].rune
			}
			yyDollar[7].into.SkipData = !yyDollar[10].bval
			yyVAL.stmt = ctas
		}
	case 2696:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11735
		{
			n := &ast.RuleStmt{
				BaseNode:    ast.BaseNode{Tag: ast.T_RuleStmt},
				Replace:     yyDollar[2].bval,
				Relation:    yyDollar[9].rangevar,
				Rulename:    yyDollar[4].str,
				WhereClause: yyDollar[10].node,
				Event:       ast.CmdType(yyDollar[7].ival),
				Instead:     yyDollar[12].bval,
				Actions:     yyDollar[13].list,
			}
			yyVAL.stmt = n
		}
	case 2697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11751
		{
			yyVAL.list = nil
		}
	case 2698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11752
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].stmt)
		}
	case 2699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11753
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11758
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].list != nil {
					yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].stmt)
					yyVAL.list = yyDollar[1].list
				} else {
					yyVAL.list = ast.NewNodeList(yyDollar[3].stmt)
				}
			}
		}
	case 2701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11769
		{
			if yyDollar[1].stmt != nil {
				yyVAL.list = ast.NewNodeList(yyDollar[1].stmt)
			} else {
				yyVAL.list = nil
			}
		}
	case 2707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11787
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2708:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11788
		{
			yyVAL.stmt = nil
		}
	case 2709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11792
		{
			yyVAL.bval = true
		}
	case 2710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11793
		{
			yyVAL.bval = false
		}
	case 2711:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11794
		{
			yyVAL.bval = false
		}
	case 2712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11797
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 2713:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11798
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 2714:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11803
		{
			yyVAL.into = &ast.IntoClause{
				Rel:            yyDollar[1].rangevar,
				ColNames:       yyDollar[2].list,
				AccessMethod:   yyDollar[3].str,
				Options:        yyDollar[4].list,
				TableSpaceName: yyDollar[5].str,
			}
		}
	case 2715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11815
		{
			yyVAL.bval = true
		}
	case 2716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11816
		{
			yyVAL.bval = false
		}
	case 2717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11817
		{
			yyVAL.bval = true
		}
	case 2718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11822
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].stmt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2719:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11831
		{
			yyVAL.list = nil
		}
	case 2724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11842
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2725:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11844
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11848
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11853
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11858
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11863
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11871
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2731:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11876
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11881
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11885
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11896
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11904
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11908
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2737:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11912
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2738:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11916
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11923
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11927
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11934
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11940
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11947
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11948
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11952
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11953
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11955
		{
			t := yyDollar[1].typnam
			t.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 2748:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11962
		{
			t := yyDollar[1].typnam
			// INTERVAL_FULL_RANGE equivalent and precision
			t.Typmods = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_FULL_RANGE), ast.NewInteger(yyDollar[3].ival))
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[5].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 2749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11969
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11970
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11971
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11975
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11976
		{
			yyVAL.str = "default"
		}
	case 2754:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11977
		{
			yyVAL.str = ""
		}
	case 2755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11981
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11982
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11986
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11987
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11988
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11989
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11993
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11994
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11999
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12005
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12010
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12018
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12022
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12026
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12030
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12034
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12040
		{
			yyVAL.str = "read uncommitted"
		}
	case 2772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12041
		{
			yyVAL.str = "read committed"
		}
	case 2773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12042
		{
			yyVAL.str = "repeatable read"
		}
	case 2774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12043
		{
			yyVAL.str = "serializable"
		}
	case 2775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12047
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2776:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12048
		{
			yyVAL.list = nil
		}
	case 2777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12052
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12053
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12054
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12057
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12058
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12059
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12063
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2784:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12064
		{
			yyVAL.list = nil
		}
	case 2785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12068
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2786:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12069
		{
			yyVAL.node = nil
		}
	case 2787:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12073
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12078
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2789:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12083
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12091
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2791:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12095
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12101
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2793:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12107
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12113
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12114
		{
			yyVAL.str = ""
		}
	case 2796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12118
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12119
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12120
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2799:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12121
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2800:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12125
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12130
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2802:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12135
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12142
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2804:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12143
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2805:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12154
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[9].list, nil)
		}
	case 2806:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:12158
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[11].list, yyDollar[8].list)
		}
	case 2807:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12164
		{
			yyVAL.stmt = ast.NewAlterEventTrigStmt(yyDollar[4].str, ast.TriggerFires(yyDollar[5].ival))
		}
	case 2808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12170
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_ORIGIN)
		}
	case 2809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12171
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_REPLICA)
		}
	case 2810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12172
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ALWAYS)
		}
	case 2811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12173
		{
			yyVAL.ival = int(ast.TRIGGER_DISABLED)
		}
	case 2812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12178
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12183
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2814:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12191
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[4].list)
		}
	case 2815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12198
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(ast.NewString(yyDollar[1].str))
		}
	case 2816:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12203
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2817:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12217
		{
			yyVAL.stmt = ast.NewCreateTableSpaceStmt(yyDollar[3].str, yyDollar[4].rolespec, yyDollar[6].str, yyDollar[7].list)
		}
	case 2818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12223
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 2819:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12224
		{
			yyVAL.rolespec = nil
		}
	case 2820:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12229
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, false)
		}
	case 2821:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12233
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, true)
		}
	case 2822:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12248
		{
			yyVAL.stmt = ast.NewCreatePolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].bval, yyDollar[7].str, yyDollar[8].list, yyDollar[9].node, yyDollar[10].node)
		}
	case 2823:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12256
		{
			yyVAL.stmt = ast.NewAlterPolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].list, yyDollar[7].node, yyDollar[8].node)
		}
	case 2824:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12263
		{
			// Check for "permissive" or "restrictive" (case-insensitive)
			if strings.EqualFold(yyDollar[2].str, "permissive") {
				yyVAL.bval = true
			} else if strings.EqualFold(yyDollar[2].str, "restrictive") {
				yyVAL.bval = false
			} else {
				// Parser will error on invalid value
				yylex.Error("unrecognized row security option")
				return 1
			}
		}
	case 2825:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12275
		{
			yyVAL.bval = true
		}
	case 2826:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12279
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2827:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12280
		{
			yyVAL.str = "all"
		}
	case 2828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12284
		{
			yyVAL.str = "all"
		}
	case 2829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12285
		{
			yyVAL.str = "select"
		}
	case 2830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12286
		{
			yyVAL.str = "insert"
		}
	case 2831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12287
		{
			yyVAL.str = "update"
		}
	case 2832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12288
		{
			yyVAL.str = "delete"
		}
	case 2833:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12292
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2834:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12293
		{
			// Default to PUBLIC when no TO clause is specified
			publicRole := ast.NewRoleSpec(ast.ROLESPEC_PUBLIC, "")
			yyVAL.list = ast.NewNodeList(publicRole)
		}
	case 2835:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12301
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2836:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12302
		{
			yyVAL.list = nil
		}
	case 2837:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12306
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2838:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12307
		{
			yyVAL.node = nil
		}
	case 2839:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12311
		{
			yyVAL.node = yyDollar[4].node
		}
	case 2840:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12312
		{
			yyVAL.node = nil
		}
	case 2841:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12323
		{
			yyVAL.stmt = ast.NewCreateAmStmt(yyDollar[4].str, ast.AmType(yyDollar[6].ival), yyDollar[8].list)
		}
	case 2842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12329
		{
			yyVAL.ival = int(ast.AMTYPE_INDEX)
		}
	case 2843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12330
		{
			yyVAL.ival = int(ast.AMTYPE_TABLE)
		}
	case 2844:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12341
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[3].list, yyDollar[4].list, yyDollar[6].list, yyDollar[8].list, "", false, false)
		}
	case 2845:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12345
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[6].list, yyDollar[7].list, yyDollar[9].list, yyDollar[11].list, "", false, true)
		}
	case 2846:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12352
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[3].list, yyDollar[6].node, false)
		}
	case 2847:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12356
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[5].list, yyDollar[8].node, true)
		}
	case 2848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12362
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].statelem)
		}
	case 2849:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12363
		{
			yyDollar[1].list.Append(yyDollar[3].statelem)
			yyVAL.list = yyDollar[1].list
		}
	case 2850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12367
		{
			yyVAL.statelem = ast.NewStatsElem(yyDollar[1].str)
		}
	case 2851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12368
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[1].node)
		}
	case 2852:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12369
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[2].node)
		}
	case 2853:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12380
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, false, yyDollar[4].list)
		}
	case 2854:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12384
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, true, yyDollar[7].list)
		}
	case 2855:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12388
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, yyDollar[5].list, false, yyDollar[6].list)
		}
	case 2856:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12395
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, yyDollar[5].list, nil, ast.AP_SetOptions)
		}
	case 2857:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12399
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_AddObjects)
		}
	case 2858:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12403
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_SetObjects)
		}
	case 2859:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12407
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_DropObjects)
		}
	case 2860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12413
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2861:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12414
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2862:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12419
		{
			pubTable := ast.NewPublicationTable(yyDollar[2].rangevar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_TABLE, pubTable)
		}
	case 2863:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12424
		{
			yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_TABLES_IN_SCHEMA, yyDollar[4].str)
		}
	case 2864:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12428
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA)
		}
	case 2865:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12432
		{
			// If either a row filter or column list is specified, create a PublicationTable object
			if yyDollar[2].list != nil || yyDollar[3].node != nil {
				// Create a simple RangeVar from the ColId
				rangeVar := ast.NewRangeVar(yyDollar[1].str, "", "")
				pubTable := ast.NewPublicationTable(rangeVar, yyDollar[3].node, yyDollar[2].list)
				yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
			} else {
				yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_CONTINUATION, yyDollar[1].str)
			}
		}
	case 2866:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12444
		{
			rangeVar := makeRangeVarFromQualifiedName(yyDollar[1].str, yyDollar[2].list, -1)
			pubTable := ast.NewPublicationTable(rangeVar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2867:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12450
		{
			pubTable := ast.NewPublicationTable(yyDollar[1].rangevar, yyDollar[3].node, yyDollar[2].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12455
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_CONTINUATION)
		}
	case 2869:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12461
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2870:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12462
		{
			yyVAL.node = nil
		}
	case 2871:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12473
		{
			yyVAL.stmt = ast.NewCreateSubscriptionStmt(yyDollar[3].str, yyDollar[5].str, yyDollar[7].list, yyDollar[8].list)
		}
	case 2872:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12480
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_OPTIONS, "", nil, yyDollar[5].list)
		}
	case 2873:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12484
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_CONNECTION, yyDollar[5].str, nil, nil)
		}
	case 2874:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12488
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_REFRESH, "", nil, yyDollar[6].list)
		}
	case 2875:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12492
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ADD_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2876:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12496
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_DROP_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2877:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12500
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SET_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2878:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12504
		{
			enableOpt := ast.NewNodeList()
			enableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(true)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, enableOpt)
		}
	case 2879:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12510
		{
			disableOpt := ast.NewNodeList()
			disableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(false)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, disableOpt)
		}
	case 2880:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12516
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SKIP, "", nil, yyDollar[5].list)
		}
	case 2881:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12529
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, yyDollar[10].objwithargs, ast.CoercionContext(yyDollar[11].ival), false)
		}
	case 2882:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12533
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), false)
		}
	case 2883:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12537
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), true)
		}
	case 2884:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12543
		{
			yyVAL.ival = int(ast.COERCION_IMPLICIT)
		}
	case 2885:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12544
		{
			yyVAL.ival = int(ast.COERCION_ASSIGNMENT)
		}
	case 2886:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12545
		{
			yyVAL.ival = int(ast.COERCION_EXPLICIT)
		}
	case 2887:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:12557
		{
			yyVAL.stmt = ast.NewCreateOpClassStmt(yyDollar[4].list, yyDollar[11].list, yyDollar[10].str, yyDollar[8].typnam, yyDollar[13].list, yyDollar[5].bval)
		}
	case 2888:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12563
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2889:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12564
		{
			yyVAL.list = nil
		}
	case 2890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12568
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2891:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12569
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2892:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12574
		{
			// Create ObjectWithArgs for simple operator
			owa := ast.NewObjectWithArgs(yyDollar[3].list, nil, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, yyDollar[4].list)
		}
	case 2893:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12580
		{
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, yyDollar[3].objwithargs, yyDollar[4].list)
		}
	case 2894:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12584
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[3].objwithargs, nil)
		}
	case 2895:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12588
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[6].objwithargs, yyDollar[4].list)
		}
	case 2896:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12592
		{
			yyVAL.node = ast.NewOpClassItemStorage(yyDollar[2].typnam)
		}
	case 2897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12598
		{
			yyVAL.bval = true
		}
	case 2898:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12599
		{
			yyVAL.bval = false
		}
	case 2899:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12603
		{
			yyVAL.list = nil
		}
	case 2900:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12604
		{
			yyVAL.list = yyDollar[4].list
		}
	case 2901:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12605
		{
			yyVAL.list = nil
		}
	case 2902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12609
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].typnam)
		}
	case 2903:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12610
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2904:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12621
		{
			yyVAL.stmt = ast.NewCreateOpFamilyStmt(yyDollar[4].list, yyDollar[6].str)
		}
	case 2905:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12634
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, false, yyDollar[8].list)
		}
	case 2906:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12638
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, true, yyDollar[8].list)
		}
	case 2907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12644
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2908:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12645
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2909:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12650
		{
			// Create ObjectWithArgs for operator with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, nil)
		}
	case 2910:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12656
		{
			// Create ObjectWithArgs for function with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, owa, nil)
		}
	case 2911:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12671
		{
			yyVAL.stmt = ast.NewCreateConversionStmt(yyDollar[4].list, yyDollar[6].str, yyDollar[8].str, yyDollar[10].list, yyDollar[2].bval)
		}
	case 2912:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12684
		{
			yyVAL.stmt = ast.NewCreateTransformStmt(yyDollar[2].bval, yyDollar[5].typnam, yyDollar[7].str, linitial(yyDollar[9].list), lsecond(yyDollar[9].list))
		}
	case 2913:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12691
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs)  // fromsql
			yyVAL.list.Append(yyDollar[11].objwithargs) // tosql
		}
	case 2914:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12697
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[11].objwithargs) // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs)  // tosql
		}
	case 2915:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12703
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs) // fromsql
			yyVAL.list.Append(nil)                     // tosql
		}
	case 2916:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12709
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(nil)                     // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs) // tosql
		}
	case 2917:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12724
		{
			// Parameterless CREATE LANGUAGE is now treated as CREATE EXTENSION
			yyVAL.stmt = ast.NewCreateExtensionStmt(yyDollar[6].str, yyDollar[2].bval, nil)
		}
	case 2918:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12730
		{
			yyVAL.stmt = ast.NewCreatePLangStmt(yyDollar[2].bval, yyDollar[6].str, yyDollar[8].list, yyDollar[9].list, yyDollar[10].list, yyDollar[3].bval)
		}
	case 2919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12736
		{
			yyVAL.bval = true
		}
	case 2920:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12737
		{
			yyVAL.bval = false
		}
	case 2921:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12742
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2922:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12743
		{
			yyVAL.list = nil
		}
	case 2923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12747
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2924:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12748
		{
			yyVAL.list = nil
		}
	case 2925:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12752
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2926:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12753
		{
			yyVAL.list = nil
		}
	case 2927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12756
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_ALL
		}
	case 2928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12757
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DISTINCT
		}
	case 2929:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12758
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DEFAULT
		}
	case 2930:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12763
		{
			yyVAL.groupClause = &ast.GroupClause{
				Distinct: yyDollar[3].setquant == ast.SET_QUANTIFIER_DISTINCT,
				List:     yyDollar[4].list,
			}
		}
	case 2931:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12770
		{
			yyVAL.groupClause = nil
		}
	case 2932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12776
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2933:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12777
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12781
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12782
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12783
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12784
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12785
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2939:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12790
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_EMPTY, ast.NewNodeList(), 0)
		}
	case 2940:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12797
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_ROLLUP, yyDollar[3].list, 0)
		}
	case 2941:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12804
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_CUBE, yyDollar[3].list, 0)
		}
	case 2942:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12811
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_SETS, yyDollar[4].list, 0)
		}
	case 2943:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12820
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2944:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12821
		{
			yyVAL.node = nil
		}
	case 2945:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12828
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12832
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2947:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12833
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2948:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12838
		{
			sortBy := ast.NewSortBy(yyDollar[1].node, ast.SORTBY_USING, ast.SortByNulls(yyDollar[4].ival), 0)
			// Use qual_all_Op (NodeList) directly for UseOp
			sortBy.UseOp = yyDollar[3].list
			yyVAL.node = sortBy
		}
	case 2949:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12845
		{
			yyVAL.node = ast.NewSortBy(yyDollar[1].node, ast.SortByDir(yyDollar[2].ival), ast.SortByNulls(yyDollar[3].ival), 0)
		}
	case 2950:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12856
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2951:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12858
		{
			yyVAL.list = nil
		}
	case 2952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12863
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[1].windef)
		}
	case 2953:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12868
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[3].windef)
		}
	case 2954:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12876
		{
			n := yyDollar[3].windef
			n.Name = yyDollar[1].str
			yyVAL.windef = n
		}
	case 2955:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12885
		{
			yyVAL.windef = yyDollar[2].windef
		}
	case 2956:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12887
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			yyVAL.windef = n
		}
	case 2957:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12894
		{
			yyVAL.windef = nil
		}
	case 2958:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12899
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.PartitionClause = yyDollar[3].list
			n.OrderClause = yyDollar[4].list

			n.FrameOptions = yyDollar[5].windef.FrameOptions
			n.StartOffset = yyDollar[5].windef.StartOffset
			n.EndOffset = yyDollar[5].windef.EndOffset
			yyVAL.windef = n
		}
	case 2959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12913
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2960:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12914
		{
			yyVAL.str = ""
		}
	case 2961:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12918
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2962:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12919
		{
			yyVAL.list = nil
		}
	case 2963:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12924
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_RANGE
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2964:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12931
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_ROWS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2965:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12938
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_GROUPS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2966:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12945
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12956
		{
			n := yyDollar[1].windef
			// reject invalid cases - these would be runtime errors in PostgreSQL
			if (n.FrameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (n.FrameOptions & ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 {
				yylex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			n.FrameOptions |= ast.FRAMEOPTION_END_CURRENT_ROW
			yyVAL.windef = n
		}
	case 2968:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12970
		{
			n1 := yyDollar[2].windef
			n2 := yyDollar[4].windef

			// form merged options
			frameOptions := n1.FrameOptions
			// shift converts START_ options to END_ options
			frameOptions |= (n2.FrameOptions << 1)
			frameOptions |= ast.FRAMEOPTION_BETWEEN

			// reject invalid cases
			if (frameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (frameOptions & ast.FRAMEOPTION_END_UNBOUNDED_PRECEDING) != 0 {
				yylex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_CURRENT_ROW) != 0 &&
				(frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 {
				yylex.Error("frame starting from current row cannot have preceding rows")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 &&
				((frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 ||
					(frameOptions&ast.FRAMEOPTION_END_CURRENT_ROW) != 0) {
				yylex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			n1.FrameOptions = frameOptions
			n1.EndOffset = n2.StartOffset
			yyVAL.windef = n1
		}
	case 2969:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13005
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_PRECEDING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2970:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13013
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2971:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13021
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_CURRENT_ROW
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2972:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13029
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_PRECEDING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2973:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13037
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_FOLLOWING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2974:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13047
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_CURRENT_ROW
		}
	case 2975:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13048
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_GROUP
		}
	case 2976:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13049
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_TIES
		}
	case 2977:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13050
		{
			yyVAL.ival = 0
		}
	case 2978:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13051
		{
			yyVAL.ival = 0
		}
	case 2979:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13060
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[2].node
		}
	case 2980:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13065
		{
			yyVAL.selectLimit = yyDollar[2].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[1].node
		}
	case 2981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13070
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13074
		{
			n := &selectLimit{}
			n.limitOffset = yyDollar[1].node
			n.limitCount = nil
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13084
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2984:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13085
		{
			yyVAL.selectLimit = nil
		}
	case 2985:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13090
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[2].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2986:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13098
		{
			// Disabled because it was too confusing - PostgreSQL error
			yylex.Error("LIMIT #,# syntax is not supported. Use separate LIMIT and OFFSET clauses.")
			return 1
		}
	case 2987:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13105
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2988:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13113
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2989:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13121
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2990:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13129
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2991:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13140
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2992:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13143
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13147
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13149
		{
			/* LIMIT ALL is represented as a NULL constant */
			yyVAL.node = ast.NewA_Const(ast.NewNull(), -1)
		}
	case 2995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13156
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13169
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2997:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13171
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("+")}}, nil, yyDollar[2].node, -1)
		}
	case 2998:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13175
		{
			// Create a unary minus expression
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("-")}}, nil, yyDollar[2].node, -1)
		}
	case 2999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13182
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), -1)
		}
	case 3000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13183
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), -1)
		}
	case 3001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13188
		{
			yyVAL.ival = 0
		}
	case 3002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13189
		{
			yyVAL.ival = 0
		}
	case 3003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13193
		{
			yyVAL.ival = 0
		}
	case 3004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13194
		{
			yyVAL.ival = 0
		}
	case 3005:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13207
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 3006:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13213
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_START)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 3007:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13219
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 3008:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13225
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 3009:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13231
		{
			stmt := ast.NewSavepointStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 3010:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13236
		{
			stmt := ast.NewReleaseStmt(yyDollar[3].str)
			yyVAL.stmt = stmt
		}
	case 3011:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13241
		{
			stmt := ast.NewReleaseStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 3012:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13246
		{
			stmt := ast.NewRollbackToStmt(yyDollar[5].str)
			yyVAL.stmt = stmt
		}
	case 3013:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13251
		{
			stmt := ast.NewRollbackToStmt(yyDollar[4].str)
			yyVAL.stmt = stmt
		}
	case 3014:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13256
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_PREPARE)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 3015:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13262
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 3016:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13268
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 3017:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13277
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 3018:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13283
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_BEGIN)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 3019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13290
		{
		}
	case 3020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13291
		{
		}
	case 3021:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13292
		{
		}
	case 3022:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13296
		{
			yyVAL.bval = true
		}
	case 3023:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13297
		{
			yyVAL.bval = false
		}
	case 3024:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13298
		{
			yyVAL.bval = false
		}
	case 3025:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13311
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_ROLE, yyDollar[3].str, yyDollar[5].list)
		}
	case 3026:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13318
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_USER, yyDollar[3].str, yyDollar[5].list)
		}
	case 3027:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13325
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_GROUP, yyDollar[3].str, yyDollar[5].list)
		}
	case 3028:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13332
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 3029:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13338
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 3030:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13347
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 3031:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13351
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 3032:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13355
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 3033:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13359
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 3034:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13365
		{
			yyVAL.str = ""
		}
	case 3035:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13366
		{
			yyVAL.str = yyDollar[3].str
		}
	case 3036:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13371
		{
			options := ast.NewNodeList(ast.NewDefElem("rolemembers", yyDollar[6].list))
			stmt := ast.NewAlterRoleStmt(yyDollar[3].rolespec, options)
			stmt.Action = yyDollar[4].ival
			yyVAL.stmt = stmt
		}
	case 3037:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13381
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 3038:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13385
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 3039:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13389
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 3040:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13393
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 3041:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13397
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 3042:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13401
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 3043:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13409
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 3044:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13420
		{
			yyVAL.list = nil
		}
	case 3045:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13425
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 3046:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13436
		{
			yyVAL.list = nil
		}
	case 3047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13440
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 3048:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13442
		{
			yyVAL.defelt = ast.NewDefElem("sysid", ast.NewInteger(yyDollar[2].ival))
		}
	case 3049:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13446
		{
			yyVAL.defelt = ast.NewDefElem("adminmembers", yyDollar[2].list)
		}
	case 3050:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13450
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 3051:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13454
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 3052:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13458
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 3053:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13465
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[2].str))
		}
	case 3054:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13469
		{
			yyVAL.defelt = ast.NewDefElem("password", nil)
		}
	case 3055:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13473
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[3].str))
		}
	case 3056:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13477
		{
			yylex.Error("UNENCRYPTED PASSWORD is no longer supported")
			return 1
		}
	case 3057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13482
		{
			yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(true))
		}
	case 3058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13486
		{
			// Handle identifiers like PostgreSQL does with string comparisons
			if yyDollar[1].str == "superuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nosuperuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createrole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreaterole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createdb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreatedb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(false))
			} else if yyDollar[1].str == "login" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nologin" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(false))
			} else if yyDollar[1].str == "replication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(true))
			} else if yyDollar[1].str == "noreplication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(false))
			} else if yyDollar[1].str == "bypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nobypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(false))
			} else if yyDollar[1].str == "noinherit" {
				yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(false))
			} else {
				// Return error for unrecognized role option
				yylex.Error("unrecognized role option \"" + yyDollar[1].str + "\"")
				yyVAL.defelt = nil
			}
		}
	case 3059:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13521
		{
			yyVAL.defelt = ast.NewDefElem("connectionlimit", ast.NewInteger(yyDollar[3].ival))
		}
	case 3060:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13525
		{
			yyVAL.defelt = ast.NewDefElem("validUntil", ast.NewString(yyDollar[3].str))
		}
	case 3061:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13529
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 3062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13535
		{
			yyVAL.ival = 1
		}
	case 3063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13536
		{
			yyVAL.ival = -1
		}
	case 3064:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:13548
		{
			n := ast.NewGrantStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.GrantOption = yyDollar[7].bval
			n.Grantor = yyDollar[8].rolespec
			yyVAL.stmt = n
		}
	case 3065:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:13560
		{
			n := ast.NewRevokeStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.Grantor = yyDollar[7].rolespec
			n.Behavior = yyDollar[8].dropBehav
			yyVAL.stmt = n
		}
	case 3066:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:13569
		{
			n := ast.NewRevokeStmt(yyDollar[7].privtarget.objtype, yyDollar[7].privtarget.objs, yyDollar[5].list, yyDollar[9].list)
			n.Targtype = yyDollar[7].privtarget.targtype
			n.GrantOption = true
			n.Grantor = yyDollar[10].rolespec
			n.Behavior = yyDollar[11].dropBehav
			yyVAL.stmt = n
		}
	case 3067:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13581
		{
			stmt := ast.NewGrantRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			yyVAL.stmt = stmt
		}
	case 3068:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13587
		{
			stmt := ast.NewGrantRoleStmtWithOptions(yyDollar[2].list, yyDollar[4].list, yyDollar[6].list)
			stmt.Grantor = yyDollar[7].rolespec
			yyVAL.stmt = stmt
		}
	case 3069:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13596
		{
			stmt := ast.NewRevokeRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			stmt.Behavior = yyDollar[6].dropBehav
			yyVAL.stmt = stmt
		}
	case 3070:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:13603
		{
			opt := ast.NewDefElem(yyDollar[2].str, ast.NewBoolean(false))
			stmt := ast.NewRevokeRoleStmt(yyDollar[5].list, yyDollar[7].list)
			stmt.Opt = &ast.NodeList{Items: []ast.Node{opt}}
			stmt.Grantor = yyDollar[8].rolespec
			stmt.Behavior = yyDollar[9].dropBehav
			yyVAL.stmt = stmt
		}
	case 3071:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13622
		{
			yyVAL.stmt = ast.NewAlterDefaultPrivilegesStmt(yyDollar[4].list, yyDollar[5].node.(*ast.GrantStmt))
		}
	case 3072:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13628
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3073:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13629
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 3074:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13634
		{
			yyVAL.defelt = ast.NewDefElem("schemas", yyDollar[3].list)
		}
	case 3075:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13638
		{
			yyVAL.defelt = ast.NewDefElem("roles", yyDollar[3].list)
		}
	case 3076:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13642
		{
			yyVAL.defelt = ast.NewDefElem("roles", yyDollar[3].list)
		}
	case 3077:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13654
		{
			n := ast.NewGrantStmt(ast.ObjectType(yyDollar[4].ival), nil, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.GrantOption = yyDollar[7].bval
			yyVAL.node = n
		}
	case 3078:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13662
		{
			n := ast.NewRevokeStmt(ast.ObjectType(yyDollar[4].ival), nil, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.Behavior = yyDollar[7].dropBehav
			yyVAL.node = n
		}
	case 3079:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:13670
		{
			n := ast.NewRevokeStmt(ast.ObjectType(yyDollar[7].ival), nil, yyDollar[5].list, yyDollar[9].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.GrantOption = true
			n.Behavior = yyDollar[10].dropBehav
			yyVAL.node = n
		}
	case 3080:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13680
		{
			yyVAL.ival = int(ast.OBJECT_TABLE)
		}
	case 3081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13681
		{
			yyVAL.ival = int(ast.OBJECT_FUNCTION)
		}
	case 3082:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13682
		{
			yyVAL.ival = int(ast.OBJECT_FUNCTION)
		}
	case 3083:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13683
		{
			yyVAL.ival = int(ast.OBJECT_SEQUENCE)
		}
	case 3084:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13684
		{
			yyVAL.ival = int(ast.OBJECT_TYPE)
		}
	case 3085:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13685
		{
			yyVAL.ival = int(ast.OBJECT_SCHEMA)
		}
	case 3086:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13690
		{
			yyVAL.list = yyDollar[1].list
		}
	case 3087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13692
		{
			yyVAL.list = nil
		}
	case 3088:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13694
		{
			yyVAL.list = nil
		}
	case 3089:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13696
		{
			ap := ast.NewAccessPriv("", yyDollar[3].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 3090:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13701
		{
			ap := ast.NewAccessPriv("", yyDollar[4].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 3091:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13707
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].accesspriv)
		}
	case 3092:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13708
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].accesspriv)
			yyVAL.list = yyDollar[1].list
		}
	case 3093:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13712
		{
			yyVAL.accesspriv = ast.NewAccessPriv("SELECT", yyDollar[2].list)
		}
	case 3094:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13716
		{
			yyVAL.accesspriv = ast.NewAccessPriv("REFERENCES", yyDollar[2].list)
		}
	case 3095:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13720
		{
			yyVAL.accesspriv = ast.NewAccessPriv("CREATE", yyDollar[2].list)
		}
	case 3096:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13724
		{
			yyVAL.accesspriv = ast.NewAccessPriv("ALTER SYSTEM", nil)
		}
	case 3097:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13728
		{
			yyVAL.accesspriv = ast.NewAccessPriv(yyDollar[1].str, yyDollar[2].list)
		}
	case 3098:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13738
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[1].list,
			}
		}
	case 3099:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13746
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[2].list,
			}
		}
	case 3100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13754
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[2].list,
			}
		}
	case 3101:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13762
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FDW,
				objs:     yyDollar[4].list,
			}
		}
	case 3102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13770
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FOREIGN_SERVER,
				objs:     yyDollar[3].list,
			}
		}
	case 3103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13778
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[2].list,
			}
		}
	case 3104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13786
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[2].list,
			}
		}
	case 3105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13794
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[2].list,
			}
		}
	case 3106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13802
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DATABASE,
				objs:     yyDollar[2].list,
			}
		}
	case 3107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13810
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DOMAIN,
				objs:     yyDollar[2].list,
			}
		}
	case 3108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13818
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LANGUAGE,
				objs:     yyDollar[2].list,
			}
		}
	case 3109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13826
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LARGEOBJECT,
				objs:     yyDollar[3].list,
			}
		}
	case 3110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13834
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PARAMETER_ACL,
				objs:     yyDollar[2].list,
			}
		}
	case 3111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13842
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SCHEMA,
				objs:     yyDollar[2].list,
			}
		}
	case 3112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13850
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLESPACE,
				objs:     yyDollar[2].list,
			}
		}
	case 3113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13858
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TYPE,
				objs:     yyDollar[2].list,
			}
		}
	case 3114:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13866
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[5].list,
			}
		}
	case 3115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13874
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[5].list,
			}
		}
	case 3116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13882
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[5].list,
			}
		}
	case 3117:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13890
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[5].list,
			}
		}
	case 3118:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13898
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[5].list,
			}
		}
	case 3119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13909
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rolespec)
		}
	case 3120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13910
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 3121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13914
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 3122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13915
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 3123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13920
		{
			yyVAL.bval = true
		}
	case 3124:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13921
		{
			yyVAL.bval = false
		}
	case 3125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13925
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13926
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13931
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 3128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13937
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 3129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13938
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 3130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13939
		{
			yyVAL.node = ast.NewBoolean(false)
		}
	case 3131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13942
		{
			yyVAL.rolespec = yyDollar[3].rolespec
		}
	case 3132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13943
		{
			yyVAL.rolespec = nil
		}
	case 3133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13948
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 3134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13952
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 3135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13960
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13964
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 3137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13969
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 3138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13970
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 3139:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13974
		{
			n := ast.NewRangeTableSample(nil, yyDollar[2].list, yyDollar[4].list, yyDollar[6].node, 0)
			yyVAL.node = n
		}
	case 3140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13982
		{
			yyVAL.node = yyDollar[3].node
		}
	case 3141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13986
		{
			yyVAL.node = nil
		}
	case 3142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14000
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_FUNCTION, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14005
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_PROCEDURE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3144:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14010
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_ROUTINE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14018
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14019
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14025
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 3148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14029
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 3149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14033
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 3150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14037
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 3151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14041
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 3152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14045
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 3153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14049
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 3154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14053
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 3155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14057
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 3156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14061
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 3157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14065
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 3158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14069
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 3159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14073
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 3160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14077
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 3161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14081
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 3162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14085
		{
			/* we abuse the normal content of a DefElem here */
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 3163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14090
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 3164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14096
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14097
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14102
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14106
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 3168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14110
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14116
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 3170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14117
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 3171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14118
		{
			yyVAL.node = yyDollar[1].list
		}
	case 3172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14119
		{
			yyVAL.node = yyDollar[1].node
		}
	case 3173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14120
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 3176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14131
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = yyDollar[1].list
			n.Objargs = ast.ExtractArgTypes(yyDollar[2].list)
			n.ObjfuncArgs = yyDollar[2].list
			yyVAL.objwithargs = n
		}
	case 3177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14144
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14151
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14158
		{
			n := ast.NewEmptyObjectWithArgs()
			nameList := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			// Append indirection elements
			for i := 0; i < yyDollar[2].list.Len(); i++ {
				nameList.Append(yyDollar[2].list.Items[i])
			}
			n.Objname = nameList
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14172
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 3181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14174
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 3182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14178
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 3183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14180
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 3184:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14192
		{
			n := ast.NewAlterTypeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 3185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14200
		{
			relation, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error("invalid type name")
				return 1
			}
			n := ast.NewAlterTableStmt(relation, yyDollar[4].list)
			n.Objtype = ast.OBJECT_TYPE // Mark this as a composite type alteration
			yyVAL.stmt = n
		}
	case 3186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14213
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 3187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14214
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 3188:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14220
		{
			n := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			n.Behavior = yyDollar[4].dropBehav
			yyVAL.node = n
		}
	case 3189:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14227
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			yyVAL.node = n
		}
	case 3190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14235
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			yyVAL.node = n
		}
	case 3191:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14243
		{
			def := ast.NewColumnDef(yyDollar[3].str, yyDollar[6].typnam, -1)
			n := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, def)
			n.Behavior = yyDollar[8].dropBehav
			/* We only use these fields of the ColumnDef node */
			def.TypeName = yyDollar[6].typnam
			if collClause, ok := yyDollar[7].node.(*ast.CollateClause); ok {
				def.Collclause = collClause
			}
			def.RawDefault = nil
			yyVAL.node = n
		}
	case 3192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14264
		{
			yyVAL.ival = int(ast.CMD_SELECT)
		}
	case 3193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14265
		{
			yyVAL.ival = int(ast.CMD_UPDATE)
		}
	case 3194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14266
		{
			yyVAL.ival = int(ast.CMD_DELETE)
		}
	case 3195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14267
		{
			yyVAL.ival = int(ast.CMD_INSERT)
		}
	case 3196:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14277
		{
			yyVAL.stmt = ast.NewDeclareCursorStmt(yyDollar[2].str, yyDollar[3].ival|yyDollar[5].ival|ast.CURSOR_OPT_FAST_PLAN, yyDollar[7].stmt)
		}
	case 3197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14284
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_BINARY
		}
	case 3198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14288
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_INSENSITIVE
		}
	case 3199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14292
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_ASENSITIVE
		}
	case 3200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14296
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_SCROLL
		}
	case 3201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14300
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_NO_SCROLL
		}
	case 3202:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14303
		{
			yyVAL.ival = 0
		}
	case 3203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14306
		{
			yyVAL.ival = ast.CURSOR_OPT_HOLD
		}
	case 3204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14307
		{
			yyVAL.ival = 0
		}
	case 3205:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14308
		{
			yyVAL.ival = 0
		}
	case 3206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14312
		{
			stmt := yyDollar[2].stmt.(*ast.FetchStmt)
			stmt.IsMove = false
			yyVAL.stmt = stmt
		}
	case 3207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14318
		{
			stmt := yyDollar[2].stmt.(*ast.FetchStmt)
			stmt.IsMove = true
			yyVAL.stmt = stmt
		}
	case 3208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14326
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[1].str, false)
		}
	case 3209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14330
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[2].str, false)
		}
	case 3210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14334
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[3].str, false)
		}
	case 3211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14338
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, 1, yyDollar[3].str, false)
		}
	case 3212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14342
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, 1, yyDollar[3].str, false)
		}
	case 3213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14346
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, -1, yyDollar[3].str, false)
		}
	case 3214:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14350
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14354
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_RELATIVE, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14358
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, int64(yyDollar[1].ival), yyDollar[3].str, false)
		}
	case 3217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14362
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, ast.FETCH_ALL, yyDollar[3].str, false)
		}
	case 3218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14366
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[3].str, false)
		}
	case 3219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14370
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14374
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, ast.FETCH_ALL, yyDollar[4].str, false)
		}
	case 3221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14378
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, 1, yyDollar[3].str, false)
		}
	case 3222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14382
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:14386
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, ast.FETCH_ALL, yyDollar[4].str, false)
		}
	case 3224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14391
		{
			yyVAL.ival = 0
		}
	case 3225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14392
		{
			yyVAL.ival = 0
		}
	case 3226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14396
		{
			yyVAL.ival = 0
		}
	case 3227:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14397
		{
			yyVAL.ival = 0
		}
	case 3228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14402
		{
			name := yyDollar[2].str
			yyVAL.stmt = ast.NewClosePortalStmt(&name)
		}
	case 3229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14407
		{
			yyVAL.stmt = ast.NewClosePortalStmt(nil)
		}
	case 3230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14419
		{
			yyVAL.stmt = ast.NewPrepareStmt(yyDollar[2].str, yyDollar[3].list, yyDollar[5].stmt)
		}
	case 3231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14426
		{
			yyVAL.list = yyDollar[2].list
		}
	case 3232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14429
		{
			yyVAL.list = nil
		}
	case 3233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14433
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14434
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14435
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14436
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14437
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14441
		{
			yyVAL.stmt = ast.NewExecuteStmt(yyDollar[2].str, yyDollar[3].list)
		}
	case 3239:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14445
		{
			executeStmt := ast.NewExecuteStmt(yyDollar[7].str, yyDollar[8].list)
			ctas := ast.NewCreateTableAsStmt(executeStmt, yyDollar[4].into, ast.OBJECT_TABLE, false, false)
			// Set relpersistence from OptTemp (following PostgreSQL pattern)
			yyDollar[4].into.Rel.RelPersistence = yyDollar[2].rune
			// Set skipData from opt_with_data (following PostgreSQL pattern)
			yyDollar[4].into.SkipData = !yyDollar[9].bval
			yyVAL.stmt = ctas
		}
	case 3240:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:14455
		{
			executeStmt := ast.NewExecuteStmt(yyDollar[10].str, yyDollar[11].list)
			ctas := ast.NewCreateTableAsStmt(executeStmt, yyDollar[7].into, ast.OBJECT_TABLE, false, true)
			// Set relpersistence from OptTemp (following PostgreSQL pattern)
			yyDollar[7].into.Rel.RelPersistence = yyDollar[2].rune
			// Set skipData from opt_with_data (following PostgreSQL pattern)
			yyDollar[7].into.SkipData = !yyDollar[12].bval
			yyVAL.stmt = ctas
		}
	case 3241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14468
		{
			yyVAL.list = yyDollar[2].list
		}
	case 3242:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14471
		{
			yyVAL.list = nil
		}
	case 3243:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14477
		{
			into := ast.NewIntoClause(yyDollar[1].rangevar, yyDollar[2].list, yyDollar[3].str, yyDollar[4].list, yyDollar[5].oncommit, yyDollar[6].str, nil, false, 0)
			yyVAL.into = into
		}
	case 3244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14485
		{
			yyVAL.stmt = ast.NewDeallocateStmt(yyDollar[2].str)
		}
	case 3245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14489
		{
			yyVAL.stmt = ast.NewDeallocateStmt(yyDollar[3].str)
		}
	case 3246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14493
		{
			yyVAL.stmt = ast.NewDeallocateAllStmt()
		}
	case 3247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14497
		{
			yyVAL.stmt = ast.NewDeallocateAllStmt()
		}
	case 3248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14508
		{
			yyVAL.stmt = ast.NewListenStmt(yyDollar[2].str)
		}
	case 3249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14519
		{
			yyVAL.stmt = ast.NewUnlistenStmt(yyDollar[2].str)
		}
	case 3250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14523
		{
			yyVAL.stmt = ast.NewUnlistenAllStmt()
		}
	case 3251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14534
		{
			yyVAL.stmt = ast.NewNotifyStmt(yyDollar[2].str, yyDollar[3].str)
		}
	case 3252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14544
		{
			yyVAL.str = yyDollar[2].str
		}
	case 3253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14545
		{
			yyVAL.str = ""
		}
	case 3254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14554
		{
			yyVAL.stmt = ast.NewLoadStmt(yyDollar[2].str)
		}
	case 3255:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14565
		{
			stmt := ast.NewLockStmt(yyDollar[3].list, ast.LockMode(yyDollar[4].ival))
			stmt.Nowait = yyDollar[5].bval
			yyVAL.stmt = stmt
		}
	case 3256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14577
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 3257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14578
		{
			yyVAL.ival = int(ast.AccessExclusiveLock)
		}
	case 3258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14582
		{
			yyVAL.ival = int(ast.AccessShareLock)
		}
	case 3259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14583
		{
			yyVAL.ival = int(ast.RowShareLock)
		}
	case 3260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14584
		{
			yyVAL.ival = int(ast.RowExclusiveLock)
		}
	case 3261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14585
		{
			yyVAL.ival = int(ast.ShareUpdateExclusiveLock)
		}
	case 3262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14586
		{
			yyVAL.ival = int(ast.ShareLock)
		}
	case 3263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:14587
		{
			yyVAL.ival = int(ast.ShareRowExclusiveLock)
		}
	case 3264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14588
		{
			yyVAL.ival = int(ast.ExclusiveLock)
		}
	case 3265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14589
		{
			yyVAL.ival = int(ast.AccessExclusiveLock)
		}
	case 3266:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:14598
		{
			stmt := ast.NewTruncateStmt(yyDollar[3].list)
			stmt.RestartSeqs = yyDollar[4].bval
			stmt.Behavior = yyDollar[5].dropBehav
			yyVAL.stmt = stmt
		}
	case 3267:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14612
		{
			yyVAL.stmt = ast.NewCommentStmt(yyDollar[3].objType, yyDollar[4].list, yyDollar[6].str)
		}
	case 3268:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14616
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_COLUMN, yyDollar[4].list, yyDollar[6].str)
		}
	case 3269:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14620
		{
			yyVAL.stmt = ast.NewCommentStmt(yyDollar[3].objType, ast.NewString(yyDollar[4].str), yyDollar[6].str)
		}
	case 3270:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14624
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_TYPE, yyDollar[4].typnam, yyDollar[6].str)
		}
	case 3271:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14628
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_DOMAIN, yyDollar[4].typnam, yyDollar[6].str)
		}
	case 3272:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14632
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_AGGREGATE, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3273:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14636
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_FUNCTION, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3274:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14640
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_OPERATOR, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3275:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14644
		{
			// For table constraints, append constraint name to table name list
			newObj := yyDollar[6].list
			newObj.Append(ast.NewString(yyDollar[4].str))
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_TABCONSTRAINT, newObj, yyDollar[8].str)
		}
	case 3276:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14651
		{
			// For domain constraints, we need a list of [TypeName, constraint_name]
			// This matches PostgreSQL's approach where they comment:
			// "should use Typename not any_name in the production, but
			// there's a shift/reduce conflict if we do that, so fix it up here."
			objList := ast.NewNodeList()
			objList.Append(makeTypeNameFromNodeList(yyDollar[7].list)) // Convert any_name to TypeName
			objList.Append(ast.NewString(yyDollar[4].str))             // Add constraint name
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_DOMCONSTRAINT, objList, yyDollar[9].str)
		}
	case 3277:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14662
		{
			// For object types that need name ON any_name: append name to any_name list
			newObj := yyDollar[6].list
			newObj.Append(ast.NewString(yyDollar[4].str))
			yyVAL.stmt = ast.NewCommentStmt(yyDollar[3].objType, newObj, yyDollar[8].str)
		}
	case 3278:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14669
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_PROCEDURE, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3279:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14673
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_ROUTINE, yyDollar[4].objwithargs, yyDollar[6].str)
		}
	case 3280:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14677
		{
			// Transform: typename + language name
			transformObj := ast.NewNodeList()
			transformObj.Append(yyDollar[5].typnam)             // Typename
			transformObj.Append(ast.NewString(yyDollar[7].str)) // Language name
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_TRANSFORM, transformObj, yyDollar[9].str)
		}
	case 3281:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14685
		{
			// Operator class: access method + class name
			opclassObj := ast.NewNodeList()
			opclassObj.Append(ast.NewString(yyDollar[7].str)) // Access method name first
			for _, item := range yyDollar[5].list.Items {
				opclassObj.Append(item) // Class name parts
			}
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_OPCLASS, opclassObj, yyDollar[9].str)
		}
	case 3282:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14695
		{
			// Operator family: access method + family name
			opfamilyObj := ast.NewNodeList()
			opfamilyObj.Append(ast.NewString(yyDollar[7].str)) // Access method name first
			for _, item := range yyDollar[5].list.Items {
				opfamilyObj.Append(item) // Family name parts
			}
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_OPFAMILY, opfamilyObj, yyDollar[9].str)
		}
	case 3283:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:14705
		{
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_LARGEOBJECT, yyDollar[5].node, yyDollar[7].str)
		}
	case 3284:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:14709
		{
			// Cast: source type + target type
			castObj := ast.NewNodeList()
			castObj.Append(yyDollar[5].typnam) // Source typename
			castObj.Append(yyDollar[7].typnam) // Target typename
			yyVAL.stmt = ast.NewCommentStmt(ast.OBJECT_CAST, castObj, yyDollar[10].str)
		}
	case 3285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14723
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14724
		{
			yyVAL.str = ""
		}
	case 3287:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14733
		{
			yyVAL.stmt = ast.NewSecLabelStmt(yyDollar[5].objType, yyDollar[6].list, yyDollar[3].str, yyDollar[8].str)
		}
	case 3288:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14737
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_COLUMN, yyDollar[6].list, yyDollar[3].str, yyDollar[8].str)
		}
	case 3289:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14741
		{
			yyVAL.stmt = ast.NewSecLabelStmt(yyDollar[5].objType, ast.NewString(yyDollar[6].str), yyDollar[3].str, yyDollar[8].str)
		}
	case 3290:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14745
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_TYPE, yyDollar[6].typnam, yyDollar[3].str, yyDollar[8].str)
		}
	case 3291:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14749
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_DOMAIN, yyDollar[6].typnam, yyDollar[3].str, yyDollar[8].str)
		}
	case 3292:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14753
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_AGGREGATE, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3293:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14757
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_FUNCTION, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3294:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14761
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_LARGEOBJECT, yyDollar[7].node, yyDollar[3].str, yyDollar[9].str)
		}
	case 3295:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14765
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_PROCEDURE, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3296:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14769
		{
			yyVAL.stmt = ast.NewSecLabelStmt(ast.OBJECT_ROUTINE, yyDollar[6].objwithargs, yyDollar[3].str, yyDollar[8].str)
		}
	case 3297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14779
		{
			yyVAL.str = yyDollar[2].str
		}
	case 3298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:14780
		{
			yyVAL.str = ""
		}
	case 3299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14784
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14785
		{
			yyVAL.str = ""
		}
	case 3301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14794
		{
			yyVAL.stmt = ast.NewDoStmt(yyDollar[2].list)
		}
	case 3302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14804
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14805
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Append(yyDollar[2].defelt)
		}
	case 3304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:14810
		{
			yyVAL.defelt = ast.NewDefElem("as", ast.NewString(yyDollar[1].str))
		}
	case 3305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14814
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 3306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:14825
		{
			yyVAL.stmt = ast.NewCallStmt(yyDollar[2].node.(*ast.FuncCall))
		}
	case 3307:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14838
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_AGGREGATE, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3308:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14845
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_COLLATION, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3309:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14852
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_CONVERSION, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3310:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14859
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_DOMAIN, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3311:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14866
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_EXTENSION, yyDollar[6].str)
			stmt.Object = ast.NewString(yyDollar[3].str)
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3312:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14873
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_FUNCTION, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3313:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14880
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_OPERATOR, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3314:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14887
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_OPCLASS, yyDollar[9].str)
			// Create list with access method name first, then class name
			objList := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				objList.Append(item)
			}
			stmt.Object = objList
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3315:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:14899
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_OPFAMILY, yyDollar[9].str)
			// Create list with access method name first, then family name
			objList := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				objList.Append(item)
			}
			stmt.Object = objList
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3316:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14911
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_PROCEDURE, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3317:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14918
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_ROUTINE, yyDollar[6].str)
			stmt.Object = yyDollar[3].objwithargs
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3318:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14925
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TABLE, yyDollar[6].str)
			stmt.Relation = yyDollar[3].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3319:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14932
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TABLE, yyDollar[8].str)
			stmt.Relation = yyDollar[5].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3320:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14939
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_STATISTIC_EXT, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3321:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14946
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSPARSER, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3322:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14953
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSDICTIONARY, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3323:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14960
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSTEMPLATE, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3324:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14967
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TSCONFIGURATION, yyDollar[8].str)
			stmt.Object = yyDollar[5].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3325:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14974
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_SEQUENCE, yyDollar[6].str)
			stmt.Relation = yyDollar[3].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3326:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14981
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_SEQUENCE, yyDollar[8].str)
			stmt.Relation = yyDollar[5].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3327:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:14988
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_VIEW, yyDollar[6].str)
			stmt.Relation = yyDollar[3].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3328:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:14995
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_VIEW, yyDollar[8].str)
			stmt.Relation = yyDollar[5].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3329:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:15002
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_MATVIEW, yyDollar[7].str)
			stmt.Relation = yyDollar[4].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3330:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:15009
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_MATVIEW, yyDollar[9].str)
			stmt.Relation = yyDollar[6].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3331:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:15016
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_FOREIGN_TABLE, yyDollar[7].str)
			stmt.Relation = yyDollar[4].rangevar
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3332:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:15023
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_FOREIGN_TABLE, yyDollar[9].str)
			stmt.Relation = yyDollar[6].rangevar
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3333:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15030
		{
			stmt := ast.NewAlterObjectSchemaStmt(ast.OBJECT_TYPE, yyDollar[6].str)
			stmt.Object = yyDollar[3].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3334:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15046
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3335:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15055
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3336:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15064
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3337:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15073
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_DATABASE,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3338:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15082
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3339:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15091
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3340:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:15100
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newowner:   yyDollar[7].rolespec,
			}
		}
	case 3341:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:15109
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_LARGEOBJECT,
				Object:     yyDollar[4].node,
				Newowner:   yyDollar[7].rolespec,
			}
		}
	case 3342:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15118
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_OPERATOR,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3343:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:15127
		{
			list := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newowner:   yyDollar[9].rolespec,
			}
		}
	case 3344:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:15140
		{
			list := ast.NewNodeList(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newowner:   yyDollar[9].rolespec,
			}
		}
	case 3345:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15153
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3346:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15162
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3347:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15171
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_SCHEMA,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3348:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15180
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3349:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15189
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TABLESPACE,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3350:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15198
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3351:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15207
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newowner:   yyDollar[8].rolespec,
			}
		}
	case 3352:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15216
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newowner:   yyDollar[8].rolespec,
			}
		}
	case 3353:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15225
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newowner:   yyDollar[8].rolespec,
			}
		}
	case 3354:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15234
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3355:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:15243
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newowner:   yyDollar[7].rolespec,
			}
		}
	case 3356:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15252
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3357:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15261
		{
			yyVAL.stmt = &ast.AlterOwnerStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_AlterOwnerStmt},
				ObjectType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newowner:   yyDollar[6].rolespec,
			}
		}
	case 3358:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:15279
		{
			yyVAL.stmt = ast.NewAlterOperatorStmt(yyDollar[3].objwithargs, yyDollar[6].list)
		}
	case 3359:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15292
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_FUNCTION, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Object = yyDollar[3].objwithargs
			yyVAL.stmt = stmt
		}
	case 3360:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15298
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_PROCEDURE, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Object = yyDollar[3].objwithargs
			yyVAL.stmt = stmt
		}
	case 3361:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15304
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_ROUTINE, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Object = yyDollar[3].objwithargs
			yyVAL.stmt = stmt
		}
	case 3362:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:15310
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_TRIGGER, ast.NewString(yyDollar[10].str), yyDollar[6].bval)
			stmt.Relation = yyDollar[5].rangevar
			stmt.Object = ast.NewString(yyDollar[3].str)
			yyVAL.stmt = stmt
		}
	case 3363:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:15317
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_MATVIEW, ast.NewString(yyDollar[9].str), yyDollar[5].bval)
			stmt.Relation = yyDollar[4].rangevar
			yyVAL.stmt = stmt
		}
	case 3364:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:15323
		{
			stmt := ast.NewAlterObjectDependsStmt(ast.OBJECT_INDEX, ast.NewString(yyDollar[8].str), yyDollar[4].bval)
			stmt.Relation = yyDollar[3].rangevar
			yyVAL.stmt = stmt
		}
	case 3365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15330
		{
			yyVAL.bval = true
		}
	case 3366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:15331
		{
			yyVAL.bval = false
		}
	case 3367:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:15342
		{
			yyVAL.stmt = ast.NewAlterCollationStmt(yyDollar[3].list)
		}
	case 3368:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:15355
		{
			yyVAL.stmt = ast.NewAlterDatabaseStmt(yyDollar[3].str, yyDollar[5].list)
		}
	case 3369:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:15359
		{
			yyVAL.stmt = ast.NewAlterDatabaseStmt(yyDollar[3].str, yyDollar[4].list)
		}
	case 3370:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15363
		{
			optList := ast.NewNodeList()
			optList.Append(ast.NewDefElem("tablespace", ast.NewString(yyDollar[6].str)))
			yyVAL.stmt = ast.NewAlterDatabaseStmt(yyDollar[3].str, optList)
		}
	case 3371:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15369
		{
			yyVAL.stmt = ast.NewAlterDatabaseRefreshCollStmt(yyDollar[3].str)
		}
	case 3372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15375
		{
			yyVAL.list = yyDollar[1].list
		}
	case 3373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:15376
		{
			yyVAL.list = nil
		}
	case 3374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15380
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:15381
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:15386
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, ast.NewInteger(yyDollar[3].ival))
		}
	case 3377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:15390
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, ast.NewString(yyDollar[3].str))
		}
	case 3378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:15394
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15400
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:15401
		{
			yyVAL.str = "connection_limit"
		}
	case 3381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15402
		{
			yyVAL.str = "encoding"
		}
	case 3382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15403
		{
			yyVAL.str = "location"
		}
	case 3383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15404
		{
			yyVAL.str = "owner"
		}
	case 3384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15405
		{
			yyVAL.str = "tablespace"
		}
	case 3385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15406
		{
			yyVAL.str = "template"
		}
	case 3386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:15409
		{
		}
	case 3387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:15410
		{
		}
	case 3388:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:15415
		{
			yyVAL.stmt = ast.NewAlterDatabaseSetStmt(yyDollar[3].str, yyDollar[4].vsetstmt)
		}
	case 3389:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:15428
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_ADD_MAPPING, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			stmt.Dicts = yyDollar[11].list
			stmt.Override = false
			stmt.Replace = false
			yyVAL.stmt = stmt
		}
	case 3390:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:15437
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			stmt.Dicts = yyDollar[11].list
			stmt.Override = true
			stmt.Replace = false
			yyVAL.stmt = stmt
		}
	case 3391:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:15446
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_REPLACE_DICT, yyDollar[5].list)
			stmt.Tokentype = nil
			// Create a list with two elements: old dict and new dict
			stmt.Dicts = ast.NewNodeList()
			stmt.Dicts.Append(yyDollar[9].list)
			stmt.Dicts.Append(yyDollar[11].list)
			stmt.Override = false
			stmt.Replace = true
			yyVAL.stmt = stmt
		}
	case 3392:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:15458
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			// Create a list with two elements: old dict and new dict
			stmt.Dicts = ast.NewNodeList()
			stmt.Dicts.Append(yyDollar[11].list)
			stmt.Dicts.Append(yyDollar[13].list)
			stmt.Override = false
			stmt.Replace = true
			yyVAL.stmt = stmt
		}
	case 3393:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:15470
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_DROP_MAPPING, yyDollar[5].list)
			stmt.Tokentype = yyDollar[9].list
			stmt.MissingOk = false
			yyVAL.stmt = stmt
		}
	case 3394:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:15477
		{
			stmt := ast.NewAlterTSConfigurationStmt(ast.ALTER_TSCONFIG_DROP_MAPPING, yyDollar[5].list)
			stmt.Tokentype = yyDollar[11].list
			stmt.MissingOk = true
			yyVAL.stmt = stmt
		}
	case 3397:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:15498
		{
			yyVAL.stmt = ast.NewAlterTSDictionaryStmt(yyDollar[5].list, yyDollar[6].list)
		}
	case 3398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:15508
		{
			yyVAL.bval = false
		}
	case 3399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:15509
		{
			yyVAL.bval = true
		}
	case 3400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:15510
		{
			yyVAL.bval = false
		}
	}
	goto yystack /* stack new state and value */
}
