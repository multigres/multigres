// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
)

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:28
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string

	// AST nodes
	node     ast.Node
	stmt     ast.Stmt
	stmtList []ast.Stmt
	list     []ast.Node
	strList  []string

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const NOT = 57372
const NULLS_P = 57373
const OR = 57374
const REPLACE = 57375
const RESTRICT = 57376
const WITH = 57377
const FORMAT_LA = 57378
const NOT_LA = 57379
const NULLS_LA = 57380
const WITH_LA = 57381
const WITHOUT_LA = 57382
const MODE_TYPE_NAME = 57383
const MODE_PLPGSQL_EXPR = 57384
const MODE_PLPGSQL_ASSIGN1 = 57385
const MODE_PLPGSQL_ASSIGN2 = 57386
const MODE_PLPGSQL_ASSIGN3 = 57387
const UNION = 57388
const EXCEPT = 57389
const INTERSECT = 57390
const AND = 57391
const IS = 57392
const ISNULL = 57393
const NOTNULL = 57394
const BETWEEN = 57395
const IN_P = 57396
const LIKE = 57397
const ILIKE = 57398
const SIMILAR = 57399
const ESCAPE = 57400

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"AND",
	"IS",
	"ISNULL",
	"NOTNULL",
	"'<'",
	"'>'",
	"'='",
	"BETWEEN",
	"IN_P",
	"LIKE",
	"ILIKE",
	"SIMILAR",
	"ESCAPE",
	"';'",
	"','",
	"'.'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:356

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 8

var yyAct = [...]int8{
	5, 3, 4, 2, 1, 0, 0, 6,
}

var yyPact = [...]int16{
	-1000, -1000, -62, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int8{
	0, 4, 3, 1, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2,
}

var yyR1 = [...]int8{
	0, 1, 2, 2, 3, 4, 13, 13, 18, 18,
	19, 19, 19, 20, 20, 21, 21, 22, 22, 23,
	23, 24, 24, 25, 25, 25, 25, 5, 5, 5,
	6, 6, 6, 6, 6, 7, 8, 8, 9, 9,
	11, 11, 10, 10, 12, 12, 14, 15, 16, 17,
	17, 17,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 0, 2, 0, 3, 0, 2, 0, 1,
	0, 2, 0, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 3,
	1, 3, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, 62, -3,
}

var yyDef = [...]int8{
	5, -2, 1, 3, 4, 5, 2,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 63, 3, 64, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 62,
	53, 55, 54,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:120
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:135
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:143
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:158
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:170
		{
			yyVAL.stmt = nil
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:181
		{
			yyVAL.str = yyDollar[1].str
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:182
		{
			yyVAL.str = ""
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:186
		{
			yyVAL.node = yyDollar[1].node
		}
	case 9:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:187
		{
			yyVAL.node = nil
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:191
		{
			yyVAL.ival = int(ast.DropCascade)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:192
		{
			yyVAL.ival = int(ast.DropRestrict)
		}
	case 12:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:193
		{
			yyVAL.ival = int(ast.DropRestrict)
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:197
		{
			yyVAL.ival = 1
		}
	case 14:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:198
		{
			yyVAL.ival = 0
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:202
		{
			yyVAL.ival = 1
		}
	case 16:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:203
		{
			yyVAL.ival = 0
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:207
		{
			yyVAL.ival = 1
		}
	case 18:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:208
		{
			yyVAL.ival = 0
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:212
		{
			yyVAL.ival = 1
		}
	case 20:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:213
		{
			yyVAL.ival = 0
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:217
		{
			yyVAL.node = ast.NewWithClause(nil, false, 0)
		}
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:218
		{
			yyVAL.node = nil
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:222
		{
			yyVAL.node = ast.NewWithClause(nil, false, 0)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:223
		{
			yyVAL.node = ast.NewWithClause(nil, false, 0)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:224
		{
			yyVAL.node = nil
		}
	case 26:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:225
		{
			yyVAL.node = nil
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:234
		{
			yyVAL.str = yyDollar[1].str
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:235
		{
			yyVAL.str = yyDollar[1].str
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:236
		{
			yyVAL.str = yyDollar[1].str
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:240
		{
			yyVAL.str = yyDollar[1].str
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:241
		{
			yyVAL.str = yyDollar[1].str
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:242
		{
			yyVAL.str = yyDollar[1].str
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:243
		{
			yyVAL.str = yyDollar[1].str
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:244
		{
			yyVAL.str = yyDollar[1].str
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:248
		{
			yyVAL.str = yyDollar[1].str
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:253
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:257
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:266
		{
			yyVAL.node = &ast.RangeVar{
				RelName: yyDollar[1].str,
			}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:272
		{
			yyVAL.node = &ast.RangeVar{
				SchemaName: yyDollar[1].str,
				RelName:    yyDollar[3].str,
			}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:288
		{
			yyVAL.node = ast.NewNodeList(yyDollar[1].node)
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:292
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(yyDollar[3].node)
			yyVAL.node = list
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:301
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:305
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str), ast.NewString(yyDollar[3].str))
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:318
		{
			yyVAL.node = ast.NewNodeList(yyDollar[1].node)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:322
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(yyDollar[3].node)
			yyVAL.node = list
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:336
		{
			yyVAL.str = "all"
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:341
		{
			yyVAL.str = yyDollar[1].str
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:346
		{
			yyVAL.str = yyDollar[1].str
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:351
		{
			yyVAL.str = "create"
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:352
		{
			yyVAL.str = "drop"
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:353
		{
			yyVAL.str = "alter"
		}
	}
	goto yystack /* stack new state and value */
}
