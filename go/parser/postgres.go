// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
)

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:28
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string

	// AST nodes
	node       ast.Node
	stmt       ast.Stmt
	stmtList   []ast.Stmt
	list       *ast.NodeList
	strList    []string
	astStrList []*ast.String

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const ORDER_P = 57412
const BY = 57413
const GROUP_P = 57414
const HAVING = 57415
const INTO = 57416
const ON = 57417
const JOIN = 57418
const INNER_P = 57419
const LEFT = 57420
const RIGHT = 57421
const FULL = 57422
const OUTER_P = 57423
const CROSS = 57424
const NATURAL = 57425
const USING = 57426
const RECURSIVE = 57427
const MATERIALIZED = 57428
const LATERAL = 57429
const VALUES = 57430
const SEARCH = 57431
const BREADTH = 57432
const DEPTH = 57433
const CYCLE = 57434
const FIRST_P = 57435
const SET = 57436
const COLUMNS = 57437
const ORDINALITY = 57438
const XMLTABLE = 57439
const JSON_TABLE = 57440
const ROWS = 57441
const PATH = 57442
const PASSING = 57443
const FOR = 57444
const NESTED = 57445
const REF_P = 57446
const XMLNAMESPACES = 57447
const ARRAY = 57448
const ERROR = 57449
const ERROR_P = 57450
const EMPTY = 57451
const EMPTY_P = 57452
const OBJECT_P = 57453
const WRAPPER = 57454
const CONDITIONAL = 57455
const UNCONDITIONAL = 57456
const QUOTES = 57457
const OMIT = 57458
const KEEP = 57459
const SCALAR = 57460
const STRING_P = 57461
const ENCODING = 57462
const VALUE_P = 57463
const JSON_QUERY = 57464
const JSON_VALUE = 57465
const JSON_SERIALIZE = 57466
const JSON_OBJECT = 57467
const JSON_ARRAY = 57468
const JSON_OBJECTAGG = 57469
const JSON_ARRAYAGG = 57470
const JSON_EXISTS = 57471
const JSON_SCALAR = 57472
const FORMAT = 57473
const JSON = 57474
const UTF8 = 57475
const WITHOUT = 57476
const BIT = 57477
const NUMERIC = 57478
const INTEGER = 57479
const SMALLINT = 57480
const BIGINT = 57481
const REAL = 57482
const FLOAT_P = 57483
const DOUBLE_P = 57484
const PRECISION = 57485
const CHARACTER = 57486
const CHAR_P = 57487
const VARCHAR = 57488
const NATIONAL = 57489
const NCHAR = 57490
const VARYING = 57491
const TIMESTAMP = 57492
const INTERVAL = 57493
const INT_P = 57494
const DECIMAL_P = 57495
const DEC = 57496
const BOOLEAN_P = 57497
const VARIADIC = 57498
const FORMAT_LA = 57499
const NOT_LA = 57500
const NULLS_LA = 57501
const WITH_LA = 57502
const WITHOUT_LA = 57503
const MODE_TYPE_NAME = 57504
const MODE_PLPGSQL_EXPR = 57505
const MODE_PLPGSQL_ASSIGN1 = 57506
const MODE_PLPGSQL_ASSIGN2 = 57507
const MODE_PLPGSQL_ASSIGN3 = 57508
const UNION = 57509
const EXCEPT = 57510
const INTERSECT = 57511
const UMINUS = 57512

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"ORDER_P",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"LATERAL",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"SET",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"'|'",
	"'#'",
	"'&'",
	"';'",
	"','",
	"'.'",
	"'('",
	"')'",
	"'['",
	"']'",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:2679

// Helper functions for converting between grammar types and AST types

// convertToResTargetList converts a slice of ast.Node to []*ast.ResTarget
func convertToResTargetList(nodes []ast.Node) []*ast.ResTarget {
	if nodes == nil {
		return nil
	}
	targets := make([]*ast.ResTarget, len(nodes))
	for i, node := range nodes {
		if target, ok := node.(*ast.ResTarget); ok {
			targets[i] = target
		}
	}
	return targets
}

// convertToIntoClause converts an ast.Node to *ast.IntoClause
func convertToIntoClause(node ast.Node) *ast.IntoClause {
	if node == nil {
		return nil
	}
	if intoClause, ok := node.(*ast.IntoClause); ok {
		return intoClause
	}
	return nil
}

// convertToStringList converts an ast.Node to []*ast.String
func convertToStringList(node ast.Node) []*ast.String {
	if node == nil {
		return nil
	}
	if nodeList, ok := node.(*ast.NodeList); ok {
		strings := make([]*ast.String, len(nodeList.Items))
		for i, item := range nodeList.Items {
			if str, ok := item.(*ast.String); ok {
				strings[i] = str
			}
		}
		return strings
	}
	return nil
}

// convertToNodeList converts an ast.Node to []ast.Node
func convertToNodeList(node ast.Node) []ast.Node {
	if node == nil {
		return nil
	}
	if nodeList, ok := node.(*ast.NodeList); ok {
		return nodeList.Items
	}
	// If it's a single node, wrap it in a slice
	return []ast.Node{node}
}

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 107,
	16, 216,
	17, 216,
	186, 216,
	-2, 181,
	-1, 185,
	186, 196,
	-2, 182,
	-1, 191,
	185, 187,
	186, 187,
	188, 187,
	-2, 42,
	-1, 247,
	18, 0,
	19, 0,
	20, 0,
	170, 0,
	171, 0,
	172, 0,
	-2, 113,
	-1, 248,
	18, 0,
	19, 0,
	20, 0,
	170, 0,
	171, 0,
	172, 0,
	-2, 114,
	-1, 249,
	18, 0,
	19, 0,
	20, 0,
	170, 0,
	171, 0,
	172, 0,
	-2, 115,
	-1, 250,
	18, 0,
	19, 0,
	20, 0,
	170, 0,
	171, 0,
	172, 0,
	-2, 116,
	-1, 251,
	18, 0,
	19, 0,
	20, 0,
	170, 0,
	171, 0,
	172, 0,
	-2, 117,
	-1, 252,
	18, 0,
	19, 0,
	20, 0,
	170, 0,
	171, 0,
	172, 0,
	-2, 118,
	-1, 257,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	158, 0,
	-2, 126,
	-1, 263,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	158, 0,
	-2, 130,
	-1, 305,
	186, 195,
	-2, 220,
	-1, 334,
	186, 216,
	-2, 41,
	-1, 362,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	158, 0,
	-2, 128,
	-1, 363,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	158, 0,
	-2, 132,
	-1, 378,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	158, 0,
	-2, 145,
	-1, 428,
	186, 196,
	-2, 43,
	-1, 443,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	158, 0,
	-2, 127,
	-1, 448,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	158, 0,
	-2, 147,
	-1, 449,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	158, 0,
	-2, 131,
	-1, 451,
	185, 31,
	-2, 28,
	-1, 452,
	185, 32,
	-2, 29,
	-1, 453,
	185, 33,
	-2, 30,
	-1, 520,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	158, 0,
	-2, 129,
	-1, 521,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	158, 0,
	-2, 133,
	-1, 525,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	158, 0,
	-2, 139,
	-1, 533,
	18, 0,
	19, 0,
	20, 0,
	170, 0,
	171, 0,
	172, 0,
	-2, 159,
	-1, 534,
	18, 0,
	19, 0,
	20, 0,
	170, 0,
	171, 0,
	172, 0,
	-2, 160,
	-1, 535,
	18, 0,
	19, 0,
	20, 0,
	170, 0,
	171, 0,
	172, 0,
	-2, 161,
	-1, 536,
	18, 0,
	19, 0,
	20, 0,
	170, 0,
	171, 0,
	172, 0,
	-2, 162,
	-1, 537,
	18, 0,
	19, 0,
	20, 0,
	170, 0,
	171, 0,
	172, 0,
	-2, 163,
	-1, 538,
	18, 0,
	19, 0,
	20, 0,
	170, 0,
	171, 0,
	172, 0,
	-2, 164,
	-1, 539,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	158, 0,
	-2, 141,
	-1, 540,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	158, 0,
	-2, 146,
	-1, 569,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	158, 0,
	-2, 140,
	-1, 570,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	158, 0,
	-2, 142,
	-1, 571,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	158, 0,
	-2, 148,
	-1, 689,
	7, 468,
	-2, 97,
}

const yyPrivate = 57344

const yyLast = 5055

var yyAct = [...]int16{
	107, 707, 708, 754, 740, 686, 730, 719, 564, 101,
	605, 121, 687, 29, 661, 84, 84, 264, 559, 33,
	83, 651, 433, 620, 606, 208, 626, 330, 587, 557,
	548, 29, 423, 590, 408, 347, 200, 383, 136, 127,
	114, 120, 432, 662, 6, 400, 302, 493, 321, 5,
	411, 278, 195, 352, 108, 19, 126, 318, 325, 323,
	7, 182, 329, 328, 272, 327, 337, 298, 309, 186,
	20, 484, 128, 269, 204, 125, 725, 7, 128, 336,
	700, 595, 84, 783, 105, 700, 629, 141, 773, 706,
	545, 700, 647, 14, 699, 646, 629, 456, 544, 628,
	543, 466, 467, 468, 315, 173, 615, 624, 613, 542,
	165, 614, 162, 172, 519, 517, 169, 161, 166, 159,
	11, 167, 315, 514, 12, 601, 191, 582, 163, 315,
	581, 29, 580, 84, 202, 106, 84, 568, 202, 513,
	29, 512, 233, 504, 202, 16, 116, 472, 202, 348,
	349, 391, 348, 349, 315, 202, 201, 316, 311, 32,
	475, 32, 32, 265, 185, 202, 193, 380, 203, 310,
	197, 429, 338, 339, 338, 350, 774, 32, 346, 751,
	173, 89, 88, 215, 677, 280, 604, 295, 172, 576,
	561, 275, 456, 553, 506, 498, 466, 467, 468, 439,
	427, 426, 394, 273, 354, 338, 334, 341, 523, 190,
	188, 184, 135, 131, 86, 429, 683, 15, 682, 381,
	641, 369, 276, 678, 634, 193, 562, 480, 32, 307,
	305, 160, 398, 384, 132, 140, 79, 17, 456, 124,
	171, 348, 349, 10, 424, 353, 335, 142, 143, 144,
	145, 146, 147, 463, 464, 465, 342, 457, 458, 459,
	460, 461, 462, 92, 306, 456, 721, 82, 351, 594,
	105, 611, 32, 141, 357, 358, 732, 32, 619, 32,
	782, 781, 32, 778, 138, 757, 32, 777, 612, 746,
	355, 356, 742, 741, 359, 745, 747, 748, 162, 756,
	771, 762, 770, 343, 344, 345, 640, 763, 640, 32,
	640, 760, 377, 744, 163, 171, 84, 761, 759, 743,
	758, 106, 785, 410, 410, 416, 366, 334, 410, 410,
	410, 32, 370, 32, 364, 728, 396, 722, 739, 379,
	729, 305, 305, 305, 560, 637, 385, 722, 463, 464,
	465, 173, 457, 458, 459, 460, 461, 462, 776, 172,
	775, 27, 392, 704, 390, 335, 718, 335, 386, 387,
	450, 19, 657, 407, 731, 419, 505, 431, 420, 421,
	422, 173, 280, 737, 412, 418, 417, 415, 414, 453,
	413, 428, 129, 766, 565, 685, 434, 659, 585, 334,
	198, 435, 334, 462, 207, 438, 456, 189, 623, 440,
	497, 441, 442, 410, 410, 410, 410, 430, 410, 276,
	622, 599, 598, 478, 479, 481, 305, 459, 460, 461,
	462, 477, 597, 474, 574, 144, 145, 146, 147, 335,
	314, 173, 335, 395, 486, 738, 494, 487, 491, 172,
	490, 551, 495, 496, 7, 736, 11, 233, 489, 488,
	12, 652, 32, 499, 500, 501, 502, 80, 193, 32,
	32, 509, 511, 503, 32, 32, 32, 680, 518, 784,
	769, 16, 526, 85, 643, 768, 171, 767, 654, 334,
	334, 139, 196, 334, 726, 313, 123, 653, 215, 84,
	681, 206, 642, 319, 655, 410, 609, 416, 401, 406,
	404, 405, 403, 425, 399, 402, 452, 205, 305, 201,
	367, 274, 305, 541, 266, 591, 267, 477, 32, 335,
	335, 365, 271, 335, 558, 554, 516, 546, 547, 555,
	515, 552, 371, 193, 437, 105, 436, 335, 141, 133,
	566, 674, 334, 567, 84, 360, 32, 656, 705, 32,
	32, 32, 32, 670, 32, 679, 457, 458, 459, 460,
	461, 462, 95, 162, 201, 256, 171, 84, 575, 572,
	270, 271, 23, 416, 90, 645, 607, 584, 199, 163,
	579, 255, 335, 388, 389, 456, 106, 201, 621, 3,
	578, 117, 25, 322, 735, 627, 105, 122, 233, 141,
	558, 8, 603, 600, 602, 608, 26, 87, 99, 638,
	84, 18, 723, 335, 703, 563, 710, 173, 233, 636,
	607, 660, 617, 630, 162, 172, 589, 524, 635, 632,
	639, 663, 664, 621, 621, 32, 667, 633, 627, 215,
	163, 32, 669, 648, 649, 650, 583, 106, 456, 556,
	625, 13, 466, 467, 468, 596, 665, 666, 573, 215,
	312, 265, 671, 9, 668, 22, 105, 676, 688, 141,
	24, 21, 695, 696, 697, 644, 607, 28, 684, 233,
	692, 173, 320, 690, 91, 485, 698, 282, 279, 172,
	32, 688, 691, 382, 162, 492, 406, 404, 405, 403,
	296, 720, 164, 717, 702, 724, 187, 340, 109, 118,
	163, 228, 227, 32, 117, 230, 260, 106, 733, 734,
	215, 229, 32, 259, 261, 258, 750, 262, 84, 753,
	749, 304, 235, 755, 32, 214, 213, 212, 211, 210,
	209, 32, 688, 110, 764, 694, 164, 765, 752, 113,
	119, 693, 171, 104, 100, 32, 32, 755, 772, 142,
	143, 144, 145, 146, 147, 688, 32, 134, 780, 174,
	779, 4, 2, 1, 0, 0, 0, 32, 32, 32,
	32, 0, 32, 0, 32, 372, 376, 164, 164, 164,
	164, 0, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 303, 164, 463, 464, 465, 32, 457, 458,
	459, 460, 461, 462, 32, 0, 171, 0, 32, 32,
	32, 0, 32, 0, 93, 93, 0, 0, 0, 0,
	0, 0, 373, 373, 147, 709, 0, 32, 714, 0,
	0, 0, 712, 0, 713, 715, 0, 0, 0, 0,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 0, 0, 164, 0, 0, 0,
	0, 0, 164, 0, 32, 32, 0, 164, 456, 0,
	446, 447, 466, 467, 468, 0, 0, 0, 32, 137,
	469, 470, 0, 0, 522, 0, 0, 0, 0, 178,
	179, 180, 181, 711, 0, 716, 183, 0, 0, 0,
	0, 32, 164, 550, 401, 406, 404, 405, 403, 0,
	399, 402, 549, 0, 0, 0, 164, 373, 373, 0,
	0, 194, 0, 0, 137, 0, 0, 373, 373, 0,
	0, 0, 0, 93, 0, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 0,
	0, 0, 257, 0, 263, 0, 0, 268, 0, 0,
	0, 164, 164, 527, 528, 529, 530, 531, 532, 533,
	534, 535, 536, 537, 538, 0, 0, 164, 0, 507,
	0, 0, 0, 137, 0, 0, 0, 0, 0, 0,
	0, 0, 164, 0, 0, 317, 164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 0, 0, 463, 464, 465, 0, 457, 458,
	459, 460, 461, 462, 0, 0, 105, 0, 0, 141,
	0, 0, 164, 151, 152, 153, 0, 164, 164, 0,
	0, 362, 363, 164, 0, 154, 0, 0, 155, 0,
	0, 0, 165, 0, 162, 0, 137, 378, 0, 161,
	166, 159, 0, 167, 0, 0, 0, 156, 157, 158,
	163, 164, 164, 0, 0, 0, 0, 106, 0, 456,
	0, 0, 0, 466, 467, 468, 0, 0, 616, 0,
	0, 0, 393, 0, 0, 471, 0, 0, 0, 164,
	0, 456, 397, 586, 373, 466, 467, 468, 0, 164,
	164, 0, 0, 0, 164, 0, 0, 455, 0, 0,
	0, 137, 0, 0, 0, 0, 0, 0, 164, 164,
	610, 0, 0, 0, 0, 373, 0, 0, 0, 0,
	0, 0, 0, 0, 443, 0, 0, 0, 672, 673,
	448, 449, 675, 0, 454, 0, 373, 0, 164, 164,
	164, 0, 0, 0, 0, 0, 164, 0, 0, 0,
	0, 482, 483, 160, 0, 105, 0, 658, 141, 0,
	0, 0, 164, 0, 0, 148, 149, 150, 0, 142,
	143, 144, 145, 146, 147, 373, 373, 0, 0, 373,
	0, 0, 0, 162, 308, 0, 473, 0, 0, 0,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 163,
	0, 0, 137, 0, 0, 0, 106, 520, 521, 0,
	0, 0, 0, 0, 0, 463, 464, 465, 525, 457,
	458, 459, 460, 461, 462, 0, 105, 0, 0, 141,
	0, 0, 0, 0, 539, 0, 540, 463, 464, 465,
	0, 457, 458, 459, 460, 461, 462, 0, 0, 170,
	0, 0, 0, 0, 162, 0, 105, 445, 0, 141,
	0, 0, 0, 151, 152, 153, 34, 177, 168, 0,
	163, 175, 176, 0, 0, 154, 0, 106, 155, 0,
	0, 0, 165, 0, 162, 569, 570, 571, 45, 161,
	166, 159, 0, 167, 44, 0, 164, 156, 157, 158,
	163, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 577, 0, 0, 43, 0, 142, 143,
	144, 145, 146, 147, 0, 593, 0, 0, 0, 0,
	36, 35, 0, 0, 37, 38, 39, 40, 41, 42,
	72, 73, 74, 75, 76, 46, 77, 0, 78, 0,
	0, 0, 48, 0, 49, 0, 0, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 47, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	143, 144, 145, 146, 147, 0, 0, 0, 0, 0,
	510, 0, 0, 160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 149, 150, 0, 142,
	143, 144, 145, 146, 147, 115, 0, 109, 118, 0,
	0, 0, 105, 117, 102, 0, 0, 0, 0, 0,
	0, 510, 300, 0, 0, 0, 105, 0, 0, 141,
	0, 0, 98, 0, 105, 0, 0, 141, 0, 0,
	0, 0, 301, 0, 112, 0, 0, 0, 113, 0,
	111, 0, 727, 0, 162, 0, 0, 444, 0, 0,
	0, 0, 162, 106, 0, 368, 0, 0, 0, 0,
	163, 0, 43, 0, 0, 0, 0, 106, 163, 0,
	0, 0, 0, 0, 0, 106, 36, 35, 0, 0,
	37, 38, 39, 40, 41, 42, 72, 73, 74, 75,
	76, 46, 77, 0, 78, 0, 0, 0, 48, 0,
	49, 0, 0, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 47, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 0, 0, 115, 0,
	109, 118, 0, 0, 0, 105, 117, 102, 0, 0,
	0, 0, 0, 0, 0, 34, 0, 299, 0, 0,
	0, 0, 0, 0, 0, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 97, 112, 0, 0,
	0, 113, 0, 111, 0, 0, 0, 103, 297, 142,
	143, 144, 145, 146, 147, 0, 106, 142, 143, 144,
	145, 146, 147, 0, 0, 43, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 36,
	35, 0, 0, 37, 38, 39, 40, 41, 42, 72,
	73, 74, 75, 76, 46, 77, 0, 78, 0, 0,
	0, 48, 0, 49, 0, 0, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 47, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 0,
	0, 115, 0, 109, 118, 0, 0, 0, 105, 117,
	102, 0, 0, 0, 0, 0, 0, 0, 34, 0,
	476, 105, 0, 0, 141, 0, 0, 0, 98, 0,
	0, 0, 0, 105, 0, 0, 141, 0, 96, 97,
	112, 0, 0, 0, 113, 0, 111, 0, 0, 162,
	103, 0, 361, 0, 0, 0, 0, 0, 0, 106,
	0, 162, 0, 0, 0, 163, 0, 0, 43, 0,
	0, 0, 106, 0, 0, 0, 0, 163, 0, 0,
	0, 0, 36, 35, 106, 0, 37, 38, 39, 40,
	41, 42, 72, 73, 74, 75, 76, 46, 77, 0,
	78, 0, 0, 0, 48, 0, 49, 0, 0, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 47, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 0, 0, 0, 115, 0, 109, 118, 0,
	0, 0, 105, 117, 102, 0, 0, 0, 0, 0,
	0, 0, 34, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 97, 94, 112, 0, 0, 0, 113, 0,
	111, 0, 0, 103, 142, 143, 144, 145, 146, 147,
	0, 0, 0, 106, 0, 0, 142, 143, 144, 145,
	146, 147, 43, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 36, 35, 0, 0,
	37, 38, 39, 40, 41, 42, 72, 73, 74, 75,
	76, 46, 77, 0, 78, 0, 0, 0, 48, 0,
	49, 0, 0, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 47, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 0, 0, 115, 0,
	109, 118, 0, 0, 0, 0, 117, 102, 0, 0,
	0, 0, 0, 0, 0, 34, 0, 0, 105, 0,
	0, 141, 0, 0, 0, 151, 152, 153, 0, 0,
	0, 0, 0, 0, 592, 96, 97, 112, 0, 0,
	0, 113, 0, 111, 165, 0, 162, 103, 0, 0,
	0, 161, 166, 159, 0, 167, 0, 0, 0, 156,
	157, 158, 163, 0, 0, 43, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 36,
	35, 0, 0, 37, 38, 39, 40, 41, 42, 72,
	73, 74, 75, 76, 46, 77, 0, 78, 0, 0,
	0, 48, 0, 49, 0, 0, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 47, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 0,
	0, 115, 0, 109, 118, 0, 0, 0, 0, 117,
	102, 0, 0, 0, 0, 0, 0, 0, 34, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 160, 0, 0, 374, 375,
	112, 0, 0, 0, 113, 0, 111, 148, 149, 150,
	103, 142, 143, 144, 145, 146, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 43, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 36, 35, 0, 0, 37, 38, 39, 40,
	41, 42, 72, 73, 74, 75, 76, 46, 77, 0,
	78, 0, 0, 0, 48, 0, 49, 0, 0, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 47, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 0, 0, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 34, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 14, 0, 0, 0,
	0, 374, 375, 45, 0, 0, 0, 0, 0, 44,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 11, 0, 0, 30, 12, 0, 0,
	0, 43, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 36, 35, 324, 16, 37,
	38, 39, 40, 41, 42, 72, 73, 332, 333, 331,
	46, 77, 0, 78, 0, 0, 0, 48, 0, 49,
	0, 0, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 47, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 115, 0, 109, 118, 0,
	0, 0, 0, 117, 102, 0, 0, 0, 0, 0,
	0, 0, 34, 0, 0, 0, 0, 0, 0, 0,
	15, 0, 0, 105, 0, 0, 141, 0, 0, 0,
	151, 152, 153, 0, 112, 0, 0, 0, 113, 0,
	111, 0, 154, 0, 0, 155, 326, 0, 0, 165,
	0, 162, 0, 0, 0, 0, 161, 166, 159, 0,
	167, 0, 43, 0, 156, 157, 158, 163, 0, 0,
	0, 0, 0, 0, 106, 0, 36, 35, 0, 0,
	37, 38, 39, 40, 41, 42, 72, 73, 74, 75,
	76, 46, 77, 0, 78, 0, 508, 0, 48, 0,
	49, 0, 0, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 47, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 115, 0, 109, 118,
	0, 0, 0, 0, 117, 102, 0, 0, 0, 0,
	0, 0, 0, 34, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 0, 0, 0, 113,
	160, 111, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 148, 149, 150, 0, 142, 143, 144, 145,
	146, 147, 0, 43, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 36, 35, 0,
	0, 37, 38, 39, 40, 41, 42, 72, 73, 74,
	75, 76, 46, 77, 0, 78, 0, 0, 0, 48,
	0, 49, 0, 0, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 47, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 115, 0, 109,
	118, 0, 0, 0, 0, 117, 102, 0, 0, 0,
	0, 0, 0, 0, 34, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 141, 0,
	0, 0, 151, 152, 153, 0, 112, 618, 0, 0,
	113, 0, 111, 0, 154, 0, 0, 155, 103, 0,
	0, 165, 0, 162, 0, 0, 0, 0, 161, 166,
	159, 0, 167, 0, 588, 0, 156, 157, 158, 163,
	0, 0, 0, 0, 0, 0, 106, 0, 36, 35,
	0, 0, 37, 38, 39, 40, 41, 42, 72, 73,
	74, 75, 76, 46, 77, 0, 78, 0, 0, 0,
	48, 0, 49, 0, 0, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 47, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 31, 0,
	0, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 34, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 45, 0, 0,
	0, 0, 160, 44, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 148, 149, 150, 0, 142, 143,
	144, 145, 146, 147, 0, 43, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 36,
	35, 0, 0, 37, 38, 39, 40, 41, 42, 72,
	73, 74, 75, 76, 46, 77, 0, 78, 0, 0,
	0, 48, 0, 49, 0, 0, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 47, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 0,
	0, 0, 0, 0, 0, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 34, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 290, 291, 0, 283, 284,
	285, 286, 287, 288, 45, 0, 0, 0, 0, 0,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 30, 0, 0,
	0, 0, 43, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 36, 35, 324, 0,
	37, 38, 39, 40, 41, 42, 72, 73, 332, 333,
	331, 46, 77, 0, 78, 0, 0, 0, 48, 0,
	49, 0, 0, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 47, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 31, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 34, 0, 409, 0, 105, 0, 0,
	141, 0, 0, 0, 151, 152, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 45, 154, 0, 0, 155,
	0, 44, 0, 165, 0, 162, 0, 326, 0, 0,
	161, 166, 159, 0, 167, 0, 0, 0, 156, 157,
	158, 163, 0, 43, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 36, 35, 0,
	0, 37, 38, 39, 40, 41, 42, 72, 73, 74,
	75, 76, 46, 77, 0, 78, 0, 0, 0, 48,
	0, 49, 0, 0, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 47, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 34, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 565, 160, 0, 45, 0, 0, 0,
	0, 0, 44, 0, 0, 0, 148, 149, 150, 89,
	142, 143, 144, 145, 146, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 43, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 36, 35,
	0, 0, 37, 38, 39, 40, 41, 42, 72, 73,
	332, 333, 331, 46, 77, 0, 78, 0, 0, 0,
	48, 0, 49, 0, 0, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 47, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 31, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 34, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 141, 0,
	0, 0, 151, 152, 153, 0, 0, 45, 0, 0,
	0, 0, 0, 44, 154, 0, 0, 155, 0, 10,
	0, 165, 0, 162, 0, 0, 0, 0, 161, 166,
	159, 0, 167, 0, 0, 43, 156, 157, 158, 163,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 36,
	35, 0, 0, 37, 38, 39, 40, 41, 42, 72,
	73, 74, 75, 76, 46, 77, 0, 78, 0, 0,
	0, 48, 0, 49, 0, 0, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 47, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 31,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 34, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 45, 0,
	0, 0, 160, 0, 44, 0, 0, 0, 0, 0,
	130, 0, 0, 0, 148, 149, 150, 0, 142, 143,
	144, 145, 146, 147, 0, 0, 43, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	36, 35, 0, 0, 37, 38, 39, 40, 41, 42,
	72, 73, 74, 75, 76, 46, 77, 0, 78, 0,
	0, 0, 48, 0, 49, 0, 0, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 47, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 34, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 141, 0, 0, 0, 151, 152, 153, 45,
	0, 192, 0, 0, 0, 44, 0, 0, 154, 0,
	0, 0, 232, 0, 0, 165, 0, 162, 0, 0,
	0, 0, 161, 166, 159, 0, 167, 43, 0, 0,
	156, 157, 158, 163, 0, 0, 0, 0, 0, 0,
	106, 36, 35, 0, 0, 37, 38, 39, 40, 41,
	42, 72, 73, 74, 75, 76, 46, 77, 701, 78,
	0, 0, 0, 48, 0, 49, 0, 0, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 47, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 234, 225, 217, 218, 219, 220, 221, 222, 115,
	236, 237, 238, 239, 240, 0, 231, 0, 216, 223,
	224, 226, 0, 0, 0, 0, 34, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 160, 0, 45, 0,
	0, 0, 0, 0, 44, 0, 0, 0, 148, 149,
	150, 232, 142, 143, 144, 145, 146, 147, 0, 0,
	0, 0, 0, 0, 0, 0, 43, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	36, 35, 0, 0, 37, 38, 39, 40, 41, 42,
	72, 73, 74, 75, 76, 46, 77, 631, 78, 0,
	0, 0, 48, 0, 49, 0, 0, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 47, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	234, 225, 217, 218, 219, 220, 221, 222, 115, 236,
	237, 238, 239, 240, 0, 231, 0, 216, 223, 224,
	226, 0, 0, 0, 0, 34, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 45, 0, 0,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 43, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 36,
	35, 0, 0, 37, 38, 39, 40, 41, 42, 72,
	73, 74, 75, 76, 46, 77, 0, 78, 0, 0,
	0, 48, 0, 49, 0, 0, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 47, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 234,
	225, 217, 218, 219, 220, 221, 222, 170, 236, 237,
	238, 239, 240, 0, 231, 0, 216, 223, 224, 226,
	0, 0, 0, 0, 34, 177, 0, 0, 0, 175,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 45, 0, 0, 0,
	0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 43, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 36, 35,
	0, 0, 37, 38, 39, 40, 41, 42, 72, 73,
	74, 75, 76, 46, 77, 0, 78, 0, 0, 0,
	48, 0, 49, 0, 0, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 47, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 34, 177, 0, 0, 0,
	175, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 45, 0, 0,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 43, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 36,
	35, 0, 0, 37, 38, 39, 40, 41, 42, 72,
	73, 74, 75, 76, 46, 77, 0, 78, 0, 0,
	0, 48, 0, 49, 0, 0, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 47, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 31,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 34, 0, 409, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 45, 0,
	0, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 43, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	36, 35, 0, 0, 37, 38, 39, 40, 41, 42,
	72, 73, 74, 75, 76, 46, 77, 0, 78, 0,
	0, 0, 48, 0, 49, 0, 0, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 47, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	31, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 34, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 45,
	0, 0, 0, 0, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 30, 0, 0, 0, 0, 43, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 36, 35, 0, 0, 37, 38, 39, 40, 41,
	42, 72, 73, 74, 75, 76, 46, 77, 0, 78,
	0, 0, 0, 48, 0, 49, 0, 0, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 47, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 31, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 34, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	45, 0, 0, 0, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 43, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 36, 35, 0, 0, 37, 38, 39, 40,
	41, 42, 72, 73, 74, 75, 76, 46, 77, 0,
	689, 0, 0, 0, 48, 0, 49, 0, 0, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 47, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 31, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 34,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 45, 0, 0, 0, 0, 0, 44, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 43,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 36, 35, 0, 0, 37, 38, 39,
	40, 41, 42, 72, 73, 74, 75, 76, 46, 77,
	0, 78, 0, 0, 0, 48, 0, 49, 0, 0,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 47,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	34, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 45, 0, 0, 0, 0, 0, 44, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	43, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 36, 35, 0, 0, 37, 38,
	39, 40, 41, 42, 72, 73, 74, 75, 76, 46,
	77, 0, 78, 0, 0, 0, 48, 0, 49, 0,
	0, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	47, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 31, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 34, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 45, 0, 0, 0, 0, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 43, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 35, 0, 0, 37,
	38, 39, 40, 41, 42, 72, 73, 74, 75, 76,
	46, 77, 0, 78, 0, 0, 0, 48, 0, 49,
	0, 0, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 47, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71,
}

var yyPact = [...]int16{
	57, -1000, 54, -1000, -1000, -1000, -1000, -1000, -1000, 393,
	57, 561, 4396, 52, 4920, 4658, 28, 57, -1000, -5,
	-6, 1737, 1737, -1000, -1000, 421, -1000, 63, -1000, -110,
	3324, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 27,
	50, 4658, -1000, 26, -1000, 50, 1871, -1000, -1000, -1000,
	417, 51, -1000, 1295, -1000, -1000, 1871, 1871, 1871, 1871,
	-1000, -1000, -1000, 1871, -1000, -1000, 25, -116, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 24,
	-1000, -1000, 417, 23, -1000, 3455, -116, -1000, 1871, -1000,
	4658, 1871, 4658, 50, 565, 4658, -19, 3344, 453, 4658,
	1737, 3864, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
	1871, 1871, 1871, 1871, 1871, 1871, 544, -1000, -1000, 1871,
	689, 1871, 4658, 468, 1871, 521, 17, 460, 4003, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1762, 1762,
	2017, 3344, -116, 2422, 2794, -116, 3455, -1000, 1471, 453,
	1871, -1000, -1000, -1000, 1045, -122, -18, -29, -1000, 409,
	-30, -1000, 1871, -1000, 438, 2931, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -12, -1000, -1000, -1000, -1000,
	-1000, 21, 113, 19, 19, 19, -1000, -1000, -1000, -1000,
	-1000, -8, -11, -1000, 96, 18, 96, 96, -1000, 130,
	96, 259, 259, 665, 665, 665, 534, 73, 73, 73,
	73, 73, 73, 2017, 3608, -1000, 508, 1750, 1871, 1871,
	472, 17, 459, 1493, -1000, 36, 485, -1000, 3344, 2137,
	2137, -1000, -1000, 1871, 1871, -1000, -1000, -1000, -20, -1000,
	34, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 49, 1871,
	1871, 1871, -1000, 3344, 577, -1000, 438, -36, -1000, 1871,
	-1000, -1000, 16, -1000, 357, 4658, -1000, 3344, -1000, 1871,
	48, 432, 4265, 4265, 3193, -1000, 2270, 4265, 4265, 4265,
	84, 449, 15, 14, -110, -1000, -1000, -14, 1871, 4003,
	-1000, 589, -1000, -1000, -1000, -1000, 589, -1000, 490, 488,
	589, -1000, 13, -1000, 589, -1000, -1000, 96, 96, -1000,
	-1000, 1871, 1485, 1265, 2137, 2137, -1000, 1871, 1871, 4134,
	30, 1871, 1117, -1000, 2137, 2137, 1095, -40, 1194, -116,
	-1000, 2794, -1000, -27, 1604, -1000, 43, 43, 1871, 1871,
	-1000, -1000, -118, 3344, 57, -1000, -1000, 3344, 2931, 383,
	382, 2931, 629, 365, 365, 365, -1000, -1000, -1000, 4658,
	9, -1000, 4265, 4265, 4265, 4265, -116, 3062, -44, 432,
	-1000, -1000, -1000, -1000, 280, 8, 2401, 1871, -116, 4003,
	-1000, -46, -1000, -1000, -48, -64, 483, 479, -72, 1871,
	-73, -1000, -1000, 1762, 1871, 1871, 874, 178, 595, 1762,
	-1000, -1000, -1000, -1000, 3344, 1871, 3864, 2137, 2137, 2137,
	2137, 2137, 2137, 2137, 2137, 2137, 2137, 2137, 2137, 392,
	392, 1871, -1000, 1871, -1000, -1000, 1871, -1000, -78, -87,
	1871, -89, 3344, 3344, -1000, -97, -1000, 432, 2931, 2931,
	848, 375, 2931, -1000, -1000, -1000, -1000, 7, 4658, -1000,
	-1000, -1000, -1000, -116, 4265, -1000, 4789, 243, 4, 42,
	3076, -1000, -1000, -1000, 81, -1000, -1000, 81, -50, -1000,
	1762, 1762, 1871, 1871, 1871, 1762, -1000, 251, 251, 224,
	224, 224, 581, 392, 392, 392, 392, 392, 392, 1762,
	1762, -1000, -1000, -1000, -1000, 345, 432, 848, -1000, 3,
	1871, 2931, 432, 4658, -55, -1000, -57, -1000, 564, 303,
	2663, 2004, 1871, -1000, -1000, 137, -1000, -1000, -1000, 1762,
	1762, 1762, -106, 340, 331, -1000, 4658, 3344, 432, -62,
	-1000, 84, 4789, -1000, 0, 4658, 435, 2532, 167, -76,
	-1000, 83, 2137, 2684, 158, -1000, -1000, 4658, 327, 315,
	-80, -1000, -1000, -1000, 4658, -88, -1000, 3725, -1000, 167,
	435, -1000, -1000, 2004, 40, 4003, 644, 244, 4658, 4658,
	126, -1000, 431, 413, 562, -92, -1000, 3864, -1000, 4658,
	457, 276, -1000, -1000, 2532, -1000, 302, 1871, -1000, -1000,
	4658, 4658, 4658, 4658, -1000, 4658, -1000, 4658, 524, -1000,
	457, -1000, 2137, 2137, 504, -1000, 2137, -1000, 243, -2,
	39, -1000, 542, -1000, 416, 124, 122, -1000, -1000, -1000,
	4658, -1000, 644, 644, -1000, 644, 300, 4527, 1871, 4003,
	712, 4658, 4658, 4658, -1000, 4658, -93, -1000, 3586, 263,
	-1000, -1000, 518, -1000, -1000, -1000, -1000, -1000, -98, 805,
	4527, 270, 237, 615, -1000, 712, -1000, -111, 419, 1871,
	-1000, -1000, -1000, -1000, -1000, -1000, 229, -1000, -1000, 240,
	247, 247, 597, 360, 361, -1000, 230, 3344, -1000, -1000,
	176, 207, 183, 240, 805, -1000, -7, 4658, 4658, -1000,
	805, 184, 170, -1000, 208, -1000, 206, 205, 195, 176,
	-1000, 4527, 298, -1000, -1000, 412, 410, 405, -1000, -1000,
	190, -1000, 188, -1000, 805, -99, -10, 250, 169, 165,
	-1000, -1000, -1000, -1000, 4527, 805, -1000, 162, 161, -104,
	404, -1000, -1000, -1000, 214, -1000,
}

var yyPgo = [...]int16{
	0, 783, 782, 599, 781, 0, 22, 20, 36, 23,
	361, 17, 781, 781, 781, 146, 19, 11, 779, 779,
	777, 777, 777, 777, 777, 777, 777, 777, 812, 525,
	572, 9, 764, 763, 760, 67, 46, 56, 61, 39,
	52, 54, 760, 753, 25, 750, 749, 748, 747, 746,
	745, 41, 742, 42, 741, 731, 725, 722, 721, 66,
	79, 35, 53, 717, 38, 37, 40, 716, 710, 703,
	618, 51, 698, 697, 64, 73, 49, 695, 44, 59,
	611, 694, 584, 263, 74, 692, 48, 603, 687, 57,
	687, 34, 50, 685, 681, 680, 675, 284, 58, 45,
	47, 30, 675, 673, 673, 467, 267, 670, 668, 665,
	661, 65, 27, 660, 660, 26, 659, 29, 656, 656,
	656, 656, 32, 63, 10, 24, 655, 21, 652, 18,
	28, 636, 33, 62, 5, 12, 7, 632, 43, 631,
	14, 629, 1, 2, 626, 3, 6, 4, 8, 625,
	624,
}

var yyR1 = [...]uint8{
	0, 1, 2, 2, 3, 4, 4, 14, 14, 19,
	19, 21, 21, 21, 22, 22, 23, 23, 24, 24,
	25, 25, 26, 26, 27, 27, 27, 27, 5, 5,
	5, 6, 6, 6, 6, 6, 7, 8, 8, 9,
	9, 10, 10, 10, 20, 20, 12, 12, 11, 11,
	11, 13, 13, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 16, 17,
	18, 18, 18, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 30, 30, 30, 30, 30,
	31, 31, 31, 31, 31, 31, 41, 43, 42, 42,
	42, 32, 32, 37, 37, 40, 40, 39, 39, 39,
	39, 38, 38, 33, 112, 34, 34, 66, 66, 66,
	66, 66, 66, 35, 35, 36, 36, 36, 64, 64,
	44, 45, 45, 45, 45, 45, 51, 51, 51, 53,
	54, 121, 59, 59, 60, 60, 46, 46, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 48,
	48, 49, 49, 52, 52, 52, 52, 52, 52, 55,
	56, 57, 58, 50, 50, 50, 50, 61, 61, 61,
	62, 62, 63, 63, 70, 70, 72, 72, 73, 73,
	73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
	71, 71, 65, 67, 68, 69, 75, 75, 74, 76,
	76, 77, 79, 79, 78, 78, 80, 80, 80, 80,
	82, 82, 81, 81, 83, 83, 83, 83, 84, 84,
	85, 85, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 87, 87, 88, 88, 88, 98, 98,
	98, 98, 98, 98, 99, 99, 99, 99, 100, 100,
	101, 101, 102, 103, 103, 103, 104, 104, 105, 105,
	106, 107, 107, 107, 108, 108, 108, 109, 109, 109,
	110, 110, 89, 89, 90, 92, 92, 91, 91, 91,
	91, 93, 93, 94, 94, 95, 95, 96, 96, 97,
	97, 111, 111, 122, 122, 116, 116, 117, 118, 118,
	119, 119, 120, 114, 114, 113, 113, 115, 128, 128,
	130, 130, 129, 129, 129, 129, 131, 131, 132, 132,
	123, 123, 124, 124, 125, 125, 125, 126, 126, 127,
	127, 127, 127, 127, 133, 138, 137, 137, 141, 141,
	139, 139, 140, 143, 143, 144, 144, 144, 144, 144,
	144, 144, 144, 145, 145, 145, 145, 142, 142, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 147, 147,
	147, 147, 147, 148, 148, 149, 149, 150, 150, 134,
	134, 135, 135, 135, 135, 135, 135, 136, 136,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 2, 0, 3, 0, 2, 0,
	1, 0, 2, 0, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 3, 2, 3, 0, 1, 3, 1, 3,
	2, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 3, 2, 4, 2, 3, 5, 4, 6,
	3, 5, 4, 6, 3, 5, 3, 3, 2, 6,
	7, 6, 7, 3, 4, 4, 6, 5, 7, 1,
	3, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 0, 2, 2, 3,
	5, 0, 2, 4, 1, 1, 2, 3, 5, 6,
	8, 6, 6, 1, 3, 1, 3, 3, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 3, 3, 0, 2, 3, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 2, 2, 1, 3, 3, 2, 4,
	1, 5, 2, 5, 2, 5, 2, 3, 3, 0,
	1, 0, 3, 0, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 0, 0, 0, 0, 1, 3, 1,
	1, 1, 3, 3, 1, 2, 6, 6, 2, 1,
	1, 0, 1, 3, 3, 2, 1, 1, 2, 0,
	1, 3, 2, 2, 3, 1, 4, 2, 3, 2,
	3, 2, 3, 1, 1, 2, 2, 4, 3, 4,
	5, 4, 5, 4, 2, 2, 2, 1, 1, 0,
	5, 2, 4, 2, 2, 3, 1, 0, 1, 3,
	9, 1, 2, 0, 7, 7, 0, 10, 6, 0,
	4, 5, 2, 0, 1, 1, 0, 5, 2, 4,
	1, 2, 0, 1, 0, 1, 5, 1, 0, 2,
	0, 2, 6, 2, 0, 1, 3, 2, 4, 0,
	1, 3, 2, 4, 0, 1, 3, 3, 2, 0,
	2, 2, 2, 3, 3, 4, 1, 3, 3, 2,
	7, 12, 1, 3, 2, 3, 3, 1, 2, 2,
	2, 2, 1, 2, 13, 2, 2, 0, 2, 0,
	1, 3, 3, 2, 1, 1, 1, 1, 1, 1,
	2, 2, 1, 3, 3, 6, 0, 3, 0, 2,
	3, 2, 3, 4, 4, 3, 3, 0, 5, 2,
	5, 2, 0, 4, 2, 1, 0, 1, 0, 1,
	3, 3, 6, 7, 5, 7, 9, 2, 0,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -76, -78, -79, -80, -103,
	186, 63, 67, -110, 36, 160, 88, 183, -80, -78,
	-79, -94, -96, 21, -95, 41, -87, -10, -88, -5,
	66, 4, -15, -16, 21, 86, 85, 89, 90, 91,
	92, 93, 94, 71, 49, 43, 100, 121, 107, 109,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 95, 96, 97, 98, 99, 101, 103, 184,
	-105, 85, -106, -7, -5, -105, 186, -3, 187, 187,
	-82, -81, -83, -28, 176, -30, 174, 175, 31, -70,
	-32, -31, 13, 186, -33, 11, 62, -5, -41, 6,
	-43, 49, 43, 47, -66, 4, -15, 12, 7, -34,
	-51, -17, -82, 75, 176, 185, -37, -39, 188, -10,
	186, 186, 184, -105, -20, 186, -64, -28, -97, 74,
	184, 14, 174, 175, 176, 177, 178, 179, 170, 171,
	172, 18, 19, 20, 30, 33, 52, 53, 54, 46,
	158, 44, 39, 55, -70, 37, 45, 48, 23, -6,
	4, -15, -16, -17, -18, 26, 27, 22, -28, -28,
	-28, -28, -38, -28, 186, -37, 185, -67, 186, -97,
	186, -5, 176, -39, -28, -40, -10, -64, -106, 23,
	-8, -7, 184, 187, -84, 64, -10, -83, -44, -45,
	-46, -47, -48, -49, -50, -51, 152, 137, 138, 139,
	140, 141, 142, 153, 154, 136, 155, -57, -58, -55,
	-56, 150, 56, -5, 135, -52, 144, 145, 146, 147,
	148, -28, -28, -28, -28, -28, -28, -28, -28, -28,
	-28, -28, -28, -28, -28, 47, 31, -28, 46, 44,
	37, 45, 48, -28, -11, -5, 56, 58, -28, -75,
	59, 60, -74, 186, 61, -6, -39, 187, -71, -72,
	-5, 11, -73, 174, 175, 176, 177, 178, 179, 170,
	171, 172, 18, 19, 20, -5, -68, 187, -35, 156,
	21, 41, -36, -28, -54, -51, -84, -64, 189, 190,
	187, 187, -107, 86, 31, 184, 187, -28, -89, 65,
	-85, -86, -87, -79, 87, -98, 186, -111, -123, -133,
	-112, 99, 97, 98, -5, -66, -60, -59, 186, 185,
	-63, 186, 143, -60, -60, -60, 186, -61, 160, 161,
	186, -61, -62, 149, 186, -62, -62, 144, 145, -62,
	47, 42, -28, -28, -75, 59, -74, 61, 42, 185,
	-59, 57, -29, -30, 174, 175, -29, -64, -28, -38,
	187, 185, -69, -65, 184, -36, -35, -35, 16, 17,
	-89, 187, -40, -28, 186, 86, -7, -28, 184, 82,
	-99, 76, 83, 80, 78, 79, 77, -92, -91, 23,
	-5, -92, -79, -111, -123, -133, -5, -79, -98, -86,
	-92, -92, -92, -122, 160, 64, 186, 186, -37, 185,
	-60, -64, -53, -6, -41, -41, 56, 56, -41, 186,
	-41, -62, -62, -28, 42, 42, -29, -29, -28, -28,
	-5, 4, -15, -16, -28, 30, 14, 174, 175, 176,
	177, 178, 179, 170, 171, 172, 18, 19, 20, -29,
	-29, 30, 187, 42, -71, 187, 156, -36, -65, -65,
	184, -65, -28, -28, 189, -77, -76, -86, 76, 76,
	-86, -99, 76, -100, 81, -100, -100, -5, 186, -92,
	-92, -92, -92, -37, 187, 96, 186, -30, 105, -138,
	-28, -53, 187, 187, 187, 57, 57, 187, -64, 187,
	-28, -28, 30, 30, 42, -28, -44, -29, -29, -29,
	-29, -29, -29, -29, -29, -29, -29, -29, -29, -28,
	-28, -36, 187, 187, 187, 187, -86, -86, -101, 84,
	75, 76, -86, 186, -8, -91, -116, -117, -112, -129,
	101, 186, 184, -149, -148, 157, -61, -61, 187, -28,
	-28, -28, -65, -108, 89, -101, 186, -28, -86, -8,
	187, 187, 184, -118, 23, 95, -30, -130, 71, -131,
	-132, -29, 40, -28, 132, 187, -109, 92, 91, 90,
	-8, 187, -122, -117, 186, -124, -125, -5, -130, 71,
	-30, 104, 121, 184, 187, 23, -29, -137, 23, 120,
	-9, -5, 93, 93, 187, -113, -115, -5, 187, 184,
	-44, 102, -130, -132, 184, -6, -141, 101, -5, -7,
	184, 94, 71, 71, -93, 23, 187, 184, -44, -125,
	-126, -127, 4, 40, 31, 47, 100, 96, -30, 95,
	-139, -140, -138, -5, -5, -9, -9, -5, -115, -128,
	39, -127, -29, -29, 47, -29, -129, 186, 184, 23,
	61, 84, 94, 94, -11, 95, -134, -135, -5, 103,
	-140, -6, -31, 49, 43, -5, -5, -5, -124, 187,
	184, 102, -44, -150, 100, 40, 187, -142, -143, 40,
	-144, 108, 47, 49, 43, 50, 110, -135, 96, -136,
	-148, 29, 100, 7, -31, 187, 75, -28, 106, 111,
	-146, 134, 36, -136, -136, 7, 95, 23, 84, 108,
	-147, 117, 116, 112, 106, 112, 106, 113, 114, -146,
	-142, 186, -7, -5, -145, -143, 115, 115, 112, 112,
	106, 112, 106, 112, -147, -134, 95, 75, 75, 75,
	112, 112, -145, 187, 186, 110, 108, 118, 118, -134,
	-143, 119, 119, 187, 75, 108,
}

var yyDef = [...]int16{
	6, -2, 1, 3, 4, 5, 289, 290, 294, 0,
	0, 374, 0, 299, 0, 0, 0, 6, 295, 0,
	0, 301, 301, 373, 377, 375, 298, 323, 324, 41,
	0, 28, 29, 30, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 81, 82, 83, 84, 85, 86, 87, 88,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 0,
	343, 55, 348, 45, 36, 344, 0, 2, 292, 293,
	380, 300, 302, 306, 307, 103, 0, 0, 0, 0,
	165, 166, 191, 0, 169, 264, 0, -2, 170, 171,
	172, 63, 64, 175, 283, 28, 29, 176, 177, 0,
	195, 218, 380, 0, 325, 0, 43, 183, 186, 326,
	0, 0, 0, 345, 0, 0, 0, 208, 309, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 125, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 0, 305,
	31, 32, 33, 34, 35, 100, 101, 102, 104, 105,
	121, 138, 167, 0, 0, -2, 0, 284, 0, 309,
	0, -2, 188, 184, 185, 0, 0, 0, 349, 353,
	0, 37, 0, 360, 363, 0, 379, 303, 106, 210,
	211, 212, 213, 214, 215, 225, 228, 229, 230, 231,
	232, 263, 0, 225, 225, 225, 238, 239, 240, 241,
	242, 259, 259, 216, 261, 250, 261, 261, 245, 0,
	261, 107, 108, 109, 110, 111, 112, -2, -2, -2,
	-2, -2, -2, 119, 120, 122, 0, -2, 0, 0,
	286, 0, 0, -2, 134, 48, 0, 136, 137, 0,
	0, 287, 143, 0, 0, 304, 192, 191, 0, 280,
	0, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 187, 285, 197, 282, 0,
	53, 0, 203, 205, 0, -2, 363, 0, 189, 186,
	327, 361, 0, 351, 0, 0, 44, 209, 296, 0,
	308, 310, 366, 366, 0, 315, 0, 366, 366, 366,
	384, 95, 93, 94, -2, 194, 226, 225, 0, 0,
	233, 0, 234, 235, 236, 237, 0, 254, 0, 0,
	0, 256, 252, 260, 0, 243, 244, 261, 261, 248,
	124, 0, -2, -2, 0, 0, 144, 0, 0, 0,
	50, 0, 0, 149, 0, 0, 0, 0, -2, 168,
	265, 0, 193, 0, 0, 282, 282, 282, 0, 0,
	297, 376, 0, 185, 0, 352, 38, 362, 0, 0,
	0, 0, 0, 339, 339, 339, 337, 312, 365, 0,
	370, 313, 366, 366, 366, 366, 216, 366, 315, 0,
	317, 319, 321, 381, 0, 0, 0, 0, -2, 0,
	227, 0, 222, 219, 0, 0, 0, 0, 0, 0,
	0, 246, 247, -2, 0, 0, 0, 0, -2, -2,
	49, -2, -2, -2, 135, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 151,
	152, 0, 288, 0, 281, 198, 0, 204, 0, 0,
	0, 0, 206, 207, 190, 0, 291, 311, 0, 0,
	0, 0, 0, 334, 338, 335, 336, 368, 0, 314,
	318, 320, 322, 196, 328, 383, 0, 0, 0, 0,
	466, 223, 224, 262, 259, 257, 258, 259, 0, 249,
	-2, -2, 0, 0, 0, -2, 150, 153, 154, 155,
	156, 157, 158, -2, -2, -2, -2, -2, -2, -2,
	-2, 282, 199, 201, 202, 356, 329, 0, 331, 0,
	0, 0, 333, 0, 0, 316, 0, 385, 389, 0,
	0, 0, 0, 425, 465, 0, 253, 255, 251, -2,
	-2, -2, 0, 359, 0, 330, 0, 341, 332, 0,
	369, 384, 0, 387, 0, 0, 402, 0, 62, 0,
	406, 0, 0, 427, 464, 200, 350, 0, 0, 0,
	0, 367, 382, 386, 0, 0, 412, 0, 403, 0,
	404, 400, 401, 0, 0, 0, 409, 429, 0, 0,
	0, 39, 0, 0, 372, 0, 395, 0, 410, 0,
	414, 0, 405, 407, 0, 408, 0, 0, 426, 463,
	0, 0, 0, 0, 340, 0, 388, 0, 399, 413,
	416, 417, 0, 0, 0, 422, 0, 415, 0, 0,
	428, 430, 0, 40, 0, 0, 0, 371, 396, 397,
	0, 418, 419, 420, 421, 423, 0, 0, 0, 0,
	0, 0, 0, 0, 398, 0, 0, 469, 0, -2,
	431, 432, 0, 173, 174, 358, 354, 355, 0, 448,
	0, 0, 478, 0, 467, 0, 411, 0, 0, 0,
	434, 435, 436, 437, 438, 439, 442, 470, 471, 457,
	478, 478, 0, 0, 0, 424, 0, 433, 440, 441,
	462, 0, 0, 457, 448, 477, 0, 0, 0, 447,
	446, 0, 0, 449, 0, 451, 0, 0, 0, 462,
	474, 0, 0, 357, 472, 0, 459, 461, 450, 452,
	0, 455, 0, 456, 446, 0, 0, 0, 0, 0,
	453, 454, 473, 475, 0, 443, 444, 0, 0, 0,
	0, 458, 460, 476, 0, 445,
}

var yyTok1 = [...]uint8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 181, 3, 178, 182, 3,
	186, 187, 176, 174, 184, 175, 185, 177, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 190, 183,
	170, 172, 171, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 188, 3, 189, 179, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 180,
}

var yyTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 173,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:239
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:254
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:262
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:277
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:288
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:290
		{
			yyVAL.stmt = nil
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:301
		{
			yyVAL.str = yyDollar[1].str
		}
	case 8:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:302
		{
			yyVAL.str = ""
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:306
		{
			yyVAL.node = yyDollar[1].node
		}
	case 10:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:307
		{
			yyVAL.node = nil
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:311
		{
			yyVAL.ival = int(ast.DropCascade)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:312
		{
			yyVAL.ival = int(ast.DropRestrict)
		}
	case 13:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:313
		{
			yyVAL.ival = int(ast.DropRestrict)
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:317
		{
			yyVAL.ival = 1
		}
	case 15:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:318
		{
			yyVAL.ival = 0
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:322
		{
			yyVAL.ival = 1
		}
	case 17:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:323
		{
			yyVAL.ival = 0
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:327
		{
			yyVAL.ival = 1
		}
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:328
		{
			yyVAL.ival = 0
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:332
		{
			yyVAL.ival = 1
		}
	case 21:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:333
		{
			yyVAL.ival = 0
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:337
		{
			yyVAL.node = ast.NewWithClause(nil, false, 0)
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:338
		{
			yyVAL.node = nil
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:342
		{
			yyVAL.node = ast.NewWithClause(nil, false, 0)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:343
		{
			yyVAL.node = ast.NewWithClause(nil, false, 0)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:344
		{
			yyVAL.node = nil
		}
	case 27:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:345
		{
			yyVAL.node = nil
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:354
		{
			yyVAL.str = yyDollar[1].str
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:355
		{
			yyVAL.str = yyDollar[1].str
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:356
		{
			yyVAL.str = yyDollar[1].str
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:360
		{
			yyVAL.str = yyDollar[1].str
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:361
		{
			yyVAL.str = yyDollar[1].str
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:362
		{
			yyVAL.str = yyDollar[1].str
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:363
		{
			yyVAL.str = yyDollar[1].str
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:364
		{
			yyVAL.str = yyDollar[1].str
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:368
		{
			yyVAL.str = yyDollar[1].str
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:373
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:377
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:386
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:390
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:399
		{
			yyVAL.node = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:406
		{
			yyVAL.node = &ast.RangeVar{
				SchemaName: yyDollar[1].str,
				RelName:    yyDollar[3].str,
				Inh:        true, // inheritance enabled by default
			}
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:414
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.node = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.node = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.node = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:443
		{
			yyVAL.node = yyDollar[2].node
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:444
		{
			yyVAL.node = nil
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:449
		{
			yyVAL.node = ast.NewNodeList(yyDollar[1].node)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:453
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(yyDollar[3].node)
			yyVAL.node = list
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:462
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:466
		{
			yyVAL.node = ast.NewNodeList(ast.NewString(yyDollar[1].str), ast.NewString(yyDollar[3].str))
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:470
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.node = nodes
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:482
		{
			yyVAL.node = ast.NewNodeList(yyDollar[1].node)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:486
		{
			list := yyDollar[1].node.(*ast.NodeList)
			list.Append(yyDollar[3].node)
			yyVAL.node = list
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:500
		{
			yyVAL.str = "all"
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:501
		{
			yyVAL.str = "materialized"
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:502
		{
			yyVAL.str = "recursive"
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:503
		{
			yyVAL.str = "search"
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:504
		{
			yyVAL.str = "breadth"
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:505
		{
			yyVAL.str = "depth"
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:506
		{
			yyVAL.str = "cycle"
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:507
		{
			yyVAL.str = "first"
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:508
		{
			yyVAL.str = "set"
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:509
		{
			yyVAL.str = "by"
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:510
		{
			yyVAL.str = "true"
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:511
		{
			yyVAL.str = "false"
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:512
		{
			yyVAL.str = "path"
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:513
		{
			yyVAL.str = "value"
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:514
		{
			yyVAL.str = "error"
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:515
		{
			yyVAL.str = "empty"
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:516
		{
			yyVAL.str = "wrapper"
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:517
		{
			yyVAL.str = "conditional"
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:518
		{
			yyVAL.str = "unconditional"
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:519
		{
			yyVAL.str = "quotes"
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:520
		{
			yyVAL.str = "omit"
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:521
		{
			yyVAL.str = "keep"
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:522
		{
			yyVAL.str = "scalar"
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:523
		{
			yyVAL.str = "string"
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:524
		{
			yyVAL.str = "encoding"
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:525
		{
			yyVAL.str = "json_query"
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:526
		{
			yyVAL.str = "json_value"
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:527
		{
			yyVAL.str = "json_serialize"
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:528
		{
			yyVAL.str = "json_object"
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:529
		{
			yyVAL.str = "json_array"
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:530
		{
			yyVAL.str = "json_objectagg"
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:531
		{
			yyVAL.str = "json_arrayagg"
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:532
		{
			yyVAL.str = "json_exists"
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:533
		{
			yyVAL.str = "json_scalar"
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:534
		{
			yyVAL.str = "format"
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:535
		{
			yyVAL.str = "json"
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:536
		{
			yyVAL.str = "utf8"
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:537
		{
			yyVAL.str = "without"
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:538
		{
			yyVAL.str = "columns"
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:539
		{
			yyVAL.str = "ordinality"
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:540
		{
			yyVAL.str = "xmltable"
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:541
		{
			yyVAL.str = "json_table"
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:542
		{
			yyVAL.str = "rows"
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:543
		{
			yyVAL.str = "passing"
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:544
		{
			yyVAL.str = "nested"
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:549
		{
			yyVAL.str = yyDollar[1].str
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:554
		{
			yyVAL.str = yyDollar[1].str
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:559
		{
			yyVAL.str = "create"
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:560
		{
			yyVAL.str = "drop"
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:561
		{
			yyVAL.str = "alter"
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:576
		{
			yyVAL.node = yyDollar[1].node
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:578
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:583
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:588
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].node.(*ast.TypeName), 0)
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:592
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:597
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:602
		{
			name := []*ast.String{ast.NewString("*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:607
		{
			name := []*ast.String{ast.NewString("/")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:612
		{
			name := []*ast.String{ast.NewString("%")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:617
		{
			name := []*ast.String{ast.NewString("^")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:622
		{
			name := []*ast.String{ast.NewString("<")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:627
		{
			name := []*ast.String{ast.NewString(">")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:632
		{
			name := []*ast.String{ast.NewString("=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:637
		{
			name := []*ast.String{ast.NewString("<=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:642
		{
			name := []*ast.String{ast.NewString(">=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:647
		{
			name := []*ast.String{ast.NewString("<>")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:652
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:656
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:660
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:664
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:668
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:672
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:676
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:680
		{
			name := []*ast.String{ast.NewString("~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 127:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:685
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := []*ast.String{ast.NewString("~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:693
		{
			name := []*ast.String{ast.NewString("!~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 129:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:698
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := []*ast.String{ast.NewString("!~~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:706
		{
			name := []*ast.String{ast.NewString("~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 131:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:711
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := []*ast.String{ast.NewString("~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:719
		{
			name := []*ast.String{ast.NewString("!~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 133:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:724
		{
			// Create like_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("like_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := []*ast.String{ast.NewString("!~~*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:732
		{
			// Convert any_name (which returns a NodeList of strings) to []string
			nodeList := yyDollar[3].node.(*ast.NodeList)
			names := make([]string, len(nodeList.Items))
			for i, node := range nodeList.Items {
				names[i] = node.(*ast.String).SVal
			}
			collateClause := ast.NewCollateClause(names)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:744
		{
			// Create timezone function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("timezone")}
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:750
		{
			// Create timezone function call with no argument
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("timezone")}
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:756
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].astStrList, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:760
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].astStrList, nil, yyDollar[2].node, 0)
		}
	case 139:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:764
		{
			name := []*ast.String{ast.NewString("BETWEEN")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 140:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:769
		{
			name := []*ast.String{ast.NewString("NOT BETWEEN")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 141:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:774
		{
			name := []*ast.String{ast.NewString("BETWEEN SYMMETRIC")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 142:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:779
		{
			name := []*ast.String{ast.NewString("NOT BETWEEN SYMMETRIC")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:784
		{
			name := []*ast.String{ast.NewString("=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:789
		{
			name := []*ast.String{ast.NewString("<>")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:794
		{
			name := []*ast.String{ast.NewString("~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 146:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:799
		{
			// Create similar_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("similar_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := []*ast.String{ast.NewString("~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:807
		{
			name := []*ast.String{ast.NewString("!~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 148:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:812
		{
			// Create similar_escape function call
			funcName := []*ast.String{ast.NewString("pg_catalog"), ast.NewString("similar_escape")}
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := []*ast.String{ast.NewString("!~")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:821
		{
			yyVAL.node = yyDollar[1].node
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:823
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].node.(*ast.TypeName), 0)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:827
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:832
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:837
		{
			name := []*ast.String{ast.NewString("+")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:842
		{
			name := []*ast.String{ast.NewString("-")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:847
		{
			name := []*ast.String{ast.NewString("*")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:852
		{
			name := []*ast.String{ast.NewString("/")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:857
		{
			name := []*ast.String{ast.NewString("%")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:862
		{
			name := []*ast.String{ast.NewString("^")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:867
		{
			name := []*ast.String{ast.NewString("<")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:872
		{
			name := []*ast.String{ast.NewString(">")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:877
		{
			name := []*ast.String{ast.NewString("=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:882
		{
			name := []*ast.String{ast.NewString("<=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:887
		{
			name := []*ast.String{ast.NewString(">=")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:892
		{
			name := []*ast.String{ast.NewString("<>")}
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:898
		{
			yyVAL.node = yyDollar[1].node
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:899
		{
			yyVAL.node = yyDollar[1].node
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:901
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:910
		{
			parenExpr := ast.NewParenExpr(yyDollar[2].node, 0)
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewA_Indirection(parenExpr, yyDollar[4].list, 0)
			} else {
				yyVAL.node = parenExpr
			}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:918
		{
			yyVAL.node = yyDollar[1].node
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:923
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:927
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:931
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:935
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:939
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:943
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:948
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:951
		{
			yyVAL.str = yyDollar[1].str
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:954
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:955
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:956
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:961
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:965
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:975
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:979
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:985
		{
			yyVAL.node = yyDollar[1].node
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:986
		{
			yyVAL.node = nil
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:990
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:994
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:998
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 190:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1002
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1007
		{
			yyVAL.list = nil
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1009
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1021
		{
			// For now, just return the func_application
			// Note: In full implementation, would apply within_group_clause, filter_clause, over_clause
			yyVAL.node = yyDollar[1].node
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1030
		{
			yyVAL.node = yyDollar[1].node
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1034
		{
			yyVAL.astStrList = []*ast.String{ast.NewString(yyDollar[1].str)}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1038
		{
			// Create function name from ColId + indirection
			result := []*ast.String{ast.NewString(yyDollar[1].str)}
			for _, node := range yyDollar[2].list.Items {
				if str, ok := node.(*ast.String); ok {
					result = append(result, str)
				}
			}
			yyVAL.astStrList = result
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].astStrList, nil, 0)
		}
	case 198:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1055
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 199:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1061
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 200:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:1067
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 201:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1075
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 202:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1081
		{
			funcCall := ast.NewFuncCall(yyDollar[1].astStrList, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1093
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.node = yyDollar[1].node
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.node = ast.NewNodeList(yyDollar[1].node)
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1119
		{
			nodeList := yyDollar[1].node.(*ast.NodeList)
			nodeList.Append(yyDollar[3].node)
			yyVAL.node = nodeList
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.node = yyDollar[1].node
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.node = yyDollar[1].node
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.node = yyDollar[1].node
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.node = yyDollar[1].node
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.node = yyDollar[1].node
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.node = yyDollar[1].node
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = yyDollar[1].str
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = yyDollar[1].str
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = yyDollar[1].str
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = yyDollar[1].str
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = yyDollar[1].str
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.node = yyDollar[1].node
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1159
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.list = yyDollar[2].node.(*ast.NodeList)
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.list = nil
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1176
		{
			typeName := ast.NewTypeName([]string{yyDollar[1].str})
			// Note: In full implementation, would set type modifiers
			yyVAL.node = typeName
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1182
		{
			// Create qualified type name from name + attrs
			names := []string{yyDollar[1].str}
			for _, attr := range yyDollar[2].list.Items {
				names = append(names, attr.(*ast.String).SVal)
			}
			typeName := ast.NewTypeName(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.node = typeName
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.node = ast.NewTypeName([]string{"int4"})
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.node = ast.NewTypeName([]string{"int4"})
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.node = ast.NewTypeName([]string{"int2"})
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1207
		{
			yyVAL.node = ast.NewTypeName([]string{"int8"})
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.node = ast.NewTypeName([]string{"float4"})
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.node = yyDollar[2].node
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.node = ast.NewTypeName([]string{"float8"})
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.node = ast.NewTypeName([]string{"numeric"})
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.node = ast.NewTypeName([]string{"numeric"})
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.node = ast.NewTypeName([]string{"numeric"})
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.node = ast.NewTypeName([]string{"bool"})
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.node = yyDollar[1].node
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.node = yyDollar[1].node
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1251
		{
			yyVAL.node = yyDollar[1].node
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1255
		{
			yyVAL.node = yyDollar[1].node
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1261
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1269
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "varchar"
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1281
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1289
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1297
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.node = ast.NewTypeName([]string{yyDollar[1].str})
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			typeName := ast.NewTypeName([]string{yyDollar[1].str})
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// Note: In full implementation, would set typmods to list with 1
			}
			yyVAL.node = typeName
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1324
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1336
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 253:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1348
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1358
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 255:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1368
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1378
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.node = ast.NewTypeName([]string{typeName})
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1389
		{
			yyVAL.ival = 1
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1390
		{
			yyVAL.ival = 0
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1391
		{
			yyVAL.ival = 0
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.ival = 1
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.ival = 0
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1399
		{
			if yyDollar[2].ival < 1 {
				yyVAL.node = ast.NewTypeName([]string{"float4"})
			} else if yyDollar[2].ival <= 7 {
				yyVAL.node = ast.NewTypeName([]string{"float4"})
			} else {
				yyVAL.node = ast.NewTypeName([]string{"float8"})
			}
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.node = ast.NewTypeName([]string{"float8"})
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.astStrList = []*ast.String{ast.NewString(yyDollar[1].str)}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.astStrList = yyDollar[3].astStrList
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = yyDollar[1].str
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = yyDollar[1].str
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "+"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "-"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "*"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "/"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "%"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "^"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "<"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = ">"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1437
		{
			yyVAL.str = "="
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1438
		{
			yyVAL.str = "<="
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1439
		{
			yyVAL.str = ">="
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1440
		{
			yyVAL.str = "<>"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1444
		{
			yyVAL.astStrList = []*ast.String{ast.NewString(yyDollar[1].str)}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1448
		{
			yyVAL.astStrList = append([]*ast.String{ast.NewString(yyDollar[1].str)}, yyDollar[3].astStrList...)
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.list = nil
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1457
		{
			yyVAL.node = nil
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1460
		{
			yyVAL.node = nil
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.node = nil
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1466
		{
			yyVAL.ival = 0
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.ival = 0
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.node = yyDollar[2].node
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1507
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].node.(*ast.WithClause)
			yyVAL.stmt = selectStmt
		}
	case 296:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1521
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = convertToResTargetList(yyDollar[3].list.Items)
			}
			selectStmt.IntoClause = convertToIntoClause(yyDollar[4].node)
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			yyVAL.stmt = selectStmt
		}
	case 297:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1533
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = convertToResTargetList(yyDollar[3].list.Items)
			}
			selectStmt.IntoClause = convertToIntoClause(yyDollar[4].node)
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			yyVAL.stmt = selectStmt
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1545
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = []*ast.ResTarget{starTarget}
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].node)
			yyVAL.stmt = selectStmt
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.list = yyDollar[1].list
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.list = nil
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1572
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.node = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1581
		{
			// Implicit alias (no AS keyword)
			yyVAL.node = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1586
		{
			// No alias - use default naming
			yyVAL.node = ast.NewResTarget("", yyDollar[1].node)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			// SELECT * - all columns
			yyVAL.node = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.list = yyDollar[2].list
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.list = nil
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1608
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1617
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			if yyDollar[2].node != nil {
				rangeVar.Alias = yyDollar[2].node.(*ast.Alias)
			}
			yyVAL.node = rangeVar
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1625
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].node != nil {
				alias = yyDollar[2].node.(*ast.Alias)
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1636
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].node != nil {
				alias = yyDollar[3].node.(*ast.Alias)
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.node = yyDollar[1].node
		}
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1651
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].node.(*ast.Alias)
			yyVAL.node = joinExpr
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1657
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			if yyDollar[2].node != nil {
				rangeFunc.Alias = yyDollar[2].node.(*ast.Alias)
			}
			yyVAL.node = rangeFunc
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1665
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			if yyDollar[3].node != nil {
				rangeFunc.Alias = yyDollar[3].node.(*ast.Alias)
			}
			yyVAL.node = rangeFunc
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1674
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].node != nil {
				rangeTableFunc.Alias = yyDollar[2].node.(*ast.Alias)
			}
			yyVAL.node = rangeTableFunc
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1682
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].node != nil {
				rangeTableFunc.Alias = yyDollar[3].node.(*ast.Alias)
			}
			yyVAL.node = rangeTableFunc
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1691
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].node != nil {
				jsonTable.Alias = yyDollar[2].node.(*ast.Alias)
			}
			yyVAL.node = jsonTable
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1699
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].node != nil {
				jsonTable.Alias = yyDollar[3].node.(*ast.Alias)
			}
			yyVAL.node = jsonTable
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.node = rangeVar
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.node = yyDollar[1].node
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1724
		{
			rangeVar := yyDollar[1].node.(*ast.RangeVar)
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.node = rangeVar
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1730
		{
			rangeVar := yyDollar[2].node.(*ast.RangeVar)
			rangeVar.Inh = false // no inheritance
			yyVAL.node = rangeVar
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1736
		{
			rangeVar := yyDollar[3].node.(*ast.RangeVar)
			rangeVar.Inh = false // no inheritance
			yyVAL.node = rangeVar
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1757
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1766
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1792
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 332:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1818
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1826
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1836
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1837
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1838
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1839
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1844
		{
			yyVAL.ival = 1
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1845
		{
			yyVAL.ival = 0
		}
	case 340:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1855
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].node
			var aliasNode ast.Node = nil
			if yyDollar[5].node != nil {
				aliasNode = yyDollar[5].node
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1866
		{
			yyVAL.node = yyDollar[2].node
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1873
		{
			yyVAL.node = yyDollar[3].node
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1884
		{
			yyVAL.node = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1888
		{
			yyVAL.node = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1892
		{
			yyVAL.node = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1898
		{
			yyVAL.node = yyDollar[1].node
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1899
		{
			yyVAL.node = nil
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1904
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1908
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 350:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:1916
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].node != nil {
				cte.Aliascolnames = yyDollar[2].node.(*ast.NodeList)
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1944
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1945
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1946
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 354:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:1951
		{
			searchColList := yyDollar[5].node.(*ast.NodeList)
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 355:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:1957
		{
			searchColList := yyDollar[5].node.(*ast.NodeList)
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1963
		{
			yyVAL.node = nil
		}
	case 357:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:1970
		{
			cycleColList := yyDollar[2].node.(*ast.NodeList)
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 358:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1979
		{
			cycleColList := yyDollar[2].node.(*ast.NodeList)
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:1987
		{
			yyVAL.node = nil
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1998
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].node.(*ast.NodeList)
			selectStmt.ValuesLists = []*ast.NodeList{exprList}
			yyVAL.stmt = selectStmt
		}
	case 361:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2006
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].node.(*ast.NodeList)
			selectStmt.ValuesLists = append(selectStmt.ValuesLists, exprList)
			yyVAL.stmt = selectStmt
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2020
		{
			yyVAL.node = yyDollar[2].node
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2021
		{
			yyVAL.node = nil
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2025
		{
			yyVAL.node = yyDollar[1].node
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2033
		{
			yyVAL.node = yyDollar[1].node
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2034
		{
			yyVAL.node = nil
		}
	case 367:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2039
		{
			nameList := yyDollar[4].node.(*ast.NodeList)
			yyVAL.node = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2044
		{
			yyVAL.node = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2048
		{
			nameList := yyDollar[3].node.(*ast.NodeList)
			yyVAL.node = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2053
		{
			yyVAL.node = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2061
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.node = alias
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2065
		{
			yyVAL.node = nil
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2073
		{
			yyVAL.ival = 1
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2074
		{
			yyVAL.ival = 0
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2078
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 376:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2079
		{
			yyVAL.list = yyDollar[4].node.(*ast.NodeList)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2083
		{
			yyVAL.list = yyDollar[1].list
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2084
		{
			yyVAL.list = nil
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2094
		{
			yyVAL.node = ast.NewIntoClause(yyDollar[2].node.(*ast.RangeVar), nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2097
		{
			yyVAL.node = nil
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2108
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 382:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2117
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2127
		{
			yyVAL.ival = 1
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2128
		{
			yyVAL.ival = 0
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2134
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2138
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2145
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].node != nil {
				funcList.Append(yyDollar[2].node)
			}
			yyVAL.list = funcList
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2154
		{
			yyVAL.node = yyDollar[3].list
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2155
		{
			yyVAL.node = nil
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2165
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2169
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2181
		{
			name := yyDollar[1].str
			fp := &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     &name,
				ArgType:  yyDollar[2].node.(*ast.TypeName),
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
			yyVAL.node = fp
		}
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2196
		{
			yyVAL.list = yyDollar[3].list
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2197
		{
			yyVAL.list = nil
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2203
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2207
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2216
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].node.(*ast.TypeName), 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2227
		{
			// Convert NodeList to []string for collation names
			nodeList := yyDollar[2].node.(*ast.NodeList)
			collNames := make([]string, len(nodeList.Items))
			for i, item := range nodeList.Items {
				if str, ok := item.(*ast.String); ok {
					collNames[i] = str.SVal
				}
			}
			yyVAL.node = ast.NewCollateClause(collNames)
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2238
		{
			yyVAL.node = nil
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2243
		{
			yyVAL.str = "BY REF"
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2244
		{
			yyVAL.str = "BY VALUE"
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2250
		{
			yyVAL.node = yyDollar[2].node
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2254
		{
			yyVAL.node = yyDollar[2].node
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2258
		{
			yyVAL.node = yyDollar[3].node
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2262
		{
			yyVAL.node = yyDollar[3].node
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2270
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2274
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2282
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2287
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 410:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2296
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, nil, nil, 0)
			// Convert column list to RangeTableFuncCol
			if yyDollar[6].list != nil {
				columns := make([]*ast.RangeTableFuncCol, 0)
				for _, col := range yyDollar[6].list.Items {
					columns = append(columns, col.(*ast.RangeTableFuncCol))
				}
				rangeTableFunc.Columns = columns
			}
			yyVAL.node = rangeTableFunc
		}
	case 411:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:2312
		{
			// Convert namespace list to []*ResTarget
			var namespaces []*ast.ResTarget
			if yyDollar[5].list != nil {
				namespaces = make([]*ast.ResTarget, len(yyDollar[5].list.Items))
				for i, item := range yyDollar[5].list.Items {
					namespaces[i] = item.(*ast.ResTarget)
				}
			}
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), namespaces, nil, nil, 0)
			// Convert column list to RangeTableFuncCol
			if yyDollar[11].list != nil {
				columns := make([]*ast.RangeTableFuncCol, 0)
				for _, col := range yyDollar[11].list.Items {
					columns = append(columns, col.(*ast.RangeTableFuncCol))
				}
				rangeTableFunc.Columns = columns
			}
			yyVAL.node = rangeTableFunc
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2339
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2343
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2352
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].node.(*ast.TypeName), false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2357
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2362
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].node.(*ast.TypeName), false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2372
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2376
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2385
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2389
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2393
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2397
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2401
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 424:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:2414
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2438
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2449
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2450
		{
			yyVAL.node = nil
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2455
		{
			yyVAL.node = yyDollar[2].list
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2456
		{
			yyVAL.node = nil
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2460
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2461
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2466
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2474
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2482
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2493
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2494
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2495
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2496
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2497
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2498
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2499
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2500
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2505
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2509
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 445:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2513
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 446:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2517
		{
			yyVAL.node = nil
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2522
		{
			yyVAL.node = yyDollar[1].node
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2523
		{
			yyVAL.node = nil
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2528
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2529
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2530
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2531
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2532
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2533
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2534
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2535
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2536
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 458:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2541
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2542
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 460:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2543
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2544
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2545
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2551
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2571
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2581
		{
			yyVAL.node = yyDollar[1].node
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2582
		{
			yyVAL.node = nil
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2587
		{
			yyVAL.node = ast.NewString("path")
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2588
		{
			yyVAL.node = nil
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2594
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2598
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2607
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 472:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2616
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].node.(*ast.TypeName)
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 473:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2630
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].node.(*ast.TypeName)
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 474:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2644
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].node.(*ast.TypeName)
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 475:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2655
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 476:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:2664
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2675
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2676
		{
			yyVAL.node = nil
		}
	}
	goto yystack /* stack new state and value */
}
