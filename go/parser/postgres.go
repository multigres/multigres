// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
	"strings"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// SelectLimit - Private struct for the result of opt_select_limit production
// Mirrors PostgreSQL's SelectLimit from gram.y:126-132
type selectLimit struct {
	limitOffset ast.Node
	limitCount  ast.Node
	limitOption ast.LimitOption
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:43
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node        ast.Node
	stmt        ast.Stmt
	stmtList    []ast.Stmt
	list        *ast.NodeList
	groupClause *ast.GroupClause
	selectLimit *selectLimit

	// Specific AST node types
	into          *ast.IntoClause
	onconflict    *ast.OnConflictClause
	windef        *ast.WindowDef
	createStmt    *ast.CreateStmt
	indexStmt     *ast.IndexStmt
	alterStmt     *ast.AlterTableStmt
	dropStmt      *ast.DropStmt
	columnDef     *ast.ColumnDef
	constraint    *ast.Constraint
	indexElem     *ast.IndexElem
	alterCmd      *ast.AlterTableCmd
	with          *ast.WithClause
	rangevar      *ast.RangeVar
	objType       ast.ObjectType
	dropBehav     ast.DropBehavior
	setquant      ast.SetQuantifier
	typnam        *ast.TypeName
	partspec      *ast.PartitionSpec
	partboundspec *ast.PartitionBoundSpec
	oncommit      ast.OnCommitAction
	defelt        *ast.DefElem
	target        *ast.ResTarget            // For select targets, insert columns
	alias         *ast.Alias                // For table and column aliases
	jtype         ast.JoinType              // For join type specifications
	jexpr         *ast.JoinExpr             // For joined table expressions
	keyaction     *ast.KeyAction            // For foreign key actions
	keyactions    *ast.KeyActions           // For foreign key action sets
	funparam      *ast.FunctionParameter    // For function parameters
	funparammode  ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt      *ast.VariableSetStmt      // For SET/RESET statements
	rolespec      *ast.RoleSpec
	objwithargs   *ast.ObjectWithArgs
	statelem      *ast.StatsElem

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const LATERAL = 57428
const VALUES = 57429
const SEARCH = 57430
const BREADTH = 57431
const DEPTH = 57432
const CYCLE = 57433
const FIRST_P = 57434
const LAST_P = 57435
const SET = 57436
const ASC = 57437
const DESC = 57438
const INSERT = 57439
const UPDATE = 57440
const DELETE_P = 57441
const MERGE = 57442
const RETURNING = 57443
const CONFLICT = 57444
const OVERRIDING = 57445
const USER = 57446
const SYSTEM_P = 57447
const MATCHED = 57448
const THEN = 57449
const SOURCE = 57450
const TARGET = 57451
const DO = 57452
const NOTHING = 57453
const COPY = 57454
const PROGRAM = 57455
const STDIN = 57456
const STDOUT = 57457
const BINARY = 57458
const FREEZE = 57459
const CONSTRAINT = 57460
const VERBOSE = 57461
const ANALYZE = 57462
const CURRENT_P = 57463
const CURSOR = 57464
const OF = 57465
const COLUMNS = 57466
const ORDINALITY = 57467
const XMLTABLE = 57468
const JSON_TABLE = 57469
const ROWS = 57470
const PATH = 57471
const PASSING = 57472
const FOR = 57473
const NESTED = 57474
const REF_P = 57475
const XMLNAMESPACES = 57476
const ARRAY = 57477
const ERROR = 57478
const ERROR_P = 57479
const EMPTY = 57480
const EMPTY_P = 57481
const OBJECT_P = 57482
const WRAPPER = 57483
const CONDITIONAL = 57484
const UNCONDITIONAL = 57485
const QUOTES = 57486
const OMIT = 57487
const KEEP = 57488
const SCALAR = 57489
const STRING_P = 57490
const ENCODING = 57491
const DELIMITER = 57492
const DELIMITERS = 57493
const HEADER_P = 57494
const QUOTE = 57495
const FORCE = 57496
const CSV = 57497
const VALUE_P = 57498
const JSON_QUERY = 57499
const JSON_VALUE = 57500
const JSON_SERIALIZE = 57501
const JSON_OBJECT = 57502
const JSON_ARRAY = 57503
const JSON_OBJECTAGG = 57504
const JSON_ARRAYAGG = 57505
const JSON_EXISTS = 57506
const JSON_SCALAR = 57507
const FORMAT = 57508
const JSON = 57509
const UTF8 = 57510
const WITHOUT = 57511
const BIT = 57512
const NUMERIC = 57513
const INTEGER = 57514
const SMALLINT = 57515
const BIGINT = 57516
const REAL = 57517
const FLOAT_P = 57518
const DOUBLE_P = 57519
const PRECISION = 57520
const CHARACTER = 57521
const CHAR_P = 57522
const VARCHAR = 57523
const NATIONAL = 57524
const NCHAR = 57525
const VARYING = 57526
const TIMESTAMP = 57527
const INTERVAL = 57528
const INT_P = 57529
const DECIMAL_P = 57530
const DEC = 57531
const BOOLEAN_P = 57532
const VARIADIC = 57533
const ABORT_P = 57534
const ABSENT = 57535
const ABSOLUTE_P = 57536
const ACCESS = 57537
const ACTION = 57538
const ADD_P = 57539
const ADMIN = 57540
const AFTER = 57541
const AGGREGATE = 57542
const ALSO = 57543
const ALWAYS = 57544
const ANALYSE = 57545
const ASENSITIVE = 57546
const ASSERTION = 57547
const ASSIGNMENT = 57548
const ATOMIC = 57549
const ATTACH = 57550
const ATTRIBUTE = 57551
const AUTHORIZATION = 57552
const BACKWARD = 57553
const BEFORE = 57554
const BEGIN_P = 57555
const CACHE = 57556
const CALL = 57557
const CALLED = 57558
const CASCADED = 57559
const CATALOG_P = 57560
const CHAIN = 57561
const CHARACTERISTICS = 57562
const CHECKPOINT = 57563
const CLASS = 57564
const CLOSE = 57565
const CLUSTER = 57566
const COALESCE = 57567
const COLLATION = 57568
const COMMENT = 57569
const COMMENTS = 57570
const COMMIT = 57571
const COMMITTED = 57572
const COMPRESSION = 57573
const CONFIGURATION = 57574
const CONNECTION = 57575
const CONSTRAINTS = 57576
const CONTENT_P = 57577
const CONTINUE_P = 57578
const CONVERSION_P = 57579
const COST = 57580
const CUBE = 57581
const CURRENT_CATALOG = 57582
const CURRENT_DATE = 57583
const CURRENT_ROLE = 57584
const CURRENT_SCHEMA = 57585
const CURRENT_TIME = 57586
const CURRENT_TIMESTAMP = 57587
const CURRENT_USER = 57588
const DATA_P = 57589
const DATABASE = 57590
const DAY_P = 57591
const DEALLOCATE = 57592
const DECLARE = 57593
const DEFAULTS = 57594
const DEFERRABLE = 57595
const DEFERRED = 57596
const DEFINER = 57597
const DEPENDS = 57598
const DETACH = 57599
const DICTIONARY = 57600
const DISABLE_P = 57601
const DISCARD = 57602
const DOCUMENT_P = 57603
const DOMAIN_P = 57604
const EACH = 57605
const ELSE = 57606
const ENABLE_P = 57607
const ENCRYPTED = 57608
const END_P = 57609
const ENUM_P = 57610
const EVENT = 57611
const EXCEPT = 57612
const EXCLUDE = 57613
const EXCLUDING = 57614
const EXCLUSIVE = 57615
const EXECUTE = 57616
const EXPLAIN = 57617
const EXPRESSION = 57618
const EXTENSION = 57619
const EXTERNAL = 57620
const EXTRACT = 57621
const FAMILY = 57622
const FETCH = 57623
const FILTER = 57624
const FINALIZE = 57625
const FOLLOWING = 57626
const FOREIGN = 57627
const FORWARD = 57628
const FUNCTION = 57629
const FUNCTIONS = 57630
const GENERATED = 57631
const GLOBAL = 57632
const GRANT = 57633
const GRANTED = 57634
const GREATEST = 57635
const GROUPING = 57636
const GROUPS = 57637
const HANDLER = 57638
const HOLD = 57639
const HOUR_P = 57640
const IDENTITY_P = 57641
const IMMEDIATE = 57642
const IMMUTABLE = 57643
const IMPLICIT_P = 57644
const IMPORT_P = 57645
const INCLUDE = 57646
const INCLUDING = 57647
const INCREMENT = 57648
const INDENT = 57649
const INDEX = 57650
const INDEXES = 57651
const INHERIT = 57652
const INHERITS = 57653
const INITIALLY = 57654
const INLINE_P = 57655
const INPUT_P = 57656
const INSENSITIVE = 57657
const INSTEAD = 57658
const INTERSECT = 57659
const INVOKER = 57660
const ISOLATION = 57661
const KEYS = 57662
const LABEL = 57663
const LANGUAGE = 57664
const LARGE_P = 57665
const LATERAL_P = 57666
const LEAKPROOF = 57667
const LEAST = 57668
const LEADING = 57669
const LEVEL = 57670
const LISTEN = 57671
const LOAD = 57672
const LOCALTIME = 57673
const LOCALTIMESTAMP = 57674
const LOCATION = 57675
const LOCK_P = 57676
const LOCKED = 57677
const LOGGED = 57678
const MAPPING = 57679
const MATCH = 57680
const MAXVALUE = 57681
const MERGE_ACTION = 57682
const METHOD = 57683
const MINUTE_P = 57684
const MINVALUE = 57685
const MODE = 57686
const MONTH_P = 57687
const MOVE = 57688
const NAME_P = 57689
const NAMES = 57690
const NEW = 57691
const NEXT = 57692
const NFC = 57693
const NFD = 57694
const NFKC = 57695
const NFKD = 57696
const NO = 57697
const NONE = 57698
const NORMALIZE = 57699
const NORMALIZED = 57700
const NOTIFY = 57701
const NOWAIT = 57702
const NULLIF = 57703
const OUT_P = 57704
const OVERLAY = 57705
const OVERLAPS = 57706
const OWNED = 57707
const OWNER = 57708
const PARALLEL = 57709
const PARAMETER = 57710
const PARSER = 57711
const PARTIAL = 57712
const PARTITION = 57713
const PASSWORD = 57714
const PLACING = 57715
const PLAN = 57716
const PLANS = 57717
const POLICY = 57718
const POSITION = 57719
const PRECEDING = 57720
const PREPARE = 57721
const PREPARED = 57722
const PRESERVE = 57723
const PRIMARY = 57724
const PRIOR = 57725
const PRIVILEGES = 57726
const PROCEDURAL = 57727
const PROCEDURE = 57728
const PROCEDURES = 57729
const PUBLICATION = 57730
const RANGE = 57731
const READ = 57732
const REASSIGN = 57733
const RECHECK = 57734
const REFERENCES = 57735
const REFERENCING = 57736
const REFRESH = 57737
const REINDEX = 57738
const RELATIVE_P = 57739
const RELEASE = 57740
const RENAME = 57741
const REPEATABLE = 57742
const REPLICA = 57743
const RESET = 57744
const RESTART = 57745
const RETURN = 57746
const RETURNS = 57747
const REVOKE = 57748
const ROLE = 57749
const ROLLBACK = 57750
const ROLLUP = 57751
const ROUTINE = 57752
const ROUTINES = 57753
const ROW = 57754
const RULE = 57755
const SAVEPOINT = 57756
const SCHEMA = 57757
const SCHEMAS = 57758
const SCROLL = 57759
const SECOND_P = 57760
const SECURITY = 57761
const SEQUENCE = 57762
const SEQUENCES = 57763
const SERIALIZABLE = 57764
const SERVER = 57765
const SESSION = 57766
const SESSION_USER = 57767
const SETS = 57768
const SETOF = 57769
const SHARE = 57770
const SHOW = 57771
const SIMPLE = 57772
const SKIP = 57773
const SNAPSHOT = 57774
const SOME = 57775
const SQL_P = 57776
const STABLE = 57777
const STANDALONE_P = 57778
const START = 57779
const STATEMENT = 57780
const STATISTICS = 57781
const STORAGE = 57782
const STORED = 57783
const STRICT_P = 57784
const STRIP_P = 57785
const SUBSCRIPTION = 57786
const SUBSTRING = 57787
const SUPPORT = 57788
const SYSID = 57789
const SYSTEM_USER = 57790
const TABLES = 57791
const TABLESPACE = 57792
const TABLESAMPLE = 57793
const TEMP = 57794
const TEMPLATE = 57795
const TEMPORARY = 57796
const TEXT_P = 57797
const TIES = 57798
const TRAILING = 57799
const TRANSACTION = 57800
const TRANSFORM = 57801
const TREAT = 57802
const TRIGGER = 57803
const TRIM = 57804
const TRUNCATE = 57805
const TRUSTED = 57806
const TYPE_P = 57807
const TYPES_P = 57808
const UESCAPE = 57809
const UNBOUNDED = 57810
const UNCOMMITTED = 57811
const UNENCRYPTED = 57812
const UNION = 57813
const UNIQUE = 57814
const UNLISTEN = 57815
const UNLOGGED = 57816
const UNTIL = 57817
const VACUUM = 57818
const VALID = 57819
const VALIDATE = 57820
const VALIDATOR = 57821
const VERSION_P = 57822
const VIEW = 57823
const VIEWS = 57824
const VOLATILE = 57825
const WHITESPACE_P = 57826
const WINDOW = 57827
const WITHIN = 57828
const WORK = 57829
const WRITE = 57830
const XML_P = 57831
const XMLATTRIBUTES = 57832
const XMLCONCAT = 57833
const XMLELEMENT = 57834
const XMLEXISTS = 57835
const XMLFOREST = 57836
const XMLPARSE = 57837
const XMLPI = 57838
const XMLROOT = 57839
const XMLSERIALIZE = 57840
const YEAR_P = 57841
const YES_P = 57842
const INOUT = 57843
const OTHERS = 57844
const OLD = 57845
const KEY = 57846
const OFF = 57847
const OIDS = 57848
const OPTION = 57849
const OPTIONS = 57850
const OVER = 57851
const ORDER = 57852
const ANY = 57853
const BOTH = 57854
const CAST = 57855
const CHECK = 57856
const COLUMN = 57857
const FORMAT_LA = 57858
const NOT_LA = 57859
const NULLS_LA = 57860
const WITH_LA = 57861
const WITHOUT_LA = 57862
const MODE_TYPE_NAME = 57863
const MODE_PLPGSQL_EXPR = 57864
const MODE_PLPGSQL_ASSIGN1 = 57865
const MODE_PLPGSQL_ASSIGN2 = 57866
const MODE_PLPGSQL_ASSIGN3 = 57867
const UMINUS = 57868

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"LATERAL",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ANALYSE",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:11006

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 61,
	541, 61,
	-2, 1392,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 62,
	68, 1327,
	69, 1327,
	281, 1327,
	510, 1327,
	-2, 1322,
	-1, 65,
	67, 1699,
	84, 1699,
	85, 2336,
	237, 2521,
	308, 1866,
	420, 1699,
	481, 1699,
	-2, 74,
	-1, 81,
	1, 61,
	541, 61,
	-2, 1392,
	-1, 117,
	85, 2335,
	-2, 1698,
	-1, 190,
	61, 279,
	64, 279,
	528, 279,
	534, 279,
	-2, 2379,
	-1, 642,
	84, 1699,
	481, 1699,
	-2, 73,
	-1, 644,
	210, 62,
	-2, 2342,
	-1, 711,
	16, 1246,
	17, 1246,
	532, 1246,
	-2, 80,
	-1, 712,
	16, 1247,
	17, 1247,
	532, 1247,
	-2, 81,
	-1, 1051,
	6, 1795,
	12, 1795,
	535, 1795,
	536, 1795,
	-2, 1788,
	-1, 1233,
	128, 2619,
	412, 2619,
	-2, 1059,
	-1, 1262,
	21, 1220,
	433, 1220,
	511, 1220,
	-2, 821,
	-1, 1264,
	21, 1222,
	433, 1222,
	511, 1222,
	-2, 768,
	-1, 1269,
	1, 637,
	26, 637,
	36, 637,
	64, 637,
	65, 637,
	68, 637,
	69, 637,
	71, 637,
	72, 637,
	73, 637,
	74, 637,
	101, 637,
	281, 637,
	485, 637,
	510, 637,
	533, 637,
	541, 637,
	542, 637,
	-2, 1317,
	-1, 1274,
	21, 1297,
	433, 1297,
	511, 1297,
	-2, 1293,
	-1, 1731,
	68, 1327,
	69, 1327,
	281, 1327,
	510, 1327,
	-2, 1149,
	-1, 1741,
	532, 1183,
	-2, 1169,
	-1, 1910,
	118, 74,
	308, 1866,
	461, 74,
	-2, 1699,
	-1, 1959,
	537, 95,
	-2, 2205,
	-1, 1985,
	532, 1868,
	-2, 203,
	-1, 2179,
	36, 2624,
	66, 2624,
	-2, 485,
	-1, 2180,
	36, 2625,
	66, 2625,
	-2, 358,
	-1, 2186,
	128, 2622,
	412, 2622,
	-2, 1157,
	-1, 2187,
	128, 2623,
	412, 2623,
	-2, 1158,
	-1, 2210,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1072,
	-1, 2211,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1073,
	-1, 2212,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1074,
	-1, 2213,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1075,
	-1, 2214,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1076,
	-1, 2215,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1077,
	-1, 2219,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1084,
	-1, 2225,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1088,
	-1, 2270,
	364, 1210,
	-2, 1213,
	-1, 2284,
	532, 1182,
	-2, 1250,
	-1, 2388,
	40, 1254,
	510, 1254,
	528, 1254,
	533, 1254,
	542, 1254,
	-2, 1250,
	-1, 2418,
	210, 62,
	-2, 2342,
	-1, 2477,
	537, 96,
	-2, 2205,
	-1, 2580,
	508, 2282,
	-2, 2275,
	-1, 2700,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1086,
	-1, 2701,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1090,
	-1, 2707,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1092,
	-1, 2746,
	364, 1209,
	-2, 1212,
	-1, 2801,
	68, 1327,
	69, 1327,
	281, 1327,
	510, 1327,
	-2, 1414,
	-1, 2812,
	532, 1183,
	-2, 96,
	-1, 2818,
	151, 1631,
	-2, 1566,
	-1, 3002,
	6, 1795,
	12, 1795,
	535, 1795,
	536, 1795,
	-2, 1769,
	-1, 3118,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1085,
	-1, 3121,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1094,
	-1, 3124,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1089,
	-1, 3129,
	52, 0,
	53, 0,
	54, 0,
	-2, 1107,
	-1, 3151,
	21, 1219,
	433, 1219,
	511, 1219,
	-2, 1294,
	-1, 3155,
	364, 1211,
	-2, 1214,
	-1, 3457,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1087,
	-1, 3458,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1091,
	-1, 3462,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1093,
	-1, 3463,
	52, 0,
	53, 0,
	54, 0,
	-2, 1108,
	-1, 3466,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1109,
	-1, 3474,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1137,
	-1, 3475,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1138,
	-1, 3476,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1139,
	-1, 3477,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1140,
	-1, 3478,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1141,
	-1, 3479,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1142,
	-1, 3480,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1111,
	-1, 3556,
	541, 61,
	-2, 1392,
	-1, 3698,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1095,
	-1, 3699,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1110,
	-1, 3700,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1112,
	-1, 4209,
	37, 0,
	44, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 443,
	-1, 4380,
	7, 1516,
	-2, 280,
}

const yyPrivate = 57344

const yyLast = 74921

var yyAct = [...]int16{
	617, 4440, 4377, 4505, 4439, 4427, 4486, 741, 4470, 3597,
	4239, 4428, 2548, 2695, 3519, 889, 1726, 3305, 2346, 2298,
	3988, 4451, 4378, 3495, 3929, 3874, 4208, 4007, 683, 4234,
	4138, 3545, 2301, 4127, 3968, 4224, 3772, 913, 1861, 4307,
	4120, 938, 3631, 2986, 3413, 3514, 3903, 2693, 3822, 4275,
	1190, 1039, 4036, 2946, 3494, 3902, 3930, 3160, 3219, 4207,
	4190, 1276, 1874, 3900, 4014, 2191, 1883, 2929, 745, 4009,
	193, 193, 960, 4008, 648, 3726, 2838, 607, 2324, 3753,
	3729, 2972, 4059, 2427, 607, 5, 1996, 3846, 607, 2674,
	4062, 61, 3630, 2314, 644, 647, 652, 647, 2823, 647,
	3801, 2389, 2932, 2543, 2353, 2419, 3552, 3512, 3215, 647,
	3419, 3414, 2500, 2807, 2649, 3854, 3069, 2906, 3818, 2910,
	3285, 607, 607, 607, 607, 592, 3355, 710, 647, 647,
	3423, 647, 710, 2383, 3309, 780, 1756, 710, 2839, 710,
	3736, 2341, 4, 2316, 758, 2768, 760, 3223, 3692, 647,
	3760, 647, 2376, 60, 647, 3503, 1199, 651, 1909, 18,
	1908, 17, 2283, 2466, 708, 2625, 597, 3522, 3067, 742,
	3526, 958, 627, 2892, 742, 2336, 742, 2403, 978, 2980,
	599, 73, 193, 193, 2339, 1907, 12, 3278, 2793, 3454,
	1906, 11, 2542, 1026, 2515, 3001, 3339, 2964, 2428, 2467,
	1930, 2407, 1140, 1940, 1944, 2406, 2394, 2408, 1882, 2379,
	1936, 1969, 3193, 2281, 2338, 4235, 2785, 1863, 626, 2719,
	604, 2302, 839, 2869, 875, 1150, 1736, 623, 1195, 879,
	2064, 1071, 2547, 3114, 60, 2445, 946, 918, 1980, 1956,
	18, 926, 17, 2496, 985, 2315, 2381, 606, 1916, 2393,
	184, 2355, 2319, 2814, 1862, 2323, 2312, 2322, 786, 786,
	856, 2796, 73, 2321, 694, 1728, 1836, 12, 2272, 2235,
	2909, 2236, 11, 2277, 1237, 2175, 1189, 2245, 2185, 1066,
	964, 837, 1230, 2242, 1730, 707, 743, 2444, 777, 1005,
	1007, 2443, 91, 2196, 885, 2331, 876, 1220, 643, 1218,
	906, 1231, 89, 784, 154, 1749, 153, 787, 112, 615,
	1155, 1241, 1955, 1221, 1889, 1219, 864, 1187, 1937, 865,
	172, 1064, 1004, 613, 2756, 843, 622, 71, 72, 4536,
	2878, 2696, 1130, 4527, 4375, 3843, 4374, 1274, 4412, 1130,
	1244, 4215, 4460, 1131, 1256, 1257, 1258, 2955, 4525, 1274,
	1131, 4459, 1244, 2877, 4057, 3878, 1846, 4412, 4438, 1847,
	4460, 3876, 2879, 1852, 744, 1844, 1000, 4089, 2197, 1041,
	1849, 1853, 1848, 1244, 1850, 1852, 2288, 1844, 1851, 1267,
	1268, 1845, 1849, 1853, 1848, 1130, 1850, 133, 1854, 1242,
	4436, 593, 593, 1845, 2742, 4420, 1131, 591, 1844, 1842,
	1854, 595, 594, 618, 1842, 2743, 4411, 4391, 4384, 2190,
	4366, 1000, 2307, 3668, 1845, 4412, 4392, 2773, 4349, 4072,
	855, 2192, 2193, 3168, 2755, 4305, 4304, 3711, 4354, 4292,
	4254, 4248, 767, 768, 1842, 1842, 4221, 1043, 2334, 4255,
	4249, 4353, 2334, 4198, 4197, 2918, 4195, 4328, 1206, 4175,
	1196, 850, 4196, 4196, 4174, 4196, 912, 911, 1842, 1842,
	4171, 820, 4169, 1842, 4088, 4086, 3982, 3967, 904, 4172,
	3956, 4170, 3938, 4089, 1133, 3711, 3966, 3925, 2783, 3957,
	4094, 3937, 4072, 4070, 1208, 3827, 1133, 1211, 3817, 849,
	851, 853, 857, 1210, 3828, 3807, 3789, 2334, 3720, 3719,
	3710, 3426, 1209, 3687, 2879, 3788, 3672, 3721, 1133, 3711,
	3136, 3137, 3138, 3139, 3685, 3627, 3517, 3626, 1212, 3625,
	1243, 2741, 1274, 3686, 3628, 1244, 2334, 3619, 2334, 1256,
	1257, 1258, 1842, 3567, 3537, 1967, 2334, 3288, 3242, 3241,
	3154, 1846, 2879, 3538, 1847, 3482, 1274, 842, 1852, 1244,
	1844, 3109, 3451, 3232, 1842, 1849, 1853, 1848, 2918, 1850,
	1042, 1842, 2334, 1851, 1267, 1268, 1845, 1274, 998, 2821,
	1244, 3149, 3098, 1854, 1844, 3025, 3012, 3459, 1244, 2881,
	1842, 1842, 2860, 2778, 3026, 3013, 2474, 2772, 2882, 2262,
	1845, 2861, 2779, 2189, 2173, 1844, 2773, 1854, 3125, 2763,
	2168, 903, 903, 1844, 924, 2746, 2744, 2662, 1842, 607,
	2421, 1845, 2335, 840, 1842, 1842, 1842, 612, 1854, 2422,
	903, 2334, 607, 2294, 933, 607, 607, 3986, 2290, 1843,
	607, 607, 1133, 607, 81, 710, 710, 1842, 1842, 710,
	1249, 1250, 1251, 1252, 3139, 1252, 1142, 916, 1913, 1913,
	647, 647, 1044, 3252, 3562, 912, 1913, 963, 845, 3632,
	920, 844, 939, 920, 919, 4242, 873, 919, 1142, 968,
	963, 1196, 948, 949, 920, 607, 952, 912, 919, 1142,
	3014, 1913, 1045, 2627, 841, 1046, 3015, 847, 1274, 1047,
	647, 1244, 4465, 4296, 1922, 1256, 1257, 1258, 3229, 4287,
	4206, 1884, 4069, 4068, 4067, 607, 607, 1846, 4076, 4027,
	1847, 1048, 4243, 4060, 1852, 1877, 1844, 3915, 3895, 3831,
	871, 1849, 1853, 1848, 3808, 1850, 78, 3779, 4240, 1851,
	1267, 1268, 1845, 1151, 1152, 1151, 1152, 75, 3824, 1854,
	3691, 76, 3492, 3490, 3489, 3488, 1153, 4526, 1149, 1051,
	3287, 3296, 3203, 75, 3163, 647, 647, 76, 3151, 2968,
	3178, 80, 2497, 2937, 2924, 2917, 1049, 1038, 623, 623,
	3133, 2876, 1991, 1934, 3143, 3144, 3145, 80, 2820, 3939,
	2255, 2753, 2334, 1050, 2334, 2745, 2669, 2667, 2664, 2334,
	1002, 2663, 2289, 3181, 970, 4314, 2051, 2089, 1994, 1737,
	4501, 74, 3426, 3426, 976, 937, 3133, 873, 2307, 3426,
	3143, 3144, 3145, 2956, 1738, 1923, 3133, 872, 4497, 939,
	1052, 88, 3461, 647, 4394, 2956, 914, 4361, 4334, 78,
	4327, 4264, 4205, 3162, 4015, 4168, 1179, 4143, 1244, 4140,
	979, 4075, 4074, 1263, 1997, 4045, 2307, 1737, 1203, 1060,
	1128, 4041, 1253, 1254, 1255, 1263, 75, 1137, 1243, 2824,
	76, 1247, 1248, 1249, 1250, 1251, 1252, 903, 3972, 903,
	903, 962, 1133, 1247, 1248, 1249, 1250, 1251, 1252, 4281,
	80, 903, 903, 903, 903, 903, 3928, 917, 3892, 4313,
	3891, 3173, 903, 2862, 1247, 1248, 1249, 1250, 1251, 1252,
	2256, 3890, 3868, 1133, 928, 856, 862, 3648, 863, 3852,
	3851, 903, 3295, 3850, 856, 856, 3841, 2474, 3838, 870,
	3528, 903, 3715, 607, 903, 996, 3548, 595, 594, 3532,
	3516, 3508, 1751, 1865, 1933, 1866, 3425, 3328, 925, 1992,
	1875, 965, 3291, 3111, 607, 955, 3230, 1888, 969, 1213,
	975, 935, 936, 3275, 3267, 3264, 1093, 1274, 1921, 3237,
	1244, 954, 3205, 1878, 3198, 1191, 1191, 2687, 1207, 652,
	3093, 3825, 647, 647, 647, 647, 1751, 647, 1917, 1197,
	1198, 2991, 2990, 597, 1880, 1844, 2985, 927, 3120, 2811,
	2810, 607, 2766, 2736, 2734, 607, 2247, 2646, 2593, 2494,
	1959, 1845, 965, 2430, 1146, 1147, 1148, 2348, 1854, 2253,
	619, 1978, 74, 2152, 2016, 1899, 1856, 1141, 1890, 607,
	1030, 647, 1747, 1036, 1745, 1054, 1740, 1739, 1263, 607,
	651, 1738, 1157, 653, 1142, 607, 1154, 1253, 1254, 1255,
	664, 665, 666, 1920, 1144, 1065, 1247, 1248, 1249, 1250,
	1251, 1252, 923, 1995, 607, 1900, 688, 607, 2883, 3184,
	1180, 2423, 1912, 1841, 1077, 1177, 2308, 2808, 1174, 2694,
	1247, 1248, 1249, 1250, 1251, 1252, 3032, 1993, 1151, 1152,
	4453, 1092, 3405, 607, 2692, 3980, 2066, 1959, 1959, 1959,
	2024, 1247, 1248, 1249, 1250, 1251, 1252, 3979, 1233, 1247,
	1248, 1249, 1250, 1251, 1252, 607, 607, 3228, 1989, 3400,
	2013, 1165, 1274, 3675, 3093, 1244, 647, 647, 647, 647,
	647, 1987, 593, 4192, 1876, 846, 1158, 1159, 647, 647,
	1162, 847, 3042, 3034, 2575, 1997, 647, 857, 2571, 1181,
	1844, 3784, 2251, 903, 2066, 1274, 857, 857, 1244, 1205,
	920, 2752, 1977, 2039, 919, 1748, 1845, 4241, 2930, 3777,
	1027, 1091, 2029, 1854, 1201, 3133, 2032, 2033, 4136, 3143,
	3144, 3145, 2017, 1844, 1733, 607, 3119, 4135, 2628, 2629,
	4454, 3460, 1223, 1741, 1222, 1239, 3133, 1240, 3978, 1845,
	3143, 3144, 3145, 2511, 1263, 1974, 1854, 3971, 2105, 2106,
	1197, 1198, 3148, 1253, 1254, 1255, 74, 3274, 1838, 79,
	4351, 2988, 1247, 1248, 1249, 1250, 1251, 1252, 3177, 858,
	2499, 1968, 74, 1986, 1988, 3803, 1746, 2498, 903, 2036,
	2037, 2063, 965, 4404, 1839, 903, 903, 86, 3607, 2143,
	1183, 786, 1094, 607, 903, 1886, 647, 1960, 903, 903,
	903, 903, 903, 903, 903, 903, 903, 903, 903, 903,
	903, 903, 903, 903, 1891, 903, 786, 2040, 2139, 1914,
	1027, 3693, 965, 3814, 1094, 1918, 2983, 2413, 1970, 1903,
	2994, 1963, 3140, 3141, 3142, 2252, 2084, 1938, 990, 943,
	1984, 3134, 3135, 3136, 3137, 3138, 3139, 831, 824, 629,
	3783, 704, 1964, 965, 1748, 3133, 2446, 629, 2934, 3143,
	3144, 3145, 79, 2103, 1200, 1200, 631, 1200, 3140, 3141,
	3142, 3132, 1904, 980, 631, 74, 92, 3134, 3135, 3136,
	3137, 3138, 3139, 2441, 1960, 1960, 1960, 3134, 3135, 3136,
	3137, 3138, 3139, 4001, 2145, 3131, 2200, 2995, 2446, 2028,
	3620, 115, 3130, 1941, 2678, 3797, 1129, 1072, 1949, 1247,
	1248, 1249, 1250, 1251, 1252, 2447, 3796, 2077, 3561, 3376,
	3133, 2159, 3243, 2440, 3143, 3144, 3145, 2088, 986, 3804,
	2042, 2863, 1274, 2046, 2094, 1244, 2916, 1983, 1951, 115,
	2006, 2005, 2395, 2397, 2396, 2085, 2524, 3813, 2090, 2078,
	2079, 2080, 2163, 951, 829, 2000, 637, 2447, 766, 2578,
	1844, 2522, 1274, 2706, 679, 1244, 2137, 2162, 3450, 1256,
	1257, 1258, 3106, 693, 1073, 692, 1845, 2146, 691, 2131,
	690, 2121, 3598, 1854, 4189, 4152, 1173, 4054, 1852, 2004,
	1844, 4053, 3659, 2144, 2523, 1849, 1853, 1848, 4368, 1850,
	2997, 3393, 3608, 1851, 1267, 1268, 1845, 2176, 3390, 2521,
	2472, 78, 1171, 1854, 2574, 1859, 1274, 2022, 2156, 1244,
	2018, 2154, 2155, 4282, 1941, 2510, 2981, 1982, 4145, 3378,
	1119, 1247, 1248, 1249, 1250, 1251, 1252, 4435, 75, 2448,
	3415, 2935, 76, 3079, 1844, 2108, 974, 2699, 4367, 4434,
	3384, 3810, 3809, 4011, 4146, 1971, 1117, 2182, 838, 4285,
	1845, 1200, 80, 4165, 2188, 1200, 1200, 1854, 1971, 1981,
	4403, 3830, 972, 2165, 3024, 3595, 3589, 1074, 1857, 2174,
	1971, 2448, 1941, 2166, 3448, 3577, 1971, 2672, 2195, 2194,
	2199, 2622, 2454, 3994, 2900, 4193, 843, 3021, 661, 662,
	663, 2896, 4352, 2962, 2250, 2167, 3020, 655, 656, 657,
	658, 659, 660, 1971, 2849, 4312, 2533, 3520, 1274, 2065,
	2015, 1244, 2184, 1170, 3621, 1256, 1257, 1258, 3375, 2840,
	2619, 713, 2603, 116, 3427, 2100, 1971, 1846, 1971, 3065,
	1847, 2099, 1971, 2677, 1852, 1114, 1844, 3782, 3062, 2634,
	2633, 1849, 1853, 1848, 2001, 1850, 2632, 1971, 2631, 1851,
	1267, 1268, 1845, 2147, 1088, 2003, 2002, 1116, 2148, 1854,
	2616, 116, 2151, 2615, 2070, 1108, 2153, 2065, 1122, 1107,
	1090, 3564, 2249, 971, 1089, 1084, 1247, 1248, 1249, 1250,
	1251, 1252, 1078, 1111, 1076, 3770, 1069, 3857, 1068, 1067,
	1063, 4191, 632, 2679, 2480, 2996, 3002, 1172, 843, 2093,
	2092, 2091, 1184, 3306, 1999, 152, 2169, 2171, 3221, 1247,
	1248, 1249, 1250, 1251, 1252, 1971, 1902, 3140, 3141, 3142,
	4251, 1086, 3703, 1100, 4079, 2020, 3134, 3135, 3136, 3137,
	3138, 3139, 66, 4311, 1973, 1972, 65, 67, 3140, 3141,
	3142, 1118, 993, 2186, 2186, 1725, 78, 3134, 3135, 3136,
	3137, 3138, 3139, 630, 752, 3416, 2868, 973, 3875, 3127,
	2718, 630, 4006, 1228, 2438, 2097, 3402, 752, 752, 1070,
	3102, 2035, 4370, 75, 3038, 3035, 2512, 76, 903, 903,
	652, 903, 3823, 828, 682, 114, 903, 113, 903, 636,
	1096, 823, 4252, 677, 1948, 4278, 2025, 80, 2398, 3064,
	3022, 1027, 3307, 2540, 69, 118, 4277, 956, 842, 1274,
	2841, 2531, 1244, 752, 2526, 1217, 1256, 1257, 1258, 2618,
	1182, 3942, 64, 114, 1087, 113, 2852, 4310, 1846, 2439,
	3346, 1847, 3346, 2902, 4012, 1852, 3446, 1844, 1121, 2410,
	2025, 651, 1849, 1853, 1848, 956, 1850, 1901, 1075, 830,
	1851, 1267, 1268, 1845, 2268, 753, 3465, 3140, 3141, 3142,
	1854, 3791, 3464, 3560, 860, 4279, 3134, 3135, 3136, 3137,
	3138, 3139, 3572, 4369, 840, 3245, 2850, 3216, 3103, 4153,
	3624, 4004, 2009, 903, 3023, 647, 2987, 903, 903, 903,
	903, 4080, 3761, 1099, 4013, 3762, 2183, 4139, 3763, 2303,
	633, 2305, 2465, 2009, 3855, 1865, 1894, 4034, 3417, 2328,
	2328, 3534, 4050, 3623, 637, 2014, 3764, 1978, 647, 1893,
	842, 3730, 3140, 3141, 3142, 2954, 2898, 3002, 3995, 1097,
	4148, 3134, 3135, 3136, 3137, 3138, 3139, 2901, 3246, 2851,
	1113, 2885, 3373, 607, 3533, 841, 1247, 1248, 1249, 1250,
	1251, 1252, 2418, 3766, 3420, 1102, 3281, 4483, 1263, 3622,
	2601, 1101, 2429, 3765, 4482, 4150, 1751, 1253, 1254, 1255,
	647, 4149, 3609, 3767, 1978, 2024, 1247, 1248, 1249, 1250,
	1251, 1252, 3594, 2452, 79, 4078, 840, 838, 1110, 866,
	597, 1112, 4018, 2468, 647, 754, 638, 1858, 607, 4433,
	2459, 3063, 3282, 4033, 2266, 947, 2260, 866, 868, 4142,
	2949, 1748, 3601, 607, 607, 4308, 2897, 1978, 3157, 1748,
	4270, 1229, 2273, 1895, 3991, 3272, 1085, 2502, 2458, 2506,
	1247, 1248, 1249, 1250, 1251, 1252, 2391, 3403, 2008, 2495,
	1120, 2478, 2479, 1216, 2026, 3039, 3036, 1185, 2027, 607,
	2516, 1733, 3347, 755, 3347, 3360, 826, 841, 2899, 2008,
	2254, 607, 2263, 2267, 2057, 2269, 3834, 3449, 2940, 1215,
	689, 2469, 2286, 1001, 4253, 647, 647, 3340, 705, 4125,
	2285, 3439, 836, 634, 674, 607, 836, 2888, 2026, 607,
	957, 1098, 2027, 2382, 3438, 1095, 1175, 861, 3239, 2400,
	4356, 903, 2382, 3768, 3769, 68, 1156, 2481, 3280, 1160,
	1161, 3348, 70, 3348, 1263, 1126, 2414, 3733, 1145, 180,
	2492, 4472, 2310, 1253, 1254, 1255, 4276, 1103, 2114, 4478,
	4341, 4383, 1247, 1248, 1249, 1250, 1251, 1252, 2380, 3713,
	3773, 2475, 3330, 2464, 2771, 2566, 2118, 66, 2720, 2449,
	2117, 65, 67, 2723, 3349, 2330, 3349, 3530, 2724, 3943,
	3935, 78, 647, 710, 3953, 2725, 710, 652, 710, 710,
	4535, 2311, 4531, 2648, 2722, 2653, 2654, 1134, 4534, 3421,
	3954, 1138, 635, 3936, 4530, 4508, 1123, 4507, 75, 4523,
	2559, 4522, 76, 903, 4510, 2306, 2562, 2563, 4509, 647,
	708, 2490, 867, 742, 4513, 742, 742, 2333, 4488, 4487,
	4514, 4468, 80, 4024, 903, 4511, 4469, 1163, 2401, 69,
	867, 4512, 903, 2116, 3297, 1169, 4538, 1062, 651, 79,
	903, 3271, 2577, 2948, 982, 2749, 825, 64, 2328, 4485,
	3279, 2652, 74, 2416, 2431, 2432, 2433, 2434, 2435, 2974,
	2417, 4060, 3799, 2415, 4471, 639, 3600, 636, 706, 2420,
	641, 903, 903, 2976, 673, 2611, 2647, 903, 2613, 2614,
	1168, 989, 2656, 3774, 4490, 3331, 2115, 856, 3558, 2477,
	4489, 2721, 2952, 903, 903, 1125, 3952, 4529, 903, 4528,
	2943, 2847, 2691, 1000, 652, 2572, 2673, 903, 2483, 2576,
	3361, 832, 834, 903, 4492, 2626, 2655, 2482, 2424, 1966,
	4491, 4493, 4494, 597, 903, 1263, 1109, 953, 3515, 903,
	903, 903, 4097, 3362, 1253, 1254, 1255, 4454, 1191, 903,
	4416, 2697, 4337, 1247, 1248, 1249, 1250, 1251, 1252, 2762,
	2973, 4336, 4450, 4441, 4477, 4230, 4446, 2550, 1865, 903,
	4444, 4225, 4445, 4447, 903, 651, 3204, 2795, 2795, 710,
	4517, 2328, 2795, 2795, 2795, 4376, 2329, 2329, 2735, 4232,
	3724, 3592, 3544, 1167, 988, 2819, 3186, 2580, 4227, 597,
	2549, 2579, 2874, 607, 2555, 607, 607, 4226, 999, 1875,
	607, 607, 3792, 2450, 4228, 2399, 2597, 2344, 2011, 1186,
	3496, 2564, 2058, 2055, 2569, 2067, 1990, 2332, 3708, 850,
	2538, 2057, 4238, 647, 4107, 2856, 193, 2534, 4103, 4104,
	4236, 3709, 4244, 4245, 3740, 3493, 3946, 4106, 2620, 2621,
	4102, 3944, 2299, 2300, 2770, 3947, 3525, 2769, 4159, 4243,
	4443, 4158, 4448, 2754, 4237, 4476, 3314, 3920, 2645, 2537,
	2329, 2829, 597, 2539, 607, 4419, 3003, 2637, 752, 2640,
	2056, 82, 83, 84, 85, 4084, 856, 752, 752, 2630,
	4158, 4159, 2192, 2193, 2828, 1917, 4229, 2668, 3112, 3113,
	3917, 2536, 932, 4083, 2676, 2680, 2769, 2671, 3315, 2059,
	2682, 607, 607, 3707, 2886, 2503, 2681, 2188, 2780, 3739,
	827, 2690, 3919, 3918, 2689, 773, 2688, 668, 2871, 857,
	4243, 903, 2727, 2727, 4333, 1959, 2816, 2817, 3335, 2950,
	68, 2304, 3316, 3317, 3318, 2691, 2836, 70, 2767, 2841,
	2853, 2854, 2757, 678, 2831, 903, 2293, 179, 2715, 1200,
	2716, 1755, 2705, 4372, 4484, 1200, 1200, 2703, 856, 856,
	1727, 2947, 3819, 3010, 4052, 2865, 2867, 2961, 2501, 2963,
	3068, 3584, 2157, 3443, 2473, 4373, 3442, 2739, 3214, 2072,
	2071, 2919, 2732, 3192, 2791, 2789, 2790, 2788, 1919, 752,
	2748, 2737, 2944, 1869, 2864, 1755, 1868, 1755, 3004, 2260,
	2292, 2936, 3194, 2758, 2759, 2764, 3506, 2907, 3, 3189,
	2908, 2497, 2776, 2775, 3188, 4537, 2803, 4521, 2873, 2774,
	752, 2873, 4520, 2802, 2800, 752, 2799, 1200, 2792, 4519,
	4466, 3969, 2798, 2804, 2805, 2806, 2845, 2818, 4010, 4157,
	2889, 4155, 3549, 3323, 903, 2813, 2786, 2791, 2789, 2790,
	2788, 3238, 2784, 2787, 79, 607, 2842, 2848, 2812, 3257,
	2660, 2604, 2872, 2350, 2297, 1998, 2967, 74, 2024, 1952,
	1947, 2928, 1135, 1105, 1104, 1082, 2857, 994, 915, 2866,
	1242, 625, 2815, 621, 2815, 3455, 3115, 1200, 3060, 186,
	620, 4301, 4217, 4216, 4108, 3933, 2685, 2685, 3027, 3028,
	2875, 647, 647, 3914, 3660, 2329, 3536, 2844, 857, 3456,
	2612, 647, 3394, 3391, 3258, 2880, 2034, 868, 2926, 2927,
	2031, 2905, 2786, 2791, 2789, 2790, 2788, 2966, 2784, 2787,
	2931, 869, 3105, 2696, 3570, 2965, 2684, 3569, 903, 2313,
	1873, 752, 3611, 1872, 4397, 3806, 3000, 903, 2941, 903,
	903, 3612, 3610, 903, 903, 903, 3126, 903, 2809, 2717,
	583, 856, 3104, 2958, 2960, 1748, 2683, 2923, 903, 2197,
	3613, 624, 1960, 4396, 2911, 2975, 4290, 3883, 3880, 903,
	903, 2922, 2982, 3678, 2993, 903, 3655, 903, 3110, 3650,
	857, 857, 2989, 3649, 3412, 3411, 3404, 3399, 3089, 752,
	903, 3312, 3085, 3161, 3084, 3083, 903, 3094, 3082, 3081,
	3080, 903, 903, 3033, 3076, 3075, 3066, 3055, 3053, 3041,
	903, 3040, 3037, 3054, 2303, 2971, 2329, 2970, 2329, 3029,
	1865, 2969, 3043, 2702, 2328, 2704, 2244, 2328, 2642, 2617,
	2598, 2243, 2244, 2150, 2226, 3197, 2107, 2104, 2795, 2795,
	2795, 2795, 2795, 2102, 2101, 2087, 2083, 2082, 2081, 2076,
	2075, 903, 903, 2069, 903, 2068, 2931, 2054, 2053, 2052,
	2050, 2023, 1978, 3058, 2019, 3226, 597, 3505, 2786, 2791,
	2789, 2790, 2788, 2012, 2784, 2787, 3504, 1870, 2698, 1200,
	1200, 3749, 903, 2202, 2149, 2203, 3745, 2666, 3031, 2665,
	859, 848, 627, 3989, 1755, 2273, 4324, 3179, 3180, 4115,
	3272, 4358, 3639, 903, 903, 3635, 905, 850, 4357, 3555,
	850, 3088, 912, 607, 3244, 1875, 2835, 3101, 2594, 2591,
	2223, 2587, 3602, 3166, 3167, 3169, 2476, 2221, 2224, 2220,
	3096, 2222, 1200, 3097, 2045, 647, 3046, 1035, 1029, 1180,
	3051, 903, 607, 908, 4437, 3266, 2738, 909, 1041, 907,
	2086, 3696, 2259, 3231, 3273, 3742, 3743, 2061, 3583, 2429,
	602, 3183, 2258, 119, 3227, 647, 2060, 850, 3632, 4463,
	3286, 3697, 4462, 2727, 2727, 642, 3128, 3256, 3236, 3086,
	603, 2347, 3546, 857, 3234, 2691, 607, 1000, 3751, 3744,
	3310, 3747, 3748, 3750, 3746, 2675, 2328, 2468, 2727, 2727,
	854, 3999, 3998, 3325, 3424, 3303, 3225, 3629, 3070, 3165,
	3156, 3540, 3107, 1130, 1727, 3087, 1043, 2260, 1978, 2978,
	3867, 2489, 3341, 2457, 1131, 3174, 1875, 2351, 3265, 1875,
	1943, 1875, 3357, 3211, 3175, 3182, 3172, 3185, 3250, 1935,
	3251, 3263, 3195, 3196, 3191, 1885, 3379, 1879, 997, 987,
	3299, 981, 2260, 977, 959, 3356, 4371, 2907, 3283, 3737,
	2908, 3152, 3866, 3440, 2382, 3337, 2516, 3208, 3383, 3187,
	3057, 3007, 3190, 3352, 3301, 2469, 3217, 3294, 1941, 3233,
	3206, 2959, 2382, 2382, 3005, 2977, 3293, 3364, 3344, 3320,
	1748, 3351, 2945, 3353, 2832, 2455, 2451, 3319, 3260, 3199,
	3200, 3201, 3202, 2349, 2345, 2160, 2158, 2048, 2044, 2380,
	3358, 3247, 2145, 1953, 1939, 1931, 2691, 1929, 1911, 1164,
	3255, 1139, 3369, 3372, 3261, 3259, 1136, 1132, 1127, 1115,
	1083, 1056, 1053, 3637, 3253, 2228, 1034, 2169, 2171, 1042,
	1028, 3636, 2639, 1910, 947, 2232, 822, 2230, 4329, 4220,
	903, 2227, 652, 2229, 2231, 4162, 4151, 3284, 961, 4071,
	903, 903, 3847, 3869, 3785, 3723, 903, 903, 3640, 3290,
	2727, 3596, 3382, 903, 3582, 903, 903, 903, 903, 903,
	903, 903, 903, 903, 903, 903, 903, 3300, 2907, 903,
	3302, 2908, 3298, 3573, 3441, 903, 3321, 3292, 2827, 3324,
	903, 3327, 3336, 3486, 2462, 903, 2456, 1176, 1965, 903,
	1860, 1840, 4475, 651, 3365, 3370, 2760, 2761, 3357, 912,
	3072, 3377, 3073, 3074, 2911, 903, 3453, 4455, 4288, 2328,
	2328, 1044, 3371, 2328, 3374, 3444, 2172, 2170, 3262, 2686,
	2953, 3497, 912, 912, 2795, 912, 710, 850, 3381, 4030,
	2460, 3990, 2030, 3213, 1214, 2164, 852, 1204, 3556, 3386,
	3805, 1045, 4268, 3800, 1046, 3563, 3993, 3802, 1047, 1978,
	647, 2241, 4144, 3798, 1892, 3467, 2626, 3793, 2843, 2360,
	1884, 2329, 2846, 2354, 2329, 3431, 2833, 2377, 2373, 578,
	1048, 3547, 579, 3268, 185, 2062, 3358, 2405, 607, 3401,
	1898, 1897, 3812, 3811, 3406, 3571, 4017, 3568, 1875, 3418,
	3332, 2463, 3430, 3535, 3531, 2602, 903, 3311, 3313, 2951,
	640, 2461, 992, 1124, 3513, 2098, 4029, 647, 1051, 3308,
	2641, 2437, 2119, 2921, 2920, 38, 1978, 37, 36, 35,
	34, 33, 32, 31, 58, 1049, 710, 57, 1941, 3541,
	56, 55, 54, 3550, 53, 2911, 52, 51, 50, 3581,
	49, 48, 1050, 47, 2468, 2233, 46, 45, 44, 903,
	3574, 43, 3539, 42, 3509, 41, 40, 39, 1978, 30,
	29, 3616, 28, 3599, 27, 3559, 26, 25, 24, 23,
	22, 21, 1200, 20, 19, 59, 16, 1905, 103, 1052,
	903, 930, 3491, 1915, 2727, 2727, 2727, 2727, 2727, 2727,
	2727, 2727, 2727, 2727, 2727, 2727, 3590, 2998, 3487, 3587,
	2979, 3338, 3165, 2169, 2171, 155, 3437, 3618, 2120, 1031,
	4347, 3529, 3510, 2514, 4126, 3588, 3220, 90, 4005, 2893,
	3553, 2890, 2469, 3345, 3542, 3218, 3615, 4035, 3354, 3224,
	2340, 3222, 2337, 2329, 2329, 2237, 2238, 2239, 2240, 4415,
	3518, 2382, 2234, 4442, 4096, 195, 903, 3364, 4233, 3604,
	3941, 3728, 4223, 3551, 3501, 3502, 3566, 3722, 3507, 3511,
	3575, 2426, 77, 3576, 3916, 3706, 2291, 1867, 63, 2329,
	601, 3633, 600, 4219, 3665, 874, 903, 2999, 3958, 4119,
	903, 903, 903, 3752, 3527, 3741, 3212, 87, 3499, 1871,
	3524, 3591, 3523, 4105, 4101, 4100, 3176, 2296, 3643, 3521,
	3603, 2309, 1855, 1200, 15, 14, 13, 3605, 10, 9,
	8, 7, 6, 3908, 2657, 1755, 2658, 3644, 2659, 3906,
	3907, 2661, 3905, 1236, 2248, 654, 903, 2328, 3652, 1271,
	4077, 3654, 3485, 2670, 2751, 3702, 903, 903, 903, 3671,
	3899, 2274, 3614, 1744, 806, 2626, 805, 790, 792, 1755,
	808, 807, 791, 607, 3641, 2626, 3329, 3775, 1143, 3226,
	789, 3754, 3557, 3682, 3645, 607, 788, 814, 1200, 3357,
	607, 3092, 712, 3638, 2264, 898, 897, 712, 750, 2271,
	2747, 3642, 712, 1742, 712, 892, 893, 888, 1227, 1224,
	3695, 750, 750, 2535, 3009, 3030, 2541, 4051, 2638, 1755,
	1278, 3758, 812, 812, 1273, 3757, 2, 1, 0, 3586,
	0, 0, 0, 607, 752, 0, 0, 0, 1755, 0,
	3778, 0, 3310, 3786, 0, 0, 0, 0, 710, 0,
	0, 647, 0, 3704, 0, 3845, 0, 750, 3839, 0,
	0, 0, 0, 0, 0, 0, 0, 3358, 0, 3357,
	652, 0, 647, 647, 0, 2329, 0, 0, 0, 0,
	3705, 0, 3780, 0, 3718, 742, 2329, 2329, 0, 0,
	2329, 752, 3356, 0, 0, 0, 0, 0, 3714, 3816,
	3862, 3833, 0, 2329, 0, 3738, 0, 3734, 0, 0,
	652, 710, 0, 0, 0, 3815, 0, 3070, 3887, 3877,
	3225, 0, 3836, 752, 752, 3771, 3776, 3790, 0, 3735,
	0, 651, 0, 3787, 3901, 3795, 903, 3848, 3820, 3794,
	3755, 0, 0, 0, 3860, 0, 0, 3358, 742, 60,
	2691, 0, 3357, 0, 0, 18, 0, 17, 0, 0,
	0, 3853, 710, 0, 3921, 3931, 0, 903, 0, 0,
	0, 651, 903, 0, 3842, 3922, 3840, 73, 903, 3680,
	3681, 3856, 12, 3858, 3885, 3725, 2727, 11, 0, 0,
	752, 0, 3717, 0, 0, 3859, 3070, 0, 0, 3070,
	0, 0, 0, 0, 3870, 0, 3871, 0, 0, 3964,
	0, 0, 0, 0, 0, 0, 196, 3882, 0, 0,
	3884, 2329, 2907, 3889, 3886, 2908, 0, 0, 3896, 3898,
	3358, 3677, 0, 0, 3965, 0, 0, 0, 0, 3923,
	3513, 3932, 0, 0, 0, 3959, 0, 607, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3948, 3949, 0,
	0, 3950, 3951, 856, 0, 0, 903, 0, 3913, 3927,
	0, 3756, 3974, 0, 3926, 0, 4003, 1200, 0, 3976,
	710, 0, 3578, 3579, 2328, 0, 1200, 1200, 4002, 3996,
	0, 3924, 903, 903, 0, 0, 0, 0, 607, 0,
	3970, 0, 0, 3006, 0, 3008, 0, 0, 0, 903,
	0, 3981, 0, 0, 3960, 0, 0, 4028, 0, 0,
	3977, 0, 0, 3973, 3669, 3670, 0, 0, 3975, 3673,
	3674, 0, 0, 903, 3985, 3984, 0, 4020, 3987, 0,
	3983, 3992, 0, 4025, 0, 0, 0, 4056, 0, 751,
	903, 0, 0, 0, 0, 903, 4000, 0, 1875, 4037,
	0, 1865, 751, 751, 0, 0, 4026, 0, 4046, 2429,
	0, 4023, 4019, 4032, 0, 0, 0, 4031, 903, 752,
	4022, 0, 0, 4098, 0, 3056, 0, 0, 0, 2911,
	4047, 3553, 4095, 1875, 0, 1875, 3934, 0, 4048, 4085,
	0, 2727, 0, 0, 2329, 0, 0, 607, 751, 4061,
	3754, 0, 0, 4128, 0, 0, 0, 0, 4124, 0,
	4082, 4064, 4065, 0, 0, 0, 0, 0, 0, 0,
	4063, 0, 4063, 4063, 0, 0, 0, 0, 0, 0,
	4122, 597, 0, 0, 1755, 0, 2329, 0, 0, 0,
	4092, 4131, 4087, 4137, 4121, 4113, 0, 4116, 4093, 647,
	0, 752, 752, 0, 0, 3070, 712, 712, 3099, 0,
	4133, 0, 856, 4090, 4132, 0, 0, 4118, 0, 0,
	0, 0, 1875, 0, 0, 712, 652, 0, 0, 0,
	0, 4129, 3955, 903, 0, 857, 0, 0, 0, 4134,
	712, 712, 4141, 0, 712, 0, 4147, 0, 0, 0,
	0, 3901, 0, 903, 0, 903, 903, 0, 4154, 903,
	903, 903, 4160, 4156, 0, 4179, 2329, 0, 0, 4164,
	3931, 0, 0, 0, 4182, 903, 0, 0, 903, 4218,
	0, 0, 0, 0, 4177, 4166, 0, 651, 0, 0,
	0, 0, 0, 4183, 812, 4185, 1875, 1200, 0, 4202,
	4181, 0, 4194, 0, 2726, 2731, 1755, 1755, 1755, 4201,
	0, 903, 4250, 0, 4200, 0, 4038, 4039, 0, 4213,
	4214, 3357, 0, 0, 903, 0, 4222, 0, 4269, 0,
	710, 710, 0, 0, 0, 4263, 0, 4271, 4272, 4176,
	4266, 4178, 0, 4180, 0, 0, 4259, 2727, 0, 2329,
	4261, 4256, 4257, 0, 0, 0, 0, 0, 4246, 2329,
	0, 0, 0, 0, 0, 752, 4260, 742, 742, 0,
	0, 0, 0, 4262, 4295, 4265, 710, 0, 0, 4081,
	0, 0, 0, 4302, 0, 0, 903, 4283, 0, 4280,
	903, 0, 2024, 4298, 4299, 0, 4317, 1875, 1875, 3358,
	4291, 4320, 4293, 1200, 752, 4289, 903, 903, 4294, 0,
	903, 4297, 0, 742, 0, 4286, 4309, 4273, 1865, 0,
	0, 4037, 2303, 0, 0, 0, 0, 0, 0, 4109,
	4110, 4111, 4112, 4315, 4316, 752, 4128, 647, 647, 4321,
	4331, 4306, 750, 0, 857, 3357, 0, 710, 0, 4342,
	0, 750, 750, 0, 4332, 0, 4330, 4326, 0, 4318,
	4319, 0, 4346, 0, 0, 4339, 4340, 0, 4348, 4338,
	4335, 0, 712, 0, 712, 712, 4344, 4343, 4303, 0,
	4121, 2329, 647, 0, 4350, 4355, 712, 712, 712, 712,
	712, 0, 0, 0, 0, 0, 4345, 712, 856, 0,
	0, 0, 4362, 0, 4231, 0, 4364, 0, 4379, 903,
	0, 0, 0, 0, 4129, 903, 712, 0, 0, 4363,
	0, 0, 4382, 3358, 0, 1753, 712, 0, 0, 712,
	0, 0, 4359, 0, 4388, 0, 4390, 0, 4381, 4203,
	4204, 0, 903, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 903, 4395, 4407, 4408, 4409, 3931, 4387, 812,
	4393, 0, 4389, 750, 4386, 0, 812, 647, 4406, 1753,
	0, 1753, 0, 3357, 4417, 4418, 0, 4422, 4405, 4398,
	4399, 4410, 0, 0, 4424, 0, 4402, 4432, 0, 0,
	4426, 0, 0, 4379, 750, 4421, 4425, 0, 0, 750,
	0, 0, 0, 4040, 4423, 4042, 0, 4044, 4400, 4452,
	2329, 0, 0, 4457, 0, 4449, 0, 0, 0, 4456,
	0, 0, 903, 0, 0, 4458, 0, 0, 0, 0,
	0, 4461, 3447, 4464, 0, 2727, 2727, 0, 0, 2727,
	0, 0, 710, 0, 0, 0, 0, 812, 4479, 0,
	752, 3358, 4480, 4432, 4473, 4474, 0, 0, 0, 4496,
	0, 4414, 4495, 710, 710, 4504, 0, 0, 4506, 4499,
	4502, 4503, 0, 4500, 0, 0, 2895, 0, 4379, 4481,
	4516, 0, 4515, 0, 2894, 2900, 4173, 4518, 0, 0,
	0, 0, 2896, 0, 4432, 0, 0, 4506, 0, 4524,
	742, 742, 0, 0, 0, 752, 0, 4379, 0, 4532,
	4533, 0, 0, 0, 0, 750, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	857, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 812, 0, 812, 0, 2712, 712, 2710,
	0, 0, 0, 2708, 0, 2709, 2711, 0, 0, 0,
	0, 0, 0, 2891, 0, 3122, 3123, 0, 0, 0,
	812, 0, 0, 750, 0, 1755, 0, 1755, 2329, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1755, 0,
	3146, 3147, 0, 751, 0, 0, 0, 0, 0, 4385,
	0, 1274, 751, 751, 1244, 0, 0, 0, 1256, 1257,
	1258, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1846, 0, 0, 1847, 0, 0, 4401, 1852, 0, 1844,
	0, 0, 0, 712, 1849, 1853, 1848, 0, 1850, 0,
	712, 712, 1851, 1267, 1268, 1845, 0, 0, 0, 712,
	812, 0, 1854, 712, 712, 712, 712, 712, 712, 712,
	712, 712, 712, 712, 712, 712, 712, 712, 712, 0,
	712, 0, 0, 2241, 0, 4431, 1754, 0, 1753, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2329, 0, 0, 0, 0, 2903, 0,
	0, 0, 2329, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 751, 0, 3646, 3647, 0, 0,
	1754, 0, 1754, 0, 0, 1041, 0, 0, 0, 0,
	0, 0, 0, 0, 2902, 0, 0, 0, 0, 0,
	0, 4431, 0, 0, 1274, 751, 3664, 1244, 0, 0,
	751, 1256, 1257, 1258, 0, 0, 0, 2904, 0, 0,
	0, 0, 3276, 1846, 0, 0, 1847, 2713, 0, 0,
	1852, 0, 1844, 3679, 0, 0, 0, 1849, 1853, 1848,
	0, 1850, 4431, 0, 0, 1851, 1267, 1268, 1845, 0,
	0, 0, 0, 1043, 0, 1854, 0, 0, 1274, 0,
	0, 1244, 0, 0, 0, 1256, 1257, 1258, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1846, 0, 0,
	1847, 0, 0, 0, 1852, 0, 1844, 2898, 0, 0,
	2329, 1849, 1853, 1848, 0, 1850, 0, 0, 2901, 1851,
	1267, 1268, 1845, 4429, 0, 0, 0, 0, 0, 1854,
	0, 0, 0, 1755, 0, 0, 0, 2237, 2238, 2239,
	2240, 0, 0, 0, 2714, 0, 751, 0, 0, 0,
	1274, 0, 0, 1244, 752, 0, 0, 1256, 1257, 1258,
	0, 0, 0, 0, 781, 0, 0, 0, 0, 1846,
	0, 0, 1847, 0, 0, 0, 1852, 0, 1844, 0,
	0, 0, 0, 1849, 1853, 1848, 0, 1850, 0, 4429,
	0, 1851, 1267, 1268, 1845, 0, 1042, 2897, 0, 0,
	0, 1854, 0, 0, 751, 0, 0, 0, 0, 0,
	0, 0, 1274, 0, 0, 1244, 0, 0, 0, 1256,
	1257, 1258, 0, 0, 0, 0, 0, 0, 0, 0,
	4429, 1846, 0, 752, 1847, 0, 752, 0, 1852, 2899,
	1844, 0, 0, 616, 616, 1849, 1853, 1848, 0, 1850,
	0, 0, 0, 1851, 1267, 1268, 1845, 0, 0, 0,
	0, 0, 0, 1854, 671, 0, 675, 0, 752, 0,
	680, 681, 0, 0, 686, 687, 3468, 3469, 3470, 3471,
	3472, 3473, 3474, 3475, 3476, 3477, 3478, 3479, 1044, 0,
	0, 0, 0, 0, 739, 0, 0, 0, 0, 0,
	756, 0, 759, 0, 761, 762, 763, 764, 765, 1754,
	0, 0, 770, 0, 0, 0, 775, 0, 1045, 0,
	782, 1046, 0, 0, 1274, 1047, 0, 1244, 0, 0,
	0, 1256, 1257, 1258, 0, 0, 0, 1884, 0, 0,
	0, 0, 0, 1846, 0, 0, 1847, 1048, 0, 0,
	1852, 0, 1844, 0, 0, 0, 0, 1849, 1853, 1848,
	0, 1850, 0, 0, 0, 1851, 1267, 1268, 1845, 0,
	1755, 0, 0, 0, 0, 1854, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1051, 0, 1263, 0, 0,
	0, 0, 0, 0, 0, 0, 1253, 1254, 1255, 0,
	0, 0, 1049, 4199, 0, 1247, 1248, 1249, 1250, 1251,
	1252, 0, 0, 0, 0, 0, 0, 0, 0, 1050,
	0, 0, 0, 712, 712, 0, 712, 0, 0, 0,
	0, 712, 0, 712, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1274, 0, 1052, 1244, 0, 0,
	0, 1256, 1257, 1258, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1846, 0, 0, 1847, 0, 0, 0,
	1852, 0, 1844, 0, 0, 0, 0, 1849, 1853, 1848,
	0, 1850, 0, 0, 0, 1851, 1267, 1268, 1845, 0,
	0, 0, 752, 0, 0, 1854, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 712, 0,
	1263, 0, 712, 712, 712, 712, 0, 0, 0, 1253,
	1254, 1255, 0, 0, 0, 0, 4184, 0, 1247, 1248,
	1249, 1250, 1251, 1252, 712, 712, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 812, 0, 0, 2356,
	0, 0, 0, 0, 1263, 812, 0, 2369, 0, 0,
	0, 0, 0, 1253, 1254, 1255, 752, 0, 0, 1753,
	4161, 0, 1247, 1248, 1249, 1250, 1251, 1252, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1753, 0, 0, 0, 0, 712, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2375, 812, 0, 0, 0, 0, 1263, 0, 0, 0,
	0, 0, 0, 0, 812, 1253, 1254, 1255, 0, 0,
	1755, 0, 3893, 0, 1247, 1248, 1249, 1250, 1251, 1252,
	0, 0, 1274, 1753, 2371, 1244, 0, 0, 0, 1256,
	1257, 1258, 752, 0, 0, 0, 0, 0, 750, 0,
	0, 1846, 1753, 0, 1847, 0, 0, 0, 1852, 0,
	1844, 0, 0, 0, 0, 1849, 1853, 1848, 1263, 1850,
	0, 0, 0, 1851, 1267, 1268, 1845, 1253, 1254, 1255,
	0, 0, 0, 1854, 3865, 0, 1247, 1248, 1249, 1250,
	1251, 1252, 0, 0, 0, 0, 712, 0, 882, 1274,
	0, 0, 1244, 0, 0, 750, 1256, 1257, 1258, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1846, 0,
	0, 1847, 2361, 0, 0, 1852, 0, 1844, 0, 616,
	0, 1755, 1849, 1853, 1848, 0, 1850, 750, 750, 0,
	1851, 1267, 1268, 1845, 2370, 0, 0, 0, 0, 1755,
	1854, 950, 0, 0, 0, 752, 0, 0, 712, 0,
	812, 712, 0, 712, 712, 0, 812, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1263, 0, 0, 0, 2366, 0, 0, 0, 712, 1253,
	1254, 1255, 0, 0, 991, 0, 3844, 995, 1247, 1248,
	1249, 1250, 1251, 1252, 750, 0, 0, 2363, 0, 712,
	0, 0, 0, 0, 0, 0, 0, 712, 0, 0,
	0, 0, 0, 3940, 0, 712, 0, 0, 2357, 0,
	0, 2368, 0, 712, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 712, 712, 0, 0,
	0, 0, 712, 0, 2356, 0, 0, 0, 1079, 0,
	0, 0, 2369, 2374, 0, 0, 0, 0, 712, 712,
	0, 1106, 0, 712, 0, 0, 0, 0, 0, 0,
	0, 0, 712, 0, 0, 0, 0, 0, 712, 0,
	1754, 0, 0, 0, 0, 894, 62, 0, 70, 712,
	1263, 2392, 0, 0, 712, 712, 712, 0, 0, 1253,
	1254, 1255, 0, 0, 712, 2367, 3821, 0, 1247, 1248,
	1249, 1250, 1251, 1252, 1754, 2375, 0, 0, 0, 0,
	0, 2364, 0, 0, 712, 0, 0, 0, 2362, 712,
	0, 0, 2372, 0, 712, 0, 712, 0, 0, 0,
	0, 0, 0, 0, 752, 2358, 0, 0, 0, 2371,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 596,
	598, 0, 0, 0, 1754, 0, 0, 62, 812, 2365,
	0, 2359, 62, 750, 0, 0, 0, 0, 0, 751,
	0, 0, 0, 1754, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 812, 812, 0,
	0, 0, 0, 0, 0, 0, 812, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 616,
	0, 752, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 751, 2361, 1753, 812,
	0, 0, 0, 0, 0, 812, 1896, 0, 0, 0,
	0, 0, 0, 0, 0, 750, 750, 0, 0, 2370,
	0, 0, 0, 1274, 0, 0, 1244, 0, 751, 751,
	1256, 1257, 1258, 0, 0, 0, 0, 1932, 0, 0,
	0, 0, 1846, 0, 0, 1847, 712, 0, 0, 1852,
	0, 1844, 0, 0, 0, 0, 1849, 1853, 1848, 2366,
	1850, 1755, 0, 3525, 1851, 1267, 1268, 1845, 0, 0,
	712, 0, 0, 0, 1854, 0, 0, 0, 1263, 0,
	0, 0, 2363, 0, 0, 0, 0, 1253, 1254, 1255,
	0, 0, 0, 0, 3701, 751, 1247, 1248, 1249, 1250,
	1251, 1252, 1274, 2357, 0, 1244, 2368, 0, 0, 1256,
	1257, 1258, 0, 0, 0, 0, 0, 2049, 0, 0,
	1753, 1753, 1753, 0, 0, 0, 1755, 0, 1852, 0,
	1844, 0, 0, 0, 0, 1849, 1853, 1848, 2074, 1850,
	0, 0, 0, 0, 0, 1263, 1845, 0, 2374, 0,
	0, 0, 0, 1854, 1253, 1254, 1255, 0, 0, 0,
	0, 3690, 0, 1247, 1248, 1249, 1250, 1251, 1252, 712,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 750,
	0, 0, 0, 70, 0, 0, 2352, 0, 2140, 0,
	0, 2142, 1755, 0, 0, 0, 0, 0, 0, 0,
	2367, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2364, 0, 750, 0,
	0, 0, 812, 2362, 0, 0, 0, 2372, 0, 0,
	0, 812, 0, 1755, 0, 0, 0, 0, 0, 0,
	2358, 0, 0, 1041, 0, 0, 0, 0, 0, 750,
	0, 3366, 0, 0, 0, 0, 0, 4322, 4323, 0,
	2060, 4325, 0, 712, 2365, 0, 2359, 0, 0, 709,
	0, 0, 712, 0, 712, 712, 0, 0, 712, 712,
	712, 0, 712, 0, 751, 0, 0, 0, 0, 0,
	0, 0, 0, 712, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 712, 712, 0, 0, 0, 0,
	712, 1043, 712, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 712, 0, 0, 0, 0,
	0, 712, 0, 0, 0, 0, 712, 712, 0, 0,
	0, 0, 0, 0, 0, 712, 0, 0, 0, 1754,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 712,
	0, 0, 712, 0, 0, 0, 751, 751, 0, 1274,
	0, 0, 1244, 0, 0, 0, 1256, 1257, 1258, 0,
	0, 0, 0, 0, 0, 0, 712, 712, 1846, 712,
	0, 1847, 0, 0, 0, 1852, 0, 1844, 0, 0,
	0, 0, 1849, 1853, 1848, 0, 1850, 0, 0, 0,
	1851, 1267, 1268, 1845, 0, 0, 0, 712, 0, 0,
	1854, 0, 0, 0, 0, 0, 793, 793, 0, 0,
	0, 0, 0, 0, 1042, 0, 0, 812, 712, 712,
	812, 0, 812, 0, 0, 596, 0, 0, 0, 0,
	0, 3340, 0, 0, 0, 812, 812, 0, 0, 812,
	0, 0, 0, 0, 750, 0, 0, 3363, 0, 0,
	0, 1754, 1754, 1754, 0, 0, 712, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 812, 0, 0, 0, 3367, 0, 0, 0,
	0, 0, 0, 0, 685, 0, 0, 0, 0, 3365,
	0, 0, 0, 0, 0, 0, 1259, 0, 0, 750,
	0, 0, 0, 0, 0, 0, 1044, 0, 0, 1263,
	751, 712, 712, 0, 0, 0, 0, 0, 1253, 1254,
	1255, 0, 0, 0, 0, 0, 0, 1247, 1248, 1249,
	1250, 1251, 1252, 0, 0, 0, 1045, 0, 0, 1046,
	0, 0, 0, 1047, 0, 0, 0, 712, 1259, 751,
	0, 0, 0, 0, 0, 1884, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1048, 0, 0, 0, 1753,
	812, 1753, 0, 0, 0, 0, 0, 0, 0, 646,
	751, 667, 1753, 669, 0, 0, 0, 0, 1263, 0,
	0, 0, 0, 0, 0, 0, 0, 1253, 1254, 1255,
	0, 0, 0, 1051, 0, 0, 1247, 1248, 1249, 1250,
	1251, 1252, 737, 738, 0, 740, 0, 0, 0, 0,
	1049, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 771, 0, 774, 0, 1050, 778, 3368,
	2981, 0, 0, 0, 0, 0, 0, 0, 0, 812,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 712, 0, 0, 0, 0,
	0, 0, 0, 0, 1052, 712, 712, 0, 0, 0,
	0, 712, 712, 0, 0, 0, 0, 0, 712, 812,
	712, 712, 712, 712, 712, 712, 712, 712, 712, 712,
	712, 712, 0, 929, 712, 0, 0, 0, 0, 0,
	712, 0, 0, 0, 0, 712, 0, 1731, 0, 0,
	712, 1734, 1735, 0, 712, 0, 0, 0, 0, 0,
	0, 0, 1997, 712, 0, 0, 0, 0, 0, 0,
	712, 0, 0, 0, 712, 712, 1274, 0, 712, 1244,
	0, 0, 0, 1256, 1257, 1258, 62, 0, 0, 0,
	0, 712, 0, 0, 0, 1846, 0, 0, 1847, 0,
	0, 0, 1852, 0, 1844, 0, 0, 0, 0, 1849,
	1853, 1848, 0, 1850, 0, 0, 0, 1851, 1267, 1268,
	1845, 0, 0, 812, 0, 751, 0, 1854, 0, 812,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 812, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 712, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1259, 0, 0, 1753, 0, 0,
	751, 1259, 0, 0, 3520, 1263, 0, 1259, 0, 0,
	0, 712, 0, 0, 1253, 1254, 1255, 0, 750, 0,
	0, 0, 0, 1247, 1248, 1249, 1250, 1251, 1252, 712,
	0, 0, 0, 0, 712, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 712, 0, 0, 0, 0,
	1754, 0, 1754, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 812, 1754, 0, 0, 2411, 0, 793, 0,
	0, 0, 0, 0, 0, 0, 1011, 750, 0, 0,
	750, 1012, 0, 0, 2425, 1021, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2442, 0, 0, 0,
	0, 0, 0, 812, 2453, 0, 0, 0, 0, 0,
	0, 712, 750, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 812, 0, 0,
	0, 0, 0, 2484, 2485, 2486, 0, 0, 0, 0,
	0, 712, 0, 0, 2493, 712, 712, 712, 1014, 0,
	0, 0, 2504, 0, 2508, 2509, 0, 0, 0, 0,
	2513, 0, 0, 2517, 2518, 0, 0, 2525, 0, 2527,
	2530, 0, 0, 0, 0, 0, 0, 1020, 0, 0,
	0, 0, 0, 2552, 2553, 0, 0, 2557, 2558, 0,
	0, 712, 712, 0, 0, 0, 0, 0, 0, 0,
	0, 712, 712, 712, 2567, 2568, 0, 0, 1025, 0,
	0, 0, 0, 0, 1753, 2581, 0, 2582, 2583, 2584,
	2585, 2586, 0, 0, 2588, 0, 2246, 0, 2592, 0,
	0, 0, 2595, 2596, 712, 0, 2599, 2600, 0, 812,
	2605, 2606, 0, 0, 0, 0, 2607, 2608, 2609, 0,
	0, 1010, 2610, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1008, 0, 966, 967, 0, 0, 0, 2623,
	0, 0, 2624, 0, 0, 0, 0, 0, 1015, 2635,
	2636, 0, 0, 0, 0, 2643, 0, 0, 0, 0,
	0, 0, 0, 712, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1003, 0, 0, 0, 0, 0,
	0, 1009, 0, 1017, 712, 0, 0, 1274, 0, 1016,
	1244, 0, 0, 0, 1256, 1257, 1258, 0, 1754, 0,
	0, 0, 0, 793, 812, 0, 1846, 0, 0, 1847,
	793, 0, 0, 1852, 0, 1844, 750, 0, 0, 751,
	1849, 1853, 1848, 0, 1850, 0, 712, 0, 1851, 1267,
	1268, 1845, 0, 0, 1018, 0, 0, 0, 1854, 1080,
	1081, 0, 812, 812, 0, 0, 0, 0, 0, 0,
	0, 712, 1263, 0, 0, 0, 0, 0, 0, 0,
	0, 1253, 1254, 1255, 0, 0, 0, 712, 3481, 0,
	1247, 1248, 1249, 1250, 1251, 1252, 0, 712, 0, 1019,
	0, 0, 712, 0, 0, 0, 0, 712, 0, 0,
	1022, 793, 0, 712, 0, 0, 0, 0, 751, 0,
	0, 751, 0, 0, 877, 877, 0, 778, 0, 0,
	750, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2551, 0, 1024, 1023, 0, 0, 0,
	0, 0, 0, 751, 0, 0, 0, 0, 0, 1259,
	1259, 1259, 1259, 1259, 812, 0, 0, 0, 1259, 0,
	0, 0, 812, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 712, 0, 0, 1753, 0, 0, 793, 0, 793,
	0, 0, 0, 0, 0, 712, 0, 0, 0, 712,
	0, 0, 1013, 0, 0, 0, 750, 712, 712, 0,
	0, 0, 0, 0, 793, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 712, 0, 0, 0, 0, 0,
	0, 0, 1027, 0, 0, 1754, 0, 0, 0, 0,
	0, 0, 0, 0, 812, 2884, 812, 812, 712, 0,
	0, 0, 0, 0, 1259, 0, 1924, 1925, 1926, 1927,
	0, 1928, 0, 0, 0, 712, 0, 0, 0, 0,
	712, 0, 0, 2925, 0, 0, 0, 0, 0, 0,
	0, 2933, 0, 2933, 0, 0, 0, 812, 0, 2942,
	0, 0, 0, 712, 793, 1753, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2010, 0, 0, 0, 0,
	0, 0, 0, 1753, 0, 0, 0, 0, 0, 750,
	0, 0, 0, 0, 0, 0, 0, 0, 712, 0,
	0, 0, 0, 0, 0, 0, 2992, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2257, 0, 0, 0, 3016, 3017, 3018, 3019,
	0, 0, 0, 0, 0, 0, 0, 751, 0, 0,
	1225, 0, 1232, 1238, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1720, 1721, 1722, 1723, 1724, 0,
	0, 0, 0, 0, 0, 1729, 0, 0, 0, 0,
	2109, 2110, 2111, 2112, 2113, 0, 3044, 3045, 712, 3048,
	3049, 3050, 778, 2138, 1743, 0, 0, 0, 0, 0,
	2141, 0, 0, 0, 1835, 0, 0, 0, 712, 0,
	712, 712, 0, 3061, 712, 712, 712, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	712, 0, 3077, 712, 0, 0, 0, 3078, 0, 0,
	0, 751, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2246,
	0, 0, 0, 0, 598, 0, 712, 0, 0, 0,
	0, 0, 0, 1263, 2317, 2317, 712, 0, 0, 712,
	0, 0, 1253, 1254, 1255, 712, 712, 3100, 0, 3410,
	0, 1247, 1248, 1249, 1250, 1251, 1252, 0, 0, 605,
	0, 0, 0, 0, 0, 0, 0, 0, 750, 0,
	2201, 0, 0, 0, 0, 1754, 1274, 0, 0, 1244,
	0, 0, 0, 1256, 1257, 1258, 0, 0, 0, 0,
	0, 712, 812, 0, 0, 1846, 0, 751, 1847, 0,
	0, 712, 1852, 0, 1844, 712, 0, 0, 0, 1849,
	1853, 1848, 0, 1850, 0, 0, 0, 1851, 1267, 1268,
	1845, 712, 712, 0, 0, 712, 0, 1854, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 750, 0, 628, 0, 0,
	0, 712, 0, 0, 0, 0, 0, 0, 0, 0,
	712, 0, 712, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
	1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 0,
	0, 697, 700, 702, 1259, 0, 1754, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1754, 0, 0, 3235, 0, 0,
	751, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 712, 1753, 0, 0, 0, 0,
	712, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1259, 0, 0, 712, 0, 0,
	2933, 0, 0, 0, 0, 0, 3269, 712, 0, 0,
	0, 0, 0, 0, 0, 812, 0, 0, 1720, 1721,
	0, 0, 0, 0, 0, 0, 0, 877, 712, 0,
	1753, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212,
	2213, 2214, 2215, 2216, 2217, 2218, 2219, 0, 2225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3304, 0, 0, 0, 0, 0, 0, 2933,
	0, 0, 0, 0, 0, 2284, 0, 712, 0, 0,
	0, 0, 0, 0, 0, 3333, 3334, 1731, 0, 0,
	2126, 0, 0, 0, 0, 160, 1753, 712, 0, 0,
	0, 0, 3350, 2317, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 163, 0, 0, 0, 0, 712, 712,
	0, 0, 3380, 0, 0, 0, 0, 0, 0, 0,
	2246, 0, 0, 0, 0, 0, 0, 1753, 3385, 0,
	0, 0, 0, 0, 0, 0, 0, 3387, 3388, 3389,
	0, 0, 3392, 1731, 2733, 3395, 3396, 3397, 3398, 751,
	0, 0, 0, 0, 0, 0, 0, 0, 3407, 0,
	3408, 0, 3409, 0, 0, 0, 0, 0, 0, 0,
	1011, 3422, 0, 0, 0, 1012, 0, 0, 0, 1021,
	3428, 3429, 0, 0, 0, 3432, 3433, 3434, 3435, 3436,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2388, 0, 0, 169, 2797, 0, 2801, 0, 2122, 2388,
	0, 0, 0, 0, 0, 0, 751, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1014, 0, 165, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 166, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2132, 0, 0, 0,
	0, 1020, 0, 0, 0, 0, 0, 0, 0, 1259,
	2124, 0, 0, 0, 0, 793, 0, 170, 0, 0,
	0, 3500, 0, 0, 0, 171, 0, 0, 793, 0,
	0, 0, 1025, 164, 0, 2125, 1754, 0, 0, 0,
	0, 0, 1263, 0, 0, 0, 0, 0, 0, 0,
	0, 1253, 1254, 1255, 0, 0, 2136, 0, 3343, 0,
	1247, 1248, 1249, 1250, 1251, 1252, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1010, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1754, 1015, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1259,
	1259, 0, 0, 0, 0, 0, 1259, 0, 921, 2201,
	0, 0, 3593, 152, 2127, 0, 173, 1017, 0, 0,
	0, 931, 0, 1016, 0, 0, 0, 0, 0, 940,
	942, 0, 944, 0, 0, 2133, 0, 0, 2128, 1259,
	0, 0, 2343, 174, 0, 0, 0, 1754, 161, 1259,
	0, 175, 0, 0, 793, 0, 0, 0, 0, 0,
	793, 0, 0, 0, 1259, 0, 0, 167, 1018, 0,
	0, 0, 2134, 0, 983, 0, 1259, 0, 2135, 0,
	1259, 0, 0, 168, 0, 0, 0, 2129, 1754, 0,
	0, 0, 0, 2130, 2436, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1057, 3651, 0, 0, 3653, 162,
	0, 0, 0, 1019, 3656, 3657, 3658, 0, 2471, 3661,
	3662, 3663, 0, 0, 1022, 0, 3666, 3667, 0, 2282,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3683, 3684, 1024,
	1023, 3688, 0, 3689, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2560,
	2561, 0, 0, 0, 0, 0, 0, 0, 2284, 2284,
	2284, 3712, 0, 0, 0, 0, 1274, 0, 0, 1244,
	0, 0, 0, 1256, 1257, 1258, 2295, 0, 0, 0,
	2217, 2218, 2219, 2225, 0, 1846, 1013, 0, 1847, 0,
	1731, 0, 1852, 0, 1844, 0, 0, 0, 0, 1849,
	1853, 1848, 0, 1850, 0, 0, 1259, 1851, 1267, 1268,
	1845, 0, 0, 0, 0, 0, 1027, 1854, 0, 0,
	0, 0, 62, 0, 0, 0, 0, 62, 62, 0,
	0, 0, 2837, 1259, 0, 0, 2644, 2933, 0, 2317,
	0, 0, 2317, 0, 0, 0, 0, 0, 0, 3826,
	0, 0, 0, 0, 3829, 0, 0, 0, 0, 0,
	3835, 2388, 2837, 3837, 0, 0, 0, 0, 0, 0,
	2870, 0, 1837, 778, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1881, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2837, 0, 0, 0, 0, 1259, 793,
	0, 0, 0, 0, 3872, 3873, 0, 0, 0, 0,
	3879, 0, 0, 0, 3881, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1946, 0, 0, 3894, 1950, 0, 0, 0, 0, 1962,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1259, 1259, 1259, 2007, 0,
	1259, 0, 0, 1259, 0, 0, 0, 0, 1259, 0,
	0, 0, 0, 0, 2021, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2590, 0, 0, 0, 0, 1259,
	0, 0, 0, 2038, 0, 0, 2041, 1259, 0, 0,
	0, 2317, 0, 0, 0, 0, 0, 0, 0, 1259,
	1259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2073, 0, 0, 0, 1962, 1962, 1962, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2095, 2096, 0, 0, 1259, 1259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1274, 2933, 0,
	1244, 0, 0, 0, 1256, 1257, 1258, 2855, 0, 1259,
	0, 0, 0, 0, 0, 4021, 1846, 1259, 1259, 1847,
	0, 0, 0, 1852, 0, 1844, 0, 1232, 0, 0,
	1849, 1853, 1848, 0, 1850, 1729, 0, 0, 1851, 1267,
	1268, 1845, 0, 1238, 2161, 0, 793, 0, 1854, 0,
	0, 0, 0, 1011, 0, 793, 0, 0, 1012, 0,
	0, 0, 1021, 0, 0, 4055, 0, 0, 4058, 0,
	0, 0, 1011, 0, 2700, 2701, 0, 1012, 0, 0,
	2707, 1021, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2198, 0, 0, 0, 2740, 0, 0, 0,
	0, 0, 0, 0, 0, 1014, 0, 2750, 4099, 0,
	0, 0, 2282, 2282, 2282, 0, 0, 0, 0, 0,
	0, 0, 2765, 0, 1014, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1020, 2284, 0, 0, 0, 0,
	0, 0, 2777, 0, 2317, 2317, 0, 2781, 2317, 0,
	0, 0, 0, 1020, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1025, 0, 0, 0, 0,
	0, 0, 1263, 0, 0, 0, 0, 0, 0, 0,
	0, 1253, 1254, 1255, 1025, 0, 0, 0, 3322, 4167,
	1247, 1248, 1249, 1250, 1251, 1252, 0, 0, 0, 0,
	0, 1259, 0, 0, 0, 0, 1259, 1259, 1010, 0,
	0, 1259, 1259, 0, 0, 1259, 0, 0, 4187, 4188,
	0, 0, 0, 0, 0, 0, 0, 1010, 0, 1259,
	0, 0, 1259, 1259, 0, 1015, 0, 0, 1008, 0,
	0, 2388, 0, 0, 2837, 0, 2837, 1259, 0, 0,
	0, 0, 0, 0, 1015, 0, 0, 0, 0, 2388,
	2388, 0, 0, 2837, 1274, 3090, 3091, 1244, 0, 0,
	1017, 1256, 1257, 1258, 0, 3095, 1016, 0, 0, 0,
	0, 0, 0, 1846, 0, 0, 1847, 1009, 0, 1017,
	1852, 0, 1844, 0, 0, 1016, 793, 1849, 1853, 1848,
	0, 1850, 0, 0, 2957, 1851, 1267, 1268, 1845, 0,
	0, 0, 0, 0, 0, 1854, 0, 4274, 0, 0,
	0, 1018, 0, 0, 0, 0, 0, 0, 2984, 1259,
	4284, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1018, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4300, 1259, 1274, 0, 0, 1244,
	0, 0, 0, 1256, 1257, 1258, 1019, 0, 0, 0,
	0, 0, 0, 0, 0, 1846, 0, 1022, 1847, 0,
	0, 0, 1852, 1259, 1844, 1019, 0, 0, 0, 1849,
	1853, 1848, 0, 1850, 2837, 0, 1022, 1851, 1267, 1268,
	1845, 0, 0, 0, 0, 0, 0, 1854, 0, 0,
	3052, 0, 1024, 1023, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1259, 0, 3059, 0, 1006,
	0, 1024, 1023, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1259, 0, 0, 0, 1259, 1259, 1259,
	4360, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2317, 0, 0, 1259, 0, 0, 0, 0,
	0, 0, 0, 793, 0, 0, 0, 0, 0, 0,
	0, 1259, 0, 1263, 0, 0, 0, 0, 0, 1013,
	0, 0, 1253, 1254, 1255, 0, 0, 0, 0, 0,
	0, 1247, 1248, 1249, 1250, 1251, 1252, 0, 1013, 3270,
	0, 0, 62, 793, 0, 0, 0, 0, 0, 1027,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	3116, 0, 3117, 3118, 0, 0, 3121, 0, 1027, 3289,
	3124, 0, 0, 0, 2284, 0, 0, 0, 2284, 0,
	0, 3129, 62, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3150, 0,
	0, 1274, 0, 0, 1244, 0, 0, 0, 1256, 1257,
	1258, 0, 0, 3158, 0, 0, 0, 0, 0, 2282,
	1846, 0, 0, 1847, 3170, 3171, 0, 1852, 0, 1844,
	0, 0, 92, 877, 1849, 1853, 1848, 0, 1850, 119,
	0, 0, 1851, 1267, 1268, 1845, 0, 3554, 0, 0,
	0, 0, 1854, 793, 0, 0, 0, 115, 0, 0,
	0, 95, 0, 0, 0, 0, 0, 0, 2388, 0,
	0, 0, 4498, 0, 0, 3209, 0, 3210, 0, 0,
	0, 0, 0, 1259, 0, 0, 0, 0, 1274, 0,
	0, 1244, 0, 0, 0, 1256, 1257, 1258, 0, 62,
	0, 0, 0, 102, 0, 3240, 0, 1846, 0, 0,
	1847, 0, 0, 0, 1852, 0, 1844, 0, 0, 0,
	0, 1849, 1853, 1848, 1259, 1850, 3248, 3249, 0, 1851,
	1267, 1268, 1845, 1274, 0, 0, 1244, 0, 0, 1854,
	1256, 1257, 1258, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1846, 0, 0, 0, 0, 0, 0, 1852,
	0, 1844, 0, 0, 0, 0, 1849, 1853, 1848, 0,
	1850, 62, 0, 0, 1851, 1267, 1268, 1845, 0, 0,
	0, 0, 2412, 0, 1854, 0, 793, 0, 0, 0,
	0, 0, 0, 0, 107, 1259, 0, 0, 0, 0,
	1263, 0, 0, 0, 0, 0, 0, 0, 0, 1253,
	1254, 1255, 0, 0, 0, 0, 3155, 0, 1247, 1248,
	1249, 1250, 1251, 1252, 0, 98, 0, 793, 1259, 2317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1259, 0, 0, 0, 0,
	0, 793, 2487, 2488, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 3543, 0, 99, 0, 0, 0,
	0, 0, 0, 0, 100, 0, 0, 0, 2532, 116,
	0, 0, 1263, 0, 0, 1731, 0, 0, 0, 0,
	2554, 1253, 1254, 1255, 0, 0, 2287, 0, 0, 0,
	1247, 1248, 1249, 1250, 1251, 1252, 0, 0, 0, 0,
	0, 0, 0, 0, 2573, 0, 0, 0, 0, 0,
	0, 3585, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2837, 0, 1259, 0, 0, 0, 0,
	0, 0, 0, 3452, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 3457, 3458, 0, 0, 109, 0, 3462,
	3463, 1259, 0, 0, 0, 0, 3466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3480, 0, 93, 0, 0, 0, 3483, 0,
	0, 0, 101, 3484, 0, 0, 0, 0, 2282, 0,
	0, 0, 2282, 0, 0, 0, 0, 1259, 108, 0,
	0, 0, 0, 110, 0, 0, 1259, 0, 3498, 105,
	0, 114, 0, 113, 97, 0, 0, 0, 2837, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	1011, 118, 0, 117, 0, 1012, 0, 1011, 1041, 1021,
	0, 0, 1012, 0, 0, 0, 1021, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 793, 793, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1263, 0, 0,
	0, 0, 111, 0, 0, 0, 1253, 1254, 1255, 0,
	0, 0, 0, 2261, 0, 1247, 1248, 1249, 1250, 1251,
	1252, 0, 0, 0, 0, 0, 1011, 62, 0, 3580,
	0, 1012, 1014, 0, 0, 1021, 1043, 0, 0, 1014,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1011, 1041, 0, 0, 0, 1012,
	0, 1020, 0, 1021, 0, 0, 0, 0, 1020, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3606, 0, 1263, 0, 0, 0, 3554, 0,
	0, 0, 1025, 1253, 1254, 1255, 793, 0, 1014, 1025,
	0, 0, 1247, 1248, 1249, 1250, 1251, 1252, 0, 0,
	0, 0, 2822, 3634, 2825, 2826, 0, 0, 0, 2830,
	0, 0, 0, 1043, 0, 0, 1014, 1020, 0, 1263,
	0, 0, 0, 0, 0, 1010, 1259, 0, 1253, 1254,
	1255, 0, 1010, 0, 0, 3849, 1033, 1247, 1248, 1249,
	1250, 1251, 1252, 0, 0, 1020, 0, 0, 1025, 1042,
	0, 0, 1015, 0, 0, 0, 3863, 3864, 0, 1015,
	0, 0, 0, 0, 0, 1011, 0, 0, 0, 3676,
	1012, 0, 0, 2887, 1021, 0, 1025, 0, 793, 1011,
	793, 793, 0, 0, 1012, 0, 0, 1017, 1021, 0,
	0, 1010, 0, 1016, 1017, 0, 0, 0, 0, 3694,
	1016, 0, 0, 3698, 3699, 3700, 0, 0, 0, 0,
	2938, 2939, 0, 0, 0, 0, 0, 0, 1015, 1010,
	0, 793, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1962, 0, 1042, 1014, 1018, 0,
	0, 1044, 0, 0, 0, 1018, 1015, 0, 0, 3716,
	0, 1014, 0, 1017, 0, 0, 0, 0, 0, 1016,
	0, 3732, 0, 0, 0, 0, 1020, 0, 0, 0,
	0, 1045, 0, 0, 1046, 0, 0, 0, 1047, 0,
	1020, 1017, 0, 1019, 0, 0, 0, 1016, 0, 0,
	1040, 0, 0, 0, 1022, 0, 0, 1025, 0, 0,
	1048, 1022, 0, 0, 1018, 0, 0, 0, 0, 0,
	0, 1025, 0, 0, 1011, 0, 0, 0, 0, 1012,
	0, 0, 0, 1021, 0, 0, 0, 1032, 1044, 1024,
	1023, 0, 1018, 0, 2565, 0, 1024, 1023, 1051, 1011,
	1010, 0, 0, 0, 1012, 0, 0, 0, 1021, 1019,
	0, 0, 0, 0, 1010, 1049, 0, 0, 1045, 0,
	1022, 1046, 0, 0, 3071, 1047, 0, 1015, 0, 0,
	0, 0, 1050, 0, 0, 0, 0, 1040, 0, 0,
	0, 1015, 0, 0, 0, 0, 1014, 1048, 1022, 0,
	0, 0, 0, 3047, 0, 1024, 1023, 0, 0, 0,
	0, 0, 1017, 0, 0, 0, 1013, 0, 1016, 1052,
	0, 1014, 0, 1013, 0, 1020, 1017, 0, 0, 0,
	0, 1037, 1016, 1024, 1023, 1051, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1027, 0, 0, 3904,
	1020, 0, 1049, 1027, 0, 0, 1025, 0, 0, 0,
	0, 0, 0, 1018, 0, 0, 0, 0, 0, 1050,
	0, 0, 0, 0, 0, 1011, 0, 1018, 0, 0,
	1012, 1025, 1013, 0, 1021, 0, 0, 0, 0, 0,
	0, 3945, 0, 0, 0, 0, 793, 0, 0, 1010,
	0, 0, 0, 0, 0, 0, 1052, 0, 1019, 0,
	1013, 0, 1027, 0, 0, 0, 134, 0, 0, 1022,
	0, 120, 1019, 0, 1010, 132, 1015, 0, 0, 0,
	0, 0, 0, 1022, 0, 0, 0, 0, 0, 124,
	1027, 0, 0, 0, 0, 0, 0, 1014, 0, 0,
	0, 1015, 2570, 4163, 1024, 1023, 0, 0, 146, 0,
	0, 1017, 0, 0, 0, 0, 2556, 1016, 1024, 1023,
	0, 0, 0, 0, 0, 0, 1020, 0, 0, 4016,
	0, 160, 0, 0, 0, 0, 1017, 0, 0, 0,
	0, 0, 1016, 0, 0, 0, 0, 0, 0, 163,
	0, 0, 0, 0, 0, 0, 0, 1025, 0, 0,
	0, 0, 1018, 0, 0, 0, 0, 0, 159, 0,
	0, 0, 4049, 0, 0, 0, 0, 0, 0, 0,
	0, 1013, 0, 0, 0, 0, 0, 1018, 0, 0,
	0, 0, 3254, 0, 0, 1013, 4066, 0, 0, 0,
	1010, 0, 0, 0, 126, 0, 0, 1019, 0, 0,
	0, 1027, 0, 1729, 0, 0, 0, 0, 1022, 0,
	0, 3277, 0, 0, 0, 1027, 0, 1015, 0, 793,
	127, 0, 1019, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 0, 1022, 0, 0, 0, 0, 0, 0,
	0, 2047, 129, 1024, 1023, 0, 0, 0, 0, 169,
	0, 0, 1017, 0, 0, 1946, 130, 0, 1016, 0,
	0, 0, 0, 144, 0, 0, 2043, 0, 1024, 1023,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 125,
	165, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 1018, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 0,
	1013, 0, 0, 170, 0, 0, 0, 0, 0, 0,
	0, 171, 0, 0, 0, 0, 0, 0, 0, 164,
	0, 0, 0, 0, 0, 1013, 4186, 0, 1019, 0,
	1027, 0, 0, 0, 0, 0, 0, 0, 0, 1022,
	0, 0, 158, 0, 0, 0, 3904, 0, 0, 0,
	135, 0, 4212, 4212, 4212, 1027, 4365, 0, 0, 152,
	136, 0, 137, 0, 0, 0, 0, 0, 0, 0,
	0, 3209, 1055, 0, 1024, 1023, 0, 0, 0, 0,
	0, 145, 0, 0, 138, 0, 0, 142, 0, 139,
	0, 0, 0, 0, 122, 0, 0, 140, 0, 0,
	0, 0, 0, 0, 4258, 0, 0, 0, 0, 0,
	176, 0, 0, 148, 0, 0, 0, 4267, 141, 152,
	0, 0, 173, 0, 147, 0, 0, 0, 0, 149,
	0, 0, 0, 0, 0, 143, 0, 0, 0, 150,
	0, 0, 0, 0, 0, 0, 0, 177, 0, 174,
	0, 1013, 0, 0, 161, 123, 0, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 167, 0, 0, 0, 0, 0, 3904,
	0, 1027, 0, 4212, 0, 0, 0, 0, 0, 168,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3565, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3759, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3781, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3832, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3997, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4043, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1752, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1757, 207, 1763, 224, 717, 1773, 273, 310, 525,
	1760, 1805, 370, 1810, 423, 427, 1834, 516, 1767, 1770,
	1780, 1783, 281, 1788, 722, 1796, 728, 1806, 734, 1825,
	492, 1831, 724, 725, 730, 212, 611, 515, 586, 1819,
	1765, 1823, 377, 1816, 1792, 1832, 1809, 1821, 1802, 1807,
	220, 1794, 1795, 1799, 1808, 726, 723, 727, 733, 721,
	731, 718, 729, 1829, 414, 348, 4123, 565, 441, 219,
	265, 252, 294, 336, 448, 1764, 1782, 326, 496, 261,
	350, 1815, 240, 383, 1828, 472, 347, 1822, 455, 475,
	1784, 367, 246, 406, 462, 463, 715, 720, 1772, 736,
	1759, 250, 251, 372, 232, 380, 577, 543, 435, 393,
	391, 1790, 358, 415, 572, 1762, 0, 280, 0, 275,
	371, 511, 238, 490, 409, 376, 330, 438, 467, 277,
	262, 263, 306, 408, 296, 248, 501, 540, 544, 542,
	538, 535, 539, 536, 537, 541, 297, 534, 0, 509,
	518, 552, 532, 560, 517, 557, 527, 272, 556, 521,
	520, 566, 547, 548, 502, 562, 533, 531, 524, 523,
	519, 1830, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 208, 1758, 209, 210, 211, 213, 214, 215,
	714, 216, 217, 218, 221, 222, 223, 225, 585, 226,
	227, 228, 229, 230, 231, 522, 716, 233, 234, 235,
	236, 237, 239, 241, 242, 243, 244, 245, 247, 249,
	1774, 1775, 1776, 719, 1777, 1778, 1779, 253, 254, 255,
	256, 257, 258, 1781, 259, 260, 264, 266, 267, 268,
	269, 270, 271, 274, 1785, 276, 278, 1786, 279, 282,
	1787, 283, 284, 285, 286, 287, 288, 289, 290, 526,
	291, 1789, 292, 293, 295, 1791, 298, 299, 300, 301,
	302, 1793, 303, 528, 529, 304, 305, 307, 308, 309,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 322, 1797, 323, 324, 325, 327, 1798, 328, 329,
	332, 333, 334, 335, 1800, 337, 545, 1801, 338, 339,
	340, 1803, 1804, 341, 342, 343, 344, 345, 346, 349,
	546, 351, 352, 353, 354, 355, 356, 357, 587, 359,
	360, 361, 362, 363, 364, 365, 549, 550, 366, 368,
	369, 551, 553, 554, 732, 384, 385, 386, 387, 388,
	389, 390, 392, 1812, 394, 395, 396, 555, 397, 398,
	399, 400, 1813, 401, 402, 403, 404, 405, 407, 410,
	411, 412, 413, 1814, 416, 417, 418, 419, 420, 421,
	422, 424, 425, 426, 428, 429, 430, 588, 431, 432,
	433, 434, 558, 436, 437, 589, 439, 440, 442, 443,
	444, 445, 446, 447, 609, 1817, 449, 559, 450, 451,
	452, 453, 454, 1818, 456, 457, 458, 459, 460, 461,
	464, 465, 466, 468, 469, 561, 470, 471, 1820, 473,
	474, 735, 476, 477, 478, 479, 480, 1824, 610, 481,
	563, 482, 564, 483, 484, 485, 486, 487, 488, 489,
	491, 1826, 1827, 493, 494, 495, 497, 498, 499, 500,
	503, 504, 505, 506, 507, 1833, 508, 510, 512, 590,
	567, 568, 569, 570, 571, 573, 574, 575, 576, 513,
	514, 530, 381, 375, 331, 373, 374, 378, 379, 382,
	1811, 1761, 1766, 1768, 1769, 1771, 0, 0, 0, 0,
	0, 0, 0, 0, 1277, 0, 0, 0, 0, 0,
	0, 1274, 0, 0, 1244, 0, 0, 1750, 1256, 1257,
	1258, 1288, 1290, 1272, 1317, 1338, 0, 1389, 1435, 1405,
	1260, 1522, 1528, 1261, 1589, 1593, 0, 1269, 1319, 1245,
	1369, 1384, 1399, 1411, 1264, 1270, 1262, 1526, 1265, 1670,
	1681, 1701, 1266, 1267, 1268, 1246, 1662, 1719, 1488, 1647,
	1299, 0, 1275, 1613, 0, 0, 1536, 1651, 0, 0,
	1313, 0, 0, 0, 0, 1461, 1450, 1484, 1597, 1422,
	1542, 1350, 1509, 1687, 1579, 1498, 0, 1693, 1611, 1312,
	1378, 1362, 1414, 1479, 1620, 1295, 1379, 1454, 1685, 1374,
	1500, 0, 1341, 1544, 1686, 1649, 1497, 1660, 1630, 1655,
	1385, 1523, 1348, 1570, 1637, 1638, 1308, 1421, 1343, 1696,
	1293, 1353, 1361, 1531, 1332, 1539, 1717, 1471, 1604, 1554,
	1552, 0, 1511, 1580, 1712, 0, 0, 1398, 0, 1392,
	1530, 1704, 1339, 1678, 1573, 1535, 1473, 1607, 1642, 1394,
	1375, 1376, 1432, 1572, 1417, 1351, 1692, 1468, 1472, 1470,
	1466, 1463, 1467, 1464, 1465, 1469, 1419, 1462, 0, 0,
	1309, 1529, 1457, 1627, 1307, 1576, 1415, 1388, 0, 0,
	0, 1694, 1508, 1510, 0, 1663, 1458, 1456, 1367, 1366,
	1310, 1695, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286,
	1287, 1289, 1291, 1292, 1296, 1297, 1298, 1300, 1301, 1302,
	1303, 1304, 1305, 1306, 1314, 1315, 1316, 1318, 1321, 1322,
	1323, 1325, 1326, 1327, 1328, 1329, 1330, 1333, 1334, 1335,
	1336, 1337, 1340, 1342, 1344, 1345, 1346, 1347, 1349, 1352,
	1354, 1355, 1356, 1357, 1358, 1359, 1360, 1363, 1364, 0,
	1365, 1368, 1370, 1371, 1372, 1373, 1377, 1380, 1381, 1382,
	1383, 1386, 1387, 1390, 1391, 1393, 1395, 1396, 1397, 1400,
	0, 1401, 1402, 1403, 1404, 1406, 1407, 1408, 1409, 1410,
	1412, 0, 0, 1413, 1416, 1418, 1420, 1423, 1424, 1425,
	1426, 0, 1427, 1428, 1429, 1430, 1431, 1433, 0, 1434,
	1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445,
	1446, 1447, 1448, 1449, 1452, 1453, 1455, 0, 1459, 1460,
	1475, 1476, 1477, 1478, 1480, 1482, 1483, 1481, 1485, 1486,
	1487, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1499,
	1501, 1502, 0, 1503, 1504, 0, 1505, 1506, 1507, 1512,
	1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1524,
	1525, 1527, 1541, 1543, 0, 1545, 1546, 1547, 1548, 1549,
	1550, 1551, 1553, 1555, 1556, 1557, 1558, 1559, 1560, 1561,
	1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1571, 1574,
	1575, 1577, 1578, 1581, 1582, 1583, 1584, 1585, 1586, 1587,
	1588, 1590, 1591, 1592, 1594, 1595, 1596, 1598, 1599, 1600,
	1601, 1602, 1603, 1605, 1606, 1608, 1609, 1610, 0, 1612,
	1614, 1615, 1616, 1617, 1618, 1619, 1622, 1621, 1623, 1624,
	1625, 1626, 1628, 1629, 1631, 1632, 1633, 1634, 1635, 1636,
	1639, 1640, 1641, 1643, 1644, 1645, 1646, 1648, 1650, 1652,
	1654, 1653, 1656, 1657, 1658, 1659, 1661, 1664, 1665, 1666,
	1667, 1668, 1669, 1671, 1672, 1673, 1674, 1675, 1676, 1677,
	1679, 0, 1680, 1682, 1683, 1684, 1688, 1689, 1690, 1691,
	1697, 1698, 1699, 1700, 1702, 0, 0, 1703, 1705, 1706,
	1707, 1708, 1709, 1710, 1711, 1713, 1714, 1715, 1716, 0,
	1718, 1451, 1540, 1534, 1474, 1532, 1533, 1537, 1538, 0,
	0, 1294, 1311, 1320, 1324, 1331, 0, 1263, 0, 0,
	0, 0, 0, 0, 0, 0, 1253, 1254, 1255, 0,
	0, 0, 0, 0, 0, 1247, 1248, 1249, 1250, 1251,
	1252, 1752, 0, 4430, 850, 0, 0, 0, 0, 912,
	0, 0, 0, 0, 0, 0, 0, 0, 1757, 207,
	1763, 224, 717, 1773, 273, 310, 525, 1760, 1805, 370,
	1810, 423, 427, 1834, 516, 1767, 1770, 1780, 1783, 281,
	1788, 722, 1796, 728, 1806, 734, 1825, 492, 1831, 724,
	725, 730, 212, 611, 515, 586, 1819, 1765, 1823, 377,
	1816, 1792, 1832, 1809, 1821, 1802, 1807, 220, 1794, 1795,
	1799, 1808, 726, 723, 727, 733, 721, 731, 718, 729,
	1829, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 1764, 1782, 326, 496, 261, 350, 1815, 240,
	383, 1828, 472, 347, 1822, 455, 475, 1784, 367, 246,
	406, 462, 463, 715, 720, 1772, 736, 1759, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 1790, 358,
	415, 572, 1762, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 1830, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	1758, 209, 210, 211, 213, 214, 215, 714, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 716, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 1774, 1775, 1776,
	719, 1777, 1778, 1779, 253, 254, 255, 256, 257, 258,
	1781, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 1785, 276, 278, 1786, 279, 282, 1787, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 1789, 292,
	293, 295, 1791, 298, 299, 300, 301, 302, 1793, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 1797,
	323, 324, 325, 327, 1798, 328, 329, 332, 333, 334,
	335, 1800, 337, 545, 1801, 338, 339, 340, 1803, 1804,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 732, 384, 385, 386, 387, 388, 389, 390, 392,
	1812, 394, 395, 396, 555, 397, 398, 399, 400, 1813,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	1814, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 1817, 449, 559, 450, 451, 452, 453, 454,
	1818, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 1820, 473, 474, 735, 476,
	477, 478, 479, 480, 1824, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 1826, 1827,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 1833, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 1811, 1761, 1766,
	1768, 1769, 1771, 1752, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1757, 207, 1763, 224, 717, 1773, 273, 310, 525, 1760,
	1805, 370, 1810, 423, 427, 1834, 516, 1767, 1770, 1780,
	1783, 281, 1788, 722, 1796, 728, 1806, 734, 1825, 492,
	1831, 724, 725, 730, 212, 611, 515, 586, 1819, 1765,
	1823, 377, 1816, 1792, 1832, 1809, 1821, 1802, 1807, 220,
	1794, 1795, 1799, 1808, 726, 723, 727, 733, 721, 731,
	718, 729, 1829, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 1764, 1782, 326, 496, 261, 350,
	1815, 240, 383, 1828, 472, 347, 1822, 455, 475, 1784,
	367, 246, 406, 462, 463, 715, 720, 1772, 736, 1759,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	1790, 358, 415, 572, 1762, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	1830, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 1758, 209, 210, 211, 213, 214, 215, 714,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 716, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 1774,
	1775, 1776, 719, 1777, 1778, 1779, 253, 254, 255, 256,
	257, 258, 1781, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 1785, 276, 278, 1786, 279, 282, 1787,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	1789, 292, 293, 295, 1791, 298, 299, 300, 301, 302,
	1793, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 1797, 323, 324, 325, 327, 1798, 328, 329, 332,
	333, 334, 335, 1800, 337, 545, 1801, 338, 339, 340,
	1803, 1804, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 732, 384, 385, 386, 387, 388, 389,
	390, 392, 1812, 394, 395, 396, 555, 397, 398, 399,
	400, 1813, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 1814, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 1817, 449, 559, 450, 451, 452,
	453, 454, 1818, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 1820, 473, 474,
	735, 476, 477, 478, 479, 480, 1824, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	1826, 1827, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 1833, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 1811,
	1761, 1766, 1768, 1769, 1771, 1752, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1757, 207, 1763, 224, 717, 1773, 2546, 310,
	525, 1760, 1805, 370, 1810, 423, 427, 1834, 516, 1767,
	1770, 1780, 1783, 281, 1788, 722, 1796, 728, 1806, 734,
	1825, 492, 1831, 724, 725, 730, 212, 611, 515, 586,
	1819, 1765, 1823, 377, 1816, 1792, 1832, 1809, 1821, 1802,
	1807, 220, 1794, 1795, 1799, 1808, 726, 723, 727, 733,
	721, 731, 718, 729, 1829, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 2544, 1764, 1782, 326, 496,
	261, 350, 1815, 240, 383, 1828, 472, 347, 1822, 455,
	475, 1784, 367, 246, 406, 462, 463, 715, 720, 1772,
	736, 1759, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 1790, 358, 415, 572, 1762, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 1830, 197, 198, 199, 200, 201, 2545, 203,
	204, 205, 206, 208, 1758, 209, 210, 211, 213, 214,
	215, 714, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 716, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 1774, 1775, 1776, 719, 1777, 1778, 1779, 253, 254,
	255, 256, 257, 258, 1781, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 1785, 276, 278, 1786, 279,
	282, 1787, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 1789, 292, 293, 295, 1791, 298, 299, 300,
	301, 302, 1793, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 1797, 323, 324, 325, 327, 1798, 328,
	329, 332, 333, 334, 335, 1800, 337, 545, 1801, 338,
	339, 340, 1803, 1804, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 732, 384, 385, 386, 387,
	388, 389, 390, 392, 1812, 394, 395, 396, 555, 397,
	398, 399, 400, 1813, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 1814, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 1817, 449, 559, 450,
	451, 452, 453, 454, 1818, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 1820,
	473, 474, 735, 476, 477, 478, 479, 480, 1824, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 1826, 1827, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 1833, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 1811, 1761, 1766, 1768, 1769, 1771, 811, 0, 1196,
	850, 0, 0, 0, 653, 912, 0, 0, 0, 0,
	0, 664, 665, 666, 1757, 207, 1763, 224, 717, 1773,
	273, 310, 0, 1760, 1805, 370, 1810, 423, 427, 1834,
	0, 1767, 1770, 1780, 1783, 281, 1788, 722, 1796, 728,
	1806, 734, 1825, 492, 1831, 724, 725, 730, 212, 810,
	515, 586, 1819, 1765, 1823, 2913, 1816, 1792, 1832, 1809,
	1821, 1802, 1807, 220, 1794, 1795, 1799, 1808, 726, 723,
	727, 733, 721, 731, 718, 729, 1829, 414, 348, 0,
	0, 441, 219, 265, 252, 294, 336, 448, 1764, 1782,
	326, 496, 261, 350, 1815, 240, 383, 1828, 472, 347,
	1822, 455, 475, 1784, 367, 246, 406, 462, 463, 715,
	720, 1772, 736, 1759, 250, 251, 372, 232, 380, 0,
	0, 435, 393, 391, 1790, 358, 415, 0, 1762, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	0, 0, 509, 813, 803, 795, 796, 797, 798, 799,
	800, 0, 815, 816, 817, 818, 819, 502, 809, 0,
	794, 801, 802, 804, 1830, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 1758, 209, 210, 211,
	213, 214, 215, 714, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 0, 716,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 1774, 1775, 1776, 719, 1777, 1778, 1779,
	253, 254, 255, 256, 257, 258, 1781, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 1785, 276, 278,
	1786, 279, 282, 1787, 283, 284, 285, 286, 287, 288,
	289, 290, 0, 291, 1789, 292, 293, 295, 1791, 298,
	299, 300, 301, 302, 1793, 303, 0, 0, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 1797, 323, 324, 325, 327,
	1798, 328, 329, 332, 333, 334, 335, 1800, 337, 0,
	1801, 338, 339, 340, 1803, 1804, 341, 342, 343, 344,
	345, 346, 349, 0, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 2912,
	0, 366, 368, 369, 0, 0, 0, 732, 384, 385,
	386, 387, 388, 389, 390, 392, 1812, 394, 395, 396,
	0, 397, 398, 399, 400, 1813, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 1814, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 0, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 1817, 449,
	2390, 450, 451, 452, 453, 454, 1818, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 0, 470,
	471, 1820, 473, 474, 735, 476, 477, 478, 479, 480,
	1824, 610, 481, 0, 482, 0, 483, 484, 485, 486,
	487, 488, 489, 491, 1826, 1827, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 1833, 508,
	510, 512, 590, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 514, 0, 381, 375, 331, 373, 374,
	378, 379, 382, 1811, 1761, 1766, 1768, 1769, 1771, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 661,
	662, 663, 0, 0, 0, 0, 0, 0, 2914, 2915,
	657, 658, 659, 660, 711, 0, 905, 850, 0, 0,
	0, 900, 912, 890, 0, 0, 0, 0, 0, 0,
	0, 2279, 207, 0, 224, 717, 0, 273, 310, 895,
	0, 883, 370, 0, 423, 427, 0, 516, 910, 0,
	887, 2280, 281, 908, 722, 0, 728, 909, 734, 907,
	492, 0, 724, 725, 730, 212, 611, 515, 586, 0,
	0, 0, 901, 0, 0, 0, 0, 0, 0, 0,
	220, 0, 0, 0, 0, 726, 723, 727, 733, 721,
	731, 718, 729, 0, 414, 348, 0, 565, 441, 219,
	265, 252, 294, 336, 448, 0, 0, 326, 496, 261,
	350, 0, 240, 383, 0, 472, 347, 0, 455, 475,
	0, 367, 246, 406, 462, 463, 715, 720, 0, 736,
	0, 250, 251, 372, 232, 380, 577, 543, 435, 393,
	391, 0, 358, 415, 572, 896, 0, 280, 0, 275,
	371, 511, 238, 490, 409, 376, 330, 438, 467, 277,
	262, 263, 306, 408, 296, 248, 501, 540, 544, 542,
	538, 535, 539, 536, 537, 541, 297, 534, 0, 509,
	518, 552, 532, 560, 517, 557, 527, 272, 556, 521,
	520, 566, 547, 548, 502, 562, 533, 531, 524, 523,
	519, 2278, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 208, 0, 209, 210, 211, 213, 214, 215,
	714, 216, 217, 218, 221, 222, 223, 225, 585, 226,
	227, 228, 229, 230, 231, 522, 716, 233, 234, 235,
	236, 237, 239, 241, 242, 243, 244, 245, 247, 249,
	0, 0, 0, 719, 0, 0, 0, 253, 254, 255,
	256, 257, 258, 0, 259, 260, 264, 266, 267, 268,
	269, 270, 271, 274, 0, 276, 278, 0, 279, 282,
	0, 283, 284, 285, 286, 287, 288, 289, 290, 526,
	291, 0, 292, 293, 295, 0, 298, 299, 300, 301,
	302, 0, 303, 528, 899, 304, 305, 307, 308, 309,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 322, 0, 323, 324, 325, 327, 0, 328, 329,
	332, 333, 334, 335, 0, 337, 545, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 345, 346, 349,
	546, 351, 352, 353, 354, 355, 356, 357, 587, 359,
	360, 361, 362, 363, 364, 365, 549, 550, 366, 368,
	369, 551, 553, 554, 732, 384, 385, 386, 387, 388,
	389, 390, 392, 0, 394, 395, 396, 555, 397, 398,
	399, 400, 0, 401, 402, 403, 404, 405, 407, 410,
	411, 412, 413, 0, 416, 417, 418, 419, 420, 421,
	422, 424, 425, 426, 428, 429, 430, 588, 431, 432,
	433, 434, 902, 436, 437, 589, 439, 440, 442, 443,
	444, 445, 446, 447, 609, 0, 449, 559, 450, 451,
	452, 453, 454, 0, 456, 457, 458, 459, 460, 461,
	464, 465, 466, 468, 469, 561, 470, 471, 0, 473,
	474, 735, 476, 477, 478, 479, 480, 0, 610, 481,
	563, 482, 564, 483, 484, 485, 486, 487, 488, 489,
	491, 0, 886, 493, 494, 495, 497, 498, 499, 500,
	503, 504, 505, 506, 507, 0, 508, 510, 512, 590,
	567, 568, 569, 570, 571, 573, 574, 575, 576, 513,
	514, 530, 381, 375, 331, 373, 374, 378, 379, 382,
	0, 0, 0, 0, 0, 0, 0, 884, 0, 0,
	711, 0, 905, 850, 0, 0, 0, 900, 912, 890,
	0, 0, 891, 2275, 0, 880, 881, 2276, 207, 0,
	224, 717, 0, 273, 310, 895, 0, 883, 370, 0,
	423, 427, 78, 516, 910, 0, 887, 0, 281, 908,
	722, 0, 728, 909, 734, 907, 492, 0, 724, 725,
	730, 212, 611, 515, 586, 0, 0, 0, 901, 75,
	0, 0, 0, 76, 0, 0, 220, 0, 0, 0,
	0, 726, 723, 727, 733, 721, 731, 718, 729, 0,
	414, 348, 0, 1732, 441, 219, 265, 252, 294, 336,
	448, 0, 0, 326, 496, 261, 350, 0, 240, 383,
	0, 472, 347, 0, 455, 475, 0, 367, 246, 406,
	462, 463, 715, 720, 0, 736, 0, 250, 251, 372,
	232, 380, 577, 543, 435, 393, 391, 0, 358, 415,
	572, 896, 0, 280, 0, 275, 371, 511, 238, 490,
	409, 376, 330, 438, 467, 277, 262, 263, 306, 408,
	296, 248, 501, 540, 544, 542, 538, 535, 539, 536,
	537, 541, 297, 534, 0, 509, 518, 552, 532, 560,
	517, 557, 527, 272, 556, 521, 520, 566, 547, 548,
	502, 562, 533, 531, 524, 523, 519, 0, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 208, 0,
	209, 210, 211, 213, 214, 215, 714, 216, 217, 218,
	221, 222, 223, 225, 585, 226, 227, 228, 229, 230,
	231, 522, 716, 233, 234, 235, 236, 237, 239, 241,
	242, 243, 244, 245, 247, 249, 0, 0, 0, 719,
	0, 0, 0, 253, 254, 255, 256, 257, 258, 0,
	259, 260, 264, 266, 267, 268, 269, 270, 271, 274,
	0, 276, 278, 0, 279, 282, 0, 283, 284, 285,
	286, 287, 288, 289, 290, 526, 291, 0, 292, 293,
	295, 0, 298, 299, 300, 301, 302, 0, 303, 528,
	899, 304, 305, 307, 308, 309, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 0, 323,
	324, 325, 327, 0, 328, 329, 332, 333, 334, 335,
	0, 337, 545, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 345, 346, 349, 546, 351, 352, 353,
	354, 355, 356, 357, 587, 359, 360, 361, 362, 363,
	364, 365, 549, 550, 366, 368, 369, 551, 553, 554,
	732, 384, 385, 386, 387, 388, 389, 390, 392, 0,
	394, 395, 396, 555, 397, 398, 399, 400, 0, 401,
	402, 403, 404, 405, 407, 410, 411, 412, 413, 0,
	416, 417, 418, 419, 420, 421, 422, 424, 425, 426,
	428, 429, 430, 588, 431, 432, 433, 434, 902, 436,
	437, 589, 439, 440, 442, 443, 444, 445, 446, 447,
	609, 0, 449, 559, 450, 451, 452, 453, 454, 0,
	456, 457, 458, 459, 460, 461, 464, 465, 466, 468,
	469, 561, 470, 471, 0, 473, 474, 735, 476, 477,
	478, 479, 480, 0, 610, 481, 563, 482, 564, 483,
	484, 485, 486, 487, 488, 489, 491, 0, 886, 493,
	494, 495, 497, 498, 499, 500, 503, 504, 505, 506,
	507, 0, 508, 510, 512, 590, 567, 568, 569, 570,
	571, 573, 574, 575, 576, 513, 514, 530, 381, 375,
	331, 373, 374, 378, 379, 382, 0, 0, 0, 0,
	0, 0, 0, 884, 0, 79, 711, 0, 905, 850,
	0, 0, 0, 900, 912, 890, 0, 0, 891, 4073,
	0, 880, 881, 0, 207, 0, 224, 717, 0, 273,
	310, 895, 0, 883, 370, 0, 423, 427, 78, 516,
	910, 0, 887, 0, 281, 908, 722, 0, 728, 909,
	734, 907, 492, 0, 724, 725, 730, 212, 611, 515,
	586, 0, 0, 0, 901, 75, 0, 0, 0, 76,
	0, 0, 220, 0, 0, 0, 0, 726, 723, 727,
	733, 721, 731, 718, 729, 0, 414, 348, 0, 1732,
	441, 219, 265, 252, 294, 336, 448, 0, 0, 326,
	496, 261, 350, 0, 240, 383, 0, 472, 347, 0,
	455, 475, 0, 367, 246, 406, 462, 463, 715, 720,
	0, 736, 0, 250, 251, 372, 232, 380, 577, 543,
	435, 393, 391, 0, 358, 415, 572, 896, 0, 280,
	0, 275, 371, 511, 238, 490, 409, 376, 330, 438,
	467, 277, 262, 263, 306, 408, 296, 248, 501, 540,
	544, 542, 538, 535, 539, 536, 537, 541, 297, 534,
	0, 509, 518, 552, 532, 560, 517, 557, 527, 272,
	556, 521, 520, 566, 547, 548, 502, 562, 533, 531,
	524, 523, 519, 0, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 208, 0, 209, 210, 211, 213,
	214, 215, 714, 216, 217, 218, 221, 222, 223, 225,
	585, 226, 227, 228, 229, 230, 231, 522, 716, 233,
	234, 235, 236, 237, 239, 241, 242, 243, 244, 245,
	247, 249, 0, 0, 0, 719, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 0, 259, 260, 264, 266,
	267, 268, 269, 270, 271, 274, 0, 276, 278, 0,
	279, 282, 0, 283, 284, 285, 286, 287, 288, 289,
	290, 526, 291, 0, 292, 293, 295, 0, 298, 299,
	300, 301, 302, 0, 303, 528, 899, 304, 305, 307,
	308, 309, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 0, 323, 324, 325, 327, 0,
	328, 329, 332, 333, 334, 335, 0, 337, 545, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 345,
	346, 349, 546, 351, 352, 353, 354, 355, 356, 357,
	587, 359, 360, 361, 362, 363, 364, 365, 549, 550,
	366, 368, 369, 551, 553, 554, 732, 384, 385, 386,
	387, 388, 389, 390, 392, 0, 394, 395, 396, 555,
	397, 398, 399, 400, 0, 401, 402, 403, 404, 405,
	407, 410, 411, 412, 413, 0, 416, 417, 418, 419,
	420, 421, 422, 424, 425, 426, 428, 429, 430, 588,
	431, 432, 433, 434, 902, 436, 437, 589, 439, 440,
	442, 443, 444, 445, 446, 447, 609, 0, 449, 559,
	450, 451, 452, 453, 454, 0, 456, 457, 458, 459,
	460, 461, 464, 465, 466, 468, 469, 561, 470, 471,
	0, 473, 474, 735, 476, 477, 478, 479, 480, 0,
	610, 481, 563, 482, 564, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 886, 493, 494, 495, 497, 498,
	499, 500, 503, 504, 505, 506, 507, 0, 508, 510,
	512, 590, 567, 568, 569, 570, 571, 573, 574, 575,
	576, 513, 514, 530, 381, 375, 331, 373, 374, 378,
	379, 382, 0, 0, 0, 0, 0, 0, 0, 884,
	0, 79, 711, 0, 905, 850, 0, 0, 0, 900,
	912, 890, 0, 0, 891, 0, 0, 880, 881, 0,
	207, 0, 224, 717, 0, 273, 310, 895, 0, 883,
	370, 0, 423, 427, 0, 516, 910, 0, 887, 0,
	281, 908, 722, 0, 728, 909, 734, 907, 492, 0,
	724, 725, 730, 212, 611, 515, 586, 0, 0, 0,
	901, 0, 0, 0, 0, 0, 0, 0, 220, 0,
	0, 0, 0, 726, 723, 727, 733, 721, 731, 718,
	729, 0, 414, 348, 0, 565, 441, 219, 265, 252,
	294, 336, 448, 0, 0, 326, 496, 261, 350, 0,
	240, 383, 0, 472, 347, 0, 455, 475, 0, 367,
	246, 406, 462, 463, 715, 720, 0, 736, 0, 250,
	251, 372, 232, 380, 577, 543, 435, 393, 391, 0,
	358, 415, 572, 896, 0, 280, 0, 275, 371, 511,
	238, 490, 409, 376, 330, 438, 467, 277, 262, 263,
	306, 408, 296, 248, 501, 540, 544, 542, 538, 535,
	539, 536, 537, 541, 297, 534, 0, 509, 518, 552,
	532, 560, 517, 557, 527, 272, 556, 521, 520, 566,
	547, 548, 502, 562, 533, 531, 524, 523, 519, 0,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	208, 0, 209, 210, 211, 213, 214, 215, 714, 216,
	217, 218, 221, 222, 223, 225, 585, 226, 227, 228,
	229, 230, 231, 522, 716, 233, 234, 235, 236, 237,
	239, 241, 242, 243, 244, 245, 247, 249, 0, 0,
	0, 719, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 0, 259, 260, 264, 266, 267, 268, 269, 270,
	271, 274, 0, 276, 278, 0, 279, 282, 0, 283,
	284, 285, 286, 287, 288, 289, 290, 526, 291, 0,
	292, 293, 295, 0, 298, 299, 300, 301, 302, 0,
	303, 528, 899, 304, 305, 307, 308, 309, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	0, 323, 324, 325, 327, 0, 328, 329, 332, 333,
	334, 335, 0, 337, 545, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 345, 346, 349, 546, 351,
	352, 353, 354, 355, 356, 357, 587, 359, 360, 361,
	362, 363, 364, 365, 549, 550, 366, 368, 369, 551,
	553, 554, 732, 384, 385, 386, 387, 388, 389, 390,
	392, 0, 394, 395, 396, 555, 397, 398, 399, 400,
	0, 401, 402, 403, 404, 405, 407, 410, 411, 412,
	413, 0, 416, 417, 418, 419, 420, 421, 422, 424,
	425, 426, 428, 429, 430, 588, 431, 432, 433, 434,
	902, 436, 437, 589, 439, 440, 442, 443, 444, 445,
	446, 447, 609, 0, 449, 559, 450, 451, 452, 453,
	454, 0, 456, 457, 458, 459, 460, 461, 464, 465,
	466, 468, 469, 561, 470, 471, 0, 473, 474, 735,
	476, 477, 478, 479, 480, 0, 610, 481, 563, 482,
	564, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	886, 493, 494, 495, 497, 498, 499, 500, 503, 504,
	505, 506, 507, 0, 508, 510, 512, 590, 567, 568,
	569, 570, 571, 573, 574, 575, 576, 513, 514, 530,
	381, 375, 331, 373, 374, 378, 379, 382, 0, 0,
	0, 0, 0, 0, 0, 884, 0, 0, 711, 0,
	905, 850, 0, 0, 0, 900, 912, 890, 0, 0,
	891, 0, 0, 880, 881, 878, 207, 0, 224, 717,
	0, 273, 310, 895, 0, 883, 370, 0, 423, 427,
	0, 516, 910, 0, 887, 0, 281, 908, 722, 0,
	728, 909, 734, 907, 492, 0, 724, 725, 730, 212,
	611, 515, 586, 0, 0, 0, 901, 0, 0, 0,
	0, 0, 0, 0, 220, 0, 0, 0, 0, 726,
	723, 727, 733, 721, 731, 718, 729, 0, 414, 348,
	0, 565, 441, 219, 265, 252, 294, 336, 448, 0,
	0, 326, 496, 261, 350, 0, 240, 383, 0, 472,
	347, 0, 455, 475, 0, 367, 246, 406, 462, 463,
	715, 720, 0, 736, 0, 250, 251, 372, 232, 380,
	577, 543, 435, 393, 391, 0, 358, 415, 572, 896,
	0, 280, 0, 275, 371, 511, 238, 490, 409, 376,
	330, 438, 467, 277, 262, 263, 306, 408, 296, 248,
	501, 540, 544, 542, 538, 535, 539, 536, 537, 541,
	297, 534, 0, 509, 518, 552, 532, 560, 517, 557,
	527, 272, 556, 521, 520, 566, 547, 548, 502, 562,
	533, 531, 524, 523, 519, 0, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 208, 0, 209, 210,
	211, 213, 214, 215, 714, 216, 217, 218, 221, 222,
	223, 225, 585, 226, 227, 228, 229, 230, 231, 522,
	716, 233, 234, 235, 236, 237, 239, 241, 242, 243,
	244, 245, 247, 249, 0, 0, 0, 719, 0, 0,
	0, 253, 254, 255, 256, 257, 258, 0, 259, 260,
	264, 266, 267, 268, 269, 270, 271, 274, 0, 276,
	278, 0, 279, 282, 0, 283, 284, 285, 286, 287,
	288, 289, 290, 526, 291, 0, 292, 293, 295, 0,
	298, 299, 300, 301, 302, 0, 303, 528, 899, 304,
	305, 307, 308, 309, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 322, 0, 323, 324, 325,
	327, 0, 328, 329, 332, 333, 334, 335, 0, 337,
	545, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 345, 346, 349, 546, 351, 352, 353, 354, 355,
	356, 357, 587, 359, 360, 361, 362, 363, 364, 365,
	549, 550, 366, 368, 369, 551, 553, 554, 732, 384,
	385, 386, 387, 388, 389, 390, 392, 0, 394, 395,
	396, 555, 397, 398, 399, 400, 0, 401, 402, 403,
	404, 405, 407, 410, 411, 412, 413, 0, 416, 417,
	418, 419, 420, 421, 422, 424, 425, 426, 428, 429,
	430, 588, 431, 432, 433, 434, 902, 436, 437, 589,
	439, 440, 442, 443, 444, 445, 446, 447, 609, 0,
	449, 559, 450, 451, 452, 453, 454, 0, 456, 457,
	458, 459, 460, 461, 464, 465, 466, 468, 469, 561,
	470, 471, 0, 473, 474, 735, 476, 477, 478, 479,
	480, 0, 610, 481, 563, 482, 564, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 886, 493, 494, 495,
	497, 498, 499, 500, 503, 504, 505, 506, 507, 0,
	508, 510, 512, 590, 567, 568, 569, 570, 571, 573,
	574, 575, 576, 513, 514, 530, 381, 375, 331, 373,
	374, 378, 379, 382, 0, 0, 0, 0, 0, 0,
	0, 884, 0, 711, 0, 905, 850, 0, 0, 0,
	900, 912, 890, 0, 1737, 2265, 891, 0, 0, 880,
	881, 207, 0, 224, 717, 0, 273, 310, 895, 0,
	883, 370, 0, 423, 427, 0, 516, 910, 0, 887,
	0, 281, 908, 722, 0, 728, 909, 734, 907, 492,
	0, 724, 725, 730, 212, 611, 515, 586, 0, 0,
	0, 901, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 726, 723, 727, 733, 721, 731,
	718, 729, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 715, 720, 0, 736, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 896, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	3164, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 714,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 716, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 719, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 899, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 732, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 902, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	735, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 886, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 0,
	0, 0, 0, 0, 0, 0, 884, 0, 711, 0,
	905, 850, 0, 0, 0, 900, 912, 890, 0, 0,
	0, 891, 0, 0, 880, 881, 207, 0, 224, 717,
	0, 273, 310, 895, 0, 883, 370, 0, 423, 427,
	0, 516, 910, 0, 887, 0, 281, 908, 722, 0,
	728, 909, 734, 907, 492, 0, 724, 725, 730, 212,
	611, 515, 586, 0, 0, 0, 901, 0, 0, 0,
	0, 0, 0, 0, 220, 0, 0, 0, 0, 726,
	723, 727, 733, 721, 731, 718, 729, 0, 414, 348,
	0, 565, 441, 219, 265, 252, 294, 336, 448, 0,
	0, 326, 496, 261, 350, 0, 240, 383, 0, 472,
	347, 0, 455, 475, 0, 367, 246, 406, 462, 463,
	715, 720, 0, 736, 0, 250, 251, 372, 232, 380,
	577, 543, 435, 393, 391, 0, 358, 415, 572, 896,
	0, 280, 0, 275, 371, 511, 238, 490, 409, 376,
	330, 438, 467, 277, 262, 263, 306, 408, 296, 248,
	501, 540, 544, 542, 538, 535, 539, 536, 537, 541,
	297, 534, 0, 509, 518, 552, 532, 560, 517, 557,
	527, 272, 556, 521, 520, 566, 547, 548, 502, 562,
	533, 531, 524, 523, 519, 0, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 208, 0, 209, 210,
	211, 213, 214, 215, 714, 216, 217, 218, 221, 222,
	223, 225, 585, 226, 227, 228, 229, 230, 231, 522,
	716, 233, 234, 235, 236, 237, 239, 241, 242, 243,
	244, 245, 247, 249, 0, 0, 0, 719, 0, 0,
	0, 253, 254, 255, 256, 257, 258, 0, 259, 260,
	264, 266, 267, 268, 269, 270, 271, 274, 0, 276,
	278, 0, 279, 282, 0, 283, 284, 285, 286, 287,
	288, 289, 290, 526, 291, 0, 292, 293, 295, 0,
	298, 299, 300, 301, 302, 0, 303, 528, 899, 304,
	305, 307, 308, 309, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 322, 0, 323, 324, 325,
	327, 0, 328, 329, 332, 333, 334, 335, 0, 337,
	545, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 345, 346, 349, 546, 351, 352, 353, 354, 355,
	356, 357, 587, 359, 360, 361, 362, 363, 364, 365,
	549, 550, 366, 368, 369, 551, 553, 554, 732, 384,
	385, 386, 387, 388, 389, 390, 392, 0, 394, 395,
	396, 555, 397, 398, 399, 400, 0, 401, 402, 403,
	404, 405, 407, 410, 411, 412, 413, 0, 416, 417,
	418, 419, 420, 421, 422, 424, 425, 426, 428, 429,
	430, 588, 431, 432, 433, 434, 902, 436, 437, 589,
	439, 440, 442, 443, 444, 445, 446, 447, 609, 0,
	449, 559, 450, 451, 452, 453, 454, 0, 456, 457,
	458, 459, 460, 461, 464, 465, 466, 468, 469, 561,
	470, 471, 0, 473, 474, 735, 476, 477, 478, 479,
	480, 0, 610, 481, 563, 482, 564, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 886, 493, 494, 495,
	497, 498, 499, 500, 503, 504, 505, 506, 507, 0,
	508, 510, 512, 590, 567, 568, 569, 570, 571, 573,
	574, 575, 576, 513, 514, 530, 381, 375, 331, 373,
	374, 378, 379, 382, 0, 0, 0, 0, 0, 0,
	0, 884, 0, 711, 0, 905, 850, 0, 0, 0,
	900, 912, 890, 0, 0, 0, 891, 3153, 0, 880,
	881, 207, 0, 224, 717, 0, 273, 310, 895, 0,
	883, 370, 0, 423, 427, 0, 516, 910, 0, 887,
	0, 281, 908, 722, 0, 728, 909, 734, 907, 492,
	0, 724, 725, 730, 212, 611, 515, 586, 0, 0,
	0, 901, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 726, 723, 727, 733, 721, 731,
	718, 729, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 715, 720, 0, 736, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 896, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 714,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 716, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 719, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 899, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 732, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 902, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	735, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 886, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 0,
	0, 0, 0, 0, 0, 0, 884, 0, 711, 0,
	905, 850, 0, 0, 0, 900, 912, 890, 0, 0,
	0, 891, 3108, 0, 880, 881, 207, 0, 224, 717,
	0, 273, 310, 895, 0, 883, 370, 0, 423, 427,
	0, 516, 910, 0, 887, 0, 281, 908, 722, 0,
	728, 909, 734, 907, 492, 0, 724, 725, 730, 212,
	611, 515, 586, 0, 0, 0, 901, 0, 0, 0,
	0, 0, 0, 0, 220, 0, 0, 0, 0, 726,
	723, 727, 733, 721, 731, 718, 729, 0, 414, 348,
	0, 565, 441, 219, 265, 252, 294, 336, 448, 0,
	0, 326, 496, 261, 350, 0, 240, 383, 0, 472,
	347, 0, 455, 475, 0, 367, 246, 406, 462, 463,
	715, 720, 0, 736, 0, 250, 251, 372, 232, 380,
	577, 543, 435, 393, 391, 0, 358, 415, 572, 896,
	0, 280, 0, 275, 371, 511, 238, 490, 409, 376,
	330, 438, 467, 277, 262, 263, 306, 408, 296, 248,
	501, 540, 544, 542, 538, 535, 539, 536, 537, 541,
	297, 534, 0, 509, 518, 552, 532, 560, 517, 557,
	527, 272, 556, 521, 520, 566, 547, 548, 502, 562,
	533, 531, 524, 523, 519, 0, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 208, 0, 209, 210,
	211, 213, 214, 215, 714, 216, 217, 218, 221, 222,
	223, 225, 585, 226, 227, 228, 229, 230, 231, 522,
	716, 233, 234, 235, 236, 237, 239, 241, 242, 243,
	244, 245, 247, 249, 0, 0, 0, 719, 0, 0,
	0, 253, 254, 255, 256, 257, 258, 0, 259, 260,
	264, 266, 267, 268, 269, 270, 271, 274, 0, 276,
	278, 0, 279, 282, 0, 283, 284, 285, 286, 287,
	288, 289, 290, 526, 291, 0, 292, 293, 295, 0,
	298, 299, 300, 301, 302, 0, 303, 528, 899, 304,
	305, 307, 308, 309, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 322, 0, 323, 324, 325,
	327, 0, 328, 329, 332, 333, 334, 335, 0, 337,
	545, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 345, 346, 349, 546, 351, 352, 353, 354, 355,
	356, 357, 587, 359, 360, 361, 362, 363, 364, 365,
	549, 550, 366, 368, 369, 551, 553, 554, 732, 384,
	385, 386, 387, 388, 389, 390, 392, 0, 394, 395,
	396, 555, 397, 398, 399, 400, 0, 401, 402, 403,
	404, 405, 407, 410, 411, 412, 413, 0, 416, 417,
	418, 419, 420, 421, 422, 424, 425, 426, 428, 429,
	430, 588, 431, 432, 433, 434, 902, 436, 437, 589,
	439, 440, 442, 443, 444, 445, 446, 447, 609, 0,
	449, 559, 450, 451, 452, 453, 454, 0, 456, 457,
	458, 459, 460, 461, 464, 465, 466, 468, 469, 561,
	470, 471, 0, 473, 474, 735, 476, 477, 478, 479,
	480, 0, 610, 481, 563, 482, 564, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 886, 493, 494, 495,
	497, 498, 499, 500, 503, 504, 505, 506, 507, 0,
	508, 510, 512, 590, 567, 568, 569, 570, 571, 573,
	574, 575, 576, 513, 514, 530, 381, 375, 331, 373,
	374, 378, 379, 382, 0, 0, 0, 0, 0, 0,
	0, 884, 0, 0, 711, 0, 905, 850, 0, 0,
	0, 900, 912, 890, 0, 0, 891, 2270, 0, 880,
	881, 1226, 207, 0, 224, 717, 0, 273, 310, 895,
	0, 883, 370, 0, 423, 427, 0, 516, 910, 0,
	887, 0, 281, 908, 722, 0, 728, 909, 734, 907,
	492, 0, 724, 725, 730, 212, 611, 515, 586, 0,
	0, 0, 901, 0, 0, 0, 0, 0, 0, 0,
	220, 0, 0, 0, 0, 726, 723, 727, 733, 721,
	731, 718, 729, 0, 414, 348, 0, 565, 441, 219,
	265, 252, 294, 336, 448, 0, 0, 326, 496, 261,
	350, 0, 240, 383, 0, 472, 347, 0, 455, 475,
	0, 367, 246, 406, 462, 463, 715, 720, 0, 736,
	0, 250, 251, 372, 232, 380, 577, 543, 435, 393,
	391, 0, 358, 415, 572, 896, 0, 280, 0, 275,
	371, 511, 238, 490, 409, 376, 330, 438, 467, 277,
	262, 263, 306, 408, 296, 248, 501, 540, 544, 542,
	538, 535, 539, 536, 537, 541, 297, 534, 0, 509,
	518, 552, 532, 560, 517, 557, 527, 272, 556, 521,
	520, 566, 547, 548, 502, 562, 533, 531, 524, 523,
	519, 0, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 208, 0, 209, 210, 211, 213, 214, 215,
	714, 216, 217, 218, 221, 222, 223, 225, 585, 226,
	227, 228, 229, 230, 231, 522, 716, 233, 234, 235,
	236, 237, 239, 241, 242, 243, 244, 245, 247, 249,
	0, 0, 0, 719, 0, 0, 0, 253, 254, 255,
	256, 257, 258, 0, 259, 260, 264, 266, 267, 268,
	269, 270, 271, 274, 0, 276, 278, 0, 279, 282,
	0, 283, 284, 285, 286, 287, 288, 289, 290, 526,
	291, 0, 292, 293, 295, 0, 298, 299, 300, 301,
	302, 0, 303, 528, 899, 304, 305, 307, 308, 309,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 322, 0, 323, 324, 325, 327, 0, 328, 329,
	332, 333, 334, 335, 0, 337, 545, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 345, 346, 349,
	546, 351, 352, 353, 354, 355, 356, 357, 587, 359,
	360, 361, 362, 363, 364, 365, 549, 550, 366, 368,
	369, 551, 553, 554, 732, 384, 385, 386, 387, 388,
	389, 390, 392, 0, 394, 395, 396, 555, 397, 398,
	399, 400, 0, 401, 402, 403, 404, 405, 407, 410,
	411, 412, 413, 0, 416, 417, 418, 419, 420, 421,
	422, 424, 425, 426, 428, 429, 430, 588, 431, 432,
	433, 434, 902, 436, 437, 589, 439, 440, 442, 443,
	444, 445, 446, 447, 609, 0, 449, 559, 450, 451,
	452, 453, 454, 0, 456, 457, 458, 459, 460, 461,
	464, 465, 466, 468, 469, 561, 470, 471, 0, 473,
	474, 735, 476, 477, 478, 479, 480, 0, 610, 481,
	563, 482, 564, 483, 484, 485, 486, 487, 488, 489,
	491, 0, 886, 493, 494, 495, 497, 498, 499, 500,
	503, 504, 505, 506, 507, 0, 508, 510, 512, 590,
	567, 568, 569, 570, 571, 573, 574, 575, 576, 513,
	514, 530, 381, 375, 331, 373, 374, 378, 379, 382,
	0, 0, 0, 0, 0, 0, 0, 884, 0, 711,
	0, 905, 850, 0, 0, 0, 900, 912, 890, 0,
	0, 0, 891, 0, 0, 880, 881, 207, 0, 224,
	717, 0, 273, 310, 895, 0, 883, 370, 0, 423,
	427, 0, 516, 910, 0, 887, 0, 281, 908, 722,
	0, 728, 909, 734, 907, 492, 0, 724, 725, 730,
	212, 611, 515, 586, 0, 0, 0, 901, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	726, 723, 727, 733, 721, 731, 718, 729, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 715, 720, 0, 736, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	896, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 714, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 716, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 719, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 899,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 732,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 902, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 735, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 886, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 0, 0, 0, 0, 0,
	0, 0, 884, 0, 711, 0, 905, 850, 0, 0,
	0, 900, 912, 890, 0, 0, 0, 891, 0, 0,
	880, 881, 207, 0, 224, 717, 0, 273, 310, 895,
	0, 883, 370, 0, 423, 427, 0, 516, 910, 0,
	887, 0, 281, 908, 722, 0, 728, 909, 734, 907,
	492, 0, 724, 725, 730, 212, 611, 515, 586, 0,
	0, 0, 901, 0, 0, 0, 0, 0, 0, 0,
	220, 0, 0, 0, 0, 726, 723, 727, 733, 721,
	731, 718, 729, 0, 414, 348, 0, 565, 441, 219,
	265, 252, 294, 336, 448, 0, 0, 326, 496, 261,
	350, 0, 240, 383, 0, 472, 347, 0, 455, 475,
	0, 367, 246, 406, 462, 463, 715, 720, 0, 736,
	0, 4211, 251, 372, 232, 380, 577, 543, 435, 393,
	391, 0, 358, 415, 572, 896, 0, 280, 0, 275,
	371, 511, 238, 490, 409, 376, 330, 438, 467, 277,
	262, 263, 306, 408, 296, 248, 501, 540, 544, 542,
	538, 535, 539, 536, 537, 541, 297, 534, 0, 509,
	518, 552, 532, 560, 517, 557, 527, 272, 556, 521,
	520, 566, 547, 548, 502, 562, 533, 531, 524, 523,
	519, 0, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 208, 0, 209, 210, 211, 213, 214, 215,
	714, 216, 217, 218, 221, 222, 223, 225, 585, 226,
	227, 228, 229, 230, 231, 522, 716, 233, 234, 235,
	236, 237, 239, 241, 242, 243, 244, 245, 247, 249,
	0, 0, 0, 719, 0, 0, 0, 253, 254, 255,
	256, 257, 258, 0, 259, 260, 264, 266, 267, 268,
	269, 270, 271, 274, 0, 276, 278, 0, 279, 282,
	0, 283, 284, 285, 286, 287, 288, 289, 290, 526,
	291, 0, 292, 293, 295, 0, 298, 299, 300, 301,
	302, 0, 303, 528, 899, 304, 305, 307, 308, 309,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 322, 0, 323, 324, 325, 327, 0, 328, 329,
	332, 333, 334, 335, 0, 337, 545, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 345, 346, 349,
	546, 351, 352, 353, 354, 355, 356, 357, 587, 359,
	360, 361, 362, 363, 364, 365, 549, 550, 366, 368,
	369, 551, 553, 554, 732, 384, 385, 386, 387, 388,
	389, 390, 392, 0, 394, 395, 396, 555, 397, 398,
	399, 400, 0, 401, 402, 403, 404, 405, 407, 410,
	411, 412, 413, 0, 416, 417, 418, 419, 420, 421,
	422, 424, 425, 426, 428, 429, 430, 588, 431, 432,
	433, 434, 902, 436, 437, 589, 439, 440, 442, 443,
	444, 445, 446, 447, 609, 0, 449, 559, 450, 451,
	452, 453, 454, 0, 456, 457, 458, 459, 460, 461,
	464, 465, 466, 468, 469, 561, 470, 471, 0, 473,
	474, 735, 476, 477, 478, 479, 480, 0, 610, 481,
	563, 482, 564, 483, 484, 485, 486, 487, 4210, 489,
	491, 0, 886, 493, 494, 495, 497, 498, 499, 500,
	503, 504, 505, 506, 507, 0, 508, 510, 512, 590,
	567, 568, 569, 570, 571, 573, 574, 575, 576, 513,
	514, 530, 381, 375, 331, 373, 374, 378, 379, 382,
	0, 0, 0, 0, 0, 0, 0, 884, 0, 711,
	0, 905, 850, 0, 0, 0, 900, 912, 890, 0,
	0, 0, 891, 0, 0, 880, 881, 207, 0, 224,
	717, 0, 273, 310, 895, 0, 883, 370, 0, 423,
	427, 0, 516, 910, 0, 887, 0, 281, 908, 722,
	0, 728, 909, 734, 907, 492, 0, 724, 725, 730,
	212, 611, 515, 586, 0, 0, 0, 901, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	726, 723, 727, 733, 721, 731, 718, 729, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 715, 720, 0, 736, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	896, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 714, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 716, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 3910, 0, 0, 0, 719, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 3912,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 732,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 3911, 433, 434, 902, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 735, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 886, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 0, 0, 0, 0, 0,
	0, 0, 884, 0, 711, 0, 905, 850, 0, 0,
	0, 900, 912, 890, 0, 0, 0, 3909, 0, 0,
	880, 881, 207, 0, 224, 717, 0, 273, 310, 895,
	0, 883, 370, 0, 423, 427, 0, 4209, 910, 0,
	887, 0, 281, 908, 722, 0, 728, 909, 734, 907,
	492, 0, 724, 725, 730, 212, 611, 515, 586, 0,
	0, 0, 901, 0, 0, 0, 0, 0, 0, 0,
	220, 0, 0, 0, 0, 726, 723, 727, 733, 721,
	731, 718, 729, 0, 414, 348, 0, 565, 441, 219,
	265, 252, 294, 336, 448, 0, 0, 326, 496, 261,
	350, 0, 240, 383, 0, 472, 347, 0, 455, 475,
	0, 367, 246, 406, 462, 463, 715, 720, 0, 736,
	0, 4211, 251, 372, 232, 380, 577, 543, 435, 393,
	391, 0, 358, 415, 572, 896, 0, 280, 0, 275,
	371, 511, 238, 490, 409, 376, 330, 438, 467, 277,
	262, 263, 306, 408, 296, 248, 501, 540, 544, 542,
	538, 535, 539, 536, 537, 541, 297, 534, 0, 509,
	518, 552, 532, 560, 517, 557, 527, 272, 556, 521,
	520, 566, 547, 548, 502, 562, 533, 531, 524, 523,
	519, 0, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 208, 0, 209, 210, 211, 213, 214, 215,
	714, 216, 217, 218, 221, 222, 223, 225, 585, 226,
	227, 228, 229, 230, 231, 522, 716, 233, 234, 235,
	236, 237, 239, 241, 242, 243, 244, 245, 247, 249,
	0, 0, 0, 719, 0, 0, 0, 253, 254, 255,
	256, 257, 258, 0, 259, 260, 264, 266, 267, 268,
	269, 270, 271, 274, 0, 276, 278, 0, 279, 282,
	0, 283, 284, 285, 286, 287, 288, 289, 290, 526,
	291, 0, 292, 293, 295, 0, 298, 299, 300, 301,
	302, 0, 303, 528, 899, 304, 305, 307, 308, 309,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 322, 0, 323, 324, 325, 327, 0, 328, 329,
	332, 333, 334, 335, 0, 337, 545, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 345, 346, 349,
	546, 351, 352, 353, 354, 355, 356, 357, 587, 359,
	360, 361, 362, 363, 364, 365, 549, 550, 366, 368,
	369, 551, 553, 554, 732, 384, 385, 386, 387, 388,
	389, 390, 392, 0, 394, 395, 396, 555, 397, 398,
	399, 400, 0, 401, 402, 403, 404, 405, 407, 410,
	411, 412, 413, 0, 416, 417, 418, 419, 420, 421,
	422, 424, 425, 426, 428, 429, 430, 588, 431, 432,
	433, 434, 902, 436, 437, 589, 439, 440, 442, 443,
	444, 445, 446, 447, 609, 0, 449, 559, 450, 451,
	452, 453, 454, 0, 456, 457, 458, 459, 460, 461,
	464, 465, 466, 468, 469, 561, 470, 471, 0, 473,
	474, 735, 476, 477, 478, 479, 480, 0, 610, 481,
	563, 482, 564, 483, 484, 485, 486, 487, 4210, 489,
	491, 0, 886, 493, 494, 495, 497, 498, 499, 500,
	503, 504, 505, 506, 507, 0, 508, 510, 512, 590,
	567, 568, 569, 570, 571, 573, 574, 575, 576, 513,
	514, 530, 381, 375, 331, 373, 374, 378, 379, 382,
	0, 0, 0, 0, 0, 0, 0, 884, 0, 711,
	0, 905, 850, 0, 0, 0, 900, 912, 890, 0,
	0, 0, 891, 0, 0, 880, 881, 207, 0, 224,
	717, 0, 273, 310, 895, 0, 883, 370, 0, 423,
	427, 0, 516, 910, 0, 887, 0, 281, 908, 722,
	0, 728, 909, 734, 907, 492, 0, 724, 725, 730,
	212, 611, 515, 586, 0, 0, 0, 901, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	726, 723, 727, 733, 721, 731, 718, 729, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 715, 720, 0, 736, 0, 2782, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	896, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 714, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 716, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 719, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 899,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 732,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 902, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 735, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 886, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 0, 0, 0, 0, 0,
	0, 0, 884, 0, 711, 0, 2187, 850, 0, 0,
	0, 900, 912, 890, 0, 0, 0, 891, 0, 0,
	880, 881, 207, 0, 224, 717, 0, 273, 310, 895,
	0, 883, 370, 0, 423, 427, 0, 516, 910, 0,
	887, 0, 281, 908, 722, 0, 728, 909, 734, 907,
	492, 0, 724, 725, 730, 212, 611, 515, 586, 0,
	0, 0, 901, 0, 0, 0, 0, 0, 0, 0,
	220, 0, 0, 0, 0, 726, 723, 727, 733, 721,
	731, 718, 729, 0, 414, 348, 0, 565, 441, 219,
	265, 252, 294, 336, 448, 0, 0, 326, 496, 261,
	350, 0, 240, 383, 0, 472, 347, 0, 455, 475,
	0, 367, 246, 406, 462, 463, 715, 720, 0, 736,
	0, 250, 251, 372, 232, 380, 577, 543, 435, 393,
	391, 0, 358, 415, 572, 896, 0, 280, 0, 275,
	371, 511, 238, 490, 409, 376, 330, 438, 467, 277,
	262, 263, 306, 408, 296, 248, 501, 540, 544, 542,
	538, 535, 539, 536, 537, 541, 297, 534, 0, 509,
	518, 552, 532, 560, 517, 557, 527, 272, 556, 521,
	520, 566, 547, 548, 502, 562, 533, 531, 524, 523,
	519, 0, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 208, 0, 209, 210, 211, 213, 214, 215,
	714, 216, 217, 218, 221, 222, 223, 225, 585, 226,
	227, 228, 229, 230, 231, 522, 716, 233, 234, 235,
	236, 237, 239, 241, 242, 243, 244, 245, 247, 249,
	0, 0, 0, 719, 0, 0, 0, 253, 254, 255,
	256, 257, 258, 0, 259, 260, 264, 266, 267, 268,
	269, 270, 271, 274, 0, 276, 278, 0, 279, 282,
	0, 283, 284, 285, 286, 287, 288, 289, 290, 526,
	291, 0, 292, 293, 295, 0, 298, 299, 300, 301,
	302, 0, 303, 528, 899, 304, 305, 307, 308, 309,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 322, 0, 323, 324, 325, 327, 0, 328, 329,
	332, 333, 334, 335, 0, 337, 545, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 345, 346, 349,
	546, 351, 352, 353, 354, 355, 356, 357, 587, 359,
	360, 361, 362, 363, 364, 365, 549, 550, 366, 368,
	369, 551, 553, 554, 732, 384, 385, 386, 387, 388,
	389, 390, 392, 0, 394, 395, 396, 555, 397, 398,
	399, 400, 0, 401, 402, 403, 404, 405, 407, 410,
	411, 412, 413, 0, 416, 417, 418, 419, 420, 421,
	422, 424, 425, 426, 428, 429, 430, 588, 431, 432,
	433, 434, 902, 436, 437, 589, 439, 440, 442, 443,
	444, 445, 446, 447, 609, 0, 449, 559, 450, 451,
	452, 453, 454, 0, 456, 457, 458, 459, 460, 461,
	464, 465, 466, 468, 469, 561, 470, 471, 0, 473,
	474, 735, 476, 477, 478, 479, 480, 0, 610, 481,
	563, 482, 564, 483, 484, 485, 486, 487, 488, 489,
	491, 0, 886, 493, 494, 495, 497, 498, 499, 500,
	503, 504, 505, 506, 507, 0, 508, 510, 512, 590,
	567, 568, 569, 570, 571, 573, 574, 575, 576, 513,
	514, 530, 381, 375, 331, 373, 374, 378, 379, 382,
	0, 0, 0, 0, 0, 0, 0, 884, 0, 711,
	0, 905, 850, 0, 0, 0, 900, 912, 890, 0,
	0, 0, 891, 0, 0, 880, 881, 207, 0, 224,
	717, 0, 273, 310, 895, 0, 883, 370, 0, 423,
	427, 0, 516, 910, 0, 887, 0, 281, 908, 722,
	0, 728, 909, 734, 907, 492, 0, 724, 725, 730,
	212, 611, 515, 586, 0, 0, 0, 901, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	726, 723, 727, 733, 721, 731, 718, 729, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 715, 720, 0, 736, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	896, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 714, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 716, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 719, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 899,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 732,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 902, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 735, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 886, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 0, 0, 0, 0, 0,
	0, 0, 884, 0, 711, 0, 905, 850, 0, 0,
	0, 0, 912, 890, 0, 0, 0, 891, 0, 0,
	1234, 1235, 207, 0, 224, 717, 0, 273, 310, 895,
	0, 0, 370, 0, 423, 427, 0, 516, 910, 0,
	3731, 0, 281, 908, 722, 0, 728, 909, 734, 907,
	492, 0, 724, 725, 730, 212, 611, 515, 586, 0,
	0, 0, 377, 0, 0, 0, 0, 0, 0, 0,
	220, 0, 0, 0, 0, 726, 723, 727, 733, 721,
	731, 718, 729, 0, 414, 348, 0, 565, 441, 219,
	265, 252, 294, 336, 448, 0, 0, 326, 496, 261,
	350, 0, 240, 383, 0, 472, 347, 0, 455, 475,
	0, 367, 246, 406, 462, 463, 715, 720, 0, 736,
	0, 250, 251, 372, 232, 380, 577, 543, 435, 393,
	391, 0, 358, 415, 572, 896, 0, 280, 0, 275,
	371, 511, 238, 490, 409, 376, 330, 438, 467, 277,
	262, 263, 306, 408, 296, 248, 501, 540, 544, 542,
	538, 535, 539, 536, 537, 541, 297, 534, 0, 509,
	518, 552, 532, 560, 517, 557, 527, 272, 556, 521,
	520, 566, 547, 548, 502, 562, 533, 531, 524, 523,
	519, 0, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 208, 0, 209, 210, 211, 213, 214, 215,
	714, 216, 217, 218, 221, 222, 223, 225, 585, 226,
	227, 228, 229, 230, 231, 522, 716, 233, 234, 235,
	236, 237, 239, 241, 242, 243, 244, 245, 247, 249,
	0, 0, 0, 719, 0, 0, 0, 253, 254, 255,
	256, 257, 258, 0, 259, 260, 264, 266, 267, 268,
	269, 270, 271, 274, 0, 276, 278, 0, 279, 282,
	0, 283, 284, 285, 286, 287, 288, 289, 290, 526,
	291, 0, 292, 293, 295, 0, 298, 299, 300, 301,
	302, 0, 303, 528, 899, 304, 305, 307, 308, 309,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 322, 0, 323, 324, 325, 327, 0, 328, 329,
	332, 333, 334, 335, 0, 337, 545, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 345, 346, 349,
	546, 351, 352, 353, 354, 355, 356, 357, 587, 359,
	360, 361, 362, 363, 364, 365, 549, 550, 366, 368,
	369, 551, 553, 554, 732, 384, 385, 386, 387, 388,
	389, 390, 392, 0, 394, 395, 396, 555, 397, 398,
	399, 400, 0, 401, 402, 403, 404, 405, 407, 410,
	411, 412, 413, 0, 416, 417, 418, 419, 420, 421,
	422, 424, 425, 426, 428, 429, 430, 588, 431, 432,
	433, 434, 2730, 436, 437, 589, 439, 440, 442, 443,
	444, 445, 446, 447, 609, 0, 449, 559, 450, 451,
	452, 453, 454, 0, 456, 457, 458, 459, 460, 461,
	464, 465, 466, 468, 469, 561, 470, 471, 0, 473,
	474, 735, 476, 477, 478, 479, 480, 0, 610, 481,
	563, 482, 564, 483, 484, 485, 486, 487, 488, 489,
	491, 0, 0, 493, 494, 495, 497, 498, 499, 500,
	503, 504, 505, 506, 507, 0, 508, 510, 512, 590,
	567, 568, 569, 570, 571, 573, 574, 575, 576, 513,
	514, 530, 381, 375, 331, 373, 374, 378, 379, 382,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 711,
	0, 905, 850, 0, 0, 0, 0, 912, 890, 0,
	0, 0, 2181, 0, 0, 2728, 2729, 207, 0, 224,
	717, 0, 273, 310, 895, 0, 0, 370, 0, 423,
	427, 0, 516, 910, 0, 0, 0, 281, 908, 722,
	0, 728, 909, 734, 907, 492, 0, 724, 725, 730,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	726, 723, 727, 733, 721, 731, 718, 729, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 715, 720, 0, 736, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	896, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 714, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 716, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 719, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 899,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 732,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 2730, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 735, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 749, 0, 1196, 850, 0, 0,
	0, 0, 912, 0, 0, 0, 0, 2181, 0, 0,
	2728, 2729, 207, 0, 224, 717, 0, 273, 310, 525,
	0, 0, 370, 0, 423, 427, 0, 516, 0, 0,
	3962, 0, 281, 1193, 722, 0, 728, 0, 734, 1192,
	492, 0, 724, 725, 730, 212, 611, 515, 586, 0,
	0, 0, 377, 0, 0, 0, 0, 0, 0, 0,
	220, 0, 0, 0, 1194, 726, 723, 727, 733, 721,
	731, 718, 729, 0, 414, 348, 0, 565, 441, 219,
	265, 252, 294, 336, 448, 0, 0, 326, 496, 261,
	350, 0, 240, 383, 0, 472, 347, 0, 455, 475,
	0, 367, 246, 406, 462, 463, 715, 720, 0, 736,
	0, 250, 251, 372, 232, 380, 577, 543, 435, 393,
	391, 0, 358, 415, 572, 0, 0, 280, 0, 275,
	371, 511, 238, 490, 409, 376, 330, 438, 467, 277,
	262, 263, 306, 408, 296, 248, 501, 540, 544, 542,
	538, 535, 539, 536, 537, 541, 297, 534, 0, 509,
	518, 552, 532, 560, 517, 557, 527, 272, 556, 521,
	520, 566, 547, 548, 502, 562, 533, 531, 524, 523,
	519, 0, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 208, 0, 209, 210, 211, 213, 214, 215,
	714, 216, 217, 218, 221, 222, 223, 225, 585, 226,
	227, 228, 229, 230, 231, 522, 716, 233, 234, 235,
	236, 237, 239, 241, 242, 243, 244, 245, 247, 249,
	0, 0, 0, 719, 0, 0, 0, 253, 254, 255,
	256, 257, 258, 0, 259, 260, 264, 266, 267, 268,
	269, 270, 271, 274, 0, 276, 278, 0, 279, 282,
	0, 283, 284, 285, 286, 287, 288, 289, 290, 526,
	291, 0, 292, 293, 295, 0, 298, 299, 300, 301,
	302, 0, 303, 528, 529, 304, 305, 307, 308, 309,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 322, 0, 323, 324, 325, 327, 0, 328, 329,
	332, 333, 334, 335, 0, 337, 545, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 345, 346, 349,
	546, 351, 352, 353, 354, 355, 356, 357, 587, 359,
	360, 361, 362, 363, 364, 365, 549, 550, 366, 368,
	369, 551, 553, 554, 732, 384, 385, 386, 387, 388,
	389, 390, 392, 0, 394, 395, 396, 555, 397, 398,
	399, 400, 0, 401, 402, 403, 404, 405, 407, 410,
	411, 412, 413, 0, 416, 417, 418, 419, 420, 421,
	422, 424, 425, 426, 428, 429, 430, 588, 431, 432,
	433, 434, 558, 436, 437, 589, 439, 440, 442, 443,
	444, 445, 446, 447, 609, 0, 449, 559, 450, 451,
	452, 453, 454, 0, 456, 457, 458, 459, 460, 461,
	464, 465, 466, 468, 469, 561, 470, 471, 0, 473,
	474, 735, 476, 477, 478, 479, 480, 0, 610, 481,
	563, 482, 564, 483, 484, 485, 486, 487, 488, 489,
	491, 0, 0, 493, 494, 495, 497, 498, 499, 500,
	503, 504, 505, 506, 507, 0, 508, 510, 512, 590,
	567, 568, 569, 570, 571, 573, 574, 575, 576, 513,
	514, 530, 381, 375, 331, 373, 374, 378, 379, 382,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	711, 0, 905, 850, 0, 0, 0, 0, 912, 890,
	0, 0, 3963, 0, 0, 1197, 1198, 3961, 207, 0,
	224, 717, 0, 273, 310, 895, 0, 0, 370, 0,
	423, 427, 0, 516, 910, 0, 0, 0, 281, 908,
	722, 0, 728, 909, 734, 907, 492, 0, 724, 725,
	730, 212, 611, 515, 586, 0, 0, 0, 377, 0,
	0, 0, 0, 0, 0, 0, 220, 0, 0, 0,
	0, 726, 723, 727, 733, 721, 731, 718, 729, 0,
	414, 348, 0, 565, 441, 219, 265, 252, 294, 336,
	448, 0, 0, 326, 496, 261, 350, 0, 240, 383,
	0, 472, 347, 0, 455, 475, 0, 367, 246, 406,
	462, 463, 715, 720, 0, 736, 0, 250, 251, 372,
	232, 380, 577, 543, 2180, 393, 391, 0, 358, 415,
	572, 896, 0, 280, 0, 275, 371, 511, 238, 490,
	409, 376, 330, 438, 467, 277, 262, 263, 306, 408,
	296, 248, 501, 540, 544, 542, 538, 535, 539, 536,
	537, 541, 297, 534, 0, 509, 518, 552, 532, 560,
	517, 557, 527, 272, 556, 521, 520, 566, 547, 548,
	502, 562, 533, 531, 524, 523, 519, 0, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 208, 0,
	209, 210, 211, 213, 214, 215, 714, 216, 217, 218,
	221, 222, 223, 225, 585, 226, 227, 228, 229, 230,
	231, 522, 716, 233, 234, 235, 236, 237, 239, 241,
	242, 243, 244, 245, 247, 249, 0, 0, 0, 719,
	0, 0, 0, 253, 254, 255, 256, 257, 258, 0,
	259, 260, 264, 266, 267, 268, 269, 270, 271, 274,
	0, 276, 278, 0, 279, 282, 0, 283, 284, 285,
	286, 287, 288, 289, 290, 526, 291, 0, 292, 293,
	295, 0, 298, 299, 300, 301, 302, 0, 303, 528,
	899, 304, 305, 307, 308, 309, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 0, 323,
	324, 325, 327, 0, 328, 329, 332, 333, 334, 335,
	0, 337, 545, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 345, 346, 349, 546, 351, 352, 353,
	354, 355, 356, 357, 587, 359, 360, 361, 362, 363,
	364, 365, 549, 550, 366, 368, 369, 551, 553, 554,
	732, 384, 385, 386, 387, 388, 389, 390, 392, 0,
	394, 395, 396, 555, 397, 398, 399, 400, 0, 401,
	402, 403, 404, 405, 407, 410, 411, 412, 413, 0,
	416, 417, 418, 419, 420, 421, 422, 424, 425, 426,
	428, 429, 430, 588, 431, 432, 433, 434, 2179, 436,
	437, 589, 439, 440, 442, 443, 444, 445, 446, 447,
	609, 0, 449, 559, 450, 451, 452, 453, 454, 0,
	456, 457, 458, 459, 460, 461, 464, 465, 466, 468,
	469, 561, 470, 471, 0, 473, 474, 735, 476, 477,
	478, 479, 480, 0, 610, 481, 563, 482, 564, 483,
	484, 485, 486, 487, 488, 489, 491, 0, 0, 493,
	494, 495, 497, 498, 499, 500, 503, 504, 505, 506,
	507, 0, 508, 510, 512, 590, 567, 568, 569, 570,
	571, 573, 574, 575, 576, 513, 514, 530, 381, 375,
	331, 373, 374, 378, 379, 382, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 711, 0, 905, 850, 0,
	0, 0, 900, 912, 890, 0, 0, 0, 2181, 0,
	0, 2177, 2178, 207, 0, 224, 717, 0, 273, 310,
	895, 0, 883, 370, 0, 423, 427, 0, 0, 910,
	0, 887, 0, 281, 908, 0, 0, 0, 909, 0,
	907, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 901, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 726, 723, 727, 733,
	721, 731, 718, 729, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 715, 720, 0,
	736, 0, 4211, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 896, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 714, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 716, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 719, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 899, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 732, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 902, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 735, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 4210,
	489, 491, 0, 886, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	749, 0, 1196, 850, 0, 0, 0, 0, 912, 0,
	0, 0, 0, 891, 0, 0, 880, 881, 207, 0,
	224, 717, 0, 273, 310, 525, 0, 0, 370, 0,
	423, 427, 0, 516, 0, 0, 1202, 0, 281, 1193,
	722, 0, 728, 0, 734, 1192, 492, 0, 724, 725,
	730, 212, 611, 515, 586, 0, 0, 0, 377, 0,
	0, 0, 0, 0, 0, 0, 220, 0, 0, 0,
	1194, 726, 723, 727, 733, 721, 731, 718, 729, 0,
	414, 348, 0, 565, 441, 219, 265, 252, 294, 336,
	448, 0, 0, 326, 496, 261, 350, 0, 240, 383,
	0, 472, 347, 0, 455, 475, 0, 367, 246, 406,
	462, 463, 715, 720, 0, 736, 0, 250, 251, 372,
	232, 380, 577, 543, 435, 393, 391, 0, 358, 415,
	572, 0, 0, 280, 0, 275, 371, 511, 238, 490,
	409, 376, 330, 438, 467, 277, 262, 263, 306, 408,
	296, 248, 501, 540, 544, 542, 538, 535, 539, 536,
	537, 541, 297, 534, 0, 509, 518, 552, 532, 560,
	517, 557, 527, 272, 556, 521, 520, 566, 547, 548,
	502, 562, 533, 531, 524, 523, 519, 0, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 208, 0,
	209, 210, 211, 213, 214, 215, 714, 216, 217, 218,
	221, 222, 223, 225, 585, 226, 227, 228, 229, 230,
	231, 522, 716, 233, 234, 235, 236, 237, 239, 241,
	242, 243, 244, 245, 247, 249, 0, 0, 0, 719,
	0, 0, 0, 253, 254, 255, 256, 257, 258, 0,
	259, 260, 264, 266, 267, 268, 269, 270, 271, 274,
	0, 276, 278, 0, 279, 282, 0, 283, 284, 285,
	286, 287, 288, 289, 290, 526, 291, 0, 292, 293,
	295, 0, 298, 299, 300, 301, 302, 0, 303, 528,
	529, 304, 305, 307, 308, 309, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 0, 323,
	324, 325, 327, 0, 328, 329, 332, 333, 334, 335,
	0, 337, 545, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 345, 346, 349, 546, 351, 352, 353,
	354, 355, 356, 357, 587, 359, 360, 361, 362, 363,
	364, 365, 549, 550, 366, 368, 369, 551, 553, 554,
	732, 384, 385, 386, 387, 388, 389, 390, 392, 0,
	394, 395, 396, 555, 397, 398, 399, 400, 0, 401,
	402, 403, 404, 405, 407, 410, 411, 412, 413, 0,
	416, 417, 418, 419, 420, 421, 422, 424, 425, 426,
	428, 429, 430, 588, 431, 432, 433, 434, 558, 436,
	437, 589, 439, 440, 442, 443, 444, 445, 446, 447,
	609, 0, 449, 559, 450, 451, 452, 453, 454, 0,
	456, 457, 458, 459, 460, 461, 464, 465, 466, 468,
	469, 561, 470, 471, 0, 473, 474, 735, 476, 477,
	478, 479, 480, 0, 610, 481, 563, 482, 564, 483,
	484, 485, 486, 487, 488, 489, 491, 0, 0, 493,
	494, 495, 497, 498, 499, 500, 503, 504, 505, 506,
	507, 0, 508, 510, 512, 590, 567, 568, 569, 570,
	571, 573, 574, 575, 576, 513, 514, 530, 381, 375,
	331, 373, 374, 378, 379, 382, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 749, 0, 1196, 850, 0,
	0, 0, 0, 912, 0, 0, 0, 0, 0, 0,
	0, 1197, 1198, 207, 0, 224, 717, 0, 273, 310,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 1188, 0, 281, 1193, 722, 0, 728, 0, 734,
	1192, 492, 0, 724, 725, 730, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 1194, 726, 723, 727, 733,
	721, 731, 718, 729, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 715, 720, 0,
	736, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 714, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 716, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 719, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 732, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 735, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	749, 0, 1196, 850, 0, 0, 0, 0, 912, 0,
	0, 0, 0, 0, 0, 0, 1197, 1198, 207, 0,
	224, 717, 0, 273, 310, 525, 0, 0, 370, 0,
	423, 427, 0, 516, 0, 0, 0, 0, 281, 1193,
	722, 0, 728, 0, 734, 1192, 492, 0, 724, 725,
	730, 212, 611, 515, 586, 0, 0, 0, 377, 0,
	0, 0, 0, 0, 0, 0, 220, 0, 0, 0,
	1194, 726, 723, 727, 733, 721, 731, 718, 729, 0,
	414, 348, 0, 565, 441, 219, 265, 252, 294, 336,
	448, 0, 0, 326, 496, 261, 350, 0, 240, 383,
	0, 472, 347, 0, 455, 475, 0, 367, 246, 406,
	462, 463, 715, 720, 0, 736, 0, 250, 251, 372,
	232, 380, 577, 543, 435, 393, 391, 0, 358, 415,
	572, 0, 0, 280, 0, 275, 371, 511, 238, 490,
	409, 376, 330, 438, 467, 277, 262, 263, 306, 408,
	296, 248, 501, 540, 544, 542, 538, 535, 539, 536,
	537, 541, 297, 534, 0, 509, 518, 552, 532, 560,
	517, 557, 527, 272, 556, 521, 520, 566, 547, 548,
	502, 562, 533, 531, 524, 523, 519, 0, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 208, 0,
	209, 210, 211, 213, 214, 215, 714, 216, 217, 218,
	221, 222, 223, 225, 585, 226, 227, 228, 229, 230,
	231, 522, 716, 233, 234, 235, 236, 237, 239, 241,
	242, 243, 244, 245, 247, 249, 0, 0, 0, 719,
	0, 0, 0, 253, 254, 255, 256, 257, 258, 0,
	259, 260, 264, 266, 267, 268, 269, 270, 271, 274,
	0, 276, 278, 0, 279, 282, 0, 283, 284, 285,
	286, 287, 288, 289, 290, 526, 291, 0, 292, 293,
	295, 0, 298, 299, 300, 301, 302, 0, 303, 528,
	529, 304, 305, 307, 308, 309, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 0, 323,
	324, 325, 327, 0, 328, 329, 332, 333, 334, 335,
	0, 337, 545, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 345, 346, 349, 546, 351, 352, 353,
	354, 355, 356, 357, 587, 359, 360, 361, 362, 363,
	364, 365, 549, 550, 366, 368, 369, 551, 553, 554,
	732, 384, 385, 386, 387, 388, 389, 390, 392, 0,
	394, 395, 396, 555, 397, 398, 399, 400, 0, 401,
	402, 403, 404, 405, 407, 410, 411, 412, 413, 0,
	416, 417, 418, 419, 420, 421, 422, 424, 425, 426,
	428, 429, 430, 588, 431, 432, 433, 434, 558, 436,
	437, 589, 439, 440, 442, 443, 444, 445, 446, 447,
	609, 0, 449, 559, 450, 451, 452, 453, 454, 0,
	456, 457, 458, 459, 460, 461, 464, 465, 466, 468,
	469, 561, 470, 471, 0, 473, 474, 735, 476, 477,
	478, 479, 480, 0, 610, 481, 563, 482, 564, 483,
	484, 485, 486, 487, 488, 489, 491, 0, 0, 493,
	494, 495, 497, 498, 499, 500, 503, 504, 505, 506,
	507, 0, 508, 510, 512, 590, 567, 568, 569, 570,
	571, 573, 574, 575, 576, 513, 514, 530, 381, 375,
	331, 373, 374, 378, 379, 382, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 711, 0, 905, 850, 0,
	0, 0, 0, 912, 890, 0, 0, 0, 0, 0,
	0, 1197, 1198, 207, 0, 224, 717, 0, 273, 310,
	895, 0, 0, 370, 0, 423, 427, 0, 516, 910,
	0, 0, 0, 281, 908, 722, 0, 728, 909, 734,
	907, 492, 0, 724, 725, 730, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 726, 723, 727, 733,
	721, 731, 718, 729, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 715, 720, 0,
	736, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 896, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 714, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 716, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 719, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 899, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 732, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 2730, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 735, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 711, 0, 905, 850, 0, 0, 0, 0, 912,
	890, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 717, 2181, 273, 310, 895, 0, 0, 370,
	0, 423, 427, 0, 516, 910, 0, 0, 0, 281,
	908, 722, 0, 728, 909, 734, 907, 492, 0, 724,
	725, 730, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 3727, 0, 0,
	0, 0, 726, 723, 727, 733, 721, 731, 718, 729,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 715, 720, 0, 736, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 896, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 714, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 716, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	719, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 899, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 732, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 2730,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 735, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 711, 0, 905,
	850, 0, 0, 0, 0, 912, 890, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 717, 2181,
	273, 310, 895, 0, 0, 370, 0, 423, 427, 0,
	516, 910, 0, 0, 0, 281, 908, 722, 0, 728,
	909, 734, 907, 492, 0, 724, 725, 730, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 726, 723,
	727, 733, 721, 731, 718, 729, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 715,
	720, 0, 736, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 3207, 896, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 714, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 716,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 719, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 899, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 732, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 2730, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 735, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 711, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 717, 2181, 273, 310, 525, 0,
	0, 370, 0, 423, 427, 78, 516, 0, 0, 0,
	0, 281, 0, 722, 0, 728, 0, 734, 0, 492,
	0, 724, 725, 730, 212, 611, 515, 586, 0, 0,
	0, 377, 75, 0, 0, 608, 76, 0, 0, 220,
	0, 0, 0, 0, 726, 723, 727, 733, 721, 731,
	718, 729, 0, 414, 348, 2318, 1732, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 715, 720, 0, 736, 0,
	250, 251, 372, 232, 380, 2326, 2327, 2325, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 714,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 716, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 719, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 732, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	735, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 711,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	717, 2320, 273, 310, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 722,
	0, 728, 0, 734, 0, 492, 0, 724, 725, 730,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 608, 0, 0, 0, 220, 0, 0, 0, 0,
	726, 723, 727, 733, 721, 731, 718, 729, 0, 414,
	348, 2318, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 715, 720, 0, 736, 0, 250, 251, 372, 232,
	380, 2326, 2327, 2325, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 714, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 716, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 719, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 732,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 735, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 711, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 717, 2320, 273, 310,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 722, 0, 728, 0, 734,
	0, 492, 0, 724, 725, 730, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 726, 723, 727, 733,
	721, 731, 718, 729, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 715, 720, 0,
	736, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 714, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 716, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 719, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 732, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 735, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 711, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 717, 3359, 273, 310, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 722, 0, 728, 0, 734, 0, 492, 0, 724,
	725, 730, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 726, 723, 727, 733, 721, 731, 718, 729,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 715, 720, 0, 736, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 714, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 716, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	719, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 732, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 735, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 711, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 717, 4130,
	273, 310, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 722, 0, 728,
	0, 734, 0, 492, 0, 724, 725, 730, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 726, 723,
	727, 733, 721, 731, 718, 729, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 715,
	720, 0, 736, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 714, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 716,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 719, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 732, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 735, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 711, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 717, 3888, 273, 310, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 722, 0, 728, 0, 734, 0, 492,
	0, 724, 725, 730, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 726, 723, 727, 733, 721, 731,
	718, 729, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 715, 720, 0, 736, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 714,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 716, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 719, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 732, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	735, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 711,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	717, 2470, 273, 310, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 722,
	0, 728, 0, 734, 0, 492, 0, 724, 725, 730,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	726, 723, 727, 733, 721, 731, 718, 729, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 715, 720, 0, 736, 0, 250, 251, 372, 232,
	380, 2326, 2327, 2325, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 714, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 716, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 719, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 732,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 735, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 653, 0, 0, 0, 0, 0, 0, 664,
	665, 666, 0, 207, 0, 224, 0, 74, 273, 310,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 661, 662, 663,
	0, 0, 0, 0, 0, 194, 655, 656, 657, 658,
	659, 660, 653, 0, 0, 0, 0, 0, 0, 664,
	665, 666, 0, 207, 0, 224, 0, 0, 273, 310,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 3861, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 661, 662, 663,
	0, 0, 0, 0, 0, 194, 655, 656, 657, 658,
	659, 660, 653, 0, 0, 0, 0, 0, 0, 664,
	665, 666, 0, 207, 0, 224, 0, 0, 273, 310,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 2650, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 2651, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 661, 662, 663,
	0, 0, 0, 0, 0, 194, 655, 656, 657, 658,
	659, 660, 653, 0, 0, 0, 0, 0, 0, 664,
	665, 666, 0, 207, 0, 224, 0, 0, 273, 310,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 649, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 650, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 194, 0, 0, 661, 662, 663,
	0, 0, 0, 0, 0, 0, 655, 656, 657, 658,
	659, 660, 207, 0, 224, 0, 0, 273, 310, 525,
	0, 0, 370, 0, 423, 427, 0, 516, 0, 0,
	0, 0, 281, 0, 0, 0, 0, 0, 0, 0,
	492, 0, 0, 0, 0, 212, 611, 515, 586, 0,
	0, 0, 377, 0, 0, 0, 0, 0, 0, 0,
	220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 414, 348, 0, 565, 441, 219,
	265, 252, 294, 336, 448, 0, 0, 326, 496, 261,
	350, 0, 240, 383, 0, 472, 347, 0, 455, 475,
	0, 367, 246, 406, 462, 463, 0, 0, 0, 0,
	0, 250, 251, 372, 232, 380, 577, 543, 435, 393,
	391, 0, 358, 415, 572, 0, 0, 280, 0, 275,
	371, 511, 238, 490, 409, 376, 330, 438, 467, 277,
	262, 263, 306, 408, 296, 248, 501, 540, 544, 542,
	538, 535, 539, 536, 537, 541, 297, 534, 0, 509,
	518, 552, 532, 560, 517, 557, 527, 272, 556, 521,
	520, 566, 547, 548, 502, 562, 533, 531, 524, 523,
	519, 0, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 208, 0, 209, 210, 211, 213, 214, 215,
	0, 216, 217, 218, 221, 222, 223, 225, 585, 226,
	227, 228, 229, 230, 231, 522, 0, 233, 234, 235,
	236, 237, 239, 241, 242, 243, 244, 245, 247, 249,
	0, 0, 0, 0, 0, 0, 0, 253, 254, 255,
	256, 257, 258, 0, 259, 260, 264, 266, 267, 268,
	269, 270, 271, 274, 0, 276, 278, 0, 279, 282,
	0, 283, 284, 285, 286, 287, 288, 289, 290, 526,
	291, 0, 292, 293, 295, 0, 298, 299, 300, 301,
	302, 0, 303, 528, 529, 304, 305, 307, 308, 309,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 322, 0, 323, 324, 325, 327, 0, 328, 329,
	332, 333, 334, 335, 0, 337, 545, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 345, 346, 349,
	546, 351, 352, 353, 354, 355, 356, 357, 587, 359,
	360, 361, 362, 363, 364, 365, 549, 550, 366, 368,
	369, 551, 553, 554, 0, 384, 385, 386, 387, 388,
	389, 390, 392, 0, 394, 395, 396, 555, 397, 398,
	399, 400, 0, 401, 402, 403, 404, 405, 407, 410,
	411, 412, 413, 0, 416, 417, 418, 419, 420, 421,
	422, 424, 425, 426, 428, 429, 430, 588, 431, 432,
	433, 434, 558, 436, 437, 589, 439, 440, 442, 443,
	444, 445, 446, 447, 609, 0, 449, 559, 450, 451,
	452, 453, 454, 0, 456, 457, 458, 459, 460, 461,
	464, 465, 466, 468, 469, 561, 470, 471, 0, 473,
	474, 0, 476, 477, 478, 479, 480, 0, 610, 481,
	563, 482, 564, 483, 484, 485, 486, 487, 488, 489,
	491, 0, 0, 493, 494, 495, 497, 498, 499, 500,
	503, 504, 505, 506, 507, 0, 508, 510, 512, 590,
	567, 568, 569, 570, 571, 573, 574, 575, 576, 513,
	514, 530, 381, 375, 331, 373, 374, 378, 379, 382,
	194, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 0,
	224, 0, 0, 273, 310, 525, 0, 4247, 370, 0,
	423, 427, 0, 516, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 0, 0, 0, 492, 0, 0, 0,
	0, 212, 611, 515, 586, 0, 0, 0, 377, 0,
	0, 0, 0, 0, 0, 0, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	414, 348, 0, 565, 441, 219, 265, 252, 294, 336,
	448, 0, 0, 326, 496, 261, 350, 0, 240, 383,
	0, 472, 347, 0, 455, 475, 0, 367, 246, 406,
	462, 463, 0, 0, 0, 0, 0, 250, 251, 372,
	232, 380, 577, 543, 435, 393, 391, 0, 358, 415,
	572, 0, 0, 280, 0, 275, 371, 511, 238, 490,
	409, 376, 330, 438, 467, 277, 262, 263, 306, 408,
	296, 248, 501, 540, 544, 542, 538, 535, 539, 536,
	537, 541, 297, 534, 0, 509, 518, 552, 532, 560,
	517, 557, 527, 272, 556, 521, 520, 566, 547, 548,
	502, 562, 533, 531, 524, 523, 519, 0, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 208, 0,
	209, 210, 211, 213, 214, 215, 0, 216, 217, 218,
	221, 222, 223, 225, 585, 226, 227, 228, 229, 230,
	231, 522, 0, 233, 234, 235, 236, 237, 239, 241,
	242, 243, 244, 245, 247, 249, 0, 0, 0, 0,
	0, 0, 0, 253, 254, 255, 256, 257, 258, 0,
	259, 260, 264, 266, 267, 268, 269, 270, 271, 274,
	0, 276, 278, 0, 279, 282, 0, 283, 284, 285,
	286, 287, 288, 289, 290, 526, 291, 0, 292, 293,
	295, 0, 298, 299, 300, 301, 302, 0, 303, 528,
	529, 304, 305, 307, 308, 309, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 0, 323,
	324, 325, 327, 0, 328, 329, 332, 333, 334, 335,
	0, 337, 545, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 345, 346, 349, 546, 351, 352, 353,
	354, 355, 356, 357, 587, 359, 360, 361, 362, 363,
	364, 365, 549, 550, 366, 368, 369, 551, 553, 554,
	0, 384, 385, 386, 387, 388, 389, 390, 392, 0,
	394, 395, 396, 555, 397, 398, 399, 400, 0, 401,
	402, 403, 404, 405, 407, 410, 411, 412, 413, 0,
	416, 417, 418, 419, 420, 421, 422, 424, 425, 426,
	428, 429, 430, 588, 431, 432, 433, 434, 558, 436,
	437, 589, 439, 440, 442, 443, 444, 445, 446, 447,
	609, 0, 449, 559, 450, 451, 452, 453, 454, 0,
	456, 457, 458, 459, 460, 461, 464, 465, 466, 468,
	469, 561, 470, 471, 0, 473, 474, 0, 476, 477,
	478, 479, 480, 0, 610, 481, 563, 482, 564, 483,
	484, 485, 486, 487, 488, 489, 491, 0, 0, 493,
	494, 495, 497, 498, 499, 500, 503, 504, 505, 506,
	507, 0, 508, 510, 512, 590, 567, 568, 569, 570,
	571, 573, 574, 575, 576, 513, 514, 530, 381, 375,
	331, 373, 374, 378, 379, 382, 194, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 0, 224, 0, 0, 273,
	310, 525, 0, 4117, 370, 0, 423, 427, 0, 516,
	0, 0, 0, 0, 281, 0, 0, 0, 0, 0,
	0, 0, 492, 0, 0, 0, 0, 212, 611, 515,
	586, 0, 0, 0, 377, 0, 0, 0, 0, 0,
	0, 0, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 414, 348, 0, 565,
	441, 219, 265, 252, 294, 336, 448, 0, 0, 326,
	496, 261, 350, 0, 240, 383, 0, 472, 347, 0,
	455, 475, 0, 367, 246, 406, 462, 463, 0, 0,
	0, 0, 0, 250, 251, 372, 232, 380, 577, 543,
	435, 393, 391, 0, 358, 415, 572, 0, 0, 280,
	0, 275, 371, 511, 238, 490, 409, 376, 330, 438,
	467, 277, 262, 263, 306, 408, 296, 248, 501, 540,
	544, 542, 538, 535, 539, 536, 537, 541, 297, 534,
	0, 509, 518, 552, 532, 560, 517, 557, 527, 272,
	556, 521, 520, 566, 547, 548, 502, 562, 533, 531,
	524, 523, 519, 0, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 208, 0, 209, 210, 211, 213,
	214, 215, 0, 216, 217, 218, 221, 222, 223, 225,
	585, 226, 227, 228, 229, 230, 231, 522, 0, 233,
	234, 235, 236, 237, 239, 241, 242, 243, 244, 245,
	247, 249, 0, 0, 0, 0, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 0, 259, 260, 264, 266,
	267, 268, 269, 270, 271, 274, 0, 276, 278, 0,
	279, 282, 0, 283, 284, 285, 286, 287, 288, 289,
	290, 526, 291, 0, 292, 293, 295, 0, 298, 299,
	300, 301, 302, 0, 303, 528, 529, 304, 305, 307,
	308, 309, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 0, 323, 324, 325, 327, 0,
	328, 329, 332, 333, 334, 335, 0, 337, 545, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 345,
	346, 349, 546, 351, 352, 353, 354, 355, 356, 357,
	587, 359, 360, 361, 362, 363, 364, 365, 549, 550,
	366, 368, 369, 551, 553, 554, 0, 384, 385, 386,
	387, 388, 389, 390, 392, 0, 394, 395, 396, 555,
	397, 398, 399, 400, 0, 401, 402, 403, 404, 405,
	407, 410, 411, 412, 413, 0, 416, 417, 418, 419,
	420, 421, 422, 424, 425, 426, 428, 429, 430, 588,
	431, 432, 433, 434, 558, 436, 437, 589, 439, 440,
	442, 443, 444, 445, 446, 447, 609, 0, 449, 559,
	450, 451, 452, 453, 454, 0, 456, 457, 458, 459,
	460, 461, 464, 465, 466, 468, 469, 561, 470, 471,
	0, 473, 474, 0, 476, 477, 478, 479, 480, 0,
	610, 481, 563, 482, 564, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 0, 493, 494, 495, 497, 498,
	499, 500, 503, 504, 505, 506, 507, 0, 508, 510,
	512, 590, 567, 568, 569, 570, 571, 573, 574, 575,
	576, 513, 514, 530, 381, 375, 331, 373, 374, 378,
	379, 382, 194, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 0, 224, 0, 0, 273, 310, 525, 0, 4114,
	370, 0, 423, 427, 78, 516, 0, 0, 0, 0,
	281, 0, 0, 0, 0, 0, 0, 0, 492, 0,
	0, 0, 0, 212, 611, 515, 586, 0, 0, 0,
	377, 75, 0, 0, 0, 76, 0, 0, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 414, 348, 0, 1732, 441, 219, 265, 252,
	294, 336, 448, 0, 0, 326, 496, 261, 350, 0,
	240, 383, 0, 472, 347, 0, 455, 475, 0, 367,
	246, 406, 462, 463, 0, 0, 0, 0, 0, 250,
	251, 372, 232, 380, 577, 543, 435, 393, 391, 0,
	358, 415, 572, 0, 0, 280, 0, 275, 371, 511,
	238, 490, 409, 376, 330, 438, 467, 277, 262, 263,
	306, 408, 296, 248, 501, 540, 544, 542, 538, 535,
	539, 536, 537, 541, 297, 534, 0, 509, 518, 552,
	532, 560, 517, 557, 527, 272, 556, 521, 520, 566,
	547, 548, 502, 562, 533, 531, 524, 523, 519, 0,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	208, 0, 209, 210, 211, 213, 214, 215, 0, 216,
	217, 218, 221, 222, 223, 225, 585, 226, 227, 228,
	229, 230, 231, 522, 0, 233, 234, 235, 236, 237,
	239, 241, 242, 243, 244, 245, 247, 249, 0, 0,
	0, 0, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 0, 259, 260, 264, 266, 267, 268, 269, 270,
	271, 274, 0, 276, 278, 0, 279, 282, 0, 283,
	284, 285, 286, 287, 288, 289, 290, 526, 291, 0,
	292, 293, 295, 0, 298, 299, 300, 301, 302, 0,
	303, 528, 529, 304, 305, 307, 308, 309, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	0, 323, 324, 325, 327, 0, 328, 329, 332, 333,
	334, 335, 0, 337, 545, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 345, 346, 349, 546, 351,
	352, 353, 354, 355, 356, 357, 587, 359, 360, 361,
	362, 363, 364, 365, 549, 550, 366, 368, 369, 551,
	553, 554, 0, 384, 385, 386, 387, 388, 389, 390,
	392, 0, 394, 395, 396, 555, 397, 398, 399, 400,
	0, 401, 402, 403, 404, 405, 407, 410, 411, 412,
	413, 0, 416, 417, 418, 419, 420, 421, 422, 424,
	425, 426, 428, 429, 430, 588, 431, 432, 433, 434,
	558, 436, 437, 589, 439, 440, 442, 443, 444, 445,
	446, 447, 609, 0, 449, 559, 450, 451, 452, 453,
	454, 0, 456, 457, 458, 459, 460, 461, 464, 465,
	466, 468, 469, 561, 470, 471, 0, 473, 474, 0,
	476, 477, 478, 479, 480, 0, 610, 481, 563, 482,
	564, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	0, 493, 494, 495, 497, 498, 499, 500, 503, 504,
	505, 506, 507, 0, 508, 510, 512, 590, 567, 568,
	569, 570, 571, 573, 574, 575, 576, 513, 514, 530,
	381, 375, 331, 373, 374, 378, 379, 382, 749, 0,
	0, 850, 0, 0, 0, 0, 0, 79, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 0, 224, 717,
	74, 273, 310, 525, 0, 0, 370, 0, 423, 427,
	0, 516, 0, 0, 0, 0, 281, 1193, 722, 0,
	728, 0, 734, 1192, 492, 0, 724, 725, 730, 212,
	611, 515, 586, 0, 0, 0, 377, 0, 0, 0,
	0, 0, 0, 0, 220, 0, 0, 0, 1194, 726,
	723, 727, 733, 721, 731, 718, 729, 0, 414, 348,
	0, 565, 441, 219, 265, 252, 294, 336, 448, 0,
	0, 326, 496, 261, 350, 0, 240, 383, 0, 472,
	347, 0, 455, 475, 0, 367, 246, 406, 462, 463,
	715, 720, 0, 736, 0, 250, 251, 372, 232, 380,
	577, 543, 435, 393, 391, 0, 358, 415, 572, 0,
	0, 280, 0, 275, 371, 511, 238, 490, 409, 376,
	330, 438, 467, 277, 262, 263, 306, 408, 296, 248,
	501, 540, 544, 542, 538, 535, 539, 536, 537, 541,
	297, 534, 0, 509, 518, 552, 532, 560, 517, 557,
	527, 272, 556, 521, 520, 566, 547, 548, 502, 562,
	533, 531, 524, 523, 519, 0, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 208, 0, 209, 210,
	211, 213, 214, 215, 714, 216, 217, 218, 221, 222,
	223, 225, 585, 226, 227, 228, 229, 230, 231, 522,
	716, 233, 234, 235, 236, 237, 239, 241, 242, 243,
	244, 245, 247, 249, 0, 0, 0, 719, 0, 0,
	0, 253, 254, 255, 256, 257, 258, 0, 259, 260,
	264, 266, 267, 268, 269, 270, 271, 274, 0, 276,
	278, 0, 279, 282, 0, 283, 284, 285, 286, 287,
	288, 289, 290, 526, 291, 0, 292, 293, 295, 0,
	298, 299, 300, 301, 302, 0, 303, 528, 529, 304,
	305, 307, 308, 309, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 322, 0, 323, 324, 325,
	327, 0, 328, 329, 332, 333, 334, 335, 0, 337,
	545, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 345, 346, 349, 546, 351, 352, 353, 354, 355,
	356, 357, 587, 359, 360, 361, 362, 363, 364, 365,
	549, 550, 366, 368, 369, 551, 553, 554, 732, 384,
	385, 386, 387, 388, 389, 390, 392, 0, 394, 395,
	396, 555, 397, 398, 399, 400, 0, 401, 402, 403,
	404, 405, 407, 410, 411, 412, 413, 0, 416, 417,
	418, 419, 420, 421, 422, 424, 425, 426, 428, 429,
	430, 588, 431, 432, 433, 434, 558, 436, 437, 589,
	439, 440, 442, 443, 444, 445, 446, 447, 609, 0,
	449, 559, 450, 451, 452, 453, 454, 0, 456, 457,
	458, 459, 460, 461, 464, 465, 466, 468, 469, 561,
	470, 471, 0, 473, 474, 735, 476, 477, 478, 479,
	480, 0, 610, 481, 563, 482, 564, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 0, 493, 494, 495,
	497, 498, 499, 500, 503, 504, 505, 506, 507, 0,
	508, 510, 512, 590, 567, 568, 569, 570, 571, 573,
	574, 575, 576, 513, 514, 530, 381, 375, 331, 373,
	374, 378, 379, 382, 749, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 0, 224, 717, 0, 273, 310, 525,
	0, 0, 370, 0, 423, 427, 0, 516, 0, 0,
	0, 0, 281, 0, 722, 0, 728, 0, 734, 0,
	492, 0, 724, 725, 730, 212, 611, 515, 586, 0,
	0, 0, 377, 0, 0, 0, 0, 0, 0, 0,
	220, 0, 0, 0, 0, 726, 723, 727, 733, 721,
	731, 718, 729, 0, 414, 348, 0, 565, 441, 219,
	265, 252, 294, 336, 448, 0, 0, 326, 496, 261,
	350, 0, 240, 383, 1942, 472, 347, 0, 455, 475,
	0, 367, 246, 406, 462, 463, 715, 720, 0, 736,
	0, 250, 251, 372, 232, 380, 577, 543, 435, 393,
	391, 0, 358, 415, 572, 0, 0, 280, 0, 275,
	371, 511, 238, 490, 409, 376, 330, 438, 467, 277,
	262, 263, 306, 408, 296, 248, 501, 540, 544, 542,
	538, 535, 539, 536, 537, 541, 297, 534, 0, 509,
	518, 552, 532, 560, 517, 557, 527, 272, 556, 521,
	520, 566, 547, 548, 502, 562, 533, 531, 524, 523,
	519, 0, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 208, 0, 209, 210, 211, 213, 214, 215,
	714, 216, 217, 218, 221, 222, 223, 225, 585, 226,
	227, 228, 229, 230, 231, 522, 716, 233, 234, 235,
	236, 237, 239, 241, 242, 243, 244, 245, 247, 249,
	0, 0, 746, 719, 0, 0, 747, 253, 254, 255,
	256, 257, 258, 0, 259, 260, 264, 266, 267, 268,
	269, 270, 271, 274, 0, 276, 278, 0, 279, 282,
	0, 283, 284, 285, 286, 287, 288, 289, 290, 526,
	291, 0, 292, 293, 295, 0, 298, 299, 300, 301,
	302, 0, 303, 528, 529, 304, 305, 307, 308, 309,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 322, 0, 323, 324, 325, 327, 0, 328, 329,
	332, 333, 334, 335, 0, 337, 545, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 345, 346, 349,
	546, 351, 352, 353, 354, 355, 356, 357, 587, 359,
	360, 361, 362, 363, 364, 365, 549, 550, 366, 368,
	369, 551, 553, 554, 732, 384, 385, 386, 387, 388,
	389, 390, 392, 0, 394, 395, 396, 555, 397, 398,
	399, 400, 0, 401, 402, 403, 404, 405, 407, 410,
	411, 412, 413, 0, 416, 417, 418, 419, 420, 421,
	422, 424, 425, 426, 428, 429, 430, 588, 431, 432,
	433, 434, 558, 436, 437, 589, 439, 440, 442, 443,
	444, 445, 446, 447, 609, 748, 449, 559, 450, 451,
	452, 453, 454, 0, 456, 457, 458, 459, 460, 461,
	464, 465, 466, 468, 469, 561, 470, 471, 0, 473,
	474, 735, 476, 477, 478, 479, 480, 0, 610, 481,
	563, 482, 564, 483, 484, 485, 486, 487, 488, 489,
	491, 0, 0, 493, 494, 495, 497, 498, 499, 500,
	503, 504, 505, 506, 507, 0, 508, 510, 512, 590,
	567, 568, 569, 570, 571, 573, 574, 575, 576, 513,
	514, 530, 381, 375, 331, 373, 374, 378, 379, 382,
	194, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 0,
	224, 0, 0, 273, 310, 525, 0, 0, 370, 0,
	423, 427, 0, 516, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 0, 0, 0, 492, 0, 0, 0,
	0, 212, 611, 515, 586, 0, 0, 0, 377, 0,
	0, 0, 608, 1957, 0, 0, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	414, 348, 0, 565, 441, 219, 265, 252, 294, 336,
	448, 0, 0, 326, 496, 261, 350, 0, 240, 383,
	0, 472, 347, 0, 455, 475, 0, 367, 246, 406,
	462, 463, 0, 0, 0, 0, 0, 250, 251, 372,
	232, 380, 577, 543, 435, 393, 391, 0, 358, 415,
	572, 0, 0, 280, 0, 275, 371, 511, 238, 490,
	409, 376, 330, 438, 467, 277, 262, 263, 306, 408,
	296, 248, 501, 540, 544, 542, 538, 535, 539, 536,
	537, 541, 297, 534, 0, 509, 518, 552, 532, 560,
	517, 557, 527, 272, 556, 521, 520, 566, 547, 548,
	502, 562, 533, 531, 524, 523, 519, 0, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 208, 0,
	209, 210, 211, 213, 214, 215, 0, 216, 217, 218,
	221, 222, 223, 225, 585, 226, 227, 228, 229, 230,
	231, 522, 0, 233, 234, 235, 236, 237, 239, 241,
	242, 243, 244, 245, 247, 249, 0, 0, 0, 1961,
	0, 0, 0, 253, 254, 255, 256, 257, 258, 0,
	259, 260, 264, 266, 267, 268, 269, 270, 271, 274,
	0, 276, 278, 0, 279, 282, 0, 283, 284, 285,
	286, 287, 288, 289, 290, 526, 291, 0, 292, 293,
	295, 0, 298, 299, 300, 301, 302, 0, 303, 528,
	529, 304, 305, 307, 308, 309, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 0, 323,
	324, 325, 327, 0, 328, 329, 332, 333, 334, 335,
	0, 337, 545, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 345, 346, 349, 546, 351, 352, 353,
	354, 355, 356, 357, 587, 359, 360, 361, 362, 363,
	364, 365, 549, 550, 366, 368, 369, 551, 553, 554,
	0, 384, 385, 386, 387, 388, 389, 390, 392, 0,
	394, 395, 396, 555, 397, 398, 399, 400, 0, 401,
	402, 403, 404, 405, 407, 410, 411, 412, 413, 0,
	416, 417, 418, 419, 420, 421, 422, 424, 425, 426,
	428, 429, 430, 588, 431, 432, 433, 434, 558, 436,
	437, 589, 439, 440, 442, 443, 444, 445, 446, 447,
	609, 0, 449, 559, 450, 451, 452, 453, 454, 0,
	456, 457, 458, 459, 460, 461, 464, 465, 466, 468,
	469, 561, 470, 471, 0, 1958, 474, 0, 476, 477,
	478, 479, 480, 0, 610, 481, 563, 482, 564, 483,
	484, 485, 486, 487, 488, 489, 491, 0, 0, 493,
	494, 495, 497, 498, 499, 500, 503, 504, 505, 506,
	507, 0, 508, 510, 512, 590, 567, 568, 569, 570,
	571, 573, 574, 575, 576, 513, 514, 530, 381, 375,
	331, 373, 374, 378, 379, 382, 749, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 0, 224, 717, 965, 273,
	310, 525, 0, 0, 370, 0, 423, 427, 0, 516,
	0, 0, 0, 0, 281, 0, 722, 0, 728, 0,
	734, 0, 492, 0, 724, 725, 730, 212, 611, 515,
	586, 0, 0, 0, 377, 0, 0, 0, 0, 0,
	0, 0, 220, 0, 0, 0, 0, 726, 723, 727,
	733, 721, 731, 718, 729, 0, 414, 348, 0, 565,
	441, 219, 265, 252, 294, 336, 448, 0, 0, 326,
	496, 261, 350, 0, 240, 383, 0, 472, 347, 0,
	455, 475, 0, 367, 246, 406, 462, 463, 715, 720,
	0, 736, 0, 250, 251, 372, 232, 380, 577, 543,
	435, 393, 391, 0, 358, 415, 572, 0, 0, 280,
	0, 275, 371, 511, 238, 490, 409, 376, 330, 438,
	467, 277, 262, 263, 306, 408, 296, 248, 501, 540,
	544, 542, 538, 535, 539, 536, 537, 541, 297, 534,
	0, 509, 518, 552, 532, 560, 517, 557, 527, 272,
	556, 521, 520, 566, 547, 548, 502, 562, 533, 531,
	524, 523, 519, 0, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 208, 0, 209, 210, 211, 213,
	214, 215, 714, 216, 217, 218, 221, 222, 223, 225,
	585, 226, 227, 228, 229, 230, 231, 522, 716, 233,
	234, 235, 236, 237, 239, 241, 242, 243, 244, 245,
	247, 249, 0, 0, 746, 719, 0, 0, 747, 253,
	254, 255, 256, 257, 258, 0, 259, 260, 264, 266,
	267, 268, 269, 270, 271, 274, 0, 276, 278, 0,
	279, 282, 0, 283, 284, 285, 286, 287, 288, 289,
	290, 526, 291, 0, 292, 293, 295, 0, 298, 299,
	300, 301, 302, 0, 303, 528, 529, 304, 305, 307,
	308, 309, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 0, 323, 324, 325, 327, 0,
	328, 329, 332, 333, 334, 335, 0, 337, 545, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 345,
	346, 349, 546, 351, 352, 353, 354, 355, 356, 357,
	587, 359, 360, 361, 362, 363, 364, 365, 549, 550,
	366, 368, 369, 551, 553, 554, 732, 384, 385, 386,
	387, 388, 389, 390, 392, 0, 394, 395, 396, 555,
	397, 398, 399, 400, 0, 401, 402, 403, 404, 405,
	407, 410, 411, 412, 413, 0, 416, 417, 418, 419,
	420, 421, 422, 424, 425, 426, 428, 429, 430, 588,
	431, 432, 433, 434, 558, 436, 437, 589, 439, 440,
	442, 443, 444, 445, 446, 447, 609, 748, 449, 559,
	450, 451, 452, 453, 454, 0, 456, 457, 458, 459,
	460, 461, 464, 465, 466, 468, 469, 561, 470, 471,
	0, 473, 474, 735, 476, 477, 478, 479, 480, 0,
	610, 481, 563, 482, 564, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 0, 493, 494, 495, 497, 498,
	499, 500, 503, 504, 505, 506, 507, 0, 508, 510,
	512, 590, 567, 568, 569, 570, 571, 573, 574, 575,
	576, 513, 514, 530, 381, 375, 331, 373, 374, 378,
	379, 382, 194, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 2794, 224, 0, 0, 273, 310, 525, 0, 0,
	370, 0, 423, 427, 0, 516, 0, 0, 0, 0,
	281, 0, 0, 0, 0, 0, 0, 0, 492, 0,
	0, 0, 0, 212, 611, 515, 586, 0, 0, 0,
	377, 0, 0, 0, 0, 0, 0, 0, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 414, 348, 0, 565, 441, 219, 265, 252,
	294, 336, 448, 0, 0, 326, 496, 261, 350, 0,
	240, 383, 0, 472, 347, 0, 455, 475, 0, 367,
	246, 406, 462, 463, 0, 0, 0, 0, 0, 250,
	251, 372, 232, 380, 577, 543, 435, 393, 391, 0,
	358, 415, 572, 0, 0, 280, 0, 275, 371, 511,
	238, 490, 409, 376, 330, 438, 467, 277, 262, 263,
	306, 408, 296, 248, 501, 540, 544, 542, 538, 535,
	539, 536, 537, 541, 297, 534, 0, 509, 518, 552,
	532, 560, 517, 557, 527, 272, 556, 521, 520, 566,
	547, 548, 502, 562, 533, 531, 524, 523, 519, 0,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	208, 0, 209, 210, 211, 213, 214, 215, 0, 216,
	217, 218, 221, 222, 223, 225, 585, 226, 227, 228,
	229, 230, 231, 522, 0, 233, 234, 235, 236, 237,
	239, 241, 242, 243, 244, 245, 247, 249, 0, 0,
	0, 0, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 0, 259, 260, 264, 266, 267, 268, 269, 270,
	271, 274, 0, 276, 278, 0, 279, 282, 0, 283,
	284, 285, 286, 287, 288, 289, 290, 526, 291, 0,
	292, 293, 295, 0, 298, 299, 300, 301, 302, 0,
	303, 528, 529, 304, 305, 307, 308, 309, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	0, 323, 324, 325, 327, 0, 328, 329, 332, 333,
	334, 335, 0, 337, 545, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 345, 346, 349, 546, 351,
	352, 353, 354, 355, 356, 357, 587, 359, 360, 361,
	362, 363, 364, 365, 549, 550, 366, 368, 369, 551,
	553, 554, 0, 384, 385, 386, 387, 388, 389, 390,
	392, 0, 394, 395, 396, 555, 397, 398, 399, 400,
	0, 401, 402, 403, 404, 405, 407, 410, 411, 412,
	413, 0, 416, 417, 418, 419, 420, 421, 422, 424,
	425, 426, 428, 429, 430, 588, 431, 432, 433, 434,
	558, 436, 437, 589, 439, 440, 442, 443, 444, 445,
	446, 447, 609, 0, 449, 559, 450, 451, 452, 453,
	454, 0, 456, 457, 458, 459, 460, 461, 464, 465,
	466, 468, 469, 561, 470, 471, 0, 473, 474, 0,
	476, 477, 478, 479, 480, 0, 610, 481, 563, 482,
	564, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	0, 493, 494, 495, 497, 498, 499, 500, 503, 504,
	505, 506, 507, 0, 508, 510, 512, 590, 567, 568,
	569, 570, 571, 573, 574, 575, 576, 513, 514, 530,
	381, 375, 331, 373, 374, 378, 379, 382, 0, 749,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	717, 873, 273, 310, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 722,
	0, 728, 0, 734, 0, 492, 0, 724, 725, 730,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	726, 723, 727, 733, 721, 731, 718, 729, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 715, 720, 0, 736, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 714, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 716, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 746, 719, 0,
	0, 747, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 769, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 732,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	748, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 735, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 749, 0, 0, 850, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 717, 0, 273, 310,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 1178, 0, 281, 0, 722, 0, 728, 0, 734,
	0, 492, 0, 724, 725, 730, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 726, 723, 727, 733,
	721, 731, 718, 729, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 715, 720, 0,
	736, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 714, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 716, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 719, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 732, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 735, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 0, 0, 273, 310, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 0, 1864,
	273, 310, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 749, 0, 0, 850, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 717, 3162, 273, 310, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 722, 0, 728, 0, 734, 0, 492,
	0, 724, 725, 730, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 726, 723, 727, 733, 721, 731,
	718, 729, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 715, 720, 0, 736, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 714,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 716, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 719, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 732, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	735, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	0, 0, 273, 310, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 711, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 717, 922, 273, 310,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 722, 0, 728, 0, 734,
	0, 492, 0, 724, 725, 730, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 726, 723, 727, 733,
	721, 731, 718, 729, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 715, 720, 0,
	736, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 714, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 716, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 719, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 732, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 735, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 749, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 717, 0, 273, 310, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 722, 0, 728, 0, 734, 0, 492, 0, 724,
	725, 730, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 726, 723, 727, 733, 721, 731, 718, 729,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 715, 720, 0, 736, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 714, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 716, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	719, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 732, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 735, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 2409, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 717, 0,
	273, 310, 0, 0, 0, 370, 0, 423, 427, 0,
	0, 0, 0, 0, 0, 281, 0, 722, 2384, 728,
	0, 734, 0, 492, 0, 724, 725, 730, 212, 810,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 726, 723,
	727, 733, 721, 731, 718, 729, 0, 414, 348, 0,
	0, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 715,
	720, 0, 736, 0, 250, 251, 372, 232, 380, 0,
	0, 435, 393, 391, 0, 358, 415, 0, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	0, 0, 509, 813, 803, 795, 796, 797, 798, 799,
	800, 0, 815, 816, 817, 818, 819, 502, 809, 0,
	794, 801, 802, 804, 2387, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 714, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 0, 716,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 719, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 0, 0, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 0,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 0, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 0,
	0, 366, 368, 369, 0, 2385, 0, 732, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	0, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 0, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	2390, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 0, 470,
	471, 0, 473, 474, 735, 476, 477, 478, 479, 480,
	0, 610, 481, 0, 482, 0, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 0, 0, 0, 194, 0, 0, 0,
	0, 0, 513, 514, 2386, 381, 375, 331, 373, 374,
	378, 379, 382, 2404, 207, 0, 224, 0, 0, 273,
	1975, 525, 0, 0, 370, 0, 423, 427, 0, 516,
	0, 0, 0, 0, 281, 0, 0, 0, 0, 0,
	2402, 0, 492, 0, 0, 0, 0, 212, 611, 515,
	586, 0, 0, 0, 377, 0, 0, 0, 0, 0,
	0, 0, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 414, 348, 0, 565,
	441, 219, 265, 252, 294, 336, 448, 0, 0, 326,
	496, 261, 350, 0, 240, 383, 0, 472, 347, 0,
	455, 475, 0, 367, 246, 406, 462, 463, 0, 0,
	1979, 0, 0, 250, 251, 372, 232, 380, 577, 543,
	435, 393, 391, 0, 358, 415, 572, 0, 0, 280,
	0, 275, 371, 511, 238, 490, 409, 376, 330, 438,
	467, 277, 262, 263, 306, 408, 296, 248, 501, 540,
	544, 542, 538, 535, 539, 536, 537, 541, 297, 534,
	0, 509, 518, 552, 532, 560, 517, 557, 527, 272,
	556, 521, 520, 566, 547, 548, 502, 562, 533, 531,
	524, 523, 519, 0, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 208, 0, 209, 210, 211, 213,
	214, 215, 0, 216, 217, 218, 221, 222, 223, 225,
	585, 226, 227, 228, 229, 230, 231, 522, 0, 233,
	234, 235, 236, 237, 239, 241, 242, 243, 244, 245,
	247, 249, 0, 0, 0, 0, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 0, 259, 260, 264, 266,
	267, 268, 269, 270, 271, 274, 0, 276, 278, 0,
	279, 282, 0, 1985, 284, 285, 286, 287, 288, 289,
	290, 526, 291, 0, 292, 293, 295, 1984, 298, 299,
	300, 301, 302, 0, 303, 528, 529, 304, 305, 307,
	308, 309, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 0, 323, 324, 325, 327, 0,
	328, 329, 332, 333, 334, 335, 0, 337, 545, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 345,
	346, 349, 546, 351, 352, 353, 354, 355, 356, 357,
	587, 359, 360, 361, 362, 363, 364, 365, 549, 550,
	366, 368, 369, 551, 553, 554, 0, 384, 385, 386,
	387, 388, 389, 390, 392, 0, 394, 395, 396, 555,
	397, 398, 399, 400, 1983, 401, 402, 403, 404, 405,
	407, 410, 411, 412, 413, 0, 416, 417, 418, 419,
	420, 421, 422, 424, 425, 426, 428, 429, 430, 588,
	431, 432, 433, 434, 558, 436, 437, 589, 439, 440,
	442, 443, 444, 445, 446, 447, 609, 0, 449, 559,
	450, 451, 452, 453, 454, 0, 456, 457, 458, 459,
	460, 461, 464, 465, 466, 468, 469, 561, 470, 471,
	0, 473, 474, 0, 476, 477, 478, 479, 480, 0,
	610, 481, 563, 482, 564, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 1982, 493, 494, 495, 497, 498,
	499, 500, 503, 504, 505, 506, 507, 0, 508, 510,
	512, 590, 567, 568, 569, 570, 571, 573, 574, 575,
	576, 513, 514, 530, 381, 375, 331, 373, 374, 378,
	379, 382, 194, 0, 0, 0, 1981, 1976, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 0, 224, 0, 0, 273, 310, 525, 0, 0,
	370, 0, 423, 427, 0, 516, 0, 0, 0, 0,
	281, 0, 0, 0, 2342, 0, 0, 0, 492, 0,
	0, 0, 0, 212, 611, 515, 586, 0, 0, 0,
	377, 0, 0, 0, 0, 0, 0, 0, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 414, 348, 0, 565, 441, 219, 265, 252,
	294, 336, 448, 0, 0, 326, 496, 261, 350, 0,
	240, 383, 0, 472, 347, 0, 455, 475, 0, 367,
	246, 406, 462, 463, 0, 0, 1979, 0, 0, 250,
	251, 372, 232, 380, 577, 543, 435, 393, 391, 0,
	358, 415, 572, 0, 0, 280, 0, 275, 371, 511,
	238, 490, 409, 376, 330, 438, 467, 277, 262, 263,
	306, 408, 296, 248, 501, 540, 544, 542, 538, 535,
	539, 536, 537, 541, 297, 534, 0, 509, 518, 552,
	532, 560, 517, 557, 527, 272, 556, 521, 520, 566,
	547, 548, 502, 562, 533, 531, 524, 523, 519, 0,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	208, 0, 209, 210, 211, 213, 214, 215, 0, 216,
	217, 218, 221, 222, 223, 225, 585, 226, 227, 228,
	229, 230, 231, 522, 0, 233, 234, 235, 236, 237,
	239, 241, 242, 243, 244, 245, 247, 249, 0, 0,
	0, 0, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 0, 259, 260, 264, 266, 267, 268, 269, 270,
	271, 274, 0, 276, 278, 0, 279, 282, 0, 1985,
	284, 285, 286, 287, 288, 289, 290, 526, 291, 0,
	292, 293, 295, 1984, 298, 299, 300, 301, 302, 0,
	303, 528, 529, 304, 305, 307, 308, 309, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	0, 323, 324, 325, 327, 0, 328, 329, 332, 333,
	334, 335, 0, 337, 545, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 345, 346, 349, 546, 351,
	352, 353, 354, 355, 356, 357, 587, 359, 360, 361,
	362, 363, 364, 365, 549, 550, 366, 368, 369, 551,
	553, 554, 0, 384, 385, 386, 387, 388, 389, 390,
	392, 0, 394, 395, 396, 555, 397, 398, 399, 400,
	1983, 401, 402, 403, 404, 405, 407, 410, 411, 412,
	413, 0, 416, 417, 418, 419, 420, 421, 422, 424,
	425, 426, 428, 429, 430, 588, 431, 432, 433, 434,
	558, 436, 437, 589, 439, 440, 442, 443, 444, 445,
	446, 447, 609, 0, 449, 559, 450, 451, 452, 453,
	454, 0, 456, 457, 458, 459, 460, 461, 464, 465,
	466, 468, 469, 561, 470, 471, 0, 473, 474, 0,
	476, 477, 478, 479, 480, 0, 610, 481, 563, 482,
	564, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	1982, 493, 494, 495, 497, 498, 499, 500, 503, 504,
	505, 506, 507, 0, 508, 510, 512, 590, 567, 568,
	569, 570, 571, 573, 574, 575, 576, 513, 514, 530,
	381, 375, 331, 373, 374, 378, 379, 382, 194, 0,
	0, 0, 1981, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 0, 224, 0,
	0, 273, 310, 525, 0, 0, 370, 0, 423, 427,
	0, 516, 0, 0, 0, 0, 281, 0, 0, 0,
	0, 0, 0, 0, 492, 0, 0, 0, 0, 212,
	611, 515, 586, 0, 0, 0, 377, 0, 0, 0,
	0, 0, 0, 0, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 414, 348,
	0, 565, 441, 219, 265, 252, 294, 336, 448, 0,
	0, 326, 496, 261, 350, 0, 240, 383, 0, 472,
	347, 0, 455, 475, 0, 367, 246, 406, 462, 463,
	0, 0, 1979, 0, 0, 250, 251, 372, 232, 380,
	577, 543, 435, 393, 391, 0, 358, 415, 572, 0,
	0, 280, 0, 275, 371, 511, 238, 490, 409, 376,
	330, 438, 467, 277, 262, 263, 306, 408, 296, 248,
	501, 540, 544, 542, 538, 535, 539, 536, 537, 541,
	297, 534, 0, 509, 518, 552, 532, 560, 517, 557,
	527, 272, 556, 521, 520, 566, 547, 548, 502, 562,
	533, 531, 524, 523, 519, 0, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 208, 0, 209, 210,
	211, 213, 214, 215, 0, 216, 217, 218, 221, 222,
	223, 225, 585, 226, 227, 228, 229, 230, 231, 522,
	0, 233, 234, 235, 236, 237, 239, 241, 242, 243,
	244, 245, 247, 249, 0, 0, 0, 0, 0, 0,
	0, 253, 254, 255, 256, 257, 258, 0, 259, 260,
	264, 266, 267, 268, 269, 270, 271, 274, 0, 276,
	278, 0, 279, 282, 0, 1985, 284, 285, 286, 287,
	288, 289, 290, 526, 291, 0, 292, 293, 295, 1984,
	298, 299, 300, 301, 302, 0, 303, 528, 529, 304,
	305, 307, 308, 309, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 322, 0, 323, 324, 325,
	327, 0, 328, 329, 332, 333, 334, 335, 0, 337,
	545, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 345, 346, 349, 546, 351, 352, 353, 354, 355,
	356, 357, 587, 359, 360, 361, 362, 363, 364, 365,
	549, 550, 366, 368, 369, 551, 553, 554, 0, 384,
	385, 386, 387, 388, 389, 390, 392, 0, 394, 395,
	396, 555, 397, 398, 399, 400, 1983, 401, 402, 403,
	404, 405, 407, 410, 411, 412, 413, 0, 416, 417,
	418, 419, 420, 421, 422, 424, 425, 426, 428, 429,
	430, 588, 431, 432, 433, 434, 558, 436, 437, 589,
	439, 440, 442, 443, 444, 445, 446, 447, 609, 0,
	449, 559, 450, 451, 452, 453, 454, 0, 456, 457,
	458, 459, 460, 461, 464, 465, 466, 468, 469, 561,
	470, 471, 0, 473, 474, 0, 476, 477, 478, 479,
	480, 0, 610, 481, 563, 482, 564, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 1982, 493, 494, 495,
	497, 498, 499, 500, 503, 504, 505, 506, 507, 0,
	508, 510, 512, 590, 567, 568, 569, 570, 571, 573,
	574, 575, 576, 513, 514, 530, 381, 375, 331, 373,
	374, 378, 379, 382, 811, 0, 0, 0, 1981, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 0, 224, 717, 0, 273, 310, 0,
	0, 0, 370, 0, 423, 427, 0, 0, 0, 0,
	0, 0, 281, 0, 722, 2384, 728, 0, 734, 0,
	492, 0, 724, 725, 730, 212, 810, 515, 586, 0,
	0, 0, 377, 0, 0, 0, 0, 0, 0, 0,
	220, 0, 0, 0, 0, 726, 723, 727, 733, 721,
	731, 718, 729, 0, 414, 348, 0, 0, 441, 219,
	265, 252, 294, 336, 448, 0, 0, 326, 496, 261,
	350, 0, 240, 383, 0, 472, 347, 0, 455, 475,
	0, 367, 246, 406, 462, 463, 715, 720, 0, 736,
	0, 250, 251, 372, 232, 380, 0, 0, 435, 393,
	391, 0, 358, 415, 0, 0, 0, 280, 0, 275,
	371, 511, 238, 490, 409, 376, 330, 438, 467, 277,
	262, 263, 306, 408, 296, 248, 501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 297, 0, 0, 509,
	813, 803, 795, 796, 797, 798, 799, 800, 0, 815,
	816, 817, 818, 819, 502, 809, 0, 794, 801, 802,
	804, 2387, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 208, 0, 209, 210, 211, 213, 214, 215,
	714, 216, 217, 218, 221, 222, 223, 225, 585, 226,
	227, 228, 229, 230, 231, 0, 716, 233, 234, 235,
	236, 237, 239, 241, 242, 243, 244, 245, 247, 249,
	0, 0, 0, 719, 0, 0, 0, 253, 254, 255,
	256, 257, 258, 0, 259, 260, 264, 266, 267, 268,
	269, 270, 271, 274, 0, 276, 278, 0, 279, 282,
	0, 283, 284, 285, 286, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 295, 0, 298, 299, 300, 301,
	302, 0, 303, 0, 0, 304, 305, 307, 308, 309,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 322, 0, 323, 324, 325, 327, 0, 328, 329,
	332, 333, 334, 335, 0, 337, 0, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 345, 346, 349,
	0, 351, 352, 353, 354, 355, 356, 357, 587, 359,
	360, 361, 362, 363, 364, 365, 0, 0, 366, 368,
	369, 0, 2385, 0, 732, 384, 385, 386, 387, 388,
	389, 390, 392, 0, 394, 395, 396, 0, 397, 398,
	399, 400, 0, 401, 402, 403, 404, 405, 407, 410,
	411, 412, 413, 0, 416, 417, 418, 419, 420, 421,
	422, 424, 425, 426, 428, 429, 430, 588, 431, 432,
	433, 434, 0, 436, 437, 589, 439, 440, 442, 443,
	444, 445, 446, 447, 609, 0, 449, 2390, 450, 451,
	452, 453, 454, 0, 456, 457, 458, 459, 460, 461,
	464, 465, 466, 468, 469, 0, 470, 471, 0, 473,
	474, 735, 476, 477, 478, 479, 480, 0, 610, 481,
	0, 482, 0, 483, 484, 485, 486, 487, 488, 489,
	491, 0, 0, 493, 494, 495, 497, 498, 499, 500,
	503, 504, 505, 506, 507, 0, 508, 510, 512, 590,
	0, 0, 0, 194, 0, 0, 0, 0, 0, 513,
	514, 2386, 381, 375, 331, 373, 374, 378, 379, 382,
	1954, 207, 0, 224, 0, 0, 273, 310, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 2378, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 608, 1957, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 1961, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 1958, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	0, 0, 273, 310, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 608, 1957, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 1961, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 1958, 474, 0, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2528, 207, 0, 224, 0, 0, 273, 310,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 2529, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2519, 207,
	0, 224, 0, 0, 273, 310, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 2520, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 696, 207, 0, 224, 0, 0,
	273, 695, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 608,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 0, 0, 273, 310, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 608, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	0, 0, 273, 310, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 3617, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 2794, 224, 0, 0, 273, 310,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 0, 0, 273, 310, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 3342, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 0, 0,
	273, 310, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 3326, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 0, 0, 273, 310, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 3011,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 912, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	0, 0, 273, 310, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 0, 0, 273, 1061,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 608, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1059, 207,
	0, 224, 0, 0, 273, 1058, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 0, 0,
	273, 310, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 187,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 836, 216, 217, 218, 221, 222, 223,
	225, 188, 226, 835, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 190, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	191, 431, 432, 433, 434, 558, 436, 437, 189, 439,
	440, 442, 443, 444, 445, 446, 447, 833, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 183, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 192, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	699, 207, 0, 224, 0, 0, 273, 698, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 207, 0, 224,
	0, 0, 273, 310, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 580, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 582,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 581, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 0, 0, 273, 310,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 4380, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 0, 0, 273, 310, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 0, 0,
	273, 310, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 187,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 188, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 190, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	191, 431, 432, 433, 434, 558, 436, 437, 189, 439,
	440, 442, 443, 444, 445, 446, 447, 2858, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 2859, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 192, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 0, 0, 273, 2589, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	0, 0, 273, 2507, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 0, 0, 273, 2505,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 0, 0, 273, 2491, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 0, 0,
	273, 1945, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 0, 0, 273, 1887, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	0, 0, 273, 1166, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 0, 0, 273, 984,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 0, 0, 273, 945, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 0, 0,
	273, 941, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 934, 224, 0, 0, 273, 310, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 0, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	0, 0, 273, 310, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 187, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 188, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 190, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 191, 431, 432, 433, 434, 558, 436, 437,
	189, 439, 440, 442, 443, 444, 445, 446, 447, 833,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 183, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 192, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 0, 0, 273, 783,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 0, 0, 273, 779, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 0, 0,
	273, 776, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 0, 0, 273, 772, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	0, 0, 273, 757, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 0, 0, 273, 703,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 0, 0, 273, 701, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 0, 0,
	273, 684, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 0, 0, 273, 676, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	0, 0, 273, 672, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 0, 0, 273, 670,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 0, 0, 273, 645, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 0, 0,
	273, 310, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 0, 0, 273, 310, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 187, 515, 181, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 188, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 190, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 191, 431, 432, 433,
	434, 558, 436, 437, 189, 439, 440, 442, 443, 444,
	445, 446, 447, 182, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 183, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 192, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	0, 0, 273, 310, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 0, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	0, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 0, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 0, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 811, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 717, 0, 273, 310,
	0, 0, 0, 370, 0, 423, 427, 0, 0, 0,
	0, 0, 0, 281, 0, 722, 2384, 728, 0, 734,
	0, 492, 0, 724, 725, 730, 212, 810, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 726, 723, 727, 733,
	721, 731, 718, 729, 0, 414, 348, 0, 0, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 715, 720, 0,
	736, 0, 250, 251, 372, 232, 380, 0, 0, 435,
	393, 391, 0, 358, 415, 0, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 0, 0,
	509, 813, 803, 795, 796, 797, 798, 799, 800, 0,
	815, 816, 817, 818, 819, 502, 809, 0, 794, 801,
	802, 804, 2387, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 714, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 0, 716, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 719, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 0, 0, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 0, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 0, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 0, 0, 366,
	368, 369, 0, 2385, 0, 732, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 0, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 0, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 2390, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 0, 470, 471, 0,
	473, 474, 735, 476, 477, 478, 479, 480, 0, 610,
	481, 0, 482, 0, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 0, 0, 811, 0, 0, 0, 0, 0, 0,
	513, 514, 2386, 381, 375, 331, 373, 374, 378, 379,
	382, 207, 0, 224, 717, 0, 273, 310, 0, 0,
	0, 370, 0, 423, 427, 0, 0, 0, 0, 0,
	0, 281, 0, 722, 0, 728, 2835, 734, 0, 492,
	0, 724, 725, 730, 212, 810, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 2834, 0, 0, 220,
	0, 0, 0, 0, 726, 723, 727, 733, 721, 731,
	718, 729, 0, 414, 348, 0, 0, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 715, 720, 0, 736, 0,
	250, 251, 372, 232, 380, 0, 0, 435, 393, 391,
	0, 358, 415, 0, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 297, 0, 0, 509, 813,
	803, 795, 796, 797, 798, 799, 800, 0, 815, 816,
	817, 818, 819, 502, 809, 0, 794, 801, 802, 804,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 714,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 0, 716, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 719, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 0, 0, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 0, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 0,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 0, 0, 366, 368, 369,
	0, 0, 0, 732, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 0, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 0, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 2390, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 0, 470, 471, 0, 473, 474,
	735, 476, 477, 478, 479, 480, 0, 610, 481, 0,
	482, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 0,
	0, 811, 0, 0, 0, 0, 0, 0, 513, 514,
	0, 381, 375, 331, 373, 374, 378, 379, 382, 207,
	0, 224, 717, 0, 273, 310, 0, 0, 0, 370,
	0, 423, 427, 0, 0, 0, 0, 0, 0, 281,
	0, 722, 0, 728, 0, 734, 0, 492, 0, 724,
	725, 730, 212, 810, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 726, 723, 727, 733, 721, 731, 718, 729,
	0, 414, 348, 0, 0, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 715, 720, 0, 736, 0, 250, 251,
	372, 232, 380, 0, 0, 435, 393, 391, 4413, 358,
	415, 0, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 0, 0, 509, 813, 803, 795,
	796, 797, 798, 799, 800, 0, 815, 816, 817, 818,
	819, 502, 809, 0, 794, 801, 802, 804, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 714, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 0, 716, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	719, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	0, 0, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 0, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 0, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 0, 0, 366, 368, 369, 0, 0,
	0, 732, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 0, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 0,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 0, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 0, 470, 471, 0, 473, 474, 735, 476,
	477, 478, 479, 480, 0, 610, 481, 0, 482, 0,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 0, 0, 811,
	0, 0, 0, 0, 0, 0, 513, 514, 0, 381,
	375, 331, 373, 374, 378, 379, 382, 207, 0, 224,
	717, 0, 273, 310, 0, 0, 0, 370, 0, 423,
	427, 0, 0, 0, 0, 0, 0, 281, 0, 722,
	0, 728, 0, 734, 0, 492, 0, 724, 725, 730,
	212, 810, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	726, 723, 727, 733, 721, 731, 718, 729, 0, 414,
	348, 0, 0, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 715, 720, 0, 736, 0, 250, 251, 372, 232,
	380, 0, 0, 435, 393, 391, 4091, 358, 415, 0,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 297, 0, 0, 509, 813, 803, 795, 796, 797,
	798, 799, 800, 0, 815, 816, 817, 818, 819, 502,
	809, 0, 794, 801, 802, 804, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 714, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	0, 716, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 719, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 0, 0,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 0, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 0, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 0, 0, 366, 368, 369, 0, 0, 0, 732,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 0, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 0, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 0, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	0, 470, 471, 0, 473, 474, 735, 476, 477, 478,
	479, 480, 0, 610, 481, 0, 482, 0, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 0, 0, 811, 0, 0,
	0, 0, 0, 0, 513, 514, 0, 381, 375, 331,
	373, 374, 378, 379, 382, 207, 0, 224, 717, 0,
	273, 310, 0, 0, 0, 370, 0, 423, 427, 0,
	0, 0, 0, 0, 0, 281, 0, 722, 0, 728,
	0, 734, 0, 492, 0, 724, 725, 730, 212, 810,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 726, 723,
	727, 733, 721, 731, 718, 729, 0, 414, 348, 0,
	0, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 715,
	720, 0, 736, 0, 250, 251, 372, 232, 380, 0,
	0, 435, 393, 391, 0, 358, 415, 0, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	0, 0, 509, 813, 803, 795, 796, 797, 798, 799,
	800, 0, 815, 816, 817, 818, 819, 502, 809, 0,
	794, 801, 802, 804, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 714, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 0, 716,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 719, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 0, 0, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 0,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 0, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 3897,
	0, 366, 368, 369, 0, 0, 0, 732, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	0, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 0, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	0, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 0, 470,
	471, 0, 473, 474, 735, 476, 477, 478, 479, 480,
	0, 610, 481, 0, 482, 0, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 0, 0, 811, 0, 0, 0, 0,
	0, 0, 513, 514, 0, 381, 375, 331, 373, 374,
	378, 379, 382, 207, 0, 224, 717, 0, 273, 310,
	0, 0, 0, 370, 0, 423, 427, 0, 0, 0,
	0, 0, 0, 281, 0, 722, 0, 728, 0, 734,
	0, 492, 0, 724, 725, 730, 212, 810, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 726, 723, 727, 733,
	721, 731, 718, 729, 0, 414, 348, 0, 0, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 715, 720, 0,
	736, 0, 250, 251, 372, 232, 380, 0, 0, 435,
	393, 391, 0, 358, 415, 0, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 0, 0,
	509, 813, 803, 795, 796, 797, 798, 799, 800, 0,
	815, 816, 817, 818, 819, 502, 809, 0, 794, 801,
	802, 804, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 714, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 0, 716, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 719, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 0, 0, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 0, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 0, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 0, 0, 366,
	368, 369, 0, 0, 0, 732, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 0, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 0, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 2390, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 0, 470, 471, 0,
	473, 474, 735, 476, 477, 478, 479, 480, 0, 610,
	481, 0, 482, 0, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 0, 0, 811, 0, 0, 0, 0, 0, 0,
	513, 514, 0, 381, 375, 331, 373, 374, 378, 379,
	382, 207, 0, 224, 717, 0, 273, 310, 0, 0,
	0, 370, 0, 423, 427, 0, 0, 0, 0, 0,
	0, 281, 0, 722, 0, 728, 0, 734, 0, 492,
	0, 724, 725, 730, 212, 810, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 726, 723, 727, 733, 721, 731,
	718, 729, 0, 414, 348, 0, 0, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 715, 720, 0, 736, 0,
	250, 251, 372, 232, 380, 0, 0, 435, 393, 391,
	0, 358, 415, 0, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 297, 0, 0, 509, 813,
	803, 795, 796, 797, 798, 799, 800, 0, 815, 816,
	817, 818, 819, 502, 809, 0, 794, 801, 802, 804,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 714,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 0, 716, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 719, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 0, 0, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 0, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 0,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 3445, 0, 366, 368, 369,
	0, 0, 0, 732, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 0, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 0, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 0, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 0, 470, 471, 0, 473, 474,
	735, 476, 477, 478, 479, 480, 0, 610, 481, 0,
	482, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 0,
	0, 811, 0, 0, 0, 0, 0, 0, 513, 514,
	0, 381, 375, 331, 373, 374, 378, 379, 382, 207,
	0, 224, 717, 0, 273, 310, 0, 0, 0, 370,
	0, 423, 427, 0, 0, 0, 0, 0, 0, 281,
	0, 722, 0, 728, 0, 734, 0, 492, 0, 724,
	725, 730, 212, 810, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 726, 723, 727, 733, 721, 731, 718, 729,
	0, 414, 348, 0, 0, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 715, 720, 0, 736, 0, 250, 251,
	372, 232, 380, 0, 0, 435, 393, 391, 0, 358,
	415, 0, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 0, 0, 509, 813, 803, 795,
	796, 797, 798, 799, 800, 0, 815, 816, 817, 818,
	819, 502, 809, 0, 794, 801, 802, 804, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 714, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 0, 716, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	719, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	0, 0, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 0, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 0, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 0, 0, 366, 368, 369, 0, 0,
	0, 732, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 0, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 0,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 0, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 0, 470, 471, 0, 473, 474, 735, 476,
	477, 478, 479, 480, 0, 610, 481, 0, 482, 0,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 0, 0, 811,
	0, 0, 0, 0, 0, 0, 513, 514, 0, 381,
	375, 331, 373, 374, 378, 379, 382, 207, 0, 224,
	717, 0, 273, 821, 0, 0, 0, 370, 0, 423,
	427, 0, 0, 0, 0, 0, 0, 281, 0, 722,
	0, 728, 0, 734, 0, 492, 0, 724, 725, 730,
	212, 810, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	726, 723, 727, 733, 721, 731, 718, 729, 0, 414,
	348, 0, 0, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 715, 720, 0, 736, 0, 250, 251, 372, 232,
	380, 0, 0, 435, 393, 391, 0, 358, 415, 0,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 297, 0, 0, 509, 813, 803, 795, 796, 797,
	798, 799, 800, 0, 815, 816, 817, 818, 819, 502,
	809, 0, 794, 801, 802, 804, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 714, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	0, 716, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 719, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 0, 0,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 0, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 0, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 0, 0, 366, 368, 369, 0, 0, 0, 732,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 0, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 0, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 0, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	0, 470, 471, 0, 473, 474, 735, 476, 477, 478,
	479, 480, 0, 610, 481, 0, 482, 0, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 0, 0, 811, 0, 0,
	0, 0, 0, 0, 513, 514, 0, 381, 375, 331,
	373, 374, 378, 379, 382, 207, 0, 224, 717, 0,
	273, 785, 0, 0, 0, 370, 0, 423, 427, 0,
	0, 0, 0, 0, 0, 281, 0, 722, 0, 728,
	0, 734, 0, 492, 0, 724, 725, 730, 212, 810,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 726, 723,
	727, 733, 721, 731, 718, 729, 0, 414, 348, 0,
	0, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 715,
	720, 0, 736, 0, 250, 251, 372, 232, 380, 0,
	0, 435, 393, 391, 0, 358, 415, 0, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	0, 0, 509, 813, 803, 795, 796, 797, 798, 799,
	800, 0, 815, 816, 817, 818, 819, 502, 809, 0,
	794, 801, 802, 804, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 714, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 0, 716,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 719, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 0, 0, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 0,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 0, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 0,
	0, 366, 368, 369, 0, 0, 0, 732, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	0, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 0, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	0, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 0, 470,
	471, 0, 473, 474, 735, 476, 477, 478, 479, 480,
	0, 610, 481, 0, 482, 0, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 0, 0, 811, 0, 0, 0, 0,
	0, 0, 513, 514, 0, 381, 375, 331, 373, 374,
	378, 379, 382, 207, 0, 224, 717, 0, 273, 310,
	0, 0, 0, 370, 0, 423, 427, 0, 0, 0,
	0, 0, 0, 281, 0, 722, 0, 728, 0, 734,
	0, 492, 0, 724, 725, 730, 212, 0, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 726, 723, 727, 733,
	721, 731, 718, 729, 0, 414, 348, 0, 0, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 715, 720, 0,
	736, 0, 250, 251, 372, 232, 380, 0, 0, 435,
	393, 391, 0, 358, 415, 0, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 0, 0,
	509, 0, 0, 0, 0, 0, 0, 0, 272, 0,
	0, 0, 0, 0, 0, 502, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 714, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 0, 716, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 719, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 0, 0, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 0, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 0, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 0, 0, 366,
	368, 369, 0, 0, 0, 732, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 0, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 0, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 0, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 0, 470, 471, 0,
	473, 474, 735, 476, 477, 478, 479, 480, 0, 610,
	481, 0, 482, 0, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	513, 514, 0, 381, 375, 331, 373, 374, 378, 379,
	382,
}

var yyPact = [...]int32{
	1670, -1000, 93, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2324, 705, 9309, 10274, 10334, 2412, 68519,
	53845, -1000, 612, 674, 793, 2899, 48279, 75, 68013, 54857,
	478, 1670, 2560, 48279, 2657, 2558, 793, 54857, -1000, 1232,
	1552, 1756, 2901, 67507, 54857, 34131, 54857, 2379, 67001, 66495,
	1977, 65989, 1416, 2408, 953, 54857, 54857, 1403, 65483, 54857,
	54857, 524, 1793, -1000, -1000, 976, 971, -1000, -1000, -1000,
	47773, 53339, 64977, 64471, 820, 1971, 42241, 54857, 54857, 54857,
	54857, 42241, 38192, 1493, 1733, 63965, 42241, 54857, 42241, 54857,
	54857, 54857, 54857, 54857, 947, 38192, 39205, 54857, 63459, 2377,
	54857, 54857, -1000, 62953, 62447, 61941, 73923, 73435, 3081, 1414,
	-1000, -1000, -1000, 817, 1949, -1000, -1000, -1000, 2372, 1402,
	943, -1000, 1487, -1000, -1000, -1000, -1000, -1000, -1000, 816,
	-1000, 61435, 52833, 1515, -1000, -1000, 597, 2794, 3200, 3200,
	2920, 41229, 712, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2793, 1505, 1847, 153, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1899, 2611, 612, -1000, -1000, 284, 274, 674,
	16148, 16148, -1000, 2554, -1000, 110, -1000, 144, 41735, -1000,
	-1000, -1000, 520, 62, 54857, -1000, 455, -1000, 62, 19755,
	-1000, 54857, 2348, 60929, 48279, 48279, 272, -1000, 287, 60423,
	54857, 808, 59917, 3079, 42241, 42241, 54857, 942, 42241, 2146,
	1280, -1000, 1331, 1840, -1000, 2983, 3095, 123, 470, 54857,
	54857, -1000, 135, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 771, 1264, 740,
	2982, 804, 2980, 2053, 59411, 913, 2978, 2203, 807, 54857,
	1336, 2553, 54857, 455, 2977, -1000, 2217, 1800, 72947, 54857,
	-1000, -1000, -1000, -1000, 8770, 3071, 2853, 9758, 3067, 2852,
	9852, 3063, 10273, 3062, 52327, 51821, 2046, 1251, 513, -1000,
	144, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1250, 1249, 1247,
	1330, 1245, 513, 1243, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 54857, 54857, 54857, 2551, 3061, 1236, 1587,
	1235, 1231, 762, 1656, 2550, 2549, 54857, 1230, 1226, 2145,
	1549, 1501, 3060, 1248, 1601, 2048, 3059, 308, -1000, 3058,
	361, -1000, 2548, 3057, 315, 3052, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 136, -1000, -1000, -1000, -1000, -1000, 512,
	1900, 502, 502, 502, -1000, -1000, -1000, -1000, -1000, 216,
	214, -1000, -1000, 1882, 500, 1882, 1882, -1000, 1890, 1882,
	315, 3050, 58905, 2202, -1000, 2044, -1000, 1204, -1000, -1000,
	-1000, 3079, -1000, 1836, -1000, 3144, 39711, 294, 3200, -1000,
	1452, 1174, -1000, 1754, 2238, 26451, 25936, 54857, 444, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1768, -1000,
	1447, -1000, 1899, -1000, 2598, 1881, 19240, 1631, 22845, 19755,
	-1000, 1899, -1000, -1000, 2557, -22, -1000, 11990, -1000, -1000,
	19755, 19755, 19755, 19755, 19755, 1341, 2942, -1000, -1000, -1000,
	-1000, 15632, -1000, -1000, 144, 480, 269, -1000, -1000, 499,
	-1000, 495, 494, 144, -1000, -1000, -1000, -1000, -1000, -1000,
	19755, -1000, -1000, 492, 316, 490, -1000, 144, -1000, 11470,
	19755, -1000, 54857, 19755, 54857, 62, 3148, 54857, 96, 9387,
	1425, 3147, 40217, -1000, 54857, 2463, 2460, 2776, 2629, 54857,
	592, 2976, 287, 54857, 4722, 2974, 58399, -1000, 486, 486,
	1667, 54857, 483, 72947, 1485, 1195, -1000, 38192, 3077, 3049,
	72947, -1000, 122, 13039, -1000, 13039, 2883, 2455, 32541, -1000,
	426, 54857, 54857, 54857, 54857, -1000, 54857, 3048, -1000, -1000,
	-1000, 3046, 54857, 402, 2968, 794, 3200, 3045, 37180, 2959,
	57893, 2546, 1421, 38192, 54857, 923, 2545, 3044, -1000, 45749,
	470, 3200, 3145, 2138, -7, -1000, 1160, -1000, 1324, 1323,
	43742, 1003, 990, 2248, 603, 2541, 1203, 978, 54857, 1688,
	54857, 2235, 2772, 312, 1576, 1158, -1000, 482, 48279, 1020,
	-7, -1000, 2763, 1314, 54857, 1017, -7, 2760, 4722, -1000,
	1709, 72947, 665, -1000, 2600, -1000, 665, 665, 2596, 1384,
	804, 804, -1000, 54857, -7, 1092, 54857, 10147, 3039, 2849,
	10122, 3038, 54857, 2759, -1000, 263, 144, 2758, 2757, 2756,
	2302, -1000, 2331, 2886, 1113, 2247, 2754, -1000, 2752, 1225,
	2447, 2446, 54857, 54857, 2749, 2748, 37686, 46255, 46255, 2747,
	2746, 2745, 652, -1000, 2863, 2744, 409, 3200, 1273, 1272,
	1271, -1000, -1000, 470, 54857, 54857, 1326, 2743, 2742, 37180,
	2736, 312, 312, 2735, 1056, 54857, 54857, 54857, 54857, 54857,
	2027, 1954, 1950, -1000, 7818, -1000, -1000, 54857, 54857, -1000,
	-1000, -1000, 54857, 54857, -1000, 54857, 54857, 72947, -1000, 72947,
	-1000, 147, 19755, -1000, 3167, -1000, -1000, -1000, -1000, 3167,
	-1000, 2788, 2737, 3167, -1000, 481, -1000, 3167, -1000, -1000,
	1882, 1882, -1000, -1000, 72947, 308, 3037, 37180, 3036, -1000,
	-1000, -1000, -1000, -1000, 54857, 3144, 959, -1000, -1000, 1627,
	-1000, -1000, 1133, -1000, -1000, -1000, -1000, 58, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3191, 3190, -1000,
	-1000, 58, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 52, 9387, -1000, 24906, -1000, -1000,
	-1000, 1444, 9387, -1000, 22330, 22330, 51, -1000, 326, 1899,
	-1000, 2655, 54857, 16148, 72947, 54857, 2787, 19755, 19755, 19755,
	19755, 19755, 19755, 19755, 19755, 19755, 19755, 19755, 19755, 19755,
	19755, 19755, 19755, 2843, 19755, 2733, 3064, -1000, -1000, 2732,
	464, 1121, 13039, -1000, -1000, 477, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	824, 824, 359, 1401, 1401, 368, 480, 2881, 144, 9300,
	47, 133, 478, 144, -1000, -1000, -1000, 16664, 19755, 32541,
	18724, 144, 2804, 9387, -1000, 14600, 2655, 19755, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 9085, -167, 259, 95, -1000,
	2465, 90, 19755, -1000, 54857, 2787, 19755, 19755, 19755, 19755,
	2733, 3064, 2732, 464, 477, 2540, -1000, 2288, 36168, 2394,
	54857, 304, -1000, 538, 54857, -1000, -1000, 2624, 29505, 29505,
	2254, 2254, -1000, -1000, 79, -1000, 44248, 54857, 2234, 3035,
	2905, 475, -1000, 4722, 1665, 3034, 2539, 2956, -1000, 5631,
	45260, 5296, 1295, -1000, -1000, 2232, 1860, 470, -1000, 43253,
	1477, 54857, 54857, 796, -1000, -1000, -1000, -1000, -1000, -1000,
	1293, 54857, -1000, 13039, -1000, 77, -1000, 533, 2137, 54857,
	-1000, 54857, 471, 470, 470, 470, 470, 470, -1000, 54857,
	1309, 54857, 1052, 44248, 2230, 3027, 1658, -1000, -1000, 54857,
	1119, -1000, -1000, 3026, 3143, 2952, 287, 13039, 3203, -1000,
	3141, 1795, 31529, 54857, 1011, 375, -1000, 48279, 2841, 130,
	287, -1000, 110, -1000, 1266, 72947, 3200, 7948, 54857, 54857,
	54857, -1000, 54857, 54857, -1000, 2950, 57387, -1000, 72947, 54857,
	-1000, 467, 2478, 723, 716, 2435, 51315, 54857, 56881, 56375,
	54857, 969, -1000, -1000, 1395, 54857, -1000, 13039, 54857, 47267,
	998, 983, 54857, 1446, 46761, 54857, 1443, -1000, 54857, 1154,
	-1000, -1000, 38192, -1000, 2330, 1435, 13551, 6794, 54857, 54857,
	54857, 9987, 54857, 54857, -1000, -1000, -1000, -1000, -1000, -1000,
	665, -1000, -1000, -1000, 54857, 54857, 665, 665, 9765, 54857,
	54857, 9973, -7, 1077, 54857, 1014, -7, 1073, 48279, 1010,
	54857, -1000, 54857, 54857, 54857, 54857, 54857, -1000, 2834, 55869,
	19755, 2832, -1000, 54857, -1000, 466, 2831, 54857, 54857, 38192,
	2729, 54857, 54857, 1521, 2537, 54857, 54857, -1000, 44, 44,
	44, 54857, 54857, 54857, -1000, -1000, -1000, 54857, -1000, 54857,
	-1000, 2911, 54857, 54857, -1000, 1224, 1221, 2728, -1000, 1378,
	-1000, 38192, 38192, 1118, 54857, -1000, -1000, 54857, 643, 2335,
	1209, 1207, 1201, 1200, 54857, 54857, 3200, 3074, 3200, 2727,
	54857, 54857, 42241, 465, 72947, 42241, 33601, 42241, 42241, 2135,
	72947, -1000, -1000, -1000, -1000, -1000, -1000, 308, -1000, 361,
	-1000, 2949, 2536, -1000, 315, -1000, 74, 258, 255, 2792,
	2790, 254, 19755, 253, -1000, -1000, 315, -1000, 54857, 1114,
	2125, 2919, 1627, -1000, -1000, 1124, 1263, -1000, 26966, -1000,
	-1000, -1000, -1000, 19755, 1444, 2650, -1000, 3193, 3193, 435,
	-1000, 15632, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 19755,
	1022, 551, -1000, -1000, -1000, -1000, 2618, 29505, -1000, -1000,
	-1000, -1000, 2781, -1000, 103, 103, 105, 105, 105, -1000,
	338, 338, 338, 338, 338, 338, 359, 1401, 9432, 1455,
	19755, 19755, 2722, 2726, 464, 1371, 19755, -1000, 4526, -1000,
	-1000, -1000, 2645, -1000, -1000, 1362, 2072, -1000, -1000, -1000,
	-1000, 1978, 23875, 23875, -1000, -1000, -1000, 15632, 462, -1000,
	-1000, -1000, -1000, 32541, -1000, 461, 19755, -1000, -1000, 2865,
	-1000, -1000, 19755, -10, -137, -1000, -1000, 73, 252, 72,
	-1000, 1931, -1000, 19755, 642, -1000, 248, -118, 19755, 19755,
	19755, -1000, 9387, 3160, -1000, 2618, 66, -1000, 19755, -1000,
	-1000, 460, -1000, 2403, -1000, 9387, 2296, 2292, 1948, -1000,
	-1000, 54, -1000, -1000, -1000, -1000, 2624, 40217, 19755, 50,
	-1000, 144, 2296, 21815, -64, 2597, 49291, 49291, 32035, -1000,
	28999, 49291, 49291, 49291, 548, 2644, 458, 457, 144, -1000,
	2521, 2362, -1000, 2362, 54857, -1000, 245, 27, -1000, -1000,
	-1000, -1000, 54857, 327, 54857, 54857, 3135, 312, 54857, 54857,
	48279, 3025, 70019, 1366, 5296, -1000, 3200, 41229, 2120, -1000,
	-1000, 2533, -1000, -1000, -1000, -1000, 1145, 1581, -1000, 1461,
	665, 665, 54857, -1000, 54857, 55363, -1000, 49, -1000, -1000,
	853, 71971, 69531, -1000, 1354, -1000, -1000, -1000, 136, -1000,
	74411, 1366, 2829, 2538, -1000, -1000, -1000, 2219, -1000, -1000,
	1295, -1000, 238, -180, 2595, 46, -1000, -1000, -1000, 530,
	54857, 1605, 287, 54857, 3077, 1240, 1288, 1837, -1000, 4465,
	-1000, -1000, 13039, 14063, 921, -1000, 232, 16, -1000, 72947,
	3200, -1000, -1000, -1000, -1000, -1000, 700, -1000, 54857, 41229,
	41229, -1000, 804, 650, 1052, -1000, 54857, 1012, 54857, 230,
	54857, 54857, 1781, 913, 54857, 2119, 793, 3023, 2428, 1919,
	2905, 2111, 3196, 1589, -1000, -1000, 283, -1000, 144, -1000,
	19755, 455, 2911, -1000, 46255, 287, 1138, 130, 2620, 2620,
	54857, 226, 2720, -1000, -1000, 2716, 2714, 2169, 1940, 3016,
	-1000, 2948, 1036, 1005, 19755, 454, -1000, 1538, 679, 450,
	449, 54857, 1253, 2322, -1000, 3015, 2949, 3002, 2949, -1000,
	-1000, -1000, 50809, -1000, 43, -1000, 152, -1000, -1000, -1000,
	-1000, 54857, 54857, 54857, 54857, -1000, 1137, -1000, -1000, -1000,
	-1000, 1128, -1000, 1432, -1000, -1000, -1000, -1000, -1000, 1536,
	1105, 42, -1000, -1000, 13039, 13039, 13039, 3200, -1000, -7,
	-1000, 1015, 1641, -1000, -1000, -7, 2711, 1640, -1000, -1000,
	-1000, -1000, -1000, -1000, -7, 2710, 4722, -1000, 2708, -7,
	1071, 54857, 54857, 9824, 54857, 54857, 54857, 8751, 2707, 652,
	1052, -1000, -1000, -1000, -1000, -1000, 2706, -1000, 2949, 3001,
	9387, -1000, 1055, 19755, -1000, -1000, -1000, -1000, 54857, 1199,
	1562, 2705, 2437, 38192, 54857, -1000, -1000, -1000, -1000, -1000,
	-1000, 330, -1000, 330, 330, 2704, 2703, 54857, -1000, -1000,
	-1000, -1000, 54857, -1000, -1000, -1000, -1000, -1000, 3167, 3167,
	1054, 2699, 2698, 2697, 2694, -1000, 2693, 2691, 3200, 2944,
	-1000, -1000, 41229, -1000, -1000, -1000, 72947, -1000, -1000, -1000,
	54857, 54857, 438, -1000, -1000, 72947, -1000, -1000, -1000, -1000,
	54857, -1000, -1000, -1000, 559, -1000, -1000, 559, 39, -1000,
	-1000, 308, 54857, 37180, -1000, 1483, 294, -1000, -1000, -1000,
	-1000, -1000, 2646, -1000, 966, -1000, -1000, 18209, 9, -1000,
	551, -1000, 411, -1000, 2346, 2565, 19755, -64, 19755, 19755,
	1134, 946, 19755, 23875, 23875, -1000, 19755, 556, -1000, -1000,
	-1000, -1000, 2642, -1000, -1000, 1361, 2072, 19755, -1000, -1000,
	880, 873, -1000, -1000, -1000, -1000, 1291, -1000, 23875, 23875,
	435, 1172, 38, -1000, 15632, 225, 17694, -2, -1000, 144,
	8993, -1000, -1000, 317, -1000, -1000, -1000, 1711, -1000, 19755,
	8706, -1000, 40723, -1000, 221, 17179, -1000, 612, -119, -119,
	19755, 19755, 2565, -1000, 360, 9387, 793, -1000, -1000, 16148,
	686, 793, 690, 54857, 144, 2296, -1000, 9387, 531, 54857,
	-1000, 9387, 2213, 29505, 2489, 2484, 29505, 2458, 2472, 2472,
	2472, -1000, -1000, -1000, 54857, 432, -1000, 49291, 49291, 49291,
	49291, 38698, 219, 2597, -1000, -1000, -1000, -1000, 2191, 430,
	28493, 19755, 144, 19755, 804, -1000, -1000, -1000, 2445, -1000,
	1526, 44248, -1000, 1297, 44754, 327, 575, 793, -1000, 20,
	4722, 2435, 54857, 5296, 427, 2527, -1000, 136, -1000, -1000,
	1851, 19755, -1000, -1000, -3, -1000, -4, 907, 2827, 1580,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1832, 1076,
	-1000, 69531, 19755, 19755, 71971, -1000, 71971, -1000, -1000, 114,
	123, -1000, 54857, 1295, 54857, 2535, -1000, -1000, 2594, 69531,
	69531, -1000, 3194, 14063, 423, 54857, 2905, 422, 38192, 3077,
	-1000, 54857, -1000, -1000, 54857, 1938, -1000, 2942, 703, 421,
	23875, 54857, 1998, -1000, 1662, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 411, 3191, 3190, 72947, -1000, 54857, 2891,
	217, -5, -1000, -1000, 54857, -1000, -1000, -1000, -1000, -1000,
	410, -1000, -1000, 123, -1000, -1000, -1000, 1526, 327, 380,
	2043, 794, 650, 37180, 2919, 54857, 2905, 54857, 1376, 54857,
	-1000, 2690, 2385, -1000, 54857, 29505, 31529, 8395, 2519, -1000,
	-1000, 2620, 50303, 2620, -1000, 405, -1000, 330, 2066, 3200,
	54857, 54857, -1000, 2391, -1000, -1000, -1000, 54857, 2996, 1806,
	-1000, 49797, -1000, 2435, 7595, 54857, 1761, 54857, 54857, -1000,
	54857, 30011, -1000, -1000, 1984, 6070, 312, 1613, 1484, 904,
	-1000, -1000, 804, 1040, 1761, 54857, -1000, 54857, -1000, -1000,
	-1000, -1000, -1000, 13039, 14063, 13039, -1000, -1000, -1000, -1000,
	-1000, -1000, 1081, 54857, -1000, -1000, 13551, -1000, -1000, -1000,
	-1000, -1000, 54857, 54857, 54857, 1008, 2593, 54857, 1001, 2592,
	54857, 54857, 54857, 54857, -1000, 2686, -7, 1048, 1632, -1000,
	2685, -7, 1021, 54857, -1000, 54857, -1000, 54857, -1000, 7046,
	1761, -1000, 2684, 2683, 1428, 1852, 54857, 2928, 404, -41,
	-1000, 1185, -1000, -1000, -1000, 54857, 54857, -1000, 652, 643,
	54857, 54857, 54857, 54857, 54857, 3200, 1842, 2994, -1000, 3131,
	2443, 2440, -1000, 72459, 1474, 2949, -1000, -1000, -1000, -1000,
	-1000, 1111, -1000, 1780, -1000, 962, -1000, 19, -1000, 19755,
	-1000, 32541, -1000, -1000, 2563, 2589, 9387, 564, 1101, 19755,
	19755, 535, 1151, 792, 1101, 19755, 19755, -1000, -1000, 5941,
	1502, 1496, 19755, 72947, 23875, 23875, 23875, 23875, 23875, 23875,
	23875, 23875, 23875, 23875, 23875, 23875, 802, 802, 19755, -1000,
	6605, -1000, 12, -1000, 19755, -1000, -1000, -1000, 9387, 19755,
	-1000, -1000, 69025, -1000, 19755, -1000, 212, 211, 19755, 210,
	9387, 9387, 2563, -1000, 209, -22, 2275, 30011, 2242, -1000,
	-1000, 2288, -1000, -1000, 19755, -1000, 54857, 2597, 29505, 29505,
	2753, 2481, 29505, -1000, -1000, -1000, -1000, 399, 54857, -1000,
	-1000, -1000, -1000, 49291, -1000, 42241, 2148, 398, -26, 6208,
	5862, 388, 804, 1966, -1000, 1297, 397, -1000, 1599, 2428,
	-1000, 2586, 1, -1000, -1000, -1000, 2935, 2169, 44248, 54857,
	2209, 2906, 2905, -1000, 394, 2518, 1366, 74411, 2822, -1000,
	9387, 3200, 2107, 72947, 1509, -1000, -1000, -1000, 9387, 9387,
	-1000, -1000, 903, 115, 1237, -1000, -100, 54857, 69531, -1000,
	0, -1000, 530, -1000, 2623, 1519, 3130, 54857, -1000, 1504,
	-1000, -1000, -1000, 2911, 2911, 19755, 1356, 287, 3111, -1000,
	2878, -1000, -1000, 2438, -1000, -1000, 54857, -1000, 3200, -1000,
	1309, 13039, 122, 1103, 2169, 44248, 2208, 54857, 1657, -1000,
	1102, -1000, 3108, 982, -1000, 42241, -1000, -1000, 1942, -1000,
	2837, 2437, 38192, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-64, -1000, -1000, 31529, -1000, -1000, -1000, -1000, 19755, -1000,
	951, 1645, 2638, -1000, -1000, 2656, -1000, 54857, 650, -1000,
	48785, -1000, -1000, -1000, -6, -1000, 1097, -1000, 1619, 1530,
	-1000, -14, 1761, -16, -18, -1000, 2931, 620, 2889, 19755,
	2818, 3073, 3065, -1000, -1000, 1998, 2815, 3105, 643, -1000,
	-1000, -1000, -1000, 1998, -1000, 2885, 72947, 665, 643, 2949,
	2949, -1000, -1000, 379, -1000, -1000, -1000, -1000, 2682, 2678,
	54857, 38192, -1000, 54857, 38192, -1000, -1000, -1000, 2675, 54857,
	54857, 54857, 992, 2584, 54857, 54857, 54857, -1000, -1000, 2949,
	-1000, 54857, 54857, -129, -1000, 3167, 3167, 72947, -36, -1000,
	3167, 3167, -1000, -1000, 599, 19755, 38192, 2672, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2949, -1000, 3200, 3200,
	-1000, 72947, 54857, 54857, -19, -39, 54857, -1000, 54857, -1000,
	-1000, -1000, 5478, 207, 786, 19755, 2890, 1101, 1101, 19755,
	19755, 19755, 1101, 5941, -1000, -1000, 1101, -1000, -27, -27,
	104, 104, 104, -1000, 802, 802, 802, 802, 802, 802,
	1101, -1000, -1000, 5411, 9387, 1311, -1000, 612, -1000, -1000,
	-1000, 786, 2365, 2270, -33, -1000, 54857, 1943, 9387, -1000,
	-1000, -1000, 2753, -1000, 390, 19755, 29505, -1000, 54857, -34,
	-1000, -35, -1000, 3102, 2206, 27987, 23360, 19755, -1000, -1000,
	1910, 2345, -1000, 2989, 2989, 2353, -1000, 2799, 13039, 388,
	3200, 2428, 54857, 1624, 1624, 2064, 54857, -1000, 44754, 4465,
	651, 1297, 194, 327, 54857, -1000, 1083, 3101, 30011, 48279,
	-1000, -37, -1000, 71971, -1000, 1507, 2085, -1000, 901, -1000,
	-1000, -1000, 890, 2081, 876, 2631, -38, -1000, 191, 1068,
	1067, 918, 54857, 793, -45, 3077, -1000, 2813, 2429, 2429,
	5183, 1404, 439, -1000, 54857, -1000, -1000, -48, -1000, 54857,
	1098, 186, 54857, 650, 1779, 54857, 793, -1000, 54857, 386,
	1376, 54857, 384, 2928, -41, 271, 5053, 42241, 3099, 3099,
	54857, 381, 378, 377, -1000, -1000, -1000, -1000, 1761, 1560,
	-1000, -1000, -1000, -1000, -1000, 1560, 1254, 1560, 30011, 33071,
	-1000, 54857, 54857, -1000, 4941, -1000, 2993, 2951, -1000, -1000,
	370, -1000, 3100, 2891, -1000, -1000, -1000, -1000, 14063, 54857,
	54857, 1358, 267, 1358, 261, 54857, -1000, -1000, 2667, 54857,
	38192, -1000, -1000, 2666, -1000, 1761, -1000, -1000, 1428, 32541,
	31023, -1000, 1852, 369, 358, 356, 4879, -1000, 54857, -1000,
	-1000, -1000, 185, -1000, -1000, -1000, 71483, 72947, -1000, -1000,
	-1000, -1000, -1000, 54857, 9387, 20785, -1000, -1000, 1101, 1101,
	1101, -1000, 612, 2583, 184, -1000, 2349, 2373, 2313, -1000,
	2618, 30011, -1000, 793, -1000, 54857, 9387, -1000, -56, -1000,
	548, 42241, -1000, 354, 54857, 2575, 27481, 1987, -61, -1000,
	756, 23875, 1758, 1970, -1000, -1000, 2284, 19755, 2279, -1000,
	2289, -1000, -1000, -1000, 3095, 3095, -1000, -1000, 3095, 3095,
	2093, 3200, -63, -1000, 24390, 2618, -1000, 2064, -66, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2507, 312, 691, 336, -1000, -1000, 2428, 1526,
	1297, 327, 681, 583, 571, 793, -67, 2435, 74411, 5296,
	-1000, -1000, -1000, 86, -1000, -1000, 72947, -1000, 2802, 1721,
	876, -1000, 1476, -1000, -1000, -1000, 54857, -1000, -1000, 2926,
	2925, -1000, -1000, 54857, 864, -1000, 2906, 2905, -1000, 1533,
	-1000, 1367, 2514, 1424, 302, 19755, 1672, -1000, 13039, 650,
	54857, 1526, 327, -1000, 2032, 650, 2919, -1000, 176, 42241,
	-1000, 3202, -1000, 29505, -1000, 3099, -1000, 1661, -1000, -1000,
	42747, 19755, 19755, 4465, 2911, 319, 2911, 54857, 2911, -1000,
	-1000, 313, 2337, 312, -1000, 2889, -1000, -1000, 19755, 1573,
	2431, -1000, -1000, -1000, -1000, -1000, 991, -1000, 987, -1000,
	54857, 1358, 260, 54857, -1000, 582, 2080, -1000, 72947, -1000,
	72947, 72947, 19755, -1000, -1000, -1000, 171, 170, 169, -59,
	-1000, 3096, -60, -1000, 9387, -1000, -1000, -1000, -1000, 15116,
	310, 309, 282, 1556, 19755, -1000, -1000, 54857, 2351, 2333,
	40217, -1000, -1000, -1000, -68, -1000, -1000, -1000, 54857, -69,
	-1000, 70995, -1000, 1987, 2575, -1000, -1000, 23360, -62, 13039,
	1356, 2152, 54857, 54857, 2280, 9387, 2277, 2574, 3200, 3200,
	3200, 3200, 35662, 2812, 35156, -1000, -1000, 13039, -1000, -1000,
	-1000, -1000, -1000, 36674, -1000, 2507, 54857, -1000, 982, 1810,
	-1000, -1000, 30517, 4465, 2064, 1297, 2428, 2169, -1000, 670,
	661, 2906, 1553, 307, -1000, 1366, -1000, -1000, 1695, 305,
	1066, -1000, -1000, 3095, -1000, -1000, 1759, -1000, 1644, 1638,
	-1000, -1000, -1000, 3093, 985, -1000, 1529, -1000, 2517, 2515,
	2332, -1000, -1000, -1000, -1000, 4722, 4807, 3092, 54857, -1000,
	-1000, 650, 1090, 2169, 54857, -1000, -1000, -1000, 303, -71,
	-1000, -64, -1000, -1000, -1000, -73, -1000, 3167, -79, -84,
	2429, 54857, 2429, 287, 2429, 32541, 551, 2337, -1000, 4753,
	302, -1000, 19755, 54857, 54857, -1000, -1000, 984, -1000, 1259,
	1035, 1259, -87, -1000, -89, -90, 4610, -1000, -1000, -1000,
	54857, 301, 20785, -1000, 19755, 19755, 300, 167, 21300, 21300,
	21300, -83, 247, 2573, 2572, 266, 3086, -97, -1000, 54857,
	2307, 2180, -1000, -1000, 27481, -1000, 2205, 19755, -1000, -1000,
	-1000, -1000, 2269, 2310, -1000, -1000, 2261, 625, 2274, -1000,
	-1000, -1000, -1000, -100, -1000, 34650, -100, -1000, -1000, -102,
	-1000, -1000, 982, -1000, -1000, 1653, -103, -1000, 620, 2889,
	19755, 2507, 2428, 2064, 1297, -1000, -1000, -1000, 2942, 299,
	30011, -1000, 1376, 19755, -1000, -1000, -1000, 54857, 1717, 42241,
	42241, 793, 54857, -1000, -1000, 2299, -1000, 2303, 1731, 1731,
	346, 1032, 1428, -1000, -1000, 54857, 1086, 650, 166, -1000,
	3181, -1000, 42747, -1000, -1000, 2665, -1000, -104, -1000, 1404,
	2618, 160, -1000, 551, -1000, -1000, 9387, 1358, 1358, 54857,
	-1000, -1000, -1000, 2571, -1000, 42241, 72947, -1000, -1000, -1000,
	-1000, -1000, -1000, -107, -108, 20785, -1000, 1704, -1000, 25421,
	1409, 1153, 511, 1704, 1704, 54857, 54857, 54857, -1000, -1000,
	54857, -1000, -1000, 2307, -1000, 23875, 23875, 2809, -1000, 23875,
	-1000, 2148, 298, -95, -1000, 3085, -1000, 40217, -1000, -1000,
	2288, 54857, 2387, 296, -1000, -1000, -100, -1000, -1000, 36674,
	-1000, -1000, 2173, 2164, -1000, 30517, 54857, 54857, 1557, 982,
	2064, 2507, 2428, 2905, 30011, -115, 42241, 677, -1000, -1000,
	1140, -101, -114, 2906, -1000, -1000, 1864, -1000, -1000, 2821,
	-1000, -1000, -1000, -129, 650, 54857, -1000, -1000, -1000, -1000,
	295, 1761, -1000, 1761, 2514, -1000, -1000, -1000, -1000, -1000,
	1358, 54857, -1000, -1000, -1000, -1000, -123, -1000, 1377, 2986,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2442, 242, 240,
	-1000, -1000, 1356, 1356, -1000, 1356, 2201, 54351, 19755, 13039,
	-130, 1935, -125, -1000, 19755, -1000, -1000, -1000, -1000, -1000,
	-1000, 2889, -1000, 2507, 982, 2064, 982, -126, -1000, 1553,
	292, -1000, 2802, 2662, 2630, -1000, -1000, 287, 287, -1000,
	650, 19755, -1000, 1761, -1000, -1000, -1000, 1108, -1000, -1000,
	731, 20270, 2860, 54857, 54857, 54857, 54857, -127, -1000, 70507,
	2161, -1000, -1000, 2383, 2312, -138, 54857, 982, -1000, 2507,
	2618, -1000, 30011, 2942, 12527, 1685, 1065, 1053, -1000, -1000,
	-1000, -143, 1761, -1000, -1000, -1000, 2864, -1000, -1000, -1000,
	-175, 2263, 54351, 2177, 1051, 3180, -1000, -1000, -1000, 2288,
	-1000, -1000, -1000, 982, -1000, -1000, 2905, -182, -1000, -1000,
	-1000, -1000, -1000, 1376, 2896, 2893, -1000, 2860, -1000, 159,
	2506, 19755, -1000, -1000, -1000, -1000, -1000, -1000, 2036, -1000,
	-1000, 2045, 2158, 2158, 3165, 2281, 1933, -1000, 982, -1000,
	12527, 42241, 1637, 1630, 2421, -1000, 2062, 9387, -1000, -1000,
	2023, 2099, 2129, 2045, 2263, -1000, 286, 54857, 2383, 2618,
	-1000, 268, 42241, 42241, 54857, -1000, 2263, 2003, 2001, -1000,
	2017, -1000, 2013, 2040, 2029, 2023, -1000, 54351, 2196, -1000,
	-1000, 12527, -1000, -1000, -1000, -1000, 2505, 2498, 2493, -1000,
	-1000, 2010, -1000, 2008, -1000, 2263, -185, 215, -200, 2110,
	1997, 1985, -1000, -1000, -1000, -1000, 54351, -1000, 2263, -1000,
	1990, 1982, -204, 2491, -1000, -1000, -1000, 2049, -1000,
}

var yyPgo = [...]int16{
	0, 3587, 3586, 2558, 142, 0, 12, 4904, 3584, 68,
	232, 286, 135, 62, 6354, 3581, 288, 298, 3425, 3776,
	1581, 136, 3580, 241, 3580, 3578, 292, 236, 178, 3577,
	193, 3576, 3575, 165, 192, 3574, 3573, 321, 36, 233,
	3570, 299, 315, 316, 319, 3569, 282, 301, 278, 275,
	3568, 6573, 1881, 229, 15, 3567, 3566, 3565, 3563, 3560,
	268, 3559, 226, 3556, 3555, 3554, 273, 213, 279, 265,
	3551, 237, 266, 468, 156, 300, 6119, 3547, 305, 162,
	101, 307, 3546, 3540, 3538, 3532, 3531, 3530, 3528, 3527,
	3526, 3524, 133, 223, 202, 225, 310, 284, 294, 125,
	457, 3523, 3521, 148, 3520, 3515, 63, 57, 3514, 3512,
	3510, 59, 26, 39, 313, 297, 5488, 74, 270, 3509,
	61, 3505, 277, 283, 65, 47, 3504, 271, 269, 219,
	55, 324, 3503, 46, 189, 274, 3502, 3500, 3499, 3493,
	85, 218, 91, 5695, 328, 327, 3492, 3491, 3490, 3489,
	3488, 190, 185, 3486, 3485, 3484, 3482, 32, 38, 3481,
	3479, 221, 217, 254, 3477, 256, 145, 10, 42, 167,
	140, 3476, 3475, 3474, 3473, 23, 92, 19, 3472, 3470,
	3469, 295, 3469, 3469, 3469, 3469, 3468, 253, 3467, 3466,
	3465, 170, 3464, 3463, 3459, 41, 3459, 54, 79, 3458,
	40, 119, 276, 3457, 303, 50, 228, 2639, 224, 3455,
	317, 296, 293, 93, 245, 13, 197, 188, 261, 3453,
	3452, 3450, 3450, 311, 252, 216, 212, 155, 180, 3448,
	323, 3447, 309, 3446, 3445, 3444, 3442, 263, 78, 83,
	3441, 198, 3439, 107, 3437, 3433, 113, 257, 24, 56,
	3432, 35, 120, 45, 75, 3431, 80, 255, 2, 22,
	21, 3430, 215, 3428, 29, 3424, 4, 1, 3423, 3,
	8, 6, 14, 3420, 3419, 175, 3412, 98, 3411, 214,
	184, 141, 3410, 147, 3409, 81, 52, 126, 3408, 3407,
	3405, 150, 43, 3403, 105, 3401, 173, 238, 3399, 3398,
	3397, 16, 48, 115, 73, 69, 49, 27, 108, 58,
	3396, 3394, 33, 86, 3393, 194, 34, 9, 118, 243,
	112, 3390, 30, 28, 18, 322, 116, 290, 289, 3389,
	25, 231, 306, 3388, 3385, 304, 117, 302, 53, 196,
	3381, 179, 3380, 67, 3379, 103, 60, 187, 66, 64,
	3377, 51, 195, 3377, 568, 280, 3363, 248, 1356, 7589,
	3361, 143, 247, 326, 89, 3358, 204, 171, 3357, 7,
	285, 114, 3356, 160, 158, 138, 3355, 152, 3354, 3353,
	3351, 3350, 3349, 3348, 3347, 3346, 3344, 3342, 3340, 3339,
	3337, 3336, 3335, 3333, 3331, 3328, 3327, 3326, 3323, 3321,
	3320, 3318, 3317, 3316, 3314, 3312, 3311, 3310, 3307, 3304,
	3303, 3302, 3301, 3300, 3299, 3298, 3297, 3295, 3294, 3293,
	208, 200, 3292, 3291, 3290, 291, 287, 235, 244, 318,
	210, 203, 102, 3289, 3286, 134, 3285, 3283, 3282, 3281,
	308, 3280, 320, 3279, 3278, 3277, 3275, 168, 130, 3271,
	87, 163, 312, 44, 3269, 3267, 199, 239, 111, 110,
	3266, 3265, 3263, 3262, 3261, 177, 3260, 3257, 201, 72,
	3255, 230, 205, 364, 3254, 2079, 250, 3252, 3249, 3249,
	3248, 37, 314, 3247, 209, 207, 106, 246, 3246, 104,
	3243, 3242, 251, 3239, 3238, 76, 3237, 3234, 206, 249,
	3233, 3232, 3227, 3226, 3225, 3223, 5, 100, 20, 11,
	3222, 3220, 31, 3218, 3217, 281, 222, 3216, 3215, 3214,
	82, 90, 3214, 3213, 3212, 211, 17, 3211, 3211,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 17, 17, 323, 323, 358, 358, 358, 24,
	24, 25, 25, 26, 26, 27, 27, 38, 38, 38,
	5, 5, 5, 6, 6, 6, 6, 6, 8, 8,
	7, 12, 12, 13, 13, 359, 359, 23, 23, 15,
	15, 522, 522, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 14, 14, 16, 16, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 54, 54, 54,
	54, 54, 54, 73, 75, 74, 74, 74, 55, 55,
	68, 68, 72, 72, 71, 71, 71, 71, 69, 69,
	56, 238, 481, 481, 100, 100, 100, 100, 100, 100,
	100, 66, 66, 67, 67, 67, 57, 58, 58, 61,
	61, 60, 59, 59, 62, 62, 62, 65, 65, 98,
	98, 98, 63, 63, 64, 126, 126, 126, 119, 119,
	119, 119, 119, 119, 128, 128, 128, 128, 127, 127,
	127, 127, 127, 129, 129, 129, 129, 129, 97, 97,
	80, 81, 81, 81, 81, 81, 76, 76, 76, 78,
	79, 93, 93, 94, 94, 82, 82, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 89, 89,
	85, 85, 77, 77, 77, 77, 77, 77, 86, 87,
	90, 91, 88, 88, 88, 88, 95, 95, 95, 96,
	96, 84, 84, 116, 116, 118, 118, 120, 120, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 117, 117, 99, 99, 101, 102, 123, 123, 122,
	122, 140, 140, 141, 143, 143, 144, 144, 142, 142,
	142, 142, 142, 142, 142, 142, 114, 115, 115, 145,
	145, 145, 145, 209, 209, 208, 208, 211, 211, 211,
	211, 212, 212, 213, 213, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 361, 361, 362, 362,
	362, 363, 363, 363, 224, 224, 224, 224, 224, 224,
	225, 225, 225, 225, 226, 226, 227, 227, 228, 228,
	228, 229, 229, 230, 230, 232, 233, 233, 233, 234,
	234, 234, 235, 235, 235, 236, 236, 215, 215, 165,
	165, 165, 186, 218, 218, 217, 217, 217, 217, 219,
	219, 220, 220, 221, 221, 222, 222, 223, 223, 237,
	237, 246, 246, 242, 242, 243, 244, 244, 245, 245,
	486, 240, 240, 239, 239, 241, 252, 252, 254, 254,
	253, 253, 253, 253, 255, 255, 256, 256, 247, 247,
	248, 248, 249, 249, 249, 250, 250, 251, 251, 251,
	251, 251, 257, 262, 261, 261, 265, 265, 263, 263,
	264, 267, 267, 268, 268, 268, 268, 268, 268, 268,
	268, 269, 269, 269, 269, 266, 266, 270, 270, 270,
	270, 270, 270, 270, 270, 270, 271, 271, 271, 271,
	271, 272, 272, 273, 273, 274, 274, 258, 258, 259,
	259, 259, 259, 259, 259, 260, 260, 146, 360, 360,
	156, 156, 156, 156, 156, 177, 177, 157, 157, 161,
	147, 158, 158, 163, 163, 162, 159, 159, 148, 231,
	231, 149, 160, 160, 150, 150, 180, 180, 181, 181,
	187, 187, 187, 188, 188, 189, 189, 191, 191, 192,
	192, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 193, 193, 198, 199,
	199, 199, 199, 199, 199, 194, 194, 200, 205, 205,
	205, 205, 201, 201, 201, 201, 33, 33, 335, 335,
	335, 335, 335, 335, 335, 335, 334, 334, 334, 333,
	333, 333, 333, 333, 204, 204, 442, 442, 203, 203,
	523, 523, 469, 469, 182, 182, 183, 183, 184, 184,
	185, 185, 169, 169, 169, 169, 169, 178, 178, 179,
	179, 170, 170, 172, 173, 174, 174, 174, 174, 174,
	167, 164, 164, 164, 171, 171, 171, 196, 196, 197,
	197, 175, 175, 175, 176, 176, 168, 168, 124, 124,
	124, 125, 125, 125, 166, 166, 151, 151, 151, 151,
	151, 151, 337, 337, 337, 337, 337, 337, 337, 337,
	275, 275, 276, 276, 279, 279, 279, 282, 290, 290,
	290, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 339, 339, 340, 340, 341, 341, 342, 342, 277,
	277, 278, 278, 283, 283, 284, 284, 285, 285, 285,
	285, 286, 289, 289, 343, 343, 344, 344, 345, 10,
	32, 280, 294, 294, 295, 295, 295, 295, 298, 298,
	298, 298, 301, 301, 301, 347, 347, 350, 350, 352,
	352, 352, 352, 348, 348, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 524, 524, 28, 28, 28, 346, 346, 349, 349,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 281,
	281, 297, 297, 297, 297, 297, 297, 297, 299, 299,
	288, 288, 287, 287, 303, 303, 302, 302, 302, 302,
	307, 307, 307, 307, 307, 304, 305, 306, 306, 306,
	306, 306, 308, 308, 309, 309, 310, 311, 311, 312,
	312, 312, 338, 338, 316, 316, 316, 316, 317, 317,
	318, 318, 319, 152, 152, 300, 300, 320, 320, 322,
	322, 321, 321, 324, 324, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 325, 325, 330, 330,
	326, 326, 11, 473, 473, 473, 473, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 328, 328,
	328, 329, 331, 331, 525, 525, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 376, 376,
	376, 475, 475, 475, 478, 478, 478, 478, 477, 477,
	479, 479, 377, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 37, 369, 371, 70,
	70, 70, 70, 370, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 292,
	292, 293, 293, 293, 293, 293, 293, 313, 314, 314,
	315, 315, 315, 315, 372, 372, 372, 372, 482, 482,
	483, 483, 484, 484, 484, 485, 485, 485, 485, 485,
	487, 487, 487, 487, 487, 488, 92, 92, 92, 489,
	489, 490, 490, 492, 492, 492, 492, 492, 494, 494,
	491, 491, 495, 495, 495, 375, 513, 513, 496, 496,
	493, 493, 493, 493, 493, 493, 493, 493, 493, 493,
	493, 493, 493, 493, 493, 493, 493, 480, 480, 373,
	373, 497, 497, 497, 499, 499, 498, 498, 498, 498,
	498, 504, 504, 505, 505, 507, 502, 502, 503, 503,
	510, 500, 500, 527, 527, 501, 501, 508, 508, 526,
	526, 506, 506, 506, 509, 509, 509, 509, 511, 511,
	374, 374, 374, 374, 195, 195, 512, 512, 512, 512,
	380, 380, 380, 380, 381, 382, 382, 382, 382, 382,
	382, 382, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 385, 385,
	420, 420, 528, 528, 386, 386, 387, 387, 421, 421,
	423, 423, 423, 423, 388, 422, 422, 424, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 437, 437, 410, 411, 411, 427, 427, 427, 427,
	426, 426, 425, 425, 432, 432, 412, 412, 413, 413,
	413, 428, 428, 429, 429, 430, 430, 414, 414, 414,
	414, 415, 415, 416, 417, 417, 431, 431, 464, 464,
	464, 464, 465, 465, 472, 466, 467, 467, 468, 384,
	384, 384, 384, 384, 418, 418, 419, 419, 470, 470,
	471, 471, 378, 378, 379, 365, 365, 366, 364, 364,
	364, 367, 367, 368, 368, 368, 368, 476, 476, 476,
	476, 476, 476, 476, 476, 476, 476, 476, 474, 474,
	474, 474, 207, 207, 210, 210, 202, 202, 514, 514,
	514, 514, 514, 514, 514, 514, 514, 517, 517, 517,
	206, 206, 9, 9, 9, 9, 519, 519, 515, 515,
	515, 516, 516, 516, 516, 516, 518, 518, 518, 518,
	336, 336, 336, 336, 336, 336, 354, 354, 29, 29,
	30, 31, 31, 34, 34, 34, 34, 35, 35, 36,
	36, 36, 36, 355, 356, 356, 357, 357, 390, 390,
	391, 436, 436, 436, 436, 433, 433, 435, 434, 434,
	392, 438, 438, 393, 393, 394, 395, 439, 439, 443,
	443, 444, 444, 444, 444, 444, 445, 445, 446, 446,
	447, 447, 448, 448, 396, 449, 449, 397, 397, 398,
	398, 451, 451, 456, 456, 456, 399, 399, 399, 400,
	400, 400, 400, 452, 452, 457, 457, 457, 457, 457,
	457, 457, 216, 216, 401, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 403, 403, 403, 450, 450, 450,
	404, 460, 460, 453, 453, 458, 458, 458, 458, 458,
	440, 440, 520, 520, 520, 521, 521, 405, 406, 406,
	454, 454, 459, 459, 407, 408, 455, 455, 455, 455,
	409, 409, 441, 441, 461, 461, 462, 462, 463, 463,
	40, 40, 40, 39, 39, 130, 130, 133, 133, 133,
	133, 133, 136, 137, 138, 139, 134, 134, 131, 132,
	132, 135, 135, 103, 103, 104, 104, 106, 108, 108,
	108, 107, 109, 109, 105, 105, 110, 110, 110, 110,
	111, 111, 112, 112, 112, 112, 112, 113, 113, 113,
	113, 113, 42, 42, 42, 42, 41, 41, 43, 43,
	43, 43, 43, 43, 44, 44, 45, 45, 46, 47,
	47, 47, 48, 48, 49, 49, 50, 50,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 2,
	0, 3, 0, 2, 0, 1, 0, 2, 2, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 3, 1, 2, 3, 0, 1,
	3, 1, 0, 3, 3, 4, 4, 4, 4, 3,
	2, 1, 1, 2, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 5, 3, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	3, 3, 2, 2, 3, 5, 4, 6, 3, 5,
	4, 6, 4, 6, 5, 7, 3, 2, 4, 2,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 3, 4, 4, 6, 3, 3, 4,
	3, 4, 4, 5, 4, 5, 1, 1, 3, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 2, 4, 1, 1, 1,
	2, 2, 2, 2, 1, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 2,
	1, 2, 1, 0, 2, 2, 3, 5, 0, 2,
	4, 1, 1, 2, 3, 4, 5, 6, 8, 6,
	6, 1, 3, 1, 3, 3, 5, 1, 0, 1,
	2, 4, 2, 0, 3, 3, 2, 1, 3, 4,
	3, 5, 4, 3, 5, 1, 1, 1, 1, 4,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 3, 2, 3, 2, 0, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 3, 3, 0, 2, 3, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 2, 2, 1, 3, 3, 2, 4, 1,
	5, 2, 5, 2, 5, 2, 3, 3, 0, 1,
	0, 3, 0, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 0, 0, 0, 0, 1, 1,
	3, 1, 1, 1, 3, 3, 1, 1, 1, 2,
	4, 4, 2, 3, 5, 5, 0, 1, 0, 9,
	9, 2, 1, 1, 0, 1, 3, 3, 2, 1,
	1, 2, 0, 1, 3, 2, 2, 3, 1, 4,
	2, 3, 2, 3, 2, 3, 1, 1, 2, 2,
	4, 1, 2, 3, 3, 4, 5, 4, 5, 4,
	2, 2, 2, 1, 1, 0, 5, 2, 2, 2,
	3, 1, 0, 1, 3, 9, 1, 2, 0, 7,
	7, 0, 10, 6, 0, 4, 5, 2, 0, 2,
	4, 0, 1, 1, 0, 5, 2, 4, 1, 2,
	0, 1, 0, 1, 5, 1, 0, 2, 0, 2,
	6, 2, 0, 1, 3, 2, 4, 0, 1, 3,
	2, 1, 0, 1, 3, 3, 2, 0, 2, 2,
	2, 3, 3, 4, 1, 3, 3, 2, 7, 12,
	1, 3, 2, 3, 3, 1, 2, 2, 2, 2,
	1, 2, 13, 2, 2, 0, 2, 0, 1, 3,
	3, 2, 1, 1, 1, 1, 1, 1, 2, 2,
	1, 3, 3, 6, 0, 3, 0, 2, 3, 2,
	3, 4, 4, 3, 3, 0, 5, 2, 5, 2,
	0, 4, 2, 1, 0, 1, 0, 1, 3, 3,
	6, 7, 5, 7, 9, 2, 0, 7, 1, 3,
	1, 4, 4, 7, 2, 1, 1, 1, 3, 2,
	8, 1, 3, 3, 5, 2, 1, 3, 7, 2,
	0, 10, 1, 2, 9, 11, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 3, 0, 1, 3, 2,
	0, 1, 1, 3, 3, 1, 1, 3, 3, 3,
	3, 4, 4, 3, 3, 2, 1, 3, 2, 1,
	1, 1, 1, 3, 0, 1, 3, 1, 1, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 2, 2,
	1, 3, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 0, 2, 0,
	1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
	1, 0, 4, 4, 4, 5, 5, 2, 5, 3,
	5, 2, 0, 3, 1, 2, 5, 5, 8, 3,
	4, 8, 5, 0, 4, 3, 0, 1, 3, 1,
	3, 2, 2, 4, 4, 5, 2, 0, 1, 1,
	0, 2, 2, 0, 2, 0, 13, 16, 12, 15,
	14, 17, 1, 1, 2, 2, 2, 2, 1, 0,
	1, 0, 1, 3, 1, 1, 1, 3, 3, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 0, 2, 2, 1, 0, 3,
	0, 1, 3, 1, 1, 2, 4, 6, 6, 10,
	1, 2, 1, 3, 4, 0, 1, 3, 2, 1,
	1, 6, 2, 0, 3, 1, 1, 2, 1, 2,
	2, 2, 2, 3, 0, 1, 2, 1, 2, 1,
	3, 2, 3, 1, 2, 2, 2, 1, 2, 3,
	1, 2, 2, 2, 2, 3, 3, 3, 1, 3,
	1, 1, 0, 1, 1, 0, 1, 0, 3, 0,
	2, 1, 4, 4, 5, 2, 5, 5, 7, 3,
	1, 5, 9, 3, 9, 4, 11, 10, 2, 0,
	1, 3, 3, 6, 4, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	3, 3, 4, 0, 1, 0, 6, 1, 3, 3,
	3, 5, 2, 0, 3, 4, 4, 0, 2, 0,
	4, 0, 3, 16, 19, 1, 0, 2, 0, 4,
	0, 1, 3, 2, 0, 4, 6, 4, 6, 4,
	4, 6, 4, 6, 5, 7, 5, 7, 4, 6,
	10, 13, 10, 13, 11, 14, 1, 3, 1, 0,
	1, 3, 1, 1, 1, 1, 1, 2, 5, 3,
	6, 4, 6, 6, 9, 5, 7, 6, 6, 5,
	5, 5, 5, 9, 4, 5, 7, 6, 4, 8,
	4, 2, 4, 3, 6, 4, 3, 3, 3, 2,
	2, 3, 4, 4, 3, 3, 3, 3, 3, 3,
	4, 4, 3, 2, 3, 2, 2, 3, 4, 3,
	2, 2, 3, 4, 4, 4, 5, 1, 4, 4,
	4, 3, 3, 2, 1, 0, 6, 4, 6, 4,
	6, 8, 4, 6, 4, 6, 5, 7, 2, 3,
	3, 2, 5, 1, 1, 2, 3, 2, 1, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 2, 1,
	1, 1, 3, 3, 3, 3, 2, 2, 2, 3,
	5, 5, 5, 2, 6, 6, 6, 6, 6, 8,
	8, 6, 6, 7, 9, 9, 8, 10, 6, 6,
	6, 6, 6, 6, 6, 8, 6, 8, 6, 8,
	7, 9, 6, 8, 7, 9, 8, 10, 8, 10,
	9, 11, 8, 10, 9, 11, 8, 8, 7, 6,
	6, 6, 6, 8, 8, 8, 8, 6, 9, 0,
	2, 2, 1, 2, 2, 2, 2, 3, 1, 3,
	3, 1, 5, 3, 9, 12, 7, 7, 3, 2,
	1, 3, 1, 3, 3, 3, 3, 2, 2, 1,
	1, 1, 1, 2, 1, 1, 1, 4, 5, 1,
	0, 1, 2, 2, 2, 2, 1, 1, 1, 3,
	3, 5, 1, 4, 0, 2, 3, 0, 1, 1,
	4, 5, 1, 1, 1, 1, 3, 3, 2, 2,
	1, 2, 2, 2, 2, 1, 2, 2, 1, 17,
	21, 1, 1, 2, 1, 3, 1, 1, 1, 3,
	1, 2, 0, 1, 2, 4, 1, 1, 1, 1,
	1, 3, 0, 1, 0, 1, 1, 4, 0, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 2, 0,
	9, 11, 12, 14, 3, 0, 3, 4, 4, 0,
	6, 4, 9, 7, 6, 4, 6, 6, 5, 7,
	9, 6, 6, 5, 4, 4, 3, 6, 6, 6,
	6, 4, 7, 5, 8, 7, 8, 6, 5, 8,
	1, 0, 1, 0, 4, 6, 5, 8, 2, 0,
	2, 2, 2, 1, 5, 2, 0, 2, 6, 6,
	6, 10, 6, 6, 6, 9, 9, 6, 6, 9,
	6, 1, 1, 7, 7, 6, 2, 2, 2, 2,
	1, 2, 1, 0, 1, 2, 10, 13, 5, 4,
	4, 2, 0, 2, 2, 1, 0, 11, 14, 12,
	15, 8, 11, 8, 7, 9, 1, 1, 3, 3,
	5, 6, 1, 3, 1, 3, 1, 3, 3, 7,
	9, 9, 8, 6, 1, 0, 1, 3, 3, 1,
	5, 3, 8, 11, 6, 1, 0, 5, 2, 3,
	0, 2, 0, 1, 1, 1, 1, 1, 3, 3,
	2, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 3, 2, 2, 1, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 2, 0, 2, 0,
	4, 1, 3, 1, 2, 2, 2, 1, 1, 1,
	1, 1, 3, 3, 1, 3, 1, 3, 11, 13,
	5, 1, 2, 2, 1, 1, 3, 5, 1, 3,
	7, 2, 0, 5, 5, 10, 8, 2, 0, 2,
	0, 1, 1, 1, 1, 1, 2, 0, 2, 0,
	4, 0, 5, 0, 8, 1, 1, 8, 11, 6,
	8, 1, 3, 1, 1, 3, 4, 7, 6, 5,
	5, 5, 5, 1, 3, 4, 4, 4, 3, 4,
	3, 1, 4, 0, 8, 5, 5, 6, 7, 7,
	7, 4, 4, 5, 11, 10, 10, 2, 2, 0,
	13, 2, 0, 1, 3, 5, 5, 3, 6, 2,
	1, 0, 2, 4, 0, 1, 3, 6, 8, 8,
	1, 3, 5, 5, 10, 10, 11, 11, 5, 5,
	6, 10, 1, 0, 2, 0, 1, 0, 2, 2,
	1, 1, 0, 4, 0, 1, 3, 1, 1, 1,
	1, 1, 2, 4, 4, 5, 2, 0, 3, 1,
	3, 4, 3, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 3, 3, 3, 0,
	1, 4, 2, 2, 2, 2, 2, 3, 2, 2,
	3, 0, 2, 2, 1, 1, 1, 0, 2, 4,
	5, 6, 4, 5, 2, 3, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -140, -146, -147, -148, -149,
	-150, -151, -152, -153, -154, -155, -372, -373, -374, -378,
	-379, -380, -381, -382, -383, -384, -385, -386, -387, -388,
	-389, -410, -411, -412, -413, -414, -415, -416, -417, -390,
	-391, -392, -393, -394, -395, -396, -397, -398, -399, -400,
	-401, -402, -403, -404, -405, -406, -407, -408, -409, -376,
	-377, -142, -143, -229, 112, 26, 22, 27, 395, 94,
	402, -145, -144, -228, 532, 63, 67, -236, 36, 519,
	87, 541, 97, 98, 99, 100, 532, -188, 116, -337,
	-300, -26, 33, 415, 262, 62, 465, 455, 226, 277,
	285, 423, 104, -365, 269, 450, 376, 195, 439, 388,
	444, 513, -440, 454, 452, 58, 290, 474, 472, 40,
	67, 308, 420, 481, 85, 285, 200, 226, 237, 248,
	262, 287, 71, -442, 62, 376, 386, 388, 410, 415,
	423, 444, 413, 461, 269, 407, 104, 450, 439, 455,
	465, 277, 385, -332, -335, -334, 465, 262, 308, 104,
	67, 420, 481, 85, 285, 226, 237, 439, 455, 195,
	269, 277, -442, 388, 415, 423, 376, 413, 461, 85,
	-475, 58, 424, 458, -476, -474, -207, 56, 218, 415,
	348, 407, 489, -5, 4, -18, -19, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 201, 22, 202, 204,
	205, 206, 55, 207, 208, 209, 211, 212, 213, 89,
	70, 214, 215, 216, 24, 217, 219, 220, 221, 222,
	223, 224, 124, 227, 228, 229, 230, 231, 142, 232,
	102, 233, 234, 235, 236, 237, 112, 238, 155, 239,
	121, 122, 91, 247, 248, 249, 250, 251, 252, 254,
	255, 99, 150, 151, 256, 90, 257, 258, 259, 260,
	261, 262, 177, 27, 263, 139, 265, 149, 266, 268,
	137, 42, 269, 271, 272, 273, 274, 275, 276, 277,
	278, 280, 282, 283, 92, 284, 154, 166, 286, 287,
	288, 289, 290, 292, 295, 296, 152, 297, 298, 299,
	28, 300, 301, 302, 303, 304, 305, 306, 307, 308,
	309, 310, 311, 313, 314, 315, 97, 316, 318, 319,
	146, 504, 320, 321, 322, 323, 93, 325, 328, 329,
	330, 333, 334, 335, 336, 337, 338, 106, 85, 339,
	100, 341, 342, 343, 344, 345, 346, 347, 132, 349,
	350, 351, 352, 353, 354, 355, 358, 111, 359, 360,
	32, 140, 123, 505, 506, 503, 145, 62, 507, 508,
	125, 502, 509, 103, 365, 366, 367, 368, 369, 370,
	371, 130, 372, 129, 374, 375, 376, 378, 379, 380,
	381, 383, 384, 385, 386, 387, 113, 388, 153, 144,
	389, 390, 391, 392, 84, 133, 394, 395, 396, 397,
	398, 399, 400, 34, 401, 402, 403, 35, 404, 405,
	406, 408, 409, 410, 411, 128, 413, 414, 147, 416,
	417, 88, 418, 419, 420, 421, 422, 423, 94, 426,
	428, 429, 430, 431, 432, 108, 434, 435, 436, 437,
	438, 439, 114, 115, 440, 441, 442, 148, 443, 444,
	446, 447, 105, 449, 450, 109, 452, 453, 454, 455,
	456, 459, 461, 463, 464, 465, 466, 467, 468, 469,
	143, 470, 50, 473, 474, 475, 98, 476, 477, 478,
	479, 156, 184, 480, 481, 482, 483, 484, 486, 169,
	487, 141, 488, 499, 500, 57, 37, 174, 170, 190,
	180, 179, 225, 189, 188, 29, 279, 176, 293, 294,
	501, 187, 172, 186, 167, 161, 163, 164, 160, 162,
	157, 165, 159, 127, 158, 326, 340, 182, 183, 356,
	357, 361, 171, 362, 363, 377, 178, 175, 412, 427,
	173, 445, 185, 460, 462, 87, 181, 490, 491, 492,
	493, 494, 134, 495, 496, 497, 498, 126, -478, -477,
	56, 458, 424, -207, 21, 218, 58, 348, 407, 415,
	489, -131, -99, 510, -144, -145, -143, -142, -143, -228,
	-220, -221, 21, 41, -361, -359, -362, -5, 66, 424,
	458, 56, 542, -230, 84, -232, -7, -5, -230, 532,
	-3, 73, -363, -361, 64, 73, -141, -140, -359, 67,
	481, 84, 420, 308, 287, 386, 461, 118, 200, 459,
	-441, 464, 34, -17, -5, 28, -14, -5, -117, 222,
	280, -120, -5, 11, -121, 535, 536, 537, 538, 539,
	540, 526, 527, 528, 18, 19, 20, -14, 88, -14,
	28, -7, 28, 247, 67, -7, 28, 337, 85, 461,
	-7, -7, 341, -323, 28, -14, -7, -7, 532, 237,
	454, 452, 454, 452, -361, 28, 21, -359, 28, 21,
	-359, 28, -359, 28, 481, 67, 247, -370, -481, -76,
	-5, 4, -18, -20, 210, 116, 226, 25, 81, 243,
	117, 79, 44, 76, 52, 53, 75, 77, 46, 82,
	54, 80, 364, 78, 48, 451, 119, -14, -14, -7,
	-14, -369, -481, -11, -473, -9, 242, 246, 425, 4,
	-18, -19, -20, 322, 222, 280, -7, 28, -369, -7,
	-369, -7, -7, -7, -7, -7, 461, -11, -11, 337,
	-7, -14, 28, 88, -14, -7, 28, -16, -14, 28,
	-12, -7, -7, 28, -204, 28, -80, -81, -82, -83,
	-89, -85, -88, -76, 187, 172, 173, 174, 175, 176,
	177, 188, 189, 171, 190, -90, -91, -86, -87, 185,
	56, 4, -18, 170, -77, 179, 180, 181, 182, 183,
	-204, 28, 25, 337, 481, 247, 67, 88, 341, 461,
	322, 481, -475, 424, -475, 220, 210, -515, 432, -516,
	319, 390, 253, 31, 64, 61, 528, 534, 57, -75,
	7, -75, -517, -75, 40, -206, -9, -75, 507, 57,
	319, 210, -114, -42, -43, -44, 68, 281, 69, 70,
	-131, -99, 533, 533, -209, -208, -211, -51, 537, -53,
	535, 536, -116, 31, 517, -98, 472, 40, -55, -54,
	13, 532, -57, -56, -143, 29, 135, -63, -64, 294,
	11, 62, 412, -5, -73, 6, -75, 49, 43, 47,
	38, -100, 12, -481, -208, 74, 537, -68, -71, 534,
	530, -359, 532, 532, 542, -230, -23, 532, -97, -51,
	-360, -359, 94, -5, 23, -363, -363, 533, -195, 532,
	-359, 28, -359, 481, -359, 28, -27, 25, -481, -481,
	-7, 461, -481, 131, -442, -337, 474, 210, -367, 31,
	-469, 23, -93, 534, -355, 532, -14, -14, 534, -355,
	23, 369, 258, 453, 232, -355, 64, 31, -28, 36,
	519, 31, 141, -359, 28, -428, 465, 31, 131, 28,
	481, -7, -438, 366, 74, -7, -23, 31, -354, 131,
	36, 233, -80, -14, -325, -328, 399, -327, 208, 257,
	197, 22, 27, 478, 94, 224, 265, 259, 310, 355,
	123, 31, 366, 402, 401, 154, -30, 508, 29, 45,
	-325, -329, 399, 208, 29, 45, -325, 399, -348, -351,
	355, 23, 214, 91, 306, 336, 339, 343, 365, 420,
	437, 403, 474, 29, -325, 399, 29, -359, 28, 21,
	-361, 28, 141, 399, -37, 532, -68, 399, 399, 399,
	399, -331, 27, 94, 197, 478, 399, -37, 399, -7,
	-14, -14, 74, 29, 399, 399, 94, 197, 27, 399,
	399, 399, -429, -30, 480, 399, 94, 233, 395, 197,
	27, 265, 259, 431, 74, 74, -7, 399, 399, 131,
	399, 94, 402, 399, 94, 29, 369, 258, 453, 232,
	399, 197, 27, 98, -437, 197, 27, 29, 542, -358,
	24, 35, 29, 542, -358, 74, 29, 542, -358, 29,
	-94, -93, 532, -84, 532, 178, -94, -94, -94, 532,
	-95, 519, 520, 532, -95, -96, 184, 532, -96, -96,
	179, 180, -96, -358, 29, -16, 28, 131, 28, 141,
	369, 258, 453, 232, -27, 220, 23, -206, 40, 542,
	-516, -75, 328, 66, 488, 253, 121, -210, 40, -202,
	-205, -201, 49, 43, 74, -206, 6, 535, 536, -74,
	-73, -210, 40, -5, -514, -75, 4, -201, 40, 58,
	49, 43, 74, 505, -519, 261, 235, 328, -41, -42,
	-115, -114, -44, -43, -45, -51, 21, -50, 92, 350,
	-46, -47, -51, -53, 535, 536, -132, -135, -51, -114,
	-42, -223, 73, 542, 14, 39, 55, 535, 536, 537,
	538, 539, 540, 526, 527, 528, 18, 19, 20, -116,
	30, 33, 46, 517, 44, 48, 52, 53, 54, 37,
	45, -119, 23, -8, 11, 62, -120, 4, -22, 192,
	193, 194, 195, 196, 197, 198, 199, 200, 21, 201,
	22, 202, 203, 120, 511, 95, 204, 205, 206, 60,
	207, 208, 209, 210, 211, 212, 213, 174, 116, 170,
	190, 512, 89, 70, 214, 215, 216, 24, 217, 38,
	513, 218, 219, 220, 514, 221, 222, 223, 224, 225,
	226, 515, 124, 227, 228, 229, 230, 231, 25, 142,
	232, 102, 233, 118, 234, 235, 236, 237, 112, 238,
	81, 155, 239, 121, 240, 241, 242, 243, 244, 245,
	246, 122, 91, 247, 248, 250, 189, 188, 251, 40,
	252, 253, 254, 255, 99, 150, 151, 256, 90, 96,
	257, 258, 259, 260, 41, 110, 261, 262, 177, 27,
	263, 264, 139, 265, 149, 266, 267, 268, 137, 42,
	269, 271, 272, 273, 274, 29, 275, 276, 277, 278,
	279, 43, 280, 283, 92, 176, 284, 154, 285, 166,
	286, 117, 79, 287, 288, 289, 290, 292, 293, 294,
	295, 296, 152, 297, 299, 28, 300, 301, 302, 303,
	304, 305, 306, 307, 308, 309, 310, 311, 312, 313,
	76, 501, 314, 315, 97, 316, 187, 172, 186, 318,
	319, 75, 167, 161, 163, 164, 160, 162, 157, 165,
	159, 127, 158, 146, 504, 320, 321, 322, 323, 93,
	324, 327, 325, 326, 77, 328, 329, 330, 58, 331,
	332, 333, 334, 335, 336, 337, 338, 106, 85, 339,
	100, 340, 341, 343, 344, 346, 347, 348, 182, 82,
	183, 132, 349, 350, 351, 352, 353, 354, 355, 356,
	357, 358, 31, 111, 359, 360, 47, 361, 32, 171,
	140, 123, 505, 506, 503, 145, 66, 507, 508, 125,
	502, 362, 80, 363, 103, 365, 366, 367, 368, 369,
	370, 371, 130, 372, 129, 373, 374, 375, 376, 377,
	378, 379, 380, 381, 382, 383, 384, 385, 386, 387,
	113, 388, 153, 144, 389, 390, 175, 391, 392, 84,
	133, 393, 394, 395, 396, 397, 398, 399, 400, 34,
	401, 402, 403, 35, 404, 405, 406, 78, 407, 408,
	409, 410, 411, 412, 128, 413, 414, 147, 415, 416,
	417, 88, 419, 63, 420, 421, 422, 423, 424, 425,
	94, 427, 426, 428, 429, 430, 431, 173, 432, 433,
	108, 434, 435, 436, 437, 438, 439, 114, 115, 440,
	441, 442, 148, 443, 444, 445, 446, 59, 447, 105,
	448, 67, 449, 451, 450, 109, 452, 453, 454, 455,
	107, 456, 56, 185, 457, 458, 459, 460, 461, 462,
	49, 463, 464, 465, 466, 467, 468, 469, 143, 470,
	472, 50, 473, 474, 475, 98, 104, 83, 476, 477,
	478, 479, 156, 87, 181, 191, 119, 480, 481, 482,
	483, 51, 484, 487, 141, 488, 489, 490, 491, 492,
	493, 494, 134, 495, 496, 497, 498, 126, 500, 57,
	-51, -51, -51, -51, -51, 364, -301, 32, -69, -51,
	-97, -143, 87, -68, -143, -143, -62, 530, 532, 532,
	532, -68, -58, -51, -101, 532, -223, 532, -71, -78,
	537, -6, 4, -18, -19, -20, -21, 21, 203, 120,
	30, 511, 135, 23, 95, 60, 512, 38, 513, 514,
	39, 515, 118, 26, 240, 241, 242, 244, 245, 246,
	40, 253, 96, 41, 110, 264, 267, 270, 43, 281,
	131, 285, 64, 291, 71, 72, 45, 312, 317, 73,
	324, 327, 68, 331, 332, 31, 47, 69, 74, 66,
	33, 510, 373, 382, 393, 101, 63, 425, 433, 59,
	448, 67, 107, 61, 457, 49, 471, 472, 104, 83,
	191, 51, 65, 485, 36, -51, -72, -359, -97, -232,
	23, -12, 542, 533, 39, 55, 30, 33, 46, 44,
	48, 52, 37, 45, 62, -156, -140, 103, 532, 40,
	23, -158, -163, -162, 532, -5, -5, -231, 83, 83,
	61, -180, 64, 61, -13, -5, 532, 123, 371, 31,
	-195, -359, -420, -348, 355, 31, -17, 28, -5, -482,
	532, -482, -497, 212, 199, 316, -7, -464, -466, 532,
	-80, 322, 481, 84, -473, -368, -151, -152, -373, -374,
	26, 29, -80, 534, -78, -356, -357, -6, -440, 83,
	-117, 532, 268, 389, -14, -14, -14, -14, -14, 29,
	-421, 29, -7, 532, 371, 31, -430, -429, -75, 29,
	-431, -473, 104, 31, -366, 28, -359, 74, 333, -473,
	-359, 465, 74, 29, 21, -452, -457, 67, 449, -5,
	-362, 243, -359, -355, -75, 23, 131, 542, 61, -525,
	118, 515, 371, 371, -280, 28, 515, -281, -5, 118,
	-297, 514, 472, 382, 285, 271, -525, 118, -525, 118,
	118, 169, 336, 474, 195, 450, -313, 532, 74, 461,
	202, 401, 413, 412, 461, 413, 412, -359, 310, 154,
	-14, 123, 61, -313, 299, 412, 532, -361, 450, 61,
	371, -359, 450, 61, -351, 91, 339, 343, -81, -201,
	-524, 70, -201, -201, 70, 347, -28, -28, -359, 61,
	-525, -359, -325, 399, 29, 45, -325, 399, 29, -7,
	61, 533, 61, 61, 61, 61, 118, 40, 31, 118,
	40, 31, -470, 118, -471, 514, 31, 118, 61, 61,
	399, 83, 83, -359, -7, 61, 61, -355, -452, -452,
	-452, 61, 61, 61, -30, -75, 47, 61, -355, 388,
	-75, 388, 388, 388, -355, -359, -359, 399, -436, 265,
	259, 61, 61, -431, 61, -313, -313, 61, 439, -14,
	-14, -14, -14, -14, 61, 209, 156, 156, 156, -422,
	-333, -332, 200, 513, 262, 287, 62, 386, 410, 459,
	465, -335, 248, 407, 444, 450, 308, -16, -14, -12,
	-7, -14, -7, -80, -204, -94, -97, -73, -73, 56,
	56, -73, 532, -73, -96, -96, -204, -358, 29, -431,
	29, -359, 458, -516, -518, 390, 400, 422, 542, -73,
	6, -73, 6, 542, -47, -49, -53, 535, 536, 412,
	128, 532, -49, 412, 128, -48, -73, 6, -48, 542,
	83, -124, 95, 96, -41, -115, -212, 64, -359, -211,
	-80, -14, 56, 58, -51, -51, -51, -51, -51, -51,
	-51, -51, -51, -51, -51, -51, -51, -51, -51, -51,
	46, 44, 48, 37, 45, -51, 61, 47, 31, 49,
	43, 50, 41, 261, 358, -128, -127, 351, 352, 353,
	354, 167, -123, 59, 60, -122, -143, 532, -126, 511,
	433, 21, -6, 532, -98, 412, 532, -143, 41, 31,
	-71, 533, 542, -97, -65, 531, -62, -97, -117, -97,
	533, -61, -60, 51, -102, 533, 537, -66, 191, 21,
	41, -67, -51, -79, -76, -212, -97, 531, 543, 533,
	533, -233, 85, 31, 533, -51, -164, 74, -177, 104,
	105, -157, -161, -5, 87, -5, -212, 542, 528, -159,
	-162, -69, -165, 65, -213, -214, -361, -143, 86, -224,
	532, -237, -247, -257, -238, 128, 126, 127, -5, -100,
	-214, -181, 113, -181, 542, 533, -275, -276, -279, -280,
	-282, -281, 46, -14, 123, 29, -324, 36, 532, 29,
	74, 31, 405, -489, -490, -492, 23, 322, 459, 485,
	-493, 216, 442, 301, 435, 483, 278, 419, 325, 31,
	238, 128, 446, -480, 367, 94, -377, -483, 533, -484,
	-485, -487, -79, -92, 45, 362, 501, 191, -76, -80,
	427, -489, 405, -499, -498, 97, 99, 98, 463, 123,
	199, -355, 537, -465, 510, -467, -472, -468, -485, 4,
	322, -7, -359, 481, -367, -337, -26, -17, -5, -294,
	-78, 533, 542, 528, 131, -7, -240, -239, -241, -5,
	532, -355, -355, -355, -355, -355, -14, -423, 415, 480,
	64, 24, -7, -425, -426, -427, 296, 355, 479, -275,
	123, 29, 285, -7, 423, 29, 23, 31, -195, -6,
	7, -439, 23, -449, 308, 67, -451, -456, -5, -238,
	532, -14, 449, -354, 542, -361, 45, -68, -195, -195,
	388, -80, -75, -327, -7, -7, -7, -359, -359, 31,
	-280, 28, -80, -7, 532, -301, -319, 83, 504, 504,
	-320, 83, -5, -73, -7, 28, -5, 28, -7, -7,
	506, 224, 341, -7, -314, -315, -6, -7, -7, 21,
	104, 461, 413, 461, 413, -7, 328, -7, 21, 104,
	-7, 328, -359, 412, -473, -36, 111, 79, 40, 83,
	328, -31, -34, -345, 94, 197, 27, -10, -6, -325,
	-328, 399, -7, -7, -359, -325, 399, -7, -7, -201,
	-14, -14, -201, -201, -325, 399, -348, -7, -7, -325,
	399, 61, -525, -359, 450, 61, -525, -361, 399, -425,
	-426, -7, -7, -7, -7, -7, -7, 47, -7, 28,
	-51, 47, -7, 532, 47, -7, -7, -11, 61, -7,
	-7, 399, -446, 61, 74, -7, -7, -7, -7, -7,
	-7, -12, -354, -12, -12, 399, 399, 61, 401, 202,
	-11, -11, 423, -7, -7, -33, -74, 40, 535, 536,
	94, 399, 399, 399, 399, -7, -7, -75, -25, 28,
	-75, -424, 61, -7, -14, -370, 532, -80, -369, -371,
	222, 280, -117, -369, -369, 131, -80, -358, -358, -358,
	74, -358, 533, 533, 533, 57, 57, 533, -97, 533,
	-358, -16, 423, 131, -364, 36, -515, 469, 230, 390,
	-202, -46, -49, 66, 36, -73, 6, 532, -97, -135,
	-118, -120, 62, -125, 518, -215, 65, -213, 57, 42,
	-51, -51, 61, -123, 59, -122, 42, -51, 47, 49,
	43, 50, 41, 261, 358, -128, -127, 64, 358, -129,
	36, 169, 156, 135, 140, 147, -52, -53, 535, 536,
	412, -52, -97, -143, 532, -117, 532, -97, 41, -69,
	-51, 531, 531, 542, 533, 533, 533, -59, -60, 264,
	-51, -108, 509, 533, -99, 542, -131, -67, -66, -66,
	16, 17, -215, 533, -72, -51, 532, 85, -166, 101,
	102, 156, 533, 542, -69, -165, -163, -51, 533, 542,
	-166, -51, 121, 542, 81, -225, 75, 82, 79, 77,
	78, 76, -218, -217, 23, -5, -218, -143, -237, -247,
	-257, -143, -224, -214, -218, -218, -218, -246, 519, 64,
	532, 532, -68, 74, -187, -75, 114, 115, -187, -5,
	533, 542, -359, -277, 532, -359, -359, 23, -313, -13,
	-359, -361, 29, -488, 67, 47, -92, -76, -495, -375,
	213, 404, -492, -494, -75, -206, -491, 131, 74, 419,
	255, 318, 325, -201, -201, -14, -5, -476, 424, 458,
	533, 542, 40, 528, -79, -92, -487, -92, 362, -93,
	-76, -495, 74, 33, 123, -499, 533, 533, 510, 542,
	70, 533, 542, 528, -7, 296, -195, -359, 210, -367,
	-295, 118, -296, -298, 39, 31, 47, 472, 382, 514,
	40, 393, 289, 253, 312, -357, -336, -92, -21, -118,
	-201, -75, 356, 62, 535, 536, 465, 533, 542, -80,
	-418, -419, -75, -355, 64, -7, -206, -206, -28, -343,
	508, -427, -432, -7, 296, 479, -432, 533, -359, -359,
	247, -428, -7, 131, -140, 29, -338, 83, 274, 51,
	-324, -443, 131, 4, 296, 64, 542, -51, -23, -354,
	-457, -195, 415, -195, -216, 65, -216, -12, 533, 61,
	61, 61, -285, 131, 40, -27, 283, 29, 31, -342,
	-341, 440, -297, 271, -51, 532, -292, 308, 532, -319,
	532, 532, -7, -331, 27, 94, 402, 197, -350, -203,
	-30, -352, 403, 94, -292, 29, -358, 29, -358, -35,
	-5, 40, 533, 542, 528, 534, -7, -7, -7, -7,
	419, 419, 328, 308, 419, 533, 542, -345, -345, -10,
	-32, -75, 61, -525, 118, 94, 365, 61, 94, 365,
	61, 61, 61, -525, -7, -7, -325, 399, -7, -7,
	-7, -325, 399, 61, -30, 61, -358, 29, -471, -51,
	-292, -7, 399, 399, 197, 27, 61, -447, 83, -326,
	-473, -359, -354, -354, -354, 61, 61, -7, -7, 439,
	61, 61, 61, 61, 61, 61, -75, 31, -206, -80,
	-14, -14, -70, 532, -80, -14, -95, -95, 533, -358,
	-7, -431, 247, 355, 66, 36, 456, -97, 533, 542,
	-125, 532, 92, 93, -39, 71, -51, -51, -51, 42,
	42, -51, -52, -52, -51, 42, 64, 358, -129, -51,
	472, 472, 30, 14, 535, 536, 537, 538, 539, 540,
	526, 527, 528, 18, 19, 20, -52, -52, 30, 533,
	-51, 533, -97, 533, 542, 533, -62, 267, -51, 107,
	-107, -5, 532, 533, 191, -67, -99, -99, 542, -99,
	-51, -51, -39, 531, -141, -208, -171, 532, 74, -140,
	-140, 103, -161, -166, 528, -162, 123, -214, 75, 75,
	-214, -225, 75, -226, 80, -226, -226, -5, 532, -218,
	-218, -218, -218, 533, 125, 532, -53, 134, -262, -51,
	-51, -28, -189, -523, 83, -308, 311, -279, -290, -309,
	-310, 371, -278, -283, -284, -281, -5, -277, 532, 123,
	371, -140, 533, -420, -320, -7, -489, 532, 74, 207,
	-51, 542, 542, 465, 47, 255, 318, -484, -51, -51,
	-92, -92, 539, -93, -359, -498, -13, 74, 70, -472,
	-465, -468, 4, -336, 532, -432, -324, 532, -473, -7,
	-14, 253, 47, -301, 504, 532, -52, -359, -347, 202,
	70, 254, 300, -80, -241, -252, 39, 533, 542, -14,
	-421, 532, -93, -308, -277, 532, 371, 141, -430, -343,
	-431, -364, -366, -324, -7, -526, 287, 386, -433, -435,
	-5, -445, 61, -444, 21, 63, 97, 98, 99, -432,
	-213, -456, 533, 74, -216, -5, 243, -216, 532, -354,
	36, 169, -75, -7, -7, 87, -280, 29, -340, -339,
	231, -5, 40, 533, -13, -293, 31, 253, 312, 355,
	-7, -13, -292, -13, -288, -287, -175, -5, -238, 532,
	31, 276, 299, 247, -351, 289, 31, 276, 439, -313,
	-341, -339, -313, 289, -352, 94, 465, -28, 439, -5,
	-7, -315, -336, -6, 419, -7, -34, -7, -7, -7,
	450, 70, -7, 450, 70, -7, -7, -7, -7, 61,
	61, -525, 94, 365, 61, 61, -525, -7, -7, -7,
	533, 61, 61, -453, -458, 62, 287, 440, -454, -459,
	62, 287, -7, -448, 36, 532, 542, 399, -7, -7,
	-30, -33, -7, -7, -7, -7, -7, -75, 212, 199,
	29, 23, 83, 83, -80, 356, 322, -358, 423, 247,
	456, 533, -51, -117, -134, 72, 70, -51, -51, 42,
	30, 30, -51, -51, 320, 320, -51, -80, -52, -52,
	-52, -52, -52, -52, -52, -52, -52, -52, -52, -52,
	-51, 533, 533, -51, -51, -109, -5, -67, 533, 533,
	533, -134, 533, 110, -197, -175, 118, -177, -51, -186,
	-7, -214, -214, -227, 83, 74, 75, -214, 532, -12,
	-217, -242, -243, -238, -253, 130, 532, 542, -273, -272,
	516, -160, -169, -178, -179, 51, -191, -192, 532, -28,
	151, -309, 532, 305, 272, -338, 70, 533, 542, -294,
	36, -285, -275, -14, 123, -512, 36, -324, 532, 74,
	-495, -245, -486, -79, -76, 47, -513, -75, 131, -80,
	314, 465, 539, -504, 394, -359, -465, 533, -455, 64,
	61, -461, 313, 23, -13, -367, -296, 31, -354, -354,
	-51, -195, 23, 40, 83, -14, -75, -344, -345, 423,
	-285, -275, 123, -7, 285, 423, 23, -317, 450, -481,
	274, 30, 45, -447, -326, -451, -51, 287, 501, 287,
	64, 36, 45, 64, -280, -343, -5, 40, -292, 533,
	253, 477, 300, 254, 310, 533, 533, 533, 542, 36,
	-176, -168, 39, -176, -51, 47, 28, 28, -347, 47,
	23, -33, -347, -80, -201, -33, -358, -358, 528, 61,
	61, -7, -326, -7, -326, 61, -7, -7, -7, 450,
	70, -7, -7, -7, -358, -292, -7, -7, 542, -73,
	-73, -80, 542, -73, -73, 514, -51, -473, 61, -358,
	-75, -75, -80, -7, -7, 533, 542, 542, -7, -7,
	533, 533, -103, 485, -51, -40, 21, 41, -51, -51,
	-51, 533, -105, 371, -99, -103, -234, 88, 98, 111,
	533, 542, -7, 156, -227, 532, -51, -214, -12, 533,
	533, 542, -244, 23, 124, -53, -254, 70, -255, -256,
	-52, 40, -51, 167, -166, -169, -170, 30, -170, 106,
	31, -190, 116, 117, 150, 47, 155, 152, 153, 42,
	154, 149, -193, -198, -6, -191, -75, -338, -15, -359,
	-291, 228, 231, 234, 252, 299, 289, 309, 439, 440,
	21, -291, -38, 36, 169, -5, -283, 508, -309, 533,
	-277, -359, 514, 217, 58, 23, -197, -361, 542, 533,
	-92, 314, 267, -496, -4, -375, 465, 465, -500, 131,
	-505, -507, -502, 349, 503, -511, 64, 533, 533, 434,
	434, -462, -463, 479, 355, -432, -140, 533, -318, 83,
	-318, 533, -302, 338, 299, 532, -7, 533, 542, -7,
	423, 533, -359, -343, 247, -7, -140, -7, 532, -526,
	-435, 532, -448, 64, 533, -369, -450, 23, -450, -14,
	532, 532, 532, -294, -303, 304, -303, 393, -303, -287,
	-117, 62, -323, -14, -14, 533, 29, 29, 532, 23,
	-252, -336, -7, -7, -330, 360, 94, -330, 94, -7,
	61, -7, -326, 61, -458, -117, -371, -369, 532, -459,
	532, 532, 532, 533, -7, 533, -80, 356, -80, -104,
	-106, -5, -130, -133, -51, -136, -138, -137, -139, 532,
	239, 409, 294, -99, 70, 533, -235, 91, 90, 89,
	94, -215, -175, -140, -12, 533, -246, -243, 532, -248,
	-249, -5, -254, 70, -53, 133, 156, 542, 533, 23,
	-52, -261, 23, 149, 107, -51, 107, 106, -469, -469,
	-469, -469, 153, 31, 47, -75, 533, 542, -199, -205,
	-201, 537, 40, 532, -215, -38, 542, 533, -316, 74,
	-313, 506, 532, -294, -338, -308, -309, -277, 507, 514,
	514, -140, 533, -320, -486, -489, 541, -80, -508, 51,
	-527, 263, -507, -503, 67, 412, -292, -359, 36, 36,
	-432, 479, -512, -324, 308, -299, 355, -307, -304, -305,
	74, 79, 370, 430, -349, 532, -51, -460, 280, -345,
	-343, -7, -308, -277, 141, -343, -364, 533, -481, -434,
	7, -213, -450, 302, 206, -289, -286, -9, -97, -97,
	-354, 532, -354, -359, -354, 532, -124, -313, -176, -51,
	299, -29, 83, 450, 450, -7, -330, 94, -7, -520,
	131, -520, -521, -80, -521, -521, -51, 533, 533, 533,
	542, 23, 542, 533, 532, 532, 426, -110, 389, 128,
	295, -97, -13, 92, 92, -158, 533, -239, 533, 542,
	-80, 131, -254, -256, 542, -6, -265, 130, -5, -7,
	-172, -173, 110, 98, 99, -174, 110, 97, 70, -75,
	-75, -75, -75, -13, 537, 47, -13, 537, -198, -194,
	-200, -205, -316, -359, -317, 229, -311, -312, -5, -238,
	532, -38, -309, -338, -285, 507, 507, -512, -322, 304,
	532, -495, 274, 532, -501, 412, 438, -469, 131, 287,
	287, 23, 450, 310, -305, 74, -304, 74, 98, 99,
	-348, 533, 23, -14, -343, 423, -285, -7, 532, 533,
	542, 533, 542, -73, 533, 533, -318, -13, -318, -195,
	-318, -117, -125, -124, 533, -349, -51, -7, -7, 450,
	-346, 392, 88, 510, -346, 533, 542, 533, 533, 533,
	-106, -107, -133, -97, -97, 532, 533, -111, -112, 37,
	468, 121, -51, -111, -111, 94, 70, 70, -215, -219,
	23, 533, -249, -250, -251, 4, 40, 31, 47, 129,
	125, -53, 124, -263, -264, -262, 111, 94, 111, -167,
	103, 532, 40, 87, 108, 109, -13, 537, 533, 542,
	-317, 27, 99, 381, 533, 542, -168, -168, -51, -316,
	-338, -38, -309, -301, 532, -197, -526, -51, -510, -5,
	263, -369, -369, -140, -7, -306, 355, 35, 24, 94,
	-306, 533, 441, -453, -7, 423, -343, 533, 7, -286,
	61, -292, 533, -292, -302, -215, 533, -125, -330, -330,
	-7, 70, -369, -80, 533, 533, -130, -113, 271, -112,
	378, 284, 412, 378, 284, -113, -113, -5, -13, -13,
	-5, -251, -52, -52, 47, -52, -253, 532, 542, 23,
	-158, -177, -157, 87, 532, -200, 128, 128, -312, -323,
	-323, 533, -317, -38, -316, -338, -324, -321, -175, 533,
	-481, 533, 412, 542, 542, -512, 196, 47, 40, -343,
	-7, 532, -307, -292, -330, -14, 533, 121, 71, 456,
	355, 30, 61, 83, 94, 94, 124, -258, -259, -5,
	132, -264, -6, 156, 533, -97, -168, -316, -317, -38,
	-317, 533, 542, -322, 532, -508, 61, 64, -195, -195,
	-343, -97, -292, 412, 502, -112, -54, -5, -5, -5,
	-248, 533, 542, 131, -80, -274, 129, -167, -167, 103,
	533, -323, -317, -316, -215, -175, -301, -506, -509, -73,
	6, -75, -6, 274, 434, 434, 533, 40, 533, -266,
	-267, 40, -268, 137, 47, 49, 43, 50, 139, -259,
	125, -260, -272, 29, 129, 7, -177, -317, -324, 533,
	542, -526, 36, 36, -54, 533, 74, -51, 135, 140,
	-270, 169, 36, -260, -260, 7, 124, 23, 156, -317,
	-509, -481, 287, 287, 83, 137, -271, 146, 145, 141,
	135, 141, 135, 142, 143, -270, -266, 532, -7, -167,
	-215, 532, -369, -369, -5, -269, -267, 144, 144, 141,
	141, 135, 141, 135, 141, -271, -258, 124, -506, 74,
	74, 74, 141, 141, -269, 533, 532, 533, 139, 137,
	147, 147, -258, -267, 148, 148, 533, 74, 137,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 1321, -2, 0, 1564, -2, 1627, 1627, 0, 0,
	0, 1326, 1314, 1391, 0, 1422, 0, 1342, 0, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 1563, 0,
	0, 2543, 0, 63, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 65, 0,
	0, 0, 0, 1692, 1693, 0, 0, -2, 1865, 2520,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1626, 0, 0, 0, 0, 0, 2007, 0,
	2003, 2004, 2005, 0, 0, 2009, 2010, 2011, 0, 0,
	0, 1610, 0, 1613, 1614, 1615, 1616, 1617, 1618, 0,
	1988, 261, 372, 406, 1993, 2347, 0, 489, 145, 362,
	-2, 353, 439, 2362, 80, 81, 82, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 146, 147, 148, 149,
	150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
	210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
	220, 221, 222, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 257, 258, 259,
	260, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 280, 281,
	282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
	292, 293, 294, 295, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 323, 324, 325, 326, 327, 328, 329, 330, 331,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	352, 354, 355, 356, 357, 358, 359, 360, 361, 363,
	364, 365, 366, 367, 368, 369, 370, 371, 373, 374,
	375, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	385, 386, 387, 388, 389, 390, 391, 392, 393, 394,
	395, 396, 397, 398, 399, 400, 401, 402, 403, 404,
	405, 407, 408, 409, 410, 411, 412, 413, 414, 415,
	416, 417, 418, 419, 420, 421, 422, 423, 424, 425,
	426, 427, 428, 429, 430, 431, 432, 433, 434, 435,
	436, 437, 438, 440, 441, 442, 443, 444, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	457, 458, 459, 460, 461, 462, 463, 464, 465, 466,
	467, 468, 469, 470, 471, 472, 473, 474, 475, 476,
	477, 478, 479, 480, 481, 482, 483, 484, 485, 486,
	487, 488, 490, 491, 492, 493, 494, 495, 496, 497,
	498, 499, 500, 501, 502, 503, 504, 505, 2002, 1994,
	489, 406, 372, 1998, 1999, 145, 261, 279, 353, 362,
	439, 1313, 1336, 0, 1314, 1326, 1327, 0, 1327, 0,
	1344, 0, 1421, 1423, 1341, 1366, 1367, 95, 0, 372,
	406, 489, 0, 1388, 336, 1393, 98, 90, 1389, 0,
	2, 0, 0, 1371, 0, 0, 0, 1323, 2205, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 0, 0,
	1627, 2542, -2, 0, -2, 230, 1633, 112, 0, 149,
	211, 1311, 0, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
	1304, 1305, 1306, 1307, 1308, 1309, 1310, 2226, 0, 0,
	230, 1795, 230, 0, 0, 2292, 230, 0, 0, 0,
	2442, 0, 0, 98, 230, 64, 2407, 0, 0, 0,
	1694, 1695, 1696, 1697, 0, 230, 0, 0, 230, 0,
	0, 230, 0, 230, 0, 0, 0, 0, 0, 1182,
	0, -2, -2, 1248, 506, 507, 508, 509, 510, 511,
	512, 513, 514, 515, 516, 517, 518, 519, 520, 521,
	522, 523, 524, 525, 526, 527, 528, 0, 0, 0,
	0, 0, 0, 0, 1902, 1903, 1904, 1905, 1906, 2382,
	2383, 2384, 2385, 0, 0, 0, 0, 230, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 266,
	0, 0, 230, 0, 0, 0, 230, 68, 114, 230,
	68, 91, 0, 230, 68, 230, 1624, 1240, 1241, 1242,
	1243, 1244, 1245, 1254, 1257, 1258, 1259, 1260, 1261, 1292,
	192, 1254, 1254, 1254, 1267, 1268, 1269, 1270, 1271, 1288,
	1288, 1246, 1247, 1290, 1279, 1290, 1290, 1274, 0, 1290,
	68, 230, 0, 0, 2006, 0, 2008, 0, 1608, 1609,
	1612, 76, 1989, 372, 1990, 147, 0, 1991, 0, 2388,
	0, 0, 2394, 0, 0, 0, 0, 0, 0, 2350,
	1164, 2351, 2352, 2377, 2378, 2353, 2380, 2381, 0, 1995,
	0, 1997, 2607, 1336, 2604, 2605, 0, 0, 0, 0,
	1313, 1336, 1324, 1325, 1428, 1343, 1345, 1349, 1350, 1059,
	0, 0, 0, 0, 0, 0, 1764, 1126, 1143, 1144,
	1178, 0, 1147, 1148, 1149, 452, 0, 1154, 1155, 456,
	1293, 299, 485, 1168, 1157, 1158, 1159, 1160, 1161, 1162,
	1198, 1315, 1163, 0, 1428, 0, 1368, 96, 1170, 0,
	1173, 1369, 0, 0, 0, 1390, 0, 0, 0, 1238,
	0, 1528, 0, 1372, 0, 1550, 0, 0, 0, 0,
	0, 230, 2205, 0, 2241, 230, 63, 75, 0, 0,
	0, 0, 0, 0, 0, 0, 1698, 0, 2211, 0,
	0, 1632, 113, 0, 2224, 0, 2521, 0, 0, 2225,
	0, 0, 0, 0, 0, 2231, 0, 0, 2249, 1793,
	1794, 0, 0, 0, 230, 2296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2476, 0,
	0, 0, 0, 0, 1875, 1888, 1975, 1896, 0, 0,
	0, 1975, 1975, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1967, 0, 0, 0,
	1877, 1879, 0, 0, 0, 0, 1880, 0, 2244, 1773,
	0, 0, 0, 1777, 1792, 1780, 0, 0, 0, 0,
	1795, -2, 1790, 0, 1882, 1975, 0, 0, 230, 0,
	0, 230, 0, 0, 2023, 0, 1183, 0, 0, 0,
	0, 2215, 0, 0, 0, 0, 0, 2017, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2289, 2290, 0, 0, 0, 0, 0, 0,
	0, 2501, 2502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2256, 1627, 2271, 2272, 0, 0, 1977,
	66, 67, 0, 0, 1979, 0, 0, 0, 1982, 0,
	1255, 1254, 0, 1262, 0, 1263, 1264, 1265, 1266, 0,
	1283, 0, 0, 0, 1285, 1281, 1289, 0, 1272, 1273,
	1290, 1290, 1277, 1984, 0, 68, 230, 0, 0, 1611,
	2012, 2013, 2014, 2015, 0, 0, 0, 2354, 2355, 0,
	2390, 2357, 0, 2392, 2393, 2395, 2348, 2358, 2360, 2364,
	2366, 2367, 1598, 1599, 1600, 1601, 1602, 0, 0, 1605,
	1165, 2359, 2361, 2363, 2349, 2368, 2369, 2370, 2371, 2372,
	2373, 2374, 2375, 2376, 2356, 2386, 2387, 1996, 1330, 2606,
	1331, 1337, 2602, 2603, 2608, 2616, 2617, 0, 2626, 2627,
	2614, 0, 2618, -2, 0, 0, 2568, 2569, 1680, 2607,
	1336, 1352, 0, 0, 0, 661, 629, 1299, 1300, 1301,
	1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 0,
	622, 876, -2, 0, -2, 963, 794, 1097, 1099, -2,
	773, 0, 0, 1348, -2, 873, 1218, 88, 89, 607,
	608, 609, 610, 611, 612, 613, 614, 615, 616, 617,
	618, 619, 620, 621, 623, 624, 625, 626, 627, 628,
	630, 631, 632, 633, 634, 635, 636, 638, 639, 640,
	641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	662, 663, 664, 665, 666, 667, 668, 669, 670, 671,
	672, 673, 674, 675, 676, 677, 678, 679, 680, 681,
	682, 683, 684, 685, 686, 687, 688, 689, 690, 691,
	692, 693, 694, 695, 696, 697, 698, 699, 700, 701,
	702, 703, 704, 705, 706, 707, 708, 709, 710, 711,
	712, 713, 714, 715, 716, 717, 718, 719, 720, 721,
	722, 723, 724, 725, 726, 727, 728, 729, 730, 731,
	732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 769, 770, 771, 772,
	774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 790, 791, 792, 793,
	795, 796, 797, 798, 799, 800, 801, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 874, 875, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1064, 1065, 1079, 1082, 1083, 0, 0, 0, 1145, 1238,
	0, -2, 493, 1150, 1151, 1152, 1153, 0, 0, 0,
	0, -2, 0, 1197, 1316, 0, 1352, 0, 1171, 1174,
	1175, 1249, 83, 84, 85, 86, 87, 529, 530, 531,
	532, 533, 534, 535, 536, 537, 538, 539, 540, 541,
	542, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 554, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 588, 589, 590, 591,
	592, 593, 594, 595, 596, 597, 598, 599, 600, 601,
	602, 603, 604, 605, 606, 1172, 0, 0, 0, 1394,
	1398, 0, 0, 1405, 0, 0, 0, 0, 1220, 1222,
	0, 0, 1317, 0, 0, 1663, 1530, 0, 0, 0,
	0, 1352, 1541, 0, 0, 1178, 1373, 1411, 0, 0,
	1559, 1559, 1556, 1557, 0, 93, 1701, 0, 0, 0,
	1874, 0, 2238, 2240, 0, 0, 0, 230, 62, 2120,
	0, 2120, 0, 2161, 2162, 0, 0, 0, 2223, 0,
	0, 0, 0, 0, 2342, 2341, 2343, 2344, 2345, 2346,
	-2, 63, 1753, 0, 1251, 0, 2424, 2426, 0, 0,
	1312, 1442, 0, 0, 0, 0, 0, 0, 2233, 0,
	2246, 0, 2283, 1701, 0, 0, 0, 2295, 2291, 0,
	0, 2306, 2307, 0, 0, 230, 2205, 0, 0, 2441,
	2448, 0, 0, 0, 0, 2407, 2483, 0, 398, -2,
	2205, 2491, 0, 2406, 0, 0, 0, 0, 0, 0,
	0, 1974, 0, 0, 1907, 230, 0, 1931, 0, 0,
	1810, 0, 1764, 0, 0, -2, 0, 0, 0, 0,
	0, 0, 1939, 1940, 0, 0, 1960, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1953, 0, 0,
	1955, 1956, 0, 1961, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1774, 1778, 1783, 1784, 1775, 1776,
	0, 1791, 1781, 1782, 0, 0, 0, 0, 0, 0,
	0, 0, 1884, 1975, 0, 0, 1886, 1975, 0, 2283,
	0, 2016, 0, 0, 0, 0, 0, 1973, 0, 0,
	0, 0, 2218, 0, 2329, 0, 0, 0, 0, 0,
	0, 0, 0, 2459, 0, 0, 0, 2479, 2481, 2480,
	2482, 0, 0, 0, 2288, 2293, 2294, 0, 2495, 0,
	2496, 2407, 0, 0, 2503, 0, 0, 0, 2430, 2431,
	2434, 0, 0, 0, 0, 2443, 2444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 2254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1619, 1620, 1621, 1622, 1623, 2007, 68, 115, 68,
	92, 68, 0, 1625, 68, 1256, 0, 0, 0, 0,
	0, 0, 0, 0, 1275, 1276, 68, 1986, 0, 0,
	0, 2340, 0, 2389, 2391, 0, 0, 2399, 0, 1166,
	1603, 1167, 1604, 0, 0, 0, 2619, 0, 0, -2,
	-2, 0, 2615, 2624, 2625, 2620, -2, -2, 2621, 0,
	0, 1683, 1678, 1679, 1334, 1335, 1408, 0, 1427, 1346,
	1060, 1061, 0, 1063, 1066, 1067, 1068, 1069, 1070, 1071,
	-2, -2, -2, -2, -2, -2, 1078, 1080, 1081, -2,
	1221, 1223, 0, 1317, 0, -2, 0, 1096, 0, 1101,
	1103, 1105, 0, 1118, 1120, 0, 1237, 1224, 1225, 1226,
	1227, 1228, 0, 0, 1318, 1113, 1319, 0, 0, 1215,
	1216, 1217, 1347, 0, 1100, 0, 0, 1117, 1762, 0,
	1179, 1178, 0, 0, 0, 1206, 1207, 0, 0, 0,
	-2, 1203, 1199, 0, 2580, 1184, 0, 1314, 0, 0,
	0, 1191, 1193, 0, -2, 1408, 0, 1176, 1173, 1370,
	1406, 0, 1396, 0, 97, 1239, 1685, 0, 0, 1535,
	1536, 0, 1537, 1178, 1534, 1529, 1411, 0, 0, 0,
	1546, 1545, 1685, 0, 1549, 1353, 1414, 1414, 0, 1358,
	0, 1414, 1414, 1414, 1432, 358, 505, 470, 95, 1181,
	0, 0, 1558, 0, 0, 2204, 0, 1700, 1702, 1704,
	1705, 1706, 0, 1730, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2134, 2119, 2121, 0, 0, 0, 2126,
	2127, 0, 2142, 2143, 2144, 2145, 0, 0, 2150, 0,
	0, 0, 0, 2155, 0, 0, 2158, 0, 2099, 2100,
	2102, 0, 0, 2109, 2110, 2111, 2112, 2114, -2, 2116,
	0, 2134, 0, 0, 2164, 2166, 2167, 2168, 2170, 2163,
	0, 2222, 0, 0, 0, 0, 2312, 2316, 2314, 1246,
	0, 2540, 2205, 0, 2210, 0, 0, 0, -2, 2214,
	1252, 2423, 0, 0, 0, 2527, 0, 1441, 1443, 0,
	2325, 2237, 2227, 2228, 2229, 2230, 0, 2248, 0, 0,
	0, 2253, 1795, 1745, 2282, 2280, 0, 0, 0, 0,
	0, 0, 0, 2292, 0, 0, 0, 0, 1853, 0,
	1874, 2450, 0, 0, 2465, 2466, 0, 2471, 2473, 2474,
	0, 98, 2407, 2478, 0, 2205, 0, -2, 2493, 2493,
	0, 0, 0, 1897, 2044, 0, 0, 0, 76, 0,
	1909, 230, 1728, 0, 0, 0, 2079, 0, 0, 0,
	0, 0, 1629, 0, 2079, 230, 68, 230, 68, 1933,
	1936, 1938, 0, 1959, 0, 2088, 2091, 1937, 1941, 1944,
	1945, 0, 0, 0, 0, 1949, 0, 1946, 1947, 1948,
	1952, 0, 1954, 0, 1957, 1962, 2419, 2420, 2421, 0,
	0, 0, 2411, 2413, 373, 121, 193, 0, 1749, 1876,
	1889, 1975, 0, 2052, 1971, 1878, 0, 0, 2046, 1779,
	1785, 1786, 1787, 1789, 1881, 0, 2245, 2048, 0, 1883,
	1975, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	-2, 2024, 2025, 2026, 2027, 2028, 0, 2216, 68, 230,
	1972, 2217, 0, 0, 2079, 2221, 2031, 2032, 0, 0,
	0, 0, 2461, 0, 0, 2038, 2039, 2040, 2041, 2042,
	2043, 2407, 2497, 2407, 2407, 0, 0, 0, 2432, 2433,
	2069, 2070, 0, 2071, 2072, 2469, 1606, 1607, 0, 0,
	0, 0, 0, 0, 0, 2077, 0, 0, 0, 0,
	2323, 2255, 0, 2258, 2259, 2260, 0, 2262, 2263, 2264,
	149, 211, 0, 2267, 2268, 0, 2270, 1976, 1978, 1980,
	0, 1983, 1253, 1291, 1288, 1286, 1287, 1288, 0, 1278,
	1985, 68, 0, 0, 2334, 0, 1992, 2396, 2397, 2398,
	2365, 2609, 0, 2612, 0, 2622, 2623, 0, 0, 2570,
	1683, 1295, 0, 2572, 0, 2554, 0, 1351, 0, 0,
	-2, -2, 0, 0, 0, 1114, 0, -2, 1098, 1102,
	1104, 1106, 0, 1119, 1122, 0, 1237, 0, 1121, 1124,
	0, 0, 1229, 1230, 1231, 1232, 0, 1127, 0, 0,
	485, 0, 0, 1115, 0, 0, 0, 0, 1763, 1146,
	1239, 1204, 1205, 0, 1156, 1294, -2, 0, 1200, 0,
	0, 1180, 0, 1185, 0, 0, 1313, 1314, 1314, 1314,
	0, 0, 2554, 1424, 0, 1172, 0, 1397, 1527, 0,
	1666, 0, 0, 0, 1539, 1685, 1542, 1543, 0, 0,
	1548, 1409, 170, 0, 0, 0, 0, 0, 1385, 1385,
	1385, 1383, 1355, 1413, 0, 1418, 1356, 1414, 1414, 1414,
	1414, -2, 1358, 0, 1360, 1362, 1364, 1429, 0, 0,
	0, 0, -2, 0, 1795, 1560, 1561, 1562, -2, 94,
	1843, 0, 1710, 1845, 0, 1730, 0, 0, 1873, 0,
	2241, 1868, 0, 2120, 0, 0, 2115, 1254, 2096, 2132,
	0, 0, 2122, 2123, 2128, 2124, 2125, 0, 0, 0,
	2148, 2149, 2151, 2152, 2153, 2154, 2156, 2157, 372, 406,
	2098, 0, 0, 0, 0, 2108, 0, 2107, 2113, 1254,
	0, 2097, 0, 0, 0, 0, 2308, 2309, 0, 0,
	0, 2315, 0, 0, 0, 0, 1874, 0, 0, 2213,
	1752, 0, 1755, 1756, 0, 0, 1801, 1764, 0, 0,
	0, 0, 0, 1758, 0, 2425, 2427, 2400, 2401, 2402,
	2403, 2404, 2405, 299, 1299, 1300, 0, 2235, 0, 1447,
	0, 2324, 2326, 2232, 0, 2250, 2251, 2252, 2249, 2273,
	0, 2281, 2276, 2284, 2277, 2279, 2278, 1843, 1730, 0,
	0, 2296, 1745, 0, 2340, 0, 1874, 0, 0, 0,
	2440, 2457, 0, 2447, 0, 0, 0, 0, 0, 2477,
	2484, 2493, 0, 2493, 2488, 0, 2490, 2407, 0, 0,
	0, 0, 1968, 0, 1740, 1969, 1970, 0, 0, 1724,
	1727, 0, 1809, 1868, 0, 0, 1813, 0, 0, 2079,
	0, 0, 1867, 1911, 0, 0, 0, 0, 1924, 0,
	1930, 1767, -2, 0, 1932, 0, 1928, 0, 1935, 1958,
	2417, 2418, 2087, 0, 0, 0, 1942, 1950, 1943, 1951,
	1963, 1964, 0, 0, 1965, 2410, 0, 2414, 2415, 2416,
	1748, 1750, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2050, 0, 1885, 1975, 0, 2054,
	0, 1887, 1975, 0, 2274, 0, 2219, 0, 2328, 0,
	2331, 2033, 0, 0, 0, 0, 0, 2463, 0, 2458,
	1900, 0, 2500, 2498, 2499, 0, 0, 2068, 0, 0,
	0, 0, 0, 0, 0, 0, 2319, 0, 2257, 0,
	0, 0, 2018, 0, 0, 68, 1282, 1284, 1280, 1987,
	2304, 0, 2338, 0, 2610, 0, 2613, 0, 1213, 0,
	2571, 0, 1681, 1682, 2567, 0, 1407, 1062, -2, 0,
	0, -2, 0, 0, -2, 0, 0, 1123, 1125, -2,
	1234, 1236, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1129, 1130, 0, 1320,
	0, -2, 0, 1210, 0, -2, 1208, 1196, 1202, 0,
	2578, 2579, 2583, 1186, 0, 1192, 0, 0, 0, 0,
	1194, 1195, 2567, 1177, 0, 1684, 0, 0, 0, 1531,
	1532, 0, 1538, 1540, 0, 1547, 0, 1354, 0, 0,
	0, 0, 0, 1380, 1384, 1381, 1382, 1416, 0, 1357,
	1361, 1363, 1365, 1374, 1431, 0, 0, 500, 0, 1514,
	0, 1570, 1795, 0, 1630, 1845, 0, 1703, 1707, 1853,
	1844, 0, 0, 1731, 1733, 1734, 1753, 0, 1701, 0,
	0, 2209, 1874, 2239, 0, 0, 2134, 0, 0, 2137,
	2135, 0, 0, 0, 0, 2146, 2147, 2101, 2103, 2104,
	2105, 2106, 0, 0, 2172, 2165, 2169, 0, 0, 2313,
	0, 2317, 0, 2318, 0, 2545, 0, 0, 2342, 0,
	1757, 1759, 1800, 2407, 2407, 0, 1805, 2205, 0, 1765,
	0, 1760, 1761, 0, 1444, 1445, 0, 2236, 0, 2234,
	2247, 0, 2285, 0, 0, 1701, 0, 0, 0, 2301,
	0, 2332, 0, 1859, 1852, 0, 2189, 2190, 0, 2435,
	0, 2461, 0, 2449, 2451, 2452, 2453, 2454, 2455, 2464,
	2467, 2472, 2475, 0, 2485, 2486, 2487, 2489, 0, 2494,
	0, 0, 0, 2056, 2062, 0, 1908, 0, 1745, 1723,
	0, 1725, 1726, 2079, 0, 2080, 0, 2082, 0, 0,
	1862, 0, 1815, 0, 0, 1820, 0, 1677, 1677, 0,
	0, 1915, 1925, 1628, 1771, 0, 0, 0, 0, 1919,
	1921, 1922, 1920, 0, 1768, 0, 0, 0, 0, 68,
	68, 2089, 2090, 2093, 1966, 2422, 2412, 2045, 0, 0,
	0, 0, 2053, 0, 0, 2047, 2058, 2049, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2030, 2029, 68,
	2079, 0, 0, 2528, 2513, 0, 0, 0, 2529, 2530,
	0, 0, 2036, 2446, 0, 0, 0, 0, 2066, 2067,
	2303, 2470, 2073, 2074, 2075, 2076, 68, 2322, 0, 0,
	71, 0, 0, 0, 0, 0, 0, 1981, 0, 2339,
	2611, 1212, 1239, 0, 2574, 0, 2552, -2, -2, 0,
	0, 0, -2, -2, 1233, 1235, -2, 1128, 1131, 1132,
	1133, 1134, 1135, 1136, -2, -2, -2, -2, -2, -2,
	-2, 1116, 1209, 1239, 1201, 2585, 2582, 1314, 1187, 1189,
	1190, 2574, 1401, 0, 0, 1669, 0, 0, 1544, 1410,
	1412, 1375, 0, 1377, 0, 0, 0, 1379, 0, 0,
	1359, 0, 1433, 1437, 0, 0, 0, 0, 1473, 1513,
	0, 1685, 1552, 1652, 1652, 0, 1554, 1567, 0, 1570,
	0, 1853, 0, 0, 0, 79, 0, 1729, 0, 1735,
	0, 1845, 0, 1730, 0, 2200, 0, 0, 0, 0,
	2094, 0, 1438, 0, 1250, 0, -2, 2129, 0, 2130,
	2140, 2117, 0, 2182, 0, 2199, 0, 2310, 0, 0,
	0, 2547, 0, 0, 0, 2212, 1754, 0, 1861, 1861,
	0, 1829, 0, 1766, 0, 1446, 2327, 0, 1746, 0,
	0, 0, 0, 1745, 0, 0, 0, 2337, 0, 0,
	0, 0, 0, 2463, 2456, 0, 0, 0, 2509, 2509,
	0, 0, 0, 0, 1910, 1753, 1721, 1722, 1811, 1825,
	2081, 2085, 2083, 2084, 2086, 1825, 0, 1825, 0, 0,
	1671, 65, 0, 1672, 0, 1912, 0, 0, 1772, 1913,
	0, 1917, 0, 1447, 1770, 1918, 1927, 1934, 0, 0,
	0, 1899, 0, 1899, 0, 0, 2060, 2051, 0, 0,
	0, 2064, 2055, 0, 2220, 2330, 2034, 2035, 0, 0,
	0, 2519, 0, 0, 0, 0, 0, 1901, 0, 2078,
	2320, 2321, 0, 2265, 2266, 2019, 0, 0, 2269, 2305,
	1214, 1296, 1339, 0, 2566, 0, 2550, 2551, -2, -2,
	-2, 1211, 1314, 0, 0, 1340, 1404, 0, 0, 1662,
	1408, 0, 1665, 0, 1376, 0, 1387, 1378, 0, 1417,
	1432, 0, 1435, 0, 0, 1450, 0, 139, 0, 1454,
	0, 0, 1475, 1512, 1551, 1553, 0, 0, 0, 1647,
	0, 1569, 1571, 1572, 1633, 1633, 1575, 1576, 1633, 1633,
	0, 0, 0, 1586, 1594, 1408, 1565, 79, 0, 99,
	1708, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719,
	1720, 1709, 1857, 0, 0, 0, 1732, 1753, 1853, 1843,
	1845, 1730, 0, 0, 0, 0, 0, 1868, 0, 2120,
	1440, 2141, 2133, 0, 2138, 2139, 0, 2118, 2188, 2184,
	2171, 2173, 0, 2176, 2177, 2079, 0, 2311, 2535, 0,
	0, 2541, 2546, 0, 0, 2544, 2209, 1874, 1802, 0,
	1803, 1819, 1834, 0, 1799, 0, 2512, 1744, 0, 1745,
	0, 1843, 1730, 2286, 0, 1745, 2340, 1858, 0, 0,
	2436, 0, 2445, 0, 2492, 2509, 2506, 0, 2505, 2534,
	0, 0, 0, 1751, 2407, 0, 2407, 0, 2407, 1821,
	1822, 299, 1680, 64, 1676, 1677, 1916, 1926, 0, 0,
	2409, 2092, 2057, 2063, 1890, 1898, 0, 1892, 0, 2059,
	0, 1899, 0, 0, 2514, 2524, 2524, 2517, 0, 2531,
	0, 0, 0, 2460, 2037, 2261, 0, 0, 0, 2573,
	2575, 0, 2553, 2555, 2557, 2558, 2559, 2560, 2561, 0,
	169, 355, 456, 2589, 0, 1188, 1395, 0, 0, 0,
	0, 1664, 1670, 1533, 0, 1415, 1430, 1434, 0, 0,
	1460, 0, 1451, 0, 1452, 1448, 1449, 0, 0, 0,
	1457, 1477, 0, 0, 0, 1651, 0, 1649, 0, 0,
	0, 0, 0, 0, 0, 1585, 1568, 0, 1588, 1589,
	1590, 1591, 1592, 0, 1555, 1857, 0, 1842, 1859, 0,
	77, 78, 0, 1736, 79, 1845, 1853, 0, 2206, 0,
	0, 2209, 1870, 0, 1439, 2134, 2136, 2131, 0, 0,
	0, 2183, 2174, 1633, 2178, 2179, 0, 2198, 0, 0,
	2548, 2549, 2201, 0, 0, 1804, 0, 1806, 1830, 1831,
	0, 1826, 1827, 1828, 1807, 0, 0, 0, 0, 1747,
	2297, 1745, 0, 0, 0, 2302, 2333, 2428, 0, 0,
	2438, 2468, 2504, 2507, 2508, 0, 1742, 0, 0, 0,
	1861, 0, 1861, 2205, 1861, 0, 1683, 1680, 1673, 0,
	1799, 1929, 0, 0, 0, 2061, 1894, 0, 2065, 1797,
	0, 1797, 0, 2525, 0, 0, 0, 2020, 2022, 2021,
	0, 0, 0, 2562, 0, 0, 0, 0, 0, 0,
	0, 2584, 0, 0, 0, 1408, 1420, 0, 1458, 0,
	1462, 0, 1453, 1455, 0, 1456, 0, 0, 1474, 1511,
	1642, 1643, 0, 0, 1654, 1644, 0, 0, 0, 1573,
	1574, 1577, 1578, 1579, 1580, 0, 1583, 1584, 1587, 0,
	1595, 1597, 1859, 100, 1688, 0, 0, 1847, 1677, 1677,
	0, 1857, 1853, 79, 1845, 2207, 2208, 2202, 1764, 0,
	0, 2095, 0, 0, 2181, 2185, 2186, 0, 0, 0,
	0, 0, 0, 1818, 1832, 0, 1833, 0, 0, 0,
	0, 0, 0, 2511, 2299, 0, 0, 1745, 0, 2437,
	0, 1737, 0, 1741, 1738, 0, 2079, 0, 2079, 1829,
	1408, 0, 1674, 1683, 1914, 1923, 2408, 1899, 1899, 0,
	2515, 1796, 2522, 0, 2516, 0, 0, 2532, 2533, 2462,
	2576, 2577, 2556, 0, 0, 0, 2581, 2601, 2590, -2,
	414, 170, 0, 2601, 2601, 0, 0, 0, 1661, 1386,
	0, 1436, 1461, 1464, 1465, 0, 0, 0, 1470, 0,
	1463, 0, 0, 1476, 1478, 0, 1645, 0, 1646, 1655,
	0, 0, 0, 0, 1648, 1650, 1581, 1582, 1593, 0,
	1686, 1854, 0, 0, 1846, 0, 65, 65, 0, 1859,
	79, 1857, 1853, 1874, 0, 0, 0, 0, 2175, 2180,
	0, 2538, 2539, 2209, 1860, 1835, 0, 1838, 1839, 0,
	1836, 1798, 1808, 2510, 1745, 0, 2287, 2429, 2439, 1743,
	0, 1812, 1824, 1814, 1834, 2079, 1823, 1675, 1891, 1893,
	1899, 0, 2518, 2526, 2564, 2563, 0, 2586, 0, 0,
	2592, 2593, 2594, 2595, 2596, 2587, 2588, 0, 0, 0,
	1419, 1466, 1467, 1468, 1469, 1471, 0, 0, 0, 0,
	1653, 0, 0, 1659, 0, 1596, 1855, 1856, 1848, 1849,
	1850, 1677, 1690, 1857, 1859, 79, 1859, 0, 1871, 1870,
	0, 2187, 2188, 0, 0, 2203, 1837, 2205, 2205, 2298,
	1745, 0, 2079, 1817, 1895, 2523, 2565, 0, 2598, 2599,
	0, 0, 0, 0, 0, 0, 0, 0, 1517, 0,
	-2, 1479, 1480, 0, 0, 0, 65, 1859, 1689, 1857,
	1408, 1869, 0, 1764, 2193, 0, 0, 0, 1840, 1841,
	2300, 0, 1816, 2597, 2600, 2591, 0, 1403, 1399, 1400,
	0, 1496, 0, 0, 1526, 0, 1515, 1656, 1657, 0,
	1660, 1851, 1687, 1859, 1863, 1872, 1874, 0, 2191, 2194,
	2195, 2196, 2197, 0, 0, 0, 1739, 0, 1459, 0,
	0, 0, 1482, 1483, 1484, 1485, 1486, 1487, 1490, 1518,
	1519, 1505, 1526, 1526, 0, 0, 0, 1691, 1859, 2159,
	0, 0, 0, 0, 0, 1472, 0, 1481, 1488, 1489,
	1510, 0, 0, 1505, 1496, 1525, 0, 0, 0, 1408,
	2192, 0, 0, 0, 0, 1495, 1494, 0, 0, 1497,
	0, 1499, 0, 0, 0, 1510, 1522, 0, 0, 1658,
	1864, 2193, 2536, 2537, 1402, 1520, 0, 1507, 1509, 1498,
	1500, 0, 1503, 0, 1504, 1494, 0, 0, 0, 0,
	0, 0, 1501, 1502, 1521, 1523, 0, 2160, 1491, 1492,
	0, 0, 0, 0, 1506, 1508, 1524, 0, 1493,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 539, 3, 3,
	532, 533, 537, 535, 542, 536, 534, 538, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 543, 541,
	526, 528, 527, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 530, 3, 531, 540,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 525, 57868, 529, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:518
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:533
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:541
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:556
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:567
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:568
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:569
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:570
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:571
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:572
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:573
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:574
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:575
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:576
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:577
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:578
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:579
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:580
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:581
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:582
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:583
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:584
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:585
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:586
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:587
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:588
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:589
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:590
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:591
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:592
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:593
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:594
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:595
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:596
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:597
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:598
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:599
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:600
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:601
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:602
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:603
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:604
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:605
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:606
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:607
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:608
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:609
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:610
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:611
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:612
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:613
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:614
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:615
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:616
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:617
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:618
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:619
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:620
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:621
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:622
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:624
		{
			yyVAL.stmt = nil
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:635
		{
			yyVAL.str = yyDollar[1].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:636
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:640
		{
			yyVAL.list = yyDollar[1].list
		}
	case 65:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:641
		{
			yyVAL.list = nil
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:645
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:646
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:647
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:651
		{
			yyVAL.ival = 1
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:652
		{
			yyVAL.ival = 0
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:656
		{
			yyVAL.ival = 1
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:657
		{
			yyVAL.ival = 0
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:661
		{
			yyVAL.bval = true
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:662
		{
			yyVAL.bval = false
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:666
		{
			yyVAL.bval = true
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:667
		{
			yyVAL.bval = false
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:671
		{
			yyVAL.list = yyDollar[2].list
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:672
		{
			yyVAL.list = nil
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:673
		{
			yyVAL.list = nil
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:682
		{
			yyVAL.str = yyDollar[1].str
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:683
		{
			yyVAL.str = yyDollar[1].str
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:684
		{
			yyVAL.str = yyDollar[1].str
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:688
		{
			yyVAL.str = yyDollar[1].str
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:689
		{
			yyVAL.str = yyDollar[1].str
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:690
		{
			yyVAL.str = yyDollar[1].str
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:691
		{
			yyVAL.str = yyDollar[1].str
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:692
		{
			yyVAL.str = yyDollar[1].str
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:695
		{
			yyVAL.str = yyDollar[1].str
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:696
		{
			yyVAL.str = yyDollar[1].str
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:699
		{
			yyVAL.str = yyDollar[1].str
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:704
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:708
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:717
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:721
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:729
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:736
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:765
		{
			yyVAL.list = yyDollar[2].list
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:766
		{
			yyVAL.list = nil
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:771
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:775
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:788
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:794
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:800
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:806
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:812
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:819
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:826
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:832
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:838
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:847
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:851
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:863
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:867
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:877
		{
			yyVAL.str = "abort"
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:878
		{
			yyVAL.str = "absent"
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:879
		{
			yyVAL.str = "absolute"
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:880
		{
			yyVAL.str = "access"
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:881
		{
			yyVAL.str = "action"
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:882
		{
			yyVAL.str = "add"
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:883
		{
			yyVAL.str = "admin"
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:884
		{
			yyVAL.str = "after"
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:885
		{
			yyVAL.str = "aggregate"
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:886
		{
			yyVAL.str = "also"
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:887
		{
			yyVAL.str = "alter"
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:888
		{
			yyVAL.str = "always"
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:889
		{
			yyVAL.str = "asensitive"
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:890
		{
			yyVAL.str = "assertion"
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:891
		{
			yyVAL.str = "assignment"
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:892
		{
			yyVAL.str = "at"
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:893
		{
			yyVAL.str = "atomic"
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:894
		{
			yyVAL.str = "attach"
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:895
		{
			yyVAL.str = "attribute"
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:896
		{
			yyVAL.str = "backward"
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:897
		{
			yyVAL.str = "before"
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:898
		{
			yyVAL.str = "begin"
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:899
		{
			yyVAL.str = "breadth"
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:900
		{
			yyVAL.str = "by"
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:901
		{
			yyVAL.str = "cache"
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:902
		{
			yyVAL.str = "call"
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:903
		{
			yyVAL.str = "called"
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:904
		{
			yyVAL.str = "cascade"
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:905
		{
			yyVAL.str = "cascaded"
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:906
		{
			yyVAL.str = "catalog"
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:907
		{
			yyVAL.str = "chain"
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:908
		{
			yyVAL.str = "characteristics"
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:909
		{
			yyVAL.str = "checkpoint"
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:910
		{
			yyVAL.str = "class"
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:911
		{
			yyVAL.str = "close"
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:912
		{
			yyVAL.str = "cluster"
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:913
		{
			yyVAL.str = "columns"
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:914
		{
			yyVAL.str = "comment"
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:915
		{
			yyVAL.str = "comments"
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:916
		{
			yyVAL.str = "commit"
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:917
		{
			yyVAL.str = "committed"
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:918
		{
			yyVAL.str = "compression"
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:919
		{
			yyVAL.str = "conditional"
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:920
		{
			yyVAL.str = "configuration"
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:921
		{
			yyVAL.str = "conflict"
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:922
		{
			yyVAL.str = "connection"
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:923
		{
			yyVAL.str = "constraints"
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:924
		{
			yyVAL.str = "content"
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:925
		{
			yyVAL.str = "continue"
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:926
		{
			yyVAL.str = "conversion"
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:927
		{
			yyVAL.str = "copy"
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:928
		{
			yyVAL.str = "cost"
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:929
		{
			yyVAL.str = "csv"
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:930
		{
			yyVAL.str = "cube"
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:931
		{
			yyVAL.str = "current"
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:932
		{
			yyVAL.str = "cursor"
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:933
		{
			yyVAL.str = "cycle"
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:934
		{
			yyVAL.str = "data"
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:935
		{
			yyVAL.str = "database"
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:936
		{
			yyVAL.str = "day"
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:937
		{
			yyVAL.str = "deallocate"
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:938
		{
			yyVAL.str = "declare"
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:939
		{
			yyVAL.str = "defaults"
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:940
		{
			yyVAL.str = "deferred"
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:941
		{
			yyVAL.str = "definer"
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:942
		{
			yyVAL.str = "delete"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:943
		{
			yyVAL.str = "delimiter"
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:944
		{
			yyVAL.str = "delimiters"
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:945
		{
			yyVAL.str = "depends"
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:946
		{
			yyVAL.str = "depth"
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:947
		{
			yyVAL.str = "detach"
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:948
		{
			yyVAL.str = "dictionary"
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:949
		{
			yyVAL.str = "disable"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:950
		{
			yyVAL.str = "discard"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:951
		{
			yyVAL.str = "document"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:952
		{
			yyVAL.str = "domain"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:953
		{
			yyVAL.str = "double"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:954
		{
			yyVAL.str = "drop"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:955
		{
			yyVAL.str = "each"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:956
		{
			yyVAL.str = "empty"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:957
		{
			yyVAL.str = "enable"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:958
		{
			yyVAL.str = "encoding"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:959
		{
			yyVAL.str = "encrypted"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:960
		{
			yyVAL.str = "enum"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:961
		{
			yyVAL.str = "error"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:962
		{
			yyVAL.str = "escape"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:963
		{
			yyVAL.str = "event"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:964
		{
			yyVAL.str = "exclude"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:965
		{
			yyVAL.str = "excluding"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:966
		{
			yyVAL.str = "exclusive"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:967
		{
			yyVAL.str = "execute"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:968
		{
			yyVAL.str = "explain"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:969
		{
			yyVAL.str = "expression"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:970
		{
			yyVAL.str = "extension"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:971
		{
			yyVAL.str = "external"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:972
		{
			yyVAL.str = "family"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:973
		{
			yyVAL.str = "filter"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:974
		{
			yyVAL.str = "finalize"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:975
		{
			yyVAL.str = "first"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:976
		{
			yyVAL.str = "following"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:977
		{
			yyVAL.str = "force"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:978
		{
			yyVAL.str = "format"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:979
		{
			yyVAL.str = "forward"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:980
		{
			yyVAL.str = "function"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:981
		{
			yyVAL.str = "functions"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:982
		{
			yyVAL.str = "generated"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:983
		{
			yyVAL.str = "global"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:984
		{
			yyVAL.str = "granted"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:985
		{
			yyVAL.str = "groups"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:986
		{
			yyVAL.str = "handler"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:987
		{
			yyVAL.str = "header"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:988
		{
			yyVAL.str = "hold"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:989
		{
			yyVAL.str = "hour"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:990
		{
			yyVAL.str = "identity"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:991
		{
			yyVAL.str = "if"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:992
		{
			yyVAL.str = "immediate"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:993
		{
			yyVAL.str = "immutable"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:994
		{
			yyVAL.str = "implicit"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:995
		{
			yyVAL.str = "import"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:996
		{
			yyVAL.str = "include"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:997
		{
			yyVAL.str = "including"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:998
		{
			yyVAL.str = "increment"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:999
		{
			yyVAL.str = "indent"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1000
		{
			yyVAL.str = "index"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1001
		{
			yyVAL.str = "indexes"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1002
		{
			yyVAL.str = "inherit"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1003
		{
			yyVAL.str = "inherits"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1004
		{
			yyVAL.str = "inline"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1005
		{
			yyVAL.str = "input"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1006
		{
			yyVAL.str = "insensitive"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1007
		{
			yyVAL.str = "insert"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1008
		{
			yyVAL.str = "instead"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1009
		{
			yyVAL.str = "invoker"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1010
		{
			yyVAL.str = "isolation"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1011
		{
			yyVAL.str = "keep"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1012
		{
			yyVAL.str = "key"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1013
		{
			yyVAL.str = "keys"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1014
		{
			yyVAL.str = "label"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1015
		{
			yyVAL.str = "language"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1016
		{
			yyVAL.str = "large"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1017
		{
			yyVAL.str = "last"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1018
		{
			yyVAL.str = "leakproof"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1019
		{
			yyVAL.str = "level"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1020
		{
			yyVAL.str = "listen"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1021
		{
			yyVAL.str = "load"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1022
		{
			yyVAL.str = "local"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1023
		{
			yyVAL.str = "location"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1024
		{
			yyVAL.str = "lock"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1025
		{
			yyVAL.str = "locked"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1026
		{
			yyVAL.str = "logged"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1027
		{
			yyVAL.str = "mapping"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1028
		{
			yyVAL.str = "match"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1029
		{
			yyVAL.str = "matched"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1030
		{
			yyVAL.str = "materialized"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1031
		{
			yyVAL.str = "maxvalue"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1032
		{
			yyVAL.str = "merge"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1033
		{
			yyVAL.str = "method"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1034
		{
			yyVAL.str = "minute"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1035
		{
			yyVAL.str = "minvalue"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1036
		{
			yyVAL.str = "mode"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1037
		{
			yyVAL.str = "month"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1038
		{
			yyVAL.str = "move"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1039
		{
			yyVAL.str = "name"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1040
		{
			yyVAL.str = "names"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1041
		{
			yyVAL.str = "nested"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1042
		{
			yyVAL.str = "new"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1043
		{
			yyVAL.str = "next"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1044
		{
			yyVAL.str = "nfc"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1045
		{
			yyVAL.str = "nfd"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1046
		{
			yyVAL.str = "nfkc"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1047
		{
			yyVAL.str = "nfkd"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1048
		{
			yyVAL.str = "no"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.str = "normalized"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.str = "nothing"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.str = "notify"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1052
		{
			yyVAL.str = "nowait"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "nulls"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "object"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "of"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "off"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "oids"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "old"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "omit"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "operator"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "option"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "options"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "ordinality"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "others"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "over"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "overriding"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "owned"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "owner"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "parallel"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "parameter"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "parser"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "partial"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "partition"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "passing"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "password"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "path"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "plan"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "plans"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "policy"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "preceding"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "prepare"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "prepared"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "preserve"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "prior"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "privileges"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "procedural"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "procedure"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "procedures"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "program"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "publication"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "quote"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "quotes"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "range"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "read"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "reassign"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "recheck"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "recursive"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "ref"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "referencing"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "refresh"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "reindex"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "relative"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "release"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "rename"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "repeatable"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "replace"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "replica"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "reset"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "restart"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "restrict"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "return"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "returns"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "revoke"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "role"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "rollback"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "rollup"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "routine"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "routines"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "rows"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "rule"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "savepoint"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "scalar"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "schema"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "schemas"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "scroll"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "search"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "second"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "security"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "sequence"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "sequences"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "serializable"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "server"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "session"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "set"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "sets"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "share"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "show"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "simple"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "skip"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "snapshot"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "source"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "sql"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "stable"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "standalone"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "start"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "statement"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "statistics"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "stdin"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "stdout"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "storage"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "stored"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "strict"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "string"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "strip"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "subscription"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "support"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "sysid"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "system"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "tables"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "tablespace"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "target"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "temp"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "template"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "temporary"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "text"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "ties"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "transaction"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.str = "transform"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1169
		{
			yyVAL.str = "trigger"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.str = "truncate"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "trusted"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "type"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "types"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.str = "uescape"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.str = "unbounded"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			yyVAL.str = "uncommitted"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1177
		{
			yyVAL.str = "unconditional"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = "unencrypted"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = "unknown"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "unlisten"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "unlogged"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "until"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "update"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "vacuum"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "valid"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "validate"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "validator"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "value"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "varying"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "version"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "view"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "views"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "volatile"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1194
		{
			yyVAL.str = "whitespace"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "within"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "without"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "work"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.str = "wrapper"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.str = "write"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.str = "xml"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.str = "year"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "yes"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "zone"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1217
		{
			yyVAL.str = "between"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.str = "bigint"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.str = "bit"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "boolean"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "char"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "character"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "coalesce"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "dec"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "decimal"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "exists"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "extract"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "float"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "greatest"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "grouping"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "inout"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "int"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "integer"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "interval"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.str = "json"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1236
		{
			yyVAL.str = "json_array"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.str = "json_arrayagg"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1238
		{
			yyVAL.str = "json_exists"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1239
		{
			yyVAL.str = "json_object"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1240
		{
			yyVAL.str = "json_objectagg"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.str = "json_query"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1242
		{
			yyVAL.str = "json_scalar"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1243
		{
			yyVAL.str = "json_serialize"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1244
		{
			yyVAL.str = "json_table"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.str = "json_value"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1246
		{
			yyVAL.str = "least"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1247
		{
			yyVAL.str = "merge_action"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1248
		{
			yyVAL.str = "national"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1249
		{
			yyVAL.str = "nchar"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1250
		{
			yyVAL.str = "none"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1251
		{
			yyVAL.str = "normalize"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1252
		{
			yyVAL.str = "nullif"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.str = "numeric"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1254
		{
			yyVAL.str = "out"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1255
		{
			yyVAL.str = "overlay"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1256
		{
			yyVAL.str = "position"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "precision"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.str = "real"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.str = "row"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "setof"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "smallint"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "substring"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "time"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "timestamp"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "treat"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "trim"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "values"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "varchar"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.str = "xmlattributes"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1270
		{
			yyVAL.str = "xmlconcat"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "xmlelement"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "xmlexists"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "xmlforest"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "xmlparse"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "xmlpi"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "xmlroot"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "xmlserialize"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.str = "xmltable"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1293
		{
			yyVAL.str = "authorization"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1294
		{
			yyVAL.str = "binary"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1295
		{
			yyVAL.str = "collation"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1296
		{
			yyVAL.str = "concurrently"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1297
		{
			yyVAL.str = "cross"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1298
		{
			yyVAL.str = "current_schema"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1299
		{
			yyVAL.str = "freeze"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1300
		{
			yyVAL.str = "full"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.str = "ilike"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.str = "inner"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "is"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "isnull"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "join"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "left"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "like"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "natural"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "notnull"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "outer"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.str = "overlaps"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1312
		{
			yyVAL.str = "right"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			yyVAL.str = "similar"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1314
		{
			yyVAL.str = "tablesample"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.str = "verbose"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1325
		{
			yyVAL.str = "all"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1326
		{
			yyVAL.str = "analyse"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1327
		{
			yyVAL.str = "analyze"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1328
		{
			yyVAL.str = "and"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1329
		{
			yyVAL.str = "any"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1330
		{
			yyVAL.str = "array"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1331
		{
			yyVAL.str = "as"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1332
		{
			yyVAL.str = "asc"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1333
		{
			yyVAL.str = "asymmetric"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1334
		{
			yyVAL.str = "both"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1335
		{
			yyVAL.str = "case"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = "cast"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "check"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "collate"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "column"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "constraint"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "create"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "current_catalog"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "current_date"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "current_role"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1345
		{
			yyVAL.str = "current_time"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1346
		{
			yyVAL.str = "current_timestamp"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1347
		{
			yyVAL.str = "current_user"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1348
		{
			yyVAL.str = "default"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1349
		{
			yyVAL.str = "deferrable"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1350
		{
			yyVAL.str = "desc"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1351
		{
			yyVAL.str = "distinct"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1352
		{
			yyVAL.str = "do"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1353
		{
			yyVAL.str = "else"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1354
		{
			yyVAL.str = "end"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1355
		{
			yyVAL.str = "except"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1356
		{
			yyVAL.str = "false"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1357
		{
			yyVAL.str = "fetch"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "for"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "foreign"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "from"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1361
		{
			yyVAL.str = "grant"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1362
		{
			yyVAL.str = "group"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.str = "having"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1364
		{
			yyVAL.str = "in"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1365
		{
			yyVAL.str = "initially"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1366
		{
			yyVAL.str = "intersect"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1367
		{
			yyVAL.str = "into"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1368
		{
			yyVAL.str = "lateral"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1369
		{
			yyVAL.str = "leading"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1370
		{
			yyVAL.str = "limit"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.str = "localtime"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1372
		{
			yyVAL.str = "localtimestamp"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1373
		{
			yyVAL.str = "not"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1374
		{
			yyVAL.str = "null"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1375
		{
			yyVAL.str = "offset"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1376
		{
			yyVAL.str = "on"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1377
		{
			yyVAL.str = "only"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.str = "or"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1379
		{
			yyVAL.str = "order"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1380
		{
			yyVAL.str = "placing"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1381
		{
			yyVAL.str = "primary"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1382
		{
			yyVAL.str = "references"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1383
		{
			yyVAL.str = "returning"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1384
		{
			yyVAL.str = "select"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1385
		{
			yyVAL.str = "session_user"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1386
		{
			yyVAL.str = "some"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1387
		{
			yyVAL.str = "symmetric"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1388
		{
			yyVAL.str = "system_user"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1389
		{
			yyVAL.str = "table"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1390
		{
			yyVAL.str = "then"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1391
		{
			yyVAL.str = "to"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1392
		{
			yyVAL.str = "trailing"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "true"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.str = "union"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.str = "unique"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1396
		{
			yyVAL.str = "user"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.str = "using"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.str = "variadic"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1399
		{
			yyVAL.str = "when"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1400
		{
			yyVAL.str = "where"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1401
		{
			yyVAL.str = "window"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.str = "with"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1415
		{
			yyVAL.str = "abort"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.str = "absent"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1417
		{
			yyVAL.str = "absolute"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "access"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1419
		{
			yyVAL.str = "action"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "add"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "admin"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "after"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "aggregate"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "all"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "also"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "alter"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "always"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "analyse"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "analyze"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "and"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "any"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "asc"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "asensitive"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "assertion"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "assignment"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = "asymmetric"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1437
		{
			yyVAL.str = "at"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1438
		{
			yyVAL.str = "atomic"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1439
		{
			yyVAL.str = "attach"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1440
		{
			yyVAL.str = "attribute"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1441
		{
			yyVAL.str = "authorization"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1442
		{
			yyVAL.str = "backward"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1443
		{
			yyVAL.str = "before"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1444
		{
			yyVAL.str = "begin"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1445
		{
			yyVAL.str = "between"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1446
		{
			yyVAL.str = "bigint"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1447
		{
			yyVAL.str = "binary"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1448
		{
			yyVAL.str = "bit"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1449
		{
			yyVAL.str = "boolean"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "both"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "breadth"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "by"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "cache"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "call"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1455
		{
			yyVAL.str = "called"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1456
		{
			yyVAL.str = "cascade"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1457
		{
			yyVAL.str = "cascaded"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.str = "case"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1459
		{
			yyVAL.str = "cast"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1460
		{
			yyVAL.str = "catalog"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1461
		{
			yyVAL.str = "chain"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1462
		{
			yyVAL.str = "characteristics"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.str = "check"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = "checkpoint"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1465
		{
			yyVAL.str = "class"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1466
		{
			yyVAL.str = "close"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.str = "cluster"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1468
		{
			yyVAL.str = "coalesce"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "collate"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1470
		{
			yyVAL.str = "collation"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.str = "column"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1472
		{
			yyVAL.str = "columns"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.str = "comment"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.str = "comments"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1475
		{
			yyVAL.str = "commit"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1476
		{
			yyVAL.str = "committed"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.str = "compression"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "concurrently"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1479
		{
			yyVAL.str = "conditional"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.str = "configuration"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1481
		{
			yyVAL.str = "conflict"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "connection"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "constraint"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "constraints"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "content"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "continue"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.str = "conversion"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1488
		{
			yyVAL.str = "copy"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = "cost"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = "cross"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.str = "csv"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1492
		{
			yyVAL.str = "cube"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			yyVAL.str = "current"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "current_catalog"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "current_date"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "current_role"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.str = "current_schema"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1498
		{
			yyVAL.str = "current_time"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1499
		{
			yyVAL.str = "current_timestamp"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = "current_user"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "cursor"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "cycle"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "data"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "database"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "deallocate"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "dec"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "decimal"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "declare"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "default"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "defaults"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "deferrable"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "deferred"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "definer"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "delete"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "delimiter"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "delimiters"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "depends"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "depth"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "desc"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "detach"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "dictionary"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "disable"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "discard"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "distinct"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "do"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "document"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "domain"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "double"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "drop"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "each"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "else"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "empty"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "enable"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "encoding"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "encrypted"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "end"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "enum"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "error"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "escape"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "event"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "exclude"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "excluding"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "exclusive"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "execute"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "exists"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "explain"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "expression"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "extension"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "external"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "extract"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "false"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "family"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "finalize"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "first"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "float"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "following"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "force"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "foreign"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "format"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "forward"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "freeze"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "full"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "function"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "functions"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "generated"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "global"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "granted"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "greatest"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "grouping"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "groups"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "handler"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "header"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "hold"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "identity"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "if"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "ilike"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "immediate"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1578
		{
			yyVAL.str = "immutable"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1579
		{
			yyVAL.str = "implicit"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1580
		{
			yyVAL.str = "import"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1581
		{
			yyVAL.str = "in"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1582
		{
			yyVAL.str = "include"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1583
		{
			yyVAL.str = "including"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1584
		{
			yyVAL.str = "increment"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1585
		{
			yyVAL.str = "indent"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1586
		{
			yyVAL.str = "index"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1587
		{
			yyVAL.str = "indexes"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1588
		{
			yyVAL.str = "inherit"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1589
		{
			yyVAL.str = "inherits"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1590
		{
			yyVAL.str = "initially"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "inline"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "inner"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			yyVAL.str = "inout"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1594
		{
			yyVAL.str = "input"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.str = "insensitive"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "insert"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "instead"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "int"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "integer"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "interval"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "invoker"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "is"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "isolation"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "join"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "json"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "json_array"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "json_arrayagg"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "json_exists"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "json_object"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "json_objectagg"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "json_query"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "json_scalar"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "json_serialize"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "json_table"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "json_value"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "keep"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "key"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "keys"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "label"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "language"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "large"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "last"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "lateral"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "leading"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "leakproof"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "least"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "left"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "level"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "like"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "listen"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "load"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "local"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "localtime"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "localtimestamp"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "location"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "lock"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "locked"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "logged"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "mapping"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "match"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "matched"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "materialized"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "maxvalue"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "merge"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "merge_action"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "method"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "minvalue"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "mode"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "move"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "name"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "names"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "national"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "natural"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "nchar"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "nested"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "new"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "next"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "nfc"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "nfd"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "nfkc"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "nfkd"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "no"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "none"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "normalize"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "normalized"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "not"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "nothing"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "notify"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "nowait"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "null"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "nullif"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "nulls"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "numeric"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "object"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "of"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "off"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "oids"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "old"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "omit"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "only"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "operator"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "option"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "options"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "or"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "ordinality"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "others"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "out"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "outer"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "overlay"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "overriding"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "owned"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "owner"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "parallel"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "parameter"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "parser"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "partial"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "partition"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "passing"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "password"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "path"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "placing"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "plan"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "plans"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "policy"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "position"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "preceding"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "prepare"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "prepared"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "preserve"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "primary"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "prior"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "privileges"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "procedural"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "procedure"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "procedures"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "program"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "publication"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "quote"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "quotes"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "range"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "read"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "real"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "reassign"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "recheck"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "recursive"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "ref"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "references"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "referencing"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "refresh"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "reindex"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "relative"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "release"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "rename"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "repeatable"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "replace"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "replica"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "reset"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "restart"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "restrict"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "return"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "returns"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "revoke"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "right"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "role"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "rollback"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "rollup"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "routine"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "routines"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "row"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "rows"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "rule"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "savepoint"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "scalar"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "schema"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.str = "schemas"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1756
		{
			yyVAL.str = "scroll"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1757
		{
			yyVAL.str = "search"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1758
		{
			yyVAL.str = "security"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.str = "select"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.str = "sequence"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1761
		{
			yyVAL.str = "sequences"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1762
		{
			yyVAL.str = "serializable"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.str = "server"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1764
		{
			yyVAL.str = "session"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1765
		{
			yyVAL.str = "session_user"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1766
		{
			yyVAL.str = "set"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1767
		{
			yyVAL.str = "setof"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1768
		{
			yyVAL.str = "sets"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.str = "share"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1770
		{
			yyVAL.str = "show"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.str = "similar"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1772
		{
			yyVAL.str = "simple"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1773
		{
			yyVAL.str = "skip"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1774
		{
			yyVAL.str = "smallint"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			yyVAL.str = "snapshot"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1776
		{
			yyVAL.str = "some"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1777
		{
			yyVAL.str = "source"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1778
		{
			yyVAL.str = "sql"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1779
		{
			yyVAL.str = "stable"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1780
		{
			yyVAL.str = "standalone"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.str = "start"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1782
		{
			yyVAL.str = "statement"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1783
		{
			yyVAL.str = "statistics"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1784
		{
			yyVAL.str = "stdin"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1785
		{
			yyVAL.str = "stdout"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1786
		{
			yyVAL.str = "storage"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1787
		{
			yyVAL.str = "stored"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1788
		{
			yyVAL.str = "strict"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1789
		{
			yyVAL.str = "string"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1790
		{
			yyVAL.str = "strip"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1791
		{
			yyVAL.str = "subscription"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1792
		{
			yyVAL.str = "substring"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1793
		{
			yyVAL.str = "support"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1794
		{
			yyVAL.str = "symmetric"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1795
		{
			yyVAL.str = "sysid"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1796
		{
			yyVAL.str = "system"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1797
		{
			yyVAL.str = "system_user"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1798
		{
			yyVAL.str = "table"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1799
		{
			yyVAL.str = "tables"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1800
		{
			yyVAL.str = "tablesample"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1801
		{
			yyVAL.str = "tablespace"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1802
		{
			yyVAL.str = "target"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1803
		{
			yyVAL.str = "temp"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1804
		{
			yyVAL.str = "template"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1805
		{
			yyVAL.str = "temporary"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1806
		{
			yyVAL.str = "text"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1807
		{
			yyVAL.str = "then"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1808
		{
			yyVAL.str = "ties"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1809
		{
			yyVAL.str = "time"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1810
		{
			yyVAL.str = "timestamp"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1811
		{
			yyVAL.str = "trailing"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1812
		{
			yyVAL.str = "transaction"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1813
		{
			yyVAL.str = "transform"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1814
		{
			yyVAL.str = "treat"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1815
		{
			yyVAL.str = "trigger"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1816
		{
			yyVAL.str = "trim"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1817
		{
			yyVAL.str = "true"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1818
		{
			yyVAL.str = "truncate"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1819
		{
			yyVAL.str = "trusted"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1820
		{
			yyVAL.str = "type"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1821
		{
			yyVAL.str = "types"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1822
		{
			yyVAL.str = "uescape"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1823
		{
			yyVAL.str = "unbounded"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1824
		{
			yyVAL.str = "uncommitted"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1825
		{
			yyVAL.str = "unconditional"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1826
		{
			yyVAL.str = "unencrypted"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1827
		{
			yyVAL.str = "unique"
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1828
		{
			yyVAL.str = "unknown"
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1829
		{
			yyVAL.str = "unlisten"
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1830
		{
			yyVAL.str = "unlogged"
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1831
		{
			yyVAL.str = "until"
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1832
		{
			yyVAL.str = "update"
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1833
		{
			yyVAL.str = "user"
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1834
		{
			yyVAL.str = "using"
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1835
		{
			yyVAL.str = "vacuum"
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1836
		{
			yyVAL.str = "valid"
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1837
		{
			yyVAL.str = "validate"
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1838
		{
			yyVAL.str = "validator"
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1839
		{
			yyVAL.str = "value"
		}
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1840
		{
			yyVAL.str = "values"
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1841
		{
			yyVAL.str = "varchar"
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1842
		{
			yyVAL.str = "variadic"
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1843
		{
			yyVAL.str = "verbose"
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1844
		{
			yyVAL.str = "version"
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1845
		{
			yyVAL.str = "view"
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1846
		{
			yyVAL.str = "views"
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1847
		{
			yyVAL.str = "volatile"
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1848
		{
			yyVAL.str = "when"
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1849
		{
			yyVAL.str = "whitespace"
		}
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1850
		{
			yyVAL.str = "work"
		}
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1851
		{
			yyVAL.str = "wrapper"
		}
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1852
		{
			yyVAL.str = "write"
		}
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1853
		{
			yyVAL.str = "xml"
		}
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1854
		{
			yyVAL.str = "xmlattributes"
		}
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1855
		{
			yyVAL.str = "xmlconcat"
		}
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1856
		{
			yyVAL.str = "xmlelement"
		}
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1857
		{
			yyVAL.str = "xmlexists"
		}
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1858
		{
			yyVAL.str = "xmlforest"
		}
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1859
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1860
		{
			yyVAL.str = "xmlparse"
		}
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1861
		{
			yyVAL.str = "xmlpi"
		}
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1862
		{
			yyVAL.str = "xmlroot"
		}
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1863
		{
			yyVAL.str = "xmlserialize"
		}
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1864
		{
			yyVAL.str = "xmltable"
		}
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1865
		{
			yyVAL.str = "yes"
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1866
		{
			yyVAL.str = "zone"
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1881
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1060:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1883
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1061:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1887
		{
			collateClause := ast.NewCollateClause(yyDollar[3].list)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1062:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1893
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1063:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1898
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1064:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1903
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1065:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1908
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1066:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1913
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1067:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1918
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1068:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1923
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1069:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1928
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1933
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1071:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1938
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1943
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1948
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1074:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1953
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1958
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1963
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1077:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1968
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1078:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1973
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1079:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1977
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1080:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1981
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1081:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1985
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1989
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1083:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1993
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1997
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1085:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2002
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1086:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2009
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1087:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2014
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1088:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2021
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1089:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2026
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1090:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2033
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1091:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2038
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1092:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2045
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1093:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2052
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1094:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2059
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1095:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2066
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1096:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2073
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1097:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2077
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1098:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2081
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1099:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2085
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2089
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlaps"))
			leftList := yyDollar[1].list
			rightList := yyDollar[3].list
			combinedList := ast.NewNodeList()
			combinedList.Items = append(leftList.Items, rightList.Items...)
			yyVAL.node = ast.NewFuncCall(funcName, combinedList, 0)
		}
	case 1101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2098
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_TRUE)
		}
	case 1102:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2102
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_TRUE)
		}
	case 1103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2106
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_FALSE)
		}
	case 1104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2110
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_FALSE)
		}
	case 1105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2114
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_UNKNOWN)
		}
	case 1106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2118
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_UNKNOWN)
		}
	case 1107:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2122
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1108:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2127
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1109:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2132
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1110:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2137
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1111:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2142
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1112:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2147
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2152
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2157
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2162
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			sublink := ast.NewSubLink(subLinkType, yyDollar[4].stmt)
			sublink.Testexpr = yyDollar[1].node
			sublink.OperName = operName
			yyVAL.node = sublink
		}
	case 1116:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2171
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			if subLinkType == ast.ANY_SUBLINK {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ANY, operName, yyDollar[1].node, yyDollar[5].node, 0)
			} else {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ALL, operName, yyDollar[1].node, yyDollar[5].node, 0)
			}
		}
	case 1117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2181
		{
			yylex.Error("UNIQUE predicate is not yet implemented")
		}
	case 1118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2185
		{
			args := []ast.Expression{yyDollar[1].node.(ast.Expression)}
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
		}
	case 1119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2190
		{
			args := []ast.Expression{yyDollar[1].node.(ast.Expression)}
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2196
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2202
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[3].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2209
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1123:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2216
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[4].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2224
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[3].ival)
			uniqueKeys := yyDollar[4].bval
			yyVAL.node = ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
		}
	case 1125:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2241
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[4].ival)
			uniqueKeys := yyDollar[5].bval
			jsonPredicate := ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(jsonPredicate))
		}
	case 1126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2260
		{
			yyVAL.node = ast.NewSetToDefault(0, 0, 0)
		}
	case 1127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2265
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2267
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2271
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2276
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2281
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2286
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2291
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2296
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2301
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2306
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2311
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2316
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2321
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2326
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2331
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2336
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2342
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2343
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2345
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2354
		{
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewParenExpr(ast.NewA_Indirection(yyDollar[2].node, yyDollar[4].list, 0), 0)
			} else {
				yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
			}
		}
	case 1147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2361
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2362
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2364
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2368
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2373
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2377
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2381
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2385
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2391
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2397
		{
			exprList := yyDollar[3].list
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     exprList,
			}
			yyVAL.node = grouping
		}
	case 1157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2409
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2413
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2417
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2421
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2425
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2429
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2434
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2437
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2440
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2441
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2442
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2447
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2451
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2461
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2465
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2471
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2472
		{
			yyVAL.node = nil
		}
	case 1174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2476
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2480
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2484
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2488
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2493
		{
			yyVAL.list = nil
		}
	case 1179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2495
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2507
		{
			funcCall := yyDollar[1].node.(*ast.FuncCall)

			// Apply within_group_clause if present
			if yyDollar[2].node != nil {
				// TODO: Implement within_group_clause handling
				// funcCall.WithinGroupClause = $2
			}

			// Apply filter_clause if present
			if yyDollar[3].node != nil {
				// TODO: Implement filter_clause handling
				// funcCall.FilterClause = $3
			}

			// Apply over_clause if present (window functions)
			if yyDollar[4].windef != nil {
				funcCall.Over = yyDollar[4].windef
			}

			yyVAL.node = funcCall
		}
	case 1181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2533
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2537
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2541
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2552
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2556
		{
			// Special case for aggregates like COUNT(*) - set AggStar to true
			funcCall := ast.NewFuncCall(yyDollar[1].list, nil, 0)
			funcCall.AggStar = true
			yyVAL.node = funcCall
		}
	case 1186:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2563
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1187:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2569
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1188:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:2575
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1189:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2583
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1190:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2589
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2597
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2601
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2608
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2612
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2616
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1196:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2623
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2628
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1198:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2629
		{
			yyVAL.node = nil
		}
	case 1199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2633
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2635
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2643
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2649
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2650
		{
			yyVAL.node = nil
		}
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2655
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2659
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2663
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2668
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2670
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1209:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2677
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2678
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1211:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2680
		{
			nodeList := yyDollar[2].list
			nodeList.Append(yyDollar[4].node)
			yyVAL.list = nodeList
		}
	case 1212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2687
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2688
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1214:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2692
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2698
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2699
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2700
		{
			yyVAL.ival = int(ast.ALL_SUBLINK)
		}
	case 1218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2705
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2709
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2713
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~"))
		}
	case 1221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2717
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~"))
		}
	case 1222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2721
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~*"))
		}
	case 1223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2725
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~*"))
		}
	case 1224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2731
		{
			yyVAL.str = "NFC"
		}
	case 1225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2732
		{
			yyVAL.str = "NFD"
		}
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2733
		{
			yyVAL.str = "NFKC"
		}
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2734
		{
			yyVAL.str = "NFKD"
		}
	case 1228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2738
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2739
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2740
		{
			yyVAL.ival = int(ast.JS_TYPE_ARRAY)
		}
	case 1231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2741
		{
			yyVAL.ival = int(ast.JS_TYPE_OBJECT)
		}
	case 1232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2742
		{
			yyVAL.ival = int(ast.JS_TYPE_SCALAR)
		}
	case 1233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2746
		{
			yyVAL.bval = true
		}
	case 1234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2747
		{
			yyVAL.bval = true
		}
	case 1235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2748
		{
			yyVAL.bval = false
		}
	case 1236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2749
		{
			yyVAL.bval = false
		}
	case 1237:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2750
		{
			yyVAL.bval = false
		}
	case 1238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2755
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2759
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2768
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2773
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2774
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2775
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2776
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2777
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2780
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2781
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2782
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2785
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2788
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2792
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2796
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2803
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1254:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2807
		{
			yyVAL.list = nil
		}
	case 1255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2813
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2819
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2830
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2834
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2838
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2842
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2846
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2850
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2854
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2858
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2862
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2866
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2870
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2876
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2880
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2886
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2890
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2896
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2904
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2912
		{
			yyVAL.str = "varchar"
		}
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2916
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2924
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2932
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2942
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2953
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1280:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2967
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2979
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1282:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2991
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3001
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1284:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3011
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3021
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3032
		{
			yyVAL.ival = 1
		}
	case 1287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3033
		{
			yyVAL.ival = 0
		}
	case 1288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3034
		{
			yyVAL.ival = 0
		}
	case 1289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3037
		{
			yyVAL.ival = 1
		}
	case 1290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3038
		{
			yyVAL.ival = 0
		}
	case 1291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3042
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3052
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3059
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3063
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3070
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3074
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3079
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3080
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3083
		{
			yyVAL.str = "+"
		}
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3084
		{
			yyVAL.str = "-"
		}
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3085
		{
			yyVAL.str = "*"
		}
	case 1302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3086
		{
			yyVAL.str = "/"
		}
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3087
		{
			yyVAL.str = "%"
		}
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3088
		{
			yyVAL.str = "^"
		}
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3089
		{
			yyVAL.str = "<"
		}
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3090
		{
			yyVAL.str = ">"
		}
	case 1307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3091
		{
			yyVAL.str = "="
		}
	case 1308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3092
		{
			yyVAL.str = "<="
		}
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3093
		{
			yyVAL.str = ">="
		}
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3094
		{
			yyVAL.str = "<>"
		}
	case 1311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3098
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3102
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3111
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3112
		{
			yyVAL.list = nil
		}
	case 1315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3115
		{
			yyVAL.node = nil
		}
	case 1316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3118
		{
			yyVAL.node = nil
		}
	case 1317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3122
		{
			yyVAL.ival = 0
		}
	case 1318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3123
		{
			yyVAL.ival = 0
		}
	case 1319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3127
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3132
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3147
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3148
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3152
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3157
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3158
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3167
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3168
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3177
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3179
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			// Use NodeList directly for SortClause
			selectStmt.SortClause = yyDollar[2].list
			yyVAL.stmt = selectStmt
		}
	case 1330:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3186
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1331:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3197
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			if yyDollar[3].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[3].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[3].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[3].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3208
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3214
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			yyVAL.stmt = selectStmt
		}
	case 1334:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3221
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			if yyDollar[5].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[5].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[5].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[5].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1335:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3233
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3251
		{
			yyVAL.list = nil
		}
	case 1337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3255
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3256
		{
			yyVAL.list = nil
		}
	case 1339:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3267
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1340:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3286
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3304
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3314
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3325
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3326
		{
			yyVAL.list = nil
		}
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3330
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3331
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3336
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3340
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3345
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3350
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3361
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3362
		{
			yyVAL.list = nil
		}
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3366
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3367
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3376
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3384
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3395
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3406
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3410
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3416
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			if yyDollar[2].alias != nil {
				rangeFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeFunc
		}
	case 1361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3424
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeFunc
		}
	case 1362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3433
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3441
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3450
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3458
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3470
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3476
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3483
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3489
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1370:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3495
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3505
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3509
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3515
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3532
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3536
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1376:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3545
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1377:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3571
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1378:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3597
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1379:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3605
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3615
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3616
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3617
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3618
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3623
		{
			yyVAL.ival = 1
		}
	case 1385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3624
		{
			yyVAL.ival = 0
		}
	case 1386:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3634
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3645
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3656
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3660
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3664
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3670
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3671
		{
			yyVAL.with = nil
		}
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3676
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3680
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1395:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3688
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3716
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3717
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3718
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1399:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3723
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1400:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3729
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3735
		{
			yyVAL.node = nil
		}
	case 1402:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:3742
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1403:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3751
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3759
		{
			yyVAL.node = nil
		}
	case 1405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3770
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = ast.NewNodeList(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1406:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3778
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists.Append(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3792
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3793
		{
			yyVAL.node = nil
		}
	case 1409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3801
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1410:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3803
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3807
		{
			yyVAL.node = nil
		}
	case 1412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3811
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3819
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3820
		{
			yyVAL.alias = nil
		}
	case 1415:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3825
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3830
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3834
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3839
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3847
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3851
		{
			yyVAL.alias = nil
		}
	case 1421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3859
		{
			yyVAL.ival = 1
		}
	case 1422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3860
		{
			yyVAL.ival = 0
		}
	case 1423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3864
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1424:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3865
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3869
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3870
		{
			yyVAL.list = nil
		}
	case 1427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3880
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].rangevar, nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3883
		{
			yyVAL.into = nil
		}
	case 1429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3894
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1430:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3903
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3913
		{
			yyVAL.ival = 1
		}
	case 1432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3914
		{
			yyVAL.ival = 0
		}
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3920
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3924
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3931
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3940
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3941
		{
			yyVAL.list = nil
		}
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3951
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3955
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3967
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3980
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3981
		{
			yyVAL.list = nil
		}
	case 1443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3987
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3991
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4000
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4011
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4016
		{
			yyVAL.node = nil
		}
	case 1448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4021
		{
			yyVAL.str = "BY REF"
		}
	case 1449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4022
		{
			yyVAL.str = "BY VALUE"
		}
	case 1450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4028
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4032
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4036
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1453:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4040
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4048
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4052
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4060
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4065
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1458:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4074
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1459:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:4082
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4093
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4097
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4106
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4111
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4116
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4126
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4130
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4139
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4143
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4147
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4151
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4155
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1472:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:4168
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4192
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4203
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4204
		{
			yyVAL.node = nil
		}
	case 1476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4209
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4210
		{
			yyVAL.node = nil
		}
	case 1478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4214
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4215
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4220
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4228
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4236
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4247
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4248
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4249
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4250
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4251
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4252
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4253
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4254
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4259
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4263
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1493:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4267
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4271
		{
			yyVAL.node = nil
		}
	case 1495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4276
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4277
		{
			yyVAL.node = nil
		}
	case 1497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4282
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4283
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4284
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4285
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1501:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4286
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4287
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4288
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4289
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4290
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4295
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4296
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1508:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4297
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4298
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4299
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1511:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4305
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4325
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4335
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4336
		{
			yyVAL.node = nil
		}
	case 1515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4341
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4342
		{
			yyVAL.node = nil
		}
	case 1517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4348
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4352
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4361
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1520:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4370
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1521:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4384
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1522:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4398
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1523:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4409
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1524:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4418
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4429
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4430
		{
			yyVAL.node = nil
		}
	case 1527:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4446
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4458
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4462
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4471
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4477
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4484
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1533:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4491
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4499
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4508
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4509
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4514
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4518
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4526
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1540:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4538
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4551
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4555
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4566
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4572
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4592
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4598
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4599
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1548:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4609
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4621
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4625
		{
			yyVAL.list = nil
		}
	case 1551:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4640
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4657
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4661
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1554:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4672
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1555:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:4696
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4732
		{
			yyVAL.ival = 1
		}
	case 1557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4733
		{
			yyVAL.ival = 0
		}
	case 1558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4737
		{
			yyVAL.ival = 1
		}
	case 1559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4738
		{
			yyVAL.ival = 0
		}
	case 1560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4742
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4743
		{
			yyVAL.str = ""
		}
	case 1562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4744
		{
			yyVAL.str = ""
		}
	case 1563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4749
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4752
		{
			yyVAL.node = nil
		}
	case 1565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4757
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4760
		{
			yyVAL.node = nil
		}
	case 1567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4764
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4765
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4770
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4778
		{
			yyVAL.list = nil
		}
	case 1571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4785
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4789
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4793
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4797
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4801
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4805
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4809
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4813
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4817
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4821
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4825
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4829
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4833
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4837
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4841
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4849
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4853
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4860
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4866
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4867
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4868
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4869
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4870
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4871
		{
			yyVAL.node = nil
		}
	case 1595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4876
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4880
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4886
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4890
		{
			yyVAL.str = "true"
		}
	case 1599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4891
		{
			yyVAL.str = "false"
		}
	case 1600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4892
		{
			yyVAL.str = "on"
		}
	case 1601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4893
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4897
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4898
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4900
		{
			f := ast.NewFloat(yyDollar[2].str)
			f.FVal = "-" + f.FVal
			yyVAL.node = f
		}
	case 1605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4905
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4909
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4910
		{
			yyVAL.node = nil
		}
	case 1608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4914
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4915
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4916
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4917
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4918
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4919
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4920
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4921
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4925
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4926
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4927
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4931
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4932
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4933
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4934
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4935
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4940
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4945
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4952
		{
			yyVAL.bval = true
		}
	case 1627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4953
		{
			yyVAL.bval = false
		}
	case 1628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4957
		{
			yyVAL.ival = 1
		}
	case 1629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4958
		{
			yyVAL.ival = 0
		}
	case 1632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4974
		{
			yyVAL.node = nil
		}
	case 1633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4976
		{
			yyVAL.node = nil
		}
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4984
		{
			yyVAL.ival = 1
		}
	case 1635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4985
		{
			yyVAL.ival = 0
		}
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4989
		{
			yyVAL.ival = 1
		}
	case 1637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4990
		{
			yyVAL.ival = 0
		}
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4994
		{
			yyVAL.ival = 1
		}
	case 1639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4995
		{
			yyVAL.ival = 0
		}
	case 1640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4999
		{
			yyVAL.ival = 1
		}
	case 1641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5000
		{
			yyVAL.ival = 0
		}
	case 1642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5009
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1643:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5015
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1644:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5021
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1645:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5027
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1646:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5033
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5041
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1648:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5042
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5046
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1650:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5047
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5051
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1652:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5052
		{
			yyVAL.node = nil
		}
	case 1653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5057
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5072
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5081
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1656:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5088
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1657:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5095
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1658:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5108
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5121
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1660:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5130
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1661:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5145
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1662:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5155
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1663:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5163
		{
			yyVAL.onconflict = nil
		}
	case 1664:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5174
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5183
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5190
		{
			yyVAL.node = nil
		}
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5201
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5205
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5212
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5216
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5223
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5228
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1673:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5233
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1674:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5241
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1675:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5252
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5266
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1677:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5267
		{
			yyVAL.list = nil
		}
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5271
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5272
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1680:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5273
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5277
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5278
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1683:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5279
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5284
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1685:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5288
		{
			yyVAL.list = nil
		}
	case 1686:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:5309
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1687:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:5325
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1688:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:5342
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1689:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:5358
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1690:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:5375
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1691:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:5392
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5410
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5411
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5412
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5413
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5414
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5415
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5416
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1699:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5417
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5421
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1701:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5422
		{
			yyVAL.list = nil
		}
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5427
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5432
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5439
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5440
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5441
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1707:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5446
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5453
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5457
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1710:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5461
		{
			yyVAL.ival = 0
		}
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5467
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5468
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5469
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5470
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5471
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5472
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5473
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5474
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5475
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5476
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5481
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5482
		{
			yyVAL.str = "default"
		}
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5486
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1724:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5487
		{
			yyVAL.str = ""
		}
	case 1725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5491
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5492
		{
			yyVAL.str = "default"
		}
	case 1727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5496
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1728:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5497
		{
			yyVAL.str = ""
		}
	case 1729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5502
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1730:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5503
		{
			yyVAL.list = nil
		}
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5508
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5514
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5521
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5522
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5527
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 1736:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5533
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 1737:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5544
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 1738:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5573
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 1739:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5582
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5592
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 1741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5601
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5608
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5612
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1744:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5620
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1745:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5621
		{
			yyVAL.list = nil
		}
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5626
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5630
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1748:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5638
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5644
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5649
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1751:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5654
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			colDef.Constraints = yyDollar[6].list
			yyVAL.node = colDef
		}
	case 1752:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5666
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1753:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5671
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5678
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5683
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5684
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5686
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5699
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5704
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1760:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5709
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 1761:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5714
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 1762:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5722
		{
			yyVAL.bval = true
		}
	case 1763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5723
		{
			yyVAL.bval = false
		}
	case 1764:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5724
		{
			yyVAL.bval = true
		}
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5728
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 1766:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5729
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 1767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5734
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5736
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5741
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5745
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5749
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 1772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5759
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5765
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1774:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5766
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5771
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 1776:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5775
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5779
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 1778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5783
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 1779:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5787
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5791
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 1781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5795
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 1782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5799
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 1783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5803
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 1784:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5807
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 1785:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5811
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 1786:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5815
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 1787:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5819
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5823
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1789:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5827
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5831
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 1791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5837
		{
		}
	case 1792:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5838
		{
		}
	case 1793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5842
		{
		}
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5843
		{
		}
	case 1795:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5844
		{
		}
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5849
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 1797:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5856
		{
			yyVAL.bval = false
		}
	case 1798:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5860
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1799:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5861
		{
			yyVAL.list = nil
		}
	case 1800:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5866
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5870
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 1802:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5874
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 1803:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5883
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 1804:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5889
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 1805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5895
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 1806:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5901
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 1807:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5918
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 1808:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5925
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 1809:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5935
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5940
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1811:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5945
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 1812:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5953
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 1813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5964
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 1814:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5975
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 1815:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5985
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 1816:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:5996
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 1817:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6017
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 1818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6031
		{
			yyVAL.bval = true
		}
	case 1819:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6032
		{
			yyVAL.bval = false
		}
	case 1820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6038
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1821:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6044
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1822:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6052
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 1823:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6057
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 1824:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6065
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1825:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6069
		{
			yyVAL.list = nil
		}
	case 1826:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6076
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 1827:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6080
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 1828:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6084
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 1829:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6088
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 1830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6095
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 1831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6105
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 1832:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6115
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 1833:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6122
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 1834:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6129
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 1835:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6144
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 1836:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6157
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 1837:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6164
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6171
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6178
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1840:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6185
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 1841:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6192
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 1842:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6201
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1843:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6202
		{
			yyVAL.list = nil
		}
	case 1844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6206
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 1845:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6207
		{
			yyVAL.partspec = nil
		}
	case 1846:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6212
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 1847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6220
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1848:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6225
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1849:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6233
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 1850:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6240
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 1851:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6247
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 1852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6256
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1853:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6257
		{
			yyVAL.str = ""
		}
	case 1854:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6261
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 1855:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6262
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 1856:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6263
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 1857:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6264
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 1858:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6268
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1859:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6269
		{
			yyVAL.str = ""
		}
	case 1860:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6273
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1861:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6274
		{
			yyVAL.str = ""
		}
	case 1862:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6278
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1863:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:6291
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 1864:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:6306
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 1865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6322
		{
			yyVAL.bval = true
		}
	case 1866:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6323
		{
			yyVAL.bval = false
		}
	case 1867:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6327
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1868:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6328
		{
			yyVAL.str = "btree"
		}
	case 1869:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6332
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1870:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6333
		{
			yyVAL.list = nil
		}
	case 1871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6338
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1872:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6343
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1873:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6351
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1874:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6352
		{
			yyVAL.list = nil
		}
	case 1875:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6364
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1876:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6370
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1877:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6377
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 1878:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6383
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1879:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6390
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 1880:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6399
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 1881:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6405
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1882:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6412
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 1883:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6418
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1884:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6425
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 1885:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6431
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1886:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6438
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1887:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6444
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1888:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6451
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1889:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6460
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1890:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6470
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 1891:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6477
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 1892:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6485
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 1893:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6492
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 1894:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:6500
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 1895:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6507
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 1896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6518
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1897:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6523
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6531
		{
			yyVAL.bval = true
		}
	case 1899:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6532
		{
			yyVAL.bval = false
		}
	case 1900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6537
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].rolespec)
		}
	case 1901:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6542
		{
			yyDollar[1].list.Append(yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 1902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6550
		{
			roleSpec := yyDollar[1].rolespec

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 1903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6581
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.rolespec = roleSpec
		}
	case 1904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6604
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 1905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6611
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 1906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6618
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 1907:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6629
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1908:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6636
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1909:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6643
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1910:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6650
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1911:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6657
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 1912:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6662
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 1913:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6667
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 1914:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6672
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 1915:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6677
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 1916:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6682
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1917:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6689
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 1918:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6694
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 1919:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6701
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 1920:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6706
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 1921:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6711
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 1922:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6716
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 1923:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6721
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 1924:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6731
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 1925:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6736
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1926:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6743
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1927:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6750
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1928:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6758
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1929:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6769
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 1930:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6779
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 1931:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6784
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 1932:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6789
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 1933:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6800
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 1934:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6805
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1935:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6813
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1936:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6821
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 1937:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6826
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 1938:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6831
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 1939:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6836
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 1940:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6841
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 1941:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6846
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 1942:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6851
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 1943:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6856
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 1944:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6861
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 1945:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6866
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 1946:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6871
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 1947:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6876
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 1948:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6881
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 1949:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6886
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 1950:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6891
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 1951:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6896
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 1952:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6901
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 1953:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6906
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 1954:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6911
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 1955:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6916
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 1956:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6922
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 1957:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6927
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].rolespec
			yyVAL.node = cmd
		}
	case 1958:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6934
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 1959:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6939
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 1960:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6944
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 1961:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6949
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 1962:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6954
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 1963:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6959
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 1964:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6964
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 1965:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6969
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 1966:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6974
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 1967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6978
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 1968:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6986
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1969:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6994
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1970:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7001
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1971:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7012
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1972:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7021
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1973:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7022
		{
			yyVAL.node = nil
		}
	case 1974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7026
		{
		}
	case 1975:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7027
		{
		}
	case 1976:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7038
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1977:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7051
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1978:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7064
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1979:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7077
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1980:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7090
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1981:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7105
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1982:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7120
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1983:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7133
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1984:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7146
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1985:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7159
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1986:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7172
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 1987:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7185
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 1988:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7201
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 1989:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7207
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 1990:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7213
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 1991:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7222
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 1992:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7226
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 1993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7229
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 1994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7233
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 1995:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7235
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 1996:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7239
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 1997:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7243
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 1998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7250
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 1999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7254
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 2000:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7260
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7261
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2002:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7265
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 2003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7270
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 2004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7271
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 2005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7272
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 2006:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7273
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 2007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7274
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 2008:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7275
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 2009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7276
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 2010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7277
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 2011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7278
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 2012:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7279
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 2013:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7280
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 2014:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7281
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 2015:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7282
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 2016:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7295
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2017:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7300
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2018:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7314
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode: ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:  yyDollar[1].list,
				Objargs:  yyDollar[2].list,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2019:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7326
		{
			yylex.Error("Use NONE to denote the missing argument of a unary operator.")
			return 1
		}
	case 2020:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7331
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, yyDollar[4].typnam)
		}
	case 2021:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7333
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[4].typnam)
		}
	case 2022:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7335
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, nil)
		}
	case 2023:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7339
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2024:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7353
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2025:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7364
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2026:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7375
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2027:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7386
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2028:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7397
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2029:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7408
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2030:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7420
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2031:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7431
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2032:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7442
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2033:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7453
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2034:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7464
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2035:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7481
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2036:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7498
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2037:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7510
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2038:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7522
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2039:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7533
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2040:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7544
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2041:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7555
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2042:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7566
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2043:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7577
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2044:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7588
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2045:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7599
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2046:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7610
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2047:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7621
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2048:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7632
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2049:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7643
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2050:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7654
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2051:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7665
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2052:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7676
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2053:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7687
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2054:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7698
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2055:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7709
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2056:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7720
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2057:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7733
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2058:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7746
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2059:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7759
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2060:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7772
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2061:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7785
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2062:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7798
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2063:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7810
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2064:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7822
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2065:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7835
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2066:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7848
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2067:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7860
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2068:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7872
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2069:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7883
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2070:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7894
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2071:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7905
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2072:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7916
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2073:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7927
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2074:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7938
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2075:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7949
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2076:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7960
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2077:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7971
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2078:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7982
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2079:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8008
		{
			yyVAL.ival = 0
		}
	case 2080:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8010
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 2081:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8024
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 2082:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8025
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 2083:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8026
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 2084:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8027
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 2085:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8028
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 2086:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8029
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 2087:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8033
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2088:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8038
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2089:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8043
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2090:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8051
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2091:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8055
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2092:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8059
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 2093:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8063
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 2094:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8077
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 2095:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:8091
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 2096:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8107
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2097:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8122
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2098:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8137
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2099:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8138
		{
			yyVAL.list = nil
		}
	case 2100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8143
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8147
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8155
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8159
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8164
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8172
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8181
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8190
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8199
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8208
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8219
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8220
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8221
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8222
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8223
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8227
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8231
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8233
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				// TODO: Add %TYPE indicator
			}
		}
	case 2118:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8243
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				Setof: true,
			}
		}
	case 2119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8255
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2120:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8256
		{
			yyVAL.list = nil
		}
	case 2121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8261
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8267
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8275
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8279
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8283
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8287
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8291
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8298
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8304
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8314
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2131:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8320
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8328
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8332
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8344
		{
			yyVAL.node = nil
		}
	case 2135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8351
		{
			yyVAL.stmt = &ast.ReturnStmt{
				ReturnVal: yyDollar[2].node,
			}
		}
	case 2136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8360
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8370
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8376
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8377
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8382
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 2141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8386
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8390
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8394
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 2144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8398
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 2145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8402
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 2146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8406
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8410
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8414
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8418
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8422
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 2151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8426
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 2152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8430
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 2153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8434
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 2154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8438
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 2155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8442
		{
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 2156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8446
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 2157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8453
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8457
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2159:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:8473
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2160:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:8505
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8536
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8537
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8538
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8543
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8545
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8585
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8592
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8599
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8606
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8613
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8622
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8623
		{
			yyVAL.list = nil
		}
	case 2173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8627
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8632
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8640
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8651
		{
			yyVAL.bval = true
		}
	case 2177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8652
		{
			yyVAL.bval = false
		}
	case 2178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8656
		{
			yyVAL.bval = true
		}
	case 2179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8657
		{
			yyVAL.bval = false
		}
	case 2180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8661
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8666
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8670
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8682
		{
			yyVAL.bval = true
		}
	case 2186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8683
		{
			yyVAL.bval = false
		}
	case 2187:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8687
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8688
		{
			yyVAL.node = nil
		}
	case 2191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8697
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8702
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8706
		{
			yyVAL.list = nil
		}
	case 2194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8711
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8714
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8715
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8716
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8720
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2199:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8721
		{
			yyVAL.rangevar = nil
		}
	case 2200:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8734
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2201:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8750
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2202:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:8766
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2203:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:8782
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8799
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2205:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8800
		{
			yyVAL.list = nil
		}
	case 2206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8804
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2207:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8805
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2208:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8806
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8807
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2210:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8818
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = yyDollar[5].rolespec
			n.SchemaElts = yyDollar[6].list
			yyVAL.stmt = n
		}
	case 2211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8825
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = nil
			n.SchemaElts = yyDollar[4].list
			yyVAL.stmt = n
		}
	case 2212:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8832
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = yyDollar[8].rolespec
			n.SchemaElts = yyDollar[9].list
			yyVAL.stmt = n
		}
	case 2213:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8839
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = nil
			n.SchemaElts = yyDollar[7].list
			yyVAL.stmt = n
		}
	case 2214:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8855
		{
			n := ast.NewCreateDomainStmt(yyDollar[3].list, yyDollar[5].typnam)
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			n.Constraints = constraints
			n.CollClause = collClause
			yyVAL.stmt = n
		}
	case 2215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8873
		{
			n := ast.NewAlterDomainStmt('T', yyDollar[3].list)
			n.Def = yyDollar[4].node
			yyVAL.stmt = n
		}
	case 2216:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8879
		{
			n := ast.NewAlterDomainStmt('N', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2217:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8884
		{
			n := ast.NewAlterDomainStmt('O', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2218:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8889
		{
			n := ast.NewAlterDomainStmt('C', yyDollar[3].list)
			n.Def = yyDollar[5].node
			yyVAL.stmt = n
		}
	case 2219:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8895
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[6].str
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			yyVAL.stmt = n
		}
	case 2220:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8903
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[8].str
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			yyVAL.stmt = n
		}
	case 2221:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8911
		{
			n := ast.NewAlterDomainStmt('V', yyDollar[3].list)
			n.Name = yyDollar[6].str
			yyVAL.stmt = n
		}
	case 2222:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8926
		{
			// Extract actual arguments from aggr_args which returns [args, position_indicator]
			var args *ast.NodeList
			if yyDollar[5].list != nil && yyDollar[5].list.Len() > 0 {
				// First element contains the actual arguments (or nil for *)
				if firstElem, ok := yyDollar[5].list.Items[0].(*ast.NodeList); ok {
					args = firstElem
				} else if yyDollar[5].list.Items[0] == nil {
					// Special case for COUNT(*) - create a list with a single nil element
					args = ast.NewNodeList(nil)
				}
			}
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, false, yyDollar[4].list, args, yyDollar[6].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2223:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8942
		{
			// old-style (pre-8.2) syntax for CREATE AGGREGATE
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, true, yyDollar[4].list, nil, yyDollar[5].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8948
		{
			n := ast.NewDefineStmt(ast.OBJECT_OPERATOR, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8953
		{
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8958
		{
			// Shell type (identified by lack of definition)
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, nil, false, false)
			yyVAL.stmt = n
		}
	case 2227:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8964
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSPARSER, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2228:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8969
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSDICTIONARY, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2229:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8974
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSTEMPLATE, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2230:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8979
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSCONFIGURATION, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8984
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8989
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, yyDollar[7].list, true, false)
			yyVAL.stmt = n
		}
	case 2233:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8994
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, ast.NewNodeList(yyDollar[5].list), false, false)
			yyVAL.stmt = n
		}
	case 2234:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8999
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, ast.NewNodeList(yyDollar[8].list), true, false)
			yyVAL.stmt = n
		}
	case 2235:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9004
		{
			typevar, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(fmt.Sprintf("invalid type name: %v", err))
				return 1
			}

			n := ast.NewCompositeTypeStmt(typevar, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2236:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9015
		{
			n := ast.NewCreateEnumStmt(yyDollar[3].list, yyDollar[7].list)
			yyVAL.stmt = n
		}
	case 2237:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9020
		{
			n := ast.NewCreateRangeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2238:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9034
		{
			n := ast.NewCreateSeqStmt(yyDollar[4].rangevar, yyDollar[5].list, 0, false, false)
			yyVAL.stmt = n
		}
	case 2239:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9039
		{
			n := ast.NewCreateSeqStmt(yyDollar[7].rangevar, yyDollar[8].list, 0, false, true)
			yyVAL.stmt = n
		}
	case 2240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9046
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2241:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9047
		{
			yyVAL.list = nil
		}
	case 2242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9050
		{
		}
	case 2243:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9051
		{
		}
	case 2244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9062
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[3].rangevar, yyDollar[4].list, false, false)
		}
	case 2245:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9066
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[5].rangevar, yyDollar[6].list, false, true)
		}
	case 2246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9079
		{
			n := ast.NewCreateExtensionStmt(yyDollar[3].str, false, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2247:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9084
		{
			n := ast.NewCreateExtensionStmt(yyDollar[6].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9092
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2249:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9101
		{
			yyVAL.list = nil
		}
	case 2250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9108
		{
			yyVAL.defelt = ast.NewDefElem("schema", ast.NewString(yyDollar[2].str))
		}
	case 2251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9112
		{
			yyVAL.defelt = ast.NewDefElem("version", ast.NewString(yyDollar[2].str))
		}
	case 2252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9116
		{
			yylex.Error("CREATE EXTENSION ... FROM is no longer supported")
			return 1
		}
	case 2253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9121
		{
			yyVAL.defelt = ast.NewDefElem("cascade", ast.NewBoolean(true))
		}
	case 2254:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9134
		{
			n := ast.NewAlterExtensionStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9142
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2256:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9151
		{
			yyVAL.list = nil
		}
	case 2257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9158
		{
			yyVAL.defelt = ast.NewDefElem("to", ast.NewString(yyDollar[2].str))
		}
	case 2258:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9171
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), ast.NewString(yyDollar[6].str))
		}
	case 2259:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9175
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), yyDollar[6].list)
		}
	case 2260:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9179
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_AGGREGATE), yyDollar[6].objwithargs)
		}
	case 2261:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9183
		{
			// CAST takes two TypeNames as a NodeList
			list := ast.NewNodeList(yyDollar[7].typnam)
			list.Append(yyDollar[9].typnam)
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_CAST), list)
		}
	case 2262:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9190
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_DOMAIN), yyDollar[6].typnam)
		}
	case 2263:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9194
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_FUNCTION), yyDollar[6].objwithargs)
		}
	case 2264:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9198
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPERATOR), yyDollar[6].objwithargs)
		}
	case 2265:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9202
		{
			// OPERATOR CLASS takes method name + class name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then class name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPCLASS), list)
		}
	case 2266:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9211
		{
			// OPERATOR FAMILY takes method name + family name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then family name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPFAMILY), list)
		}
	case 2267:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9220
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_PROCEDURE), yyDollar[6].objwithargs)
		}
	case 2268:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9224
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_ROUTINE), yyDollar[6].objwithargs)
		}
	case 2269:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9228
		{
			list := ast.NewNodeList(yyDollar[7].typnam, ast.NewString(yyDollar[9].str))
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TRANSFORM), list)
		}
	case 2270:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9233
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TYPE), yyDollar[6].typnam)
		}
	case 2271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9238
		{
			yyVAL.ival = 1
		}
	case 2272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9239
		{
			yyVAL.ival = 0
		}
	case 2273:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9249
		{
			yyVAL.stmt = ast.NewCreateFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2274:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9255
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2275:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9259
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, nil)
		}
	case 2276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9265
		{
			yyVAL.defelt = ast.NewDefElem("handler", yyDollar[2].list)
		}
	case 2277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9266
		{
			yyVAL.defelt = ast.NewDefElem("handler", nil)
		}
	case 2278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9267
		{
			yyVAL.defelt = ast.NewDefElem("validator", yyDollar[2].list)
		}
	case 2279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9268
		{
			yyVAL.defelt = ast.NewDefElem("validator", nil)
		}
	case 2280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9272
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9273
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9277
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2283:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9278
		{
			yyVAL.list = nil
		}
	case 2284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9282
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9283
		{
			result := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				result.Append(item)
			}
			yyVAL.list = result
		}
	case 2286:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9300
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].str, yyDollar[9].str, yyDollar[10].list, false)
		}
	case 2287:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:9305
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[6].str, yyDollar[7].str, yyDollar[8].str, yyDollar[12].str, yyDollar[13].list, true)
		}
	case 2288:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9311
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].list, true)
		}
	case 2289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9315
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, nil, true)
		}
	case 2290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9319
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, "", yyDollar[4].list, false)
		}
	case 2291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9325
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9326
		{
			yyVAL.str = ""
		}
	case 2293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9330
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9331
		{
			yyVAL.str = ""
		}
	case 2295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9335
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9336
		{
			yyVAL.str = ""
		}
	case 2297:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9349
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[6].list, yyDollar[8].list, yyDollar[10].str, yyDollar[11].list, nil, false)
		}
	case 2298:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:9355
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[9].list, yyDollar[11].list, yyDollar[13].str, yyDollar[14].list, nil, true)
		}
	case 2299:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:9361
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[8].list, ast.NewNodeList(yyDollar[7].rangevar), yyDollar[11].str, yyDollar[12].list, yyDollar[9].partboundspec, false)
		}
	case 2300:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:9367
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[11].list, ast.NewNodeList(yyDollar[10].rangevar), yyDollar[14].str, yyDollar[15].list, yyDollar[12].partboundspec, true)
		}
	case 2301:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9379
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list, false)
		}
	case 2302:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9383
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[8].rolespec, yyDollar[10].str, yyDollar[11].list, true)
		}
	case 2303:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9389
		{
			yyVAL.stmt = ast.NewAlterUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list)
		}
	case 2304:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9395
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, false)
		}
	case 2305:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9399
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[7].rolespec, yyDollar[9].str, true)
		}
	case 2306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9405
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9406
		{
			yyVAL.rolespec = ast.NewRoleSpec(ast.ROLESPEC_CURRENT_USER, "")
		}
	case 2308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9411
		{
			// For aggregates like COUNT(*)
			// Return a list with [nil, -1] matching PostgreSQL's list_make2(NIL, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(nil, ast.NewInteger(-1))
		}
	case 2309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9417
		{
			// Regular aggregate arguments
			// Return a list with [args, -1] matching PostgreSQL's list_make2($2, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(yyDollar[2].list, ast.NewInteger(-1))
		}
	case 2310:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9423
		{
			// Ordered-set aggregate without direct arguments
			// Return a list with [args, 0] matching PostgreSQL's list_make2($4, makeInteger(0))
			yyVAL.list = ast.NewNodeList(yyDollar[4].list, ast.NewInteger(0))
		}
	case 2311:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9429
		{
			// Hypothetical-set aggregate
			// This is the only case requiring consistency checking in PostgreSQL
			result, err := makeOrderedSetArgs(yyDollar[2].list, yyDollar[5].list)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.list = result
		}
	case 2312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9443
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9447
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9455
		{
			yyVAL.node = yyDollar[1].funparam
		}
	case 2315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9462
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9469
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9473
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9481
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2319:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9488
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			n.NewValIsAfter = true
			yyVAL.stmt = n
		}
	case 2320:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9496
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = false
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2321:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9505
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = true
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2322:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9514
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.OldVal = yyDollar[6].str
			n.NewVal = yyDollar[8].str
			n.SkipIfNewValExists = false
			yyVAL.stmt = n
		}
	case 2323:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9522
		{
			// Following PostgreSQL's approach - DROP VALUE is parsed but not implemented
			// PostgreSQL throws an error saying "dropping an enum value is not implemented"
			yylex.Error("dropping an enum value is not implemented")
			return 1
		}
	case 2324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9538
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9540
		{
			yyVAL.list = nil
		}
	case 2326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9545
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9547
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9552
		{
			if constraint, ok := yyDollar[3].node.(*ast.Constraint); ok {
				constraint.Conname = yyDollar[2].str
				yyVAL.node = constraint
			} else {
				yyVAL.node = yyDollar[3].node
			}
		}
	case 2329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9561
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2330:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9566
		{
			n := ast.NewConstraint(ast.CONSTR_CHECK)
			n.RawExpr = yyDollar[3].node
			n.CookedExpr = "" // Empty string, not nil
			// Process constraint attributes from $5
			processConstraintAttributeSpec(yyDollar[5].ival, n)
			// PostgreSQL: n->initially_valid = !n->skip_validation
			n.InitiallyValid = !n.SkipValidation
			yyVAL.node = n
		}
	case 2331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9577
		{
			n := ast.NewConstraint(ast.CONSTR_NOTNULL)
			// In PostgreSQL, domain NOT NULL constraints have keys = list_make1(makeString("value"))
			n.Keys = ast.NewNodeList(ast.NewString("value"))
			// Process constraint attributes from $3
			processConstraintAttributeSpec(yyDollar[3].ival, n)
			// PostgreSQL sets initially_valid = true for NOT NULL (no NOT VALID support yet)
			n.InitiallyValid = true
			yyVAL.node = n
		}
	case 2332:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9597
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[7].stmt, yyDollar[5].into, ast.OBJECT_MATVIEW, false, false)
			/* cram additional flags into the IntoClause */
			yyDollar[5].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[5].into.SkipData = !yyDollar[8].bval
			yyVAL.stmt = ctas
		}
	case 2333:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9605
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[10].stmt, yyDollar[8].into, ast.OBJECT_MATVIEW, false, true)
			/* cram additional flags into the IntoClause */
			yyDollar[8].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[8].into.SkipData = !yyDollar[11].bval
			yyVAL.stmt = ctas
		}
	case 2334:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9616
		{
			n := ast.NewRefreshMatViewStmt(yyDollar[4].bval, !yyDollar[6].bval, yyDollar[5].rangevar)
			yyVAL.stmt = n
		}
	case 2335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9622
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 2336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9623
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 2337:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9628
		{
			yyVAL.into = &ast.IntoClause{
				Rel:            yyDollar[1].rangevar,
				ColNames:       yyDollar[2].list,
				AccessMethod:   yyDollar[3].str,
				Options:        yyDollar[4].list,
				TableSpaceName: yyDollar[5].str,
			}
		}
	case 2338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9640
		{
			yyVAL.bval = true
		}
	case 2339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9641
		{
			yyVAL.bval = false
		}
	case 2340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9642
		{
			yyVAL.bval = true
		}
	case 2341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9647
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].stmt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9656
		{
			yyVAL.list = nil
		}
	case 2347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9667
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9669
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9673
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9678
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9683
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9688
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9696
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9701
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9706
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9710
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9721
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9729
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9733
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9737
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9741
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9748
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9752
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9759
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9765
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9772
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9773
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9777
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9778
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9779
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9780
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9781
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9782
		{
			yyVAL.node = ast.NewString("true")
		}
	case 2374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9783
		{
			yyVAL.node = ast.NewString("false")
		}
	case 2375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9784
		{
			yyVAL.node = ast.NewString("on")
		}
	case 2376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9785
		{
			yyVAL.node = ast.NewString("off")
		}
	case 2377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9789
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9790
		{
			yyVAL.str = "default"
		}
	case 2379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9791
		{
			yyVAL.str = ""
		}
	case 2380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9795
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9796
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9800
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9801
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9802
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9803
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9807
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9808
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9813
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9819
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9824
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9832
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9836
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9840
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9844
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9848
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9854
		{
			yyVAL.str = "read uncommitted"
		}
	case 2397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9855
		{
			yyVAL.str = "read committed"
		}
	case 2398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9856
		{
			yyVAL.str = "repeatable read"
		}
	case 2399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9857
		{
			yyVAL.str = "serializable"
		}
	case 2400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9861
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9862
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9863
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9866
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9867
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9868
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9872
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9873
		{
			yyVAL.list = nil
		}
	case 2408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9877
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2409:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9878
		{
			yyVAL.node = nil
		}
	case 2410:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9882
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9887
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9892
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9900
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9904
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9910
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9916
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9922
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9923
		{
			yyVAL.str = ""
		}
	case 2419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9927
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9928
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9929
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9930
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9934
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9939
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9944
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9951
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9952
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2428:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9963
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[9].list, nil)
		}
	case 2429:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:9967
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[11].list, yyDollar[8].list)
		}
	case 2430:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9973
		{
			yyVAL.stmt = ast.NewAlterEventTrigStmt(yyDollar[4].str, ast.TriggerFires(yyDollar[5].ival))
		}
	case 2431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9979
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_ORIGIN)
		}
	case 2432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9980
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_REPLICA)
		}
	case 2433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9981
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ALWAYS)
		}
	case 2434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9982
		{
			yyVAL.ival = int(ast.TRIGGER_DISABLED)
		}
	case 2435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9987
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9992
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2437:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10000
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[4].list)
		}
	case 2438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10007
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(ast.NewString(yyDollar[1].str))
		}
	case 2439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10012
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2440:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10026
		{
			yyVAL.stmt = ast.NewCreateTableSpaceStmt(yyDollar[3].str, yyDollar[4].rolespec, yyDollar[6].str, yyDollar[7].list)
		}
	case 2441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10032
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 2442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10033
		{
			yyVAL.rolespec = nil
		}
	case 2443:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10038
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, false)
		}
	case 2444:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10042
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, true)
		}
	case 2445:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10057
		{
			yyVAL.stmt = ast.NewCreatePolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].bval, yyDollar[7].str, yyDollar[8].list, yyDollar[9].node, yyDollar[10].node)
		}
	case 2446:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10065
		{
			yyVAL.stmt = ast.NewAlterPolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].list, yyDollar[7].node, yyDollar[8].node)
		}
	case 2447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10072
		{
			// Check for "permissive" or "restrictive" (case-insensitive)
			if strings.EqualFold(yyDollar[2].str, "permissive") {
				yyVAL.bval = true
			} else if strings.EqualFold(yyDollar[2].str, "restrictive") {
				yyVAL.bval = false
			} else {
				// Parser will error on invalid value
				yylex.Error("unrecognized row security option")
				return 1
			}
		}
	case 2448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10084
		{
			yyVAL.bval = true
		}
	case 2449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10088
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10089
		{
			yyVAL.str = "all"
		}
	case 2451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10093
		{
			yyVAL.str = "all"
		}
	case 2452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10094
		{
			yyVAL.str = "select"
		}
	case 2453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10095
		{
			yyVAL.str = "insert"
		}
	case 2454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10096
		{
			yyVAL.str = "update"
		}
	case 2455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10097
		{
			yyVAL.str = "delete"
		}
	case 2456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10101
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10102
		{
			// Default to PUBLIC when no TO clause is specified
			publicRole := ast.NewRoleSpec(ast.ROLESPEC_PUBLIC, "")
			yyVAL.list = ast.NewNodeList(publicRole)
		}
	case 2458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10110
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10111
		{
			yyVAL.list = nil
		}
	case 2460:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10115
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10116
		{
			yyVAL.node = nil
		}
	case 2462:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10120
		{
			yyVAL.node = yyDollar[4].node
		}
	case 2463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10121
		{
			yyVAL.node = nil
		}
	case 2464:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10132
		{
			yyVAL.stmt = ast.NewCreateAmStmt(yyDollar[4].str, ast.AmType(yyDollar[6].ival), yyDollar[8].list)
		}
	case 2465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10138
		{
			yyVAL.ival = int(ast.AMTYPE_INDEX)
		}
	case 2466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10139
		{
			yyVAL.ival = int(ast.AMTYPE_TABLE)
		}
	case 2467:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10150
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[3].list, yyDollar[4].list, yyDollar[6].list, yyDollar[8].list, "", false, false)
		}
	case 2468:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10154
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[6].list, yyDollar[7].list, yyDollar[9].list, yyDollar[11].list, "", false, true)
		}
	case 2469:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10161
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[3].list, yyDollar[6].node, false)
		}
	case 2470:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10165
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[5].list, yyDollar[8].node, true)
		}
	case 2471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10171
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].statelem)
		}
	case 2472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10172
		{
			yyDollar[1].list.Append(yyDollar[3].statelem)
			yyVAL.list = yyDollar[1].list
		}
	case 2473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10176
		{
			yyVAL.statelem = ast.NewStatsElem(yyDollar[1].str)
		}
	case 2474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10177
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[1].node)
		}
	case 2475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10178
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[2].node)
		}
	case 2476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10189
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, false, yyDollar[4].list)
		}
	case 2477:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10193
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, true, yyDollar[7].list)
		}
	case 2478:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10197
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, yyDollar[5].list, false, yyDollar[6].list)
		}
	case 2479:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10204
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, yyDollar[5].list, nil, ast.AP_SetOptions)
		}
	case 2480:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10208
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_AddObjects)
		}
	case 2481:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10212
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_SetObjects)
		}
	case 2482:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10216
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_DropObjects)
		}
	case 2483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10222
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10223
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2485:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10228
		{
			pubTable := ast.NewPublicationTable(yyDollar[2].rangevar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_TABLE, pubTable)
		}
	case 2486:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10233
		{
			yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_TABLES_IN_SCHEMA, yyDollar[4].str)
		}
	case 2487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10237
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA)
		}
	case 2488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10241
		{
			// If either a row filter or column list is specified, create a PublicationTable object
			if yyDollar[2].list != nil || yyDollar[3].node != nil {
				// Create a simple RangeVar from the ColId
				rangeVar := ast.NewRangeVar(yyDollar[1].str, "", "")
				pubTable := ast.NewPublicationTable(rangeVar, yyDollar[3].node, yyDollar[2].list)
				yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
			} else {
				yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_CONTINUATION, yyDollar[1].str)
			}
		}
	case 2489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10253
		{
			rangeVar := makeRangeVarFromQualifiedName(yyDollar[1].str, yyDollar[2].list, -1)
			pubTable := ast.NewPublicationTable(rangeVar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10259
		{
			pubTable := ast.NewPublicationTable(yyDollar[1].rangevar, yyDollar[3].node, yyDollar[2].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10264
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_CONTINUATION)
		}
	case 2492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10270
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10271
		{
			yyVAL.node = nil
		}
	case 2494:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10282
		{
			yyVAL.stmt = ast.NewCreateSubscriptionStmt(yyDollar[3].str, yyDollar[5].str, yyDollar[7].list, yyDollar[8].list)
		}
	case 2495:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10289
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_OPTIONS, "", nil, yyDollar[5].list)
		}
	case 2496:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10293
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_CONNECTION, yyDollar[5].str, nil, nil)
		}
	case 2497:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10297
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_REFRESH, "", nil, yyDollar[6].list)
		}
	case 2498:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10301
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ADD_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2499:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10305
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_DROP_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2500:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10309
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SET_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2501:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10313
		{
			enableOpt := ast.NewNodeList()
			enableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(true)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, enableOpt)
		}
	case 2502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10319
		{
			disableOpt := ast.NewNodeList()
			disableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(false)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, disableOpt)
		}
	case 2503:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10325
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SKIP, "", nil, yyDollar[5].list)
		}
	case 2504:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10338
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, yyDollar[10].objwithargs, ast.CoercionContext(yyDollar[11].ival), false)
		}
	case 2505:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10342
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), false)
		}
	case 2506:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10346
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), true)
		}
	case 2507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10352
		{
			yyVAL.ival = int(ast.COERCION_IMPLICIT)
		}
	case 2508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10353
		{
			yyVAL.ival = int(ast.COERCION_ASSIGNMENT)
		}
	case 2509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10354
		{
			yyVAL.ival = int(ast.COERCION_EXPLICIT)
		}
	case 2510:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:10366
		{
			yyVAL.stmt = ast.NewCreateOpClassStmt(yyDollar[4].list, yyDollar[11].list, yyDollar[10].str, yyDollar[8].typnam, yyDollar[13].list, yyDollar[5].bval)
		}
	case 2511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10372
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10373
		{
			yyVAL.list = nil
		}
	case 2513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10377
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10378
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2515:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10383
		{
			// Create ObjectWithArgs for simple operator
			owa := ast.NewObjectWithArgs(yyDollar[3].list, nil, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, yyDollar[4].list)
		}
	case 2516:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10389
		{
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, yyDollar[3].objwithargs, yyDollar[4].list)
		}
	case 2517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10393
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[3].objwithargs, nil)
		}
	case 2518:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10397
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[6].objwithargs, yyDollar[4].list)
		}
	case 2519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10401
		{
			yyVAL.node = ast.NewOpClassItemStorage(yyDollar[2].typnam)
		}
	case 2520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10407
		{
			yyVAL.bval = true
		}
	case 2521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10408
		{
			yyVAL.bval = false
		}
	case 2522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10412
		{
			yyVAL.list = nil
		}
	case 2523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10413
		{
			yyVAL.list = yyDollar[4].list
		}
	case 2524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10414
		{
			yyVAL.list = nil
		}
	case 2525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10418
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].typnam)
		}
	case 2526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10419
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2527:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10430
		{
			yyVAL.stmt = ast.NewCreateOpFamilyStmt(yyDollar[4].list, yyDollar[6].str)
		}
	case 2528:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10443
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, false, yyDollar[8].list)
		}
	case 2529:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10447
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, true, yyDollar[8].list)
		}
	case 2530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10453
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10454
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2532:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10459
		{
			// Create ObjectWithArgs for operator with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, nil)
		}
	case 2533:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10465
		{
			// Create ObjectWithArgs for function with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, owa, nil)
		}
	case 2534:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10480
		{
			yyVAL.stmt = ast.NewCreateConversionStmt(yyDollar[4].list, yyDollar[6].str, yyDollar[8].str, yyDollar[10].list, yyDollar[2].bval)
		}
	case 2535:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10493
		{
			yyVAL.stmt = ast.NewCreateTransformStmt(yyDollar[2].bval, yyDollar[5].typnam, yyDollar[7].str, linitial(yyDollar[9].list), lsecond(yyDollar[9].list))
		}
	case 2536:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10500
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs)  // fromsql
			yyVAL.list.Append(yyDollar[11].objwithargs) // tosql
		}
	case 2537:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10506
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[11].objwithargs) // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs)  // tosql
		}
	case 2538:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10512
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs) // fromsql
			yyVAL.list.Append(nil)                     // tosql
		}
	case 2539:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10518
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(nil)                     // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs) // tosql
		}
	case 2540:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10533
		{
			// Parameterless CREATE LANGUAGE is now treated as CREATE EXTENSION
			yyVAL.stmt = ast.NewCreateExtensionStmt(yyDollar[6].str, yyDollar[2].bval, nil)
		}
	case 2541:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10539
		{
			yyVAL.stmt = ast.NewCreatePLangStmt(yyDollar[2].bval, yyDollar[6].str, yyDollar[8].list, yyDollar[9].list, yyDollar[10].list, yyDollar[3].bval)
		}
	case 2542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10545
		{
			yyVAL.bval = true
		}
	case 2543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10546
		{
			yyVAL.bval = false
		}
	case 2544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10551
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10552
		{
			yyVAL.list = nil
		}
	case 2546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10556
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10557
		{
			yyVAL.list = nil
		}
	case 2548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10561
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10562
		{
			yyVAL.list = nil
		}
	case 2550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10565
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_ALL
		}
	case 2551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10566
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DISTINCT
		}
	case 2552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10567
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DEFAULT
		}
	case 2553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10572
		{
			yyVAL.groupClause = &ast.GroupClause{
				Distinct: yyDollar[3].setquant == ast.SET_QUANTIFIER_DISTINCT,
				List:     yyDollar[4].list,
			}
		}
	case 2554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10579
		{
			yyVAL.groupClause = nil
		}
	case 2555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10585
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10586
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10590
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10591
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10592
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10593
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10594
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10599
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_EMPTY, ast.NewNodeList(), 0)
		}
	case 2563:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10606
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_ROLLUP, yyDollar[3].list, 0)
		}
	case 2564:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10613
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_CUBE, yyDollar[3].list, 0)
		}
	case 2565:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10620
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_SETS, yyDollar[4].list, 0)
		}
	case 2566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10629
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10630
		{
			yyVAL.node = nil
		}
	case 2568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10637
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10641
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10642
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10647
		{
			sortBy := ast.NewSortBy(yyDollar[1].node, ast.SORTBY_USING, ast.SortByNulls(yyDollar[4].ival), 0)
			// Use qual_all_Op (NodeList) directly for UseOp
			sortBy.UseOp = yyDollar[3].list
			yyVAL.node = sortBy
		}
	case 2572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10654
		{
			yyVAL.node = ast.NewSortBy(yyDollar[1].node, ast.SortByDir(yyDollar[2].ival), ast.SortByNulls(yyDollar[3].ival), 0)
		}
	case 2573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10665
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10667
		{
			yyVAL.list = nil
		}
	case 2575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10672
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[1].windef)
		}
	case 2576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10677
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[3].windef)
		}
	case 2577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10685
		{
			n := yyDollar[3].windef
			n.Name = yyDollar[1].str
			yyVAL.windef = n
		}
	case 2578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10694
		{
			yyVAL.windef = yyDollar[2].windef
		}
	case 2579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10696
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			yyVAL.windef = n
		}
	case 2580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10703
		{
			yyVAL.windef = nil
		}
	case 2581:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10708
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.PartitionClause = yyDollar[3].list
			n.OrderClause = yyDollar[4].list

			n.FrameOptions = yyDollar[5].windef.FrameOptions
			n.StartOffset = yyDollar[5].windef.StartOffset
			n.EndOffset = yyDollar[5].windef.EndOffset
			yyVAL.windef = n
		}
	case 2582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10722
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10723
		{
			yyVAL.str = ""
		}
	case 2584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10727
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10728
		{
			yyVAL.list = nil
		}
	case 2586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10733
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_RANGE
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10740
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_ROWS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10747
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_GROUPS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10754
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10765
		{
			n := yyDollar[1].windef
			// reject invalid cases - these would be runtime errors in PostgreSQL
			if (n.FrameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (n.FrameOptions & ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 {
				yylex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			n.FrameOptions |= ast.FRAMEOPTION_END_CURRENT_ROW
			yyVAL.windef = n
		}
	case 2591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10779
		{
			n1 := yyDollar[2].windef
			n2 := yyDollar[4].windef

			// form merged options
			frameOptions := n1.FrameOptions
			// shift converts START_ options to END_ options
			frameOptions |= (n2.FrameOptions << 1)
			frameOptions |= ast.FRAMEOPTION_BETWEEN

			// reject invalid cases
			if (frameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (frameOptions & ast.FRAMEOPTION_END_UNBOUNDED_PRECEDING) != 0 {
				yylex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_CURRENT_ROW) != 0 &&
				(frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 {
				yylex.Error("frame starting from current row cannot have preceding rows")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 &&
				((frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 ||
					(frameOptions&ast.FRAMEOPTION_END_CURRENT_ROW) != 0) {
				yylex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			n1.FrameOptions = frameOptions
			n1.EndOffset = n2.StartOffset
			yyVAL.windef = n1
		}
	case 2592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10814
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_PRECEDING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10822
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10830
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_CURRENT_ROW
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10838
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_PRECEDING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10846
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_FOLLOWING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10856
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_CURRENT_ROW
		}
	case 2598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10857
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_GROUP
		}
	case 2599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10858
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_TIES
		}
	case 2600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10859
		{
			yyVAL.ival = 0
		}
	case 2601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10860
		{
			yyVAL.ival = 0
		}
	case 2602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10869
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[2].node
		}
	case 2603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10874
		{
			yyVAL.selectLimit = yyDollar[2].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[1].node
		}
	case 2604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10879
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10883
		{
			n := &selectLimit{}
			n.limitOffset = yyDollar[1].node
			n.limitCount = nil
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10893
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10894
		{
			yyVAL.selectLimit = nil
		}
	case 2608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10899
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[2].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2609:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10907
		{
			// Disabled because it was too confusing - PostgreSQL error
			yylex.Error("LIMIT #,# syntax is not supported. Use separate LIMIT and OFFSET clauses.")
			return 1
		}
	case 2610:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10914
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2611:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10922
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2612:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10930
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2613:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10938
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10949
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10952
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10956
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10958
		{
			/* LIMIT ALL is represented as a NULL constant */
			yyVAL.node = ast.NewA_Const(ast.NewNull(), -1)
		}
	case 2618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10965
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10978
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10980
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("+")}}, nil, yyDollar[2].node, -1)
		}
	case 2621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10984
		{
			// Create a unary minus expression
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("-")}}, nil, yyDollar[2].node, -1)
		}
	case 2622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10991
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), -1)
		}
	case 2623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10992
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), -1)
		}
	case 2624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10997
		{
			yyVAL.ival = 0
		}
	case 2625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10998
		{
			yyVAL.ival = 0
		}
	case 2626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11002
		{
			yyVAL.ival = 0
		}
	case 2627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11003
		{
			yyVAL.ival = 0
		}
	}
	goto yystack /* stack new state and value */
}
