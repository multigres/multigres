// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
	"strings"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// SelectLimit - Private struct for the result of opt_select_limit production
// Mirrors PostgreSQL's SelectLimit from gram.y:126-132
type selectLimit struct {
	limitOffset ast.Node
	limitCount  ast.Node
	limitOption ast.LimitOption
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// PrivTarget - represents a privilege target for GRANT/REVOKE statements
// Internal struct for handling privilege_target grammar rule
type PrivTarget struct {
	targtype ast.GrantTargetType
	objtype  ast.ObjectType
	objs     *ast.NodeList
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:51
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node        ast.Node
	stmt        ast.Stmt
	stmtList    []ast.Stmt
	list        *ast.NodeList
	groupClause *ast.GroupClause
	selectLimit *selectLimit

	// Specific AST node types
	into          *ast.IntoClause
	onconflict    *ast.OnConflictClause
	windef        *ast.WindowDef
	createStmt    *ast.CreateStmt
	indexStmt     *ast.IndexStmt
	alterStmt     *ast.AlterTableStmt
	dropStmt      *ast.DropStmt
	columnDef     *ast.ColumnDef
	constraint    *ast.Constraint
	indexElem     *ast.IndexElem
	alterCmd      *ast.AlterTableCmd
	with          *ast.WithClause
	rangevar      *ast.RangeVar
	objType       ast.ObjectType
	dropBehav     ast.DropBehavior
	setquant      ast.SetQuantifier
	typnam        *ast.TypeName
	partspec      *ast.PartitionSpec
	partboundspec *ast.PartitionBoundSpec
	oncommit      ast.OnCommitAction
	defelt        *ast.DefElem
	target        *ast.ResTarget            // For select targets, insert columns
	alias         *ast.Alias                // For table and column aliases
	jtype         ast.JoinType              // For join type specifications
	jexpr         *ast.JoinExpr             // For joined table expressions
	keyaction     *ast.KeyAction            // For foreign key actions
	keyactions    *ast.KeyActions           // For foreign key action sets
	funparam      *ast.FunctionParameter    // For function parameters
	funparammode  ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt      *ast.VariableSetStmt      // For SET/RESET statements
	rolespec      *ast.RoleSpec
	objwithargs   *ast.ObjectWithArgs
	statelem      *ast.StatsElem
	accesspriv    *ast.AccessPriv     // For privilege specifications
	privtarget    *PrivTarget         // For privilege target specifications
	vacrel        *ast.VacuumRelation // For vacuum relation specifications

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const VALUES = 57428
const SEARCH = 57429
const BREADTH = 57430
const DEPTH = 57431
const CYCLE = 57432
const FIRST_P = 57433
const LAST_P = 57434
const SET = 57435
const ASC = 57436
const DESC = 57437
const INSERT = 57438
const UPDATE = 57439
const DELETE_P = 57440
const MERGE = 57441
const RETURNING = 57442
const CONFLICT = 57443
const OVERRIDING = 57444
const USER = 57445
const SYSTEM_P = 57446
const MATCHED = 57447
const THEN = 57448
const SOURCE = 57449
const TARGET = 57450
const DO = 57451
const NOTHING = 57452
const COPY = 57453
const PROGRAM = 57454
const STDIN = 57455
const STDOUT = 57456
const BINARY = 57457
const FREEZE = 57458
const CONSTRAINT = 57459
const VERBOSE = 57460
const ANALYZE = 57461
const CURRENT_P = 57462
const CURSOR = 57463
const OF = 57464
const COLUMNS = 57465
const ORDINALITY = 57466
const XMLTABLE = 57467
const JSON_TABLE = 57468
const ROWS = 57469
const PATH = 57470
const PASSING = 57471
const FOR = 57472
const NESTED = 57473
const REF_P = 57474
const XMLNAMESPACES = 57475
const ARRAY = 57476
const ERROR = 57477
const ERROR_P = 57478
const EMPTY = 57479
const EMPTY_P = 57480
const OBJECT_P = 57481
const WRAPPER = 57482
const CONDITIONAL = 57483
const UNCONDITIONAL = 57484
const QUOTES = 57485
const OMIT = 57486
const KEEP = 57487
const SCALAR = 57488
const STRING_P = 57489
const ENCODING = 57490
const DELIMITER = 57491
const DELIMITERS = 57492
const HEADER_P = 57493
const QUOTE = 57494
const FORCE = 57495
const CSV = 57496
const VALUE_P = 57497
const JSON_QUERY = 57498
const JSON_VALUE = 57499
const JSON_SERIALIZE = 57500
const JSON_OBJECT = 57501
const JSON_ARRAY = 57502
const JSON_OBJECTAGG = 57503
const JSON_ARRAYAGG = 57504
const JSON_EXISTS = 57505
const JSON_SCALAR = 57506
const FORMAT = 57507
const JSON = 57508
const UTF8 = 57509
const WITHOUT = 57510
const BIT = 57511
const NUMERIC = 57512
const INTEGER = 57513
const SMALLINT = 57514
const BIGINT = 57515
const REAL = 57516
const FLOAT_P = 57517
const DOUBLE_P = 57518
const PRECISION = 57519
const CHARACTER = 57520
const CHAR_P = 57521
const VARCHAR = 57522
const NATIONAL = 57523
const NCHAR = 57524
const VARYING = 57525
const TIMESTAMP = 57526
const INTERVAL = 57527
const INT_P = 57528
const DECIMAL_P = 57529
const DEC = 57530
const BOOLEAN_P = 57531
const VARIADIC = 57532
const ABORT_P = 57533
const ABSENT = 57534
const ABSOLUTE_P = 57535
const ACCESS = 57536
const ACTION = 57537
const ADD_P = 57538
const ADMIN = 57539
const AFTER = 57540
const AGGREGATE = 57541
const ALSO = 57542
const ALWAYS = 57543
const ANALYSE = 57544
const ASENSITIVE = 57545
const ASSERTION = 57546
const ASSIGNMENT = 57547
const ATOMIC = 57548
const ATTACH = 57549
const ATTRIBUTE = 57550
const AUTHORIZATION = 57551
const BACKWARD = 57552
const BEFORE = 57553
const BEGIN_P = 57554
const CACHE = 57555
const CALL = 57556
const CALLED = 57557
const CASCADED = 57558
const CATALOG_P = 57559
const CHAIN = 57560
const CHARACTERISTICS = 57561
const CHECKPOINT = 57562
const CLASS = 57563
const CLOSE = 57564
const CLUSTER = 57565
const COALESCE = 57566
const COLLATION = 57567
const COMMENT = 57568
const COMMENTS = 57569
const COMMIT = 57570
const COMMITTED = 57571
const COMPRESSION = 57572
const CONFIGURATION = 57573
const CONNECTION = 57574
const CONSTRAINTS = 57575
const CONTENT_P = 57576
const CONTINUE_P = 57577
const CONVERSION_P = 57578
const COST = 57579
const CUBE = 57580
const CURRENT_CATALOG = 57581
const CURRENT_DATE = 57582
const CURRENT_ROLE = 57583
const CURRENT_SCHEMA = 57584
const CURRENT_TIME = 57585
const CURRENT_TIMESTAMP = 57586
const CURRENT_USER = 57587
const DATA_P = 57588
const DATABASE = 57589
const DAY_P = 57590
const DEALLOCATE = 57591
const DECLARE = 57592
const DEFAULTS = 57593
const DEFERRABLE = 57594
const DEFERRED = 57595
const DEFINER = 57596
const DEPENDS = 57597
const DETACH = 57598
const DICTIONARY = 57599
const DISABLE_P = 57600
const DISCARD = 57601
const DOCUMENT_P = 57602
const DOMAIN_P = 57603
const EACH = 57604
const ELSE = 57605
const ENABLE_P = 57606
const ENCRYPTED = 57607
const END_P = 57608
const ENUM_P = 57609
const EVENT = 57610
const EXCEPT = 57611
const EXCLUDE = 57612
const EXCLUDING = 57613
const EXCLUSIVE = 57614
const EXECUTE = 57615
const EXPLAIN = 57616
const EXPRESSION = 57617
const EXTENSION = 57618
const EXTERNAL = 57619
const EXTRACT = 57620
const FAMILY = 57621
const FETCH = 57622
const FILTER = 57623
const FINALIZE = 57624
const FOLLOWING = 57625
const FOREIGN = 57626
const FORWARD = 57627
const FUNCTION = 57628
const FUNCTIONS = 57629
const GENERATED = 57630
const GLOBAL = 57631
const GRANT = 57632
const GRANTED = 57633
const GREATEST = 57634
const GROUPING = 57635
const GROUPS = 57636
const HANDLER = 57637
const HOLD = 57638
const HOUR_P = 57639
const IDENTITY_P = 57640
const IMMEDIATE = 57641
const IMMUTABLE = 57642
const IMPLICIT_P = 57643
const IMPORT_P = 57644
const INCLUDE = 57645
const INCLUDING = 57646
const INCREMENT = 57647
const INDENT = 57648
const INDEX = 57649
const INDEXES = 57650
const INHERIT = 57651
const INHERITS = 57652
const INITIALLY = 57653
const INLINE_P = 57654
const INPUT_P = 57655
const INSENSITIVE = 57656
const INSTEAD = 57657
const INTERSECT = 57658
const INVOKER = 57659
const ISOLATION = 57660
const KEYS = 57661
const LABEL = 57662
const LANGUAGE = 57663
const LARGE_P = 57664
const LATERAL_P = 57665
const LEAKPROOF = 57666
const LEAST = 57667
const LEADING = 57668
const LEVEL = 57669
const LISTEN = 57670
const LOAD = 57671
const LOCALTIME = 57672
const LOCALTIMESTAMP = 57673
const LOCATION = 57674
const LOCK_P = 57675
const LOCKED = 57676
const LOGGED = 57677
const MAPPING = 57678
const MATCH = 57679
const MAXVALUE = 57680
const MERGE_ACTION = 57681
const METHOD = 57682
const MINUTE_P = 57683
const MINVALUE = 57684
const MODE = 57685
const MONTH_P = 57686
const MOVE = 57687
const NAME_P = 57688
const NAMES = 57689
const NEW = 57690
const NEXT = 57691
const NFC = 57692
const NFD = 57693
const NFKC = 57694
const NFKD = 57695
const NO = 57696
const NONE = 57697
const NORMALIZE = 57698
const NORMALIZED = 57699
const NOTIFY = 57700
const NOWAIT = 57701
const NULLIF = 57702
const OUT_P = 57703
const OVERLAY = 57704
const OVERLAPS = 57705
const OWNED = 57706
const OWNER = 57707
const PARALLEL = 57708
const PARAMETER = 57709
const PARSER = 57710
const PARTIAL = 57711
const PARTITION = 57712
const PASSWORD = 57713
const PLACING = 57714
const PLAN = 57715
const PLANS = 57716
const POLICY = 57717
const POSITION = 57718
const PRECEDING = 57719
const PREPARE = 57720
const PREPARED = 57721
const PRESERVE = 57722
const PRIMARY = 57723
const PRIOR = 57724
const PRIVILEGES = 57725
const PROCEDURAL = 57726
const PROCEDURE = 57727
const PROCEDURES = 57728
const PUBLICATION = 57729
const RANGE = 57730
const READ = 57731
const REASSIGN = 57732
const RECHECK = 57733
const REFERENCES = 57734
const REFERENCING = 57735
const REFRESH = 57736
const REINDEX = 57737
const RELATIVE_P = 57738
const RELEASE = 57739
const RENAME = 57740
const REPEATABLE = 57741
const REPLICA = 57742
const RESET = 57743
const RESTART = 57744
const RETURN = 57745
const RETURNS = 57746
const REVOKE = 57747
const ROLE = 57748
const ROLLBACK = 57749
const ROLLUP = 57750
const ROUTINE = 57751
const ROUTINES = 57752
const ROW = 57753
const RULE = 57754
const SAVEPOINT = 57755
const SCHEMA = 57756
const SCHEMAS = 57757
const SCROLL = 57758
const SECOND_P = 57759
const SECURITY = 57760
const SEQUENCE = 57761
const SEQUENCES = 57762
const SERIALIZABLE = 57763
const SERVER = 57764
const SESSION = 57765
const SESSION_USER = 57766
const SETS = 57767
const SETOF = 57768
const SHARE = 57769
const SHOW = 57770
const SIMPLE = 57771
const SKIP = 57772
const SNAPSHOT = 57773
const SOME = 57774
const SQL_P = 57775
const STABLE = 57776
const STANDALONE_P = 57777
const START = 57778
const STATEMENT = 57779
const STATISTICS = 57780
const STORAGE = 57781
const STORED = 57782
const STRICT_P = 57783
const STRIP_P = 57784
const SUBSCRIPTION = 57785
const SUBSTRING = 57786
const SUPPORT = 57787
const SYSID = 57788
const SYSTEM_USER = 57789
const TABLES = 57790
const TABLESPACE = 57791
const TABLESAMPLE = 57792
const TEMP = 57793
const TEMPLATE = 57794
const TEMPORARY = 57795
const TEXT_P = 57796
const TIES = 57797
const TRAILING = 57798
const TRANSACTION = 57799
const TRANSFORM = 57800
const TREAT = 57801
const TRIGGER = 57802
const TRIM = 57803
const TRUNCATE = 57804
const TRUSTED = 57805
const TYPE_P = 57806
const TYPES_P = 57807
const UESCAPE = 57808
const UNBOUNDED = 57809
const UNCOMMITTED = 57810
const UNENCRYPTED = 57811
const UNION = 57812
const UNIQUE = 57813
const UNLISTEN = 57814
const UNLOGGED = 57815
const UNTIL = 57816
const VACUUM = 57817
const VALID = 57818
const VALIDATE = 57819
const VALIDATOR = 57820
const VERSION_P = 57821
const VIEW = 57822
const VIEWS = 57823
const VOLATILE = 57824
const WHITESPACE_P = 57825
const WINDOW = 57826
const WITHIN = 57827
const WORK = 57828
const WRITE = 57829
const XML_P = 57830
const XMLATTRIBUTES = 57831
const XMLCONCAT = 57832
const XMLELEMENT = 57833
const XMLEXISTS = 57834
const XMLFOREST = 57835
const XMLPARSE = 57836
const XMLPI = 57837
const XMLROOT = 57838
const XMLSERIALIZE = 57839
const YEAR_P = 57840
const YES_P = 57841
const INOUT = 57842
const OTHERS = 57843
const OLD = 57844
const KEY = 57845
const OFF = 57846
const OIDS = 57847
const OPTION = 57848
const OPTIONS = 57849
const OVER = 57850
const ORDER = 57851
const ANY = 57852
const BOTH = 57853
const CAST = 57854
const CHECK = 57855
const COLUMN = 57856
const FORMAT_LA = 57857
const NOT_LA = 57858
const NULLS_LA = 57859
const WITH_LA = 57860
const WITHOUT_LA = 57861
const MODE_TYPE_NAME = 57862
const MODE_PLPGSQL_EXPR = 57863
const MODE_PLPGSQL_ASSIGN1 = 57864
const MODE_PLPGSQL_ASSIGN2 = 57865
const MODE_PLPGSQL_ASSIGN3 = 57866
const UMINUS = 57867

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ANALYSE",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:13980

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 99,
	540, 99,
	-2, 1605,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 102,
	1, 1519,
	26, 1519,
	36, 1519,
	74, 1519,
	100, 1519,
	532, 1519,
	540, 1519,
	-2, 1523,
	-1, 105,
	67, 1935,
	84, 1935,
	85, 2617,
	236, 2802,
	307, 2102,
	419, 1935,
	480, 1935,
	-2, 112,
	-1, 140,
	68, 1522,
	69, 1522,
	130, 1522,
	269, 1522,
	280, 1522,
	316, 1522,
	470, 1522,
	509, 1522,
	-2, 1524,
	-1, 152,
	1, 99,
	540, 99,
	-2, 1605,
	-1, 194,
	85, 2616,
	-2, 1934,
	-1, 271,
	61, 319,
	64, 319,
	527, 319,
	533, 319,
	-2, 2658,
	-1, 737,
	1, 322,
	540, 322,
	-2, 3129,
	-1, 738,
	1, 363,
	540, 363,
	-2, 3129,
	-1, 739,
	1, 254,
	540, 254,
	-2, 3129,
	-1, 740,
	1, 296,
	540, 296,
	-2, 3129,
	-1, 745,
	1, 258,
	540, 258,
	-2, 3129,
	-1, 746,
	1, 175,
	540, 175,
	-2, 3129,
	-1, 770,
	68, 1508,
	69, 1508,
	130, 1508,
	280, 1508,
	-2, 1525,
	-1, 776,
	68, 1509,
	69, 1509,
	130, 1509,
	280, 1509,
	-2, 1528,
	-1, 833,
	84, 1935,
	480, 1935,
	-2, 111,
	-1, 835,
	209, 100,
	-2, 2623,
	-1, 939,
	7, 1435,
	16, 1435,
	17, 1435,
	531, 1435,
	-2, 118,
	-1, 940,
	7, 1436,
	16, 1436,
	17, 1436,
	531, 1436,
	-2, 119,
	-1, 948,
	531, 1437,
	-2, 3081,
	-1, 967,
	93, 2938,
	398, 2138,
	401, 2938,
	-2, 2031,
	-1, 971,
	93, 2938,
	398, 2138,
	401, 2938,
	-2, 2031,
	-1, 1122,
	74, 128,
	-2, 133,
	-1, 1176,
	68, 1508,
	69, 1508,
	130, 1508,
	280, 1508,
	-2, 1529,
	-1, 1230,
	7, 1226,
	531, 1226,
	-2, 500,
	-1, 1245,
	7, 551,
	16, 551,
	17, 551,
	531, 551,
	-2, 1274,
	-1, 1267,
	7, 1480,
	-2, 501,
	-1, 1275,
	7, 1450,
	-2, 484,
	-1, 1276,
	7, 1485,
	531, 1485,
	-2, 485,
	-1, 1277,
	7, 1457,
	-2, 486,
	-1, 1278,
	7, 1485,
	531, 1485,
	-2, 487,
	-1, 1279,
	7, 1485,
	531, 1485,
	-2, 488,
	-1, 1280,
	7, 1444,
	-2, 490,
	-1, 1281,
	7, 1444,
	-2, 491,
	-1, 1282,
	7, 1487,
	-2, 494,
	-1, 1283,
	7, 1447,
	-2, 498,
	-1, 1284,
	7, 1448,
	-2, 499,
	-1, 1286,
	7, 1485,
	531, 1485,
	-2, 515,
	-1, 1287,
	7, 1444,
	-2, 519,
	-1, 1288,
	7, 1451,
	-2, 524,
	-1, 1289,
	7, 1449,
	-2, 527,
	-1, 1290,
	7, 1483,
	-2, 529,
	-1, 1291,
	7, 1483,
	-2, 530,
	-1, 1292,
	7, 1468,
	531, 1468,
	-2, 534,
	-1, 1445,
	6, 2031,
	12, 2031,
	534, 2031,
	535, 2031,
	-2, 2024,
	-1, 1494,
	531, 1361,
	-2, 3083,
	-1, 1759,
	127, 2900,
	411, 2900,
	-2, 1099,
	-1, 1793,
	21, 1398,
	432, 1398,
	510, 1398,
	-2, 861,
	-1, 1795,
	21, 1400,
	432, 1400,
	510, 1400,
	-2, 808,
	-1, 1800,
	1, 677,
	26, 677,
	36, 677,
	64, 677,
	65, 677,
	68, 677,
	69, 677,
	71, 677,
	72, 677,
	73, 677,
	74, 677,
	100, 677,
	130, 677,
	269, 677,
	280, 677,
	316, 677,
	470, 677,
	484, 677,
	509, 677,
	515, 677,
	532, 677,
	540, 677,
	541, 677,
	-2, 1514,
	-1, 1805,
	21, 1492,
	432, 1492,
	510, 1492,
	-2, 1488,
	-1, 2262,
	68, 1523,
	69, 1523,
	130, 1523,
	269, 1523,
	280, 1523,
	316, 1523,
	470, 1523,
	509, 1523,
	-2, 1195,
	-1, 2271,
	7, 1361,
	531, 1361,
	-2, 1244,
	-1, 2489,
	117, 112,
	307, 2102,
	460, 112,
	-2, 1935,
	-1, 2539,
	536, 133,
	-2, 2488,
	-1, 2567,
	531, 2104,
	-2, 243,
	-1, 2643,
	40, 1444,
	134, 1444,
	509, 1444,
	527, 1444,
	529, 1444,
	532, 1444,
	541, 1444,
	-2, 1439,
	-1, 2900,
	36, 2905,
	66, 2905,
	-2, 525,
	-1, 2901,
	36, 2906,
	66, 2906,
	-2, 398,
	-1, 2907,
	127, 2903,
	411, 2903,
	-2, 1208,
	-1, 2908,
	127, 2904,
	411, 2904,
	-2, 1209,
	-1, 2924,
	1, 443,
	26, 443,
	36, 443,
	64, 443,
	65, 443,
	68, 443,
	69, 443,
	71, 443,
	72, 443,
	74, 443,
	100, 443,
	130, 443,
	269, 443,
	280, 443,
	316, 443,
	470, 443,
	484, 443,
	509, 443,
	515, 443,
	529, 443,
	532, 443,
	533, 443,
	540, 443,
	-2, 142,
	-1, 2925,
	1, 441,
	26, 441,
	36, 441,
	64, 441,
	65, 441,
	68, 441,
	69, 441,
	71, 441,
	72, 441,
	74, 441,
	100, 441,
	130, 441,
	269, 441,
	280, 441,
	316, 441,
	470, 441,
	484, 441,
	509, 441,
	515, 441,
	529, 441,
	532, 441,
	533, 441,
	540, 441,
	-2, 142,
	-1, 2928,
	1, 460,
	26, 460,
	36, 460,
	64, 460,
	65, 460,
	68, 460,
	69, 460,
	71, 460,
	72, 460,
	74, 460,
	100, 460,
	130, 460,
	269, 460,
	280, 460,
	316, 460,
	470, 460,
	484, 460,
	509, 460,
	515, 460,
	529, 460,
	532, 460,
	533, 460,
	540, 460,
	-2, 142,
	-1, 2942,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1112,
	-1, 2943,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1113,
	-1, 2944,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1114,
	-1, 2945,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1115,
	-1, 2946,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1116,
	-1, 2947,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1117,
	-1, 2951,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1124,
	-1, 2957,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1128,
	-1, 3002,
	363, 1388,
	-2, 1391,
	-1, 3012,
	16, 1439,
	17, 1439,
	-2, 1360,
	-1, 3090,
	68, 1523,
	69, 1523,
	130, 1523,
	269, 1523,
	280, 1523,
	316, 1523,
	470, 1523,
	509, 1523,
	-2, 1195,
	-1, 3214,
	209, 100,
	-2, 2623,
	-1, 3287,
	536, 134,
	-2, 2488,
	-1, 3390,
	507, 2563,
	-2, 2556,
	-1, 3604,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1126,
	-1, 3605,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1130,
	-1, 3611,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1132,
	-1, 3646,
	363, 1387,
	-2, 1390,
	-1, 3795,
	75, 1627,
	76, 1627,
	77, 1627,
	78, 1627,
	79, 1627,
	81, 1627,
	82, 1627,
	-2, 1523,
	-1, 3809,
	531, 1361,
	-2, 134,
	-1, 3816,
	150, 1867,
	-2, 1802,
	-1, 3996,
	6, 2031,
	12, 2031,
	534, 2031,
	535, 2031,
	-2, 2005,
	-1, 4171,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1125,
	-1, 4174,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1134,
	-1, 4177,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1129,
	-1, 4182,
	52, 0,
	53, 0,
	54, 0,
	-2, 1147,
	-1, 4189,
	21, 1397,
	432, 1397,
	510, 1397,
	-2, 1489,
	-1, 4193,
	363, 1389,
	-2, 1392,
	-1, 4231,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1177,
	-1, 4232,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1178,
	-1, 4233,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1179,
	-1, 4234,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1180,
	-1, 4235,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1181,
	-1, 4236,
	18, 0,
	19, 0,
	20, 0,
	525, 0,
	526, 0,
	527, 0,
	-2, 1182,
	-1, 4615,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1127,
	-1, 4616,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1131,
	-1, 4620,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1133,
	-1, 4621,
	52, 0,
	53, 0,
	54, 0,
	-2, 1148,
	-1, 4624,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1149,
	-1, 4625,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1151,
	-1, 4752,
	540, 99,
	-2, 1605,
	-1, 4898,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1135,
	-1, 4899,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1150,
	-1, 4900,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 1152,
	-1, 4909,
	52, 0,
	-2, 1185,
	-1, 5162,
	52, 0,
	-2, 1186,
	-1, 5345,
	37, 0,
	44, 0,
	46, 0,
	48, 0,
	516, 0,
	-2, 483,
	-1, 5674,
	7, 1752,
	-2, 320,
	-1, 5700,
	7, 1480,
	-2, 501,
}

const yyPrivate = 57344

const yyLast = 103101

var yyAct = [...]int16{
	1209, 5671, 771, 5722, 5355, 5178, 3591, 4928, 5723, 5177,
	5535, 1195, 4734, 5167, 4423, 3115, 3048, 5672, 3675, 2257,
	5196, 4341, 907, 5268, 5422, 3169, 5248, 3823, 4686, 5410,
	4742, 2826, 3118, 2440, 5344, 5738, 3358, 2881, 3734, 5523,
	4825, 1632, 5061, 5297, 1433, 5405, 5144, 3165, 3589, 4534,
	5197, 3536, 3155, 5568, 4685, 4332, 5491, 3663, 5475, 4968,
	5145, 5142, 839, 5275, 5057, 2462, 5269, 3966, 5270, 1093,
	4967, 1351, 3839, 2916, 4677, 4926, 4991, 4123, 1659, 3223,
	101, 3131, 1807, 3529, 5343, 4577, 5320, 4824, 2578, 4328,
	5039, 5084, 1390, 4749, 3804, 3820, 3176, 3310, 3353, 4707,
	3215, 3915, 3073, 4398, 4540, 1150, 3485, 2638, 4473, 4535,
	274, 274, 3889, 3893, 4544, 2844, 678, 683, 686, 695,
	699, 4427, 5092, 4974, 274, 708, 10, 707, 9, 686,
	686, 686, 686, 686, 686, 760, 761, 763, 3840, 2329,
	3980, 4336, 4997, 1662, 4693, 4, 1223, 3133, 789, 4718,
	686, 686, 1492, 64, 1105, 122, 704, 6, 4894, 789,
	4260, 871, 3912, 789, 1170, 3276, 3159, 781, 142, 835,
	838, 843, 838, 4714, 838, 686, 3762, 686, 3875, 3453,
	1033, 686, 686, 4068, 838, 686, 686, 3161, 3141, 4391,
	710, 22, 4608, 709, 21, 3199, 1349, 687, 789, 789,
	789, 789, 991, 706, 8, 938, 838, 838, 686, 838,
	949, 2488, 20, 1369, 686, 949, 686, 949, 686, 686,
	686, 686, 686, 3787, 779, 3009, 686, 838, 1767, 838,
	686, 2487, 19, 838, 686, 686, 705, 7, 3011, 2486,
	13, 946, 2485, 12, 3554, 3892, 957, 3537, 959, 3471,
	1584, 1420, 3352, 842, 3995, 3325, 3974, 3277, 4457, 3958,
	2515, 3132, 2524, 274, 274, 2509, 3203, 3202, 3224, 2519,
	3190, 3400, 3186, 2461, 3158, 701, 3798, 4301, 10, 2442,
	9, 1641, 3779, 3119, 982, 1181, 813, 818, 142, 817,
	3674, 3204, 3074, 3649, 2834, 786, 803, 735, 1594, 4160,
	3623, 2967, 3023, 2551, 3743, 64, 810, 122, 2266, 6,
	2658, 1661, 3241, 3993, 3357, 1468, 1398, 696, 814, 2562,
	142, 3306, 2536, 3082, 1376, 3790, 1637, 2495, 1337, 142,
	3189, 3178, 1332, 3136, 1309, 3812, 3140, 2441, 3139, 788,
	767, 3138, 2409, 22, 3129, 920, 21, 1355, 3020, 3667,
	3016, 3063, 2968, 2977, 1756, 2974, 8, 1768, 2259, 1702,
	2906, 2896, 1111, 1575, 20, 816, 802, 1631, 1582, 981,
	935, 1554, 1463, 869, 3253, 261, 2636, 1399, 3240, 3239,
	2322, 1401, 166, 3152, 19, 1684, 834, 2281, 164, 7,
	1182, 2921, 13, 1652, 3046, 12, 1191, 1739, 815, 1737,
	1757, 1113, 1035, 1101, 2825, 1572, 988, 2853, 233, 232,
	2715, 743, 743, 700, 2663, 2535, 265, 187, 2716, 2523,
	1036, 1038, 3183, 140, 2468, 794, 732, 1740, 141, 754,
	1738, 1163, 1772, 715, 1066, 770, 1599, 690, 1629, 1496,
	1164, 1461, 2516, 267, 1165, 809, 660, 1156, 1531, 253,
	266, 1222, 792, 801, 837, 1100, 858, 3692, 860, 807,
	2845, 1735, 3745, 3668, 5790, 5668, 1474, 3592, 909, 4125,
	5788, 5667, 799, 5707, 1206, 5786, 3860, 3692, 4927, 5747,
	769, 3702, 3703, 3704, 5707, 775, 5201, 1133, 5512, 5318,
	942, 943, 2846, 945, 1206, 1562, 1562, 3692, 1562, 3859,
	1301, 3702, 3703, 3704, 5115, 5746, 1563, 1563, 3861, 1563,
	5734, 974, 1220, 977, 5747, 3706, 5113, 3690, 1562, 5377,
	1392, 5731, 3102, 4700, 2846, 3708, 688, 698, 1206, 1563,
	2415, 3692, 1392, 1435, 5715, 3702, 3703, 3704, 3124, 1206,
	5706, 4484, 3692, 2415, 3066, 3708, 5683, 4619, 5676, 5707,
	2654, 5658, 1775, 5081, 664, 5684, 211, 3767, 724, 5640,
	5337, 5598, 914, 915, 5597, 5585, 777, 718, 4948, 3706,
	2415, 776, 3949, 2415, 2848, 2846, 4863, 2417, 1206, 3708,
	870, 3692, 1773, 3642, 950, 3702, 3703, 3704, 775, 1733,
	3708, 870, 870, 2418, 3643, 5547, 5544, 966, 969, 1065,
	1437, 5520, 5482, 796, 5548, 5545, 5481, 3746, 3669, 5480,
	3901, 2817, 3707, 951, 5460, 2817, 5459, 1084, 2817, 3706,
	3648, 3562, 5645, 2415, 5644, 2415, 967, 971, 1736, 3708,
	1805, 1053, 5456, 1775, 2922, 5454, 5376, 5374, 1048, 1050,
	5373, 5457, 5353, 1029, 5455, 5377, 2415, 5352, 5242, 1565,
	5227, 3731, 2848, 5217, 3641, 5200, 2415, 4948, 2417, 2820,
	5192, 4617, 5218, 1805, 5199, 2415, 1775, 5191, 5066, 3901,
	1647, 1096, 1638, 766, 2418, 5055, 1565, 5067, 752, 5045,
	806, 2427, 3777, 1079, 2848, 5029, 4961, 5381, 3861, 2425,
	4960, 2417, 4959, 4957, 5028, 4962, 2422, 2426, 2421, 3901,
	2423, 3901, 1565, 4947, 4916, 2415, 1650, 2418, 4914, 4881,
	4821, 4820, 4948, 2415, 2427, 2846, 789, 4915, 4882, 4822,
	2848, 4819, 4813, 1436, 1651, 1122, 4760, 1775, 5337, 4729,
	2848, 2848, 4627, 5335, 1212, 3861, 4605, 686, 4730, 5170,
	4458, 2415, 4124, 1613, 4351, 2415, 804, 2914, 998, 998,
	1565, 4262, 2417, 2848, 4883, 4251, 4481, 984, 4867, 686,
	4263, 1088, 1090, 1091, 4252, 4711, 1775, 1731, 789, 1206,
	789, 1774, 3692, 4669, 1613, 2549, 3702, 3703, 3704, 1177,
	3695, 3696, 3697, 3698, 779, 4485, 4187, 4116, 4618, 4401,
	4092, 789, 4019, 4006, 686, 2415, 2415, 3863, 4483, 4091,
	4360, 4020, 4007, 4359, 4192, 1805, 3864, 3849, 1775, 789,
	3706, 1324, 789, 789, 3772, 1438, 3850, 805, 4155, 4129,
	3708, 789, 789, 3773, 789, 4138, 938, 938, 686, 3901,
	938, 844, 3818, 2417, 3766, 3757, 4178, 3738, 855, 856,
	857, 838, 838, 3767, 2415, 1439, 3690, 3754, 1440, 2418,
	3730, 1018, 1441, 3728, 3727, 3753, 2427, 3752, 3726, 3731,
	1224, 3690, 2415, 2415, 2463, 1104, 789, 2415, 3725, 2820,
	142, 3646, 765, 1085, 1442, 1104, 1560, 2415, 1104, 3546,
	2415, 3644, 3588, 3543, 3284, 1104, 3557, 2994, 1104, 1329,
	2415, 1780, 1781, 1782, 1783, 2848, 3517, 3392, 2894, 3217,
	3108, 3104, 2879, 2810, 686, 2415, 3393, 686, 3218, 1565,
	2415, 2415, 1445, 2848, 838, 1157, 2850, 1157, 2849, 2848,
	2744, 2818, 1307, 1697, 2416, 2848, 1155, 2848, 791, 1443,
	2817, 789, 789, 2415, 274, 274, 2848, 1613, 1173, 1174,
	5246, 1708, 1701, 3124, 152, 3698, 1444, 1783, 4486, 3975,
	1691, 1691, 1613, 686, 838, 838, 3744, 3740, 1699, 810,
	810, 1696, 1690, 752, 1613, 1613, 686, 1691, 1299, 1315,
	1691, 1691, 2492, 4826, 4124, 752, 4346, 3693, 3694, 3695,
	3696, 3697, 3698, 1446, 1586, 3547, 2492, 1638, 3699, 3700,
	3701, 4527, 1432, 752, 1056, 1354, 5779, 3693, 3694, 3695,
	3696, 3697, 3698, 3455, 1060, 1061, 1063, 1067, 3699, 3700,
	3701, 1359, 4124, 1560, 1058, 1569, 5341, 3693, 3694, 3695,
	3696, 3697, 3698, 1138, 1139, 1565, 5321, 1143, 1146, 1586,
	3950, 2492, 838, 4008, 1132, 1565, 4052, 3284, 1586, 4009,
	1354, 2579, 3699, 3700, 3701, 1586, 2501, 2492, 5753, 3950,
	1774, 3693, 3694, 3695, 3696, 3697, 3698, 766, 1056, 1644,
	766, 1055, 3693, 3694, 3695, 3696, 3697, 3698, 5605, 1297,
	1176, 2454, 1778, 1779, 1780, 1781, 1782, 1783, 1657, 1454,
	5589, 5580, 149, 1381, 789, 1731, 695, 1303, 1683, 1089,
	1683, 1302, 3699, 3700, 3701, 789, 5367, 1085, 1085, 1316,
	5342, 3693, 3694, 3695, 3696, 3697, 3698, 5330, 1303, 146,
	1353, 3124, 1302, 147, 1303, 5329, 1099, 1179, 1302, 5328,
	1595, 1596, 2268, 4286, 4346, 1357, 1358, 1073, 1396, 1397,
	5538, 752, 151, 1593, 686, 1098, 686, 686, 686, 4409,
	1147, 686, 686, 686, 1693, 1072, 686, 1074, 1085, 1076,
	5288, 2573, 5179, 1778, 1779, 1780, 1781, 1782, 1783, 5172,
	5155, 5133, 1300, 5070, 748, 5046, 2454, 2502, 1794, 1110,
	1633, 1633, 1115, 1649, 146, 5063, 5539, 2576, 147, 1119,
	5018, 1530, 1130, 747, 1361, 1536, 1778, 1779, 1780, 1781,
	1782, 1783, 5536, 4971, 4923, 1574, 4920, 151, 1395, 1159,
	1639, 1640, 1160, 4906, 4905, 777, 1360, 4893, 1366, 4683,
	776, 4676, 4673, 1515, 1066, 4659, 1694, 1158, 1066, 1066,
	4654, 752, 1346, 4646, 4347, 4645, 1135, 1136, 1137, 4635,
	1144, 1140, 1141, 1142, 1145, 4633, 4632, 4631, 1500, 1501,
	1424, 4400, 1388, 1430, 4313, 1448, 1308, 1778, 1779, 1780,
	1781, 1782, 1783, 4275, 748, 1595, 1596, 1326, 1327, 1590,
	1591, 1592, 4274, 4258, 1066, 1679, 142, 4248, 1597, 3307,
	4247, 4246, 1585, 747, 4195, 4189, 4122, 1687, 779, 4113,
	3962, 1345, 3920, 3699, 3700, 3701, 1778, 1779, 1780, 1781,
	1782, 1783, 3693, 3694, 3695, 3696, 3697, 3698, 3900, 3858,
	4408, 2702, 1579, 3817, 3748, 3907, 789, 3741, 686, 3721,
	2500, 686, 3713, 3712, 3691, 3688, 1598, 3687, 2574, 2455,
	3683, 3681, 1494, 3680, 2444, 3679, 2445, 3678, 1778, 1779,
	1780, 1781, 1782, 1783, 3656, 789, 3650, 3645, 2467, 2324,
	3524, 3522, 1311, 686, 3519, 852, 853, 854, 3518, 3508,
	1316, 1580, 2987, 3103, 846, 847, 848, 849, 850, 851,
	843, 3094, 1328, 838, 838, 838, 838, 766, 838, 1475,
	1179, 1178, 4347, 2513, 686, 766, 1622, 1458, 664, 1625,
	1475, 1459, 1475, 789, 1457, 5436, 2267, 789, 143, 1493,
	163, 2324, 2539, 2496, 5787, 1581, 1367, 717, 1578, 717,
	2456, 1609, 714, 2459, 1514, 2560, 1685, 5775, 5064, 1561,
	1075, 1097, 1078, 789, 2455, 838, 5771, 1533, 1557, 1080,
	1537, 1538, 2499, 789, 1505, 998, 1511, 4101, 1086, 789,
	1089, 1715, 2577, 1716, 1717, 1718, 1089, 5686, 1721, 1722,
	1723, 5652, 842, 1726, 5627, 1356, 5622, 5615, 789, 1698,
	5557, 789, 1705, 1706, 1707, 5490, 2575, 686, 3665, 5276,
	1057, 1602, 1603, 1303, 752, 1606, 1058, 1302, 5453, 5427,
	5424, 1583, 2988, 1682, 5340, 5339, 2579, 2606, 2435, 5306,
	4768, 5302, 4842, 3821, 1151, 750, 751, 5229, 5195, 838,
	149, 2675, 274, 5129, 2438, 1300, 1642, 750, 751, 5128,
	5127, 5106, 5090, 789, 686, 998, 2595, 5089, 2539, 2539,
	2539, 5088, 1689, 5079, 2579, 1639, 1640, 146, 5076, 4720,
	4955, 147, 4952, 1680, 1057, 4917, 4745, 789, 789, 4724,
	1058, 1591, 1590, 4345, 2512, 4710, 4702, 4699, 1592, 4546,
	151, 4446, 1695, 4404, 4157, 838, 838, 838, 838, 838,
	2611, 4388, 1577, 4378, 2614, 2615, 2436, 4375, 4356, 4318,
	838, 838, 4316, 4308, 150, 686, 686, 2269, 838, 686,
	2599, 2556, 1648, 2263, 4101, 2453, 1087, 143, 3985, 3984,
	4285, 5733, 2271, 3979, 2814, 1576, 1310, 2311, 3810, 1598,
	3808, 3807, 2559, 3760, 777, 998, 1749, 777, 777, 1764,
	2672, 2673, 1765, 1766, 1748, 1770, 1741, 3582, 1771, 3662,
	1206, 3636, 2429, 3692, 3634, 2979, 3482, 3702, 3703, 3704,
	3413, 5537, 3304, 789, 1356, 3226, 1719, 1720, 3171, 2727,
	2728, 1724, 1725, 2985, 1727, 1728, 3028, 3022, 2610, 143,
	2795, 2787, 143, 2743, 2598, 2478, 2469, 2503, 2504, 2505,
	2506, 3706, 2507, 750, 751, 2320, 1586, 2815, 2618, 2619,
	1588, 3708, 2318, 2317, 789, 789, 2316, 949, 949, 949,
	686, 838, 686, 2315, 2835, 686, 686, 838, 2314, 1435,
	2313, 2312, 1683, 2310, 2718, 2309, 2718, 695, 2308, 695,
	2718, 2718, 1356, 2307, 2306, 2305, 1729, 789, 789, 2592,
	789, 2637, 789, 2304, 686, 789, 789, 686, 2467, 2568,
	2570, 1805, 2303, 2302, 1775, 1603, 1602, 3982, 2301, 1805,
	686, 686, 1775, 1606, 2465, 686, 686, 2300, 686, 686,
	2319, 2540, 789, 2412, 2299, 2493, 2298, 2297, 2296, 2417,
	2543, 2295, 2261, 750, 751, 2294, 1437, 2417, 2293, 2292,
	4173, 2483, 2291, 2622, 2635, 2418, 2290, 2289, 2288, 2287,
	2286, 2284, 2427, 2418, 789, 2470, 2697, 2283, 2624, 2270,
	2427, 2628, 1356, 2674, 789, 2497, 2268, 838, 797, 1681,
	1601, 1462, 2520, 1306, 818, 1082, 817, 1067, 2529, 1627,
	912, 1067, 1067, 726, 1646, 2805, 2806, 2807, 4587, 4281,
	4111, 2321, 4110, 2854, 3851, 2722, 161, 2821, 2822, 2267,
	723, 149, 716, 3507, 2778, 814, 2547, 2548, 2779, 3865,
	4292, 4093, 3219, 3125, 1595, 1596, 142, 1370, 3805, 2731,
	2732, 2733, 2734, 2735, 2414, 3590, 2788, 1067, 146, 4523,
	2984, 5740, 147, 1805, 4026, 2771, 1775, 2540, 2540, 2540,
	5024, 2411, 2774, 1104, 713, 2689, 1370, 998, 142, 4518,
	2550, 151, 816, 1356, 998, 1532, 2701, 3676, 2571, 1436,
	2569, 2417, 711, 2707, 4172, 4036, 3385, 4289, 3381, 2880,
	2660, 2802, 149, 2621, 2852, 5240, 1805, 2418, 5239, 1775,
	1730, 2276, 4870, 775, 2427, 815, 5477, 2664, 2660, 2273,
	4028, 3977, 3673, 3021, 3913, 5012, 1421, 2913, 2676, 146,
	5420, 5419, 774, 147, 2417, 2566, 2552, 3610, 1513, 5238,
	2687, 4142, 4889, 2690, 2691, 2692, 2694, 4141, 2664, 2770,
	2418, 2983, 151, 4105, 2664, 3321, 1095, 2427, 2520, 1744,
	5741, 3988, 1068, 4344, 1744, 2816, 1805, 2723, 998, 1775,
	4387, 5041, 2720, 2272, 2274, 2275, 2724, 2725, 3309, 773,
	3308, 1438, 1206, 2892, 2321, 3692, 2758, 2748, 5660, 3702,
	3703, 3704, 150, 4801, 2417, 998, 155, 3603, 2777, 1318,
	2780, 4186, 3504, 2280, 2657, 2437, 4895, 5166, 4661, 4660,
	2418, 1439, 820, 677, 1440, 2321, 675, 2427, 1441, 1516,
	2482, 3242, 1469, 3706, 3870, 154, 3242, 3989, 5023, 822,
	2463, 3209, 2565, 3708, 2520, 2799, 2804, 2873, 2874, 1382,
	1442, 822, 2875, 2876, 1334, 2877, 2878, 1421, 3878, 3237,
	1047, 1040, 930, 5052, 1579, 1516, 3877, 3883, 4265, 3917,
	2830, 2797, 2798, 5261, 3879, 3937, 2838, 4814, 1107, 4184,
	3036, 4183, 106, 766, 4772, 5035, 105, 107, 1445, 2860,
	3243, 2933, 2862, 3883, 192, 3243, 149, 2847, 1470, 3236,
	3879, 155, 2827, 2828, 155, 1443, 3191, 3193, 3192, 4858,
	3111, 2809, 998, 1580, 998, 4570, 4526, 4494, 2772, 4361,
	1377, 3899, 1444, 146, 2868, 2857, 2855, 147, 2531, 2861,
	154, 1342, 2564, 154, 2856, 5042, 2588, 2587, 828, 3388,
	3991, 3334, 2517, 772, 3874, 1045, 151, 965, 903, 2903,
	673, 998, 2909, 109, 3699, 3700, 3701, 1581, 2544, 1446,
	1578, 2789, 5165, 3693, 3694, 3695, 3696, 3697, 3698, 4604,
	4152, 104, 3332, 5601, 2563, 3599, 4306, 3598, 3597, 144,
	3596, 4735, 775, 5474, 2895, 2586, 919, 5051, 918, 3333,
	917, 3282, 916, 711, 5437, 2931, 5315, 5314, 4853, 2920,
	2919, 1471, 4511, 149, 4508, 2582, 3384, 2604, 2600, 5575,
	3975, 5429, 5730, 4536, 3244, 4496, 4079, 4802, 5574, 3244,
	3331, 4921, 5600, 2829, 727, 2831, 1745, 2730, 2836, 2837,
	146, 1745, 5729, 1583, 147, 5048, 5047, 5430, 807, 2893,
	1054, 2911, 5578, 5254, 4502, 5450, 2823, 3320, 5272, 5069,
	4018, 111, 3918, 151, 3572, 4790, 4784, 4588, 3527, 2884,
	3450, 1743, 145, 3250, 1778, 1779, 1780, 1781, 1782, 1783,
	108, 4015, 1778, 1779, 1780, 1781, 1782, 1783, 3570, 3886,
	126, 2698, 131, 124, 2703, 702, 144, 4014, 113, 3513,
	2872, 2668, 1583, 3931, 4136, 2553, 2431, 2553, 4135, 1746,
	843, 4815, 4134, 4133, 1746, 4132, 2432, 3956, 3496, 133,
	128, 3510, 2912, 3573, 1577, 3885, 3498, 5659, 998, 127,
	3003, 3852, 2553, 150, 3039, 193, 5031, 2553, 2433, 2905,
	5643, 5496, 3343, 132, 120, 5022, 143, 2887, 3887, 1371,
	129, 3885, 2553, 2553, 1206, 3990, 3996, 3692, 5478, 3110,
	118, 3702, 3703, 3704, 2717, 3511, 3080, 3676, 2553, 2553,
	2597, 2553, 3000, 4185, 4493, 1583, 2553, 1540, 1371, 145,
	1710, 3841, 2982, 3040, 823, 1747, 1709, 5519, 933, 4757,
	1747, 3444, 842, 4547, 3050, 3706, 1621, 4063, 134, 137,
	1543, 3460, 2659, 138, 150, 3708, 1778, 1779, 1780, 1781,
	1782, 1783, 3428, 1467, 2583, 130, 4066, 143, 3881, 3571,
	2659, 2841, 1619, 2813, 4140, 2585, 2584, 3041, 136, 3884,
	3038, 3087, 2824, 3459, 1566, 5095, 2481, 4579, 1570, 3458,
	1319, 1583, 3457, 3569, 3881, 821, 3441, 4537, 117, 1778,
	1779, 1780, 1781, 1782, 1783, 3884, 3440, 821, 838, 3234,
	2981, 1421, 2681, 1534, 108, 125, 5603, 116, 1712, 806,
	828, 110, 1529, 3842, 2581, 119, 1512, 114, 3120, 1607,
	3122, 1495, 3194, 115, 2444, 1466, 2885, 1465, 3145, 3145,
	2768, 827, 1472, 1464, 3157, 838, 1509, 191, 123, 190,
	1127, 1460, 2886, 3042, 5476, 3112, 112, 3290, 3880, 1778,
	1779, 1780, 1781, 1782, 1783, 2706, 3699, 3700, 3701, 1347,
	2842, 686, 789, 2705, 3235, 3693, 3694, 3695, 3696, 3697,
	3698, 3214, 139, 1618, 3880, 804, 2704, 1128, 807, 686,
	231, 3225, 135, 979, 2843, 121, 5495, 2606, 5273, 838,
	3882, 686, 829, 2560, 2840, 1548, 4424, 2713, 779, 686,
	4580, 167, 1507, 2712, 3935, 4583, 3934, 5602, 4334, 2324,
	4581, 108, 3842, 3278, 838, 2769, 3882, 1365, 789, 1711,
	5015, 1546, 2839, 4520, 3037, 4065, 192, 730, 150, 4637,
	3443, 686, 686, 686, 2602, 789, 789, 5255, 4578, 2560,
	4538, 143, 686, 1363, 3269, 3245, 805, 3188, 5274, 3312,
	686, 3316, 686, 686, 2555, 4582, 2998, 1620, 686, 1714,
	2554, 686, 686, 2904, 3305, 686, 1385, 686, 686, 3497,
	2256, 789, 4032, 731, 3148, 3148, 3268, 3574, 3930, 825,
	5494, 686, 686, 789, 3399, 686, 686, 5158, 1054, 3288,
	3289, 5016, 3083, 4029, 4180, 4425, 3326, 838, 838, 2882,
	3622, 4940, 686, 686, 728, 1508, 729, 789, 3283, 3262,
	1313, 789, 110, 686, 3088, 2263, 5267, 4464, 1754, 3013,
	1129, 1713, 1539, 3996, 4120, 1541, 3078, 686, 686, 686,
	686, 686, 1545, 2986, 686, 150, 934, 2710, 686, 2607,
	3072, 3509, 686, 686, 2617, 1542, 1218, 3018, 703, 4941,
	3257, 4464, 3568, 3322, 1362, 2969, 2970, 2971, 2972, 3148,
	3210, 1044, 906, 686, 686, 3285, 3376, 686, 1555, 686,
	3057, 5062, 3584, 1551, 686, 2766, 686, 686, 826, 3076,
	1126, 686, 2933, 686, 2528, 4016, 686, 686, 2637, 3426,
	3151, 3099, 3098, 5007, 3350, 3341, 3336, 2637, 274, 806,
	686, 3279, 1700, 3127, 1655, 3300, 3369, 686, 3265, 5571,
	686, 1317, 3372, 3373, 2671, 4576, 1547, 686, 686, 3163,
	5570, 3225, 3206, 3469, 3395, 3397, 3476, 4064, 686, 838,
	938, 2480, 4121, 949, 843, 949, 949, 1046, 1364, 1552,
	2992, 3187, 952, 3026, 2321, 4623, 1314, 695, 695, 1117,
	5432, 830, 2321, 827, 5159, 4622, 832, 193, 3387, 1070,
	3472, 773, 4531, 4060, 3484, 804, 3489, 3490, 2473, 3089,
	3091, 4765, 3093, 3232, 3095, 3096, 3097, 3437, 5572, 4329,
	5438, 2472, 838, 3128, 3419, 4818, 2669, 1124, 5265, 3275,
	2767, 2591, 2995, 2999, 4521, 3001, 3488, 1485, 3281, 4017,
	5180, 789, 3255, 3981, 3197, 686, 824, 1506, 3699, 3700,
	3701, 2607, 3123, 4726, 3154, 5423, 842, 3693, 3694, 3695,
	3696, 3697, 3698, 5093, 3068, 3069, 3070, 3071, 1574, 3558,
	3227, 3228, 3229, 3230, 3231, 4478, 805, 3263, 4465, 789,
	4817, 3422, 1550, 4033, 2651, 3100, 4725, 3420, 5157, 2670,
	5295, 936, 3212, 3216, 5311, 3394, 947, 3213, 3211, 1491,
	4394, 947, 3555, 947, 4030, 2890, 2889, 2596, 3567, 3566,
	3259, 3948, 4465, 5017, 2591, 3867, 1755, 4491, 4593, 3146,
	3146, 3370, 3371, 3559, 2846, 2474, 4816, 2608, 4541, 5765,
	5764, 2609, 3287, 1487, 5434, 5433, 3359, 4466, 4803, 4998,
	3365, 4789, 4999, 3145, 1633, 5000, 4395, 3248, 1338, 3382,
	789, 3293, 2282, 3386, 3261, 1166, 1168, 3374, 5279, 191,
	3379, 190, 3943, 5001, 1166, 953, 3545, 1405, 4795, 5728,
	5426, 4466, 1406, 3262, 1166, 1168, 1415, 4740, 3168, 195,
	4467, 1347, 4149, 4148, 3493, 3494, 5294, 2590, 5492, 4204,
	3017, 5563, 1066, 5251, 1522, 4649, 2719, 3360, 1320, 4239,
	5003, 1654, 998, 779, 3146, 5073, 843, 4385, 913, 4238,
	5002, 998, 4589, 1393, 4467, 4481, 3258, 3344, 3587, 3923,
	5004, 1476, 4458, 954, 3593, 4736, 3647, 1653, 2428, 3466,
	3390, 3389, 3454, 2736, 3396, 4559, 1162, 1042, 1408, 2800,
	931, 865, 3664, 1486, 3652, 3653, 3043, 1052, 4558, 3871,
	1052, 3256, 2741, 3480, 3630, 3631, 2739, 1623, 1348, 1118,
	1518, 1071, 2742, 2740, 2745, 4357, 3196, 1414, 3635, 3274,
	2590, 1555, 3265, 3421, 5647, 4393, 3475, 3745, 998, 5569,
	779, 3668, 1600, 1482, 1549, 1604, 1605, 1498, 842, 3148,
	1498, 3254, 1589, 998, 4218, 5760, 5675, 5169, 1419, 2608,
	3824, 4448, 870, 2609, 3624, 2742, 1479, 2870, 3445, 2740,
	3446, 5354, 4950, 3447, 3260, 3449, 4665, 4922, 3446, 4479,
	3765, 3264, 5503, 3, 5696, 4722, 3756, 2738, 4644, 3729,
	1484, 3670, 3709, 3710, 3711, 3736, 3473, 870, 5695, 4666,
	3481, 1404, 4480, 5663, 870, 2444, 5357, 5356, 5609, 5214,
	5005, 5006, 4542, 5662, 3789, 3789, 938, 1556, 3145, 3801,
	3789, 3789, 5502, 1521, 2888, 5215, 5608, 1167, 1409, 998,
	998, 5508, 1490, 3512, 3514, 3515, 1167, 5509, 998, 5505,
	2737, 3586, 5504, 789, 3942, 789, 1167, 686, 789, 686,
	5285, 3526, 1683, 789, 789, 4410, 3531, 3533, 3532, 1519,
	2781, 3263, 3659, 1411, 1510, 3970, 4392, 110, 5175, 1410,
	1477, 4794, 4384, 5176, 4650, 5506, 1041, 5359, 3541, 932,
	864, 5507, 3746, 5358, 1483, 1524, 3669, 686, 4240, 5168,
	789, 1523, 3825, 4449, 3259, 1617, 3625, 1456, 779, 2871,
	1480, 3563, 3538, 3564, 1373, 3474, 3436, 1478, 2832, 3438,
	3439, 1488, 3651, 5697, 1412, 686, 1497, 5366, 5511, 1497,
	5510, 1573, 1134, 686, 5524, 686, 3968, 789, 789, 3576,
	5213, 686, 5321, 1392, 3538, 2496, 798, 3577, 3261, 3831,
	2909, 3853, 3619, 1612, 998, 3594, 3595, 5361, 1481, 3600,
	998, 5526, 3585, 5360, 5362, 5363, 5037, 1380, 3868, 1413,
	5525, 3292, 3148, 3838, 3148, 2539, 4754, 5527, 4585, 3735,
	1416, 686, 3946, 3627, 3926, 3848, 3944, 3565, 3628, 3528,
	3491, 3220, 3587, 734, 1162, 3629, 3774, 2546, 3147, 3147,
	3609, 3607, 686, 3620, 3626, 2285, 3941, 1742, 1688, 1686,
	3258, 3834, 1535, 4004, 1344, 1418, 1417, 3890, 4678, 5741,
	998, 5711, 686, 686, 686, 686, 3967, 5233, 5232, 5759,
	3523, 1520, 1066, 5737, 5529, 1517, 3919, 1391, 3542, 1405,
	4317, 5783, 3639, 5670, 1406, 3955, 5531, 3957, 1415, 3891,
	4965, 4787, 3799, 4739, 4294, 1611, 3658, 3661, 5528, 3856,
	3246, 1628, 736, 736, 3146, 3953, 3195, 1525, 3747, 1379,
	3164, 2593, 686, 686, 1763, 686, 686, 686, 2859, 717,
	4687, 2960, 3749, 3147, 2649, 2652, 2661, 1066, 1066, 3797,
	2572, 2964, 1407, 2962, 2651, 766, 1109, 2959, 3153, 2961,
	2963, 3872, 3718, 3719, 3720, 5388, 5389, 3751, 3260, 4930,
	1408, 2606, 4935, 3939, 686, 3264, 4933, 5387, 4934, 4936,
	789, 3739, 1421, 5534, 753, 4945, 3928, 3929, 5532, 5758,
	4684, 5540, 5541, 686, 5208, 3758, 3938, 3583, 4946, 1414,
	2650, 686, 3911, 4021, 4022, 3998, 5207, 153, 5205, 3786,
	1092, 4978, 3770, 2263, 2680, 3802, 3803, 3348, 3769, 5392,
	5539, 3796, 3794, 3463, 3793, 3764, 3467, 3792, 3084, 3768,
	1419, 2653, 5391, 3116, 3117, 3763, 5714, 838, 838, 5444,
	3816, 4717, 1339, 1340, 5443, 5444, 1343, 686, 5443, 3575,
	3828, 5533, 4050, 838, 4051, 5185, 3347, 3846, 4095, 3843,
	3349, 3814, 3815, 2917, 2918, 4932, 5371, 4937, 3809, 157,
	158, 159, 160, 1404, 3632, 3997, 2973, 3857, 686, 4072,
	3456, 4073, 4074, 3637, 1402, 4977, 1323, 3346, 4987, 5370,
	3763, 5182, 686, 4983, 949, 1067, 3888, 2835, 4131, 3960,
	1409, 4158, 4159, 3914, 4944, 4059, 1043, 3832, 156, 5184,
	5183, 789, 3909, 3910, 3994, 976, 859, 5539, 5626, 672,
	4453, 674, 676, 3121, 3924, 4128, 3761, 3107, 902, 260,
	3906, 5665, 2258, 1403, 4432, 1411, 5766, 3146, 3166, 3146,
	5058, 1410, 5313, 3311, 4069, 789, 789, 998, 4779, 4573,
	4572, 789, 4327, 5666, 1703, 2683, 2682, 3954, 2498, 4070,
	3723, 4980, 4981, 2448, 2447, 4302, 3952, 4696, 4297, 4296,
	2965, 3855, 3855, 3976, 2540, 4342, 4433, 3969, 3987, 2992,
	3983, 3106, 2637, 3307, 5664, 4156, 1412, 4161, 5271, 5607,
	1066, 4048, 5606, 5442, 4989, 4982, 5440, 4985, 4986, 4988,
	4984, 2788, 5368, 5173, 4198, 4199, 4200, 5139, 4746, 4434,
	4435, 4436, 4368, 3854, 4441, 4027, 4209, 4175, 4176, 4137,
	998, 4023, 4272, 4053, 4271, 4144, 4213, 4212, 4107, 4108,
	4104, 1413, 4103, 3560, 4037, 4049, 3502, 3429, 998, 3418,
	3173, 3114, 1416, 2666, 3811, 3780, 3785, 3783, 3784, 3782,
	4040, 3778, 3781, 3914, 4045, 4300, 3785, 3783, 3784, 3782,
	2969, 2970, 2971, 2972, 2580, 779, 2532, 2966, 2527, 1704,
	1567, 1527, 4147, 4057, 1526, 3361, 1502, 1418, 1417, 1386,
	1298, 1094, 998, 3780, 3785, 3783, 3784, 3782, 998, 3778,
	3781, 1083, 1773, 4146, 812, 808, 4609, 3019, 5594, 5514,
	5513, 5393, 4663, 4225, 4226, 4227, 4228, 4229, 4230, 4231,
	4232, 4233, 4234, 4235, 4236, 4237, 4904, 4241, 3120, 4254,
	4854, 4098, 4099, 4728, 2444, 4610, 4512, 4509, 3145, 4369,
	4217, 3145, 3862, 3147, 3556, 2616, 2613, 4109, 2321, 4307,
	4094, 1175, 3789, 3801, 3789, 3789, 3789, 1168, 4119, 3936,
	768, 4314, 2891, 4151, 1407, 4096, 3592, 3579, 4695, 3780,
	3785, 3783, 3784, 3782, 3961, 3778, 3781, 4694, 4114, 2560,
	4805, 4115, 4339, 4763, 3959, 3130, 4762, 4322, 1316, 4806,
	3666, 748, 1435, 4150, 1421, 2452, 686, 3578, 2451, 5689,
	5484, 4130, 5044, 4910, 4886, 4804, 4648, 4602, 4807, 4179,
	747, 3806, 3684, 3621, 2922, 789, 2851, 1683, 811, 800,
	5688, 5583, 5120, 5117, 4885, 4872, 4849, 4844, 686, 4843,
	3602, 789, 4145, 4533, 4197, 686, 4532, 4522, 838, 4517,
	4430, 4085, 4084, 4083, 4082, 789, 818, 3813, 817, 3813,
	1077, 4081, 4080, 4076, 4377, 4075, 4067, 2456, 4054, 1437,
	4386, 4047, 3225, 4035, 4034, 4031, 998, 998, 838, 998,
	3965, 3964, 3963, 4343, 3845, 1067, 4197, 814, 4340, 3608,
	2976, 4181, 4287, 4288, 3148, 3606, 3478, 3148, 142, 3442,
	3423, 2520, 4353, 4355, 2958, 4349, 2819, 4165, 4166, 4167,
	4168, 789, 4126, 4389, 4428, 2786, 4291, 2785, 3587, 686,
	3145, 3278, 4194, 2784, 3894, 2783, 4207, 4443, 2729, 4143,
	2726, 3905, 2975, 2976, 816, 686, 686, 4422, 4211, 4376,
	1067, 1067, 2560, 3890, 2721, 2714, 4459, 4216, 4374, 2700,
	1683, 2696, 686, 1683, 2695, 1683, 4475, 4350, 4222, 2693,
	2688, 2686, 2679, 3932, 2662, 998, 3147, 815, 3147, 2648,
	4497, 2647, 686, 2646, 998, 3891, 2632, 2605, 2601, 4338,
	4406, 2594, 2449, 2934, 4474, 2935, 3799, 4407, 686, 3521,
	4106, 3520, 1436, 4420, 4253, 1116, 4324, 686, 686, 686,
	1069, 4438, 686, 4268, 4482, 686, 686, 686, 686, 4295,
	4266, 1059, 4298, 4267, 3326, 2793, 4501, 4282, 686, 4283,
	4437, 4290, 2792, 4293, 4447, 686, 4280, 686, 4371, 5249,
	3017, 4303, 4304, 5649, 4299, 4127, 5619, 4269, 686, 4310,
	5648, 4273, 5400, 766, 4385, 766, 686, 686, 4487, 4490,
	4833, 686, 686, 686, 686, 686, 4829, 4675, 4412, 2637,
	4561, 3587, 4025, 4330, 4674, 2955, 3148, 3148, 4641, 4640,
	2637, 2637, 2953, 2956, 2952, 4796, 2954, 4352, 4061, 3417,
	3414, 4414, 4415, 3933, 1438, 2699, 3890, 4309, 3411, 4311,
	4312, 4500, 3407, 4362, 4470, 2667, 4366, 4153, 3472, 4370,
	3552, 4372, 3148, 686, 686, 686, 686, 686, 4454, 3279,
	2992, 3551, 3187, 3550, 1439, 3549, 3548, 1440, 3891, 4214,
	4215, 1441, 3286, 2627, 1532, 1429, 1423, 3638, 843, 1171,
	766, 2991, 4383, 2463, 5732, 4778, 789, 789, 789, 789,
	4397, 2990, 196, 1442, 4476, 3555, 3587, 4403, 784, 1172,
	3499, 4190, 3500, 4826, 3501, 4411, 4399, 3503, 4405, 833,
	4584, 2655, 4402, 1064, 5750, 998, 4413, 5749, 785, 4086,
	2654, 4565, 3170, 4421, 4743, 998, 3530, 4568, 4439, 3525,
	4495, 1445, 1392, 1067, 1562, 4442, 5259, 4445, 4418, 5258,
	4607, 4545, 4823, 4270, 4732, 1563, 2258, 4769, 1443, 3146,
	998, 4087, 3146, 4566, 3972, 3299, 3267, 3174, 2522, 4591,
	842, 2514, 4367, 4594, 2464, 1444, 4488, 4492, 4489, 2457,
	1389, 1378, 1372, 1368, 1350, 5604, 4975, 800, 5105, 4551,
	5104, 5056, 4603, 4499, 3561, 4560, 4455, 4249, 4089, 2992,
	4056, 4001, 3999, 4504, 4381, 3971, 3940, 3835, 3251, 3247,
	3172, 3167, 1446, 2803, 2801, 2630, 4475, 4321, 2626, 2533,
	2518, 2510, 2508, 2490, 1616, 686, 1615, 3145, 3145, 1614,
	1608, 3145, 1571, 1568, 2788, 4688, 1564, 938, 1559, 686,
	2321, 1544, 1503, 1450, 3789, 1447, 3225, 4705, 1428, 938,
	1422, 4831, 4830, 3465, 2489, 4712, 1338, 1031, 5517, 2520,
	4550, 5447, 5435, 947, 947, 947, 1352, 5336, 5085, 4567,
	5171, 4562, 5107, 5025, 4964, 4519, 3157, 838, 4834, 4791,
	4524, 4777, 4679, 4680, 4766, 4571, 4348, 3830, 4709, 3272,
	3266, 3454, 1624, 998, 2545, 4462, 2458, 2439, 4469, 789,
	4471, 2413, 4592, 1658, 998, 998, 752, 4744, 998, 1683,
	4727, 3654, 3655, 4600, 4723, 766, 2812, 2811, 3581, 4373,
	5757, 4203, 752, 752, 752, 4703, 4704, 5742, 4737, 5581,
	838, 3146, 3146, 5291, 3270, 3947, 5250, 2612, 4733, 2560,
	4326, 686, 998, 1227, 1226, 1219, 2430, 1062, 1645, 4752,
	4662, 5043, 4630, 5561, 938, 5038, 1210, 4756, 4747, 5253,
	5040, 5428, 3148, 4741, 5036, 4792, 2471, 3146, 276, 5032,
	4731, 3844, 3278, 3148, 3148, 4564, 4643, 3148, 3470, 3847,
	3177, 3836, 3184, 1489, 659, 2656, 2560, 3201, 2477, 4810,
	4776, 4786, 2476, 5050, 5049, 3148, 4764, 5278, 4761, 4539,
	3273, 3427, 4429, 4682, 4476, 4785, 4431, 3945, 831, 4773,
	4774, 3271, 4681, 1384, 2711, 5290, 4426, 3477, 3233, 2746,
	3904, 3903, 42, 41, 40, 39, 38, 37, 36, 35,
	62, 61, 60, 4783, 59, 58, 57, 4708, 56, 686,
	55, 54, 686, 53, 52, 51, 50, 49, 686, 686,
	686, 998, 48, 686, 686, 686, 47, 3538, 46, 45,
	44, 43, 34, 686, 686, 4639, 33, 4701, 4482, 4721,
	4642, 32, 31, 30, 29, 28, 27, 26, 25, 24,
	23, 2764, 4139, 3553, 1558, 725, 749, 749, 4691, 4692,
	1125, 4771, 4697, 1123, 4827, 4759, 1692, 1102, 1112, 2765,
	3252, 77, 76, 686, 686, 75, 74, 686, 4770, 73,
	72, 71, 70, 69, 68, 67, 695, 66, 3148, 686,
	4672, 5, 4690, 65, 80, 4750, 82, 81, 79, 78,
	3894, 63, 4812, 18, 17, 1553, 998, 4799, 2637, 4838,
	2484, 4798, 178, 4797, 998, 1321, 876, 2494, 2923, 4809,
	3992, 4782, 4808, 3973, 4456, 234, 2747, 876, 876, 1425,
	3279, 4738, 5638, 4902, 3324, 5409, 4333, 165, 3147, 4903,
	5266, 3147, 3876, 940, 3873, 686, 4463, 4331, 940, 876,
	5296, 4472, 4337, 940, 4890, 940, 4595, 4596, 4597, 4598,
	4599, 3160, 876, 876, 4335, 3156, 4835, 5710, 4931, 4416,
	4417, 4860, 4419, 4832, 1021, 1021, 4839, 876, 876, 876,
	3672, 4836, 3081, 3086, 4780, 4929, 4925, 5203, 686, 4966,
	4846, 5522, 4748, 4848, 4963, 4706, 3222, 3145, 4450, 148,
	686, 5181, 4943, 4705, 3105, 2446, 103, 783, 4909, 782,
	5516, 876, 1180, 5219, 5404, 4990, 4719, 4979, 4325, 162,
	1081, 2869, 1131, 712, 2858, 789, 4000, 1108, 4002, 5010,
	2450, 4339, 4716, 4715, 5390, 5386, 686, 3146, 5385, 4284,
	789, 686, 3113, 3894, 4713, 3126, 4475, 789, 3146, 3146,
	2434, 98, 3146, 97, 96, 5009, 95, 4992, 94, 93,
	92, 91, 90, 89, 4767, 88, 686, 87, 3454, 2560,
	3146, 4995, 86, 85, 84, 4897, 83, 16, 3454, 15,
	686, 2644, 4958, 4887, 14, 686, 11, 5150, 789, 5013,
	5148, 686, 998, 5149, 5147, 2980, 4428, 4657, 845, 1802,
	5026, 2910, 949, 1169, 1762, 838, 1161, 5156, 4208, 5077,
	3147, 3147, 4636, 5141, 2279, 5518, 4305, 995, 4055, 996,
	4557, 1587, 993, 4475, 843, 4918, 838, 838, 4569, 1023,
	4100, 4668, 4264, 5083, 5019, 4939, 4255, 4951, 3049, 5059,
	4976, 4942, 3045, 3148, 686, 686, 3147, 3034, 5100, 3056,
	686, 4474, 4656, 2996, 686, 1204, 1203, 4590, 5030, 3015,
	3657, 2277, 1198, 1199, 1194, 843, 949, 5053, 4996, 5008,
	1753, 4993, 5011, 686, 998, 1750, 4088, 3544, 10, 4090,
	9, 2833, 998, 5112, 2633, 5114, 5098, 4973, 3345, 4003,
	4972, 5034, 3148, 3146, 5027, 5086, 5143, 5124, 5033, 4024,
	3351, 5312, 3464, 1809, 1734, 64, 842, 122, 2883, 6,
	5091, 1732, 5080, 764, 1154, 3035, 1804, 5078, 4338, 2,
	142, 1, 0, 5054, 0, 3587, 0, 5122, 0, 0,
	4629, 5097, 0, 0, 4476, 0, 4117, 5137, 5138, 0,
	0, 5108, 5094, 22, 5096, 0, 21, 842, 5075, 4475,
	3890, 5072, 0, 686, 5186, 5109, 8, 0, 4954, 0,
	0, 0, 0, 938, 20, 0, 5198, 0, 0, 3148,
	5162, 5123, 5126, 5121, 0, 0, 0, 5187, 0, 0,
	0, 5132, 3891, 0, 19, 0, 0, 0, 0, 7,
	0, 0, 13, 0, 0, 12, 0, 0, 0, 0,
	5225, 4924, 0, 0, 4938, 3538, 5140, 998, 0, 0,
	0, 4476, 0, 0, 0, 0, 0, 990, 990, 0,
	5164, 0, 0, 5226, 0, 0, 0, 0, 0, 5202,
	0, 5228, 0, 0, 5220, 5119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 789, 0, 0, 0, 0,
	0, 998, 686, 0, 5209, 5210, 5193, 789, 5211, 5212,
	0, 5231, 5194, 0, 0, 0, 0, 0, 0, 0,
	686, 0, 0, 0, 0, 5235, 0, 0, 938, 0,
	0, 5263, 3145, 998, 998, 5262, 0, 0, 0, 5087,
	0, 0, 0, 0, 4753, 3148, 789, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5221, 5188, 5234, 3148,
	5101, 5102, 0, 5230, 3149, 3149, 5236, 0, 686, 0,
	0, 686, 5244, 0, 0, 5243, 5245, 5237, 0, 5252,
	0, 0, 0, 0, 0, 0, 4781, 4476, 0, 0,
	0, 0, 876, 0, 0, 0, 3147, 0, 3146, 0,
	0, 4708, 876, 5260, 1066, 876, 5317, 3147, 3147, 5287,
	5283, 3147, 876, 5292, 0, 876, 5280, 5284, 749, 749,
	0, 0, 749, 749, 5307, 5293, 0, 1148, 1149, 3147,
	0, 0, 5241, 1683, 5256, 5301, 2444, 5303, 0, 5305,
	5308, 5309, 0, 0, 0, 0, 3225, 3146, 0, 3149,
	0, 0, 0, 0, 5323, 5384, 5324, 5325, 5365, 0,
	5322, 0, 0, 0, 1683, 5331, 1683, 0, 998, 5372,
	0, 940, 940, 4956, 0, 5333, 4956, 0, 3148, 0,
	5411, 5281, 779, 0, 0, 0, 940, 5286, 5382, 0,
	0, 5408, 0, 5349, 5350, 0, 5364, 0, 5407, 0,
	5298, 0, 0, 0, 0, 4992, 0, 0, 0, 5414,
	0, 0, 0, 998, 940, 940, 5406, 4750, 940, 0,
	5380, 0, 5421, 0, 3146, 5375, 0, 0, 5383, 0,
	838, 0, 0, 5416, 0, 0, 686, 0, 3538, 3538,
	5415, 0, 0, 4874, 4875, 5403, 0, 0, 0, 0,
	0, 0, 3147, 1683, 5417, 0, 0, 843, 0, 0,
	0, 0, 0, 0, 0, 686, 686, 0, 5425, 0,
	0, 5418, 0, 0, 0, 5431, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5143, 5441, 5439, 0,
	0, 0, 5445, 0, 0, 0, 0, 0, 0, 0,
	0, 1021, 5451, 0, 0, 998, 5467, 0, 0, 0,
	0, 0, 0, 0, 0, 5501, 5461, 0, 5463, 5466,
	5465, 0, 0, 0, 5464, 5470, 3148, 0, 5198, 5515,
	5493, 5479, 5468, 0, 0, 0, 1066, 0, 0, 842,
	0, 0, 0, 0, 5486, 998, 998, 5485, 5487, 0,
	3146, 1683, 0, 0, 0, 0, 5499, 5500, 0, 0,
	0, 0, 0, 0, 3146, 0, 936, 0, 5412, 947,
	5546, 947, 947, 0, 0, 4475, 0, 0, 5521, 0,
	0, 1021, 5562, 0, 949, 949, 5552, 2560, 686, 0,
	0, 5559, 5556, 0, 5554, 5449, 0, 0, 0, 5160,
	0, 686, 5549, 5550, 0, 0, 0, 4994, 0, 0,
	5163, 0, 0, 5553, 0, 5564, 5565, 0, 0, 0,
	0, 0, 5588, 5555, 0, 686, 5189, 0, 0, 5558,
	0, 949, 0, 749, 749, 0, 749, 0, 0, 4737,
	2606, 876, 0, 0, 0, 876, 876, 5576, 5573, 0,
	5190, 5582, 0, 0, 0, 0, 0, 5587, 0, 0,
	5591, 5592, 5595, 5611, 1683, 1683, 5610, 5590, 5614, 4586,
	0, 1021, 0, 876, 0, 0, 0, 0, 0, 749,
	0, 0, 0, 3146, 2444, 876, 5596, 5599, 3120, 0,
	0, 876, 0, 0, 0, 0, 0, 0, 998, 5411,
	838, 838, 5624, 0, 4601, 0, 0, 3147, 4475, 0,
	938, 0, 5616, 0, 5448, 5633, 0, 5623, 5369, 5621,
	5625, 3148, 5630, 5631, 0, 0, 5635, 3894, 5629, 686,
	0, 5634, 5637, 0, 5617, 5618, 5639, 5406, 5620, 3149,
	940, 5628, 5566, 0, 0, 838, 0, 5646, 0, 5398,
	0, 5401, 5584, 5636, 5586, 940, 3147, 940, 0, 0,
	0, 5653, 0, 4476, 940, 5579, 0, 0, 0, 5298,
	0, 0, 0, 5673, 0, 940, 940, 940, 940, 940,
	0, 5655, 0, 0, 5299, 5300, 940, 0, 998, 5661,
	998, 998, 0, 0, 0, 0, 0, 0, 5680, 0,
	5682, 0, 0, 0, 0, 0, 5679, 0, 0, 0,
	940, 0, 0, 0, 5681, 5685, 938, 5701, 5702, 5703,
	5687, 5198, 0, 5678, 0, 0, 0, 5698, 0, 838,
	0, 3146, 0, 3147, 0, 4475, 5712, 5713, 5462, 5719,
	0, 5705, 5717, 0, 1394, 3148, 2261, 0, 0, 0,
	0, 5716, 0, 5718, 3148, 5721, 0, 1066, 5673, 0,
	0, 998, 4929, 5720, 5735, 1435, 0, 0, 5690, 5691,
	0, 0, 0, 5727, 5216, 5736, 0, 1067, 5739, 5654,
	5743, 5744, 0, 938, 0, 0, 0, 5412, 0, 0,
	5650, 2326, 940, 5748, 5751, 940, 4476, 5745, 0, 938,
	5752, 0, 5754, 0, 0, 5767, 5762, 0, 5761, 5768,
	686, 0, 4929, 0, 5770, 949, 949, 5778, 5774, 5769,
	0, 5773, 5673, 5782, 5781, 5755, 5756, 0, 5780, 5784,
	0, 0, 1437, 1021, 5727, 0, 5542, 876, 5673, 5789,
	1021, 5785, 0, 2326, 5694, 2326, 5776, 5777, 0, 0,
	0, 0, 3149, 0, 3149, 0, 0, 0, 0, 3147,
	0, 0, 5727, 0, 5692, 0, 0, 0, 876, 0,
	0, 0, 0, 3147, 876, 0, 0, 0, 0, 0,
	0, 3148, 0, 0, 909, 909, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3616, 0, 3614, 0, 0, 0, 3612, 0,
	3613, 3615, 0, 749, 1660, 0, 0, 749, 749, 0,
	0, 0, 0, 4476, 1021, 0, 3146, 0, 0, 5656,
	0, 0, 0, 0, 5488, 5489, 0, 3538, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 5612,
	5613, 1021, 0, 0, 0, 1436, 0, 4840, 4841, 0,
	0, 0, 0, 749, 749, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4859,
	0, 0, 3147, 0, 5394, 5395, 5396, 5397, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1067,
	0, 1805, 0, 909, 1775, 0, 4873, 0, 1787, 1788,
	1789, 4876, 0, 0, 876, 0, 0, 2973, 0, 0,
	4483, 0, 0, 0, 0, 0, 0, 2425, 0, 2417,
	0, 0, 0, 0, 2422, 2426, 2421, 1438, 2423, 0,
	3146, 0, 0, 2782, 0, 2418, 0, 0, 1021, 3146,
	1021, 0, 2427, 4891, 0, 2790, 0, 0, 0, 0,
	2791, 0, 0, 0, 2794, 940, 0, 1439, 2796, 0,
	1440, 0, 0, 0, 1441, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2463, 1021, 0, 0,
	876, 0, 876, 876, 876, 876, 1442, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1148, 1149, 0, 0,
	0, 3617, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 105, 107, 0, 0, 0, 0, 0, 0, 0,
	3147, 149, 0, 0, 1445, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 940, 940, 940, 0, 0,
	0, 1443, 0, 0, 0, 0, 1805, 0, 146, 1775,
	0, 0, 147, 1787, 1788, 1789, 2479, 0, 1444, 0,
	876, 0, 0, 2491, 0, 2419, 3146, 0, 2420, 0,
	0, 151, 2425, 0, 2417, 0, 0, 0, 109, 2422,
	2426, 2421, 0, 2423, 0, 0, 0, 2424, 1798, 1799,
	2418, 2969, 2970, 2971, 2972, 1446, 104, 2427, 3618, 0,
	0, 0, 5677, 0, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 998, 2907, 2907, 0,
	0, 0, 940, 0, 0, 0, 0, 5693, 0, 940,
	940, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	947, 0, 0, 940, 1021, 0, 0, 940, 940, 940,
	940, 940, 940, 940, 940, 940, 940, 940, 940, 940,
	940, 940, 940, 0, 940, 0, 0, 0, 0, 0,
	0, 0, 2326, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 145, 0, 0,
	0, 0, 0, 0, 0, 1805, 0, 100, 1775, 0,
	0, 0, 1787, 1788, 1789, 126, 0, 131, 124, 0,
	1067, 0, 0, 113, 2419, 3147, 0, 2420, 0, 0,
	0, 2425, 0, 2417, 0, 0, 0, 0, 2422, 2426,
	2421, 0, 2423, 0, 133, 128, 2424, 1798, 1799, 2418,
	0, 0, 0, 0, 127, 1805, 2427, 0, 1775, 0,
	0, 99, 1787, 1788, 1789, 0, 0, 0, 132, 120,
	0, 0, 0, 0, 2419, 129, 0, 2420, 0, 0,
	0, 2425, 0, 2417, 0, 118, 0, 3179, 2422, 2426,
	2421, 2776, 2423, 990, 0, 1485, 2424, 1798, 1799, 2418,
	0, 0, 0, 0, 0, 0, 2427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 137, 0, 0, 0, 138, 0,
	990, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 3147,
	0, 0, 0, 136, 0, 0, 0, 1491, 3147, 0,
	0, 5726, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 117, 2272, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3149, 0, 0, 3149, 0, 108,
	125, 1487, 116, 0, 0, 0, 110, 0, 0, 0,
	119, 0, 114, 0, 1805, 0, 1794, 1775, 115, 0,
	0, 1787, 1788, 1789, 0, 1784, 1785, 1786, 0, 0,
	0, 0, 5726, 123, 1778, 1779, 1780, 1781, 1782, 1783,
	2425, 112, 2417, 0, 0, 0, 0, 2422, 2426, 2421,
	0, 2423, 0, 0, 0, 2424, 1798, 1799, 2418, 0,
	5726, 0, 0, 0, 4629, 2427, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 1476,
	0, 0, 5327, 0, 0, 3147, 0, 0, 5332, 0,
	5334, 0, 0, 0, 0, 1805, 0, 2932, 1775, 0,
	0, 1486, 1787, 1788, 1789, 0, 0, 0, 0, 0,
	0, 0, 0, 150, 2419, 0, 0, 2420, 0, 0,
	0, 2425, 0, 2417, 0, 0, 143, 0, 2422, 2426,
	2421, 0, 2423, 0, 0, 0, 2424, 1798, 1799, 2418,
	0, 1482, 0, 0, 0, 0, 2427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3149, 3149, 0, 0,
	0, 1794, 0, 0, 1479, 0, 0, 0, 0, 0,
	1784, 1785, 1786, 0, 0, 0, 0, 0, 0, 1778,
	1779, 1780, 1781, 1782, 1783, 3180, 0, 3671, 1484, 0,
	1805, 0, 3149, 1775, 0, 0, 0, 1787, 1788, 1789,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2419,
	0, 0, 2420, 0, 0, 0, 2425, 0, 2417, 0,
	0, 0, 0, 2422, 2426, 2421, 0, 2423, 0, 0,
	1490, 2424, 1798, 1799, 2418, 0, 0, 0, 0, 0,
	0, 2427, 0, 3014, 0, 0, 940, 940, 0, 940,
	0, 0, 940, 3029, 3030, 3031, 3032, 0, 0, 0,
	0, 0, 940, 940, 0, 110, 0, 0, 1477, 940,
	0, 940, 940, 940, 940, 940, 940, 940, 940, 940,
	940, 940, 1483, 940, 0, 940, 0, 940, 940, 940,
	940, 940, 940, 0, 940, 940, 940, 0, 1480, 940,
	0, 0, 0, 0, 0, 1478, 0, 0, 0, 1488,
	1794, 0, 0, 0, 0, 0, 0, 0, 0, 1784,
	1785, 1786, 3181, 0, 0, 0, 3685, 0, 1778, 1779,
	1780, 1781, 1782, 1783, 0, 3686, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1481, 0, 3182, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1794, 0, 0, 0, 0, 0, 0, 0, 0, 1784,
	1785, 1786, 0, 0, 0, 0, 0, 0, 1778, 1779,
	1780, 1781, 1782, 1783, 0, 3737, 0, 0, 0, 0,
	0, 0, 1485, 0, 940, 0, 2665, 0, 940, 940,
	940, 940, 1805, 0, 0, 1775, 0, 0, 0, 1787,
	1788, 1789, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2419, 0, 0, 2420, 1185, 940, 940, 2425, 0,
	2417, 0, 0, 0, 0, 2422, 2426, 2421, 0, 2423,
	0, 0, 0, 2424, 1798, 1799, 2418, 0, 1021, 0,
	0, 0, 0, 2427, 1491, 0, 0, 1021, 0, 0,
	0, 0, 5498, 0, 0, 0, 0, 0, 0, 0,
	0, 2326, 0, 0, 2915, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2917, 2918, 0, 1487, 0,
	0, 0, 3149, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3149, 3149, 0, 2326, 3149, 0, 1794,
	0, 940, 0, 4698, 0, 0, 0, 0, 1784, 1785,
	1786, 0, 0, 0, 1021, 3149, 0, 1778, 1779, 1780,
	1781, 1782, 1783, 0, 0, 3313, 0, 0, 0, 1021,
	0, 0, 0, 0, 0, 0, 5657, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5497, 0, 2326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 876, 0, 0, 1476, 2326, 0, 749,
	0, 0, 0, 0, 0, 749, 749, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1486, 0,
	1794, 0, 0, 0, 0, 0, 0, 0, 0, 1784,
	1785, 1786, 0, 0, 0, 1021, 1021, 0, 1778, 1779,
	1780, 1781, 1782, 1783, 1021, 3724, 0, 0, 0, 0,
	4793, 0, 0, 940, 0, 0, 0, 0, 1482, 0,
	0, 0, 0, 0, 0, 0, 0, 1805, 3149, 0,
	1775, 0, 0, 0, 1787, 1788, 1789, 0, 876, 876,
	0, 1479, 0, 0, 0, 0, 2419, 0, 0, 2420,
	0, 0, 0, 2425, 0, 2417, 0, 0, 0, 0,
	2422, 2426, 2421, 0, 2423, 1484, 0, 0, 2424, 1798,
	1799, 2418, 0, 876, 0, 1794, 0, 749, 2427, 0,
	876, 0, 0, 0, 1784, 1785, 1786, 0, 0, 0,
	0, 0, 0, 1778, 1779, 1780, 1781, 1782, 1783, 0,
	0, 0, 2326, 0, 0, 0, 0, 1490, 940, 0,
	1021, 940, 0, 940, 940, 0, 1021, 0, 0, 0,
	0, 0, 0, 0, 0, 3505, 3506, 0, 0, 0,
	1805, 0, 0, 1775, 3516, 0, 0, 1787, 1788, 1789,
	0, 0, 110, 0, 0, 1477, 0, 0, 0, 2419,
	0, 0, 2420, 0, 940, 0, 2425, 749, 2417, 1483,
	0, 3534, 0, 2422, 2426, 2421, 0, 3714, 0, 876,
	0, 2424, 1798, 1799, 2418, 1480, 1021, 0, 876, 749,
	0, 2427, 1478, 3715, 0, 0, 1488, 0, 0, 0,
	0, 0, 0, 1805, 1405, 0, 1775, 0, 0, 1406,
	1787, 1788, 1789, 1415, 2326, 5204, 0, 0, 0, 0,
	876, 0, 2419, 0, 0, 2420, 0, 0, 0, 2425,
	0, 2417, 0, 1481, 0, 0, 2422, 2426, 2421, 0,
	2423, 0, 0, 0, 2424, 1798, 1799, 2418, 0, 0,
	0, 0, 0, 1229, 2427, 3580, 3580, 3291, 0, 3716,
	0, 0, 0, 940, 0, 0, 0, 0, 0, 0,
	0, 940, 3302, 0, 0, 1408, 0, 0, 0, 0,
	0, 0, 0, 940, 0, 0, 0, 0, 0, 0,
	0, 940, 0, 3149, 0, 0, 0, 1794, 0, 0,
	0, 0, 0, 0, 1414, 0, 1784, 1785, 1786, 0,
	0, 0, 0, 0, 0, 1778, 1779, 1780, 1781, 1782,
	1783, 940, 940, 0, 0, 0, 0, 940, 0, 0,
	0, 0, 0, 0, 0, 1419, 0, 0, 0, 0,
	0, 0, 3149, 940, 940, 0, 0, 0, 940, 0,
	0, 0, 0, 0, 0, 0, 0, 940, 0, 0,
	0, 0, 0, 940, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 940, 940, 940, 1404, 0,
	0, 0, 0, 0, 0, 0, 940, 0, 0, 1402,
	0, 0, 0, 0, 0, 0, 0, 940, 947, 0,
	0, 0, 0, 0, 0, 1409, 4256, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3149,
	0, 940, 940, 940, 0, 0, 0, 0, 0, 940,
	940, 940, 0, 0, 940, 0, 0, 0, 1403, 0,
	1411, 2326, 0, 0, 0, 940, 1410, 2326, 0, 0,
	0, 0, 0, 1021, 0, 0, 0, 0, 0, 0,
	0, 0, 947, 3483, 0, 0, 0, 940, 4257, 3492,
	0, 940, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1485, 999,
	999, 1412, 0, 0, 940, 0, 0, 0, 0, 940,
	0, 0, 0, 0, 940, 0, 940, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1021, 0, 0, 3535,
	0, 0, 0, 0, 0, 0, 1413, 0, 0, 0,
	0, 0, 1794, 0, 1021, 3149, 0, 1416, 0, 876,
	1491, 1784, 1785, 1786, 0, 0, 0, 0, 0, 3149,
	1778, 1779, 1780, 1781, 1782, 1783, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 749, 0, 0, 0,
	1400, 0, 1418, 1417, 1487, 0, 0, 2326, 1021, 0,
	0, 0, 0, 0, 1021, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 876, 876, 0, 0, 0, 0,
	0, 3927, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 876, 876, 0, 0, 0, 0,
	0, 0, 0, 0, 876, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1794, 0, 0, 0, 940,
	0, 0, 0, 0, 1784, 1785, 1786, 0, 0, 1407,
	985, 0, 0, 1778, 1779, 1780, 1781, 1782, 1783, 0,
	0, 0, 1476, 940, 5289, 0, 0, 0, 3149, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	0, 0, 0, 0, 1486, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1794, 0,
	0, 0, 0, 0, 0, 0, 0, 1784, 1785, 1786,
	0, 0, 0, 2326, 2326, 2326, 1778, 1779, 1780, 1781,
	1782, 1783, 0, 1805, 1482, 0, 1775, 0, 0, 0,
	1787, 1788, 1789, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2419, 0, 0, 2420, 0, 1479, 0, 2425,
	0, 2417, 1021, 1021, 0, 1021, 2422, 2426, 2421, 0,
	2423, 0, 0, 0, 2424, 1798, 1799, 2418, 685, 0,
	0, 1484, 940, 0, 2427, 0, 0, 0, 0, 733,
	733, 733, 733, 756, 757, 0, 3742, 876, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	795, 795, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1490, 0, 0, 3149, 0, 0, 0,
	0, 0, 0, 0, 0, 862, 0, 866, 0, 0,
	0, 904, 905, 0, 0, 910, 911, 876, 0, 0,
	0, 1021, 5161, 0, 0, 1504, 0, 0, 110, 0,
	1021, 1477, 0, 0, 4112, 0, 876, 876, 944, 3302,
	0, 0, 0, 0, 955, 1483, 958, 0, 960, 961,
	962, 963, 964, 0, 0, 1805, 973, 0, 1775, 0,
	978, 1480, 1787, 1788, 1789, 986, 0, 876, 1478, 0,
	0, 0, 1488, 0, 2419, 0, 0, 2420, 876, 0,
	0, 2425, 940, 2417, 0, 0, 0, 0, 2422, 2426,
	2421, 0, 2423, 0, 0, 876, 2424, 1798, 1799, 2418,
	0, 876, 0, 0, 0, 0, 2427, 3902, 0, 1481,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 940, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 940, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 940, 940, 0, 0, 940, 940, 940, 0, 940,
	0, 0, 0, 0, 1759, 0, 0, 0, 0, 0,
	940, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 0, 940, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 940, 0, 0,
	0, 3149, 0, 940, 940, 0, 0, 0, 940, 0,
	947, 947, 0, 0, 0, 940, 0, 0, 0, 940,
	940, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1021, 0, 940, 0, 0, 0, 0, 940, 940,
	0, 1021, 940, 940, 940, 940, 940, 940, 940, 940,
	940, 940, 940, 940, 940, 0, 940, 947, 0, 0,
	0, 0, 0, 940, 940, 940, 1021, 0, 0, 0,
	0, 940, 0, 940, 0, 0, 0, 0, 0, 0,
	940, 2326, 0, 0, 940, 0, 0, 0, 0, 940,
	0, 0, 0, 940, 0, 0, 0, 0, 0, 0,
	0, 940, 940, 940, 0, 0, 0, 0, 0, 0,
	0, 0, 940, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3149, 940, 0, 0, 940,
	0, 0, 0, 0, 3149, 0, 5641, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 999, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 940, 940, 0, 940,
	940, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4097, 0, 0, 0, 0, 0,
	0, 3179, 0, 4102, 0, 0, 0, 0, 0, 1485,
	0, 940, 0, 0, 0, 0, 0, 0, 0, 1021,
	940, 940, 749, 0, 0, 0, 0, 0, 0, 0,
	1021, 1021, 0, 0, 1021, 0, 0, 0, 1794, 0,
	876, 0, 0, 0, 0, 0, 999, 1784, 1785, 1786,
	0, 0, 940, 0, 1148, 1149, 1778, 1779, 1780, 1781,
	1782, 1783, 5699, 0, 0, 0, 0, 0, 1021, 0,
	0, 1491, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3149, 0, 167, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 749, 0, 876, 0, 0, 0, 876,
	876, 0, 1312, 0, 0, 1487, 1805, 0, 192, 1775,
	0, 0, 170, 1787, 1788, 1789, 0, 0, 940, 940,
	0, 189, 0, 0, 0, 2419, 0, 0, 2420, 5699,
	0, 0, 2425, 0, 2417, 0, 999, 0, 0, 2422,
	2426, 2421, 0, 2423, 0, 5763, 0, 2424, 1798, 1799,
	2418, 0, 0, 177, 940, 0, 0, 2427, 0, 0,
	0, 947, 947, 0, 0, 749, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2326, 1021, 2326, 0,
	0, 0, 0, 0, 0, 1121, 0, 0, 0, 2326,
	1794, 0, 0, 1476, 4220, 0, 0, 733, 0, 1784,
	1785, 1786, 0, 0, 4224, 0, 5704, 0, 1778, 1779,
	1780, 1781, 1782, 1783, 0, 1486, 0, 0, 0, 1152,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4245,
	1805, 0, 0, 1775, 0, 0, 749, 1787, 1788, 1789,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 2419,
	749, 0, 2420, 0, 795, 1482, 2425, 0, 2417, 0,
	2326, 0, 1021, 2422, 2426, 2421, 0, 2423, 0, 0,
	1021, 2424, 1798, 1799, 2418, 173, 0, 0, 1479, 0,
	0, 2427, 0, 0, 0, 0, 749, 0, 1341, 0,
	0, 0, 0, 876, 0, 0, 0, 0, 0, 3180,
	0, 0, 1484, 0, 0, 0, 0, 2326, 0, 0,
	0, 169, 0, 0, 1200, 102, 0, 0, 179, 0,
	0, 0, 0, 0, 940, 0, 174, 0, 0, 0,
	0, 0, 0, 0, 175, 0, 0, 0, 0, 193,
	0, 940, 940, 0, 1490, 0, 0, 940, 940, 0,
	0, 0, 0, 0, 940, 940, 0, 0, 0, 0,
	0, 940, 0, 0, 1383, 940, 0, 1387, 0, 2897,
	0, 0, 0, 0, 0, 940, 0, 0, 0, 110,
	0, 0, 3175, 0, 0, 0, 940, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1483, 0, 999, 0,
	0, 0, 0, 0, 0, 999, 0, 0, 0, 0,
	0, 4396, 1480, 1499, 0, 0, 0, 0, 0, 1478,
	0, 940, 0, 1488, 0, 181, 1528, 0, 0, 940,
	0, 0, 940, 0, 940, 102, 3181, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1021, 0,
	0, 0, 0, 0, 940, 0, 188, 778, 780, 0,
	1481, 940, 3182, 0, 168, 940, 940, 102, 0, 940,
	0, 0, 176, 1485, 0, 940, 102, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 940, 183, 999,
	0, 0, 0, 185, 0, 0, 0, 0, 0, 180,
	0, 191, 0, 190, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 171, 0, 999, 0, 0, 0,
	0, 195, 0, 194, 0, 1021, 0, 0, 0, 0,
	1021, 0, 0, 0, 0, 1491, 0, 0, 1021, 0,
	0, 0, 0, 0, 1805, 0, 0, 1775, 0, 0,
	0, 1787, 1788, 1789, 0, 0, 0, 940, 0, 0,
	0, 0, 186, 2419, 0, 0, 2420, 0, 0, 1487,
	2425, 0, 2417, 2326, 0, 0, 0, 2422, 2426, 2421,
	0, 2423, 0, 0, 0, 2424, 1798, 1799, 2418, 0,
	0, 0, 940, 0, 733, 2427, 733, 733, 733, 876,
	0, 733, 733, 733, 0, 0, 733, 0, 0, 0,
	940, 1794, 0, 4574, 0, 940, 0, 0, 0, 0,
	1784, 1785, 1786, 999, 0, 999, 0, 5642, 0, 1778,
	1779, 1780, 1781, 1782, 1783, 0, 0, 0, 0, 0,
	0, 0, 0, 749, 0, 0, 940, 0, 0, 0,
	0, 0, 749, 749, 0, 0, 0, 1476, 0, 0,
	0, 0, 999, 1021, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 876, 1486,
	0, 876, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4864, 4865, 0, 0, 0, 4868, 4869,
	0, 0, 0, 0, 0, 0, 0, 1021, 0, 0,
	0, 0, 0, 0, 0, 940, 0, 0, 0, 1482,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1794, 0, 0, 0, 1021,
	1021, 0, 1479, 0, 1784, 1785, 1786, 0, 0, 0,
	0, 5632, 0, 1778, 1779, 1780, 1781, 1782, 1783, 0,
	0, 0, 0, 0, 0, 0, 1484, 0, 795, 0,
	0, 876, 0, 0, 0, 0, 0, 0, 940, 0,
	0, 0, 0, 0, 0, 0, 940, 940, 940, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1405, 0, 0, 2475, 0, 1406, 0, 0, 1490, 1415,
	0, 0, 0, 0, 0, 0, 940, 940, 0, 0,
	940, 940, 940, 0, 0, 0, 0, 0, 0, 999,
	0, 0, 0, 0, 2511, 0, 0, 0, 0, 0,
	1473, 0, 0, 110, 0, 0, 1477, 940, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 0, 940, 940, 0, 0, 0, 0,
	0, 1408, 0, 4755, 1021, 0, 1480, 0, 0, 940,
	940, 0, 0, 1478, 0, 1183, 1183, 1488, 0, 2326,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3024,
	1414, 0, 0, 0, 1805, 0, 0, 1775, 0, 0,
	3051, 1787, 1788, 1789, 940, 0, 0, 2631, 0, 1021,
	0, 0, 3077, 2419, 1481, 3024, 2420, 0, 0, 0,
	2425, 1419, 2417, 0, 0, 0, 0, 2422, 2426, 2421,
	0, 2423, 0, 0, 0, 2424, 1798, 1799, 2418, 0,
	0, 0, 0, 1805, 0, 2427, 1775, 0, 0, 0,
	1787, 1788, 1789, 0, 2685, 0, 0, 0, 0, 0,
	940, 0, 2419, 0, 1404, 2420, 0, 0, 0, 2425,
	0, 2417, 0, 0, 0, 1427, 2422, 2426, 2421, 0,
	2423, 940, 0, 0, 2424, 1798, 1799, 2418, 0, 749,
	0, 1409, 0, 0, 2427, 0, 4837, 0, 0, 0,
	0, 1021, 0, 0, 0, 0, 0, 102, 780, 0,
	0, 0, 0, 876, 0, 0, 2773, 0, 0, 2775,
	0, 0, 0, 0, 940, 0, 1411, 0, 0, 0,
	0, 0, 1410, 0, 0, 0, 0, 0, 0, 1794,
	4866, 1021, 1021, 0, 876, 876, 0, 0, 1784, 1785,
	1786, 0, 0, 0, 0, 5483, 940, 1778, 1779, 1780,
	1781, 1782, 1783, 940, 0, 0, 0, 0, 0, 940,
	0, 0, 4877, 4878, 940, 0, 940, 1412, 0, 0,
	0, 0, 0, 0, 0, 0, 778, 0, 0, 940,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 940, 0, 0,
	0, 0, 0, 0, 940, 0, 0, 0, 0, 0,
	0, 940, 1413, 0, 0, 0, 0, 0, 940, 0,
	0, 0, 0, 1416, 940, 0, 0, 0, 0, 749,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 876, 0, 0, 2864, 0, 0, 2867, 0, 0,
	0, 0, 0, 0, 0, 0, 1426, 0, 1418, 1417,
	733, 733, 0, 0, 0, 733, 733, 0, 733, 733,
	0, 0, 0, 0, 0, 0, 0, 1021, 0, 0,
	0, 0, 0, 0, 1021, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3902, 0, 1805,
	0, 0, 1775, 0, 0, 0, 1787, 1788, 1789, 0,
	0, 0, 0, 940, 0, 0, 2326, 0, 2419, 0,
	0, 2420, 0, 0, 0, 2425, 940, 2417, 0, 0,
	940, 0, 2422, 2426, 2421, 1407, 2423, 876, 940, 940,
	2424, 1798, 1799, 2418, 0, 0, 0, 0, 0, 1751,
	2427, 1758, 0, 0, 0, 940, 0, 0, 1769, 0,
	0, 0, 0, 0, 0, 1421, 0, 0, 0, 2251,
	2252, 2253, 2254, 2255, 1021, 0, 1021, 1021, 940, 0,
	2260, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	940, 0, 0, 0, 2278, 0, 940, 940, 940, 0,
	940, 0, 0, 0, 0, 0, 0, 0, 0, 940,
	2326, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1021, 940, 0,
	2326, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2326, 0, 0,
	0, 0, 0, 876, 5134, 5136, 0, 0, 940, 0,
	0, 0, 0, 0, 0, 0, 2408, 0, 0, 1794,
	0, 0, 0, 102, 0, 0, 0, 0, 1784, 1785,
	1786, 0, 0, 0, 0, 5469, 0, 1778, 1779, 1780,
	1781, 1782, 1783, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1405, 0, 0, 0, 0, 1406,
	0, 0, 0, 1415, 0, 5458, 0, 0, 1794, 0,
	0, 0, 0, 0, 0, 0, 0, 1784, 1785, 1786,
	0, 0, 0, 0, 5446, 0, 1778, 1779, 1780, 1781,
	1782, 1783, 940, 0, 0, 778, 0, 0, 778, 778,
	0, 0, 1805, 0, 0, 1775, 0, 0, 0, 1787,
	1788, 1789, 0, 0, 0, 0, 940, 0, 940, 940,
	0, 2419, 2262, 0, 940, 1408, 2264, 2265, 2425, 0,
	2417, 0, 0, 999, 0, 2422, 2426, 2421, 0, 2423,
	0, 0, 999, 2424, 1798, 1799, 2418, 0, 0, 0,
	0, 0, 0, 2427, 1414, 0, 0, 5247, 0, 0,
	940, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1419, 0, 0, 0, 0,
	0, 0, 940, 0, 0, 0, 0, 0, 0, 0,
	3051, 3051, 0, 940, 0, 0, 940, 0, 0, 999,
	0, 0, 940, 940, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 999, 0, 0, 0, 1404, 0,
	0, 0, 0, 0, 0, 0, 876, 0, 0, 0,
	0, 0, 0, 0, 0, 941, 102, 1660, 0, 1660,
	1660, 0, 0, 0, 0, 1409, 0, 0, 0, 940,
	0, 0, 0, 876, 0, 0, 0, 0, 0, 940,
	0, 0, 0, 0, 0, 0, 0, 0, 3051, 3051,
	3051, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1411, 0, 0, 0, 0, 0, 1410, 0, 0, 0,
	999, 999, 0, 940, 940, 0, 0, 940, 0, 999,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	5378, 0, 0, 0, 876, 0, 0, 940, 0, 0,
	0, 0, 0, 0, 1794, 0, 940, 0, 940, 0,
	0, 1412, 0, 1784, 1785, 1786, 0, 0, 0, 0,
	5130, 0, 1778, 1779, 1780, 1781, 1782, 1783, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 0, 0, 1413, 0, 0, 0,
	0, 0, 0, 0, 940, 0, 0, 1416, 0, 0,
	0, 0, 0, 0, 0, 0, 940, 0, 0, 0,
	0, 0, 0, 0, 0, 999, 0, 0, 0, 0,
	0, 999, 0, 878, 0, 0, 0, 0, 0, 0,
	4046, 940, 1418, 1417, 878, 878, 0, 0, 0, 0,
	0, 0, 0, 0, 940, 0, 0, 0, 0, 0,
	0, 0, 1021, 5724, 0, 948, 878, 0, 0, 1405,
	948, 0, 948, 940, 1406, 2326, 0, 0, 1415, 878,
	878, 0, 0, 2251, 2252, 0, 0, 0, 0, 0,
	0, 999, 0, 0, 878, 878, 878, 1183, 0, 0,
	0, 2936, 2937, 2938, 2939, 2940, 2941, 2942, 2943, 2944,
	2945, 2946, 2947, 2948, 2949, 2950, 2951, 0, 2957, 1407,
	0, 940, 940, 0, 5724, 0, 0, 0, 878, 0,
	0, 0, 0, 0, 0, 0, 2326, 940, 0, 0,
	1408, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	0, 1294, 5724, 940, 940, 0, 0, 0, 0, 0,
	0, 3207, 0, 0, 2326, 0, 0, 0, 1805, 1414,
	0, 1775, 0, 0, 0, 1787, 1788, 1789, 0, 3221,
	0, 0, 0, 0, 0, 0, 0, 2419, 0, 0,
	2420, 3238, 0, 102, 2425, 0, 2417, 0, 0, 3249,
	1419, 2422, 2426, 2421, 0, 2423, 0, 0, 0, 2424,
	1798, 1799, 2418, 0, 0, 0, 0, 1794, 0, 2427,
	0, 0, 0, 0, 0, 102, 1784, 1785, 1786, 0,
	1293, 3294, 3295, 3296, 0, 1778, 1779, 1780, 1781, 1782,
	1783, 0, 3303, 1404, 0, 0, 0, 0, 0, 0,
	3314, 0, 3318, 3319, 0, 0, 0, 0, 3323, 0,
	0, 3327, 3328, 0, 0, 3335, 0, 3337, 3340, 0,
	1409, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3362, 3363, 0, 0, 3367, 3368, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3377, 3378, 0, 1411, 0, 0, 0, 0,
	0, 1410, 0, 3391, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3402, 3403, 3404,
	3405, 3406, 0, 0, 3408, 0, 2978, 0, 3412, 0,
	0, 0, 3415, 3416, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1412, 0, 999, 0,
	0, 0, 0, 3424, 3425, 0, 0, 3430, 0, 3431,
	0, 0, 0, 0, 3432, 0, 3433, 3434, 0, 0,
	0, 3435, 0, 0, 0, 0, 0, 1013, 1013, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3448, 1413, 0, 0, 0, 5709, 0, 3451, 0, 0,
	3452, 0, 1416, 0, 0, 0, 0, 3461, 3462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3479, 0,
	0, 999, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3051, 3051, 4041, 0, 1418, 1417, 999,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1012, 1012, 0, 0,
	1805, 0, 0, 1775, 0, 0, 0, 1787, 1788, 1789,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2419,
	0, 0, 2420, 999, 0, 0, 2425, 0, 2417, 999,
	0, 0, 0, 2422, 2426, 2421, 0, 2423, 0, 0,
	4717, 2424, 1798, 1799, 2418, 0, 0, 0, 0, 0,
	0, 2427, 0, 0, 1407, 0, 0, 0, 277, 3051,
	3051, 3051, 3051, 3051, 3051, 3051, 3051, 3051, 3051, 3051,
	3051, 3051, 0, 3051, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1421, 0, 0, 0, 0, 878,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 878,
	0, 4259, 878, 0, 0, 0, 3024, 0, 0, 878,
	0, 0, 878, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3010, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3025, 3027, 0, 0,
	0, 0, 0, 3033, 0, 3044, 3047, 0, 3058, 3059,
	3064, 3067, 0, 0, 0, 0, 0, 3075, 0, 0,
	0, 3079, 3085, 3027, 3027, 3092, 3027, 0, 3027, 3027,
	3027, 0, 0, 4319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1405, 0, 0,
	0, 0, 1406, 0, 0, 0, 1415, 999, 999, 0,
	999, 0, 0, 1794, 0, 0, 0, 0, 0, 0,
	0, 0, 1784, 1785, 1786, 0, 0, 0, 0, 5103,
	0, 1778, 1779, 1780, 1781, 1782, 1783, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 877, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 877, 877, 3051,
	0, 0, 0, 0, 0, 0, 0, 0, 1408, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3109, 877,
	0, 0, 2949, 2950, 2951, 2957, 0, 0, 0, 0,
	0, 0, 877, 877, 0, 0, 999, 1414, 0, 0,
	0, 0, 0, 0, 0, 999, 0, 877, 877, 877,
	0, 0, 1805, 0, 0, 1775, 0, 0, 0, 1787,
	1788, 1789, 0, 0, 0, 0, 0, 0, 1419, 0,
	0, 2419, 2989, 0, 2420, 0, 0, 0, 2425, 0,
	2417, 877, 0, 0, 0, 2422, 2426, 2421, 0, 2423,
	0, 0, 0, 2424, 1798, 1799, 2418, 0, 1805, 0,
	0, 1775, 0, 2427, 0, 1787, 1788, 1789, 0, 0,
	0, 1404, 0, 0, 0, 0, 0, 2419, 0, 0,
	2420, 0, 0, 0, 2425, 3090, 2417, 3826, 0, 3829,
	0, 2422, 2426, 2421, 0, 2423, 0, 0, 1409, 2424,
	1798, 1799, 2418, 0, 0, 0, 0, 0, 0, 2427,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3866, 0, 0,
	0, 0, 0, 1411, 0, 0, 0, 0, 0, 1410,
	0, 0, 0, 0, 0, 0, 0, 0, 878, 0,
	0, 0, 878, 878, 0, 3908, 0, 0, 0, 0,
	0, 0, 0, 3916, 0, 3916, 0, 0, 0, 0,
	0, 3925, 0, 0, 0, 0, 0, 0, 0, 0,
	878, 0, 0, 0, 1412, 0, 1405, 0, 0, 0,
	0, 1406, 878, 0, 0, 1415, 999, 0, 878, 1405,
	0, 2978, 0, 0, 1406, 0, 999, 0, 1415, 0,
	0, 1405, 780, 0, 0, 1794, 1406, 3410, 0, 0,
	1415, 0, 3134, 3134, 1784, 1785, 1786, 0, 0, 1413,
	0, 999, 3986, 1778, 1779, 1780, 1781, 1782, 1783, 0,
	1416, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4010, 4011, 4012, 4013, 0, 1408, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1408, 0, 0, 3380, 0, 1418, 1417, 0, 0, 0,
	0, 0, 1408, 0, 0, 0, 1414, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1414,
	0, 0, 4038, 4039, 1013, 4042, 4043, 4044, 0, 0,
	0, 1414, 0, 0, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1419, 0, 0, 0, 0, 0, 4664, 0, 0, 0,
	0, 0, 1419, 0, 4062, 0, 0, 0, 0, 0,
	0, 0, 1407, 0, 0, 0, 0, 0, 0, 0,
	1404, 0, 0, 4077, 999, 0, 0, 0, 0, 0,
	0, 4078, 0, 1404, 0, 999, 999, 0, 0, 999,
	0, 0, 1421, 1012, 1013, 1404, 0, 1409, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2328, 0,
	1409, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1409, 999, 0, 0, 0, 0, 0, 0,
	0, 0, 1411, 0, 0, 0, 0, 0, 1410, 0,
	0, 0, 0, 0, 0, 1411, 0, 0, 0, 0,
	0, 1410, 0, 0, 878, 0, 0, 1411, 4118, 0,
	2328, 0, 2328, 1410, 0, 0, 0, 1758, 0, 0,
	0, 0, 0, 1012, 0, 2260, 0, 0, 0, 0,
	0, 0, 877, 1412, 1013, 878, 0, 1769, 0, 0,
	0, 878, 877, 0, 0, 877, 1412, 0, 0, 0,
	0, 0, 877, 0, 0, 877, 0, 0, 1412, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1188, 0,
	0, 0, 0, 0, 0, 3604, 3605, 1794, 1413, 0,
	0, 3611, 999, 0, 0, 0, 1784, 1785, 1786, 1416,
	0, 1413, 0, 5082, 0, 1778, 1779, 1780, 1781, 1782,
	1783, 0, 1416, 1413, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1012, 1416, 0, 0, 3640, 0, 0,
	0, 0, 3366, 1794, 1418, 1417, 0, 0, 0, 3010,
	3010, 3010, 1784, 1785, 1786, 2629, 0, 1418, 1417, 5060,
	3660, 1778, 1779, 1780, 1781, 1782, 1783, 2625, 0, 1418,
	1417, 3677, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 999, 0, 0,
	0, 0, 0, 0, 0, 999, 0, 0, 0, 0,
	0, 0, 0, 3064, 3064, 3064, 0, 0, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 1405, 0, 3733,
	0, 1407, 1406, 0, 0, 0, 1415, 0, 0, 0,
	0, 0, 0, 0, 1407, 0, 0, 0, 0, 0,
	0, 3755, 0, 0, 0, 3759, 1407, 0, 0, 0,
	0, 1421, 0, 0, 0, 0, 0, 2262, 0, 0,
	0, 0, 0, 0, 1421, 0, 0, 0, 3771, 0,
	0, 0, 0, 3775, 0, 0, 1421, 3134, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 878, 1408, 878,
	878, 878, 878, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3051, 0, 0, 0, 0, 0,
	0, 2978, 0, 0, 0, 0, 1013, 1414, 0, 0,
	0, 0, 0, 1013, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2262, 3633, 4354, 0, 0, 0,
	0, 0, 948, 948, 948, 0, 0, 0, 1419, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3051, 878, 3916, 0,
	0, 0, 0, 999, 0, 4382, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1404, 0, 0, 0, 1012, 0, 0, 0, 0,
	0, 877, 1012, 0, 0, 877, 877, 1013, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1409, 0,
	0, 0, 0, 3951, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 877, 1013, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 877, 0, 3978, 0, 3916,
	0, 877, 0, 1411, 0, 999, 0, 0, 0, 1410,
	0, 0, 0, 999, 0, 4451, 4452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2328,
	0, 0, 4468, 0, 0, 0, 1012, 0, 0, 0,
	3791, 0, 3795, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4498, 0, 1412, 0, 0, 0, 0, 0,
	0, 0, 0, 1012, 0, 0, 0, 0, 4503, 0,
	0, 0, 0, 0, 0, 0, 0, 4505, 4506, 4507,
	0, 0, 4510, 0, 0, 4513, 4514, 4515, 4516, 0,
	0, 1013, 0, 1013, 0, 0, 0, 0, 4525, 1413,
	0, 0, 0, 0, 0, 4528, 4058, 4529, 0, 0,
	1416, 0, 0, 0, 0, 0, 3051, 0, 4543, 0,
	0, 0, 0, 0, 0, 0, 4548, 4549, 0, 0,
	1013, 4552, 4553, 4554, 4555, 4556, 0, 0, 999, 0,
	0, 0, 0, 1449, 0, 1418, 1417, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1012, 102, 1012, 0, 0, 3051, 0, 0, 0, 0,
	0, 0, 999, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1805,
	0, 2327, 1775, 937, 0, 0, 1787, 1788, 1789, 1012,
	0, 0, 0, 0, 999, 999, 0, 0, 2419, 0,
	0, 2420, 1407, 0, 0, 2425, 0, 2417, 0, 0,
	0, 0, 2422, 2426, 2421, 0, 2423, 0, 0, 0,
	2424, 1798, 1799, 2418, 0, 0, 0, 877, 0, 0,
	2427, 0, 1421, 2327, 0, 2327, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 877, 0,
	0, 0, 0, 0, 877, 4162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4170, 4171, 1013, 0, 4174,
	0, 0, 0, 4177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4188, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3010, 0, 0, 0, 733, 0, 4201, 4202, 999,
	0, 0, 4205, 0, 0, 0, 0, 0, 0, 4210,
	0, 0, 0, 3027, 3027, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1012, 4221, 0, 0,
	0, 0, 4223, 3010, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 999, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3051, 0, 4242, 4243, 4244,
	0, 0, 0, 0, 0, 0, 0, 4250, 0, 0,
	0, 0, 0, 0, 3075, 0, 0, 0, 0, 0,
	0, 0, 0, 3025, 877, 0, 0, 3027, 0, 1000,
	1000, 0, 0, 0, 0, 4276, 4277, 4278, 0, 0,
	0, 0, 0, 0, 0, 0, 1183, 0, 0, 0,
	0, 4788, 0, 0, 1228, 0, 0, 0, 0, 0,
	102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 999, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3027, 0, 3010, 4323, 0, 0, 0, 0, 0,
	877, 0, 877, 877, 877, 877, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 999, 999, 0, 0,
	0, 0, 0, 0, 0, 4358, 0, 0, 0, 2262,
	0, 0, 0, 0, 4363, 4364, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4845,
	1296, 0, 4847, 0, 0, 0, 0, 0, 4850, 4851,
	4852, 0, 0, 4855, 4856, 4857, 0, 0, 0, 0,
	0, 0, 0, 4861, 4862, 0, 0, 5530, 0, 0,
	877, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1805, 0, 0, 1775, 0, 0, 0,
	1787, 1788, 1789, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2419, 4879, 4880, 2420, 0, 4884, 0, 2425,
	0, 2417, 0, 0, 0, 0, 2422, 2426, 2421, 4888,
	2423, 0, 0, 0, 2424, 1798, 1799, 2418, 0, 0,
	0, 0, 0, 0, 2427, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 0, 0, 0, 0,
	102, 102, 0, 0, 0, 0, 0, 0, 0, 999,
	0, 0, 3134, 0, 0, 3134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4907, 0, 0, 0, 0,
	997, 997, 2327, 0, 1794, 0, 0, 0, 0, 0,
	0, 0, 0, 1784, 1785, 1786, 0, 0, 2328, 0,
	4919, 0, 1778, 1779, 1780, 1781, 1782, 1783, 0, 0,
	3051, 3051, 0, 0, 3051, 102, 0, 0, 4949, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2328, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 999,
	0, 999, 999, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5014, 0, 0, 0,
	0, 5021, 0, 0, 0, 0, 1015, 1015, 0, 0,
	0, 0, 0, 0, 0, 2328, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3916, 0, 0, 0,
	878, 0, 1790, 0, 2328, 0, 0, 0, 0, 0,
	5065, 0, 0, 0, 0, 5068, 0, 0, 0, 0,
	2753, 5074, 999, 0, 0, 241, 0, 0, 4606, 0,
	0, 0, 0, 0, 3134, 0, 0, 0, 0, 0,
	0, 0, 0, 244, 0, 4615, 4616, 0, 0, 0,
	0, 4620, 4621, 0, 0, 0, 0, 0, 4624, 4625,
	0, 0, 0, 0, 0, 4628, 0, 0, 0, 3010,
	0, 0, 0, 0, 5110, 5111, 0, 0, 0, 4634,
	5116, 0, 0, 0, 5118, 878, 878, 0, 0, 0,
	1769, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	878, 0, 0, 0, 0, 0, 0, 878, 0, 0,
	0, 1790, 0, 0, 0, 0, 4667, 0, 4670, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2328,
	0, 0, 250, 0, 0, 0, 0, 2749, 948, 0,
	948, 948, 0, 0, 0, 4689, 0, 0, 0, 1805,
	0, 1013, 1775, 0, 0, 0, 1787, 1788, 1789, 0,
	1013, 0, 0, 246, 0, 0, 0, 0, 2419, 0,
	0, 2420, 0, 0, 247, 2425, 0, 2417, 0, 0,
	0, 0, 2422, 2426, 2421, 2759, 2423, 0, 0, 0,
	2424, 1798, 1799, 2418, 0, 0, 878, 0, 0, 2751,
	2427, 0, 0, 0, 0, 878, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 2752, 0, 0, 1013, 0, 0,
	1012, 2328, 0, 0, 0, 0, 0, 878, 0, 1012,
	0, 4775, 1013, 0, 0, 2763, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3916, 0, 0, 0, 0, 0, 1794, 0,
	0, 0, 0, 0, 0, 0, 1000, 1784, 1785, 1786,
	5282, 0, 0, 0, 4901, 0, 1778, 1779, 1780, 1781,
	1782, 1783, 0, 0, 0, 0, 0, 0, 0, 4800,
	0, 0, 0, 0, 0, 0, 1012, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1013, 1013,
	0, 1012, 231, 2754, 0, 254, 0, 1013, 5316, 0,
	4828, 5319, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2760, 0, 0, 2755, 0, 0,
	0, 0, 255, 0, 0, 0, 1000, 242, 0, 0,
	256, 3134, 3134, 0, 0, 3134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 2761, 0, 0, 0, 0, 0, 2762, 0, 0,
	0, 0, 249, 0, 0, 0, 2756, 1012, 1012, 4871,
	0, 0, 2757, 0, 0, 0, 1012, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1013, 0, 0, 0, 0, 0, 1013,
	0, 0, 0, 0, 0, 0, 1000, 1295, 0, 0,
	2750, 0, 0, 0, 0, 0, 0, 0, 2328, 0,
	0, 0, 4896, 0, 2328, 0, 0, 0, 0, 0,
	4898, 4899, 4900, 0, 0, 0, 0, 999, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5452, 0, 0, 1013,
	4908, 0, 0, 0, 4911, 4912, 4913, 0, 0, 0,
	0, 0, 1012, 0, 0, 0, 0, 0, 1012, 0,
	0, 0, 0, 0, 0, 5472, 5473, 0, 0, 0,
	0, 3027, 0, 0, 0, 0, 0, 997, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4953, 0,
	1790, 2327, 0, 0, 0, 0, 0, 1790, 0, 0,
	0, 0, 0, 0, 4970, 0, 878, 0, 1790, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1012, 0,
	0, 0, 0, 0, 0, 0, 2327, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2328, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 997, 0, 0,
	0, 878, 878, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1015, 0, 0, 0, 0, 2327, 0,
	0, 878, 878, 0, 0, 0, 0, 0, 5567, 0,
	0, 878, 0, 877, 1794, 0, 0, 2327, 0, 0,
	0, 5577, 0, 1784, 1785, 1786, 0, 0, 0, 0,
	4892, 0, 1778, 1779, 1780, 1781, 1782, 1783, 0, 0,
	0, 0, 0, 1014, 1014, 5593, 241, 0, 0, 0,
	240, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 244, 0, 0, 997, 1000, 0,
	0, 0, 0, 1015, 0, 1000, 0, 0, 0, 0,
	0, 0, 238, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 877, 877,
	2328, 2328, 2328, 0, 0, 0, 0, 0, 0, 0,
	5146, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3134, 0, 0, 0, 0, 1013, 0, 0, 0,
	3075, 0, 0, 877, 0, 0, 0, 0, 0, 0,
	877, 0, 0, 5174, 0, 0, 0, 0, 0, 5651,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1000,
	0, 0, 2327, 1015, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 250, 878, 0, 0, 102, 0, 0,
	0, 0, 0, 0, 0, 0, 2643, 0, 5206, 0,
	0, 102, 0, 0, 0, 0, 0, 0, 0, 1013,
	0, 0, 0, 0, 246, 1012, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 102, 1013, 0, 0,
	0, 0, 0, 0, 878, 0, 0, 0, 0, 877,
	0, 0, 0, 0, 0, 0, 0, 0, 877, 0,
	236, 0, 0, 878, 878, 0, 0, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 0, 0, 0, 0,
	0, 1013, 0, 245, 2327, 0, 0, 1013, 0, 0,
	877, 0, 0, 0, 878, 0, 0, 5277, 1012, 0,
	0, 0, 0, 0, 0, 878, 237, 0, 0, 948,
	0, 0, 0, 1000, 0, 1000, 1012, 0, 0, 0,
	0, 0, 878, 0, 0, 0, 0, 0, 878, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 5310,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 997,
	5772, 0, 1000, 0, 0, 0, 997, 0, 0, 0,
	1012, 0, 5326, 0, 0, 0, 1012, 0, 0, 0,
	0, 0, 0, 0, 257, 0, 0, 0, 0, 0,
	0, 0, 0, 231, 2260, 0, 254, 0, 0, 0,
	5348, 5348, 5348, 0, 5351, 102, 0, 0, 0, 0,
	0, 0, 0, 3027, 0, 239, 0, 0, 0, 0,
	0, 258, 0, 255, 0, 0, 0, 0, 242, 0,
	0, 256, 0, 0, 0, 0, 0, 0, 0, 0,
	1790, 1790, 1790, 1790, 1790, 0, 0, 248, 0, 1790,
	997, 0, 0, 0, 0, 1015, 0, 0, 0, 0,
	0, 0, 1015, 249, 0, 1013, 1013, 1790, 1013, 259,
	0, 0, 0, 235, 0, 0, 0, 997, 0, 0,
	102, 0, 0, 3054, 0, 0, 0, 0, 0, 243,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2328, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2327, 0, 0, 0, 0, 0, 2327, 0, 1000,
	0, 0, 0, 0, 0, 0, 3134, 0, 0, 0,
	0, 0, 0, 0, 1012, 1012, 1015, 1012, 0, 0,
	0, 0, 0, 0, 1013, 0, 5471, 0, 0, 1805,
	0, 0, 1775, 1013, 0, 0, 1787, 1788, 1789, 0,
	0, 0, 0, 1015, 0, 0, 0, 0, 2419, 0,
	5146, 2420, 0, 0, 997, 2425, 997, 2417, 5348, 0,
	0, 0, 2422, 2426, 2421, 0, 2423, 1790, 0, 0,
	2424, 1798, 1799, 2418, 0, 0, 2262, 0, 0, 0,
	2427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 997, 0, 0, 0, 0, 230, 877,
	0, 0, 0, 1012, 0, 0, 0, 0, 0, 0,
	0, 0, 1012, 0, 0, 0, 0, 878, 0, 0,
	212, 0, 0, 0, 0, 197, 5551, 0, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 2327, 0, 0,
	5560, 0, 0, 201, 0, 0, 0, 4678, 0, 0,
	1015, 0, 1015, 0, 877, 877, 0, 0, 0, 0,
	0, 224, 203, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 878, 0, 877, 877, 878, 878, 0, 0,
	0, 0, 0, 0, 877, 0, 0, 0, 1225, 1015,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5146, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1014, 0, 0, 0, 1013, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1013, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2328, 0, 2328, 0, 204, 0, 1013,
	997, 0, 0, 0, 0, 0, 2328, 0, 0, 0,
	0, 0, 0, 2327, 2327, 2327, 0, 0, 0, 0,
	0, 0, 0, 205, 0, 0, 0, 0, 1805, 0,
	0, 1775, 0, 0, 206, 1787, 1788, 1789, 0, 0,
	1014, 0, 0, 1012, 0, 207, 0, 2419, 0, 0,
	2420, 0, 0, 1012, 2425, 0, 2417, 5348, 0, 208,
	0, 2422, 2426, 2421, 0, 2423, 222, 0, 5669, 2424,
	1798, 1799, 2418, 0, 229, 0, 0, 2328, 1012, 2427,
	0, 0, 202, 0, 209, 0, 0, 877, 0, 0,
	0, 0, 0, 0, 0, 0, 1015, 0, 0, 0,
	102, 0, 0, 0, 0, 198, 0, 0, 0, 0,
	878, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2328, 0, 0, 0, 0, 0,
	1014, 0, 1013, 0, 0, 0, 0, 877, 0, 0,
	0, 0, 0, 1013, 1013, 0, 0, 1013, 0, 0,
	0, 0, 0, 0, 0, 0, 877, 877, 0, 0,
	0, 0, 0, 0, 994, 994, 0, 0, 0, 0,
	0, 0, 0, 213, 0, 0, 0, 0, 0, 0,
	0, 1013, 231, 214, 0, 215, 3010, 877, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 877, 0,
	0, 0, 0, 0, 223, 0, 0, 216, 0, 0,
	220, 1012, 217, 0, 0, 877, 0, 199, 0, 0,
	218, 877, 1012, 1012, 0, 0, 1012, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 226, 3012, 0, 0,
	0, 219, 0, 0, 0, 0, 0, 225, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 3012, 221, 3012,
	1012, 0, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3012, 1794, 0, 0, 0, 200, 1805,
	0, 0, 1775, 1784, 1785, 1786, 1787, 1788, 1789, 0,
	1013, 0, 1778, 1779, 1780, 1781, 1782, 1783, 2419, 0,
	0, 2420, 0, 0, 0, 2425, 0, 2417, 0, 0,
	0, 0, 2422, 2426, 2421, 0, 2423, 0, 0, 0,
	2424, 1798, 1799, 2418, 0, 0, 0, 0, 0, 0,
	2427, 0, 4653, 0, 0, 1790, 1790, 1790, 1790, 1790,
	1790, 1790, 1790, 1790, 1790, 1790, 1790, 1790, 1790, 1790,
	1790, 0, 0, 0, 0, 0, 1790, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1012,
	0, 0, 0, 3054, 3054, 1013, 0, 0, 0, 0,
	0, 0, 0, 1013, 0, 0, 1805, 0, 0, 1775,
	2328, 2327, 1014, 1787, 1788, 1789, 0, 0, 0, 1014,
	0, 0, 0, 0, 0, 2419, 787, 0, 2420, 1790,
	0, 0, 2425, 0, 2417, 0, 878, 0, 0, 2422,
	2426, 2421, 0, 2423, 1790, 0, 1790, 2424, 1798, 1799,
	2418, 0, 1790, 2643, 0, 0, 0, 2427, 0, 0,
	0, 0, 2643, 1790, 0, 0, 1790, 0, 0, 3705,
	0, 3054, 3054, 3054, 1012, 0, 0, 1790, 1790, 0,
	0, 0, 1012, 1790, 0, 0, 1790, 0, 0, 0,
	0, 0, 0, 0, 1790, 0, 0, 0, 1790, 0,
	0, 0, 0, 1014, 1790, 0, 0, 0, 0, 0,
	0, 1790, 0, 0, 0, 878, 0, 0, 878, 0,
	0, 0, 0, 0, 0, 4652, 0, 0, 1790, 1000,
	1014, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1000, 0, 0, 0, 0, 0,
	877, 0, 0, 1794, 0, 0, 0, 0, 0, 0,
	0, 0, 1784, 1785, 1786, 0, 0, 0, 0, 4655,
	0, 1778, 1779, 1780, 1781, 1782, 1783, 0, 0, 0,
	0, 1013, 0, 0, 0, 0, 0, 0, 0, 819,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 877, 0, 0, 878, 877,
	877, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2643, 3398, 0, 0, 0, 923, 926, 928, 0, 3401,
	0, 0, 0, 0, 0, 0, 0, 1014, 0, 1014,
	1805, 0, 0, 1775, 0, 0, 0, 1787, 1788, 1789,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2419,
	1012, 0, 2420, 1013, 0, 0, 2425, 0, 2417, 0,
	0, 1013, 0, 2422, 2426, 2421, 1014, 2423, 0, 0,
	0, 2424, 1798, 1799, 2418, 0, 2327, 0, 2327, 0,
	0, 2427, 0, 4647, 0, 0, 0, 0, 0, 2327,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 997, 0, 0, 0, 0, 0,
	0, 0, 0, 997, 0, 0, 2328, 0, 0, 0,
	0, 0, 0, 0, 0, 1000, 0, 0, 0, 0,
	0, 1000, 1012, 0, 0, 0, 0, 0, 0, 0,
	1012, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2327, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	997, 0, 0, 0, 0, 0, 1013, 0, 0, 0,
	0, 1000, 0, 877, 1794, 997, 0, 948, 0, 0,
	1015, 0, 0, 1784, 1785, 1786, 0, 2327, 0, 1015,
	0, 0, 1778, 1779, 1780, 1781, 1782, 1783, 0, 1790,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1013, 0, 0, 1014, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	878, 994, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 948, 1013, 1013, 0, 1012, 0, 0, 0, 0,
	0, 997, 997, 0, 0, 0, 1015, 0, 0, 0,
	997, 878, 878, 0, 0, 0, 0, 0, 0, 0,
	0, 1015, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1794, 0, 0, 0, 0, 0, 0, 0, 1012,
	1784, 1785, 1786, 0, 0, 0, 0, 0, 0, 1778,
	1779, 1780, 1781, 1782, 1783, 0, 0, 0, 0, 0,
	0, 994, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1012, 1012, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1015, 1015, 0,
	0, 0, 0, 0, 0, 0, 1015, 0, 0, 0,
	3012, 3012, 3012, 0, 0, 0, 997, 0, 878, 0,
	0, 0, 997, 0, 0, 0, 0, 1013, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1790, 1790, 0, 3054, 3054, 0, 0,
	1790, 994, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3705,
	3705, 0, 1013, 0, 0, 0, 0, 0, 0, 1790,
	0, 0, 997, 0, 0, 0, 0, 0, 1000, 0,
	0, 0, 0, 2328, 0, 0, 0, 0, 0, 1790,
	0, 0, 0, 2327, 0, 0, 1012, 0, 0, 0,
	0, 0, 1015, 0, 878, 0, 1790, 0, 1015, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 877,
	0, 0, 3054, 3054, 3054, 3054, 3054, 3054, 3054, 3054,
	3054, 3054, 3054, 3054, 3054, 0, 3054, 0, 3705, 3705,
	3705, 1012, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1000, 1114, 0, 1013, 1794, 0, 0, 0, 0,
	0, 1120, 1790, 0, 1784, 1785, 1786, 0, 1015, 3398,
	0, 0, 0, 1778, 1779, 1780, 1781, 1782, 1783, 0,
	0, 0, 0, 0, 1790, 0, 0, 2328, 1790, 0,
	0, 0, 0, 0, 1013, 1013, 0, 0, 877, 0,
	1790, 877, 0, 0, 1790, 0, 0, 0, 0, 0,
	0, 0, 0, 3398, 0, 0, 0, 2328, 0, 1000,
	0, 0, 0, 0, 0, 0, 0, 1304, 0, 0,
	0, 0, 0, 1012, 2328, 0, 0, 0, 0, 0,
	878, 0, 0, 0, 0, 1322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1330, 1333, 0,
	1335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1012, 1012, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1805, 0, 0, 1775, 0,
	0, 877, 1787, 1788, 1789, 0, 0, 0, 0, 0,
	0, 0, 1374, 994, 2419, 0, 0, 2420, 0, 0,
	994, 2425, 3054, 2417, 0, 0, 4651, 0, 2422, 2426,
	2421, 0, 2423, 0, 0, 0, 2424, 1798, 1799, 2418,
	0, 0, 0, 0, 0, 0, 2427, 0, 0, 997,
	0, 0, 0, 0, 0, 0, 0, 1013, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1790, 0, 0, 0, 0, 0, 0, 2643, 3398, 0,
	3398, 0, 0, 0, 994, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1790, 0, 2327,
	0, 0, 997, 0, 0, 0, 0, 0, 0, 0,
	0, 994, 0, 0, 0, 0, 1012, 0, 0, 0,
	997, 0, 0, 0, 0, 1015, 0, 1013, 0, 1013,
	1013, 0, 0, 0, 0, 0, 0, 0, 0, 948,
	948, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 878, 997, 0, 1000, 0, 0, 0,
	997, 0, 0, 0, 0, 1000, 0, 1790, 0, 0,
	0, 0, 0, 0, 0, 0, 948, 0, 0, 0,
	878, 0, 0, 0, 0, 0, 0, 0, 1015, 0,
	1013, 0, 0, 0, 0, 0, 1012, 0, 1012, 1012,
	1678, 0, 0, 0, 0, 0, 1015, 0, 994, 0,
	994, 1678, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 877, 0, 0, 0, 1014, 0, 0,
	0, 0, 0, 0, 0, 0, 1014, 0, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 994, 0, 0,
	1015, 0, 0, 0, 877, 877, 1015, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1012,
	0, 1790, 0, 0, 0, 0, 0, 0, 0, 1790,
	1790, 0, 0, 1790, 3705, 3705, 1790, 0, 0, 0,
	0, 1790, 0, 0, 0, 0, 0, 1790, 0, 0,
	0, 0, 0, 1014, 0, 0, 0, 0, 0, 0,
	1790, 1790, 0, 0, 1790, 0, 0, 0, 1014, 1790,
	0, 0, 3012, 0, 0, 0, 0, 0, 997, 997,
	1790, 997, 1790, 0, 3705, 3705, 3705, 3705, 3705, 3705,
	3705, 3705, 3705, 3705, 3705, 3705, 3705, 0, 0, 0,
	3705, 1790, 1790, 1790, 0, 0, 1000, 0, 0, 1790,
	0, 877, 0, 0, 3012, 0, 1000, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2328, 0, 0, 1790, 1790, 1790, 0, 0,
	0, 1000, 0, 0, 1014, 1014, 0, 0, 0, 0,
	0, 0, 0, 1014, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 994, 0, 0, 997, 0, 0,
	0, 0, 2410, 0, 1015, 1015, 997, 1015, 0, 0,
	0, 0, 1790, 0, 0, 0, 2327, 0, 0, 0,
	0, 0, 0, 2328, 0, 0, 0, 0, 0, 0,
	0, 2460, 0, 0, 0, 0, 0, 877, 0, 0,
	948, 948, 0, 0, 0, 0, 0, 1790, 0, 0,
	1794, 2328, 1790, 1790, 0, 0, 0, 0, 0, 1784,
	1785, 1786, 0, 0, 3012, 0, 0, 0, 1778, 1779,
	1780, 1781, 1782, 1783, 0, 0, 0, 0, 3705, 2526,
	0, 0, 0, 2530, 0, 0, 0, 0, 2542, 1014,
	0, 0, 0, 1015, 0, 1014, 0, 0, 0, 0,
	0, 0, 1015, 0, 2643, 0, 0, 0, 0, 2589,
	0, 0, 0, 0, 0, 2643, 2643, 0, 0, 3398,
	2327, 0, 0, 0, 0, 2603, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2620, 0, 0, 2623, 0, 1805,
	2327, 0, 1775, 1000, 0, 1014, 1787, 1788, 1789, 0,
	0, 0, 0, 0, 0, 0, 0, 2327, 2419, 0,
	0, 2420, 0, 877, 0, 2425, 0, 2417, 0, 0,
	0, 0, 2422, 2426, 2421, 0, 2423, 0, 0, 0,
	2424, 1798, 1799, 2418, 0, 0, 0, 997, 0, 2684,
	2427, 0, 0, 0, 2542, 2542, 2542, 997, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2708, 2709, 0, 0, 0, 0, 0,
	1805, 0, 997, 1775, 0, 0, 0, 1787, 1788, 1789,
	0, 0, 0, 0, 0, 1013, 0, 0, 0, 2419,
	0, 0, 2420, 0, 0, 0, 2425, 0, 2417, 0,
	0, 0, 3398, 2422, 2426, 2421, 0, 2423, 0, 0,
	0, 2424, 1798, 1799, 2418, 0, 0, 0, 0, 0,
	0, 2427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1015, 0, 1790, 0, 0, 0, 0,
	0, 0, 0, 1015, 1790, 1790, 0, 0, 0, 1790,
	1790, 0, 0, 1790, 1790, 0, 0, 1790, 0, 2808,
	0, 0, 0, 1790, 1012, 0, 0, 0, 1015, 0,
	0, 0, 0, 0, 0, 0, 0, 3054, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3398, 0, 0,
	0, 0, 0, 0, 0, 1000, 1790, 0, 0, 1790,
	1678, 1678, 0, 0, 0, 997, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 997, 997, 1790, 0,
	997, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1114, 1114, 0, 1114, 0, 2863, 3054,
	0, 2865, 2866, 0, 1805, 0, 877, 1775, 0, 0,
	0, 1787, 1788, 1789, 997, 0, 0, 0, 0, 0,
	1405, 1435, 1014, 2419, 0, 1406, 2420, 0, 0, 1415,
	2425, 0, 2417, 877, 0, 0, 0, 2422, 2426, 2421,
	0, 2423, 0, 0, 0, 2424, 1798, 1799, 2418, 0,
	3012, 0, 0, 0, 0, 2427, 0, 0, 0, 0,
	1678, 1015, 0, 0, 1790, 0, 0, 0, 0, 0,
	2930, 0, 1015, 1015, 0, 0, 1015, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1437, 1790,
	0, 1408, 0, 0, 877, 1014, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1015, 0, 0, 1014, 0, 0, 0, 1790, 0, 0,
	1414, 0, 0, 997, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1000, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1419, 0, 0, 0, 0, 0, 1014, 0, 0,
	1790, 0, 0, 1014, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1790, 0, 1790, 1790, 1790,
	0, 0, 0, 0, 1404, 0, 0, 1790, 3705, 3054,
	1790, 1790, 1790, 0, 0, 0, 0, 0, 997, 0,
	4751, 1436, 0, 0, 0, 1000, 997, 0, 0, 1015,
	0, 1409, 0, 2643, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2327, 0, 0, 0, 0,
	0, 0, 1790, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1794, 0, 1411, 3705, 3054, 1790,
	0, 0, 1410, 1784, 1785, 1786, 0, 0, 0, 0,
	4638, 0, 1778, 1779, 1780, 1781, 1782, 1783, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 994, 0,
	0, 0, 0, 0, 0, 0, 2327, 994, 0, 0,
	0, 0, 0, 1438, 1015, 0, 0, 1412, 0, 0,
	0, 0, 1015, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2327, 0, 0, 0, 0, 0,
	0, 1014, 1014, 1439, 1014, 1794, 1440, 0, 0, 0,
	1441, 0, 0, 0, 1784, 1785, 1786, 0, 1000, 0,
	0, 4626, 1434, 1778, 1779, 1780, 1781, 1782, 1783, 0,
	0, 0, 1442, 1416, 994, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 994,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1000, 0, 997, 0, 3375, 0, 1418, 1417,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 0, 0,
	1014, 0, 0, 0, 1000, 1000, 0, 0, 0, 1014,
	0, 0, 0, 0, 1444, 1790, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3705, 0, 0, 0, 994, 994, 0, 0, 0,
	0, 0, 0, 1790, 994, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 0, 1407, 997, 0, 0, 0,
	0, 0, 0, 0, 997, 0, 0, 0, 3054, 0,
	1015, 3705, 0, 0, 0, 1790, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1421, 0, 0, 0, 1794,
	0, 0, 0, 0, 0, 0, 0, 0, 1784, 1785,
	1786, 0, 0, 0, 0, 4530, 0, 1778, 1779, 1780,
	1781, 1782, 1783, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1805,
	0, 0, 1775, 0, 0, 0, 1787, 1788, 1789, 1000,
	0, 0, 0, 0, 0, 0, 1790, 0, 2419, 0,
	994, 2420, 1015, 0, 0, 2425, 994, 2417, 0, 0,
	1015, 0, 2422, 2426, 2421, 0, 2423, 0, 0, 0,
	2424, 1798, 1799, 2418, 0, 0, 0, 0, 0, 1790,
	2427, 0, 0, 0, 3398, 0, 0, 0, 0, 997,
	0, 0, 0, 0, 0, 1790, 0, 0, 0, 0,
	1014, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1014, 0, 0, 0, 0, 0, 994, 1790, 1805, 0,
	1790, 1775, 0, 0, 0, 1787, 1788, 1789, 0, 0,
	0, 0, 0, 997, 0, 1014, 0, 2419, 0, 0,
	2420, 0, 0, 0, 2425, 0, 2417, 0, 0, 0,
	0, 2422, 2426, 2421, 0, 2423, 0, 0, 0, 2424,
	1798, 1799, 2418, 0, 0, 997, 997, 0, 0, 2427,
	0, 0, 0, 0, 0, 0, 3398, 0, 0, 0,
	0, 0, 0, 0, 0, 1015, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1000, 1000, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1015,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1790, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3208, 0,
	0, 1015, 1015, 0, 0, 0, 0, 0, 1014, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1014,
	1014, 0, 0, 1014, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3054, 3054, 0, 0, 3054, 0, 0,
	997, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1805, 0, 1014, 1775, 0,
	1790, 0, 1787, 1788, 1789, 0, 0, 4279, 0, 1790,
	0, 3297, 3298, 0, 2419, 0, 0, 2420, 0, 0,
	0, 2425, 0, 2417, 0, 997, 0, 0, 2422, 2426,
	2421, 0, 2423, 0, 0, 0, 2424, 1798, 1799, 2418,
	0, 0, 4751, 0, 0, 0, 2427, 3342, 0, 1000,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3364,
	0, 0, 0, 994, 0, 0, 3705, 3705, 0, 3705,
	0, 0, 0, 0, 0, 0, 1015, 0, 0, 0,
	0, 0, 0, 3383, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1014, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 997, 1790, 0,
	0, 1015, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 994, 0, 0, 1000,
	0, 1000, 1000, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 994, 0, 0, 997, 997, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1014, 0, 0, 0, 0, 0, 0, 994, 1014,
	0, 0, 0, 0, 994, 0, 0, 0, 0, 0,
	0, 0, 1000, 1015, 1794, 0, 0, 0, 0, 0,
	0, 0, 0, 1784, 1785, 1786, 0, 0, 0, 0,
	4461, 0, 1778, 1779, 1780, 1781, 1782, 1783, 1805, 0,
	0, 1775, 0, 0, 0, 1787, 1788, 1789, 0, 0,
	0, 0, 0, 1015, 1015, 0, 0, 2419, 0, 0,
	2420, 0, 0, 0, 2425, 0, 2417, 0, 0, 0,
	0, 2422, 2426, 2421, 0, 2423, 0, 3540, 0, 2424,
	1798, 1799, 2418, 0, 0, 0, 0, 0, 0, 2427,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1794, 0, 0, 0, 0, 0, 0,
	997, 0, 1784, 1785, 1786, 1114, 0, 0, 0, 4440,
	0, 1778, 1779, 1780, 1781, 1782, 1783, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1805, 0,
	0, 1775, 0, 0, 0, 1787, 1788, 1789, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2419, 0, 0,
	2420, 0, 994, 994, 2425, 994, 2417, 1014, 0, 0,
	0, 2422, 2426, 2421, 0, 2423, 3601, 0, 0, 2424,
	1798, 1799, 2418, 0, 0, 0, 0, 0, 0, 2427,
	997, 0, 997, 997, 1805, 0, 1015, 1775, 0, 0,
	0, 1787, 1788, 1789, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2419, 0, 0, 2420, 0, 0, 0,
	2425, 0, 2417, 0, 0, 0, 0, 2422, 2426, 2421,
	0, 2423, 0, 4206, 0, 2424, 1798, 1799, 2418, 0,
	0, 0, 0, 0, 0, 2427, 0, 0, 0, 1014,
	0, 994, 0, 0, 0, 0, 0, 1014, 0, 0,
	994, 0, 0, 997, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1015, 0, 1015, 1015,
	1794, 0, 0, 0, 0, 1805, 0, 0, 1775, 1784,
	1785, 1786, 1787, 1788, 1789, 0, 0, 0, 1778, 1779,
	1780, 1781, 1782, 1783, 2419, 0, 0, 2420, 0, 0,
	0, 2425, 0, 2417, 0, 0, 0, 0, 2422, 2426,
	2421, 0, 2423, 0, 0, 0, 2424, 1798, 1799, 2418,
	0, 0, 0, 0, 0, 0, 2427, 0, 0, 0,
	0, 0, 0, 1805, 0, 0, 1775, 0, 0, 1015,
	1787, 1788, 1789, 0, 0, 3732, 0, 0, 0, 0,
	0, 0, 2419, 0, 0, 2420, 0, 0, 0, 2425,
	0, 2417, 1014, 0, 0, 0, 2422, 2426, 2421, 0,
	2423, 0, 0, 0, 2424, 1798, 1799, 2418, 0, 0,
	0, 0, 0, 0, 2427, 0, 0, 0, 0, 3819,
	0, 3822, 0, 0, 3827, 0, 0, 0, 0, 3833,
	0, 0, 0, 0, 0, 0, 1014, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1805, 0,
	0, 1775, 0, 0, 0, 1787, 1788, 1789, 0, 0,
	0, 994, 0, 0, 0, 0, 3869, 2419, 1014, 1014,
	2420, 994, 0, 0, 2425, 0, 2417, 0, 0, 0,
	0, 2422, 2426, 2421, 0, 2423, 0, 1000, 0, 2424,
	1798, 1799, 2418, 0, 0, 0, 994, 0, 0, 2427,
	0, 3722, 0, 3921, 3922, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2542, 0, 1794, 0, 0, 0, 3012, 1805, 0,
	0, 1775, 1784, 1785, 1786, 1787, 1788, 1789, 0, 4219,
	3717, 1778, 1779, 1780, 1781, 1782, 1783, 2419, 0, 0,
	2420, 0, 0, 0, 2425, 0, 2417, 0, 0, 0,
	0, 2422, 2426, 2421, 0, 2423, 0, 0, 0, 2424,
	1798, 1799, 2418, 0, 0, 0, 0, 0, 0, 2427,
	0, 0, 0, 1014, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 994,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	994, 994, 0, 0, 994, 0, 0, 0, 1014, 0,
	0, 0, 0, 1794, 0, 0, 0, 0, 0, 0,
	0, 0, 1784, 1785, 1786, 0, 0, 0, 0, 0,
	0, 1778, 1779, 1780, 1781, 1782, 1783, 0, 994, 0,
	0, 0, 0, 0, 0, 0, 4071, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1794,
	0, 0, 0, 0, 0, 0, 0, 0, 1784, 1785,
	1786, 0, 0, 0, 0, 4193, 0, 1778, 1779, 1780,
	1781, 1782, 1783, 0, 1805, 0, 0, 1775, 0, 0,
	1014, 1787, 1788, 1789, 0, 0, 0, 0, 997, 0,
	0, 0, 0, 2419, 0, 0, 2420, 0, 0, 0,
	2425, 0, 2417, 0, 0, 0, 0, 2422, 2426, 2421,
	0, 2423, 0, 0, 0, 2424, 1798, 1799, 2418, 0,
	1014, 1014, 0, 0, 0, 2427, 0, 994, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1794, 0, 0, 0, 0, 0, 0, 1678, 0, 1784,
	1785, 1786, 0, 0, 0, 0, 3750, 0, 1778, 1779,
	1780, 1781, 1782, 1783, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1015, 0, 0, 0, 0, 0,
	0, 4163, 4164, 0, 0, 0, 0, 4169, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1794, 0,
	0, 0, 994, 0, 0, 0, 0, 1784, 1785, 1786,
	994, 0, 0, 0, 0, 0, 1778, 1779, 1780, 1781,
	1782, 1783, 0, 1805, 0, 0, 1775, 0, 0, 0,
	1787, 1788, 1789, 0, 0, 3682, 0, 0, 0, 0,
	0, 0, 2419, 0, 0, 2420, 0, 0, 0, 2425,
	0, 2417, 0, 0, 0, 0, 2422, 2426, 2421, 0,
	2423, 0, 0, 1014, 2424, 1798, 1799, 2418, 0, 0,
	0, 0, 0, 0, 2427, 0, 0, 0, 0, 0,
	0, 0, 0, 1794, 0, 0, 0, 0, 0, 0,
	0, 0, 1784, 1785, 1786, 0, 0, 0, 0, 0,
	0, 1778, 1779, 1780, 1781, 1782, 1783, 1805, 0, 0,
	1775, 0, 0, 0, 1787, 1788, 1789, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2419, 0, 0, 2420,
	0, 0, 0, 2425, 0, 2417, 0, 0, 0, 0,
	2422, 2426, 2421, 0, 2423, 0, 0, 0, 2424, 1798,
	1799, 2418, 0, 1014, 0, 1014, 1014, 0, 2427, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1794, 0, 0, 0, 0, 994, 0,
	0, 0, 1784, 1785, 1786, 0, 0, 0, 0, 0,
	0, 1778, 1779, 1780, 1781, 1782, 1783, 0, 0, 1805,
	0, 0, 1775, 0, 0, 0, 1787, 1788, 1789, 0,
	0, 0, 0, 0, 0, 3689, 1014, 0, 2419, 0,
	0, 2420, 0, 0, 0, 2425, 0, 2417, 0, 0,
	0, 4365, 2422, 2426, 2421, 0, 2423, 0, 0, 0,
	2424, 1798, 1799, 2418, 0, 1805, 0, 4379, 1775, 0,
	2427, 0, 1787, 1788, 1789, 0, 0, 0, 0, 0,
	994, 4390, 0, 0, 2419, 0, 0, 2420, 994, 0,
	0, 2425, 0, 2417, 0, 0, 0, 0, 2422, 2426,
	2421, 0, 2423, 0, 0, 0, 2424, 1798, 1799, 2418,
	1805, 0, 0, 1775, 0, 0, 2427, 1787, 1788, 1789,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2419,
	0, 0, 2420, 0, 0, 0, 2425, 2526, 2417, 0,
	0, 0, 0, 2422, 2426, 2421, 0, 2423, 0, 0,
	0, 2424, 1798, 1799, 2418, 0, 0, 0, 0, 0,
	0, 2427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1794,
	0, 0, 0, 0, 0, 0, 0, 0, 1784, 1785,
	1786, 0, 0, 0, 0, 0, 0, 1778, 1779, 1780,
	1781, 1782, 1783, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 994, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 994, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 994,
	994, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1405, 1435, 0, 0,
	0, 1406, 0, 0, 0, 1415, 0, 0, 1794, 0,
	0, 0, 0, 0, 0, 0, 0, 1784, 1785, 1786,
	0, 0, 0, 0, 0, 0, 1778, 1779, 1780, 1781,
	1782, 1783, 4611, 4612, 4613, 4614, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1437, 0, 0, 1408, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3676, 1794, 0, 994, 0, 1414, 0, 0, 0,
	0, 1784, 1785, 1786, 0, 0, 0, 0, 0, 0,
	1778, 1779, 1780, 1781, 1782, 1783, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 994,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1404, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1014, 0, 0, 0, 0, 0, 1436, 0, 0,
	0, 0, 0, 0, 1794, 0, 0, 1409, 0, 0,
	0, 0, 0, 1784, 1785, 1786, 0, 0, 3101, 0,
	0, 0, 1778, 1779, 1780, 1781, 1782, 1783, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 994, 1411, 0, 0, 4758, 0, 0, 1410, 0,
	1794, 0, 0, 0, 0, 0, 0, 0, 0, 1784,
	1785, 1786, 0, 0, 0, 0, 2993, 0, 1778, 1779,
	1780, 1781, 1782, 1783, 0, 0, 0, 0, 0, 0,
	0, 994, 994, 0, 0, 0, 0, 0, 0, 1438,
	0, 0, 0, 1412, 0, 1794, 0, 0, 0, 0,
	0, 0, 0, 0, 1784, 1785, 1786, 0, 0, 0,
	0, 0, 0, 1778, 1779, 1780, 1781, 1782, 1783, 1439,
	0, 0, 1440, 0, 0, 0, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1442, 1416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1431, 0, 1418, 1417, 1445, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 994, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1446, 0, 0,
	0, 1407, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1421, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 994, 0, 994, 994, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 994, 0, 0,
	0, 1678, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5020, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5071, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 5257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5264, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2325, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 994, 2330, 288, 2336, 305, 882, 2346, 354,
	391, 606, 2333, 2378, 451, 2383, 504, 508, 2407, 597,
	2340, 2343, 2353, 2356, 362, 2361, 887, 2369, 893, 2379,
	899, 2398, 573, 2404, 889, 890, 895, 293, 681, 596,
	667, 2392, 2338, 2396, 458, 2389, 2365, 2405, 2382, 2394,
	2375, 2380, 301, 2367, 2368, 2372, 2381, 891, 888, 892,
	898, 886, 896, 883, 894, 2402, 495, 429, 646, 522,
	300, 346, 333, 375, 417, 529, 2337, 2355, 407, 577,
	342, 431, 2388, 321, 464, 2401, 553, 428, 2395, 536,
	556, 2357, 448, 327, 487, 543, 544, 880, 885, 2345,
	901, 2332, 331, 332, 453, 313, 461, 658, 624, 516,
	474, 472, 2363, 439, 496, 653, 2335, 0, 361, 0,
	356, 452, 592, 319, 571, 490, 457, 411, 519, 548,
	358, 343, 344, 387, 489, 377, 329, 582, 621, 625,
	623, 619, 616, 620, 617, 618, 622, 378, 615, 0,
	590, 599, 633, 613, 641, 598, 638, 608, 353, 637,
	602, 601, 647, 628, 629, 583, 643, 614, 612, 605,
	604, 600, 2403, 278, 279, 280, 281, 282, 283, 284,
	285, 286, 287, 289, 2331, 290, 291, 292, 294, 295,
	296, 879, 297, 298, 299, 302, 303, 304, 306, 666,
	307, 308, 309, 310, 311, 312, 603, 881, 314, 315,
	316, 317, 318, 320, 322, 323, 324, 325, 326, 328,
	330, 2347, 2348, 2349, 884, 2350, 2351, 2352, 334, 335,
	336, 337, 338, 339, 2354, 340, 341, 345, 347, 348,
	349, 350, 351, 352, 355, 2358, 357, 359, 2359, 360,
	363, 2360, 364, 365, 366, 367, 368, 369, 370, 371,
	607, 372, 2362, 373, 374, 376, 2364, 379, 380, 381,
	382, 383, 2366, 384, 609, 610, 385, 386, 388, 389,
	390, 392, 393, 394, 395, 396, 397, 398, 399, 400,
	401, 402, 403, 2370, 404, 405, 406, 408, 2371, 409,
	410, 413, 414, 415, 416, 2373, 418, 626, 2374, 419,
	420, 421, 2376, 2377, 422, 423, 424, 425, 426, 427,
	430, 627, 432, 433, 434, 435, 436, 437, 438, 668,
	440, 441, 442, 443, 444, 445, 446, 630, 631, 447,
	449, 450, 632, 634, 635, 897, 465, 466, 467, 468,
	469, 470, 471, 473, 2385, 475, 476, 477, 636, 478,
	479, 480, 481, 2386, 482, 483, 484, 485, 486, 488,
	491, 492, 493, 494, 2387, 497, 498, 499, 500, 501,
	502, 503, 505, 506, 507, 509, 510, 511, 669, 512,
	513, 514, 515, 639, 517, 518, 670, 520, 521, 523,
	524, 525, 526, 527, 528, 679, 2390, 530, 640, 531,
	532, 533, 534, 535, 2391, 537, 538, 539, 540, 541,
	542, 545, 546, 547, 549, 550, 642, 551, 552, 2393,
	554, 555, 900, 557, 558, 559, 560, 561, 2397, 680,
	562, 644, 563, 645, 564, 565, 566, 567, 568, 569,
	570, 572, 2399, 2400, 574, 575, 576, 578, 579, 580,
	581, 584, 585, 586, 587, 588, 2406, 589, 591, 593,
	671, 648, 649, 650, 651, 652, 654, 655, 656, 657,
	594, 595, 611, 462, 456, 412, 454, 455, 459, 460,
	463, 2384, 2334, 2339, 2341, 2342, 2344, 0, 0, 0,
	0, 0, 0, 0, 0, 1808, 0, 0, 0, 0,
	0, 0, 1805, 0, 0, 1775, 0, 0, 2323, 1787,
	1788, 1789, 1819, 1821, 1803, 1848, 1869, 0, 1920, 1966,
	1936, 1791, 2053, 2059, 1792, 2120, 2124, 0, 1800, 1850,
	1776, 1900, 1915, 1930, 1942, 1795, 1801, 1793, 2057, 1796,
	2201, 2212, 2232, 1797, 1798, 1799, 1777, 2193, 2250, 2019,
	2178, 1830, 0, 1806, 2144, 0, 0, 2067, 2182, 0,
	0, 1844, 0, 0, 0, 0, 1992, 1981, 2015, 2128,
	1953, 2073, 1881, 2040, 2218, 2110, 2029, 2224, 2142, 1843,
	1909, 1893, 1945, 2010, 2151, 1826, 1910, 1985, 2216, 1905,
	2031, 0, 1872, 2075, 2217, 2180, 2028, 2191, 2161, 2186,
	1916, 2054, 1879, 2101, 2168, 2169, 1839, 1952, 1874, 2227,
	1824, 1884, 1892, 2062, 1863, 2070, 2248, 2002, 2135, 2085,
	2083, 0, 2042, 2111, 2243, 0, 0, 1929, 0, 1923,
	2061, 2235, 1870, 2209, 2104, 2066, 2004, 2138, 2173, 1925,
	1906, 1907, 1963, 2103, 1948, 1882, 2223, 1999, 2003, 2001,
	1997, 1994, 1998, 1995, 1996, 2000, 1950, 1993, 0, 0,
	1840, 2060, 1988, 2158, 1838, 2107, 1946, 1919, 0, 0,
	0, 2225, 2039, 2041, 0, 2194, 1989, 1987, 1898, 1897,
	1841, 2226, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817,
	1818, 1820, 1822, 1823, 1827, 1828, 1829, 1831, 1832, 1833,
	1834, 1835, 1836, 1837, 1845, 1846, 1847, 1849, 1852, 1853,
	1854, 1856, 1857, 1858, 1859, 1860, 1861, 1864, 1865, 1866,
	1867, 1868, 1871, 1873, 1875, 1876, 1877, 1878, 1880, 1883,
	1885, 1886, 1887, 1888, 1889, 1890, 1891, 1894, 1895, 0,
	1896, 1899, 1901, 1902, 1903, 1904, 1908, 1911, 1912, 1913,
	1914, 1917, 1918, 1921, 1922, 1924, 1926, 1927, 1928, 1931,
	0, 1932, 1933, 1934, 1935, 1937, 1938, 1939, 1940, 1941,
	1943, 0, 0, 1944, 1947, 1949, 1951, 1954, 1955, 1956,
	1957, 0, 1958, 1959, 1960, 1961, 1962, 1964, 0, 1965,
	1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976,
	1977, 1978, 1979, 1980, 1983, 1984, 1986, 0, 1990, 1991,
	2006, 2007, 2008, 2009, 2011, 2013, 2014, 2012, 2016, 2017,
	2018, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2030,
	2032, 2033, 0, 2034, 2035, 0, 2036, 2037, 2038, 2043,
	2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2055,
	2056, 2058, 2072, 2074, 0, 2076, 2077, 2078, 2079, 2080,
	2081, 2082, 2084, 2086, 2087, 2088, 2089, 2090, 2091, 2092,
	2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2102, 2105,
	2106, 2108, 2109, 2112, 2113, 2114, 2115, 2116, 2117, 2118,
	2119, 2121, 2122, 2123, 2125, 2126, 2127, 2129, 2130, 2131,
	2132, 2133, 2134, 2136, 2137, 2139, 2140, 2141, 0, 2143,
	2145, 2146, 2147, 2148, 2149, 2150, 2153, 2152, 2154, 2155,
	2156, 2157, 2159, 2160, 2162, 2163, 2164, 2165, 2166, 2167,
	2170, 2171, 2172, 2174, 2175, 2176, 2177, 2179, 2181, 2183,
	2185, 2184, 2187, 2188, 2189, 2190, 2192, 2195, 2196, 2197,
	2198, 2199, 2200, 2202, 2203, 2204, 2205, 2206, 2207, 2208,
	2210, 0, 2211, 2213, 2214, 2215, 2219, 2220, 2221, 2222,
	2228, 2229, 2230, 2231, 2233, 0, 0, 2234, 2236, 2237,
	2238, 2239, 2240, 2241, 2242, 2244, 2245, 2246, 2247, 0,
	2249, 1982, 2071, 2065, 2005, 2063, 2064, 2068, 2069, 0,
	0, 1825, 1842, 1851, 1855, 1862, 0, 1794, 0, 0,
	0, 0, 0, 0, 0, 0, 1784, 1785, 1786, 0,
	0, 0, 0, 0, 0, 1778, 1779, 1780, 1781, 1782,
	1783, 2325, 0, 5725, 766, 0, 0, 0, 0, 752,
	0, 0, 0, 0, 0, 0, 0, 0, 2330, 288,
	2336, 305, 882, 2346, 354, 391, 606, 2333, 2378, 451,
	2383, 504, 508, 2407, 597, 2340, 2343, 2353, 2356, 362,
	2361, 887, 2369, 893, 2379, 899, 2398, 573, 2404, 889,
	890, 895, 293, 681, 596, 667, 2392, 2338, 2396, 458,
	2389, 2365, 2405, 2382, 2394, 2375, 2380, 301, 2367, 2368,
	2372, 2381, 891, 888, 892, 898, 886, 896, 883, 894,
	2402, 495, 429, 646, 522, 300, 346, 333, 375, 417,
	529, 2337, 2355, 407, 577, 342, 431, 2388, 321, 464,
	2401, 553, 428, 2395, 536, 556, 2357, 448, 327, 487,
	543, 544, 880, 885, 2345, 901, 2332, 331, 332, 453,
	313, 461, 658, 624, 516, 474, 472, 2363, 439, 496,
	653, 2335, 0, 361, 0, 356, 452, 592, 319, 571,
	490, 457, 411, 519, 548, 358, 343, 344, 387, 489,
	377, 329, 582, 621, 625, 623, 619, 616, 620, 617,
	618, 622, 378, 615, 0, 590, 599, 633, 613, 641,
	598, 638, 608, 353, 637, 602, 601, 647, 628, 629,
	583, 643, 614, 612, 605, 604, 600, 2403, 278, 279,
	280, 281, 282, 283, 284, 285, 286, 287, 289, 2331,
	290, 291, 292, 294, 295, 296, 879, 297, 298, 299,
	302, 303, 304, 306, 666, 307, 308, 309, 310, 311,
	312, 603, 881, 314, 315, 316, 317, 318, 320, 322,
	323, 324, 325, 326, 328, 330, 2347, 2348, 2349, 884,
	2350, 2351, 2352, 334, 335, 336, 337, 338, 339, 2354,
	340, 341, 345, 347, 348, 349, 350, 351, 352, 355,
	2358, 357, 359, 2359, 360, 363, 2360, 364, 365, 366,
	367, 368, 369, 370, 371, 607, 372, 2362, 373, 374,
	376, 2364, 379, 380, 381, 382, 383, 2366, 384, 609,
	610, 385, 386, 388, 389, 390, 392, 393, 394, 395,
	396, 397, 398, 399, 400, 401, 402, 403, 2370, 404,
	405, 406, 408, 2371, 409, 410, 413, 414, 415, 416,
	2373, 418, 626, 2374, 419, 420, 421, 2376, 2377, 422,
	423, 424, 425, 426, 427, 430, 627, 432, 433, 434,
	435, 436, 437, 438, 668, 440, 441, 442, 443, 444,
	445, 446, 630, 631, 447, 449, 450, 632, 634, 635,
	897, 465, 466, 467, 468, 469, 470, 471, 473, 2385,
	475, 476, 477, 636, 478, 479, 480, 481, 2386, 482,
	483, 484, 485, 486, 488, 491, 492, 493, 494, 2387,
	497, 498, 499, 500, 501, 502, 503, 505, 506, 507,
	509, 510, 511, 669, 512, 513, 514, 515, 639, 517,
	518, 670, 520, 521, 523, 524, 525, 526, 527, 528,
	679, 2390, 530, 640, 531, 532, 533, 534, 535, 2391,
	537, 538, 539, 540, 541, 542, 545, 546, 547, 549,
	550, 642, 551, 552, 2393, 554, 555, 900, 557, 558,
	559, 560, 561, 2397, 680, 562, 644, 563, 645, 564,
	565, 566, 567, 568, 569, 570, 572, 2399, 2400, 574,
	575, 576, 578, 579, 580, 581, 584, 585, 586, 587,
	588, 2406, 589, 591, 593, 671, 648, 649, 650, 651,
	652, 654, 655, 656, 657, 594, 595, 611, 462, 456,
	412, 454, 455, 459, 460, 463, 2384, 2334, 2339, 2341,
	2342, 2344, 2325, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2330,
	288, 2336, 305, 882, 2346, 354, 391, 606, 2333, 2378,
	451, 2383, 504, 508, 2407, 597, 2340, 2343, 2353, 2356,
	362, 2361, 887, 2369, 893, 2379, 899, 2398, 573, 2404,
	889, 890, 895, 293, 681, 596, 667, 2392, 2338, 2396,
	458, 2389, 2365, 2405, 2382, 2394, 2375, 2380, 301, 2367,
	2368, 2372, 2381, 891, 888, 892, 898, 886, 896, 883,
	894, 2402, 495, 429, 646, 522, 300, 346, 333, 375,
	417, 529, 2337, 2355, 407, 577, 342, 431, 2388, 321,
	464, 2401, 553, 428, 2395, 536, 556, 2357, 448, 327,
	487, 543, 544, 880, 885, 2345, 901, 2332, 331, 332,
	453, 313, 461, 658, 624, 516, 474, 472, 2363, 439,
	496, 653, 2335, 0, 361, 0, 356, 452, 592, 319,
	571, 490, 457, 411, 519, 548, 358, 343, 344, 387,
	489, 377, 329, 582, 621, 625, 623, 619, 616, 620,
	617, 618, 622, 378, 615, 0, 590, 599, 633, 613,
	641, 598, 638, 608, 353, 637, 602, 601, 647, 628,
	629, 583, 643, 614, 612, 605, 604, 600, 2403, 278,
	279, 280, 281, 282, 283, 284, 285, 286, 287, 289,
	2331, 290, 291, 292, 294, 295, 296, 879, 297, 298,
	299, 302, 303, 304, 306, 666, 307, 308, 309, 310,
	311, 312, 603, 881, 314, 315, 316, 317, 318, 320,
	322, 323, 324, 325, 326, 328, 330, 2347, 2348, 2349,
	884, 2350, 2351, 2352, 334, 335, 336, 337, 338, 339,
	2354, 340, 341, 345, 347, 348, 349, 350, 351, 352,
	355, 2358, 357, 359, 2359, 360, 363, 2360, 364, 365,
	366, 367, 368, 369, 370, 371, 607, 372, 2362, 373,
	374, 376, 2364, 379, 380, 381, 382, 383, 2366, 384,
	609, 610, 385, 386, 388, 389, 390, 392, 393, 394,
	395, 396, 397, 398, 399, 400, 401, 402, 403, 2370,
	404, 405, 406, 408, 2371, 409, 410, 413, 414, 415,
	416, 2373, 418, 626, 2374, 419, 420, 421, 2376, 2377,
	422, 423, 424, 425, 426, 427, 430, 627, 432, 433,
	434, 435, 436, 437, 438, 668, 440, 441, 442, 443,
	444, 445, 446, 630, 631, 447, 449, 450, 632, 634,
	635, 897, 465, 466, 467, 468, 469, 470, 471, 473,
	2385, 475, 476, 477, 636, 478, 479, 480, 481, 2386,
	482, 483, 484, 485, 486, 488, 491, 492, 493, 494,
	2387, 497, 498, 499, 500, 501, 502, 503, 505, 506,
	507, 509, 510, 511, 669, 512, 513, 514, 515, 639,
	517, 518, 670, 520, 521, 523, 524, 525, 526, 527,
	528, 679, 2390, 530, 640, 531, 532, 533, 534, 535,
	2391, 537, 538, 539, 540, 541, 542, 545, 546, 547,
	549, 550, 642, 551, 552, 2393, 554, 555, 900, 557,
	558, 559, 560, 561, 2397, 680, 562, 644, 563, 645,
	564, 565, 566, 567, 568, 569, 570, 572, 2399, 2400,
	574, 575, 576, 578, 579, 580, 581, 584, 585, 586,
	587, 588, 2406, 589, 591, 593, 671, 648, 649, 650,
	651, 652, 654, 655, 656, 657, 594, 595, 611, 462,
	456, 412, 454, 455, 459, 460, 463, 2384, 2334, 2339,
	2341, 2342, 2344, 1020, 0, 1638, 766, 0, 0, 0,
	844, 752, 0, 0, 0, 0, 0, 855, 856, 857,
	2330, 288, 2336, 305, 882, 2346, 354, 391, 0, 2333,
	2378, 451, 2383, 504, 508, 2407, 0, 2340, 2343, 2353,
	2356, 362, 2361, 887, 2369, 893, 2379, 899, 2398, 573,
	2404, 889, 890, 895, 293, 1017, 596, 667, 2392, 2338,
	2396, 3896, 2389, 2365, 2405, 2382, 2394, 2375, 2380, 301,
	2367, 2368, 2372, 2381, 891, 888, 892, 898, 886, 896,
	883, 894, 2402, 495, 429, 0, 522, 300, 346, 333,
	375, 417, 529, 2337, 2355, 407, 577, 342, 431, 2388,
	321, 464, 2401, 553, 428, 2395, 536, 556, 2357, 448,
	327, 487, 543, 544, 880, 885, 2345, 901, 2332, 331,
	332, 453, 313, 461, 0, 0, 516, 474, 472, 2363,
	439, 496, 0, 2335, 0, 361, 0, 356, 452, 592,
	319, 571, 490, 457, 411, 519, 548, 358, 343, 344,
	387, 489, 377, 329, 582, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 378, 1019, 0, 590, 1022, 1010,
	1002, 1003, 1004, 1005, 1006, 1007, 0, 1024, 1025, 1026,
	1027, 1028, 583, 1016, 1018, 1001, 1008, 1009, 1011, 2403,
	278, 279, 280, 281, 282, 283, 284, 285, 286, 287,
	289, 2331, 290, 291, 292, 294, 295, 296, 879, 297,
	298, 299, 302, 303, 304, 306, 666, 307, 308, 309,
	310, 311, 312, 0, 881, 314, 315, 316, 317, 318,
	320, 322, 323, 324, 325, 326, 328, 330, 2347, 2348,
	2349, 884, 2350, 2351, 2352, 334, 335, 336, 337, 338,
	339, 2354, 340, 341, 345, 347, 348, 349, 350, 351,
	352, 355, 2358, 357, 359, 2359, 360, 363, 2360, 364,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 2362,
	373, 374, 376, 2364, 379, 380, 381, 382, 383, 2366,
	384, 0, 0, 385, 386, 388, 389, 390, 392, 393,
	394, 395, 396, 397, 398, 399, 400, 401, 402, 403,
	2370, 404, 405, 406, 408, 2371, 409, 410, 413, 414,
	415, 416, 2373, 418, 0, 2374, 419, 420, 421, 2376,
	2377, 422, 423, 424, 425, 426, 427, 430, 0, 432,
	433, 434, 435, 436, 437, 438, 668, 440, 441, 442,
	443, 444, 445, 446, 3895, 0, 447, 449, 450, 0,
	0, 0, 897, 465, 466, 467, 468, 469, 470, 471,
	473, 2385, 475, 476, 477, 0, 478, 479, 480, 481,
	2386, 482, 483, 484, 485, 486, 488, 491, 492, 493,
	494, 2387, 497, 498, 499, 500, 501, 502, 503, 505,
	506, 507, 509, 510, 511, 669, 512, 513, 514, 515,
	0, 517, 518, 670, 520, 521, 523, 524, 525, 526,
	527, 528, 679, 2390, 530, 2645, 531, 532, 533, 534,
	535, 2391, 537, 538, 539, 540, 541, 542, 545, 546,
	547, 549, 550, 0, 551, 552, 2393, 554, 555, 900,
	557, 558, 559, 560, 561, 2397, 680, 562, 0, 563,
	0, 564, 565, 566, 567, 568, 569, 570, 572, 2399,
	2400, 574, 575, 576, 578, 579, 580, 581, 584, 585,
	586, 587, 588, 2406, 589, 591, 593, 671, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 594, 595, 0,
	462, 456, 412, 454, 455, 459, 460, 463, 2384, 2334,
	2339, 2341, 2342, 2344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 852, 853, 854, 0, 0, 0,
	0, 0, 0, 3897, 3898, 848, 849, 850, 851, 1020,
	0, 1638, 766, 0, 0, 0, 844, 752, 0, 0,
	0, 0, 0, 855, 856, 857, 2330, 288, 2336, 305,
	882, 2346, 354, 391, 0, 2333, 2378, 451, 2383, 504,
	508, 2407, 0, 2340, 2343, 2353, 2356, 362, 2361, 887,
	2369, 893, 2379, 899, 2398, 573, 2404, 889, 890, 895,
	293, 1017, 596, 667, 2392, 2338, 2396, 3896, 2389, 2365,
	2405, 2382, 2394, 2375, 2380, 301, 2367, 2368, 2372, 2381,
	891, 888, 892, 898, 886, 896, 883, 894, 2402, 495,
	429, 0, 522, 300, 346, 333, 375, 417, 529, 2337,
	2355, 407, 577, 342, 431, 2388, 321, 464, 2401, 553,
	428, 2395, 536, 556, 2357, 448, 327, 487, 543, 544,
	880, 885, 2345, 901, 2332, 331, 332, 453, 313, 461,
	0, 0, 516, 474, 472, 2363, 439, 496, 0, 2335,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	378, 1019, 0, 590, 1022, 1010, 1002, 1003, 1004, 1005,
	1006, 1007, 0, 1024, 1025, 1026, 1027, 1028, 583, 1016,
	1018, 1001, 1008, 1009, 1011, 2403, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 2331, 290, 291,
	292, 294, 295, 296, 879, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 0,
	881, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 2347, 2348, 2349, 884, 2350, 2351,
	2352, 334, 335, 336, 337, 338, 339, 2354, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 2358, 357,
	359, 2359, 360, 363, 2360, 364, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 2362, 373, 374, 376, 2364,
	379, 380, 381, 382, 383, 2366, 384, 0, 0, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 2370, 404, 405, 406,
	408, 2371, 409, 410, 413, 414, 415, 416, 2373, 418,
	0, 2374, 419, 420, 421, 2376, 2377, 422, 423, 424,
	425, 426, 427, 430, 0, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	4563, 0, 447, 449, 450, 0, 0, 0, 897, 465,
	466, 467, 468, 469, 470, 471, 473, 2385, 475, 476,
	477, 0, 478, 479, 480, 481, 2386, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 2387, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 0, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 2390,
	530, 2645, 531, 532, 533, 534, 535, 2391, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 0,
	551, 552, 2393, 554, 555, 900, 557, 558, 559, 560,
	561, 2397, 680, 562, 0, 563, 0, 564, 565, 566,
	567, 568, 569, 570, 572, 2399, 2400, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 2406,
	589, 591, 593, 671, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 594, 595, 0, 462, 456, 412, 454,
	455, 459, 460, 463, 2384, 2334, 2339, 2341, 2342, 2344,
	0, 0, 0, 0, 0, 0, 0, 0, 2325, 0,
	852, 853, 854, 0, 0, 0, 0, 0, 0, 3897,
	3898, 848, 849, 850, 851, 2330, 288, 2336, 305, 882,
	2346, 3356, 391, 606, 2333, 2378, 451, 2383, 504, 508,
	2407, 597, 2340, 2343, 2353, 2356, 362, 2361, 887, 2369,
	893, 2379, 899, 2398, 573, 2404, 889, 890, 895, 293,
	681, 596, 667, 2392, 2338, 2396, 458, 2389, 2365, 2405,
	2382, 2394, 2375, 2380, 301, 2367, 2368, 2372, 2381, 891,
	888, 892, 898, 886, 896, 883, 894, 2402, 495, 429,
	646, 522, 300, 346, 333, 375, 417, 3354, 2337, 2355,
	407, 577, 342, 431, 2388, 321, 464, 2401, 553, 428,
	2395, 536, 556, 2357, 448, 327, 487, 543, 544, 880,
	885, 2345, 901, 2332, 331, 332, 453, 313, 461, 658,
	624, 516, 474, 472, 2363, 439, 496, 653, 2335, 0,
	361, 0, 356, 452, 592, 319, 571, 490, 457, 411,
	519, 548, 358, 343, 344, 387, 489, 377, 329, 582,
	621, 625, 623, 619, 616, 620, 617, 618, 622, 378,
	615, 0, 590, 599, 633, 613, 641, 598, 638, 608,
	353, 637, 602, 601, 647, 628, 629, 583, 643, 614,
	612, 605, 604, 600, 2403, 278, 279, 280, 281, 282,
	3355, 284, 285, 286, 287, 289, 2331, 290, 291, 292,
	294, 295, 296, 879, 297, 298, 299, 302, 303, 304,
	306, 666, 307, 308, 309, 310, 311, 312, 603, 881,
	314, 315, 316, 317, 318, 320, 322, 323, 324, 325,
	326, 328, 330, 2347, 2348, 2349, 884, 2350, 2351, 2352,
	334, 335, 336, 337, 338, 339, 2354, 340, 341, 345,
	347, 348, 349, 350, 351, 352, 355, 2358, 357, 359,
	2359, 360, 363, 2360, 364, 365, 366, 367, 368, 369,
	370, 371, 607, 372, 2362, 373, 374, 376, 2364, 379,
	380, 381, 382, 383, 2366, 384, 609, 610, 385, 386,
	388, 389, 390, 392, 393, 394, 395, 396, 397, 398,
	399, 400, 401, 402, 403, 2370, 404, 405, 406, 408,
	2371, 409, 410, 413, 414, 415, 416, 2373, 418, 626,
	2374, 419, 420, 421, 2376, 2377, 422, 423, 424, 425,
	426, 427, 430, 627, 432, 433, 434, 435, 436, 437,
	438, 668, 440, 441, 442, 443, 444, 445, 446, 630,
	631, 447, 449, 450, 632, 634, 635, 897, 465, 466,
	467, 468, 469, 470, 471, 473, 2385, 475, 476, 477,
	636, 478, 479, 480, 481, 2386, 482, 483, 484, 485,
	486, 488, 491, 492, 493, 494, 2387, 497, 498, 499,
	500, 501, 502, 503, 505, 506, 507, 509, 510, 511,
	669, 512, 513, 514, 515, 639, 517, 518, 670, 520,
	521, 523, 524, 525, 526, 527, 528, 679, 2390, 530,
	640, 531, 532, 533, 534, 535, 2391, 537, 538, 539,
	540, 541, 542, 545, 546, 547, 549, 550, 642, 551,
	552, 2393, 554, 555, 900, 557, 558, 559, 560, 561,
	2397, 680, 562, 644, 563, 645, 564, 565, 566, 567,
	568, 569, 570, 572, 2399, 2400, 574, 575, 576, 578,
	579, 580, 581, 584, 585, 586, 587, 588, 2406, 589,
	591, 593, 671, 648, 649, 650, 651, 652, 654, 655,
	656, 657, 594, 595, 611, 462, 456, 412, 454, 455,
	459, 460, 463, 2384, 2334, 2339, 2341, 2342, 2344, 939,
	0, 1211, 766, 0, 1216, 1217, 1206, 752, 1196, 0,
	0, 0, 0, 0, 0, 0, 3007, 288, 0, 305,
	882, 0, 354, 391, 1201, 0, 1189, 451, 0, 504,
	508, 0, 597, 1221, 0, 1193, 3008, 362, 1214, 887,
	0, 893, 1215, 899, 1213, 573, 0, 889, 890, 895,
	293, 1290, 596, 667, 0, 0, 0, 1207, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	891, 888, 892, 898, 886, 896, 883, 894, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 1243, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	880, 885, 0, 901, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 1202,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 1271, 1273, 1269, 1265, 1266, 1231, 1232, 1272, 1268,
	378, 1267, 0, 590, 1276, 1287, 1284, 1289, 1275, 1288,
	1282, 1007, 637, 1279, 1278, 1292, 1285, 1286, 583, 1291,
	1230, 1283, 1281, 1280, 1277, 3006, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 879, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 1255,
	1233, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 1244, 1234, 1239, 1245, 1235, 1236,
	1240, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 1247, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 1256, 1205, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	1257, 0, 419, 420, 421, 1237, 1238, 422, 423, 424,
	425, 426, 427, 430, 1270, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 1248, 447, 449, 450, 1254, 634, 1249, 897, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 1250, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 1208, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 1241,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 1251,
	551, 552, 1242, 554, 555, 900, 557, 558, 559, 560,
	561, 0, 680, 562, 1252, 563, 1253, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 1192, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 1258, 1259, 1262, 1260, 1261,
	1263, 1264, 1274, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 0, 0, 0, 1246, 0, 0,
	0, 1190, 0, 0, 939, 0, 1211, 766, 0, 1216,
	1217, 1206, 752, 1196, 0, 0, 1197, 3004, 0, 1186,
	1187, 3005, 288, 0, 305, 882, 0, 354, 391, 1201,
	0, 1189, 451, 0, 504, 508, 149, 597, 1221, 0,
	1193, 0, 362, 1214, 887, 0, 893, 1215, 899, 1213,
	573, 0, 889, 890, 895, 293, 1290, 596, 667, 0,
	0, 0, 1207, 146, 0, 0, 0, 147, 0, 0,
	301, 0, 0, 0, 0, 891, 888, 892, 898, 886,
	896, 883, 894, 0, 495, 429, 1103, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 1243, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 880, 885, 0, 901, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 1202, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 1271, 1273, 1269, 1265,
	1266, 1231, 1232, 1272, 1268, 378, 1267, 0, 590, 1276,
	1287, 1284, 1289, 1275, 1288, 1282, 1007, 637, 1279, 1278,
	1292, 1285, 1286, 583, 1291, 1230, 1283, 1281, 1280, 1277,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 879,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 1255, 1233, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 1244,
	1234, 1239, 1245, 1235, 1236, 1240, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 1247, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 1256, 1205, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 1257, 0, 419, 420, 421,
	1237, 1238, 422, 423, 424, 425, 426, 427, 430, 1270,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 1248, 447, 449, 450,
	1254, 634, 1249, 897, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 1250, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 1208, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 1241, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 1251, 551, 552, 1242, 554, 555,
	900, 557, 558, 559, 560, 561, 0, 680, 562, 1252,
	563, 1253, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 1192, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	1258, 1259, 1262, 1260, 1261, 1263, 1264, 1274, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 0,
	0, 0, 1246, 0, 0, 0, 1190, 0, 150, 939,
	0, 1211, 766, 0, 1216, 1217, 1206, 752, 1196, 0,
	0, 1197, 5338, 0, 1186, 1187, 0, 288, 0, 305,
	882, 0, 354, 391, 1201, 0, 1189, 451, 0, 504,
	508, 149, 597, 1221, 0, 1193, 0, 362, 1214, 887,
	0, 893, 1215, 899, 1213, 573, 0, 889, 890, 895,
	293, 1290, 596, 667, 0, 0, 0, 1207, 146, 0,
	0, 0, 147, 0, 0, 301, 0, 0, 0, 0,
	891, 888, 892, 898, 886, 896, 883, 894, 0, 495,
	429, 1103, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 3084, 321, 464, 1243, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	880, 885, 0, 901, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 1202,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 1271, 1273, 1269, 1265, 1266, 1231, 1232, 1272, 1268,
	378, 1267, 0, 590, 1276, 1287, 1284, 1289, 1275, 1288,
	1282, 1007, 637, 1279, 1278, 1292, 1285, 1286, 583, 1291,
	1230, 1283, 1281, 1280, 1277, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 879, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 1255,
	1233, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 1244, 1234, 1239, 1245, 1235, 1236,
	1240, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 1247, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 1256, 1205, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	1257, 0, 419, 420, 421, 1237, 1238, 422, 423, 424,
	425, 426, 427, 430, 1270, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 1248, 447, 449, 450, 1254, 634, 1249, 897, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 1250, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 1208, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 1241,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 1251,
	551, 552, 1242, 554, 555, 900, 557, 558, 559, 560,
	561, 0, 680, 562, 1252, 563, 1253, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 1192, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 1258, 1259, 1262, 1260, 1261,
	1263, 1264, 1274, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 0, 0, 0, 1246, 0, 0,
	0, 1190, 0, 150, 939, 0, 1211, 766, 0, 1216,
	1217, 1206, 752, 1196, 0, 0, 1197, 0, 0, 1186,
	1187, 0, 288, 0, 305, 882, 0, 354, 391, 1201,
	0, 1189, 451, 0, 504, 508, 149, 597, 1221, 0,
	1193, 0, 362, 1214, 887, 0, 893, 1215, 899, 1213,
	573, 0, 889, 890, 895, 293, 1290, 596, 667, 0,
	0, 0, 1207, 146, 0, 0, 0, 147, 0, 0,
	301, 0, 0, 0, 0, 891, 888, 892, 898, 886,
	896, 883, 894, 0, 495, 429, 1103, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 1243, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 880, 885, 0, 901, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 1202, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 1271, 1273, 1269, 1265,
	1266, 1231, 1232, 1272, 1268, 378, 1267, 0, 590, 1276,
	1287, 1284, 1289, 1275, 1288, 1282, 1007, 637, 1279, 1278,
	1292, 1285, 1286, 583, 1291, 1230, 1283, 1281, 1280, 1277,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 879,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 1255, 1233, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 1244,
	1234, 1239, 1245, 1235, 1236, 1240, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 1247, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 1256, 1205, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 1257, 0, 419, 420, 421,
	1237, 1238, 422, 423, 424, 425, 426, 427, 430, 1270,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 1248, 447, 449, 450,
	1254, 634, 1249, 897, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 1250, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 1208, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 1241, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 1251, 551, 552, 1242, 554, 555,
	900, 557, 558, 559, 560, 561, 0, 680, 562, 1252,
	563, 1253, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 1192, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	1258, 1259, 1262, 1260, 1261, 1263, 1264, 1274, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 0,
	0, 0, 1246, 0, 0, 0, 1190, 0, 150, 939,
	0, 1211, 766, 0, 1216, 1217, 1206, 752, 1196, 0,
	0, 1197, 0, 0, 1186, 1187, 0, 288, 0, 305,
	882, 0, 354, 391, 1201, 0, 1189, 451, 0, 504,
	508, 0, 597, 1221, 0, 1193, 0, 362, 1214, 887,
	0, 893, 1215, 899, 1213, 573, 0, 889, 890, 895,
	293, 1290, 596, 667, 0, 0, 0, 1207, 0, 3065,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	891, 888, 892, 898, 886, 896, 883, 894, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 1243, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	880, 885, 0, 901, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 1202,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 1271, 1273, 1269, 1265, 1266, 1231, 1232, 1272, 1268,
	378, 1267, 0, 590, 1276, 1287, 1284, 1289, 1275, 1288,
	1282, 1007, 637, 1279, 1278, 1292, 1285, 1286, 583, 1291,
	1230, 1283, 1281, 1280, 1277, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 879, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 1255,
	1233, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 1244, 1234, 1239, 1245, 1235, 1236,
	1240, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 1247, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 1256, 1205, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	1257, 3061, 419, 420, 421, 1237, 1238, 422, 423, 424,
	425, 426, 427, 430, 1270, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 1248, 447, 449, 450, 1254, 634, 1249, 897, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 1250, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 1208, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 1241,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 1251,
	551, 552, 1242, 554, 555, 900, 557, 558, 559, 560,
	561, 3062, 680, 562, 1252, 563, 1253, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 1192, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 1258, 1259, 1262, 1260, 1261,
	1263, 1264, 1274, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 0, 0, 3060, 1246, 0, 0,
	0, 1190, 0, 939, 0, 1211, 766, 0, 1216, 1217,
	1206, 752, 1196, 0, 0, 0, 1197, 0, 0, 1186,
	1187, 288, 0, 305, 882, 0, 354, 391, 1201, 0,
	1189, 451, 0, 504, 508, 0, 597, 1221, 0, 1193,
	0, 362, 1214, 887, 0, 893, 1215, 899, 1213, 573,
	0, 889, 890, 895, 293, 1290, 596, 667, 0, 0,
	0, 1207, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 891, 888, 892, 898, 886, 896,
	883, 894, 0, 495, 429, 646, 522, 300, 346, 333,
	375, 417, 529, 0, 0, 407, 577, 342, 431, 0,
	321, 464, 1243, 553, 428, 0, 536, 556, 0, 448,
	327, 487, 543, 544, 880, 885, 0, 901, 0, 331,
	332, 453, 313, 461, 658, 624, 516, 474, 472, 0,
	439, 496, 653, 1202, 0, 361, 0, 356, 452, 592,
	319, 571, 490, 457, 411, 519, 548, 358, 343, 344,
	387, 489, 377, 329, 582, 1271, 1273, 1269, 1265, 1266,
	1231, 1232, 1272, 1268, 378, 1267, 0, 590, 1276, 1287,
	1284, 1289, 1275, 1288, 1282, 1007, 637, 1279, 1278, 1292,
	1285, 1286, 583, 1291, 1230, 1283, 1281, 1280, 1277, 0,
	278, 279, 280, 281, 282, 283, 284, 285, 286, 287,
	289, 0, 290, 291, 292, 294, 295, 296, 879, 297,
	298, 299, 302, 303, 304, 306, 666, 307, 308, 309,
	310, 311, 312, 1255, 1233, 314, 315, 316, 317, 318,
	320, 322, 323, 324, 325, 326, 328, 330, 1244, 1234,
	1239, 1245, 1235, 1236, 1240, 334, 335, 336, 337, 338,
	339, 0, 340, 341, 345, 347, 348, 349, 350, 351,
	352, 355, 0, 357, 359, 0, 360, 363, 0, 364,
	365, 366, 367, 368, 369, 370, 371, 1247, 372, 0,
	373, 374, 376, 0, 379, 380, 381, 382, 383, 0,
	384, 1256, 1205, 385, 386, 388, 389, 390, 392, 393,
	394, 395, 396, 397, 398, 399, 400, 401, 402, 403,
	0, 404, 405, 406, 408, 0, 409, 410, 413, 414,
	415, 416, 0, 418, 1257, 0, 419, 420, 421, 1237,
	1238, 422, 423, 424, 425, 426, 427, 430, 1270, 432,
	433, 434, 435, 436, 437, 438, 668, 440, 441, 442,
	443, 444, 445, 446, 630, 1248, 447, 449, 450, 1254,
	634, 1249, 897, 465, 466, 467, 468, 469, 470, 471,
	473, 0, 475, 476, 477, 1250, 478, 479, 480, 481,
	0, 482, 483, 484, 485, 486, 488, 491, 492, 493,
	494, 0, 497, 498, 499, 500, 501, 502, 503, 505,
	506, 507, 509, 510, 511, 669, 512, 513, 514, 515,
	1208, 517, 518, 670, 520, 521, 523, 524, 525, 526,
	527, 528, 679, 1241, 530, 640, 531, 532, 533, 534,
	535, 0, 537, 538, 539, 540, 541, 542, 545, 546,
	547, 549, 550, 1251, 551, 552, 1242, 554, 555, 900,
	557, 558, 559, 560, 561, 0, 680, 562, 1252, 563,
	1253, 564, 565, 566, 567, 568, 569, 570, 572, 0,
	1192, 574, 575, 576, 578, 579, 580, 581, 584, 585,
	586, 587, 588, 0, 589, 591, 593, 671, 648, 1258,
	1259, 1262, 1260, 1261, 1263, 1264, 1274, 594, 595, 611,
	462, 456, 412, 454, 455, 459, 460, 463, 0, 0,
	0, 1246, 0, 0, 0, 1190, 0, 0, 939, 0,
	1211, 766, 0, 1216, 1217, 1206, 752, 1196, 0, 0,
	1197, 0, 0, 1186, 1187, 1184, 288, 0, 305, 882,
	0, 354, 391, 1201, 0, 1189, 451, 0, 504, 508,
	0, 597, 1221, 0, 1193, 0, 362, 1214, 887, 0,
	893, 1215, 899, 1213, 573, 0, 889, 890, 895, 293,
	1290, 596, 667, 0, 0, 0, 1207, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 891,
	888, 892, 898, 886, 896, 883, 894, 0, 495, 429,
	646, 522, 300, 346, 333, 375, 417, 529, 0, 0,
	407, 577, 342, 431, 0, 321, 464, 1243, 553, 428,
	0, 536, 556, 0, 448, 327, 487, 543, 544, 880,
	885, 0, 901, 0, 331, 332, 453, 313, 461, 658,
	624, 516, 474, 472, 0, 439, 496, 653, 1202, 0,
	361, 0, 356, 452, 592, 319, 571, 490, 457, 411,
	519, 548, 358, 343, 344, 387, 489, 377, 329, 582,
	1271, 1273, 1269, 1265, 1266, 1231, 1232, 1272, 1268, 378,
	1267, 0, 590, 1276, 1287, 1284, 1289, 1275, 1288, 1282,
	1007, 637, 1279, 1278, 1292, 1285, 1286, 583, 1291, 1230,
	1283, 1281, 1280, 1277, 0, 278, 279, 280, 281, 282,
	283, 284, 285, 286, 287, 289, 0, 290, 291, 292,
	294, 295, 296, 879, 297, 298, 299, 302, 303, 304,
	306, 666, 307, 308, 309, 310, 311, 312, 1255, 1233,
	314, 315, 316, 317, 318, 320, 322, 323, 324, 325,
	326, 328, 330, 1244, 1234, 1239, 1245, 1235, 1236, 1240,
	334, 335, 336, 337, 338, 339, 0, 340, 341, 345,
	347, 348, 349, 350, 351, 352, 355, 0, 357, 359,
	0, 360, 363, 0, 364, 365, 366, 367, 368, 369,
	370, 371, 1247, 372, 0, 373, 374, 376, 0, 379,
	380, 381, 382, 383, 0, 384, 1256, 1205, 385, 386,
	388, 389, 390, 392, 393, 394, 395, 396, 397, 398,
	399, 400, 401, 402, 403, 0, 404, 405, 406, 408,
	0, 409, 410, 413, 414, 415, 416, 0, 418, 1257,
	0, 419, 420, 421, 1237, 1238, 422, 423, 424, 425,
	426, 427, 430, 1270, 432, 433, 434, 435, 436, 437,
	438, 668, 440, 441, 442, 443, 444, 445, 446, 630,
	1248, 447, 449, 450, 1254, 634, 1249, 897, 465, 466,
	467, 468, 469, 470, 471, 473, 0, 475, 476, 477,
	1250, 478, 479, 480, 481, 0, 482, 483, 484, 485,
	486, 488, 491, 492, 493, 494, 0, 497, 498, 499,
	500, 501, 502, 503, 505, 506, 507, 509, 510, 511,
	669, 512, 513, 514, 515, 1208, 517, 518, 670, 520,
	521, 523, 524, 525, 526, 527, 528, 679, 1241, 530,
	640, 531, 532, 533, 534, 535, 0, 537, 538, 539,
	540, 541, 542, 545, 546, 547, 549, 550, 1251, 551,
	552, 1242, 554, 555, 900, 557, 558, 559, 560, 561,
	0, 680, 562, 1252, 563, 1253, 564, 565, 566, 567,
	568, 569, 570, 572, 0, 1192, 574, 575, 576, 578,
	579, 580, 581, 584, 585, 586, 587, 588, 0, 589,
	591, 593, 671, 648, 1258, 1259, 1262, 1260, 1261, 1263,
	1264, 1274, 594, 595, 611, 462, 456, 412, 454, 455,
	459, 460, 463, 0, 0, 0, 1246, 0, 0, 0,
	1190, 0, 939, 0, 1211, 766, 0, 1216, 1217, 1206,
	752, 1196, 0, 2267, 2997, 1197, 0, 0, 1186, 1187,
	288, 0, 305, 882, 0, 354, 391, 1201, 0, 1189,
	451, 0, 504, 508, 0, 597, 1221, 0, 1193, 0,
	362, 1214, 887, 0, 893, 1215, 899, 1213, 573, 0,
	889, 890, 895, 293, 1290, 596, 667, 0, 0, 2958,
	1207, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 891, 888, 892, 898, 886, 896, 883,
	894, 0, 495, 429, 646, 522, 300, 346, 333, 375,
	417, 529, 0, 0, 407, 577, 342, 431, 0, 321,
	464, 1243, 553, 428, 0, 536, 556, 0, 448, 327,
	487, 543, 544, 880, 885, 0, 901, 0, 331, 332,
	453, 313, 461, 658, 624, 516, 474, 472, 0, 439,
	496, 653, 1202, 0, 361, 0, 356, 452, 592, 319,
	571, 490, 457, 411, 519, 548, 358, 343, 344, 387,
	489, 377, 329, 582, 1271, 1273, 1269, 1265, 1266, 1231,
	1232, 1272, 1268, 378, 1267, 0, 590, 1276, 1287, 1284,
	1289, 1275, 1288, 1282, 1007, 637, 1279, 1278, 1292, 1285,
	1286, 583, 1291, 1230, 1283, 1281, 1280, 1277, 0, 278,
	279, 280, 281, 282, 283, 284, 285, 286, 287, 289,
	0, 290, 291, 292, 294, 295, 296, 879, 297, 298,
	299, 302, 303, 304, 306, 666, 307, 308, 309, 310,
	311, 312, 1255, 1233, 314, 315, 316, 317, 318, 320,
	322, 323, 324, 325, 326, 328, 330, 1244, 1234, 1239,
	1245, 1235, 1236, 1240, 334, 335, 336, 337, 338, 339,
	0, 340, 341, 345, 347, 348, 349, 350, 351, 352,
	355, 0, 357, 359, 0, 360, 363, 0, 364, 365,
	366, 367, 368, 369, 370, 371, 1247, 372, 0, 373,
	374, 376, 0, 379, 380, 381, 382, 383, 0, 384,
	1256, 1205, 385, 386, 388, 389, 390, 392, 393, 394,
	395, 396, 397, 398, 399, 400, 401, 402, 403, 0,
	404, 405, 406, 408, 0, 409, 410, 413, 414, 415,
	416, 0, 418, 1257, 0, 419, 420, 421, 1237, 1238,
	422, 423, 424, 425, 426, 427, 430, 1270, 432, 433,
	434, 435, 436, 437, 438, 668, 440, 441, 442, 443,
	444, 445, 446, 630, 1248, 447, 449, 450, 1254, 634,
	1249, 897, 465, 466, 467, 468, 469, 470, 471, 473,
	0, 475, 476, 477, 1250, 478, 479, 480, 481, 0,
	482, 483, 484, 485, 486, 488, 491, 492, 493, 494,
	0, 497, 498, 499, 500, 501, 502, 503, 505, 506,
	507, 509, 510, 511, 669, 512, 513, 514, 515, 1208,
	517, 518, 670, 520, 521, 523, 524, 525, 526, 527,
	528, 679, 1241, 530, 640, 531, 532, 533, 534, 535,
	0, 537, 538, 539, 540, 541, 542, 545, 546, 547,
	549, 550, 1251, 551, 552, 1242, 554, 555, 900, 557,
	558, 559, 560, 561, 0, 680, 562, 1252, 563, 1253,
	564, 565, 566, 567, 568, 569, 570, 572, 0, 1192,
	574, 575, 576, 578, 579, 580, 581, 584, 585, 586,
	587, 588, 0, 589, 591, 593, 671, 648, 1258, 1259,
	1262, 1260, 1261, 1263, 1264, 1274, 594, 595, 611, 462,
	456, 412, 454, 455, 459, 460, 463, 0, 0, 0,
	1246, 0, 0, 0, 1190, 0, 939, 0, 1211, 766,
	0, 1216, 1217, 1206, 752, 1196, 0, 0, 0, 1197,
	0, 0, 1186, 1187, 288, 0, 305, 882, 0, 354,
	391, 1201, 0, 1189, 451, 0, 504, 508, 0, 597,
	1221, 0, 1193, 0, 362, 1214, 887, 0, 893, 1215,
	899, 1213, 573, 0, 889, 890, 895, 293, 1290, 596,
	667, 0, 0, 0, 1207, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 0, 0, 891, 888, 892,
	898, 886, 896, 883, 894, 0, 495, 429, 646, 522,
	300, 346, 333, 375, 417, 529, 0, 0, 407, 577,
	342, 431, 0, 321, 464, 1243, 553, 428, 0, 536,
	556, 0, 448, 327, 487, 543, 544, 880, 885, 0,
	901, 0, 331, 332, 453, 313, 461, 658, 624, 516,
	474, 472, 0, 439, 496, 653, 1202, 0, 361, 0,
	356, 452, 592, 319, 571, 490, 457, 411, 519, 548,
	358, 343, 344, 387, 489, 377, 329, 582, 1271, 1273,
	1269, 1265, 1266, 1231, 1232, 1272, 1268, 378, 1267, 0,
	590, 1276, 1287, 1284, 1289, 1275, 1288, 1282, 1007, 637,
	1279, 1278, 1292, 1285, 1286, 583, 1291, 1230, 1283, 1281,
	1280, 1277, 4196, 278, 279, 280, 281, 282, 283, 284,
	285, 286, 287, 289, 0, 290, 291, 292, 294, 295,
	296, 879, 297, 298, 299, 302, 303, 304, 306, 666,
	307, 308, 309, 310, 311, 312, 1255, 1233, 314, 315,
	316, 317, 318, 320, 322, 323, 324, 325, 326, 328,
	330, 1244, 1234, 1239, 1245, 1235, 1236, 1240, 334, 335,
	336, 337, 338, 339, 0, 340, 341, 345, 347, 348,
	349, 350, 351, 352, 355, 0, 357, 359, 0, 360,
	363, 0, 364, 365, 366, 367, 368, 369, 370, 371,
	1247, 372, 0, 373, 374, 376, 0, 379, 380, 381,
	382, 383, 0, 384, 1256, 1205, 385, 386, 388, 389,
	390, 392, 393, 394, 395, 396, 397, 398, 399, 400,
	401, 402, 403, 0, 404, 405, 406, 408, 0, 409,
	410, 413, 414, 415, 416, 0, 418, 1257, 0, 419,
	420, 421, 1237, 1238, 422, 423, 424, 425, 426, 427,
	430, 1270, 432, 433, 434, 435, 436, 437, 438, 668,
	440, 441, 442, 443, 444, 445, 446, 630, 1248, 447,
	449, 450, 1254, 634, 1249, 897, 465, 466, 467, 468,
	469, 470, 471, 473, 0, 475, 476, 477, 1250, 478,
	479, 480, 481, 0, 482, 483, 484, 485, 486, 488,
	491, 492, 493, 494, 0, 497, 498, 499, 500, 501,
	502, 503, 505, 506, 507, 509, 510, 511, 669, 512,
	513, 514, 515, 1208, 517, 518, 670, 520, 521, 523,
	524, 525, 526, 527, 528, 679, 1241, 530, 640, 531,
	532, 533, 534, 535, 0, 537, 538, 539, 540, 541,
	542, 545, 546, 547, 549, 550, 1251, 551, 552, 1242,
	554, 555, 900, 557, 558, 559, 560, 561, 0, 680,
	562, 1252, 563, 1253, 564, 565, 566, 567, 568, 569,
	570, 572, 0, 1192, 574, 575, 576, 578, 579, 580,
	581, 584, 585, 586, 587, 588, 0, 589, 591, 593,
	671, 648, 1258, 1259, 1262, 1260, 1261, 1263, 1264, 1274,
	594, 595, 611, 462, 456, 412, 454, 455, 459, 460,
	463, 0, 0, 0, 1246, 0, 0, 0, 1190, 0,
	939, 0, 1211, 766, 0, 1216, 1217, 1206, 752, 1196,
	0, 0, 0, 1197, 0, 0, 1186, 1187, 288, 0,
	305, 882, 0, 354, 391, 1201, 0, 1189, 451, 0,
	504, 508, 0, 597, 1221, 0, 1193, 0, 362, 1214,
	887, 0, 893, 1215, 899, 1213, 573, 0, 889, 890,
	895, 293, 1290, 596, 667, 0, 0, 0, 1207, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 0,
	0, 891, 888, 892, 898, 886, 896, 883, 894, 0,
	495, 429, 646, 522, 300, 346, 333, 375, 417, 529,
	0, 0, 407, 577, 342, 431, 0, 321, 464, 1243,
	553, 428, 0, 536, 556, 0, 448, 327, 487, 543,
	544, 880, 885, 0, 901, 0, 331, 332, 453, 313,
	461, 658, 624, 516, 474, 472, 0, 439, 496, 653,
	1202, 0, 361, 0, 356, 452, 592, 319, 571, 490,
	457, 411, 519, 548, 358, 343, 344, 387, 489, 377,
	329, 582, 1271, 1273, 1269, 1265, 1266, 1231, 1232, 1272,
	1268, 378, 1267, 0, 590, 1276, 1287, 1284, 1289, 1275,
	1288, 1282, 1007, 637, 1279, 1278, 1292, 1285, 1286, 583,
	1291, 1230, 1283, 1281, 1280, 1277, 0, 278, 279, 280,
	281, 282, 283, 284, 285, 286, 287, 289, 0, 290,
	291, 292, 294, 295, 296, 879, 297, 298, 299, 302,
	303, 304, 306, 666, 307, 308, 309, 310, 311, 312,
	1255, 1233, 314, 315, 316, 317, 318, 320, 322, 323,
	324, 325, 326, 328, 330, 1244, 1234, 1239, 1245, 1235,
	1236, 1240, 334, 335, 336, 337, 338, 339, 0, 340,
	341, 345, 347, 348, 349, 350, 351, 352, 355, 0,
	357, 359, 0, 360, 363, 0, 364, 365, 366, 367,
	368, 369, 370, 371, 1247, 372, 0, 373, 374, 376,
	0, 379, 380, 381, 382, 383, 0, 384, 1256, 1205,
	385, 386, 388, 389, 390, 392, 393, 394, 395, 396,
	397, 398, 399, 400, 401, 402, 403, 0, 404, 405,
	406, 408, 0, 409, 410, 413, 414, 415, 416, 0,
	418, 1257, 0, 419, 420, 421, 1237, 1238, 422, 423,
	424, 425, 426, 427, 430, 1270, 432, 433, 434, 435,
	436, 437, 438, 668, 440, 441, 442, 443, 444, 445,
	446, 630, 1248, 447, 449, 450, 1254, 634, 1249, 897,
	465, 466, 467, 468, 469, 470, 471, 473, 0, 475,
	476, 477, 1250, 478, 479, 480, 481, 0, 482, 483,
	484, 485, 486, 488, 491, 492, 493, 494, 0, 497,
	498, 499, 500, 501, 502, 503, 505, 506, 507, 509,
	510, 511, 669, 512, 513, 514, 515, 1208, 517, 518,
	670, 520, 521, 523, 524, 525, 526, 527, 528, 679,
	1241, 530, 640, 531, 532, 533, 534, 535, 0, 537,
	538, 539, 540, 541, 542, 545, 546, 547, 549, 550,
	1251, 551, 552, 1242, 554, 555, 900, 557, 558, 559,
	560, 561, 0, 680, 562, 1252, 563, 1253, 564, 565,
	566, 567, 568, 569, 570, 572, 0, 1192, 574, 575,
	576, 578, 579, 580, 581, 584, 585, 586, 587, 588,
	0, 589, 591, 593, 671, 648, 1258, 1259, 1262, 1260,
	1261, 1263, 1264, 1274, 594, 595, 611, 462, 456, 412,
	454, 455, 459, 460, 463, 0, 0, 0, 1246, 0,
	0, 0, 1190, 0, 939, 0, 1211, 766, 0, 1216,
	1217, 1206, 752, 1196, 0, 0, 0, 1197, 4191, 0,
	1186, 1187, 288, 0, 305, 882, 0, 354, 391, 1201,
	0, 1189, 451, 0, 504, 508, 0, 597, 1221, 0,
	1193, 0, 362, 1214, 887, 0, 893, 1215, 899, 1213,
	573, 0, 889, 890, 895, 293, 1290, 596, 667, 0,
	0, 0, 1207, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 891, 888, 892, 898, 886,
	896, 883, 894, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 1243, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 880, 885, 0, 901, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 1202, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 1271, 1273, 1269, 1265,
	1266, 1231, 1232, 1272, 1268, 378, 1267, 0, 590, 1276,
	1287, 1284, 1289, 1275, 1288, 1282, 1007, 637, 1279, 1278,
	1292, 1285, 1286, 583, 1291, 1230, 1283, 1281, 1280, 1277,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 879,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 1255, 1233, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 1244,
	1234, 1239, 1245, 1235, 1236, 1240, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 1247, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 1256, 1205, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 1257, 0, 419, 420, 421,
	1237, 1238, 422, 423, 424, 425, 426, 427, 430, 1270,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 1248, 447, 449, 450,
	1254, 634, 1249, 897, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 1250, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 1208, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 1241, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 1251, 551, 552, 1242, 554, 555,
	900, 557, 558, 559, 560, 561, 0, 680, 562, 1252,
	563, 1253, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 1192, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	1258, 1259, 1262, 1260, 1261, 1263, 1264, 1274, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 0,
	0, 0, 1246, 0, 0, 0, 1190, 0, 939, 0,
	1211, 766, 0, 1216, 1217, 1206, 752, 1196, 0, 0,
	0, 1197, 4154, 0, 1186, 1187, 288, 0, 305, 882,
	0, 354, 391, 1201, 0, 1189, 451, 0, 504, 508,
	0, 597, 1221, 0, 1193, 0, 362, 1214, 887, 0,
	893, 1215, 899, 1213, 573, 0, 889, 890, 895, 293,
	1290, 596, 667, 0, 0, 0, 1207, 0, 3065, 0,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 891,
	888, 892, 898, 886, 896, 883, 894, 0, 495, 429,
	646, 522, 300, 346, 333, 375, 417, 529, 0, 0,
	407, 577, 342, 431, 0, 321, 464, 1243, 553, 428,
	0, 536, 556, 0, 448, 327, 487, 543, 544, 880,
	885, 0, 901, 0, 331, 332, 453, 313, 461, 658,
	624, 516, 474, 472, 0, 439, 496, 653, 1202, 0,
	361, 0, 356, 452, 592, 319, 571, 490, 457, 411,
	519, 548, 358, 343, 344, 387, 489, 377, 329, 582,
	1271, 1273, 1269, 1265, 1266, 1231, 1232, 1272, 1268, 378,
	1267, 0, 590, 1276, 1287, 1284, 1289, 1275, 1288, 1282,
	1007, 637, 1279, 1278, 1292, 1285, 1286, 583, 1291, 1230,
	1283, 1281, 1280, 1277, 0, 278, 279, 280, 281, 282,
	283, 284, 285, 286, 287, 289, 0, 290, 291, 292,
	294, 295, 296, 879, 297, 298, 299, 302, 303, 304,
	306, 666, 307, 308, 309, 310, 311, 312, 1255, 1233,
	314, 315, 316, 317, 318, 320, 322, 323, 324, 325,
	326, 328, 330, 1244, 1234, 1239, 1245, 1235, 1236, 1240,
	334, 335, 336, 337, 338, 339, 0, 340, 341, 345,
	347, 348, 349, 350, 351, 352, 355, 0, 357, 359,
	0, 360, 363, 0, 364, 365, 366, 367, 368, 369,
	370, 371, 1247, 372, 0, 373, 374, 376, 0, 379,
	380, 381, 382, 383, 0, 384, 1256, 1205, 385, 386,
	388, 389, 390, 392, 393, 394, 395, 396, 397, 398,
	399, 400, 401, 402, 403, 0, 404, 405, 406, 408,
	0, 409, 410, 413, 414, 415, 416, 0, 418, 1257,
	0, 419, 420, 421, 1237, 1238, 422, 423, 424, 425,
	426, 427, 430, 1270, 432, 433, 434, 435, 436, 437,
	438, 668, 440, 441, 442, 443, 444, 445, 446, 630,
	1248, 447, 449, 450, 1254, 634, 1249, 897, 465, 466,
	467, 468, 469, 470, 471, 473, 0, 475, 476, 477,
	1250, 478, 479, 480, 481, 0, 482, 483, 484, 485,
	486, 488, 491, 492, 493, 494, 0, 497, 498, 499,
	500, 501, 502, 503, 505, 506, 507, 509, 510, 511,
	669, 512, 513, 514, 515, 1208, 517, 518, 670, 520,
	521, 523, 524, 525, 526, 527, 528, 679, 1241, 530,
	640, 531, 532, 533, 534, 535, 0, 537, 538, 539,
	540, 541, 542, 545, 546, 547, 549, 550, 1251, 551,
	552, 1242, 554, 555, 900, 557, 558, 559, 560, 561,
	0, 680, 562, 1252, 563, 1253, 564, 565, 566, 567,
	568, 569, 570, 572, 0, 1192, 574, 575, 576, 578,
	579, 580, 581, 584, 585, 586, 587, 588, 0, 589,
	591, 593, 671, 648, 1258, 1259, 1262, 1260, 1261, 1263,
	1264, 1274, 594, 595, 611, 462, 456, 412, 454, 455,
	459, 460, 463, 0, 0, 0, 1246, 0, 0, 0,
	1190, 0, 939, 0, 1211, 766, 0, 1216, 1217, 1206,
	752, 1196, 0, 0, 0, 1197, 0, 0, 1186, 1187,
	288, 0, 305, 882, 0, 354, 391, 1201, 0, 1189,
	451, 0, 504, 508, 0, 597, 1221, 0, 1193, 0,
	362, 1214, 887, 0, 893, 1215, 899, 1213, 573, 0,
	889, 890, 895, 293, 1290, 596, 667, 0, 0, 0,
	1207, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 891, 888, 892, 898, 886, 896, 883,
	894, 0, 495, 429, 646, 522, 300, 346, 333, 375,
	417, 529, 0, 0, 407, 577, 342, 431, 3084, 321,
	464, 1243, 553, 428, 0, 536, 556, 0, 448, 327,
	487, 543, 544, 880, 885, 0, 901, 0, 331, 332,
	453, 313, 461, 658, 624, 516, 474, 472, 0, 439,
	496, 653, 1202, 0, 361, 0, 356, 452, 592, 319,
	571, 490, 457, 411, 519, 548, 358, 343, 344, 387,
	489, 377, 329, 582, 1271, 1273, 1269, 1265, 1266, 1231,
	1232, 1272, 1268, 378, 1267, 0, 590, 1276, 1287, 1284,
	1289, 1275, 1288, 1282, 1007, 637, 1279, 1278, 1292, 1285,
	1286, 583, 1291, 1230, 1283, 1281, 1280, 1277, 0, 278,
	279, 280, 281, 282, 283, 284, 285, 286, 287, 289,
	0, 290, 291, 292, 294, 295, 296, 879, 297, 298,
	299, 302, 303, 304, 306, 666, 307, 308, 309, 310,
	311, 312, 1255, 1233, 314, 315, 316, 317, 318, 320,
	322, 323, 324, 325, 326, 328, 330, 1244, 1234, 1239,
	1245, 1235, 1236, 1240, 334, 335, 336, 337, 338, 339,
	0, 340, 341, 345, 347, 348, 349, 350, 351, 352,
	355, 0, 357, 359, 0, 360, 363, 0, 364, 365,
	366, 367, 368, 369, 370, 371, 1247, 372, 0, 373,
	374, 376, 0, 379, 380, 381, 382, 383, 0, 384,
	1256, 1205, 385, 386, 388, 389, 390, 392, 393, 394,
	395, 396, 397, 398, 399, 400, 401, 402, 403, 0,
	404, 405, 406, 408, 0, 409, 410, 413, 414, 415,
	416, 0, 418, 1257, 0, 419, 420, 421, 1237, 1238,
	422, 423, 424, 425, 426, 427, 430, 1270, 432, 433,
	434, 435, 436, 437, 438, 668, 440, 441, 442, 443,
	444, 445, 446, 630, 1248, 447, 449, 450, 1254, 634,
	1249, 897, 465, 466, 467, 468, 469, 470, 471, 473,
	0, 475, 476, 477, 1250, 478, 479, 480, 481, 0,
	482, 483, 484, 485, 486, 488, 491, 492, 493, 494,
	0, 497, 498, 499, 500, 501, 502, 503, 505, 506,
	507, 509, 510, 511, 669, 512, 513, 514, 515, 1208,
	517, 518, 670, 520, 521, 523, 524, 525, 526, 527,
	528, 679, 1241, 530, 640, 531, 532, 533, 534, 535,
	0, 537, 538, 539, 540, 541, 542, 545, 546, 547,
	549, 550, 1251, 551, 552, 1242, 554, 555, 900, 557,
	558, 559, 560, 561, 0, 680, 562, 1252, 563, 1253,
	564, 565, 566, 567, 568, 569, 570, 572, 0, 1192,
	574, 575, 576, 578, 579, 580, 581, 584, 585, 586,
	587, 588, 0, 589, 591, 593, 671, 648, 1258, 1259,
	1262, 1260, 1261, 1263, 1264, 1274, 594, 595, 611, 462,
	456, 412, 454, 455, 459, 460, 463, 0, 0, 0,
	1246, 0, 0, 0, 1190, 0, 939, 0, 1211, 766,
	0, 1216, 1217, 1206, 752, 1196, 0, 0, 0, 1197,
	0, 0, 1186, 1187, 288, 0, 305, 882, 0, 354,
	391, 1201, 0, 1189, 451, 0, 504, 508, 0, 597,
	1221, 0, 1193, 0, 362, 1214, 887, 0, 893, 1215,
	899, 1213, 573, 0, 889, 890, 895, 293, 1290, 596,
	667, 0, 0, 0, 1207, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 0, 0, 891, 888, 892,
	898, 886, 896, 883, 894, 0, 495, 429, 646, 522,
	300, 346, 333, 375, 417, 529, 0, 0, 407, 577,
	342, 431, 0, 321, 464, 1243, 553, 428, 0, 536,
	556, 0, 448, 327, 487, 543, 544, 880, 885, 0,
	901, 0, 331, 332, 453, 313, 461, 658, 624, 516,
	474, 472, 0, 439, 496, 653, 1202, 0, 361, 0,
	356, 452, 592, 319, 571, 490, 457, 411, 519, 548,
	358, 343, 344, 387, 489, 377, 329, 582, 1271, 1273,
	1269, 1265, 1266, 1231, 1232, 1272, 1268, 378, 1267, 0,
	590, 1276, 1287, 1284, 1289, 1275, 1288, 1282, 1007, 637,
	1279, 1278, 1292, 1285, 1286, 583, 1291, 1230, 1283, 1281,
	1280, 1277, 0, 278, 279, 280, 281, 282, 283, 284,
	285, 286, 287, 289, 0, 290, 291, 292, 294, 295,
	296, 879, 297, 298, 299, 302, 303, 304, 306, 666,
	307, 308, 309, 310, 311, 312, 1255, 1233, 314, 315,
	316, 317, 318, 320, 322, 323, 324, 325, 326, 328,
	330, 1244, 1234, 1239, 1245, 1235, 1236, 1240, 334, 335,
	336, 337, 338, 339, 0, 340, 341, 345, 347, 348,
	349, 350, 351, 352, 355, 0, 357, 359, 0, 360,
	363, 0, 364, 365, 366, 367, 368, 369, 370, 371,
	1247, 372, 0, 373, 374, 376, 0, 379, 380, 381,
	382, 383, 0, 384, 1256, 1205, 385, 386, 388, 389,
	390, 392, 393, 394, 395, 396, 397, 398, 399, 400,
	401, 402, 403, 0, 404, 405, 406, 408, 0, 409,
	410, 413, 414, 415, 416, 0, 418, 1257, 0, 419,
	420, 421, 1237, 1238, 422, 423, 424, 425, 426, 427,
	430, 1270, 432, 433, 434, 435, 436, 437, 438, 668,
	440, 441, 442, 443, 444, 445, 446, 630, 1248, 447,
	449, 450, 1254, 634, 1249, 897, 465, 466, 467, 468,
	469, 470, 471, 473, 0, 475, 476, 477, 1250, 478,
	479, 480, 481, 0, 482, 483, 484, 485, 486, 488,
	491, 492, 493, 494, 0, 497, 498, 499, 500, 501,
	502, 503, 505, 506, 507, 509, 510, 511, 669, 512,
	513, 514, 515, 1208, 517, 518, 670, 520, 521, 523,
	524, 525, 526, 527, 528, 679, 1241, 530, 640, 531,
	532, 533, 534, 535, 0, 537, 538, 539, 540, 541,
	542, 545, 546, 547, 549, 550, 1251, 551, 552, 1242,
	554, 555, 900, 557, 558, 559, 560, 561, 0, 680,
	562, 1252, 563, 1253, 564, 565, 566, 567, 568, 569,
	570, 572, 0, 1192, 574, 575, 576, 578, 579, 580,
	581, 584, 585, 586, 587, 588, 0, 589, 591, 593,
	671, 648, 1258, 1259, 1262, 1260, 1261, 1263, 1264, 1274,
	594, 595, 611, 462, 456, 412, 454, 455, 459, 460,
	463, 0, 0, 0, 1246, 0, 0, 0, 1190, 0,
	0, 939, 0, 1211, 766, 0, 1216, 1217, 1206, 752,
	1196, 0, 0, 1197, 3002, 0, 1186, 1187, 1752, 288,
	0, 305, 882, 0, 354, 391, 1201, 0, 1189, 451,
	0, 504, 508, 0, 597, 1221, 0, 1193, 0, 362,
	1214, 887, 0, 893, 1215, 899, 1213, 573, 0, 889,
	890, 895, 293, 1290, 596, 667, 0, 0, 0, 1207,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 891, 888, 892, 898, 886, 896, 883, 894,
	0, 495, 429, 646, 522, 300, 346, 333, 375, 417,
	529, 0, 0, 407, 577, 342, 431, 0, 321, 464,
	1243, 553, 428, 0, 536, 556, 0, 448, 327, 487,
	543, 544, 880, 885, 0, 901, 0, 331, 332, 453,
	313, 461, 658, 624, 516, 474, 472, 0, 439, 496,
	653, 1202, 0, 361, 0, 356, 452, 592, 319, 571,
	490, 457, 411, 519, 548, 358, 343, 344, 387, 489,
	377, 329, 582, 1271, 1273, 1269, 1265, 1266, 1231, 1232,
	1272, 1268, 378, 1267, 0, 590, 1276, 1287, 1284, 1289,
	1275, 1288, 1282, 1007, 637, 1279, 1278, 1292, 1285, 1286,
	583, 1291, 1230, 1283, 1281, 1280, 1277, 0, 278, 279,
	280, 281, 282, 283, 284, 285, 286, 287, 289, 0,
	290, 291, 292, 294, 295, 296, 879, 297, 298, 299,
	302, 303, 304, 306, 666, 307, 308, 309, 310, 311,
	312, 1255, 1233, 314, 315, 316, 317, 318, 320, 322,
	323, 324, 325, 326, 328, 330, 1244, 1234, 1239, 1245,
	1235, 1236, 1240, 334, 335, 336, 337, 338, 339, 0,
	340, 341, 345, 347, 348, 349, 350, 351, 352, 355,
	0, 357, 359, 0, 360, 363, 0, 364, 365, 366,
	367, 368, 369, 370, 371, 1247, 372, 0, 373, 374,
	376, 0, 379, 380, 381, 382, 383, 0, 384, 1256,
	1205, 385, 386, 388, 389, 390, 392, 393, 394, 395,
	396, 397, 398, 399, 400, 401, 402, 403, 0, 404,
	405, 406, 408, 0, 409, 410, 413, 414, 415, 416,
	0, 418, 1257, 0, 419, 420, 421, 1237, 1238, 422,
	423, 424, 425, 426, 427, 430, 1270, 432, 433, 434,
	435, 436, 437, 438, 668, 440, 441, 442, 443, 444,
	445, 446, 630, 1248, 447, 449, 450, 1254, 634, 1249,
	897, 465, 466, 467, 468, 469, 470, 471, 473, 0,
	475, 476, 477, 1250, 478, 479, 480, 481, 0, 482,
	483, 484, 485, 486, 488, 491, 492, 493, 494, 0,
	497, 498, 499, 500, 501, 502, 503, 505, 506, 507,
	509, 510, 511, 669, 512, 513, 514, 515, 1208, 517,
	518, 670, 520, 521, 523, 524, 525, 526, 527, 528,
	679, 1241, 530, 640, 531, 532, 533, 534, 535, 0,
	537, 538, 539, 540, 541, 542, 545, 546, 547, 549,
	550, 1251, 551, 552, 1242, 554, 555, 900, 557, 558,
	559, 560, 561, 0, 680, 562, 1252, 563, 1253, 564,
	565, 566, 567, 568, 569, 570, 572, 0, 1192, 574,
	575, 576, 578, 579, 580, 581, 584, 585, 586, 587,
	588, 0, 589, 591, 593, 671, 648, 1258, 1259, 1262,
	1260, 1261, 1263, 1264, 1274, 594, 595, 611, 462, 456,
	412, 454, 455, 459, 460, 463, 0, 0, 0, 1246,
	0, 0, 0, 1190, 0, 939, 0, 1211, 766, 0,
	1216, 1217, 1206, 752, 1196, 0, 0, 0, 1197, 0,
	0, 1186, 1187, 288, 0, 305, 882, 0, 354, 391,
	1201, 0, 1189, 451, 0, 504, 508, 0, 597, 1221,
	0, 1193, 0, 362, 1214, 887, 0, 893, 1215, 899,
	1213, 573, 0, 889, 890, 895, 293, 1290, 596, 667,
	0, 0, 0, 1207, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 0, 0, 891, 888, 892, 898,
	886, 896, 883, 894, 0, 495, 429, 646, 522, 300,
	346, 333, 375, 417, 529, 0, 0, 407, 577, 342,
	431, 0, 321, 464, 1243, 553, 428, 0, 536, 556,
	0, 448, 327, 487, 543, 544, 880, 885, 0, 901,
	0, 331, 332, 453, 313, 461, 658, 624, 516, 474,
	472, 0, 439, 496, 653, 1202, 0, 361, 0, 356,
	452, 592, 319, 571, 490, 457, 411, 519, 548, 358,
	343, 344, 387, 489, 377, 329, 582, 1271, 1273, 1269,
	1265, 1266, 1231, 1232, 1272, 1268, 378, 1267, 0, 590,
	1276, 1287, 1284, 1289, 1275, 1288, 1282, 1007, 637, 1279,
	1278, 1292, 1285, 1286, 583, 1291, 1230, 1283, 1281, 1280,
	1277, 0, 278, 279, 280, 281, 282, 283, 284, 285,
	286, 287, 289, 0, 290, 291, 292, 294, 295, 296,
	879, 297, 298, 299, 302, 303, 304, 306, 666, 307,
	308, 309, 310, 311, 312, 1255, 1233, 314, 315, 316,
	317, 318, 320, 322, 323, 324, 325, 326, 328, 330,
	1244, 1234, 1239, 1245, 1235, 1236, 1240, 334, 335, 336,
	337, 338, 339, 0, 340, 341, 345, 347, 348, 349,
	350, 351, 352, 355, 0, 357, 359, 0, 360, 363,
	0, 364, 365, 366, 367, 368, 369, 370, 371, 1247,
	372, 0, 373, 374, 376, 0, 379, 380, 381, 382,
	383, 0, 384, 1256, 1205, 385, 386, 388, 389, 390,
	392, 393, 394, 395, 396, 397, 398, 399, 400, 401,
	402, 403, 0, 404, 405, 406, 408, 0, 409, 410,
	413, 414, 415, 416, 0, 418, 1257, 0, 419, 420,
	421, 1237, 1238, 422, 423, 424, 425, 426, 427, 430,
	1270, 432, 433, 434, 435, 436, 437, 438, 668, 440,
	441, 442, 443, 444, 445, 446, 630, 1248, 447, 449,
	450, 1254, 634, 1249, 897, 465, 466, 467, 468, 469,
	470, 471, 473, 0, 475, 476, 477, 1250, 478, 479,
	480, 481, 0, 482, 483, 484, 485, 486, 488, 491,
	492, 493, 494, 0, 497, 498, 499, 500, 501, 502,
	503, 505, 506, 507, 509, 510, 511, 669, 512, 513,
	514, 515, 1208, 517, 518, 670, 520, 521, 523, 524,
	525, 526, 527, 528, 679, 1241, 530, 640, 531, 532,
	533, 534, 535, 0, 537, 538, 539, 540, 541, 542,
	545, 546, 547, 549, 550, 1251, 551, 552, 1242, 554,
	555, 900, 557, 558, 559, 560, 561, 0, 680, 562,
	1252, 563, 1253, 564, 565, 566, 567, 568, 569, 570,
	572, 0, 1192, 574, 575, 576, 578, 579, 580, 581,
	584, 585, 586, 587, 588, 0, 589, 591, 593, 671,
	648, 1258, 1259, 1262, 1260, 1261, 1263, 1264, 1274, 594,
	595, 611, 462, 456, 412, 454, 455, 459, 460, 463,
	0, 0, 0, 1246, 0, 0, 0, 1190, 0, 939,
	0, 1211, 766, 0, 1216, 1217, 1206, 752, 1196, 0,
	0, 0, 1197, 0, 0, 1186, 1187, 288, 0, 305,
	882, 0, 354, 391, 1201, 0, 1189, 451, 0, 504,
	508, 0, 597, 1221, 0, 1193, 0, 362, 1214, 887,
	0, 893, 1215, 899, 1213, 573, 0, 889, 890, 895,
	293, 1290, 596, 667, 0, 0, 0, 1207, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	891, 888, 892, 898, 886, 896, 883, 894, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 1243, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	880, 885, 0, 901, 0, 5347, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 1202,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 1271, 1273, 1269, 1265, 1266, 1231, 1232, 1272, 1268,
	378, 1267, 0, 590, 1276, 1287, 1284, 1289, 1275, 1288,
	1282, 1007, 637, 1279, 1278, 1292, 1285, 1286, 583, 1291,
	1230, 1283, 1281, 1280, 1277, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 879, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 1255,
	1233, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 1244, 1234, 1239, 1245, 1235, 1236,
	1240, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 1247, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 1256, 1205, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	1257, 0, 419, 420, 421, 1237, 1238, 422, 423, 424,
	425, 426, 427, 430, 1270, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 1248, 447, 449, 450, 1254, 634, 1249, 897, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 1250, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 1208, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 1241,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 1251,
	551, 552, 1242, 554, 555, 900, 557, 558, 559, 560,
	561, 0, 680, 562, 1252, 563, 1253, 564, 565, 566,
	567, 568, 5346, 570, 572, 0, 1192, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 1258, 1259, 1262, 1260, 1261,
	1263, 1264, 1274, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 0, 0, 0, 1246, 0, 0,
	0, 1190, 0, 939, 0, 1211, 766, 0, 1216, 1217,
	1206, 752, 1196, 0, 0, 0, 1197, 0, 0, 1186,
	1187, 288, 0, 305, 882, 0, 354, 391, 1201, 0,
	1189, 451, 0, 504, 508, 0, 597, 1221, 0, 1193,
	0, 362, 1214, 887, 0, 893, 1215, 899, 1213, 573,
	0, 889, 890, 895, 293, 1290, 596, 667, 0, 0,
	0, 1207, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 891, 888, 892, 898, 886, 896,
	883, 894, 0, 495, 429, 646, 522, 300, 346, 333,
	375, 417, 529, 0, 0, 407, 577, 342, 431, 0,
	321, 464, 1243, 553, 428, 0, 536, 556, 0, 448,
	327, 487, 543, 544, 880, 885, 0, 901, 0, 331,
	332, 453, 313, 461, 658, 624, 516, 474, 472, 0,
	439, 496, 653, 1202, 0, 361, 0, 356, 452, 592,
	319, 571, 490, 457, 411, 519, 548, 358, 343, 344,
	387, 489, 377, 329, 582, 1271, 1273, 1269, 1265, 1266,
	1231, 1232, 1272, 1268, 378, 1267, 0, 590, 1276, 1287,
	1284, 1289, 1275, 1288, 1282, 1007, 637, 1279, 1278, 1292,
	1285, 1286, 583, 1291, 1230, 1283, 1281, 1280, 1277, 0,
	278, 279, 280, 281, 282, 283, 284, 285, 286, 287,
	289, 0, 290, 291, 292, 294, 295, 296, 879, 297,
	298, 299, 302, 303, 304, 306, 666, 307, 308, 309,
	310, 311, 312, 1255, 1233, 314, 315, 316, 317, 318,
	320, 322, 323, 324, 325, 326, 328, 5152, 1244, 1234,
	1239, 1245, 1235, 1236, 1240, 334, 335, 336, 337, 338,
	339, 0, 340, 341, 345, 347, 348, 349, 350, 351,
	352, 355, 0, 357, 359, 0, 360, 363, 0, 364,
	365, 366, 367, 368, 369, 370, 371, 1247, 372, 0,
	373, 374, 376, 0, 379, 380, 381, 382, 383, 0,
	384, 1256, 5154, 385, 386, 388, 389, 390, 392, 393,
	394, 395, 396, 397, 398, 399, 400, 401, 402, 403,
	0, 404, 405, 406, 408, 0, 409, 410, 413, 414,
	415, 416, 0, 418, 1257, 0, 419, 420, 421, 1237,
	1238, 422, 423, 424, 425, 426, 427, 430, 1270, 432,
	433, 434, 435, 436, 437, 438, 668, 440, 441, 442,
	443, 444, 445, 446, 630, 1248, 447, 449, 450, 1254,
	634, 1249, 897, 465, 466, 467, 468, 469, 470, 471,
	473, 0, 475, 476, 477, 1250, 478, 479, 480, 481,
	0, 482, 483, 484, 485, 486, 488, 491, 492, 493,
	494, 0, 497, 498, 499, 500, 501, 502, 503, 505,
	506, 507, 509, 510, 511, 669, 512, 5153, 514, 515,
	1208, 517, 518, 670, 520, 521, 523, 524, 525, 526,
	527, 528, 679, 1241, 530, 640, 531, 532, 533, 534,
	535, 0, 537, 538, 539, 540, 541, 542, 545, 546,
	547, 549, 550, 1251, 551, 552, 1242, 554, 555, 900,
	557, 558, 559, 560, 561, 0, 680, 562, 1252, 563,
	1253, 564, 565, 566, 567, 568, 569, 570, 572, 0,
	1192, 574, 575, 576, 578, 579, 580, 581, 584, 585,
	586, 587, 588, 0, 589, 591, 593, 671, 648, 1258,
	1259, 1262, 1260, 1261, 1263, 1264, 1274, 594, 595, 611,
	462, 456, 412, 454, 455, 459, 460, 463, 0, 0,
	0, 1246, 0, 0, 0, 1190, 0, 939, 0, 1211,
	766, 0, 1216, 1217, 1206, 752, 1196, 0, 0, 0,
	5151, 0, 0, 1186, 1187, 288, 0, 305, 882, 0,
	354, 391, 1201, 0, 1189, 451, 0, 504, 508, 0,
	5345, 1221, 0, 1193, 0, 362, 1214, 887, 0, 893,
	1215, 899, 1213, 573, 0, 889, 890, 895, 293, 1290,
	596, 667, 0, 0, 0, 1207, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 891, 888,
	892, 898, 886, 896, 883, 894, 0, 495, 429, 646,
	522, 300, 346, 333, 375, 417, 529, 0, 0, 407,
	577, 342, 431, 0, 321, 464, 1243, 553, 428, 0,
	536, 556, 0, 448, 327, 487, 543, 544, 880, 885,
	0, 901, 0, 5347, 332, 453, 313, 461, 658, 624,
	516, 474, 472, 0, 439, 496, 653, 1202, 0, 361,
	0, 356, 452, 592, 319, 571, 490, 457, 411, 519,
	548, 358, 343, 344, 387, 489, 377, 329, 582, 1271,
	1273, 1269, 1265, 1266, 1231, 1232, 1272, 1268, 378, 1267,
	0, 590, 1276, 1287, 1284, 1289, 1275, 1288, 1282, 1007,
	637, 1279, 1278, 1292, 1285, 1286, 583, 1291, 1230, 1283,
	1281, 1280, 1277, 0, 278, 279, 280, 281, 282, 283,
	284, 285, 286, 287, 289, 0, 290, 291, 292, 294,
	295, 296, 879, 297, 298, 299, 302, 303, 304, 306,
	666, 307, 308, 309, 310, 311, 312, 1255, 1233, 314,
	315, 316, 317, 318, 320, 322, 323, 324, 325, 326,
	328, 330, 1244, 1234, 1239, 1245, 1235, 1236, 1240, 334,
	335, 336, 337, 338, 339, 0, 340, 341, 345, 347,
	348, 349, 350, 351, 352, 355, 0, 357, 359, 0,
	360, 363, 0, 364, 365, 366, 367, 368, 369, 370,
	371, 1247, 372, 0, 373, 374, 376, 0, 379, 380,
	381, 382, 383, 0, 384, 1256, 1205, 385, 386, 388,
	389, 390, 392, 393, 394, 395, 396, 397, 398, 399,
	400, 401, 402, 403, 0, 404, 405, 406, 408, 0,
	409, 410, 413, 414, 415, 416, 0, 418, 1257, 0,
	419, 420, 421, 1237, 1238, 422, 423, 424, 425, 426,
	427, 430, 1270, 432, 433, 434, 435, 436, 437, 438,
	668, 440, 441, 442, 443, 444, 445, 446, 630, 1248,
	447, 449, 450, 1254, 634, 1249, 897, 465, 466, 467,
	468, 469, 470, 471, 473, 0, 475, 476, 477, 1250,
	478, 479, 480, 481, 0, 482, 483, 484, 485, 486,
	488, 491, 492, 493, 494, 0, 497, 498, 499, 500,
	501, 502, 503, 505, 506, 507, 509, 510, 511, 669,
	512, 513, 514, 515, 1208, 517, 518, 670, 520, 521,
	523, 524, 525, 526, 527, 528, 679, 1241, 530, 640,
	531, 532, 533, 534, 535, 0, 537, 538, 539, 540,
	541, 542, 545, 546, 547, 549, 550, 1251, 551, 552,
	1242, 554, 555, 900, 557, 558, 559, 560, 561, 0,
	680, 562, 1252, 563, 1253, 564, 565, 566, 567, 568,
	5346, 570, 572, 0, 1192, 574, 575, 576, 578, 579,
	580, 581, 584, 585, 586, 587, 588, 0, 589, 591,
	593, 671, 648, 1258, 1259, 1262, 1260, 1261, 1263, 1264,
	1274, 594, 595, 611, 462, 456, 412, 454, 455, 459,
	460, 463, 0, 0, 0, 1246, 0, 0, 0, 1190,
	0, 939, 0, 1211, 766, 0, 1216, 1217, 1206, 752,
	1196, 0, 0, 0, 1197, 0, 0, 1186, 1187, 288,
	0, 305, 882, 0, 354, 391, 1201, 0, 1189, 451,
	0, 504, 508, 0, 597, 1221, 0, 1193, 0, 362,
	1214, 887, 0, 893, 1215, 899, 1213, 573, 0, 889,
	890, 895, 293, 1290, 596, 667, 0, 0, 0, 1207,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 891, 888, 892, 898, 886, 896, 883, 894,
	0, 495, 429, 646, 522, 300, 346, 333, 375, 417,
	529, 0, 0, 407, 577, 342, 431, 0, 321, 464,
	1243, 553, 428, 0, 536, 556, 0, 448, 327, 487,
	543, 544, 880, 885, 0, 901, 0, 331, 332, 453,
	313, 461, 658, 624, 516, 474, 472, 0, 439, 496,
	653, 1202, 0, 361, 0, 356, 452, 592, 319, 571,
	490, 457, 411, 519, 548, 358, 343, 344, 387, 489,
	377, 329, 582, 1271, 1273, 1269, 1265, 1266, 1231, 1232,
	1272, 1268, 378, 1267, 0, 590, 1276, 1287, 1284, 1289,
	1275, 1288, 1282, 1007, 637, 1279, 1278, 1292, 1285, 1286,
	583, 1291, 1230, 1283, 1281, 1280, 1277, 0, 278, 279,
	280, 281, 282, 283, 284, 285, 286, 287, 289, 0,
	290, 291, 292, 294, 295, 296, 879, 297, 298, 299,
	302, 303, 304, 306, 666, 307, 308, 309, 310, 311,
	312, 1255, 1233, 314, 315, 316, 317, 318, 320, 322,
	323, 324, 325, 326, 328, 330, 1244, 1234, 1239, 1245,
	1235, 1236, 1240, 334, 335, 336, 337, 338, 339, 0,
	340, 341, 345, 347, 348, 349, 350, 351, 352, 355,
	0, 357, 359, 0, 360, 363, 0, 364, 365, 366,
	367, 368, 369, 370, 371, 1247, 372, 0, 373, 374,
	376, 0, 379, 380, 381, 382, 383, 0, 384, 1256,
	1205, 385, 386, 388, 389, 390, 392, 393, 394, 395,
	396, 397, 398, 399, 400, 401, 402, 403, 0, 404,
	405, 406, 408, 0, 409, 410, 413, 414, 415, 416,
	0, 418, 1257, 0, 419, 420, 421, 1237, 1238, 422,
	423, 424, 425, 426, 427, 430, 1270, 432, 433, 434,
	435, 436, 437, 438, 668, 440, 441, 442, 443, 444,
	445, 4671, 630, 1248, 447, 449, 450, 1254, 634, 1249,
	897, 465, 466, 467, 468, 469, 470, 471, 473, 0,
	475, 476, 477, 1250, 478, 479, 480, 481, 0, 482,
	483, 484, 485, 486, 488, 491, 492, 493, 494, 0,
	497, 498, 499, 500, 501, 502, 503, 505, 506, 507,
	509, 510, 511, 669, 512, 513, 514, 515, 1208, 517,
	518, 670, 520, 521, 523, 524, 525, 526, 527, 528,
	679, 1241, 530, 640, 531, 532, 533, 534, 535, 0,
	537, 538, 539, 540, 541, 542, 545, 546, 547, 549,
	550, 1251, 551, 552, 1242, 554, 555, 900, 557, 558,
	559, 560, 561, 0, 680, 562, 1252, 563, 1253, 564,
	565, 566, 567, 568, 569, 570, 572, 0, 1192, 574,
	575, 576, 578, 579, 580, 581, 584, 585, 586, 587,
	588, 0, 589, 591, 593, 671, 648, 1258, 1259, 1262,
	1260, 1261, 1263, 1264, 1274, 594, 595, 611, 462, 456,
	412, 454, 455, 459, 460, 463, 0, 0, 0, 1246,
	0, 0, 0, 1190, 0, 939, 0, 1211, 766, 0,
	1216, 1217, 1206, 752, 1196, 0, 0, 0, 1197, 0,
	0, 1186, 1187, 288, 0, 305, 882, 0, 354, 391,
	1201, 0, 1189, 451, 0, 504, 508, 0, 597, 1221,
	0, 1193, 0, 362, 1214, 887, 0, 893, 1215, 899,
	1213, 573, 0, 889, 890, 895, 293, 1290, 596, 667,
	0, 0, 0, 1207, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 0, 0, 891, 888, 892, 898,
	886, 896, 883, 894, 0, 495, 429, 646, 522, 300,
	346, 333, 375, 417, 529, 0, 0, 407, 577, 342,
	431, 0, 321, 464, 1243, 553, 428, 0, 536, 556,
	0, 448, 327, 487, 543, 544, 880, 885, 0, 901,
	0, 331, 332, 453, 313, 461, 658, 624, 516, 474,
	472, 0, 439, 496, 653, 1202, 0, 361, 0, 356,
	452, 592, 319, 571, 490, 457, 411, 519, 548, 358,
	343, 344, 387, 489, 377, 329, 582, 1271, 1273, 1269,
	1265, 1266, 1231, 1232, 1272, 1268, 378, 1267, 0, 590,
	1276, 1287, 1284, 1289, 1275, 1288, 1282, 1007, 637, 1279,
	1278, 1292, 1285, 1286, 583, 1291, 1230, 1283, 1281, 1280,
	1277, 0, 278, 279, 280, 281, 282, 283, 284, 285,
	286, 287, 289, 0, 290, 291, 292, 294, 295, 296,
	879, 297, 298, 299, 302, 303, 304, 306, 666, 307,
	308, 309, 310, 311, 312, 1255, 1233, 314, 315, 316,
	317, 318, 320, 322, 323, 324, 325, 326, 328, 330,
	1244, 1234, 1239, 1245, 1235, 1236, 1240, 334, 335, 336,
	337, 338, 339, 0, 340, 341, 345, 347, 348, 349,
	350, 351, 352, 355, 0, 357, 359, 0, 360, 363,
	0, 364, 365, 366, 367, 368, 369, 370, 371, 1247,
	372, 0, 373, 374, 376, 0, 379, 380, 381, 382,
	383, 0, 384, 1256, 1205, 385, 386, 388, 389, 390,
	392, 393, 394, 395, 396, 397, 398, 399, 400, 401,
	402, 403, 0, 404, 405, 406, 408, 0, 409, 410,
	413, 414, 415, 416, 0, 418, 1257, 0, 419, 420,
	421, 1237, 1238, 422, 423, 424, 425, 426, 427, 430,
	1270, 432, 433, 434, 435, 436, 437, 438, 668, 440,
	441, 442, 443, 444, 445, 446, 630, 1248, 447, 449,
	450, 1254, 634, 1249, 897, 465, 466, 467, 468, 469,
	470, 471, 473, 0, 475, 476, 477, 1250, 478, 479,
	480, 481, 0, 482, 483, 484, 485, 486, 488, 491,
	492, 493, 494, 0, 497, 498, 499, 500, 501, 502,
	503, 505, 506, 507, 509, 510, 511, 669, 512, 513,
	514, 515, 1208, 517, 518, 670, 520, 521, 523, 524,
	525, 526, 527, 528, 679, 1241, 530, 640, 531, 532,
	533, 534, 535, 0, 537, 538, 539, 540, 541, 542,
	545, 546, 547, 549, 550, 1251, 551, 552, 1242, 554,
	555, 900, 557, 558, 559, 560, 561, 0, 680, 562,
	1252, 563, 1253, 564, 565, 566, 567, 568, 569, 570,
	572, 0, 1192, 574, 575, 576, 578, 579, 580, 581,
	584, 585, 586, 587, 588, 0, 589, 591, 593, 671,
	4658, 1258, 1259, 1262, 1260, 1261, 1263, 1264, 1274, 594,
	595, 611, 462, 456, 412, 454, 455, 459, 460, 463,
	0, 0, 0, 1246, 0, 0, 0, 1190, 0, 939,
	0, 1211, 766, 0, 1216, 1217, 1206, 752, 1196, 0,
	0, 0, 1197, 0, 0, 1186, 1187, 288, 0, 305,
	882, 0, 354, 391, 1201, 0, 1189, 451, 0, 504,
	508, 0, 597, 1221, 0, 1193, 0, 362, 1214, 887,
	0, 893, 1215, 899, 1213, 573, 0, 889, 890, 895,
	293, 1290, 596, 667, 0, 0, 0, 1207, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	891, 888, 892, 898, 886, 896, 883, 894, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 1243, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	880, 885, 0, 901, 0, 3776, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 1202,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 1271, 1273, 1269, 1265, 1266, 1231, 1232, 1272, 1268,
	378, 1267, 0, 590, 1276, 1287, 1284, 1289, 1275, 1288,
	1282, 1007, 637, 1279, 1278, 1292, 1285, 1286, 583, 1291,
	1230, 1283, 1281, 1280, 1277, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 879, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 1255,
	1233, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 1244, 1234, 1239, 1245, 1235, 1236,
	1240, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 1247, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 1256, 1205, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	1257, 0, 419, 420, 421, 1237, 1238, 422, 423, 424,
	425, 426, 427, 430, 1270, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 1248, 447, 449, 450, 1254, 634, 1249, 897, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 1250, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 1208, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 1241,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 1251,
	551, 552, 1242, 554, 555, 900, 557, 558, 559, 560,
	561, 0, 680, 562, 1252, 563, 1253, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 1192, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 1258, 1259, 1262, 1260, 1261,
	1263, 1264, 1274, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 0, 0, 0, 1246, 0, 0,
	0, 1190, 0, 939, 0, 2908, 766, 0, 1216, 1217,
	1206, 752, 1196, 0, 0, 0, 1197, 0, 0, 1186,
	1187, 288, 0, 305, 882, 0, 354, 391, 1201, 0,
	1189, 451, 0, 504, 508, 0, 597, 1221, 0, 1193,
	0, 362, 1214, 887, 0, 893, 1215, 899, 1213, 573,
	0, 889, 890, 895, 293, 1290, 596, 667, 0, 0,
	0, 1207, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 891, 888, 892, 898, 886, 896,
	883, 894, 0, 495, 429, 646, 522, 300, 346, 333,
	375, 417, 529, 0, 0, 407, 577, 342, 431, 0,
	321, 464, 1243, 553, 428, 0, 536, 556, 0, 448,
	327, 487, 543, 544, 880, 885, 0, 901, 0, 331,
	332, 453, 313, 461, 658, 624, 516, 474, 472, 0,
	439, 496, 653, 1202, 0, 361, 0, 356, 452, 592,
	319, 571, 490, 457, 411, 519, 548, 358, 343, 344,
	387, 489, 377, 329, 582, 1271, 1273, 1269, 1265, 1266,
	1231, 1232, 1272, 1268, 378, 1267, 0, 590, 1276, 1287,
	1284, 1289, 1275, 1288, 1282, 1007, 637, 1279, 1278, 1292,
	1285, 1286, 583, 1291, 1230, 1283, 1281, 1280, 1277, 0,
	278, 279, 280, 281, 282, 283, 284, 285, 286, 287,
	289, 0, 290, 291, 292, 294, 295, 296, 879, 297,
	298, 299, 302, 303, 304, 306, 666, 307, 308, 309,
	310, 311, 312, 1255, 1233, 314, 315, 316, 317, 318,
	320, 322, 323, 324, 325, 326, 328, 330, 1244, 1234,
	1239, 1245, 1235, 1236, 1240, 334, 335, 336, 337, 338,
	339, 0, 340, 341, 345, 347, 348, 349, 350, 351,
	352, 355, 0, 357, 359, 0, 360, 363, 0, 364,
	365, 366, 367, 368, 369, 370, 371, 1247, 372, 0,
	373, 374, 376, 0, 379, 380, 381, 382, 383, 0,
	384, 1256, 1205, 385, 386, 388, 389, 390, 392, 393,
	394, 395, 396, 397, 398, 399, 400, 401, 402, 403,
	0, 404, 405, 406, 408, 0, 409, 410, 413, 414,
	415, 416, 0, 418, 1257, 0, 419, 420, 421, 1237,
	1238, 422, 423, 424, 425, 426, 427, 430, 1270, 432,
	433, 434, 435, 436, 437, 438, 668, 440, 441, 442,
	443, 444, 445, 446, 630, 1248, 447, 449, 450, 1254,
	634, 1249, 897, 465, 466, 467, 468, 469, 470, 471,
	473, 0, 475, 476, 477, 1250, 478, 479, 480, 481,
	0, 482, 483, 484, 485, 486, 488, 491, 492, 493,
	494, 0, 497, 498, 499, 500, 501, 502, 503, 505,
	506, 507, 509, 510, 511, 669, 512, 513, 514, 515,
	1208, 517, 518, 670, 520, 521, 523, 524, 525, 526,
	527, 528, 679, 1241, 530, 640, 531, 532, 533, 534,
	535, 0, 537, 538, 539, 540, 541, 542, 545, 546,
	547, 549, 550, 1251, 551, 552, 1242, 554, 555, 900,
	557, 558, 559, 560, 561, 0, 680, 562, 1252, 563,
	1253, 564, 565, 566, 567, 568, 569, 570, 572, 0,
	1192, 574, 575, 576, 578, 579, 580, 581, 584, 585,
	586, 587, 588, 0, 589, 591, 593, 671, 648, 1258,
	1259, 1262, 1260, 1261, 1263, 1264, 1274, 594, 595, 611,
	462, 456, 412, 454, 455, 459, 460, 463, 0, 0,
	0, 1246, 0, 0, 0, 1190, 0, 939, 0, 1211,
	766, 0, 1216, 1217, 1206, 752, 1196, 0, 0, 0,
	1197, 0, 0, 1186, 1187, 288, 0, 305, 882, 0,
	354, 391, 1201, 0, 1189, 451, 0, 504, 508, 0,
	597, 1221, 0, 1193, 0, 362, 1214, 887, 0, 893,
	1215, 899, 1213, 573, 0, 889, 890, 895, 293, 1290,
	596, 667, 0, 0, 0, 1207, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 891, 888,
	892, 898, 886, 896, 883, 894, 0, 495, 429, 646,
	522, 300, 346, 333, 375, 417, 529, 0, 0, 407,
	577, 342, 431, 0, 321, 464, 1243, 553, 428, 0,
	536, 556, 0, 448, 327, 487, 543, 544, 880, 885,
	0, 901, 0, 331, 332, 453, 313, 461, 658, 624,
	516, 474, 472, 0, 439, 496, 653, 1202, 0, 361,
	0, 356, 452, 592, 319, 571, 490, 457, 411, 519,
	548, 358, 343, 344, 387, 489, 377, 329, 582, 1271,
	1273, 1269, 1265, 1266, 1231, 1232, 1272, 1268, 378, 1267,
	0, 590, 1276, 1287, 1284, 1289, 1275, 1288, 1282, 1007,
	637, 1279, 1278, 1292, 1285, 1286, 583, 1291, 1230, 1283,
	1281, 1280, 1277, 0, 278, 279, 280, 281, 282, 283,
	284, 285, 286, 287, 289, 0, 290, 291, 292, 294,
	295, 296, 879, 297, 298, 299, 302, 303, 304, 306,
	666, 307, 308, 309, 310, 311, 312, 1255, 1233, 314,
	315, 316, 317, 318, 320, 322, 323, 324, 325, 326,
	328, 330, 1244, 1234, 1239, 1245, 1235, 1236, 1240, 334,
	335, 336, 337, 338, 339, 0, 340, 341, 345, 347,
	348, 349, 350, 351, 352, 355, 0, 357, 359, 0,
	360, 363, 0, 364, 365, 366, 367, 368, 369, 370,
	371, 1247, 372, 0, 373, 374, 376, 0, 379, 380,
	381, 382, 383, 0, 384, 1256, 1205, 385, 386, 388,
	389, 390, 392, 393, 394, 395, 396, 397, 398, 399,
	400, 401, 402, 403, 0, 404, 405, 406, 408, 0,
	409, 410, 413, 414, 415, 416, 0, 418, 1257, 0,
	419, 420, 421, 1237, 1238, 422, 423, 424, 425, 426,
	427, 430, 1270, 432, 433, 434, 435, 436, 437, 438,
	668, 440, 441, 442, 443, 444, 445, 446, 630, 1248,
	447, 449, 450, 1254, 634, 1249, 897, 465, 466, 467,
	468, 469, 470, 471, 473, 0, 475, 476, 477, 1250,
	478, 479, 480, 481, 0, 482, 483, 484, 485, 486,
	488, 491, 492, 493, 494, 0, 497, 498, 499, 500,
	501, 502, 503, 505, 506, 507, 509, 510, 511, 669,
	512, 513, 514, 515, 1208, 517, 518, 670, 520, 521,
	523, 524, 525, 526, 527, 528, 679, 1241, 530, 640,
	531, 532, 533, 534, 535, 0, 537, 538, 539, 540,
	541, 542, 545, 546, 547, 549, 550, 1251, 551, 552,
	1242, 554, 555, 900, 557, 558, 559, 560, 561, 0,
	680, 562, 1252, 563, 1253, 564, 565, 566, 567, 568,
	569, 570, 572, 0, 1192, 574, 575, 576, 578, 579,
	580, 581, 584, 585, 586, 587, 588, 0, 589, 591,
	593, 671, 648, 1258, 1259, 1262, 1260, 1261, 1263, 1264,
	1274, 594, 595, 611, 462, 456, 412, 454, 455, 459,
	460, 463, 0, 0, 0, 1246, 0, 0, 0, 1190,
	0, 939, 0, 1211, 766, 0, 1216, 1217, 1206, 752,
	1196, 0, 0, 0, 1197, 0, 0, 1760, 1761, 288,
	0, 305, 882, 0, 354, 391, 1201, 0, 0, 451,
	0, 504, 508, 0, 597, 1221, 0, 4969, 0, 362,
	1214, 887, 0, 893, 1215, 899, 1213, 573, 0, 889,
	890, 895, 293, 1290, 596, 667, 0, 0, 0, 1207,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 891, 888, 892, 898, 886, 896, 883, 894,
	0, 495, 429, 646, 522, 300, 346, 333, 375, 417,
	529, 0, 0, 407, 577, 342, 431, 0, 321, 464,
	1243, 553, 428, 0, 536, 556, 0, 448, 327, 487,
	543, 544, 880, 885, 0, 901, 0, 331, 332, 453,
	313, 461, 658, 624, 516, 474, 472, 0, 439, 496,
	653, 1202, 0, 361, 0, 356, 452, 592, 319, 571,
	490, 457, 411, 519, 548, 358, 343, 344, 387, 489,
	377, 329, 582, 1271, 1273, 1269, 1265, 1266, 1231, 1232,
	1272, 1268, 378, 1267, 0, 590, 1276, 1287, 1284, 1289,
	1275, 1288, 1282, 1007, 637, 1279, 1278, 1292, 1285, 1286,
	583, 1291, 1230, 1283, 1281, 1280, 1277, 0, 278, 279,
	280, 281, 282, 283, 284, 285, 286, 287, 289, 0,
	290, 291, 292, 294, 295, 296, 879, 297, 298, 299,
	302, 303, 304, 306, 666, 307, 308, 309, 310, 311,
	312, 1255, 1233, 314, 315, 316, 317, 318, 320, 322,
	323, 324, 325, 326, 328, 330, 1244, 1234, 1239, 1245,
	1235, 1236, 1240, 334, 335, 336, 337, 338, 339, 0,
	340, 341, 345, 347, 348, 349, 350, 351, 352, 355,
	0, 357, 359, 0, 360, 363, 0, 364, 365, 366,
	367, 368, 369, 370, 371, 1247, 372, 0, 373, 374,
	376, 0, 379, 380, 381, 382, 383, 0, 384, 1256,
	1205, 385, 386, 388, 389, 390, 392, 393, 394, 395,
	396, 397, 398, 399, 400, 401, 402, 403, 0, 404,
	405, 406, 408, 0, 409, 410, 413, 414, 415, 416,
	0, 418, 1257, 0, 419, 420, 421, 1237, 1238, 422,
	423, 424, 425, 426, 427, 430, 1270, 432, 433, 434,
	435, 436, 437, 438, 668, 440, 441, 442, 443, 444,
	445, 446, 630, 1248, 447, 449, 450, 1254, 634, 1249,
	897, 465, 466, 467, 468, 469, 470, 471, 473, 0,
	475, 476, 477, 1250, 478, 479, 480, 481, 0, 482,
	483, 484, 485, 486, 488, 491, 492, 493, 494, 0,
	497, 498, 499, 500, 501, 502, 503, 505, 506, 507,
	509, 510, 511, 669, 512, 513, 514, 515, 3055, 517,
	518, 670, 520, 521, 523, 524, 525, 526, 527, 528,
	679, 1241, 530, 640, 531, 532, 533, 534, 535, 0,
	537, 538, 539, 540, 541, 542, 545, 546, 547, 549,
	550, 1251, 551, 552, 1242, 554, 555, 900, 557, 558,
	559, 560, 561, 0, 680, 562, 1252, 563, 1253, 564,
	565, 566, 567, 568, 569, 570, 572, 0, 0, 574,
	575, 576, 578, 579, 580, 581, 584, 585, 586, 587,
	588, 0, 589, 591, 593, 671, 648, 1258, 1259, 1262,
	1260, 1261, 1263, 1264, 1274, 594, 595, 611, 462, 456,
	412, 454, 455, 459, 460, 463, 0, 0, 0, 1246,
	0, 0, 0, 0, 0, 939, 0, 1211, 766, 0,
	1216, 1217, 1206, 752, 1196, 0, 0, 0, 2902, 0,
	0, 3052, 3053, 288, 0, 305, 882, 0, 354, 391,
	1201, 0, 0, 451, 0, 504, 508, 0, 597, 1221,
	0, 0, 0, 362, 1214, 887, 0, 893, 1215, 899,
	1213, 573, 0, 889, 890, 895, 293, 1290, 596, 667,
	0, 0, 0, 1207, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 0, 0, 891, 888, 892, 898,
	886, 896, 883, 894, 0, 495, 429, 646, 522, 300,
	346, 333, 375, 417, 529, 0, 0, 407, 577, 342,
	431, 0, 321, 464, 1243, 553, 428, 0, 536, 556,
	0, 448, 327, 487, 543, 544, 880, 885, 0, 901,
	0, 331, 332, 453, 313, 461, 658, 624, 516, 474,
	472, 0, 439, 496, 653, 1202, 0, 361, 0, 356,
	452, 592, 319, 571, 490, 457, 411, 519, 548, 358,
	343, 344, 387, 489, 377, 329, 582, 1271, 1273, 1269,
	1265, 1266, 1231, 1232, 1272, 1268, 378, 1267, 0, 590,
	1276, 1287, 1284, 1289, 1275, 1288, 1282, 1007, 637, 1279,
	1278, 1292, 1285, 1286, 583, 1291, 1230, 1283, 1281, 1280,
	1277, 0, 278, 279, 280, 281, 282, 283, 284, 285,
	286, 287, 289, 0, 290, 291, 292, 294, 295, 296,
	879, 297, 298, 299, 302, 303, 304, 306, 666, 307,
	308, 309, 310, 311, 312, 1255, 1233, 314, 315, 316,
	317, 318, 320, 322, 323, 324, 325, 326, 328, 330,
	1244, 1234, 1239, 1245, 1235, 1236, 1240, 334, 335, 336,
	337, 338, 339, 0, 340, 341, 345, 347, 348, 349,
	350, 351, 352, 355, 0, 357, 359, 0, 360, 363,
	0, 364, 365, 366, 367, 368, 369, 370, 371, 1247,
	372, 0, 373, 374, 376, 0, 379, 380, 381, 382,
	383, 0, 384, 1256, 1205, 385, 386, 388, 389, 390,
	392, 393, 394, 395, 396, 397, 398, 399, 400, 401,
	402, 403, 0, 404, 405, 406, 408, 0, 409, 410,
	413, 414, 415, 416, 0, 418, 1257, 0, 419, 420,
	421, 1237, 1238, 422, 423, 424, 425, 426, 427, 430,
	1270, 432, 433, 434, 435, 436, 437, 438, 668, 440,
	441, 442, 443, 444, 445, 446, 630, 1248, 447, 449,
	450, 1254, 634, 1249, 897, 465, 466, 467, 468, 469,
	470, 471, 473, 0, 475, 476, 477, 1250, 478, 479,
	480, 481, 0, 482, 483, 484, 485, 486, 488, 491,
	492, 493, 494, 0, 497, 498, 499, 500, 501, 502,
	503, 505, 506, 507, 509, 510, 511, 669, 512, 513,
	514, 515, 3055, 517, 518, 670, 520, 521, 523, 524,
	525, 526, 527, 528, 679, 1241, 530, 640, 531, 532,
	533, 534, 535, 0, 537, 538, 539, 540, 541, 542,
	545, 546, 547, 549, 550, 1251, 551, 552, 1242, 554,
	555, 900, 557, 558, 559, 560, 561, 0, 680, 562,
	1252, 563, 1253, 564, 565, 566, 567, 568, 569, 570,
	572, 0, 0, 574, 575, 576, 578, 579, 580, 581,
	584, 585, 586, 587, 588, 0, 589, 591, 593, 671,
	648, 1258, 1259, 1262, 1260, 1261, 1263, 1264, 1274, 594,
	595, 611, 462, 456, 412, 454, 455, 459, 460, 463,
	0, 0, 0, 1246, 0, 0, 0, 0, 0, 939,
	0, 1211, 766, 0, 1216, 1217, 0, 752, 1196, 0,
	0, 0, 2902, 0, 0, 3052, 3053, 288, 0, 305,
	882, 0, 354, 391, 1201, 0, 0, 451, 0, 504,
	508, 0, 597, 1221, 0, 0, 0, 362, 1214, 887,
	0, 893, 1215, 899, 1213, 573, 0, 889, 890, 895,
	293, 1290, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	891, 888, 892, 898, 886, 896, 883, 894, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 1243, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	880, 885, 0, 901, 0, 331, 332, 453, 313, 461,
	658, 624, 2901, 474, 472, 0, 439, 496, 653, 1202,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 1271, 1273, 1269, 1265, 1266, 1231, 1232, 1272, 1268,
	378, 1267, 0, 590, 1276, 1287, 1284, 1289, 1275, 1288,
	1282, 1007, 637, 1279, 1278, 1292, 1285, 1286, 583, 1291,
	1230, 1283, 1281, 1280, 1277, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 879, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 1255,
	1233, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 1244, 1234, 1239, 1245, 1235, 1236,
	1240, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 1247, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 1256, 1205, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	1257, 0, 419, 420, 421, 1237, 1238, 422, 423, 424,
	425, 426, 427, 430, 1270, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 1248, 447, 449, 450, 1254, 634, 1249, 897, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 1250, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 2900, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 1241,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 1251,
	551, 552, 1242, 554, 555, 900, 557, 558, 559, 560,
	561, 0, 680, 562, 1252, 563, 1253, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 1258, 1259, 1262, 1260, 1261,
	1263, 1264, 1274, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 0, 0, 0, 1246, 0, 0,
	0, 0, 0, 939, 0, 1211, 766, 0, 1216, 1217,
	1206, 752, 1196, 0, 0, 0, 2902, 0, 0, 2898,
	2899, 288, 0, 305, 882, 0, 354, 391, 1201, 0,
	1189, 451, 0, 504, 508, 0, 0, 1221, 0, 1193,
	0, 362, 1214, 0, 0, 0, 1215, 0, 1213, 573,
	0, 0, 0, 0, 293, 1290, 596, 667, 0, 0,
	0, 1207, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 891, 888, 892, 898, 886, 896,
	883, 894, 0, 495, 429, 646, 522, 300, 346, 333,
	375, 417, 529, 0, 0, 407, 577, 342, 431, 0,
	321, 464, 1243, 553, 428, 0, 536, 556, 0, 448,
	327, 487, 543, 544, 880, 885, 0, 901, 0, 5347,
	332, 453, 313, 461, 658, 624, 516, 474, 472, 0,
	439, 496, 653, 1202, 0, 361, 0, 356, 452, 592,
	319, 571, 490, 457, 411, 519, 548, 358, 343, 344,
	387, 489, 377, 329, 582, 1271, 1273, 1269, 1265, 1266,
	1231, 1232, 1272, 1268, 378, 1267, 0, 590, 1276, 1287,
	1284, 1289, 1275, 1288, 1282, 1007, 637, 1279, 1278, 1292,
	1285, 1286, 583, 1291, 1230, 1283, 1281, 1280, 1277, 0,
	278, 279, 280, 281, 282, 283, 284, 285, 286, 287,
	289, 0, 290, 291, 292, 294, 295, 296, 879, 297,
	298, 299, 302, 303, 304, 306, 666, 307, 308, 309,
	310, 311, 312, 1255, 1233, 314, 315, 316, 317, 318,
	320, 322, 323, 324, 325, 326, 328, 330, 1244, 1234,
	1239, 1245, 1235, 1236, 1240, 334, 335, 336, 337, 338,
	339, 0, 340, 341, 345, 347, 348, 349, 350, 351,
	352, 355, 0, 357, 359, 0, 360, 363, 0, 364,
	365, 366, 367, 368, 369, 370, 371, 1247, 372, 0,
	373, 374, 376, 0, 379, 380, 381, 382, 383, 0,
	384, 1256, 1205, 385, 386, 388, 389, 390, 392, 393,
	394, 395, 396, 397, 398, 399, 400, 401, 402, 403,
	0, 404, 405, 406, 408, 0, 409, 410, 413, 414,
	415, 416, 0, 418, 1257, 0, 419, 420, 421, 1237,
	1238, 422, 423, 424, 425, 426, 427, 430, 1270, 432,
	433, 434, 435, 436, 437, 438, 668, 440, 441, 442,
	443, 444, 445, 446, 630, 1248, 447, 449, 450, 1254,
	634, 1249, 897, 465, 466, 467, 468, 469, 470, 471,
	473, 0, 475, 476, 477, 1250, 478, 479, 480, 481,
	0, 482, 483, 484, 485, 486, 488, 491, 492, 493,
	494, 0, 497, 498, 499, 500, 501, 502, 503, 505,
	506, 507, 509, 510, 511, 669, 512, 513, 514, 515,
	1208, 517, 518, 670, 520, 521, 523, 524, 525, 526,
	527, 528, 679, 1241, 530, 640, 531, 532, 533, 534,
	535, 0, 537, 538, 539, 540, 541, 542, 545, 546,
	547, 549, 550, 1251, 551, 552, 1242, 554, 555, 900,
	557, 558, 559, 560, 561, 0, 680, 562, 1252, 563,
	1253, 564, 565, 566, 567, 568, 5346, 570, 572, 0,
	1192, 574, 575, 576, 578, 579, 580, 581, 584, 585,
	586, 587, 588, 0, 589, 591, 593, 671, 648, 1258,
	1259, 1262, 1260, 1261, 1263, 1264, 1274, 594, 595, 611,
	462, 456, 412, 454, 455, 459, 460, 463, 0, 0,
	0, 1246, 0, 0, 0, 0, 0, 939, 0, 1211,
	766, 0, 1216, 1217, 0, 752, 1196, 0, 0, 0,
	1197, 0, 0, 1186, 1187, 288, 0, 305, 882, 0,
	354, 391, 1201, 0, 0, 451, 0, 504, 508, 0,
	597, 1221, 0, 0, 0, 362, 1214, 887, 0, 893,
	1215, 899, 1213, 573, 0, 889, 890, 895, 293, 1290,
	596, 667, 0, 0, 0, 458, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 891, 888,
	892, 898, 886, 896, 883, 894, 0, 495, 429, 646,
	522, 300, 346, 333, 375, 417, 529, 0, 0, 407,
	577, 342, 431, 0, 321, 464, 1243, 553, 428, 0,
	536, 556, 0, 448, 327, 487, 543, 544, 880, 885,
	0, 901, 0, 331, 332, 453, 313, 461, 658, 624,
	516, 474, 472, 0, 439, 496, 653, 1202, 0, 361,
	0, 356, 452, 592, 319, 571, 490, 457, 411, 519,
	548, 358, 343, 344, 387, 489, 377, 329, 582, 1271,
	1273, 1269, 1265, 1266, 1231, 1232, 1272, 1268, 378, 1267,
	0, 590, 1276, 1287, 1284, 1289, 1275, 1288, 1282, 1007,
	637, 1279, 1278, 1292, 1285, 1286, 583, 1291, 1230, 1283,
	1281, 1280, 1277, 0, 278, 279, 280, 281, 282, 283,
	284, 285, 286, 287, 289, 0, 290, 291, 292, 294,
	295, 296, 879, 297, 298, 299, 302, 303, 304, 306,
	666, 307, 308, 309, 310, 311, 312, 1255, 1233, 314,
	315, 316, 317, 318, 320, 322, 323, 324, 325, 326,
	328, 330, 1244, 1234, 1239, 1245, 1235, 1236, 1240, 334,
	335, 336, 337, 338, 339, 0, 340, 341, 345, 347,
	348, 349, 350, 351, 352, 355, 0, 357, 359, 0,
	360, 363, 0, 364, 365, 366, 367, 368, 369, 370,
	371, 1247, 372, 0, 373, 374, 376, 0, 379, 380,
	381, 382, 383, 0, 384, 1256, 1205, 385, 386, 388,
	389, 390, 392, 393, 394, 395, 396, 397, 398, 399,
	400, 401, 402, 403, 0, 404, 405, 406, 408, 0,
	409, 410, 413, 414, 415, 416, 0, 418, 1257, 0,
	419, 420, 421, 1237, 1238, 422, 423, 424, 425, 426,
	427, 430, 1270, 432, 433, 434, 435, 436, 437, 438,
	668, 440, 441, 442, 443, 444, 445, 446, 630, 1248,
	447, 449, 450, 1254, 634, 1249, 897, 465, 466, 467,
	468, 469, 470, 471, 473, 0, 475, 476, 477, 1250,
	478, 479, 480, 481, 0, 482, 483, 484, 485, 486,
	488, 491, 492, 493, 494, 0, 497, 498, 499, 500,
	501, 502, 503, 505, 506, 507, 509, 510, 511, 669,
	512, 513, 514, 515, 3055, 517, 518, 670, 520, 521,
	523, 524, 525, 526, 527, 528, 679, 1241, 530, 640,
	531, 532, 533, 534, 535, 0, 537, 538, 539, 540,
	541, 542, 545, 546, 547, 549, 550, 1251, 551, 552,
	1242, 554, 555, 900, 557, 558, 559, 560, 561, 0,
	680, 562, 1252, 563, 1253, 564, 565, 566, 567, 568,
	569, 570, 572, 0, 0, 574, 575, 576, 578, 579,
	580, 581, 584, 585, 586, 587, 588, 0, 589, 591,
	593, 671, 648, 1258, 1259, 1262, 1260, 1261, 1263, 1264,
	1274, 594, 595, 611, 462, 456, 412, 454, 455, 459,
	460, 463, 0, 0, 0, 1246, 0, 939, 0, 1211,
	766, 0, 1216, 1217, 0, 752, 1196, 0, 0, 0,
	0, 0, 0, 0, 2902, 288, 0, 305, 882, 0,
	354, 391, 1201, 0, 0, 451, 0, 504, 508, 0,
	597, 1221, 0, 0, 0, 362, 1214, 887, 0, 893,
	1215, 899, 1213, 573, 0, 889, 890, 895, 293, 1290,
	596, 667, 0, 0, 0, 458, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 891, 888,
	892, 898, 886, 896, 883, 894, 0, 495, 429, 646,
	522, 300, 346, 333, 375, 417, 529, 0, 0, 407,
	577, 342, 431, 0, 321, 464, 1243, 553, 428, 0,
	536, 556, 0, 448, 327, 487, 543, 544, 880, 885,
	0, 901, 0, 331, 332, 453, 313, 461, 658, 624,
	516, 474, 472, 0, 439, 496, 4320, 1202, 0, 361,
	0, 356, 452, 592, 319, 571, 490, 457, 411, 519,
	548, 358, 343, 344, 387, 489, 377, 329, 582, 1271,
	1273, 1269, 1265, 1266, 1231, 1232, 1272, 1268, 378, 1267,
	0, 590, 1276, 1287, 1284, 1289, 1275, 1288, 1282, 1007,
	637, 1279, 1278, 1292, 1285, 1286, 583, 1291, 1230, 1283,
	1281, 1280, 1277, 0, 278, 279, 280, 281, 282, 283,
	284, 285, 286, 287, 289, 0, 290, 291, 292, 294,
	295, 296, 879, 297, 298, 299, 302, 303, 304, 306,
	666, 307, 308, 309, 310, 311, 312, 1255, 1233, 314,
	315, 316, 317, 318, 320, 322, 323, 324, 325, 326,
	328, 330, 1244, 1234, 1239, 1245, 1235, 1236, 1240, 334,
	335, 336, 337, 338, 339, 0, 340, 341, 345, 347,
	348, 349, 350, 351, 352, 355, 0, 357, 359, 0,
	360, 363, 0, 364, 365, 366, 367, 368, 369, 370,
	371, 1247, 372, 0, 373, 374, 376, 0, 379, 380,
	381, 382, 383, 0, 384, 1256, 1205, 385, 386, 388,
	389, 390, 392, 393, 394, 395, 396, 397, 398, 399,
	400, 401, 402, 403, 0, 404, 405, 406, 408, 0,
	409, 410, 413, 414, 415, 416, 0, 418, 1257, 0,
	419, 420, 421, 1237, 1238, 422, 423, 424, 425, 426,
	427, 430, 1270, 432, 433, 434, 435, 436, 437, 438,
	668, 440, 441, 442, 443, 444, 445, 446, 630, 1248,
	447, 449, 450, 1254, 634, 1249, 897, 465, 466, 467,
	468, 469, 470, 471, 473, 0, 475, 476, 477, 1250,
	478, 479, 480, 481, 0, 482, 483, 484, 485, 486,
	488, 491, 492, 493, 494, 0, 497, 498, 499, 500,
	501, 502, 503, 505, 506, 507, 509, 510, 511, 669,
	512, 513, 514, 515, 3055, 517, 518, 670, 520, 521,
	523, 524, 525, 526, 527, 528, 679, 1241, 530, 640,
	531, 532, 533, 534, 535, 0, 537, 538, 539, 540,
	541, 542, 545, 546, 547, 549, 550, 1251, 551, 552,
	1242, 554, 555, 900, 557, 558, 559, 560, 561, 0,
	680, 562, 1252, 563, 1253, 564, 565, 566, 567, 568,
	569, 570, 572, 0, 0, 574, 575, 576, 578, 579,
	580, 581, 584, 585, 586, 587, 588, 0, 589, 591,
	593, 671, 648, 1258, 1259, 1262, 1260, 1261, 1263, 1264,
	1274, 594, 595, 611, 462, 456, 412, 454, 455, 459,
	460, 463, 0, 0, 0, 1246, 0, 939, 0, 1211,
	766, 0, 1216, 1217, 0, 752, 1196, 0, 0, 0,
	0, 0, 0, 0, 2902, 288, 0, 305, 882, 0,
	354, 391, 1201, 0, 0, 451, 0, 504, 508, 0,
	597, 1221, 0, 0, 0, 362, 1214, 887, 0, 893,
	1215, 899, 1213, 573, 0, 889, 890, 895, 293, 1290,
	596, 667, 0, 0, 0, 458, 0, 0, 0, 0,
	0, 0, 0, 4261, 0, 0, 0, 0, 891, 888,
	892, 898, 886, 896, 883, 894, 0, 495, 429, 646,
	522, 300, 346, 333, 375, 417, 529, 0, 0, 407,
	577, 342, 431, 0, 321, 464, 1243, 553, 428, 0,
	536, 556, 0, 448, 327, 487, 543, 544, 880, 885,
	0, 901, 0, 331, 332, 453, 313, 461, 658, 624,
	516, 474, 472, 0, 439, 496, 653, 1202, 0, 361,
	0, 356, 452, 592, 319, 571, 490, 457, 411, 519,
	548, 358, 343, 344, 387, 489, 377, 329, 582, 1271,
	1273, 1269, 1265, 1266, 1231, 1232, 1272, 1268, 378, 1267,
	0, 590, 1276, 1287, 1284, 1289, 1275, 1288, 1282, 1007,
	637, 1279, 1278, 1292, 1285, 1286, 583, 1291, 1230, 1283,
	1281, 1280, 1277, 0, 278, 279, 280, 281, 282, 283,
	284, 285, 286, 287, 289, 0, 290, 291, 292, 294,
	295, 296, 879, 297, 298, 299, 302, 303, 304, 306,
	666, 307, 308, 309, 310, 311, 312, 1255, 1233, 314,
	315, 316, 317, 318, 320, 322, 323, 324, 325, 326,
	328, 330, 1244, 1234, 1239, 1245, 1235, 1236, 1240, 334,
	335, 336, 337, 338, 339, 0, 340, 341, 345, 347,
	348, 349, 350, 351, 352, 355, 0, 357, 359, 0,
	360, 363, 0, 364, 365, 366, 367, 368, 369, 370,
	371, 1247, 372, 0, 373, 374, 376, 0, 379, 380,
	381, 382, 383, 0, 384, 1256, 1205, 385, 386, 388,
	389, 390, 392, 393, 394, 395, 396, 397, 398, 399,
	400, 401, 402, 403, 0, 404, 405, 406, 408, 0,
	409, 410, 413, 414, 415, 416, 0, 418, 1257, 0,
	419, 420, 421, 1237, 1238, 422, 423, 424, 425, 426,
	427, 430, 1270, 432, 433, 434, 435, 436, 437, 438,
	668, 440, 441, 442, 443, 444, 445, 446, 630, 1248,
	447, 449, 450, 1254, 634, 1249, 897, 465, 466, 467,
	468, 469, 470, 471, 473, 0, 475, 476, 477, 1250,
	478, 479, 480, 481, 0, 482, 483, 484, 485, 486,
	488, 491, 492, 493, 494, 0, 497, 498, 499, 500,
	501, 502, 503, 505, 506, 507, 509, 510, 511, 669,
	512, 513, 514, 515, 3055, 517, 518, 670, 520, 521,
	523, 524, 525, 526, 527, 528, 679, 1241, 530, 640,
	531, 532, 533, 534, 535, 0, 537, 538, 539, 540,
	541, 542, 545, 546, 547, 549, 550, 1251, 551, 552,
	1242, 554, 555, 900, 557, 558, 559, 560, 561, 0,
	680, 562, 1252, 563, 1253, 564, 565, 566, 567, 568,
	569, 570, 572, 0, 0, 574, 575, 576, 578, 579,
	580, 581, 584, 585, 586, 587, 588, 0, 589, 591,
	593, 671, 648, 1258, 1259, 1262, 1260, 1261, 1263, 1264,
	1274, 594, 595, 611, 462, 456, 412, 454, 455, 459,
	460, 463, 939, 0, 0, 1246, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 0, 305, 882, 2902, 354, 391, 606, 0, 0,
	451, 0, 504, 508, 149, 597, 0, 0, 0, 0,
	362, 0, 887, 0, 893, 0, 899, 0, 573, 0,
	889, 890, 895, 293, 681, 596, 667, 0, 0, 0,
	458, 146, 0, 0, 790, 147, 0, 0, 301, 0,
	0, 0, 0, 891, 888, 892, 898, 886, 896, 883,
	894, 0, 495, 429, 1103, 522, 300, 346, 333, 375,
	417, 529, 0, 0, 407, 577, 342, 431, 0, 321,
	464, 1243, 553, 428, 0, 536, 556, 0, 448, 327,
	487, 543, 544, 880, 885, 0, 901, 0, 331, 332,
	453, 313, 461, 3143, 3144, 3142, 474, 472, 0, 439,
	496, 653, 0, 0, 361, 0, 356, 452, 592, 319,
	571, 490, 457, 411, 519, 548, 358, 343, 344, 387,
	489, 377, 329, 582, 1271, 1273, 1269, 1265, 1266, 1231,
	1232, 1272, 1268, 378, 3150, 0, 590, 599, 633, 613,
	641, 598, 638, 608, 353, 637, 602, 601, 647, 628,
	629, 583, 643, 614, 612, 605, 604, 600, 0, 278,
	279, 280, 281, 282, 283, 284, 285, 286, 287, 289,
	0, 290, 291, 292, 294, 295, 296, 879, 297, 298,
	299, 302, 303, 304, 306, 666, 307, 308, 309, 310,
	311, 312, 1255, 1233, 314, 315, 316, 317, 318, 320,
	322, 323, 324, 325, 326, 328, 330, 1244, 1234, 1239,
	1245, 1235, 1236, 1240, 334, 335, 336, 337, 338, 339,
	0, 340, 341, 345, 347, 348, 349, 350, 351, 352,
	355, 0, 357, 359, 0, 360, 363, 0, 364, 365,
	366, 367, 368, 369, 370, 371, 1247, 372, 0, 373,
	374, 376, 0, 379, 380, 381, 382, 383, 0, 384,
	1256, 610, 385, 386, 388, 389, 390, 392, 393, 394,
	395, 396, 397, 398, 399, 400, 401, 402, 403, 0,
	404, 405, 406, 408, 0, 409, 410, 413, 414, 415,
	416, 3135, 418, 1257, 0, 419, 420, 421, 1237, 1238,
	422, 423, 424, 425, 426, 427, 430, 1270, 432, 433,
	434, 435, 436, 437, 438, 668, 440, 441, 442, 443,
	444, 445, 446, 630, 1248, 447, 449, 450, 1254, 634,
	1249, 897, 465, 466, 467, 468, 469, 470, 471, 473,
	0, 475, 476, 477, 1250, 478, 479, 480, 481, 0,
	482, 483, 484, 485, 486, 488, 491, 492, 493, 494,
	0, 497, 498, 499, 500, 501, 502, 503, 505, 506,
	507, 509, 510, 511, 669, 512, 513, 514, 515, 639,
	517, 518, 670, 520, 521, 523, 524, 525, 526, 527,
	528, 679, 1241, 530, 640, 531, 532, 533, 534, 535,
	0, 537, 538, 539, 540, 541, 542, 545, 546, 547,
	549, 550, 1251, 551, 552, 1242, 554, 555, 900, 557,
	558, 559, 560, 561, 0, 680, 562, 1252, 563, 1253,
	564, 565, 566, 567, 568, 569, 570, 572, 0, 0,
	574, 575, 576, 578, 579, 580, 581, 584, 585, 586,
	587, 588, 0, 589, 591, 593, 671, 648, 1258, 1259,
	1262, 1260, 1261, 1263, 1264, 1274, 594, 595, 611, 462,
	456, 412, 454, 455, 459, 460, 463, 0, 0, 0,
	1246, 0, 875, 0, 1638, 766, 150, 0, 0, 0,
	752, 0, 0, 0, 0, 0, 0, 0, 0, 3137,
	288, 0, 305, 882, 0, 354, 391, 606, 0, 0,
	451, 0, 504, 508, 0, 597, 0, 0, 5223, 0,
	362, 1635, 887, 0, 893, 0, 899, 1634, 573, 0,
	889, 890, 895, 293, 681, 596, 667, 0, 0, 0,
	458, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 0, 1636, 891, 888, 892, 898, 886, 896, 883,
	894, 0, 495, 429, 646, 522, 300, 346, 333, 375,
	417, 529, 0, 0, 407, 577, 342, 431, 0, 321,
	464, 0, 553, 428, 0, 536, 556, 0, 448, 327,
	487, 543, 544, 880, 885, 0, 901, 0, 331, 332,
	453, 313, 461, 658, 624, 516, 474, 472, 0, 439,
	496, 653, 0, 0, 361, 0, 356, 452, 592, 319,
	571, 490, 457, 411, 519, 548, 358, 343, 344, 387,
	489, 377, 329, 582, 621, 625, 623, 619, 616, 620,
	617, 618, 622, 378, 615, 0, 590, 599, 633, 613,
	641, 598, 638, 608, 353, 637, 602, 601, 647, 628,
	629, 583, 643, 614, 612, 605, 604, 600, 0, 278,
	279, 280, 281, 282, 283, 284, 285, 286, 287, 289,
	0, 290, 291, 292, 294, 295, 296, 879, 297, 298,
	299, 302, 303, 304, 306, 666, 307, 308, 309, 310,
	311, 312, 603, 881, 314, 315, 316, 317, 318, 320,
	322, 323, 324, 325, 326, 328, 330, 0, 0, 0,
	884, 0, 0, 0, 334, 335, 336, 337, 338, 339,
	0, 340, 341, 345, 347, 348, 349, 350, 351, 352,
	355, 0, 357, 359, 0, 360, 363, 0, 364, 365,
	366, 367, 368, 369, 370, 371, 607, 372, 0, 373,
	374, 376, 0, 379, 380, 381, 382, 383, 0, 384,
	609, 610, 385, 386, 388, 389, 390, 392, 393, 394,
	395, 396, 397, 398, 399, 400, 401, 402, 403, 0,
	404, 405, 406, 408, 0, 409, 410, 413, 414, 415,
	416, 0, 418, 626, 0, 419, 420, 421, 0, 0,
	422, 423, 424, 425, 426, 427, 430, 627, 432, 433,
	434, 435, 436, 437, 438, 668, 440, 441, 442, 443,
	444, 445, 446, 630, 631, 447, 449, 450, 632, 634,
	635, 897, 465, 466, 467, 468, 469, 470, 471, 473,
	0, 475, 476, 477, 636, 478, 479, 480, 481, 0,
	482, 483, 484, 485, 486, 488, 491, 492, 493, 494,
	0, 497, 498, 499, 500, 501, 502, 503, 505, 506,
	507, 509, 510, 511, 669, 512, 513, 514, 515, 639,
	517, 518, 670, 520, 521, 523, 524, 525, 526, 527,
	528, 679, 0, 530, 640, 531, 532, 533, 534, 535,
	0, 537, 538, 539, 540, 541, 542, 545, 546, 547,
	549, 550, 642, 551, 552, 0, 554, 555, 900, 557,
	558, 559, 560, 561, 0, 680, 562, 644, 563, 645,
	564, 565, 566, 567, 568, 569, 570, 572, 0, 0,
	574, 575, 576, 578, 579, 580, 581, 584, 585, 586,
	587, 588, 0, 589, 591, 593, 671, 648, 649, 650,
	651, 652, 654, 655, 656, 657, 594, 595, 611, 462,
	456, 412, 454, 455, 459, 460, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 939, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 5224,
	0, 0, 1639, 1640, 5222, 288, 0, 305, 882, 0,
	354, 391, 606, 0, 0, 451, 0, 504, 508, 0,
	597, 0, 0, 0, 0, 362, 0, 887, 0, 893,
	0, 899, 0, 573, 0, 889, 890, 895, 293, 681,
	596, 667, 0, 0, 0, 458, 0, 0, 0, 790,
	0, 0, 0, 301, 0, 0, 0, 0, 891, 888,
	892, 898, 886, 896, 883, 894, 0, 495, 429, 646,
	522, 300, 346, 333, 375, 417, 529, 0, 0, 407,
	577, 342, 431, 0, 321, 464, 1243, 553, 428, 0,
	536, 556, 0, 448, 327, 487, 543, 544, 880, 885,
	0, 901, 0, 331, 332, 453, 313, 461, 3143, 3144,
	3142, 474, 472, 0, 439, 496, 653, 0, 0, 361,
	0, 356, 452, 592, 319, 571, 490, 457, 411, 519,
	548, 358, 343, 344, 387, 489, 377, 329, 582, 1271,
	1273, 1269, 1265, 1266, 1231, 1232, 1272, 1268, 378, 3150,
	0, 590, 599, 633, 613, 641, 598, 638, 608, 353,
	637, 602, 601, 647, 628, 629, 583, 643, 614, 612,
	605, 604, 600, 0, 278, 279, 280, 281, 282, 283,
	284, 285, 286, 287, 289, 0, 290, 291, 292, 294,
	295, 296, 879, 297, 298, 299, 302, 303, 304, 306,
	666, 307, 308, 309, 310, 311, 312, 1255, 1233, 314,
	315, 316, 317, 318, 320, 322, 323, 324, 325, 326,
	328, 330, 1244, 1234, 1239, 1245, 1235, 1236, 1240, 334,
	335, 336, 337, 338, 339, 0, 340, 341, 345, 347,
	348, 349, 350, 351, 352, 355, 0, 357, 359, 0,
	360, 363, 0, 364, 365, 366, 367, 368, 369, 370,
	371, 1247, 372, 0, 373, 374, 376, 0, 379, 380,
	381, 382, 383, 0, 384, 1256, 610, 385, 386, 388,
	389, 390, 392, 393, 394, 395, 396, 397, 398, 399,
	400, 401, 402, 403, 0, 404, 405, 406, 408, 0,
	409, 410, 413, 414, 415, 416, 3135, 418, 1257, 0,
	419, 420, 421, 1237, 1238, 422, 423, 424, 425, 426,
	427, 430, 1270, 432, 433, 434, 435, 436, 437, 438,
	668, 440, 441, 442, 443, 444, 445, 446, 630, 1248,
	447, 449, 450, 1254, 634, 1249, 897, 465, 466, 467,
	468, 469, 470, 471, 473, 0, 475, 476, 477, 1250,
	478, 479, 480, 481, 0, 482, 483, 484, 485, 486,
	488, 491, 492, 493, 494, 0, 497, 498, 499, 500,
	501, 502, 503, 505, 506, 507, 509, 510, 511, 669,
	512, 513, 514, 515, 639, 517, 518, 670, 520, 521,
	523, 524, 525, 526, 527, 528, 679, 1241, 530, 640,
	531, 532, 533, 534, 535, 0, 537, 538, 539, 540,
	541, 542, 545, 546, 547, 549, 550, 1251, 551, 552,
	1242, 554, 555, 900, 557, 558, 559, 560, 561, 0,
	680, 562, 1252, 563, 1253, 564, 565, 566, 567, 568,
	569, 570, 572, 0, 0, 574, 575, 576, 578, 579,
	580, 581, 584, 585, 586, 587, 588, 0, 589, 591,
	593, 671, 648, 1258, 1259, 1262, 1260, 1261, 1263, 1264,
	1274, 594, 595, 611, 462, 456, 412, 454, 455, 459,
	460, 463, 939, 0, 0, 1246, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 0, 305, 882, 3137, 354, 391, 606, 0, 0,
	451, 0, 504, 508, 0, 597, 0, 0, 0, 0,
	362, 0, 887, 0, 893, 0, 899, 0, 573, 0,
	889, 890, 895, 293, 681, 596, 667, 0, 0, 0,
	458, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 891, 888, 892, 898, 886, 896, 883,
	894, 0, 495, 429, 646, 522, 300, 346, 333, 375,
	417, 529, 0, 0, 407, 577, 342, 431, 0, 321,
	464, 1243, 553, 428, 0, 536, 556, 0, 448, 327,
	487, 543, 544, 880, 885, 0, 901, 0, 331, 332,
	453, 313, 461, 658, 624, 516, 474, 472, 0, 439,
	496, 653, 0, 0, 361, 0, 356, 452, 592, 319,
	571, 490, 457, 411, 519, 548, 358, 343, 344, 387,
	489, 377, 329, 582, 1271, 1273, 1269, 1265, 1266, 1231,
	1232, 1272, 1268, 378, 3150, 0, 590, 599, 633, 613,
	641, 598, 638, 608, 353, 637, 602, 601, 647, 628,
	629, 583, 643, 614, 612, 605, 604, 600, 0, 278,
	279, 280, 281, 282, 283, 284, 285, 286, 287, 289,
	0, 290, 291, 292, 294, 295, 296, 879, 297, 298,
	299, 302, 303, 304, 306, 666, 307, 308, 309, 310,
	311, 312, 1255, 1233, 314, 315, 316, 317, 318, 320,
	322, 323, 324, 325, 326, 328, 330, 1244, 1234, 1239,
	1245, 1235, 1236, 1240, 334, 335, 336, 337, 338, 339,
	0, 340, 341, 345, 347, 348, 349, 350, 351, 352,
	355, 0, 357, 359, 0, 360, 363, 0, 364, 365,
	366, 367, 368, 369, 370, 371, 1247, 372, 0, 373,
	374, 376, 0, 379, 380, 381, 382, 383, 0, 384,
	1256, 610, 385, 386, 388, 389, 390, 392, 393, 394,
	395, 396, 397, 398, 399, 400, 401, 402, 403, 0,
	404, 405, 406, 408, 0, 409, 410, 413, 414, 415,
	416, 0, 418, 1257, 0, 419, 420, 421, 1237, 1238,
	422, 423, 424, 425, 426, 427, 430, 1270, 432, 433,
	434, 435, 436, 437, 438, 668, 440, 441, 442, 443,
	444, 445, 446, 630, 1248, 447, 449, 450, 1254, 634,
	1249, 897, 465, 466, 467, 468, 469, 470, 471, 473,
	0, 475, 476, 477, 1250, 478, 479, 480, 481, 0,
	482, 483, 484, 485, 486, 488, 491, 492, 493, 494,
	0, 497, 498, 499, 500, 501, 502, 503, 505, 506,
	507, 509, 510, 511, 669, 512, 513, 514, 515, 639,
	517, 518, 670, 520, 521, 523, 524, 525, 526, 527,
	528, 679, 1241, 530, 640, 531, 532, 533, 534, 535,
	0, 537, 538, 539, 540, 541, 542, 545, 546, 547,
	549, 550, 1251, 551, 552, 1242, 554, 555, 900, 557,
	558, 559, 560, 561, 0, 680, 562, 1252, 563, 1253,
	564, 565, 566, 567, 568, 569, 570, 572, 0, 0,
	574, 575, 576, 578, 579, 580, 581, 584, 585, 586,
	587, 588, 0, 589, 591, 593, 671, 648, 1258, 1259,
	1262, 1260, 1261, 1263, 1264, 1274, 594, 595, 611, 462,
	456, 412, 454, 455, 459, 460, 463, 939, 0, 0,
	1246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 0, 305, 882, 4477,
	354, 391, 606, 0, 0, 451, 0, 504, 508, 0,
	597, 0, 0, 0, 0, 362, 0, 887, 0, 893,
	0, 899, 0, 573, 0, 889, 890, 895, 293, 681,
	596, 667, 0, 0, 0, 458, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 891, 888,
	892, 898, 886, 896, 883, 894, 0, 495, 429, 646,
	522, 300, 346, 333, 375, 417, 529, 0, 0, 407,
	577, 342, 431, 0, 321, 464, 1243, 553, 428, 0,
	536, 556, 0, 448, 327, 487, 543, 544, 880, 885,
	0, 901, 0, 331, 332, 453, 313, 461, 658, 624,
	516, 474, 472, 0, 439, 496, 653, 0, 0, 361,
	0, 356, 452, 592, 319, 571, 490, 457, 411, 519,
	548, 358, 343, 344, 387, 489, 377, 329, 582, 1271,
	1273, 1269, 1265, 1266, 1231, 1232, 1272, 1268, 378, 3150,
	0, 590, 599, 633, 613, 641, 598, 638, 608, 353,
	637, 602, 601, 647, 628, 629, 583, 643, 614, 612,
	605, 604, 600, 0, 278, 279, 280, 281, 282, 283,
	284, 285, 286, 287, 289, 0, 290, 291, 292, 294,
	295, 296, 879, 297, 298, 299, 302, 303, 304, 306,
	666, 307, 308, 309, 310, 311, 312, 1255, 1233, 314,
	315, 316, 317, 318, 320, 322, 323, 324, 325, 326,
	328, 330, 1244, 1234, 1239, 1245, 1235, 1236, 1240, 334,
	335, 336, 337, 338, 339, 0, 340, 341, 345, 347,
	348, 349, 350, 351, 352, 355, 0, 357, 359, 0,
	360, 363, 0, 364, 365, 366, 367, 368, 369, 370,
	371, 1247, 372, 0, 373, 374, 376, 0, 379, 380,
	381, 382, 383, 0, 384, 1256, 610, 385, 386, 388,
	389, 390, 392, 393, 394, 395, 396, 397, 398, 399,
	400, 401, 402, 403, 0, 404, 405, 406, 408, 0,
	409, 410, 413, 414, 415, 416, 0, 418, 1257, 0,
	419, 420, 421, 1237, 1238, 422, 423, 424, 425, 426,
	427, 430, 1270, 432, 433, 434, 435, 436, 437, 438,
	668, 440, 441, 442, 443, 444, 445, 446, 630, 1248,
	447, 449, 450, 1254, 634, 1249, 897, 465, 466, 467,
	468, 469, 470, 471, 473, 0, 475, 476, 477, 1250,
	478, 479, 480, 481, 0, 482, 483, 484, 485, 486,
	488, 491, 492, 493, 494, 0, 497, 498, 499, 500,
	501, 502, 503, 505, 506, 507, 509, 510, 511, 669,
	512, 513, 514, 515, 639, 517, 518, 670, 520, 521,
	523, 524, 525, 526, 527, 528, 679, 1241, 530, 640,
	531, 532, 533, 534, 535, 0, 537, 538, 539, 540,
	541, 542, 545, 546, 547, 549, 550, 1251, 551, 552,
	1242, 554, 555, 900, 557, 558, 559, 560, 561, 0,
	680, 562, 1252, 563, 1253, 564, 565, 566, 567, 568,
	569, 570, 572, 0, 0, 574, 575, 576, 578, 579,
	580, 581, 584, 585, 586, 587, 588, 0, 589, 591,
	593, 671, 648, 1258, 1259, 1262, 1260, 1261, 1263, 1264,
	1274, 594, 595, 611, 462, 456, 412, 454, 455, 459,
	460, 463, 939, 0, 0, 1246, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 0, 305, 882, 5413, 354, 391, 606, 0, 0,
	451, 0, 504, 508, 0, 597, 0, 0, 0, 0,
	362, 0, 887, 0, 893, 0, 899, 0, 573, 0,
	889, 890, 895, 293, 681, 596, 667, 0, 0, 0,
	458, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 891, 888, 892, 898, 886, 896, 883,
	894, 0, 495, 429, 646, 522, 300, 346, 333, 375,
	417, 529, 0, 0, 407, 577, 342, 431, 0, 321,
	464, 1243, 553, 428, 0, 536, 556, 0, 448, 327,
	487, 543, 544, 880, 885, 0, 901, 0, 331, 332,
	453, 313, 461, 658, 624, 516, 474, 472, 0, 439,
	496, 653, 0, 0, 361, 0, 356, 452, 592, 319,
	571, 490, 457, 411, 519, 548, 358, 343, 344, 387,
	489, 377, 329, 582, 1271, 1273, 1269, 1265, 1266, 1231,
	1232, 1272, 1268, 378, 3150, 0, 590, 599, 633, 613,
	641, 598, 638, 608, 353, 637, 602, 601, 647, 628,
	629, 583, 643, 614, 612, 605, 604, 600, 0, 278,
	279, 280, 281, 282, 283, 284, 285, 286, 287, 289,
	0, 290, 291, 292, 294, 295, 296, 879, 297, 298,
	299, 302, 303, 304, 306, 666, 307, 308, 309, 310,
	311, 312, 1255, 1233, 314, 315, 316, 317, 318, 320,
	322, 323, 324, 325, 326, 328, 330, 1244, 1234, 1239,
	1245, 1235, 1236, 1240, 334, 335, 336, 337, 338, 339,
	0, 340, 341, 345, 347, 348, 349, 350, 351, 352,
	355, 0, 357, 359, 0, 360, 363, 0, 364, 365,
	366, 367, 368, 369, 370, 371, 1247, 372, 0, 373,
	374, 376, 0, 379, 380, 381, 382, 383, 0, 384,
	1256, 610, 385, 386, 388, 389, 390, 392, 393, 394,
	395, 396, 397, 398, 399, 400, 401, 402, 403, 0,
	404, 405, 406, 408, 0, 409, 410, 413, 414, 415,
	416, 0, 418, 1257, 0, 419, 420, 421, 1237, 1238,
	422, 423, 424, 425, 426, 427, 430, 1270, 432, 433,
	434, 435, 436, 437, 438, 668, 440, 441, 442, 443,
	444, 445, 446, 630, 1248, 447, 449, 450, 1254, 634,
	1249, 897, 465, 466, 467, 468, 469, 470, 471, 473,
	0, 475, 476, 477, 1250, 478, 479, 480, 481, 0,
	482, 483, 484, 485, 486, 488, 491, 492, 493, 494,
	0, 497, 498, 499, 500, 501, 502, 503, 505, 506,
	507, 509, 510, 511, 669, 512, 513, 514, 515, 639,
	517, 518, 670, 520, 521, 523, 524, 525, 526, 527,
	528, 679, 1241, 530, 640, 531, 532, 533, 534, 535,
	0, 537, 538, 539, 540, 541, 542, 545, 546, 547,
	549, 550, 1251, 551, 552, 1242, 554, 555, 900, 557,
	558, 559, 560, 561, 0, 680, 562, 1252, 563, 1253,
	564, 565, 566, 567, 568, 569, 570, 572, 0, 0,
	574, 575, 576, 578, 579, 580, 581, 584, 585, 586,
	587, 588, 0, 589, 591, 593, 671, 648, 1258, 1259,
	1262, 1260, 1261, 1263, 1264, 1274, 594, 595, 611, 462,
	456, 412, 454, 455, 459, 460, 463, 939, 0, 0,
	1246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 0, 305, 882, 3280,
	354, 391, 606, 0, 0, 451, 0, 504, 508, 0,
	597, 0, 0, 0, 0, 362, 0, 887, 0, 893,
	0, 899, 0, 573, 0, 889, 890, 895, 293, 681,
	596, 667, 0, 0, 0, 458, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 891, 888,
	892, 898, 886, 896, 883, 894, 0, 495, 429, 646,
	522, 300, 346, 333, 375, 417, 529, 0, 0, 407,
	577, 342, 431, 0, 321, 464, 1243, 553, 428, 0,
	536, 556, 0, 448, 327, 487, 543, 544, 880, 885,
	0, 901, 0, 331, 332, 453, 313, 461, 3143, 3144,
	3142, 474, 472, 0, 439, 496, 653, 0, 0, 361,
	0, 356, 452, 592, 319, 571, 490, 457, 411, 519,
	548, 358, 343, 344, 387, 489, 377, 329, 582, 1271,
	1273, 1269, 1265, 1266, 1231, 1232, 1272, 1268, 378, 3150,
	0, 590, 599, 633, 613, 641, 598, 638, 608, 353,
	637, 602, 601, 647, 628, 629, 583, 643, 614, 612,
	605, 604, 600, 0, 278, 279, 280, 281, 282, 283,
	284, 285, 286, 287, 289, 0, 290, 291, 292, 294,
	295, 296, 879, 297, 298, 299, 302, 303, 304, 306,
	666, 307, 308, 309, 310, 311, 312, 1255, 1233, 314,
	315, 316, 317, 318, 320, 322, 323, 324, 325, 326,
	328, 330, 1244, 1234, 1239, 1245, 1235, 1236, 1240, 334,
	335, 336, 337, 338, 339, 0, 340, 341, 345, 347,
	348, 349, 350, 351, 352, 355, 0, 357, 359, 0,
	360, 363, 0, 364, 365, 366, 367, 368, 369, 370,
	371, 1247, 372, 0, 373, 374, 376, 0, 379, 380,
	381, 382, 383, 0, 384, 1256, 610, 385, 386, 388,
	389, 390, 392, 393, 394, 395, 396, 397, 398, 399,
	400, 401, 402, 403, 0, 404, 405, 406, 408, 0,
	409, 410, 413, 414, 415, 416, 0, 418, 1257, 0,
	419, 420, 421, 1237, 1238, 422, 423, 424, 425, 426,
	427, 430, 1270, 432, 433, 434, 435, 436, 437, 438,
	668, 440, 441, 442, 443, 444, 445, 446, 630, 1248,
	447, 449, 450, 1254, 634, 1249, 897, 465, 466, 467,
	468, 469, 470, 471, 473, 0, 475, 476, 477, 1250,
	478, 479, 480, 481, 0, 482, 483, 484, 485, 486,
	488, 491, 492, 493, 494, 0, 497, 498, 499, 500,
	501, 502, 503, 505, 506, 507, 509, 510, 511, 669,
	512, 513, 514, 515, 639, 517, 518, 670, 520, 521,
	523, 524, 525, 526, 527, 528, 679, 1241, 530, 640,
	531, 532, 533, 534, 535, 0, 537, 538, 539, 540,
	541, 542, 545, 546, 547, 549, 550, 1251, 551, 552,
	1242, 554, 555, 900, 557, 558, 559, 560, 561, 0,
	680, 562, 1252, 563, 1253, 564, 565, 566, 567, 568,
	569, 570, 572, 0, 0, 574, 575, 576, 578, 579,
	580, 581, 584, 585, 586, 587, 588, 0, 589, 591,
	593, 671, 648, 1258, 1259, 1262, 1260, 1261, 1263, 1264,
	1274, 594, 595, 611, 462, 456, 412, 454, 455, 459,
	460, 463, 0, 0, 0, 1246, 0, 875, 0, 1638,
	766, 0, 0, 0, 0, 752, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 288, 0, 305, 882, 0,
	354, 391, 606, 0, 0, 451, 0, 504, 508, 0,
	597, 0, 0, 1643, 0, 362, 1635, 887, 0, 893,
	0, 899, 1634, 573, 0, 889, 890, 895, 293, 681,
	596, 667, 0, 0, 0, 458, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 0, 1636, 891, 888,
	892, 898, 886, 896, 883, 894, 0, 495, 429, 646,
	522, 300, 346, 333, 375, 417, 529, 0, 0, 407,
	577, 342, 431, 0, 321, 464, 0, 553, 428, 0,
	536, 556, 0, 448, 327, 487, 543, 544, 880, 885,
	0, 901, 0, 331, 332, 453, 313, 461, 658, 624,
	516, 474, 472, 0, 439, 496, 653, 0, 0, 361,
	0, 356, 452, 592, 319, 571, 490, 457, 411, 519,
	548, 358, 343, 344, 387, 489, 377, 329, 582, 621,
	625, 623, 619, 616, 620, 617, 618, 622, 378, 615,
	0, 590, 599, 633, 613, 641, 598, 638, 608, 353,
	637, 602, 601, 647, 628, 629, 583, 643, 614, 612,
	605, 604, 600, 0, 278, 279, 280, 281, 282, 283,
	284, 285, 286, 287, 289, 0, 290, 291, 292, 294,
	295, 296, 879, 297, 298, 299, 302, 303, 304, 306,
	666, 307, 308, 309, 310, 311, 312, 603, 881, 314,
	315, 316, 317, 318, 320, 322, 323, 324, 325, 326,
	328, 330, 0, 0, 0, 884, 0, 0, 0, 334,
	335, 336, 337, 338, 339, 0, 340, 341, 345, 347,
	348, 349, 350, 351, 352, 355, 0, 357, 359, 0,
	360, 363, 0, 364, 365, 366, 367, 368, 369, 370,
	371, 607, 372, 0, 373, 374, 376, 0, 379, 380,
	381, 382, 383, 0, 384, 609, 610, 385, 386, 388,
	389, 390, 392, 393, 394, 395, 396, 397, 398, 399,
	400, 401, 402, 403, 0, 404, 405, 406, 408, 0,
	409, 410, 413, 414, 415, 416, 0, 418, 626, 0,
	419, 420, 421, 0, 0, 422, 423, 424, 425, 426,
	427, 430, 627, 432, 433, 434, 435, 436, 437, 438,
	668, 440, 441, 442, 443, 444, 445, 446, 630, 631,
	447, 449, 450, 632, 634, 635, 897, 465, 466, 467,
	468, 469, 470, 471, 473, 0, 475, 476, 477, 636,
	478, 479, 480, 481, 0, 482, 483, 484, 485, 486,
	488, 491, 492, 493, 494, 0, 497, 498, 499, 500,
	501, 502, 503, 505, 506, 507, 509, 510, 511, 669,
	512, 513, 514, 515, 639, 517, 518, 670, 520, 521,
	523, 524, 525, 526, 527, 528, 679, 0, 530, 640,
	531, 532, 533, 534, 535, 0, 537, 538, 539, 540,
	541, 542, 545, 546, 547, 549, 550, 642, 551, 552,
	0, 554, 555, 900, 557, 558, 559, 560, 561, 0,
	680, 562, 644, 563, 645, 564, 565, 566, 567, 568,
	569, 570, 572, 0, 0, 574, 575, 576, 578, 579,
	580, 581, 584, 585, 586, 587, 588, 0, 589, 591,
	593, 671, 648, 649, 650, 651, 652, 654, 655, 656,
	657, 594, 595, 611, 462, 456, 412, 454, 455, 459,
	460, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 1638, 766, 0, 0, 0, 0, 752,
	0, 0, 0, 0, 0, 0, 0, 1639, 1640, 288,
	0, 305, 882, 0, 354, 391, 606, 0, 0, 451,
	0, 504, 508, 0, 597, 0, 0, 1630, 0, 362,
	1635, 887, 0, 893, 0, 899, 1634, 573, 0, 889,
	890, 895, 293, 681, 596, 667, 0, 0, 0, 458,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 1636, 891, 888, 892, 898, 886, 896, 883, 894,
	0, 495, 429, 646, 522, 300, 346, 333, 375, 417,
	529, 0, 0, 407, 577, 342, 431, 0, 321, 464,
	0, 553, 428, 0, 536, 556, 0, 448, 327, 487,
	543, 544, 880, 885, 0, 901, 0, 331, 332, 453,
	313, 461, 658, 624, 516, 474, 472, 0, 439, 496,
	653, 0, 0, 361, 0, 356, 452, 592, 319, 571,
	490, 457, 411, 519, 548, 358, 343, 344, 387, 489,
	377, 329, 582, 621, 625, 623, 619, 616, 620, 617,
	618, 622, 378, 615, 0, 590, 599, 633, 613, 641,
	598, 638, 608, 353, 637, 602, 601, 647, 628, 629,
	583, 643, 614, 612, 605, 604, 600, 0, 278, 279,
	280, 281, 282, 283, 284, 285, 286, 287, 289, 0,
	290, 291, 292, 294, 295, 296, 879, 297, 298, 299,
	302, 303, 304, 306, 666, 307, 308, 309, 310, 311,
	312, 603, 881, 314, 315, 316, 317, 318, 320, 322,
	323, 324, 325, 326, 328, 330, 0, 0, 0, 884,
	0, 0, 0, 334, 335, 336, 337, 338, 339, 0,
	340, 341, 345, 347, 348, 349, 350, 351, 352, 355,
	0, 357, 359, 0, 360, 363, 0, 364, 365, 366,
	367, 368, 369, 370, 371, 607, 372, 0, 373, 374,
	376, 0, 379, 380, 381, 382, 383, 0, 384, 609,
	610, 385, 386, 388, 389, 390, 392, 393, 394, 395,
	396, 397, 398, 399, 400, 401, 402, 403, 0, 404,
	405, 406, 408, 0, 409, 410, 413, 414, 415, 416,
	0, 418, 626, 0, 419, 420, 421, 0, 0, 422,
	423, 424, 425, 426, 427, 430, 627, 432, 433, 434,
	435, 436, 437, 438, 668, 440, 441, 442, 443, 444,
	445, 446, 630, 631, 447, 449, 450, 632, 634, 635,
	897, 465, 466, 467, 468, 469, 470, 471, 473, 0,
	475, 476, 477, 636, 478, 479, 480, 481, 0, 482,
	483, 484, 485, 486, 488, 491, 492, 493, 494, 0,
	497, 498, 499, 500, 501, 502, 503, 505, 506, 507,
	509, 510, 511, 669, 512, 513, 514, 515, 639, 517,
	518, 670, 520, 521, 523, 524, 525, 526, 527, 528,
	679, 0, 530, 640, 531, 532, 533, 534, 535, 0,
	537, 538, 539, 540, 541, 542, 545, 546, 547, 549,
	550, 642, 551, 552, 0, 554, 555, 900, 557, 558,
	559, 560, 561, 0, 680, 562, 644, 563, 645, 564,
	565, 566, 567, 568, 569, 570, 572, 0, 0, 574,
	575, 576, 578, 579, 580, 581, 584, 585, 586, 587,
	588, 0, 589, 591, 593, 671, 648, 649, 650, 651,
	652, 654, 655, 656, 657, 594, 595, 611, 462, 456,
	412, 454, 455, 459, 460, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 875, 0, 1638, 766, 0,
	0, 0, 0, 752, 0, 0, 0, 0, 0, 0,
	0, 1639, 1640, 288, 0, 305, 882, 0, 354, 391,
	606, 0, 0, 451, 0, 504, 508, 0, 597, 0,
	0, 0, 0, 362, 1635, 887, 0, 893, 0, 899,
	1634, 573, 0, 889, 890, 895, 293, 681, 596, 667,
	0, 0, 0, 458, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 0, 1636, 891, 888, 892, 898,
	886, 896, 883, 894, 0, 495, 429, 646, 522, 300,
	346, 333, 375, 417, 529, 0, 0, 407, 577, 342,
	431, 0, 321, 464, 0, 553, 428, 0, 536, 556,
	0, 448, 327, 487, 543, 544, 880, 885, 0, 901,
	0, 331, 332, 453, 313, 461, 658, 624, 516, 474,
	472, 0, 439, 496, 653, 0, 0, 361, 0, 356,
	452, 592, 319, 571, 490, 457, 411, 519, 548, 358,
	343, 344, 387, 489, 377, 329, 582, 621, 625, 623,
	619, 616, 620, 617, 618, 622, 378, 615, 0, 590,
	599, 633, 613, 641, 598, 638, 608, 353, 637, 602,
	601, 647, 628, 629, 583, 643, 614, 612, 605, 604,
	600, 0, 278, 279, 280, 281, 282, 283, 284, 285,
	286, 287, 289, 0, 290, 291, 292, 294, 295, 296,
	879, 297, 298, 299, 302, 303, 304, 306, 666, 307,
	308, 309, 310, 311, 312, 603, 881, 314, 315, 316,
	317, 318, 320, 322, 323, 324, 325, 326, 328, 330,
	0, 0, 0, 884, 0, 0, 0, 334, 335, 336,
	337, 338, 339, 0, 340, 341, 345, 347, 348, 349,
	350, 351, 352, 355, 0, 357, 359, 0, 360, 363,
	0, 364, 365, 366, 367, 368, 369, 370, 371, 607,
	372, 0, 373, 374, 376, 0, 379, 380, 381, 382,
	383, 0, 384, 609, 610, 385, 386, 388, 389, 390,
	392, 393, 394, 395, 396, 397, 398, 399, 400, 401,
	402, 403, 0, 404, 405, 406, 408, 0, 409, 410,
	413, 414, 415, 416, 0, 418, 626, 0, 419, 420,
	421, 0, 0, 422, 423, 424, 425, 426, 427, 430,
	627, 432, 433, 434, 435, 436, 437, 438, 668, 440,
	441, 442, 443, 444, 445, 446, 630, 631, 447, 449,
	450, 632, 634, 635, 897, 465, 466, 467, 468, 469,
	470, 471, 473, 0, 475, 476, 477, 636, 478, 479,
	480, 481, 0, 482, 483, 484, 485, 486, 488, 491,
	492, 493, 494, 0, 497, 498, 499, 500, 501, 502,
	503, 505, 506, 507, 509, 510, 511, 669, 512, 513,
	514, 515, 639, 517, 518, 670, 520, 521, 523, 524,
	525, 526, 527, 528, 679, 0, 530, 640, 531, 532,
	533, 534, 535, 0, 537, 538, 539, 540, 541, 542,
	545, 546, 547, 549, 550, 642, 551, 552, 0, 554,
	555, 900, 557, 558, 559, 560, 561, 0, 680, 562,
	644, 563, 645, 564, 565, 566, 567, 568, 569, 570,
	572, 0, 0, 574, 575, 576, 578, 579, 580, 581,
	584, 585, 586, 587, 588, 0, 589, 591, 593, 671,
	648, 649, 650, 651, 652, 654, 655, 656, 657, 594,
	595, 611, 462, 456, 412, 454, 455, 459, 460, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 875,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1639, 1640, 288, 0, 305,
	882, 0, 354, 391, 606, 0, 0, 451, 0, 504,
	508, 149, 597, 0, 0, 0, 0, 362, 0, 887,
	0, 893, 0, 899, 0, 573, 0, 889, 890, 895,
	293, 681, 596, 667, 0, 0, 0, 458, 146, 0,
	0, 0, 147, 0, 0, 301, 0, 0, 0, 0,
	891, 888, 892, 898, 886, 896, 883, 894, 0, 495,
	429, 1103, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	880, 885, 0, 901, 144, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 145, 290, 291,
	292, 294, 295, 296, 879, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	881, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 884, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 897, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 900, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 939, 0, 0, 0, 0, 0,
	1106, 0, 0, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 882, 143, 354, 391, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 887, 0, 893, 0, 899, 0,
	573, 0, 889, 890, 895, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 891, 888, 892, 898, 886,
	896, 883, 894, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 880, 885, 0, 901, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 879,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 881, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 884, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 897, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	900, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 844, 0, 0, 0,
	0, 0, 0, 855, 856, 857, 0, 288, 0, 305,
	0, 5125, 354, 391, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	852, 853, 854, 0, 0, 0, 0, 0, 275, 846,
	847, 848, 849, 850, 851, 844, 0, 0, 0, 0,
	0, 0, 855, 856, 857, 0, 288, 0, 305, 0,
	0, 354, 391, 606, 0, 0, 451, 0, 504, 508,
	0, 597, 0, 0, 0, 0, 362, 0, 0, 0,
	0, 0, 0, 0, 573, 0, 0, 0, 0, 293,
	681, 596, 667, 0, 0, 0, 5099, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 495, 429,
	646, 522, 300, 346, 333, 375, 417, 529, 0, 0,
	407, 577, 342, 431, 0, 321, 464, 0, 553, 428,
	0, 536, 556, 0, 448, 327, 487, 543, 544, 0,
	0, 0, 0, 0, 331, 332, 453, 313, 461, 658,
	624, 516, 474, 472, 0, 439, 496, 653, 0, 0,
	361, 0, 356, 452, 592, 319, 571, 490, 457, 411,
	519, 548, 358, 343, 344, 387, 489, 377, 329, 582,
	621, 625, 623, 619, 616, 620, 617, 618, 622, 378,
	615, 0, 590, 599, 633, 613, 641, 598, 638, 608,
	353, 637, 602, 601, 647, 628, 629, 583, 643, 614,
	612, 605, 604, 600, 0, 278, 279, 280, 281, 282,
	283, 284, 285, 286, 287, 289, 0, 290, 291, 292,
	294, 295, 296, 0, 297, 298, 299, 302, 303, 304,
	306, 666, 307, 308, 309, 310, 311, 312, 603, 0,
	314, 315, 316, 317, 318, 320, 322, 323, 324, 325,
	326, 328, 330, 0, 0, 0, 0, 0, 0, 0,
	334, 335, 336, 337, 338, 339, 0, 340, 341, 345,
	347, 348, 349, 350, 351, 352, 355, 0, 357, 359,
	0, 360, 363, 0, 364, 365, 366, 367, 368, 369,
	370, 371, 607, 372, 0, 373, 374, 376, 0, 379,
	380, 381, 382, 383, 0, 384, 609, 610, 385, 386,
	388, 389, 390, 392, 393, 394, 395, 396, 397, 398,
	399, 400, 401, 402, 403, 0, 404, 405, 406, 408,
	0, 409, 410, 413, 414, 415, 416, 0, 418, 626,
	0, 419, 420, 421, 0, 0, 422, 423, 424, 425,
	426, 427, 430, 627, 432, 433, 434, 435, 436, 437,
	438, 668, 440, 441, 442, 443, 444, 445, 446, 630,
	631, 447, 449, 450, 632, 634, 635, 0, 465, 466,
	467, 468, 469, 470, 471, 473, 0, 475, 476, 477,
	636, 478, 479, 480, 481, 0, 482, 483, 484, 485,
	486, 488, 491, 492, 493, 494, 0, 497, 498, 499,
	500, 501, 502, 503, 505, 506, 507, 509, 510, 511,
	669, 512, 513, 514, 515, 639, 517, 518, 670, 520,
	521, 523, 524, 525, 526, 527, 528, 679, 0, 530,
	640, 531, 532, 533, 534, 535, 0, 537, 538, 539,
	540, 541, 542, 545, 546, 547, 549, 550, 642, 551,
	552, 0, 554, 555, 0, 557, 558, 559, 560, 561,
	0, 680, 562, 644, 563, 645, 564, 565, 566, 567,
	568, 569, 570, 572, 0, 0, 574, 575, 576, 578,
	579, 580, 581, 584, 585, 586, 587, 588, 0, 589,
	591, 593, 671, 648, 649, 650, 651, 652, 654, 655,
	656, 657, 594, 595, 611, 462, 456, 412, 454, 455,
	459, 460, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 852,
	853, 854, 0, 0, 0, 0, 0, 275, 846, 847,
	848, 849, 850, 851, 844, 0, 0, 0, 0, 0,
	0, 855, 856, 857, 0, 288, 0, 305, 0, 0,
	354, 391, 606, 0, 0, 451, 0, 504, 508, 0,
	597, 0, 0, 0, 0, 362, 0, 0, 0, 0,
	0, 0, 0, 573, 0, 0, 0, 0, 293, 681,
	596, 667, 0, 0, 0, 458, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 495, 429, 646,
	522, 300, 346, 333, 375, 417, 529, 0, 0, 407,
	577, 342, 431, 0, 321, 464, 0, 553, 428, 0,
	536, 556, 0, 448, 327, 487, 543, 544, 0, 0,
	0, 0, 0, 331, 332, 453, 313, 461, 658, 624,
	516, 474, 472, 0, 439, 496, 653, 0, 0, 361,
	0, 356, 452, 592, 319, 571, 490, 457, 411, 519,
	548, 358, 343, 344, 387, 489, 377, 329, 582, 621,
	625, 623, 619, 616, 620, 617, 618, 622, 378, 615,
	0, 590, 599, 633, 613, 641, 598, 638, 608, 353,
	637, 602, 601, 647, 628, 629, 583, 643, 614, 612,
	605, 604, 600, 0, 278, 279, 280, 281, 282, 283,
	284, 285, 286, 287, 289, 0, 290, 291, 292, 294,
	295, 296, 0, 297, 298, 299, 302, 303, 304, 306,
	666, 307, 308, 309, 3486, 311, 312, 603, 0, 314,
	315, 316, 317, 318, 320, 322, 323, 324, 325, 326,
	328, 330, 0, 0, 0, 0, 0, 0, 0, 334,
	335, 336, 337, 338, 339, 0, 340, 341, 345, 347,
	348, 349, 350, 351, 352, 355, 0, 357, 359, 0,
	360, 363, 0, 364, 365, 366, 367, 368, 369, 370,
	371, 607, 3487, 0, 373, 374, 376, 0, 379, 380,
	381, 382, 383, 0, 384, 609, 610, 385, 386, 388,
	389, 390, 392, 393, 394, 395, 396, 397, 398, 399,
	400, 401, 402, 403, 0, 404, 405, 406, 408, 0,
	409, 410, 413, 414, 415, 416, 0, 418, 626, 0,
	419, 420, 421, 0, 0, 422, 423, 424, 425, 426,
	427, 430, 627, 432, 433, 434, 435, 436, 437, 438,
	668, 440, 441, 442, 443, 444, 445, 446, 630, 631,
	447, 449, 450, 632, 634, 635, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 0, 475, 476, 477, 636,
	478, 479, 480, 481, 0, 482, 483, 484, 485, 486,
	488, 491, 492, 493, 494, 0, 497, 498, 499, 500,
	501, 502, 503, 505, 506, 507, 509, 510, 511, 669,
	512, 513, 514, 515, 639, 517, 518, 670, 520, 521,
	523, 524, 525, 526, 527, 528, 679, 0, 530, 640,
	531, 532, 533, 534, 535, 0, 537, 538, 539, 540,
	541, 542, 545, 546, 547, 549, 550, 642, 551, 552,
	0, 554, 555, 0, 557, 558, 559, 560, 561, 0,
	680, 562, 644, 563, 645, 564, 565, 566, 567, 568,
	569, 570, 572, 0, 0, 574, 575, 576, 578, 579,
	580, 581, 584, 585, 586, 587, 588, 0, 589, 591,
	593, 671, 648, 649, 650, 651, 652, 654, 655, 656,
	657, 594, 595, 611, 462, 456, 412, 454, 455, 459,
	460, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 852, 853,
	854, 0, 0, 0, 0, 0, 275, 846, 847, 848,
	849, 850, 851, 844, 0, 0, 0, 0, 0, 0,
	855, 856, 857, 0, 288, 0, 305, 0, 0, 354,
	391, 606, 0, 0, 451, 0, 504, 508, 0, 597,
	0, 0, 0, 0, 362, 0, 0, 0, 0, 0,
	0, 0, 573, 0, 0, 0, 0, 293, 681, 596,
	667, 0, 0, 0, 458, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 495, 429, 646, 522,
	300, 346, 333, 375, 417, 529, 0, 0, 407, 577,
	342, 431, 0, 321, 464, 0, 553, 428, 0, 536,
	556, 0, 448, 327, 487, 543, 544, 0, 0, 0,
	0, 0, 331, 332, 453, 313, 461, 658, 624, 516,
	474, 472, 0, 439, 496, 653, 0, 0, 361, 0,
	356, 452, 592, 319, 571, 490, 457, 411, 519, 548,
	358, 343, 344, 387, 489, 377, 329, 582, 621, 625,
	623, 619, 616, 620, 617, 618, 622, 378, 615, 0,
	590, 599, 633, 613, 641, 598, 638, 608, 353, 637,
	602, 601, 647, 628, 629, 583, 643, 614, 612, 605,
	604, 600, 0, 278, 279, 280, 281, 282, 283, 284,
	285, 286, 287, 289, 0, 290, 291, 292, 294, 295,
	296, 0, 297, 298, 299, 302, 303, 304, 306, 666,
	307, 308, 309, 840, 311, 312, 603, 0, 314, 315,
	316, 317, 318, 320, 322, 323, 324, 325, 326, 328,
	330, 0, 0, 0, 0, 0, 0, 0, 334, 335,
	336, 337, 338, 339, 0, 340, 341, 345, 347, 348,
	349, 350, 351, 352, 355, 0, 357, 359, 0, 360,
	363, 0, 364, 365, 366, 367, 368, 369, 370, 371,
	607, 841, 0, 373, 374, 376, 0, 379, 380, 381,
	382, 383, 0, 384, 609, 610, 385, 386, 388, 389,
	390, 392, 393, 394, 395, 396, 397, 398, 399, 400,
	401, 402, 403, 0, 404, 405, 406, 408, 0, 409,
	410, 413, 414, 415, 416, 0, 418, 626, 0, 419,
	420, 421, 0, 0, 422, 423, 424, 425, 426, 427,
	430, 627, 432, 433, 434, 435, 436, 437, 438, 668,
	440, 441, 442, 443, 444, 445, 446, 630, 631, 447,
	449, 450, 632, 634, 635, 0, 465, 466, 467, 468,
	469, 470, 471, 473, 0, 475, 476, 477, 636, 478,
	479, 480, 481, 0, 482, 483, 484, 485, 486, 488,
	491, 492, 493, 494, 0, 497, 498, 499, 500, 501,
	502, 503, 505, 506, 507, 509, 510, 511, 669, 512,
	513, 514, 515, 639, 517, 518, 670, 520, 521, 523,
	524, 525, 526, 527, 528, 679, 0, 530, 640, 531,
	532, 533, 534, 535, 0, 537, 538, 539, 540, 541,
	542, 545, 546, 547, 549, 550, 642, 551, 552, 0,
	554, 555, 0, 557, 558, 559, 560, 561, 0, 680,
	562, 644, 563, 645, 564, 565, 566, 567, 568, 569,
	570, 572, 0, 0, 574, 575, 576, 578, 579, 580,
	581, 584, 585, 586, 587, 588, 0, 589, 591, 593,
	671, 648, 649, 650, 651, 652, 654, 655, 656, 657,
	594, 595, 611, 462, 456, 412, 454, 455, 459, 460,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 939, 0, 0, 852, 853, 854,
	0, 0, 0, 0, 0, 0, 846, 847, 848, 849,
	850, 851, 288, 0, 305, 882, 0, 354, 391, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 887, 0, 893, 0, 899, 0,
	573, 0, 889, 890, 895, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 891, 888, 892, 898, 886,
	896, 883, 894, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 1243, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 880, 885, 0, 901, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 1271, 1273, 1269, 1265,
	1266, 1231, 1232, 1272, 1268, 378, 3150, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 879,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 1255, 1233, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 1244,
	1234, 1239, 1245, 1235, 1236, 1240, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 1247, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 1256, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 1257, 0, 419, 420, 421,
	1237, 1238, 422, 423, 424, 425, 426, 427, 430, 1270,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 1248, 447, 449, 450,
	1254, 634, 1249, 897, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 1250, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 1241, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 1251, 551, 552, 1242, 554, 555,
	900, 557, 558, 559, 560, 561, 0, 680, 562, 1252,
	563, 1253, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	1258, 1259, 1262, 1260, 1261, 1263, 1264, 1274, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 875,
	0, 0, 1246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	882, 0, 354, 391, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 887,
	0, 893, 0, 899, 0, 573, 0, 889, 890, 895,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	891, 888, 892, 898, 886, 896, 883, 894, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	880, 885, 0, 901, 144, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 145, 290, 291,
	292, 294, 295, 296, 879, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	881, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 884, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 897, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 900, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	1106, 0, 752, 0, 0, 0, 0, 0, 0, 0,
	0, 744, 288, 0, 305, 0, 0, 354, 391, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 748, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 747, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 739, 740, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 741, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	746, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 745, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 737,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 738, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 742, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 939, 0,
	1211, 766, 0, 1216, 1217, 0, 752, 0, 0, 0,
	0, 0, 0, 0, 750, 751, 288, 0, 305, 882,
	0, 354, 391, 606, 0, 0, 451, 0, 504, 508,
	0, 597, 0, 0, 0, 0, 362, 1214, 887, 0,
	893, 1215, 899, 1213, 573, 0, 889, 890, 895, 293,
	1290, 596, 667, 0, 0, 0, 458, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 891,
	888, 892, 898, 886, 896, 883, 894, 0, 495, 429,
	646, 522, 300, 346, 333, 375, 417, 529, 0, 0,
	407, 577, 342, 431, 0, 321, 464, 0, 553, 428,
	0, 536, 556, 0, 448, 327, 487, 543, 544, 880,
	885, 0, 901, 0, 331, 332, 453, 313, 461, 658,
	624, 516, 474, 472, 0, 439, 496, 653, 0, 0,
	361, 0, 356, 452, 592, 319, 571, 490, 457, 411,
	519, 548, 358, 343, 344, 387, 489, 377, 329, 582,
	621, 625, 623, 619, 616, 620, 617, 618, 622, 378,
	5700, 0, 590, 1276, 1287, 1284, 1289, 1275, 1288, 1282,
	1007, 637, 1279, 1278, 1292, 1285, 1286, 583, 1291, 1230,
	1283, 1281, 1280, 1277, 0, 278, 279, 280, 281, 282,
	283, 284, 285, 286, 287, 289, 0, 290, 291, 292,
	294, 295, 296, 879, 297, 298, 299, 302, 303, 304,
	306, 666, 307, 308, 309, 310, 311, 312, 603, 881,
	314, 315, 316, 317, 318, 320, 322, 323, 324, 325,
	326, 328, 330, 0, 0, 0, 884, 0, 0, 0,
	334, 335, 336, 337, 338, 339, 0, 340, 341, 345,
	347, 348, 349, 350, 351, 352, 355, 0, 357, 359,
	0, 360, 363, 0, 364, 365, 366, 367, 368, 369,
	370, 371, 607, 372, 0, 373, 374, 376, 0, 379,
	380, 381, 382, 383, 0, 384, 609, 610, 385, 386,
	388, 389, 390, 392, 393, 394, 395, 396, 397, 398,
	399, 400, 401, 402, 403, 0, 404, 405, 406, 408,
	0, 409, 410, 413, 414, 415, 416, 0, 418, 626,
	0, 419, 420, 421, 0, 0, 422, 423, 424, 425,
	426, 427, 430, 627, 432, 433, 434, 435, 436, 437,
	438, 668, 440, 441, 442, 443, 444, 445, 446, 630,
	631, 447, 449, 450, 632, 634, 635, 897, 465, 466,
	467, 468, 469, 470, 471, 473, 0, 475, 476, 477,
	636, 478, 479, 480, 481, 0, 482, 483, 484, 485,
	486, 488, 491, 492, 493, 494, 0, 497, 498, 499,
	500, 501, 502, 503, 505, 506, 507, 509, 510, 511,
	669, 512, 513, 514, 515, 639, 517, 518, 670, 520,
	521, 523, 524, 525, 526, 527, 528, 679, 0, 530,
	640, 531, 532, 533, 534, 535, 0, 537, 538, 539,
	540, 541, 542, 545, 546, 547, 549, 550, 642, 551,
	552, 0, 554, 555, 900, 557, 558, 559, 560, 561,
	0, 680, 562, 644, 563, 645, 564, 565, 566, 567,
	568, 569, 570, 572, 0, 0, 574, 575, 576, 578,
	579, 580, 581, 584, 585, 586, 587, 588, 0, 589,
	591, 593, 671, 648, 649, 650, 651, 652, 654, 655,
	656, 657, 594, 595, 611, 462, 456, 412, 454, 455,
	459, 460, 463, 275, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 0, 305, 0, 0, 354, 391, 606, 0,
	0, 451, 0, 504, 508, 0, 597, 0, 0, 0,
	0, 362, 0, 0, 0, 0, 0, 0, 0, 573,
	0, 0, 0, 0, 293, 681, 596, 667, 0, 0,
	0, 458, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 495, 429, 646, 522, 300, 346, 333,
	375, 417, 529, 0, 0, 407, 577, 342, 431, 0,
	321, 464, 0, 553, 428, 0, 536, 556, 0, 448,
	327, 487, 543, 544, 0, 0, 0, 0, 0, 331,
	332, 453, 313, 461, 658, 624, 516, 474, 472, 0,
	439, 496, 653, 0, 0, 361, 0, 356, 452, 592,
	319, 571, 490, 457, 411, 519, 548, 358, 343, 344,
	387, 489, 377, 329, 582, 621, 625, 623, 619, 616,
	620, 617, 618, 622, 378, 615, 0, 590, 599, 633,
	613, 641, 598, 638, 608, 353, 637, 602, 601, 647,
	628, 629, 583, 643, 614, 612, 605, 604, 600, 0,
	278, 279, 280, 281, 282, 283, 284, 285, 286, 287,
	289, 0, 290, 291, 292, 294, 295, 296, 0, 297,
	298, 299, 302, 303, 304, 306, 666, 307, 308, 309,
	310, 311, 312, 603, 0, 314, 315, 316, 317, 318,
	320, 322, 323, 324, 325, 326, 328, 330, 0, 0,
	0, 0, 0, 0, 0, 334, 335, 336, 337, 338,
	339, 0, 340, 341, 345, 347, 348, 349, 350, 351,
	352, 355, 0, 357, 359, 0, 360, 363, 0, 364,
	365, 366, 367, 368, 369, 370, 371, 607, 372, 0,
	373, 374, 376, 0, 379, 380, 381, 382, 383, 0,
	384, 609, 610, 385, 386, 388, 389, 390, 392, 393,
	394, 395, 396, 397, 398, 399, 400, 401, 402, 403,
	0, 404, 405, 406, 408, 0, 409, 410, 413, 414,
	415, 416, 0, 418, 626, 0, 419, 420, 421, 0,
	0, 422, 423, 424, 425, 426, 427, 430, 627, 432,
	433, 434, 435, 436, 437, 438, 668, 440, 441, 442,
	443, 444, 445, 446, 630, 631, 447, 449, 450, 632,
	634, 635, 0, 465, 466, 467, 468, 469, 470, 471,
	473, 0, 475, 476, 477, 636, 478, 479, 480, 481,
	0, 482, 483, 484, 485, 486, 488, 491, 492, 493,
	494, 0, 497, 498, 499, 500, 501, 502, 503, 505,
	506, 507, 509, 510, 511, 669, 512, 513, 514, 515,
	639, 517, 518, 670, 520, 521, 523, 524, 525, 526,
	527, 528, 679, 0, 530, 640, 531, 532, 533, 534,
	535, 0, 537, 538, 539, 540, 541, 542, 545, 546,
	547, 549, 550, 642, 551, 552, 0, 554, 555, 0,
	557, 558, 559, 560, 561, 0, 680, 562, 644, 563,
	645, 564, 565, 566, 567, 568, 569, 570, 572, 0,
	0, 574, 575, 576, 578, 579, 580, 581, 584, 585,
	586, 587, 588, 0, 589, 591, 593, 671, 648, 649,
	650, 651, 652, 654, 655, 656, 657, 594, 595, 611,
	462, 456, 412, 454, 455, 459, 460, 463, 275, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 288, 0, 305, 0,
	0, 354, 391, 606, 0, 5543, 451, 0, 504, 508,
	0, 597, 0, 0, 0, 0, 362, 0, 0, 0,
	0, 0, 0, 0, 573, 0, 0, 0, 0, 293,
	681, 596, 667, 0, 0, 0, 458, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 495, 429,
	646, 522, 300, 346, 333, 375, 417, 529, 0, 0,
	407, 577, 342, 431, 0, 321, 464, 0, 553, 428,
	0, 536, 556, 0, 448, 327, 487, 543, 544, 0,
	0, 0, 0, 0, 331, 332, 453, 313, 461, 658,
	624, 516, 474, 472, 0, 439, 496, 653, 0, 0,
	361, 0, 356, 452, 592, 319, 571, 490, 457, 411,
	519, 548, 358, 343, 344, 387, 489, 377, 329, 582,
	621, 625, 623, 619, 616, 620, 617, 618, 622, 378,
	615, 0, 590, 599, 633, 613, 641, 598, 638, 608,
	353, 637, 602, 601, 647, 628, 629, 583, 643, 614,
	612, 605, 604, 600, 0, 278, 279, 280, 281, 282,
	283, 284, 285, 286, 287, 289, 0, 290, 291, 292,
	294, 295, 296, 0, 297, 298, 299, 302, 303, 304,
	306, 666, 307, 308, 309, 310, 311, 312, 603, 0,
	314, 315, 316, 317, 318, 320, 322, 323, 324, 325,
	326, 328, 330, 0, 0, 0, 0, 0, 0, 0,
	334, 335, 336, 337, 338, 339, 0, 340, 341, 345,
	347, 348, 349, 350, 351, 352, 355, 0, 357, 359,
	0, 360, 363, 0, 364, 365, 366, 367, 368, 369,
	370, 371, 607, 372, 0, 373, 374, 376, 0, 379,
	380, 381, 382, 383, 0, 384, 609, 610, 385, 386,
	388, 389, 390, 392, 393, 394, 395, 396, 397, 398,
	399, 400, 401, 402, 403, 0, 404, 405, 406, 408,
	0, 409, 410, 413, 414, 415, 416, 0, 418, 626,
	0, 419, 420, 421, 0, 0, 422, 423, 424, 425,
	426, 427, 430, 627, 432, 433, 434, 435, 436, 437,
	438, 668, 440, 441, 442, 443, 444, 445, 446, 630,
	631, 447, 449, 450, 632, 634, 635, 0, 465, 466,
	467, 468, 469, 470, 471, 473, 0, 475, 476, 477,
	636, 478, 479, 480, 481, 0, 482, 483, 484, 485,
	486, 488, 491, 492, 493, 494, 0, 497, 498, 499,
	500, 501, 502, 503, 505, 506, 507, 509, 510, 511,
	669, 512, 513, 514, 515, 639, 517, 518, 670, 520,
	521, 523, 524, 525, 526, 527, 528, 679, 0, 530,
	640, 531, 532, 533, 534, 535, 0, 537, 538, 539,
	540, 541, 542, 545, 546, 547, 549, 550, 642, 551,
	552, 0, 554, 555, 0, 557, 558, 559, 560, 561,
	0, 680, 562, 644, 563, 645, 564, 565, 566, 567,
	568, 569, 570, 572, 0, 0, 574, 575, 576, 578,
	579, 580, 581, 584, 585, 586, 587, 588, 0, 589,
	591, 593, 671, 648, 649, 650, 651, 652, 654, 655,
	656, 657, 594, 595, 611, 462, 456, 412, 454, 455,
	459, 460, 463, 275, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 0, 305, 0, 0, 354, 391, 606, 0,
	5402, 451, 0, 504, 508, 0, 597, 0, 0, 0,
	0, 362, 0, 0, 0, 0, 0, 0, 0, 573,
	0, 0, 0, 0, 293, 681, 596, 667, 0, 0,
	0, 458, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 495, 429, 646, 522, 300, 346, 333,
	375, 417, 529, 0, 0, 407, 577, 342, 431, 0,
	321, 464, 0, 553, 428, 0, 536, 556, 0, 448,
	327, 487, 543, 544, 0, 0, 0, 0, 0, 331,
	332, 453, 313, 461, 658, 624, 516, 474, 472, 0,
	439, 496, 653, 0, 0, 361, 0, 356, 452, 592,
	319, 571, 490, 457, 411, 519, 548, 358, 343, 344,
	387, 489, 377, 329, 582, 621, 625, 623, 619, 616,
	620, 617, 618, 622, 378, 615, 0, 590, 599, 633,
	613, 641, 598, 638, 608, 353, 637, 602, 601, 647,
	628, 629, 583, 643, 614, 612, 605, 604, 600, 0,
	278, 279, 280, 281, 282, 283, 284, 285, 286, 287,
	289, 0, 290, 291, 292, 294, 295, 296, 0, 297,
	298, 299, 302, 303, 304, 306, 666, 307, 308, 309,
	310, 311, 312, 603, 0, 314, 315, 316, 317, 318,
	320, 322, 323, 324, 325, 326, 328, 330, 0, 0,
	0, 0, 0, 0, 0, 334, 335, 336, 337, 338,
	339, 0, 340, 341, 345, 347, 348, 349, 350, 351,
	352, 355, 0, 357, 359, 0, 360, 363, 0, 364,
	365, 366, 367, 368, 369, 370, 371, 607, 372, 0,
	373, 374, 376, 0, 379, 380, 381, 382, 383, 0,
	384, 609, 610, 385, 386, 388, 389, 390, 392, 393,
	394, 395, 396, 397, 398, 399, 400, 401, 402, 403,
	0, 404, 405, 406, 408, 0, 409, 410, 413, 414,
	415, 416, 0, 418, 626, 0, 419, 420, 421, 0,
	0, 422, 423, 424, 425, 426, 427, 430, 627, 432,
	433, 434, 435, 436, 437, 438, 668, 440, 441, 442,
	443, 444, 445, 446, 630, 631, 447, 449, 450, 632,
	634, 635, 0, 465, 466, 467, 468, 469, 470, 471,
	473, 0, 475, 476, 477, 636, 478, 479, 480, 481,
	0, 482, 483, 484, 485, 486, 488, 491, 492, 493,
	494, 0, 497, 498, 499, 500, 501, 502, 503, 505,
	506, 507, 509, 510, 511, 669, 512, 513, 514, 515,
	639, 517, 518, 670, 520, 521, 523, 524, 525, 526,
	527, 528, 679, 0, 530, 640, 531, 532, 533, 534,
	535, 0, 537, 538, 539, 540, 541, 542, 545, 546,
	547, 549, 550, 642, 551, 552, 0, 554, 555, 0,
	557, 558, 559, 560, 561, 0, 680, 562, 644, 563,
	645, 564, 565, 566, 567, 568, 569, 570, 572, 0,
	0, 574, 575, 576, 578, 579, 580, 581, 584, 585,
	586, 587, 588, 0, 589, 591, 593, 671, 648, 649,
	650, 651, 652, 654, 655, 656, 657, 594, 595, 611,
	462, 456, 412, 454, 455, 459, 460, 463, 275, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 288, 0, 305, 0,
	0, 354, 391, 606, 0, 5399, 451, 0, 504, 508,
	0, 597, 0, 0, 0, 0, 362, 0, 0, 0,
	0, 0, 0, 0, 573, 0, 0, 0, 0, 293,
	681, 596, 667, 0, 0, 0, 458, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 495, 429,
	646, 522, 300, 346, 333, 375, 417, 529, 0, 0,
	407, 577, 342, 431, 0, 321, 464, 0, 553, 428,
	0, 536, 556, 0, 448, 327, 487, 543, 544, 0,
	0, 0, 0, 0, 331, 332, 453, 313, 461, 658,
	624, 516, 474, 472, 0, 439, 496, 653, 0, 0,
	361, 0, 356, 452, 592, 319, 571, 490, 457, 411,
	519, 548, 358, 343, 344, 387, 489, 377, 329, 582,
	621, 625, 623, 619, 616, 620, 617, 618, 622, 378,
	615, 0, 590, 599, 633, 613, 641, 598, 638, 608,
	353, 637, 602, 601, 647, 628, 629, 583, 643, 614,
	612, 605, 604, 600, 0, 278, 279, 280, 281, 282,
	283, 284, 285, 286, 287, 289, 0, 290, 291, 292,
	294, 295, 296, 0, 297, 298, 299, 302, 303, 304,
	306, 666, 307, 308, 309, 310, 311, 312, 603, 0,
	314, 315, 316, 317, 318, 320, 322, 323, 324, 325,
	326, 328, 330, 0, 0, 0, 0, 0, 0, 0,
	334, 335, 336, 337, 338, 339, 0, 340, 341, 345,
	347, 348, 349, 350, 351, 352, 355, 0, 357, 359,
	0, 360, 363, 0, 364, 365, 366, 367, 368, 369,
	370, 371, 607, 372, 0, 373, 374, 376, 0, 379,
	380, 381, 382, 383, 0, 384, 609, 610, 385, 386,
	388, 389, 390, 392, 393, 394, 395, 396, 397, 398,
	399, 400, 401, 402, 403, 0, 404, 405, 406, 408,
	0, 409, 410, 413, 414, 415, 416, 0, 418, 626,
	0, 419, 420, 421, 0, 0, 422, 423, 424, 425,
	426, 427, 430, 627, 432, 433, 434, 435, 436, 437,
	438, 668, 440, 441, 442, 443, 444, 445, 446, 630,
	631, 447, 449, 450, 632, 634, 635, 0, 465, 466,
	467, 468, 469, 470, 471, 473, 0, 475, 476, 477,
	636, 478, 479, 480, 481, 0, 482, 483, 484, 485,
	486, 488, 491, 492, 493, 494, 0, 497, 498, 499,
	500, 501, 502, 503, 505, 506, 507, 509, 510, 511,
	669, 512, 513, 514, 515, 639, 517, 518, 670, 520,
	521, 523, 524, 525, 526, 527, 528, 679, 0, 530,
	640, 531, 532, 533, 534, 535, 0, 537, 538, 539,
	540, 541, 542, 545, 546, 547, 549, 550, 642, 551,
	552, 0, 554, 555, 0, 557, 558, 559, 560, 561,
	0, 680, 562, 644, 563, 645, 564, 565, 566, 567,
	568, 569, 570, 572, 0, 0, 574, 575, 576, 578,
	579, 580, 581, 584, 585, 586, 587, 588, 0, 589,
	591, 593, 671, 648, 649, 650, 651, 652, 654, 655,
	656, 657, 594, 595, 611, 462, 456, 412, 454, 455,
	459, 460, 463, 275, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 0, 305, 0, 0, 354, 391, 606, 0,
	762, 451, 0, 504, 508, 149, 597, 0, 0, 0,
	0, 362, 0, 0, 0, 0, 0, 0, 0, 573,
	0, 0, 0, 0, 293, 681, 596, 667, 0, 0,
	0, 458, 146, 0, 0, 0, 147, 0, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 495, 429, 1103, 522, 300, 346, 333,
	375, 417, 529, 0, 0, 407, 577, 342, 431, 0,
	321, 464, 0, 553, 428, 0, 536, 556, 0, 448,
	327, 487, 543, 544, 0, 0, 0, 0, 0, 331,
	332, 453, 313, 461, 658, 624, 516, 474, 472, 0,
	439, 496, 653, 0, 0, 361, 0, 356, 452, 592,
	319, 571, 490, 457, 411, 519, 548, 358, 343, 344,
	387, 489, 377, 329, 582, 621, 625, 623, 619, 616,
	620, 617, 618, 622, 378, 615, 0, 590, 599, 633,
	613, 641, 598, 638, 608, 353, 637, 602, 601, 647,
	628, 629, 583, 643, 614, 612, 605, 604, 600, 0,
	278, 279, 280, 281, 282, 283, 284, 285, 286, 287,
	289, 0, 290, 291, 292, 294, 295, 296, 0, 297,
	298, 299, 302, 303, 304, 306, 666, 307, 308, 309,
	310, 311, 312, 603, 0, 314, 315, 316, 317, 318,
	320, 322, 323, 324, 325, 326, 328, 330, 0, 0,
	0, 0, 0, 0, 0, 334, 335, 336, 337, 338,
	339, 0, 340, 341, 345, 347, 348, 349, 350, 351,
	352, 355, 0, 357, 359, 0, 360, 363, 0, 364,
	365, 366, 367, 368, 369, 370, 371, 607, 372, 0,
	373, 374, 376, 0, 379, 380, 381, 382, 383, 0,
	384, 609, 610, 385, 386, 388, 389, 390, 392, 393,
	394, 395, 396, 397, 398, 399, 400, 401, 402, 403,
	0, 404, 405, 406, 408, 0, 409, 410, 413, 414,
	415, 416, 0, 418, 626, 0, 419, 420, 421, 0,
	0, 422, 423, 424, 425, 426, 427, 430, 627, 432,
	433, 434, 435, 436, 437, 438, 668, 440, 441, 442,
	443, 444, 445, 446, 630, 631, 447, 449, 450, 632,
	634, 635, 0, 465, 466, 467, 468, 469, 470, 471,
	473, 0, 475, 476, 477, 636, 478, 479, 480, 481,
	0, 482, 483, 484, 485, 486, 488, 491, 492, 493,
	494, 0, 497, 498, 499, 500, 501, 502, 503, 505,
	506, 507, 509, 510, 511, 669, 512, 513, 514, 515,
	639, 517, 518, 670, 520, 521, 523, 524, 525, 526,
	527, 528, 679, 0, 530, 640, 531, 532, 533, 534,
	535, 0, 537, 538, 539, 540, 541, 542, 545, 546,
	547, 549, 550, 642, 551, 552, 0, 554, 555, 0,
	557, 558, 559, 560, 561, 0, 680, 562, 644, 563,
	645, 564, 565, 566, 567, 568, 569, 570, 572, 0,
	0, 574, 575, 576, 578, 579, 580, 581, 584, 585,
	586, 587, 588, 0, 589, 591, 593, 671, 648, 649,
	650, 651, 652, 654, 655, 656, 657, 594, 595, 611,
	462, 456, 412, 454, 455, 459, 460, 463, 875, 0,
	0, 766, 0, 0, 0, 0, 0, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 288, 0, 305, 882,
	143, 354, 391, 606, 0, 0, 451, 0, 504, 508,
	0, 597, 0, 0, 0, 0, 362, 1635, 887, 0,
	893, 0, 899, 1634, 573, 0, 889, 890, 895, 293,
	681, 596, 667, 0, 0, 0, 458, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 0, 1636, 891,
	888, 892, 898, 886, 896, 883, 894, 0, 495, 429,
	646, 522, 300, 346, 333, 375, 417, 529, 0, 0,
	407, 577, 342, 431, 0, 321, 464, 0, 553, 428,
	0, 536, 556, 0, 448, 327, 487, 543, 544, 880,
	885, 0, 901, 0, 331, 332, 453, 313, 461, 658,
	624, 516, 474, 472, 0, 439, 496, 653, 0, 0,
	361, 0, 356, 452, 592, 319, 571, 490, 457, 411,
	519, 548, 358, 343, 344, 387, 489, 377, 329, 582,
	621, 625, 623, 619, 616, 620, 617, 618, 622, 378,
	615, 0, 590, 599, 633, 613, 641, 598, 638, 608,
	353, 637, 602, 601, 647, 628, 629, 583, 643, 614,
	612, 605, 604, 600, 0, 278, 279, 280, 281, 282,
	283, 284, 285, 286, 287, 289, 0, 290, 291, 292,
	294, 295, 296, 879, 297, 298, 299, 302, 303, 304,
	306, 666, 307, 308, 309, 310, 311, 312, 603, 881,
	314, 315, 316, 317, 318, 320, 322, 323, 324, 325,
	326, 328, 330, 0, 0, 0, 884, 0, 0, 0,
	334, 335, 336, 337, 338, 339, 0, 340, 341, 345,
	347, 348, 349, 350, 351, 352, 355, 0, 357, 359,
	0, 360, 363, 0, 364, 365, 366, 367, 368, 369,
	370, 371, 607, 372, 0, 373, 374, 376, 0, 379,
	380, 381, 382, 383, 0, 384, 609, 610, 385, 386,
	388, 389, 390, 392, 393, 394, 395, 396, 397, 398,
	399, 400, 401, 402, 403, 0, 404, 405, 406, 408,
	0, 409, 410, 413, 414, 415, 416, 0, 418, 626,
	0, 419, 420, 421, 0, 0, 422, 423, 424, 425,
	426, 427, 430, 627, 432, 433, 434, 435, 436, 437,
	438, 668, 440, 441, 442, 443, 444, 445, 446, 630,
	631, 447, 449, 450, 632, 634, 635, 897, 465, 466,
	467, 468, 469, 470, 471, 473, 0, 475, 476, 477,
	636, 478, 479, 480, 481, 0, 482, 483, 484, 485,
	486, 488, 491, 492, 493, 494, 0, 497, 498, 499,
	500, 501, 502, 503, 505, 506, 507, 509, 510, 511,
	669, 512, 513, 514, 515, 639, 517, 518, 670, 520,
	521, 523, 524, 525, 526, 527, 528, 679, 0, 530,
	640, 531, 532, 533, 534, 535, 0, 537, 538, 539,
	540, 541, 542, 545, 546, 547, 549, 550, 642, 551,
	552, 0, 554, 555, 900, 557, 558, 559, 560, 561,
	0, 680, 562, 644, 563, 645, 564, 565, 566, 567,
	568, 569, 570, 572, 0, 0, 574, 575, 576, 578,
	579, 580, 581, 584, 585, 586, 587, 588, 0, 589,
	591, 593, 671, 648, 649, 650, 651, 652, 654, 655,
	656, 657, 594, 595, 611, 462, 456, 412, 454, 455,
	459, 460, 463, 875, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 0, 305, 882, 0, 354, 391, 606, 0,
	0, 451, 0, 504, 508, 0, 597, 0, 0, 0,
	0, 362, 0, 887, 0, 893, 0, 899, 0, 573,
	0, 889, 890, 895, 293, 681, 596, 667, 0, 0,
	0, 458, 0, 0, 0, 0, 0, 0, 0, 301,
	3539, 0, 0, 0, 891, 888, 892, 898, 886, 896,
	883, 894, 0, 495, 429, 646, 522, 300, 346, 333,
	375, 417, 529, 0, 0, 407, 577, 342, 431, 0,
	321, 464, 0, 553, 428, 0, 536, 556, 0, 448,
	327, 487, 543, 544, 880, 885, 0, 901, 0, 331,
	332, 453, 313, 461, 658, 624, 516, 474, 472, 0,
	439, 496, 653, 0, 0, 361, 0, 356, 452, 592,
	319, 571, 490, 457, 411, 519, 548, 358, 343, 344,
	387, 489, 377, 329, 582, 621, 625, 623, 619, 616,
	620, 617, 618, 622, 378, 615, 0, 590, 599, 633,
	613, 641, 598, 638, 608, 353, 637, 602, 601, 647,
	628, 629, 583, 643, 614, 612, 605, 604, 600, 0,
	278, 279, 280, 281, 282, 283, 284, 285, 286, 287,
	289, 0, 290, 291, 292, 294, 295, 296, 879, 297,
	298, 299, 302, 303, 304, 306, 666, 307, 308, 309,
	310, 311, 312, 603, 881, 314, 315, 316, 317, 318,
	320, 322, 323, 324, 325, 326, 328, 330, 0, 0,
	872, 884, 0, 0, 873, 334, 335, 336, 337, 338,
	339, 0, 340, 341, 345, 347, 348, 349, 350, 351,
	352, 355, 0, 357, 359, 0, 360, 363, 0, 364,
	365, 366, 367, 368, 369, 370, 371, 607, 372, 0,
	373, 374, 376, 0, 379, 380, 381, 382, 383, 0,
	384, 609, 610, 385, 386, 388, 389, 390, 392, 393,
	394, 395, 396, 397, 398, 399, 400, 401, 402, 403,
	0, 404, 405, 406, 408, 0, 409, 410, 413, 414,
	415, 416, 0, 418, 626, 0, 419, 420, 421, 0,
	0, 422, 423, 424, 425, 426, 427, 430, 627, 432,
	433, 434, 435, 436, 437, 438, 668, 440, 441, 442,
	443, 444, 445, 446, 630, 631, 447, 449, 450, 632,
	634, 635, 897, 465, 466, 467, 468, 469, 470, 471,
	473, 0, 475, 476, 477, 636, 478, 479, 480, 481,
	0, 482, 483, 484, 485, 486, 488, 491, 492, 493,
	494, 0, 497, 498, 499, 500, 501, 502, 503, 505,
	506, 507, 509, 510, 511, 669, 512, 513, 514, 515,
	639, 517, 518, 670, 520, 521, 523, 524, 525, 526,
	527, 528, 679, 874, 530, 640, 531, 532, 533, 534,
	535, 0, 537, 538, 539, 540, 541, 542, 545, 546,
	547, 549, 550, 642, 551, 552, 0, 554, 555, 900,
	557, 558, 559, 560, 561, 0, 680, 562, 644, 563,
	645, 564, 565, 566, 567, 568, 569, 570, 572, 0,
	0, 574, 575, 576, 578, 579, 580, 581, 584, 585,
	586, 587, 588, 0, 589, 591, 593, 671, 648, 649,
	650, 651, 652, 654, 655, 656, 657, 594, 595, 611,
	462, 456, 412, 454, 455, 459, 460, 463, 875, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 288, 0, 305, 882,
	0, 354, 391, 606, 0, 0, 451, 0, 504, 508,
	0, 597, 0, 0, 0, 0, 362, 0, 887, 0,
	893, 0, 899, 0, 573, 0, 889, 890, 895, 293,
	681, 596, 667, 0, 0, 0, 458, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 891,
	888, 892, 898, 886, 896, 883, 894, 0, 495, 429,
	646, 522, 300, 346, 333, 375, 417, 529, 0, 0,
	407, 577, 342, 431, 0, 321, 464, 2521, 553, 428,
	0, 536, 556, 0, 448, 327, 487, 543, 544, 880,
	885, 0, 901, 0, 331, 332, 453, 313, 461, 658,
	624, 516, 474, 472, 0, 439, 496, 653, 0, 0,
	361, 0, 356, 452, 592, 319, 571, 490, 457, 411,
	519, 548, 358, 343, 344, 387, 489, 377, 329, 582,
	621, 625, 623, 619, 616, 620, 617, 618, 622, 378,
	615, 0, 590, 599, 633, 613, 641, 598, 638, 608,
	353, 637, 602, 601, 647, 628, 629, 583, 643, 614,
	612, 605, 604, 600, 0, 278, 279, 280, 281, 282,
	283, 284, 285, 286, 287, 289, 0, 290, 291, 292,
	294, 295, 296, 879, 297, 298, 299, 302, 303, 304,
	306, 666, 307, 308, 309, 310, 311, 312, 603, 881,
	314, 315, 316, 317, 318, 320, 322, 323, 324, 325,
	326, 328, 330, 0, 0, 872, 884, 0, 0, 873,
	334, 335, 336, 337, 338, 339, 0, 340, 341, 345,
	347, 348, 349, 350, 351, 352, 355, 0, 357, 359,
	0, 360, 363, 0, 364, 365, 366, 367, 368, 369,
	370, 371, 607, 372, 0, 373, 374, 376, 0, 379,
	380, 381, 382, 383, 0, 384, 609, 610, 385, 386,
	388, 389, 390, 392, 393, 394, 395, 396, 397, 398,
	399, 400, 401, 402, 403, 0, 404, 405, 406, 408,
	0, 409, 410, 413, 414, 415, 416, 0, 418, 626,
	0, 419, 420, 421, 0, 0, 422, 423, 424, 425,
	426, 427, 430, 627, 432, 433, 434, 435, 436, 437,
	438, 668, 440, 441, 442, 443, 444, 445, 446, 630,
	631, 447, 449, 450, 632, 634, 635, 897, 465, 466,
	467, 468, 469, 470, 471, 473, 0, 475, 476, 477,
	636, 478, 479, 480, 481, 0, 482, 483, 484, 485,
	486, 488, 491, 492, 493, 494, 0, 497, 498, 499,
	500, 501, 502, 503, 505, 506, 507, 509, 510, 511,
	669, 512, 513, 514, 515, 639, 517, 518, 670, 520,
	521, 523, 524, 525, 526, 527, 528, 679, 874, 530,
	640, 531, 532, 533, 534, 535, 0, 537, 538, 539,
	540, 541, 542, 545, 546, 547, 549, 550, 642, 551,
	552, 0, 554, 555, 900, 557, 558, 559, 560, 561,
	0, 680, 562, 644, 563, 645, 564, 565, 566, 567,
	568, 569, 570, 572, 0, 0, 574, 575, 576, 578,
	579, 580, 581, 584, 585, 586, 587, 588, 0, 589,
	591, 593, 671, 648, 649, 650, 651, 652, 654, 655,
	656, 657, 594, 595, 611, 462, 456, 412, 454, 455,
	459, 460, 463, 275, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 0, 305, 0, 0, 354, 391, 606, 0,
	0, 451, 0, 504, 508, 0, 597, 0, 0, 0,
	0, 362, 0, 0, 0, 0, 0, 0, 0, 573,
	0, 0, 0, 0, 293, 681, 596, 667, 0, 0,
	0, 458, 0, 0, 0, 790, 2537, 0, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 495, 429, 646, 522, 300, 346, 333,
	375, 417, 529, 0, 0, 407, 577, 342, 431, 0,
	321, 464, 0, 553, 428, 0, 536, 556, 0, 448,
	327, 487, 543, 544, 0, 0, 0, 0, 0, 331,
	332, 453, 313, 461, 658, 624, 516, 474, 472, 0,
	439, 496, 653, 0, 0, 361, 0, 356, 452, 592,
	319, 571, 490, 457, 411, 519, 548, 358, 343, 344,
	387, 489, 377, 329, 582, 621, 625, 623, 619, 616,
	620, 617, 618, 622, 378, 615, 0, 590, 599, 633,
	613, 641, 598, 638, 608, 353, 637, 602, 601, 647,
	628, 629, 583, 643, 614, 612, 605, 604, 600, 0,
	278, 279, 280, 281, 282, 283, 284, 285, 286, 287,
	289, 0, 290, 291, 292, 294, 295, 296, 0, 297,
	298, 299, 302, 303, 304, 306, 666, 307, 308, 309,
	310, 311, 312, 603, 0, 314, 315, 316, 317, 318,
	320, 322, 323, 324, 325, 326, 328, 330, 0, 0,
	0, 2541, 0, 0, 0, 334, 335, 336, 337, 338,
	339, 0, 340, 341, 345, 347, 348, 349, 350, 351,
	352, 355, 0, 357, 359, 0, 360, 363, 0, 364,
	365, 366, 367, 368, 369, 370, 371, 607, 372, 0,
	373, 374, 376, 0, 379, 380, 381, 382, 383, 0,
	384, 609, 610, 385, 386, 388, 389, 390, 392, 393,
	394, 395, 396, 397, 398, 399, 400, 401, 402, 403,
	0, 404, 405, 406, 408, 0, 409, 410, 413, 414,
	415, 416, 0, 418, 626, 0, 419, 420, 421, 0,
	0, 422, 423, 424, 425, 426, 427, 430, 627, 432,
	433, 434, 435, 436, 437, 438, 668, 440, 441, 442,
	443, 444, 445, 446, 630, 631, 447, 449, 450, 632,
	634, 635, 0, 465, 466, 467, 468, 469, 470, 471,
	473, 0, 475, 476, 477, 636, 478, 479, 480, 481,
	0, 482, 483, 484, 485, 486, 488, 491, 492, 493,
	494, 0, 497, 498, 499, 500, 501, 502, 503, 505,
	506, 507, 509, 510, 511, 669, 512, 513, 514, 515,
	639, 517, 518, 670, 520, 521, 523, 524, 525, 526,
	527, 528, 679, 0, 530, 640, 531, 532, 533, 534,
	535, 0, 537, 538, 539, 540, 541, 542, 545, 546,
	547, 549, 550, 642, 551, 552, 0, 2538, 555, 0,
	557, 558, 559, 560, 561, 0, 680, 562, 644, 563,
	645, 564, 565, 566, 567, 568, 569, 570, 572, 0,
	0, 574, 575, 576, 578, 579, 580, 581, 584, 585,
	586, 587, 588, 0, 589, 591, 593, 671, 648, 649,
	650, 651, 652, 654, 655, 656, 657, 594, 595, 611,
	462, 456, 412, 454, 455, 459, 460, 463, 875, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 972, 288, 0, 305, 882,
	1356, 354, 391, 606, 0, 0, 451, 0, 504, 508,
	0, 597, 0, 0, 0, 0, 362, 0, 887, 0,
	893, 0, 899, 0, 573, 0, 889, 890, 895, 293,
	681, 596, 667, 0, 0, 0, 458, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 891,
	888, 892, 898, 886, 896, 883, 894, 0, 495, 429,
	646, 522, 300, 346, 333, 375, 417, 529, 0, 0,
	407, 577, 342, 431, 0, 321, 464, 0, 553, 428,
	0, 536, 556, 0, 448, 327, 487, 543, 544, 880,
	885, 0, 901, 0, 331, 332, 453, 313, 461, 658,
	624, 516, 474, 472, 0, 439, 496, 653, 0, 0,
	361, 0, 356, 452, 592, 319, 571, 490, 457, 411,
	519, 548, 358, 343, 344, 387, 489, 377, 329, 582,
	621, 625, 623, 619, 616, 620, 617, 618, 622, 378,
	615, 0, 590, 599, 633, 613, 641, 598, 638, 608,
	353, 637, 602, 601, 647, 628, 629, 583, 643, 614,
	612, 605, 604, 600, 0, 278, 279, 280, 281, 282,
	283, 284, 285, 286, 287, 289, 0, 290, 291, 292,
	294, 295, 296, 879, 297, 298, 299, 302, 303, 304,
	306, 666, 307, 308, 309, 310, 311, 312, 603, 881,
	314, 315, 316, 317, 318, 320, 322, 323, 324, 325,
	326, 328, 330, 0, 0, 872, 884, 0, 0, 873,
	334, 335, 336, 337, 338, 339, 0, 340, 341, 345,
	347, 348, 349, 350, 351, 352, 355, 0, 357, 359,
	0, 360, 363, 0, 364, 365, 366, 367, 368, 369,
	370, 371, 607, 372, 0, 373, 374, 376, 0, 379,
	380, 381, 382, 383, 0, 384, 609, 610, 385, 386,
	388, 389, 390, 392, 393, 394, 395, 396, 397, 398,
	399, 400, 401, 402, 403, 0, 404, 405, 406, 408,
	0, 409, 410, 413, 414, 415, 416, 0, 418, 626,
	0, 419, 420, 421, 0, 0, 422, 423, 424, 425,
	970, 427, 430, 627, 432, 433, 434, 435, 436, 437,
	438, 668, 440, 441, 442, 443, 444, 445, 446, 630,
	631, 447, 449, 450, 632, 634, 635, 897, 465, 466,
	467, 468, 469, 470, 471, 473, 0, 475, 476, 477,
	636, 478, 479, 480, 481, 0, 482, 483, 484, 485,
	486, 488, 491, 492, 493, 494, 0, 497, 498, 499,
	500, 501, 502, 503, 505, 506, 507, 509, 510, 511,
	669, 512, 513, 514, 515, 639, 517, 518, 670, 520,
	521, 523, 524, 525, 526, 527, 528, 679, 874, 530,
	640, 531, 532, 533, 534, 535, 0, 537, 538, 539,
	540, 541, 542, 545, 546, 547, 549, 550, 642, 551,
	552, 0, 554, 555, 900, 557, 558, 559, 560, 561,
	0, 680, 562, 644, 563, 645, 564, 565, 566, 567,
	568, 569, 570, 572, 0, 0, 574, 575, 576, 578,
	579, 580, 581, 584, 585, 586, 587, 588, 0, 589,
	591, 593, 671, 648, 649, 650, 651, 652, 654, 655,
	656, 657, 594, 595, 611, 462, 456, 412, 454, 455,
	459, 460, 463, 875, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	968, 288, 0, 305, 882, 0, 354, 391, 606, 0,
	0, 451, 0, 504, 508, 0, 597, 0, 0, 0,
	0, 362, 0, 887, 0, 893, 0, 899, 0, 573,
	0, 889, 890, 895, 293, 681, 596, 667, 0, 0,
	0, 458, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 891, 888, 892, 898, 886, 896,
	883, 894, 0, 495, 429, 646, 522, 300, 346, 333,
	375, 417, 529, 0, 0, 407, 577, 342, 431, 0,
	321, 464, 0, 553, 428, 0, 536, 556, 0, 448,
	327, 487, 543, 544, 880, 885, 0, 901, 0, 331,
	332, 453, 313, 461, 658, 624, 516, 474, 472, 0,
	439, 496, 653, 0, 0, 361, 0, 356, 452, 592,
	319, 571, 490, 457, 411, 519, 548, 358, 343, 344,
	387, 489, 377, 329, 582, 621, 625, 623, 619, 616,
	620, 617, 618, 622, 378, 615, 0, 590, 599, 633,
	613, 641, 598, 638, 608, 353, 637, 602, 601, 647,
	628, 629, 583, 643, 614, 612, 605, 604, 600, 0,
	278, 279, 280, 281, 282, 283, 284, 285, 286, 287,
	289, 0, 290, 291, 292, 294, 295, 296, 879, 297,
	298, 299, 302, 303, 304, 306, 666, 307, 308, 309,
	310, 311, 312, 603, 881, 314, 315, 316, 317, 318,
	320, 322, 323, 324, 325, 326, 328, 330, 0, 0,
	872, 884, 0, 0, 873, 334, 335, 336, 337, 338,
	339, 0, 340, 341, 345, 347, 348, 349, 350, 351,
	352, 355, 0, 357, 359, 0, 360, 363, 0, 364,
	365, 366, 367, 368, 369, 370, 371, 607, 372, 0,
	373, 374, 376, 0, 379, 380, 381, 382, 383, 0,
	384, 609, 610, 385, 386, 388, 389, 390, 392, 393,
	394, 395, 396, 397, 398, 399, 400, 401, 402, 403,
	0, 404, 405, 406, 408, 0, 409, 410, 413, 414,
	415, 416, 0, 418, 626, 0, 419, 420, 421, 0,
	0, 422, 423, 424, 425, 426, 427, 430, 627, 432,
	433, 434, 435, 436, 437, 438, 668, 440, 441, 442,
	443, 444, 445, 446, 630, 631, 447, 449, 450, 632,
	634, 635, 897, 465, 466, 467, 468, 469, 470, 471,
	473, 0, 475, 476, 477, 636, 478, 479, 480, 481,
	0, 482, 483, 484, 485, 486, 488, 491, 492, 493,
	494, 0, 497, 498, 499, 500, 501, 502, 503, 505,
	506, 507, 509, 510, 511, 669, 512, 513, 514, 515,
	639, 517, 518, 670, 520, 521, 523, 524, 525, 526,
	527, 528, 679, 874, 530, 640, 531, 532, 533, 534,
	535, 0, 537, 538, 539, 540, 541, 542, 545, 546,
	547, 549, 550, 642, 551, 552, 0, 554, 555, 900,
	557, 558, 559, 560, 561, 0, 680, 562, 644, 563,
	645, 564, 565, 566, 567, 568, 569, 570, 572, 0,
	0, 574, 575, 576, 578, 579, 580, 581, 584, 585,
	586, 587, 588, 0, 589, 591, 593, 671, 648, 649,
	650, 651, 652, 654, 655, 656, 657, 594, 595, 611,
	462, 456, 412, 454, 455, 459, 460, 463, 875, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 288, 0, 305, 882,
	0, 354, 391, 606, 0, 0, 451, 0, 504, 508,
	0, 597, 0, 0, 0, 0, 362, 0, 887, 0,
	893, 0, 899, 0, 573, 0, 889, 890, 895, 293,
	681, 596, 667, 0, 0, 0, 458, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 891,
	888, 892, 898, 886, 896, 883, 894, 0, 495, 429,
	646, 522, 300, 346, 333, 375, 417, 529, 0, 0,
	407, 577, 342, 431, 0, 321, 464, 0, 553, 428,
	0, 536, 556, 0, 448, 327, 487, 543, 544, 880,
	885, 0, 901, 0, 331, 332, 453, 313, 461, 658,
	624, 516, 474, 472, 0, 439, 496, 653, 0, 0,
	361, 0, 356, 452, 592, 319, 571, 490, 457, 411,
	519, 548, 358, 343, 344, 387, 489, 377, 329, 582,
	621, 625, 623, 619, 616, 620, 617, 618, 622, 378,
	615, 0, 590, 599, 633, 613, 641, 598, 638, 608,
	353, 637, 602, 601, 647, 628, 629, 583, 643, 614,
	612, 605, 604, 600, 0, 278, 279, 280, 281, 282,
	283, 284, 285, 286, 287, 289, 0, 290, 291, 292,
	294, 295, 296, 879, 297, 298, 299, 302, 303, 304,
	306, 666, 307, 308, 309, 310, 311, 312, 603, 881,
	314, 315, 316, 317, 318, 320, 322, 323, 324, 325,
	326, 328, 330, 0, 0, 872, 884, 0, 0, 873,
	334, 335, 336, 337, 338, 339, 0, 340, 341, 345,
	347, 348, 349, 350, 351, 352, 355, 0, 357, 359,
	0, 360, 363, 0, 364, 365, 366, 367, 368, 369,
	370, 371, 607, 372, 0, 373, 374, 376, 0, 379,
	380, 381, 382, 383, 0, 384, 609, 610, 385, 386,
	388, 389, 390, 392, 393, 394, 395, 396, 397, 398,
	399, 400, 401, 402, 403, 0, 404, 405, 406, 408,
	0, 409, 410, 413, 414, 415, 416, 0, 418, 626,
	0, 419, 420, 421, 0, 0, 422, 423, 424, 425,
	426, 427, 430, 627, 432, 433, 434, 435, 436, 437,
	438, 668, 440, 441, 442, 443, 444, 445, 446, 630,
	631, 447, 449, 450, 632, 634, 635, 897, 465, 466,
	467, 468, 469, 470, 471, 473, 0, 475, 476, 477,
	636, 478, 479, 480, 481, 0, 482, 483, 484, 485,
	486, 488, 491, 492, 493, 494, 0, 497, 498, 499,
	500, 501, 502, 503, 505, 506, 507, 509, 510, 511,
	669, 512, 513, 514, 515, 639, 517, 518, 670, 520,
	521, 523, 524, 525, 526, 527, 528, 679, 874, 530,
	640, 531, 532, 533, 534, 535, 0, 537, 538, 539,
	540, 541, 542, 545, 546, 547, 549, 550, 642, 551,
	552, 0, 554, 555, 900, 557, 558, 559, 560, 561,
	0, 680, 562, 644, 563, 645, 564, 565, 566, 567,
	568, 569, 570, 572, 0, 0, 574, 575, 576, 578,
	579, 580, 581, 584, 585, 586, 587, 588, 0, 589,
	591, 593, 671, 648, 649, 650, 651, 652, 654, 655,
	656, 657, 594, 595, 611, 462, 456, 412, 454, 455,
	459, 460, 463, 275, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 3788, 305, 0, 0, 354, 391, 606, 0,
	0, 451, 0, 504, 508, 0, 597, 0, 0, 0,
	0, 362, 0, 0, 0, 0, 0, 0, 0, 573,
	0, 0, 0, 0, 293, 681, 596, 667, 0, 0,
	0, 458, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 495, 429, 646, 522, 300, 346, 333,
	375, 417, 529, 0, 0, 407, 577, 342, 431, 0,
	321, 464, 0, 553, 428, 0, 536, 556, 0, 448,
	327, 487, 543, 544, 0, 0, 0, 0, 0, 331,
	332, 453, 313, 461, 658, 624, 516, 474, 472, 0,
	439, 496, 653, 0, 0, 361, 0, 356, 452, 592,
	319, 571, 490, 457, 411, 519, 548, 358, 343, 344,
	387, 489, 377, 329, 582, 621, 625, 623, 619, 616,
	620, 617, 618, 622, 378, 615, 0, 590, 599, 633,
	613, 641, 598, 638, 608, 353, 637, 602, 601, 647,
	628, 629, 583, 643, 614, 612, 605, 604, 600, 0,
	278, 279, 280, 281, 282, 283, 284, 285, 286, 287,
	289, 0, 290, 291, 292, 294, 295, 296, 0, 297,
	298, 299, 302, 303, 304, 306, 666, 307, 308, 309,
	310, 311, 312, 603, 0, 314, 315, 316, 317, 318,
	320, 322, 323, 324, 325, 326, 328, 330, 0, 0,
	0, 0, 0, 0, 0, 334, 335, 336, 337, 338,
	339, 0, 340, 341, 345, 347, 348, 349, 350, 351,
	352, 355, 0, 357, 359, 0, 360, 363, 0, 364,
	365, 366, 367, 368, 369, 370, 371, 607, 372, 0,
	373, 374, 376, 0, 379, 380, 381, 382, 383, 0,
	384, 609, 610, 385, 386, 388, 389, 390, 392, 393,
	394, 395, 396, 397, 398, 399, 400, 401, 402, 403,
	0, 404, 405, 406, 408, 0, 409, 410, 413, 414,
	415, 416, 0, 418, 626, 0, 419, 420, 421, 0,
	0, 422, 423, 424, 425, 426, 427, 430, 627, 432,
	433, 434, 435, 436, 437, 438, 668, 440, 441, 442,
	443, 444, 445, 446, 630, 631, 447, 449, 450, 632,
	634, 635, 0, 465, 466, 467, 468, 469, 470, 471,
	473, 0, 475, 476, 477, 636, 478, 479, 480, 481,
	0, 482, 483, 484, 485, 486, 488, 491, 492, 493,
	494, 0, 497, 498, 499, 500, 501, 502, 503, 505,
	506, 507, 509, 510, 511, 669, 512, 513, 514, 515,
	639, 517, 518, 670, 520, 521, 523, 524, 525, 526,
	527, 528, 679, 0, 530, 640, 531, 532, 533, 534,
	535, 0, 537, 538, 539, 540, 541, 542, 545, 546,
	547, 549, 550, 642, 551, 552, 0, 554, 555, 0,
	557, 558, 559, 560, 561, 0, 680, 562, 644, 563,
	645, 564, 565, 566, 567, 568, 569, 570, 572, 0,
	0, 574, 575, 576, 578, 579, 580, 581, 584, 585,
	586, 587, 588, 0, 589, 591, 593, 671, 648, 649,
	650, 651, 652, 654, 655, 656, 657, 594, 595, 611,
	462, 456, 412, 454, 455, 459, 460, 463, 0, 875,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	882, 1179, 354, 1039, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 887,
	0, 893, 0, 899, 0, 573, 0, 889, 890, 895,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	891, 888, 892, 898, 886, 896, 883, 894, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	880, 885, 0, 901, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 879, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	881, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 872, 884, 0, 0,
	873, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 897, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 874,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 900, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 875, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 882, 0, 354, 1037, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 887, 0, 893, 0, 899, 0,
	573, 0, 889, 890, 895, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 891, 888, 892, 898, 886,
	896, 883, 894, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 880, 885, 0, 901, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 879,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 881, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 872, 884, 0, 0, 873, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 897, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 874, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	900, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 875,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	882, 0, 354, 1034, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 887,
	0, 893, 0, 899, 0, 573, 0, 889, 890, 895,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	891, 888, 892, 898, 886, 896, 883, 894, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	880, 885, 0, 901, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 879, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	881, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 872, 884, 0, 0,
	873, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 1032, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 897, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 874,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 900, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 875, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 882, 0, 354, 391, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 887, 0, 893, 0, 899, 0,
	573, 0, 889, 890, 895, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 891, 888, 892, 898, 886,
	896, 883, 894, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 880, 885, 0, 901, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 879,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 881, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 872, 884, 0, 0, 873, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 868, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 897, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 874, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	900, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 875,
	0, 0, 766, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	882, 0, 354, 391, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 1626, 0, 362, 0, 887,
	0, 893, 0, 899, 0, 573, 0, 889, 890, 895,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	891, 888, 892, 898, 886, 896, 883, 894, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	880, 885, 0, 901, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 879, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	881, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 884, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 897, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 900, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 0, 0, 354, 391, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	0, 2443, 354, 391, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 875, 0, 0, 766, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 882, 4315, 354, 391, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 887, 0, 893, 0, 899, 0,
	573, 0, 889, 890, 895, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 891, 888, 892, 898, 886,
	896, 883, 894, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 880, 885, 0, 901, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 879,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 881, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 884, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 897, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	900, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	0, 0, 354, 391, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 0, 3665, 354, 391, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 939,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	882, 1305, 354, 391, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 887,
	0, 893, 0, 899, 0, 573, 0, 889, 890, 895,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	891, 888, 892, 898, 886, 896, 883, 894, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	880, 885, 0, 901, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 879, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	881, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 884, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 897, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 900, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 875, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 882, 0, 354, 391, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 887, 0, 893, 0, 899, 0,
	573, 0, 889, 890, 895, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 891, 888, 892, 898, 886,
	896, 883, 894, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 880, 885, 0, 901, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 879,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 881, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 884, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 897, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	900, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 3205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	882, 0, 354, 391, 0, 0, 0, 451, 0, 504,
	508, 0, 0, 0, 0, 0, 0, 362, 0, 887,
	2639, 893, 0, 899, 0, 573, 0, 889, 890, 895,
	293, 1017, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	891, 888, 892, 898, 886, 896, 883, 894, 0, 495,
	429, 0, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	880, 885, 0, 901, 0, 331, 332, 453, 313, 461,
	0, 0, 516, 474, 472, 0, 439, 496, 0, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	378, 1019, 0, 590, 1022, 1010, 1002, 1003, 1004, 1005,
	1006, 1007, 0, 1024, 1025, 1026, 1027, 1028, 583, 1016,
	1018, 1001, 1008, 1009, 1011, 2642, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 879, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 0,
	881, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 884, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 0, 0, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	0, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 0, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	0, 0, 447, 449, 450, 0, 2640, 0, 897, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 0, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 0, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 2645, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 0,
	551, 552, 0, 554, 555, 900, 557, 558, 559, 560,
	561, 0, 680, 562, 0, 563, 0, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 0, 0, 0, 275, 0, 0,
	0, 0, 0, 594, 595, 2641, 462, 456, 412, 454,
	455, 459, 460, 463, 3200, 288, 0, 305, 0, 0,
	354, 2557, 606, 0, 0, 451, 0, 504, 508, 0,
	597, 0, 0, 0, 0, 362, 0, 0, 0, 0,
	0, 3198, 0, 573, 0, 0, 0, 0, 293, 681,
	596, 667, 0, 0, 0, 458, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 495, 429, 646,
	522, 300, 346, 333, 375, 417, 529, 0, 0, 407,
	577, 342, 431, 0, 321, 464, 0, 553, 428, 0,
	536, 556, 0, 448, 327, 487, 543, 544, 0, 0,
	2561, 0, 0, 331, 332, 453, 313, 461, 658, 624,
	516, 474, 472, 0, 439, 496, 653, 0, 0, 361,
	0, 356, 452, 592, 319, 571, 490, 457, 411, 519,
	548, 358, 343, 344, 387, 489, 377, 329, 582, 621,
	625, 623, 619, 616, 620, 617, 618, 622, 378, 615,
	0, 590, 599, 633, 613, 641, 598, 638, 608, 353,
	637, 602, 601, 647, 628, 629, 583, 643, 614, 612,
	605, 604, 600, 0, 278, 279, 280, 281, 282, 283,
	284, 285, 286, 287, 289, 0, 290, 291, 292, 294,
	295, 296, 0, 297, 298, 299, 302, 303, 304, 306,
	666, 307, 308, 309, 310, 311, 312, 603, 0, 314,
	315, 316, 317, 318, 320, 322, 323, 324, 325, 326,
	328, 330, 0, 0, 0, 0, 0, 0, 0, 334,
	335, 336, 337, 338, 339, 0, 340, 341, 345, 347,
	348, 349, 350, 351, 352, 355, 0, 357, 359, 0,
	360, 363, 0, 2567, 365, 366, 367, 368, 369, 370,
	371, 607, 372, 0, 373, 374, 376, 2566, 379, 380,
	381, 382, 383, 0, 384, 609, 610, 385, 386, 388,
	389, 390, 392, 393, 394, 395, 396, 397, 398, 399,
	400, 401, 402, 403, 0, 404, 405, 406, 408, 0,
	409, 410, 413, 414, 415, 416, 0, 418, 626, 0,
	419, 420, 421, 0, 0, 422, 423, 424, 425, 426,
	427, 430, 627, 432, 433, 434, 435, 436, 437, 438,
	668, 440, 441, 442, 443, 444, 445, 446, 630, 631,
	447, 449, 450, 632, 634, 635, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 0, 475, 476, 477, 636,
	478, 479, 480, 481, 2565, 482, 483, 484, 485, 486,
	488, 491, 492, 493, 494, 0, 497, 498, 499, 500,
	501, 502, 503, 505, 506, 507, 509, 510, 511, 669,
	512, 513, 514, 515, 639, 517, 518, 670, 520, 521,
	523, 524, 525, 526, 527, 528, 679, 0, 530, 640,
	531, 532, 533, 534, 535, 0, 537, 538, 539, 540,
	541, 542, 545, 546, 547, 549, 550, 642, 551, 552,
	0, 554, 555, 0, 557, 558, 559, 560, 561, 0,
	680, 562, 644, 563, 645, 564, 565, 566, 567, 568,
	569, 570, 572, 0, 2564, 574, 575, 576, 578, 579,
	580, 581, 584, 585, 586, 587, 588, 0, 589, 591,
	593, 671, 648, 649, 650, 651, 652, 654, 655, 656,
	657, 594, 595, 611, 462, 456, 412, 454, 455, 459,
	460, 463, 275, 0, 0, 0, 2563, 2558, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 0, 305, 0, 0, 354, 391, 606, 0, 0,
	451, 0, 504, 508, 0, 597, 0, 0, 0, 0,
	362, 0, 0, 0, 3162, 0, 0, 0, 573, 0,
	0, 0, 0, 293, 681, 596, 667, 0, 0, 0,
	458, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 495, 429, 646, 522, 300, 346, 333, 375,
	417, 529, 0, 0, 407, 577, 342, 431, 0, 321,
	464, 0, 553, 428, 0, 536, 556, 0, 448, 327,
	487, 543, 544, 0, 0, 2561, 0, 0, 331, 332,
	453, 313, 461, 658, 624, 516, 474, 472, 0, 439,
	496, 653, 0, 0, 361, 0, 356, 452, 592, 319,
	571, 490, 457, 411, 519, 548, 358, 343, 344, 387,
	489, 377, 329, 582, 621, 625, 623, 619, 616, 620,
	617, 618, 622, 378, 615, 0, 590, 599, 633, 613,
	641, 598, 638, 608, 353, 637, 602, 601, 647, 628,
	629, 583, 643, 614, 612, 605, 604, 600, 0, 278,
	279, 280, 281, 282, 283, 284, 285, 286, 287, 289,
	0, 290, 291, 292, 294, 295, 296, 0, 297, 298,
	299, 302, 303, 304, 306, 666, 307, 308, 309, 310,
	311, 312, 603, 0, 314, 315, 316, 317, 318, 320,
	322, 323, 324, 325, 326, 328, 330, 0, 0, 0,
	0, 0, 0, 0, 334, 335, 336, 337, 338, 339,
	0, 340, 341, 345, 347, 348, 349, 350, 351, 352,
	355, 0, 357, 359, 0, 360, 363, 0, 2567, 365,
	366, 367, 368, 369, 370, 371, 607, 372, 0, 373,
	374, 376, 2566, 379, 380, 381, 382, 383, 0, 384,
	609, 610, 385, 386, 388, 389, 390, 392, 393, 394,
	395, 396, 397, 398, 399, 400, 401, 402, 403, 0,
	404, 405, 406, 408, 0, 409, 410, 413, 414, 415,
	416, 0, 418, 626, 0, 419, 420, 421, 0, 0,
	422, 423, 424, 425, 426, 427, 430, 627, 432, 433,
	434, 435, 436, 437, 438, 668, 440, 441, 442, 443,
	444, 445, 446, 630, 631, 447, 449, 450, 632, 634,
	635, 0, 465, 466, 467, 468, 469, 470, 471, 473,
	0, 475, 476, 477, 636, 478, 479, 480, 481, 2565,
	482, 483, 484, 485, 486, 488, 491, 492, 493, 494,
	0, 497, 498, 499, 500, 501, 502, 503, 505, 506,
	507, 509, 510, 511, 669, 512, 513, 514, 515, 639,
	517, 518, 670, 520, 521, 523, 524, 525, 526, 527,
	528, 679, 0, 530, 640, 531, 532, 533, 534, 535,
	0, 537, 538, 539, 540, 541, 542, 545, 546, 547,
	549, 550, 642, 551, 552, 0, 554, 555, 0, 557,
	558, 559, 560, 561, 0, 680, 562, 644, 563, 645,
	564, 565, 566, 567, 568, 569, 570, 572, 0, 2564,
	574, 575, 576, 578, 579, 580, 581, 584, 585, 586,
	587, 588, 0, 589, 591, 593, 671, 648, 649, 650,
	651, 652, 654, 655, 656, 657, 594, 595, 611, 462,
	456, 412, 454, 455, 459, 460, 463, 275, 0, 0,
	0, 2563, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 0, 305, 0, 0,
	354, 391, 606, 0, 0, 451, 0, 504, 508, 0,
	597, 0, 0, 0, 0, 362, 0, 0, 0, 0,
	0, 0, 0, 573, 0, 0, 0, 0, 293, 681,
	596, 667, 0, 0, 0, 458, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 495, 429, 646,
	522, 300, 346, 333, 375, 417, 529, 0, 0, 407,
	577, 342, 431, 0, 321, 464, 0, 553, 428, 0,
	536, 556, 0, 448, 327, 487, 543, 544, 0, 0,
	2561, 0, 0, 331, 332, 453, 313, 461, 658, 624,
	516, 474, 472, 0, 439, 496, 653, 0, 0, 361,
	0, 356, 452, 592, 319, 571, 490, 457, 411, 519,
	548, 358, 343, 344, 387, 489, 377, 329, 582, 621,
	625, 623, 619, 616, 620, 617, 618, 622, 378, 615,
	0, 590, 599, 633, 613, 641, 598, 638, 608, 353,
	637, 602, 601, 647, 628, 629, 583, 643, 614, 612,
	605, 604, 600, 0, 278, 279, 280, 281, 282, 283,
	284, 285, 286, 287, 289, 0, 290, 291, 292, 294,
	295, 296, 0, 297, 298, 299, 302, 303, 304, 306,
	666, 307, 308, 309, 310, 311, 312, 603, 0, 314,
	315, 316, 317, 318, 320, 322, 323, 324, 325, 326,
	328, 330, 0, 0, 0, 0, 0, 0, 0, 334,
	335, 336, 337, 338, 339, 0, 340, 341, 345, 347,
	348, 349, 350, 351, 352, 355, 0, 357, 359, 0,
	360, 363, 0, 2567, 365, 366, 367, 368, 369, 370,
	371, 607, 372, 0, 373, 374, 376, 2566, 379, 380,
	381, 382, 383, 0, 384, 609, 610, 385, 386, 388,
	389, 390, 392, 393, 394, 395, 396, 397, 398, 399,
	400, 401, 402, 403, 0, 404, 405, 406, 408, 0,
	409, 410, 413, 414, 415, 416, 0, 418, 626, 0,
	419, 420, 421, 0, 0, 422, 423, 424, 425, 426,
	427, 430, 627, 432, 433, 434, 435, 436, 437, 438,
	668, 440, 441, 442, 443, 444, 445, 446, 630, 631,
	447, 449, 450, 632, 634, 635, 0, 465, 466, 467,
	468, 469, 470, 471, 473, 0, 475, 476, 477, 636,
	478, 479, 480, 481, 2565, 482, 483, 484, 485, 486,
	488, 491, 492, 493, 494, 0, 497, 498, 499, 500,
	501, 502, 503, 505, 506, 507, 509, 510, 511, 669,
	512, 513, 514, 515, 639, 517, 518, 670, 520, 521,
	523, 524, 525, 526, 527, 528, 679, 0, 530, 640,
	531, 532, 533, 534, 535, 0, 537, 538, 539, 540,
	541, 542, 545, 546, 547, 549, 550, 642, 551, 552,
	0, 554, 555, 0, 557, 558, 559, 560, 561, 0,
	680, 562, 644, 563, 645, 564, 565, 566, 567, 568,
	569, 570, 572, 0, 2564, 574, 575, 576, 578, 579,
	580, 581, 584, 585, 586, 587, 588, 0, 589, 591,
	593, 671, 648, 649, 650, 651, 652, 654, 655, 656,
	657, 594, 595, 611, 462, 456, 412, 454, 455, 459,
	460, 463, 1020, 0, 0, 0, 2563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 0, 305, 882, 0, 354, 391, 0, 0, 0,
	451, 0, 504, 508, 0, 0, 0, 0, 0, 0,
	362, 0, 887, 2639, 893, 0, 899, 0, 573, 0,
	889, 890, 895, 293, 1017, 596, 667, 0, 0, 0,
	458, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 891, 888, 892, 898, 886, 896, 883,
	894, 0, 495, 429, 0, 522, 300, 346, 333, 375,
	417, 529, 0, 0, 407, 577, 342, 431, 0, 321,
	464, 0, 553, 428, 0, 536, 556, 0, 448, 327,
	487, 543, 544, 880, 885, 0, 901, 0, 331, 332,
	453, 313, 461, 0, 0, 516, 474, 472, 0, 439,
	496, 0, 0, 0, 361, 0, 356, 452, 592, 319,
	571, 490, 457, 411, 519, 548, 358, 343, 344, 387,
	489, 377, 329, 582, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 378, 1019, 0, 590, 1022, 1010, 1002,
	1003, 1004, 1005, 1006, 1007, 0, 1024, 1025, 1026, 1027,
	1028, 583, 1016, 1018, 1001, 1008, 1009, 1011, 2642, 278,
	279, 280, 281, 282, 283, 284, 285, 286, 287, 289,
	0, 290, 291, 292, 294, 295, 296, 879, 297, 298,
	299, 302, 303, 304, 306, 666, 307, 308, 309, 310,
	311, 312, 0, 881, 314, 315, 316, 317, 318, 320,
	322, 323, 324, 325, 326, 328, 330, 0, 0, 0,
	884, 0, 0, 0, 334, 335, 336, 337, 338, 339,
	0, 340, 341, 345, 347, 348, 349, 350, 351, 352,
	355, 0, 357, 359, 0, 360, 363, 0, 364, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 0, 373,
	374, 376, 0, 379, 380, 381, 382, 383, 0, 384,
	0, 0, 385, 386, 388, 389, 390, 392, 393, 394,
	395, 396, 397, 398, 399, 400, 401, 402, 403, 0,
	404, 405, 406, 408, 0, 409, 410, 413, 414, 415,
	416, 0, 418, 0, 0, 419, 420, 421, 0, 0,
	422, 423, 424, 425, 426, 427, 430, 0, 432, 433,
	434, 435, 436, 437, 438, 668, 440, 441, 442, 443,
	444, 445, 446, 0, 0, 447, 449, 450, 0, 2640,
	0, 897, 465, 466, 467, 468, 469, 470, 471, 473,
	0, 475, 476, 477, 0, 478, 479, 480, 481, 0,
	482, 483, 484, 485, 486, 488, 491, 492, 493, 494,
	0, 497, 498, 499, 500, 501, 502, 503, 505, 506,
	507, 509, 510, 511, 669, 512, 513, 514, 515, 0,
	517, 518, 670, 520, 521, 523, 524, 525, 526, 527,
	528, 679, 0, 530, 2645, 531, 532, 533, 534, 535,
	0, 537, 538, 539, 540, 541, 542, 545, 546, 547,
	549, 550, 0, 551, 552, 0, 554, 555, 900, 557,
	558, 559, 560, 561, 0, 680, 562, 0, 563, 0,
	564, 565, 566, 567, 568, 569, 570, 572, 0, 0,
	574, 575, 576, 578, 579, 580, 581, 584, 585, 586,
	587, 588, 0, 589, 591, 593, 671, 0, 0, 0,
	0, 1020, 0, 0, 0, 0, 594, 595, 2641, 462,
	456, 412, 454, 455, 459, 460, 463, 0, 0, 288,
	0, 305, 882, 0, 354, 391, 0, 0, 0, 451,
	0, 504, 508, 0, 0, 0, 0, 0, 0, 362,
	3185, 887, 2639, 893, 0, 899, 0, 573, 0, 889,
	890, 895, 293, 1017, 596, 667, 0, 0, 0, 458,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 891, 888, 892, 898, 886, 896, 883, 894,
	0, 495, 429, 0, 522, 300, 346, 333, 375, 417,
	529, 0, 0, 407, 577, 342, 431, 0, 321, 464,
	0, 553, 428, 0, 536, 556, 0, 448, 327, 487,
	543, 544, 880, 885, 0, 901, 0, 331, 332, 453,
	313, 461, 0, 0, 516, 474, 472, 0, 439, 496,
	0, 0, 0, 361, 0, 356, 452, 592, 319, 571,
	490, 457, 411, 519, 548, 358, 343, 344, 387, 489,
	377, 329, 582, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 378, 1019, 0, 590, 1022, 1010, 1002, 1003,
	1004, 1005, 1006, 1007, 0, 1024, 1025, 1026, 1027, 1028,
	583, 1016, 1018, 1001, 1008, 1009, 1011, 2642, 278, 279,
	280, 281, 282, 283, 284, 285, 286, 287, 289, 0,
	290, 291, 292, 294, 295, 296, 879, 297, 298, 299,
	302, 303, 304, 306, 666, 307, 308, 309, 310, 311,
	312, 0, 881, 314, 315, 316, 317, 318, 320, 322,
	323, 324, 325, 326, 328, 330, 0, 0, 0, 884,
	0, 0, 0, 334, 335, 336, 337, 338, 339, 0,
	340, 341, 345, 347, 348, 349, 350, 351, 352, 355,
	0, 357, 359, 0, 360, 363, 0, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 0, 373, 374,
	376, 0, 379, 380, 381, 382, 383, 0, 384, 0,
	0, 385, 386, 388, 389, 390, 392, 393, 394, 395,
	396, 397, 398, 399, 400, 401, 402, 403, 0, 404,
	405, 406, 408, 0, 409, 410, 413, 414, 415, 416,
	0, 418, 0, 0, 419, 420, 421, 0, 0, 422,
	423, 424, 425, 426, 427, 430, 0, 432, 433, 434,
	435, 436, 437, 438, 668, 440, 441, 442, 443, 444,
	445, 446, 0, 0, 447, 449, 450, 0, 2640, 0,
	897, 465, 466, 467, 468, 469, 470, 471, 473, 0,
	475, 476, 477, 0, 478, 479, 480, 481, 0, 482,
	483, 484, 485, 486, 488, 491, 492, 493, 494, 0,
	497, 498, 499, 500, 501, 502, 503, 505, 506, 507,
	509, 510, 511, 669, 512, 513, 514, 515, 0, 517,
	518, 670, 520, 521, 523, 524, 525, 526, 527, 528,
	679, 0, 530, 2645, 531, 532, 533, 534, 535, 0,
	537, 538, 539, 540, 541, 542, 545, 546, 547, 549,
	550, 0, 551, 552, 0, 554, 555, 900, 557, 558,
	559, 560, 561, 0, 680, 562, 0, 563, 0, 564,
	565, 566, 567, 568, 569, 570, 572, 0, 0, 574,
	575, 576, 578, 579, 580, 581, 584, 585, 586, 587,
	588, 0, 589, 591, 593, 671, 0, 0, 0, 275,
	0, 0, 0, 0, 0, 594, 595, 2641, 462, 456,
	412, 454, 455, 459, 460, 463, 689, 694, 0, 305,
	0, 693, 354, 391, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 2634,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 691, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 3495, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 692, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 689, 694, 0, 305, 0, 693, 354, 391, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 691, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	697, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 692, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 689, 694, 0, 305,
	0, 693, 354, 391, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 691, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 692, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2534, 288, 0, 305, 0, 0, 354, 391, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 790, 2537, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 2541, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 2538, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1677, 288, 0, 305,
	0, 0, 354, 391, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 1663, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 1669, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 1670, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 1665,
	379, 1666, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 1671, 1672, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 1673, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	1667, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 1668, 515, 639, 517, 518, 1674,
	520, 521, 523, 524, 1664, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 1675, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 1676,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 0, 0, 354, 391, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 790, 2537, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 2541, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 2538, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 694, 0, 305,
	0, 693, 354, 391, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 691, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 692, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3338, 288, 0, 305, 0, 0, 354, 391, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 3339, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3329, 288, 0, 305,
	0, 0, 354, 391, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 3330, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 922, 288, 0, 305, 0, 0, 354, 921, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 790, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	0, 0, 354, 391, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 790, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 0, 0, 354, 391, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	4811, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 3788, 305,
	0, 0, 354, 391, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 0, 0, 354, 391, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	4460, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	0, 0, 354, 391, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 4444, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 3800, 305, 0, 0, 354, 391, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	0, 0, 354, 391, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 4005, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 752, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 0, 0, 354, 391, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	0, 0, 354, 391, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 2926, 0, 0, 0, 458, 0, 0,
	0, 0, 2929, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 2927, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 2925, 558, 2924, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 2928, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 665, 288, 0, 305, 0, 0, 354, 391, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	0, 0, 354, 1455, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 790, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1453, 288, 0, 305, 0, 0, 354, 1452, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1153, 288, 0, 305,
	0, 0, 354, 391, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 0, 0, 354, 391, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 268, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 1052,
	297, 298, 299, 302, 303, 304, 306, 269, 307, 1051,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 271, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 272, 512, 513, 514,
	515, 639, 517, 518, 270, 520, 521, 523, 524, 525,
	526, 527, 528, 1049, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 264, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 273, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 925, 288, 0, 305,
	0, 0, 354, 924, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 759, 288, 0, 305, 0, 0, 354, 391, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 758, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 755, 288, 0, 305,
	0, 0, 354, 391, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 722, 288, 0, 305, 0, 0, 354, 391, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 719, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 721, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 720, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 665, 288, 0, 305,
	0, 0, 354, 391, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 661, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 663, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 662, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 0, 0, 354, 391, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 5674, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	0, 0, 354, 391, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 0, 0, 354, 4380, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	0, 0, 354, 3468, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 0, 0, 354, 391, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 268, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 269, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 271, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 272, 512, 513, 514,
	515, 639, 517, 518, 270, 520, 521, 523, 524, 525,
	526, 527, 528, 1049, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 264, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 273, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	0, 0, 354, 3409, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 0, 0, 354, 3317, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	0, 0, 354, 3315, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 0, 0, 354, 3301, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	0, 0, 354, 391, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 268, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 269, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 271, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 272, 512, 513, 514, 515, 639, 517, 518, 270,
	520, 521, 523, 524, 525, 526, 527, 528, 2677, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 2678, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 273, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 0, 0, 354, 2525, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	0, 0, 354, 2466, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 0, 0, 354, 391, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 1656, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	0, 0, 354, 1610, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 0, 0, 354, 1375, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	0, 0, 354, 1336, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 0, 0, 354, 1331, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 1325, 305,
	0, 0, 354, 391, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 0, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 0, 0, 354, 987, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	0, 0, 354, 983, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 0, 0, 354, 980, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	0, 0, 354, 975, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 0, 0, 354, 956, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	0, 0, 354, 929, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 0, 0, 354, 927, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	0, 0, 354, 908, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 0, 0, 354, 867, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	0, 0, 354, 863, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 0, 0, 354, 861, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	0, 0, 354, 836, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 680, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 0, 0, 354, 391, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 793, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	0, 0, 354, 391, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 681, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 639, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 684, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 0, 0, 354, 391, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 516, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 682, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	0, 0, 354, 391, 606, 0, 0, 451, 0, 504,
	508, 0, 597, 0, 0, 0, 0, 362, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 0, 0, 0,
	293, 268, 596, 262, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	429, 646, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	0, 0, 0, 0, 0, 331, 332, 453, 313, 461,
	658, 624, 516, 474, 472, 0, 439, 496, 653, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 621, 625, 623, 619, 616, 620, 617, 618, 622,
	378, 615, 0, 590, 599, 633, 613, 641, 598, 638,
	608, 353, 637, 602, 601, 647, 628, 629, 583, 643,
	614, 612, 605, 604, 600, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 0, 297, 298, 299, 302, 303,
	304, 306, 269, 307, 308, 309, 310, 311, 312, 603,
	0, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 0, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 607, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 609, 610, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	626, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 627, 432, 433, 434, 435, 436,
	437, 438, 271, 440, 441, 442, 443, 444, 445, 446,
	630, 631, 447, 449, 450, 632, 634, 635, 0, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 636, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 272, 512, 513, 514, 515, 639, 517, 518, 270,
	520, 521, 523, 524, 525, 526, 527, 528, 263, 0,
	530, 640, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 642,
	551, 552, 0, 554, 555, 0, 557, 558, 559, 560,
	561, 0, 264, 562, 644, 563, 645, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 273, 648, 649, 650, 651, 652, 654,
	655, 656, 657, 594, 595, 611, 462, 456, 412, 454,
	455, 459, 460, 463, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 305, 0, 0, 354, 391, 606,
	0, 0, 451, 0, 504, 508, 0, 597, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 293, 681, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 429, 646, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 0, 0, 0, 0, 0,
	331, 332, 453, 313, 461, 658, 624, 0, 474, 472,
	0, 439, 496, 653, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 621, 625, 623, 619,
	616, 620, 617, 618, 622, 378, 615, 0, 590, 599,
	633, 613, 641, 598, 638, 608, 353, 637, 602, 601,
	647, 628, 629, 583, 643, 614, 612, 605, 604, 600,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 0,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 603, 0, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 607, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 609, 610, 0, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 626, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 627,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 630, 631, 447, 449, 450,
	632, 634, 635, 0, 465, 466, 467, 468, 469, 470,
	0, 473, 0, 475, 476, 477, 636, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 0, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 639, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 640, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 642, 551, 552, 0, 554, 555,
	0, 557, 558, 559, 560, 561, 0, 680, 562, 644,
	563, 645, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 648,
	649, 650, 651, 652, 654, 655, 656, 657, 594, 595,
	611, 462, 456, 412, 454, 455, 459, 460, 463, 1020,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 305,
	882, 0, 354, 391, 0, 0, 0, 451, 0, 504,
	508, 0, 0, 0, 0, 0, 0, 362, 0, 887,
	2639, 893, 0, 899, 0, 573, 0, 889, 890, 895,
	293, 1017, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	891, 888, 892, 898, 886, 896, 883, 894, 0, 495,
	429, 0, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	880, 885, 0, 901, 0, 331, 332, 453, 313, 461,
	0, 0, 516, 474, 472, 0, 439, 496, 0, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	378, 1019, 0, 590, 1022, 1010, 1002, 1003, 1004, 1005,
	1006, 1007, 0, 1024, 1025, 1026, 1027, 1028, 583, 1016,
	1018, 1001, 1008, 1009, 1011, 2642, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 879, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 0,
	881, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 884, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 0, 0, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	0, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 0, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	0, 0, 447, 449, 450, 0, 2640, 0, 897, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 0, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 0, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 2645, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 0,
	551, 552, 0, 554, 555, 900, 557, 558, 559, 560,
	561, 0, 680, 562, 0, 563, 0, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 0, 0, 1020, 0, 0, 0,
	0, 0, 0, 594, 595, 2641, 462, 456, 412, 454,
	455, 459, 460, 463, 288, 0, 305, 882, 0, 354,
	391, 0, 0, 0, 451, 0, 504, 508, 0, 0,
	0, 0, 0, 0, 362, 0, 887, 0, 893, 2667,
	899, 0, 573, 0, 889, 890, 895, 293, 1017, 596,
	667, 0, 0, 0, 458, 0, 0, 0, 0, 3837,
	0, 0, 301, 0, 0, 0, 0, 891, 888, 892,
	898, 886, 896, 883, 894, 0, 495, 429, 0, 522,
	300, 346, 333, 375, 417, 529, 0, 0, 407, 577,
	342, 431, 0, 321, 464, 0, 553, 428, 0, 536,
	556, 0, 448, 327, 487, 543, 544, 880, 885, 0,
	901, 0, 331, 332, 453, 313, 461, 0, 0, 516,
	474, 472, 0, 439, 496, 0, 0, 0, 361, 0,
	356, 452, 592, 319, 571, 490, 457, 411, 519, 548,
	358, 343, 344, 387, 489, 377, 329, 582, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 378, 1019, 0,
	590, 1022, 1010, 1002, 1003, 1004, 1005, 1006, 1007, 0,
	1024, 1025, 1026, 1027, 1028, 583, 1016, 1018, 1001, 1008,
	1009, 1011, 0, 278, 279, 280, 281, 282, 283, 284,
	285, 286, 287, 289, 0, 290, 291, 292, 294, 295,
	296, 879, 297, 298, 299, 302, 303, 304, 306, 666,
	307, 308, 309, 310, 311, 312, 0, 881, 314, 315,
	316, 317, 318, 320, 322, 323, 324, 325, 326, 328,
	330, 0, 0, 0, 884, 0, 0, 0, 334, 335,
	336, 337, 338, 339, 0, 340, 341, 345, 347, 348,
	349, 350, 351, 352, 355, 0, 357, 359, 0, 360,
	363, 0, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 0, 373, 374, 376, 0, 379, 380, 381,
	382, 383, 0, 384, 0, 0, 385, 386, 388, 389,
	390, 392, 393, 394, 395, 396, 397, 398, 399, 400,
	401, 402, 403, 0, 404, 405, 406, 408, 0, 409,
	410, 413, 414, 415, 416, 0, 418, 0, 0, 419,
	420, 421, 0, 0, 422, 423, 424, 425, 426, 427,
	430, 0, 432, 433, 434, 435, 436, 437, 438, 668,
	440, 441, 442, 443, 444, 445, 446, 0, 0, 447,
	449, 450, 0, 0, 0, 897, 465, 466, 467, 468,
	469, 470, 471, 473, 0, 475, 476, 477, 0, 478,
	479, 480, 481, 0, 482, 483, 484, 485, 486, 488,
	491, 492, 493, 494, 0, 497, 498, 499, 500, 501,
	502, 503, 505, 506, 507, 509, 510, 511, 669, 512,
	513, 514, 515, 0, 517, 518, 670, 520, 521, 523,
	524, 525, 526, 527, 528, 679, 0, 530, 2645, 531,
	532, 533, 534, 535, 0, 537, 538, 539, 540, 541,
	542, 545, 546, 547, 549, 550, 0, 551, 552, 0,
	554, 555, 900, 557, 558, 559, 560, 561, 0, 680,
	562, 0, 563, 0, 564, 565, 566, 567, 568, 569,
	570, 572, 0, 0, 574, 575, 576, 578, 579, 580,
	581, 584, 585, 586, 587, 588, 0, 589, 591, 593,
	671, 0, 0, 1020, 0, 0, 0, 0, 0, 0,
	594, 595, 0, 462, 456, 412, 454, 455, 459, 460,
	463, 288, 0, 305, 882, 0, 354, 391, 0, 0,
	0, 451, 0, 504, 508, 0, 0, 0, 0, 0,
	0, 362, 0, 887, 0, 893, 0, 899, 0, 573,
	0, 889, 890, 895, 293, 1017, 596, 667, 0, 0,
	0, 458, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 891, 888, 892, 898, 886, 896,
	883, 894, 0, 495, 429, 0, 522, 300, 346, 333,
	375, 417, 529, 0, 0, 407, 577, 342, 431, 0,
	321, 464, 0, 553, 428, 0, 536, 556, 0, 448,
	327, 487, 543, 544, 880, 885, 0, 901, 0, 331,
	332, 453, 313, 461, 0, 0, 516, 474, 472, 5708,
	439, 496, 0, 0, 0, 361, 0, 356, 452, 592,
	319, 571, 490, 457, 411, 519, 548, 358, 343, 344,
	387, 489, 377, 329, 582, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 378, 1019, 0, 590, 1022, 1010,
	1002, 1003, 1004, 1005, 1006, 1007, 0, 1024, 1025, 1026,
	1027, 1028, 583, 1016, 1018, 1001, 1008, 1009, 1011, 0,
	278, 279, 280, 281, 282, 283, 284, 285, 286, 287,
	289, 0, 290, 291, 292, 294, 295, 296, 879, 297,
	298, 299, 302, 303, 304, 306, 666, 307, 308, 309,
	310, 311, 312, 0, 881, 314, 315, 316, 317, 318,
	320, 322, 323, 324, 325, 326, 328, 330, 0, 0,
	0, 884, 0, 0, 0, 334, 335, 336, 337, 338,
	339, 0, 340, 341, 345, 347, 348, 349, 350, 351,
	352, 355, 0, 357, 359, 0, 360, 363, 0, 364,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 0,
	373, 374, 376, 0, 379, 380, 381, 382, 383, 0,
	384, 0, 0, 385, 386, 388, 389, 390, 392, 393,
	394, 395, 396, 397, 398, 399, 400, 401, 402, 403,
	0, 404, 405, 406, 408, 0, 409, 410, 413, 414,
	415, 416, 0, 418, 0, 0, 419, 420, 421, 0,
	0, 422, 423, 424, 425, 426, 427, 430, 0, 432,
	433, 434, 435, 436, 437, 438, 668, 440, 441, 442,
	443, 444, 445, 446, 0, 0, 447, 449, 450, 0,
	0, 0, 897, 465, 466, 467, 468, 469, 470, 471,
	473, 0, 475, 476, 477, 0, 478, 479, 480, 481,
	0, 482, 483, 484, 485, 486, 488, 491, 492, 493,
	494, 0, 497, 498, 499, 500, 501, 502, 503, 505,
	506, 507, 509, 510, 511, 669, 512, 513, 514, 515,
	0, 517, 518, 670, 520, 521, 523, 524, 525, 526,
	527, 528, 679, 0, 530, 992, 531, 532, 533, 534,
	535, 0, 537, 538, 539, 540, 541, 542, 545, 546,
	547, 549, 550, 0, 551, 552, 0, 554, 555, 900,
	557, 558, 559, 560, 561, 0, 680, 562, 0, 563,
	0, 564, 565, 566, 567, 568, 569, 570, 572, 0,
	0, 574, 575, 576, 578, 579, 580, 581, 584, 585,
	586, 587, 588, 0, 589, 591, 593, 671, 0, 0,
	1020, 0, 0, 0, 0, 0, 0, 594, 595, 0,
	462, 456, 412, 454, 455, 459, 460, 463, 288, 0,
	305, 882, 0, 354, 391, 0, 0, 0, 451, 0,
	504, 508, 0, 0, 0, 0, 0, 0, 362, 0,
	887, 0, 893, 0, 899, 0, 573, 0, 889, 890,
	895, 293, 1017, 596, 667, 0, 0, 0, 458, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 0,
	0, 891, 888, 892, 898, 886, 896, 883, 894, 0,
	495, 429, 0, 522, 300, 346, 333, 375, 417, 529,
	0, 0, 407, 577, 342, 431, 0, 321, 464, 0,
	553, 428, 0, 536, 556, 0, 448, 327, 487, 543,
	544, 880, 885, 0, 901, 0, 331, 332, 453, 313,
	461, 0, 0, 516, 474, 472, 5379, 439, 496, 0,
	0, 0, 361, 0, 356, 452, 592, 319, 571, 490,
	457, 411, 519, 548, 358, 343, 344, 387, 489, 377,
	329, 582, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 378, 1019, 0, 590, 1022, 1010, 1002, 1003, 1004,
	1005, 1006, 1007, 0, 1024, 1025, 1026, 1027, 1028, 583,
	1016, 1018, 1001, 1008, 1009, 1011, 0, 278, 279, 280,
	281, 282, 283, 284, 285, 286, 287, 289, 0, 290,
	291, 292, 294, 295, 296, 879, 297, 298, 299, 302,
	303, 304, 306, 666, 307, 308, 309, 310, 311, 312,
	0, 881, 314, 315, 316, 317, 318, 320, 322, 323,
	324, 325, 326, 328, 330, 0, 0, 0, 884, 0,
	0, 0, 334, 335, 336, 337, 338, 339, 0, 340,
	341, 345, 347, 348, 349, 350, 351, 352, 355, 0,
	357, 359, 0, 360, 363, 0, 364, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 0, 373, 374, 376,
	0, 379, 380, 381, 382, 383, 0, 384, 0, 0,
	385, 386, 388, 389, 390, 392, 393, 394, 395, 396,
	397, 398, 399, 400, 401, 402, 403, 0, 404, 405,
	406, 408, 0, 409, 410, 413, 414, 415, 416, 0,
	418, 0, 0, 419, 420, 421, 0, 0, 422, 423,
	424, 425, 426, 427, 430, 0, 432, 433, 434, 435,
	436, 437, 438, 668, 440, 441, 442, 443, 444, 445,
	446, 0, 0, 447, 449, 450, 0, 0, 0, 897,
	465, 466, 467, 468, 469, 470, 471, 473, 0, 475,
	476, 477, 0, 478, 479, 480, 481, 0, 482, 483,
	484, 485, 486, 488, 491, 492, 493, 494, 0, 497,
	498, 499, 500, 501, 502, 503, 505, 506, 507, 509,
	510, 511, 669, 512, 513, 514, 515, 0, 517, 518,
	670, 520, 521, 523, 524, 525, 526, 527, 528, 679,
	0, 530, 992, 531, 532, 533, 534, 535, 0, 537,
	538, 539, 540, 541, 542, 545, 546, 547, 549, 550,
	0, 551, 552, 0, 554, 555, 900, 557, 558, 559,
	560, 561, 0, 680, 562, 0, 563, 0, 564, 565,
	566, 567, 568, 569, 570, 572, 0, 0, 574, 575,
	576, 578, 579, 580, 581, 584, 585, 586, 587, 588,
	0, 589, 591, 593, 671, 0, 0, 1020, 0, 0,
	0, 0, 0, 0, 594, 595, 0, 462, 456, 412,
	454, 455, 459, 460, 463, 288, 0, 305, 882, 0,
	354, 391, 0, 0, 0, 451, 0, 504, 508, 0,
	0, 0, 0, 0, 0, 362, 0, 887, 0, 893,
	0, 899, 0, 573, 0, 889, 890, 895, 293, 1017,
	596, 667, 0, 0, 0, 458, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 891, 888,
	892, 898, 886, 896, 883, 894, 0, 495, 429, 0,
	522, 300, 346, 333, 375, 417, 529, 0, 0, 407,
	577, 342, 431, 0, 321, 464, 0, 553, 428, 0,
	536, 556, 0, 448, 327, 487, 543, 544, 880, 885,
	0, 901, 0, 331, 332, 453, 313, 461, 0, 0,
	516, 474, 472, 0, 439, 496, 0, 0, 0, 361,
	0, 356, 452, 592, 319, 571, 490, 457, 411, 519,
	548, 358, 343, 344, 387, 489, 377, 329, 582, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 378, 1019,
	0, 590, 1022, 1010, 1002, 1003, 1004, 1005, 1006, 1007,
	0, 1024, 1025, 1026, 1027, 1028, 583, 1016, 1018, 1001,
	1008, 1009, 1011, 0, 278, 279, 280, 281, 282, 283,
	284, 285, 286, 287, 289, 0, 290, 291, 292, 294,
	295, 296, 879, 297, 298, 299, 302, 303, 304, 306,
	666, 307, 308, 309, 310, 311, 312, 0, 881, 314,
	315, 316, 317, 318, 320, 322, 323, 324, 325, 326,
	328, 330, 0, 0, 0, 884, 0, 0, 0, 334,
	335, 336, 337, 338, 339, 0, 340, 341, 345, 347,
	348, 349, 350, 351, 352, 355, 0, 357, 359, 0,
	360, 363, 0, 364, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 0, 373, 374, 376, 0, 379, 380,
	381, 382, 383, 0, 384, 0, 0, 385, 386, 388,
	389, 390, 392, 393, 394, 395, 396, 397, 398, 399,
	400, 401, 402, 403, 0, 404, 405, 406, 408, 0,
	409, 410, 413, 414, 415, 416, 0, 418, 0, 0,
	419, 420, 421, 0, 0, 422, 423, 424, 425, 426,
	427, 430, 0, 432, 433, 434, 435, 436, 437, 438,
	668, 440, 441, 442, 443, 444, 445, 446, 5135, 0,
	447, 449, 450, 0, 0, 0, 897, 465, 466, 467,
	468, 469, 470, 471, 473, 0, 475, 476, 477, 0,
	478, 479, 480, 481, 0, 482, 483, 484, 485, 486,
	488, 491, 492, 493, 494, 0, 497, 498, 499, 500,
	501, 502, 503, 505, 506, 507, 509, 510, 511, 669,
	512, 513, 514, 515, 0, 517, 518, 670, 520, 521,
	523, 524, 525, 526, 527, 528, 679, 0, 530, 992,
	531, 532, 533, 534, 535, 0, 537, 538, 539, 540,
	541, 542, 545, 546, 547, 549, 550, 0, 551, 552,
	0, 554, 555, 900, 557, 558, 559, 560, 561, 0,
	680, 562, 0, 563, 0, 564, 565, 566, 567, 568,
	569, 570, 572, 0, 0, 574, 575, 576, 578, 579,
	580, 581, 584, 585, 586, 587, 588, 0, 589, 591,
	593, 671, 0, 0, 1020, 0, 0, 0, 0, 0,
	0, 594, 595, 0, 462, 456, 412, 454, 455, 459,
	460, 463, 288, 0, 305, 882, 0, 354, 391, 0,
	0, 0, 451, 0, 504, 508, 0, 0, 0, 0,
	0, 0, 362, 0, 887, 0, 893, 0, 899, 0,
	573, 0, 889, 890, 895, 293, 1017, 596, 667, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 891, 888, 892, 898, 886,
	896, 883, 894, 0, 495, 429, 0, 522, 300, 346,
	333, 375, 417, 529, 0, 0, 407, 577, 342, 431,
	0, 321, 464, 0, 553, 428, 0, 536, 556, 0,
	448, 327, 487, 543, 544, 880, 885, 0, 901, 0,
	331, 332, 453, 313, 461, 0, 0, 516, 474, 472,
	0, 439, 496, 0, 0, 0, 361, 0, 356, 452,
	592, 319, 571, 490, 457, 411, 519, 548, 358, 343,
	344, 387, 489, 377, 329, 582, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 378, 1019, 0, 590, 1022,
	1010, 1002, 1003, 1004, 1005, 1006, 1007, 0, 1024, 1025,
	1026, 1027, 1028, 583, 1016, 1018, 1001, 1008, 1009, 1011,
	0, 278, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 289, 0, 290, 291, 292, 294, 295, 296, 879,
	297, 298, 299, 302, 303, 304, 306, 666, 307, 308,
	309, 310, 311, 312, 0, 881, 314, 315, 316, 317,
	318, 320, 322, 323, 324, 325, 326, 328, 330, 0,
	0, 0, 884, 0, 0, 0, 334, 335, 336, 337,
	338, 339, 0, 340, 341, 345, 347, 348, 349, 350,
	351, 352, 355, 0, 357, 359, 0, 360, 363, 0,
	364, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	0, 373, 374, 376, 0, 379, 380, 381, 382, 383,
	0, 384, 0, 0, 385, 386, 388, 389, 390, 392,
	393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
	403, 0, 404, 405, 406, 408, 0, 409, 410, 413,
	414, 415, 416, 0, 418, 0, 0, 419, 420, 421,
	0, 0, 422, 423, 424, 425, 426, 427, 430, 0,
	432, 433, 434, 435, 436, 437, 438, 668, 440, 441,
	442, 443, 444, 445, 446, 4575, 0, 447, 449, 450,
	0, 0, 0, 897, 465, 466, 467, 468, 469, 470,
	471, 473, 0, 475, 476, 477, 0, 478, 479, 480,
	481, 0, 482, 483, 484, 485, 486, 488, 491, 492,
	493, 494, 0, 497, 498, 499, 500, 501, 502, 503,
	505, 506, 507, 509, 510, 511, 669, 512, 513, 514,
	515, 0, 517, 518, 670, 520, 521, 523, 524, 525,
	526, 527, 528, 679, 0, 530, 992, 531, 532, 533,
	534, 535, 0, 537, 538, 539, 540, 541, 542, 545,
	546, 547, 549, 550, 0, 551, 552, 0, 554, 555,
	900, 557, 558, 559, 560, 561, 0, 680, 562, 0,
	563, 0, 564, 565, 566, 567, 568, 569, 570, 572,
	0, 0, 574, 575, 576, 578, 579, 580, 581, 584,
	585, 586, 587, 588, 0, 589, 591, 593, 671, 0,
	0, 1020, 0, 0, 0, 0, 0, 0, 594, 595,
	0, 462, 456, 412, 454, 455, 459, 460, 463, 288,
	0, 305, 882, 0, 354, 391, 0, 0, 0, 451,
	0, 504, 508, 0, 0, 0, 0, 0, 0, 362,
	0, 887, 0, 893, 0, 899, 0, 573, 0, 889,
	890, 895, 293, 1017, 596, 667, 0, 0, 0, 458,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 891, 888, 892, 898, 886, 896, 883, 894,
	0, 495, 429, 0, 522, 300, 346, 333, 375, 417,
	529, 0, 0, 407, 577, 342, 431, 0, 321, 464,
	0, 553, 428, 0, 536, 556, 0, 448, 327, 487,
	543, 544, 880, 885, 0, 901, 0, 331, 332, 453,
	313, 461, 0, 0, 516, 474, 472, 0, 439, 496,
	0, 0, 0, 361, 0, 356, 452, 592, 319, 571,
	490, 457, 411, 519, 548, 358, 343, 344, 387, 489,
	377, 329, 582, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 378, 1019, 0, 590, 1022, 1010, 1002, 1003,
	1004, 1005, 1006, 1007, 0, 1024, 1025, 1026, 1027, 1028,
	583, 1016, 1018, 1001, 1008, 1009, 1011, 0, 278, 279,
	280, 281, 282, 283, 284, 285, 286, 287, 289, 0,
	290, 291, 292, 294, 295, 296, 879, 297, 298, 299,
	302, 303, 304, 306, 666, 307, 308, 309, 310, 311,
	312, 0, 881, 314, 315, 316, 317, 318, 320, 322,
	323, 324, 325, 326, 328, 330, 0, 0, 0, 884,
	0, 0, 0, 334, 335, 336, 337, 338, 339, 0,
	340, 341, 345, 347, 348, 349, 350, 351, 352, 355,
	0, 357, 359, 0, 360, 363, 0, 364, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 0, 373, 374,
	376, 0, 379, 380, 381, 382, 383, 0, 384, 0,
	0, 385, 386, 388, 389, 390, 392, 393, 394, 395,
	396, 397, 398, 399, 400, 401, 402, 403, 0, 404,
	405, 406, 408, 0, 409, 410, 413, 414, 415, 416,
	0, 418, 0, 0, 419, 420, 421, 0, 0, 422,
	423, 424, 425, 426, 427, 430, 0, 432, 433, 434,
	435, 436, 437, 438, 668, 440, 441, 442, 443, 444,
	445, 446, 0, 0, 447, 449, 450, 0, 0, 0,
	897, 465, 466, 467, 468, 469, 470, 471, 473, 0,
	475, 476, 477, 0, 478, 479, 480, 481, 0, 482,
	483, 484, 485, 486, 488, 491, 492, 493, 494, 0,
	497, 498, 499, 500, 501, 502, 503, 505, 506, 507,
	509, 510, 511, 669, 512, 513, 514, 515, 0, 517,
	518, 670, 520, 521, 523, 524, 525, 526, 527, 528,
	679, 0, 530, 992, 531, 532, 533, 534, 535, 0,
	537, 538, 539, 540, 541, 542, 545, 546, 547, 549,
	550, 0, 551, 552, 0, 554, 555, 900, 557, 558,
	559, 560, 561, 0, 680, 562, 0, 563, 0, 564,
	565, 566, 567, 568, 569, 570, 572, 0, 0, 574,
	575, 576, 578, 579, 580, 581, 584, 585, 586, 587,
	588, 0, 589, 591, 593, 671, 0, 0, 1020, 0,
	0, 0, 0, 0, 0, 594, 595, 0, 462, 456,
	412, 454, 455, 459, 460, 463, 288, 0, 305, 882,
	0, 354, 391, 0, 0, 0, 451, 0, 504, 508,
	0, 0, 0, 0, 0, 0, 362, 0, 887, 0,
	893, 0, 899, 0, 573, 0, 889, 890, 895, 293,
	1017, 596, 667, 0, 0, 0, 458, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 891,
	888, 892, 898, 886, 896, 883, 894, 0, 495, 429,
	0, 522, 300, 346, 333, 375, 417, 529, 0, 0,
	407, 577, 342, 431, 0, 321, 464, 0, 553, 428,
	0, 536, 556, 0, 448, 327, 487, 543, 544, 880,
	885, 0, 901, 0, 331, 332, 453, 313, 461, 0,
	0, 516, 474, 472, 0, 439, 496, 0, 0, 0,
	361, 0, 356, 452, 592, 319, 571, 490, 457, 411,
	519, 548, 358, 343, 344, 387, 489, 377, 329, 582,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 378,
	1019, 0, 590, 1022, 1010, 1002, 1003, 1004, 1005, 1006,
	1007, 0, 1024, 1025, 1026, 1027, 1028, 583, 1016, 1018,
	1001, 1008, 1009, 1011, 0, 278, 279, 280, 281, 282,
	283, 284, 285, 286, 287, 289, 0, 290, 291, 292,
	294, 295, 296, 879, 297, 298, 299, 302, 303, 304,
	306, 666, 307, 308, 309, 310, 311, 312, 0, 881,
	314, 315, 316, 317, 318, 320, 322, 323, 324, 325,
	326, 328, 330, 0, 0, 0, 884, 0, 0, 0,
	334, 335, 336, 337, 338, 339, 0, 340, 341, 345,
	347, 348, 349, 350, 351, 352, 355, 0, 357, 359,
	0, 360, 363, 0, 364, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 0, 373, 374, 376, 0, 379,
	380, 381, 382, 383, 0, 384, 0, 0, 385, 386,
	388, 389, 390, 392, 393, 394, 395, 396, 397, 398,
	399, 400, 401, 402, 403, 0, 404, 405, 406, 408,
	0, 409, 410, 413, 414, 415, 416, 0, 418, 0,
	0, 419, 420, 421, 0, 0, 422, 423, 424, 425,
	426, 427, 430, 0, 432, 433, 434, 435, 436, 437,
	438, 668, 440, 441, 442, 443, 444, 445, 446, 0,
	0, 447, 449, 450, 0, 0, 0, 897, 465, 466,
	467, 468, 469, 470, 471, 473, 0, 475, 476, 477,
	0, 478, 479, 480, 481, 0, 482, 483, 484, 485,
	486, 488, 491, 492, 493, 494, 0, 497, 498, 499,
	500, 501, 502, 503, 505, 506, 507, 509, 510, 511,
	669, 512, 513, 514, 515, 0, 517, 518, 670, 520,
	521, 523, 524, 525, 526, 527, 528, 679, 0, 530,
	2645, 531, 532, 533, 534, 535, 0, 537, 538, 539,
	540, 541, 542, 545, 546, 547, 549, 550, 0, 551,
	552, 0, 554, 555, 900, 557, 558, 559, 560, 561,
	0, 680, 562, 0, 563, 0, 564, 565, 566, 567,
	568, 569, 570, 572, 0, 0, 574, 575, 576, 578,
	579, 580, 581, 584, 585, 586, 587, 588, 0, 589,
	591, 593, 671, 0, 0, 1020, 0, 0, 0, 0,
	0, 0, 594, 595, 0, 462, 456, 412, 454, 455,
	459, 460, 463, 288, 0, 305, 882, 0, 354, 1030,
	0, 0, 0, 451, 0, 504, 508, 0, 0, 0,
	0, 0, 0, 362, 0, 887, 0, 893, 0, 899,
	0, 573, 0, 889, 890, 895, 293, 1017, 596, 667,
	0, 0, 0, 458, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 0, 0, 891, 888, 892, 898,
	886, 896, 883, 894, 0, 495, 429, 0, 522, 300,
	346, 333, 375, 417, 529, 0, 0, 407, 577, 342,
	431, 0, 321, 464, 0, 553, 428, 0, 536, 556,
	0, 448, 327, 487, 543, 544, 880, 885, 0, 901,
	0, 331, 332, 453, 313, 461, 0, 0, 516, 474,
	472, 0, 439, 496, 0, 0, 0, 361, 0, 356,
	452, 592, 319, 571, 490, 457, 411, 519, 548, 358,
	343, 344, 387, 489, 377, 329, 582, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 378, 1019, 0, 590,
	1022, 1010, 1002, 1003, 1004, 1005, 1006, 1007, 0, 1024,
	1025, 1026, 1027, 1028, 583, 1016, 1018, 1001, 1008, 1009,
	1011, 0, 278, 279, 280, 281, 282, 283, 284, 285,
	286, 287, 289, 0, 290, 291, 292, 294, 295, 296,
	879, 297, 298, 299, 302, 303, 304, 306, 666, 307,
	308, 309, 310, 311, 312, 0, 881, 314, 315, 316,
	317, 318, 320, 322, 323, 324, 325, 326, 328, 330,
	0, 0, 0, 884, 0, 0, 0, 334, 335, 336,
	337, 338, 339, 0, 340, 341, 345, 347, 348, 349,
	350, 351, 352, 355, 0, 357, 359, 0, 360, 363,
	0, 364, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 0, 373, 374, 376, 0, 379, 380, 381, 382,
	383, 0, 384, 0, 0, 385, 386, 388, 389, 390,
	392, 393, 394, 395, 396, 397, 398, 399, 400, 401,
	402, 403, 0, 404, 405, 406, 408, 0, 409, 410,
	413, 414, 415, 416, 0, 418, 0, 0, 419, 420,
	421, 0, 0, 422, 423, 424, 425, 426, 427, 430,
	0, 432, 433, 434, 435, 436, 437, 438, 668, 440,
	441, 442, 443, 444, 445, 446, 0, 0, 447, 449,
	450, 0, 0, 0, 897, 465, 466, 467, 468, 469,
	470, 471, 473, 0, 475, 476, 477, 0, 478, 479,
	480, 481, 0, 482, 483, 484, 485, 486, 488, 491,
	492, 493, 494, 0, 497, 498, 499, 500, 501, 502,
	503, 505, 506, 507, 509, 510, 511, 669, 512, 513,
	514, 515, 0, 517, 518, 670, 520, 521, 523, 524,
	525, 526, 527, 528, 679, 0, 530, 992, 531, 532,
	533, 534, 535, 0, 537, 538, 539, 540, 541, 542,
	545, 546, 547, 549, 550, 0, 551, 552, 0, 554,
	555, 900, 557, 558, 559, 560, 561, 0, 680, 562,
	0, 563, 0, 564, 565, 566, 567, 568, 569, 570,
	572, 0, 0, 574, 575, 576, 578, 579, 580, 581,
	584, 585, 586, 587, 588, 0, 589, 591, 593, 671,
	0, 0, 1020, 0, 0, 0, 0, 0, 0, 594,
	595, 0, 462, 456, 412, 454, 455, 459, 460, 463,
	288, 0, 305, 882, 0, 354, 989, 0, 0, 0,
	451, 0, 504, 508, 0, 0, 0, 0, 0, 0,
	362, 0, 887, 0, 893, 0, 899, 0, 573, 0,
	889, 890, 895, 293, 1017, 596, 667, 0, 0, 0,
	458, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 891, 888, 892, 898, 886, 896, 883,
	894, 0, 495, 429, 0, 522, 300, 346, 333, 375,
	417, 529, 0, 0, 407, 577, 342, 431, 0, 321,
	464, 0, 553, 428, 0, 536, 556, 0, 448, 327,
	487, 543, 544, 880, 885, 0, 901, 0, 331, 332,
	453, 313, 461, 0, 0, 516, 474, 472, 0, 439,
	496, 0, 0, 0, 361, 0, 356, 452, 592, 319,
	571, 490, 457, 411, 519, 548, 358, 343, 344, 387,
	489, 377, 329, 582, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 378, 1019, 0, 590, 1022, 1010, 1002,
	1003, 1004, 1005, 1006, 1007, 0, 1024, 1025, 1026, 1027,
	1028, 583, 1016, 1018, 1001, 1008, 1009, 1011, 0, 278,
	279, 280, 281, 282, 283, 284, 285, 286, 287, 289,
	0, 290, 291, 292, 294, 295, 296, 879, 297, 298,
	299, 302, 303, 304, 306, 666, 307, 308, 309, 310,
	311, 312, 0, 881, 314, 315, 316, 317, 318, 320,
	322, 323, 324, 325, 326, 328, 330, 0, 0, 0,
	884, 0, 0, 0, 334, 335, 336, 337, 338, 339,
	0, 340, 341, 345, 347, 348, 349, 350, 351, 352,
	355, 0, 357, 359, 0, 360, 363, 0, 364, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 0, 373,
	374, 376, 0, 379, 380, 381, 382, 383, 0, 384,
	0, 0, 385, 386, 388, 389, 390, 392, 393, 394,
	395, 396, 397, 398, 399, 400, 401, 402, 403, 0,
	404, 405, 406, 408, 0, 409, 410, 413, 414, 415,
	416, 0, 418, 0, 0, 419, 420, 421, 0, 0,
	422, 423, 424, 425, 426, 427, 430, 0, 432, 433,
	434, 435, 436, 437, 438, 668, 440, 441, 442, 443,
	444, 445, 446, 0, 0, 447, 449, 450, 0, 0,
	0, 897, 465, 466, 467, 468, 469, 470, 471, 473,
	0, 475, 476, 477, 0, 478, 479, 480, 481, 0,
	482, 483, 484, 485, 486, 488, 491, 492, 493, 494,
	0, 497, 498, 499, 500, 501, 502, 503, 505, 506,
	507, 509, 510, 511, 669, 512, 513, 514, 515, 0,
	517, 518, 670, 520, 521, 523, 524, 525, 526, 527,
	528, 679, 0, 530, 992, 531, 532, 533, 534, 535,
	0, 537, 538, 539, 540, 541, 542, 545, 546, 547,
	549, 550, 0, 551, 552, 0, 554, 555, 900, 557,
	558, 559, 560, 561, 0, 680, 562, 0, 563, 0,
	564, 565, 566, 567, 568, 569, 570, 572, 0, 0,
	574, 575, 576, 578, 579, 580, 581, 584, 585, 586,
	587, 588, 0, 589, 591, 593, 671, 0, 0, 1020,
	0, 0, 0, 0, 0, 0, 594, 595, 0, 462,
	456, 412, 454, 455, 459, 460, 463, 288, 0, 305,
	882, 0, 354, 391, 0, 0, 0, 451, 0, 504,
	508, 0, 0, 0, 0, 0, 0, 362, 0, 887,
	0, 893, 0, 899, 0, 573, 0, 889, 890, 895,
	293, 1017, 596, 667, 0, 0, 0, 458, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	891, 888, 892, 898, 886, 896, 883, 894, 0, 495,
	429, 0, 522, 300, 346, 333, 375, 417, 529, 0,
	0, 407, 577, 342, 431, 0, 321, 464, 0, 553,
	428, 0, 536, 556, 0, 448, 327, 487, 543, 544,
	880, 885, 0, 901, 0, 331, 332, 453, 313, 461,
	0, 0, 516, 474, 472, 0, 439, 496, 0, 0,
	0, 361, 0, 356, 452, 592, 319, 571, 490, 457,
	411, 519, 548, 358, 343, 344, 387, 489, 377, 329,
	582, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	378, 1019, 0, 590, 1022, 1010, 1002, 1003, 1004, 1005,
	1006, 1007, 0, 1024, 1025, 1026, 1027, 1028, 583, 1016,
	1018, 1001, 1008, 1009, 1011, 0, 278, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 289, 0, 290, 291,
	292, 294, 295, 296, 879, 297, 298, 299, 302, 303,
	304, 306, 666, 307, 308, 309, 310, 311, 312, 0,
	881, 314, 315, 316, 317, 318, 320, 322, 323, 324,
	325, 326, 328, 330, 0, 0, 0, 884, 0, 0,
	0, 334, 335, 336, 337, 338, 339, 0, 340, 341,
	345, 347, 348, 349, 350, 351, 352, 355, 0, 357,
	359, 0, 360, 363, 0, 364, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 0, 373, 374, 376, 0,
	379, 380, 381, 382, 383, 0, 384, 0, 0, 385,
	386, 388, 389, 390, 392, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 0, 404, 405, 406,
	408, 0, 409, 410, 413, 414, 415, 416, 0, 418,
	0, 0, 419, 420, 421, 0, 0, 422, 423, 424,
	425, 426, 427, 430, 0, 432, 433, 434, 435, 436,
	437, 438, 668, 440, 441, 442, 443, 444, 445, 446,
	0, 0, 447, 449, 450, 0, 0, 0, 897, 465,
	466, 467, 468, 469, 470, 471, 473, 0, 475, 476,
	477, 0, 478, 479, 480, 481, 0, 482, 483, 484,
	485, 486, 488, 491, 492, 493, 494, 0, 497, 498,
	499, 500, 501, 502, 503, 505, 506, 507, 509, 510,
	511, 669, 512, 513, 514, 515, 0, 517, 518, 670,
	520, 521, 523, 524, 525, 526, 527, 528, 679, 0,
	530, 0, 531, 532, 533, 534, 535, 0, 537, 538,
	539, 540, 541, 542, 545, 546, 547, 549, 550, 0,
	551, 552, 0, 554, 555, 900, 557, 558, 559, 560,
	561, 0, 680, 562, 0, 563, 0, 564, 565, 566,
	567, 568, 569, 570, 572, 0, 0, 574, 575, 576,
	578, 579, 580, 581, 584, 585, 586, 587, 588, 0,
	589, 591, 593, 671, 0, 0, 1020, 0, 0, 0,
	0, 0, 0, 594, 595, 0, 462, 456, 412, 454,
	455, 459, 460, 463, 288, 0, 305, 882, 0, 354,
	391, 0, 0, 0, 451, 0, 504, 508, 0, 0,
	0, 0, 0, 0, 362, 0, 887, 0, 893, 0,
	899, 0, 573, 0, 889, 890, 895, 293, 0, 596,
	667, 0, 0, 0, 458, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 0, 0, 891, 888, 892,
	898, 886, 896, 883, 894, 0, 495, 429, 0, 522,
	300, 346, 333, 375, 417, 529, 0, 0, 407, 577,
	342, 431, 0, 321, 464, 0, 553, 428, 0, 536,
	556, 0, 448, 327, 487, 543, 544, 880, 885, 0,
	901, 0, 331, 332, 453, 313, 461, 0, 0, 516,
	474, 472, 0, 439, 496, 0, 0, 0, 361, 0,
	356, 452, 592, 319, 571, 490, 457, 411, 519, 548,
	358, 343, 344, 387, 489, 377, 329, 582, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 378, 0, 0,
	590, 0, 0, 0, 0, 0, 0, 0, 353, 0,
	0, 0, 0, 0, 0, 583, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 281, 282, 283, 284,
	285, 286, 287, 289, 0, 290, 291, 292, 294, 295,
	296, 879, 297, 298, 299, 302, 303, 304, 306, 666,
	307, 308, 309, 310, 311, 312, 0, 881, 314, 315,
	316, 317, 318, 320, 322, 323, 324, 325, 326, 328,
	330, 0, 0, 0, 884, 0, 0, 0, 334, 335,
	336, 337, 338, 339, 0, 340, 341, 345, 347, 348,
	349, 350, 351, 352, 355, 0, 357, 359, 0, 360,
	363, 0, 364, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 0, 373, 374, 376, 0, 379, 380, 381,
	382, 383, 0, 384, 0, 0, 385, 386, 388, 389,
	390, 392, 393, 394, 395, 396, 397, 398, 399, 400,
	401, 402, 403, 0, 404, 405, 406, 408, 0, 409,
	410, 413, 414, 415, 416, 0, 418, 0, 0, 419,
	420, 421, 0, 0, 422, 423, 424, 425, 426, 427,
	430, 0, 432, 433, 434, 435, 436, 437, 438, 668,
	440, 441, 442, 443, 444, 445, 446, 0, 0, 447,
	449, 450, 0, 0, 0, 897, 465, 466, 467, 468,
	469, 470, 471, 473, 0, 475, 476, 477, 0, 478,
	479, 480, 481, 0, 482, 483, 484, 485, 486, 488,
	491, 492, 493, 494, 0, 497, 498, 499, 500, 501,
	502, 503, 505, 506, 507, 509, 510, 511, 669, 512,
	513, 514, 515, 0, 517, 518, 670, 520, 521, 523,
	524, 525, 526, 527, 528, 679, 0, 530, 0, 531,
	532, 533, 534, 535, 0, 537, 538, 539, 540, 541,
	542, 545, 546, 547, 549, 550, 0, 551, 552, 0,
	554, 555, 900, 557, 558, 559, 560, 561, 0, 680,
	562, 0, 563, 0, 564, 565, 566, 567, 568, 569,
	570, 572, 0, 0, 574, 575, 576, 578, 579, 580,
	581, 584, 585, 586, 587, 588, 0, 589, 591, 593,
	671, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	594, 595, 0, 462, 456, 412, 454, 455, 459, 460,
	463,
}

var yyPact = [...]int32{
	6055, -1000, 404, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1519,
	1519, -1000, -1000, 3423, 1275, 8320, 13718, 13139, 3494, 96225,
	79055, 1519, 1663, 1617, 1614, 80065, 95720, 95215, 65925, 65420,
	2137, 1323, 1281, 78550, 1279, 1262, -1000, 2173, 80065, 48290,
	48290, 78045, 80065, 77540, 80065, 50824, 80065, 4378, 3733, 3733,
	-1000, 1643, 1111, 1046, -1000, -1000, 4157, 69965, 387, 94710,
	80065, 1247, 6055, 4227, -1000, -1000, 2467, 3672, 69965, 3794,
	3671, 1046, 80065, -1000, 1925, 2519, 2313, 4155, 94205, 80065,
	46762, 80065, 3479, 93700, 93195, 2954, 92690, 57390, 3493, 1658,
	80065, 80065, 2342, 92185, 80065, 80065, 1259, 2752, 54864, 54864,
	-1000, -1000, 1709, 1705, -1000, -1000, -1000, 69460, 77035, 91680,
	91175, 1552, 2953, 2255, 60925, 80065, 80065, 80065, 80065, 60925,
	54864, 2441, 2724, 90670, 60925, 80065, 60925, 80065, 80065, 80065,
	80065, 80065, 1657, 54359, 53854, 80065, 90165, 3478, 80065, 80065,
	2120, -1000, 89660, 89155, 88650, 101618, 101131, 4302, 56885, 56380,
	55875, -1000, -1000, -1000, 1551, 2950, -1000, -1000, -1000, 3469,
	2341, 1655, -1000, 2436, -1000, -1000, -1000, -1000, -1000, -1000,
	1550, -1000, 81580, 76530, 2177, -1000, -1000, 997, 3984, 4378,
	4378, 4153, 59410, 1436, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3973, 2461, 2832, 481, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 4227, 2467, 4227, 4378, 3829, 4378, -1000, -1000,
	-1000, -1000, 80065, -1000, 4378, 1254, -1000, 3667, 556, 1045,
	-1000, 899, 899, 899, 3356, 899, 3657, 1430, 607, 905,
	-1000, 3271, 1846, 44165, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1575, 3290, 47785, -1000, 80065, 47785, -1000, 481, 3968,
	2451, 2830, -1000, 47785, 80065, 2393, 47785, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 80065, 3786, 3786, 3786,
	3786, 951, 951, 3786, 3786, 1209, 1119, -1000, -1000, -1000,
	4364, 4364, -1000, -1000, -1000, -1000, 953, -1000, 76025, -1000,
	-1000, -1000, -1000, 385, -1000, -1000, -1000, 69965, -1000, 69965,
	-1000, 2886, 4138, 4138, 4138, 3721, 1643, -1000, -1000, 839,
	838, 1111, 25719, 25719, -1000, 3656, -1000, 432, -1000, 579,
	60420, 1252, 381, 80065, -1000, 1055, 381, 30861, -1000, -1000,
	2412, -1000, 428, -1000, 2404, 1913, -1000, 2726, 80065, 3443,
	88145, 69965, 69965, 830, -1000, -1000, -1000, -1000, -1000, 899,
	87640, 80065, 1544, 87135, 4301, 60925, 60925, 80065, 1641, 60925,
	3194, 2116, -1000, 2006, 2829, -1000, 4223, 4313, 462, 1093,
	80065, 80065, -1000, 478, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1161, 2306,
	1332, 4222, 1791, 4221, 3084, 86630, 1626, 4220, 3249, 1791,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1539, 80065, 2221, 3655, 80065, 1055, 4219, -1000,
	3217, 2761, 100157, 80065, 1791, 1791, -1000, -1000, -1000, -1000,
	7252, 4291, 4111, 9048, 4289, 4110, 18434, 4286, 11425, 4284,
	75520, 75015, 3077, 80065, 74510, 2063, 1250, -1000, 579, -1000,
	-1000, -1000, 2055, 2049, 2047, 1975, 8712, 1250, -1000, 579,
	2043, 3043, 80065, 80065, 80065, 3652, 4283, 7527, 2429, 2786,
	2038, 1520, 2947, 3650, 3647, 80065, 2034, 1820, 4109, 2025,
	3192, 1820, 4109, 2244, 2267, 4282, 2284, 2666, 3040, -1000,
	4279, 472, -1000, 4277, 494, -1000, 3646, 4274, 474, 4273,
	-1000, 3107, 102105, -1000, -1000, -1000, -1000, -1000, 1054, -1000,
	507, -1000, -1000, -1000, -1000, -1000, 1129, 2895, 1125, 1125,
	1125, -1000, -1000, -1000, -1000, -1000, 602, 737, -1000, -1000,
	-1000, -1000, 2879, 1249, 2879, 2879, -1000, 2887, 2879, 474,
	4271, 86125, 3235, 202, 4270, -1000, 202, 4267, 202, 4265,
	-1000, 3075, -1000, 2125, -1000, -1000, -1000, 4301, -1000, 2818,
	-1000, 4339, 57895, 428, 4378, 3251, 43137, 42623, 80065, 666,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2747, -1000,
	2397, -1000, -1000, -1000, -1000, -1000, -1000, 85620, -1000, -1000,
	-1000, 4350, 100157, 66935, 54864, 67945, 1248, 80065, -1000, 80065,
	-1000, -1000, -1000, -1000, 66935, 3189, 54864, 3188, 1846, -1000,
	430, -1000, 43651, 1247, -1000, -1000, -1000, -1000, 3271, -1000,
	429, -1000, 382, -1000, 1055, 426, -1000, 2395, -1000, 410,
	3521, 3645, 579, 4301, 4301, 4301, -1000, -1000, -1000, -1000,
	409, 2225, -1000, 80065, -1000, 80065, 80065, 80065, 3786, 3786,
	80065, 80065, 80065, 3786, 3786, 80065, 3786, 3786, -1000, -1000,
	-1000, 30861, -1000, -1000, -1000, 4378, 544, -1000, 226, 2867,
	3174, 3187, 1842, 3728, 2876, -1000, 30347, 2547, 34973, 3262,
	1111, -1000, -1000, 1111, 1111, 30861, -1000, 2886, -1000, -1000,
	3669, 230, -1000, 20021, -1000, -1000, 30861, 30861, 30861, 30861,
	30861, 2227, 4194, -1000, -1000, -1000, -1000, 24690, -1000, -1000,
	579, 1108, 857, -1000, -1000, 1245, -1000, 1036, 1238, 579,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1368, 4378,
	1360, 30861, 1498, 2651, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1236, 1230, 3185, -1000, 1229, 1228, 1227, 1226, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1225, 1221, 1218, 1217,
	1214, 1210, 1207, 1206, 1205, 1203, 1196, 1187, 1182, 1181,
	1172, 1164, 1163, 1162, 1157, 1154, 1152, 1056, 1150, 1149,
	1147, 1142, 1135, 1132, 1131, -1000, 2879, -1000, 2879, 2879,
	1125, 1125, 1129, -1000, -1000, 2887, 2879, 1125, -1000, -1000,
	737, 602, -1000, -1000, -1000, -1000, -1000, 509, 1124, -1000,
	579, -1000, 19502, 30861, -1000, 80065, 30861, 80065, 381, 4348,
	80065, 392, 18229, -1000, 2790, 2467, -1000, 1877, -1000, -1000,
	-1000, 1454, 4344, 58400, -1000, 80065, 3531, 3530, 3951, 3774,
	1044, 4218, 4343, 899, 80065, 3809, 4213, 85115, -1000, 1115,
	1115, 2590, 80065, 1114, 100157, 2430, 1916, -1000, 54864, 4298,
	4264, 100157, -1000, 439, 21068, -1000, 21068, 4132, 3525, 45175,
	-1000, 779, 80065, 80065, 80065, 80065, -1000, 80065, 4263, -1000,
	-1000, -1000, 4262, 80065, 1003, 4210, 1556, 4378, 4261, 52844,
	4207, -1000, 84610, 3644, 2372, 54864, 80065, 1634, 3642, 4260,
	-1000, 66430, 1093, 4378, 4341, 3177, -1000, -1000, 234, -1000,
	1799, -1000, 2210, 2204, 62423, 1753, 1751, 3283, 983, 3640,
	1974, 1695, 80065, 2658, 80065, 3259, 3950, 945, 2589, 1919,
	-1000, 1113, 69965, 1729, 234, -1000, 3947, 2184, 80065, 1728,
	234, 3946, 3809, -1000, 2741, 102105, 981, -1000, 3716, -1000,
	981, 981, 3715, 2318, 1791, 1791, -1000, 80065, 234, 1822,
	80065, 10999, 4259, 4108, 10987, 4256, 80065, -1000, 933, -1000,
	3945, -1000, 64427, 579, 3942, 3940, 3938, 3333, -1000, 3364,
	4160, 1867, 3279, 3933, 6821, -1000, 3619, 4078, -1000, -1000,
	-1000, -1000, 1843, 2552, -1000, 2410, 981, 981, 80065, -1000,
	80065, 84105, -1000, -1000, 579, 3931, 3361, -1000, -1000, 2024,
	3523, 3522, 80065, 80065, 3930, 6821, 3929, 53349, 67440, 67440,
	3928, 6821, 3923, 3920, 1399, -1000, 4068, 3918, 914, 4378,
	2109, 2096, 2088, -1000, -1000, 1093, 80065, 80065, 2259, 3914,
	-1000, 2231, 2729, 2231, 3913, 52844, -1000, 2231, 2231, 3899,
	945, 945, 3897, 1759, 80065, 80065, 80065, 80065, 80065, 2952,
	2881, 2877, 1112, 379, -1000, 2836, -1000, 12458, 2405, 80065,
	80065, -1000, -1000, -1000, 80065, 80065, -1000, 80065, 80065, 100157,
	-1000, 100157, 1285, 1289, 3046, -1000, 4364, 3894, -1000, 3892,
	3886, 3884, -1000, 1110, -1000, 514, 30861, -1000, 4364, -1000,
	-1000, -1000, -1000, 4364, -1000, 3996, 3989, 4364, -1000, 1109,
	-1000, 4364, -1000, -1000, 2879, 2879, -1000, -1000, 100157, 472,
	4255, 52844, 4254, 54864, 54864, 54864, 54864, -1000, -1000, -1000,
	-1000, -1000, 80065, 4339, 1624, -1000, -1000, -1000, -1000, 362,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4381,
	4380, -1000, 362, -1000, -1000, -1000, -1000, -1000, 1053, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 80065, -1000, 1046, 389,
	-1000, 3875, 328, 80065, 80065, 1970, 60925, 60925, 60925, 80065,
	80065, 80065, 3089, 80065, 80065, 80065, 80065, 2094, -1000, 424,
	-1000, 80065, 386, -1000, 384, 3792, 65925, 233, 67945, -1000,
	1846, 47785, -1000, -1000, -1000, 3269, 80065, 80065, -1000, 80065,
	-1000, 80065, -1000, 80065, 80065, 80065, 80065, 80065, -1000, 3051,
	-1000, -1000, -1000, -1000, 1844, -1000, -1000, -1000, -1000, 80065,
	80065, -1000, -1000, -1000, 80065, 80065, -1000, 80065, 80065, 370,
	-1000, 69965, 2260, 2035, 4190, 2588, 2587, -1000, -1000, -1000,
	-1000, -1000, 1847, 3736, -1000, 1460, -1000, 1782, -1000, -1000,
	357, 18229, -1000, 36515, -1000, -1000, -1000, 2172, 18229, -1000,
	34459, 34459, 1852, 80065, 2465, -1000, 2465, 206, -1000, 6851,
	2867, 3174, 3790, 74005, 25719, 100157, 80065, 3957, 30861, 30861,
	30861, 30861, 30861, 30861, 30861, 30861, 30861, 30861, 30861, 30861,
	30861, 30861, 30861, 30861, 4058, 30861, 3873, 3360, -1000, -1000,
	3903, 1084, 1910, 21068, -1000, -1000, 1102, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 752, 752, 538, 6453, 6453, 941, 1108, 4130, 579,
	18184, 346, 585, 579, -1000, -1000, -1000, 26234, 30861, 45175,
	29832, 579, -1000, 23145, -1000, 1786, 4364, 4009, 18229, 2651,
	3676, 1395, 1106, 30861, 30861, 1105, 4364, 4364, 4364, 4364,
	30861, 2046, 30861, 30861, 36001, 30861, 30861, 25205, 30861, 30861,
	30861, 30861, 30861, 2314, 30861, 2747, 37543, 2300, 30861, 29318,
	24175, 30861, 30861, 30861, 829, 30861, 30861, 30861, 2747, 3790,
	30861, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 18138, -20,
	821, 369, -1000, 3546, 368, 30861, -1000, 80065, 3957, 30861,
	30861, 30861, 30861, 3873, 3360, 3903, 1084, 1102, -1000, -1000,
	-1000, 1851, 2076, -1000, 3617, -1000, 3380, 51329, 3487, 80065,
	570, -1000, 1296, 80065, -1000, -1000, 3760, 40093, 40093, 3296,
	3296, -1000, -1000, 62928, 80065, 3258, 3505, 4252, 2685, 4166,
	1097, -1000, 3809, 2569, 4251, 3616, 4206, -1000, 8248, 63938,
	6324, 1980, -1000, -1000, 3254, 2848, 1093, -1000, 61935, 2421,
	80065, 80065, 1531, -1000, -1000, -1000, -1000, -1000, -1000, 2488,
	80065, -1000, 21068, -1000, 367, -1000, 1295, 3171, 80065, -1000,
	80065, 1094, 1093, 1093, 1093, 1093, 1093, -1000, 80065, 2005,
	80065, 1706, 62928, 3248, 4250, 2643, -1000, -1000, 80065, 1811,
	-1000, -1000, 4249, 2625, 4337, 4205, 899, 21068, 4397, -1000,
	4336, 2742, 41608, 80065, 1713, 496, -1000, 69965, 4107, 558,
	899, -1000, 432, -1000, 2080, 100157, 4378, 2625, 2625, 2925,
	80065, 80065, 80065, -1000, 80065, 80065, -1000, 4204, 83600, -1000,
	100157, 80065, -1000, 1091, 3550, 1457, 1455, 3510, 73500, 80065,
	83095, 82590, 80065, 1712, -1000, -1000, 2333, 80065, -1000, 21068,
	80065, 68955, 1730, 1699, 80065, 2389, 68450, 80065, 2388, -1000,
	80065, 1891, -1000, -1000, 54864, -1000, 3427, 2387, 22634, 3327,
	80065, 80065, 80065, 10974, 80065, 80065, -1000, -1000, -1000, -1000,
	-1000, -1000, 981, -1000, -1000, -1000, 80065, 80065, 981, 981,
	16028, 80065, 80065, 10685, 234, 1817, 80065, 1727, 234, 1815,
	69965, 1711, 80065, 365, -1000, -1000, 100644, 97235, -1000, 2243,
	-1000, -1000, -1000, 507, -1000, 102105, 80065, 80065, 80065, 80065,
	80065, -1000, 4075, 82085, 30861, 4071, -1000, 80065, -1000, 1089,
	4063, 80065, 80065, -1000, -1000, -1000, 4062, 3615, 2550, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2821, 1779, 54864,
	54864, 3869, 80065, 80065, 2311, 3613, 80065, -1000, 80065, -1000,
	343, 343, 343, 80065, -1000, 80065, 80065, -1000, -1000, -1000,
	80065, -1000, 80065, -1000, 4176, 80065, 80065, -1000, 2018, 2008,
	3868, -1000, 2150, -1000, 54864, 2949, -1000, 81580, -1000, 80065,
	-1000, 54864, 1808, 2949, -1000, -1000, 80065, -1000, -1000, 80065,
	963, 3437, 2004, 2001, 1995, 1963, 80065, 80065, 4378, 4295,
	80065, 4378, 81075, 21068, 3029, 80065, 3865, 80065, 80065, 60925,
	1085, 100157, 60925, 46233, 60925, 60925, 3170, 100157, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 65925, 64915, 1864, 2183,
	472, -1000, 494, -1000, 4190, 3612, -1000, 474, 1452, 4364,
	1285, 1284, 817, 2317, 1984, 1918, 1845, 4364, -1000, 364,
	816, 812, 3964, 3962, 809, 30861, 808, -1000, -1000, 474,
	-1000, 80065, 1806, 3169, -1000, 202, 202, 202, 4170, 2467,
	43651, -1000, -1000, 1786, 4364, -1000, -1000, 100157, -1000, 52339,
	80065, 328, 328, 3058, 80065, 342, -1000, 342, 342, 209,
	335, 209, 981, 338, 452, -1000, 209, 209, 335, 4101,
	4100, 4098, 4096, 4085, -1000, 21068, 3714, 354, 80065, -1000,
	-1000, 52339, 3609, 332, 4190, 557, -1000, -1000, 80065, -1000,
	-1000, -1000, -1000, 3521, -1000, -1000, -1000, -1000, -1000, 3167,
	2593, 2592, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2329, 1976, 1952, 2186, -1000, -1000, -1000,
	-1000, -1000, 3402, -1000, 30861, 2172, 3771, -1000, 4382, 4382,
	1076, -1000, 24690, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2358, 328, 30861, 820, 1318, -1000, -1000, -1000,
	-1000, 3741, 40093, -1000, 3733, 3733, 1697, 1694, 3733, 80065,
	-1000, -1000, -1000, -1000, 3813, -1000, 355, 355, 408, 408,
	408, -1000, 652, 652, 652, 652, 652, 652, 538, 6453,
	9751, 1935, 30861, 30861, 3864, 3860, 1084, 1875, 30861, -1000,
	5811, -1000, -1000, -1000, 3789, -1000, -1000, 2263, 3048, -1000,
	-1000, -1000, -1000, 3159, 36001, 36001, -1000, -1000, -1000, 24690,
	1083, -1000, -1000, -1000, -1000, 45175, -1000, 1080, 30861, -1000,
	-1000, 4116, -1000, -1000, 30861, 124, 53, -1000, -1000, 349,
	805, 339, -1000, 79, -1000, 804, 30861, 30861, 30861, -1000,
	18229, 4365, -1000, -1000, 802, 2919, -1000, 30861, 1395, 1078,
	-1000, 59915, 3765, 3014, 2956, 6105, 1393, 18036, 30861, 795,
	793, 791, 789, 17952, 788, 3788, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 6254, 785, 783, 17793, 320, 782,
	567, -1000, 36001, 36001, 36001, 1076, 781, 780, 7199, 17607,
	28804, 28804, 28804, 777, 17507, 30861, 164, 6544, 336, 326,
	322, 321, 21068, 318, -1000, 17422, 30861, 3160, 21068, 6304,
	305, 416, 775, -1000, 100157, 6105, 415, 1352, 772, -1000,
	579, 3048, 17364, 3378, -1000, 316, 314, 306, 30861, 3741,
	303, -1000, 30861, -1000, -1000, 1062, -1000, 3491, -1000, 18229,
	-1000, -1000, -1000, 3385, 3374, 2945, -1000, -1000, 302, -1000,
	-1000, -1000, -1000, 3760, 58400, 30861, 282, -1000, 579, 3385,
	33945, 141, 3658, 70975, 70975, 42113, -1000, 39068, 72490, 70975,
	70975, 1310, 3787, 1060, 1059, 579, -1000, -1000, -1000, 1057,
	1056, 3620, 3398, -1000, 3398, 771, 291, 100157, -1000, -1000,
	-1000, -1000, 80065, 952, 80065, 3044, 80065, 80065, 80065, 4334,
	945, 80065, 80065, 69965, 4248, 97722, 2129, 6324, -1000, 4378,
	59410, 3165, -1000, -1000, 275, -1000, -1000, 1764, 2129, 3589,
	-1000, -1000, -1000, 3247, -1000, -1000, 1980, -1000, 767, -33,
	3712, 265, -1000, -1000, -1000, 1292, 80065, 2600, 899, 80065,
	4298, 1937, 1991, 2820, -1000, 1997, -1000, -1000, 21068, 21579,
	1627, -1000, 766, 288, -1000, 100157, 4378, -1000, -1000, -1000,
	-1000, -1000, 1241, -1000, 80065, 59410, 59410, -1000, 1791, 1397,
	1706, -1000, 80065, 1744, 80065, 750, 80065, 80065, 2753, 1626,
	80065, 3164, -1000, -1000, 4364, 54864, 54864, 2192, 4066, 2155,
	2153, -1000, -1000, 3731, 1571, 54864, 1046, 4247, 3505, 2891,
	4166, 3162, 4401, 2596, -1000, -1000, 508, -1000, 579, -1000,
	30861, 1055, 4176, -1000, 67440, 899, 1863, 558, 3759, 3759,
	80065, 748, 3851, -1000, -1000, 3850, 3849, 3206, 2903, 4246,
	-1000, 4203, 1741, 1631, 30861, 1052, -1000, 2516, 1186, 1048,
	1047, 80065, 1914, 3432, -1000, 4243, 4190, 4242, 4190, -1000,
	-1000, -1000, 72995, -1000, 261, -1000, 506, -1000, -1000, -1000,
	-1000, 80065, 80065, 80065, 80065, -1000, 1839, -1000, -1000, -1000,
	-1000, 1823, -1000, 2378, -1000, -1000, -1000, -1000, -1000, 2512,
	1802, 260, -1000, -1000, 21068, 21068, 21068, 4378, -1000, 234,
	-1000, 1783, 2520, -1000, -1000, 234, 3844, 2499, -1000, -1000,
	-1000, -1000, -1000, -1000, 234, 3843, 3809, -1000, 3842, 234,
	1814, 80065, 80065, 10097, 80065, 80065, 80065, 9692, 3840, 1399,
	1706, -1000, -1000, 97235, 100644, -1000, 100644, -1000, 507, -1000,
	498, 507, -1000, -1000, -1000, -1000, 3837, -1000, 4190, 4241,
	18229, -1000, 1849, 30861, -1000, -1000, -1000, 2470, 4061, -1000,
	-1000, -1000, 202, 80065, 1959, 2349, 3835, 3511, 54864, 80065,
	-1000, -1000, -1000, -1000, -1000, -1000, 484, -1000, 484, 484,
	3834, 3832, 80065, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	80065, -1000, -1000, -1000, -1000, -1000, 1748, 3831, 3830, 3823,
	3822, -1000, 3821, 3820, 4378, 4200, 4190, -1000, 4239, 4190,
	258, -1000, 1294, -1000, 2835, 2834, 3415, -1000, 59410, -1000,
	-1000, -1000, 100157, -1000, -1000, -1000, 80065, 80065, 1043, -1000,
	-1000, 100157, -1000, 3608, 3606, 1427, 80065, 54864, 54864, -1000,
	-1000, -1000, 80065, -1000, -1000, 1272, 1270, 4364, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 747, -1000, -1000, 1306,
	-1000, -1000, 1306, 255, -1000, -1000, 472, 80065, 52844, -1000,
	2398, 428, -1000, -1000, 744, -1000, 433, -1000, -1000, 54864,
	-1000, 80065, 209, 60925, 278, -1000, 80065, 80065, 1861, 1859,
	1858, 1854, 1850, 284, -1000, 1878, 54864, -1000, -1000, 201,
	66935, -1000, 54864, -1000, -1000, 1046, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2691, 2690, -1000, -1000, 3767, -1000, 1685,
	-1000, -1000, 28290, 277, -1000, -1000, 1318, -1000, 1013, -1000,
	3460, 3566, 30861, 141, 80065, 80065, 3733, 3733, 3733, 3733,
	80065, -1000, 30861, 30861, 1832, 1708, 30861, 36001, 36001, -1000,
	30861, 794, -1000, -1000, -1000, -1000, 3785, -1000, -1000, 2257,
	3048, 30861, -1000, -1000, 1580, 1578, -1000, -1000, -1000, -1000,
	2303, 1951, 254, -1000, 24690, 743, 27776, 263, -1000, 579,
	17263, -1000, -1000, 1280, -1000, -1000, -1000, 742, 27262, -1000,
	-1000, 1384, -24, -24, 30861, 30861, 4378, 2703, -1000, 30861,
	17207, -1000, 1384, -1000, -1000, 96730, 30861, 3048, 3603, 3602,
	30861, 30861, 3010, 3710, -1000, -1000, 2908, 17097, -1000, -1000,
	-1000, -1000, 100157, -1000, 30861, -1000, 2325, -1000, -1000, 30861,
	30861, -1000, 100157, 36001, 36001, 36001, 36001, 36001, 36001, 36001,
	36001, 36001, 36001, 36001, 36001, 36001, 2948, 36001, 1036, 443,
	443, 443, -1000, -1000, 26748, 30861, 30861, 100157, 739, 738,
	735, -1000, 30861, 164, 30861, -1000, -1000, -1000, -1000, 223,
	-1000, 30861, 21068, 7096, 731, 38563, 219, 1559, -1000, 3048,
	30861, -1000, 1352, 3378, 30861, 3600, 3598, 3378, -1000, 730,
	-1000, 721, 30861, 30861, 30861, 16854, 3566, -1000, 1269, 18229,
	1046, -1000, -1000, 25719, 1049, 1046, 1775, 80065, 579, 3385,
	-1000, 18229, 1293, 80065, -1000, 18229, 3242, 40093, 3544, 3543,
	40093, 3630, 3535, 3535, 3535, -1000, 1696, -1000, 80065, 1032,
	-1000, 70975, 72490, 70975, 70975, 55369, 712, 3658, -1000, -1000,
	58905, 1031, -1000, -1000, -1000, 3226, 1028, 38053, 30861, 579,
	23145, 30861, 1791, -1000, -1000, -1000, 3519, 2489, 62928, -1000,
	2158, 63433, 952, 3551, 945, 1438, -1000, 1002, 4333, 953,
	1046, -1000, 212, 3809, 3510, 80065, 6324, 1027, -1000, -1000,
	-1000, 2839, 30861, -1000, -1000, 262, -1000, 259, 1625, -1000,
	97235, 30861, 30861, -1000, 80065, 1980, 80065, 3588, -1000, -1000,
	3709, 97235, 97235, -1000, 4385, 21579, 1026, 80065, 4166, 1022,
	80570, 54864, 4298, -1000, 80065, -1000, -1000, 80065, 2940, -1000,
	4194, 1447, 1020, 36001, 80065, 2985, -1000, 2627, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1013, 4381, 4380, 100157,
	-1000, 80065, 4147, 709, 248, -1000, -1000, 80065, -1000, -1000,
	-1000, -1000, -1000, 1012, -1000, -1000, 462, -1000, -1000, -1000,
	2489, 952, 769, 3035, 1556, 1397, 52844, -1000, 202, 202,
	54864, 54864, -1000, -1000, 4378, 4378, 951, 4378, 202, 4170,
	80065, 4166, 2230, 80065, -1000, 3819, 3563, -1000, 80065, 40093,
	41608, 16657, 3590, -1000, -1000, 3759, 71985, 3759, -1000, 1010,
	-1000, 484, 3045, 4378, 80065, 80065, -1000, 3484, -1000, -1000,
	-1000, 80065, 4237, 2772, -1000, 71480, -1000, 3510, 16568, 80065,
	2606, 80065, 80065, -1000, 80065, 40598, -1000, -1000, 2824, 510,
	945, 2609, 2241, 1623, -1000, -1000, 1791, 1747, 2606, 80065,
	-1000, 80065, -1000, -1000, -1000, -1000, -1000, 21068, 21579, 21068,
	-1000, -1000, -1000, -1000, -1000, -1000, 1796, 80065, -1000, -1000,
	22634, -1000, -1000, -1000, -1000, -1000, 80065, 80065, 80065, 1725,
	3707, 80065, 1723, 3706, 80065, 80065, 80065, 80065, -1000, 3818,
	234, 1798, 2450, -1000, 3816, 234, 1778, 80065, -1000, -1000,
	-1000, -1000, 1622, 453, 80065, -1000, 80065, -1000, 16023, 2606,
	-1000, 2469, -1000, 3815, 3812, 2121, 2846, 80065, 4185, 1008,
	202, 1955, -1000, -1000, -1000, 80065, 80065, -1000, 1399, 963,
	80065, 80065, 80065, 80065, 80065, 4378, 2817, 4236, -1000, 80065,
	-1000, 21068, -1000, 22115, 1621, 2749, -1000, 4332, 3517, 3516,
	-1000, 99670, 2414, 2110, 2110, 3158, 209, 202, 202, 4190,
	-1000, -1000, 1268, -1000, -1000, -1000, -1000, -1000, -1000, 1805,
	-1000, 2746, 4378, 2613, 52339, 2608, -1000, 209, -1000, 981,
	452, -1000, 80065, 80065, 80065, 80065, 80065, -1000, 21068, -1000,
	-1000, -1000, -1000, -1000, 4190, 3783, 233, -1000, -1000, -1000,
	-1000, 1684, -1000, 204, -1000, 30861, -1000, 45175, -1000, -1000,
	3674, 3705, 18229, -1000, -1000, 80065, 80065, 80065, 80065, -1000,
	713, 1700, 30861, 30861, 619, 758, 517, 1700, 30861, 30861,
	-1000, -1000, 5950, 2456, 2446, 30861, 30861, -1000, 15849, -1000,
	200, -1000, 30861, -1000, -1000, 4378, 30861, -1000, 705, 704,
	703, 18229, 18229, -1000, -1000, 18229, 30861, 697, 2179, -1000,
	15768, 3378, 4052, 4051, -1000, -1000, 3378, 30861, 2960, -1000,
	693, 18229, 691, 14529, -1000, 244, 244, 406, 406, 406,
	-1000, 528, 528, 528, 528, 528, 528, 443, 3782, 2934,
	-1000, 1599, 15164, 14295, 14188, 688, -1000, -1000, -1000, 164,
	13937, -1000, 33431, -1000, -1000, 683, 1506, 1505, -1000, 3682,
	37543, 2964, -1000, 30861, 232, 32917, 3378, -1000, -1000, 680,
	-1000, 4047, 4040, 679, -1000, -1000, 13678, 13678, 13678, 102105,
	3674, -1000, 677, 230, 3331, 40598, 3273, -1000, -1000, 3380,
	-1000, -1000, 30861, -1000, 80065, 3658, 40093, 40093, 3734, 3542,
	40093, -1000, -1000, -1000, -1000, -1000, 60925, 1006, 80065, -1000,
	-1000, -1000, -1000, 70975, 1005, 80065, 80065, -1000, 47280, 3160,
	1004, 224, 79, 10509, 988, 1791, 2955, -1000, 2158, 998,
	-1000, 2562, 3505, -1000, 3703, 197, -1000, -1000, -1000, 4188,
	3206, 1702, 2777, -1000, -1000, 62928, 80065, 3241, 2684, 4170,
	4168, 4166, -1000, 995, 3584, 2129, 102592, -1000, 18229, 4378,
	3156, 100157, -1000, 18229, 18229, 1956, -1000, 111, 80065, 97235,
	-1000, 194, -1000, 1292, -1000, 3762, 2479, 4331, 80065, 949,
	4196, -1000, 2023, -1000, -1000, -1000, 4176, 4176, 30861, 1599,
	899, 4328, -1000, 4125, -1000, -1000, 3515, -1000, -1000, 80065,
	-1000, 4378, -1000, 2005, 21068, 439, 1804, 3206, 62928, 3239,
	80065, 2637, -1000, 1803, 202, 202, -1000, -1000, -1000, -1000,
	-1000, 4326, 1702, 60925, -1000, -1000, 2918, -1000, 4060, 3511,
	54864, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 141, -1000,
	-1000, 41608, -1000, -1000, -1000, -1000, 30861, -1000, 1687, 2632,
	3781, -1000, -1000, 3784, -1000, 80065, 1397, -1000, 70470, -1000,
	-1000, -1000, 190, -1000, 1795, -1000, 2607, 2496, -1000, 189,
	2606, 179, 178, -1000, 4186, 934, 4144, 30861, 4039, 4294,
	4293, -1000, -1000, 2985, 4033, 4325, 963, -1000, -1000, -1000,
	-1000, 2985, -1000, 5692, 100157, 981, 963, 4190, 4190, -1000,
	-1000, 955, -1000, -1000, -1000, -1000, 3808, 3806, 80065, 54864,
	-1000, 80065, 54864, -1000, -1000, -1000, 3805, 80065, 80065, 80065,
	1719, 3700, 80065, 80065, 80065, -1000, -1000, 1615, -1000, 4190,
	-1000, -1000, 80065, 80065, 35, -1000, 4364, 4364, 100157, 217,
	-1000, 4364, 4364, -1000, -1000, 1379, 30861, 3804, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 4190, -1000, 4378, 4378,
	-1000, 4190, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	100157, 100157, 80065, 80065, 177, 213, 80065, 3803, -1000, -1000,
	-1000, -1000, -1000, -1000, 3780, 65925, -1000, -1000, 80065, -1000,
	-1000, -1000, -1000, 1416, -1000, 209, 209, 209, 209, 209,
	-1000, -1000, 52339, 4190, -1000, -1000, 12658, 675, 1502, 30861,
	4138, -1000, -1000, -1000, -1000, 1700, 1700, 30861, 30861, 30861,
	1700, 5950, -1000, -1000, 1700, 1700, -1000, -1000, 12272, -1000,
	1384, -1000, -1000, -1000, 18229, -1000, 1384, 3696, -1000, 672,
	-1000, -1000, 671, 206, 80065, -1000, -1000, 30861, 36001, 3779,
	-1000, 30861, 30861, 30861, -1000, -1000, 176, 172, 994, -1000,
	-1000, -1000, -1000, 2964, 3682, -1000, -1000, 11868, 664, 1756,
	18229, 2942, 662, -1000, -1000, -1000, -1000, 3378, 30861, 3379,
	3378, 2315, 1502, 3467, 3338, 171, -1000, 80065, 2937, 18229,
	-1000, -1000, 3734, -1000, 991, 30861, 40093, -1000, 989, 80065,
	161, -1000, 80065, 160, 158, 100157, 154, -1000, 4321, 3237,
	35487, 30861, 661, 3440, -1000, 4226, 4226, 3430, -1000, 3496,
	21068, 988, 4378, 3505, 80065, 2692, 2692, 3044, 80065, -1000,
	63433, 1997, 1398, 2158, -1000, 80065, 2513, 648, 952, 80065,
	80065, -1000, -1000, 1792, 4320, 40598, 69965, -1000, 153, -1000,
	100644, -1000, 2030, -1000, 1591, -1000, 3146, 1603, 3778, 147,
	-1000, 633, 1773, 1772, 1679, 80065, 1046, 143, 62928, 4232,
	4298, -1000, 4027, 3507, 3507, 10857, 2354, 877, -1000, 80065,
	-1000, -1000, 136, -1000, 80065, 1797, 631, 80065, 1397, 2739,
	80065, 1046, -1000, 987, 2230, 80065, 982, 4185, 202, 489,
	10811, 60925, 4315, 4315, 80065, 980, 976, 971, -1000, -1000,
	-1000, -1000, 2606, 2540, -1000, -1000, -1000, -1000, -1000, 2540,
	2003, 2540, 40598, 45704, -1000, 80065, 80065, -1000, 10207, -1000,
	4231, 4229, -1000, -1000, 970, -1000, 4319, 4147, -1000, -1000,
	-1000, -1000, 21579, 80065, 80065, 2260, 423, 2260, 411, 80065,
	-1000, -1000, 3802, 80065, 54864, -1000, -1000, 3801, -1000, -1000,
	2606, -1000, -1000, 2121, 45175, 44670, -1000, 2846, 969, 968,
	962, 9478, 80065, -1000, -1000, -1000, -1000, 4147, 629, -1000,
	-1000, -1000, 99183, 100157, -1000, 52339, 52339, 3583, -1000, -1000,
	201, -1000, -1000, -1000, -1000, 80065, 18229, 31889, 1700, 1700,
	1700, -1000, 628, 2480, 30861, -1000, -1000, -1000, 7792, 483,
	36001, 18229, 18229, 18229, -1000, 30861, -1000, 30861, -1000, -1000,
	-1000, 1633, -1000, -1000, 3041, 198, -1000, 4317, 627, 3579,
	30861, -1000, -1000, -1000, -1000, -1000, -1000, 3054, 3379, 620,
	-1000, 2514, -1000, 3451, 3471, 3412, -1000, 3741, 40598, -1000,
	1046, -1000, 80065, 18229, -1000, 30861, 135, -1000, 128, -1000,
	-1000, 1310, 47280, -1000, 957, 80065, 123, -1000, 463, 36001,
	7262, -1000, -1000, -1000, 3352, 30861, 3350, -1000, 3339, -1000,
	-1000, -1000, 4313, 4313, -1000, -1000, 4313, 4313, 3098, 4378,
	121, -1000, 39578, 3741, -1000, 3044, 118, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3551,
	956, -1000, -1000, 3505, -1000, -1000, 3211, 3210, 2489, 2158,
	952, 953, 1413, 1375, 1372, 1046, 116, 3510, 102592, 6324,
	-1000, -1000, 400, -1000, -1000, 100157, 4008, 2711, 1603, -1000,
	2146, -1000, -1000, -1000, 80065, -1000, -1000, 4183, 4180, -1000,
	-1000, 80065, 1565, -1000, 4168, 4166, 80065, -1000, 2501, -1000,
	2282, 3564, 2139, 928, 30861, 2659, -1000, 21068, 1397, 80065,
	2489, 952, -1000, 3030, 1397, 4170, 618, 60925, -1000, 4396,
	-1000, 40093, -1000, 4315, -1000, 2665, -1000, -1000, 61430, 30861,
	30861, 1997, 4176, 950, 4176, 80065, 4176, -1000, -1000, 948,
	3419, 945, -1000, 4144, -1000, -1000, 30861, 2576, 3509, -1000,
	-1000, -1000, -1000, 1718, -1000, 1717, -1000, 80065, 2260, 396,
	80065, -1000, 896, 3122, -1000, 100157, -1000, 100157, 100157, 30861,
	-1000, -1000, 4190, -1000, 587, 583, 575, 433, 471, 2110,
	4190, 192, -1000, 4314, 187, -1000, 18229, -1000, -1000, -1000,
	-1000, 23660, 944, 943, 591, -1000, 568, 32403, 32403, 32403,
	164, 30861, 483, 115, 110, -1000, 2936, 2982, 3063, 3133,
	30861, 21068, -1000, 3101, 18229, -1000, -1000, 564, 3578, -1000,
	-1000, -1000, 80065, 3448, 3425, 58400, -1000, -1000, -1000, 108,
	105, -1000, -1000, -1000, -1000, 80065, 104, -1000, 98696, 35487,
	146, 21068, 1599, 3199, 80065, 3318, 18229, 3373, 3681, 4378,
	4378, 4378, 4378, 50319, 4025, 49814, -1000, -1000, 21068, -1000,
	-1000, -1000, -1000, -1000, 51834, -1000, 3551, -1000, 1702, 41103,
	1997, 3044, -1000, -1000, 2158, 3505, 3206, 4170, -1000, 1405,
	1404, 4168, 2532, 939, -1000, 2129, -1000, -1000, 2677, 938,
	1770, -1000, -1000, 4313, -1000, -1000, 2640, -1000, 2629, 2628,
	-1000, -1000, -1000, 4309, 854, 1715, -1000, 2491, -1000, 3572,
	3569, 3397, -1000, -1000, -1000, -1000, 3809, 9212, 4308, 80065,
	-1000, -1000, 1397, 1793, 3206, 80065, -1000, -1000, -1000, 937,
	103, -1000, 141, -1000, -1000, -1000, 100, -1000, 4364, 84,
	82, 3507, 80065, 3507, 899, 3507, 45175, 1318, 3419, -1000,
	9163, 928, -1000, 30861, 80065, 80065, -1000, -1000, 1704, -1000,
	2073, 1809, 2073, 77, 74, 70, 8803, -1000, -1000, -1000,
	-1000, -1000, -1000, 3776, -1000, 80065, 927, 31889, -1000, 30861,
	30861, 924, -1000, 2698, -1000, 37029, 2223, 1890, 6639, 2698,
	2698, 18229, -1000, -1000, -1000, 3379, 2999, 2959, -1000, 3022,
	-1000, 3019, 3061, 3017, -1000, -1000, -1000, -1000, 3102, 395,
	3680, 3679, 402, 4305, 1948, 69, -1000, 80065, 3240, 3220,
	-1000, 37543, -1000, 3233, -1000, -1000, -1000, 3328, 3408, -1000,
	-1000, 3323, 1090, 3334, -1000, -1000, -1000, -1000, 111, -1000,
	49309, 111, -1000, -1000, 64, -1000, -1000, 1702, -1000, 63,
	-1000, 934, 4144, 30861, 3551, 3505, 3044, 2158, -1000, -1000,
	-1000, -1000, 4194, 919, 40598, -1000, 2230, 30861, -1000, -1000,
	-1000, 80065, 2709, 60925, 60925, 1046, 62928, 80065, -1000, -1000,
	3391, -1000, 3401, 2705, 2705, 1656, 1739, 2121, -1000, -1000,
	80065, 1790, 1397, 549, -1000, 4392, -1000, 61430, -1000, -1000,
	3800, -1000, 33, -1000, 2354, 3741, 548, -1000, 1318, -1000,
	-1000, 18229, 2260, 2260, 80065, -1000, -1000, -1000, 3678, -1000,
	60925, -1000, -1000, -1000, 52339, -1000, -1000, -1000, 32, 29,
	31889, -1000, 2072, 4225, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 536, 3568, 3565, -1000, -1000, 3006, -1000, 2988, -1000,
	3379, -1000, 80065, 80065, 80065, -1000, -1000, 80065, -1000, 916,
	-1000, -1000, 3240, -1000, 36001, 36001, 4019, -1000, 36001, -1000,
	3160, 915, -1000, 58400, -1000, -1000, 3380, 80065, 3482, 913,
	-1000, -1000, 111, -1000, -1000, 51834, -1000, -1000, 41103, 80065,
	80065, 8489, 1702, 3044, 3551, 3505, 4166, 40598, 27, 60925,
	8365, -1000, -1000, 1889, 83, 81, 4168, -1000, -1000, 2859,
	-1000, -1000, 4023, -1000, -1000, -1000, 35, 1397, 80065, -1000,
	-1000, -1000, -1000, 910, 2606, -1000, 2606, 3564, -1000, -1000,
	-1000, -1000, -1000, 2260, 80065, -1000, 471, -1000, -1000, 19,
	1876, -1000, -1000, 1467, 31375, -1000, 2987, 2977, -1000, -1000,
	3560, 3520, 378, 372, -1000, 30861, -1000, 1599, 1599, -1000,
	1599, 3230, 79560, -3, 2921, 16, -1000, 30861, -1000, -1000,
	-1000, -1000, 4144, -1000, 3551, 1702, 3044, 1702, 14, -1000,
	2532, 906, -1000, 4008, 3799, 3775, -1000, -1000, 899, 899,
	-1000, 1397, 30861, -1000, 2606, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2971, 2957, 3097, 48804, 80065, 80065, 80065, 7944,
	80065, 8, -1000, 98209, 3203, 3481, 3384, 2, 80065, 1702,
	-1000, 3551, 3741, -1000, 40598, 4194, 20557, 2676, 1769, 1749,
	-1000, -1000, -1000, -11, 2606, -1000, -1000, -1000, 4124, 1050,
	-1000, -1000, -1000, -1000, -1000, -22, 3379, 79560, 3219, 1812,
	4390, -1000, -1000, -1000, 3380, -1000, -1000, -1000, 1702, -1000,
	-1000, 4166, -27, -1000, -1000, -1000, -1000, -1000, 2230, 4161,
	4158, -1000, 48804, 30861, -1000, 516, -1000, -1000, 3041, 3201,
	3201, 4383, 3316, 2920, -1000, 1702, -1000, 20557, 60925, 2624,
	2623, 3503, -24, -1000, 2982, 3041, 3379, -1000, 885, 80065,
	3481, 3741, -1000, 876, 60925, 60925, 80065, 464, 3379, 2982,
	-1000, 79560, 3228, -1000, -1000, 20557, -1000, -1000, -1000, 4378,
	-1000, 3379, -57, 863, -62, -1000, -1000, 79560, -1000, -68,
	-1000,
}

var yyPgo = [...]int16{
	0, 4921, 4919, 3103, 145, 0, 36, 7730, 4916, 161,
	314, 373, 4915, 523, 385, 284, 143, 369, 447, 386,
	4914, 4913, 4911, 4908, 37, 4904, 4438, 10578, 9905, 139,
	4903, 334, 4903, 4902, 382, 328, 213, 4901, 251, 4900,
	4899, 179, 252, 4889, 294, 4888, 441, 4884, 27, 4881,
	4877, 299, 164, 399, 430, 431, 440, 4875, 354, 400,
	360, 361, 4870, 8372, 59, 6885, 11, 4864, 4863, 860,
	4862, 4861, 4860, 350, 4859, 308, 4856, 4855, 4853, 4852,
	16, 394, 4852, 4849, 351, 4847, 4842, 4838, 102, 4836,
	4835, 4832, 4831, 225, 372, 358, 4830, 500, 342, 4426,
	281, 734, 11883, 4829, 380, 238, 4781, 202, 512, 4822,
	13848, 4821, 4819, 12967, 12240, 12144, 4817, 10280, 10201, 107,
	271, 250, 363, 368, 405, 298, 436, 544, 396, 2,
	451, 387, 4816, 4815, 4814, 158, 4813, 4812, 61, 57,
	348, 4808, 4807, 84, 34, 56, 427, 397, 4806, 4804,
	444, 4803, 4801, 11318, 62, 245, 4799, 82, 4798, 353,
	355, 73, 48, 4795, 352, 301, 300, 46, 293, 228,
	60, 192, 357, 4794, 4793, 4790, 4787, 156, 286, 80,
	8584, 428, 423, 236, 203, 127, 125, 4786, 242, 239,
	4784, 4779, 4777, 4776, 4774, 4773, 4772, 4767, 4765, 4763,
	4762, 4761, 4760, 4759, 4758, 4756, 4754, 4753, 4751, 4750,
	32, 33, 4745, 4744, 283, 279, 292, 337, 4742, 344,
	176, 10, 40, 173, 123, 4739, 4738, 4735, 4734, 28,
	87, 15, 4733, 4732, 4730, 383, 4727, 433, 4724, 4723,
	297, 335, 4722, 4721, 3242, 487, 3303, 4720, 105, 332,
	4719, 4718, 4717, 149, 4716, 4715, 4714, 69, 4714, 54,
	76, 4713, 45, 113, 367, 313, 406, 41, 326, 443,
	285, 4712, 438, 390, 391, 81, 261, 6, 259, 223,
	325, 4710, 276, 4709, 4707, 4707, 432, 333, 282, 277,
	144, 167, 4706, 452, 4705, 425, 4704, 4702, 4701, 4699,
	341, 188, 79, 4696, 268, 4695, 99, 4694, 4692, 94,
	338, 20, 50, 4691, 39, 103, 38, 160, 4689, 70,
	336, 1, 17, 35, 4687, 478, 4686, 75, 4683, 146,
	302, 4682, 349, 304, 4680, 323, 74, 7, 5, 4668,
	9, 13, 4, 18, 290, 4667, 52, 4665, 95, 4664,
	274, 166, 187, 4661, 141, 4652, 67, 43, 108, 4651,
	4650, 4647, 142, 140, 4646, 100, 4644, 178, 319, 4642,
	4640, 4637, 19, 42, 122, 66, 68, 53, 23, 89,
	55, 4636, 4635, 29, 88, 4634, 255, 21, 12, 64,
	321, 97, 4632, 24, 22, 25, 316, 180, 381, 377,
	4629, 315, 409, 4626, 4625, 408, 112, 388, 47, 258,
	4624, 256, 4623, 162, 4621, 98, 58, 189, 65, 63,
	4620, 44, 254, 4618, 92, 347, 4617, 327, 1409, 14326,
	4615, 147, 339, 445, 83, 4612, 262, 196, 4610, 31,
	370, 106, 466, 404, 4605, 371, 4605, 4604, 4603, 231,
	211, 138, 4601, 152, 4599, 4598, 4597, 4596, 413, 4594,
	4593, 4591, 4587, 4585, 4584, 4583, 4582, 4581, 4580, 4579,
	4576, 4575, 4572, 4571, 448, 472, 4570, 374, 4569, 455,
	362, 4568, 403, 4567, 154, 4566, 401, 359, 4563, 4560,
	4555, 366, 453, 419, 410, 4554, 197, 407, 51, 4553,
	85, 437, 402, 247, 115, 77, 4552, 4551, 244, 311,
	439, 193, 190, 4550, 4549, 4548, 4547, 4546, 4545, 4544,
	4543, 4542, 4541, 4536, 4532, 4531, 4530, 4529, 4528, 4526,
	4522, 4517, 4516, 4515, 4514, 4513, 4511, 4510, 4508, 4506,
	4505, 4504, 4502, 4501, 4500, 4499, 4498, 4497, 4496, 4495,
	4494, 4493, 4492, 4491, 4490, 273, 265, 4489, 4488, 4487,
	379, 378, 312, 324, 442, 260, 269, 101, 4486, 4485,
	121, 4484, 4483, 4481, 417, 4478, 449, 4477, 4476, 4472,
	4471, 183, 114, 4470, 91, 165, 415, 49, 4469, 4468,
	257, 322, 109, 104, 4467, 4466, 4464, 4463, 4462, 195,
	4458, 4457, 266, 71, 4455, 310, 267, 450, 375, 416,
	446, 4454, 418, 4453, 2666, 424, 4452, 272, 291, 93,
	376, 4451, 96, 4450, 4449, 331, 422, 249, 4448, 4445,
	4441, 72, 4439, 4436, 270, 330, 4434, 4431, 4430, 4429,
	4427, 4425, 3, 90, 26, 8, 4423, 4421, 30, 4419,
	4418, 296, 4417, 4416, 393, 86, 78, 4415, 4414, 4413,
	7323, 340, 4410, 4407, 303, 14, 4406, 4406, 3457, 414,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	19, 19, 394, 394, 428, 428, 428, 32, 32, 33,
	33, 34, 34, 35, 35, 48, 48, 48, 5, 5,
	5, 6, 6, 6, 6, 6, 8, 8, 7, 13,
	13, 14, 14, 429, 429, 31, 31, 16, 16, 18,
	18, 661, 661, 423, 423, 423, 423, 423, 423, 423,
	423, 423, 15, 15, 17, 17, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 657, 657, 657, 657, 657, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 99, 101, 100, 100, 100, 108, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 123, 123, 67, 67, 94, 94, 98, 98, 97,
	97, 97, 97, 95, 95, 68, 68, 68, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 81, 81,
	83, 83, 83, 83, 83, 84, 84, 84, 85, 12,
	12, 12, 12, 12, 12, 12, 12, 86, 86, 87,
	79, 88, 88, 216, 216, 89, 89, 89, 90, 90,
	90, 91, 91, 92, 92, 92, 92, 301, 301, 301,
	614, 614, 130, 130, 130, 130, 130, 130, 130, 80,
	80, 93, 93, 93, 70, 71, 71, 74, 74, 73,
	72, 72, 75, 75, 75, 78, 78, 128, 128, 128,
	76, 76, 77, 163, 163, 163, 156, 156, 156, 156,
	156, 156, 165, 165, 165, 165, 164, 164, 164, 164,
	164, 166, 166, 166, 166, 166, 127, 127, 106, 106,
	106, 106, 106, 106, 124, 124, 124, 107, 107, 107,
	107, 107, 107, 107, 107, 102, 102, 102, 104, 105,
	21, 120, 120, 121, 121, 109, 109, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 116, 116,
	112, 112, 658, 658, 659, 659, 103, 103, 103, 103,
	103, 103, 113, 114, 117, 118, 115, 115, 115, 115,
	660, 125, 125, 125, 126, 126, 111, 111, 153, 153,
	155, 155, 157, 157, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 154, 154, 129, 129,
	134, 134, 131, 131, 160, 160, 159, 159, 177, 177,
	180, 180, 181, 181, 179, 179, 179, 179, 179, 179,
	179, 179, 146, 146, 147, 147, 148, 148, 150, 151,
	151, 151, 151, 149, 149, 152, 152, 152, 182, 182,
	182, 182, 182, 182, 182, 271, 271, 270, 270, 273,
	273, 273, 273, 274, 274, 275, 275, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 431,
	431, 432, 432, 432, 433, 433, 433, 287, 287, 287,
	287, 287, 287, 288, 288, 288, 288, 289, 289, 290,
	290, 291, 291, 291, 292, 292, 293, 293, 295, 296,
	296, 296, 297, 297, 297, 298, 298, 298, 299, 299,
	277, 277, 219, 219, 219, 240, 280, 280, 279, 279,
	279, 279, 282, 282, 282, 282, 282, 281, 281, 283,
	283, 284, 284, 285, 285, 286, 286, 300, 300, 309,
	309, 305, 305, 306, 307, 307, 308, 308, 619, 303,
	303, 302, 302, 304, 315, 315, 317, 317, 316, 316,
	316, 316, 318, 318, 319, 319, 310, 310, 311, 311,
	312, 312, 312, 313, 313, 314, 314, 314, 314, 314,
	320, 325, 324, 324, 336, 336, 326, 326, 327, 328,
	328, 331, 331, 330, 330, 332, 332, 332, 333, 333,
	333, 334, 334, 329, 329, 335, 335, 338, 338, 339,
	339, 339, 339, 339, 339, 339, 339, 340, 340, 340,
	340, 337, 337, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 342, 342, 342, 342, 342, 343, 343, 344,
	344, 345, 345, 321, 321, 322, 322, 322, 322, 322,
	322, 323, 323, 183, 430, 430, 209, 209, 209, 209,
	209, 231, 231, 210, 210, 214, 184, 211, 211, 217,
	217, 215, 212, 212, 185, 294, 294, 186, 213, 213,
	187, 187, 234, 234, 235, 235, 241, 241, 241, 250,
	250, 251, 251, 253, 253, 254, 254, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 255, 255, 260, 261, 261, 261, 261, 261,
	261, 256, 256, 262, 267, 267, 267, 267, 263, 263,
	263, 263, 41, 41, 405, 405, 405, 405, 405, 405,
	405, 405, 404, 404, 404, 403, 403, 403, 403, 403,
	266, 266, 576, 576, 265, 265, 662, 662, 603, 603,
	236, 236, 237, 237, 238, 238, 239, 239, 223, 223,
	223, 223, 223, 232, 232, 233, 233, 224, 224, 226,
	227, 228, 228, 228, 228, 228, 221, 218, 218, 218,
	225, 225, 225, 258, 258, 259, 259, 229, 229, 229,
	230, 230, 222, 222, 161, 161, 161, 162, 162, 162,
	220, 220, 188, 188, 188, 188, 188, 188, 407, 407,
	407, 407, 407, 407, 407, 407, 346, 346, 347, 347,
	350, 350, 350, 353, 361, 361, 361, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 409, 409, 410,
	410, 411, 411, 412, 412, 348, 348, 349, 349, 354,
	354, 355, 355, 356, 356, 356, 356, 357, 360, 360,
	413, 413, 414, 414, 415, 10, 40, 351, 365, 365,
	366, 366, 366, 366, 369, 369, 369, 369, 372, 372,
	372, 417, 417, 420, 420, 422, 422, 422, 422, 418,
	418, 421, 421, 421, 421, 421, 421, 421, 421, 421,
	421, 421, 421, 421, 421, 421, 421, 663, 663, 36,
	36, 36, 416, 416, 419, 419, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 352, 352, 368, 368, 368,
	368, 368, 368, 368, 370, 370, 359, 359, 358, 358,
	374, 374, 373, 373, 373, 373, 378, 378, 378, 378,
	378, 375, 376, 377, 377, 377, 377, 377, 379, 379,
	380, 380, 381, 382, 382, 383, 383, 383, 408, 408,
	387, 387, 387, 387, 388, 388, 389, 389, 390, 189,
	189, 371, 371, 391, 391, 393, 393, 392, 392, 395,
	395, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 396, 396, 24, 24, 397, 397, 11, 502,
	502, 502, 502, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 399, 399, 399, 400, 401, 401,
	664, 664, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 452, 452, 452, 608, 608, 608,
	611, 611, 611, 611, 610, 610, 612, 612, 453, 454,
	454, 454, 454, 479, 479, 482, 483, 483, 483, 485,
	485, 485, 458, 458, 458, 458, 458, 458, 458, 455,
	455, 459, 459, 480, 480, 481, 481, 486, 484, 484,
	456, 456, 456, 456, 456, 457, 457, 193, 193, 193,
	193, 193, 487, 487, 194, 194, 194, 488, 488, 489,
	489, 490, 490, 195, 196, 196, 196, 196, 196, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 46, 46, 47, 47, 441, 96, 96, 96,
	96, 440, 82, 82, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 363,
	363, 364, 364, 364, 364, 364, 364, 384, 385, 385,
	386, 386, 386, 386, 447, 447, 447, 447, 615, 615,
	616, 616, 617, 617, 617, 618, 618, 618, 618, 618,
	620, 620, 620, 620, 620, 621, 119, 119, 119, 622,
	622, 623, 623, 625, 625, 625, 625, 625, 630, 630,
	624, 624, 631, 631, 631, 451, 649, 649, 632, 632,
	613, 613, 449, 449, 633, 633, 633, 635, 635, 634,
	634, 634, 634, 634, 640, 640, 641, 641, 643, 638,
	638, 639, 639, 646, 636, 636, 666, 666, 637, 637,
	644, 644, 665, 665, 642, 642, 642, 645, 645, 645,
	645, 647, 647, 450, 450, 450, 450, 257, 257, 648,
	648, 648, 648, 513, 513, 513, 513, 514, 515, 515,
	515, 515, 515, 515, 515, 516, 516, 516, 516, 516,
	516, 516, 516, 516, 516, 516, 516, 516, 516, 516,
	516, 520, 520, 555, 555, 667, 667, 521, 521, 522,
	522, 556, 556, 558, 558, 558, 558, 523, 557, 557,
	559, 524, 524, 524, 524, 524, 524, 524, 524, 524,
	524, 524, 524, 524, 545, 546, 546, 562, 562, 562,
	562, 561, 561, 560, 560, 567, 567, 547, 547, 548,
	548, 548, 563, 563, 564, 564, 565, 565, 549, 549,
	549, 549, 550, 550, 551, 552, 552, 566, 566, 598,
	598, 598, 598, 599, 599, 606, 600, 601, 601, 602,
	519, 519, 519, 519, 519, 553, 553, 554, 554, 604,
	604, 605, 605, 511, 511, 512, 435, 435, 436, 434,
	434, 434, 437, 437, 438, 438, 438, 438, 609, 609,
	609, 609, 609, 609, 609, 609, 609, 609, 609, 607,
	607, 607, 607, 269, 269, 272, 272, 264, 264, 650,
	650, 650, 650, 650, 650, 650, 652, 652, 652, 268,
	268, 9, 9, 9, 9, 654, 654, 491, 491, 491,
	651, 651, 651, 651, 651, 653, 653, 653, 653, 492,
	492, 406, 406, 406, 406, 406, 406, 424, 424, 37,
	37, 38, 39, 39, 42, 42, 42, 42, 43, 43,
	45, 45, 45, 45, 425, 426, 426, 427, 427, 525,
	525, 526, 571, 571, 571, 571, 568, 568, 570, 569,
	569, 527, 572, 572, 528, 528, 529, 530, 573, 573,
	577, 577, 578, 578, 578, 578, 578, 579, 579, 580,
	580, 581, 581, 582, 582, 531, 583, 583, 532, 532,
	533, 533, 585, 585, 590, 590, 590, 534, 534, 534,
	535, 535, 535, 535, 586, 586, 591, 591, 591, 591,
	591, 591, 591, 278, 278, 536, 537, 537, 537, 537,
	537, 537, 537, 537, 537, 538, 538, 538, 584, 584,
	584, 539, 594, 594, 587, 587, 592, 592, 592, 592,
	592, 574, 574, 655, 655, 655, 656, 656, 540, 541,
	541, 588, 588, 593, 593, 542, 543, 589, 589, 589,
	589, 544, 544, 575, 575, 595, 595, 596, 596, 597,
	597, 52, 52, 52, 51, 51, 167, 167, 170, 170,
	170, 170, 170, 173, 174, 175, 176, 171, 171, 168,
	169, 169, 172, 172, 135, 135, 136, 136, 138, 140,
	140, 140, 139, 141, 141, 137, 137, 142, 142, 142,
	142, 143, 143, 144, 144, 144, 144, 144, 145, 145,
	145, 145, 145, 54, 54, 54, 54, 53, 53, 55,
	55, 55, 55, 55, 55, 56, 56, 57, 57, 58,
	59, 59, 59, 60, 60, 61, 61, 62, 62, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	460, 461, 461, 668, 668, 668, 475, 475, 475, 462,
	468, 466, 463, 463, 464, 464, 464, 464, 474, 474,
	467, 465, 465, 465, 465, 465, 465, 493, 493, 494,
	494, 476, 476, 476, 476, 476, 476, 477, 477, 477,
	477, 477, 477, 477, 477, 477, 510, 510, 469, 470,
	470, 471, 471, 472, 472, 473, 495, 495, 478, 478,
	478, 507, 507, 507, 500, 500, 500, 500, 500, 500,
	496, 496, 496, 496, 496, 497, 497, 501, 501, 501,
	501, 501, 509, 509, 509, 509, 509, 509, 509, 509,
	509, 509, 509, 509, 509, 509, 509, 509, 509, 509,
	509, 509, 509, 498, 498, 503, 503, 505, 505, 499,
	499, 508, 506, 506, 506, 504, 504, 49, 49, 44,
	44, 50, 50, 132, 133, 133, 448, 448, 448, 442,
	442, 626, 626, 626, 626, 626, 626, 626, 626, 626,
	626, 626, 626, 626, 626, 626, 626, 626, 628, 628,
	627, 627, 627, 629, 629, 629, 629, 629, 669, 669,
	439, 439, 439, 439, 443, 443, 517, 518, 444, 444,
	445, 445, 445, 445, 446, 446, 446, 446, 197, 242,
	242, 242, 242, 242, 242, 243, 243, 243, 198, 198,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 244, 244, 245, 245,
	199, 199, 200, 247, 247, 178, 178, 178, 178, 178,
	201, 201, 201, 248, 248, 249, 202, 202, 202, 202,
	203, 204, 204, 205, 20, 20, 206, 207, 22, 22,
	23, 23, 23, 23, 23, 23, 23, 23, 208, 25,
	25, 25,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 2, 0, 3,
	0, 2, 0, 1, 0, 2, 2, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 2, 3, 0, 1, 3, 1,
	3, 1, 0, 3, 3, 4, 4, 4, 4, 3,
	2, 1, 1, 2, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 5, 3, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	3, 3, 2, 2, 3, 5, 4, 6, 3, 5,
	4, 6, 4, 6, 5, 7, 3, 2, 4, 2,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 3, 4, 4, 6, 3, 3, 4,
	3, 4, 4, 5, 4, 5, 1, 1, 3, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 5, 6, 3, 4, 1,
	1, 2, 4, 1, 1, 1, 2, 2, 2, 2,
	1, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 6, 2, 3,
	5, 1, 1, 1, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 2, 1, 2, 1, 0, 2,
	2, 3, 5, 0, 2, 4, 3, 1, 5, 1,
	1, 4, 1, 4, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 6, 4, 4, 6, 4,
	4, 4, 4, 4, 6, 5, 5, 5, 4, 6,
	4, 4, 4, 4, 5, 7, 7, 9, 4, 6,
	5, 5, 7, 7, 4, 7, 4, 6, 6, 4,
	5, 4, 5, 3, 11, 8, 9, 8, 1, 0,
	5, 5, 3, 3, 5, 3, 2, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 5, 3,
	4, 1, 3, 3, 1, 2, 2, 0, 1, 2,
	0, 2, 3, 3, 3, 4, 0, 1, 1, 1,
	1, 2, 3, 4, 5, 6, 8, 6, 6, 1,
	3, 1, 3, 3, 5, 1, 0, 1, 2, 4,
	2, 0, 3, 3, 2, 1, 3, 4, 3, 5,
	4, 3, 5, 1, 1, 1, 1, 4, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 3, 2, 3, 2, 0, 1, 3, 2, 3,
	5, 6, 2, 3, 3, 4, 0, 1, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 2, 3, 3, 0, 2, 3, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 3,
	3, 2, 4, 1, 5, 2, 5, 2, 5, 2,
	1, 3, 3, 0, 1, 0, 3, 0, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 0,
	5, 0, 5, 0, 0, 1, 1, 3, 1, 1,
	3, 3, 1, 1, 1, 2, 4, 4, 2, 3,
	5, 5, 1, 3, 1, 0, 1, 2, 3, 2,
	4, 2, 3, 2, 0, 1, 2, 0, 9, 9,
	2, 1, 4, 4, 4, 1, 0, 1, 3, 3,
	2, 1, 1, 2, 0, 1, 3, 2, 3, 2,
	3, 1, 4, 2, 3, 2, 3, 2, 3, 1,
	1, 2, 2, 4, 1, 2, 3, 3, 4, 5,
	4, 5, 4, 2, 2, 2, 1, 1, 0, 5,
	2, 2, 2, 3, 1, 0, 1, 3, 9, 1,
	2, 0, 7, 7, 0, 10, 6, 0, 4, 5,
	2, 0, 2, 4, 0, 1, 1, 0, 5, 2,
	4, 1, 1, 4, 5, 4, 0, 2, 0, 1,
	0, 1, 5, 1, 0, 2, 0, 2, 6, 2,
	0, 1, 3, 2, 4, 0, 1, 3, 2, 1,
	0, 1, 3, 3, 2, 0, 2, 2, 2, 3,
	3, 4, 1, 3, 3, 2, 7, 12, 1, 3,
	2, 3, 3, 1, 2, 2, 2, 2, 1, 2,
	13, 2, 2, 0, 2, 0, 1, 3, 3, 1,
	3, 1, 3, 3, 3, 3, 3, 0, 3, 3,
	0, 3, 0, 7, 7, 3, 0, 2, 1, 1,
	1, 1, 1, 1, 2, 2, 1, 3, 3, 6,
	0, 3, 0, 2, 3, 2, 3, 4, 4, 3,
	3, 0, 5, 2, 5, 2, 0, 4, 2, 1,
	0, 1, 0, 1, 3, 3, 6, 7, 5, 7,
	9, 2, 0, 7, 1, 3, 1, 4, 4, 7,
	2, 1, 1, 1, 3, 2, 8, 1, 3, 3,
	5, 2, 1, 3, 7, 2, 0, 10, 1, 2,
	9, 11, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 3, 0, 1, 3, 2, 0, 1, 1, 3,
	3, 1, 1, 3, 3, 3, 3, 4, 4, 3,
	3, 2, 1, 3, 2, 1, 1, 1, 1, 3,
	0, 1, 3, 1, 1, 1, 1, 1, 1, 2,
	2, 1, 1, 1, 2, 2, 1, 3, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 0, 2, 0, 1, 0, 1, 0,
	1, 0, 1, 0, 1, 0, 1, 0, 4, 4,
	4, 5, 5, 2, 5, 3, 5, 2, 0, 3,
	1, 2, 5, 5, 8, 3, 4, 8, 5, 0,
	4, 3, 0, 1, 3, 1, 3, 2, 2, 4,
	4, 5, 2, 0, 1, 1, 0, 2, 2, 0,
	2, 0, 13, 16, 12, 15, 14, 17, 1, 1,
	2, 2, 2, 2, 1, 0, 1, 0, 1, 3,
	1, 1, 1, 3, 3, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 1,
	0, 2, 2, 1, 0, 3, 0, 1, 3, 1,
	1, 2, 4, 6, 6, 10, 1, 2, 1, 3,
	4, 0, 1, 3, 2, 1, 1, 6, 2, 0,
	3, 1, 1, 2, 1, 2, 2, 2, 2, 3,
	0, 1, 2, 1, 2, 1, 3, 2, 3, 1,
	2, 2, 2, 1, 2, 3, 1, 2, 2, 2,
	2, 3, 3, 3, 1, 3, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 0, 2, 1, 4, 4,
	5, 2, 5, 5, 7, 3, 1, 5, 9, 3,
	9, 4, 11, 10, 2, 0, 1, 3, 3, 6,
	4, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 3, 3, 4, 0,
	1, 0, 6, 1, 3, 3, 3, 5, 2, 0,
	3, 4, 4, 0, 2, 0, 4, 0, 3, 16,
	19, 1, 0, 2, 0, 4, 0, 1, 3, 2,
	0, 4, 6, 4, 6, 4, 4, 6, 4, 6,
	5, 7, 5, 7, 4, 6, 10, 13, 10, 13,
	11, 14, 1, 3, 1, 0, 1, 3, 1, 1,
	1, 1, 1, 2, 5, 3, 6, 4, 6, 6,
	9, 5, 7, 6, 6, 5, 5, 5, 5, 9,
	4, 5, 7, 6, 4, 8, 4, 2, 4, 3,
	6, 4, 3, 3, 3, 2, 2, 3, 4, 4,
	3, 3, 3, 3, 3, 3, 4, 4, 3, 2,
	3, 2, 2, 3, 4, 3, 2, 2, 3, 4,
	4, 4, 5, 1, 4, 4, 4, 3, 3, 2,
	1, 0, 6, 4, 6, 4, 6, 8, 4, 6,
	4, 6, 5, 7, 2, 3, 3, 2, 5, 1,
	1, 2, 3, 2, 1, 1, 2, 1, 2, 2,
	4, 3, 5, 1, 3, 2, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 6,
	5, 3, 5, 1, 0, 1, 3, 2, 1, 1,
	2, 3, 4, 3, 2, 4, 4, 6, 4, 4,
	2, 5, 2, 0, 5, 5, 5, 1, 1, 1,
	1, 3, 0, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 1, 2, 1, 1, 1, 3, 3,
	3, 3, 3, 2, 1, 3, 2, 3, 5, 5,
	5, 2, 1, 3, 6, 6, 6, 6, 6, 8,
	8, 6, 6, 7, 9, 9, 8, 10, 6, 6,
	6, 6, 6, 6, 6, 8, 6, 8, 6, 8,
	7, 9, 6, 8, 7, 9, 8, 10, 8, 10,
	9, 11, 8, 10, 9, 11, 8, 8, 7, 6,
	6, 6, 6, 8, 8, 8, 8, 6, 9, 0,
	2, 2, 1, 2, 2, 2, 2, 3, 1, 3,
	3, 1, 5, 3, 9, 12, 7, 7, 3, 2,
	1, 3, 1, 3, 3, 3, 3, 2, 2, 1,
	1, 1, 1, 2, 1, 1, 1, 4, 5, 1,
	0, 1, 2, 2, 2, 2, 1, 1, 1, 3,
	3, 5, 1, 4, 0, 2, 3, 0, 1, 1,
	2, 1, 17, 21, 1, 1, 2, 1, 3, 1,
	1, 1, 3, 1, 2, 0, 1, 2, 4, 1,
	1, 1, 1, 1, 3, 0, 1, 0, 1, 1,
	4, 0, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 2, 0, 9, 11, 12, 14, 3, 0, 3,
	4, 4, 0, 6, 4, 9, 7, 6, 4, 6,
	6, 5, 7, 9, 6, 6, 5, 4, 4, 3,
	6, 6, 6, 6, 4, 7, 5, 8, 7, 8,
	6, 5, 8, 1, 0, 1, 0, 4, 6, 5,
	8, 2, 0, 2, 2, 2, 1, 5, 2, 0,
	2, 6, 6, 6, 10, 6, 6, 6, 9, 9,
	6, 6, 9, 6, 7, 7, 6, 2, 2, 2,
	2, 1, 2, 1, 0, 1, 2, 10, 13, 5,
	4, 4, 2, 0, 2, 2, 1, 0, 11, 14,
	12, 15, 8, 11, 8, 7, 9, 1, 1, 3,
	3, 5, 6, 1, 3, 1, 3, 1, 3, 3,
	7, 9, 9, 8, 6, 1, 0, 1, 3, 3,
	1, 5, 3, 8, 11, 6, 1, 0, 5, 2,
	3, 0, 2, 0, 1, 1, 1, 1, 1, 3,
	3, 2, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 3, 1, 3, 1, 1, 1,
	1, 3, 5, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	3, 2, 2, 1, 2, 2, 2, 2, 1, 1,
	0, 1, 1, 1, 1, 1, 1, 2, 0, 2,
	0, 4, 1, 3, 1, 2, 2, 2, 1, 1,
	1, 1, 1, 3, 3, 1, 3, 1, 3, 11,
	13, 5, 1, 2, 2, 1, 1, 3, 5, 1,
	3, 7, 2, 0, 5, 5, 10, 8, 2, 0,
	2, 0, 1, 1, 1, 1, 1, 2, 0, 2,
	0, 4, 0, 5, 0, 8, 1, 1, 8, 11,
	6, 8, 1, 3, 1, 1, 3, 4, 7, 6,
	5, 5, 5, 5, 1, 3, 4, 4, 4, 3,
	4, 3, 1, 4, 0, 8, 5, 5, 6, 7,
	7, 7, 4, 4, 5, 11, 10, 10, 2, 2,
	0, 13, 2, 0, 1, 3, 5, 5, 3, 6,
	2, 1, 0, 2, 4, 0, 1, 3, 6, 8,
	8, 1, 3, 5, 5, 10, 10, 11, 11, 5,
	5, 6, 10, 1, 0, 2, 0, 1, 0, 2,
	2, 1, 1, 0, 4, 0, 1, 3, 1, 1,
	1, 1, 1, 2, 4, 4, 5, 2, 0, 3,
	1, 3, 4, 3, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 3, 3, 3,
	0, 1, 4, 2, 2, 2, 2, 2, 3, 2,
	2, 3, 0, 2, 2, 1, 1, 1, 0, 2,
	4, 5, 6, 4, 5, 2, 3, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 2, 3, 2, 5, 4, 3, 3,
	3, 3, 3, 1, 1, 0, 2, 3, 0, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 0, 3,
	6, 3, 5, 3, 5, 3, 5, 2, 0, 2,
	0, 1, 2, 2, 2, 3, 3, 2, 2, 3,
	3, 1, 1, 3, 3, 2, 1, 1, 8, 8,
	11, 5, 7, 6, 9, 5, 2, 0, 3, 3,
	3, 7, 7, 10, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 4, 5, 1, 3, 2, 2, 2,
	2, 2, 1, 2, 2, 4, 3, 2, 2, 2,
	2, 2, 2, 3, 2, 2, 2, 2, 5, 5,
	5, 5, 5, 1, 3, 1, 2, 3, 0, 3,
	1, 2, 1, 1, 1, 3, 0, 1, 3, 1,
	3, 1, 3, 6, 4, 0, 5, 5, 5, 1,
	2, 4, 5, 1, 1, 1, 1, 3, 3, 2,
	2, 1, 2, 2, 2, 2, 1, 2, 1, 3,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 2, 1, 3, 7, 4, 1, 3,
	4, 6, 4, 8, 1, 1, 1, 1, 7, 2,
	2, 2, 2, 3, 0, 2, 2, 0, 2, 2,
	1, 2, 3, 3, 3, 3, 4, 4, 3, 3,
	3, 4, 4, 3, 4, 4, 1, 1, 1, 0,
	2, 2, 5, 3, 0, 1, 1, 1, 1, 1,
	3, 9, 12, 3, 0, 6, 2, 3, 2, 3,
	2, 2, 2, 3, 2, 0, 2, 5, 3, 0,
	2, 2, 2, 3, 1, 3, 1, 2, 5, 2,
	2, 0,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -461, -177, -183, -184, -185,
	-186, -187, -188, -189, -190, -191, -192, -447, -448, -449,
	-450, -511, -512, -513, -514, -515, -516, -517, -518, -519,
	-520, -521, -522, -523, -524, -545, -546, -547, -548, -549,
	-550, -551, -552, -525, -526, -527, -528, -529, -530, -531,
	-532, -533, -534, -535, -536, -537, -538, -539, -540, -541,
	-542, -543, -544, -452, -453, -460, -462, -463, -464, -465,
	-466, -467, -468, -469, -470, -471, -472, -473, -454, -455,
	-459, -456, -457, -193, -194, -195, -196, -197, -198, -199,
	-200, -201, -202, -203, -204, -205, -206, -207, -208, 266,
	212, -179, -180, -292, 111, 26, 22, 27, 394, 93,
	401, 191, 436, 228, 407, 413, 397, 378, 290, 405,
	274, 475, -484, 428, 223, 395, 220, 259, 250, 280,
	345, 222, 273, 249, 328, 472, 358, 329, 333, 462,
	-182, -181, -291, 531, 119, 202, 63, 67, -299, 36,
	518, 86, 540, -668, 486, 457, -668, 96, 97, 98,
	99, 531, -250, 115, -407, -371, -34, 33, 414, 261,
	62, 464, 454, 225, 276, 284, 422, 103, -435, 268,
	449, 375, 194, 438, 387, 443, 512, -574, 406, 71,
	453, 451, 58, 289, 473, 471, 40, 67, 307, 419,
	480, 85, 284, 104, 199, 225, 236, 247, 261, 286,
	71, -576, 62, 375, 385, 387, 409, 414, 422, 443,
	412, 460, 268, 406, 103, 449, 438, 454, 464, 276,
	40, 384, -402, -405, -404, 464, 261, 307, 103, 406,
	71, 67, 419, 480, 85, 284, 225, 236, 438, 454,
	194, 268, 276, -576, 387, 414, 422, 375, 412, 460,
	85, -608, 58, 423, 457, -609, -607, -269, 56, 217,
	414, 347, 406, 488, -5, 4, -26, -27, 191, 192,
	193, 194, 195, 196, 197, 198, 199, 200, 22, 201,
	203, 204, 205, 55, 206, 207, 208, 210, 211, 212,
	88, 70, 213, 214, 215, 24, 216, 218, 219, 220,
	221, 222, 223, 123, 226, 227, 228, 229, 230, 141,
	231, 101, 232, 233, 234, 235, 236, 111, 237, 154,
	238, 120, 121, 90, 246, 247, 248, 249, 250, 251,
	253, 254, 98, 149, 150, 255, 89, 256, 257, 258,
	259, 260, 261, 176, 27, 262, 138, 264, 148, 265,
	267, 136, 42, 268, 270, 271, 272, 273, 274, 275,
	276, 277, 279, 281, 282, 91, 283, 153, 165, 285,
	286, 287, 288, 289, 291, 294, 295, 151, 296, 297,
	298, 28, 299, 300, 301, 302, 303, 304, 305, 306,
	307, 308, 309, 310, 312, 313, 314, 96, 315, 317,
	318, 145, 503, 319, 320, 321, 322, 92, 324, 327,
	328, 329, 332, 333, 334, 335, 336, 337, 105, 85,
	338, 99, 340, 341, 342, 343, 344, 345, 346, 131,
	348, 349, 350, 351, 352, 353, 354, 357, 110, 358,
	359, 32, 139, 122, 504, 505, 502, 144, 62, 506,
	507, 124, 501, 508, 102, 364, 365, 366, 367, 368,
	369, 370, 129, 371, 128, 373, 374, 375, 377, 378,
	379, 380, 382, 383, 384, 385, 386, 112, 387, 152,
	143, 388, 389, 390, 391, 84, 132, 393, 394, 395,
	396, 397, 398, 399, 34, 400, 401, 402, 35, 403,
	404, 405, 407, 408, 409, 410, 127, 412, 413, 146,
	415, 416, 87, 417, 418, 419, 420, 421, 422, 93,
	425, 427, 428, 429, 430, 431, 107, 433, 434, 435,
	436, 437, 438, 113, 114, 439, 440, 441, 147, 442,
	443, 445, 446, 104, 448, 449, 108, 451, 452, 453,
	454, 455, 458, 460, 462, 463, 464, 465, 466, 467,
	468, 142, 469, 50, 472, 473, 474, 97, 475, 476,
	477, 478, 155, 183, 479, 480, 481, 482, 483, 485,
	168, 486, 140, 487, 498, 499, 57, 37, 173, 169,
	189, 179, 178, 224, 188, 187, 29, 278, 175, 292,
	293, 500, 186, 171, 185, 166, 160, 162, 163, 159,
	161, 156, 164, 158, 126, 157, 325, 339, 181, 182,
	355, 356, 360, 170, 361, 362, 376, 177, 174, 411,
	426, 172, 444, 184, 459, 461, 86, 180, 489, 490,
	491, 492, 493, 133, 494, 495, 496, 497, 125, -611,
	-610, 56, 457, 423, -269, 21, 217, 58, 347, 406,
	414, 488, -668, 457, -668, 379, -668, 379, -5, 423,
	457, 56, 413, -5, 457, -7, -5, -496, -497, 21,
	-501, 63, 392, 26, 22, -5, -496, 290, -497, -5,
	-458, -484, 118, 531, -177, -183, -184, -185, -186, -511,
	-512, 26, -239, 531, 79, -237, 531, 118, -269, 56,
	457, 423, 21, 531, -237, -490, 531, 21, 451, 453,
	374, 420, -240, -7, -246, -240, -244, 349, 382, 91,
	92, 193, 396, -100, 21, 285, 210, 64, 45, -99,
	534, 535, 12, -246, -240, 21, -7, -7, 378, 21,
	-5, -5, 536, -5, -21, -101, 7, -661, 67, -661,
	-168, -129, 470, 316, 269, 509, -181, -182, -180, -179,
	-180, -291, -283, -284, 21, 41, -431, -429, -432, -5,
	66, 541, -293, 84, -295, -7, -293, 531, -3, -475,
	30, -492, -491, -651, 318, 389, 252, 31, 73, -433,
	-431, 64, 73, -178, -177, -183, -184, -185, -186, -429,
	67, 480, 84, 419, 307, 286, 385, 460, 117, 199,
	458, -575, 463, 34, -19, -5, 28, -15, -5, -154,
	221, 279, -157, -5, 11, -158, 534, 535, 536, 537,
	538, 539, 525, 526, 527, 18, 19, 20, -15, 87,
	-15, 28, -7, 28, 246, 67, -7, 28, 336, -11,
	-502, -9, 241, 245, 424, 4, -26, -27, -28, 209,
	115, 225, 25, 81, 242, 116, 79, 44, 76, 52,
	53, 75, 77, 46, 82, 54, 80, 363, 78, 48,
	450, 118, 85, 460, -7, -7, 340, -394, 28, -15,
	-7, -7, 531, 236, -11, -11, 453, 451, 453, 451,
	-431, 28, 21, -429, 28, 21, -429, 28, -429, 28,
	480, 67, 246, 93, 401, -440, -614, -102, -5, 4,
	-26, -28, -15, -15, -7, -15, -439, -614, -28, -5,
	-11, -502, 321, 221, 279, -7, 28, -439, -7, -439,
	-7, -7, -7, -7, -7, 460, -11, -502, 21, -11,
	336, -502, 21, -7, -15, 28, 87, -15, -7, 383,
	28, -17, -15, 28, -13, -7, -7, 28, -266, 28,
	-106, -107, 426, -109, -110, -116, -112, -115, -108, -660,
	-102, 186, 171, 172, 173, 174, 175, 176, 187, 188,
	170, 189, -117, -118, -113, -114, 184, 56, 185, 166,
	4, -26, 169, -103, 178, 179, 180, 181, 182, -266,
	28, 25, 336, -397, 28, -502, -397, 28, -397, 28,
	480, 246, 67, 87, 340, 460, 321, 480, -608, 423,
	-608, 219, 209, -491, 431, 64, 61, 527, 533, 57,
	-101, -101, -652, -101, 40, -268, -9, -101, 506, 57,
	318, 209, -475, -492, -475, -101, -475, 61, -101, -5,
	-101, -247, 531, 74, 61, 541, 383, 531, -257, 531,
	-257, -257, 104, -257, 74, 506, 64, 506, -237, -458,
	-479, -482, -483, 86, -9, -484, 515, 473, -236, 116,
	-479, -480, -481, -486, -429, -479, 57, 318, 209, -479,
	-429, -7, -5, -488, 414, -489, 307, 67, 104, 247,
	-479, -242, -240, -245, -244, -245, -245, -245, -100, -100,
	-245, -245, -245, -100, 21, -245, -100, 21, -99, -99,
	-248, 531, -7, 21, -20, 541, -18, -431, -18, -146,
	-54, -148, 130, -55, -56, -150, 68, 280, 69, -151,
	-52, 21, 41, -52, -52, 70, -168, -129, 532, 532,
	-271, -270, -273, -63, 536, -65, 534, 535, -153, 31,
	516, -128, 471, 40, -67, -66, 13, 531, -70, -68,
	-180, 29, 134, -76, -77, 293, 11, 62, 411, -5,
	-99, 6, -101, 49, 43, 47, 9, 10, -614, -657,
	-108, 38, -130, -329, -69, -110, -658, -659, -115, -660,
	185, 161, 162, 225, 240, 243, 244, 330, 331, 241,
	245, 424, 447, 103, 239, 242, 512, 278, 356, 362,
	376, 444, 459, 461, 360, 224, 292, 325, 490, 491,
	493, 494, 492, 495, 496, 159, 160, 166, 164, 158,
	339, 156, 163, 157, 497, 173, 169, 189, 179, 178,
	188, 187, 175, 186, 171, 181, 182, 170, 174, 172,
	56, 184, 180, -117, -118, -113, -114, -270, 74, 536,
	-94, -97, 533, 529, -429, 531, 531, 541, -293, -31,
	531, -127, -63, 218, 354, 541, -651, 327, 66, 487,
	252, -430, -429, 93, -5, 23, -433, -433, 532, -257,
	-429, 28, -249, -429, 480, -429, 28, -35, 25, -614,
	-614, -7, 460, -614, 130, -576, -407, 473, 209, -437,
	31, -603, 23, -120, 533, -425, 531, -15, -15, 533,
	-425, 23, 368, 257, 452, 231, -425, 64, 31, -36,
	36, 518, 31, 140, -429, 28, -563, 464, 31, 130,
	28, -36, 480, -7, -572, 365, 74, -7, -31, 31,
	-424, 130, 36, 232, -106, -15, -36, -36, -396, -399,
	398, -398, 207, 256, 196, 22, 27, 477, 93, 223,
	264, 258, 309, 354, 122, 31, 365, 401, 400, 153,
	-38, 507, 29, 45, -396, -400, 398, 207, 29, 45,
	-396, 398, -418, -421, 354, 23, 213, 90, 305, 335,
	338, 342, 364, 419, 436, 402, 473, 29, -396, 398,
	29, -429, 28, 21, -431, 28, 140, -607, -269, -610,
	398, -46, 531, -94, 398, 398, 398, 398, -401, 27,
	93, 196, 477, 398, -442, -626, 215, 404, 441, 300,
	434, 482, 277, 418, 324, 31, 237, 127, 445, -613,
	366, 93, -453, -46, -94, 398, -510, 196, 27, -7,
	-15, -15, 74, 29, 398, -442, 398, 93, 196, 27,
	398, -442, 398, 398, -564, -38, 479, 398, 93, 232,
	394, 196, 27, 264, 258, 430, 74, 74, -7, 398,
	-36, -474, 45, -474, 398, 130, -36, -474, -474, 398,
	93, 401, 398, 93, 29, 368, 257, 452, 231, 398,
	196, 27, 93, -444, -445, 22, 97, -510, -495, 29,
	541, -428, 24, 35, 29, 541, -428, 74, 29, 541,
	-428, 29, -124, 134, -107, -122, 531, 498, 344, 248,
	297, 341, -123, 417, -121, -120, 531, -111, 531, 177,
	-121, -121, -121, 531, -125, 518, 519, 531, -125, -126,
	183, 531, -126, -126, 178, 179, -126, -428, 29, -17,
	28, 130, 28, 541, 29, 29, 29, 140, 368, 257,
	452, 231, -35, 219, 23, -268, 40, -101, 120, -272,
	40, -264, -267, -263, 49, 43, 74, -268, 6, 534,
	535, -100, -272, 40, -5, -650, -101, 4, -108, -263,
	40, 58, -654, 260, 234, 327, 413, -5, 23, -656,
	-106, -509, -16, 67, 419, 284, 286, 385, 409, 247,
	261, 321, 322, 367, 414, 449, 464, 21, -429, -397,
	-501, 531, -14, -5, -14, -509, 130, -397, 130, -458,
	532, 541, -485, -267, -263, -237, 532, 541, -31, 532,
	327, 532, -487, 83, 74, -35, -35, -35, 532, 121,
	115, 314, 203, 416, 354, -240, -240, -240, -240, -245,
	-245, -240, -240, -240, -245, -245, -240, -245, -245, -127,
	-101, 541, -22, 45, -25, 235, 402, -53, -54, -147,
	-146, -150, 130, 389, 97, 354, 427, 503, -56, -55,
	-57, -63, 21, -62, 91, 349, -58, -59, -63, -65,
	534, 535, -149, 122, -181, -181, -181, -169, -172, -63,
	-146, -54, -286, 73, 541, 14, 39, 55, 534, 535,
	536, 537, 538, 539, 525, 526, 527, 18, 19, 20,
	-153, 30, 33, 46, 516, 44, 48, 52, 53, 54,
	37, 45, -156, 23, -8, 11, 62, -157, 4, -30,
	191, 192, 193, 194, 195, 196, 197, 198, 199, 21,
	200, 22, 201, 202, 119, 510, 94, 203, 204, 205,
	60, 206, 207, 208, 209, 210, 211, 212, 173, 115,
	169, 189, 511, 88, 70, 213, 214, 215, 24, 216,
	38, 512, 217, 218, 219, 513, 220, 221, 222, 223,
	224, 225, 514, 123, 226, 227, 228, 229, 230, 25,
	141, 231, 101, 232, 117, 233, 234, 235, 236, 111,
	237, 81, 154, 238, 120, 239, 240, 241, 242, 243,
	244, 245, 121, 90, 246, 247, 249, 188, 187, 250,
	40, 251, 252, 253, 254, 98, 149, 150, 255, 89,
	95, 256, 257, 258, 259, 41, 109, 260, 261, 176,
	27, 262, 263, 138, 264, 148, 265, 266, 267, 136,
	42, 268, 270, 271, 272, 273, 29, 274, 275, 276,
	277, 278, 43, 279, 282, 91, 175, 283, 153, 284,
	165, 285, 116, 79, 286, 287, 288, 289, 291, 292,
	293, 294, 295, 151, 296, 298, 28, 299, 300, 301,
	302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
	312, 76, 500, 313, 314, 96, 315, 186, 171, 185,
	317, 318, 75, 166, 160, 162, 163, 159, 161, 156,
	164, 158, 126, 157, 145, 503, 319, 320, 321, 322,
	92, 323, 326, 324, 325, 77, 327, 328, 329, 58,
	330, 331, 332, 333, 334, 335, 336, 337, 105, 85,
	338, 99, 339, 340, 342, 343, 345, 346, 347, 181,
	82, 182, 131, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 31, 110, 358, 359, 47, 360, 32,
	170, 139, 122, 504, 505, 502, 144, 66, 506, 507,
	124, 501, 361, 80, 362, 102, 364, 365, 366, 367,
	368, 369, 370, 129, 371, 128, 372, 373, 374, 375,
	376, 377, 378, 379, 380, 381, 382, 383, 384, 385,
	386, 112, 387, 152, 143, 388, 389, 174, 390, 391,
	84, 132, 392, 393, 394, 395, 396, 397, 398, 399,
	34, 400, 401, 402, 35, 403, 404, 405, 78, 406,
	407, 408, 409, 410, 411, 127, 412, 413, 146, 414,
	415, 416, 87, 418, 63, 419, 420, 421, 422, 423,
	424, 93, 426, 425, 427, 428, 429, 430, 172, 431,
	432, 107, 433, 434, 435, 436, 437, 438, 113, 114,
	439, 440, 441, 147, 442, 443, 444, 445, 59, 446,
	104, 447, 67, 448, 450, 449, 108, 451, 452, 453,
	454, 106, 455, 56, 184, 456, 457, 458, 459, 460,
	461, 49, 462, 463, 464, 465, 466, 467, 468, 142,
	469, 471, 50, 472, 473, 474, 97, 103, 83, 475,
	476, 477, 478, 155, 86, 180, 190, 118, 479, 480,
	481, 482, 51, 483, 486, 140, 487, 488, 489, 490,
	491, 492, 493, 133, 494, 495, 496, 497, 125, 499,
	57, -63, -63, -63, -63, -63, 363, -372, 32, -95,
	-63, -127, -180, -94, -180, -180, -75, 529, 531, 531,
	531, -94, -101, 531, -101, -101, 531, -71, -63, -134,
	485, -131, 281, 531, 531, 130, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, 531,
	531, 531, 531, 531, 531, 531, 531, 531, 531, -286,
	531, -97, -104, 536, -6, 4, -26, -27, -28, -29,
	21, 202, 119, 30, 510, 134, 23, 94, 60, 511,
	38, 512, 513, 39, 514, 117, 26, 239, 240, 241,
	243, 244, 245, 40, 252, 95, 41, 109, 263, 266,
	269, 43, 280, 130, 284, 64, 290, 71, 72, 45,
	311, 316, 73, 323, 326, 68, 330, 331, 31, 47,
	69, 74, 66, 33, 509, 372, 381, 392, 100, 63,
	424, 432, 59, 447, 67, 106, 61, 456, 49, 470,
	471, 103, 83, 190, 51, 65, 484, 36, -63, -98,
	-429, -127, -295, 23, -13, 541, 532, 39, 55, 30,
	33, 46, 44, 48, 52, 37, 45, 62, 218, -651,
	-653, 389, 399, 421, -209, -177, 102, 531, 40, 23,
	-211, -217, -215, 531, -5, -5, -294, 83, 83, 61,
	-234, 64, 61, 531, 122, 370, -257, 31, 23, -257,
	-429, -555, -418, 354, 31, -19, 28, -5, -615, 531,
	-615, -633, 211, 198, 315, -7, -598, -600, 531, -106,
	321, 480, 84, -502, -438, -188, -189, -449, -450, 26,
	29, -106, 533, -104, -426, -427, -6, -574, 83, -154,
	531, 267, 388, -15, -15, -15, -15, -15, 29, -556,
	29, -7, 531, 370, 31, -565, -564, -101, 29, -566,
	-502, 103, 31, -493, -436, 28, -429, 74, 332, -502,
	-429, 464, 74, 29, 21, -586, -591, 67, 448, -5,
	-432, 242, -429, -425, -101, 23, 130, -493, -493, 541,
	61, -664, 117, 514, 370, 370, -351, 28, 514, -352,
	-5, 117, -368, 513, 471, 381, 284, 270, -664, 117,
	-664, 117, 117, 168, 335, 473, 194, 449, -384, 531,
	74, 460, 201, 400, 412, 411, 460, 412, 411, -429,
	309, 153, -15, 122, 61, -384, 298, 411, 531, -431,
	449, 61, 370, -429, 449, 61, -421, 90, 338, 342,
	-107, -263, -663, 70, -263, -263, 70, 346, -36, -36,
	-429, 61, -664, -429, -396, 398, 29, 45, -396, 398,
	29, -7, 61, -47, 532, -618, -620, -105, -119, 45,
	361, 500, 190, -102, -106, 426, 61, 61, 61, 61,
	117, 40, 31, 117, 40, 31, -604, 117, -605, 513,
	31, 117, 61, -669, -626, 35, 74, 47, 418, 254,
	317, 324, -263, -263, -15, -5, -609, 423, 457, 61,
	103, 398, 83, 83, -429, -7, 61, -669, 61, -425,
	-586, -586, -586, 61, -669, 61, 61, -38, -101, 47,
	61, -425, 387, -101, 387, 387, 387, -425, -429, -429,
	398, -571, 264, 258, 61, -494, -612, 93, -453, 247,
	-612, 61, -566, -494, -612, -612, 61, -384, -384, 61,
	438, -15, -15, -15, -15, -15, 61, 208, 155, 155,
	208, 155, 208, 531, 541, 208, -557, -403, -402, 199,
	512, 261, 286, 62, 385, 409, 458, 464, -405, 247,
	406, 443, 449, 307, -507, -478, 290, 405, 45, 130,
	-17, -15, -13, -7, -15, -7, -106, -266, 529, 529,
	-124, 134, -99, 61, 61, 61, 61, 531, -121, -127,
	-99, -99, 56, 56, -99, 531, -99, -126, -126, -266,
	-428, 29, -566, 29, -502, -397, -397, -397, -429, 457,
	541, 6, 6, -101, 531, -5, -178, 541, 532, 61,
	541, -16, -16, 246, 422, -443, -439, -443, -443, -13,
	-17, -13, 139, -49, -44, -5, -13, -13, -17, 448,
	420, 287, 386, 410, -504, 36, 291, -14, 541, 532,
	532, 64, -496, -497, -504, -497, -458, -482, -238, 119,
	-480, -486, -480, -429, -7, -429, -429, -7, -19, -243,
	36, 168, 416, -240, -240, -240, -240, -240, -240, 532,
	-431, -24, 359, -23, 194, 411, 427, 272, -428, 298,
	298, 66, 503, 427, 541, -59, -61, -65, 534, 535,
	411, 127, 531, -61, 411, 127, -60, -99, 6, -60,
	-152, 359, 430, -16, 541, 83, -161, 94, 95, -53,
	-147, -274, 64, -423, 453, 451, 58, 289, 473, 67,
	-429, -273, -106, -15, 56, 58, -63, -63, -63, -63,
	-63, -63, -63, -63, -63, -63, -63, -63, -63, -63,
	-63, -63, 46, 44, 48, 37, 45, -63, 61, 47,
	31, 49, 43, 50, 41, 260, 357, -165, -164, 350,
	351, 352, 353, 166, -160, 59, 60, -159, -180, 531,
	-163, 510, 432, 21, -6, 531, -128, 411, 531, -180,
	41, 31, -97, 532, 541, -127, -78, 530, -75, -127,
	-154, -127, 532, -80, 532, 536, 190, 21, 41, -93,
	-63, -105, -102, -122, -99, -74, -73, 51, -131, 71,
	-140, 508, 531, -330, -65, -63, -325, -63, 531, -99,
	-99, -99, -99, -63, -85, -12, 4, 498, 344, 248,
	297, 341, 417, -101, -63, -86, -81, -63, -80, -87,
	-64, -65, 534, 535, -153, 411, -83, -81, -63, -63,
	511, 326, 456, -84, -63, 64, -127, -63, -127, -127,
	-127, -127, 346, -88, -216, -63, -654, -65, 346, -63,
	-80, -331, -335, -330, 100, -63, -328, -179, -335, -325,
	-180, -325, -63, -325, 532, -325, -325, -325, -654, -274,
	-127, 530, 542, 532, 532, -296, 85, 31, 532, -63,
	468, 229, 389, -218, 74, -231, 103, 104, -210, -214,
	-5, 86, -5, -274, 541, 527, -212, -215, -95, -219,
	65, -275, -276, -431, -180, 323, -287, 531, -300, -310,
	-320, -301, 127, 125, 126, -5, -130, -69, -329, -614,
	166, -276, -235, 112, -235, -346, -347, -5, -350, -351,
	-353, -352, 46, -15, 122, -408, 83, 29, 273, -395,
	36, 531, 29, 74, 31, 404, -622, -623, -625, 23,
	321, 458, 484, -626, -616, 532, -617, -618, -622, -635,
	-634, 96, 98, 97, 462, 122, 198, -425, 536, -599,
	509, -601, -606, -602, -618, 4, 321, -7, -429, 480,
	-437, -407, -34, -19, -5, -365, -104, 532, 541, 527,
	130, -7, -303, -302, -304, -5, 531, -425, -425, -425,
	-425, -425, -15, -558, 414, 479, 64, 24, -7, -560,
	-561, -562, 295, 354, 478, -346, 122, 29, 284, -7,
	422, 29, -476, -477, 446, 197, 406, 45, 371, 265,
	469, 309, 4, 232, 476, 103, 23, 31, -257, -6,
	7, -573, 23, -583, 307, 67, -585, -590, -5, -301,
	531, -15, 448, -424, 541, -431, 45, -94, -257, -257,
	387, -106, -101, -398, -7, -7, -7, -429, -429, 31,
	-351, 28, -106, -7, 531, -372, -390, 83, 503, 503,
	-391, 83, -5, -99, -7, 28, -5, 28, -7, -7,
	505, 223, 340, -7, -385, -386, -6, -7, -7, 21,
	103, 460, 412, 460, 412, -7, 327, -7, 21, 103,
	-7, 327, -429, 411, -502, -45, 110, 79, 40, 83,
	327, -39, -42, -415, 93, 196, 27, -10, -6, -396,
	-399, 398, -7, -7, -429, -396, 398, -7, -7, -263,
	-15, -15, -263, -263, -396, 398, -418, -7, -7, -396,
	398, 61, -664, -429, 449, 61, -664, -431, 398, -560,
	-561, -7, 532, 541, -105, -119, -620, -119, -102, 361,
	-120, -102, -7, -7, -7, -7, -7, 47, -7, 28,
	-63, 47, -7, 531, 47, -7, -7, 47, 74, 254,
	317, -11, -397, 61, -7, -7, 398, -580, 61, 74,
	-7, -7, -7, -7, -7, -7, -13, -424, -13, -13,
	398, 398, 61, 400, 201, -11, -477, -608, -7, -11,
	422, -7, -7, -41, -100, 40, 93, 398, 398, 398,
	398, -7, -7, -101, -33, 28, -304, -101, 28, -5,
	-628, -627, -6, -445, 196, 27, -5, -559, 61, -7,
	-15, -440, 531, -106, -439, -441, 221, 279, -154, -439,
	-439, 130, -106, -496, -496, 290, 414, 406, 103, -428,
	-428, -428, 74, -428, 530, -99, -99, 529, 532, 344,
	297, 341, -123, 341, -123, -123, -99, 532, 532, 532,
	57, 57, 532, -127, 532, -428, -17, 422, 130, -434,
	36, -491, -264, -122, -99, -106, -498, -503, -502, 71,
	-429, 140, -13, 541, -50, -263, 541, 533, 45, 45,
	45, 45, 45, -499, -508, -6, 70, 532, -5, -498,
	74, -428, 64, -480, -487, 130, 296, 296, 343, 427,
	272, 427, 272, 97, 411, 97, -58, -61, 66, 36,
	-99, 6, 531, -127, 334, -172, -155, -157, 62, -162,
	517, -277, 65, -275, -661, -661, 453, 451, 453, 451,
	-661, -429, 57, 42, -63, -63, 61, -160, 59, -159,
	42, -63, 47, 49, 43, 50, 41, 260, 357, -165,
	-164, 64, 357, -166, 36, 168, 155, 134, 139, 146,
	-64, -64, -127, -180, 531, -154, 531, -127, 41, -95,
	-63, 530, 530, 541, 532, 532, 532, -129, 541, -168,
	532, -93, -80, -80, 16, 17, 532, -72, -73, 263,
	-63, -140, 531, -139, -5, 531, 65, -332, 47, 192,
	155, 542, -334, 509, -344, -343, 515, -63, 532, 532,
	532, 532, 23, 532, 64, 532, 541, 532, 532, 372,
	541, 532, 14, 534, 535, 536, 537, 538, 539, 525,
	526, 527, 18, 19, 20, -153, 52, 45, 62, -64,
	-64, -64, 532, 532, 48, 64, 130, 23, -84, -84,
	-84, 532, 64, -127, 541, 532, 532, 532, 532, -6,
	532, 541, 23, -63, -316, 129, -6, 541, 532, -332,
	541, 532, -106, -333, 541, 47, 192, -344, 532, -166,
	532, -335, 541, 541, 541, -63, -277, 532, -98, -63,
	531, 85, -220, 100, 101, 155, 532, 541, -95, -219,
	-217, -63, 532, 541, -220, -63, 120, 541, 81, -288,
	75, 82, 79, 77, 78, 76, -280, -279, 23, -5,
	-280, -180, -300, -310, -320, -180, -287, -276, -282, -279,
	23, -5, -280, -280, -309, 518, 64, 531, 531, -94,
	531, 74, -241, -101, 113, 114, -241, 532, 541, -429,
	-348, 531, -429, -48, 36, 168, -7, -429, -249, -7,
	23, -384, -14, -429, -431, 29, -621, 67, -119, -631,
	-451, 212, 403, -625, -630, -101, -268, -624, 130, 532,
	541, 40, 527, -631, 74, 33, 122, -635, 532, 532,
	509, 541, 70, 532, 541, 527, -7, 295, -257, -429,
	67, 209, -437, -366, 117, -367, -369, 39, 31, 47,
	471, 381, 513, 40, 392, 288, 252, 311, -427, -406,
	-119, -29, -155, -263, -101, 355, 62, 534, 535, 464,
	532, 541, -106, -553, -554, -101, -425, 64, -7, -268,
	-268, -36, -413, 507, -562, -567, -7, 295, 478, -567,
	532, -429, -429, 246, -563, -7, 130, -99, -397, -397,
	406, 71, -101, 47, 371, 371, 68, 474, -397, -177,
	29, -408, 273, 51, -395, -577, 130, 4, 295, 64,
	541, -63, -31, -424, -591, -257, 414, -257, -278, 65,
	-278, -13, 532, 61, 61, 61, -356, 130, 40, -35,
	282, 29, 31, -412, -411, 439, -368, 270, -63, 531,
	-363, 307, 531, -390, 531, 531, -7, -401, 27, 93,
	401, 196, -420, -265, -38, -422, 402, 93, -363, 29,
	-428, 29, -428, -43, -5, 40, 532, 541, 527, 533,
	-7, -7, -7, -7, 418, 418, 327, 307, 418, 532,
	541, -415, -415, -10, -40, -101, 61, -664, 117, 93,
	364, 61, 93, 364, 61, 61, 61, -664, -7, -7,
	-396, 398, -7, -7, -7, -396, 398, 61, -38, -618,
	-119, -119, 538, -120, 61, -428, 29, -605, -63, -363,
	313, 47, -7, 398, 398, 196, 27, 61, -581, 83,
	-397, -429, -424, -424, -424, 61, 61, -7, -7, 438,
	61, 61, 61, 61, 61, 61, -101, 31, -428, 29,
	-428, 541, 532, 527, -265, 93, -268, -106, -15, -15,
	-96, 531, -106, 74, 74, 506, -13, -397, -397, -15,
	530, 530, -99, 532, -125, -125, 532, -428, -7, -566,
	246, 354, 532, -505, 541, 36, -502, -13, -439, 541,
	-44, -5, 414, 414, 414, 414, 414, -504, 541, -506,
	506, 49, 43, -502, -504, -509, -397, -177, 272, 272,
	66, 36, 455, -127, 532, 541, -162, 531, 91, 92,
	-51, 71, -63, -429, -429, -661, -661, -661, -661, -429,
	-63, -63, 42, 42, -63, -64, -64, -63, 42, 64,
	357, -166, -63, 471, 471, 30, 30, 532, -63, 532,
	-127, 532, 541, 532, -75, 532, 190, -93, -129, -129,
	-129, -63, -63, -101, 266, -63, 106, -168, -141, -5,
	-63, -166, 74, 74, -325, -325, -333, 70, 166, 532,
	-106, -63, -165, -63, -106, -64, -64, -64, -64, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, 41, 31,
	260, -64, -63, -63, -63, -106, 532, 532, 532, -127,
	-63, 532, 541, -216, -6, -89, 380, 442, 532, -65,
	-317, 70, 532, 541, -91, 479, -166, -330, -344, -335,
	-325, 74, 74, -335, 532, 532, -63, -63, -63, 23,
	-51, 530, -178, -270, -225, 531, 74, -177, -177, 102,
	-214, -220, 527, -215, 122, -276, 75, 75, -276, -288,
	75, -289, 80, -289, -289, -132, 450, -5, 531, -280,
	-282, -280, -280, 532, -5, 531, 531, 124, 531, -65,
	133, -325, -80, -63, -36, -251, -662, 83, -379, 310,
	-350, -361, -380, -381, 370, -349, -354, -355, -352, -5,
	-348, -387, 74, -384, 505, 531, 122, 370, 23, -248,
	-177, 532, -555, -391, -7, -622, 531, 206, -63, 541,
	541, 464, -617, -63, -63, -429, -634, -14, 74, 70,
	-606, -599, -602, 4, -406, 531, -567, -395, 531, -429,
	28, -502, -7, -15, 252, 47, -372, 503, 531, -64,
	-429, -417, 201, 70, 253, 299, -106, -304, -315, 39,
	532, 541, -15, -556, 531, -120, -379, -348, 531, 370,
	140, -565, -413, -566, -397, -397, -101, -101, -100, -101,
	-434, -436, -395, -665, 286, 385, -568, -570, -5, -579,
	61, -578, 21, 63, 96, 97, 98, -567, -275, -590,
	532, 74, -278, -5, 242, -278, 531, -424, 36, 168,
	-101, -7, -7, 86, -351, 29, -410, -409, 230, -5,
	40, 532, -14, -364, 31, 252, 311, 354, -7, -14,
	-363, -14, -359, -358, -229, -5, -301, 531, 31, 275,
	298, 246, -421, 288, 31, 275, 438, -384, -411, -409,
	-384, 288, -422, 93, 464, -36, 438, -5, -7, -386,
	-406, -6, 418, -7, -42, -7, -7, -7, 449, 70,
	-7, 449, 70, -7, -7, -7, -7, 61, 61, -664,
	93, 364, 61, 61, -664, -7, 464, 538, -7, -7,
	532, 313, 61, 61, -587, -592, 62, 286, 439, -588,
	-593, 62, 286, -7, -582, 36, 531, 398, -7, -7,
	-38, -41, -7, -7, -7, -7, -7, -101, 211, 198,
	29, -5, -627, 355, -629, -119, -29, -155, -263, -101,
	464, 23, 83, 83, -106, 355, 321, -500, 448, 287,
	410, 420, 465, 415, -500, 130, -428, 530, 422, 246,
	-101, -504, -503, 290, -263, -13, -13, -13, -13, -13,
	-508, -428, 64, -504, 455, 532, -63, -154, -171, 72,
	70, -429, -429, -429, -429, -63, -63, 42, 30, 30,
	-63, -63, 319, 319, -63, -63, 532, 532, -63, -101,
	-93, 532, 532, 532, -63, 532, -137, 370, 532, -335,
	47, 47, -335, -169, 148, 532, 532, 64, 64, 41,
	260, 42, 130, 64, 532, 532, -79, -127, 489, 532,
	483, 483, -317, 70, -65, 132, 155, -63, -92, 541,
	-63, 354, -335, 532, 47, 47, 532, -336, 129, -336,
	-336, -107, -171, 532, 109, -259, -229, 117, -231, -63,
	-240, -276, -276, -290, 83, 74, 75, -276, -614, 531,
	-13, -279, 531, -302, -302, -5, -305, -306, -301, -316,
	531, 541, -129, -213, -223, -232, -233, 51, -253, -254,
	531, -36, 150, -380, 531, 304, 271, -408, 70, 532,
	541, -365, 36, -356, -388, 449, 228, -346, -15, 122,
	273, -434, -648, 36, -395, 531, 74, -631, -308, -619,
	-105, -102, -649, -101, 130, -106, -640, 393, -429, -599,
	532, -589, 64, 61, -595, 312, 23, -14, 531, 31,
	-437, -367, 31, -424, -424, -63, -257, 23, 40, 83,
	-15, -101, -414, -415, 422, -356, -346, 122, -7, 284,
	422, 23, -388, -614, 273, 30, 45, -581, -397, -585,
	-63, 286, 500, 286, 64, 36, 45, 64, -351, -413,
	-5, 40, -363, 532, 252, 476, 299, 253, 309, 532,
	532, 532, 541, 36, -230, -222, 39, -230, -63, 47,
	28, 28, -417, 47, 23, -41, -417, -106, -263, -41,
	-428, -428, 527, 61, 61, -7, -397, -7, -397, 61,
	-7, -7, -7, 449, 70, -7, -7, -7, 464, -428,
	-363, -7, -7, 541, -99, -99, -106, 541, -99, -99,
	513, -63, 61, -428, -101, -101, -428, -106, -106, -7,
	-7, 532, 541, 541, -7, 61, 64, -496, -7, 506,
	-498, -428, 532, 532, -135, 484, -63, -52, -63, -63,
	-63, 532, -129, -129, 70, 532, 532, -7, -63, -64,
	64, -63, -63, -63, 532, 541, 532, 531, -317, 532,
	532, 435, 155, 532, -335, -326, -327, -325, -337, -338,
	40, -339, 136, 47, 49, 43, 50, 138, -335, -90,
	306, 354, -135, -297, 87, 97, 110, 532, 541, -7,
	155, -290, 531, -63, -276, 531, -13, 532, -302, 532,
	532, 532, 541, -307, 23, 123, -318, -319, -64, 40,
	-63, 532, -220, -223, -224, 30, -224, 105, 31, -252,
	115, 116, 149, 47, 154, 151, 152, 42, 153, 148,
	-255, -260, -6, -253, -101, -408, -16, -362, 227, 230,
	233, 251, 298, 288, 308, 438, 439, 21, -362, -48,
	-5, -354, 507, -380, -7, 27, 98, 380, 532, -348,
	-429, -7, 513, 216, 58, 23, -259, -431, 541, 532,
	-119, 266, -632, -4, -451, 464, -636, 130, -641, -643,
	-638, 348, 502, -647, 64, 532, 532, 433, 433, -596,
	-597, 478, 354, -567, -177, 532, 29, -389, 83, -389,
	532, -373, 337, 298, 531, -7, 532, 541, -7, 422,
	532, -429, -413, 246, -7, -177, 531, -665, -570, 531,
	-582, 64, 532, -439, -584, 23, -584, -15, 531, 531,
	531, -365, -374, 303, -374, 392, -374, -358, -154, 62,
	-394, -15, -15, 532, 29, 29, 531, 23, -315, -406,
	-7, -7, -24, 93, -24, 93, -7, 61, -7, -397,
	61, -592, -154, -441, -439, 531, -593, 531, 531, 531,
	532, -7, -315, 532, -106, 355, -106, -498, -498, 74,
	-504, -136, -138, -5, -167, -170, -63, -173, -175, -174,
	-176, 531, 238, 408, 293, 532, -142, 388, 127, 294,
	-127, 130, -64, -127, -88, 499, 354, -341, 168, 36,
	541, 23, 532, 74, -63, 134, 139, -340, -338, 532,
	306, -298, 90, 89, 88, 93, -277, -229, -177, -13,
	-127, 532, 532, -309, -306, 531, -311, -312, -5, 541,
	532, 23, -64, -324, 23, 106, -63, 106, 105, -603,
	-603, -603, -603, 152, 31, 47, -101, 532, 541, -261,
	-267, -263, 536, 40, 531, -277, -48, 532, -387, 531,
	-365, -408, 127, 127, -379, -380, -348, -248, 506, 513,
	513, -177, 532, -391, -619, -622, 540, -106, -644, 51,
	-666, 262, -643, -639, 67, 411, -363, -429, 36, 36,
	-567, 478, -648, -395, -429, 307, -370, 354, -378, -375,
	-376, 74, 79, 369, 429, -419, 531, -63, -594, 279,
	-415, -413, -7, -379, -348, 140, -413, -434, 532, -614,
	-569, 7, -275, -584, 301, 205, -360, -357, -9, -127,
	-127, -424, 531, -424, -429, -424, 531, -161, -384, -230,
	-63, 298, -37, 83, 449, 449, -7, -24, 93, -7,
	-655, 130, -655, -656, -656, -656, -63, -428, 532, 532,
	532, -505, -428, -500, -428, 541, 23, 541, 532, 531,
	531, 425, 532, -143, -144, 37, 467, 120, -63, -143,
	-143, -63, 532, 532, 155, -342, 145, 144, 140, 134,
	140, 134, 141, 142, -327, -6, 136, 532, 74, -14,
	91, 91, -211, 532, 532, -302, 532, 541, -106, 130,
	-319, 541, -6, -336, -5, -226, -227, 109, 97, 98,
	-228, 109, 96, 70, -101, -101, -101, -101, -14, 536,
	47, -14, 536, -260, -256, -262, -267, -387, -388, -382,
	-383, -5, -301, 531, -48, -380, -408, -356, -434, 506,
	506, -648, -393, 303, 531, -631, 273, 531, -637, 411,
	437, -603, 130, 286, 286, 23, 531, 449, 309, -376,
	74, -375, 74, 97, 98, -418, 532, 23, -15, -413,
	422, -356, -7, 531, 532, 541, 532, 541, -99, 532,
	532, -389, -14, -389, -257, -389, -154, -162, -161, 532,
	-419, -63, -7, -7, 449, -416, 391, 87, 509, -416,
	532, 532, 532, 532, 64, -138, -139, -170, -127, -127,
	531, -145, 270, -144, 377, 283, 411, 377, 283, -145,
	-145, -340, 143, 143, 140, 140, 134, 140, 134, 140,
	138, 136, 93, 70, 70, -277, -281, 23, -133, 399,
	532, -312, -313, -314, 4, 40, 31, 47, 128, 124,
	-65, 123, 110, 93, 110, -221, 102, 531, 40, 86,
	107, 108, -14, 536, 532, 541, -388, 532, 541, -222,
	-222, -63, -387, -408, -48, -380, -372, 531, -259, -665,
	-63, -646, -5, 262, -439, -439, -177, -7, -377, 354,
	35, 24, 93, -377, 532, 440, -587, -7, 422, -413,
	532, 7, -357, 61, -363, 532, -363, -373, -277, 532,
	-162, -24, -24, -7, 70, -439, -498, 532, 532, -167,
	120, 71, 455, 354, 30, 532, 74, 74, 140, 140,
	-338, -5, -14, -14, -5, 531, -314, -64, -64, 47,
	-64, -316, 531, -211, -231, -210, 86, 531, -262, -383,
	-394, -394, 532, -388, -48, -387, -408, -395, -392, -229,
	532, -614, 532, 411, 541, 541, -648, 195, 47, 40,
	-413, -7, 531, -378, -363, -24, -15, -428, 532, 411,
	501, -144, 146, 146, 74, 61, 83, 93, 93, -63,
	123, -321, -322, -5, 131, 155, 532, -127, -222, -387,
	-388, -48, -388, 532, 541, -393, 531, -644, 61, 64,
	-257, -257, -413, -127, -363, 147, 147, 136, -66, -614,
	166, -5, -5, -5, 532, -311, 532, 541, 130, -106,
	-345, 128, -221, -221, 102, 532, -394, -388, -387, -277,
	-229, -372, -642, -645, -99, 6, -101, -6, 273, 433,
	433, 532, 40, 531, 532, -337, -322, 124, -323, -343,
	29, 128, 7, -231, -388, -395, 532, 541, -665, 36,
	36, -66, -80, 532, -341, -323, -323, 7, 123, 23,
	155, -388, -645, -614, 286, 286, 83, -129, -342, -341,
	-337, 531, -7, -221, -277, 531, -439, -439, -5, 532,
	-340, -342, -321, 123, -642, -340, 532, 531, 532, -321,
	532,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 2925,
	2925, 1518, -2, 0, 1800, -2, 1863, 1863, 0, 0,
	0, 2925, 0, 2925, 2925, 0, 0, 0, 0, 0,
	1605, 1877, 1873, 0, 1873, 2292, 2293, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 142,
	-2, 1509, 1604, 0, 2268, 2269, 1640, 0, 1551, 0,
	0, 0, -2, 2928, 2923, 2924, 2680, 0, 0, 0,
	0, 1605, 0, 1799, 0, 0, 2824, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	1928, 1929, 0, 0, -2, 2101, 2801, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1862, 0, 0, 0, 0, 0, 2303, 0, 0,
	0, 2299, 2300, 2301, 0, 0, 2305, 2306, 2307, 0,
	0, 0, 1846, 0, 1849, 1850, 1851, 1852, 1853, 1854,
	0, 2224, 301, 412, 446, 2229, 2628, 0, 529, 185,
	402, -2, 393, 479, 2643, 118, 119, 120, 156, 157,
	158, 159, 160, 161, 162, 163, 164, 165, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	178, 179, 180, 181, 182, 183, 184, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 280, 281, 282, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 295, 296, 297, 298,
	299, 300, 302, 303, 304, 305, 306, 307, 308, 309,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 320,
	321, 322, 323, 324, 325, 326, 327, 328, 329, 330,
	331, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 358, 359, 360,
	361, 362, 363, 364, 365, 366, 367, 368, 369, 370,
	371, 372, 373, 374, 375, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
	391, 392, 394, 395, 396, 397, 398, 399, 400, 401,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 413,
	414, 415, 416, 417, 418, 419, 420, 421, 422, 423,
	424, 425, 426, 427, 428, 429, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 445, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 457, 458, 459, 460, 461, 462, 463, 464,
	465, 466, 467, 468, 469, 470, 471, 472, 473, 474,
	475, 476, 477, 478, 480, 481, 482, 483, 484, 485,
	486, 487, 488, 489, 490, 491, 492, 493, 494, 495,
	496, 497, 498, 499, 500, 501, 502, 503, 504, 505,
	506, 507, 508, 509, 510, 511, 512, 513, 514, 515,
	516, 517, 518, 519, 520, 521, 522, 523, 524, 525,
	526, 527, 528, 530, 531, 532, 533, 534, 535, 536,
	537, 538, 539, 540, 541, 542, 543, 544, 545, 2238,
	2230, 529, 446, 412, 2234, 2235, 185, 301, 319, 393,
	402, 479, 2928, 2680, 2928, 0, 2928, 0, 2913, 412,
	446, 529, 400, 2915, 446, 3134, 128, 0, 2990, 2991,
	2995, 2488, 2488, 2488, 166, 2488, 0, 0, 2990, 2488,
	2239, 1873, 1605, 0, 2252, 2253, 2254, 2255, 2256, 2257,
	2258, 2617, 1871, 0, 1876, 2264, 0, 1872, 2270, 529,
	446, 412, 2274, 0, 2280, 0, 0, 2294, 2295, 2296,
	2297, 2298, 3104, 1625, 3108, 3110, 0, -2, -2, -2,
	-2, 158, 381, 3129, 3129, -2, -2, 3126, 3127, 1223,
	0, 0, 1221, 3109, 3130, 3131, 3144, 3146, 360, 3148,
	3150, 3151, 3152, 3155, 3156, 1440, 1222, 0, 141, 0,
	-2, 0, 2833, 2833, 2833, 0, -2, 1522, 1523, 0,
	1523, 0, 1556, 0, 1639, 1641, 1550, 1579, 1580, 133,
	0, 0, 1601, 376, 1606, 136, 1602, 0, 2, 2921,
	0, 2922, 2679, 2667, 0, 0, 2673, 0, 0, 0,
	1584, 0, 0, 0, 3135, 3136, 3137, 3138, 3139, 2488,
	0, 0, 0, 0, 114, 0, 0, 0, 0, 0,
	0, 1863, 2823, -2, 0, -2, 270, 1869, 152, 0,
	189, 251, 1506, 0, 1492, 1493, 1494, 1495, 1496, 1497,
	1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 2509, 0,
	0, 270, 2031, 270, 0, 0, 2573, 270, 306, 2031,
	2138, 2139, 2140, 2141, 2142, 2661, 2662, 2663, 2664, 546,
	547, 548, 549, 550, 551, 552, 553, 554, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 0, 0, 2723, 0, 0, 136, 270, 102,
	2688, 0, 0, 0, 2031, 2031, 1930, 1931, 1932, 1933,
	0, 270, 0, 0, 270, 0, 0, 270, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 1360, 0, -2,
	-2, 1437, 0, 0, 0, 0, 0, 0, -2, 3082,
	0, 2138, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 2938, 0,
	306, -2, 2938, 0, 0, 270, 0, 0, 0, 2977,
	270, 106, 154, 270, 106, 129, 0, 270, 106, 270,
	1860, 1426, 0, 1427, 1428, 1429, 1430, 1431, 1240, 1434,
	1444, 1447, 1448, 1449, 1450, 1451, 1487, 232, 1444, 1444,
	1444, 1457, 1458, 1459, 1460, 1461, 1483, 1483, 1226, 1480,
	1435, 1436, 1485, 1473, 1485, 1485, 1468, 0, 1485, 106,
	270, 0, 306, 2943, 270, 2136, 2941, 270, 2945, 270,
	2302, 0, 2304, 0, 1844, 1845, 1848, 114, 2225, 412,
	2226, 187, 0, 2227, 0, 0, 0, 0, 0, 0,
	2631, 2632, 2633, 2656, 2657, 2634, 2659, 2660, 0, 2231,
	0, 2233, 2909, 2910, 2911, 2919, 2912, 0, 2920, 2914,
	2918, 0, 0, 0, 0, 0, 2992, 0, 2997, 0,
	2998, 2999, 3000, 3001, 0, 0, 0, 0, 1605, 2241,
	0, 2243, 2251, 533, 2246, 2247, 2248, 2616, 1873, 1870,
	0, 2261, 2263, 2265, 136, 0, 2271, 0, 2273, 0,
	2283, 0, -2, 114, 114, 114, 2287, 2288, 2289, 2290,
	0, 0, 3111, 0, 3128, 0, 0, 0, 3129, 3129,
	0, 0, 0, 3129, 3129, 0, 3129, 3129, 1224, 1225,
	3140, 0, 3147, 3149, 3153, 0, 3159, 139, 3171, 2888,
	1535, 1532, 0, 2885, 2886, 1536, 0, 0, 0, 1544,
	0, 2831, 2832, 0, 0, 0, -2, 0, 1520, 1521,
	1646, 1555, 1557, 1561, 1562, 1099, 0, 0, 0, 0,
	0, 0, 2000, 1166, 1189, 1190, 1253, 0, 1193, 1194,
	1195, 492, 0, 1200, 1201, 496, 1488, 339, 525, 1243,
	1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 0, 0,
	0, 1376, 1511, 1513, 1257, 1203, 1204, 1205, 1206, 1207,
	-2, 506, 503, 548, 1259, 1260, 1262, 1264, 1266, 1268,
	1269, 1270, 1271, 1272, 1273, -2, 0, 493, 517, 521,
	522, 528, 531, 532, 518, 489, 495, 512, 536, 537,
	539, 541, 538, 542, 543, 505, 502, -2, 508, 509,
	513, 507, 504, 511, 544, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 514, -2, -2, -2, -2,
	-2, -2, -2, 1462, 1463, 1464, 1465, 1646, 0, 1581,
	134, 1245, 0, 1248, 1582, 0, 0, 0, 1603, 0,
	0, 0, 1416, 2926, 0, 0, 2669, 0, 2671, 2672,
	2674, 0, 1764, 0, 1585, 0, 1786, 0, 0, 0,
	2488, 270, 0, 2488, 0, 2524, 270, 101, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 1934, 0, 2494,
	0, 0, 1868, 153, 0, 2507, 0, 2802, 0, 0,
	2508, 0, 0, 0, 0, 0, 2514, 0, 0, 2532,
	2029, 2030, 0, 0, 0, 270, 2577, 0, 0, 0,
	0, 2948, 0, 0, 0, 0, 0, 0, 0, 0,
	2757, 0, 0, 0, 0, 0, 2948, 2948, 2111, 2124,
	2211, 2132, 0, 0, 0, 2211, 2211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2203, 0, 0, 0, 2113, 2115, 0, 0, 0, 0,
	2116, 0, 2527, 2009, 0, 0, 0, 2013, 2028, 2016,
	0, 0, 0, 0, 2031, -2, 2026, 0, 2118, 2211,
	0, 0, 270, 0, 0, 270, 0, 2275, 0, 2276,
	0, 2321, 0, 1361, 0, 0, 0, 0, 2498, 0,
	0, 0, 0, 0, 3079, 3049, 0, 0, 3053, 3054,
	3055, 3056, 0, 0, 3061, 0, 0, 0, 0, 3066,
	0, 0, 2441, 3080, -2, 0, 0, 2966, 2967, 0,
	0, 0, 0, 0, 0, 3079, 0, 0, 0, 0,
	0, 3079, 0, 0, 2570, 2571, 0, 0, 0, 0,
	0, 0, 0, 2782, 2783, 0, 0, 0, 0, 0,
	2950, 0, 0, 0, 0, 0, 2950, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3087, 3088, 0, 2539, 1863, 0, 0,
	0, 2213, 104, 105, 0, 0, 2215, 0, 0, 0,
	2218, 0, 1418, 1422, 1426, 1432, 0, 1227, 1228, 1229,
	1230, 1231, 1232, 1241, 1445, 1444, 0, 1452, 0, 1453,
	1454, 1455, 1456, 0, 1477, 0, 0, 0, 1479, 1475,
	1484, 0, 1466, 1467, 1485, 1485, 1471, 2220, 0, 106,
	270, 0, 0, 0, 0, 0, 0, 1847, 2308, 2309,
	2310, 2311, 0, 0, 0, 2635, 2636, 2638, 2629, 2639,
	2641, 2645, 2647, 2648, 1834, 1835, 1836, 1837, 1838, 0,
	0, 1841, 2640, 2642, 2644, 2630, 2649, 2650, 0, 2653,
	2654, 2655, 2637, 2665, 2666, 2232, 400, 2917, 1605, 0,
	2806, 0, 3002, 0, 408, 0, 259, 366, 396, 214,
	231, 294, 295, 349, 402, 439, 451, 0, 137, 3036,
	2996, 0, 0, 131, 0, 0, 0, 3036, 0, 2240,
	1605, 0, 2245, 2249, 2250, 1875, 2264, 0, 2267, 2264,
	2272, 2278, 2279, 0, 0, 0, 0, 101, 2291, 3107,
	3099, 3100, 3101, 3102, 0, 3112, 3113, 3114, 3115, 0,
	0, 3118, 3119, 3120, 0, 0, 3123, 0, 0, 0,
	3154, 0, 2135, 0, 106, 0, 0, 1526, 2887, 1527,
	1534, 1537, 0, 0, 1539, 0, 1541, 0, 2883, 2884,
	2889, 2897, 2898, 0, 2907, 2908, 2895, 0, 2899, -2,
	0, 0, 1547, 0, 1552, 1553, 1554, 2849, 2850, 1916,
	2888, 1535, 1564, 0, 0, 0, 701, 669, 1494, 1495,
	1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505,
	0, 662, 916, -2, 0, -2, 1003, 834, 1137, 1139,
	-2, 813, 0, 0, 1560, -2, 913, 1396, 126, 127,
	647, 648, 649, 650, 651, 652, 653, 654, 655, 656,
	657, 658, 659, 660, 661, 663, 664, 665, 666, 667,
	668, 670, 671, 672, 673, 674, 675, 676, 678, 679,
	680, 681, 682, 683, 684, 685, 686, 687, 688, 689,
	690, 691, 692, 693, 694, 695, 696, 697, 698, 699,
	700, 702, 703, 704, 705, 706, 707, 708, 709, 710,
	711, 712, 713, 714, 715, 716, 717, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 734, 735, 736, 737, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 793, 794, 795, 796, 797, 798, 799, 800,
	801, 802, 803, 804, 805, 806, 807, 809, 810, 811,
	812, 814, 815, 816, 817, 818, 819, 820, 821, 822,
	823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	833, 835, 836, 837, 838, 839, 840, 841, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 862, 863, 864,
	865, 866, 867, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 914, 915,
	917, 918, 919, 920, 921, 922, 923, 924, 925, 926,
	927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
	1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
	1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077,
	1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
	1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097,
	1098, 1104, 1105, 1119, 1122, 1123, 0, 0, 0, 1191,
	1416, 0, -2, 1196, 1197, 1198, 1199, 0, 0, 0,
	0, -2, 1216, 0, 1218, 1240, 0, 0, 1375, 1513,
	0, 2861, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1319, 0, 1319, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1716,
	1716, 0, 0, 0, 0, 0, 0, 0, 0, 1564,
	0, 1246, 1249, 1250, 1438, 121, 122, 123, 124, 125,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 588,
	589, 590, 591, 592, 593, 594, 595, 596, 597, 598,
	599, 600, 601, 602, 603, 604, 605, 606, 607, 608,
	609, 610, 611, 612, 613, 614, 615, 616, 617, 618,
	619, 620, 621, 622, 623, 624, 625, 626, 627, 628,
	629, 630, 631, 632, 633, 634, 635, 636, 637, 638,
	639, 640, 641, 642, 643, 644, 645, 646, 1247, 0,
	0, 0, 1607, 1611, 0, 0, 1618, 0, 0, 0,
	0, 1398, 1400, 0, 0, 1514, 0, 0, 2927, 2668,
	2670, 0, 0, 2678, 1899, 1766, 0, 0, 0, 0,
	1564, 1777, 0, 0, 1253, 1586, 1624, 0, 0, 1795,
	1795, 1792, 1793, 1937, 0, 0, 2089, 0, 0, 2110,
	0, 2521, 2523, 0, 0, 0, 270, 100, 2420, 0,
	2420, 0, 2444, 2445, 0, 0, 0, 2506, 0, 0,
	0, 0, 0, 2623, 2622, 2624, 2625, 2626, 2627, -2,
	101, 1989, 0, 1441, 0, 2705, 2707, 0, 0, 1507,
	1660, 0, 0, 0, 0, 0, 0, 2516, 0, 2529,
	0, 2564, 1937, 0, 0, 0, 2576, 2572, 0, 0,
	2587, 2588, 0, 2930, 0, 270, 2488, 0, 0, 2722,
	2729, 0, 0, 0, 0, 2688, 2764, 0, 438, -2,
	2488, 2772, 0, 2687, 0, 0, 0, 2929, 2931, 0,
	0, 0, 0, 2210, 0, 0, 2143, 270, 0, 2167,
	0, 0, 2046, 0, 2000, 0, 0, -2, 0, 0,
	0, 0, 0, 0, 2175, 2176, 0, 0, 2196, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2189,
	0, 0, 2191, 2192, 0, 2197, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2010, 2014, 2019, 2020,
	2011, 2012, 0, 2027, 2017, 2018, 0, 0, 0, 0,
	0, 0, 0, 0, 2120, 2211, 0, 0, 2122, 2211,
	0, 2564, 0, 0, 2313, 2314, 0, 0, 2409, 2410,
	2411, 2412, 2414, -2, 2416, 0, 0, 0, 0, 0,
	0, 2209, 0, 0, 0, 0, 2501, 0, 2610, 0,
	0, 0, 0, 3046, 3050, 3078, 0, 0, 0, 3059,
	3060, 3062, 3063, 3064, 3065, 3067, 2440, 412, 446, 0,
	0, 0, 0, 0, 2740, 0, 0, 3047, 0, 2760,
	2762, 2761, 2763, 0, 3048, 0, 0, 2569, 2574, 2575,
	0, 2776, 0, 2777, 2688, 0, 0, 2784, 0, 0,
	0, 2711, 2712, 2715, 0, 2932, 2934, 0, 2237, 0,
	2935, 0, 0, 2933, 2936, 2937, 0, 2724, 2725, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 0, 0, 0, 0, 0, 2537, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1855, 1856,
	1857, 1858, 1859, 2303, 2975, 2976, 0, 0, 0, 0,
	106, 155, 106, 130, 106, 0, 1861, 106, 0, 0,
	1419, 1423, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 0, 0, 0, 0, 0, 1469, 1470, 106,
	2222, 0, 0, 0, 2137, 2944, 2942, 2946, 2621, 0,
	0, 1839, 1840, 1240, 0, 2916, 3132, 0, 3133, 0,
	0, 3003, 3004, 0, 0, 3007, 3084, 3008, 3009, 3010,
	3011, 3012, 0, 3014, 3037, 3039, 3015, 3016, 3017, 0,
	0, 0, 0, 0, 2971, 0, 0, 0, 0, 2993,
	2487, 0, 0, 2990, 106, 0, 2242, 2244, 2264, 1874,
	2260, 2266, 2262, 2283, 2282, 2281, 2284, 2285, 2286, 0,
	0, 0, 3103, 3116, 3117, 3121, 3122, 3124, 3125, 3143,
	140, 3157, 2134, 0, 0, 0, 3164, 3166, 3168, 3169,
	3170, 1533, 0, 1542, 0, 0, 0, 2900, 0, 0,
	-2, -2, 0, 2896, 2905, 2906, 2901, -2, -2, 2902,
	1538, 1545, 0, 1543, 0, 0, 1919, 1914, 1915, 1530,
	1531, 1621, 0, 1645, -2, -2, 301, 262, -2, 0,
	151, 1558, 1100, 1101, 0, 1103, 1106, 1107, 1108, 1109,
	1110, 1111, -2, -2, -2, -2, -2, -2, 1118, 1120,
	1121, -2, 1399, 1401, 0, 1514, 0, -2, 0, 1136,
	0, 1141, 1143, 1145, 0, 1158, 1160, 0, 1415, 1402,
	1403, 1404, 1405, 1406, 0, 0, 1515, 1153, 1516, 0,
	0, 1393, 1394, 1395, 1559, 0, 1140, 0, 0, 1157,
	1998, 0, 1254, 1253, 0, 0, 0, 1384, 1385, 0,
	0, 0, -2, 1509, 1362, 0, 0, 0, 0, 1369,
	1371, 0, -2, 1219, 0, 1381, 1377, 0, 2861, 0,
	1256, 0, 0, 1707, 1099, 0, 1712, 1750, 0, 0,
	0, 0, 0, 0, 0, 0, 1329, 1330, 1331, 1332,
	1333, 1334, 1335, 1336, 0, 0, 0, 1371, 1318, 0,
	0, 1167, 0, 0, 0, 525, 0, 0, 1371, 0,
	0, 0, 0, 0, 1416, 0, 1327, 0, 0, 0,
	0, 0, 0, 0, 1341, 1344, 0, 0, 0, 0,
	0, 1707, 0, 1701, 0, 1371, 1710, 1750, 0, 1699,
	-2, 1415, 0, 1716, 1313, 0, 0, 0, 0, 1621,
	0, 1251, 1248, 1583, 1619, 0, 1609, 0, 135, 1417,
	2675, 2676, 2677, 1921, 0, 0, 1771, 1772, 0, 1773,
	1253, 1770, 1765, 1624, 0, 0, 0, 1782, 1781, 1921,
	0, 1785, 1565, 1627, 1627, 0, 1571, 0, 1636, 1627,
	1627, 1650, 398, 545, 510, 133, 1357, 1358, 1359, 0,
	501, 0, 0, 1794, 0, 0, 1936, 131, 1938, 1940,
	1941, 1942, 0, 1966, 0, 117, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2434, 2419, 2421, 0,
	0, 0, 2426, 2427, 0, 2399, 2400, 2402, 2434, 0,
	2447, 2449, 2450, 2451, 2453, 2446, 0, 2505, 0, 0,
	0, 0, 2593, 2597, 2595, 1435, 0, 2821, 2488, 0,
	2493, 0, 0, 0, -2, 2497, 1442, 2704, 0, 0,
	0, 2808, 0, 1659, 1661, 0, 2606, 2520, 2510, 2511,
	2512, 2513, 0, 2531, 0, 0, 0, 2536, 2031, 1981,
	2563, 2561, 0, 0, 0, 0, 0, 0, 0, 2573,
	0, 0, 2947, 2951, 0, 0, 0, 0, 0, 0,
	0, 2961, 2962, 0, 0, 0, 0, 0, 2089, 0,
	2110, 2731, 0, 0, 2746, 2747, 0, 2752, 2754, 2755,
	0, 136, 2688, 2759, 0, 2488, 0, -2, 2774, 2774,
	0, 0, 0, 2133, 2344, 0, 0, 0, 114, 0,
	2145, 270, 1964, 0, 0, 0, 2379, 0, 0, 0,
	0, 0, 1865, 0, 2379, 270, 106, 270, 106, 2169,
	2172, 2174, 0, 2195, 0, 2388, 2391, 2173, 2177, 2180,
	2181, 0, 0, 0, 0, 2185, 0, 2182, 2183, 2184,
	2188, 0, 2190, 0, 2193, 2198, 2700, 2701, 2702, 0,
	0, 0, 2692, 2694, 413, 161, 233, 0, 1985, 2112,
	2125, 2211, 0, 2352, 2207, 2114, 0, 0, 2346, 2015,
	2021, 2022, 2023, 2025, 2117, 0, 2528, 2348, 0, 2119,
	2211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	-2, 2324, 2312, 0, 0, 2408, 0, 2407, 1444, 2413,
	1444, 1444, 2325, 2326, 2327, 2328, 0, 2499, 106, 270,
	2208, 2500, 0, 0, 2379, 2504, 2331, 0, 0, 3057,
	3058, 2332, 2940, 0, 0, 0, 0, 2742, 0, 0,
	2338, 2339, 2340, 2341, 2342, 2343, 2688, 2778, 2688, 2688,
	0, 0, 0, 2713, 2714, 2369, 2949, 2236, 2939, 2370,
	0, 2371, 2372, 2750, 1842, 1843, 0, 0, 0, 0,
	0, 2377, 0, 0, 0, 0, 106, 2604, 270, 106,
	0, 3068, 3072, 3089, 0, 0, 1865, 2538, 0, 2541,
	2542, 2543, 0, 2545, 2546, 2547, 189, 251, 0, 2550,
	2551, 0, 2553, 0, 0, 0, 0, 0, 0, 2212,
	2214, 2216, 0, 2219, 1424, 0, 0, 0, 1433, 1233,
	1234, 1235, 1236, 1237, 1238, 1239, 0, 1443, 1486, 1483,
	1481, 1482, 1483, 0, 1472, 2221, 106, 0, 0, 2615,
	0, 2228, 2646, 2651, 0, 2807, 3028, 3023, 3025, 0,
	138, 0, 3006, 0, 3013, 3041, 0, 0, 0, 0,
	0, 0, 0, 3036, 3030, 0, 0, 2994, 132, 3036,
	0, 2973, 0, 2259, 2277, 0, 3105, 3106, 3158, 3160,
	3167, 3161, 3162, 0, 0, 1540, 2890, 0, 2893, 0,
	2903, 2904, 0, 0, 1546, 2851, 1919, 1490, 0, 2853,
	0, 2835, 0, 1563, 0, 0, 142, 142, 142, 142,
	0, 150, 0, 0, -2, -2, 0, 0, 0, 1154,
	0, -2, 1138, 1142, 1144, 1146, 0, 1159, 1162, 0,
	1415, 0, 1161, 1164, 0, 0, 1407, 1408, 1409, 1410,
	0, 0, 0, 1155, 0, 0, 0, 0, 1999, 1192,
	1417, 1382, 1383, 0, 1202, 1489, -2, 0, 0, 1508,
	1363, 1509, 1509, 1509, 0, 0, 0, 0, 1378, 0,
	0, 1255, 0, 2859, 2860, 2864, 0, 1415, 0, 0,
	0, 0, 1710, 0, 1691, 1749, 0, 0, 1261, 1263,
	1265, 1267, 0, 1276, 0, 1277, 0, 1279, 1280, 0,
	0, 1281, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1169,
	1170, 1184, 1282, 1283, 0, 0, 0, 0, 0, 0,
	0, 1288, 0, 1326, 0, 1290, 1291, 1292, 1293, 0,
	1298, 0, 0, 1347, 0, 0, 0, 0, 1304, 1415,
	0, 1306, 1750, 1716, 0, 0, 0, 1716, 1309, 0,
	1311, 0, 0, 0, 0, 0, 2835, 1642, 0, 1247,
	1605, 1610, 1763, 0, 1902, 0, 0, 0, 1775, 1921,
	1778, 1779, 0, 0, 1784, 1622, 210, 0, 0, 0,
	0, 0, 1598, 1598, 1598, 1596, 1567, 1626, 0, 1631,
	1569, 1627, 1636, 1627, 1627, -2, 1571, 0, 1573, 1632,
	0, 1631, 1575, 1577, 1647, 0, 0, 0, 0, -2,
	0, 0, 2031, 1796, 1797, 1798, -2, 2079, 0, 1946,
	2081, 0, 1966, 2093, 0, 0, 2088, 2488, 0, 3144,
	0, 2109, 0, 2524, 2104, 0, 2420, 0, 2415, 2396,
	2432, 0, 0, 2422, 2423, 2428, 2424, 2425, 0, 2398,
	0, 0, 0, 2397, 0, 0, 0, 0, 2589, 2590,
	0, 0, 0, 2596, 0, 0, 0, 0, 2110, 0,
	0, 0, 2496, 1988, 0, 1991, 1992, 0, 0, 2037,
	2000, 0, 0, 0, 0, 0, 1994, 0, 2706, 2708,
	2681, 2682, 2683, 2684, 2685, 2686, 339, 1494, 1495, 0,
	2518, 0, 1665, 0, 2605, 2607, 2515, 0, 2533, 2534,
	2535, 2532, 2554, 0, 2562, 2557, 2565, 2558, 2560, 2559,
	2079, 1966, 0, 0, 2577, 1981, 0, 2952, 2953, 2954,
	0, 0, 2957, 2958, 0, 0, 0, 0, 2965, 2621,
	0, 2110, 0, 0, 2721, 2738, 0, 2728, 0, 0,
	0, 0, 0, 2758, 2765, 2774, 0, 2774, 2769, 0,
	2771, 2688, 0, 0, 0, 0, 2204, 0, 1976, 2205,
	2206, 0, 0, 1960, 1963, 0, 2045, 2104, 0, 0,
	2049, 0, 0, 2379, 0, 0, 2103, 2147, 0, 0,
	0, 0, 2160, 0, 2166, 2003, -2, 0, 2168, 0,
	2164, 0, 2171, 2194, 2698, 2699, 2387, 0, 0, 0,
	2178, 2186, 2179, 2187, 2199, 2200, 0, 0, 2201, 2691,
	0, 2695, 2696, 2697, 1984, 1986, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2350, 0,
	2121, 2211, 0, 2354, 0, 2123, 2211, 0, 2555, 2315,
	2405, 2406, 0, 1444, 0, 2502, 0, 2609, 0, 2612,
	3051, 0, 2333, 0, 0, 0, 0, 0, 2744, 0,
	2739, 0, 2781, 2779, 2780, 0, 0, 2368, 0, 0,
	0, 0, 0, 0, 0, 0, 2600, 0, 3090, 0,
	3092, 0, 3086, 0, 0, 0, 2540, 0, 0, 0,
	2316, 0, 0, 0, 0, 0, 2978, 2979, 2980, 106,
	1425, 1420, 0, 1242, 1476, 1478, 1474, 2223, 2585, 0,
	2619, 0, 0, 3036, 0, 0, 3026, 3005, 3085, 0,
	3038, 3040, 0, 0, 0, 0, 0, 2972, 0, 3031,
	3032, 3033, 3034, 3035, 106, 0, 3036, 3098, 3163, 3165,
	2891, 0, 2894, 0, 1391, 0, 2852, 0, 1917, 1918,
	2848, 0, 1620, 143, 144, 0, 0, 0, 0, 149,
	1102, -2, 0, 0, -2, 0, 0, -2, 0, 0,
	1163, 1165, -2, 1412, 1414, 0, 0, 1517, 0, -2,
	0, 1388, 0, -2, 1386, 1364, 0, 1370, 0, 0,
	0, 1372, 1373, 1220, 1374, 1380, 0, 0, 2866, 2863,
	0, 1716, 0, 0, 1703, 1704, 1716, 0, 1748, 1258,
	0, 1328, 0, 0, 1168, 1171, 1172, 1173, 1174, 1175,
	1176, -2, -2, -2, -2, -2, -2, 1183, 0, 0,
	1187, 1339, 0, 1322, 1323, 0, 1285, 1286, 1287, 1325,
	0, 1294, 0, 1342, 1343, 0, 0, 0, 1300, 1668,
	0, 179, 1301, 0, 1356, 0, 1716, 1702, 1715, 0,
	1700, 0, 0, 0, 1310, 1312, 1695, 1695, 1695, 0,
	2848, 1252, 0, 1920, 0, 0, 0, 1767, 1768, 0,
	1774, 1776, 0, 1783, 0, 1566, 0, 0, 0, 0,
	0, 1593, 1597, 1594, 1595, 1568, 0, 1629, 0, 1570,
	1574, 1576, 1578, 1587, 1629, 0, 0, 1649, 0, 0,
	540, 0, 1509, 0, 1806, 2031, 0, 1866, 2081, 0,
	1939, 1943, 2089, 2080, 0, 0, 1967, 1969, 1970, 1989,
	0, 2095, 0, 115, 116, 1937, 0, 0, 0, 2621,
	2492, 2110, 2522, 0, 0, 2434, 0, 2437, 2435, 0,
	0, 0, 2401, 2403, 2404, 2455, 2448, 2452, 0, 0,
	2594, 0, 2598, 0, 2599, 0, 2826, 0, 0, 0,
	270, 2623, 0, 1993, 1995, 2036, 2688, 2688, 0, 2041,
	2488, 0, 2001, 0, 1996, 1997, 0, 1662, 1663, 0,
	2519, 0, 2517, 2530, 0, 2566, 0, 0, 1937, 0,
	0, 0, 2582, 0, 2955, 2956, 2959, 2960, 2963, 2964,
	2613, 0, 2095, 0, 2472, 2473, 0, 2716, 0, 2742,
	0, 2730, 2732, 2733, 2734, 2735, 2736, 2745, 2748, 2753,
	2756, 0, 2766, 2767, 2768, 2770, 0, 2775, 0, 0,
	0, 2356, 2362, 0, 2144, 0, 1981, 1959, 0, 1961,
	1962, 2379, 0, 2380, 0, 2382, 0, 0, 2098, 0,
	2051, 0, 0, 2056, 0, 1913, 1913, 0, 0, 2151,
	2161, 1864, 2007, 0, 0, 0, 0, 2155, 2157, 2158,
	2156, 0, 2004, 0, 0, 0, 0, 106, 106, 2389,
	2390, 2393, 2202, 2703, 2693, 2345, 0, 0, 0, 0,
	2353, 0, 0, 2347, 2358, 2349, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2330, 2417, 0, 2329, 106,
	2379, 3052, 0, 0, 2809, 2794, 0, 0, 0, 2810,
	2811, 0, 0, 2336, 2727, 0, 0, 0, 2366, 2367,
	2584, 2751, 2373, 2374, 2375, 2376, 106, 2603, 0, 0,
	109, 106, 3069, 3070, 3071, 3073, 3074, 3075, 3076, 3077,
	0, 0, 0, 0, 0, 0, 0, 0, 2984, 2985,
	2986, 2987, 2988, 2989, 0, 0, 2217, 1421, 0, 2620,
	2652, 2968, 3024, 0, 3042, 3018, 3019, 3020, 3021, 3022,
	3029, 2969, 0, 106, 2892, 1390, 1417, 0, 2855, 0,
	2833, 145, 146, 147, 148, -2, -2, 0, 0, 0,
	-2, -2, 1411, 1413, -2, -2, 1156, 1387, 1417, 1217,
	1509, 1365, 1367, 1368, 1379, 1510, 1509, 0, 1512, 0,
	1705, 1706, 0, 1711, 0, 1275, 1278, 0, 0, 0,
	1188, 0, 0, 0, 1284, 1289, 0, 0, 535, 1299,
	1345, 1346, 1669, 0, 1670, 1666, 1667, 0, 0, 0,
	1351, 327, 0, 1307, 1708, 1709, 1308, 1716, 0, 1732,
	1716, 1350, 2855, 1614, 0, 0, 1905, 0, 0, 1780,
	1623, 1588, 0, 1590, 0, 0, 0, 1592, 0, 0,
	0, 1572, 0, 0, 0, 128, 0, 1651, 1655, 0,
	0, 0, 0, 1921, 1788, 1888, 1888, 0, 1790, 1803,
	0, 1806, 0, 2089, 0, 0, 0, 117, 0, 1965,
	0, 1971, 0, 2081, 3145, 0, 0, 0, 1966, 0,
	0, 3141, 2483, 0, 0, 0, 0, 2394, 0, 1656,
	0, 1439, -2, 2429, 0, 2430, 2465, 0, 2482, 0,
	2591, 0, 0, 0, 2828, 0, 0, 0, 1937, 0,
	2495, 1990, 0, 2097, 2097, 0, 2065, 0, 2002, 0,
	1664, 2608, 0, 1982, 0, 0, 0, 0, 1981, 0,
	0, 0, 2618, 0, 0, 0, 0, 2744, 2737, 0,
	0, 0, 2790, 2790, 0, 0, 0, 0, 2146, 1989,
	1957, 1958, 2047, 2061, 2381, 2385, 2383, 2384, 2386, 2061,
	0, 2061, 0, 0, 1907, 103, 0, 1908, 0, 2148,
	0, 0, 2008, 2149, 0, 2153, 0, 1665, 2006, 2154,
	2163, 2170, 0, 0, 0, 2135, 0, 2135, 0, 0,
	2360, 2351, 0, 0, 0, 2364, 2355, 0, 2418, 2503,
	2611, 2334, 2335, 0, 0, 0, 2800, 0, 0, 0,
	0, 0, 0, 2378, 2601, 2602, 3091, 1665, 0, 2548,
	2549, 2317, 0, 0, 2552, 0, 0, 0, 2586, 3027,
	3036, 2974, 1392, 1491, 1548, 0, 2847, 0, -2, -2,
	-2, 1389, 0, 2870, 0, 1713, 1714, 1747, 1338, -2,
	0, 1324, 1320, 1321, 1295, 0, 1296, 0, 1671, 1302,
	1303, 0, 1352, 1305, 1741, 1694, 1696, 0, 0, 0,
	0, 1718, 1719, 1720, 1721, 1722, 1723, 1726, 1730, 0,
	1348, 0, 1549, 1617, 0, 0, 1898, 1621, 0, 1901,
	0, 1589, 0, 1600, 1591, 0, 0, 1630, 0, 1633,
	1635, 1650, 0, 1653, 0, 0, 0, 1672, 0, 0,
	1693, 1364, 1787, 1789, 0, 0, 0, 1883, 0, 1805,
	1807, 1808, 1869, 1869, 1811, 1812, 1869, 1869, 0, 0,
	0, 1822, 1830, 1621, 1801, 117, 0, 1944, 1947, 1948,
	1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1945, 2093,
	0, 1968, 1989, 2089, 2094, 2090, 0, 0, 2079, 2081,
	1966, 3144, 0, 0, 0, 0, 0, 2104, 0, 2420,
	1658, 2433, 0, 2438, 2439, 0, 2471, 2467, 2454, 2456,
	0, 2459, 2460, 2379, 0, 2592, 2816, 0, 0, 2822,
	2827, 0, 0, 2825, 2492, 2110, 0, 2038, 0, 2039,
	2055, 2070, 0, 2035, 0, 2793, 1980, 0, 1981, 0,
	2079, 1966, 2567, 0, 1981, 2621, 0, 0, 2717, 0,
	2726, 0, 2773, 2790, 2787, 0, 2786, 2815, 0, 0,
	0, 1987, 2688, 0, 2688, 0, 2688, 2057, 2058, 339,
	1916, 102, 1912, 1913, 2152, 2162, 0, 0, 2690, 2392,
	2357, 2363, 2126, 0, 2128, 0, 2359, 0, 2135, 0,
	0, 2795, 2805, 2805, 2798, 0, 2812, 0, 0, 0,
	2741, 2337, 106, 2544, 0, 0, 0, 3028, 106, 0,
	106, 2854, 2856, 0, 2834, 2836, 2838, 2839, 2840, 2841,
	2842, 0, 209, 395, 496, 1366, 0, 0, 0, 0,
	2865, 0, -2, 0, 0, 1353, 1354, 1746, 0, 0,
	0, 0, 1315, 0, 1717, 1724, 1725, 0, 0, 1317,
	1349, 1608, 0, 0, 0, 0, 1900, 1906, 1769, 0,
	0, 1628, 1634, 1648, 1652, 0, 0, 1678, 0, 0,
	0, 0, 1675, 1695, 0, 0, 1887, 0, 1885, 0,
	0, 0, 0, 0, 0, 0, 1821, 1804, 0, 1824,
	1825, 1826, 1827, 1828, 0, 1791, 2093, 2078, 2095, 0,
	1972, 117, 2091, 2092, 2081, 2089, 0, 2621, 2489, 0,
	0, 2492, 2106, 0, 1657, 2434, 2436, 2431, 0, 0,
	0, 2466, 2457, 1869, 2461, 2462, 0, 2481, 0, 0,
	2829, 2830, 2484, 0, 0, 0, 2040, 0, 2042, 2066,
	2067, 0, 2062, 2063, 2064, 2043, 0, 0, 0, 0,
	1983, 2578, 1981, 0, 0, 0, 2583, 2614, 2709, 0,
	0, 2719, 2749, 2785, 2788, 2789, 0, 1978, 0, 0,
	0, 2097, 0, 2097, 2488, 2097, 0, 1919, 1916, 1909,
	0, 2035, 2165, 0, 0, 0, 2361, 2130, 0, 2365,
	2033, 0, 2033, 0, 0, 0, 0, 3093, 2318, 2320,
	2319, 2981, 2982, 0, 2970, 0, 0, 0, 2843, 0,
	0, 0, 2862, 2882, 2871, -2, 454, 210, 0, 2882,
	2882, 1337, 1297, 1340, 1355, 1730, 0, 0, 1733, 0,
	1735, 0, 0, 0, 1697, 1698, 1731, 1316, 0, 0,
	0, 0, 1621, 1638, 3045, 0, 1676, 0, 1680, 0,
	1673, 0, 1674, 0, 1692, 1878, 1879, 0, 0, 1890,
	1880, 0, 0, 0, 1809, 1810, 1813, 1814, 1815, 1816,
	0, 1819, 1820, 1823, 0, 1831, 1833, 2095, 1924, 0,
	2083, 1913, 1913, 0, 2093, 2089, 117, 2081, 3142, 2490,
	2491, 2485, 2000, 0, 0, 2395, 0, 0, 2464, 2468,
	2469, 0, 0, 0, 0, 0, 1937, 0, 2054, 2068,
	0, 2069, 0, 0, 0, 0, 0, 0, 2792, 2580,
	0, 0, 1981, 0, 2718, 0, 1973, 0, 1977, 1974,
	0, 2379, 0, 2379, 2065, 1621, 0, 1910, 1919, 2150,
	2159, 2689, 2135, 2135, 0, 2796, 2032, 2803, 0, 2797,
	0, 2813, 2814, 2743, 0, 2857, 2858, 2837, 0, 0,
	0, 2867, 0, 0, 2873, 2874, 2875, 2876, 2877, 2868,
	2869, 0, 1743, 1745, 1734, 1736, 0, 1739, 0, 1740,
	1727, 1728, 0, 0, 0, 1897, 1599, 0, 3043, 0,
	1654, 1679, 1682, 1683, 0, 0, 0, 1688, 0, 1681,
	0, 0, 1881, 0, 1882, 1891, 0, 0, 0, 0,
	1884, 1886, 1817, 1818, 1829, 0, 1922, 2082, 0, 103,
	103, 0, 2095, 117, 2093, 2089, 2110, 0, 0, 0,
	0, 2458, 2463, 0, 2819, 2820, 2492, 2096, 2071, 0,
	2074, 2075, 0, 2072, 2034, 2044, 2791, 1981, 0, 2568,
	2710, 2720, 1979, 0, 2048, 2060, 2050, 2070, 2379, 2059,
	1911, 2127, 2129, 2135, 0, 2799, 106, 2845, 2844, 0,
	0, 2879, 2880, 0, 0, 1314, 0, 0, 1737, 1738,
	0, 0, 0, 0, 1637, 0, 1684, 1685, 1686, 1687,
	1689, 0, 0, 1889, 0, 0, 1895, 0, 1832, 2084,
	2085, 2086, 1913, 1926, 2093, 2095, 117, 2095, 0, 2107,
	2106, 0, 2470, 2471, 0, 0, 2486, 2073, 2488, 2488,
	2579, 1981, 0, 2379, 2053, 2131, 2804, 2983, 2846, 2878,
	2881, 2872, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1753, 0, -2, 0, 0, 0, 103, 2095,
	1925, 2093, 1621, 2105, 0, 2000, 2476, 0, 0, 0,
	2076, 2077, 2581, 0, 2052, 1742, 1744, 1729, 0, 0,
	-2, 1616, 1612, 1613, 3044, 0, 1732, 0, 0, 1762,
	0, 1751, 1892, 1893, 0, 1896, 2087, 1923, 2095, 2099,
	2108, 2110, 0, 2474, 2477, 2478, 2479, 2480, 0, 0,
	0, 1975, 0, 0, 1677, 0, 1754, 1755, 1741, 1762,
	1762, 0, 0, 0, 1927, 2095, 2442, 0, 0, 0,
	0, 0, 1509, 1690, 1746, 1741, 1732, 1761, 0, 0,
	0, 1621, 2475, 0, 0, 0, 0, 0, 1730, 1746,
	1758, 0, 0, 1894, 2100, 2476, 2817, 2818, 1615, 0,
	1756, 1730, 0, 0, 0, 1757, 1759, 0, 2443, 0,
	1760,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 538, 3, 3,
	531, 532, 536, 534, 541, 535, 533, 537, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 542, 540,
	525, 527, 526, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 529, 3, 530, 539,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 528, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:585
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:600
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:608
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:623
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:626
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:635
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:636
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:637
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:638
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:639
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:640
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:641
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:642
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:643
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:644
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:645
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:646
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:647
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:648
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:649
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:650
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:651
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:652
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:653
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:654
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:655
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:656
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:657
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:658
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:659
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:660
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:661
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:662
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:663
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:664
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:665
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:666
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:667
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:668
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:669
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:670
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:671
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:672
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:673
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:674
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:675
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:676
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:677
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:678
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:679
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:680
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:681
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:682
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:683
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:684
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:685
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:686
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:687
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:688
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:689
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:690
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:691
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:692
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:693
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:694
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:695
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:696
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:697
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:698
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:699
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:700
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:701
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:702
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:703
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:704
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:705
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:706
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:707
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:708
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:709
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:710
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:711
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:712
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:713
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:714
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:715
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:716
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:717
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:718
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:719
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:720
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:721
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:722
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:723
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:724
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:725
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:726
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:727
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:729
		{
			yyVAL.stmt = nil
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:740
		{
			yyVAL.str = yyDollar[1].str
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:741
		{
			yyVAL.str = ""
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:745
		{
			yyVAL.list = yyDollar[1].list
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:746
		{
			yyVAL.list = nil
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:750
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:751
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:752
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:756
		{
			yyVAL.ival = 1
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:757
		{
			yyVAL.ival = 0
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:761
		{
			yyVAL.ival = 1
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:762
		{
			yyVAL.ival = 0
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:766
		{
			yyVAL.bval = true
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:767
		{
			yyVAL.bval = false
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:771
		{
			yyVAL.bval = true
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:772
		{
			yyVAL.bval = false
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:776
		{
			yyVAL.list = yyDollar[2].list
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:777
		{
			yyVAL.list = nil
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:778
		{
			yyVAL.list = nil
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:787
		{
			yyVAL.str = yyDollar[1].str
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:788
		{
			yyVAL.str = yyDollar[1].str
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:789
		{
			yyVAL.str = yyDollar[1].str
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:793
		{
			yyVAL.str = yyDollar[1].str
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:794
		{
			yyVAL.str = yyDollar[1].str
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:795
		{
			yyVAL.str = yyDollar[1].str
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:796
		{
			yyVAL.str = yyDollar[1].str
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:797
		{
			yyVAL.str = yyDollar[1].str
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:800
		{
			yyVAL.str = yyDollar[1].str
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:801
		{
			yyVAL.str = yyDollar[1].str
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:804
		{
			yyVAL.str = yyDollar[1].str
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:809
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:813
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:822
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:826
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:834
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:841
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:870
		{
			yyVAL.list = yyDollar[2].list
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:871
		{
			yyVAL.list = nil
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:876
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:880
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:889
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:893
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:906
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:912
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:918
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:924
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:930
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:937
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:944
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:950
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:956
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:965
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:969
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:981
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:985
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:995
		{
			yyVAL.str = "abort"
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:996
		{
			yyVAL.str = "absent"
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:997
		{
			yyVAL.str = "absolute"
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:998
		{
			yyVAL.str = "access"
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:999
		{
			yyVAL.str = "action"
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1000
		{
			yyVAL.str = "add"
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1001
		{
			yyVAL.str = "admin"
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1002
		{
			yyVAL.str = "after"
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1003
		{
			yyVAL.str = "aggregate"
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1004
		{
			yyVAL.str = "also"
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1005
		{
			yyVAL.str = "alter"
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1006
		{
			yyVAL.str = "always"
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1007
		{
			yyVAL.str = "asensitive"
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1008
		{
			yyVAL.str = "assertion"
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1009
		{
			yyVAL.str = "assignment"
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1010
		{
			yyVAL.str = "at"
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1011
		{
			yyVAL.str = "atomic"
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1012
		{
			yyVAL.str = "attach"
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1013
		{
			yyVAL.str = "attribute"
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1014
		{
			yyVAL.str = "backward"
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1015
		{
			yyVAL.str = "before"
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1016
		{
			yyVAL.str = "begin"
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1017
		{
			yyVAL.str = "breadth"
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1018
		{
			yyVAL.str = "by"
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1019
		{
			yyVAL.str = "cache"
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1020
		{
			yyVAL.str = "call"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1021
		{
			yyVAL.str = "called"
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1022
		{
			yyVAL.str = "cascade"
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1023
		{
			yyVAL.str = "cascaded"
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1024
		{
			yyVAL.str = "catalog"
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1025
		{
			yyVAL.str = "chain"
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1026
		{
			yyVAL.str = "characteristics"
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1027
		{
			yyVAL.str = "checkpoint"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1028
		{
			yyVAL.str = "class"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1029
		{
			yyVAL.str = "close"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1030
		{
			yyVAL.str = "cluster"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1031
		{
			yyVAL.str = "columns"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1032
		{
			yyVAL.str = "comment"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1033
		{
			yyVAL.str = "comments"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1034
		{
			yyVAL.str = "commit"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1035
		{
			yyVAL.str = "committed"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1036
		{
			yyVAL.str = "compression"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1037
		{
			yyVAL.str = "conditional"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1038
		{
			yyVAL.str = "configuration"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1039
		{
			yyVAL.str = "conflict"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1040
		{
			yyVAL.str = "connection"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1041
		{
			yyVAL.str = "constraints"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1042
		{
			yyVAL.str = "content"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1043
		{
			yyVAL.str = "continue"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1044
		{
			yyVAL.str = "conversion"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1045
		{
			yyVAL.str = "copy"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1046
		{
			yyVAL.str = "cost"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1047
		{
			yyVAL.str = "csv"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1048
		{
			yyVAL.str = "cube"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.str = "current"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.str = "cursor"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.str = "cycle"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1052
		{
			yyVAL.str = "data"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "database"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "day"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "deallocate"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "declare"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "defaults"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "deferred"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "definer"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "delete"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "delimiter"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "delimiters"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "depends"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "depth"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "detach"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "dictionary"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "disable"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "discard"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "document"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "domain"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "double"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "drop"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "each"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "empty"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "enable"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "encoding"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "encrypted"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "enum"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "error"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "escape"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "event"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "exclude"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "excluding"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "exclusive"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "execute"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "explain"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "expression"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "extension"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "external"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "family"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "filter"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "finalize"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "first"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "following"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "force"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "format"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "forward"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "function"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "functions"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "generated"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "global"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "granted"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "groups"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "handler"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "header"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "hold"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "hour"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "identity"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "if"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "immediate"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "immutable"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "implicit"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "import"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "include"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "including"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "increment"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "indent"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "index"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "indexes"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "inherit"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "inherits"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "inline"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "input"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "insensitive"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "insert"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "instead"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "invoker"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "isolation"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "keep"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "key"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "keys"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "label"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "language"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "large"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "last"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "leakproof"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "level"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "listen"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "load"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "local"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "location"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "lock"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "locked"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "logged"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "mapping"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "match"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "matched"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "materialized"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "maxvalue"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "merge"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "method"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "minute"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "minvalue"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "mode"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "month"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "move"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "name"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "names"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "nested"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "new"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "next"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "nfc"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "nfd"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "nfkc"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "nfkd"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "no"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "normalized"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.str = "nothing"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1169
		{
			yyVAL.str = "notify"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.str = "nowait"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "nulls"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "object"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "of"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.str = "off"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.str = "oids"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			yyVAL.str = "old"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1177
		{
			yyVAL.str = "omit"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = "operator"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = "option"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "options"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "ordinality"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "others"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "over"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "overriding"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "owned"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "owner"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "parallel"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "parameter"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "parser"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "partial"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "partition"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "passing"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "password"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1194
		{
			yyVAL.str = "path"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "plan"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "plans"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "policy"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.str = "preceding"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.str = "prepare"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.str = "prepared"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.str = "preserve"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "prior"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "privileges"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = "procedural"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = "procedure"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = "procedures"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1207
		{
			yyVAL.str = "program"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1208
		{
			yyVAL.str = "publication"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1209
		{
			yyVAL.str = "quote"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1210
		{
			yyVAL.str = "quotes"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.str = "range"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1212
		{
			yyVAL.str = "read"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1213
		{
			yyVAL.str = "reassign"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1214
		{
			yyVAL.str = "recheck"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1215
		{
			yyVAL.str = "recursive"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1216
		{
			yyVAL.str = "ref"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1217
		{
			yyVAL.str = "referencing"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1218
		{
			yyVAL.str = "refresh"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1219
		{
			yyVAL.str = "reindex"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "relative"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "release"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "rename"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "repeatable"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "replace"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "replica"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "reset"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "restart"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "restrict"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "return"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "returns"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "revoke"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "role"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "rollback"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "rollup"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.str = "routine"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1236
		{
			yyVAL.str = "routines"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.str = "rows"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1238
		{
			yyVAL.str = "rule"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1239
		{
			yyVAL.str = "savepoint"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1240
		{
			yyVAL.str = "scalar"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.str = "schema"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1242
		{
			yyVAL.str = "schemas"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1243
		{
			yyVAL.str = "scroll"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1244
		{
			yyVAL.str = "search"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.str = "second"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1246
		{
			yyVAL.str = "security"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1247
		{
			yyVAL.str = "sequence"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1248
		{
			yyVAL.str = "sequences"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1249
		{
			yyVAL.str = "serializable"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1250
		{
			yyVAL.str = "server"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1251
		{
			yyVAL.str = "session"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1252
		{
			yyVAL.str = "set"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.str = "sets"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1254
		{
			yyVAL.str = "share"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1255
		{
			yyVAL.str = "show"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1256
		{
			yyVAL.str = "simple"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "skip"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.str = "snapshot"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.str = "source"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "sql"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "stable"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "standalone"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "start"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "statement"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "statistics"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "stdin"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "stdout"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "storage"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.str = "stored"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1270
		{
			yyVAL.str = "strict"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "string"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "strip"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "subscription"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "support"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "sysid"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "system"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "tables"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "tablespace"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.str = "target"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1280
		{
			yyVAL.str = "temp"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1281
		{
			yyVAL.str = "template"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1282
		{
			yyVAL.str = "temporary"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.str = "text"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1284
		{
			yyVAL.str = "ties"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1285
		{
			yyVAL.str = "transaction"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1286
		{
			yyVAL.str = "transform"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1287
		{
			yyVAL.str = "trigger"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1288
		{
			yyVAL.str = "truncate"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1289
		{
			yyVAL.str = "trusted"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1290
		{
			yyVAL.str = "type"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1291
		{
			yyVAL.str = "types"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1292
		{
			yyVAL.str = "uescape"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1293
		{
			yyVAL.str = "unbounded"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1294
		{
			yyVAL.str = "uncommitted"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1295
		{
			yyVAL.str = "unconditional"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1296
		{
			yyVAL.str = "unencrypted"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1297
		{
			yyVAL.str = "unknown"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1298
		{
			yyVAL.str = "unlisten"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1299
		{
			yyVAL.str = "unlogged"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1300
		{
			yyVAL.str = "until"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.str = "update"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.str = "vacuum"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "valid"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "validate"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "validator"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "value"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "varying"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "version"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "view"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "views"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.str = "volatile"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1312
		{
			yyVAL.str = "whitespace"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			yyVAL.str = "within"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1314
		{
			yyVAL.str = "without"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.str = "work"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1316
		{
			yyVAL.str = "wrapper"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1317
		{
			yyVAL.str = "write"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1318
		{
			yyVAL.str = "xml"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1319
		{
			yyVAL.str = "year"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1320
		{
			yyVAL.str = "yes"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1321
		{
			yyVAL.str = "zone"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1335
		{
			yyVAL.str = "between"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = "bigint"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "bit"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "boolean"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "char"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "character"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "coalesce"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "dec"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "decimal"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "exists"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1345
		{
			yyVAL.str = "extract"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1346
		{
			yyVAL.str = "float"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1347
		{
			yyVAL.str = "greatest"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1348
		{
			yyVAL.str = "grouping"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1349
		{
			yyVAL.str = "inout"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1350
		{
			yyVAL.str = "int"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1351
		{
			yyVAL.str = "integer"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1352
		{
			yyVAL.str = "interval"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1353
		{
			yyVAL.str = "json"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1354
		{
			yyVAL.str = "json_array"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1355
		{
			yyVAL.str = "json_arrayagg"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1356
		{
			yyVAL.str = "json_exists"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1357
		{
			yyVAL.str = "json_object"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "json_objectagg"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "json_query"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "json_scalar"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1361
		{
			yyVAL.str = "json_serialize"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1362
		{
			yyVAL.str = "json_table"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.str = "json_value"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1364
		{
			yyVAL.str = "least"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1365
		{
			yyVAL.str = "merge_action"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1366
		{
			yyVAL.str = "national"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1367
		{
			yyVAL.str = "nchar"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1368
		{
			yyVAL.str = "none"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1369
		{
			yyVAL.str = "normalize"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1370
		{
			yyVAL.str = "nullif"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.str = "numeric"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1372
		{
			yyVAL.str = "out"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1373
		{
			yyVAL.str = "overlay"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1374
		{
			yyVAL.str = "position"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1375
		{
			yyVAL.str = "precision"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1376
		{
			yyVAL.str = "real"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1377
		{
			yyVAL.str = "row"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.str = "setof"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1379
		{
			yyVAL.str = "smallint"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1380
		{
			yyVAL.str = "substring"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1381
		{
			yyVAL.str = "time"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1382
		{
			yyVAL.str = "timestamp"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1383
		{
			yyVAL.str = "treat"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1384
		{
			yyVAL.str = "trim"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1385
		{
			yyVAL.str = "values"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1386
		{
			yyVAL.str = "varchar"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1387
		{
			yyVAL.str = "xmlattributes"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1388
		{
			yyVAL.str = "xmlconcat"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1389
		{
			yyVAL.str = "xmlelement"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1390
		{
			yyVAL.str = "xmlexists"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1391
		{
			yyVAL.str = "xmlforest"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1392
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "xmlparse"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.str = "xmlpi"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.str = "xmlroot"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1396
		{
			yyVAL.str = "xmlserialize"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.str = "xmltable"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1411
		{
			yyVAL.str = "authorization"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1412
		{
			yyVAL.str = "binary"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1413
		{
			yyVAL.str = "collation"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1414
		{
			yyVAL.str = "concurrently"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1415
		{
			yyVAL.str = "cross"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.str = "current_schema"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1417
		{
			yyVAL.str = "freeze"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "full"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1419
		{
			yyVAL.str = "ilike"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "inner"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "is"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "isnull"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "join"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "left"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "like"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "natural"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "notnull"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "outer"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "overlaps"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "right"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "similar"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "tablesample"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "verbose"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1443
		{
			yyVAL.str = "all"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1444
		{
			yyVAL.str = "analyse"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1445
		{
			yyVAL.str = "analyze"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1446
		{
			yyVAL.str = "and"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1447
		{
			yyVAL.str = "any"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1448
		{
			yyVAL.str = "array"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1449
		{
			yyVAL.str = "as"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "asc"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "asymmetric"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "both"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "case"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "cast"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1455
		{
			yyVAL.str = "check"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1456
		{
			yyVAL.str = "collate"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1457
		{
			yyVAL.str = "column"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.str = "constraint"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1459
		{
			yyVAL.str = "create"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1460
		{
			yyVAL.str = "current_catalog"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1461
		{
			yyVAL.str = "current_date"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1462
		{
			yyVAL.str = "current_role"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.str = "current_time"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = "current_timestamp"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1465
		{
			yyVAL.str = "current_user"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1466
		{
			yyVAL.str = "default"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.str = "deferrable"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1468
		{
			yyVAL.str = "desc"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "distinct"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1470
		{
			yyVAL.str = "do"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.str = "else"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1472
		{
			yyVAL.str = "end"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.str = "except"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.str = "false"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1475
		{
			yyVAL.str = "fetch"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1476
		{
			yyVAL.str = "for"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.str = "foreign"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "from"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1479
		{
			yyVAL.str = "grant"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.str = "group"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1481
		{
			yyVAL.str = "having"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "in"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "initially"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "intersect"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "into"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "lateral"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.str = "leading"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1488
		{
			yyVAL.str = "limit"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = "localtime"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = "localtimestamp"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.str = "not"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1492
		{
			yyVAL.str = "null"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			yyVAL.str = "offset"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "on"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "only"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "or"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.str = "order"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1498
		{
			yyVAL.str = "placing"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1499
		{
			yyVAL.str = "primary"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = "references"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "returning"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "select"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "session_user"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "some"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "symmetric"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "system_user"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "table"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "then"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "to"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "trailing"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "true"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "union"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "unique"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "user"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "using"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "variadic"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "when"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "where"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "window"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "with"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "abort"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "absent"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "absolute"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "access"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "action"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "add"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "admin"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "after"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "aggregate"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "all"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "also"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "alter"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "always"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "analyse"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "analyze"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "and"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "any"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "asc"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "asensitive"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "assertion"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "assignment"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "asymmetric"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "at"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "atomic"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "attach"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "attribute"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "authorization"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "backward"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "before"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "begin"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "between"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "bigint"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "binary"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "bit"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "boolean"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "both"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "breadth"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "by"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "cache"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "call"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "called"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "cascade"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "cascaded"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "case"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "cast"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1578
		{
			yyVAL.str = "catalog"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1579
		{
			yyVAL.str = "chain"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1580
		{
			yyVAL.str = "characteristics"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1581
		{
			yyVAL.str = "check"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1582
		{
			yyVAL.str = "checkpoint"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1583
		{
			yyVAL.str = "class"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1584
		{
			yyVAL.str = "close"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1585
		{
			yyVAL.str = "cluster"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1586
		{
			yyVAL.str = "coalesce"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1587
		{
			yyVAL.str = "collate"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1588
		{
			yyVAL.str = "collation"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1589
		{
			yyVAL.str = "column"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1590
		{
			yyVAL.str = "columns"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "comment"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "comments"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			yyVAL.str = "commit"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1594
		{
			yyVAL.str = "committed"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.str = "compression"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "concurrently"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "conditional"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "configuration"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "conflict"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "connection"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "constraint"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "constraints"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "content"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "continue"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "conversion"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "copy"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "cost"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "cross"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "csv"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "cube"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "current"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "current_catalog"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "current_date"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "current_role"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "current_schema"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "current_time"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "current_timestamp"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "current_user"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "cursor"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "cycle"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "data"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "database"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "deallocate"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "dec"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "decimal"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "declare"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "default"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "defaults"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "deferrable"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "deferred"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "definer"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "delete"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "delimiter"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "delimiters"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "depends"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "depth"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "desc"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "detach"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "dictionary"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "disable"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "discard"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "distinct"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "do"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "document"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "domain"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "double"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "drop"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "each"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "else"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "empty"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "enable"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "encoding"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "encrypted"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "end"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "enum"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "error"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "escape"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "event"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "exclude"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "excluding"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "exclusive"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "execute"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "exists"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "explain"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "expression"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "extension"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "external"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "extract"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "false"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "family"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "finalize"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "first"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "float"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "following"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "force"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "foreign"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "format"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "forward"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "freeze"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "full"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "function"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "functions"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "generated"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "global"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "granted"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "greatest"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "grouping"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "groups"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "handler"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "header"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "hold"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "identity"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "if"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "ilike"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "immediate"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "immutable"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "implicit"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "import"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "in"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "include"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "including"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "increment"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "indent"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "index"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "indexes"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "inherit"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "inherits"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "initially"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "inline"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "inner"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "inout"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "input"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "insensitive"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "insert"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "instead"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "int"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "integer"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "interval"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "invoker"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "is"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "isolation"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "join"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "json"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "json_array"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "json_arrayagg"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "json_exists"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "json_object"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "json_objectagg"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "json_query"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "json_scalar"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "json_serialize"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "json_table"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "json_value"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "keep"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "key"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "keys"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "label"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "language"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "large"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "last"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "lateral"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "leading"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "leakproof"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "least"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "left"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "level"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "like"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "listen"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "load"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "local"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "localtime"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "localtimestamp"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "location"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "lock"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.str = "locked"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1756
		{
			yyVAL.str = "logged"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1757
		{
			yyVAL.str = "mapping"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1758
		{
			yyVAL.str = "match"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.str = "matched"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.str = "materialized"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1761
		{
			yyVAL.str = "maxvalue"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1762
		{
			yyVAL.str = "merge"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.str = "merge_action"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1764
		{
			yyVAL.str = "method"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1765
		{
			yyVAL.str = "minvalue"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1766
		{
			yyVAL.str = "mode"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1767
		{
			yyVAL.str = "move"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1768
		{
			yyVAL.str = "name"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.str = "names"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1770
		{
			yyVAL.str = "national"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.str = "natural"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1772
		{
			yyVAL.str = "nchar"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1773
		{
			yyVAL.str = "nested"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1774
		{
			yyVAL.str = "new"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			yyVAL.str = "next"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1776
		{
			yyVAL.str = "nfc"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1777
		{
			yyVAL.str = "nfd"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1778
		{
			yyVAL.str = "nfkc"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1779
		{
			yyVAL.str = "nfkd"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1780
		{
			yyVAL.str = "no"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.str = "none"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1782
		{
			yyVAL.str = "normalize"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1783
		{
			yyVAL.str = "normalized"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1784
		{
			yyVAL.str = "not"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1785
		{
			yyVAL.str = "nothing"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1786
		{
			yyVAL.str = "notify"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1787
		{
			yyVAL.str = "nowait"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1788
		{
			yyVAL.str = "null"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1789
		{
			yyVAL.str = "nullif"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1790
		{
			yyVAL.str = "nulls"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1791
		{
			yyVAL.str = "numeric"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1792
		{
			yyVAL.str = "object"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1793
		{
			yyVAL.str = "of"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1794
		{
			yyVAL.str = "off"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1795
		{
			yyVAL.str = "oids"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1796
		{
			yyVAL.str = "old"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1797
		{
			yyVAL.str = "omit"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1798
		{
			yyVAL.str = "only"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1799
		{
			yyVAL.str = "operator"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1800
		{
			yyVAL.str = "option"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1801
		{
			yyVAL.str = "options"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1802
		{
			yyVAL.str = "or"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1803
		{
			yyVAL.str = "ordinality"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1804
		{
			yyVAL.str = "others"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1805
		{
			yyVAL.str = "out"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1806
		{
			yyVAL.str = "outer"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1807
		{
			yyVAL.str = "overlay"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1808
		{
			yyVAL.str = "overriding"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1809
		{
			yyVAL.str = "owned"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1810
		{
			yyVAL.str = "owner"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1811
		{
			yyVAL.str = "parallel"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1812
		{
			yyVAL.str = "parameter"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1813
		{
			yyVAL.str = "parser"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1814
		{
			yyVAL.str = "partial"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1815
		{
			yyVAL.str = "partition"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1816
		{
			yyVAL.str = "passing"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1817
		{
			yyVAL.str = "password"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1818
		{
			yyVAL.str = "path"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1819
		{
			yyVAL.str = "placing"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1820
		{
			yyVAL.str = "plan"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1821
		{
			yyVAL.str = "plans"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1822
		{
			yyVAL.str = "policy"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1823
		{
			yyVAL.str = "position"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1824
		{
			yyVAL.str = "preceding"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1825
		{
			yyVAL.str = "prepare"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1826
		{
			yyVAL.str = "prepared"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1827
		{
			yyVAL.str = "preserve"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1828
		{
			yyVAL.str = "primary"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1829
		{
			yyVAL.str = "prior"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1830
		{
			yyVAL.str = "privileges"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1831
		{
			yyVAL.str = "procedural"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1832
		{
			yyVAL.str = "procedure"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1833
		{
			yyVAL.str = "procedures"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1834
		{
			yyVAL.str = "program"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1835
		{
			yyVAL.str = "publication"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1836
		{
			yyVAL.str = "quote"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1837
		{
			yyVAL.str = "quotes"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1838
		{
			yyVAL.str = "range"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1839
		{
			yyVAL.str = "read"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1840
		{
			yyVAL.str = "real"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1841
		{
			yyVAL.str = "reassign"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1842
		{
			yyVAL.str = "recheck"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1843
		{
			yyVAL.str = "recursive"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1844
		{
			yyVAL.str = "ref"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1845
		{
			yyVAL.str = "references"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1846
		{
			yyVAL.str = "referencing"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1847
		{
			yyVAL.str = "refresh"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1848
		{
			yyVAL.str = "reindex"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1849
		{
			yyVAL.str = "relative"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1850
		{
			yyVAL.str = "release"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1851
		{
			yyVAL.str = "rename"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1852
		{
			yyVAL.str = "repeatable"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1853
		{
			yyVAL.str = "replace"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1854
		{
			yyVAL.str = "replica"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1855
		{
			yyVAL.str = "reset"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1856
		{
			yyVAL.str = "restart"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1857
		{
			yyVAL.str = "restrict"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1858
		{
			yyVAL.str = "return"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1859
		{
			yyVAL.str = "returns"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1860
		{
			yyVAL.str = "revoke"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1861
		{
			yyVAL.str = "right"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1862
		{
			yyVAL.str = "role"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1863
		{
			yyVAL.str = "rollback"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1864
		{
			yyVAL.str = "rollup"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1865
		{
			yyVAL.str = "routine"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1866
		{
			yyVAL.str = "routines"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1867
		{
			yyVAL.str = "row"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1868
		{
			yyVAL.str = "rows"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1869
		{
			yyVAL.str = "rule"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1870
		{
			yyVAL.str = "savepoint"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1871
		{
			yyVAL.str = "scalar"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1872
		{
			yyVAL.str = "schema"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1873
		{
			yyVAL.str = "schemas"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1874
		{
			yyVAL.str = "scroll"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1875
		{
			yyVAL.str = "search"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1876
		{
			yyVAL.str = "security"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1877
		{
			yyVAL.str = "select"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1878
		{
			yyVAL.str = "sequence"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1879
		{
			yyVAL.str = "sequences"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1880
		{
			yyVAL.str = "serializable"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1881
		{
			yyVAL.str = "server"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1882
		{
			yyVAL.str = "session"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1883
		{
			yyVAL.str = "session_user"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1884
		{
			yyVAL.str = "set"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1885
		{
			yyVAL.str = "setof"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1886
		{
			yyVAL.str = "sets"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1887
		{
			yyVAL.str = "share"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1888
		{
			yyVAL.str = "show"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1889
		{
			yyVAL.str = "similar"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1890
		{
			yyVAL.str = "simple"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1891
		{
			yyVAL.str = "skip"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1892
		{
			yyVAL.str = "smallint"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1893
		{
			yyVAL.str = "snapshot"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1894
		{
			yyVAL.str = "some"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1895
		{
			yyVAL.str = "source"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1896
		{
			yyVAL.str = "sql"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1897
		{
			yyVAL.str = "stable"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1898
		{
			yyVAL.str = "standalone"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1899
		{
			yyVAL.str = "start"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1900
		{
			yyVAL.str = "statement"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1901
		{
			yyVAL.str = "statistics"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1902
		{
			yyVAL.str = "stdin"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1903
		{
			yyVAL.str = "stdout"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1904
		{
			yyVAL.str = "storage"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1905
		{
			yyVAL.str = "stored"
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1906
		{
			yyVAL.str = "strict"
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1907
		{
			yyVAL.str = "string"
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1908
		{
			yyVAL.str = "strip"
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1909
		{
			yyVAL.str = "subscription"
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1910
		{
			yyVAL.str = "substring"
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1911
		{
			yyVAL.str = "support"
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1912
		{
			yyVAL.str = "symmetric"
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1913
		{
			yyVAL.str = "sysid"
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1914
		{
			yyVAL.str = "system"
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1915
		{
			yyVAL.str = "system_user"
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1916
		{
			yyVAL.str = "table"
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1917
		{
			yyVAL.str = "tables"
		}
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1918
		{
			yyVAL.str = "tablesample"
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1919
		{
			yyVAL.str = "tablespace"
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1920
		{
			yyVAL.str = "target"
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1921
		{
			yyVAL.str = "temp"
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1922
		{
			yyVAL.str = "template"
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1923
		{
			yyVAL.str = "temporary"
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1924
		{
			yyVAL.str = "text"
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1925
		{
			yyVAL.str = "then"
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1926
		{
			yyVAL.str = "ties"
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1927
		{
			yyVAL.str = "time"
		}
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1928
		{
			yyVAL.str = "timestamp"
		}
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1929
		{
			yyVAL.str = "trailing"
		}
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1930
		{
			yyVAL.str = "transaction"
		}
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1931
		{
			yyVAL.str = "transform"
		}
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1932
		{
			yyVAL.str = "treat"
		}
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1933
		{
			yyVAL.str = "trigger"
		}
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1934
		{
			yyVAL.str = "trim"
		}
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1935
		{
			yyVAL.str = "true"
		}
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1936
		{
			yyVAL.str = "truncate"
		}
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1937
		{
			yyVAL.str = "trusted"
		}
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1938
		{
			yyVAL.str = "type"
		}
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1939
		{
			yyVAL.str = "types"
		}
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1940
		{
			yyVAL.str = "uescape"
		}
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1941
		{
			yyVAL.str = "unbounded"
		}
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1942
		{
			yyVAL.str = "uncommitted"
		}
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1943
		{
			yyVAL.str = "unconditional"
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1944
		{
			yyVAL.str = "unencrypted"
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1945
		{
			yyVAL.str = "unique"
		}
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1946
		{
			yyVAL.str = "unknown"
		}
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1947
		{
			yyVAL.str = "unlisten"
		}
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1948
		{
			yyVAL.str = "unlogged"
		}
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1949
		{
			yyVAL.str = "until"
		}
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1950
		{
			yyVAL.str = "update"
		}
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1951
		{
			yyVAL.str = "user"
		}
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1952
		{
			yyVAL.str = "using"
		}
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1953
		{
			yyVAL.str = "vacuum"
		}
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1954
		{
			yyVAL.str = "valid"
		}
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1955
		{
			yyVAL.str = "validate"
		}
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1956
		{
			yyVAL.str = "validator"
		}
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1957
		{
			yyVAL.str = "value"
		}
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1958
		{
			yyVAL.str = "values"
		}
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1959
		{
			yyVAL.str = "varchar"
		}
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1960
		{
			yyVAL.str = "variadic"
		}
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1961
		{
			yyVAL.str = "verbose"
		}
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1962
		{
			yyVAL.str = "version"
		}
	case 1077:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1963
		{
			yyVAL.str = "view"
		}
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1964
		{
			yyVAL.str = "views"
		}
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1965
		{
			yyVAL.str = "volatile"
		}
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1966
		{
			yyVAL.str = "when"
		}
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1967
		{
			yyVAL.str = "whitespace"
		}
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1968
		{
			yyVAL.str = "work"
		}
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1969
		{
			yyVAL.str = "wrapper"
		}
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1970
		{
			yyVAL.str = "write"
		}
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1971
		{
			yyVAL.str = "xml"
		}
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1972
		{
			yyVAL.str = "xmlattributes"
		}
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1973
		{
			yyVAL.str = "xmlconcat"
		}
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1974
		{
			yyVAL.str = "xmlelement"
		}
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1975
		{
			yyVAL.str = "xmlexists"
		}
	case 1090:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1976
		{
			yyVAL.str = "xmlforest"
		}
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1977
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1978
		{
			yyVAL.str = "xmlparse"
		}
	case 1093:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1979
		{
			yyVAL.str = "xmlpi"
		}
	case 1094:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1980
		{
			yyVAL.str = "xmlroot"
		}
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1981
		{
			yyVAL.str = "xmlserialize"
		}
	case 1096:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1982
		{
			yyVAL.str = "xmltable"
		}
	case 1097:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1983
		{
			yyVAL.str = "yes"
		}
	case 1098:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1984
		{
			yyVAL.str = "zone"
		}
	case 1099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1999
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2001
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2005
		{
			collateClause := ast.NewCollateClause(yyDollar[3].list)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1102:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2011
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2016
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2021
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2026
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2031
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2036
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2041
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2046
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2051
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2056
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2061
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2066
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2071
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2076
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2081
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2086
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2091
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2095
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2099
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2103
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2107
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2111
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2115
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1125:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2120
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2127
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1127:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2132
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2139
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1129:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2144
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2151
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1131:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2156
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2163
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1133:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2170
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1134:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2177
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1135:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2184
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2191
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2195
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2199
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2203
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2207
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlaps"))
			leftList := yyDollar[1].list
			rightList := yyDollar[3].list
			combinedList := ast.NewNodeList()
			combinedList.Items = append(leftList.Items, rightList.Items...)
			yyVAL.node = ast.NewFuncCall(funcName, combinedList, 0)
		}
	case 1141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2216
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_TRUE)
		}
	case 1142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2220
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_TRUE)
		}
	case 1143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2224
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_FALSE)
		}
	case 1144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2228
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_FALSE)
		}
	case 1145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2232
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_UNKNOWN)
		}
	case 1146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2236
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_UNKNOWN)
		}
	case 1147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2240
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1148:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2245
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1149:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2250
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1150:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2255
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1151:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2260
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1152:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2265
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2270
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2275
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2280
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			sublink := ast.NewSubLink(subLinkType, yyDollar[4].stmt)
			sublink.Testexpr = yyDollar[1].node
			sublink.OperName = operName
			yyVAL.node = sublink
		}
	case 1156:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2289
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			if subLinkType == ast.ANY_SUBLINK {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ANY, operName, yyDollar[1].node, yyDollar[5].node, 0)
			} else {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ALL, operName, yyDollar[1].node, yyDollar[5].node, 0)
			}
		}
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2299
		{
			yylex.Error("UNIQUE predicate is not yet implemented")
		}
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2303
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
		}
	case 1159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2308
		{
			args := ast.NewNodeList(yyDollar[1].node.(ast.Expression))
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2314
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2320
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[3].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2327
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1163:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2334
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[4].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2342
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[3].ival)
			uniqueKeys := yyDollar[4].bval
			yyVAL.node = ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
		}
	case 1165:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2359
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[4].ival)
			uniqueKeys := yyDollar[5].bval
			jsonPredicate := ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(jsonPredicate))
		}
	case 1166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2378
		{
			yyVAL.node = ast.NewSetToDefault(0, 0, 0)
		}
	case 1167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2383
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2385
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2389
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2394
		{
			yyVAL.node = doNegate(yyDollar[2].node, 0)
		}
	case 1171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2398
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2403
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2408
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2413
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2418
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2423
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2428
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2433
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2438
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2443
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2448
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2453
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2458
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2462
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1185:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2466
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1186:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2471
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2476
		{
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1188:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2481
		{
			args := ast.NewNodeList(yyDollar[1].node)
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2488
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2489
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2491
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1192:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2500
		{
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewParenExpr(ast.NewA_Indirection(yyDollar[2].node, yyDollar[4].list, 0), 0)
			} else {
				yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
			}
		}
	case 1193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2507
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2508
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2510
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2514
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2519
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2523
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2527
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2531
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2537
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1202:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2543
		{
			exprList := yyDollar[3].list
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     exprList,
			}
			yyVAL.node = grouping
		}
	case 1203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2560
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2561
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2562
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2563
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2564
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2568
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2572
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2576
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2580
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2584
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2588
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2592
		{
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2596
		{
			// This is a bit constant per SQL99
			yyVAL.node = ast.NewA_Const(ast.NewBitString(yyDollar[1].str), 0)
		}
	case 1216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2601
		{
			// generic type 'literal' syntax
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1217:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2608
		{
			// generic syntax with a type modifier
			typeName := makeTypeNameFromNodeList(yyDollar[1].list)
			// For now, we'll skip the error checking for NamedArgExpr and ORDER BY
			// TODO: Add proper validation when needed
			typeName.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[6].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, typeName, 0)
		}
	case 1218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2618
		{
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, yyDollar[1].typnam, 0)
		}
	case 1219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2623
		{
			t := yyDollar[1].typnam
			t.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1220:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2630
		{
			t := yyDollar[1].typnam
			// INTERVAL_FULL_RANGE equivalent and precision
			fullRange := ast.NewInteger(ast.INTERVAL_FULL_RANGE)
			precision := ast.NewInteger(yyDollar[3].ival)
			t.Typmods = ast.NewNodeList(fullRange, precision)
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[5].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 1221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2641
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2644
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2647
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2648
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2649
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2653
		{
			yyVAL.typnam = makeTypeNameFromNodeList(ast.NewNodeList(ast.NewString("interval")))
		}
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2660
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR))
		}
	case 1228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2662
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MONTH))
		}
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2664
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY))
		}
	case 1230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2666
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR))
		}
	case 1231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2668
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_MINUTE))
		}
	case 1232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2670
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2672
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_YEAR | ast.INTERVAL_MASK_MONTH))
		}
	case 1234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2676
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR))
		}
	case 1235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2680
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2684
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_DAY | ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2695
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE))
		}
	case 1238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2699
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_HOUR | ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2710
		{
			// Modify first element of interval_second result
			result := yyDollar[3].list
			if len(result.Items) > 0 {
				if intNode, ok := result.Items[0].(*ast.Integer); ok {
					intNode.IVal = ast.INTERVAL_MASK_MINUTE | ast.INTERVAL_MASK_SECOND
				}
			}
			yyVAL.list = result
		}
	case 1240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2721
		{
			yyVAL.list = nil
		}
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2726
		{
			yyVAL.list = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_MASK_SECOND))
		}
	case 1242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2730
		{
			yyVAL.list = ast.NewNodeList(
				ast.NewInteger(ast.INTERVAL_MASK_SECOND),
				ast.NewInteger(yyDollar[3].ival), // precision
			)
		}
	case 1243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2740
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2744
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2754
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2758
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2764
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1248:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2765
		{
			yyVAL.node = nil
		}
	case 1249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2769
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2773
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2777
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1252:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2781
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2786
		{
			yyVAL.list = nil
		}
	case 1254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2788
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2800
		{
			funcCall := yyDollar[1].node.(*ast.FuncCall)

			// Apply within_group_clause if present
			if yyDollar[2].list != nil {
				// WITHIN GROUP (ORDER BY ...) - store the sort list
				funcCall.AggOrder = yyDollar[2].list
				funcCall.AggWithinGroup = true
			}

			// Apply filter_clause if present
			if yyDollar[3].node != nil {
				// FILTER (WHERE condition) - store the filter expression
				funcCall.AggFilter = yyDollar[3].node
			}

			// Apply over_clause if present (window functions)
			if yyDollar[4].windef != nil {
				funcCall.Over = yyDollar[4].windef
			}

			yyVAL.node = funcCall
		}
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2824
		{
			jsonAgg := yyDollar[1].node

			// Create or get the Constructor
			var constructor *ast.JsonAggConstructor

			// Handle the filter_clause and over_clause by setting them in the Constructor
			switch jsonFunc := jsonAgg.(type) {
			case *ast.JsonObjectAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			case *ast.JsonArrayAgg:
				if jsonFunc.Constructor == nil {
					jsonFunc.Constructor = ast.NewJsonAggConstructor(nil)
				}
				constructor = jsonFunc.Constructor
			}

			// Set filter and over clauses outside the switch (DRY)
			if constructor != nil {
				if yyDollar[2].node != nil {
					constructor.AggFilter = yyDollar[2].node.(ast.Node)
				}
				if yyDollar[3].windef != nil {
					constructor.Over = yyDollar[3].windef
				}
			}

			yyVAL.node = jsonAgg
		}
	case 1257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2857
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1258:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2863
		{
			// SystemFuncName("pg_collation_for")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("pg_collation_for"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2871
		{
			// makeSQLValueFunction(SVFOP_CURRENT_DATE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_DATE, 0, -1, 0)
		}
	case 1260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2876
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME, 0, -1, 0)
		}
	case 1261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2881
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2886
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP, 0, -1, 0)
		}
	case 1263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2891
		{
			// makeSQLValueFunction(SVFOP_CURRENT_TIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_TIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2896
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME, 0, -1, 0)
		}
	case 1265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2901
		{
			// makeSQLValueFunction(SVFOP_LOCALTIME_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIME_N, 0, yyDollar[3].ival, 0)
		}
	case 1266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2906
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP, 0, -1, 0)
		}
	case 1267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2911
		{
			// makeSQLValueFunction(SVFOP_LOCALTIMESTAMP_N, $3, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_LOCALTIMESTAMP_N, 0, yyDollar[3].ival, 0)
		}
	case 1268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2916
		{
			// makeSQLValueFunction(SVFOP_CURRENT_ROLE, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_ROLE, 0, -1, 0)
		}
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2921
		{
			// makeSQLValueFunction(SVFOP_CURRENT_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_USER, 0, -1, 0)
		}
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2926
		{
			// makeSQLValueFunction(SVFOP_SESSION_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_SESSION_USER, 0, -1, 0)
		}
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2931
		{
			// SystemFuncName("system_user")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("system_user"))
			funcCall := ast.NewFuncCall(funcName, nil, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2939
		{
			// makeSQLValueFunction(SVFOP_USER, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_USER, 0, -1, 0)
		}
	case 1273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2944
		{
			// makeSQLValueFunction(SVFOP_CURRENT_CATALOG, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_CATALOG, 0, -1, 0)
		}
	case 1274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2949
		{
			// makeSQLValueFunction(SVFOP_CURRENT_SCHEMA, -1, @1)
			yyVAL.node = ast.NewSQLValueFunction(ast.SVFOP_CURRENT_SCHEMA, 0, -1, 0)
		}
	case 1275:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2954
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[3].node, yyDollar[5].typnam, 0)
		}
	case 1276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2958
		{
			// SystemFuncName("extract")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("extract"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2966
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			funcCall := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node), 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1278:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2974
		{
			// SystemFuncName("normalize")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("normalize"))
			args := ast.NewNodeList(yyDollar[3].node)
			args.Items = append(args.Items, ast.NewA_Const(ast.NewString(yyDollar[5].str), -1))
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2984
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2992
		{
			// SystemFuncName("overlay")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlay"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3000
		{
			// SystemFuncName("position")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("position"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3008
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3016
		{
			// SystemFuncName("substring")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("substring"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1284:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3024
		{
			// SystemFuncName("treat")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), llast(yyDollar[5].typnam.Names))
			args := ast.NewNodeList(yyDollar[3].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1285:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3033
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1286:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3041
		{
			// SystemFuncName("ltrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("ltrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1287:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3049
		{
			// SystemFuncName("rtrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("rtrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[4].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3057
		{
			// SystemFuncName("btrim")
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("btrim"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1289:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3065
		{
			// makeSimpleA_Expr(AEXPR_NULLIF, "=", $3, $5, @1)
			operName := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NULLIF, operName, yyDollar[3].node, yyDollar[5].node, 0)
		}
	case 1290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3071
		{
			// CoalesceExpr *c = makeNode(CoalesceExpr); c->args = $3; c->location = @1
			yyVAL.node = ast.NewCoalesceExpr(0, yyDollar[3].list)
		}
	case 1291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3076
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_GREATEST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_GREATEST, yyDollar[3].list, 0)
		}
	case 1292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3081
		{
			// MinMaxExpr *v = makeNode(MinMaxExpr); v->args = $3; v->op = IS_LEAST; v->location = @1
			yyVAL.node = ast.NewMinMaxExpr(0, 0, 0, ast.IS_LEAST, yyDollar[3].list, 0)
		}
	case 1293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3086
		{
			// makeXmlExpr(IS_XMLCONCAT, NULL, NIL, $3, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLCONCAT, "", nil, nil, yyDollar[3].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1294:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3091
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1295:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3096
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1296:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3101
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, NIL, $6, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, nil, nil, yyDollar[6].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1297:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3106
		{
			// makeXmlExpr(IS_XMLELEMENT, $4, $6, $8, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLELEMENT, yyDollar[4].str, yyDollar[6].list, nil, yyDollar[8].list, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3111
		{
			// makeXmlExpr(IS_XMLFOREST, NULL, $3, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLFOREST, "", yyDollar[3].list, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1299:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3116
		{
			// makeXmlExpr(IS_XMLPARSE, NULL, NIL, list_make2($4, makeBoolAConst($5, -1)), @1)
			// x->xmloption = $3
			wsOption := ast.NewA_Const(ast.NewBoolean(yyDollar[5].bval), -1)
			args := ast.NewNodeList(yyDollar[4].node, wsOption)
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPARSE, "", nil, nil, args, xmlOption, false, 0, -1, 0)
		}
	case 1300:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3125
		{
			// SystemFuncName("xmlexists") - xmlexists(A PASSING [BY REF] B [BY REF]) is converted to xmlexists(A, B)
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("xmlexists"))
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[4].node)
			funcCall := ast.NewFuncCall(funcName, args, 0)
			funcCall.Funcformat = ast.COERCE_SQL_SYNTAX
			yyVAL.node = funcCall
		}
	case 1301:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3134
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, NIL, @1)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, nil, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1302:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3139
		{
			// makeXmlExpr(IS_XMLPI, $4, NIL, list_make1($6), @1)
			args := ast.NewNodeList(yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLPI, yyDollar[4].str, nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1303:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3145
		{
			// makeXmlExpr(IS_XMLROOT, NULL, NIL, list_make3(...), @1)
			args := ast.NewNodeList(yyDollar[3].node, yyDollar[5].node, yyDollar[6].node)
			yyVAL.node = ast.NewXmlExpr(ast.IS_XMLROOT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, -1, 0)
		}
	case 1304:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3151
		{
			/* Support for legacy (non-standard) json_object() */
			funcName := ast.NewNodeList(ast.NewString("json_object"))
			funcCall := ast.NewFuncCall(funcName, yyDollar[3].list, 0)
			funcCall.Funcformat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = funcCall
		}
	case 1305:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3162
		{
			n := ast.NewJsonObjectConstructor(yyDollar[3].list, yyDollar[4].bval, yyDollar[5].bval)
			if yyDollar[6].node != nil {
				n.Output = yyDollar[6].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3170
		{
			n := ast.NewJsonObjectConstructor(nil, false, false)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1307:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3182
		{
			n := ast.NewJsonArrayConstructor(yyDollar[3].list, yyDollar[4].bval)
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1308:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3194
		{
			n := ast.NewJsonArrayQueryConstructor(yyDollar[3].stmt, true) /* XXX: absent_on_null = true */
			if yyDollar[4].node != nil {
				n.Format = yyDollar[4].node.(*ast.JsonFormat)
			}
			if yyDollar[5].node != nil {
				n.Output = yyDollar[5].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3207
		{
			n := ast.NewJsonArrayConstructor(nil, true)
			if yyDollar[3].node != nil {
				n.Output = yyDollar[3].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1310:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3215
		{
			n := ast.NewJsonParseExpr(yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[4].bval)
			n.Output = nil
			yyVAL.node = n
		}
	case 1311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3221
		{
			n := ast.NewJsonScalarExpr(yyDollar[3].node.(ast.Expr))
			n.Output = nil
			yyVAL.node = n
		}
	case 1312:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3227
		{
			n := ast.NewJsonSerializeExpr(yyDollar[3].node.(*ast.JsonValueExpr))
			if yyDollar[4].node != nil {
				n.Output = yyDollar[4].node.(*ast.JsonOutput)
			}
			yyVAL.node = n
		}
	case 1313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3235
		{
			m := ast.NewMergeSupportFunc(ast.TEXTOID, ast.InvalidOid, 0)
			yyVAL.node = m
		}
	case 1314:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:3246
		{
			n := ast.NewJsonFuncExpr(ast.JSON_QUERY_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			n.Wrapper = ast.JsonWrapper(yyDollar[8].ival)
			n.Quotes = ast.JsonQuotes(yyDollar[9].ival)
			if yyDollar[10].node != nil {
				behaviors := yyDollar[10].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1315:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3271
		{
			n := ast.NewJsonFuncExpr(ast.JSON_EXISTS_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			n.Output = nil
			if yyDollar[7].node != nil {
				n.OnError = yyDollar[7].node.(*ast.JsonBehavior)
			}
			yyVAL.node = n
		}
	case 1316:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3287
		{
			n := ast.NewJsonFuncExpr(ast.JSON_VALUE_OP, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].node)
			if yyDollar[6].node != nil {
				n.Passing = yyDollar[6].node.(*ast.NodeList)
			}
			if yyDollar[7].node != nil {
				n.Output = yyDollar[7].node.(*ast.JsonOutput)
			}
			if yyDollar[8].node != nil {
				behaviors := yyDollar[8].node.(*ast.NodeList)
				if linitial(behaviors) != nil {
					n.OnEmpty = linitial(behaviors).(*ast.JsonBehavior)
				}
				if lsecond(behaviors) != nil {
					n.OnError = lsecond(behaviors).(*ast.JsonBehavior)
				}
			}
			yyVAL.node = n
		}
	case 1317:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3307
		{
			// XmlSerialize node - n->xmloption = $3; n->expr = $4; n->typeName = $6; n->indent = $7;
			xmlOption := ast.XmlOptionType(yyDollar[3].ival)
			yyVAL.node = ast.NewXmlSerialize(xmlOption, yyDollar[4].node, yyDollar[6].typnam, yyDollar[7].bval, 0)
		}
	case 1318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3317
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3321
		{
			yyVAL.list = nil
		}
	case 1320:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3328
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1321:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3332
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3336
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node)
		}
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3340
		{
			sysTypeName := &ast.TypeName{
				Names:   ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("int4")),
				Typemod: -1,
			}
			tc := ast.NewTypeCast(yyDollar[3].node, sysTypeName, -1)
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, ast.NewInteger(1), tc)
		}
	case 1324:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3349
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3356
		{
			yyDollar[3].list.Append(yyDollar[1].node)
			yyVAL.list = yyDollar[3].list
		}
	case 1326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3361
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3365
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3372
		{
			// list_make2(makeStringConst($1, @1), $3)
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str), yyDollar[3].node)
		}
	case 1329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3382
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3383
		{
			yyVAL.str = "year"
		}
	case 1331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3384
		{
			yyVAL.str = "month"
		}
	case 1332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3385
		{
			yyVAL.str = "day"
		}
	case 1333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3386
		{
			yyVAL.str = "hour"
		}
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3387
		{
			yyVAL.str = "minute"
		}
	case 1335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3388
		{
			yyVAL.str = "second"
		}
	case 1336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3389
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1337:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3394
		{
			/* overlay(A PLACING B FROM C FOR D) is converted to overlay(A, B, C, D) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 1338:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3399
		{
			/* overlay(A PLACING B FROM C) is converted to overlay(A, B, C) */
			yyVAL.list = ast.NewNodeList(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3407
		{
			yyVAL.list = ast.NewNodeList(yyDollar[3].node, yyDollar[1].node)
		}
	case 1340:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3410
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3415
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3419
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3427
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3431
		{
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3436
		{
			yyVAL.bval = true
		}
	case 1346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3437
		{
			yyVAL.bval = false
		}
	case 1347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3438
		{
			yyVAL.bval = false
		}
	case 1348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3441
		{
			yyVAL.bval = true
		}
	case 1349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3442
		{
			yyVAL.bval = false
		}
	case 1350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3443
		{
			yyVAL.bval = false
		}
	case 1351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3448
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3452
		{
			yyVAL.node = ast.NewA_Const(ast.NewNull(), 0)
		}
	case 1353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3459
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_YES)), 0)
		}
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3463
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO)), 0)
		}
	case 1355:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3467
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_NO_VALUE)), 0)
		}
	case 1356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3471
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(int(ast.XML_STANDALONE_OMITTED)), 0)
		}
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3478
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3479
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3480
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3484
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3488
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3499
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1363:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3503
		{
			// Special case for aggregates like COUNT(*) - set AggStar to true
			funcCall := ast.NewFuncCall(yyDollar[1].list, nil, 0)
			funcCall.AggStar = true
			yyVAL.node = funcCall
		}
	case 1364:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3510
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1365:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3516
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1366:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:3522
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1367:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3530
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1368:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3536
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3544
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3548
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3555
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3559
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3563
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1374:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3570
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3575
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3576
		{
			yyVAL.node = nil
		}
	case 1377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3580
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3582
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1379:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3590
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3596
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3597
		{
			yyVAL.node = nil
		}
	case 1382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3602
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3606
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3610
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3615
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3617
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1387:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3624
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3625
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1389:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3627
		{
			nodeList := yyDollar[2].list
			nodeList.Append(yyDollar[4].node)
			yyVAL.list = nodeList
		}
	case 1390:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3634
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3635
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3639
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3645
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3646
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3647
		{
			yyVAL.ival = int(ast.ALL_SUBLINK)
		}
	case 1396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3652
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1397:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3656
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3660
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~"))
		}
	case 1399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3664
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~"))
		}
	case 1400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3668
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~*"))
		}
	case 1401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3672
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~*"))
		}
	case 1402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3678
		{
			yyVAL.str = "NFC"
		}
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3679
		{
			yyVAL.str = "NFD"
		}
	case 1404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3680
		{
			yyVAL.str = "NFKC"
		}
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3681
		{
			yyVAL.str = "NFKD"
		}
	case 1406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3685
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3686
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3687
		{
			yyVAL.ival = int(ast.JS_TYPE_ARRAY)
		}
	case 1409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3688
		{
			yyVAL.ival = int(ast.JS_TYPE_OBJECT)
		}
	case 1410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3689
		{
			yyVAL.ival = int(ast.JS_TYPE_SCALAR)
		}
	case 1411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3693
		{
			yyVAL.bval = true
		}
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3694
		{
			yyVAL.bval = true
		}
	case 1413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3695
		{
			yyVAL.bval = false
		}
	case 1414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3696
		{
			yyVAL.bval = false
		}
	case 1415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3697
		{
			yyVAL.bval = false
		}
	case 1416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3702
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3706
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3715
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.ArrayBounds = yyDollar[2].list
		}
	case 1419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3720
		{
			yyVAL.typnam = yyDollar[2].typnam
			yyVAL.typnam.ArrayBounds = yyDollar[3].list
			yyVAL.typnam.Setof = true
		}
	case 1420:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3726
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(yyDollar[4].ival))
		}
	case 1421:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3731
		{
			yyVAL.typnam = yyDollar[2].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(yyDollar[5].ival))
			yyVAL.typnam.Setof = true
		}
	case 1422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3737
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(-1))
		}
	case 1423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3742
		{
			yyVAL.typnam = yyDollar[2].typnam
			yyVAL.typnam.ArrayBounds = ast.NewNodeList(ast.NewInteger(-1))
			yyVAL.typnam.Setof = true
		}
	case 1424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3751
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList()
			} else {
				yyVAL.list = yyDollar[1].list
			}
			yyVAL.list.Append(ast.NewInteger(-1))
		}
	case 1425:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3760
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList()
			} else {
				yyVAL.list = yyDollar[1].list
			}
			yyVAL.list.Append(ast.NewInteger(yyDollar[3].ival))
		}
	case 1426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3769
		{
			yyVAL.list = nil
		}
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3774
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3775
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3776
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3777
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3778
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3780
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3785
		{
			yyVAL.typnam = yyDollar[1].typnam
			yyVAL.typnam.Typmods = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_FULL_RANGE), ast.NewInteger(yyDollar[3].ival))
		}
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3789
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3792
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3793
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3794
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3797
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3800
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3803
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3807
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3811
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3818
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3822
		{
			yyVAL.list = nil
		}
	case 1445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3828
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3834
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3845
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3849
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3853
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3857
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3861
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3865
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3869
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3873
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3878
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3883
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
			yyVAL.typnam.Typmods = yyDollar[2].list
		}
	case 1457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3888
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3894
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3898
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3904
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3908
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3914
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3918
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for BitWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3926
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3930
		{
			yyVAL.typnam = yyDollar[1].typnam
			// Set typmods to nil for CharacterWithoutLength in const context
			yyVAL.typnam.Typmods = nil
		}
	case 1466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3938
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3946
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3954
		{
			yyVAL.str = "varchar"
		}
	case 1469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3958
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3966
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3974
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3984
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3995
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1474:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4009
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			tn := makeTypeNameFromString(typeName)
			tn.Typmods = yyDollar[4].list
			yyVAL.typnam = tn
		}
	case 1475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4023
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1476:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4035
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			tn := makeTypeNameFromString(typeName)
			tn.Typmods = ast.NewNodeList(ast.NewInteger(yyDollar[3].ival))
			yyVAL.typnam = tn
		}
	case 1477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4047
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1478:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4057
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			tn := makeTypeNameFromString(typeName)
			tn.Typmods = ast.NewNodeList(ast.NewInteger(yyDollar[3].ival))
			yyVAL.typnam = tn
		}
	case 1479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4069
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4081
		{
			yyVAL.typnam = makeTypeNameFromString("json")
		}
	case 1481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4086
		{
			yyVAL.ival = 1
		}
	case 1482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4087
		{
			yyVAL.ival = 0
		}
	case 1483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4088
		{
			yyVAL.ival = 0
		}
	case 1484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4091
		{
			yyVAL.ival = 1
		}
	case 1485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4092
		{
			yyVAL.ival = 0
		}
	case 1486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4096
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4106
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4113
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4117
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4124
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4128
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4133
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4134
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4137
		{
			yyVAL.str = "+"
		}
	case 1495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4138
		{
			yyVAL.str = "-"
		}
	case 1496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4139
		{
			yyVAL.str = "*"
		}
	case 1497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4140
		{
			yyVAL.str = "/"
		}
	case 1498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4141
		{
			yyVAL.str = "%"
		}
	case 1499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4142
		{
			yyVAL.str = "^"
		}
	case 1500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4143
		{
			yyVAL.str = "<"
		}
	case 1501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4144
		{
			yyVAL.str = ">"
		}
	case 1502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4145
		{
			yyVAL.str = "="
		}
	case 1503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4146
		{
			yyVAL.str = "<="
		}
	case 1504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4147
		{
			yyVAL.str = ">="
		}
	case 1505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4148
		{
			yyVAL.str = "<>"
		}
	case 1506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4152
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4156
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4165
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4166
		{
			yyVAL.list = nil
		}
	case 1510:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4171
		{
			// WITHIN GROUP (ORDER BY ...) for ordered-set aggregates
			yyVAL.list = yyDollar[4].list
		}
	case 1511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4175
		{
			yyVAL.list = nil
		}
	case 1512:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4180
		{
			// FILTER (WHERE condition) for aggregate filtering
			yyVAL.node = yyDollar[4].node
		}
	case 1513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4184
		{
			yyVAL.node = nil
		}
	case 1514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4188
		{
			yyVAL.ival = 0
		}
	case 1515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4189
		{
			yyVAL.ival = 0
		}
	case 1516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4193
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4198
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4213
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4214
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4218
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4219
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4228
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4229
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4238
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4240
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			// Use NodeList directly for SortClause
			selectStmt.SortClause = yyDollar[2].list
			yyVAL.stmt = selectStmt
		}
	case 1526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4247
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			selectStmt.LockingClause = yyDollar[3].list // Set the locking clause
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4259
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			if yyDollar[3].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[3].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[3].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[3].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4271
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4277
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			yyVAL.stmt = selectStmt
		}
	case 1530:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4284
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			if yyDollar[5].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[5].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[5].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[5].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1531:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4297
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[5].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4316
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4317
		{
			yyVAL.list = nil
		}
	case 1534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4321
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4322
		{
			yyVAL.list = nil
		}
	case 1536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4327
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4331
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4339
		{
			lockingClause := &ast.LockingClause{
				BaseNode:   ast.BaseNode{Tag: ast.T_LockingClause},
				Strength:   ast.LockClauseStrength(yyDollar[1].ival),
				LockedRels: yyDollar[2].list, // Store as *NodeList directly
				WaitPolicy: ast.LockWaitPolicy(yyDollar[3].ival),
			}
			yyVAL.node = lockingClause
		}
	case 1539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4351
		{
			yyVAL.ival = int(ast.LCS_FORUPDATE)
		}
	case 1540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4352
		{
			yyVAL.ival = int(ast.LCS_FORNOKEYUPDATE)
		}
	case 1541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4353
		{
			yyVAL.ival = int(ast.LCS_FORSHARE)
		}
	case 1542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4354
		{
			yyVAL.ival = int(ast.LCS_FORKEYSHARE)
		}
	case 1543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4358
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4359
		{
			yyVAL.list = nil
		}
	case 1545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4364
		{
			yyVAL.ival = int(ast.LockWaitError)
		}
	case 1546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4365
		{
			yyVAL.ival = int(ast.LockWaitSkip)
		}
	case 1547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4366
		{
			yyVAL.ival = int(ast.LockWaitBlock)
		}
	case 1548:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4377
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1549:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4396
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4414
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4424
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4429
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_UNION, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4434
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_INTERSECT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4439
		{
			all := yyDollar[3].setquant == ast.SET_QUANTIFIER_ALL
			yyVAL.stmt = makeSetOp(ast.SETOP_EXCEPT, all, yyDollar[1].stmt, yyDollar[4].stmt)
		}
	case 1555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4450
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4451
		{
			yyVAL.list = nil
		}
	case 1557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4455
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4456
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4461
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4465
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4470
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4475
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4486
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4487
		{
			yyVAL.list = nil
		}
	case 1565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4491
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4492
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4501
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4509
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			rangeTableSample := yyDollar[3].node.(*ast.RangeTableSample)
			rangeTableSample.Relation = rangeVar
			yyVAL.node = rangeTableSample
		}
	case 1569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4519
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4530
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4541
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4545
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4551
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			funcAliasList := yyDollar[2].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4569
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			funcAliasList := yyDollar[3].list
			if funcAliasList != nil && funcAliasList.Len() >= 2 {
				// func_alias_clause returns [alias, coldeflist]
				if alias := linitial(funcAliasList); alias != nil {
					rangeFunc.Alias = alias.(*ast.Alias)
				}
				if coldeflist := lsecond(funcAliasList); coldeflist != nil {
					// ColDefList is now *NodeList, no conversion needed
					if nodeList, ok := coldeflist.(*ast.NodeList); ok && nodeList != nil {
						rangeFunc.ColDefList = nodeList
					}
				}
			}
			yyVAL.node = rangeFunc
		}
	case 1575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4588
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4596
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4605
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4613
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4625
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4631
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4638
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4644
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4650
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4660
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4664
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4670
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4687
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4691
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1589:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4700
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4726
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1591:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4752
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1592:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4760
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4770
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4771
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4772
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4773
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4778
		{
			yyVAL.ival = 1
		}
	case 1598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4779
		{
			yyVAL.ival = 0
		}
	case 1599:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4789
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4800
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4811
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4815
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4819
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4825
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4826
		{
			yyVAL.with = nil
		}
	case 1606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4831
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4835
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1608:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4843
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4871
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4872
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4873
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1612:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4878
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1613:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4884
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4890
		{
			yyVAL.node = nil
		}
	case 1615:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4897
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1616:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4906
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4914
		{
			yyVAL.node = nil
		}
	case 1618:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4925
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = ast.NewNodeList(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1619:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4933
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists.Append(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4947
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4948
		{
			yyVAL.node = nil
		}
	case 1622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4956
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1623:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4958
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4962
		{
			yyVAL.node = nil
		}
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4966
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4974
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4975
		{
			yyVAL.alias = nil
		}
	case 1628:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4980
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4985
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1630:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4989
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4994
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5005
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].alias, nil)
		}
	case 1633:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5009
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[3].list)
		}
	case 1634:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5013
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[4].list)
		}
	case 1635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5018
		{
			alias := ast.NewAlias(yyDollar[1].str, nil)
			yyVAL.list = ast.NewNodeList(alias, yyDollar[3].list)
		}
	case 1636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5023
		{
			yyVAL.list = ast.NewNodeList(nil, nil)
		}
	case 1637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5031
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5035
		{
			yyVAL.alias = nil
		}
	case 1639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5043
		{
			yyVAL.ival = 1
		}
	case 1640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5044
		{
			yyVAL.ival = 0
		}
	case 1641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5048
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1642:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5049
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5053
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1644:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5054
		{
			yyVAL.list = nil
		}
	case 1645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5064
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].node.(*ast.RangeVar), nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5067
		{
			yyVAL.into = nil
		}
	case 1647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5078
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1648:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5087
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5097
		{
			yyVAL.ival = 1
		}
	case 1650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5098
		{
			yyVAL.ival = 0
		}
	case 1651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5104
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5108
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5115
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1654:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5124
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1655:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5125
		{
			yyVAL.list = nil
		}
	case 1656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5135
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5139
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5151
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5164
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1660:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5165
		{
			yyVAL.list = nil
		}
	case 1661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5171
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5175
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5184
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5195
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1665:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5200
		{
			yyVAL.node = nil
		}
	case 1666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5205
		{
			yyVAL.str = "BY REF"
		}
	case 1667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5206
		{
			yyVAL.str = "BY VALUE"
		}
	case 1668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5212
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5216
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5220
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1671:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5224
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5232
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5236
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5244
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5249
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1676:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5258
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1677:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:5266
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5277
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5281
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5290
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5295
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5300
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5310
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5314
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5323
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5327
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5331
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5335
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5339
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1690:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:5352
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5376
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5387
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5388
		{
			yyVAL.node = nil
		}
	case 1694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5393
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1695:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5394
		{
			yyVAL.node = nil
		}
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5398
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5399
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5404
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5410
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5411
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5417
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5421
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5433
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5437
		{
			yyVAL.node = ast.NewJsonKeyValue(yyDollar[1].node.(ast.Expr), yyDollar[3].node.(*ast.JsonValueExpr))
		}
	case 1705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5444
		{
			yyVAL.bval = false
		}
	case 1706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5445
		{
			yyVAL.bval = true
		}
	case 1707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5446
		{
			yyVAL.bval = false
		}
	case 1708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5450
		{
			yyVAL.bval = false
		}
	case 1709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5451
		{
			yyVAL.bval = true
		}
	case 1710:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5452
		{
			yyVAL.bval = true
		}
	case 1711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5457
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5458
		{
			yyVAL.list = nil
		}
	case 1713:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5469
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)

			yyVAL.node = ast.NewJsonObjectAgg(constructor, yyDollar[3].node.(*ast.JsonKeyValue), yyDollar[4].bval, yyDollar[5].bval)
		}
	case 1714:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5484
		{
			var jsonOutput *ast.JsonOutput
			if yyDollar[6].node != nil {
				jsonOutput = yyDollar[6].node.(*ast.JsonOutput)
			}
			constructor := ast.NewJsonAggConstructor(jsonOutput)
			constructor.AggOrder = yyDollar[4].list
			yyVAL.node = ast.NewJsonArrayAgg(constructor, yyDollar[3].node.(*ast.JsonValueExpr), yyDollar[5].bval)
		}
	case 1715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5497
		{
			var jsonFormat *ast.JsonFormat
			if yyDollar[3].node != nil {
				jsonFormat = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonOutput(yyDollar[2].typnam, ast.NewJsonReturning(jsonFormat, 0, 0))
		}
	case 1716:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5504
		{
			yyVAL.node = nil
		}
	case 1717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5510
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5518
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5529
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5530
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5531
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5532
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5533
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5534
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5535
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5536
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5541
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1728:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5545
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1729:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5549
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1730:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5553
		{
			yyVAL.node = nil
		}
	case 1731:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5558
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1732:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5559
		{
			yyVAL.node = nil
		}
	case 1733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5564
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5565
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5566
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5567
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1737:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5568
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1738:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5569
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1739:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5570
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5571
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1741:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5572
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1742:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5577
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1743:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5578
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1744:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5579
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1745:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5580
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1746:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5581
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1747:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5587
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1748:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5607
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5617
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1750:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5618
		{
			yyVAL.node = nil
		}
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5623
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1752:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5624
		{
			yyVAL.node = nil
		}
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5630
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5634
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1755:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5643
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1756:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5652
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1757:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5666
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1758:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5680
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1759:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5691
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1760:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5700
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1761:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5711
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1762:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5712
		{
			yyVAL.node = nil
		}
	case 1763:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5728
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5740
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5744
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5753
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1767:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5759
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1768:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5766
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1769:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5773
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5781
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5790
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5791
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5796
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1774:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5800
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5808
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1776:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5820
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5833
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1778:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5837
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1779:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5848
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1780:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5854
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5874
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5880
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1783:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5881
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1784:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5891
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5903
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1786:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5907
		{
			yyVAL.list = nil
		}
	case 1787:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5922
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5939
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1789:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5943
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1790:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5954
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1791:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:5978
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6014
		{
			yyVAL.ival = 1
		}
	case 1793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6015
		{
			yyVAL.ival = 0
		}
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6019
		{
			yyVAL.ival = 1
		}
	case 1795:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6020
		{
			yyVAL.ival = 0
		}
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6024
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6025
		{
			yyVAL.str = ""
		}
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6026
		{
			yyVAL.str = ""
		}
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6031
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1800:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6034
		{
			yyVAL.node = nil
		}
	case 1801:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6039
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1802:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6042
		{
			yyVAL.node = nil
		}
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6046
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1804:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6047
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6052
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1806:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6060
		{
			yyVAL.list = nil
		}
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6067
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6071
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1809:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6075
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1810:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6079
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6083
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6087
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6091
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1814:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6095
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1815:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6099
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1816:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6103
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1817:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6107
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1818:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6111
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1819:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6115
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1820:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6119
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1821:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6123
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6131
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1823:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6135
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1824:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6142
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6148
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6149
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6150
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6151
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1829:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6152
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1830:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6153
		{
			yyVAL.node = nil
		}
	case 1831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6158
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1832:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6162
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6168
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6172
		{
			yyVAL.str = "true"
		}
	case 1835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6173
		{
			yyVAL.str = "false"
		}
	case 1836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6174
		{
			yyVAL.str = "on"
		}
	case 1837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6175
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6179
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1839:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6180
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1840:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6182
		{
			f := ast.NewFloat(yyDollar[2].str)
			doNegateFloat(f)
			yyVAL.node = f
		}
	case 1841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6187
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6191
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6192
		{
			yyVAL.node = nil
		}
	case 1844:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6196
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1845:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6197
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6198
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1847:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6199
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1848:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6200
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6201
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6202
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6203
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6207
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6208
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6209
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6213
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6214
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6215
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6216
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6217
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6222
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1861:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6227
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6234
		{
			yyVAL.bval = true
		}
	case 1863:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6235
		{
			yyVAL.bval = false
		}
	case 1864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6239
		{
			yyVAL.ival = 1
		}
	case 1865:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6240
		{
			yyVAL.ival = 0
		}
	case 1868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6256
		{
			yyVAL.node = nil
		}
	case 1869:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6258
		{
			yyVAL.node = nil
		}
	case 1870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6266
		{
			yyVAL.ival = 1
		}
	case 1871:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6267
		{
			yyVAL.ival = 0
		}
	case 1872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6271
		{
			yyVAL.ival = 1
		}
	case 1873:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6272
		{
			yyVAL.ival = 0
		}
	case 1874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6276
		{
			yyVAL.ival = 1
		}
	case 1875:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6277
		{
			yyVAL.ival = 0
		}
	case 1876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6281
		{
			yyVAL.ival = 1
		}
	case 1877:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6282
		{
			yyVAL.ival = 0
		}
	case 1878:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6291
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1879:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6297
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1880:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6303
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1881:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6309
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1882:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6315
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1883:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6323
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1884:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6324
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1885:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6328
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1886:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6329
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1887:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6333
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1888:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6334
		{
			yyVAL.node = nil
		}
	case 1889:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6339
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6354
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1891:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6363
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1892:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6370
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1893:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6377
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1894:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6390
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1895:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6403
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1896:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6412
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1897:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6427
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1898:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6437
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1899:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6445
		{
			yyVAL.onconflict = nil
		}
	case 1900:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6456
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1901:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6465
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1902:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6472
		{
			yyVAL.node = nil
		}
	case 1903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6483
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1904:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6487
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6494
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1906:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6498
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1907:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6505
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1908:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6510
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1909:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6515
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1910:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6523
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1911:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6534
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1912:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6548
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1913:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6549
		{
			yyVAL.list = nil
		}
	case 1914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6553
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6554
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1916:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6555
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1917:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6559
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1918:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6560
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1919:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6561
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1920:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6566
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1921:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6570
		{
			yyVAL.list = nil
		}
	case 1922:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6591
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1923:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:6607
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1924:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:6624
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1925:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:6640
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1926:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6657
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1927:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:6674
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6692
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6693
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1930:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6694
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1931:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6695
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1932:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6696
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1933:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6697
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6698
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1935:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6699
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6703
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1937:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6704
		{
			yyVAL.list = nil
		}
	case 1938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6709
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1939:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6714
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6721
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6722
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6723
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1943:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6728
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1944:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6735
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1945:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6739
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1946:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6743
		{
			yyVAL.ival = 0
		}
	case 1947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6749
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6750
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6751
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6752
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6753
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6754
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6755
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6756
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6757
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6758
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1957:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6763
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1958:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6764
		{
			yyVAL.str = "default"
		}
	case 1959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6768
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1960:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6769
		{
			yyVAL.str = ""
		}
	case 1961:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6773
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1962:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6774
		{
			yyVAL.str = "default"
		}
	case 1963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6778
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1964:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6779
		{
			yyVAL.str = ""
		}
	case 1965:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6784
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1966:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6785
		{
			yyVAL.list = nil
		}
	case 1967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6790
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1968:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6796
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6803
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6804
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1971:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6809
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 1972:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6815
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 1973:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6826
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 1974:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6855
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 1975:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6864
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 1976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6874
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 1977:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6883
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 1978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6890
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1979:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6894
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1980:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6902
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1981:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6903
		{
			yyVAL.list = nil
		}
	case 1982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6908
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1983:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6912
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1984:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6920
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6926
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6931
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1987:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6936
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			colDef.Constraints = yyDollar[6].list
			yyVAL.node = colDef
		}
	case 1988:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6948
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1989:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6953
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1990:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6960
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6965
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6966
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1993:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6968
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 1994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6981
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1995:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6986
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1996:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6991
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 1997:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6996
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 1998:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7004
		{
			yyVAL.bval = true
		}
	case 1999:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7005
		{
			yyVAL.bval = false
		}
	case 2000:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7006
		{
			yyVAL.bval = true
		}
	case 2001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7010
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 2002:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7011
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 2003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7016
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2004:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7018
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7023
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 2006:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7027
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 2007:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7031
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 2008:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7041
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 2009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7047
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2010:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7048
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2011:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7053
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 2012:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7057
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 2013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7061
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 2014:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7065
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 2015:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7069
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 2016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7073
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 2017:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7077
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 2018:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7081
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 2019:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7085
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 2020:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7089
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 2021:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7093
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 2022:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7097
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 2023:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7101
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 2024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7105
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 2025:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7109
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 2026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7113
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 2027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7119
		{
		}
	case 2028:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7120
		{
		}
	case 2029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7124
		{
		}
	case 2030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7125
		{
		}
	case 2031:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7126
		{
		}
	case 2032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7131
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 2033:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7138
		{
			yyVAL.bval = false
		}
	case 2034:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7142
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2035:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7143
		{
			yyVAL.list = nil
		}
	case 2036:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7148
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 2037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7152
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 2038:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7156
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 2039:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7165
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 2040:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7171
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 2041:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7177
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 2042:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7183
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 2043:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7200
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 2044:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7207
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 2045:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7217
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 2046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7222
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2047:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7227
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 2048:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7235
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2049:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7246
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 2050:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7257
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 2051:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7267
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 2052:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7278
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 2053:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7299
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 2054:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7313
		{
			yyVAL.bval = true
		}
	case 2055:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7314
		{
			yyVAL.bval = false
		}
	case 2056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7320
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2057:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7326
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2058:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7334
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 2059:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7339
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 2060:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7347
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2061:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7351
		{
			yyVAL.list = nil
		}
	case 2062:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7358
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 2063:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7362
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 2064:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7366
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2065:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7370
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 2066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7377
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7387
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2068:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7397
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 2069:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7404
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 2070:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7411
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 2071:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7426
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 2072:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7439
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 2073:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7446
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7453
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2075:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7460
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 2076:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7467
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2077:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7474
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 2078:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7483
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2079:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7484
		{
			yyVAL.list = nil
		}
	case 2080:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7488
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 2081:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7489
		{
			yyVAL.partspec = nil
		}
	case 2082:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7494
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 2083:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7502
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2084:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7507
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2085:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7515
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2086:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7522
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 2087:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7529
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 2088:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7538
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2089:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7539
		{
			yyVAL.str = ""
		}
	case 2090:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7543
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 2091:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7544
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 2092:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7545
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 2093:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7546
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 2094:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7550
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2095:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7551
		{
			yyVAL.str = ""
		}
	case 2096:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7555
		{
			yyVAL.str = yyDollar[4].str
		}
	case 2097:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7556
		{
			yyVAL.str = ""
		}
	case 2098:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7560
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2099:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:7573
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 2100:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:7588
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 2101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7604
		{
			yyVAL.bval = true
		}
	case 2102:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7605
		{
			yyVAL.bval = false
		}
	case 2103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7609
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7610
		{
			yyVAL.str = "btree"
		}
	case 2105:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7614
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7615
		{
			yyVAL.list = nil
		}
	case 2107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7620
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7625
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7633
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2110:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7634
		{
			yyVAL.list = nil
		}
	case 2111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7646
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2112:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7652
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7659
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2114:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7665
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7672
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 2116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7681
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 2117:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7687
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7694
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 2119:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7700
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2120:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7707
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 2121:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7713
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2122:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7720
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2123:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7726
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7733
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 2125:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7742
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 2126:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7752
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2127:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7759
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2128:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7767
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 2129:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:7774
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 2130:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7782
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 2131:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:7789
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 2132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7800
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7805
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7813
		{
			yyVAL.bval = true
		}
	case 2135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7814
		{
			yyVAL.bval = false
		}
	case 2136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7819
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].rolespec)
		}
	case 2137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7824
		{
			yyDollar[1].list.Append(yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 2138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7832
		{
			roleSpec := yyDollar[1].rolespec

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 2139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7863
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.rolespec = roleSpec
		}
	case 2140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7886
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 2141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7893
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 2142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7900
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 2143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7911
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2144:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7918
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7925
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2146:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7932
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7939
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 2148:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7944
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 2149:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7949
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 2150:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7954
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 2151:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7959
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 2152:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7964
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2153:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7971
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 2154:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7976
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 2155:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7983
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2156:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7988
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 2157:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7993
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2158:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7998
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 2159:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8003
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8013
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 2161:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8018
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2162:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8025
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2163:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8032
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8040
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2165:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8051
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 2166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8061
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 2167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8066
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 2168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8071
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 2169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8082
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 2170:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8087
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 2171:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8095
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 2172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8103
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 2173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8108
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 2174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8113
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 2175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8118
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 2176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8123
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 2177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8128
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 2178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8133
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 2179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8138
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 2180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8143
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 2181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8148
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 2182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8153
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 2183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8158
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 2184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8163
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 2185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8168
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 2186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8173
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 2187:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8178
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 2188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8183
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 2189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8188
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 2190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8193
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 2191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8198
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 2192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8204
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 2193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8209
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].rolespec
			yyVAL.node = cmd
		}
	case 2194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8216
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 2195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8221
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 2196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8226
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 2197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8231
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 2198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8236
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 2199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8241
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 2200:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8246
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 2201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8251
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 2202:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8256
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 2203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8260
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 2204:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8268
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2205:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8276
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2206:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8283
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8294
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 2208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8303
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8304
		{
			yyVAL.node = nil
		}
	case 2210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8308
		{
		}
	case 2211:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8309
		{
		}
	case 2212:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8320
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8333
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2214:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8346
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8359
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2216:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8372
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2217:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8387
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2218:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8402
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2219:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8415
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8428
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2221:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8441
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2222:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8454
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2223:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8467
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8483
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8489
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 2226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8495
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8504
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 2228:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8508
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 2229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8511
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8515
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8517
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 2232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8521
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 2233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8525
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 2234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8532
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 2235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8536
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 2236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8542
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8543
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8547
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 2239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8556
		{
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[2].stmt, nil)
		}
	case 2240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8560
		{
			options := ast.NewNodeList(ast.NewDefElem("analyze", nil))
			if yyDollar[3].ival != 0 {
				options.Append(ast.NewDefElem("verbose", nil))
			}
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[4].stmt, options)
		}
	case 2241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8568
		{
			options := ast.NewNodeList(ast.NewDefElem("verbose", nil))
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[3].stmt, options)
		}
	case 2242:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8573
		{
			yyVAL.stmt = ast.NewExplainStmt(yyDollar[5].stmt, yyDollar[3].list)
		}
	case 2243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8580
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8584
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8592
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 2246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8598
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8599
		{
			yyVAL.str = "analyze"
		}
	case 2248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8600
		{
			yyVAL.str = "format"
		}
	case 2249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8604
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8605
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2251:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8606
		{
			yyVAL.node = nil
		}
	case 2252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8610
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8611
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8612
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8613
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8614
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8615
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8616
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2259:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8625
		{
			var optionsList *ast.NodeList
			if yyDollar[2].ival != 0 || yyDollar[3].ival != 0 || yyDollar[4].ival != 0 || yyDollar[5].ival != 0 {
				optionsList = ast.NewNodeList()
				if yyDollar[2].ival != 0 {
					optionsList.Append(ast.NewDefElem("full", ast.NewBoolean(true)))
				}
				if yyDollar[3].ival != 0 {
					optionsList.Append(ast.NewDefElem("freeze", ast.NewBoolean(true)))
				}
				if yyDollar[4].ival != 0 {
					optionsList.Append(ast.NewDefElem("verbose", ast.NewBoolean(true)))
				}
				if yyDollar[5].ival != 0 {
					optionsList.Append(ast.NewDefElem("analyze", ast.NewBoolean(true)))
				}
			}

			yyVAL.stmt = ast.NewVacuumStmt(optionsList, yyDollar[6].list)
		}
	case 2260:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8646
		{
			yyVAL.stmt = ast.NewVacuumStmt(yyDollar[3].list, yyDollar[5].list)
		}
	case 2261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8653
		{
			var optionsList *ast.NodeList
			if yyDollar[2].ival != 0 {
				optionsList = ast.NewNodeList(ast.NewDefElem("verbose", ast.NewBoolean(true)))
			}

			yyVAL.stmt = ast.NewAnalyzeStmt(optionsList, yyDollar[3].list)
		}
	case 2262:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8662
		{
			yyVAL.stmt = ast.NewAnalyzeStmt(yyDollar[3].list, yyDollar[5].list)
		}
	case 2263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8668
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2264:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8669
		{
			yyVAL.list = nil
		}
	case 2265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8674
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].vacrel)
		}
	case 2266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8678
		{
			yyDollar[1].list.Append(yyDollar[3].vacrel)
			yyVAL.list = yyDollar[1].list
		}
	case 2267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8686
		{
			yyVAL.vacrel = ast.NewVacuumRelation(yyDollar[1].rangevar, yyDollar[2].list)
		}
	case 2268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8692
		{
			yyVAL.str = "analyze"
		}
	case 2269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8693
		{
			yyVAL.str = "analyse"
		}
	case 2270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8702
		{
			yyVAL.stmt = ast.NewVariableShowStmt(yyDollar[2].str)
		}
	case 2271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8706
		{
			yyVAL.stmt = ast.NewVariableShowStmt("timezone")
		}
	case 2272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8710
		{
			yyVAL.stmt = ast.NewVariableShowStmt("transaction_isolation")
		}
	case 2273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8714
		{
			yyVAL.stmt = ast.NewVariableShowStmt("session_authorization")
		}
	case 2274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8718
		{
			yyVAL.stmt = ast.NewVariableShowStmt("all")
		}
	case 2275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8729
		{
			yyVAL.stmt = ast.NewAlterSystemStmt(yyDollar[4].vsetstmt)
		}
	case 2276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8733
		{
			yyVAL.stmt = ast.NewAlterSystemStmt(yyDollar[4].vsetstmt)
		}
	case 2277:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8744
		{
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[5].rangevar, yyDollar[6].str, yyDollar[3].list)
		}
	case 2278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8748
		{
			yyVAL.stmt = ast.NewClusterStmt(nil, "", yyDollar[3].list)
		}
	case 2279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8752
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[3].rangevar, yyDollar[4].str, params)
		}
	case 2280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8761
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(nil, "", params)
		}
	case 2281:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8770
		{
			var params *ast.NodeList
			if yyDollar[2].ival != 0 {
				verboseDefElem := ast.NewDefElem("verbose", nil)
				params = ast.NewNodeList(verboseDefElem)
			}
			yyVAL.stmt = ast.NewClusterStmt(yyDollar[5].rangevar, yyDollar[3].str, params)
		}
	case 2282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8781
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2283:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8782
		{
			yyVAL.str = ""
		}
	case 2284:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8791
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.ReindexObjectType(yyDollar[3].ival), yyDollar[5].rangevar, "", params)
		}
	case 2285:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8804
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.REINDEX_OBJECT_SCHEMA, nil, yyDollar[5].str, params)
		}
	case 2286:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8817
		{
			params := yyDollar[2].list
			if yyDollar[4].bval {
				concurrentlyDefElem := ast.NewDefElem("concurrently", nil)
				if params == nil {
					params = ast.NewNodeList(concurrentlyDefElem)
				} else {
					params.Append(concurrentlyDefElem)
				}
			}
			yyVAL.stmt = ast.NewReindexStmt(ast.ReindexObjectType(yyDollar[3].ival), nil, yyDollar[5].str, params)
		}
	case 2287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8832
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_INDEX)
		}
	case 2288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8833
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_TABLE)
		}
	case 2289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8837
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_SYSTEM)
		}
	case 2290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8838
		{
			yyVAL.ival = int(ast.REINDEX_OBJECT_DATABASE)
		}
	case 2291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8842
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8843
		{
			yyVAL.list = nil
		}
	case 2293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8852
		{
			yyVAL.stmt = ast.NewCheckPointStmt()
		}
	case 2294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8863
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_ALL)
		}
	case 2295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8867
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_TEMP)
		}
	case 2296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8871
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_TEMP)
		}
	case 2297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8875
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_PLANS)
		}
	case 2298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8879
		{
			yyVAL.stmt = ast.NewDiscardStmt(ast.DISCARD_SEQUENCES)
		}
	case 2299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8886
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 2300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8887
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 2301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8888
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 2302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8889
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 2303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8890
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 2304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8891
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 2305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8892
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 2306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8893
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 2307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8894
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 2308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8895
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 2309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8896
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 2310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8897
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 2311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8898
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 2312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8911
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8912
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8917
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8921
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8929
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode: ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:  yyDollar[1].list,
				Objargs:  yyDollar[2].list,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8941
		{
			yylex.Error("Use NONE to denote the missing argument of a unary operator.")
			return 1
		}
	case 2318:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8946
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, yyDollar[4].typnam)
		}
	case 2319:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8948
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[4].typnam)
		}
	case 2320:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8950
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, nil)
		}
	case 2321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8954
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8967
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 2323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8969
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 2324:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8973
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2325:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8984
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2326:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8995
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2327:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9006
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2328:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9017
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2329:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9028
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2330:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9040
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2331:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9051
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2332:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9062
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2333:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9073
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2334:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9084
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2335:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9101
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2336:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9118
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2337:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9130
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2338:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9142
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2339:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9153
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2340:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9164
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2341:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9175
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2342:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9186
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2343:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9197
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2344:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9208
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2345:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9219
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2346:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9230
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2347:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9241
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2348:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9252
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2349:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9263
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2350:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9274
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2351:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9285
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2352:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9296
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2353:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9307
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2354:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9318
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2355:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9329
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2356:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9340
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2357:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9353
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2358:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9366
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2359:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9379
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2360:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9392
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2361:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9405
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2362:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9418
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2363:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9430
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2364:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9442
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2365:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9455
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2366:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9468
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2367:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9480
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2368:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9492
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2369:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9503
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2370:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9514
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2371:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9525
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2372:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9536
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2373:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9547
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2374:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9558
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2375:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9569
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2376:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9580
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2377:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9591
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2378:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9602
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9628
		{
			yyVAL.ival = 0
		}
	case 2380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9630
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 2381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9644
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 2382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9645
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 2383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9646
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 2384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9647
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 2385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9648
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 2386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9649
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 2387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9653
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9658
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9663
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9671
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9675
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9679
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 2393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9683
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 2394:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9697
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 2395:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:9711
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 2396:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9727
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2397:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9742
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9757
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9758
		{
			yyVAL.list = nil
		}
	case 2400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9763
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9767
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9775
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9779
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9784
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9792
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9801
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9810
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9819
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9828
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9839
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9840
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9841
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9842
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9843
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9847
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9851
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9853
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				// TODO: Add %TYPE indicator
			}
		}
	case 2418:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9863
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				Setof: true,
			}
		}
	case 2419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9875
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9876
		{
			yyVAL.list = nil
		}
	case 2421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9881
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9887
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9895
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9899
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9903
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9907
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9911
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9918
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9924
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9934
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2431:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9940
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9948
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9952
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2434:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9964
		{
			yyVAL.node = nil
		}
	case 2435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9971
		{
			yyVAL.stmt = &ast.ReturnStmt{
				ReturnVal: yyDollar[2].node,
			}
		}
	case 2436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9980
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9990
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9996
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9997
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10002
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10006
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2442:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:10022
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2443:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:10054
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10085
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10086
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10087
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10092
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10094
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10134
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10141
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10148
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10155
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10162
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10171
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2455:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10172
		{
			yyVAL.list = nil
		}
	case 2456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10176
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10181
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2458:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10189
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10200
		{
			yyVAL.bval = true
		}
	case 2460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10201
		{
			yyVAL.bval = false
		}
	case 2461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10205
		{
			yyVAL.bval = true
		}
	case 2462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10206
		{
			yyVAL.bval = false
		}
	case 2463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10210
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10215
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10219
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10231
		{
			yyVAL.bval = true
		}
	case 2469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10232
		{
			yyVAL.bval = false
		}
	case 2470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10236
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2471:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10237
		{
			yyVAL.node = nil
		}
	case 2474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10246
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10251
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10255
		{
			yyVAL.list = nil
		}
	case 2477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10260
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10263
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10264
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10265
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10269
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10270
		{
			yyVAL.rangevar = nil
		}
	case 2483:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10283
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2484:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10299
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2485:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:10315
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2486:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:10331
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10348
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10349
		{
			yyVAL.list = nil
		}
	case 2489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10353
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2490:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10354
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10355
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10356
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2493:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10367
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = yyDollar[5].rolespec
			n.SchemaElts = yyDollar[6].list
			yyVAL.stmt = n
		}
	case 2494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10374
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = nil
			n.SchemaElts = yyDollar[4].list
			yyVAL.stmt = n
		}
	case 2495:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10381
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = yyDollar[8].rolespec
			n.SchemaElts = yyDollar[9].list
			yyVAL.stmt = n
		}
	case 2496:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10388
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = nil
			n.SchemaElts = yyDollar[7].list
			yyVAL.stmt = n
		}
	case 2497:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10404
		{
			n := ast.NewCreateDomainStmt(yyDollar[3].list, yyDollar[5].typnam)
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			n.Constraints = constraints
			n.CollClause = collClause
			yyVAL.stmt = n
		}
	case 2498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10422
		{
			n := ast.NewAlterDomainStmt('T', yyDollar[3].list)
			n.Def = yyDollar[4].node
			yyVAL.stmt = n
		}
	case 2499:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10428
		{
			n := ast.NewAlterDomainStmt('N', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2500:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10433
		{
			n := ast.NewAlterDomainStmt('O', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2501:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10438
		{
			n := ast.NewAlterDomainStmt('C', yyDollar[3].list)
			n.Def = yyDollar[5].node
			yyVAL.stmt = n
		}
	case 2502:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10444
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[6].str
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			yyVAL.stmt = n
		}
	case 2503:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10452
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[8].str
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			yyVAL.stmt = n
		}
	case 2504:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10460
		{
			n := ast.NewAlterDomainStmt('V', yyDollar[3].list)
			n.Name = yyDollar[6].str
			yyVAL.stmt = n
		}
	case 2505:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10475
		{
			// Extract actual arguments from aggr_args which returns [args, position_indicator]
			var args *ast.NodeList
			if yyDollar[5].list != nil && yyDollar[5].list.Len() > 0 {
				// First element contains the actual arguments (or nil for *)
				if firstElem, ok := yyDollar[5].list.Items[0].(*ast.NodeList); ok {
					args = firstElem
				} else if yyDollar[5].list.Items[0] == nil {
					// Special case for COUNT(*) - create a list with a single nil element
					args = ast.NewNodeList(nil)
				}
			}
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, false, yyDollar[4].list, args, yyDollar[6].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10491
		{
			// old-style (pre-8.2) syntax for CREATE AGGREGATE
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, true, yyDollar[4].list, nil, yyDollar[5].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10497
		{
			n := ast.NewDefineStmt(ast.OBJECT_OPERATOR, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2508:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10502
		{
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10507
		{
			// Shell type (identified by lack of definition)
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, nil, false, false)
			yyVAL.stmt = n
		}
	case 2510:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10513
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSPARSER, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2511:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10518
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSDICTIONARY, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2512:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10523
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSTEMPLATE, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2513:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10528
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSCONFIGURATION, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10533
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2515:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10538
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, yyDollar[7].list, true, false)
			yyVAL.stmt = n
		}
	case 2516:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10543
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, ast.NewNodeList(yyDollar[5].list), false, false)
			yyVAL.stmt = n
		}
	case 2517:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10548
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, ast.NewNodeList(yyDollar[8].list), true, false)
			yyVAL.stmt = n
		}
	case 2518:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10553
		{
			typevar, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(fmt.Sprintf("invalid type name: %v", err))
				return 1
			}

			n := ast.NewCompositeTypeStmt(typevar, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2519:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10564
		{
			n := ast.NewCreateEnumStmt(yyDollar[3].list, yyDollar[7].list)
			yyVAL.stmt = n
		}
	case 2520:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10569
		{
			n := ast.NewCreateRangeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2521:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10583
		{
			n := ast.NewCreateSeqStmt(yyDollar[4].rangevar, yyDollar[5].list, 0, false, false)
			yyVAL.stmt = n
		}
	case 2522:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10588
		{
			n := ast.NewCreateSeqStmt(yyDollar[7].rangevar, yyDollar[8].list, 0, false, true)
			yyVAL.stmt = n
		}
	case 2523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10595
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10596
		{
			yyVAL.list = nil
		}
	case 2525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10599
		{
		}
	case 2526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10600
		{
		}
	case 2527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10611
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[3].rangevar, yyDollar[4].list, false, false)
		}
	case 2528:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10615
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[5].rangevar, yyDollar[6].list, false, true)
		}
	case 2529:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10628
		{
			n := ast.NewCreateExtensionStmt(yyDollar[3].str, false, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2530:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10633
		{
			n := ast.NewCreateExtensionStmt(yyDollar[6].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10641
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10650
		{
			yyVAL.list = nil
		}
	case 2533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10657
		{
			yyVAL.defelt = ast.NewDefElem("schema", ast.NewString(yyDollar[2].str))
		}
	case 2534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10661
		{
			yyVAL.defelt = ast.NewDefElem("version", ast.NewString(yyDollar[2].str))
		}
	case 2535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10665
		{
			yylex.Error("CREATE EXTENSION ... FROM is no longer supported")
			return 1
		}
	case 2536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10670
		{
			yyVAL.defelt = ast.NewDefElem("cascade", ast.NewBoolean(true))
		}
	case 2537:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10683
		{
			n := ast.NewAlterExtensionStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10691
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10700
		{
			yyVAL.list = nil
		}
	case 2540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10707
		{
			yyVAL.defelt = ast.NewDefElem("to", ast.NewString(yyDollar[2].str))
		}
	case 2541:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10720
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), ast.NewString(yyDollar[6].str))
		}
	case 2542:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10724
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), yyDollar[6].list)
		}
	case 2543:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10728
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_AGGREGATE), yyDollar[6].objwithargs)
		}
	case 2544:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10732
		{
			// CAST takes two TypeNames as a NodeList
			list := ast.NewNodeList(yyDollar[7].typnam)
			list.Append(yyDollar[9].typnam)
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_CAST), list)
		}
	case 2545:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10739
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_DOMAIN), yyDollar[6].typnam)
		}
	case 2546:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10743
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_FUNCTION), yyDollar[6].objwithargs)
		}
	case 2547:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10747
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPERATOR), yyDollar[6].objwithargs)
		}
	case 2548:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10751
		{
			// OPERATOR CLASS takes method name + class name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then class name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPCLASS), list)
		}
	case 2549:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10760
		{
			// OPERATOR FAMILY takes method name + family name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then family name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPFAMILY), list)
		}
	case 2550:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10769
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_PROCEDURE), yyDollar[6].objwithargs)
		}
	case 2551:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10773
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_ROUTINE), yyDollar[6].objwithargs)
		}
	case 2552:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10777
		{
			list := ast.NewNodeList(yyDollar[7].typnam, ast.NewString(yyDollar[9].str))
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TRANSFORM), list)
		}
	case 2553:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10782
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TYPE), yyDollar[6].typnam)
		}
	case 2554:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10794
		{
			yyVAL.stmt = ast.NewCreateFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2555:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10800
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2556:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10804
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, nil)
		}
	case 2557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10810
		{
			yyVAL.defelt = ast.NewDefElem("handler", yyDollar[2].list)
		}
	case 2558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10811
		{
			yyVAL.defelt = ast.NewDefElem("handler", nil)
		}
	case 2559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10812
		{
			yyVAL.defelt = ast.NewDefElem("validator", yyDollar[2].list)
		}
	case 2560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10813
		{
			yyVAL.defelt = ast.NewDefElem("validator", nil)
		}
	case 2561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10817
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10818
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10822
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10823
		{
			yyVAL.list = nil
		}
	case 2565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10827
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10828
		{
			result := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				result.Append(item)
			}
			yyVAL.list = result
		}
	case 2567:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10845
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].str, yyDollar[9].str, yyDollar[10].list, false)
		}
	case 2568:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:10850
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[6].str, yyDollar[7].str, yyDollar[8].str, yyDollar[12].str, yyDollar[13].list, true)
		}
	case 2569:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10856
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].list, true)
		}
	case 2570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10860
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, nil, true)
		}
	case 2571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10864
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, "", yyDollar[4].list, false)
		}
	case 2572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10870
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2573:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10871
		{
			yyVAL.str = ""
		}
	case 2574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10875
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10876
		{
			yyVAL.str = ""
		}
	case 2576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10880
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10881
		{
			yyVAL.str = ""
		}
	case 2578:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10894
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[6].list, yyDollar[8].list, yyDollar[10].str, yyDollar[11].list, nil, false)
		}
	case 2579:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:10900
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[9].list, yyDollar[11].list, yyDollar[13].str, yyDollar[14].list, nil, true)
		}
	case 2580:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:10906
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[8].list, ast.NewNodeList(yyDollar[7].rangevar), yyDollar[11].str, yyDollar[12].list, yyDollar[9].partboundspec, false)
		}
	case 2581:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:10912
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[11].list, ast.NewNodeList(yyDollar[10].rangevar), yyDollar[14].str, yyDollar[15].list, yyDollar[12].partboundspec, true)
		}
	case 2582:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10924
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list, false)
		}
	case 2583:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10928
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[8].rolespec, yyDollar[10].str, yyDollar[11].list, true)
		}
	case 2584:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10934
		{
			yyVAL.stmt = ast.NewAlterUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list)
		}
	case 2585:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10940
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, false)
		}
	case 2586:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:10944
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[7].rolespec, yyDollar[9].str, true)
		}
	case 2587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10950
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10951
		{
			yyVAL.rolespec = ast.NewRoleSpec(ast.ROLESPEC_CURRENT_USER, "")
		}
	case 2589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10956
		{
			// For aggregates like COUNT(*)
			// Return a list with [nil, -1] matching PostgreSQL's list_make2(NIL, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(nil, ast.NewInteger(-1))
		}
	case 2590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10962
		{
			// Regular aggregate arguments
			// Return a list with [args, -1] matching PostgreSQL's list_make2($2, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(yyDollar[2].list, ast.NewInteger(-1))
		}
	case 2591:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10968
		{
			// Ordered-set aggregate without direct arguments
			// Return a list with [args, 0] matching PostgreSQL's list_make2($4, makeInteger(0))
			yyVAL.list = ast.NewNodeList(yyDollar[4].list, ast.NewInteger(0))
		}
	case 2592:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10974
		{
			// Hypothetical-set aggregate
			// This is the only case requiring consistency checking in PostgreSQL
			result, err := makeOrderedSetArgs(yyDollar[2].list, yyDollar[5].list)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.list = result
		}
	case 2593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10988
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10992
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11000
		{
			yyVAL.node = yyDollar[1].funparam
		}
	case 2596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11007
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11014
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11018
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11026
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2600:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11033
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			n.NewValIsAfter = true
			yyVAL.stmt = n
		}
	case 2601:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11041
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = false
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2602:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:11050
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = true
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2603:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11059
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.OldVal = yyDollar[6].str
			n.NewVal = yyDollar[8].str
			n.SkipIfNewValExists = false
			yyVAL.stmt = n
		}
	case 2604:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11067
		{
			// Following PostgreSQL's approach - DROP VALUE is parsed but not implemented
			// PostgreSQL throws an error saying "dropping an enum value is not implemented"
			yylex.Error("dropping an enum value is not implemented")
			return 1
		}
	case 2605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11083
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11085
		{
			yyVAL.list = nil
		}
	case 2607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11090
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11092
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11097
		{
			if constraint, ok := yyDollar[3].node.(*ast.Constraint); ok {
				constraint.Conname = yyDollar[2].str
				yyVAL.node = constraint
			} else {
				yyVAL.node = yyDollar[3].node
			}
		}
	case 2610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11106
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2611:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11111
		{
			n := ast.NewConstraint(ast.CONSTR_CHECK)
			n.RawExpr = yyDollar[3].node
			n.CookedExpr = "" // Empty string, not nil
			// Process constraint attributes from $5
			processConstraintAttributeSpec(yyDollar[5].ival, n)
			// PostgreSQL: n->initially_valid = !n->skip_validation
			n.InitiallyValid = !n.SkipValidation
			yyVAL.node = n
		}
	case 2612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11122
		{
			n := ast.NewConstraint(ast.CONSTR_NOTNULL)
			// In PostgreSQL, domain NOT NULL constraints have keys = list_make1(makeString("value"))
			n.Keys = ast.NewNodeList(ast.NewString("value"))
			// Process constraint attributes from $3
			processConstraintAttributeSpec(yyDollar[3].ival, n)
			// PostgreSQL sets initially_valid = true for NOT NULL (no NOT VALID support yet)
			n.InitiallyValid = true
			yyVAL.node = n
		}
	case 2613:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11142
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[7].stmt, yyDollar[5].into, ast.OBJECT_MATVIEW, false, false)
			/* cram additional flags into the IntoClause */
			yyDollar[5].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[5].into.SkipData = !yyDollar[8].bval
			yyVAL.stmt = ctas
		}
	case 2614:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11150
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[10].stmt, yyDollar[8].into, ast.OBJECT_MATVIEW, false, true)
			/* cram additional flags into the IntoClause */
			yyDollar[8].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[8].into.SkipData = !yyDollar[11].bval
			yyVAL.stmt = ctas
		}
	case 2615:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11161
		{
			n := ast.NewRefreshMatViewStmt(yyDollar[4].bval, !yyDollar[6].bval, yyDollar[5].rangevar)
			yyVAL.stmt = n
		}
	case 2616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11167
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 2617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11168
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 2618:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11173
		{
			yyVAL.into = &ast.IntoClause{
				Rel:            yyDollar[1].rangevar,
				ColNames:       yyDollar[2].list,
				AccessMethod:   yyDollar[3].str,
				Options:        yyDollar[4].list,
				TableSpaceName: yyDollar[5].str,
			}
		}
	case 2619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11185
		{
			yyVAL.bval = true
		}
	case 2620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11186
		{
			yyVAL.bval = false
		}
	case 2621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11187
		{
			yyVAL.bval = true
		}
	case 2622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11192
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].stmt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11201
		{
			yyVAL.list = nil
		}
	case 2628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11212
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11214
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11218
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11223
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11228
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11233
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11241
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11246
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11251
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11255
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11266
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11274
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11278
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11282
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11286
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11293
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11297
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11304
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11310
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11317
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11318
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11322
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11323
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11325
		{
			t := yyDollar[1].typnam
			t.Typmods = yyDollar[3].list
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[2].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 2652:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11332
		{
			t := yyDollar[1].typnam
			// INTERVAL_FULL_RANGE equivalent and precision
			t.Typmods = ast.NewNodeList(ast.NewInteger(ast.INTERVAL_FULL_RANGE), ast.NewInteger(yyDollar[3].ival))
			stringConst := ast.NewA_Const(ast.NewString(yyDollar[5].str), 0)
			yyVAL.node = ast.NewTypeCast(stringConst, t, 0)
		}
	case 2653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11339
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11340
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11341
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11345
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11346
		{
			yyVAL.str = "default"
		}
	case 2658:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11347
		{
			yyVAL.str = ""
		}
	case 2659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11351
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11352
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11356
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11357
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11358
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11359
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11363
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11364
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11369
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11375
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11380
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11388
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11392
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11396
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11400
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11404
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11410
		{
			yyVAL.str = "read uncommitted"
		}
	case 2676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11411
		{
			yyVAL.str = "read committed"
		}
	case 2677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11412
		{
			yyVAL.str = "repeatable read"
		}
	case 2678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11413
		{
			yyVAL.str = "serializable"
		}
	case 2679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11417
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2680:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11418
		{
			yyVAL.list = nil
		}
	case 2681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11422
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11423
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11424
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11427
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11428
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11429
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11433
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2688:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11434
		{
			yyVAL.list = nil
		}
	case 2689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11438
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2690:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11439
		{
			yyVAL.node = nil
		}
	case 2691:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11443
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11448
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11453
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11461
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11465
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11471
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11477
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11483
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11484
		{
			yyVAL.str = ""
		}
	case 2700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11488
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11489
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11490
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11491
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11495
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11500
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11505
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11512
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11513
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2709:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11524
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[9].list, nil)
		}
	case 2710:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11528
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[11].list, yyDollar[8].list)
		}
	case 2711:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11534
		{
			yyVAL.stmt = ast.NewAlterEventTrigStmt(yyDollar[4].str, ast.TriggerFires(yyDollar[5].ival))
		}
	case 2712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11540
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_ORIGIN)
		}
	case 2713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11541
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_REPLICA)
		}
	case 2714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11542
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ALWAYS)
		}
	case 2715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11543
		{
			yyVAL.ival = int(ast.TRIGGER_DISABLED)
		}
	case 2716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11548
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2717:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11553
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2718:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11561
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[4].list)
		}
	case 2719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11568
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(ast.NewString(yyDollar[1].str))
		}
	case 2720:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11573
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2721:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11587
		{
			yyVAL.stmt = ast.NewCreateTableSpaceStmt(yyDollar[3].str, yyDollar[4].rolespec, yyDollar[6].str, yyDollar[7].list)
		}
	case 2722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11593
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 2723:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11594
		{
			yyVAL.rolespec = nil
		}
	case 2724:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11599
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, false)
		}
	case 2725:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11603
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, true)
		}
	case 2726:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11618
		{
			yyVAL.stmt = ast.NewCreatePolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].bval, yyDollar[7].str, yyDollar[8].list, yyDollar[9].node, yyDollar[10].node)
		}
	case 2727:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11626
		{
			yyVAL.stmt = ast.NewAlterPolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].list, yyDollar[7].node, yyDollar[8].node)
		}
	case 2728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11633
		{
			// Check for "permissive" or "restrictive" (case-insensitive)
			if strings.EqualFold(yyDollar[2].str, "permissive") {
				yyVAL.bval = true
			} else if strings.EqualFold(yyDollar[2].str, "restrictive") {
				yyVAL.bval = false
			} else {
				// Parser will error on invalid value
				yylex.Error("unrecognized row security option")
				return 1
			}
		}
	case 2729:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11645
		{
			yyVAL.bval = true
		}
	case 2730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11649
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2731:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11650
		{
			yyVAL.str = "all"
		}
	case 2732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11654
		{
			yyVAL.str = "all"
		}
	case 2733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11655
		{
			yyVAL.str = "select"
		}
	case 2734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11656
		{
			yyVAL.str = "insert"
		}
	case 2735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11657
		{
			yyVAL.str = "update"
		}
	case 2736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11658
		{
			yyVAL.str = "delete"
		}
	case 2737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11662
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2738:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11663
		{
			// Default to PUBLIC when no TO clause is specified
			publicRole := ast.NewRoleSpec(ast.ROLESPEC_PUBLIC, "")
			yyVAL.list = ast.NewNodeList(publicRole)
		}
	case 2739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11671
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11672
		{
			yyVAL.list = nil
		}
	case 2741:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11676
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11677
		{
			yyVAL.node = nil
		}
	case 2743:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11681
		{
			yyVAL.node = yyDollar[4].node
		}
	case 2744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11682
		{
			yyVAL.node = nil
		}
	case 2745:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11693
		{
			yyVAL.stmt = ast.NewCreateAmStmt(yyDollar[4].str, ast.AmType(yyDollar[6].ival), yyDollar[8].list)
		}
	case 2746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11699
		{
			yyVAL.ival = int(ast.AMTYPE_INDEX)
		}
	case 2747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11700
		{
			yyVAL.ival = int(ast.AMTYPE_TABLE)
		}
	case 2748:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11711
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[3].list, yyDollar[4].list, yyDollar[6].list, yyDollar[8].list, "", false, false)
		}
	case 2749:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11715
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[6].list, yyDollar[7].list, yyDollar[9].list, yyDollar[11].list, "", false, true)
		}
	case 2750:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11722
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[3].list, yyDollar[6].node, false)
		}
	case 2751:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11726
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[5].list, yyDollar[8].node, true)
		}
	case 2752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11732
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].statelem)
		}
	case 2753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11733
		{
			yyDollar[1].list.Append(yyDollar[3].statelem)
			yyVAL.list = yyDollar[1].list
		}
	case 2754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11737
		{
			yyVAL.statelem = ast.NewStatsElem(yyDollar[1].str)
		}
	case 2755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11738
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[1].node)
		}
	case 2756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11739
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[2].node)
		}
	case 2757:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11750
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, false, yyDollar[4].list)
		}
	case 2758:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11754
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, true, yyDollar[7].list)
		}
	case 2759:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11758
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, yyDollar[5].list, false, yyDollar[6].list)
		}
	case 2760:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11765
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, yyDollar[5].list, nil, ast.AP_SetOptions)
		}
	case 2761:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11769
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_AddObjects)
		}
	case 2762:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11773
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_SetObjects)
		}
	case 2763:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11777
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_DropObjects)
		}
	case 2764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11783
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11784
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2766:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11789
		{
			pubTable := ast.NewPublicationTable(yyDollar[2].rangevar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_TABLE, pubTable)
		}
	case 2767:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11794
		{
			yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_TABLES_IN_SCHEMA, yyDollar[4].str)
		}
	case 2768:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11798
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA)
		}
	case 2769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11802
		{
			// If either a row filter or column list is specified, create a PublicationTable object
			if yyDollar[2].list != nil || yyDollar[3].node != nil {
				// Create a simple RangeVar from the ColId
				rangeVar := ast.NewRangeVar(yyDollar[1].str, "", "")
				pubTable := ast.NewPublicationTable(rangeVar, yyDollar[3].node, yyDollar[2].list)
				yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
			} else {
				yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_CONTINUATION, yyDollar[1].str)
			}
		}
	case 2770:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11814
		{
			rangeVar := makeRangeVarFromQualifiedName(yyDollar[1].str, yyDollar[2].list, -1)
			pubTable := ast.NewPublicationTable(rangeVar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2771:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11820
		{
			pubTable := ast.NewPublicationTable(yyDollar[1].rangevar, yyDollar[3].node, yyDollar[2].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11825
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_CONTINUATION)
		}
	case 2773:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11831
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2774:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11832
		{
			yyVAL.node = nil
		}
	case 2775:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:11843
		{
			yyVAL.stmt = ast.NewCreateSubscriptionStmt(yyDollar[3].str, yyDollar[5].str, yyDollar[7].list, yyDollar[8].list)
		}
	case 2776:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11850
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_OPTIONS, "", nil, yyDollar[5].list)
		}
	case 2777:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11854
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_CONNECTION, yyDollar[5].str, nil, nil)
		}
	case 2778:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11858
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_REFRESH, "", nil, yyDollar[6].list)
		}
	case 2779:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11862
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ADD_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2780:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11866
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_DROP_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2781:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:11870
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SET_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2782:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11874
		{
			enableOpt := ast.NewNodeList()
			enableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(true)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, enableOpt)
		}
	case 2783:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11880
		{
			disableOpt := ast.NewNodeList()
			disableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(false)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, disableOpt)
		}
	case 2784:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11886
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SKIP, "", nil, yyDollar[5].list)
		}
	case 2785:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:11899
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, yyDollar[10].objwithargs, ast.CoercionContext(yyDollar[11].ival), false)
		}
	case 2786:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11903
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), false)
		}
	case 2787:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:11907
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), true)
		}
	case 2788:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11913
		{
			yyVAL.ival = int(ast.COERCION_IMPLICIT)
		}
	case 2789:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11914
		{
			yyVAL.ival = int(ast.COERCION_ASSIGNMENT)
		}
	case 2790:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11915
		{
			yyVAL.ival = int(ast.COERCION_EXPLICIT)
		}
	case 2791:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:11927
		{
			yyVAL.stmt = ast.NewCreateOpClassStmt(yyDollar[4].list, yyDollar[11].list, yyDollar[10].str, yyDollar[8].typnam, yyDollar[13].list, yyDollar[5].bval)
		}
	case 2792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11933
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2793:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11934
		{
			yyVAL.list = nil
		}
	case 2794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11938
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2795:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11939
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2796:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11944
		{
			// Create ObjectWithArgs for simple operator
			owa := ast.NewObjectWithArgs(yyDollar[3].list, nil, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, yyDollar[4].list)
		}
	case 2797:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11950
		{
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, yyDollar[3].objwithargs, yyDollar[4].list)
		}
	case 2798:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11954
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[3].objwithargs, nil)
		}
	case 2799:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11958
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[6].objwithargs, yyDollar[4].list)
		}
	case 2800:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11962
		{
			yyVAL.node = ast.NewOpClassItemStorage(yyDollar[2].typnam)
		}
	case 2801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11968
		{
			yyVAL.bval = true
		}
	case 2802:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11969
		{
			yyVAL.bval = false
		}
	case 2803:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11973
		{
			yyVAL.list = nil
		}
	case 2804:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11974
		{
			yyVAL.list = yyDollar[4].list
		}
	case 2805:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:11975
		{
			yyVAL.list = nil
		}
	case 2806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11979
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].typnam)
		}
	case 2807:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11980
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2808:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:11991
		{
			yyVAL.stmt = ast.NewCreateOpFamilyStmt(yyDollar[4].list, yyDollar[6].str)
		}
	case 2809:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12004
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, false, yyDollar[8].list)
		}
	case 2810:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12008
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, true, yyDollar[8].list)
		}
	case 2811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12014
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2812:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12015
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2813:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12020
		{
			// Create ObjectWithArgs for operator with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, nil)
		}
	case 2814:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12026
		{
			// Create ObjectWithArgs for function with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, owa, nil)
		}
	case 2815:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12041
		{
			yyVAL.stmt = ast.NewCreateConversionStmt(yyDollar[4].list, yyDollar[6].str, yyDollar[8].str, yyDollar[10].list, yyDollar[2].bval)
		}
	case 2816:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12054
		{
			yyVAL.stmt = ast.NewCreateTransformStmt(yyDollar[2].bval, yyDollar[5].typnam, yyDollar[7].str, linitial(yyDollar[9].list), lsecond(yyDollar[9].list))
		}
	case 2817:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12061
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs)  // fromsql
			yyVAL.list.Append(yyDollar[11].objwithargs) // tosql
		}
	case 2818:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12067
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[11].objwithargs) // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs)  // tosql
		}
	case 2819:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12073
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs) // fromsql
			yyVAL.list.Append(nil)                     // tosql
		}
	case 2820:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12079
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(nil)                     // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs) // tosql
		}
	case 2821:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12094
		{
			// Parameterless CREATE LANGUAGE is now treated as CREATE EXTENSION
			yyVAL.stmt = ast.NewCreateExtensionStmt(yyDollar[6].str, yyDollar[2].bval, nil)
		}
	case 2822:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:12100
		{
			yyVAL.stmt = ast.NewCreatePLangStmt(yyDollar[2].bval, yyDollar[6].str, yyDollar[8].list, yyDollar[9].list, yyDollar[10].list, yyDollar[3].bval)
		}
	case 2823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12106
		{
			yyVAL.bval = true
		}
	case 2824:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12107
		{
			yyVAL.bval = false
		}
	case 2825:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12112
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2826:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12113
		{
			yyVAL.list = nil
		}
	case 2827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12117
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2828:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12118
		{
			yyVAL.list = nil
		}
	case 2829:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12122
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2830:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12123
		{
			yyVAL.list = nil
		}
	case 2831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12126
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_ALL
		}
	case 2832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12127
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DISTINCT
		}
	case 2833:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12128
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DEFAULT
		}
	case 2834:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12133
		{
			yyVAL.groupClause = &ast.GroupClause{
				Distinct: yyDollar[3].setquant == ast.SET_QUANTIFIER_DISTINCT,
				List:     yyDollar[4].list,
			}
		}
	case 2835:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12140
		{
			yyVAL.groupClause = nil
		}
	case 2836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12146
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2837:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12147
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12151
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12152
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12153
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12154
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12155
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2843:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12160
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_EMPTY, ast.NewNodeList(), 0)
		}
	case 2844:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12167
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_ROLLUP, yyDollar[3].list, 0)
		}
	case 2845:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12174
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_CUBE, yyDollar[3].list, 0)
		}
	case 2846:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12181
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_SETS, yyDollar[4].list, 0)
		}
	case 2847:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12190
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2848:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12191
		{
			yyVAL.node = nil
		}
	case 2849:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12198
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12202
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2851:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12203
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2852:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12208
		{
			sortBy := ast.NewSortBy(yyDollar[1].node, ast.SORTBY_USING, ast.SortByNulls(yyDollar[4].ival), 0)
			// Use qual_all_Op (NodeList) directly for UseOp
			sortBy.UseOp = yyDollar[3].list
			yyVAL.node = sortBy
		}
	case 2853:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12215
		{
			yyVAL.node = ast.NewSortBy(yyDollar[1].node, ast.SortByDir(yyDollar[2].ival), ast.SortByNulls(yyDollar[3].ival), 0)
		}
	case 2854:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12226
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2855:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12228
		{
			yyVAL.list = nil
		}
	case 2856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12233
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[1].windef)
		}
	case 2857:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12238
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[3].windef)
		}
	case 2858:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12246
		{
			n := yyDollar[3].windef
			n.Name = yyDollar[1].str
			yyVAL.windef = n
		}
	case 2859:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12255
		{
			yyVAL.windef = yyDollar[2].windef
		}
	case 2860:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12257
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			yyVAL.windef = n
		}
	case 2861:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12264
		{
			yyVAL.windef = nil
		}
	case 2862:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12269
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.PartitionClause = yyDollar[3].list
			n.OrderClause = yyDollar[4].list

			n.FrameOptions = yyDollar[5].windef.FrameOptions
			n.StartOffset = yyDollar[5].windef.StartOffset
			n.EndOffset = yyDollar[5].windef.EndOffset
			yyVAL.windef = n
		}
	case 2863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12283
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2864:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12284
		{
			yyVAL.str = ""
		}
	case 2865:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12288
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2866:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12289
		{
			yyVAL.list = nil
		}
	case 2867:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12294
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_RANGE
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2868:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12301
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_ROWS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2869:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12308
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_GROUPS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2870:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12315
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12326
		{
			n := yyDollar[1].windef
			// reject invalid cases - these would be runtime errors in PostgreSQL
			if (n.FrameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (n.FrameOptions & ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 {
				yylex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			n.FrameOptions |= ast.FRAMEOPTION_END_CURRENT_ROW
			yyVAL.windef = n
		}
	case 2872:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12340
		{
			n1 := yyDollar[2].windef
			n2 := yyDollar[4].windef

			// form merged options
			frameOptions := n1.FrameOptions
			// shift converts START_ options to END_ options
			frameOptions |= (n2.FrameOptions << 1)
			frameOptions |= ast.FRAMEOPTION_BETWEEN

			// reject invalid cases
			if (frameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (frameOptions & ast.FRAMEOPTION_END_UNBOUNDED_PRECEDING) != 0 {
				yylex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_CURRENT_ROW) != 0 &&
				(frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 {
				yylex.Error("frame starting from current row cannot have preceding rows")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 &&
				((frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 ||
					(frameOptions&ast.FRAMEOPTION_END_CURRENT_ROW) != 0) {
				yylex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			n1.FrameOptions = frameOptions
			n1.EndOffset = n2.StartOffset
			yyVAL.windef = n1
		}
	case 2873:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12375
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_PRECEDING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2874:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12383
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2875:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12391
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_CURRENT_ROW
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2876:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12399
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_PRECEDING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2877:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12407
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_FOLLOWING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2878:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12417
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_CURRENT_ROW
		}
	case 2879:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12418
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_GROUP
		}
	case 2880:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12419
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_TIES
		}
	case 2881:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12420
		{
			yyVAL.ival = 0
		}
	case 2882:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12421
		{
			yyVAL.ival = 0
		}
	case 2883:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12430
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[2].node
		}
	case 2884:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12435
		{
			yyVAL.selectLimit = yyDollar[2].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[1].node
		}
	case 2885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12440
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12444
		{
			n := &selectLimit{}
			n.limitOffset = yyDollar[1].node
			n.limitCount = nil
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12454
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2888:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12455
		{
			yyVAL.selectLimit = nil
		}
	case 2889:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12460
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[2].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2890:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12468
		{
			// Disabled because it was too confusing - PostgreSQL error
			yylex.Error("LIMIT #,# syntax is not supported. Use separate LIMIT and OFFSET clauses.")
			return 1
		}
	case 2891:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12475
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2892:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12483
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2893:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12491
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2894:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12499
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2895:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12510
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2896:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12513
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12517
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12519
		{
			/* LIMIT ALL is represented as a NULL constant */
			yyVAL.node = ast.NewA_Const(ast.NewNull(), -1)
		}
	case 2899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12526
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12539
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2901:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12541
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("+")}}, nil, yyDollar[2].node, -1)
		}
	case 2902:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12545
		{
			// Create a unary minus expression
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("-")}}, nil, yyDollar[2].node, -1)
		}
	case 2903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12552
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), -1)
		}
	case 2904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12553
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), -1)
		}
	case 2905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12558
		{
			yyVAL.ival = 0
		}
	case 2906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12559
		{
			yyVAL.ival = 0
		}
	case 2907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12563
		{
			yyVAL.ival = 0
		}
	case 2908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12564
		{
			yyVAL.ival = 0
		}
	case 2909:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12577
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2910:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12583
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_START)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2911:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12589
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2912:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12595
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2913:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12601
		{
			stmt := ast.NewSavepointStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2914:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12606
		{
			stmt := ast.NewReleaseStmt(yyDollar[3].str)
			yyVAL.stmt = stmt
		}
	case 2915:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12611
		{
			stmt := ast.NewReleaseStmt(yyDollar[2].str)
			yyVAL.stmt = stmt
		}
	case 2916:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12616
		{
			stmt := ast.NewRollbackToStmt(yyDollar[5].str)
			yyVAL.stmt = stmt
		}
	case 2917:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:12621
		{
			stmt := ast.NewRollbackToStmt(yyDollar[4].str)
			yyVAL.stmt = stmt
		}
	case 2918:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12626
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_PREPARE)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2919:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12632
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2920:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12638
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_ROLLBACK_PREPARED)
			stmt.Gid = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 2921:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12647
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_COMMIT)
			stmt.Chain = yyDollar[3].bval
			yyVAL.stmt = stmt
		}
	case 2922:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12653
		{
			stmt := ast.NewTransactionStmt(ast.TRANS_STMT_BEGIN)
			stmt.Options = yyDollar[3].list
			yyVAL.stmt = stmt
		}
	case 2923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12660
		{
		}
	case 2924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12661
		{
		}
	case 2925:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12662
		{
		}
	case 2926:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12666
		{
			yyVAL.bval = true
		}
	case 2927:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12667
		{
			yyVAL.bval = false
		}
	case 2928:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12668
		{
			yyVAL.bval = false
		}
	case 2929:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12681
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_ROLE, yyDollar[3].str, yyDollar[5].list)
		}
	case 2930:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12688
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_USER, yyDollar[3].str, yyDollar[5].list)
		}
	case 2931:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12695
		{
			yyVAL.stmt = ast.NewCreateRoleStmt(ast.ROLESTMT_GROUP, yyDollar[3].str, yyDollar[5].list)
		}
	case 2932:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12702
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2933:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12708
		{
			as := ast.NewAlterRoleStmt(yyDollar[3].rolespec, yyDollar[5].list)
			as.Action = +1
			yyVAL.stmt = as
		}
	case 2934:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12717
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2935:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12721
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2936:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12725
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(yyDollar[3].rolespec, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2937:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12729
		{
			yyVAL.stmt = ast.NewAlterRoleSetStmt(nil, yyDollar[4].str, yyDollar[5].vsetstmt)
		}
	case 2938:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12735
		{
			yyVAL.str = ""
		}
	case 2939:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12736
		{
			yyVAL.str = yyDollar[3].str
		}
	case 2940:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12741
		{
			options := ast.NewNodeList(ast.NewDefElem("rolemembers", yyDollar[6].list))
			stmt := ast.NewAlterRoleStmt(yyDollar[3].rolespec, options)
			stmt.Action = yyDollar[4].ival
			yyVAL.stmt = stmt
		}
	case 2941:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12751
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2942:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12755
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2943:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12759
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2944:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12763
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2945:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12767
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[3].list, false)
		}
	case 2946:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12771
		{
			yyVAL.stmt = ast.NewDropRoleStmt(yyDollar[5].list, true)
		}
	case 2947:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12779
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 2948:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12790
		{
			yyVAL.list = nil
		}
	case 2949:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12795
		{
			if yyDollar[1].list == nil {
				list := ast.NewNodeList()
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			} else {
				list := yyDollar[1].list
				list.Append(yyDollar[2].defelt)
				yyVAL.list = list
			}
		}
	case 2950:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12806
		{
			yyVAL.list = nil
		}
	case 2951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12810
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2952:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12812
		{
			yyVAL.defelt = ast.NewDefElem("sysid", ast.NewInteger(yyDollar[2].ival))
		}
	case 2953:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12816
		{
			yyVAL.defelt = ast.NewDefElem("adminmembers", yyDollar[2].list)
		}
	case 2954:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12820
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 2955:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12824
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 2956:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12828
		{
			yyVAL.defelt = ast.NewDefElem("addroleto", yyDollar[3].list)
		}
	case 2957:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12835
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[2].str))
		}
	case 2958:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12839
		{
			yyVAL.defelt = ast.NewDefElem("password", nil)
		}
	case 2959:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12843
		{
			yyVAL.defelt = ast.NewDefElem("password", ast.NewString(yyDollar[3].str))
		}
	case 2960:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12847
		{
			yylex.Error("UNENCRYPTED PASSWORD is no longer supported")
			return 1
		}
	case 2961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12852
		{
			yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(true))
		}
	case 2962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12856
		{
			// Handle identifiers like PostgreSQL does with string comparisons
			if yyDollar[1].str == "superuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nosuperuser" {
				yyVAL.defelt = ast.NewDefElem("superuser", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createrole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreaterole" {
				yyVAL.defelt = ast.NewDefElem("createrole", ast.NewBoolean(false))
			} else if yyDollar[1].str == "createdb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nocreatedb" {
				yyVAL.defelt = ast.NewDefElem("createdb", ast.NewBoolean(false))
			} else if yyDollar[1].str == "login" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nologin" {
				yyVAL.defelt = ast.NewDefElem("canlogin", ast.NewBoolean(false))
			} else if yyDollar[1].str == "replication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(true))
			} else if yyDollar[1].str == "noreplication" {
				yyVAL.defelt = ast.NewDefElem("isreplication", ast.NewBoolean(false))
			} else if yyDollar[1].str == "bypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(true))
			} else if yyDollar[1].str == "nobypassrls" {
				yyVAL.defelt = ast.NewDefElem("bypassrls", ast.NewBoolean(false))
			} else if yyDollar[1].str == "noinherit" {
				yyVAL.defelt = ast.NewDefElem("inherit", ast.NewBoolean(false))
			} else {
				// Return error for unrecognized role option
				yylex.Error("unrecognized role option \"" + yyDollar[1].str + "\"")
				yyVAL.defelt = nil
			}
		}
	case 2963:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12891
		{
			yyVAL.defelt = ast.NewDefElem("connectionlimit", ast.NewInteger(yyDollar[3].ival))
		}
	case 2964:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:12895
		{
			yyVAL.defelt = ast.NewDefElem("validUntil", ast.NewString(yyDollar[3].str))
		}
	case 2965:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12899
		{
			yyVAL.defelt = ast.NewDefElem("rolemembers", yyDollar[2].list)
		}
	case 2966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12905
		{
			yyVAL.ival = 1
		}
	case 2967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:12906
		{
			yyVAL.ival = -1
		}
	case 2968:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12918
		{
			n := ast.NewGrantStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.GrantOption = yyDollar[7].bval
			n.Grantor = yyDollar[8].rolespec
			yyVAL.stmt = n
		}
	case 2969:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:12930
		{
			n := ast.NewRevokeStmt(yyDollar[4].privtarget.objtype, yyDollar[4].privtarget.objs, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = yyDollar[4].privtarget.targtype
			n.Grantor = yyDollar[7].rolespec
			n.Behavior = yyDollar[8].dropBehav
			yyVAL.stmt = n
		}
	case 2970:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:12939
		{
			n := ast.NewRevokeStmt(yyDollar[7].privtarget.objtype, yyDollar[7].privtarget.objs, yyDollar[5].list, yyDollar[9].list)
			n.Targtype = yyDollar[7].privtarget.targtype
			n.GrantOption = true
			n.Grantor = yyDollar[10].rolespec
			n.Behavior = yyDollar[11].dropBehav
			yyVAL.stmt = n
		}
	case 2971:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12951
		{
			stmt := ast.NewGrantRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			yyVAL.stmt = stmt
		}
	case 2972:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:12957
		{
			stmt := ast.NewGrantRoleStmtWithOptions(yyDollar[2].list, yyDollar[4].list, yyDollar[6].list)
			stmt.Grantor = yyDollar[7].rolespec
			yyVAL.stmt = stmt
		}
	case 2973:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:12966
		{
			stmt := ast.NewRevokeRoleStmt(yyDollar[2].list, yyDollar[4].list)
			stmt.Grantor = yyDollar[5].rolespec
			stmt.Behavior = yyDollar[6].dropBehav
			yyVAL.stmt = stmt
		}
	case 2974:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:12973
		{
			opt := ast.NewDefElem(yyDollar[2].str, ast.NewBoolean(false))
			stmt := ast.NewRevokeRoleStmt(yyDollar[5].list, yyDollar[7].list)
			stmt.Opt = &ast.NodeList{Items: []ast.Node{opt}}
			stmt.Grantor = yyDollar[8].rolespec
			stmt.Behavior = yyDollar[9].dropBehav
			yyVAL.stmt = stmt
		}
	case 2975:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:12992
		{
			yyVAL.stmt = ast.NewAlterDefaultPrivilegesStmt(yyDollar[4].list, yyDollar[5].node.(*ast.GrantStmt))
		}
	case 2976:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:12998
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2977:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:12999
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2978:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13004
		{
			yyVAL.defelt = ast.NewDefElem("schemas", yyDollar[3].list)
		}
	case 2979:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13008
		{
			yyVAL.defelt = ast.NewDefElem("roles", yyDollar[3].list)
		}
	case 2980:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13012
		{
			yyVAL.defelt = ast.NewDefElem("roles", yyDollar[3].list)
		}
	case 2981:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13024
		{
			n := ast.NewGrantStmt(ast.ObjectType(yyDollar[4].ival), nil, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.GrantOption = yyDollar[7].bval
			yyVAL.node = n
		}
	case 2982:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13032
		{
			n := ast.NewRevokeStmt(ast.ObjectType(yyDollar[4].ival), nil, yyDollar[2].list, yyDollar[6].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.Behavior = yyDollar[7].dropBehav
			yyVAL.node = n
		}
	case 2983:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:13040
		{
			n := ast.NewRevokeStmt(ast.ObjectType(yyDollar[7].ival), nil, yyDollar[5].list, yyDollar[9].list)
			n.Targtype = ast.ACL_TARGET_DEFAULTS
			n.GrantOption = true
			n.Behavior = yyDollar[10].dropBehav
			yyVAL.node = n
		}
	case 2984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13050
		{
			yyVAL.ival = int(ast.OBJECT_TABLE)
		}
	case 2985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13051
		{
			yyVAL.ival = int(ast.OBJECT_FUNCTION)
		}
	case 2986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13052
		{
			yyVAL.ival = int(ast.OBJECT_FUNCTION)
		}
	case 2987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13053
		{
			yyVAL.ival = int(ast.OBJECT_SEQUENCE)
		}
	case 2988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13054
		{
			yyVAL.ival = int(ast.OBJECT_TYPE)
		}
	case 2989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13055
		{
			yyVAL.ival = int(ast.OBJECT_SCHEMA)
		}
	case 2990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13060
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13062
		{
			yyVAL.list = nil
		}
	case 2992:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13064
		{
			yyVAL.list = nil
		}
	case 2993:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13066
		{
			ap := ast.NewAccessPriv("", yyDollar[3].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 2994:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13071
		{
			ap := ast.NewAccessPriv("", yyDollar[4].list)
			yyVAL.list = ast.NewNodeList(ap)
		}
	case 2995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13077
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].accesspriv)
		}
	case 2996:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13078
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].accesspriv)
			yyVAL.list = yyDollar[1].list
		}
	case 2997:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13082
		{
			yyVAL.accesspriv = ast.NewAccessPriv("SELECT", yyDollar[2].list)
		}
	case 2998:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13086
		{
			yyVAL.accesspriv = ast.NewAccessPriv("REFERENCES", yyDollar[2].list)
		}
	case 2999:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13090
		{
			yyVAL.accesspriv = ast.NewAccessPriv("CREATE", yyDollar[2].list)
		}
	case 3000:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13094
		{
			yyVAL.accesspriv = ast.NewAccessPriv("ALTER SYSTEM", nil)
		}
	case 3001:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13098
		{
			yyVAL.accesspriv = ast.NewAccessPriv(yyDollar[1].str, yyDollar[2].list)
		}
	case 3002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13108
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[1].list,
			}
		}
	case 3003:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13116
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[2].list,
			}
		}
	case 3004:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13124
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[2].list,
			}
		}
	case 3005:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13132
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FDW,
				objs:     yyDollar[4].list,
			}
		}
	case 3006:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13140
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FOREIGN_SERVER,
				objs:     yyDollar[3].list,
			}
		}
	case 3007:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13148
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[2].list,
			}
		}
	case 3008:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13156
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[2].list,
			}
		}
	case 3009:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13164
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[2].list,
			}
		}
	case 3010:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13172
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DATABASE,
				objs:     yyDollar[2].list,
			}
		}
	case 3011:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13180
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_DOMAIN,
				objs:     yyDollar[2].list,
			}
		}
	case 3012:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13188
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LANGUAGE,
				objs:     yyDollar[2].list,
			}
		}
	case 3013:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13196
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_LARGEOBJECT,
				objs:     yyDollar[3].list,
			}
		}
	case 3014:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13204
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_PARAMETER_ACL,
				objs:     yyDollar[2].list,
			}
		}
	case 3015:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13212
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_SCHEMA,
				objs:     yyDollar[2].list,
			}
		}
	case 3016:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13220
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TABLESPACE,
				objs:     yyDollar[2].list,
			}
		}
	case 3017:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13228
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_OBJECT,
				objtype:  ast.OBJECT_TYPE,
				objs:     yyDollar[2].list,
			}
		}
	case 3018:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13236
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_TABLE,
				objs:     yyDollar[5].list,
			}
		}
	case 3019:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13244
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_SEQUENCE,
				objs:     yyDollar[5].list,
			}
		}
	case 3020:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13252
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_FUNCTION,
				objs:     yyDollar[5].list,
			}
		}
	case 3021:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13260
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_PROCEDURE,
				objs:     yyDollar[5].list,
			}
		}
	case 3022:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13268
		{
			yyVAL.privtarget = &PrivTarget{
				targtype: ast.ACL_TARGET_ALL_IN_SCHEMA,
				objtype:  ast.OBJECT_ROUTINE,
				objs:     yyDollar[5].list,
			}
		}
	case 3023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13279
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rolespec)
		}
	case 3024:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13280
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 3025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13284
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 3026:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13285
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 3027:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13290
		{
			yyVAL.bval = true
		}
	case 3028:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13291
		{
			yyVAL.bval = false
		}
	case 3029:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13295
		{
			yyDollar[1].list.Items = append(yyDollar[1].list.Items, yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13296
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3031:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13301
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 3032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13307
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 3033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13308
		{
			yyVAL.node = ast.NewBoolean(true)
		}
	case 3034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13309
		{
			yyVAL.node = ast.NewBoolean(false)
		}
	case 3035:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13312
		{
			yyVAL.rolespec = yyDollar[3].rolespec
		}
	case 3036:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13313
		{
			yyVAL.rolespec = nil
		}
	case 3037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13318
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 3038:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13322
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 3039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13330
		{
			yyVAL.str = yyDollar[1].str
		}
	case 3040:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13334
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 3041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13339
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 3042:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13340
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 3043:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13344
		{
			n := ast.NewRangeTableSample(nil, yyDollar[2].list, yyDollar[4].list, yyDollar[6].node, 0)
			yyVAL.node = n
		}
	case 3044:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13352
		{
			yyVAL.node = yyDollar[3].node
		}
	case 3045:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13356
		{
			yyVAL.node = nil
		}
	case 3046:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13370
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_FUNCTION, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3047:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13375
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_PROCEDURE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3048:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13380
		{
			n := ast.NewAlterFunctionStmt(ast.OBJECT_ROUTINE, yyDollar[3].objwithargs, yyDollar[4].list)
			yyVAL.stmt = n
		}
	case 3049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13388
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3050:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13389
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3051:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13395
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 3052:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13399
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 3053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13403
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 3054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13407
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 3055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13411
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 3056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13415
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 3057:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13419
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 3058:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13423
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 3059:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13427
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 3060:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13431
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 3061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13435
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 3062:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13439
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 3063:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13443
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 3064:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13447
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 3065:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13451
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 3066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13455
		{
			/* we abuse the normal content of a DefElem here */
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 3067:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13460
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 3068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13466
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 3069:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13467
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 3070:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13472
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3071:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13476
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 3072:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13480
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 3073:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13486
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 3074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13487
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 3075:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13488
		{
			yyVAL.node = yyDollar[1].list
		}
	case 3076:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13489
		{
			yyVAL.node = yyDollar[1].node
		}
	case 3077:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13490
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 3080:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13501
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = yyDollar[1].list
			n.Objargs = ast.ExtractArgTypes(yyDollar[2].list)
			n.ObjfuncArgs = yyDollar[2].list
			yyVAL.objwithargs = n
		}
	case 3081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13514
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3082:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13521
		{
			n := ast.NewEmptyObjectWithArgs()
			n.Objname = ast.NewNodeList(ast.NewString(yyDollar[1].str))
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3083:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13528
		{
			n := ast.NewEmptyObjectWithArgs()
			nameList := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			// Append indirection elements
			for i := 0; i < yyDollar[2].list.Len(); i++ {
				nameList.Append(yyDollar[2].list.Items[i])
			}
			n.Objname = nameList
			n.ArgsUnspecified = true
			yyVAL.objwithargs = n
		}
	case 3084:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13542
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 3085:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13544
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 3086:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13556
		{
			n := ast.NewAlterTypeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 3087:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13564
		{
			relation, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error("invalid type name")
				return 1
			}
			n := ast.NewAlterTableStmt(relation, yyDollar[4].list)
			n.Objtype = ast.OBJECT_TYPE // Mark this as a composite type alteration
			yyVAL.stmt = n
		}
	case 3088:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13577
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 3089:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13578
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 3090:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13584
		{
			n := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			n.Behavior = yyDollar[4].dropBehav
			yyVAL.node = n
		}
	case 3091:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13591
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = true
			yyVAL.node = n
		}
	case 3092:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13599
		{
			n := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			n.Behavior = yyDollar[4].dropBehav
			n.MissingOk = false
			yyVAL.node = n
		}
	case 3093:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:13607
		{
			def := ast.NewColumnDef(yyDollar[3].str, yyDollar[6].typnam, -1)
			n := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, def)
			n.Behavior = yyDollar[8].dropBehav
			/* We only use these fields of the ColumnDef node */
			def.TypeName = yyDollar[6].typnam
			if collClause, ok := yyDollar[7].node.(*ast.CollateClause); ok {
				def.Collclause = collClause
			}
			def.RawDefault = nil
			yyVAL.node = n
		}
	case 3094:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13628
		{
			yyVAL.ival = int(ast.CMD_SELECT)
		}
	case 3095:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13629
		{
			yyVAL.ival = int(ast.CMD_UPDATE)
		}
	case 3096:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13630
		{
			yyVAL.ival = int(ast.CMD_DELETE)
		}
	case 3097:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13631
		{
			yyVAL.ival = int(ast.CMD_INSERT)
		}
	case 3098:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:13641
		{
			yyVAL.stmt = ast.NewDeclareCursorStmt(yyDollar[2].str, yyDollar[3].ival|yyDollar[5].ival|ast.CURSOR_OPT_FAST_PLAN, yyDollar[7].stmt)
		}
	case 3099:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13648
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_BINARY
		}
	case 3100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13652
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_INSENSITIVE
		}
	case 3101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13656
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_ASENSITIVE
		}
	case 3102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13660
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_SCROLL
		}
	case 3103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13664
		{
			yyVAL.ival = yyDollar[1].ival | ast.CURSOR_OPT_NO_SCROLL
		}
	case 3104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13667
		{
			yyVAL.ival = 0
		}
	case 3105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13670
		{
			yyVAL.ival = ast.CURSOR_OPT_HOLD
		}
	case 3106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13671
		{
			yyVAL.ival = 0
		}
	case 3107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13672
		{
			yyVAL.ival = 0
		}
	case 3108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13676
		{
			stmt := yyDollar[2].stmt.(*ast.FetchStmt)
			stmt.IsMove = false
			yyVAL.stmt = stmt
		}
	case 3109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13682
		{
			stmt := yyDollar[2].stmt.(*ast.FetchStmt)
			stmt.IsMove = true
			yyVAL.stmt = stmt
		}
	case 3110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13690
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[1].str, false)
		}
	case 3111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13694
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[2].str, false)
		}
	case 3112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13698
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[3].str, false)
		}
	case 3113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13702
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, 1, yyDollar[3].str, false)
		}
	case 3114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13706
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, 1, yyDollar[3].str, false)
		}
	case 3115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13710
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, -1, yyDollar[3].str, false)
		}
	case 3116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13714
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_ABSOLUTE, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13718
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_RELATIVE, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13722
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, int64(yyDollar[1].ival), yyDollar[3].str, false)
		}
	case 3119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13726
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, ast.FETCH_ALL, yyDollar[3].str, false)
		}
	case 3120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13730
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, 1, yyDollar[3].str, false)
		}
	case 3121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13734
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13738
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_FORWARD, ast.FETCH_ALL, yyDollar[4].str, false)
		}
	case 3123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13742
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, 1, yyDollar[3].str, false)
		}
	case 3124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13746
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, int64(yyDollar[2].ival), yyDollar[4].str, false)
		}
	case 3125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:13750
		{
			yyVAL.stmt = ast.NewFetchStmt(ast.FETCH_BACKWARD, ast.FETCH_ALL, yyDollar[4].str, false)
		}
	case 3126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13755
		{
			yyVAL.ival = 0
		}
	case 3127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13756
		{
			yyVAL.ival = 0
		}
	case 3128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13760
		{
			yyVAL.ival = 0
		}
	case 3129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13761
		{
			yyVAL.ival = 0
		}
	case 3130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13766
		{
			name := yyDollar[2].str
			yyVAL.stmt = ast.NewClosePortalStmt(&name)
		}
	case 3131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13771
		{
			yyVAL.stmt = ast.NewClosePortalStmt(nil)
		}
	case 3132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13783
		{
			yyVAL.stmt = ast.NewPrepareStmt(yyDollar[2].str, yyDollar[3].list, yyDollar[5].stmt)
		}
	case 3133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13790
		{
			yyVAL.list = yyDollar[2].list
		}
	case 3134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13793
		{
			yyVAL.list = nil
		}
	case 3135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13797
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13798
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13799
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13800
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13801
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 3140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13805
		{
			yyVAL.stmt = ast.NewExecuteStmt(yyDollar[2].str, yyDollar[3].list)
		}
	case 3141:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:13809
		{
			executeStmt := ast.NewExecuteStmt(yyDollar[7].str, yyDollar[8].list)
			ctas := ast.NewCreateTableAsStmt(executeStmt, yyDollar[4].into, ast.OBJECT_TABLE, false, false)
			// Set relpersistence from OptTemp (following PostgreSQL pattern)
			yyDollar[4].into.Rel.RelPersistence = yyDollar[2].rune
			// Set skipData from opt_with_data (following PostgreSQL pattern)
			yyDollar[4].into.SkipData = !yyDollar[9].bval
			yyVAL.stmt = ctas
		}
	case 3142:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:13819
		{
			executeStmt := ast.NewExecuteStmt(yyDollar[10].str, yyDollar[11].list)
			ctas := ast.NewCreateTableAsStmt(executeStmt, yyDollar[7].into, ast.OBJECT_TABLE, false, true)
			// Set relpersistence from OptTemp (following PostgreSQL pattern)
			yyDollar[7].into.Rel.RelPersistence = yyDollar[2].rune
			// Set skipData from opt_with_data (following PostgreSQL pattern)
			yyDollar[7].into.SkipData = !yyDollar[12].bval
			yyVAL.stmt = ctas
		}
	case 3143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13832
		{
			yyVAL.list = yyDollar[2].list
		}
	case 3144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13835
		{
			yyVAL.list = nil
		}
	case 3145:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:13841
		{
			into := ast.NewIntoClause(yyDollar[1].rangevar, yyDollar[2].list, yyDollar[3].str, yyDollar[4].list, yyDollar[5].oncommit, yyDollar[6].str, nil, false, 0)
			yyVAL.into = into
		}
	case 3146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13849
		{
			yyVAL.stmt = ast.NewDeallocateStmt(yyDollar[2].str)
		}
	case 3147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13853
		{
			yyVAL.stmt = ast.NewDeallocateStmt(yyDollar[3].str)
		}
	case 3148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13857
		{
			yyVAL.stmt = ast.NewDeallocateAllStmt()
		}
	case 3149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13861
		{
			yyVAL.stmt = ast.NewDeallocateAllStmt()
		}
	case 3150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13872
		{
			yyVAL.stmt = ast.NewListenStmt(yyDollar[2].str)
		}
	case 3151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13883
		{
			yyVAL.stmt = ast.NewUnlistenStmt(yyDollar[2].str)
		}
	case 3152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13887
		{
			yyVAL.stmt = ast.NewUnlistenAllStmt()
		}
	case 3153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13898
		{
			yyVAL.stmt = ast.NewNotifyStmt(yyDollar[2].str, yyDollar[3].str)
		}
	case 3154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13908
		{
			yyVAL.str = yyDollar[2].str
		}
	case 3155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13909
		{
			yyVAL.str = ""
		}
	case 3156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13918
		{
			yyVAL.stmt = ast.NewLoadStmt(yyDollar[2].str)
		}
	case 3157:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13929
		{
			stmt := ast.NewLockStmt(yyDollar[3].list, ast.LockMode(yyDollar[4].ival))
			stmt.Nowait = yyDollar[5].bval
			yyVAL.stmt = stmt
		}
	case 3158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13941
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 3159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13942
		{
			yyVAL.ival = int(ast.AccessExclusiveLock)
		}
	case 3160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13946
		{
			yyVAL.ival = int(ast.AccessShareLock)
		}
	case 3161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13947
		{
			yyVAL.ival = int(ast.RowShareLock)
		}
	case 3162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13948
		{
			yyVAL.ival = int(ast.RowExclusiveLock)
		}
	case 3163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13949
		{
			yyVAL.ival = int(ast.ShareUpdateExclusiveLock)
		}
	case 3164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13950
		{
			yyVAL.ival = int(ast.ShareLock)
		}
	case 3165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:13951
		{
			yyVAL.ival = int(ast.ShareRowExclusiveLock)
		}
	case 3166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:13952
		{
			yyVAL.ival = int(ast.ExclusiveLock)
		}
	case 3167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13953
		{
			yyVAL.ival = int(ast.AccessExclusiveLock)
		}
	case 3168:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:13962
		{
			stmt := ast.NewTruncateStmt(yyDollar[3].list)
			stmt.RestartSeqs = yyDollar[4].bval
			stmt.Behavior = yyDollar[5].dropBehav
			yyVAL.stmt = stmt
		}
	case 3169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13975
		{
			yyVAL.bval = false
		}
	case 3170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:13976
		{
			yyVAL.bval = true
		}
	case 3171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:13977
		{
			yyVAL.bval = false
		}
	}
	goto yystack /* stack new state and value */
}
