// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:34
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node     ast.Node
	stmt     ast.Stmt
	stmtList []ast.Stmt
	list     *ast.NodeList

	// Specific AST node types
	into          *ast.IntoClause
	onconflict    *ast.OnConflictClause
	createStmt    *ast.CreateStmt
	indexStmt     *ast.IndexStmt
	alterStmt     *ast.AlterTableStmt
	dropStmt      *ast.DropStmt
	columnDef     *ast.ColumnDef
	constraint    *ast.Constraint
	indexElem     *ast.IndexElem
	alterCmd      *ast.AlterTableCmd
	with          *ast.WithClause
	rangevar      *ast.RangeVar
	objType       ast.ObjectType
	dropBehav     ast.DropBehavior
	typnam        *ast.TypeName
	partspec      *ast.PartitionSpec
	partboundspec *ast.PartitionBoundSpec
	oncommit      ast.OnCommitAction
	defelt        *ast.DefElem
	target        *ast.ResTarget            // For select targets, insert columns
	alias         *ast.Alias                // For table and column aliases
	jtype         ast.JoinType              // For join type specifications
	jexpr         *ast.JoinExpr             // For joined table expressions
	keyaction     *ast.KeyAction            // For foreign key actions
	keyactions    *ast.KeyActions           // For foreign key action sets
	funparam      *ast.FunctionParameter    // For function parameters
	funparammode  ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt      *ast.VariableSetStmt      // For SET/RESET statements
	rolespec      *ast.RoleSpec
	objwithargs   *ast.ObjectWithArgs

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const LATERAL = 57428
const VALUES = 57429
const SEARCH = 57430
const BREADTH = 57431
const DEPTH = 57432
const CYCLE = 57433
const FIRST_P = 57434
const LAST_P = 57435
const SET = 57436
const ASC = 57437
const DESC = 57438
const INSERT = 57439
const UPDATE = 57440
const DELETE_P = 57441
const MERGE = 57442
const RETURNING = 57443
const CONFLICT = 57444
const OVERRIDING = 57445
const USER = 57446
const SYSTEM_P = 57447
const MATCHED = 57448
const THEN = 57449
const SOURCE = 57450
const TARGET = 57451
const DO = 57452
const NOTHING = 57453
const COPY = 57454
const PROGRAM = 57455
const STDIN = 57456
const STDOUT = 57457
const BINARY = 57458
const FREEZE = 57459
const CONSTRAINT = 57460
const VERBOSE = 57461
const ANALYZE = 57462
const CURRENT_P = 57463
const CURSOR = 57464
const OF = 57465
const COLUMNS = 57466
const ORDINALITY = 57467
const XMLTABLE = 57468
const JSON_TABLE = 57469
const ROWS = 57470
const PATH = 57471
const PASSING = 57472
const FOR = 57473
const NESTED = 57474
const REF_P = 57475
const XMLNAMESPACES = 57476
const ARRAY = 57477
const ERROR = 57478
const ERROR_P = 57479
const EMPTY = 57480
const EMPTY_P = 57481
const OBJECT_P = 57482
const WRAPPER = 57483
const CONDITIONAL = 57484
const UNCONDITIONAL = 57485
const QUOTES = 57486
const OMIT = 57487
const KEEP = 57488
const SCALAR = 57489
const STRING_P = 57490
const ENCODING = 57491
const DELIMITER = 57492
const DELIMITERS = 57493
const HEADER_P = 57494
const QUOTE = 57495
const FORCE = 57496
const CSV = 57497
const VALUE_P = 57498
const JSON_QUERY = 57499
const JSON_VALUE = 57500
const JSON_SERIALIZE = 57501
const JSON_OBJECT = 57502
const JSON_ARRAY = 57503
const JSON_OBJECTAGG = 57504
const JSON_ARRAYAGG = 57505
const JSON_EXISTS = 57506
const JSON_SCALAR = 57507
const FORMAT = 57508
const JSON = 57509
const UTF8 = 57510
const WITHOUT = 57511
const BIT = 57512
const NUMERIC = 57513
const INTEGER = 57514
const SMALLINT = 57515
const BIGINT = 57516
const REAL = 57517
const FLOAT_P = 57518
const DOUBLE_P = 57519
const PRECISION = 57520
const CHARACTER = 57521
const CHAR_P = 57522
const VARCHAR = 57523
const NATIONAL = 57524
const NCHAR = 57525
const VARYING = 57526
const TIMESTAMP = 57527
const INTERVAL = 57528
const INT_P = 57529
const DECIMAL_P = 57530
const DEC = 57531
const BOOLEAN_P = 57532
const VARIADIC = 57533
const ABORT_P = 57534
const ABSENT = 57535
const ABSOLUTE_P = 57536
const ACCESS = 57537
const ACTION = 57538
const ADD_P = 57539
const ADMIN = 57540
const AFTER = 57541
const AGGREGATE = 57542
const ALSO = 57543
const ALWAYS = 57544
const ANALYSE = 57545
const ASENSITIVE = 57546
const ASSERTION = 57547
const ASSIGNMENT = 57548
const ATOMIC = 57549
const ATTACH = 57550
const ATTRIBUTE = 57551
const AUTHORIZATION = 57552
const BACKWARD = 57553
const BEFORE = 57554
const BEGIN_P = 57555
const CACHE = 57556
const CALL = 57557
const CALLED = 57558
const CASCADED = 57559
const CATALOG_P = 57560
const CHAIN = 57561
const CHARACTERISTICS = 57562
const CHECKPOINT = 57563
const CLASS = 57564
const CLOSE = 57565
const CLUSTER = 57566
const COALESCE = 57567
const COLLATION = 57568
const COMMENT = 57569
const COMMENTS = 57570
const COMMIT = 57571
const COMMITTED = 57572
const COMPRESSION = 57573
const CONFIGURATION = 57574
const CONNECTION = 57575
const CONSTRAINTS = 57576
const CONTENT_P = 57577
const CONTINUE_P = 57578
const CONVERSION_P = 57579
const COST = 57580
const CUBE = 57581
const CURRENT_CATALOG = 57582
const CURRENT_DATE = 57583
const CURRENT_ROLE = 57584
const CURRENT_SCHEMA = 57585
const CURRENT_TIME = 57586
const CURRENT_TIMESTAMP = 57587
const CURRENT_USER = 57588
const DATA_P = 57589
const DATABASE = 57590
const DAY_P = 57591
const DEALLOCATE = 57592
const DECLARE = 57593
const DEFAULTS = 57594
const DEFERRABLE = 57595
const DEFERRED = 57596
const DEFINER = 57597
const DEPENDS = 57598
const DETACH = 57599
const DICTIONARY = 57600
const DISABLE_P = 57601
const DISCARD = 57602
const DOCUMENT_P = 57603
const DOMAIN_P = 57604
const EACH = 57605
const ELSE = 57606
const ENABLE_P = 57607
const ENCRYPTED = 57608
const END_P = 57609
const ENUM_P = 57610
const EVENT = 57611
const EXCEPT = 57612
const EXCLUDE = 57613
const EXCLUDING = 57614
const EXCLUSIVE = 57615
const EXECUTE = 57616
const EXPLAIN = 57617
const EXPRESSION = 57618
const EXTENSION = 57619
const EXTERNAL = 57620
const EXTRACT = 57621
const FAMILY = 57622
const FETCH = 57623
const FILTER = 57624
const FINALIZE = 57625
const FOLLOWING = 57626
const FOREIGN = 57627
const FORWARD = 57628
const FUNCTION = 57629
const FUNCTIONS = 57630
const GENERATED = 57631
const GLOBAL = 57632
const GRANT = 57633
const GRANTED = 57634
const GREATEST = 57635
const GROUPING = 57636
const GROUPS = 57637
const HANDLER = 57638
const HOLD = 57639
const HOUR_P = 57640
const IDENTITY_P = 57641
const IMMEDIATE = 57642
const IMMUTABLE = 57643
const IMPLICIT_P = 57644
const IMPORT_P = 57645
const INCLUDE = 57646
const INCLUDING = 57647
const INCREMENT = 57648
const INDENT = 57649
const INDEX = 57650
const INDEXES = 57651
const INHERIT = 57652
const INHERITS = 57653
const INITIALLY = 57654
const INLINE_P = 57655
const INPUT_P = 57656
const INSENSITIVE = 57657
const INSTEAD = 57658
const INTERSECT = 57659
const INVOKER = 57660
const ISOLATION = 57661
const KEYS = 57662
const LABEL = 57663
const LANGUAGE = 57664
const LARGE_P = 57665
const LATERAL_P = 57666
const LEAKPROOF = 57667
const LEAST = 57668
const LEADING = 57669
const LEVEL = 57670
const LISTEN = 57671
const LOAD = 57672
const LOCALTIME = 57673
const LOCALTIMESTAMP = 57674
const LOCATION = 57675
const LOCK_P = 57676
const LOCKED = 57677
const LOGGED = 57678
const MAPPING = 57679
const MATCH = 57680
const MAXVALUE = 57681
const MERGE_ACTION = 57682
const METHOD = 57683
const MINUTE_P = 57684
const MINVALUE = 57685
const MODE = 57686
const MONTH_P = 57687
const MOVE = 57688
const NAME_P = 57689
const NAMES = 57690
const NEW = 57691
const NEXT = 57692
const NFC = 57693
const NFD = 57694
const NFKC = 57695
const NFKD = 57696
const NO = 57697
const NONE = 57698
const NORMALIZE = 57699
const NORMALIZED = 57700
const NOTIFY = 57701
const NOWAIT = 57702
const NULLIF = 57703
const OUT_P = 57704
const OVERLAY = 57705
const OVERLAPS = 57706
const OWNED = 57707
const OWNER = 57708
const PARALLEL = 57709
const PARAMETER = 57710
const PARSER = 57711
const PARTIAL = 57712
const PARTITION = 57713
const PASSWORD = 57714
const PLACING = 57715
const PLAN = 57716
const PLANS = 57717
const POLICY = 57718
const POSITION = 57719
const PRECEDING = 57720
const PREPARE = 57721
const PREPARED = 57722
const PRESERVE = 57723
const PRIMARY = 57724
const PRIOR = 57725
const PRIVILEGES = 57726
const PROCEDURAL = 57727
const PROCEDURE = 57728
const PROCEDURES = 57729
const PUBLICATION = 57730
const RANGE = 57731
const READ = 57732
const REASSIGN = 57733
const RECHECK = 57734
const REFERENCES = 57735
const REFERENCING = 57736
const REFRESH = 57737
const REINDEX = 57738
const RELATIVE_P = 57739
const RELEASE = 57740
const RENAME = 57741
const REPEATABLE = 57742
const REPLICA = 57743
const RESET = 57744
const RESTART = 57745
const RETURN = 57746
const RETURNS = 57747
const REVOKE = 57748
const ROLE = 57749
const ROLLBACK = 57750
const ROLLUP = 57751
const ROUTINE = 57752
const ROUTINES = 57753
const ROW = 57754
const RULE = 57755
const SAVEPOINT = 57756
const SCHEMA = 57757
const SCHEMAS = 57758
const SCROLL = 57759
const SECOND_P = 57760
const SECURITY = 57761
const SEQUENCE = 57762
const SEQUENCES = 57763
const SERIALIZABLE = 57764
const SERVER = 57765
const SESSION = 57766
const SESSION_USER = 57767
const SETS = 57768
const SETOF = 57769
const SHARE = 57770
const SHOW = 57771
const SIMPLE = 57772
const SKIP = 57773
const SNAPSHOT = 57774
const SOME = 57775
const SQL_P = 57776
const STABLE = 57777
const STANDALONE_P = 57778
const START = 57779
const STATEMENT = 57780
const STATISTICS = 57781
const STORAGE = 57782
const STORED = 57783
const STRICT_P = 57784
const STRIP_P = 57785
const SUBSCRIPTION = 57786
const SUBSTRING = 57787
const SUPPORT = 57788
const SYSID = 57789
const SYSTEM_USER = 57790
const TABLES = 57791
const TABLESPACE = 57792
const TABLESAMPLE = 57793
const TEMP = 57794
const TEMPLATE = 57795
const TEMPORARY = 57796
const TEXT_P = 57797
const TIES = 57798
const TRAILING = 57799
const TRANSACTION = 57800
const TRANSFORM = 57801
const TREAT = 57802
const TRIGGER = 57803
const TRIM = 57804
const TRUNCATE = 57805
const TRUSTED = 57806
const TYPE_P = 57807
const TYPES_P = 57808
const UESCAPE = 57809
const UNBOUNDED = 57810
const UNCOMMITTED = 57811
const UNENCRYPTED = 57812
const UNION = 57813
const UNIQUE = 57814
const UNLISTEN = 57815
const UNLOGGED = 57816
const UNTIL = 57817
const VACUUM = 57818
const VALID = 57819
const VALIDATE = 57820
const VALIDATOR = 57821
const VERSION_P = 57822
const VIEW = 57823
const VIEWS = 57824
const VOLATILE = 57825
const WHITESPACE_P = 57826
const WINDOW = 57827
const WITHIN = 57828
const WORK = 57829
const WRITE = 57830
const XML_P = 57831
const XMLATTRIBUTES = 57832
const XMLCONCAT = 57833
const XMLELEMENT = 57834
const XMLEXISTS = 57835
const XMLFOREST = 57836
const XMLPARSE = 57837
const XMLPI = 57838
const XMLROOT = 57839
const XMLSERIALIZE = 57840
const YEAR_P = 57841
const YES_P = 57842
const INOUT = 57843
const OTHERS = 57844
const OLD = 57845
const KEY = 57846
const OFF = 57847
const OIDS = 57848
const OPTION = 57849
const OPTIONS = 57850
const OVER = 57851
const ORDER = 57852
const ANY = 57853
const BOTH = 57854
const CAST = 57855
const CHECK = 57856
const COLUMN = 57857
const FORMAT_LA = 57858
const NOT_LA = 57859
const NULLS_LA = 57860
const WITH_LA = 57861
const WITHOUT_LA = 57862
const MODE_TYPE_NAME = 57863
const MODE_PLPGSQL_EXPR = 57864
const MODE_PLPGSQL_ASSIGN1 = 57865
const MODE_PLPGSQL_ASSIGN2 = 57866
const MODE_PLPGSQL_ASSIGN3 = 57867
const UMINUS = 57868

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"LATERAL",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ANALYSE",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:9564

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 41,
	541, 41,
	-2, 1312,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	67, 1620,
	84, 1620,
	85, 2257,
	308, 1787,
	420, 1620,
	481, 1620,
	-2, 54,
	-1, 60,
	1, 41,
	541, 41,
	-2, 1312,
	-1, 87,
	85, 2256,
	-2, 1619,
	-1, 159,
	61, 259,
	64, 259,
	528, 259,
	534, 259,
	-2, 2300,
	-1, 603,
	84, 1620,
	481, 1620,
	-2, 53,
	-1, 605,
	210, 42,
	-2, 2263,
	-1, 659,
	16, 1177,
	17, 1177,
	532, 1177,
	-2, 60,
	-1, 660,
	16, 1178,
	17, 1178,
	532, 1178,
	-2, 61,
	-1, 967,
	6, 1716,
	12, 1716,
	535, 1716,
	536, 1716,
	-2, 1709,
	-1, 1146,
	1, 617,
	26, 617,
	36, 617,
	64, 617,
	65, 617,
	73, 617,
	74, 617,
	101, 617,
	533, 617,
	541, 617,
	542, 617,
	-2, 1248,
	-1, 1611,
	532, 1141,
	-2, 1127,
	-1, 1779,
	118, 54,
	308, 1787,
	461, 54,
	-2, 1620,
	-1, 1832,
	532, 1789,
	-2, 183,
	-1, 2013,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1049,
	-1, 2014,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1050,
	-1, 2015,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1051,
	-1, 2016,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1052,
	-1, 2017,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1053,
	-1, 2018,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1054,
	-1, 2023,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1062,
	-1, 2029,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1066,
	-1, 2065,
	532, 1140,
	-2, 1181,
	-1, 2169,
	40, 1185,
	510, 1185,
	528, 1185,
	533, 1185,
	542, 1185,
	-2, 1181,
	-1, 2197,
	210, 42,
	-2, 2263,
	-1, 2334,
	508, 2203,
	-2, 2196,
	-1, 2426,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1064,
	-1, 2427,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1068,
	-1, 2440,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1081,
	-1, 2511,
	532, 1141,
	-2, 76,
	-1, 2517,
	151, 1552,
	-2, 1487,
	-1, 2679,
	6, 1716,
	12, 1716,
	535, 1716,
	536, 1716,
	-2, 1690,
	-1, 2772,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1063,
	-1, 2777,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1083,
	-1, 2778,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1067,
	-1, 3047,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1065,
	-1, 3048,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1069,
	-1, 3052,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1075,
	-1, 3060,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1095,
	-1, 3061,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1096,
	-1, 3062,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1097,
	-1, 3063,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1098,
	-1, 3064,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1099,
	-1, 3065,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1100,
	-1, 3066,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1077,
	-1, 3067,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1082,
	-1, 3137,
	541, 41,
	-2, 1312,
	-1, 3250,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1076,
	-1, 3251,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1078,
	-1, 3252,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1084,
	-1, 3797,
	7, 1437,
	-2, 260,
}

const yyPrivate = 57344

const yyLast = 60992

var yyAct = [...]int16{
	581, 3850, 3794, 3839, 3909, 3892, 3681, 3849, 3840, 846,
	2421, 3174, 3861, 3878, 3708, 822, 2127, 3100, 2079, 2248,
	3795, 3076, 2661, 3492, 3391, 3433, 3320, 3611, 2302, 3507,
	2082, 3676, 3196, 3403, 1091, 3593, 1732, 3095, 3666, 2626,
	871, 3363, 3126, 3526, 3514, 955, 3648, 3472, 3717, 3600,
	162, 162, 3075, 3434, 2859, 3508, 571, 1754, 2537, 3301,
	2204, 3509, 3536, 571, 891, 3277, 2414, 571, 2643, 3274,
	2297, 3349, 3093, 605, 608, 611, 608, 609, 608, 5,
	2134, 2506, 2923, 3195, 2064, 3221, 3133, 2855, 2164, 2966,
	571, 571, 571, 571, 3358, 1843, 658, 608, 608, 2254,
	608, 658, 2522, 3154, 610, 656, 658, 3383, 658, 2097,
	690, 2198, 895, 1627, 2538, 690, 836, 690, 608, 3308,
	608, 2647, 2170, 608, 2157, 40, 727, 4, 861, 2603,
	2863, 3107, 3284, 3084, 843, 2607, 1778, 18, 2122, 1100,
	1777, 17, 3206, 2117, 3103, 591, 563, 52, 2916, 889,
	2589, 162, 162, 2492, 692, 1776, 12, 2296, 1775, 11,
	2467, 2096, 2269, 2184, 1811, 568, 2655, 2188, 942, 2678,
	1803, 2175, 587, 2189, 2949, 2120, 2187, 1753, 2160, 2119,
	2568, 3677, 2205, 1807, 907, 40, 2062, 1797, 1734, 1041,
	812, 2833, 2083, 1607, 2222, 2484, 1096, 18, 786, 642,
	1051, 17, 1911, 2301, 851, 987, 590, 52, 1827, 914,
	725, 2249, 879, 2629, 2136, 2105, 12, 1785, 2454, 11,
	2174, 2162, 2513, 2100, 153, 1733, 1599, 2104, 982, 2093,
	2103, 2102, 1707, 2058, 2052, 2034, 2037, 1090, 41, 2095,
	838, 784, 689, 655, 2221, 691, 921, 2220, 733, 733,
	923, 68, 1816, 2112, 1620, 813, 731, 693, 604, 2002,
	123, 724, 70, 122, 734, 1760, 1088, 1119, 1804, 980,
	586, 51, 577, 2577, 1031, 1056, 3792, 3791, 2422, 2495,
	3657, 579, 3550, 3408, 607, 1032, 626, 790, 628, 2781,
	3940, 1031, 561, 2791, 2792, 2793, 2576, 3931, 3443, 3824,
	3929, 920, 1032, 3869, 1031, 2578, 3870, 685, 686, 3824,
	688, 2069, 3870, 957, 1120, 1032, 2781, 3848, 3846, 3405,
	2791, 2792, 2793, 2781, 560, 3832, 3562, 1713, 719, 3823,
	721, 582, 3050, 3808, 1713, 3801, 3775, 3731, 3824, 2088,
	3696, 2115, 3809, 3690, 2472, 3259, 2115, 3663, 706, 3697,
	708, 3753, 3691, 2003, 3641, 3640, 2615, 802, 3637, 833,
	715, 716, 1122, 1713, 1713, 3561, 3559, 3638, 1107, 3486,
	1097, 797, 3567, 3471, 3562, 1034, 845, 3460, 3259, 3442,
	3429, 959, 3470, 767, 2444, 1722, 3461, 1720, 3441, 1034,
	3247, 3098, 1719, 1723, 1718, 2445, 1724, 3368, 796, 798,
	800, 804, 3357, 1721, 1109, 3355, 3369, 1112, 3337, 2443,
	1725, 2115, 3268, 1111, 2578, 3267, 3258, 3336, 803, 1121,
	1713, 3269, 1110, 3245, 1034, 3259, 2784, 2785, 2786, 2787,
	3192, 3191, 3246, 1814, 2926, 3190, 3184, 2882, 1113, 3193,
	2115, 3148, 2781, 1745, 2115, 2115, 2791, 2792, 2793, 2881,
	2578, 3118, 2872, 2797, 2765, 2702, 2689, 2580, 3049, 2559,
	3119, 2115, 1713, 1713, 2703, 2690, 2581, 2477, 2560, 2471,
	2462, 2809, 2453, 2446, 2482, 2402, 2478, 2200, 2472, 1713,
	833, 1713, 1713, 1122, 1713, 2116, 2201, 1132, 1133, 1134,
	1125, 1126, 1127, 1128, 2115, 3490, 2075, 2615, 2071, 1715,
	2520, 1714, 1716, 2455, 958, 1034, 1722, 1713, 1720, 789,
	1713, 2044, 1997, 1719, 1723, 1718, 857, 1724, 576, 60,
	2787, 1717, 1138, 1139, 1721, 1043, 1128, 1782, 1782, 845,
	3684, 1725, 2892, 3143, 849, 661, 853, 3197, 853, 810,
	852, 1043, 852, 894, 1782, 2781, 2691, 894, 2869, 2791,
	2792, 2793, 2692, 1043, 897, 1782, 794, 3208, 1097, 3873,
	1122, 2796, 1789, 3735, 845, 835, 835, 1052, 1053, 3554,
	1052, 1053, 3553, 571, 3552, 787, 3419, 3685, 3415, 833,
	1054, 2934, 1122, 1050, 835, 1720, 571, 3372, 866, 571,
	571, 3367, 3327, 3682, 571, 571, 960, 571, 3073, 658,
	658, 1721, 3072, 658, 1748, 3071, 3070, 1720, 881, 882,
	3051, 2925, 885, 57, 2843, 2818, 2804, 1030, 2634, 2614,
	165, 2575, 792, 1721, 2621, 791, 961, 2519, 3365, 962,
	1725, 2447, 2409, 963, 571, 2407, 2404, 700, 2403, 2070,
	54, 1898, 2251, 46, 55, 1755, 788, 45, 47, 905,
	700, 700, 870, 571, 571, 964, 1801, 57, 1608, 899,
	53, 1608, 810, 809, 59, 3930, 3907, 3903, 872, 3811,
	3785, 3759, 3752, 3706, 3515, 3616, 3613, 1844, 3535, 3531,
	2821, 2523, 3476, 1790, 54, 67, 3432, 3397, 55, 3381,
	3380, 3379, 896, 967, 3109, 3263, 700, 3129, 587, 587,
	3113, 3097, 3089, 608, 608, 2929, 954, 57, 59, 833,
	965, 1730, 1122, 2921, 2507, 49, 2913, 2905, 2561, 2877,
	3217, 2813, 699, 2845, 2115, 2115, 2838, 966, 2115, 2760,
	3406, 3406, 2668, 44, 54, 699, 699, 1720, 55, 898,
	2798, 904, 2933, 833, 2667, 3649, 1122, 2660, 2510, 2509,
	1132, 1133, 1134, 1721, 2465, 2088, 847, 1836, 59, 1122,
	1725, 2039, 1715, 976, 968, 1716, 2386, 3406, 2347, 1722,
	608, 1720, 2247, 2582, 1728, 2207, 1719, 1723, 1718, 1122,
	1724, 699, 2824, 1121, 1717, 1138, 1139, 1721, 2202, 893,
	2129, 1610, 1029, 583, 1725, 1104, 2870, 1981, 1080, 2089,
	850, 2788, 2789, 2790, 1720, 1863, 1770, 3278, 1761, 1038,
	2782, 2783, 2784, 2785, 2786, 2787, 1618, 1800, 835, 835,
	835, 835, 1034, 3723, 1616, 835, 1788, 1615, 2788, 2789,
	2790, 2088, 1609, 53, 908, 560, 1058, 2782, 2783, 2784,
	2785, 2786, 2787, 835, 2782, 2783, 2784, 2785, 2786, 2787,
	1043, 858, 1749, 1045, 835, 886, 571, 835, 2781, 868,
	869, 3366, 2791, 2792, 2793, 1141, 1736, 833, 1737, 1114,
	1122, 981, 860, 1746, 2780, 856, 2709, 571, 3609, 1006,
	1759, 1622, 3863, 1123, 1124, 1125, 1126, 1127, 1128, 1052,
	1053, 1913, 3484, 3016, 3011, 1720, 1834, 2719, 611, 1098,
	1099, 608, 608, 608, 608, 3483, 608, 2627, 2329, 1101,
	1101, 1721, 1101, 996, 997, 3325, 1751, 943, 1725, 2325,
	571, 1042, 1886, 1622, 3608, 1786, 3482, 1825, 1092, 1092,
	2265, 1108, 1815, 2711, 805, 571, 1004, 608, 1047, 1048,
	1049, 3332, 3475, 1727, 2912, 571, 2253, 946, 2252, 2192,
	952, 571, 970, 1601, 2788, 2789, 2790, 2868, 1055, 1772,
	993, 57, 1007, 2782, 2783, 2784, 2785, 2786, 2787, 3351,
	571, 3345, 2781, 571, 919, 1787, 2791, 2792, 2793, 1005,
	1078, 1084, 3864, 1081, 593, 1709, 1141, 1712, 54, 1817,
	876, 1075, 55, 778, 771, 1129, 1130, 1131, 3344, 571,
	1871, 595, 3777, 652, 1123, 1124, 1125, 1126, 1127, 1128,
	571, 571, 59, 1747, 1781, 3142, 48, 1007, 608, 608,
	608, 608, 3683, 50, 804, 85, 1082, 2418, 853, 608,
	608, 1066, 852, 804, 804, 1860, 1106, 608, 1059, 1060,
	3185, 803, 1063, 1773, 835, 943, 833, 2987, 2883, 1122,
	803, 803, 3209, 3210, 1864, 1619, 1604, 2788, 2789, 2790,
	1102, 915, 601, 561, 1611, 1824, 2782, 2783, 2784, 2785,
	2786, 2787, 1808, 2817, 1720, 1101, 571, 2774, 1913, 1101,
	1101, 1123, 1124, 1125, 1126, 1127, 1128, 1098, 1099, 793,
	1721, 2665, 896, 884, 1876, 794, 58, 1725, 1879, 1880,
	3331, 65, 1821, 1123, 1124, 1125, 1126, 1127, 1128, 53,
	776, 1791, 1792, 1793, 1794, 1617, 1795, 896, 2278, 714,
	1991, 571, 835, 3352, 835, 835, 835, 835, 835, 835,
	835, 835, 835, 835, 835, 835, 835, 835, 1757, 1710,
	58, 835, 833, 835, 608, 1122, 835, 1857, 1762, 1783,
	3175, 1883, 1884, 53, 1818, 2656, 1805, 2276, 2631, 3656,
	1968, 1972, 1976, 733, 3623, 1910, 2277, 1977, 896, 1808,
	1720, 1980, 1975, 2773, 1927, 1982, 833, 2658, 2041, 1122,
	1833, 1835, 3724, 1132, 1133, 1134, 1721, 1619, 733, 3547,
	58, 1831, 3153, 1725, 641, 1715, 640, 3545, 1936, 3229,
	3004, 2597, 1722, 1729, 1720, 2275, 2562, 3001, 2593, 1719,
	1723, 1718, 2264, 1724, 2328, 1998, 2000, 1717, 1138, 1139,
	1721, 2218, 1875, 1808, 1887, 1853, 1852, 1725, 1939, 1940,
	1941, 1942, 1974, 1123, 1124, 1125, 1126, 1127, 1128, 593,
	1967, 2176, 2178, 2177, 1869, 2006, 957, 1970, 1928, 1141,
	1838, 2223, 1988, 2671, 2977, 1865, 595, 86, 1129, 1130,
	1131, 2217, 2989, 1907, 3186, 3767, 2417, 1123, 1124, 1125,
	1126, 1127, 1128, 988, 1851, 1889, 1841, 785, 1893, 1992,
	1123, 1124, 1125, 1126, 1127, 1128, 1960, 71, 1830, 1950,
	1966, 3511, 1847, 1818, 3498, 3726, 2223, 1973, 2995, 1074,
	1123, 1124, 1125, 1126, 1127, 1128, 639, 3634, 638, 1020,
	2224, 3371, 85, 3618, 959, 3172, 3166, 909, 601, 700,
	2672, 3045, 1985, 2412, 833, 1072, 2368, 1122, 700, 700,
	1818, 1132, 1133, 1134, 2231, 1018, 3446, 1983, 1984, 3619,
	989, 2632, 2701, 1715, 3778, 1035, 1716, 1818, 1818, 1039,
	1722, 1818, 1720, 2698, 2030, 2224, 1771, 1719, 1723, 1718,
	2697, 1724, 1818, 790, 2548, 1717, 1138, 1139, 1721, 3101,
	2788, 2789, 2790, 1818, 1912, 1725, 1818, 2005, 1829, 2782,
	2783, 2784, 2785, 2786, 2787, 1064, 1818, 833, 1626, 2287,
	1122, 1123, 1124, 1125, 1126, 1127, 1128, 3330, 594, 2332,
	602, 1994, 903, 1085, 699, 600, 1862, 2539, 3025, 2986,
	1023, 1995, 2740, 699, 699, 1720, 2739, 1839, 2432, 84,
	1828, 83, 2374, 2674, 700, 2373, 2372, 2371, 901, 2364,
	1626, 1721, 1626, 1996, 2225, 46, 1071, 958, 1725, 45,
	47, 887, 2363, 990, 58, 3318, 1017, 2355, 1933, 57,
	2599, 1917, 1016, 700, 2950, 1015, 1013, 53, 1012, 1008,
	1003, 1002, 1001, 1000, 994, 992, 3386, 985, 984, 983,
	2974, 979, 3145, 1625, 790, 2419, 54, 3709, 2861, 2225,
	55, 3693, 1867, 1820, 2788, 2789, 2790, 598, 816, 1819,
	3013, 1848, 2715, 2782, 2783, 2784, 2785, 2786, 2787, 2978,
	59, 2567, 1850, 1849, 2712, 3404, 2769, 49, 3506, 699,
	1882, 3720, 2976, 2956, 2266, 1625, 775, 1625, 3364, 1872,
	1073, 770, 3719, 636, 2699, 44, 1872, 2294, 2551, 960,
	1019, 1842, 2285, 2280, 1118, 1083, 3043, 777, 699, 900,
	701, 807, 2885, 2595, 86, 2549, 2956, 1765, 3339, 3141,
	700, 1846, 2856, 3694, 2598, 1840, 1856, 3624, 3189, 961,
	1764, 1912, 962, 3504, 2700, 2664, 963, 3115, 597, 3612,
	1123, 1124, 1125, 1126, 1127, 1128, 3710, 3384, 1755, 3188,
	1022, 3721, 3512, 3542, 2919, 789, 599, 1861, 964, 1856,
	2984, 3171, 596, 833, 2229, 3845, 1122, 3615, 2540, 880,
	3114, 702, 2801, 3714, 700, 2886, 2053, 2179, 2550, 835,
	835, 611, 2215, 1844, 2770, 3495, 835, 835, 1086, 835,
	2910, 1720, 2971, 902, 2425, 3187, 967, 773, 2673, 2679,
	2920, 1904, 653, 2594, 633, 699, 3375, 1721, 3046, 3499,
	2592, 2637, 3513, 965, 1725, 986, 3621, 1117, 2591, 2597,
	2950, 787, 3309, 594, 3598, 3310, 2593, 1943, 3311, 703,
	966, 600, 2979, 2656, 1766, 3036, 1123, 1124, 1125, 1126,
	1127, 1128, 783, 1116, 2585, 2596, 3312, 2216, 3035, 888,
	3340, 808, 1141, 2879, 1986, 1626, 2918, 2181, 2050, 699,
	3780, 1129, 1130, 1131, 1057, 1027, 789, 968, 1046, 783,
	1123, 1124, 1125, 1126, 1127, 1128, 84, 3281, 83, 1076,
	1061, 1062, 1855, 3314, 835, 3886, 835, 835, 2679, 835,
	835, 608, 788, 3313, 991, 3880, 88, 2588, 887, 3111,
	2084, 3439, 2086, 3315, 943, 2957, 1736, 2045, 2049, 3321,
	2109, 2109, 3800, 3261, 2055, 1855, 2470, 2067, 1825, 608,
	1947, 1946, 1945, 3447, 3440, 1844, 3939, 3457, 149, 3938,
	3935, 3014, 787, 2716, 785, 3934, 1024, 1873, 2957, 3912,
	1625, 1874, 571, 3458, 1873, 2713, 3894, 3893, 1874, 3898,
	3911, 2197, 1021, 3927, 3917, 3897, 3899, 3900, 3926, 2206,
	3918, 3914, 3915, 3896, 2958, 3913, 3522, 608, 3916, 3895,
	1871, 1825, 2048, 2935, 2042, 1944, 1070, 772, 48, 1619,
	978, 1622, 654, 911, 632, 50, 1619, 2540, 2917, 2450,
	571, 571, 3942, 3876, 1825, 1069, 2909, 2958, 3877, 3891,
	1141, 1604, 3347, 788, 2256, 3695, 2260, 2959, 2649, 1129,
	1130, 1131, 3718, 2172, 918, 3933, 2163, 3932, 1123, 1124,
	1125, 1126, 1127, 1128, 2235, 2163, 571, 2651, 3879, 957,
	3139, 2640, 2600, 3316, 3317, 1026, 3297, 2972, 571, 2546,
	2959, 3293, 3322, 2270, 2110, 2110, 2413, 2066, 2395, 3456,
	1014, 2182, 608, 608, 3851, 3096, 3570, 3856, 3864, 3828,
	2973, 3854, 571, 3855, 3857, 3762, 571, 3761, 2599, 3860,
	3672, 2844, 2111, 2208, 2209, 2210, 2211, 2212, 835, 779,
	781, 1123, 1124, 1125, 1126, 1127, 1128, 3885, 3921, 3793,
	3674, 2601, 3169, 2193, 2091, 3272, 3667, 959, 1068, 2648,
	3125, 2030, 58, 2826, 2573, 2161, 2227, 2180, 2125, 1087,
	3290, 3291, 1858, 2320, 2226, 53, 1902, 917, 2245, 3077,
	2257, 608, 658, 3669, 2113, 658, 611, 658, 658, 2124,
	1914, 656, 3668, 2092, 690, 1837, 690, 690, 561, 3670,
	3680, 1905, 797, 3299, 3292, 3678, 3295, 3296, 3298, 3294,
	1904, 3853, 835, 3858, 2292, 3576, 3577, 3074, 608, 3686,
	3687, 2595, 2087, 3256, 1101, 3580, 2114, 3575, 3450, 2243,
	1101, 1101, 2598, 1903, 2109, 2331, 3257, 2213, 3579, 3448,
	3288, 2080, 2081, 2313, 2288, 3451, 3685, 3106, 3884, 2316,
	2317, 2469, 2468, 2291, 3630, 835, 835, 2293, 3629, 3630,
	3629, 2194, 3831, 2392, 3557, 835, 835, 2199, 3556, 2196,
	835, 835, 2195, 3537, 3538, 835, 61, 62, 63, 64,
	958, 3671, 3736, 3737, 835, 2290, 3679, 3424, 1906, 3421,
	835, 835, 835, 2680, 865, 2236, 3255, 2468, 774, 720,
	835, 3423, 3422, 627, 3685, 3758, 2387, 2461, 2945, 2515,
	2516, 2594, 2396, 54, 2085, 3287, 2074, 55, 2466, 1736,
	835, 637, 2314, 2315, 148, 835, 3890, 2250, 2494, 2494,
	658, 2644, 2109, 2494, 2494, 2494, 3789, 59, 3359, 3544,
	2408, 2304, 2255, 3040, 1101, 3039, 2518, 1123, 1124, 1125,
	1126, 1127, 1128, 2596, 571, 2976, 571, 571, 3790, 2854,
	1746, 571, 571, 1092, 1919, 1918, 1740, 1739, 2110, 2834,
	2073, 2334, 960, 2326, 2333, 3087, 2829, 2330, 2251, 2832,
	2490, 2488, 2489, 2487, 608, 2572, 2555, 162, 2828, 3941,
	3925, 2384, 2351, 3924, 3923, 3874, 2303, 2572, 2439, 3473,
	2309, 3510, 961, 3628, 3626, 962, 3130, 2878, 2547, 963,
	2366, 2367, 2400, 2356, 2131, 2078, 2377, 2318, 2380, 1845,
	2323, 1755, 1036, 571, 1010, 2385, 2897, 2388, 1009, 2393,
	2394, 964, 3086, 2485, 2490, 2488, 2489, 2487, 2571, 2483,
	2486, 3085, 2512, 2485, 2490, 2488, 2489, 2487, 998, 2483,
	2486, 848, 2535, 1120, 2527, 589, 585, 3659, 571, 571,
	1786, 2570, 2583, 2416, 2110, 2420, 2110, 3658, 804, 967,
	3581, 2530, 3437, 2423, 3230, 3117, 2456, 2563, 835, 2411,
	3005, 2564, 2566, 3002, 2479, 803, 965, 2898, 2579, 1881,
	1878, 2422, 2428, 2502, 2430, 3176, 2094, 2687, 1101, 1101,
	2441, 3354, 1744, 966, 3177, 1743, 2508, 2003, 561, 588,
	3729, 2681, 3413, 3410, 3238, 3225, 2449, 2552, 2553, 3219,
	2433, 2604, 3218, 3178, 2457, 2458, 3023, 2042, 3022, 3015,
	3010, 2752, 2463, 2751, 2750, 2749, 2748, 2610, 2747, 2744,
	968, 2473, 2743, 2641, 2475, 2741, 2605, 2474, 1626, 1101,
	2732, 2730, 2718, 2717, 2714, 2501, 2620, 2499, 2646, 2616,
	2498, 2497, 2645, 2431, 2382, 2544, 2365, 2517, 2511, 2352,
	561, 2429, 2036, 1979, 2040, 2035, 2036, 2586, 835, 1938,
	2541, 1937, 1935, 2514, 1934, 2514, 1930, 571, 1926, 1925,
	1924, 1923, 1922, 1916, 2554, 1915, 1871, 1901, 1900, 2704,
	2705, 2737, 1899, 1897, 1870, 1866, 1859, 2491, 2543, 804,
	1626, 2556, 2503, 2504, 2505, 2565, 1741, 2031, 3, 2032,
	2406, 608, 608, 2405, 806, 700, 803, 795, 1978, 1626,
	3493, 608, 2574, 1625, 2625, 2485, 2490, 2488, 2489, 2487,
	2053, 2483, 2486, 2623, 2624, 155, 2628, 3782, 3749, 2602,
	3588, 2910, 3204, 835, 3781, 2677, 835, 797, 2022, 835,
	835, 3200, 835, 835, 835, 837, 797, 835, 835, 2633,
	2638, 845, 3136, 2608, 2021, 2884, 2534, 2424, 2619, 584,
	2348, 835, 700, 2345, 2650, 2657, 835, 804, 804, 2341,
	835, 835, 2670, 1892, 2666, 1625, 552, 1929, 141, 835,
	700, 700, 840, 2084, 803, 803, 841, 951, 839, 1736,
	699, 2026, 945, 2109, 1625, 2663, 2109, 566, 2025, 2027,
	2024, 2960, 2028, 797, 2837, 2662, 1908, 2494, 2494, 2494,
	2494, 2494, 2731, 3847, 2706, 1907, 3197, 567, 3160, 2756,
	835, 835, 2924, 835, 2128, 102, 3127, 3155, 2761, 2415,
	1031, 1825, 603, 3194, 2866, 3121, 801, 2250, 2754, 2628,
	2653, 1032, 2242, 700, 2234, 2132, 1810, 699, 1802, 1756,
	1750, 835, 2708, 916, 910, 591, 906, 890, 3285, 2735,
	2819, 2820, 3396, 3395, 3037, 699, 699, 2947, 2710, 2734,
	2684, 2682, 835, 835, 2652, 2642, 2531, 2232, 1808, 2228,
	2130, 2126, 571, 2528, 1746, 1989, 1987, 2720, 1895, 2755,
	1891, 1806, 1798, 1796, 2397, 1780, 2398, 1065, 2399, 1040,
	1037, 2401, 608, 1033, 1028, 999, 972, 2768, 835, 571,
	2904, 2757, 2758, 2410, 969, 2763, 2871, 950, 2764, 164,
	944, 2762, 3202, 2876, 2911, 1081, 2206, 2110, 699, 2753,
	2110, 3201, 608, 804, 2379, 1779, 880, 2867, 769, 2723,
	2874, 3754, 3662, 2728, 3622, 2823, 892, 3398, 3333, 2800,
	803, 3271, 2806, 571, 2827, 2163, 2042, 2830, 3205, 3173,
	3159, 3149, 2890, 1825, 2891, 3038, 2526, 2951, 2233, 2815,
	2941, 1746, 2865, 2163, 2163, 2822, 1746, 2825, 1746, 2968,
	1077, 2604, 2814, 1731, 700, 2807, 2808, 2810, 2042, 2937,
	2835, 2836, 2831, 2990, 1711, 2459, 2460, 2610, 2001, 2963,
	2967, 1999, 2848, 845, 845, 3883, 2605, 845, 2851, 1101,
	2857, 3865, 797, 2902, 3494, 660, 1877, 2873, 2939, 2853,
	660, 698, 2903, 1115, 1993, 660, 1619, 660, 2975, 2270,
	799, 2994, 2931, 1105, 698, 698, 3137, 3353, 3712, 1998,
	2000, 3348, 3144, 3497, 2161, 759, 759, 1626, 2932, 2887,
	2906, 3350, 3617, 2900, 2895, 3346, 1763, 3341, 657, 2901,
	2893, 2542, 700, 700, 2141, 2899, 2545, 2135, 1974, 699,
	2532, 2158, 2154, 547, 548, 154, 1909, 2186, 2980, 2983,
	698, 1769, 1768, 1025, 835, 835, 2839, 2840, 2841, 2842,
	2604, 835, 2381, 835, 835, 835, 835, 835, 835, 835,
	835, 835, 835, 835, 835, 1808, 2610, 835, 2922, 835,
	2214, 1948, 2908, 2110, 835, 2605, 835, 2940, 1101, 2936,
	835, 2930, 2618, 2928, 2617, 38, 37, 36, 2968, 35,
	34, 2993, 1625, 2608, 2938, 835, 33, 32, 2946, 2109,
	2109, 31, 2927, 2109, 1626, 1626, 1626, 699, 699, 2981,
	3078, 30, 2434, 2438, 2494, 2985, 658, 2982, 29, 28,
	27, 26, 25, 2992, 24, 23, 22, 21, 20, 19,
	39, 2997, 16, 2389, 2988, 1774, 82, 570, 863, 1825,
	608, 1784, 2675, 3164, 740, 740, 2654, 2948, 2683, 124,
	2685, 1949, 947, 3041, 2969, 3773, 2268, 3599, 2860, 3128,
	69, 3505, 2590, 2587, 2955, 2858, 3525, 2965, 571, 2864,
	2121, 2862, 2118, 3827, 3053, 3099, 1746, 3852, 3569, 3675,
	3112, 3445, 3276, 3665, 835, 3028, 3132, 3270, 700, 1625,
	1625, 1625, 611, 3092, 2203, 608, 56, 3420, 3116, 3254,
	2072, 1738, 2608, 43, 1825, 3131, 565, 564, 3661, 811,
	2676, 3462, 3592, 3300, 3108, 3289, 2852, 66, 1825, 700,
	3080, 3181, 2110, 1742, 3105, 3104, 3158, 3578, 3574, 3573,
	2733, 2816, 3134, 2110, 2110, 3090, 2077, 2110, 3102, 2090,
	1726, 835, 15, 14, 13, 10, 3183, 3012, 3120, 9,
	2110, 8, 3017, 2163, 7, 6, 613, 2606, 3180, 3122,
	3082, 3083, 3069, 3034, 3088, 2452, 2806, 3091, 2054, 3161,
	3165, 1614, 753, 699, 752, 737, 3140, 739, 755, 754,
	738, 1044, 3123, 736, 735, 761, 3156, 2896, 2759, 2046,
	831, 830, 2051, 2448, 1612, 825, 826, 821, 2289, 2766,
	2686, 2707, 2975, 2969, 699, 2295, 3543, 3110, 2378, 859,
	1153, 3306, 1150, 2, 3235, 1, 0, 0, 0, 0,
	835, 835, 835, 3198, 3167, 0, 3151, 0, 3152, 0,
	0, 3094, 3147, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3168, 0, 0,
	3124, 0, 0, 0, 0, 0, 0, 835, 2109, 0,
	0, 3224, 0, 0, 0, 0, 1101, 835, 835, 835,
	0, 0, 0, 0, 2954, 1101, 1101, 0, 0, 2962,
	3212, 2964, 0, 0, 571, 0, 0, 0, 3323, 3207,
	2866, 700, 3138, 3179, 3213, 3203, 571, 0, 0, 3207,
	2968, 571, 3214, 3211, 0, 3162, 0, 0, 3302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3222, 0, 0,
	3222, 3242, 0, 0, 0, 0, 0, 3163, 0, 0,
	571, 0, 0, 0, 660, 660, 700, 3326, 0, 0,
	0, 3305, 3334, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 660, 2968, 611, 0, 608, 608, 0,
	0, 0, 0, 0, 0, 0, 699, 0, 660, 660,
	3374, 0, 660, 0, 0, 2967, 3266, 3262, 0, 0,
	0, 0, 2110, 3338, 0, 0, 1626, 3328, 1626, 3356,
	0, 0, 0, 0, 0, 3319, 2775, 2776, 3286, 1626,
	3335, 0, 3303, 0, 2794, 2795, 820, 3283, 0, 3265,
	3324, 3361, 3343, 3377, 0, 0, 0, 3407, 2865, 0,
	2968, 699, 40, 3282, 2110, 3342, 0, 0, 3360, 3425,
	658, 0, 3389, 3435, 18, 835, 3240, 3241, 17, 0,
	835, 3426, 0, 3388, 52, 0, 835, 0, 3253, 0,
	0, 0, 3382, 12, 0, 3399, 11, 0, 3385, 0,
	3387, 0, 0, 0, 0, 0, 2604, 0, 0, 0,
	0, 1625, 0, 1625, 3468, 0, 3412, 0, 0, 0,
	0, 0, 2610, 0, 1625, 0, 1998, 2000, 2110, 0,
	0, 2605, 3469, 0, 1101, 0, 0, 3463, 0, 0,
	0, 3427, 3431, 3436, 0, 2969, 0, 3400, 0, 3150,
	3430, 0, 3304, 0, 0, 571, 0, 3452, 3453, 0,
	0, 3454, 3455, 0, 0, 0, 0, 835, 0, 3416,
	3418, 0, 0, 0, 3503, 0, 3500, 0, 0, 0,
	3044, 835, 835, 3480, 0, 3222, 0, 571, 0, 0,
	3428, 0, 0, 698, 2110, 3478, 0, 0, 835, 3502,
	0, 0, 698, 698, 2110, 2914, 0, 3392, 3393, 2969,
	3518, 0, 0, 3485, 0, 3479, 3523, 3474, 3489, 1101,
	3496, 3134, 1746, 3488, 0, 1736, 0, 660, 660, 660,
	660, 0, 3481, 2206, 660, 3487, 0, 3477, 3464, 0,
	3517, 0, 835, 0, 3524, 3549, 0, 3571, 0, 0,
	0, 0, 660, 0, 0, 0, 0, 1746, 2608, 1746,
	3520, 3558, 1624, 660, 0, 1626, 660, 3491, 0, 0,
	0, 571, 3568, 0, 0, 2969, 3521, 3601, 3540, 0,
	0, 0, 0, 0, 3597, 3094, 0, 3530, 3539, 3532,
	3302, 3534, 0, 3560, 0, 0, 0, 0, 698, 0,
	0, 759, 3594, 0, 1624, 3604, 1624, 3566, 3565, 3528,
	3529, 0, 0, 0, 0, 0, 0, 3595, 0, 0,
	0, 3591, 0, 2435, 2435, 0, 0, 698, 3610, 0,
	0, 0, 1746, 0, 3605, 0, 611, 0, 700, 0,
	3459, 700, 0, 804, 0, 835, 0, 0, 3614, 3606,
	1625, 0, 0, 0, 0, 0, 0, 0, 3563, 3633,
	803, 3546, 3620, 3435, 0, 3627, 0, 759, 835, 3660,
	3625, 835, 0, 3631, 3645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3652, 0, 1746,
	3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063,
	3064, 3065, 3650, 3607, 835, 0, 0, 3692, 3215, 3216,
	0, 2110, 0, 3647, 2968, 0, 3664, 835, 0, 0,
	0, 3713, 0, 699, 698, 3642, 699, 3644, 0, 3646,
	0, 3705, 0, 3703, 3698, 3699, 0, 3527, 3234, 0,
	740, 0, 0, 3635, 3639, 1626, 0, 0, 759, 0,
	759, 3239, 3701, 660, 0, 0, 0, 3734, 3742, 1746,
	1746, 0, 3704, 3745, 0, 3730, 3707, 3732, 835, 835,
	0, 0, 835, 0, 3702, 759, 3727, 1871, 698, 3722,
	1736, 0, 3728, 0, 2084, 0, 0, 3733, 3739, 3740,
	0, 0, 3602, 3582, 3583, 3584, 3585, 3738, 3601, 608,
	608, 3756, 3715, 0, 3746, 0, 740, 2968, 804, 658,
	0, 3751, 0, 3768, 3757, 0, 3755, 0, 3776, 0,
	0, 0, 3772, 3764, 3766, 803, 3594, 3760, 3774, 3769,
	1625, 660, 759, 660, 660, 660, 660, 660, 660, 660,
	660, 660, 660, 660, 660, 660, 660, 3763, 2110, 0,
	660, 3770, 660, 3796, 835, 660, 0, 3787, 3779, 1624,
	835, 0, 0, 3786, 0, 3783, 700, 0, 0, 0,
	0, 0, 0, 3771, 0, 3788, 0, 0, 0, 0,
	0, 0, 3805, 3799, 3807, 3798, 835, 740, 0, 740,
	0, 3819, 3820, 3821, 3435, 0, 0, 0, 3806, 0,
	3803, 0, 3812, 3810, 608, 3818, 0, 3829, 3830, 3817,
	2968, 0, 0, 0, 740, 0, 3834, 3804, 3836, 3822,
	0, 0, 3813, 3814, 3815, 3796, 0, 0, 3833, 2969,
	3838, 3837, 2110, 0, 0, 0, 0, 0, 700, 0,
	3844, 2110, 0, 0, 3862, 3859, 0, 3867, 0, 0,
	3866, 699, 835, 0, 3835, 3868, 0, 0, 0, 0,
	3871, 0, 0, 3872, 0, 3555, 0, 0, 0, 0,
	0, 740, 658, 0, 0, 3881, 3882, 0, 0, 3888,
	3887, 3889, 0, 0, 0, 0, 0, 0, 3802, 0,
	3902, 3908, 0, 3905, 3910, 3901, 3527, 0, 3906, 3844,
	3586, 0, 3589, 0, 3796, 1626, 3920, 3919, 0, 3765,
	3765, 3922, 0, 3602, 3816, 700, 0, 2435, 2435, 3826,
	0, 3910, 2969, 699, 3928, 2435, 2435, 0, 3841, 0,
	0, 3796, 804, 3936, 3937, 0, 3844, 0, 0, 0,
	0, 0, 700, 0, 2110, 0, 0, 0, 0, 803,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3643, 0, 0, 0, 1626,
	0, 0, 0, 0, 0, 0, 0, 3841, 0, 0,
	1625, 0, 0, 0, 0, 0, 0, 1626, 2846, 0,
	699, 0, 0, 700, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3765, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3841, 2969, 0, 699, 0, 0,
	0, 0, 3688, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3843, 957, 0, 0, 0, 0, 0, 0,
	0, 1145, 0, 0, 1625, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1625, 0, 0, 0, 2435, 3444, 699, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3743, 3744, 0, 0, 0, 0, 0, 1145,
	71, 3843, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 959, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 3843, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 833, 0,
	0, 1122, 0, 0, 0, 1132, 1133, 1134, 0, 0,
	0, 0, 0, 0, 700, 0, 0, 1715, 0, 0,
	1716, 81, 0, 0, 1722, 0, 1720, 0, 0, 0,
	0, 1719, 1723, 1718, 0, 1724, 0, 0, 0, 1717,
	1138, 1139, 1721, 0, 0, 0, 0, 0, 0, 1725,
	0, 0, 0, 0, 0, 0, 0, 0, 660, 660,
	0, 0, 0, 0, 0, 660, 660, 700, 660, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 958, 927, 0, 0, 0, 0,
	928, 0, 0, 0, 937, 0, 0, 0, 0, 699,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
	2435, 2435, 2435, 0, 0, 0, 0, 0, 0, 0,
	1626, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 0, 728, 0, 0, 0, 0,
	0, 0, 699, 0, 0, 0, 0, 930, 0, 0,
	0, 0, 0, 660, 0, 660, 660, 0, 660, 660,
	0, 0, 0, 927, 0, 0, 960, 0, 928, 73,
	0, 0, 937, 0, 0, 0, 936, 1626, 0, 660,
	660, 0, 0, 0, 78, 0, 0, 0, 0, 0,
	0, 0, 79, 580, 580, 2065, 961, 86, 0, 962,
	0, 759, 0, 963, 0, 1625, 0, 941, 0, 0,
	759, 0, 0, 0, 630, 1755, 634, 0, 0, 0,
	0, 0, 1624, 0, 0, 964, 0, 0, 0, 0,
	0, 0, 0, 0, 687, 930, 1626, 0, 0, 0,
	704, 0, 707, 0, 709, 710, 711, 712, 713, 0,
	926, 0, 718, 0, 0, 0, 722, 0, 0, 0,
	729, 949, 1625, 967, 936, 759, 0, 0, 0, 0,
	0, 0, 0, 1626, 0, 0, 0, 931, 0, 0,
	965, 0, 833, 0, 1624, 1122, 0, 0, 0, 1132,
	1133, 1134, 0, 0, 0, 941, 0, 966, 0, 698,
	0, 1715, 0, 1624, 1716, 3747, 3748, 0, 1722, 3750,
	1720, 0, 933, 0, 0, 1719, 1723, 1718, 932, 1724,
	0, 1625, 72, 1717, 1138, 1139, 1721, 0, 0, 0,
	80, 0, 0, 1725, 968, 0, 0, 0, 926, 0,
	2169, 0, 0, 0, 0, 0, 0, 660, 0, 2169,
	0, 0, 0, 0, 0, 0, 698, 0, 1625, 84,
	0, 83, 76, 934, 0, 931, 0, 0, 0, 0,
	0, 0, 75, 0, 698, 698, 0, 0, 0, 88,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 660, 0, 759, 660, 0, 660, 660, 0, 759,
	933, 0, 0, 0, 740, 0, 932, 0, 935, 0,
	0, 0, 0, 0, 0, 3273, 2435, 0, 0, 938,
	0, 660, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 698, 0, 0,
	0, 0, 0, 660, 0, 0, 0, 0, 0, 0,
	0, 934, 948, 0, 940, 939, 0, 0, 0, 0,
	0, 0, 0, 0, 660, 660, 0, 0, 0, 0,
	862, 0, 0, 0, 660, 660, 0, 0, 0, 660,
	660, 0, 0, 0, 660, 0, 0, 0, 0, 0,
	0, 0, 0, 660, 1141, 0, 935, 0, 0, 660,
	660, 660, 0, 1129, 1130, 1131, 0, 938, 0, 660,
	3651, 0, 1123, 1124, 1125, 1126, 1127, 1128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 660,
	0, 929, 740, 0, 660, 0, 0, 0, 740, 660,
	2729, 660, 940, 939, 0, 0, 0, 0, 833, 0,
	0, 1122, 0, 0, 0, 1132, 1133, 1134, 0, 0,
	0, 943, 0, 0, 827, 42, 0, 1715, 0, 0,
	1716, 0, 0, 759, 1722, 0, 1720, 0, 698, 0,
	0, 1719, 1723, 1718, 0, 1724, 0, 0, 0, 1717,
	1138, 1139, 1721, 3438, 0, 0, 0, 0, 2435, 1725,
	0, 0, 759, 759, 0, 0, 0, 0, 0, 0,
	0, 759, 0, 0, 0, 0, 0, 0, 562, 929,
	0, 0, 0, 0, 0, 42, 0, 0, 0, 0,
	42, 0, 0, 0, 0, 0, 0, 0, 2065, 2065,
	2065, 1624, 759, 0, 0, 0, 759, 0, 0, 943,
	0, 0, 0, 0, 0, 0, 698, 698, 0, 0,
	833, 0, 0, 1122, 0, 0, 0, 1132, 1133, 1134,
	0, 0, 1145, 1145, 1145, 1145, 0, 1145, 0, 1715,
	0, 0, 1716, 0, 0, 0, 1722, 660, 1720, 0,
	1145, 0, 0, 1719, 1723, 1718, 0, 1724, 0, 0,
	0, 1717, 1138, 1139, 1721, 0, 0, 0, 0, 0,
	0, 1725, 2536, 0, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 883, 0, 1624, 1624,
	1624, 2169, 2536, 0, 0, 0, 0, 0, 0, 0,
	2569, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2435, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2536, 0, 1145, 0, 740, 0, 660, 1141, 0,
	0, 0, 0, 0, 0, 0, 0, 1129, 1130, 1131,
	0, 0, 0, 0, 3632, 0, 1123, 1124, 1125, 1126,
	1127, 1128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 698, 0, 0, 0, 759, 0, 0, 0,
	0, 0, 0, 0, 0, 759, 0, 995, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1011, 0, 0, 698, 0, 0, 0, 0, 0, 0,
	0, 0, 660, 0, 0, 660, 0, 0, 660, 660,
	0, 660, 660, 660, 0, 0, 660, 660, 0, 0,
	0, 0, 0, 0, 0, 0, 3673, 0, 0, 0,
	660, 0, 0, 0, 0, 660, 0, 0, 0, 660,
	660, 0, 0, 0, 0, 0, 0, 0, 660, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 660, 0, 0, 660, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 660,
	660, 0, 660, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 740, 927, 0, 0, 0,
	0, 928, 0, 0, 740, 937, 0, 0, 0, 0,
	660, 0, 0, 0, 0, 0, 2435, 2435, 0, 0,
	2435, 0, 0, 580, 0, 0, 0, 0, 0, 0,
	759, 660, 660, 759, 0, 759, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 759, 759,
	1767, 0, 759, 0, 0, 698, 0, 0, 0, 0,
	0, 0, 0, 0, 2065, 814, 814, 660, 930, 0,
	0, 0, 0, 0, 0, 0, 0, 1799, 0, 0,
	0, 0, 0, 0, 1141, 0, 0, 0, 0, 0,
	0, 0, 0, 1129, 1130, 1131, 0, 936, 0, 0,
	3394, 0, 1123, 1124, 1125, 1126, 1127, 1128, 0, 0,
	698, 0, 0, 0, 1145, 1145, 1145, 1145, 1145, 1145,
	1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 941, 0,
	1145, 0, 0, 0, 0, 0, 1145, 927, 660, 0,
	1145, 0, 928, 0, 1896, 0, 937, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1624, 759, 1624, 0, 0, 1921, 0, 0, 0, 2169,
	1145, 926, 2536, 1624, 2536, 0, 129, 0, 0, 0,
	0, 0, 924, 1145, 0, 0, 0, 2169, 2169, 0,
	0, 2536, 0, 0, 132, 0, 1141, 0, 931, 0,
	1969, 0, 0, 1971, 0, 1129, 1130, 1131, 0, 930,
	0, 0, 3362, 128, 1123, 1124, 1125, 1126, 1127, 1128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	759, 925, 0, 933, 0, 0, 0, 0, 936, 932,
	0, 0, 0, 660, 660, 0, 0, 0, 0, 0,
	660, 759, 660, 660, 660, 660, 660, 660, 660, 660,
	660, 660, 660, 660, 0, 0, 660, 0, 660, 941,
	0, 0, 0, 660, 569, 660, 0, 0, 0, 660,
	0, 0, 0, 0, 934, 0, 0, 660, 0, 0,
	0, 0, 0, 0, 660, 0, 0, 0, 660, 660,
	2536, 0, 660, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 926, 0, 0, 660, 0, 0, 1595, 1596,
	1597, 1598, 0, 924, 0, 1600, 0, 0, 0, 935,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 931,
	938, 592, 0, 1613, 0, 0, 135, 759, 0, 0,
	0, 0, 0, 759, 1706, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 645, 648, 650, 759, 740,
	0, 126, 925, 2305, 933, 940, 939, 0, 139, 0,
	932, 0, 0, 660, 0, 0, 140, 0, 0, 0,
	740, 0, 0, 0, 133, 0, 0, 0, 0, 1624,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2065, 0, 0, 127, 2065, 1602,
	0, 0, 0, 1605, 1606, 934, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	660, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1145, 929, 0, 0, 0, 0, 759, 42, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	935, 0, 698, 0, 0, 698, 0, 0, 0, 0,
	0, 938, 943, 0, 0, 145, 3135, 0, 0, 0,
	0, 0, 740, 0, 121, 0, 0, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2169, 759, 0,
	0, 0, 0, 0, 922, 0, 940, 939, 0, 660,
	660, 660, 146, 0, 143, 0, 0, 0, 0, 130,
	0, 0, 144, 1145, 1145, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1145, 136, 1145,
	0, 0, 0, 0, 0, 0, 660, 660, 1145, 0,
	0, 0, 0, 0, 137, 0, 660, 660, 660, 0,
	147, 1145, 0, 0, 125, 0, 0, 0, 0, 1624,
	0, 0, 0, 1145, 0, 0, 0, 1145, 0, 0,
	131, 0, 0, 929, 0, 0, 740, 0, 0, 660,
	0, 0, 0, 0, 759, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 814, 943, 2007, 2008, 2009, 2010, 2011, 2012,
	2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 0, 0,
	0, 2023, 0, 2029, 0, 0, 2033, 740, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 660, 833, 0, 0, 1122, 0, 0,
	0, 1132, 1133, 1134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1715, 0, 0, 1716, 759, 0, 0,
	1722, 0, 1720, 0, 0, 0, 0, 1719, 1723, 1718,
	698, 1724, 0, 0, 3106, 1717, 1138, 1139, 1721, 0,
	0, 0, 0, 0, 0, 1725, 759, 759, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 660,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 660,
	0, 0, 2038, 2536, 660, 0, 0, 0, 0, 660,
	0, 0, 0, 0, 0, 660, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1145, 0, 0, 0,
	0, 0, 698, 0, 833, 0, 0, 1122, 0, 0,
	0, 1132, 1133, 1134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1715, 0, 0, 1716, 0, 0, 0,
	1722, 0, 1720, 0, 0, 0, 759, 1719, 1723, 1718,
	0, 1724, 0, 0, 759, 1717, 1138, 1139, 1721, 0,
	0, 0, 0, 0, 0, 1725, 2536, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 660, 0, 0, 1624,
	0, 0, 0, 1145, 0, 0, 0, 854, 0, 698,
	660, 660, 0, 0, 0, 740, 740, 0, 0, 0,
	864, 0, 0, 0, 0, 0, 0, 660, 873, 875,
	0, 877, 0, 0, 0, 0, 698, 0, 1145, 1145,
	0, 0, 0, 0, 1145, 1145, 1145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 759, 0, 833, 912, 1145,
	1122, 660, 0, 1624, 1132, 1133, 1134, 0, 1145, 1145,
	0, 0, 0, 0, 0, 0, 1715, 973, 0, 1716,
	0, 1624, 0, 1722, 0, 1720, 0, 698, 0, 0,
	1719, 1723, 1718, 0, 1724, 3135, 660, 0, 1717, 1138,
	1139, 1721, 0, 740, 0, 0, 1145, 1145, 1725, 0,
	0, 0, 0, 0, 2219, 0, 0, 0, 0, 0,
	0, 0, 2230, 0, 0, 0, 0, 0, 0, 0,
	0, 2237, 2238, 2239, 0, 0, 0, 1145, 0, 0,
	0, 0, 2246, 0, 0, 1145, 1145, 0, 0, 0,
	2258, 0, 2262, 2263, 0, 0, 0, 0, 2267, 0,
	0, 2271, 2272, 0, 660, 2279, 0, 2281, 2284, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2306, 2307, 0, 0, 2311, 2312, 660, 0, 0,
	660, 0, 0, 0, 740, 0, 0, 0, 0, 0,
	0, 0, 2321, 2322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2335, 0, 2336, 2337, 2338, 2339, 2340,
	0, 0, 2342, 660, 0, 0, 2346, 0, 0, 0,
	2349, 2350, 0, 660, 2353, 2354, 660, 0, 2357, 2358,
	2359, 2360, 2361, 0, 0, 0, 2362, 0, 0, 0,
	0, 0, 0, 2369, 2370, 0, 0, 0, 698, 2375,
	2376, 0, 0, 0, 0, 2383, 0, 2063, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1708, 0, 0, 0, 0, 0, 0, 660, 660, 0,
	0, 660, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1752, 0, 0, 1145, 1145, 0, 0, 0, 1145,
	0, 698, 0, 0, 0, 0, 0, 660, 0, 0,
	1141, 0, 0, 1145, 1145, 1145, 660, 0, 660, 1129,
	1130, 1131, 0, 0, 0, 0, 1145, 0, 1123, 1124,
	1125, 1126, 1127, 1128, 1813, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1854,
	0, 0, 0, 0, 2076, 0, 2019, 2020, 0, 2023,
	2029, 0, 0, 660, 1624, 1868, 0, 0, 0, 660,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1885, 0, 0, 1888, 0, 0,
	0, 0, 0, 0, 0, 660, 0, 0, 0, 0,
	0, 0, 0, 0, 1145, 0, 759, 0, 0, 0,
	0, 0, 0, 1920, 0, 0, 0, 0, 0, 660,
	1141, 1624, 0, 0, 1931, 1932, 0, 0, 0, 1129,
	1130, 1131, 0, 0, 0, 0, 3021, 0, 1123, 1124,
	1125, 1126, 1127, 1128, 0, 0, 1145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2038, 0,
	0, 660, 0, 0, 562, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2098, 2098, 0, 0, 0, 0,
	1624, 660, 0, 0, 0, 0, 0, 0, 0, 0,
	1990, 0, 0, 0, 0, 0, 0, 1145, 1145, 1145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1145, 0, 0, 0, 0, 0, 1624, 0, 0,
	0, 2622, 0, 0, 0, 0, 0, 1145, 0, 2630,
	0, 2630, 0, 0, 0, 2004, 0, 2639, 0, 0,
	0, 0, 0, 0, 0, 740, 0, 0, 2344, 0,
	0, 0, 3101, 1141, 0, 0, 0, 0, 0, 0,
	0, 2669, 1129, 1130, 1131, 0, 0, 0, 0, 0,
	0, 1123, 1124, 1125, 1126, 1127, 1128, 0, 0, 0,
	0, 2693, 2694, 2695, 2696, 927, 0, 0, 0, 0,
	928, 0, 0, 0, 937, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 833, 0, 0, 1122, 0, 0, 0, 1132, 1133,
	1134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1715, 2721, 2722, 1716, 2725, 2726, 2727, 1722, 0, 1720,
	0, 0, 0, 0, 1719, 1723, 1718, 0, 1724, 0,
	0, 0, 1717, 1138, 1139, 1721, 0, 930, 2738, 0,
	0, 0, 1725, 0, 0, 2426, 2427, 0, 0, 0,
	0, 2745, 0, 0, 2746, 0, 0, 0, 0, 0,
	0, 2440, 0, 0, 0, 2442, 936, 0, 0, 0,
	0, 0, 0, 0, 2451, 0, 1145, 0, 0, 0,
	2063, 2063, 2063, 0, 0, 0, 0, 0, 0, 0,
	2464, 0, 0, 0, 0, 0, 0, 941, 2767, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2476, 0, 0, 0, 0, 2480, 0, 0, 2098, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 833,
	0, 0, 1122, 0, 0, 0, 1132, 1133, 1134, 0,
	926, 0, 2038, 1145, 0, 0, 0, 0, 1715, 0,
	0, 1716, 0, 0, 1602, 1722, 0, 1720, 0, 0,
	0, 0, 1719, 1723, 1718, 0, 1724, 931, 1145, 0,
	1717, 1138, 1139, 1721, 0, 0, 0, 0, 0, 0,
	1725, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 933, 0, 0, 0, 0, 0, 932, 0,
	0, 0, 0, 0, 2496, 0, 2500, 2875, 0, 0,
	0, 833, 0, 0, 1122, 2803, 0, 0, 1132, 1133,
	1134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1715, 0, 0, 1716, 0, 0, 0, 1722, 0, 1720,
	0, 0, 0, 934, 1719, 1723, 1718, 0, 1724, 0,
	0, 0, 1717, 1138, 1139, 1721, 0, 0, 2659, 0,
	0, 0, 1725, 0, 2907, 0, 0, 0, 0, 0,
	1145, 0, 833, 0, 0, 1122, 0, 0, 0, 1132,
	1133, 1134, 0, 0, 0, 0, 0, 0, 935, 0,
	0, 1715, 0, 0, 1716, 0, 0, 0, 1722, 938,
	1720, 0, 0, 0, 0, 1719, 1723, 1718, 0, 1724,
	0, 0, 0, 1717, 1138, 1139, 1721, 1145, 0, 0,
	2942, 2943, 2944, 1725, 0, 0, 0, 0, 1145, 0,
	0, 0, 2724, 0, 940, 939, 0, 0, 42, 0,
	2961, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2736, 0,
	2991, 0, 0, 927, 0, 0, 0, 0, 928, 0,
	0, 0, 937, 0, 0, 0, 2996, 0, 0, 0,
	0, 0, 0, 0, 0, 2998, 2999, 3000, 0, 0,
	3003, 0, 0, 3006, 3007, 3008, 3009, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3018, 0, 3019, 0,
	3020, 929, 0, 0, 0, 0, 0, 3024, 0, 3026,
	3027, 0, 0, 3029, 3030, 3031, 3032, 3033, 0, 0,
	0, 0, 0, 2771, 0, 930, 2772, 0, 0, 0,
	0, 943, 2777, 2778, 2779, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2802, 0, 0, 936, 0, 2063, 0, 0, 0,
	2811, 2812, 0, 0, 0, 0, 0, 0, 0, 814,
	0, 0, 0, 0, 0, 0, 0, 1141, 0, 0,
	0, 0, 1145, 0, 0, 941, 1129, 1130, 1131, 0,
	0, 0, 3081, 2953, 0, 1123, 1124, 1125, 1126, 1127,
	1128, 833, 0, 0, 1122, 0, 0, 0, 1132, 1133,
	1134, 2849, 0, 2850, 0, 0, 0, 0, 0, 0,
	1715, 0, 0, 1716, 0, 0, 0, 1722, 926, 1720,
	0, 0, 0, 0, 1719, 1723, 1718, 0, 1724, 0,
	0, 2880, 1717, 1138, 1139, 1721, 2191, 0, 0, 0,
	0, 0, 1725, 0, 0, 931, 0, 0, 0, 0,
	42, 0, 2888, 2889, 0, 42, 42, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 833, 2098, 0, 1122,
	2098, 0, 0, 1132, 1133, 1134, 0, 0, 0, 0,
	933, 0, 0, 0, 2240, 2241, 932, 0, 0, 0,
	0, 3170, 1722, 0, 1720, 0, 0, 0, 0, 1719,
	1723, 1718, 0, 1724, 0, 1141, 0, 1717, 1138, 1139,
	1721, 42, 0, 0, 1129, 1130, 1131, 1725, 0, 0,
	2286, 0, 0, 1123, 1124, 1125, 1126, 1127, 1128, 0,
	0, 934, 2308, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2327, 3220, 0, 0,
	3223, 0, 0, 0, 0, 0, 3226, 3227, 3228, 0,
	0, 3231, 3232, 3233, 0, 0, 935, 0, 3236, 3237,
	0, 0, 0, 0, 0, 0, 0, 938, 0, 0,
	0, 0, 0, 0, 0, 3243, 3244, 1141, 0, 3248,
	0, 3249, 833, 0, 0, 1122, 1129, 1130, 1131, 1132,
	1133, 1134, 0, 2799, 0, 1123, 1124, 1125, 1126, 1127,
	1128, 1715, 940, 939, 1716, 0, 0, 0, 1722, 0,
	1720, 0, 0, 3260, 0, 1719, 1723, 1718, 0, 1724,
	0, 0, 0, 1717, 1138, 1139, 1721, 0, 0, 0,
	0, 0, 0, 1725, 0, 0, 0, 0, 1141, 0,
	0, 0, 0, 0, 3047, 3048, 0, 1129, 1130, 1131,
	0, 3052, 2068, 0, 0, 0, 1123, 1124, 1125, 1126,
	1127, 1128, 0, 0, 0, 0, 0, 3066, 0, 3067,
	0, 0, 0, 0, 3068, 0, 2063, 0, 0, 929,
	2063, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3079, 0, 0, 0, 0,
	0, 0, 3370, 0, 0, 0, 0, 0, 3376, 943,
	0, 3378, 0, 0, 0, 0, 927, 0, 0, 0,
	0, 928, 0, 0, 0, 937, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 927, 957, 0, 0, 0, 928, 0, 0,
	0, 937, 0, 0, 3401, 3402, 0, 0, 0, 0,
	0, 3409, 0, 0, 0, 3411, 0, 0, 2521, 0,
	2524, 2525, 0, 0, 3414, 2529, 0, 0, 0, 0,
	0, 0, 0, 0, 3157, 0, 0, 0, 930, 0,
	0, 0, 0, 2098, 2098, 0, 0, 2098, 0, 0,
	0, 0, 1955, 0, 0, 0, 0, 129, 0, 0,
	0, 959, 0, 0, 930, 0, 0, 936, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2584, 0, 0,
	0, 3199, 0, 936, 0, 0, 0, 0, 941, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2635, 2636, 941, 0, 0, 1141, 0, 0,
	0, 0, 0, 0, 0, 0, 1129, 1130, 1131, 0,
	0, 926, 0, 2043, 0, 1123, 1124, 1125, 1126, 1127,
	1128, 0, 0, 0, 0, 0, 0, 3519, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 926, 931, 0,
	3250, 3251, 3252, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 958, 138, 0, 0, 0, 0,
	1951, 0, 0, 0, 931, 0, 3548, 0, 0, 3551,
	0, 0, 1141, 933, 0, 0, 0, 3264, 0, 932,
	0, 1129, 1130, 1131, 0, 0, 134, 0, 0, 3280,
	1123, 1124, 1125, 1126, 1127, 1128, 0, 135, 0, 933,
	0, 0, 0, 3572, 0, 932, 0, 0, 1961, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2742, 1953, 0, 934, 0, 0, 0, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 140, 0, 0,
	0, 0, 0, 0, 0, 133, 960, 1954, 0, 0,
	934, 0, 927, 957, 0, 0, 0, 928, 0, 0,
	0, 937, 0, 0, 0, 927, 0, 0, 1965, 935,
	928, 0, 2098, 0, 937, 0, 961, 927, 3636, 962,
	938, 0, 928, 963, 0, 0, 937, 0, 0, 0,
	0, 0, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 3654, 0, 3655, 0, 964, 938, 0, 1141, 0,
	0, 0, 0, 2324, 0, 940, 939, 1129, 1130, 1131,
	0, 959, 42, 0, 930, 0, 1123, 1124, 1125, 1126,
	1127, 1128, 0, 0, 42, 0, 0, 930, 0, 2319,
	0, 940, 939, 967, 0, 121, 1956, 0, 142, 930,
	0, 0, 0, 936, 0, 0, 0, 0, 42, 0,
	965, 0, 0, 0, 0, 0, 936, 1962, 0, 0,
	1957, 0, 0, 0, 0, 143, 3449, 966, 936, 3716,
	130, 0, 0, 144, 941, 0, 0, 0, 0, 0,
	3725, 0, 929, 0, 0, 0, 0, 941, 0, 136,
	0, 0, 0, 0, 1963, 0, 0, 0, 0, 941,
	1964, 0, 3741, 0, 968, 137, 0, 0, 929, 1958,
	0, 0, 943, 0, 0, 1959, 927, 926, 0, 0,
	0, 928, 0, 0, 0, 937, 2894, 0, 927, 0,
	926, 131, 0, 928, 958, 0, 42, 937, 943, 0,
	0, 0, 926, 0, 931, 0, 0, 3516, 0, 0,
	0, 0, 0, 2915, 0, 0, 0, 931, 0, 0,
	0, 0, 0, 1952, 0, 0, 0, 0, 0, 931,
	0, 0, 3784, 0, 0, 0, 0, 0, 3541, 933,
	0, 0, 0, 0, 0, 932, 0, 0, 930, 0,
	0, 0, 933, 0, 0, 0, 0, 1813, 932, 2137,
	930, 0, 0, 0, 933, 0, 0, 2150, 42, 0,
	932, 0, 0, 0, 0, 0, 0, 936, 0, 0,
	0, 0, 0, 0, 0, 0, 960, 0, 0, 936,
	934, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 934, 0, 0, 0, 0, 941, 0,
	0, 0, 0, 0, 0, 934, 961, 0, 0, 962,
	941, 0, 0, 963, 0, 0, 0, 0, 0, 0,
	2156, 0, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 964, 938, 0, 935, 0,
	0, 926, 0, 0, 0, 0, 0, 0, 0, 938,
	935, 0, 0, 926, 2152, 0, 0, 0, 0, 0,
	0, 938, 0, 0, 0, 0, 0, 0, 931, 953,
	0, 940, 939, 967, 0, 3653, 0, 0, 0, 0,
	931, 3904, 2310, 0, 940, 939, 0, 2137, 0, 0,
	965, 0, 0, 0, 1894, 2150, 940, 939, 0, 0,
	0, 2849, 0, 933, 0, 0, 0, 966, 0, 932,
	0, 0, 0, 0, 103, 933, 0, 0, 0, 89,
	0, 932, 0, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3700, 0, 0, 93, 0, 0,
	0, 0, 2142, 0, 968, 0, 0, 3711, 929, 0,
	0, 0, 0, 0, 934, 0, 115, 0, 2156, 0,
	0, 929, 0, 0, 2151, 0, 934, 0, 0, 0,
	0, 0, 0, 929, 0, 0, 0, 0, 943, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 943, 2152, 0, 0, 0, 0, 0, 0, 935,
	0, 0, 3146, 943, 2147, 0, 0, 0, 0, 0,
	938, 935, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 938, 0, 0, 0, 0, 2144, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1890, 0, 940, 939, 42, 2138, 0,
	0, 2149, 95, 0, 0, 971, 0, 940, 939, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	2142, 0, 0, 0, 2849, 0, 0, 0, 0, 97,
	0, 0, 0, 2155, 0, 0, 0, 0, 0, 0,
	98, 0, 2151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 113, 929, 0, 0, 0, 0, 0, 50, 120,
	0, 2173, 0, 0, 929, 0, 0, 94, 0, 100,
	0, 0, 2147, 0, 0, 2148, 0, 0, 0, 0,
	0, 0, 943, 0, 0, 0, 0, 0, 0, 0,
	90, 2145, 0, 0, 943, 2144, 0, 0, 2143, 0,
	0, 0, 2153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3875, 0, 0, 2139, 2138, 0, 0, 2149,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2146,
	0, 2140, 0, 0, 0, 0, 0, 0, 3307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	3329, 2155, 0, 0, 0, 0, 0, 121, 105, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 0, 107, 0, 0, 111, 50, 108, 0, 2133,
	0, 0, 91, 0, 3373, 109, 0, 0, 0, 0,
	0, 0, 0, 2148, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 0, 0, 110, 0, 0, 2145,
	0, 0, 116, 0, 0, 0, 2143, 118, 0, 0,
	2153, 0, 0, 112, 0, 0, 0, 119, 0, 0,
	0, 0, 0, 2139, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2146, 0, 2140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3533, 0, 1623, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1628, 176, 1634, 193, 665, 1644, 242, 279, 494, 1631,
	1676, 339, 1681, 392, 396, 1705, 485, 1638, 1641, 1651,
	1654, 250, 1659, 670, 1667, 676, 1677, 682, 1696, 461,
	1702, 672, 673, 678, 181, 575, 484, 555, 1690, 1636,
	1694, 346, 1687, 1663, 1703, 1680, 1692, 1673, 1678, 189,
	1665, 1666, 1670, 1679, 674, 671, 675, 681, 669, 679,
	666, 677, 1700, 383, 317, 3596, 534, 410, 188, 234,
	221, 263, 305, 417, 1635, 1653, 295, 465, 230, 319,
	1686, 209, 352, 1699, 441, 316, 1693, 424, 444, 1655,
	336, 215, 375, 431, 432, 663, 668, 1643, 684, 1630,
	219, 220, 341, 201, 349, 546, 512, 404, 362, 360,
	1661, 327, 384, 541, 1633, 0, 249, 0, 244, 340,
	480, 207, 459, 378, 345, 299, 407, 436, 246, 231,
	232, 275, 377, 265, 217, 470, 509, 513, 511, 507,
	504, 508, 505, 506, 510, 266, 503, 0, 478, 487,
	521, 501, 529, 486, 526, 496, 241, 525, 490, 489,
	535, 516, 517, 471, 531, 502, 500, 493, 492, 488,
	1701, 166, 167, 168, 169, 170, 171, 172, 173, 174,
	175, 177, 1629, 178, 179, 180, 182, 183, 184, 662,
	185, 186, 187, 190, 191, 192, 194, 554, 195, 196,
	197, 198, 199, 200, 491, 664, 202, 203, 204, 205,
	206, 208, 210, 211, 212, 213, 214, 216, 218, 1645,
	1646, 1647, 667, 1648, 1649, 1650, 222, 223, 224, 225,
	226, 227, 1652, 228, 229, 233, 235, 236, 237, 238,
	239, 240, 243, 1656, 245, 247, 1657, 248, 251, 1658,
	252, 253, 254, 255, 256, 257, 258, 259, 495, 260,
	1660, 261, 262, 264, 1662, 267, 268, 269, 270, 271,
	1664, 272, 497, 498, 273, 274, 276, 277, 278, 280,
	281, 282, 283, 284, 285, 286, 287, 288, 289, 290,
	291, 1668, 292, 293, 294, 296, 1669, 297, 298, 301,
	302, 303, 304, 1671, 306, 514, 1672, 307, 308, 309,
	1674, 1675, 310, 311, 312, 313, 314, 315, 318, 515,
	320, 321, 322, 323, 324, 325, 326, 556, 328, 329,
	330, 331, 332, 333, 334, 518, 519, 335, 337, 338,
	520, 522, 523, 680, 353, 354, 355, 356, 357, 358,
	359, 361, 1683, 363, 364, 365, 524, 366, 367, 368,
	369, 1684, 370, 371, 372, 373, 374, 376, 379, 380,
	381, 382, 1685, 385, 386, 387, 388, 389, 390, 391,
	393, 394, 395, 397, 398, 399, 557, 400, 401, 402,
	403, 527, 405, 406, 558, 408, 409, 411, 412, 413,
	414, 415, 416, 573, 1688, 418, 528, 419, 420, 421,
	422, 423, 1689, 425, 426, 427, 428, 429, 430, 433,
	434, 435, 437, 438, 530, 439, 440, 1691, 442, 443,
	683, 445, 446, 447, 448, 449, 1695, 574, 450, 532,
	451, 533, 452, 453, 454, 455, 456, 457, 458, 460,
	1697, 1698, 462, 463, 464, 466, 467, 468, 469, 472,
	473, 474, 475, 476, 1704, 477, 479, 481, 559, 536,
	537, 538, 539, 540, 542, 543, 544, 545, 482, 483,
	499, 350, 344, 300, 342, 343, 347, 348, 351, 1682,
	1632, 1637, 1639, 1640, 1642, 0, 0, 0, 0, 0,
	0, 0, 0, 1152, 0, 0, 0, 0, 0, 0,
	833, 0, 0, 1122, 0, 0, 1621, 1132, 1133, 1134,
	1163, 1165, 1149, 1192, 1213, 0, 1264, 1310, 1280, 1135,
	1397, 1403, 1136, 1464, 1468, 0, 1146, 1194, 1143, 1244,
	1259, 1274, 1286, 1142, 1147, 1140, 1401, 1148, 1545, 1556,
	1576, 1137, 1138, 1139, 1144, 1537, 1594, 1363, 1522, 1174,
	0, 1151, 1488, 0, 0, 1411, 1526, 0, 0, 1188,
	0, 0, 0, 0, 1336, 1325, 1359, 1472, 1297, 1417,
	1225, 1384, 1562, 1454, 1373, 0, 1568, 1486, 1187, 1253,
	1237, 1289, 1354, 1495, 1170, 1254, 1329, 1560, 1249, 1375,
	0, 1216, 1419, 1561, 1524, 1372, 1535, 1505, 1530, 1260,
	1398, 1223, 1445, 1512, 1513, 1183, 1296, 1218, 1571, 1168,
	1228, 1236, 1406, 1207, 1414, 1592, 1346, 1479, 1429, 1427,
	0, 1386, 1455, 1587, 0, 0, 1273, 0, 1267, 1405,
	1579, 1214, 1553, 1448, 1410, 1348, 1482, 1517, 1269, 1250,
	1251, 1307, 1447, 1292, 1226, 1567, 1343, 1347, 1345, 1341,
	1338, 1342, 1339, 1340, 1344, 1294, 1337, 0, 0, 1184,
	1404, 1332, 1502, 1182, 1451, 1290, 1263, 0, 0, 0,
	1569, 1383, 1385, 0, 1538, 1333, 1331, 1242, 1241, 1185,
	1570, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162,
	1164, 1166, 1167, 1171, 1172, 1173, 1175, 1176, 1177, 1178,
	1179, 1180, 1181, 1189, 1190, 1191, 1193, 1196, 1197, 1198,
	1200, 1201, 1202, 1203, 1204, 1205, 1208, 1209, 1210, 1211,
	1212, 1215, 1217, 1219, 1220, 1221, 1222, 1224, 1227, 1229,
	1230, 1231, 1232, 1233, 1234, 1235, 1238, 1239, 0, 1240,
	1243, 1245, 1246, 1247, 1248, 1252, 1255, 1256, 1257, 1258,
	1261, 1262, 1265, 1266, 1268, 1270, 1271, 1272, 1275, 0,
	1276, 1277, 1278, 1279, 1281, 1282, 1283, 1284, 1285, 1287,
	0, 0, 1288, 1291, 1293, 1295, 1298, 1299, 1300, 1301,
	0, 1302, 1303, 1304, 1305, 1306, 1308, 0, 1309, 1311,
	1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321,
	1322, 1323, 1324, 1327, 1328, 1330, 0, 1334, 1335, 1350,
	1351, 1352, 1353, 1355, 1357, 1358, 1356, 1360, 1361, 1362,
	1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1374, 1376,
	1377, 0, 1378, 1379, 0, 1380, 1381, 1382, 1387, 1388,
	1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1399, 1400,
	1402, 1416, 1418, 0, 1420, 1421, 1422, 1423, 1424, 1425,
	1426, 1428, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437,
	1438, 1439, 1440, 1441, 1442, 1443, 1444, 1446, 1449, 1450,
	1452, 1453, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463,
	1465, 1466, 1467, 1469, 1470, 1471, 1473, 1474, 1475, 1476,
	1477, 1478, 1480, 1481, 1483, 1484, 1485, 0, 1487, 1489,
	1490, 1491, 1492, 1493, 1494, 1497, 1496, 1498, 1499, 1500,
	1501, 1503, 1504, 1506, 1507, 1508, 1509, 1510, 1511, 1514,
	1515, 1516, 1518, 1519, 1520, 1521, 1523, 1525, 1527, 1529,
	1528, 1531, 1532, 1533, 1534, 1536, 1539, 1540, 1541, 1542,
	1543, 1544, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1554,
	0, 1555, 1557, 1558, 1559, 1563, 1564, 1565, 1566, 1572,
	1573, 1574, 1575, 1577, 0, 0, 1578, 1580, 1581, 1582,
	1583, 1584, 1585, 1586, 1588, 1589, 1590, 1591, 0, 1593,
	1326, 1415, 1409, 1349, 1407, 1408, 1412, 1413, 0, 0,
	1169, 1186, 1195, 1199, 1206, 0, 1141, 0, 0, 0,
	0, 0, 0, 0, 0, 1129, 1130, 1131, 0, 0,
	0, 0, 0, 0, 1123, 1124, 1125, 1126, 1127, 1128,
	1623, 0, 3842, 797, 0, 0, 0, 0, 845, 0,
	0, 0, 0, 0, 0, 0, 0, 1628, 176, 1634,
	193, 665, 1644, 242, 279, 494, 1631, 1676, 339, 1681,
	392, 396, 1705, 485, 1638, 1641, 1651, 1654, 250, 1659,
	670, 1667, 676, 1677, 682, 1696, 461, 1702, 672, 673,
	678, 181, 575, 484, 555, 1690, 1636, 1694, 346, 1687,
	1663, 1703, 1680, 1692, 1673, 1678, 189, 1665, 1666, 1670,
	1679, 674, 671, 675, 681, 669, 679, 666, 677, 1700,
	383, 317, 0, 534, 410, 188, 234, 221, 263, 305,
	417, 1635, 1653, 295, 465, 230, 319, 1686, 209, 352,
	1699, 441, 316, 1693, 424, 444, 1655, 336, 215, 375,
	431, 432, 663, 668, 1643, 684, 1630, 219, 220, 341,
	201, 349, 546, 512, 404, 362, 360, 1661, 327, 384,
	541, 1633, 0, 249, 0, 244, 340, 480, 207, 459,
	378, 345, 299, 407, 436, 246, 231, 232, 275, 377,
	265, 217, 470, 509, 513, 511, 507, 504, 508, 505,
	506, 510, 266, 503, 0, 478, 487, 521, 501, 529,
	486, 526, 496, 241, 525, 490, 489, 535, 516, 517,
	471, 531, 502, 500, 493, 492, 488, 1701, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 177, 1629,
	178, 179, 180, 182, 183, 184, 662, 185, 186, 187,
	190, 191, 192, 194, 554, 195, 196, 197, 198, 199,
	200, 491, 664, 202, 203, 204, 205, 206, 208, 210,
	211, 212, 213, 214, 216, 218, 1645, 1646, 1647, 667,
	1648, 1649, 1650, 222, 223, 224, 225, 226, 227, 1652,
	228, 229, 233, 235, 236, 237, 238, 239, 240, 243,
	1656, 245, 247, 1657, 248, 251, 1658, 252, 253, 254,
	255, 256, 257, 258, 259, 495, 260, 1660, 261, 262,
	264, 1662, 267, 268, 269, 270, 271, 1664, 272, 497,
	498, 273, 274, 276, 277, 278, 280, 281, 282, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 1668, 292,
	293, 294, 296, 1669, 297, 298, 301, 302, 303, 304,
	1671, 306, 514, 1672, 307, 308, 309, 1674, 1675, 310,
	311, 312, 313, 314, 315, 318, 515, 320, 321, 322,
	323, 324, 325, 326, 556, 328, 329, 330, 331, 332,
	333, 334, 518, 519, 335, 337, 338, 520, 522, 523,
	680, 353, 354, 355, 356, 357, 358, 359, 361, 1683,
	363, 364, 365, 524, 366, 367, 368, 369, 1684, 370,
	371, 372, 373, 374, 376, 379, 380, 381, 382, 1685,
	385, 386, 387, 388, 389, 390, 391, 393, 394, 395,
	397, 398, 399, 557, 400, 401, 402, 403, 527, 405,
	406, 558, 408, 409, 411, 412, 413, 414, 415, 416,
	573, 1688, 418, 528, 419, 420, 421, 422, 423, 1689,
	425, 426, 427, 428, 429, 430, 433, 434, 435, 437,
	438, 530, 439, 440, 1691, 442, 443, 683, 445, 446,
	447, 448, 449, 1695, 574, 450, 532, 451, 533, 452,
	453, 454, 455, 456, 457, 458, 460, 1697, 1698, 462,
	463, 464, 466, 467, 468, 469, 472, 473, 474, 475,
	476, 1704, 477, 479, 481, 559, 536, 537, 538, 539,
	540, 542, 543, 544, 545, 482, 483, 499, 350, 344,
	300, 342, 343, 347, 348, 351, 1682, 1632, 1637, 1639,
	1640, 1642, 1623, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1628,
	176, 1634, 193, 665, 1644, 242, 279, 494, 1631, 1676,
	339, 1681, 392, 396, 1705, 485, 1638, 1641, 1651, 1654,
	250, 1659, 670, 1667, 676, 1677, 682, 1696, 461, 1702,
	672, 673, 678, 181, 575, 484, 555, 1690, 1636, 1694,
	346, 1687, 1663, 1703, 1680, 1692, 1673, 1678, 189, 1665,
	1666, 1670, 1679, 674, 671, 675, 681, 669, 679, 666,
	677, 1700, 383, 317, 0, 534, 410, 188, 234, 221,
	263, 305, 417, 1635, 1653, 295, 465, 230, 319, 1686,
	209, 352, 1699, 441, 316, 1693, 424, 444, 1655, 336,
	215, 375, 431, 432, 663, 668, 1643, 684, 1630, 219,
	220, 341, 201, 349, 546, 512, 404, 362, 360, 1661,
	327, 384, 541, 1633, 0, 249, 0, 244, 340, 480,
	207, 459, 378, 345, 299, 407, 436, 246, 231, 232,
	275, 377, 265, 217, 470, 509, 513, 511, 507, 504,
	508, 505, 506, 510, 266, 503, 0, 478, 487, 521,
	501, 529, 486, 526, 496, 241, 525, 490, 489, 535,
	516, 517, 471, 531, 502, 500, 493, 492, 488, 1701,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	177, 1629, 178, 179, 180, 182, 183, 184, 662, 185,
	186, 187, 190, 191, 192, 194, 554, 195, 196, 197,
	198, 199, 200, 491, 664, 202, 203, 204, 205, 206,
	208, 210, 211, 212, 213, 214, 216, 218, 1645, 1646,
	1647, 667, 1648, 1649, 1650, 222, 223, 224, 225, 226,
	227, 1652, 228, 229, 233, 235, 236, 237, 238, 239,
	240, 243, 1656, 245, 247, 1657, 248, 251, 1658, 252,
	253, 254, 255, 256, 257, 258, 259, 495, 260, 1660,
	261, 262, 264, 1662, 267, 268, 269, 270, 271, 1664,
	272, 497, 498, 273, 274, 276, 277, 278, 280, 281,
	282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
	1668, 292, 293, 294, 296, 1669, 297, 298, 301, 302,
	303, 304, 1671, 306, 514, 1672, 307, 308, 309, 1674,
	1675, 310, 311, 312, 313, 314, 315, 318, 515, 320,
	321, 322, 323, 324, 325, 326, 556, 328, 329, 330,
	331, 332, 333, 334, 518, 519, 335, 337, 338, 520,
	522, 523, 680, 353, 354, 355, 356, 357, 358, 359,
	361, 1683, 363, 364, 365, 524, 366, 367, 368, 369,
	1684, 370, 371, 372, 373, 374, 376, 379, 380, 381,
	382, 1685, 385, 386, 387, 388, 389, 390, 391, 393,
	394, 395, 397, 398, 399, 557, 400, 401, 402, 403,
	527, 405, 406, 558, 408, 409, 411, 412, 413, 414,
	415, 416, 573, 1688, 418, 528, 419, 420, 421, 422,
	423, 1689, 425, 426, 427, 428, 429, 430, 433, 434,
	435, 437, 438, 530, 439, 440, 1691, 442, 443, 683,
	445, 446, 447, 448, 449, 1695, 574, 450, 532, 451,
	533, 452, 453, 454, 455, 456, 457, 458, 460, 1697,
	1698, 462, 463, 464, 466, 467, 468, 469, 472, 473,
	474, 475, 476, 1704, 477, 479, 481, 559, 536, 537,
	538, 539, 540, 542, 543, 544, 545, 482, 483, 499,
	350, 344, 300, 342, 343, 347, 348, 351, 1682, 1632,
	1637, 1639, 1640, 1642, 1623, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1628, 176, 1634, 193, 665, 1644, 2300, 279, 494,
	1631, 1676, 339, 1681, 392, 396, 1705, 485, 1638, 1641,
	1651, 1654, 250, 1659, 670, 1667, 676, 1677, 682, 1696,
	461, 1702, 672, 673, 678, 181, 575, 484, 555, 1690,
	1636, 1694, 346, 1687, 1663, 1703, 1680, 1692, 1673, 1678,
	189, 1665, 1666, 1670, 1679, 674, 671, 675, 681, 669,
	679, 666, 677, 1700, 383, 317, 0, 534, 410, 188,
	234, 221, 263, 305, 2298, 1635, 1653, 295, 465, 230,
	319, 1686, 209, 352, 1699, 441, 316, 1693, 424, 444,
	1655, 336, 215, 375, 431, 432, 663, 668, 1643, 684,
	1630, 219, 220, 341, 201, 349, 546, 512, 404, 362,
	360, 1661, 327, 384, 541, 1633, 0, 249, 0, 244,
	340, 480, 207, 459, 378, 345, 299, 407, 436, 246,
	231, 232, 275, 377, 265, 217, 470, 509, 513, 511,
	507, 504, 508, 505, 506, 510, 266, 503, 0, 478,
	487, 521, 501, 529, 486, 526, 496, 241, 525, 490,
	489, 535, 516, 517, 471, 531, 502, 500, 493, 492,
	488, 1701, 166, 167, 168, 169, 170, 2299, 172, 173,
	174, 175, 177, 1629, 178, 179, 180, 182, 183, 184,
	662, 185, 186, 187, 190, 191, 192, 194, 554, 195,
	196, 197, 198, 199, 200, 491, 664, 202, 203, 204,
	205, 206, 208, 210, 211, 212, 213, 214, 216, 218,
	1645, 1646, 1647, 667, 1648, 1649, 1650, 222, 223, 224,
	225, 226, 227, 1652, 228, 229, 233, 235, 236, 237,
	238, 239, 240, 243, 1656, 245, 247, 1657, 248, 251,
	1658, 252, 253, 254, 255, 256, 257, 258, 259, 495,
	260, 1660, 261, 262, 264, 1662, 267, 268, 269, 270,
	271, 1664, 272, 497, 498, 273, 274, 276, 277, 278,
	280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 1668, 292, 293, 294, 296, 1669, 297, 298,
	301, 302, 303, 304, 1671, 306, 514, 1672, 307, 308,
	309, 1674, 1675, 310, 311, 312, 313, 314, 315, 318,
	515, 320, 321, 322, 323, 324, 325, 326, 556, 328,
	329, 330, 331, 332, 333, 334, 518, 519, 335, 337,
	338, 520, 522, 523, 680, 353, 354, 355, 356, 357,
	358, 359, 361, 1683, 363, 364, 365, 524, 366, 367,
	368, 369, 1684, 370, 371, 372, 373, 374, 376, 379,
	380, 381, 382, 1685, 385, 386, 387, 388, 389, 390,
	391, 393, 394, 395, 397, 398, 399, 557, 400, 401,
	402, 403, 527, 405, 406, 558, 408, 409, 411, 412,
	413, 414, 415, 416, 573, 1688, 418, 528, 419, 420,
	421, 422, 423, 1689, 425, 426, 427, 428, 429, 430,
	433, 434, 435, 437, 438, 530, 439, 440, 1691, 442,
	443, 683, 445, 446, 447, 448, 449, 1695, 574, 450,
	532, 451, 533, 452, 453, 454, 455, 456, 457, 458,
	460, 1697, 1698, 462, 463, 464, 466, 467, 468, 469,
	472, 473, 474, 475, 476, 1704, 477, 479, 481, 559,
	536, 537, 538, 539, 540, 542, 543, 544, 545, 482,
	483, 499, 350, 344, 300, 342, 343, 347, 348, 351,
	1682, 1632, 1637, 1639, 1640, 1642, 758, 0, 1097, 797,
	0, 0, 0, 612, 845, 0, 0, 0, 0, 0,
	623, 624, 625, 1628, 176, 1634, 193, 665, 1644, 242,
	279, 0, 1631, 1676, 339, 1681, 392, 396, 1705, 0,
	1638, 1641, 1651, 1654, 250, 1659, 670, 1667, 676, 1677,
	682, 1696, 461, 1702, 672, 673, 678, 181, 757, 484,
	555, 1690, 1636, 1694, 2611, 1687, 1663, 1703, 1680, 1692,
	1673, 1678, 189, 1665, 1666, 1670, 1679, 674, 671, 675,
	681, 669, 679, 666, 677, 1700, 383, 317, 0, 0,
	410, 188, 234, 221, 263, 305, 417, 1635, 1653, 295,
	465, 230, 319, 1686, 209, 352, 1699, 441, 316, 1693,
	424, 444, 1655, 336, 215, 375, 431, 432, 663, 668,
	1643, 684, 1630, 219, 220, 341, 201, 349, 0, 0,
	404, 362, 360, 1661, 327, 384, 0, 1633, 0, 249,
	0, 244, 340, 480, 207, 459, 378, 345, 299, 407,
	436, 246, 231, 232, 275, 377, 265, 217, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 266, 0,
	0, 478, 760, 750, 742, 743, 744, 745, 746, 747,
	0, 762, 763, 764, 765, 766, 471, 756, 0, 741,
	748, 749, 751, 1701, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 177, 1629, 178, 179, 180, 182,
	183, 184, 662, 185, 186, 187, 190, 191, 192, 194,
	554, 195, 196, 197, 198, 199, 200, 0, 664, 202,
	203, 204, 205, 206, 208, 210, 211, 212, 213, 214,
	216, 218, 1645, 1646, 1647, 667, 1648, 1649, 1650, 222,
	223, 224, 225, 226, 227, 1652, 228, 229, 233, 235,
	236, 237, 238, 239, 240, 243, 1656, 245, 247, 1657,
	248, 251, 1658, 252, 253, 254, 255, 256, 257, 258,
	259, 0, 260, 1660, 261, 262, 264, 1662, 267, 268,
	269, 270, 271, 1664, 272, 0, 0, 273, 274, 276,
	277, 278, 280, 281, 282, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 1668, 292, 293, 294, 296, 1669,
	297, 298, 301, 302, 303, 304, 1671, 306, 0, 1672,
	307, 308, 309, 1674, 1675, 310, 311, 312, 313, 314,
	315, 318, 0, 320, 321, 322, 323, 324, 325, 326,
	556, 328, 329, 330, 331, 332, 333, 334, 2609, 0,
	335, 337, 338, 0, 0, 0, 680, 353, 354, 355,
	356, 357, 358, 359, 361, 1683, 363, 364, 365, 0,
	366, 367, 368, 369, 1684, 370, 371, 372, 373, 374,
	376, 379, 380, 381, 382, 1685, 385, 386, 387, 388,
	389, 390, 391, 393, 394, 395, 397, 398, 399, 557,
	400, 401, 402, 403, 0, 405, 406, 558, 408, 409,
	411, 412, 413, 414, 415, 416, 573, 1688, 418, 2171,
	419, 420, 421, 422, 423, 1689, 425, 426, 427, 428,
	429, 430, 433, 434, 435, 437, 438, 0, 439, 440,
	1691, 442, 443, 683, 445, 446, 447, 448, 449, 1695,
	574, 450, 0, 451, 0, 452, 453, 454, 455, 456,
	457, 458, 460, 1697, 1698, 462, 463, 464, 466, 467,
	468, 469, 472, 473, 474, 475, 476, 1704, 477, 479,
	481, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 482, 483, 0, 350, 344, 300, 342, 343, 347,
	348, 351, 1682, 1632, 1637, 1639, 1640, 1642, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 620, 621,
	622, 0, 0, 0, 0, 0, 0, 2612, 2613, 616,
	617, 618, 619, 659, 0, 837, 797, 0, 0, 0,
	833, 845, 823, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 0, 193, 665, 0, 242, 279, 828, 0,
	819, 339, 0, 392, 396, 57, 485, 842, 0, 0,
	0, 250, 840, 670, 0, 676, 841, 682, 839, 461,
	0, 672, 673, 678, 181, 575, 484, 555, 0, 0,
	0, 834, 54, 0, 0, 0, 55, 0, 0, 189,
	0, 0, 0, 0, 674, 671, 675, 681, 669, 679,
	666, 677, 0, 383, 317, 0, 1603, 410, 188, 234,
	221, 263, 305, 417, 0, 0, 295, 465, 230, 319,
	0, 209, 352, 0, 441, 316, 0, 424, 444, 0,
	336, 215, 375, 431, 432, 663, 668, 0, 684, 0,
	219, 220, 341, 201, 349, 546, 512, 404, 362, 360,
	0, 327, 384, 541, 829, 0, 249, 0, 244, 340,
	480, 207, 459, 378, 345, 299, 407, 436, 246, 231,
	232, 275, 377, 265, 217, 470, 509, 513, 511, 507,
	504, 508, 505, 506, 510, 266, 503, 0, 478, 487,
	521, 501, 529, 486, 526, 496, 241, 525, 490, 489,
	535, 516, 517, 471, 531, 502, 500, 493, 492, 488,
	0, 166, 167, 168, 169, 170, 171, 172, 173, 174,
	175, 177, 0, 178, 179, 180, 182, 183, 184, 662,
	185, 186, 187, 190, 191, 192, 194, 554, 195, 196,
	197, 198, 199, 200, 491, 664, 202, 203, 204, 205,
	206, 208, 210, 211, 212, 213, 214, 216, 218, 0,
	0, 0, 667, 0, 0, 0, 222, 223, 224, 225,
	226, 227, 0, 228, 229, 233, 235, 236, 237, 238,
	239, 240, 243, 0, 245, 247, 0, 248, 251, 0,
	252, 253, 254, 255, 256, 257, 258, 259, 495, 260,
	0, 261, 262, 264, 0, 267, 268, 269, 270, 271,
	0, 272, 497, 832, 273, 274, 276, 277, 278, 280,
	281, 282, 283, 284, 285, 286, 287, 288, 289, 290,
	291, 0, 292, 293, 294, 296, 0, 297, 298, 301,
	302, 303, 304, 0, 306, 514, 0, 307, 308, 309,
	0, 0, 310, 311, 312, 313, 314, 315, 318, 515,
	320, 321, 322, 323, 324, 325, 326, 556, 328, 329,
	330, 331, 332, 333, 334, 518, 519, 335, 337, 338,
	520, 522, 523, 680, 353, 354, 355, 356, 357, 358,
	359, 361, 0, 363, 364, 365, 524, 366, 367, 368,
	369, 0, 370, 371, 372, 373, 374, 376, 379, 380,
	381, 382, 0, 385, 386, 387, 388, 389, 390, 391,
	393, 394, 395, 397, 398, 399, 557, 400, 401, 402,
	403, 844, 405, 406, 558, 408, 409, 411, 412, 413,
	414, 415, 416, 573, 0, 418, 528, 419, 420, 421,
	422, 423, 0, 425, 426, 427, 428, 429, 430, 433,
	434, 435, 437, 438, 530, 439, 440, 0, 442, 443,
	683, 445, 446, 447, 448, 449, 0, 574, 450, 532,
	451, 533, 452, 453, 454, 455, 456, 457, 458, 460,
	0, 0, 462, 463, 464, 466, 467, 468, 469, 472,
	473, 474, 475, 476, 0, 477, 479, 481, 559, 536,
	537, 538, 539, 540, 542, 543, 544, 545, 482, 483,
	499, 350, 344, 300, 342, 343, 347, 348, 351, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 58, 659,
	0, 837, 797, 0, 0, 0, 833, 845, 823, 0,
	0, 824, 0, 0, 817, 818, 2060, 176, 0, 193,
	665, 0, 242, 279, 828, 0, 819, 339, 0, 392,
	396, 0, 485, 842, 0, 0, 2061, 250, 840, 670,
	0, 676, 841, 682, 839, 461, 0, 672, 673, 678,
	181, 575, 484, 555, 0, 0, 0, 834, 0, 0,
	0, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	674, 671, 675, 681, 669, 679, 666, 677, 0, 383,
	317, 0, 534, 410, 188, 234, 221, 263, 305, 417,
	0, 0, 295, 465, 230, 319, 0, 209, 352, 0,
	441, 316, 0, 424, 444, 0, 336, 215, 375, 431,
	432, 663, 668, 0, 684, 0, 219, 220, 341, 201,
	349, 546, 512, 404, 362, 360, 0, 327, 384, 541,
	829, 0, 249, 0, 244, 340, 480, 207, 459, 378,
	345, 299, 407, 436, 246, 231, 232, 275, 377, 265,
	217, 470, 509, 513, 511, 507, 504, 508, 505, 506,
	510, 266, 503, 0, 478, 487, 521, 501, 529, 486,
	526, 496, 241, 525, 490, 489, 535, 516, 517, 471,
	531, 502, 500, 493, 492, 488, 2059, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 177, 0, 178,
	179, 180, 182, 183, 184, 662, 185, 186, 187, 190,
	191, 192, 194, 554, 195, 196, 197, 198, 199, 200,
	491, 664, 202, 203, 204, 205, 206, 208, 210, 211,
	212, 213, 214, 216, 218, 0, 0, 0, 667, 0,
	0, 0, 222, 223, 224, 225, 226, 227, 0, 228,
	229, 233, 235, 236, 237, 238, 239, 240, 243, 0,
	245, 247, 0, 248, 251, 0, 252, 253, 254, 255,
	256, 257, 258, 259, 495, 260, 0, 261, 262, 264,
	0, 267, 268, 269, 270, 271, 0, 272, 497, 832,
	273, 274, 276, 277, 278, 280, 281, 282, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 0, 292, 293,
	294, 296, 0, 297, 298, 301, 302, 303, 304, 0,
	306, 514, 0, 307, 308, 309, 0, 0, 310, 311,
	312, 313, 314, 315, 318, 515, 320, 321, 322, 323,
	324, 325, 326, 556, 328, 329, 330, 331, 332, 333,
	334, 518, 519, 335, 337, 338, 520, 522, 523, 680,
	353, 354, 355, 356, 357, 358, 359, 361, 0, 363,
	364, 365, 524, 366, 367, 368, 369, 0, 370, 371,
	372, 373, 374, 376, 379, 380, 381, 382, 0, 385,
	386, 387, 388, 389, 390, 391, 393, 394, 395, 397,
	398, 399, 557, 400, 401, 402, 403, 844, 405, 406,
	558, 408, 409, 411, 412, 413, 414, 415, 416, 573,
	0, 418, 528, 419, 420, 421, 422, 423, 0, 425,
	426, 427, 428, 429, 430, 433, 434, 435, 437, 438,
	530, 439, 440, 0, 442, 443, 683, 445, 446, 447,
	448, 449, 0, 574, 450, 532, 451, 533, 452, 453,
	454, 455, 456, 457, 458, 460, 0, 0, 462, 463,
	464, 466, 467, 468, 469, 472, 473, 474, 475, 476,
	0, 477, 479, 481, 559, 536, 537, 538, 539, 540,
	542, 543, 544, 545, 482, 483, 499, 350, 344, 300,
	342, 343, 347, 348, 351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 659, 0, 837, 797, 0, 0,
	0, 833, 845, 823, 0, 0, 0, 824, 2057, 0,
	817, 818, 176, 0, 193, 665, 0, 242, 279, 828,
	0, 819, 339, 0, 392, 396, 0, 485, 842, 0,
	0, 0, 250, 840, 670, 0, 676, 841, 682, 839,
	461, 0, 672, 673, 678, 181, 575, 484, 555, 0,
	0, 0, 834, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 674, 671, 675, 681, 669,
	679, 666, 677, 0, 383, 317, 0, 534, 410, 188,
	234, 221, 263, 305, 417, 0, 0, 295, 465, 230,
	319, 0, 209, 352, 0, 441, 316, 0, 424, 444,
	0, 336, 215, 375, 431, 432, 663, 668, 0, 684,
	0, 219, 220, 341, 201, 349, 546, 512, 404, 362,
	360, 0, 327, 384, 541, 829, 0, 249, 0, 244,
	340, 480, 207, 459, 378, 345, 299, 407, 436, 246,
	231, 232, 275, 377, 265, 217, 470, 509, 513, 511,
	507, 504, 508, 505, 506, 510, 266, 503, 0, 478,
	487, 521, 501, 529, 486, 526, 496, 241, 525, 490,
	489, 535, 516, 517, 471, 531, 502, 500, 493, 492,
	488, 0, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 177, 0, 178, 179, 180, 182, 183, 184,
	662, 185, 186, 187, 190, 191, 192, 194, 554, 195,
	196, 197, 198, 199, 200, 491, 664, 202, 203, 204,
	205, 206, 208, 210, 211, 212, 213, 214, 216, 218,
	0, 0, 0, 667, 0, 0, 0, 222, 223, 224,
	225, 226, 227, 0, 228, 229, 233, 235, 236, 237,
	238, 239, 240, 243, 0, 245, 247, 0, 248, 251,
	0, 252, 253, 254, 255, 256, 257, 258, 259, 495,
	260, 0, 261, 262, 264, 0, 267, 268, 269, 270,
	271, 0, 272, 497, 832, 273, 274, 276, 277, 278,
	280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 0, 292, 293, 294, 296, 0, 297, 298,
	301, 302, 303, 304, 0, 306, 514, 0, 307, 308,
	309, 0, 0, 310, 311, 312, 313, 314, 315, 318,
	515, 320, 321, 322, 323, 324, 325, 326, 556, 328,
	329, 330, 331, 332, 333, 334, 518, 519, 335, 337,
	338, 520, 522, 523, 680, 353, 354, 355, 356, 357,
	358, 359, 361, 0, 363, 364, 365, 524, 366, 367,
	368, 369, 0, 370, 371, 372, 373, 374, 376, 379,
	380, 381, 382, 0, 385, 386, 387, 388, 389, 390,
	391, 393, 394, 395, 397, 398, 399, 557, 400, 401,
	402, 403, 844, 405, 406, 558, 408, 409, 411, 412,
	413, 414, 415, 416, 573, 0, 418, 528, 419, 420,
	421, 422, 423, 0, 425, 426, 427, 428, 429, 430,
	433, 434, 435, 437, 438, 530, 439, 440, 0, 442,
	443, 683, 445, 446, 447, 448, 449, 0, 574, 450,
	532, 451, 533, 452, 453, 454, 455, 456, 457, 458,
	460, 0, 0, 462, 463, 464, 466, 467, 468, 469,
	472, 473, 474, 475, 476, 0, 477, 479, 481, 559,
	536, 537, 538, 539, 540, 542, 543, 544, 545, 482,
	483, 499, 350, 344, 300, 342, 343, 347, 348, 351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	659, 0, 837, 797, 0, 0, 0, 833, 845, 823,
	0, 0, 824, 0, 0, 817, 818, 815, 176, 0,
	193, 665, 0, 242, 279, 828, 0, 819, 339, 0,
	392, 396, 0, 485, 842, 0, 0, 0, 250, 840,
	670, 0, 676, 841, 682, 839, 461, 0, 672, 673,
	678, 181, 575, 484, 555, 0, 0, 0, 834, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 674, 671, 675, 681, 669, 679, 666, 677, 0,
	383, 317, 0, 534, 410, 188, 234, 221, 263, 305,
	417, 0, 0, 295, 465, 230, 319, 0, 209, 352,
	0, 441, 316, 0, 424, 444, 0, 336, 215, 375,
	431, 432, 663, 668, 0, 684, 0, 219, 220, 341,
	201, 349, 546, 512, 404, 362, 360, 0, 327, 384,
	541, 829, 0, 249, 0, 244, 340, 480, 207, 459,
	378, 345, 299, 407, 436, 246, 231, 232, 275, 377,
	265, 217, 470, 509, 513, 511, 507, 504, 508, 505,
	506, 510, 266, 503, 0, 478, 487, 521, 501, 529,
	486, 526, 496, 241, 525, 490, 489, 535, 516, 517,
	471, 531, 502, 500, 493, 492, 488, 0, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 177, 0,
	178, 179, 180, 182, 183, 184, 662, 185, 186, 187,
	190, 191, 192, 194, 554, 195, 196, 197, 198, 199,
	200, 491, 664, 202, 203, 204, 205, 206, 208, 210,
	211, 212, 213, 214, 216, 218, 0, 0, 0, 667,
	0, 0, 0, 222, 223, 224, 225, 226, 227, 0,
	228, 229, 233, 235, 236, 237, 238, 239, 240, 243,
	0, 245, 247, 0, 248, 251, 0, 252, 253, 254,
	255, 256, 257, 258, 259, 495, 260, 0, 261, 262,
	264, 0, 267, 268, 269, 270, 271, 0, 272, 497,
	832, 273, 274, 276, 277, 278, 280, 281, 282, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 0, 292,
	293, 294, 296, 0, 297, 298, 301, 302, 303, 304,
	0, 306, 514, 0, 307, 308, 309, 0, 0, 310,
	311, 312, 313, 314, 315, 318, 515, 320, 321, 322,
	323, 324, 325, 326, 556, 328, 329, 330, 331, 332,
	333, 334, 518, 519, 335, 337, 338, 520, 522, 523,
	680, 353, 354, 355, 356, 357, 358, 359, 361, 0,
	363, 364, 365, 524, 366, 367, 368, 369, 0, 370,
	371, 372, 373, 374, 376, 379, 380, 381, 382, 0,
	385, 386, 387, 388, 389, 390, 391, 393, 394, 395,
	397, 398, 399, 557, 400, 401, 402, 403, 844, 405,
	406, 558, 408, 409, 411, 412, 413, 414, 415, 416,
	573, 0, 418, 528, 419, 420, 421, 422, 423, 0,
	425, 426, 427, 428, 429, 430, 433, 434, 435, 437,
	438, 530, 439, 440, 0, 442, 443, 683, 445, 446,
	447, 448, 449, 0, 574, 450, 532, 451, 533, 452,
	453, 454, 455, 456, 457, 458, 460, 0, 0, 462,
	463, 464, 466, 467, 468, 469, 472, 473, 474, 475,
	476, 0, 477, 479, 481, 559, 536, 537, 538, 539,
	540, 542, 543, 544, 545, 482, 483, 499, 350, 344,
	300, 342, 343, 347, 348, 351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 659, 0, 837, 797, 0,
	0, 0, 833, 845, 823, 0, 1608, 2047, 824, 0,
	0, 817, 818, 176, 0, 193, 665, 0, 242, 279,
	828, 0, 819, 339, 0, 392, 396, 0, 485, 842,
	0, 0, 0, 250, 840, 670, 0, 676, 841, 682,
	839, 461, 0, 672, 673, 678, 181, 575, 484, 555,
	0, 0, 0, 834, 0, 0, 0, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 674, 671, 675, 681,
	669, 679, 666, 677, 0, 383, 317, 0, 534, 410,
	188, 234, 221, 263, 305, 417, 0, 0, 295, 465,
	230, 319, 0, 209, 352, 0, 441, 316, 0, 424,
	444, 0, 336, 215, 375, 431, 432, 663, 668, 0,
	684, 0, 219, 220, 341, 201, 349, 546, 512, 404,
	362, 360, 0, 327, 384, 541, 829, 0, 249, 0,
	244, 340, 480, 207, 459, 378, 345, 299, 407, 436,
	246, 231, 232, 275, 377, 265, 217, 470, 509, 513,
	511, 507, 504, 508, 505, 506, 510, 266, 503, 0,
	478, 487, 521, 501, 529, 486, 526, 496, 241, 525,
	490, 489, 535, 516, 517, 471, 531, 502, 500, 493,
	492, 488, 2805, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 177, 0, 178, 179, 180, 182, 183,
	184, 662, 185, 186, 187, 190, 191, 192, 194, 554,
	195, 196, 197, 198, 199, 200, 491, 664, 202, 203,
	204, 205, 206, 208, 210, 211, 212, 213, 214, 216,
	218, 0, 0, 0, 667, 0, 0, 0, 222, 223,
	224, 225, 226, 227, 0, 228, 229, 233, 235, 236,
	237, 238, 239, 240, 243, 0, 245, 247, 0, 248,
	251, 0, 252, 253, 254, 255, 256, 257, 258, 259,
	495, 260, 0, 261, 262, 264, 0, 267, 268, 269,
	270, 271, 0, 272, 497, 832, 273, 274, 276, 277,
	278, 280, 281, 282, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 0, 292, 293, 294, 296, 0, 297,
	298, 301, 302, 303, 304, 0, 306, 514, 0, 307,
	308, 309, 0, 0, 310, 311, 312, 313, 314, 315,
	318, 515, 320, 321, 322, 323, 324, 325, 326, 556,
	328, 329, 330, 331, 332, 333, 334, 518, 519, 335,
	337, 338, 520, 522, 523, 680, 353, 354, 355, 356,
	357, 358, 359, 361, 0, 363, 364, 365, 524, 366,
	367, 368, 369, 0, 370, 371, 372, 373, 374, 376,
	379, 380, 381, 382, 0, 385, 386, 387, 388, 389,
	390, 391, 393, 394, 395, 397, 398, 399, 557, 400,
	401, 402, 403, 844, 405, 406, 558, 408, 409, 411,
	412, 413, 414, 415, 416, 573, 0, 418, 528, 419,
	420, 421, 422, 423, 0, 425, 426, 427, 428, 429,
	430, 433, 434, 435, 437, 438, 530, 439, 440, 0,
	442, 443, 683, 445, 446, 447, 448, 449, 0, 574,
	450, 532, 451, 533, 452, 453, 454, 455, 456, 457,
	458, 460, 0, 0, 462, 463, 464, 466, 467, 468,
	469, 472, 473, 474, 475, 476, 0, 477, 479, 481,
	559, 536, 537, 538, 539, 540, 542, 543, 544, 545,
	482, 483, 499, 350, 344, 300, 342, 343, 347, 348,
	351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	659, 0, 837, 797, 0, 0, 0, 833, 845, 823,
	0, 0, 0, 824, 0, 0, 817, 818, 176, 0,
	193, 665, 0, 242, 279, 828, 0, 819, 339, 0,
	392, 396, 0, 485, 842, 0, 0, 0, 250, 840,
	670, 0, 676, 841, 682, 839, 461, 0, 672, 673,
	678, 181, 575, 484, 555, 0, 0, 0, 834, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 674, 671, 675, 681, 669, 679, 666, 677, 0,
	383, 317, 0, 534, 410, 188, 234, 221, 263, 305,
	417, 0, 0, 295, 465, 230, 319, 0, 209, 352,
	0, 441, 316, 0, 424, 444, 0, 336, 215, 375,
	431, 432, 663, 668, 0, 684, 0, 219, 220, 341,
	201, 349, 546, 512, 404, 362, 360, 0, 327, 384,
	541, 829, 0, 249, 0, 244, 340, 480, 207, 459,
	378, 345, 299, 407, 436, 246, 231, 232, 275, 377,
	265, 217, 470, 509, 513, 511, 507, 504, 508, 505,
	506, 510, 266, 503, 0, 478, 487, 521, 501, 529,
	486, 526, 496, 241, 525, 490, 489, 535, 516, 517,
	471, 531, 502, 500, 493, 492, 488, 0, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 177, 0,
	178, 179, 180, 182, 183, 184, 662, 185, 186, 187,
	190, 191, 192, 194, 554, 195, 196, 197, 198, 199,
	200, 491, 664, 202, 203, 204, 205, 206, 208, 210,
	211, 212, 213, 214, 216, 218, 0, 0, 0, 667,
	0, 0, 0, 222, 223, 224, 225, 226, 227, 0,
	228, 229, 233, 235, 236, 237, 238, 239, 240, 243,
	0, 245, 247, 0, 248, 251, 0, 252, 253, 254,
	255, 256, 257, 258, 259, 495, 260, 0, 261, 262,
	264, 0, 267, 268, 269, 270, 271, 0, 272, 497,
	832, 273, 274, 276, 277, 278, 280, 281, 282, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 0, 292,
	293, 294, 296, 0, 297, 298, 301, 302, 303, 304,
	0, 306, 514, 0, 307, 308, 309, 0, 0, 310,
	311, 312, 313, 314, 315, 318, 515, 320, 321, 322,
	323, 324, 325, 326, 556, 328, 329, 330, 331, 332,
	333, 334, 518, 519, 335, 337, 338, 520, 522, 523,
	680, 353, 354, 355, 356, 357, 358, 359, 361, 0,
	363, 364, 365, 524, 366, 367, 368, 369, 0, 370,
	371, 372, 373, 374, 376, 379, 380, 381, 382, 0,
	385, 386, 387, 388, 389, 390, 391, 393, 394, 395,
	397, 398, 399, 557, 400, 401, 402, 403, 844, 405,
	406, 558, 408, 409, 411, 412, 413, 414, 415, 416,
	573, 0, 418, 528, 419, 420, 421, 422, 423, 0,
	425, 426, 427, 428, 429, 430, 433, 434, 435, 437,
	438, 530, 439, 440, 0, 442, 443, 683, 445, 446,
	447, 448, 449, 0, 574, 450, 532, 451, 533, 452,
	453, 454, 455, 456, 457, 458, 460, 0, 0, 462,
	463, 464, 466, 467, 468, 469, 472, 473, 474, 475,
	476, 0, 477, 479, 481, 559, 536, 537, 538, 539,
	540, 542, 543, 544, 545, 482, 483, 499, 350, 344,
	300, 342, 343, 347, 348, 351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 659, 0, 837, 797, 0,
	0, 0, 833, 845, 823, 0, 0, 0, 824, 2056,
	0, 817, 818, 176, 0, 193, 665, 0, 242, 279,
	828, 0, 819, 339, 0, 392, 396, 0, 485, 842,
	0, 0, 0, 250, 840, 670, 0, 676, 841, 682,
	839, 461, 0, 672, 673, 678, 181, 575, 484, 555,
	0, 0, 0, 834, 0, 0, 0, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 674, 671, 675, 681,
	669, 679, 666, 677, 0, 383, 317, 0, 534, 410,
	188, 234, 221, 263, 305, 417, 0, 0, 295, 465,
	230, 319, 0, 209, 352, 0, 441, 316, 0, 424,
	444, 0, 336, 215, 375, 431, 432, 663, 668, 0,
	684, 0, 219, 220, 341, 201, 349, 546, 512, 404,
	362, 360, 0, 327, 384, 541, 829, 0, 249, 0,
	244, 340, 480, 207, 459, 378, 345, 299, 407, 436,
	246, 231, 232, 275, 377, 265, 217, 470, 509, 513,
	511, 507, 504, 508, 505, 506, 510, 266, 503, 0,
	478, 487, 521, 501, 529, 486, 526, 496, 241, 525,
	490, 489, 535, 516, 517, 471, 531, 502, 500, 493,
	492, 488, 0, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 177, 0, 178, 179, 180, 182, 183,
	184, 662, 185, 186, 187, 190, 191, 192, 194, 554,
	195, 196, 197, 198, 199, 200, 491, 664, 202, 203,
	204, 205, 206, 208, 210, 211, 212, 213, 214, 216,
	218, 0, 0, 0, 667, 0, 0, 0, 222, 223,
	224, 225, 226, 227, 0, 228, 229, 233, 235, 236,
	237, 238, 239, 240, 243, 0, 245, 247, 0, 248,
	251, 0, 252, 253, 254, 255, 256, 257, 258, 259,
	495, 260, 0, 261, 262, 264, 0, 267, 268, 269,
	270, 271, 0, 272, 497, 832, 273, 274, 276, 277,
	278, 280, 281, 282, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 0, 292, 293, 294, 296, 0, 297,
	298, 301, 302, 303, 304, 0, 306, 514, 0, 307,
	308, 309, 0, 0, 310, 311, 312, 313, 314, 315,
	318, 515, 320, 321, 322, 323, 324, 325, 326, 556,
	328, 329, 330, 331, 332, 333, 334, 518, 519, 335,
	337, 338, 520, 522, 523, 680, 353, 354, 355, 356,
	357, 358, 359, 361, 0, 363, 364, 365, 524, 366,
	367, 368, 369, 0, 370, 371, 372, 373, 374, 376,
	379, 380, 381, 382, 0, 385, 386, 387, 388, 389,
	390, 391, 393, 394, 395, 397, 398, 399, 557, 400,
	401, 402, 403, 844, 405, 406, 558, 408, 409, 411,
	412, 413, 414, 415, 416, 573, 0, 418, 528, 419,
	420, 421, 422, 423, 0, 425, 426, 427, 428, 429,
	430, 433, 434, 435, 437, 438, 530, 439, 440, 0,
	442, 443, 683, 445, 446, 447, 448, 449, 0, 574,
	450, 532, 451, 533, 452, 453, 454, 455, 456, 457,
	458, 460, 0, 0, 462, 463, 464, 466, 467, 468,
	469, 472, 473, 474, 475, 476, 0, 477, 479, 481,
	559, 536, 537, 538, 539, 540, 542, 543, 544, 545,
	482, 483, 499, 350, 344, 300, 342, 343, 347, 348,
	351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	659, 0, 837, 797, 0, 0, 0, 833, 845, 823,
	0, 0, 0, 824, 0, 0, 817, 818, 176, 0,
	193, 665, 0, 242, 279, 828, 0, 819, 339, 0,
	392, 396, 0, 485, 842, 0, 0, 0, 250, 840,
	670, 0, 676, 841, 682, 839, 461, 0, 672, 673,
	678, 181, 575, 484, 555, 0, 0, 0, 834, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 674, 671, 675, 681, 669, 679, 666, 677, 0,
	383, 317, 0, 534, 410, 188, 234, 221, 263, 305,
	417, 0, 0, 295, 465, 230, 319, 0, 209, 352,
	0, 441, 316, 0, 424, 444, 0, 336, 215, 375,
	431, 432, 663, 668, 0, 684, 0, 2481, 220, 341,
	201, 349, 546, 512, 404, 362, 360, 0, 327, 384,
	541, 829, 0, 249, 0, 244, 340, 480, 207, 459,
	378, 345, 299, 407, 436, 246, 231, 232, 275, 377,
	265, 217, 470, 509, 513, 511, 507, 504, 508, 505,
	506, 510, 266, 503, 0, 478, 487, 521, 501, 529,
	486, 526, 496, 241, 525, 490, 489, 535, 516, 517,
	471, 531, 502, 500, 493, 492, 488, 0, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 177, 0,
	178, 179, 180, 182, 183, 184, 662, 185, 186, 187,
	190, 191, 192, 194, 554, 195, 196, 197, 198, 199,
	200, 491, 664, 202, 203, 204, 205, 206, 208, 210,
	211, 212, 213, 214, 216, 218, 0, 0, 0, 667,
	0, 0, 0, 222, 223, 224, 225, 226, 227, 0,
	228, 229, 233, 235, 236, 237, 238, 239, 240, 243,
	0, 245, 247, 0, 248, 251, 0, 252, 253, 254,
	255, 256, 257, 258, 259, 495, 260, 0, 261, 262,
	264, 0, 267, 268, 269, 270, 271, 0, 272, 497,
	832, 273, 274, 276, 277, 278, 280, 281, 282, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 0, 292,
	293, 294, 296, 0, 297, 298, 301, 302, 303, 304,
	0, 306, 514, 0, 307, 308, 309, 0, 0, 310,
	311, 312, 313, 314, 315, 318, 515, 320, 321, 322,
	323, 324, 325, 326, 556, 328, 329, 330, 331, 332,
	333, 334, 518, 519, 335, 337, 338, 520, 522, 523,
	680, 353, 354, 355, 356, 357, 358, 359, 361, 0,
	363, 364, 365, 524, 366, 367, 368, 369, 0, 370,
	371, 372, 373, 374, 376, 379, 380, 381, 382, 0,
	385, 386, 387, 388, 389, 390, 391, 393, 394, 395,
	397, 398, 399, 557, 400, 401, 402, 403, 844, 405,
	406, 558, 408, 409, 411, 412, 413, 414, 415, 416,
	573, 0, 418, 528, 419, 420, 421, 422, 423, 0,
	425, 426, 427, 428, 429, 430, 433, 434, 435, 437,
	438, 530, 439, 440, 0, 442, 443, 683, 445, 446,
	447, 448, 449, 0, 574, 450, 532, 451, 533, 452,
	453, 454, 455, 456, 457, 458, 460, 0, 0, 462,
	463, 464, 466, 467, 468, 469, 472, 473, 474, 475,
	476, 0, 477, 479, 481, 559, 536, 537, 538, 539,
	540, 542, 543, 544, 545, 482, 483, 499, 350, 344,
	300, 342, 343, 347, 348, 351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 659, 0, 837, 797, 0,
	0, 0, 0, 845, 823, 0, 0, 0, 824, 0,
	0, 817, 818, 176, 0, 193, 665, 0, 242, 279,
	828, 0, 0, 339, 0, 392, 396, 0, 485, 842,
	0, 3279, 0, 250, 840, 670, 0, 676, 841, 682,
	839, 461, 0, 672, 673, 678, 181, 575, 484, 555,
	0, 0, 0, 346, 0, 0, 0, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 674, 671, 675, 681,
	669, 679, 666, 677, 0, 383, 317, 0, 534, 410,
	188, 234, 221, 263, 305, 417, 0, 0, 295, 465,
	230, 319, 0, 209, 352, 0, 441, 316, 0, 424,
	444, 0, 336, 215, 375, 431, 432, 663, 668, 0,
	684, 0, 219, 220, 341, 201, 349, 546, 512, 404,
	362, 360, 0, 327, 384, 541, 829, 0, 249, 0,
	244, 340, 480, 207, 459, 378, 345, 299, 407, 436,
	246, 231, 232, 275, 377, 265, 217, 470, 509, 513,
	511, 507, 504, 508, 505, 506, 510, 266, 503, 0,
	478, 487, 521, 501, 529, 486, 526, 496, 241, 525,
	490, 489, 535, 516, 517, 471, 531, 502, 500, 493,
	492, 488, 0, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 177, 0, 178, 179, 180, 182, 183,
	184, 662, 185, 186, 187, 190, 191, 192, 194, 554,
	195, 196, 197, 198, 199, 200, 491, 664, 202, 203,
	204, 205, 206, 208, 210, 211, 212, 213, 214, 216,
	218, 0, 0, 0, 667, 0, 0, 0, 222, 223,
	224, 225, 226, 227, 0, 228, 229, 233, 235, 236,
	237, 238, 239, 240, 243, 0, 245, 247, 0, 248,
	251, 0, 252, 253, 254, 255, 256, 257, 258, 259,
	495, 260, 0, 261, 262, 264, 0, 267, 268, 269,
	270, 271, 0, 272, 497, 832, 273, 274, 276, 277,
	278, 280, 281, 282, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 0, 292, 293, 294, 296, 0, 297,
	298, 301, 302, 303, 304, 0, 306, 514, 0, 307,
	308, 309, 0, 0, 310, 311, 312, 313, 314, 315,
	318, 515, 320, 321, 322, 323, 324, 325, 326, 556,
	328, 329, 330, 331, 332, 333, 334, 518, 519, 335,
	337, 338, 520, 522, 523, 680, 353, 354, 355, 356,
	357, 358, 359, 361, 0, 363, 364, 365, 524, 366,
	367, 368, 369, 0, 370, 371, 372, 373, 374, 376,
	379, 380, 381, 382, 0, 385, 386, 387, 388, 389,
	390, 391, 393, 394, 395, 397, 398, 399, 557, 400,
	401, 402, 403, 844, 405, 406, 558, 408, 409, 411,
	412, 413, 414, 415, 416, 573, 0, 418, 528, 419,
	420, 421, 422, 423, 0, 425, 426, 427, 428, 429,
	430, 433, 434, 435, 437, 438, 530, 439, 440, 0,
	442, 443, 683, 445, 446, 447, 448, 449, 0, 574,
	450, 532, 451, 533, 452, 453, 454, 455, 456, 457,
	458, 460, 0, 0, 462, 463, 464, 466, 467, 468,
	469, 472, 473, 474, 475, 476, 0, 477, 479, 481,
	559, 536, 537, 538, 539, 540, 542, 543, 544, 545,
	482, 483, 499, 350, 344, 300, 342, 343, 347, 348,
	351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	659, 0, 837, 797, 0, 0, 0, 0, 845, 823,
	0, 0, 0, 824, 0, 0, 2436, 2437, 176, 0,
	193, 665, 0, 242, 279, 828, 0, 0, 339, 0,
	392, 396, 0, 485, 842, 0, 0, 0, 250, 840,
	670, 0, 676, 841, 682, 839, 461, 0, 672, 673,
	678, 181, 575, 484, 555, 0, 0, 0, 346, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 674, 671, 675, 681, 669, 679, 666, 677, 0,
	383, 317, 0, 534, 410, 188, 234, 221, 263, 305,
	417, 0, 0, 295, 465, 230, 319, 0, 209, 352,
	0, 441, 316, 0, 424, 444, 0, 336, 215, 375,
	431, 432, 663, 668, 0, 684, 0, 219, 220, 341,
	201, 349, 546, 512, 404, 362, 360, 0, 327, 384,
	541, 829, 0, 249, 0, 244, 340, 480, 207, 459,
	378, 345, 299, 407, 436, 246, 231, 232, 275, 377,
	265, 217, 470, 509, 513, 511, 507, 504, 508, 505,
	506, 510, 266, 503, 0, 478, 487, 521, 501, 529,
	486, 526, 496, 241, 525, 490, 489, 535, 516, 517,
	471, 531, 502, 500, 493, 492, 488, 0, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 177, 0,
	178, 179, 180, 182, 183, 184, 662, 185, 186, 187,
	190, 191, 192, 194, 554, 195, 196, 197, 198, 199,
	200, 491, 664, 202, 203, 204, 205, 206, 208, 210,
	211, 212, 213, 214, 216, 218, 0, 0, 0, 667,
	0, 0, 0, 222, 223, 224, 225, 226, 227, 0,
	228, 229, 233, 235, 236, 237, 238, 239, 240, 243,
	0, 245, 247, 0, 248, 251, 0, 252, 253, 254,
	255, 256, 257, 258, 259, 495, 260, 0, 261, 262,
	264, 0, 267, 268, 269, 270, 271, 0, 272, 497,
	832, 273, 274, 276, 277, 278, 280, 281, 282, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 0, 292,
	293, 294, 296, 0, 297, 298, 301, 302, 303, 304,
	0, 306, 514, 0, 307, 308, 309, 0, 0, 310,
	311, 312, 313, 314, 315, 318, 515, 320, 321, 322,
	323, 324, 325, 326, 556, 328, 329, 330, 331, 332,
	333, 334, 518, 519, 335, 337, 338, 520, 522, 523,
	680, 353, 354, 355, 356, 357, 358, 359, 361, 0,
	363, 364, 365, 524, 366, 367, 368, 369, 0, 370,
	371, 372, 373, 374, 376, 379, 380, 381, 382, 0,
	385, 386, 387, 388, 389, 390, 391, 393, 394, 395,
	397, 398, 399, 557, 400, 401, 402, 403, 844, 405,
	406, 558, 408, 409, 411, 412, 413, 414, 415, 416,
	573, 0, 418, 528, 419, 420, 421, 422, 423, 0,
	425, 426, 427, 428, 429, 430, 433, 434, 435, 437,
	438, 530, 439, 440, 0, 442, 443, 683, 445, 446,
	447, 448, 449, 0, 574, 450, 532, 451, 533, 452,
	453, 454, 455, 456, 457, 458, 460, 0, 0, 462,
	463, 464, 466, 467, 468, 469, 472, 473, 474, 475,
	476, 0, 477, 479, 481, 559, 536, 537, 538, 539,
	540, 542, 543, 544, 545, 482, 483, 499, 350, 344,
	300, 342, 343, 347, 348, 351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 697, 0, 1097, 797, 0,
	0, 0, 0, 845, 0, 0, 0, 0, 824, 0,
	0, 2436, 2437, 176, 0, 193, 665, 0, 242, 279,
	494, 0, 0, 339, 0, 392, 396, 0, 485, 0,
	0, 3466, 0, 250, 1094, 670, 0, 676, 0, 682,
	1093, 461, 0, 672, 673, 678, 181, 575, 484, 555,
	0, 0, 0, 346, 0, 0, 0, 0, 0, 0,
	0, 189, 0, 0, 0, 1095, 674, 671, 675, 681,
	669, 679, 666, 677, 0, 383, 317, 0, 534, 410,
	188, 234, 221, 263, 305, 417, 0, 0, 295, 465,
	230, 319, 0, 209, 352, 0, 441, 316, 0, 424,
	444, 0, 336, 215, 375, 431, 432, 663, 668, 0,
	684, 0, 219, 220, 341, 201, 349, 546, 512, 404,
	362, 360, 0, 327, 384, 541, 0, 0, 249, 0,
	244, 340, 480, 207, 459, 378, 345, 299, 407, 436,
	246, 231, 232, 275, 377, 265, 217, 470, 509, 513,
	511, 507, 504, 508, 505, 506, 510, 266, 503, 0,
	478, 487, 521, 501, 529, 486, 526, 496, 241, 525,
	490, 489, 535, 516, 517, 471, 531, 502, 500, 493,
	492, 488, 0, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 177, 0, 178, 179, 180, 182, 183,
	184, 662, 185, 186, 187, 190, 191, 192, 194, 554,
	195, 196, 197, 198, 199, 200, 491, 664, 202, 203,
	204, 205, 206, 208, 210, 211, 212, 213, 214, 216,
	218, 0, 0, 0, 667, 0, 0, 0, 222, 223,
	224, 225, 226, 227, 0, 228, 229, 233, 235, 236,
	237, 238, 239, 240, 243, 0, 245, 247, 0, 248,
	251, 0, 252, 253, 254, 255, 256, 257, 258, 259,
	495, 260, 0, 261, 262, 264, 0, 267, 268, 269,
	270, 271, 0, 272, 497, 498, 273, 274, 276, 277,
	278, 280, 281, 282, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 0, 292, 293, 294, 296, 0, 297,
	298, 301, 302, 303, 304, 0, 306, 514, 0, 307,
	308, 309, 0, 0, 310, 311, 312, 313, 314, 315,
	318, 515, 320, 321, 322, 323, 324, 325, 326, 556,
	328, 329, 330, 331, 332, 333, 334, 518, 519, 335,
	337, 338, 520, 522, 523, 680, 353, 354, 355, 356,
	357, 358, 359, 361, 0, 363, 364, 365, 524, 366,
	367, 368, 369, 0, 370, 371, 372, 373, 374, 376,
	379, 380, 381, 382, 0, 385, 386, 387, 388, 389,
	390, 391, 393, 394, 395, 397, 398, 399, 557, 400,
	401, 402, 403, 527, 405, 406, 558, 408, 409, 411,
	412, 413, 414, 415, 416, 573, 0, 418, 528, 419,
	420, 421, 422, 423, 0, 425, 426, 427, 428, 429,
	430, 433, 434, 435, 437, 438, 530, 439, 440, 0,
	442, 443, 683, 445, 446, 447, 448, 449, 0, 574,
	450, 532, 451, 533, 452, 453, 454, 455, 456, 457,
	458, 460, 0, 0, 462, 463, 464, 466, 467, 468,
	469, 472, 473, 474, 475, 476, 0, 477, 479, 481,
	559, 536, 537, 538, 539, 540, 542, 543, 544, 545,
	482, 483, 499, 350, 344, 300, 342, 343, 347, 348,
	351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 697, 0, 1097, 797, 0, 0, 0, 0, 845,
	0, 0, 0, 3467, 0, 0, 1098, 1099, 3465, 176,
	0, 193, 665, 0, 242, 279, 494, 0, 0, 339,
	0, 392, 396, 0, 485, 0, 0, 1103, 0, 250,
	1094, 670, 0, 676, 0, 682, 1093, 461, 0, 672,
	673, 678, 181, 575, 484, 555, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 189, 0, 0,
	0, 1095, 674, 671, 675, 681, 669, 679, 666, 677,
	0, 383, 317, 0, 534, 410, 188, 234, 221, 263,
	305, 417, 0, 0, 295, 465, 230, 319, 0, 209,
	352, 0, 441, 316, 0, 424, 444, 0, 336, 215,
	375, 431, 432, 663, 668, 0, 684, 0, 219, 220,
	341, 201, 349, 546, 512, 404, 362, 360, 0, 327,
	384, 541, 0, 0, 249, 0, 244, 340, 480, 207,
	459, 378, 345, 299, 407, 436, 246, 231, 232, 275,
	377, 265, 217, 470, 509, 513, 511, 507, 504, 508,
	505, 506, 510, 266, 503, 0, 478, 487, 521, 501,
	529, 486, 526, 496, 241, 525, 490, 489, 535, 516,
	517, 471, 531, 502, 500, 493, 492, 488, 0, 166,
	167, 168, 169, 170, 171, 172, 173, 174, 175, 177,
	0, 178, 179, 180, 182, 183, 184, 662, 185, 186,
	187, 190, 191, 192, 194, 554, 195, 196, 197, 198,
	199, 200, 491, 664, 202, 203, 204, 205, 206, 208,
	210, 211, 212, 213, 214, 216, 218, 0, 0, 0,
	667, 0, 0, 0, 222, 223, 224, 225, 226, 227,
	0, 228, 229, 233, 235, 236, 237, 238, 239, 240,
	243, 0, 245, 247, 0, 248, 251, 0, 252, 253,
	254, 255, 256, 257, 258, 259, 495, 260, 0, 261,
	262, 264, 0, 267, 268, 269, 270, 271, 0, 272,
	497, 498, 273, 274, 276, 277, 278, 280, 281, 282,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 0,
	292, 293, 294, 296, 0, 297, 298, 301, 302, 303,
	304, 0, 306, 514, 0, 307, 308, 309, 0, 0,
	310, 311, 312, 313, 314, 315, 318, 515, 320, 321,
	322, 323, 324, 325, 326, 556, 328, 329, 330, 331,
	332, 333, 334, 518, 519, 335, 337, 338, 520, 522,
	523, 680, 353, 354, 355, 356, 357, 358, 359, 361,
	0, 363, 364, 365, 524, 366, 367, 368, 369, 0,
	370, 371, 372, 373, 374, 376, 379, 380, 381, 382,
	0, 385, 386, 387, 388, 389, 390, 391, 393, 394,
	395, 397, 398, 399, 557, 400, 401, 402, 403, 527,
	405, 406, 558, 408, 409, 411, 412, 413, 414, 415,
	416, 573, 0, 418, 528, 419, 420, 421, 422, 423,
	0, 425, 426, 427, 428, 429, 430, 433, 434, 435,
	437, 438, 530, 439, 440, 0, 442, 443, 683, 445,
	446, 447, 448, 449, 0, 574, 450, 532, 451, 533,
	452, 453, 454, 455, 456, 457, 458, 460, 0, 0,
	462, 463, 464, 466, 467, 468, 469, 472, 473, 474,
	475, 476, 0, 477, 479, 481, 559, 536, 537, 538,
	539, 540, 542, 543, 544, 545, 482, 483, 499, 350,
	344, 300, 342, 343, 347, 348, 351, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 697, 0, 1097, 797,
	0, 0, 0, 0, 845, 0, 0, 0, 0, 0,
	0, 0, 1098, 1099, 176, 0, 193, 665, 0, 242,
	279, 494, 0, 0, 339, 0, 392, 396, 0, 485,
	0, 0, 1089, 0, 250, 1094, 670, 0, 676, 0,
	682, 1093, 461, 0, 672, 673, 678, 181, 575, 484,
	555, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 189, 0, 0, 0, 1095, 674, 671, 675,
	681, 669, 679, 666, 677, 0, 383, 317, 0, 534,
	410, 188, 234, 221, 263, 305, 417, 0, 0, 295,
	465, 230, 319, 0, 209, 352, 0, 441, 316, 0,
	424, 444, 0, 336, 215, 375, 431, 432, 663, 668,
	0, 684, 0, 219, 220, 341, 201, 349, 546, 512,
	404, 362, 360, 0, 327, 384, 541, 0, 0, 249,
	0, 244, 340, 480, 207, 459, 378, 345, 299, 407,
	436, 246, 231, 232, 275, 377, 265, 217, 470, 509,
	513, 511, 507, 504, 508, 505, 506, 510, 266, 503,
	0, 478, 487, 521, 501, 529, 486, 526, 496, 241,
	525, 490, 489, 535, 516, 517, 471, 531, 502, 500,
	493, 492, 488, 0, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 177, 0, 178, 179, 180, 182,
	183, 184, 662, 185, 186, 187, 190, 191, 192, 194,
	554, 195, 196, 197, 198, 199, 200, 491, 664, 202,
	203, 204, 205, 206, 208, 210, 211, 212, 213, 214,
	216, 218, 0, 0, 0, 667, 0, 0, 0, 222,
	223, 224, 225, 226, 227, 0, 228, 229, 233, 235,
	236, 237, 238, 239, 240, 243, 0, 245, 247, 0,
	248, 251, 0, 252, 253, 254, 255, 256, 257, 258,
	259, 495, 260, 0, 261, 262, 264, 0, 267, 268,
	269, 270, 271, 0, 272, 497, 498, 273, 274, 276,
	277, 278, 280, 281, 282, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 0, 292, 293, 294, 296, 0,
	297, 298, 301, 302, 303, 304, 0, 306, 514, 0,
	307, 308, 309, 0, 0, 310, 311, 312, 313, 314,
	315, 318, 515, 320, 321, 322, 323, 324, 325, 326,
	556, 328, 329, 330, 331, 332, 333, 334, 518, 519,
	335, 337, 338, 520, 522, 523, 680, 353, 354, 355,
	356, 357, 358, 359, 361, 0, 363, 364, 365, 524,
	366, 367, 368, 369, 0, 370, 371, 372, 373, 374,
	376, 379, 380, 381, 382, 0, 385, 386, 387, 388,
	389, 390, 391, 393, 394, 395, 397, 398, 399, 557,
	400, 401, 402, 403, 527, 405, 406, 558, 408, 409,
	411, 412, 413, 414, 415, 416, 573, 0, 418, 528,
	419, 420, 421, 422, 423, 0, 425, 426, 427, 428,
	429, 430, 433, 434, 435, 437, 438, 530, 439, 440,
	0, 442, 443, 683, 445, 446, 447, 448, 449, 0,
	574, 450, 532, 451, 533, 452, 453, 454, 455, 456,
	457, 458, 460, 0, 0, 462, 463, 464, 466, 467,
	468, 469, 472, 473, 474, 475, 476, 0, 477, 479,
	481, 559, 536, 537, 538, 539, 540, 542, 543, 544,
	545, 482, 483, 499, 350, 344, 300, 342, 343, 347,
	348, 351, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 697, 0, 1097, 797, 0, 0, 0, 0, 845,
	0, 0, 0, 0, 0, 0, 0, 1098, 1099, 176,
	0, 193, 665, 0, 242, 279, 494, 0, 0, 339,
	0, 392, 396, 0, 485, 0, 0, 0, 0, 250,
	1094, 670, 0, 676, 0, 682, 1093, 461, 0, 672,
	673, 678, 181, 575, 484, 555, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 189, 0, 0,
	0, 1095, 674, 671, 675, 681, 669, 679, 666, 677,
	0, 383, 317, 0, 534, 410, 188, 234, 221, 263,
	305, 417, 0, 0, 295, 465, 230, 319, 0, 209,
	352, 0, 441, 316, 0, 424, 444, 0, 336, 215,
	375, 431, 432, 663, 668, 0, 684, 0, 219, 220,
	341, 201, 349, 546, 512, 404, 362, 360, 0, 327,
	384, 541, 0, 0, 249, 0, 244, 340, 480, 207,
	459, 378, 345, 299, 407, 436, 246, 231, 232, 275,
	377, 265, 217, 470, 509, 513, 511, 507, 504, 508,
	505, 506, 510, 266, 503, 0, 478, 487, 521, 501,
	529, 486, 526, 496, 241, 525, 490, 489, 535, 516,
	517, 471, 531, 502, 500, 493, 492, 488, 0, 166,
	167, 168, 169, 170, 171, 172, 173, 174, 175, 177,
	0, 178, 179, 180, 182, 183, 184, 662, 185, 186,
	187, 190, 191, 192, 194, 554, 195, 196, 197, 198,
	199, 200, 491, 664, 202, 203, 204, 205, 206, 208,
	210, 211, 212, 213, 214, 216, 218, 0, 0, 0,
	667, 0, 0, 0, 222, 223, 224, 225, 226, 227,
	0, 228, 229, 233, 235, 236, 237, 238, 239, 240,
	243, 0, 245, 247, 0, 248, 251, 0, 252, 253,
	254, 255, 256, 257, 258, 259, 495, 260, 0, 261,
	262, 264, 0, 267, 268, 269, 270, 271, 0, 272,
	497, 498, 273, 274, 276, 277, 278, 280, 281, 282,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 0,
	292, 293, 294, 296, 0, 297, 298, 301, 302, 303,
	304, 0, 306, 514, 0, 307, 308, 309, 0, 0,
	310, 311, 312, 313, 314, 315, 318, 515, 320, 321,
	322, 323, 324, 325, 326, 556, 328, 329, 330, 331,
	332, 333, 334, 518, 519, 335, 337, 338, 520, 522,
	523, 680, 353, 354, 355, 356, 357, 358, 359, 361,
	0, 363, 364, 365, 524, 366, 367, 368, 369, 0,
	370, 371, 372, 373, 374, 376, 379, 380, 381, 382,
	0, 385, 386, 387, 388, 389, 390, 391, 393, 394,
	395, 397, 398, 399, 557, 400, 401, 402, 403, 527,
	405, 406, 558, 408, 409, 411, 412, 413, 414, 415,
	416, 573, 0, 418, 528, 419, 420, 421, 422, 423,
	0, 425, 426, 427, 428, 429, 430, 433, 434, 435,
	437, 438, 530, 439, 440, 0, 442, 443, 683, 445,
	446, 447, 448, 449, 0, 574, 450, 532, 451, 533,
	452, 453, 454, 455, 456, 457, 458, 460, 0, 0,
	462, 463, 464, 466, 467, 468, 469, 472, 473, 474,
	475, 476, 0, 477, 479, 481, 559, 536, 537, 538,
	539, 540, 542, 543, 544, 545, 482, 483, 499, 350,
	344, 300, 342, 343, 347, 348, 351, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 659, 0, 837, 797,
	0, 0, 0, 0, 845, 823, 0, 0, 0, 0,
	0, 0, 1098, 1099, 176, 0, 193, 665, 0, 242,
	279, 828, 0, 0, 339, 0, 392, 396, 0, 485,
	842, 0, 0, 0, 250, 840, 670, 0, 676, 841,
	682, 839, 461, 0, 672, 673, 678, 181, 575, 484,
	555, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 674, 671, 675,
	681, 669, 679, 666, 677, 0, 383, 317, 0, 534,
	410, 188, 234, 221, 263, 305, 417, 0, 0, 295,
	465, 230, 319, 0, 209, 352, 0, 441, 316, 0,
	424, 444, 0, 336, 215, 375, 431, 432, 663, 668,
	0, 684, 0, 219, 220, 341, 201, 349, 546, 512,
	404, 362, 360, 0, 327, 384, 541, 829, 0, 249,
	0, 244, 340, 480, 207, 459, 378, 345, 299, 407,
	436, 246, 231, 232, 275, 377, 265, 217, 470, 509,
	513, 511, 507, 504, 508, 505, 506, 510, 266, 503,
	0, 478, 487, 521, 501, 529, 486, 526, 496, 241,
	525, 490, 489, 535, 516, 517, 471, 531, 502, 500,
	493, 492, 488, 0, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 177, 0, 178, 179, 180, 182,
	183, 184, 662, 185, 186, 187, 190, 191, 192, 194,
	554, 195, 196, 197, 198, 199, 200, 491, 664, 202,
	203, 204, 205, 206, 208, 210, 211, 212, 213, 214,
	216, 218, 0, 0, 0, 667, 0, 0, 0, 222,
	223, 224, 225, 226, 227, 0, 228, 229, 233, 235,
	236, 237, 238, 239, 240, 243, 0, 245, 247, 0,
	248, 251, 0, 252, 253, 254, 255, 256, 257, 258,
	259, 495, 260, 0, 261, 262, 264, 0, 267, 268,
	269, 270, 271, 0, 272, 497, 832, 273, 274, 276,
	277, 278, 280, 281, 282, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 0, 292, 293, 294, 296, 0,
	297, 298, 301, 302, 303, 304, 0, 306, 514, 0,
	307, 308, 309, 0, 0, 310, 311, 312, 313, 314,
	315, 318, 515, 320, 321, 322, 323, 324, 325, 326,
	556, 328, 329, 330, 331, 332, 333, 334, 518, 519,
	335, 337, 338, 520, 522, 523, 680, 353, 354, 355,
	356, 357, 358, 359, 361, 0, 363, 364, 365, 524,
	366, 367, 368, 369, 0, 370, 371, 372, 373, 374,
	376, 379, 380, 381, 382, 0, 385, 386, 387, 388,
	389, 390, 391, 393, 394, 395, 397, 398, 399, 557,
	400, 401, 402, 403, 844, 405, 406, 558, 408, 409,
	411, 412, 413, 414, 415, 416, 573, 0, 418, 528,
	419, 420, 421, 422, 423, 0, 425, 426, 427, 428,
	429, 430, 433, 434, 435, 437, 438, 530, 439, 440,
	0, 442, 443, 683, 445, 446, 447, 448, 449, 0,
	574, 450, 532, 451, 533, 452, 453, 454, 455, 456,
	457, 458, 460, 0, 0, 462, 463, 464, 466, 467,
	468, 469, 472, 473, 474, 475, 476, 0, 477, 479,
	481, 559, 536, 537, 538, 539, 540, 542, 543, 544,
	545, 482, 483, 499, 350, 344, 300, 342, 343, 347,
	348, 351, 659, 0, 837, 797, 0, 0, 0, 0,
	845, 823, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 193, 665, 824, 242, 279, 828, 0, 0,
	339, 0, 392, 396, 0, 485, 842, 0, 0, 0,
	250, 840, 670, 0, 676, 841, 682, 839, 461, 0,
	672, 673, 678, 181, 575, 484, 555, 0, 0, 0,
	346, 0, 0, 0, 0, 0, 0, 0, 3275, 0,
	0, 0, 0, 674, 671, 675, 681, 669, 679, 666,
	677, 0, 383, 317, 0, 534, 410, 188, 234, 221,
	263, 305, 417, 0, 0, 295, 465, 230, 319, 0,
	209, 352, 0, 441, 316, 0, 424, 444, 0, 336,
	215, 375, 431, 432, 663, 668, 0, 684, 0, 219,
	220, 341, 201, 349, 546, 512, 404, 362, 360, 0,
	327, 384, 541, 829, 0, 249, 0, 244, 340, 480,
	207, 459, 378, 345, 299, 407, 436, 246, 231, 232,
	275, 377, 265, 217, 470, 509, 513, 511, 507, 504,
	508, 505, 506, 510, 266, 503, 0, 478, 487, 521,
	501, 529, 486, 526, 496, 241, 525, 490, 489, 535,
	516, 517, 471, 531, 502, 500, 493, 492, 488, 0,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	177, 0, 178, 179, 180, 182, 183, 184, 662, 185,
	186, 187, 190, 191, 192, 194, 554, 195, 196, 197,
	198, 199, 200, 491, 664, 202, 203, 204, 205, 206,
	208, 210, 211, 212, 213, 214, 216, 218, 0, 0,
	0, 667, 0, 0, 0, 222, 223, 224, 225, 226,
	227, 0, 228, 229, 233, 235, 236, 237, 238, 239,
	240, 243, 0, 245, 247, 0, 248, 251, 0, 252,
	253, 254, 255, 256, 257, 258, 259, 495, 260, 0,
	261, 262, 264, 0, 267, 268, 269, 270, 271, 0,
	272, 497, 832, 273, 274, 276, 277, 278, 280, 281,
	282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
	0, 292, 293, 294, 296, 0, 297, 298, 301, 302,
	303, 304, 0, 306, 514, 0, 307, 308, 309, 0,
	0, 310, 311, 312, 313, 314, 315, 318, 515, 320,
	321, 322, 323, 324, 325, 326, 556, 328, 329, 330,
	331, 332, 333, 334, 518, 519, 335, 337, 338, 520,
	522, 523, 680, 353, 354, 355, 356, 357, 358, 359,
	361, 0, 363, 364, 365, 524, 366, 367, 368, 369,
	0, 370, 371, 372, 373, 374, 376, 379, 380, 381,
	382, 0, 385, 386, 387, 388, 389, 390, 391, 393,
	394, 395, 397, 398, 399, 557, 400, 401, 402, 403,
	844, 405, 406, 558, 408, 409, 411, 412, 413, 414,
	415, 416, 573, 0, 418, 528, 419, 420, 421, 422,
	423, 0, 425, 426, 427, 428, 429, 430, 433, 434,
	435, 437, 438, 530, 439, 440, 0, 442, 443, 683,
	445, 446, 447, 448, 449, 0, 574, 450, 532, 451,
	533, 452, 453, 454, 455, 456, 457, 458, 460, 0,
	0, 462, 463, 464, 466, 467, 468, 469, 472, 473,
	474, 475, 476, 0, 477, 479, 481, 559, 536, 537,
	538, 539, 540, 542, 543, 544, 545, 482, 483, 499,
	350, 344, 300, 342, 343, 347, 348, 351, 659, 0,
	837, 797, 0, 0, 0, 0, 845, 823, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 193, 665,
	824, 242, 279, 828, 0, 0, 339, 0, 392, 396,
	0, 485, 842, 0, 0, 0, 250, 840, 670, 0,
	676, 841, 682, 839, 461, 0, 672, 673, 678, 181,
	575, 484, 555, 0, 0, 0, 346, 0, 0, 0,
	0, 0, 0, 0, 189, 0, 0, 0, 0, 674,
	671, 675, 681, 669, 679, 666, 677, 0, 383, 317,
	0, 534, 410, 188, 234, 221, 263, 305, 417, 0,
	0, 295, 465, 230, 319, 0, 209, 352, 0, 441,
	316, 0, 424, 444, 0, 336, 215, 375, 431, 432,
	663, 668, 0, 684, 0, 219, 220, 341, 201, 349,
	546, 512, 404, 362, 360, 0, 327, 384, 2847, 829,
	0, 249, 0, 244, 340, 480, 207, 459, 378, 345,
	299, 407, 436, 246, 231, 232, 275, 377, 265, 217,
	470, 509, 513, 511, 507, 504, 508, 505, 506, 510,
	266, 503, 0, 478, 487, 521, 501, 529, 486, 526,
	496, 241, 525, 490, 489, 535, 516, 517, 471, 531,
	502, 500, 493, 492, 488, 0, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 177, 0, 178, 179,
	180, 182, 183, 184, 662, 185, 186, 187, 190, 191,
	192, 194, 554, 195, 196, 197, 198, 199, 200, 491,
	664, 202, 203, 204, 205, 206, 208, 210, 211, 212,
	213, 214, 216, 218, 0, 0, 0, 667, 0, 0,
	0, 222, 223, 224, 225, 226, 227, 0, 228, 229,
	233, 235, 236, 237, 238, 239, 240, 243, 0, 245,
	247, 0, 248, 251, 0, 252, 253, 254, 255, 256,
	257, 258, 259, 495, 260, 0, 261, 262, 264, 0,
	267, 268, 269, 270, 271, 0, 272, 497, 832, 273,
	274, 276, 277, 278, 280, 281, 282, 283, 284, 285,
	286, 287, 288, 289, 290, 291, 0, 292, 293, 294,
	296, 0, 297, 298, 301, 302, 303, 304, 0, 306,
	514, 0, 307, 308, 309, 0, 0, 310, 311, 312,
	313, 314, 315, 318, 515, 320, 321, 322, 323, 324,
	325, 326, 556, 328, 329, 330, 331, 332, 333, 334,
	518, 519, 335, 337, 338, 520, 522, 523, 680, 353,
	354, 355, 356, 357, 358, 359, 361, 0, 363, 364,
	365, 524, 366, 367, 368, 369, 0, 370, 371, 372,
	373, 374, 376, 379, 380, 381, 382, 0, 385, 386,
	387, 388, 389, 390, 391, 393, 394, 395, 397, 398,
	399, 557, 400, 401, 402, 403, 844, 405, 406, 558,
	408, 409, 411, 412, 413, 414, 415, 416, 573, 0,
	418, 528, 419, 420, 421, 422, 423, 0, 425, 426,
	427, 428, 429, 430, 433, 434, 435, 437, 438, 530,
	439, 440, 0, 442, 443, 683, 445, 446, 447, 448,
	449, 0, 574, 450, 532, 451, 533, 452, 453, 454,
	455, 456, 457, 458, 460, 0, 0, 462, 463, 464,
	466, 467, 468, 469, 472, 473, 474, 475, 476, 0,
	477, 479, 481, 559, 536, 537, 538, 539, 540, 542,
	543, 544, 545, 482, 483, 499, 350, 344, 300, 342,
	343, 347, 348, 351, 659, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 193, 665, 824, 242, 279, 494,
	0, 0, 339, 0, 392, 396, 57, 485, 0, 0,
	0, 0, 250, 0, 670, 0, 676, 0, 682, 0,
	461, 0, 672, 673, 678, 181, 575, 484, 555, 0,
	0, 0, 346, 54, 0, 0, 572, 55, 0, 0,
	189, 0, 0, 0, 0, 674, 671, 675, 681, 669,
	679, 666, 677, 0, 383, 317, 2099, 1603, 410, 188,
	234, 221, 263, 305, 417, 0, 0, 295, 465, 230,
	319, 0, 209, 352, 0, 441, 316, 0, 424, 444,
	0, 336, 215, 375, 431, 432, 663, 668, 0, 684,
	0, 219, 220, 341, 201, 349, 2107, 2108, 2106, 362,
	360, 0, 327, 384, 541, 0, 0, 249, 0, 244,
	340, 480, 207, 459, 378, 345, 299, 407, 436, 246,
	231, 232, 275, 377, 265, 217, 470, 509, 513, 511,
	507, 504, 508, 505, 506, 510, 266, 503, 0, 478,
	487, 521, 501, 529, 486, 526, 496, 241, 525, 490,
	489, 535, 516, 517, 471, 531, 502, 500, 493, 492,
	488, 0, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 177, 0, 178, 179, 180, 182, 183, 184,
	662, 185, 186, 187, 190, 191, 192, 194, 554, 195,
	196, 197, 198, 199, 200, 491, 664, 202, 203, 204,
	205, 206, 208, 210, 211, 212, 213, 214, 216, 218,
	0, 0, 0, 667, 0, 0, 0, 222, 223, 224,
	225, 226, 227, 0, 228, 229, 233, 235, 236, 237,
	238, 239, 240, 243, 0, 245, 247, 0, 248, 251,
	0, 252, 253, 254, 255, 256, 257, 258, 259, 495,
	260, 0, 261, 262, 264, 0, 267, 268, 269, 270,
	271, 0, 272, 497, 498, 273, 274, 276, 277, 278,
	280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 0, 292, 293, 294, 296, 0, 297, 298,
	301, 302, 303, 304, 0, 306, 514, 0, 307, 308,
	309, 0, 0, 310, 311, 312, 313, 314, 315, 318,
	515, 320, 321, 322, 323, 324, 325, 326, 556, 328,
	329, 330, 331, 332, 333, 334, 518, 519, 335, 337,
	338, 520, 522, 523, 680, 353, 354, 355, 356, 357,
	358, 359, 361, 0, 363, 364, 365, 524, 366, 367,
	368, 369, 0, 370, 371, 372, 373, 374, 376, 379,
	380, 381, 382, 0, 385, 386, 387, 388, 389, 390,
	391, 393, 394, 395, 397, 398, 399, 557, 400, 401,
	402, 403, 527, 405, 406, 558, 408, 409, 411, 412,
	413, 414, 415, 416, 573, 0, 418, 528, 419, 420,
	421, 422, 423, 0, 425, 426, 427, 428, 429, 430,
	433, 434, 435, 437, 438, 530, 439, 440, 0, 442,
	443, 683, 445, 446, 447, 448, 449, 0, 574, 450,
	532, 451, 533, 452, 453, 454, 455, 456, 457, 458,
	460, 0, 0, 462, 463, 464, 466, 467, 468, 469,
	472, 473, 474, 475, 476, 0, 477, 479, 481, 559,
	536, 537, 538, 539, 540, 542, 543, 544, 545, 482,
	483, 499, 350, 344, 300, 342, 343, 347, 348, 351,
	659, 0, 0, 0, 0, 0, 0, 0, 0, 58,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	193, 665, 2101, 242, 279, 494, 0, 0, 339, 0,
	392, 396, 0, 485, 0, 0, 0, 0, 250, 0,
	670, 0, 676, 0, 682, 0, 461, 0, 672, 673,
	678, 181, 575, 484, 555, 0, 0, 0, 346, 0,
	0, 0, 572, 0, 0, 0, 189, 0, 0, 0,
	0, 674, 671, 675, 681, 669, 679, 666, 677, 0,
	383, 317, 2099, 534, 410, 188, 234, 221, 263, 305,
	417, 0, 0, 295, 465, 230, 319, 0, 209, 352,
	0, 441, 316, 0, 424, 444, 0, 336, 215, 375,
	431, 432, 663, 668, 0, 684, 0, 219, 220, 341,
	201, 349, 2107, 2108, 2106, 362, 360, 0, 327, 384,
	541, 0, 0, 249, 0, 244, 340, 480, 207, 459,
	378, 345, 299, 407, 436, 246, 231, 232, 275, 377,
	265, 217, 470, 509, 513, 511, 507, 504, 508, 505,
	506, 510, 266, 503, 0, 478, 487, 521, 501, 529,
	486, 526, 496, 241, 525, 490, 489, 535, 516, 517,
	471, 531, 502, 500, 493, 492, 488, 0, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 177, 0,
	178, 179, 180, 182, 183, 184, 662, 185, 186, 187,
	190, 191, 192, 194, 554, 195, 196, 197, 198, 199,
	200, 491, 664, 202, 203, 204, 205, 206, 208, 210,
	211, 212, 213, 214, 216, 218, 0, 0, 0, 667,
	0, 0, 0, 222, 223, 224, 225, 226, 227, 0,
	228, 229, 233, 235, 236, 237, 238, 239, 240, 243,
	0, 245, 247, 0, 248, 251, 0, 252, 253, 254,
	255, 256, 257, 258, 259, 495, 260, 0, 261, 262,
	264, 0, 267, 268, 269, 270, 271, 0, 272, 497,
	498, 273, 274, 276, 277, 278, 280, 281, 282, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 0, 292,
	293, 294, 296, 0, 297, 298, 301, 302, 303, 304,
	0, 306, 514, 0, 307, 308, 309, 0, 0, 310,
	311, 312, 313, 314, 315, 318, 515, 320, 321, 322,
	323, 324, 325, 326, 556, 328, 329, 330, 331, 332,
	333, 334, 518, 519, 335, 337, 338, 520, 522, 523,
	680, 353, 354, 355, 356, 357, 358, 359, 361, 0,
	363, 364, 365, 524, 366, 367, 368, 369, 0, 370,
	371, 372, 373, 374, 376, 379, 380, 381, 382, 0,
	385, 386, 387, 388, 389, 390, 391, 393, 394, 395,
	397, 398, 399, 557, 400, 401, 402, 403, 527, 405,
	406, 558, 408, 409, 411, 412, 413, 414, 415, 416,
	573, 0, 418, 528, 419, 420, 421, 422, 423, 0,
	425, 426, 427, 428, 429, 430, 433, 434, 435, 437,
	438, 530, 439, 440, 0, 442, 443, 683, 445, 446,
	447, 448, 449, 0, 574, 450, 532, 451, 533, 452,
	453, 454, 455, 456, 457, 458, 460, 0, 0, 462,
	463, 464, 466, 467, 468, 469, 472, 473, 474, 475,
	476, 0, 477, 479, 481, 559, 536, 537, 538, 539,
	540, 542, 543, 544, 545, 482, 483, 499, 350, 344,
	300, 342, 343, 347, 348, 351, 659, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 193, 665, 2101, 242,
	279, 494, 0, 0, 339, 0, 392, 396, 0, 485,
	0, 0, 0, 0, 250, 0, 670, 0, 676, 0,
	682, 0, 461, 0, 672, 673, 678, 181, 575, 484,
	555, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 674, 671, 675,
	681, 669, 679, 666, 677, 0, 383, 317, 0, 534,
	410, 188, 234, 221, 263, 305, 417, 0, 0, 295,
	465, 230, 319, 0, 209, 352, 0, 441, 316, 0,
	424, 444, 0, 336, 215, 375, 431, 432, 663, 668,
	0, 684, 0, 219, 220, 341, 201, 349, 546, 512,
	404, 362, 360, 0, 327, 384, 541, 0, 0, 249,
	0, 244, 340, 480, 207, 459, 378, 345, 299, 407,
	436, 246, 231, 232, 275, 377, 265, 217, 470, 509,
	513, 511, 507, 504, 508, 505, 506, 510, 266, 503,
	0, 478, 487, 521, 501, 529, 486, 526, 496, 241,
	525, 490, 489, 535, 516, 517, 471, 531, 502, 500,
	493, 492, 488, 0, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 177, 0, 178, 179, 180, 182,
	183, 184, 662, 185, 186, 187, 190, 191, 192, 194,
	554, 195, 196, 197, 198, 199, 200, 491, 664, 202,
	203, 204, 205, 206, 208, 210, 211, 212, 213, 214,
	216, 218, 0, 0, 0, 667, 0, 0, 0, 222,
	223, 224, 225, 226, 227, 0, 228, 229, 233, 235,
	236, 237, 238, 239, 240, 243, 0, 245, 247, 0,
	248, 251, 0, 252, 253, 254, 255, 256, 257, 258,
	259, 495, 260, 0, 261, 262, 264, 0, 267, 268,
	269, 270, 271, 0, 272, 497, 498, 273, 274, 276,
	277, 278, 280, 281, 282, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 0, 292, 293, 294, 296, 0,
	297, 298, 301, 302, 303, 304, 0, 306, 514, 0,
	307, 308, 309, 0, 0, 310, 311, 312, 313, 314,
	315, 318, 515, 320, 321, 322, 323, 324, 325, 326,
	556, 328, 329, 330, 331, 332, 333, 334, 518, 519,
	335, 337, 338, 520, 522, 523, 680, 353, 354, 355,
	356, 357, 358, 359, 361, 0, 363, 364, 365, 524,
	366, 367, 368, 369, 0, 370, 371, 372, 373, 374,
	376, 379, 380, 381, 382, 0, 385, 386, 387, 388,
	389, 390, 391, 393, 394, 395, 397, 398, 399, 557,
	400, 401, 402, 403, 527, 405, 406, 558, 408, 409,
	411, 412, 413, 414, 415, 416, 573, 0, 418, 528,
	419, 420, 421, 422, 423, 0, 425, 426, 427, 428,
	429, 430, 433, 434, 435, 437, 438, 530, 439, 440,
	0, 442, 443, 683, 445, 446, 447, 448, 449, 0,
	574, 450, 532, 451, 533, 452, 453, 454, 455, 456,
	457, 458, 460, 0, 0, 462, 463, 464, 466, 467,
	468, 469, 472, 473, 474, 475, 476, 0, 477, 479,
	481, 559, 536, 537, 538, 539, 540, 542, 543, 544,
	545, 482, 483, 499, 350, 344, 300, 342, 343, 347,
	348, 351, 659, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 193, 665, 2970, 242, 279, 494, 0, 0,
	339, 0, 392, 396, 0, 485, 0, 0, 0, 0,
	250, 0, 670, 0, 676, 0, 682, 0, 461, 0,
	672, 673, 678, 181, 575, 484, 555, 0, 0, 0,
	346, 0, 0, 0, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 674, 671, 675, 681, 669, 679, 666,
	677, 0, 383, 317, 0, 534, 410, 188, 234, 221,
	263, 305, 417, 0, 0, 295, 465, 230, 319, 0,
	209, 352, 0, 441, 316, 0, 424, 444, 0, 336,
	215, 375, 431, 432, 663, 668, 0, 684, 0, 219,
	220, 341, 201, 349, 546, 512, 404, 362, 360, 0,
	327, 384, 541, 0, 0, 249, 0, 244, 340, 480,
	207, 459, 378, 345, 299, 407, 436, 246, 231, 232,
	275, 377, 265, 217, 470, 509, 513, 511, 507, 504,
	508, 505, 506, 510, 266, 503, 0, 478, 487, 521,
	501, 529, 486, 526, 496, 241, 525, 490, 489, 535,
	516, 517, 471, 531, 502, 500, 493, 492, 488, 0,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	177, 0, 178, 179, 180, 182, 183, 184, 662, 185,
	186, 187, 190, 191, 192, 194, 554, 195, 196, 197,
	198, 199, 200, 491, 664, 202, 203, 204, 205, 206,
	208, 210, 211, 212, 213, 214, 216, 218, 0, 0,
	0, 667, 0, 0, 0, 222, 223, 224, 225, 226,
	227, 0, 228, 229, 233, 235, 236, 237, 238, 239,
	240, 243, 0, 245, 247, 0, 248, 251, 0, 252,
	253, 254, 255, 256, 257, 258, 259, 495, 260, 0,
	261, 262, 264, 0, 267, 268, 269, 270, 271, 0,
	272, 497, 498, 273, 274, 276, 277, 278, 280, 281,
	282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
	0, 292, 293, 294, 296, 0, 297, 298, 301, 302,
	303, 304, 0, 306, 514, 0, 307, 308, 309, 0,
	0, 310, 311, 312, 313, 314, 315, 318, 515, 320,
	321, 322, 323, 324, 325, 326, 556, 328, 329, 330,
	331, 332, 333, 334, 518, 519, 335, 337, 338, 520,
	522, 523, 680, 353, 354, 355, 356, 357, 358, 359,
	361, 0, 363, 364, 365, 524, 366, 367, 368, 369,
	0, 370, 371, 372, 373, 374, 376, 379, 380, 381,
	382, 0, 385, 386, 387, 388, 389, 390, 391, 393,
	394, 395, 397, 398, 399, 557, 400, 401, 402, 403,
	527, 405, 406, 558, 408, 409, 411, 412, 413, 414,
	415, 416, 573, 0, 418, 528, 419, 420, 421, 422,
	423, 0, 425, 426, 427, 428, 429, 430, 433, 434,
	435, 437, 438, 530, 439, 440, 0, 442, 443, 683,
	445, 446, 447, 448, 449, 0, 574, 450, 532, 451,
	533, 452, 453, 454, 455, 456, 457, 458, 460, 0,
	0, 462, 463, 464, 466, 467, 468, 469, 472, 473,
	474, 475, 476, 0, 477, 479, 481, 559, 536, 537,
	538, 539, 540, 542, 543, 544, 545, 482, 483, 499,
	350, 344, 300, 342, 343, 347, 348, 351, 659, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 193, 665,
	3603, 242, 279, 494, 0, 0, 339, 0, 392, 396,
	0, 485, 0, 0, 0, 0, 250, 0, 670, 0,
	676, 0, 682, 0, 461, 0, 672, 673, 678, 181,
	575, 484, 555, 0, 0, 0, 346, 0, 0, 0,
	0, 0, 0, 0, 189, 0, 0, 0, 0, 674,
	671, 675, 681, 669, 679, 666, 677, 0, 383, 317,
	0, 534, 410, 188, 234, 221, 263, 305, 417, 0,
	0, 295, 465, 230, 319, 0, 209, 352, 0, 441,
	316, 0, 424, 444, 0, 336, 215, 375, 431, 432,
	663, 668, 0, 684, 0, 219, 220, 341, 201, 349,
	2107, 2108, 2106, 362, 360, 0, 327, 384, 541, 0,
	0, 249, 0, 244, 340, 480, 207, 459, 378, 345,
	299, 407, 436, 246, 231, 232, 275, 377, 265, 217,
	470, 509, 513, 511, 507, 504, 508, 505, 506, 510,
	266, 503, 0, 478, 487, 521, 501, 529, 486, 526,
	496, 241, 525, 490, 489, 535, 516, 517, 471, 531,
	502, 500, 493, 492, 488, 0, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 177, 0, 178, 179,
	180, 182, 183, 184, 662, 185, 186, 187, 190, 191,
	192, 194, 554, 195, 196, 197, 198, 199, 200, 491,
	664, 202, 203, 204, 205, 206, 208, 210, 211, 212,
	213, 214, 216, 218, 0, 0, 0, 667, 0, 0,
	0, 222, 223, 224, 225, 226, 227, 0, 228, 229,
	233, 235, 236, 237, 238, 239, 240, 243, 0, 245,
	247, 0, 248, 251, 0, 252, 253, 254, 255, 256,
	257, 258, 259, 495, 260, 0, 261, 262, 264, 0,
	267, 268, 269, 270, 271, 0, 272, 497, 498, 273,
	274, 276, 277, 278, 280, 281, 282, 283, 284, 285,
	286, 287, 288, 289, 290, 291, 0, 292, 293, 294,
	296, 0, 297, 298, 301, 302, 303, 304, 0, 306,
	514, 0, 307, 308, 309, 0, 0, 310, 311, 312,
	313, 314, 315, 318, 515, 320, 321, 322, 323, 324,
	325, 326, 556, 328, 329, 330, 331, 332, 333, 334,
	518, 519, 335, 337, 338, 520, 522, 523, 680, 353,
	354, 355, 356, 357, 358, 359, 361, 0, 363, 364,
	365, 524, 366, 367, 368, 369, 0, 370, 371, 372,
	373, 374, 376, 379, 380, 381, 382, 0, 385, 386,
	387, 388, 389, 390, 391, 393, 394, 395, 397, 398,
	399, 557, 400, 401, 402, 403, 527, 405, 406, 558,
	408, 409, 411, 412, 413, 414, 415, 416, 573, 0,
	418, 528, 419, 420, 421, 422, 423, 0, 425, 426,
	427, 428, 429, 430, 433, 434, 435, 437, 438, 530,
	439, 440, 0, 442, 443, 683, 445, 446, 447, 448,
	449, 0, 574, 450, 532, 451, 533, 452, 453, 454,
	455, 456, 457, 458, 460, 0, 0, 462, 463, 464,
	466, 467, 468, 469, 472, 473, 474, 475, 476, 0,
	477, 479, 481, 559, 536, 537, 538, 539, 540, 542,
	543, 544, 545, 482, 483, 499, 350, 344, 300, 342,
	343, 347, 348, 351, 163, 0, 0, 0, 0, 0,
	0, 612, 0, 0, 0, 0, 0, 0, 623, 624,
	625, 0, 176, 0, 193, 0, 53, 242, 279, 494,
	0, 0, 339, 0, 392, 396, 0, 485, 0, 0,
	0, 0, 250, 0, 0, 0, 0, 0, 0, 0,
	461, 0, 0, 0, 0, 181, 575, 484, 555, 0,
	0, 0, 346, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 383, 317, 0, 534, 410, 188,
	234, 221, 263, 305, 417, 0, 0, 295, 465, 230,
	319, 0, 209, 352, 0, 441, 316, 0, 424, 444,
	0, 336, 215, 375, 431, 432, 0, 0, 0, 0,
	0, 219, 220, 341, 201, 349, 546, 512, 404, 362,
	360, 0, 327, 384, 541, 0, 0, 249, 0, 244,
	340, 480, 207, 459, 378, 345, 299, 407, 436, 246,
	231, 232, 275, 377, 265, 217, 470, 509, 513, 511,
	507, 504, 508, 505, 506, 510, 266, 503, 0, 478,
	487, 521, 501, 529, 486, 526, 496, 241, 525, 490,
	489, 535, 516, 517, 471, 531, 502, 500, 493, 492,
	488, 0, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 177, 0, 178, 179, 180, 182, 183, 184,
	0, 185, 186, 187, 190, 191, 192, 194, 554, 195,
	196, 197, 198, 199, 200, 491, 0, 202, 203, 204,
	205, 206, 208, 210, 211, 212, 213, 214, 216, 218,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 224,
	225, 226, 227, 0, 228, 229, 233, 235, 236, 237,
	238, 239, 240, 243, 0, 245, 247, 0, 248, 251,
	0, 252, 253, 254, 255, 256, 257, 258, 259, 495,
	260, 0, 261, 262, 264, 0, 267, 268, 269, 270,
	271, 0, 272, 497, 498, 273, 274, 276, 277, 278,
	280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 0, 292, 293, 294, 296, 0, 297, 298,
	301, 302, 303, 304, 0, 306, 514, 0, 307, 308,
	309, 0, 0, 310, 311, 312, 313, 314, 315, 318,
	515, 320, 321, 322, 323, 324, 325, 326, 556, 328,
	329, 330, 331, 332, 333, 334, 518, 519, 335, 337,
	338, 520, 522, 523, 0, 353, 354, 355, 356, 357,
	358, 359, 361, 0, 363, 364, 365, 524, 366, 367,
	368, 369, 0, 370, 371, 372, 373, 374, 376, 379,
	380, 381, 382, 0, 385, 386, 387, 388, 389, 390,
	391, 393, 394, 395, 397, 398, 399, 557, 400, 401,
	402, 403, 527, 405, 406, 558, 408, 409, 411, 412,
	413, 414, 415, 416, 573, 0, 418, 528, 419, 420,
	421, 422, 423, 0, 425, 426, 427, 428, 429, 430,
	433, 434, 435, 437, 438, 530, 439, 440, 0, 442,
	443, 0, 445, 446, 447, 448, 449, 0, 574, 450,
	532, 451, 533, 452, 453, 454, 455, 456, 457, 458,
	460, 0, 0, 462, 463, 464, 466, 467, 468, 469,
	472, 473, 474, 475, 476, 0, 477, 479, 481, 559,
	536, 537, 538, 539, 540, 542, 543, 544, 545, 482,
	483, 499, 350, 344, 300, 342, 343, 347, 348, 351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 621, 622, 0,
	0, 0, 0, 0, 163, 614, 615, 616, 617, 618,
	619, 612, 0, 0, 0, 0, 0, 0, 623, 624,
	625, 0, 176, 0, 193, 0, 0, 242, 279, 494,
	0, 0, 339, 0, 392, 396, 0, 485, 0, 0,
	0, 0, 250, 0, 0, 0, 0, 0, 0, 0,
	461, 0, 0, 0, 0, 181, 575, 484, 555, 0,
	0, 0, 3390, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 383, 317, 0, 534, 410, 188,
	234, 221, 263, 305, 417, 0, 0, 295, 465, 230,
	319, 0, 209, 352, 0, 441, 316, 0, 424, 444,
	0, 336, 215, 375, 431, 432, 0, 0, 0, 0,
	0, 219, 220, 341, 201, 349, 546, 512, 404, 362,
	360, 0, 327, 384, 541, 0, 0, 249, 0, 244,
	340, 480, 207, 459, 378, 345, 299, 407, 436, 246,
	231, 232, 275, 377, 265, 217, 470, 509, 513, 511,
	507, 504, 508, 505, 506, 510, 266, 503, 0, 478,
	487, 521, 501, 529, 486, 526, 496, 241, 525, 490,
	489, 535, 516, 517, 471, 531, 502, 500, 493, 492,
	488, 0, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 177, 0, 178, 179, 180, 182, 183, 184,
	0, 185, 186, 187, 190, 191, 192, 194, 554, 195,
	196, 197, 198, 199, 200, 491, 0, 202, 203, 204,
	205, 206, 208, 210, 211, 212, 213, 214, 216, 218,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 224,
	225, 226, 227, 0, 228, 229, 233, 235, 236, 237,
	238, 239, 240, 243, 0, 245, 247, 0, 248, 251,
	0, 252, 253, 254, 255, 256, 257, 258, 259, 495,
	260, 0, 261, 262, 264, 0, 267, 268, 269, 270,
	271, 0, 272, 497, 498, 273, 274, 276, 277, 278,
	280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 0, 292, 293, 294, 296, 0, 297, 298,
	301, 302, 303, 304, 0, 306, 514, 0, 307, 308,
	309, 0, 0, 310, 311, 312, 313, 314, 315, 318,
	515, 320, 321, 322, 323, 324, 325, 326, 556, 328,
	329, 330, 331, 332, 333, 334, 518, 519, 335, 337,
	338, 520, 522, 523, 0, 353, 354, 355, 356, 357,
	358, 359, 361, 0, 363, 364, 365, 524, 366, 367,
	368, 369, 0, 370, 371, 372, 373, 374, 376, 379,
	380, 381, 382, 0, 385, 386, 387, 388, 389, 390,
	391, 393, 394, 395, 397, 398, 399, 557, 400, 401,
	402, 403, 527, 405, 406, 558, 408, 409, 411, 412,
	413, 414, 415, 416, 573, 0, 418, 528, 419, 420,
	421, 422, 423, 0, 425, 426, 427, 428, 429, 430,
	433, 434, 435, 437, 438, 530, 439, 440, 0, 442,
	443, 0, 445, 446, 447, 448, 449, 0, 574, 450,
	532, 451, 533, 452, 453, 454, 455, 456, 457, 458,
	460, 0, 0, 462, 463, 464, 466, 467, 468, 469,
	472, 473, 474, 475, 476, 0, 477, 479, 481, 559,
	536, 537, 538, 539, 540, 542, 543, 544, 545, 482,
	483, 499, 350, 344, 300, 342, 343, 347, 348, 351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 621, 622, 0,
	0, 0, 0, 0, 163, 614, 615, 616, 617, 618,
	619, 612, 0, 0, 0, 0, 0, 0, 623, 624,
	625, 0, 176, 0, 193, 0, 0, 242, 279, 494,
	0, 0, 339, 0, 392, 396, 0, 485, 0, 0,
	0, 0, 250, 0, 0, 0, 0, 0, 0, 0,
	461, 0, 0, 0, 0, 181, 575, 484, 555, 0,
	0, 0, 346, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 383, 317, 0, 534, 410, 188,
	234, 221, 263, 305, 417, 0, 0, 295, 465, 230,
	319, 0, 209, 352, 0, 441, 316, 0, 424, 444,
	0, 336, 215, 375, 431, 432, 0, 0, 0, 0,
	0, 219, 220, 341, 201, 349, 546, 512, 404, 362,
	360, 0, 327, 384, 541, 0, 0, 249, 0, 244,
	340, 480, 207, 459, 378, 345, 299, 407, 436, 246,
	231, 232, 275, 377, 265, 217, 470, 509, 513, 511,
	507, 504, 508, 505, 506, 510, 266, 503, 0, 478,
	487, 521, 501, 529, 486, 526, 496, 241, 525, 490,
	489, 535, 516, 517, 471, 531, 502, 500, 493, 492,
	488, 0, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 177, 0, 178, 179, 180, 182, 183, 184,
	0, 185, 186, 187, 190, 191, 192, 194, 554, 195,
	196, 197, 2390, 199, 200, 491, 0, 202, 203, 204,
	205, 206, 208, 210, 211, 212, 213, 214, 216, 218,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 224,
	225, 226, 227, 0, 228, 229, 233, 235, 236, 237,
	238, 239, 240, 243, 0, 245, 247, 0, 248, 251,
	0, 252, 253, 254, 255, 256, 257, 258, 259, 495,
	2391, 0, 261, 262, 264, 0, 267, 268, 269, 270,
	271, 0, 272, 497, 498, 273, 274, 276, 277, 278,
	280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 0, 292, 293, 294, 296, 0, 297, 298,
	301, 302, 303, 304, 0, 306, 514, 0, 307, 308,
	309, 0, 0, 310, 311, 312, 313, 314, 315, 318,
	515, 320, 321, 322, 323, 324, 325, 326, 556, 328,
	329, 330, 331, 332, 333, 334, 518, 519, 335, 337,
	338, 520, 522, 523, 0, 353, 354, 355, 356, 357,
	358, 359, 361, 0, 363, 364, 365, 524, 366, 367,
	368, 369, 0, 370, 371, 372, 373, 374, 376, 379,
	380, 381, 382, 0, 385, 386, 387, 388, 389, 390,
	391, 393, 394, 395, 397, 398, 399, 557, 400, 401,
	402, 403, 527, 405, 406, 558, 408, 409, 411, 412,
	413, 414, 415, 416, 573, 0, 418, 528, 419, 420,
	421, 422, 423, 0, 425, 426, 427, 428, 429, 430,
	433, 434, 435, 437, 438, 530, 439, 440, 0, 442,
	443, 0, 445, 446, 447, 448, 449, 0, 574, 450,
	532, 451, 533, 452, 453, 454, 455, 456, 457, 458,
	460, 0, 0, 462, 463, 464, 466, 467, 468, 469,
	472, 473, 474, 475, 476, 0, 477, 479, 481, 559,
	536, 537, 538, 539, 540, 542, 543, 544, 545, 482,
	483, 499, 350, 344, 300, 342, 343, 347, 348, 351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 163, 0, 0, 620, 621, 622, 0,
	0, 0, 0, 0, 0, 614, 615, 616, 617, 618,
	619, 176, 0, 193, 0, 0, 242, 279, 494, 0,
	0, 339, 0, 392, 396, 0, 485, 0, 0, 0,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 461,
	0, 0, 0, 0, 181, 575, 484, 555, 0, 0,
	0, 346, 0, 0, 0, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 383, 317, 0, 534, 410, 188, 234,
	221, 263, 305, 417, 0, 0, 295, 465, 230, 319,
	0, 209, 352, 0, 441, 316, 0, 424, 444, 0,
	336, 215, 375, 431, 432, 0, 0, 0, 0, 0,
	219, 220, 341, 201, 349, 546, 512, 404, 362, 360,
	0, 327, 384, 541, 0, 0, 249, 0, 244, 340,
	480, 207, 459, 378, 345, 299, 407, 436, 246, 231,
	232, 275, 377, 265, 217, 470, 509, 513, 511, 507,
	504, 508, 505, 506, 510, 266, 503, 0, 478, 487,
	521, 501, 529, 486, 526, 496, 241, 525, 490, 489,
	535, 516, 517, 471, 531, 502, 500, 493, 492, 488,
	0, 166, 167, 168, 169, 170, 171, 172, 173, 174,
	175, 177, 0, 178, 179, 180, 182, 183, 184, 0,
	185, 186, 187, 190, 191, 192, 194, 554, 195, 196,
	197, 198, 199, 200, 491, 0, 202, 203, 204, 205,
	206, 208, 210, 211, 212, 213, 214, 216, 218, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 224, 225,
	226, 227, 0, 228, 229, 233, 235, 236, 237, 238,
	239, 240, 243, 0, 245, 247, 0, 248, 251, 0,
	252, 253, 254, 255, 256, 257, 258, 259, 495, 260,
	0, 261, 262, 264, 0, 267, 268, 269, 270, 271,
	0, 272, 497, 498, 273, 274, 276, 277, 278, 280,
	281, 282, 283, 284, 285, 286, 287, 288, 289, 290,
	291, 0, 292, 293, 294, 296, 0, 297, 298, 301,
	302, 303, 304, 0, 306, 514, 0, 307, 308, 309,
	0, 0, 310, 311, 312, 313, 314, 315, 318, 515,
	320, 321, 322, 323, 324, 325, 326, 556, 328, 329,
	330, 331, 332, 333, 334, 518, 519, 335, 337, 338,
	520, 522, 523, 0, 353, 354, 355, 356, 357, 358,
	359, 361, 0, 363, 364, 365, 524, 366, 367, 368,
	369, 0, 370, 371, 372, 373, 374, 376, 379, 380,
	381, 382, 0, 385, 386, 387, 388, 389, 390, 391,
	393, 394, 395, 397, 398, 399, 557, 400, 401, 402,
	403, 527, 405, 406, 558, 408, 409, 411, 412, 413,
	414, 415, 416, 573, 0, 418, 528, 419, 420, 421,
	422, 423, 0, 425, 426, 427, 428, 429, 430, 433,
	434, 435, 437, 438, 530, 439, 440, 0, 442, 443,
	0, 445, 446, 447, 448, 449, 0, 574, 450, 532,
	451, 533, 452, 453, 454, 455, 456, 457, 458, 460,
	0, 0, 462, 463, 464, 466, 467, 468, 469, 472,
	473, 474, 475, 476, 0, 477, 479, 481, 559, 536,
	537, 538, 539, 540, 542, 543, 544, 545, 482, 483,
	499, 350, 344, 300, 342, 343, 347, 348, 351, 163,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 193,
	0, 0, 242, 279, 494, 0, 3689, 339, 0, 392,
	396, 0, 485, 0, 0, 0, 0, 250, 0, 0,
	0, 0, 0, 0, 0, 461, 0, 0, 0, 0,
	181, 575, 484, 555, 0, 0, 0, 346, 0, 0,
	0, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 383,
	317, 0, 534, 410, 188, 234, 221, 263, 305, 417,
	0, 0, 295, 465, 230, 319, 0, 209, 352, 0,
	441, 316, 0, 424, 444, 0, 336, 215, 375, 431,
	432, 0, 0, 0, 0, 0, 219, 220, 341, 201,
	349, 546, 512, 404, 362, 360, 0, 327, 384, 541,
	0, 0, 249, 0, 244, 340, 480, 207, 459, 378,
	345, 299, 407, 436, 246, 231, 232, 275, 377, 265,
	217, 470, 509, 513, 511, 507, 504, 508, 505, 506,
	510, 266, 503, 0, 478, 487, 521, 501, 529, 486,
	526, 496, 241, 525, 490, 489, 535, 516, 517, 471,
	531, 502, 500, 493, 492, 488, 0, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 177, 0, 178,
	179, 180, 182, 183, 184, 0, 185, 186, 187, 190,
	191, 192, 194, 554, 195, 196, 197, 198, 199, 200,
	491, 0, 202, 203, 204, 205, 206, 208, 210, 211,
	212, 213, 214, 216, 218, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 227, 0, 228,
	229, 233, 235, 236, 237, 238, 239, 240, 243, 0,
	245, 247, 0, 248, 251, 0, 252, 253, 254, 255,
	256, 257, 258, 259, 495, 260, 0, 261, 262, 264,
	0, 267, 268, 269, 270, 271, 0, 272, 497, 498,
	273, 274, 276, 277, 278, 280, 281, 282, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 0, 292, 293,
	294, 296, 0, 297, 298, 301, 302, 303, 304, 0,
	306, 514, 0, 307, 308, 309, 0, 0, 310, 311,
	312, 313, 314, 315, 318, 515, 320, 321, 322, 323,
	324, 325, 326, 556, 328, 329, 330, 331, 332, 333,
	334, 518, 519, 335, 337, 338, 520, 522, 523, 0,
	353, 354, 355, 356, 357, 358, 359, 361, 0, 363,
	364, 365, 524, 366, 367, 368, 369, 0, 370, 371,
	372, 373, 374, 376, 379, 380, 381, 382, 0, 385,
	386, 387, 388, 389, 390, 391, 393, 394, 395, 397,
	398, 399, 557, 400, 401, 402, 403, 527, 405, 406,
	558, 408, 409, 411, 412, 413, 414, 415, 416, 573,
	0, 418, 528, 419, 420, 421, 422, 423, 0, 425,
	426, 427, 428, 429, 430, 433, 434, 435, 437, 438,
	530, 439, 440, 0, 442, 443, 0, 445, 446, 447,
	448, 449, 0, 574, 450, 532, 451, 533, 452, 453,
	454, 455, 456, 457, 458, 460, 0, 0, 462, 463,
	464, 466, 467, 468, 469, 472, 473, 474, 475, 476,
	0, 477, 479, 481, 559, 536, 537, 538, 539, 540,
	542, 543, 544, 545, 482, 483, 499, 350, 344, 300,
	342, 343, 347, 348, 351, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 0, 193, 0, 0, 242, 279,
	494, 0, 3590, 339, 0, 392, 396, 0, 485, 0,
	0, 0, 0, 250, 0, 0, 0, 0, 0, 0,
	0, 461, 0, 0, 0, 0, 181, 575, 484, 555,
	0, 0, 0, 346, 0, 0, 0, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 383, 317, 0, 534, 410,
	188, 234, 221, 263, 305, 417, 0, 0, 295, 465,
	230, 319, 0, 209, 352, 0, 441, 316, 0, 424,
	444, 0, 336, 215, 375, 431, 432, 0, 0, 0,
	0, 0, 219, 220, 341, 201, 349, 546, 512, 404,
	362, 360, 0, 327, 384, 541, 0, 0, 249, 0,
	244, 340, 480, 207, 459, 378, 345, 299, 407, 436,
	246, 231, 232, 275, 377, 265, 217, 470, 509, 513,
	511, 507, 504, 508, 505, 506, 510, 266, 503, 0,
	478, 487, 521, 501, 529, 486, 526, 496, 241, 525,
	490, 489, 535, 516, 517, 471, 531, 502, 500, 493,
	492, 488, 0, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 177, 0, 178, 179, 180, 182, 183,
	184, 0, 185, 186, 187, 190, 191, 192, 194, 554,
	195, 196, 197, 198, 199, 200, 491, 0, 202, 203,
	204, 205, 206, 208, 210, 211, 212, 213, 214, 216,
	218, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	224, 225, 226, 227, 0, 228, 229, 233, 235, 236,
	237, 238, 239, 240, 243, 0, 245, 247, 0, 248,
	251, 0, 252, 253, 254, 255, 256, 257, 258, 259,
	495, 260, 0, 261, 262, 264, 0, 267, 268, 269,
	270, 271, 0, 272, 497, 498, 273, 274, 276, 277,
	278, 280, 281, 282, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 0, 292, 293, 294, 296, 0, 297,
	298, 301, 302, 303, 304, 0, 306, 514, 0, 307,
	308, 309, 0, 0, 310, 311, 312, 313, 314, 315,
	318, 515, 320, 321, 322, 323, 324, 325, 326, 556,
	328, 329, 330, 331, 332, 333, 334, 518, 519, 335,
	337, 338, 520, 522, 523, 0, 353, 354, 355, 356,
	357, 358, 359, 361, 0, 363, 364, 365, 524, 366,
	367, 368, 369, 0, 370, 371, 372, 373, 374, 376,
	379, 380, 381, 382, 0, 385, 386, 387, 388, 389,
	390, 391, 393, 394, 395, 397, 398, 399, 557, 400,
	401, 402, 403, 527, 405, 406, 558, 408, 409, 411,
	412, 413, 414, 415, 416, 573, 0, 418, 528, 419,
	420, 421, 422, 423, 0, 425, 426, 427, 428, 429,
	430, 433, 434, 435, 437, 438, 530, 439, 440, 0,
	442, 443, 0, 445, 446, 447, 448, 449, 0, 574,
	450, 532, 451, 533, 452, 453, 454, 455, 456, 457,
	458, 460, 0, 0, 462, 463, 464, 466, 467, 468,
	469, 472, 473, 474, 475, 476, 0, 477, 479, 481,
	559, 536, 537, 538, 539, 540, 542, 543, 544, 545,
	482, 483, 499, 350, 344, 300, 342, 343, 347, 348,
	351, 163, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	0, 193, 0, 0, 242, 279, 494, 0, 3587, 339,
	0, 392, 396, 57, 485, 0, 0, 0, 0, 250,
	0, 0, 0, 0, 0, 0, 0, 461, 0, 0,
	0, 0, 181, 575, 484, 555, 0, 0, 0, 346,
	54, 0, 0, 0, 55, 0, 0, 189, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 383, 317, 0, 1603, 410, 188, 234, 221, 263,
	305, 417, 0, 0, 295, 465, 230, 319, 0, 209,
	352, 0, 441, 316, 0, 424, 444, 0, 336, 215,
	375, 431, 432, 0, 0, 0, 0, 0, 219, 220,
	341, 201, 349, 546, 512, 404, 362, 360, 0, 327,
	384, 541, 0, 0, 249, 0, 244, 340, 480, 207,
	459, 378, 345, 299, 407, 436, 246, 231, 232, 275,
	377, 265, 217, 470, 509, 513, 511, 507, 504, 508,
	505, 506, 510, 266, 503, 0, 478, 487, 521, 501,
	529, 486, 526, 496, 241, 525, 490, 489, 535, 516,
	517, 471, 531, 502, 500, 493, 492, 488, 0, 166,
	167, 168, 169, 170, 171, 172, 173, 174, 175, 177,
	0, 178, 179, 180, 182, 183, 184, 0, 185, 186,
	187, 190, 191, 192, 194, 554, 195, 196, 197, 198,
	199, 200, 491, 0, 202, 203, 204, 205, 206, 208,
	210, 211, 212, 213, 214, 216, 218, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 224, 225, 226, 227,
	0, 228, 229, 233, 235, 236, 237, 238, 239, 240,
	243, 0, 245, 247, 0, 248, 251, 0, 252, 253,
	254, 255, 256, 257, 258, 259, 495, 260, 0, 261,
	262, 264, 0, 267, 268, 269, 270, 271, 0, 272,
	497, 498, 273, 274, 276, 277, 278, 280, 281, 282,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 0,
	292, 293, 294, 296, 0, 297, 298, 301, 302, 303,
	304, 0, 306, 514, 0, 307, 308, 309, 0, 0,
	310, 311, 312, 313, 314, 315, 318, 515, 320, 321,
	322, 323, 324, 325, 326, 556, 328, 329, 330, 331,
	332, 333, 334, 518, 519, 335, 337, 338, 520, 522,
	523, 0, 353, 354, 355, 356, 357, 358, 359, 361,
	0, 363, 364, 365, 524, 366, 367, 368, 369, 0,
	370, 371, 372, 373, 374, 376, 379, 380, 381, 382,
	0, 385, 386, 387, 388, 389, 390, 391, 393, 394,
	395, 397, 398, 399, 557, 400, 401, 402, 403, 527,
	405, 406, 558, 408, 409, 411, 412, 413, 414, 415,
	416, 573, 0, 418, 528, 419, 420, 421, 422, 423,
	0, 425, 426, 427, 428, 429, 430, 433, 434, 435,
	437, 438, 530, 439, 440, 0, 442, 443, 0, 445,
	446, 447, 448, 449, 0, 574, 450, 532, 451, 533,
	452, 453, 454, 455, 456, 457, 458, 460, 0, 0,
	462, 463, 464, 466, 467, 468, 469, 472, 473, 474,
	475, 476, 0, 477, 479, 481, 559, 536, 537, 538,
	539, 540, 542, 543, 544, 545, 482, 483, 499, 350,
	344, 300, 342, 343, 347, 348, 351, 697, 0, 0,
	797, 0, 0, 0, 0, 0, 58, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 0, 193, 665, 53,
	242, 279, 494, 0, 0, 339, 0, 392, 396, 0,
	485, 0, 0, 0, 0, 250, 1094, 670, 0, 676,
	0, 682, 1093, 461, 0, 672, 673, 678, 181, 575,
	484, 555, 0, 0, 0, 346, 0, 0, 0, 0,
	0, 0, 0, 189, 0, 0, 0, 1095, 674, 671,
	675, 681, 669, 679, 666, 677, 0, 383, 317, 0,
	534, 410, 188, 234, 221, 263, 305, 417, 0, 0,
	295, 465, 230, 319, 0, 209, 352, 0, 441, 316,
	0, 424, 444, 0, 336, 215, 375, 431, 432, 663,
	668, 0, 684, 0, 219, 220, 341, 201, 349, 546,
	512, 404, 362, 360, 0, 327, 384, 541, 0, 0,
	249, 0, 244, 340, 480, 207, 459, 378, 345, 299,
	407, 436, 246, 231, 232, 275, 377, 265, 217, 470,
	509, 513, 511, 507, 504, 508, 505, 506, 510, 266,
	503, 0, 478, 487, 521, 501, 529, 486, 526, 496,
	241, 525, 490, 489, 535, 516, 517, 471, 531, 502,
	500, 493, 492, 488, 0, 166, 167, 168, 169, 170,
	171, 172, 173, 174, 175, 177, 0, 178, 179, 180,
	182, 183, 184, 662, 185, 186, 187, 190, 191, 192,
	194, 554, 195, 196, 197, 198, 199, 200, 491, 664,
	202, 203, 204, 205, 206, 208, 210, 211, 212, 213,
	214, 216, 218, 0, 0, 0, 667, 0, 0, 0,
	222, 223, 224, 225, 226, 227, 0, 228, 229, 233,
	235, 236, 237, 238, 239, 240, 243, 0, 245, 247,
	0, 248, 251, 0, 252, 253, 254, 255, 256, 257,
	258, 259, 495, 260, 0, 261, 262, 264, 0, 267,
	268, 269, 270, 271, 0, 272, 497, 498, 273, 274,
	276, 277, 278, 280, 281, 282, 283, 284, 285, 286,
	287, 288, 289, 290, 291, 0, 292, 293, 294, 296,
	0, 297, 298, 301, 302, 303, 304, 0, 306, 514,
	0, 307, 308, 309, 0, 0, 310, 311, 312, 313,
	314, 315, 318, 515, 320, 321, 322, 323, 324, 325,
	326, 556, 328, 329, 330, 331, 332, 333, 334, 518,
	519, 335, 337, 338, 520, 522, 523, 680, 353, 354,
	355, 356, 357, 358, 359, 361, 0, 363, 364, 365,
	524, 366, 367, 368, 369, 0, 370, 371, 372, 373,
	374, 376, 379, 380, 381, 382, 0, 385, 386, 387,
	388, 389, 390, 391, 393, 394, 395, 397, 398, 399,
	557, 400, 401, 402, 403, 527, 405, 406, 558, 408,
	409, 411, 412, 413, 414, 415, 416, 573, 0, 418,
	528, 419, 420, 421, 422, 423, 0, 425, 426, 427,
	428, 429, 430, 433, 434, 435, 437, 438, 530, 439,
	440, 0, 442, 443, 683, 445, 446, 447, 448, 449,
	0, 574, 450, 532, 451, 533, 452, 453, 454, 455,
	456, 457, 458, 460, 0, 0, 462, 463, 464, 466,
	467, 468, 469, 472, 473, 474, 475, 476, 0, 477,
	479, 481, 559, 536, 537, 538, 539, 540, 542, 543,
	544, 545, 482, 483, 499, 350, 344, 300, 342, 343,
	347, 348, 351, 697, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 0, 193, 665, 0, 242, 279, 494, 0,
	0, 339, 0, 392, 396, 0, 485, 0, 0, 0,
	0, 250, 0, 670, 0, 676, 0, 682, 0, 461,
	0, 672, 673, 678, 181, 575, 484, 555, 0, 0,
	0, 346, 0, 0, 0, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 674, 671, 675, 681, 669, 679,
	666, 677, 0, 383, 317, 0, 534, 410, 188, 234,
	221, 263, 305, 417, 0, 0, 295, 465, 230, 319,
	0, 209, 352, 1809, 441, 316, 0, 424, 444, 0,
	336, 215, 375, 431, 432, 663, 668, 0, 684, 0,
	219, 220, 341, 201, 349, 546, 512, 404, 362, 360,
	0, 327, 384, 541, 0, 0, 249, 0, 244, 340,
	480, 207, 459, 378, 345, 299, 407, 436, 246, 231,
	232, 275, 377, 265, 217, 470, 509, 513, 511, 507,
	504, 508, 505, 506, 510, 266, 503, 0, 478, 487,
	521, 501, 529, 486, 526, 496, 241, 525, 490, 489,
	535, 516, 517, 471, 531, 502, 500, 493, 492, 488,
	0, 166, 167, 168, 169, 170, 171, 172, 173, 174,
	175, 177, 0, 178, 179, 180, 182, 183, 184, 662,
	185, 186, 187, 190, 191, 192, 194, 554, 195, 196,
	197, 198, 199, 200, 491, 664, 202, 203, 204, 205,
	206, 208, 210, 211, 212, 213, 214, 216, 218, 0,
	0, 694, 667, 0, 0, 695, 222, 223, 224, 225,
	226, 227, 0, 228, 229, 233, 235, 236, 237, 238,
	239, 240, 243, 0, 245, 247, 0, 248, 251, 0,
	252, 253, 254, 255, 256, 257, 258, 259, 495, 260,
	0, 261, 262, 264, 0, 267, 268, 269, 270, 271,
	0, 272, 497, 498, 273, 274, 276, 277, 278, 280,
	281, 282, 283, 284, 285, 286, 287, 288, 289, 290,
	291, 0, 292, 293, 294, 296, 0, 297, 298, 301,
	302, 303, 304, 0, 306, 514, 0, 307, 308, 309,
	0, 0, 310, 311, 312, 313, 314, 315, 318, 515,
	320, 321, 322, 323, 324, 325, 326, 556, 328, 329,
	330, 331, 332, 333, 334, 518, 519, 335, 337, 338,
	520, 522, 523, 680, 353, 354, 355, 356, 357, 358,
	359, 361, 0, 363, 364, 365, 524, 366, 367, 368,
	369, 0, 370, 371, 372, 373, 374, 376, 379, 380,
	381, 382, 0, 385, 386, 387, 388, 389, 390, 391,
	393, 394, 395, 397, 398, 399, 557, 400, 401, 402,
	403, 527, 405, 406, 558, 408, 409, 411, 412, 413,
	414, 415, 416, 573, 696, 418, 528, 419, 420, 421,
	422, 423, 0, 425, 426, 427, 428, 429, 430, 433,
	434, 435, 437, 438, 530, 439, 440, 0, 442, 443,
	683, 445, 446, 447, 448, 449, 0, 574, 450, 532,
	451, 533, 452, 453, 454, 455, 456, 457, 458, 460,
	0, 0, 462, 463, 464, 466, 467, 468, 469, 472,
	473, 474, 475, 476, 0, 477, 479, 481, 559, 536,
	537, 538, 539, 540, 542, 543, 544, 545, 482, 483,
	499, 350, 344, 300, 342, 343, 347, 348, 351, 697,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 193,
	665, 0, 242, 279, 494, 0, 0, 339, 0, 392,
	396, 0, 485, 0, 0, 0, 0, 250, 0, 670,
	0, 676, 0, 682, 0, 461, 0, 672, 673, 678,
	181, 575, 484, 555, 0, 0, 0, 346, 0, 0,
	0, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	674, 671, 675, 681, 669, 679, 666, 677, 0, 383,
	317, 0, 534, 410, 188, 234, 221, 263, 305, 417,
	0, 0, 295, 465, 230, 319, 0, 209, 352, 0,
	441, 316, 0, 424, 444, 0, 336, 215, 375, 431,
	432, 663, 668, 0, 684, 0, 219, 220, 341, 201,
	349, 546, 512, 404, 362, 360, 0, 327, 384, 541,
	0, 0, 249, 0, 244, 340, 480, 207, 459, 378,
	345, 299, 407, 436, 246, 231, 232, 275, 377, 265,
	217, 470, 509, 513, 511, 507, 504, 508, 505, 506,
	510, 266, 503, 0, 478, 487, 521, 501, 529, 486,
	526, 496, 241, 525, 490, 489, 535, 516, 517, 471,
	531, 502, 500, 493, 492, 488, 0, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 177, 0, 178,
	179, 180, 182, 183, 184, 662, 185, 186, 187, 190,
	191, 192, 194, 554, 195, 196, 197, 198, 199, 200,
	491, 664, 202, 203, 204, 205, 206, 208, 210, 211,
	212, 213, 214, 216, 218, 0, 0, 694, 667, 0,
	0, 695, 222, 223, 224, 225, 226, 227, 0, 228,
	229, 233, 235, 236, 237, 238, 239, 240, 243, 0,
	245, 247, 0, 248, 251, 0, 252, 253, 254, 255,
	256, 257, 258, 259, 495, 260, 0, 261, 262, 264,
	0, 267, 268, 269, 270, 271, 0, 272, 497, 498,
	273, 274, 276, 277, 278, 280, 281, 282, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 0, 292, 293,
	294, 296, 0, 297, 298, 301, 302, 303, 304, 0,
	306, 514, 0, 307, 308, 309, 0, 0, 310, 311,
	312, 313, 314, 315, 318, 515, 320, 321, 322, 323,
	324, 325, 326, 556, 328, 329, 330, 331, 332, 333,
	334, 518, 519, 335, 337, 338, 520, 522, 523, 680,
	353, 354, 355, 356, 357, 358, 359, 361, 0, 363,
	364, 365, 524, 366, 367, 368, 369, 0, 370, 371,
	372, 373, 374, 376, 379, 380, 381, 382, 0, 385,
	386, 387, 388, 389, 390, 391, 393, 394, 395, 397,
	398, 399, 557, 400, 401, 402, 403, 527, 405, 406,
	558, 408, 409, 411, 412, 413, 414, 415, 416, 573,
	696, 418, 528, 419, 420, 421, 422, 423, 0, 425,
	426, 427, 428, 429, 430, 433, 434, 435, 437, 438,
	530, 439, 440, 0, 442, 443, 683, 445, 446, 447,
	448, 449, 0, 574, 450, 532, 451, 533, 452, 453,
	454, 455, 456, 457, 458, 460, 0, 0, 462, 463,
	464, 466, 467, 468, 469, 472, 473, 474, 475, 476,
	0, 477, 479, 481, 559, 536, 537, 538, 539, 540,
	542, 543, 544, 545, 482, 483, 499, 350, 344, 300,
	342, 343, 347, 348, 351, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 2493, 193, 0, 0, 242, 279,
	494, 0, 0, 339, 0, 392, 396, 0, 485, 0,
	0, 0, 0, 250, 0, 0, 0, 0, 0, 0,
	0, 461, 0, 0, 0, 0, 181, 575, 484, 555,
	0, 0, 0, 346, 0, 0, 0, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 383, 317, 0, 534, 410,
	188, 234, 221, 263, 305, 417, 0, 0, 295, 465,
	230, 319, 0, 209, 352, 0, 441, 316, 0, 424,
	444, 0, 336, 215, 375, 431, 432, 0, 0, 0,
	0, 0, 219, 220, 341, 201, 349, 546, 512, 404,
	362, 360, 0, 327, 384, 541, 0, 0, 249, 0,
	244, 340, 480, 207, 459, 378, 345, 299, 407, 436,
	246, 231, 232, 275, 377, 265, 217, 470, 509, 513,
	511, 507, 504, 508, 505, 506, 510, 266, 503, 0,
	478, 487, 521, 501, 529, 486, 526, 496, 241, 525,
	490, 489, 535, 516, 517, 471, 531, 502, 500, 493,
	492, 488, 0, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 177, 0, 178, 179, 180, 182, 183,
	184, 0, 185, 186, 187, 190, 191, 192, 194, 554,
	195, 196, 197, 198, 199, 200, 491, 0, 202, 203,
	204, 205, 206, 208, 210, 211, 212, 213, 214, 216,
	218, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	224, 225, 226, 227, 0, 228, 229, 233, 235, 236,
	237, 238, 239, 240, 243, 0, 245, 247, 0, 248,
	251, 0, 252, 253, 254, 255, 256, 257, 258, 259,
	495, 260, 0, 261, 262, 264, 0, 267, 268, 269,
	270, 271, 0, 272, 497, 498, 273, 274, 276, 277,
	278, 280, 281, 282, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 0, 292, 293, 294, 296, 0, 297,
	298, 301, 302, 303, 304, 0, 306, 514, 0, 307,
	308, 309, 0, 0, 310, 311, 312, 313, 314, 315,
	318, 515, 320, 321, 322, 323, 324, 325, 326, 556,
	328, 329, 330, 331, 332, 333, 334, 518, 519, 335,
	337, 338, 520, 522, 523, 0, 353, 354, 355, 356,
	357, 358, 359, 361, 0, 363, 364, 365, 524, 366,
	367, 368, 369, 0, 370, 371, 372, 373, 374, 376,
	379, 380, 381, 382, 0, 385, 386, 387, 388, 389,
	390, 391, 393, 394, 395, 397, 398, 399, 557, 400,
	401, 402, 403, 527, 405, 406, 558, 408, 409, 411,
	412, 413, 414, 415, 416, 573, 0, 418, 528, 419,
	420, 421, 422, 423, 0, 425, 426, 427, 428, 429,
	430, 433, 434, 435, 437, 438, 530, 439, 440, 0,
	442, 443, 0, 445, 446, 447, 448, 449, 0, 574,
	450, 532, 451, 533, 452, 453, 454, 455, 456, 457,
	458, 460, 0, 0, 462, 463, 464, 466, 467, 468,
	469, 472, 473, 474, 475, 476, 0, 477, 479, 481,
	559, 536, 537, 538, 539, 540, 542, 543, 544, 545,
	482, 483, 499, 350, 344, 300, 342, 343, 347, 348,
	351, 0, 697, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 193, 665, 810, 242, 279, 494, 0, 0,
	339, 0, 392, 396, 0, 485, 0, 0, 0, 0,
	250, 0, 670, 0, 676, 0, 682, 0, 461, 0,
	672, 673, 678, 181, 575, 484, 555, 0, 0, 0,
	346, 0, 0, 0, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 674, 671, 675, 681, 669, 679, 666,
	677, 0, 383, 317, 0, 534, 410, 188, 234, 221,
	263, 305, 417, 0, 0, 295, 465, 230, 319, 0,
	209, 352, 0, 441, 316, 0, 424, 444, 0, 336,
	215, 375, 431, 432, 663, 668, 0, 684, 0, 219,
	220, 341, 201, 349, 546, 512, 404, 362, 360, 0,
	327, 384, 541, 0, 0, 249, 0, 244, 340, 480,
	207, 459, 378, 345, 299, 407, 436, 246, 231, 232,
	275, 377, 265, 217, 470, 509, 513, 511, 507, 504,
	508, 505, 506, 510, 266, 503, 0, 478, 487, 521,
	501, 529, 486, 526, 496, 241, 525, 490, 489, 535,
	516, 517, 471, 531, 502, 500, 493, 492, 488, 0,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	177, 0, 178, 179, 180, 182, 183, 184, 662, 185,
	186, 187, 190, 191, 192, 194, 554, 195, 196, 197,
	198, 199, 200, 491, 664, 202, 203, 204, 205, 206,
	208, 210, 211, 212, 213, 214, 216, 218, 0, 0,
	694, 667, 0, 0, 695, 222, 223, 224, 225, 226,
	227, 0, 228, 229, 233, 235, 236, 237, 238, 239,
	240, 243, 0, 245, 247, 0, 248, 251, 0, 252,
	253, 254, 255, 256, 257, 258, 259, 495, 260, 0,
	261, 262, 264, 0, 267, 268, 269, 270, 271, 0,
	272, 497, 498, 273, 274, 276, 277, 278, 280, 281,
	282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
	0, 292, 293, 294, 296, 0, 297, 298, 301, 302,
	303, 304, 0, 306, 514, 0, 307, 308, 309, 0,
	0, 310, 311, 312, 313, 717, 315, 318, 515, 320,
	321, 322, 323, 324, 325, 326, 556, 328, 329, 330,
	331, 332, 333, 334, 518, 519, 335, 337, 338, 520,
	522, 523, 680, 353, 354, 355, 356, 357, 358, 359,
	361, 0, 363, 364, 365, 524, 366, 367, 368, 369,
	0, 370, 371, 372, 373, 374, 376, 379, 380, 381,
	382, 0, 385, 386, 387, 388, 389, 390, 391, 393,
	394, 395, 397, 398, 399, 557, 400, 401, 402, 403,
	527, 405, 406, 558, 408, 409, 411, 412, 413, 414,
	415, 416, 573, 696, 418, 528, 419, 420, 421, 422,
	423, 0, 425, 426, 427, 428, 429, 430, 433, 434,
	435, 437, 438, 530, 439, 440, 0, 442, 443, 683,
	445, 446, 447, 448, 449, 0, 574, 450, 532, 451,
	533, 452, 453, 454, 455, 456, 457, 458, 460, 0,
	0, 462, 463, 464, 466, 467, 468, 469, 472, 473,
	474, 475, 476, 0, 477, 479, 481, 559, 536, 537,
	538, 539, 540, 542, 543, 544, 545, 482, 483, 499,
	350, 344, 300, 342, 343, 347, 348, 351, 697, 0,
	0, 797, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 193, 665,
	0, 242, 279, 494, 0, 0, 339, 0, 392, 396,
	0, 485, 0, 0, 1079, 0, 250, 0, 670, 0,
	676, 0, 682, 0, 461, 0, 672, 673, 678, 181,
	575, 484, 555, 0, 0, 0, 346, 0, 0, 0,
	0, 0, 0, 0, 189, 0, 0, 0, 0, 674,
	671, 675, 681, 669, 679, 666, 677, 0, 383, 317,
	0, 534, 410, 188, 234, 221, 263, 305, 417, 0,
	0, 295, 465, 230, 319, 0, 209, 352, 0, 441,
	316, 0, 424, 444, 0, 336, 215, 375, 431, 432,
	663, 668, 0, 684, 0, 219, 220, 341, 201, 349,
	546, 512, 404, 362, 360, 0, 327, 384, 541, 0,
	0, 249, 0, 244, 340, 480, 207, 459, 378, 345,
	299, 407, 436, 246, 231, 232, 275, 377, 265, 217,
	470, 509, 513, 511, 507, 504, 508, 505, 506, 510,
	266, 503, 0, 478, 487, 521, 501, 529, 486, 526,
	496, 241, 525, 490, 489, 535, 516, 517, 471, 531,
	502, 500, 493, 492, 488, 0, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 177, 0, 178, 179,
	180, 182, 183, 184, 662, 185, 186, 187, 190, 191,
	192, 194, 554, 195, 196, 197, 198, 199, 200, 491,
	664, 202, 203, 204, 205, 206, 208, 210, 211, 212,
	213, 214, 216, 218, 0, 0, 0, 667, 0, 0,
	0, 222, 223, 224, 225, 226, 227, 0, 228, 229,
	233, 235, 236, 237, 238, 239, 240, 243, 0, 245,
	247, 0, 248, 251, 0, 252, 253, 254, 255, 256,
	257, 258, 259, 495, 260, 0, 261, 262, 264, 0,
	267, 268, 269, 270, 271, 0, 272, 497, 498, 273,
	274, 276, 277, 278, 280, 281, 282, 283, 284, 285,
	286, 287, 288, 289, 290, 291, 0, 292, 293, 294,
	296, 0, 297, 298, 301, 302, 303, 304, 0, 306,
	514, 0, 307, 308, 309, 0, 0, 310, 311, 312,
	313, 314, 315, 318, 515, 320, 321, 322, 323, 324,
	325, 326, 556, 328, 329, 330, 331, 332, 333, 334,
	518, 519, 335, 337, 338, 520, 522, 523, 680, 353,
	354, 355, 356, 357, 358, 359, 361, 0, 363, 364,
	365, 524, 366, 367, 368, 369, 0, 370, 371, 372,
	373, 374, 376, 379, 380, 381, 382, 0, 385, 386,
	387, 388, 389, 390, 391, 393, 394, 395, 397, 398,
	399, 557, 400, 401, 402, 403, 527, 405, 406, 558,
	408, 409, 411, 412, 413, 414, 415, 416, 573, 0,
	418, 528, 419, 420, 421, 422, 423, 0, 425, 426,
	427, 428, 429, 430, 433, 434, 435, 437, 438, 530,
	439, 440, 0, 442, 443, 683, 445, 446, 447, 448,
	449, 0, 574, 450, 532, 451, 533, 452, 453, 454,
	455, 456, 457, 458, 460, 0, 0, 462, 463, 464,
	466, 467, 468, 469, 472, 473, 474, 475, 476, 0,
	477, 479, 481, 559, 536, 537, 538, 539, 540, 542,
	543, 544, 545, 482, 483, 499, 350, 344, 300, 342,
	343, 347, 348, 351, 163, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 193, 0, 0, 242, 279, 494,
	0, 0, 339, 0, 392, 396, 0, 485, 0, 0,
	0, 0, 250, 0, 0, 0, 0, 0, 0, 0,
	461, 0, 0, 0, 0, 181, 575, 484, 555, 0,
	0, 0, 346, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 383, 317, 0, 534, 410, 188,
	234, 221, 263, 305, 417, 0, 0, 295, 465, 230,
	319, 0, 209, 352, 0, 441, 316, 0, 424, 444,
	0, 336, 215, 375, 431, 432, 0, 0, 0, 0,
	0, 219, 220, 341, 201, 349, 546, 512, 404, 362,
	360, 0, 327, 384, 541, 0, 0, 249, 0, 244,
	340, 480, 207, 459, 378, 345, 299, 407, 436, 246,
	231, 232, 275, 377, 265, 217, 470, 509, 513, 511,
	507, 504, 508, 505, 506, 510, 266, 503, 0, 478,
	487, 521, 501, 529, 486, 526, 496, 241, 525, 490,
	489, 535, 516, 517, 471, 531, 502, 500, 493, 492,
	488, 0, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 177, 0, 178, 179, 180, 182, 183, 184,
	0, 185, 186, 187, 190, 191, 192, 194, 554, 195,
	196, 197, 198, 199, 200, 491, 0, 202, 203, 204,
	205, 206, 208, 210, 211, 212, 213, 214, 216, 218,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 224,
	225, 226, 227, 0, 228, 229, 233, 235, 236, 237,
	238, 239, 240, 243, 0, 245, 247, 0, 248, 251,
	0, 252, 253, 254, 255, 256, 257, 258, 259, 495,
	260, 0, 261, 262, 264, 0, 267, 268, 269, 270,
	271, 0, 272, 497, 498, 273, 274, 276, 277, 278,
	280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 0, 292, 293, 294, 296, 0, 297, 298,
	301, 302, 303, 304, 0, 306, 514, 0, 307, 308,
	309, 0, 0, 310, 311, 312, 313, 314, 315, 318,
	515, 320, 321, 322, 323, 324, 325, 326, 556, 328,
	329, 330, 331, 332, 333, 334, 518, 519, 335, 337,
	338, 520, 522, 523, 0, 353, 354, 355, 356, 357,
	358, 359, 361, 0, 363, 364, 365, 524, 366, 367,
	368, 369, 0, 370, 371, 372, 373, 374, 376, 379,
	380, 381, 382, 0, 385, 386, 387, 388, 389, 390,
	391, 393, 394, 395, 397, 398, 399, 557, 400, 401,
	402, 403, 527, 405, 406, 558, 408, 409, 411, 412,
	413, 414, 415, 416, 573, 0, 418, 528, 419, 420,
	421, 422, 423, 0, 425, 426, 427, 428, 429, 430,
	433, 434, 435, 437, 438, 530, 439, 440, 0, 442,
	443, 0, 445, 446, 447, 448, 449, 0, 574, 450,
	532, 451, 533, 452, 453, 454, 455, 456, 457, 458,
	460, 0, 0, 462, 463, 464, 466, 467, 468, 469,
	472, 473, 474, 475, 476, 0, 477, 479, 481, 559,
	536, 537, 538, 539, 540, 542, 543, 544, 545, 482,
	483, 499, 350, 344, 300, 342, 343, 347, 348, 351,
	697, 0, 0, 797, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	193, 665, 1735, 242, 279, 494, 0, 0, 339, 0,
	392, 396, 0, 485, 0, 0, 0, 0, 250, 0,
	670, 0, 676, 0, 682, 0, 461, 0, 672, 673,
	678, 181, 575, 484, 555, 0, 0, 0, 346, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 674, 671, 675, 681, 669, 679, 666, 677, 0,
	383, 317, 0, 534, 410, 188, 234, 221, 263, 305,
	417, 0, 0, 295, 465, 230, 319, 0, 209, 352,
	0, 441, 316, 0, 424, 444, 0, 336, 215, 375,
	431, 432, 663, 668, 0, 684, 0, 219, 220, 341,
	201, 349, 546, 512, 404, 362, 360, 0, 327, 384,
	541, 0, 0, 249, 0, 244, 340, 480, 207, 459,
	378, 345, 299, 407, 436, 246, 231, 232, 275, 377,
	265, 217, 470, 509, 513, 511, 507, 504, 508, 505,
	506, 510, 266, 503, 0, 478, 487, 521, 501, 529,
	486, 526, 496, 241, 525, 490, 489, 535, 516, 517,
	471, 531, 502, 500, 493, 492, 488, 0, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 177, 0,
	178, 179, 180, 182, 183, 184, 662, 185, 186, 187,
	190, 191, 192, 194, 554, 195, 196, 197, 198, 199,
	200, 491, 664, 202, 203, 204, 205, 206, 208, 210,
	211, 212, 213, 214, 216, 218, 0, 0, 0, 667,
	0, 0, 0, 222, 223, 224, 225, 226, 227, 0,
	228, 229, 233, 235, 236, 237, 238, 239, 240, 243,
	0, 245, 247, 0, 248, 251, 0, 252, 253, 254,
	255, 256, 257, 258, 259, 495, 260, 0, 261, 262,
	264, 0, 267, 268, 269, 270, 271, 0, 272, 497,
	498, 273, 274, 276, 277, 278, 280, 281, 282, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 0, 292,
	293, 294, 296, 0, 297, 298, 301, 302, 303, 304,
	0, 306, 514, 0, 307, 308, 309, 0, 0, 310,
	311, 312, 313, 314, 315, 318, 515, 320, 321, 322,
	323, 324, 325, 326, 556, 328, 329, 330, 331, 332,
	333, 334, 518, 519, 335, 337, 338, 520, 522, 523,
	680, 353, 354, 355, 356, 357, 358, 359, 361, 0,
	363, 364, 365, 524, 366, 367, 368, 369, 0, 370,
	371, 372, 373, 374, 376, 379, 380, 381, 382, 0,
	385, 386, 387, 388, 389, 390, 391, 393, 394, 395,
	397, 398, 399, 557, 400, 401, 402, 403, 527, 405,
	406, 558, 408, 409, 411, 412, 413, 414, 415, 416,
	573, 0, 418, 528, 419, 420, 421, 422, 423, 0,
	425, 426, 427, 428, 429, 430, 433, 434, 435, 437,
	438, 530, 439, 440, 0, 442, 443, 683, 445, 446,
	447, 448, 449, 0, 574, 450, 532, 451, 533, 452,
	453, 454, 455, 456, 457, 458, 460, 0, 0, 462,
	463, 464, 466, 467, 468, 469, 472, 473, 474, 475,
	476, 0, 477, 479, 481, 559, 536, 537, 538, 539,
	540, 542, 543, 544, 545, 482, 483, 499, 350, 344,
	300, 342, 343, 347, 348, 351, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 193, 0, 0, 242,
	279, 494, 0, 0, 339, 0, 392, 396, 0, 485,
	0, 0, 0, 0, 250, 0, 0, 0, 0, 0,
	0, 0, 461, 0, 0, 0, 0, 181, 575, 484,
	555, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 383, 317, 0, 534,
	410, 188, 234, 221, 263, 305, 417, 0, 0, 295,
	465, 230, 319, 0, 209, 352, 0, 441, 316, 0,
	424, 444, 0, 336, 215, 375, 431, 432, 0, 0,
	0, 0, 0, 219, 220, 341, 201, 349, 546, 512,
	404, 362, 360, 0, 327, 384, 541, 0, 0, 249,
	0, 244, 340, 480, 207, 459, 378, 345, 299, 407,
	436, 246, 231, 232, 275, 377, 265, 217, 470, 509,
	513, 511, 507, 504, 508, 505, 506, 510, 266, 503,
	0, 478, 487, 521, 501, 529, 486, 526, 496, 241,
	525, 490, 489, 535, 516, 517, 471, 531, 502, 500,
	493, 492, 488, 0, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 177, 0, 178, 179, 180, 182,
	183, 184, 0, 185, 186, 187, 190, 191, 192, 194,
	554, 195, 196, 197, 198, 199, 200, 491, 0, 202,
	203, 204, 205, 206, 208, 210, 211, 212, 213, 214,
	216, 218, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 224, 225, 226, 227, 0, 228, 229, 233, 235,
	236, 237, 238, 239, 240, 243, 0, 245, 247, 0,
	248, 251, 0, 252, 253, 254, 255, 256, 257, 258,
	259, 495, 260, 0, 261, 262, 264, 0, 267, 268,
	269, 270, 271, 0, 272, 497, 498, 273, 274, 276,
	277, 278, 280, 281, 282, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 0, 292, 293, 294, 296, 0,
	297, 298, 301, 302, 303, 304, 0, 306, 514, 0,
	307, 308, 309, 0, 0, 310, 311, 312, 313, 314,
	315, 318, 515, 320, 321, 322, 323, 324, 325, 326,
	556, 328, 329, 330, 331, 332, 333, 334, 518, 519,
	335, 337, 338, 520, 522, 523, 0, 353, 354, 355,
	356, 357, 358, 359, 361, 0, 363, 364, 365, 524,
	366, 367, 368, 369, 0, 370, 371, 372, 373, 374,
	376, 379, 380, 381, 382, 0, 385, 386, 387, 388,
	389, 390, 391, 393, 394, 395, 397, 398, 399, 557,
	400, 401, 402, 403, 527, 405, 406, 558, 408, 409,
	411, 412, 413, 414, 415, 416, 573, 0, 418, 528,
	419, 420, 421, 422, 423, 0, 425, 426, 427, 428,
	429, 430, 433, 434, 435, 437, 438, 530, 439, 440,
	0, 442, 443, 0, 445, 446, 447, 448, 449, 0,
	574, 450, 532, 451, 533, 452, 453, 454, 455, 456,
	457, 458, 460, 0, 0, 462, 463, 464, 466, 467,
	468, 469, 472, 473, 474, 475, 476, 0, 477, 479,
	481, 559, 536, 537, 538, 539, 540, 542, 543, 544,
	545, 482, 483, 499, 350, 344, 300, 342, 343, 347,
	348, 351, 659, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 193, 665, 855, 242, 279, 494, 0, 0,
	339, 0, 392, 396, 0, 485, 0, 0, 0, 0,
	250, 0, 670, 0, 676, 0, 682, 0, 461, 0,
	672, 673, 678, 181, 575, 484, 555, 0, 0, 0,
	346, 0, 0, 0, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 674, 671, 675, 681, 669, 679, 666,
	677, 0, 383, 317, 0, 534, 410, 188, 234, 221,
	263, 305, 417, 0, 0, 295, 465, 230, 319, 0,
	209, 352, 0, 441, 316, 0, 424, 444, 0, 336,
	215, 375, 431, 432, 663, 668, 0, 684, 0, 219,
	220, 341, 201, 349, 546, 512, 404, 362, 360, 0,
	327, 384, 541, 0, 0, 249, 0, 244, 340, 480,
	207, 459, 378, 345, 299, 407, 436, 246, 231, 232,
	275, 377, 265, 217, 470, 509, 513, 511, 507, 504,
	508, 505, 506, 510, 266, 503, 0, 478, 487, 521,
	501, 529, 486, 526, 496, 241, 525, 490, 489, 535,
	516, 517, 471, 531, 502, 500, 493, 492, 488, 0,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	177, 0, 178, 179, 180, 182, 183, 184, 662, 185,
	186, 187, 190, 191, 192, 194, 554, 195, 196, 197,
	198, 199, 200, 491, 664, 202, 203, 204, 205, 206,
	208, 210, 211, 212, 213, 214, 216, 218, 0, 0,
	0, 667, 0, 0, 0, 222, 223, 224, 225, 226,
	227, 0, 228, 229, 233, 235, 236, 237, 238, 239,
	240, 243, 0, 245, 247, 0, 248, 251, 0, 252,
	253, 254, 255, 256, 257, 258, 259, 495, 260, 0,
	261, 262, 264, 0, 267, 268, 269, 270, 271, 0,
	272, 497, 498, 273, 274, 276, 277, 278, 280, 281,
	282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
	0, 292, 293, 294, 296, 0, 297, 298, 301, 302,
	303, 304, 0, 306, 514, 0, 307, 308, 309, 0,
	0, 310, 311, 312, 313, 314, 315, 318, 515, 320,
	321, 322, 323, 324, 325, 326, 556, 328, 329, 330,
	331, 332, 333, 334, 518, 519, 335, 337, 338, 520,
	522, 523, 680, 353, 354, 355, 356, 357, 358, 359,
	361, 0, 363, 364, 365, 524, 366, 367, 368, 369,
	0, 370, 371, 372, 373, 374, 376, 379, 380, 381,
	382, 0, 385, 386, 387, 388, 389, 390, 391, 393,
	394, 395, 397, 398, 399, 557, 400, 401, 402, 403,
	527, 405, 406, 558, 408, 409, 411, 412, 413, 414,
	415, 416, 573, 0, 418, 528, 419, 420, 421, 422,
	423, 0, 425, 426, 427, 428, 429, 430, 433, 434,
	435, 437, 438, 530, 439, 440, 0, 442, 443, 683,
	445, 446, 447, 448, 449, 0, 574, 450, 532, 451,
	533, 452, 453, 454, 455, 456, 457, 458, 460, 0,
	0, 462, 463, 464, 466, 467, 468, 469, 472, 473,
	474, 475, 476, 0, 477, 479, 481, 559, 536, 537,
	538, 539, 540, 542, 543, 544, 545, 482, 483, 499,
	350, 344, 300, 342, 343, 347, 348, 351, 697, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 193, 665,
	0, 242, 279, 494, 0, 0, 339, 0, 392, 396,
	0, 485, 0, 0, 0, 0, 250, 0, 670, 0,
	676, 0, 682, 0, 461, 0, 672, 673, 678, 181,
	575, 484, 555, 0, 0, 0, 346, 0, 0, 0,
	0, 0, 0, 0, 189, 0, 0, 0, 0, 674,
	671, 675, 681, 669, 679, 666, 677, 0, 383, 317,
	0, 534, 410, 188, 234, 221, 263, 305, 417, 0,
	0, 295, 465, 230, 319, 0, 209, 352, 0, 441,
	316, 0, 424, 444, 0, 336, 215, 375, 431, 432,
	663, 668, 0, 684, 0, 219, 220, 341, 201, 349,
	546, 512, 404, 362, 360, 0, 327, 384, 541, 0,
	0, 249, 0, 244, 340, 480, 207, 459, 378, 345,
	299, 407, 436, 246, 231, 232, 275, 377, 265, 217,
	470, 509, 513, 511, 507, 504, 508, 505, 506, 510,
	266, 503, 0, 478, 487, 521, 501, 529, 486, 526,
	496, 241, 525, 490, 489, 535, 516, 517, 471, 531,
	502, 500, 493, 492, 488, 0, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 177, 0, 178, 179,
	180, 182, 183, 184, 662, 185, 186, 187, 190, 191,
	192, 194, 554, 195, 196, 197, 198, 199, 200, 491,
	664, 202, 203, 204, 205, 206, 208, 210, 211, 212,
	213, 214, 216, 218, 0, 0, 0, 667, 0, 0,
	0, 222, 223, 224, 225, 226, 227, 0, 228, 229,
	233, 235, 236, 237, 238, 239, 240, 243, 0, 245,
	247, 0, 248, 251, 0, 252, 253, 254, 255, 256,
	257, 258, 259, 495, 260, 0, 261, 262, 264, 0,
	267, 268, 269, 270, 271, 0, 272, 497, 498, 273,
	274, 276, 277, 278, 280, 281, 282, 283, 284, 285,
	286, 287, 288, 289, 290, 291, 0, 292, 293, 294,
	296, 0, 297, 298, 301, 302, 303, 304, 0, 306,
	514, 0, 307, 308, 309, 0, 0, 310, 311, 312,
	313, 314, 315, 318, 515, 320, 321, 322, 323, 324,
	325, 326, 556, 328, 329, 330, 331, 332, 333, 334,
	518, 519, 335, 337, 338, 520, 522, 523, 680, 353,
	354, 355, 356, 357, 358, 359, 361, 0, 363, 364,
	365, 524, 366, 367, 368, 369, 0, 370, 371, 372,
	373, 374, 376, 379, 380, 381, 382, 0, 385, 386,
	387, 388, 389, 390, 391, 393, 394, 395, 397, 398,
	399, 557, 400, 401, 402, 403, 527, 405, 406, 558,
	408, 409, 411, 412, 413, 414, 415, 416, 573, 0,
	418, 528, 419, 420, 421, 422, 423, 0, 425, 426,
	427, 428, 429, 430, 433, 434, 435, 437, 438, 530,
	439, 440, 0, 442, 443, 683, 445, 446, 447, 448,
	449, 0, 574, 450, 532, 451, 533, 452, 453, 454,
	455, 456, 457, 458, 460, 0, 0, 462, 463, 464,
	466, 467, 468, 469, 472, 473, 474, 475, 476, 0,
	477, 479, 481, 559, 536, 537, 538, 539, 540, 542,
	543, 544, 545, 482, 483, 499, 350, 344, 300, 342,
	343, 347, 348, 351, 2190, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 193, 665, 0, 242, 279, 0,
	0, 0, 339, 0, 392, 396, 0, 0, 0, 0,
	0, 0, 250, 0, 670, 2165, 676, 0, 682, 0,
	461, 0, 672, 673, 678, 181, 757, 484, 555, 0,
	0, 0, 346, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 674, 671, 675, 681, 669,
	679, 666, 677, 0, 383, 317, 0, 0, 410, 188,
	234, 221, 263, 305, 417, 0, 0, 295, 465, 230,
	319, 0, 209, 352, 0, 441, 316, 0, 424, 444,
	0, 336, 215, 375, 431, 432, 663, 668, 0, 684,
	0, 219, 220, 341, 201, 349, 0, 0, 404, 362,
	360, 0, 327, 384, 0, 0, 0, 249, 0, 244,
	340, 480, 207, 459, 378, 345, 299, 407, 436, 246,
	231, 232, 275, 377, 265, 217, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 478,
	760, 750, 742, 743, 744, 745, 746, 747, 0, 762,
	763, 764, 765, 766, 471, 756, 0, 741, 748, 749,
	751, 2168, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 177, 0, 178, 179, 180, 182, 183, 184,
	662, 185, 186, 187, 190, 191, 192, 194, 554, 195,
	196, 197, 198, 199, 200, 0, 664, 202, 203, 204,
	205, 206, 208, 210, 211, 212, 213, 214, 216, 218,
	0, 0, 0, 667, 0, 0, 0, 222, 223, 224,
	225, 226, 227, 0, 228, 229, 233, 235, 236, 237,
	238, 239, 240, 243, 0, 245, 247, 0, 248, 251,
	0, 252, 253, 254, 255, 256, 257, 258, 259, 0,
	260, 0, 261, 262, 264, 0, 267, 268, 269, 270,
	271, 0, 272, 0, 0, 273, 274, 276, 277, 278,
	280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 0, 292, 293, 294, 296, 0, 297, 298,
	301, 302, 303, 304, 0, 306, 0, 0, 307, 308,
	309, 0, 0, 310, 311, 312, 313, 314, 315, 318,
	0, 320, 321, 322, 323, 324, 325, 326, 556, 328,
	329, 330, 331, 332, 333, 334, 0, 0, 335, 337,
	338, 0, 2166, 0, 680, 353, 354, 355, 356, 357,
	358, 359, 361, 0, 363, 364, 365, 0, 366, 367,
	368, 369, 0, 370, 371, 372, 373, 374, 376, 379,
	380, 381, 382, 0, 385, 386, 387, 388, 389, 390,
	391, 393, 394, 395, 397, 398, 399, 557, 400, 401,
	402, 403, 0, 405, 406, 558, 408, 409, 411, 412,
	413, 414, 415, 416, 573, 0, 418, 2171, 419, 420,
	421, 422, 423, 0, 425, 426, 427, 428, 429, 430,
	433, 434, 435, 437, 438, 0, 439, 440, 0, 442,
	443, 683, 445, 446, 447, 448, 449, 0, 574, 450,
	0, 451, 0, 452, 453, 454, 455, 456, 457, 458,
	460, 0, 0, 462, 463, 464, 466, 467, 468, 469,
	472, 473, 474, 475, 476, 0, 477, 479, 481, 559,
	0, 0, 0, 163, 0, 0, 0, 0, 0, 482,
	483, 2167, 350, 344, 300, 342, 343, 347, 348, 351,
	2185, 176, 0, 193, 0, 0, 242, 1822, 494, 0,
	0, 339, 0, 392, 396, 0, 485, 0, 0, 0,
	0, 250, 0, 0, 0, 0, 0, 2183, 0, 461,
	0, 0, 0, 0, 181, 575, 484, 555, 0, 0,
	0, 346, 0, 0, 0, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 383, 317, 0, 534, 410, 188, 234,
	221, 263, 305, 417, 0, 0, 295, 465, 230, 319,
	0, 209, 352, 0, 441, 316, 0, 424, 444, 0,
	336, 215, 375, 431, 432, 0, 0, 1826, 0, 0,
	219, 220, 341, 201, 349, 546, 512, 404, 362, 360,
	0, 327, 384, 541, 0, 0, 249, 0, 244, 340,
	480, 207, 459, 378, 345, 299, 407, 436, 246, 231,
	232, 275, 377, 265, 217, 470, 509, 513, 511, 507,
	504, 508, 505, 506, 510, 266, 503, 0, 478, 487,
	521, 501, 529, 486, 526, 496, 241, 525, 490, 489,
	535, 516, 517, 471, 531, 502, 500, 493, 492, 488,
	0, 166, 167, 168, 169, 170, 171, 172, 173, 174,
	175, 177, 0, 178, 179, 180, 182, 183, 184, 0,
	185, 186, 187, 190, 191, 192, 194, 554, 195, 196,
	197, 198, 199, 200, 491, 0, 202, 203, 204, 205,
	206, 208, 210, 211, 212, 213, 214, 216, 218, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 224, 225,
	226, 227, 0, 228, 229, 233, 235, 236, 237, 238,
	239, 240, 243, 0, 245, 247, 0, 248, 251, 0,
	1832, 253, 254, 255, 256, 257, 258, 259, 495, 260,
	0, 261, 262, 264, 1831, 267, 268, 269, 270, 271,
	0, 272, 497, 498, 273, 274, 276, 277, 278, 280,
	281, 282, 283, 284, 285, 286, 287, 288, 289, 290,
	291, 0, 292, 293, 294, 296, 0, 297, 298, 301,
	302, 303, 304, 0, 306, 514, 0, 307, 308, 309,
	0, 0, 310, 311, 312, 313, 314, 315, 318, 515,
	320, 321, 322, 323, 324, 325, 326, 556, 328, 329,
	330, 331, 332, 333, 334, 518, 519, 335, 337, 338,
	520, 522, 523, 0, 353, 354, 355, 356, 357, 358,
	359, 361, 0, 363, 364, 365, 524, 366, 367, 368,
	369, 1830, 370, 371, 372, 373, 374, 376, 379, 380,
	381, 382, 0, 385, 386, 387, 388, 389, 390, 391,
	393, 394, 395, 397, 398, 399, 557, 400, 401, 402,
	403, 527, 405, 406, 558, 408, 409, 411, 412, 413,
	414, 415, 416, 573, 0, 418, 528, 419, 420, 421,
	422, 423, 0, 425, 426, 427, 428, 429, 430, 433,
	434, 435, 437, 438, 530, 439, 440, 0, 442, 443,
	0, 445, 446, 447, 448, 449, 0, 574, 450, 532,
	451, 533, 452, 453, 454, 455, 456, 457, 458, 460,
	0, 1829, 462, 463, 464, 466, 467, 468, 469, 472,
	473, 474, 475, 476, 0, 477, 479, 481, 559, 536,
	537, 538, 539, 540, 542, 543, 544, 545, 482, 483,
	499, 350, 344, 300, 342, 343, 347, 348, 351, 163,
	0, 0, 0, 1828, 1823, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 193,
	0, 0, 242, 279, 494, 0, 0, 339, 0, 392,
	396, 0, 485, 0, 0, 0, 0, 250, 0, 0,
	0, 2123, 0, 0, 0, 461, 0, 0, 0, 0,
	181, 575, 484, 555, 0, 0, 0, 346, 0, 0,
	0, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 383,
	317, 0, 534, 410, 188, 234, 221, 263, 305, 417,
	0, 0, 295, 465, 230, 319, 0, 209, 352, 0,
	441, 316, 0, 424, 444, 0, 336, 215, 375, 431,
	432, 0, 0, 1826, 0, 0, 219, 220, 341, 201,
	349, 546, 512, 404, 362, 360, 0, 327, 384, 541,
	0, 0, 249, 0, 244, 340, 480, 207, 459, 378,
	345, 299, 407, 436, 246, 231, 232, 275, 377, 265,
	217, 470, 509, 513, 511, 507, 504, 508, 505, 506,
	510, 266, 503, 0, 478, 487, 521, 501, 529, 486,
	526, 496, 241, 525, 490, 489, 535, 516, 517, 471,
	531, 502, 500, 493, 492, 488, 0, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 177, 0, 178,
	179, 180, 182, 183, 184, 0, 185, 186, 187, 190,
	191, 192, 194, 554, 195, 196, 197, 198, 199, 200,
	491, 0, 202, 203, 204, 205, 206, 208, 210, 211,
	212, 213, 214, 216, 218, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 224, 225, 226, 227, 0, 228,
	229, 233, 235, 236, 237, 238, 239, 240, 243, 0,
	245, 247, 0, 248, 251, 0, 1832, 253, 254, 255,
	256, 257, 258, 259, 495, 260, 0, 261, 262, 264,
	1831, 267, 268, 269, 270, 271, 0, 272, 497, 498,
	273, 274, 276, 277, 278, 280, 281, 282, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 0, 292, 293,
	294, 296, 0, 297, 298, 301, 302, 303, 304, 0,
	306, 514, 0, 307, 308, 309, 0, 0, 310, 311,
	312, 313, 314, 315, 318, 515, 320, 321, 322, 323,
	324, 325, 326, 556, 328, 329, 330, 331, 332, 333,
	334, 518, 519, 335, 337, 338, 520, 522, 523, 0,
	353, 354, 355, 356, 357, 358, 359, 361, 0, 363,
	364, 365, 524, 366, 367, 368, 369, 1830, 370, 371,
	372, 373, 374, 376, 379, 380, 381, 382, 0, 385,
	386, 387, 388, 389, 390, 391, 393, 394, 395, 397,
	398, 399, 557, 400, 401, 402, 403, 527, 405, 406,
	558, 408, 409, 411, 412, 413, 414, 415, 416, 573,
	0, 418, 528, 419, 420, 421, 422, 423, 0, 425,
	426, 427, 428, 429, 430, 433, 434, 435, 437, 438,
	530, 439, 440, 0, 442, 443, 0, 445, 446, 447,
	448, 449, 0, 574, 450, 532, 451, 533, 452, 453,
	454, 455, 456, 457, 458, 460, 0, 1829, 462, 463,
	464, 466, 467, 468, 469, 472, 473, 474, 475, 476,
	0, 477, 479, 481, 559, 536, 537, 538, 539, 540,
	542, 543, 544, 545, 482, 483, 499, 350, 344, 300,
	342, 343, 347, 348, 351, 163, 0, 0, 0, 1828,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 0, 193, 0, 0, 242, 279,
	494, 0, 0, 339, 0, 392, 396, 0, 485, 0,
	0, 0, 0, 250, 0, 0, 0, 0, 0, 0,
	0, 461, 0, 0, 0, 0, 181, 575, 484, 555,
	0, 0, 0, 346, 0, 0, 0, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 383, 317, 0, 534, 410,
	188, 234, 221, 263, 305, 417, 0, 0, 295, 465,
	230, 319, 0, 209, 352, 0, 441, 316, 0, 424,
	444, 0, 336, 215, 375, 431, 432, 0, 0, 1826,
	0, 0, 219, 220, 341, 201, 349, 546, 512, 404,
	362, 360, 0, 327, 384, 541, 0, 0, 249, 0,
	244, 340, 480, 207, 459, 378, 345, 299, 407, 436,
	246, 231, 232, 275, 377, 265, 217, 470, 509, 513,
	511, 507, 504, 508, 505, 506, 510, 266, 503, 0,
	478, 487, 521, 501, 529, 486, 526, 496, 241, 525,
	490, 489, 535, 516, 517, 471, 531, 502, 500, 493,
	492, 488, 0, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 177, 0, 178, 179, 180, 182, 183,
	184, 0, 185, 186, 187, 190, 191, 192, 194, 554,
	195, 196, 197, 198, 199, 200, 491, 0, 202, 203,
	204, 205, 206, 208, 210, 211, 212, 213, 214, 216,
	218, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	224, 225, 226, 227, 0, 228, 229, 233, 235, 236,
	237, 238, 239, 240, 243, 0, 245, 247, 0, 248,
	251, 0, 1832, 253, 254, 255, 256, 257, 258, 259,
	495, 260, 0, 261, 262, 264, 1831, 267, 268, 269,
	270, 271, 0, 272, 497, 498, 273, 274, 276, 277,
	278, 280, 281, 282, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 0, 292, 293, 294, 296, 0, 297,
	298, 301, 302, 303, 304, 0, 306, 514, 0, 307,
	308, 309, 0, 0, 310, 311, 312, 313, 314, 315,
	318, 515, 320, 321, 322, 323, 324, 325, 326, 556,
	328, 329, 330, 331, 332, 333, 334, 518, 519, 335,
	337, 338, 520, 522, 523, 0, 353, 354, 355, 356,
	357, 358, 359, 361, 0, 363, 364, 365, 524, 366,
	367, 368, 369, 1830, 370, 371, 372, 373, 374, 376,
	379, 380, 381, 382, 0, 385, 386, 387, 388, 389,
	390, 391, 393, 394, 395, 397, 398, 399, 557, 400,
	401, 402, 403, 527, 405, 406, 558, 408, 409, 411,
	412, 413, 414, 415, 416, 573, 0, 418, 528, 419,
	420, 421, 422, 423, 0, 425, 426, 427, 428, 429,
	430, 433, 434, 435, 437, 438, 530, 439, 440, 0,
	442, 443, 0, 445, 446, 447, 448, 449, 0, 574,
	450, 532, 451, 533, 452, 453, 454, 455, 456, 457,
	458, 460, 0, 1829, 462, 463, 464, 466, 467, 468,
	469, 472, 473, 474, 475, 476, 0, 477, 479, 481,
	559, 536, 537, 538, 539, 540, 542, 543, 544, 545,
	482, 483, 499, 350, 344, 300, 342, 343, 347, 348,
	351, 758, 0, 0, 0, 1828, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	0, 193, 665, 0, 242, 279, 0, 0, 0, 339,
	0, 392, 396, 0, 0, 0, 0, 0, 0, 250,
	0, 670, 2165, 676, 0, 682, 0, 461, 0, 672,
	673, 678, 181, 757, 484, 555, 0, 0, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 189, 0, 0,
	0, 0, 674, 671, 675, 681, 669, 679, 666, 677,
	0, 383, 317, 0, 0, 410, 188, 234, 221, 263,
	305, 417, 0, 0, 295, 465, 230, 319, 0, 209,
	352, 0, 441, 316, 0, 424, 444, 0, 336, 215,
	375, 431, 432, 663, 668, 0, 684, 0, 219, 220,
	341, 201, 349, 0, 0, 404, 362, 360, 0, 327,
	384, 0, 0, 0, 249, 0, 244, 340, 480, 207,
	459, 378, 345, 299, 407, 436, 246, 231, 232, 275,
	377, 265, 217, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 0, 0, 478, 760, 750, 742,
	743, 744, 745, 746, 747, 0, 762, 763, 764, 765,
	766, 471, 756, 0, 741, 748, 749, 751, 2168, 166,
	167, 168, 169, 170, 171, 172, 173, 174, 175, 177,
	0, 178, 179, 180, 182, 183, 184, 662, 185, 186,
	187, 190, 191, 192, 194, 554, 195, 196, 197, 198,
	199, 200, 0, 664, 202, 203, 204, 205, 206, 208,
	210, 211, 212, 213, 214, 216, 218, 0, 0, 0,
	667, 0, 0, 0, 222, 223, 224, 225, 226, 227,
	0, 228, 229, 233, 235, 236, 237, 238, 239, 240,
	243, 0, 245, 247, 0, 248, 251, 0, 252, 253,
	254, 255, 256, 257, 258, 259, 0, 260, 0, 261,
	262, 264, 0, 267, 268, 269, 270, 271, 0, 272,
	0, 0, 273, 274, 276, 277, 278, 280, 281, 282,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 0,
	292, 293, 294, 296, 0, 297, 298, 301, 302, 303,
	304, 0, 306, 0, 0, 307, 308, 309, 0, 0,
	310, 311, 312, 313, 314, 315, 318, 0, 320, 321,
	322, 323, 324, 325, 326, 556, 328, 329, 330, 331,
	332, 333, 334, 0, 0, 335, 337, 338, 0, 2166,
	0, 680, 353, 354, 355, 356, 357, 358, 359, 361,
	0, 363, 364, 365, 0, 366, 367, 368, 369, 0,
	370, 371, 372, 373, 374, 376, 379, 380, 381, 382,
	0, 385, 386, 387, 388, 389, 390, 391, 393, 394,
	395, 397, 398, 399, 557, 400, 401, 402, 403, 0,
	405, 406, 558, 408, 409, 411, 412, 413, 414, 415,
	416, 573, 0, 418, 2171, 419, 420, 421, 422, 423,
	0, 425, 426, 427, 428, 429, 430, 433, 434, 435,
	437, 438, 0, 439, 440, 0, 442, 443, 683, 445,
	446, 447, 448, 449, 0, 574, 450, 0, 451, 0,
	452, 453, 454, 455, 456, 457, 458, 460, 0, 0,
	462, 463, 464, 466, 467, 468, 469, 472, 473, 474,
	475, 476, 0, 477, 479, 481, 559, 0, 0, 0,
	163, 0, 0, 0, 0, 0, 482, 483, 2167, 350,
	344, 300, 342, 343, 347, 348, 351, 2282, 176, 0,
	193, 0, 0, 242, 279, 494, 0, 0, 339, 0,
	392, 396, 0, 485, 0, 0, 0, 0, 250, 0,
	2159, 0, 0, 0, 0, 0, 461, 0, 0, 0,
	0, 181, 575, 484, 555, 0, 0, 0, 346, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	383, 317, 0, 534, 410, 188, 234, 221, 263, 305,
	417, 0, 0, 295, 465, 230, 319, 0, 209, 352,
	2283, 441, 316, 0, 424, 444, 0, 336, 215, 375,
	431, 432, 0, 0, 0, 0, 0, 219, 220, 341,
	201, 349, 546, 512, 404, 362, 360, 0, 327, 384,
	541, 0, 0, 249, 0, 244, 340, 480, 207, 459,
	378, 345, 299, 407, 436, 246, 231, 232, 275, 377,
	265, 217, 470, 509, 513, 511, 507, 504, 508, 505,
	506, 510, 266, 503, 0, 478, 487, 521, 501, 529,
	486, 526, 496, 241, 525, 490, 489, 535, 516, 517,
	471, 531, 502, 500, 493, 492, 488, 0, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 177, 0,
	178, 179, 180, 182, 183, 184, 0, 185, 186, 187,
	190, 191, 192, 194, 554, 195, 196, 197, 198, 199,
	200, 491, 0, 202, 203, 204, 205, 206, 208, 210,
	211, 212, 213, 214, 216, 218, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 227, 0,
	228, 229, 233, 235, 236, 237, 238, 239, 240, 243,
	0, 245, 247, 0, 248, 251, 0, 252, 253, 254,
	255, 256, 257, 258, 259, 495, 260, 0, 261, 262,
	264, 0, 267, 268, 269, 270, 271, 0, 272, 497,
	498, 273, 274, 276, 277, 278, 280, 281, 282, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 0, 292,
	293, 294, 296, 0, 297, 298, 301, 302, 303, 304,
	0, 306, 514, 0, 307, 308, 309, 0, 0, 310,
	311, 312, 313, 314, 315, 318, 515, 320, 321, 322,
	323, 324, 325, 326, 556, 328, 329, 330, 331, 332,
	333, 334, 518, 519, 335, 337, 338, 520, 522, 523,
	0, 353, 354, 355, 356, 357, 358, 359, 361, 0,
	363, 364, 365, 524, 366, 367, 368, 369, 0, 370,
	371, 372, 373, 374, 376, 379, 380, 381, 382, 0,
	385, 386, 387, 388, 389, 390, 391, 393, 394, 395,
	397, 398, 399, 557, 400, 401, 402, 403, 527, 405,
	406, 558, 408, 409, 411, 412, 413, 414, 415, 416,
	573, 0, 418, 528, 419, 420, 421, 422, 423, 0,
	425, 426, 427, 428, 429, 430, 433, 434, 435, 437,
	438, 530, 439, 440, 0, 442, 443, 0, 445, 446,
	447, 448, 449, 0, 574, 450, 532, 451, 533, 452,
	453, 454, 455, 456, 457, 458, 460, 0, 0, 462,
	463, 464, 466, 467, 468, 469, 472, 473, 474, 475,
	476, 0, 477, 479, 481, 559, 536, 537, 538, 539,
	540, 542, 543, 544, 545, 482, 483, 499, 350, 344,
	300, 342, 343, 347, 348, 351, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2273, 176, 0, 193, 0, 0, 242,
	279, 494, 0, 0, 339, 0, 392, 396, 0, 485,
	0, 0, 0, 0, 250, 0, 0, 0, 0, 0,
	0, 0, 461, 0, 0, 0, 0, 181, 575, 484,
	555, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 383, 317, 0, 534,
	410, 188, 234, 221, 263, 305, 417, 0, 0, 295,
	465, 230, 319, 0, 209, 352, 2274, 441, 316, 0,
	424, 444, 0, 336, 215, 375, 431, 432, 0, 0,
	0, 0, 0, 219, 220, 341, 201, 349, 546, 512,
	404, 362, 360, 0, 327, 384, 541, 0, 0, 249,
	0, 244, 340, 480, 207, 459, 378, 345, 299, 407,
	436, 246, 231, 232, 275, 377, 265, 217, 470, 509,
	513, 511, 507, 504, 508, 505, 506, 510, 266, 503,
	0, 478, 487, 521, 501, 529, 486, 526, 496, 241,
	525, 490, 489, 535, 516, 517, 471, 531, 502, 500,
	493, 492, 488, 0, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 177, 0, 178, 179, 180, 182,
	183, 184, 0, 185, 186, 187, 190, 191, 192, 194,
	554, 195, 196, 197, 198, 199, 200, 491, 0, 202,
	203, 204, 205, 206, 208, 210, 211, 212, 213, 214,
	216, 218, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 224, 225, 226, 227, 0, 228, 229, 233, 235,
	236, 237, 238, 239, 240, 243, 0, 245, 247, 0,
	248, 251, 0, 252, 253, 254, 255, 256, 257, 258,
	259, 495, 260, 0, 261, 262, 264, 0, 267, 268,
	269, 270, 271, 0, 272, 497, 498, 273, 274, 276,
	277, 278, 280, 281, 282, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 0, 292, 293, 294, 296, 0,
	297, 298, 301, 302, 303, 304, 0, 306, 514, 0,
	307, 308, 309, 0, 0, 310, 311, 312, 313, 314,
	315, 318, 515, 320, 321, 322, 323, 324, 325, 326,
	556, 328, 329, 330, 331, 332, 333, 334, 518, 519,
	335, 337, 338, 520, 522, 523, 0, 353, 354, 355,
	356, 357, 358, 359, 361, 0, 363, 364, 365, 524,
	366, 367, 368, 369, 0, 370, 371, 372, 373, 374,
	376, 379, 380, 381, 382, 0, 385, 386, 387, 388,
	389, 390, 391, 393, 394, 395, 397, 398, 399, 557,
	400, 401, 402, 403, 527, 405, 406, 558, 408, 409,
	411, 412, 413, 414, 415, 416, 573, 0, 418, 528,
	419, 420, 421, 422, 423, 0, 425, 426, 427, 428,
	429, 430, 433, 434, 435, 437, 438, 530, 439, 440,
	0, 442, 443, 0, 445, 446, 447, 448, 449, 0,
	574, 450, 532, 451, 533, 452, 453, 454, 455, 456,
	457, 458, 460, 0, 0, 462, 463, 464, 466, 467,
	468, 469, 472, 473, 474, 475, 476, 0, 477, 479,
	481, 559, 536, 537, 538, 539, 540, 542, 543, 544,
	545, 482, 483, 499, 350, 344, 300, 342, 343, 347,
	348, 351, 163, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 644,
	176, 0, 193, 0, 0, 242, 643, 494, 0, 0,
	339, 0, 392, 396, 0, 485, 0, 0, 0, 0,
	250, 0, 0, 0, 0, 0, 0, 0, 461, 0,
	0, 0, 0, 181, 575, 484, 555, 0, 0, 0,
	346, 0, 0, 0, 572, 0, 0, 0, 189, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 383, 317, 0, 534, 410, 188, 234, 221,
	263, 305, 417, 0, 0, 295, 465, 230, 319, 0,
	209, 352, 0, 441, 316, 0, 424, 444, 0, 336,
	215, 375, 431, 432, 0, 0, 0, 0, 0, 219,
	220, 341, 201, 349, 546, 512, 404, 362, 360, 0,
	327, 384, 541, 0, 0, 249, 0, 244, 340, 480,
	207, 459, 378, 345, 299, 407, 436, 246, 231, 232,
	275, 377, 265, 217, 470, 509, 513, 511, 507, 504,
	508, 505, 506, 510, 266, 503, 0, 478, 487, 521,
	501, 529, 486, 526, 496, 241, 525, 490, 489, 535,
	516, 517, 471, 531, 502, 500, 493, 492, 488, 0,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	177, 0, 178, 179, 180, 182, 183, 184, 0, 185,
	186, 187, 190, 191, 192, 194, 554, 195, 196, 197,
	198, 199, 200, 491, 0, 202, 203, 204, 205, 206,
	208, 210, 211, 212, 213, 214, 216, 218, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	227, 0, 228, 229, 233, 235, 236, 237, 238, 239,
	240, 243, 0, 245, 247, 0, 248, 251, 0, 252,
	253, 254, 255, 256, 257, 258, 259, 495, 260, 0,
	261, 262, 264, 0, 267, 268, 269, 270, 271, 0,
	272, 497, 498, 273, 274, 276, 277, 278, 280, 281,
	282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
	0, 292, 293, 294, 296, 0, 297, 298, 301, 302,
	303, 304, 0, 306, 514, 0, 307, 308, 309, 0,
	0, 310, 311, 312, 313, 314, 315, 318, 515, 320,
	321, 322, 323, 324, 325, 326, 556, 328, 329, 330,
	331, 332, 333, 334, 518, 519, 335, 337, 338, 520,
	522, 523, 0, 353, 354, 355, 356, 357, 358, 359,
	361, 0, 363, 364, 365, 524, 366, 367, 368, 369,
	0, 370, 371, 372, 373, 374, 376, 379, 380, 381,
	382, 0, 385, 386, 387, 388, 389, 390, 391, 393,
	394, 395, 397, 398, 399, 557, 400, 401, 402, 403,
	527, 405, 406, 558, 408, 409, 411, 412, 413, 414,
	415, 416, 573, 0, 418, 528, 419, 420, 421, 422,
	423, 0, 425, 426, 427, 428, 429, 430, 433, 434,
	435, 437, 438, 530, 439, 440, 0, 442, 443, 0,
	445, 446, 447, 448, 449, 0, 574, 450, 532, 451,
	533, 452, 453, 454, 455, 456, 457, 458, 460, 0,
	0, 462, 463, 464, 466, 467, 468, 469, 472, 473,
	474, 475, 476, 0, 477, 479, 481, 559, 536, 537,
	538, 539, 540, 542, 543, 544, 545, 482, 483, 499,
	350, 344, 300, 342, 343, 347, 348, 351, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 193, 0,
	0, 242, 279, 494, 0, 0, 339, 0, 392, 396,
	0, 485, 0, 0, 0, 0, 250, 0, 0, 0,
	0, 0, 0, 0, 461, 0, 0, 0, 0, 181,
	575, 484, 555, 0, 0, 0, 346, 0, 0, 0,
	572, 0, 0, 0, 189, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 383, 317,
	0, 534, 410, 188, 234, 221, 263, 305, 417, 0,
	0, 295, 465, 230, 319, 0, 209, 352, 0, 441,
	316, 0, 424, 444, 0, 336, 215, 375, 431, 432,
	0, 0, 0, 0, 0, 219, 220, 341, 201, 349,
	546, 512, 404, 362, 360, 0, 327, 384, 541, 0,
	0, 249, 0, 244, 340, 480, 207, 459, 378, 345,
	299, 407, 436, 246, 231, 232, 275, 377, 265, 217,
	470, 509, 513, 511, 507, 504, 508, 505, 506, 510,
	266, 503, 0, 478, 487, 521, 501, 529, 486, 526,
	496, 241, 525, 490, 489, 535, 516, 517, 471, 531,
	502, 500, 493, 492, 488, 0, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 177, 0, 178, 179,
	180, 182, 183, 184, 0, 185, 186, 187, 190, 191,
	192, 194, 554, 195, 196, 197, 198, 199, 200, 491,
	0, 202, 203, 204, 205, 206, 208, 210, 211, 212,
	213, 214, 216, 218, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 224, 225, 226, 227, 0, 228, 229,
	233, 235, 236, 237, 238, 239, 240, 243, 0, 245,
	247, 0, 248, 251, 0, 252, 253, 254, 255, 256,
	257, 258, 259, 495, 260, 0, 261, 262, 264, 0,
	267, 268, 269, 270, 271, 0, 272, 497, 498, 273,
	274, 276, 277, 278, 280, 281, 282, 283, 284, 285,
	286, 287, 288, 289, 290, 291, 0, 292, 293, 294,
	296, 0, 297, 298, 301, 302, 303, 304, 0, 306,
	514, 0, 307, 308, 309, 0, 0, 310, 311, 312,
	313, 314, 315, 318, 515, 320, 321, 322, 323, 324,
	325, 326, 556, 328, 329, 330, 331, 332, 333, 334,
	518, 519, 335, 337, 338, 520, 522, 523, 0, 353,
	354, 355, 356, 357, 358, 359, 361, 0, 363, 364,
	365, 524, 366, 367, 368, 369, 0, 370, 371, 372,
	373, 374, 376, 379, 380, 381, 382, 0, 385, 386,
	387, 388, 389, 390, 391, 393, 394, 395, 397, 398,
	399, 557, 400, 401, 402, 403, 527, 405, 406, 558,
	408, 409, 411, 412, 413, 414, 415, 416, 573, 0,
	418, 528, 419, 420, 421, 422, 423, 0, 425, 426,
	427, 428, 429, 430, 433, 434, 435, 437, 438, 530,
	439, 440, 0, 442, 443, 0, 445, 446, 447, 448,
	449, 0, 574, 450, 532, 451, 533, 452, 453, 454,
	455, 456, 457, 458, 460, 0, 0, 462, 463, 464,
	466, 467, 468, 469, 472, 473, 474, 475, 476, 0,
	477, 479, 481, 559, 536, 537, 538, 539, 540, 542,
	543, 544, 545, 482, 483, 499, 350, 344, 300, 342,
	343, 347, 348, 351, 163, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 193, 0, 0, 242, 279, 494,
	0, 0, 339, 0, 392, 396, 0, 485, 0, 0,
	3182, 0, 250, 0, 0, 0, 0, 0, 0, 0,
	461, 0, 0, 0, 0, 181, 575, 484, 555, 0,
	0, 0, 346, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 383, 317, 0, 534, 410, 188,
	234, 221, 263, 305, 417, 0, 0, 295, 465, 230,
	319, 0, 209, 352, 0, 441, 316, 0, 424, 444,
	0, 336, 215, 375, 431, 432, 0, 0, 0, 0,
	0, 219, 220, 341, 201, 349, 546, 512, 404, 362,
	360, 0, 327, 384, 541, 0, 0, 249, 0, 244,
	340, 480, 207, 459, 378, 345, 299, 407, 436, 246,
	231, 232, 275, 377, 265, 217, 470, 509, 513, 511,
	507, 504, 508, 505, 506, 510, 266, 503, 0, 478,
	487, 521, 501, 529, 486, 526, 496, 241, 525, 490,
	489, 535, 516, 517, 471, 531, 502, 500, 493, 492,
	488, 0, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 177, 0, 178, 179, 180, 182, 183, 184,
	0, 185, 186, 187, 190, 191, 192, 194, 554, 195,
	196, 197, 198, 199, 200, 491, 0, 202, 203, 204,
	205, 206, 208, 210, 211, 212, 213, 214, 216, 218,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 224,
	225, 226, 227, 0, 228, 229, 233, 235, 236, 237,
	238, 239, 240, 243, 0, 245, 247, 0, 248, 251,
	0, 252, 253, 254, 255, 256, 257, 258, 259, 495,
	260, 0, 261, 262, 264, 0, 267, 268, 269, 270,
	271, 0, 272, 497, 498, 273, 274, 276, 277, 278,
	280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 0, 292, 293, 294, 296, 0, 297, 298,
	301, 302, 303, 304, 0, 306, 514, 0, 307, 308,
	309, 0, 0, 310, 311, 312, 313, 314, 315, 318,
	515, 320, 321, 322, 323, 324, 325, 326, 556, 328,
	329, 330, 331, 332, 333, 334, 518, 519, 335, 337,
	338, 520, 522, 523, 0, 353, 354, 355, 356, 357,
	358, 359, 361, 0, 363, 364, 365, 524, 366, 367,
	368, 369, 0, 370, 371, 372, 373, 374, 376, 379,
	380, 381, 382, 0, 385, 386, 387, 388, 389, 390,
	391, 393, 394, 395, 397, 398, 399, 557, 400, 401,
	402, 403, 527, 405, 406, 558, 408, 409, 411, 412,
	413, 414, 415, 416, 573, 0, 418, 528, 419, 420,
	421, 422, 423, 0, 425, 426, 427, 428, 429, 430,
	433, 434, 435, 437, 438, 530, 439, 440, 0, 442,
	443, 0, 445, 446, 447, 448, 449, 0, 574, 450,
	532, 451, 533, 452, 453, 454, 455, 456, 457, 458,
	460, 0, 0, 462, 463, 464, 466, 467, 468, 469,
	472, 473, 474, 475, 476, 0, 477, 479, 481, 559,
	536, 537, 538, 539, 540, 542, 543, 544, 545, 482,
	483, 499, 350, 344, 300, 342, 343, 347, 348, 351,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 2493,
	193, 0, 0, 242, 279, 494, 0, 0, 339, 0,
	392, 396, 0, 485, 0, 0, 0, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 461, 0, 0, 0,
	0, 181, 575, 484, 555, 0, 0, 0, 346, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	383, 317, 0, 534, 410, 188, 234, 221, 263, 305,
	417, 0, 0, 295, 465, 230, 319, 0, 209, 352,
	0, 441, 316, 0, 424, 444, 0, 336, 215, 375,
	431, 432, 0, 0, 0, 0, 0, 219, 220, 341,
	201, 349, 546, 512, 404, 362, 360, 0, 327, 384,
	541, 0, 0, 249, 0, 244, 340, 480, 207, 459,
	378, 345, 299, 407, 436, 246, 231, 232, 275, 377,
	265, 217, 470, 509, 513, 511, 507, 504, 508, 505,
	506, 510, 266, 503, 0, 478, 487, 521, 501, 529,
	486, 526, 496, 241, 525, 490, 489, 535, 516, 517,
	471, 531, 502, 500, 493, 492, 488, 0, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 177, 0,
	178, 179, 180, 182, 183, 184, 0, 185, 186, 187,
	190, 191, 192, 194, 554, 195, 196, 197, 198, 199,
	200, 491, 0, 202, 203, 204, 205, 206, 208, 210,
	211, 212, 213, 214, 216, 218, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 227, 0,
	228, 229, 233, 235, 236, 237, 238, 239, 240, 243,
	0, 245, 247, 0, 248, 251, 0, 252, 253, 254,
	255, 256, 257, 258, 259, 495, 260, 0, 261, 262,
	264, 0, 267, 268, 269, 270, 271, 0, 272, 497,
	498, 273, 274, 276, 277, 278, 280, 281, 282, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 0, 292,
	293, 294, 296, 0, 297, 298, 301, 302, 303, 304,
	0, 306, 514, 0, 307, 308, 309, 0, 0, 310,
	311, 312, 313, 314, 315, 318, 515, 320, 321, 322,
	323, 324, 325, 326, 556, 328, 329, 330, 331, 332,
	333, 334, 518, 519, 335, 337, 338, 520, 522, 523,
	0, 353, 354, 355, 356, 357, 358, 359, 361, 0,
	363, 364, 365, 524, 366, 367, 368, 369, 0, 370,
	371, 372, 373, 374, 376, 379, 380, 381, 382, 0,
	385, 386, 387, 388, 389, 390, 391, 393, 394, 395,
	397, 398, 399, 557, 400, 401, 402, 403, 527, 405,
	406, 558, 408, 409, 411, 412, 413, 414, 415, 416,
	573, 0, 418, 528, 419, 420, 421, 422, 423, 0,
	425, 426, 427, 428, 429, 430, 433, 434, 435, 437,
	438, 530, 439, 440, 0, 442, 443, 0, 445, 446,
	447, 448, 449, 0, 574, 450, 532, 451, 533, 452,
	453, 454, 455, 456, 457, 458, 460, 0, 0, 462,
	463, 464, 466, 467, 468, 469, 472, 473, 474, 475,
	476, 0, 477, 479, 481, 559, 536, 537, 538, 539,
	540, 542, 543, 544, 545, 482, 483, 499, 350, 344,
	300, 342, 343, 347, 348, 351, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 193, 0, 0, 242,
	279, 494, 0, 0, 339, 0, 392, 396, 0, 485,
	0, 0, 2952, 0, 250, 0, 0, 0, 0, 0,
	0, 0, 461, 0, 0, 0, 0, 181, 575, 484,
	555, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 383, 317, 0, 534,
	410, 188, 234, 221, 263, 305, 417, 0, 0, 295,
	465, 230, 319, 0, 209, 352, 0, 441, 316, 0,
	424, 444, 0, 336, 215, 375, 431, 432, 0, 0,
	0, 0, 0, 219, 220, 341, 201, 349, 546, 512,
	404, 362, 360, 0, 327, 384, 541, 0, 0, 249,
	0, 244, 340, 480, 207, 459, 378, 345, 299, 407,
	436, 246, 231, 232, 275, 377, 265, 217, 470, 509,
	513, 511, 507, 504, 508, 505, 506, 510, 266, 503,
	0, 478, 487, 521, 501, 529, 486, 526, 496, 241,
	525, 490, 489, 535, 516, 517, 471, 531, 502, 500,
	493, 492, 488, 0, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 177, 0, 178, 179, 180, 182,
	183, 184, 0, 185, 186, 187, 190, 191, 192, 194,
	554, 195, 196, 197, 198, 199, 200, 491, 0, 202,
	203, 204, 205, 206, 208, 210, 211, 212, 213, 214,
	216, 218, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 224, 225, 226, 227, 0, 228, 229, 233, 235,
	236, 237, 238, 239, 240, 243, 0, 245, 247, 0,
	248, 251, 0, 252, 253, 254, 255, 256, 257, 258,
	259, 495, 260, 0, 261, 262, 264, 0, 267, 268,
	269, 270, 271, 0, 272, 497, 498, 273, 274, 276,
	277, 278, 280, 281, 282, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 0, 292, 293, 294, 296, 0,
	297, 298, 301, 302, 303, 304, 0, 306, 514, 0,
	307, 308, 309, 0, 0, 310, 311, 312, 313, 314,
	315, 318, 515, 320, 321, 322, 323, 324, 325, 326,
	556, 328, 329, 330, 331, 332, 333, 334, 518, 519,
	335, 337, 338, 520, 522, 523, 0, 353, 354, 355,
	356, 357, 358, 359, 361, 0, 363, 364, 365, 524,
	366, 367, 368, 369, 0, 370, 371, 372, 373, 374,
	376, 379, 380, 381, 382, 0, 385, 386, 387, 388,
	389, 390, 391, 393, 394, 395, 397, 398, 399, 557,
	400, 401, 402, 403, 527, 405, 406, 558, 408, 409,
	411, 412, 413, 414, 415, 416, 573, 0, 418, 528,
	419, 420, 421, 422, 423, 0, 425, 426, 427, 428,
	429, 430, 433, 434, 435, 437, 438, 530, 439, 440,
	0, 442, 443, 0, 445, 446, 447, 448, 449, 0,
	574, 450, 532, 451, 533, 452, 453, 454, 455, 456,
	457, 458, 460, 0, 0, 462, 463, 464, 466, 467,
	468, 469, 472, 473, 474, 475, 476, 0, 477, 479,
	481, 559, 536, 537, 538, 539, 540, 542, 543, 544,
	545, 482, 483, 499, 350, 344, 300, 342, 343, 347,
	348, 351, 163, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 193, 0, 0, 242, 279, 494, 0, 0,
	339, 0, 392, 396, 0, 485, 0, 0, 2688, 0,
	250, 0, 0, 0, 0, 0, 0, 0, 461, 0,
	0, 0, 0, 181, 575, 484, 555, 0, 0, 0,
	346, 0, 0, 0, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 383, 317, 0, 534, 410, 188, 234, 221,
	263, 305, 417, 0, 0, 295, 465, 230, 319, 0,
	209, 352, 0, 441, 316, 0, 424, 444, 0, 336,
	215, 375, 431, 432, 0, 0, 0, 0, 0, 219,
	220, 341, 201, 349, 546, 512, 404, 362, 360, 0,
	327, 384, 541, 0, 0, 249, 0, 244, 340, 480,
	207, 459, 378, 345, 299, 407, 436, 246, 231, 232,
	275, 377, 265, 217, 470, 509, 513, 511, 507, 504,
	508, 505, 506, 510, 266, 503, 0, 478, 487, 521,
	501, 529, 486, 526, 496, 241, 525, 490, 489, 535,
	516, 517, 471, 531, 502, 500, 493, 492, 488, 0,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	177, 0, 178, 179, 180, 182, 183, 184, 0, 185,
	186, 187, 190, 191, 192, 194, 554, 195, 196, 197,
	198, 199, 200, 491, 0, 202, 203, 204, 205, 206,
	208, 210, 211, 212, 213, 214, 216, 218, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	227, 0, 228, 229, 233, 235, 236, 237, 238, 239,
	240, 243, 0, 245, 247, 0, 248, 251, 0, 252,
	253, 254, 255, 256, 257, 258, 259, 495, 260, 0,
	261, 262, 264, 0, 267, 268, 269, 270, 271, 0,
	272, 497, 498, 273, 274, 276, 277, 278, 280, 281,
	282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
	0, 292, 293, 294, 296, 0, 297, 298, 301, 302,
	303, 304, 0, 306, 514, 0, 307, 308, 309, 0,
	0, 310, 311, 312, 313, 314, 315, 318, 515, 320,
	321, 322, 323, 324, 325, 326, 556, 328, 329, 330,
	331, 332, 333, 334, 518, 519, 335, 337, 338, 520,
	522, 523, 0, 353, 354, 355, 356, 357, 358, 359,
	361, 0, 363, 364, 365, 524, 366, 367, 368, 369,
	0, 370, 371, 372, 373, 374, 376, 379, 380, 381,
	382, 0, 385, 386, 387, 388, 389, 390, 391, 393,
	394, 395, 397, 398, 399, 557, 400, 401, 402, 403,
	527, 405, 406, 558, 408, 409, 411, 412, 413, 414,
	415, 416, 573, 0, 418, 528, 419, 420, 421, 422,
	423, 0, 425, 426, 427, 428, 429, 430, 433, 434,
	435, 437, 438, 530, 439, 440, 0, 442, 443, 0,
	445, 446, 447, 448, 449, 0, 574, 450, 532, 451,
	533, 452, 453, 454, 455, 456, 457, 458, 460, 0,
	0, 462, 463, 464, 466, 467, 468, 469, 472, 473,
	474, 475, 476, 0, 477, 479, 481, 559, 536, 537,
	538, 539, 540, 542, 543, 544, 545, 482, 483, 499,
	350, 344, 300, 342, 343, 347, 348, 351, 163, 0,
	0, 0, 0, 0, 0, 0, 845, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 193, 0,
	0, 242, 279, 494, 0, 0, 339, 0, 392, 396,
	0, 485, 0, 0, 0, 0, 250, 0, 0, 0,
	0, 0, 0, 0, 461, 0, 0, 0, 0, 181,
	575, 484, 555, 0, 0, 0, 346, 0, 0, 0,
	0, 0, 0, 0, 189, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 383, 317,
	0, 534, 410, 188, 234, 221, 263, 305, 417, 0,
	0, 295, 465, 230, 319, 0, 209, 352, 0, 441,
	316, 0, 424, 444, 0, 336, 215, 375, 431, 432,
	0, 0, 0, 0, 0, 219, 220, 341, 201, 349,
	546, 512, 404, 362, 360, 0, 327, 384, 541, 0,
	0, 249, 0, 244, 340, 480, 207, 459, 378, 345,
	299, 407, 436, 246, 231, 232, 275, 377, 265, 217,
	470, 509, 513, 511, 507, 504, 508, 505, 506, 510,
	266, 503, 0, 478, 487, 521, 501, 529, 486, 526,
	496, 241, 525, 490, 489, 535, 516, 517, 471, 531,
	502, 500, 493, 492, 488, 0, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 177, 0, 178, 179,
	180, 182, 183, 184, 0, 185, 186, 187, 190, 191,
	192, 194, 554, 195, 196, 197, 198, 199, 200, 491,
	0, 202, 203, 204, 205, 206, 208, 210, 211, 212,
	213, 214, 216, 218, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 224, 225, 226, 227, 0, 228, 229,
	233, 235, 236, 237, 238, 239, 240, 243, 0, 245,
	247, 0, 248, 251, 0, 252, 253, 254, 255, 256,
	257, 258, 259, 495, 260, 0, 261, 262, 264, 0,
	267, 268, 269, 270, 271, 0, 272, 497, 498, 273,
	274, 276, 277, 278, 280, 281, 282, 283, 284, 285,
	286, 287, 288, 289, 290, 291, 0, 292, 293, 294,
	296, 0, 297, 298, 301, 302, 303, 304, 0, 306,
	514, 0, 307, 308, 309, 0, 0, 310, 311, 312,
	313, 314, 315, 318, 515, 320, 321, 322, 323, 324,
	325, 326, 556, 328, 329, 330, 331, 332, 333, 334,
	518, 519, 335, 337, 338, 520, 522, 523, 0, 353,
	354, 355, 356, 357, 358, 359, 361, 0, 363, 364,
	365, 524, 366, 367, 368, 369, 0, 370, 371, 372,
	373, 374, 376, 379, 380, 381, 382, 0, 385, 386,
	387, 388, 389, 390, 391, 393, 394, 395, 397, 398,
	399, 557, 400, 401, 402, 403, 527, 405, 406, 558,
	408, 409, 411, 412, 413, 414, 415, 416, 573, 0,
	418, 528, 419, 420, 421, 422, 423, 0, 425, 426,
	427, 428, 429, 430, 433, 434, 435, 437, 438, 530,
	439, 440, 0, 442, 443, 0, 445, 446, 447, 448,
	449, 0, 574, 450, 532, 451, 533, 452, 453, 454,
	455, 456, 457, 458, 460, 0, 0, 462, 463, 464,
	466, 467, 468, 469, 472, 473, 474, 475, 476, 0,
	477, 479, 481, 559, 536, 537, 538, 539, 540, 542,
	543, 544, 545, 482, 483, 499, 350, 344, 300, 342,
	343, 347, 348, 351, 163, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 193, 0, 0, 242, 977, 494,
	0, 0, 339, 0, 392, 396, 0, 485, 0, 0,
	0, 0, 250, 0, 0, 0, 0, 0, 0, 0,
	461, 0, 0, 0, 0, 181, 575, 484, 555, 0,
	0, 0, 346, 0, 0, 0, 572, 0, 0, 0,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 383, 317, 0, 534, 410, 188,
	234, 221, 263, 305, 417, 0, 0, 295, 465, 230,
	319, 0, 209, 352, 0, 441, 316, 0, 424, 444,
	0, 336, 215, 375, 431, 432, 0, 0, 0, 0,
	0, 219, 220, 341, 201, 349, 546, 512, 404, 362,
	360, 0, 327, 384, 541, 0, 0, 249, 0, 244,
	340, 480, 207, 459, 378, 345, 299, 407, 436, 246,
	231, 232, 275, 377, 265, 217, 470, 509, 513, 511,
	507, 504, 508, 505, 506, 510, 266, 503, 0, 478,
	487, 521, 501, 529, 486, 526, 496, 241, 525, 490,
	489, 535, 516, 517, 471, 531, 502, 500, 493, 492,
	488, 0, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 177, 0, 178, 179, 180, 182, 183, 184,
	0, 185, 186, 187, 190, 191, 192, 194, 554, 195,
	196, 197, 198, 199, 200, 491, 0, 202, 203, 204,
	205, 206, 208, 210, 211, 212, 213, 214, 216, 218,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 224,
	225, 226, 227, 0, 228, 229, 233, 235, 236, 237,
	238, 239, 240, 243, 0, 245, 247, 0, 248, 251,
	0, 252, 253, 254, 255, 256, 257, 258, 259, 495,
	260, 0, 261, 262, 264, 0, 267, 268, 269, 270,
	271, 0, 272, 497, 498, 273, 274, 276, 277, 278,
	280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 0, 292, 293, 294, 296, 0, 297, 298,
	301, 302, 303, 304, 0, 306, 514, 0, 307, 308,
	309, 0, 0, 310, 311, 312, 313, 314, 315, 318,
	515, 320, 321, 322, 323, 324, 325, 326, 556, 328,
	329, 330, 331, 332, 333, 334, 518, 519, 335, 337,
	338, 520, 522, 523, 0, 353, 354, 355, 356, 357,
	358, 359, 361, 0, 363, 364, 365, 524, 366, 367,
	368, 369, 0, 370, 371, 372, 373, 374, 376, 379,
	380, 381, 382, 0, 385, 386, 387, 388, 389, 390,
	391, 393, 394, 395, 397, 398, 399, 557, 400, 401,
	402, 403, 527, 405, 406, 558, 408, 409, 411, 412,
	413, 414, 415, 416, 573, 0, 418, 528, 419, 420,
	421, 422, 423, 0, 425, 426, 427, 428, 429, 430,
	433, 434, 435, 437, 438, 530, 439, 440, 0, 442,
	443, 0, 445, 446, 447, 448, 449, 0, 574, 450,
	532, 451, 533, 452, 453, 454, 455, 456, 457, 458,
	460, 0, 0, 462, 463, 464, 466, 467, 468, 469,
	472, 473, 474, 475, 476, 0, 477, 479, 481, 559,
	536, 537, 538, 539, 540, 542, 543, 544, 545, 482,
	483, 499, 350, 344, 300, 342, 343, 347, 348, 351,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 975, 176, 0,
	193, 0, 0, 242, 974, 494, 0, 0, 339, 0,
	392, 396, 0, 485, 0, 0, 0, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 461, 0, 0, 0,
	0, 181, 575, 484, 555, 0, 0, 0, 346, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	383, 317, 0, 534, 410, 188, 234, 221, 263, 305,
	417, 0, 0, 295, 465, 230, 319, 0, 209, 352,
	0, 441, 316, 0, 424, 444, 0, 336, 215, 375,
	431, 432, 0, 0, 0, 0, 0, 219, 220, 341,
	201, 349, 546, 512, 404, 362, 360, 0, 327, 384,
	541, 0, 0, 249, 0, 244, 340, 480, 207, 459,
	378, 345, 299, 407, 436, 246, 231, 232, 275, 377,
	265, 217, 470, 509, 513, 511, 507, 504, 508, 505,
	506, 510, 266, 503, 0, 478, 487, 521, 501, 529,
	486, 526, 496, 241, 525, 490, 489, 535, 516, 517,
	471, 531, 502, 500, 493, 492, 488, 0, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 177, 0,
	178, 179, 180, 182, 183, 184, 0, 185, 186, 187,
	190, 191, 192, 194, 554, 195, 196, 197, 198, 199,
	200, 491, 0, 202, 203, 204, 205, 206, 208, 210,
	211, 212, 213, 214, 216, 218, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 227, 0,
	228, 229, 233, 235, 236, 237, 238, 239, 240, 243,
	0, 245, 247, 0, 248, 251, 0, 252, 253, 254,
	255, 256, 257, 258, 259, 495, 260, 0, 261, 262,
	264, 0, 267, 268, 269, 270, 271, 0, 272, 497,
	498, 273, 274, 276, 277, 278, 280, 281, 282, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 0, 292,
	293, 294, 296, 0, 297, 298, 301, 302, 303, 304,
	0, 306, 514, 0, 307, 308, 309, 0, 0, 310,
	311, 312, 313, 314, 315, 318, 515, 320, 321, 322,
	323, 324, 325, 326, 556, 328, 329, 330, 331, 332,
	333, 334, 518, 519, 335, 337, 338, 520, 522, 523,
	0, 353, 354, 355, 356, 357, 358, 359, 361, 0,
	363, 364, 365, 524, 366, 367, 368, 369, 0, 370,
	371, 372, 373, 374, 376, 379, 380, 381, 382, 0,
	385, 386, 387, 388, 389, 390, 391, 393, 394, 395,
	397, 398, 399, 557, 400, 401, 402, 403, 527, 405,
	406, 558, 408, 409, 411, 412, 413, 414, 415, 416,
	573, 0, 418, 528, 419, 420, 421, 422, 423, 0,
	425, 426, 427, 428, 429, 430, 433, 434, 435, 437,
	438, 530, 439, 440, 0, 442, 443, 0, 445, 446,
	447, 448, 449, 0, 574, 450, 532, 451, 533, 452,
	453, 454, 455, 456, 457, 458, 460, 0, 0, 462,
	463, 464, 466, 467, 468, 469, 472, 473, 474, 475,
	476, 0, 477, 479, 481, 559, 536, 537, 538, 539,
	540, 542, 543, 544, 545, 482, 483, 499, 350, 344,
	300, 342, 343, 347, 348, 351, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 193, 0, 0, 242,
	279, 494, 0, 0, 339, 0, 392, 396, 0, 485,
	0, 0, 0, 0, 250, 0, 0, 0, 0, 0,
	0, 0, 461, 0, 0, 0, 0, 181, 156, 484,
	555, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 383, 317, 0, 534,
	410, 188, 234, 221, 263, 305, 417, 0, 0, 295,
	465, 230, 319, 0, 209, 352, 0, 441, 316, 0,
	424, 444, 0, 336, 215, 375, 431, 432, 0, 0,
	0, 0, 0, 219, 220, 341, 201, 349, 546, 512,
	404, 362, 360, 0, 327, 384, 541, 0, 0, 249,
	0, 244, 340, 480, 207, 459, 378, 345, 299, 407,
	436, 246, 231, 232, 275, 377, 265, 217, 470, 509,
	513, 511, 507, 504, 508, 505, 506, 510, 266, 503,
	0, 478, 487, 521, 501, 529, 486, 526, 496, 241,
	525, 490, 489, 535, 516, 517, 471, 531, 502, 500,
	493, 492, 488, 0, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 177, 0, 178, 179, 180, 182,
	183, 184, 783, 185, 186, 187, 190, 191, 192, 194,
	157, 195, 782, 197, 198, 199, 200, 491, 0, 202,
	203, 204, 205, 206, 208, 210, 211, 212, 213, 214,
	216, 218, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 224, 225, 226, 227, 0, 228, 229, 233, 235,
	236, 237, 238, 239, 240, 243, 0, 245, 247, 0,
	248, 251, 0, 252, 253, 254, 255, 256, 257, 258,
	259, 495, 260, 0, 261, 262, 264, 0, 267, 268,
	269, 270, 271, 0, 272, 497, 498, 273, 274, 276,
	277, 278, 280, 281, 282, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 0, 292, 293, 294, 296, 0,
	297, 298, 301, 302, 303, 304, 0, 306, 514, 0,
	307, 308, 309, 0, 0, 310, 311, 312, 313, 314,
	315, 318, 515, 320, 321, 322, 323, 324, 325, 326,
	159, 328, 329, 330, 331, 332, 333, 334, 518, 519,
	335, 337, 338, 520, 522, 523, 0, 353, 354, 355,
	356, 357, 358, 359, 361, 0, 363, 364, 365, 524,
	366, 367, 368, 369, 0, 370, 371, 372, 373, 374,
	376, 379, 380, 381, 382, 0, 385, 386, 387, 388,
	389, 390, 391, 393, 394, 395, 397, 398, 399, 160,
	400, 401, 402, 403, 527, 405, 406, 158, 408, 409,
	411, 412, 413, 414, 415, 416, 780, 0, 418, 528,
	419, 420, 421, 422, 423, 0, 425, 426, 427, 428,
	429, 430, 433, 434, 435, 437, 438, 530, 439, 440,
	0, 442, 443, 0, 445, 446, 447, 448, 449, 0,
	152, 450, 532, 451, 533, 452, 453, 454, 455, 456,
	457, 458, 460, 0, 0, 462, 463, 464, 466, 467,
	468, 469, 472, 473, 474, 475, 476, 0, 477, 479,
	481, 161, 536, 537, 538, 539, 540, 542, 543, 544,
	545, 482, 483, 499, 350, 344, 300, 342, 343, 347,
	348, 351, 163, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 647,
	176, 0, 193, 0, 0, 242, 646, 494, 0, 0,
	339, 0, 392, 396, 0, 485, 0, 0, 0, 0,
	250, 0, 0, 0, 0, 0, 0, 0, 461, 0,
	0, 0, 0, 181, 575, 484, 555, 0, 0, 0,
	346, 0, 0, 0, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 383, 317, 0, 534, 410, 188, 234, 221,
	263, 305, 417, 0, 0, 295, 465, 230, 319, 0,
	209, 352, 0, 441, 316, 0, 424, 444, 0, 336,
	215, 375, 431, 432, 0, 0, 0, 0, 0, 219,
	220, 341, 201, 349, 546, 512, 404, 362, 360, 0,
	327, 384, 541, 0, 0, 249, 0, 244, 340, 480,
	207, 459, 378, 345, 299, 407, 436, 246, 231, 232,
	275, 377, 265, 217, 470, 509, 513, 511, 507, 504,
	508, 505, 506, 510, 266, 503, 0, 478, 487, 521,
	501, 529, 486, 526, 496, 241, 525, 490, 489, 535,
	516, 517, 471, 531, 502, 500, 493, 492, 488, 0,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	177, 0, 178, 179, 180, 182, 183, 184, 0, 185,
	186, 187, 190, 191, 192, 194, 554, 195, 196, 197,
	198, 199, 200, 491, 0, 202, 203, 204, 205, 206,
	208, 210, 211, 212, 213, 214, 216, 218, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	227, 0, 228, 229, 233, 235, 236, 237, 238, 239,
	240, 243, 0, 245, 247, 0, 248, 251, 0, 252,
	253, 254, 255, 256, 257, 258, 259, 495, 260, 0,
	261, 262, 264, 0, 267, 268, 269, 270, 271, 0,
	272, 497, 498, 273, 274, 276, 277, 278, 280, 281,
	282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
	0, 292, 293, 294, 296, 0, 297, 298, 301, 302,
	303, 304, 0, 306, 514, 0, 307, 308, 309, 0,
	0, 310, 311, 312, 313, 314, 315, 318, 515, 320,
	321, 322, 323, 324, 325, 326, 556, 328, 329, 330,
	331, 332, 333, 334, 518, 519, 335, 337, 338, 520,
	522, 523, 0, 353, 354, 355, 356, 357, 358, 359,
	361, 0, 363, 364, 365, 524, 366, 367, 368, 369,
	0, 370, 371, 372, 373, 374, 376, 379, 380, 381,
	382, 0, 385, 386, 387, 388, 389, 390, 391, 393,
	394, 395, 397, 398, 399, 557, 400, 401, 402, 403,
	527, 405, 406, 558, 408, 409, 411, 412, 413, 414,
	415, 416, 573, 0, 418, 528, 419, 420, 421, 422,
	423, 0, 425, 426, 427, 428, 429, 430, 433, 434,
	435, 437, 438, 530, 439, 440, 0, 442, 443, 0,
	445, 446, 447, 448, 449, 0, 574, 450, 532, 451,
	533, 452, 453, 454, 455, 456, 457, 458, 460, 0,
	0, 462, 463, 464, 466, 467, 468, 469, 472, 473,
	474, 475, 476, 0, 477, 479, 481, 559, 536, 537,
	538, 539, 540, 542, 543, 544, 545, 482, 483, 499,
	350, 344, 300, 342, 343, 347, 348, 351, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 553, 176, 0, 193, 0,
	0, 242, 279, 494, 0, 0, 339, 0, 392, 396,
	0, 485, 0, 0, 0, 0, 250, 0, 0, 0,
	0, 0, 0, 0, 461, 0, 0, 0, 0, 181,
	549, 484, 555, 0, 0, 0, 346, 0, 0, 0,
	0, 0, 0, 0, 189, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 383, 317,
	0, 534, 410, 188, 234, 221, 263, 305, 417, 0,
	0, 295, 465, 230, 319, 0, 209, 352, 0, 441,
	316, 0, 424, 444, 0, 336, 215, 375, 431, 432,
	0, 0, 0, 0, 0, 219, 220, 341, 201, 349,
	546, 512, 404, 362, 360, 0, 327, 384, 541, 0,
	0, 249, 0, 244, 340, 480, 207, 459, 378, 345,
	299, 407, 436, 246, 231, 232, 275, 377, 265, 217,
	470, 509, 513, 511, 507, 504, 508, 505, 506, 510,
	266, 503, 0, 478, 487, 521, 501, 529, 486, 526,
	496, 241, 525, 490, 489, 535, 516, 517, 471, 531,
	502, 500, 493, 492, 488, 0, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 177, 0, 178, 179,
	180, 182, 183, 184, 0, 185, 186, 187, 190, 191,
	192, 194, 554, 195, 196, 197, 198, 199, 200, 491,
	0, 202, 203, 204, 205, 206, 208, 210, 211, 212,
	213, 214, 216, 218, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 224, 225, 226, 227, 0, 228, 229,
	233, 235, 236, 237, 238, 239, 240, 243, 0, 245,
	247, 0, 248, 251, 0, 252, 253, 254, 255, 256,
	257, 258, 259, 495, 260, 0, 261, 262, 264, 0,
	267, 268, 269, 270, 271, 0, 272, 497, 498, 273,
	274, 276, 277, 278, 280, 281, 282, 283, 284, 285,
	286, 287, 288, 289, 290, 291, 0, 292, 293, 294,
	296, 0, 297, 298, 301, 302, 303, 304, 0, 306,
	514, 0, 307, 308, 309, 0, 0, 310, 311, 312,
	313, 314, 315, 318, 515, 320, 321, 322, 323, 324,
	325, 326, 556, 328, 329, 330, 331, 332, 333, 334,
	518, 519, 335, 337, 338, 520, 522, 523, 0, 353,
	354, 355, 356, 357, 358, 359, 361, 0, 363, 364,
	365, 524, 366, 367, 368, 369, 0, 370, 371, 372,
	373, 374, 376, 379, 380, 381, 382, 0, 385, 386,
	387, 388, 389, 390, 391, 393, 394, 395, 397, 398,
	399, 557, 400, 401, 402, 403, 527, 405, 406, 558,
	408, 409, 411, 412, 413, 414, 415, 416, 551, 0,
	418, 528, 419, 420, 421, 422, 423, 0, 425, 426,
	427, 428, 429, 430, 433, 434, 435, 437, 438, 530,
	439, 440, 0, 442, 443, 0, 445, 446, 447, 448,
	449, 0, 550, 450, 532, 451, 533, 452, 453, 454,
	455, 456, 457, 458, 460, 0, 0, 462, 463, 464,
	466, 467, 468, 469, 472, 473, 474, 475, 476, 0,
	477, 479, 481, 559, 536, 537, 538, 539, 540, 542,
	543, 544, 545, 482, 483, 499, 350, 344, 300, 342,
	343, 347, 348, 351, 163, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 193, 0, 0, 242, 279, 494,
	0, 0, 339, 0, 392, 396, 0, 485, 0, 0,
	0, 0, 250, 0, 0, 0, 0, 0, 0, 0,
	461, 0, 0, 0, 0, 181, 575, 484, 555, 0,
	0, 0, 346, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 383, 317, 0, 534, 410, 188,
	234, 221, 263, 305, 417, 0, 0, 295, 465, 230,
	319, 0, 209, 352, 0, 441, 316, 0, 424, 444,
	0, 336, 215, 375, 431, 432, 0, 0, 0, 0,
	0, 219, 220, 341, 201, 349, 546, 512, 404, 362,
	360, 0, 3797, 384, 541, 0, 0, 249, 0, 244,
	340, 480, 207, 459, 378, 345, 299, 407, 436, 246,
	231, 232, 275, 377, 265, 217, 470, 509, 513, 511,
	507, 504, 508, 505, 506, 510, 266, 503, 0, 478,
	487, 521, 501, 529, 486, 526, 496, 241, 525, 490,
	489, 535, 516, 517, 471, 531, 502, 500, 493, 492,
	488, 0, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 177, 0, 178, 179, 180, 182, 183, 184,
	0, 185, 186, 187, 190, 191, 192, 194, 554, 195,
	196, 197, 198, 199, 200, 491, 0, 202, 203, 204,
	205, 206, 208, 210, 211, 212, 213, 214, 216, 218,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 224,
	225, 226, 227, 0, 228, 229, 233, 235, 236, 237,
	238, 239, 240, 243, 0, 245, 247, 0, 248, 251,
	0, 252, 253, 254, 255, 256, 257, 258, 259, 495,
	260, 0, 261, 262, 264, 0, 267, 268, 269, 270,
	271, 0, 272, 497, 498, 273, 274, 276, 277, 278,
	280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 0, 292, 293, 294, 296, 0, 297, 298,
	301, 302, 303, 304, 0, 306, 514, 0, 307, 308,
	309, 0, 0, 310, 311, 312, 313, 314, 315, 318,
	515, 320, 321, 322, 323, 324, 325, 326, 556, 328,
	329, 330, 331, 332, 333, 334, 518, 519, 335, 337,
	338, 520, 522, 523, 0, 353, 354, 355, 356, 357,
	358, 359, 361, 0, 363, 364, 365, 524, 366, 367,
	368, 369, 0, 370, 371, 372, 373, 374, 376, 379,
	380, 381, 382, 0, 385, 386, 387, 388, 389, 390,
	391, 393, 394, 395, 397, 398, 399, 557, 400, 401,
	402, 403, 527, 405, 406, 558, 408, 409, 411, 412,
	413, 414, 415, 416, 573, 0, 418, 528, 419, 420,
	421, 422, 423, 0, 425, 426, 427, 428, 429, 430,
	433, 434, 435, 437, 438, 530, 439, 440, 0, 442,
	443, 0, 445, 446, 447, 448, 449, 0, 574, 450,
	532, 451, 533, 452, 453, 454, 455, 456, 457, 458,
	460, 0, 0, 462, 463, 464, 466, 467, 468, 469,
	472, 473, 474, 475, 476, 0, 477, 479, 481, 559,
	536, 537, 538, 539, 540, 542, 543, 544, 545, 482,
	483, 499, 350, 344, 300, 342, 343, 347, 348, 351,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	193, 0, 0, 242, 279, 494, 0, 0, 339, 0,
	392, 396, 0, 485, 0, 0, 0, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 461, 0, 0, 0,
	0, 181, 575, 484, 555, 0, 0, 0, 346, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	383, 317, 0, 534, 410, 188, 234, 221, 263, 305,
	417, 0, 0, 295, 465, 230, 319, 0, 209, 352,
	0, 441, 316, 0, 424, 444, 0, 336, 215, 375,
	431, 432, 0, 0, 0, 0, 0, 219, 220, 341,
	201, 349, 546, 512, 404, 362, 360, 0, 327, 384,
	541, 0, 0, 249, 0, 244, 340, 480, 207, 459,
	378, 345, 299, 407, 436, 246, 231, 232, 275, 377,
	265, 217, 470, 509, 513, 511, 507, 504, 508, 505,
	506, 510, 266, 503, 0, 478, 487, 521, 501, 529,
	486, 526, 496, 241, 525, 490, 489, 535, 516, 517,
	471, 531, 502, 500, 493, 492, 488, 0, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 177, 0,
	178, 179, 180, 182, 183, 184, 0, 185, 186, 187,
	190, 191, 192, 194, 554, 195, 196, 197, 198, 199,
	200, 491, 0, 202, 203, 204, 205, 206, 208, 210,
	211, 212, 213, 214, 216, 218, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 227, 0,
	228, 229, 233, 235, 236, 237, 238, 239, 240, 243,
	0, 245, 247, 0, 248, 251, 0, 252, 253, 254,
	255, 256, 257, 258, 259, 495, 260, 0, 261, 262,
	264, 0, 267, 268, 269, 270, 271, 0, 272, 497,
	498, 273, 274, 276, 277, 278, 280, 281, 282, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 0, 292,
	293, 294, 296, 0, 297, 298, 301, 302, 303, 304,
	0, 306, 514, 0, 307, 308, 309, 0, 0, 310,
	311, 312, 313, 314, 315, 318, 515, 320, 321, 322,
	323, 324, 325, 326, 556, 328, 329, 330, 331, 332,
	333, 334, 518, 519, 335, 337, 338, 520, 522, 523,
	0, 353, 354, 355, 356, 357, 358, 359, 361, 0,
	363, 364, 365, 524, 366, 367, 368, 369, 0, 370,
	371, 372, 373, 374, 376, 379, 380, 381, 382, 0,
	385, 386, 387, 388, 389, 390, 391, 393, 394, 395,
	397, 398, 399, 557, 400, 401, 402, 403, 527, 405,
	406, 558, 408, 409, 411, 412, 413, 414, 415, 416,
	573, 0, 418, 528, 419, 420, 421, 422, 423, 0,
	425, 426, 427, 428, 429, 430, 433, 434, 435, 437,
	438, 530, 439, 440, 0, 442, 443, 0, 445, 446,
	447, 448, 449, 0, 574, 450, 532, 451, 533, 452,
	453, 454, 455, 456, 457, 458, 460, 0, 0, 462,
	463, 464, 466, 467, 468, 469, 472, 473, 474, 475,
	476, 0, 477, 479, 481, 559, 536, 537, 538, 539,
	540, 542, 543, 544, 545, 482, 483, 499, 350, 344,
	300, 342, 343, 347, 348, 351, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 193, 0, 0, 242,
	279, 494, 0, 0, 339, 0, 392, 396, 0, 485,
	0, 0, 0, 0, 250, 0, 0, 0, 0, 0,
	0, 0, 461, 0, 0, 0, 0, 181, 156, 484,
	555, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 383, 317, 0, 534,
	410, 188, 234, 221, 263, 305, 417, 0, 0, 295,
	465, 230, 319, 0, 209, 352, 0, 441, 316, 0,
	424, 444, 0, 336, 215, 375, 431, 432, 0, 0,
	0, 0, 0, 219, 220, 341, 201, 349, 546, 512,
	404, 362, 360, 0, 327, 384, 541, 0, 0, 249,
	0, 244, 340, 480, 207, 459, 378, 345, 299, 407,
	436, 246, 231, 232, 275, 377, 265, 217, 470, 509,
	513, 511, 507, 504, 508, 505, 506, 510, 266, 503,
	0, 478, 487, 521, 501, 529, 486, 526, 496, 241,
	525, 490, 489, 535, 516, 517, 471, 531, 502, 500,
	493, 492, 488, 0, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 177, 0, 178, 179, 180, 182,
	183, 184, 0, 185, 186, 187, 190, 191, 192, 194,
	157, 195, 196, 197, 198, 199, 200, 491, 0, 202,
	203, 204, 205, 206, 208, 210, 211, 212, 213, 214,
	216, 218, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 224, 225, 226, 227, 0, 228, 229, 233, 235,
	236, 237, 238, 239, 240, 243, 0, 245, 247, 0,
	248, 251, 0, 252, 253, 254, 255, 256, 257, 258,
	259, 495, 260, 0, 261, 262, 264, 0, 267, 268,
	269, 270, 271, 0, 272, 497, 498, 273, 274, 276,
	277, 278, 280, 281, 282, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 0, 292, 293, 294, 296, 0,
	297, 298, 301, 302, 303, 304, 0, 306, 514, 0,
	307, 308, 309, 0, 0, 310, 311, 312, 313, 314,
	315, 318, 515, 320, 321, 322, 323, 324, 325, 326,
	159, 328, 329, 330, 331, 332, 333, 334, 518, 519,
	335, 337, 338, 520, 522, 523, 0, 353, 354, 355,
	356, 357, 358, 359, 361, 0, 363, 364, 365, 524,
	366, 367, 368, 369, 0, 370, 371, 372, 373, 374,
	376, 379, 380, 381, 382, 0, 385, 386, 387, 388,
	389, 390, 391, 393, 394, 395, 397, 398, 399, 160,
	400, 401, 402, 403, 527, 405, 406, 158, 408, 409,
	411, 412, 413, 414, 415, 416, 2557, 0, 418, 528,
	419, 420, 421, 422, 423, 0, 425, 426, 427, 428,
	429, 430, 433, 434, 435, 437, 438, 530, 439, 440,
	0, 442, 443, 0, 445, 446, 447, 448, 449, 0,
	2558, 450, 532, 451, 533, 452, 453, 454, 455, 456,
	457, 458, 460, 0, 0, 462, 463, 464, 466, 467,
	468, 469, 472, 473, 474, 475, 476, 0, 477, 479,
	481, 161, 536, 537, 538, 539, 540, 542, 543, 544,
	545, 482, 483, 499, 350, 344, 300, 342, 343, 347,
	348, 351, 163, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 193, 0, 0, 242, 2343, 494, 0, 0,
	339, 0, 392, 396, 0, 485, 0, 0, 0, 0,
	250, 0, 0, 0, 0, 0, 0, 0, 461, 0,
	0, 0, 0, 181, 575, 484, 555, 0, 0, 0,
	346, 0, 0, 0, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 383, 317, 0, 534, 410, 188, 234, 221,
	263, 305, 417, 0, 0, 295, 465, 230, 319, 0,
	209, 352, 0, 441, 316, 0, 424, 444, 0, 336,
	215, 375, 431, 432, 0, 0, 0, 0, 0, 219,
	220, 341, 201, 349, 546, 512, 404, 362, 360, 0,
	327, 384, 541, 0, 0, 249, 0, 244, 340, 480,
	207, 459, 378, 345, 299, 407, 436, 246, 231, 232,
	275, 377, 265, 217, 470, 509, 513, 511, 507, 504,
	508, 505, 506, 510, 266, 503, 0, 478, 487, 521,
	501, 529, 486, 526, 496, 241, 525, 490, 489, 535,
	516, 517, 471, 531, 502, 500, 493, 492, 488, 0,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	177, 0, 178, 179, 180, 182, 183, 184, 0, 185,
	186, 187, 190, 191, 192, 194, 554, 195, 196, 197,
	198, 199, 200, 491, 0, 202, 203, 204, 205, 206,
	208, 210, 211, 212, 213, 214, 216, 218, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	227, 0, 228, 229, 233, 235, 236, 237, 238, 239,
	240, 243, 0, 245, 247, 0, 248, 251, 0, 252,
	253, 254, 255, 256, 257, 258, 259, 495, 260, 0,
	261, 262, 264, 0, 267, 268, 269, 270, 271, 0,
	272, 497, 498, 273, 274, 276, 277, 278, 280, 281,
	282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
	0, 292, 293, 294, 296, 0, 297, 298, 301, 302,
	303, 304, 0, 306, 514, 0, 307, 308, 309, 0,
	0, 310, 311, 312, 313, 314, 315, 318, 515, 320,
	321, 322, 323, 324, 325, 326, 556, 328, 329, 330,
	331, 332, 333, 334, 518, 519, 335, 337, 338, 520,
	522, 523, 0, 353, 354, 355, 356, 357, 358, 359,
	361, 0, 363, 364, 365, 524, 366, 367, 368, 369,
	0, 370, 371, 372, 373, 374, 376, 379, 380, 381,
	382, 0, 385, 386, 387, 388, 389, 390, 391, 393,
	394, 395, 397, 398, 399, 557, 400, 401, 402, 403,
	527, 405, 406, 558, 408, 409, 411, 412, 413, 414,
	415, 416, 573, 0, 418, 528, 419, 420, 421, 422,
	423, 0, 425, 426, 427, 428, 429, 430, 433, 434,
	435, 437, 438, 530, 439, 440, 0, 442, 443, 0,
	445, 446, 447, 448, 449, 0, 574, 450, 532, 451,
	533, 452, 453, 454, 455, 456, 457, 458, 460, 0,
	0, 462, 463, 464, 466, 467, 468, 469, 472, 473,
	474, 475, 476, 0, 477, 479, 481, 559, 536, 537,
	538, 539, 540, 542, 543, 544, 545, 482, 483, 499,
	350, 344, 300, 342, 343, 347, 348, 351, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 193, 0,
	0, 242, 2261, 494, 0, 0, 339, 0, 392, 396,
	0, 485, 0, 0, 0, 0, 250, 0, 0, 0,
	0, 0, 0, 0, 461, 0, 0, 0, 0, 181,
	575, 484, 555, 0, 0, 0, 346, 0, 0, 0,
	0, 0, 0, 0, 189, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 383, 317,
	0, 534, 410, 188, 234, 221, 263, 305, 417, 0,
	0, 295, 465, 230, 319, 0, 209, 352, 0, 441,
	316, 0, 424, 444, 0, 336, 215, 375, 431, 432,
	0, 0, 0, 0, 0, 219, 220, 341, 201, 349,
	546, 512, 404, 362, 360, 0, 327, 384, 541, 0,
	0, 249, 0, 244, 340, 480, 207, 459, 378, 345,
	299, 407, 436, 246, 231, 232, 275, 377, 265, 217,
	470, 509, 513, 511, 507, 504, 508, 505, 506, 510,
	266, 503, 0, 478, 487, 521, 501, 529, 486, 526,
	496, 241, 525, 490, 489, 535, 516, 517, 471, 531,
	502, 500, 493, 492, 488, 0, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 177, 0, 178, 179,
	180, 182, 183, 184, 0, 185, 186, 187, 190, 191,
	192, 194, 554, 195, 196, 197, 198, 199, 200, 491,
	0, 202, 203, 204, 205, 206, 208, 210, 211, 212,
	213, 214, 216, 218, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 224, 225, 226, 227, 0, 228, 229,
	233, 235, 236, 237, 238, 239, 240, 243, 0, 245,
	247, 0, 248, 251, 0, 252, 253, 254, 255, 256,
	257, 258, 259, 495, 260, 0, 261, 262, 264, 0,
	267, 268, 269, 270, 271, 0, 272, 497, 498, 273,
	274, 276, 277, 278, 280, 281, 282, 283, 284, 285,
	286, 287, 288, 289, 290, 291, 0, 292, 293, 294,
	296, 0, 297, 298, 301, 302, 303, 304, 0, 306,
	514, 0, 307, 308, 309, 0, 0, 310, 311, 312,
	313, 314, 315, 318, 515, 320, 321, 322, 323, 324,
	325, 326, 556, 328, 329, 330, 331, 332, 333, 334,
	518, 519, 335, 337, 338, 520, 522, 523, 0, 353,
	354, 355, 356, 357, 358, 359, 361, 0, 363, 364,
	365, 524, 366, 367, 368, 369, 0, 370, 371, 372,
	373, 374, 376, 379, 380, 381, 382, 0, 385, 386,
	387, 388, 389, 390, 391, 393, 394, 395, 397, 398,
	399, 557, 400, 401, 402, 403, 527, 405, 406, 558,
	408, 409, 411, 412, 413, 414, 415, 416, 573, 0,
	418, 528, 419, 420, 421, 422, 423, 0, 425, 426,
	427, 428, 429, 430, 433, 434, 435, 437, 438, 530,
	439, 440, 0, 442, 443, 0, 445, 446, 447, 448,
	449, 0, 574, 450, 532, 451, 533, 452, 453, 454,
	455, 456, 457, 458, 460, 0, 0, 462, 463, 464,
	466, 467, 468, 469, 472, 473, 474, 475, 476, 0,
	477, 479, 481, 559, 536, 537, 538, 539, 540, 542,
	543, 544, 545, 482, 483, 499, 350, 344, 300, 342,
	343, 347, 348, 351, 163, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 193, 0, 0, 242, 2259, 494,
	0, 0, 339, 0, 392, 396, 0, 485, 0, 0,
	0, 0, 250, 0, 0, 0, 0, 0, 0, 0,
	461, 0, 0, 0, 0, 181, 575, 484, 555, 0,
	0, 0, 346, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 383, 317, 0, 534, 410, 188,
	234, 221, 263, 305, 417, 0, 0, 295, 465, 230,
	319, 0, 209, 352, 0, 441, 316, 0, 424, 444,
	0, 336, 215, 375, 431, 432, 0, 0, 0, 0,
	0, 219, 220, 341, 201, 349, 546, 512, 404, 362,
	360, 0, 327, 384, 541, 0, 0, 249, 0, 244,
	340, 480, 207, 459, 378, 345, 299, 407, 436, 246,
	231, 232, 275, 377, 265, 217, 470, 509, 513, 511,
	507, 504, 508, 505, 506, 510, 266, 503, 0, 478,
	487, 521, 501, 529, 486, 526, 496, 241, 525, 490,
	489, 535, 516, 517, 471, 531, 502, 500, 493, 492,
	488, 0, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 177, 0, 178, 179, 180, 182, 183, 184,
	0, 185, 186, 187, 190, 191, 192, 194, 554, 195,
	196, 197, 198, 199, 200, 491, 0, 202, 203, 204,
	205, 206, 208, 210, 211, 212, 213, 214, 216, 218,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 224,
	225, 226, 227, 0, 228, 229, 233, 235, 236, 237,
	238, 239, 240, 243, 0, 245, 247, 0, 248, 251,
	0, 252, 253, 254, 255, 256, 257, 258, 259, 495,
	260, 0, 261, 262, 264, 0, 267, 268, 269, 270,
	271, 0, 272, 497, 498, 273, 274, 276, 277, 278,
	280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 0, 292, 293, 294, 296, 0, 297, 298,
	301, 302, 303, 304, 0, 306, 514, 0, 307, 308,
	309, 0, 0, 310, 311, 312, 313, 314, 315, 318,
	515, 320, 321, 322, 323, 324, 325, 326, 556, 328,
	329, 330, 331, 332, 333, 334, 518, 519, 335, 337,
	338, 520, 522, 523, 0, 353, 354, 355, 356, 357,
	358, 359, 361, 0, 363, 364, 365, 524, 366, 367,
	368, 369, 0, 370, 371, 372, 373, 374, 376, 379,
	380, 381, 382, 0, 385, 386, 387, 388, 389, 390,
	391, 393, 394, 395, 397, 398, 399, 557, 400, 401,
	402, 403, 527, 405, 406, 558, 408, 409, 411, 412,
	413, 414, 415, 416, 573, 0, 418, 528, 419, 420,
	421, 422, 423, 0, 425, 426, 427, 428, 429, 430,
	433, 434, 435, 437, 438, 530, 439, 440, 0, 442,
	443, 0, 445, 446, 447, 448, 449, 0, 574, 450,
	532, 451, 533, 452, 453, 454, 455, 456, 457, 458,
	460, 0, 0, 462, 463, 464, 466, 467, 468, 469,
	472, 473, 474, 475, 476, 0, 477, 479, 481, 559,
	536, 537, 538, 539, 540, 542, 543, 544, 545, 482,
	483, 499, 350, 344, 300, 342, 343, 347, 348, 351,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	193, 0, 0, 242, 2244, 494, 0, 0, 339, 0,
	392, 396, 0, 485, 0, 0, 0, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 461, 0, 0, 0,
	0, 181, 575, 484, 555, 0, 0, 0, 346, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	383, 317, 0, 534, 410, 188, 234, 221, 263, 305,
	417, 0, 0, 295, 465, 230, 319, 0, 209, 352,
	0, 441, 316, 0, 424, 444, 0, 336, 215, 375,
	431, 432, 0, 0, 0, 0, 0, 219, 220, 341,
	201, 349, 546, 512, 404, 362, 360, 0, 327, 384,
	541, 0, 0, 249, 0, 244, 340, 480, 207, 459,
	378, 345, 299, 407, 436, 246, 231, 232, 275, 377,
	265, 217, 470, 509, 513, 511, 507, 504, 508, 505,
	506, 510, 266, 503, 0, 478, 487, 521, 501, 529,
	486, 526, 496, 241, 525, 490, 489, 535, 516, 517,
	471, 531, 502, 500, 493, 492, 488, 0, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 177, 0,
	178, 179, 180, 182, 183, 184, 0, 185, 186, 187,
	190, 191, 192, 194, 554, 195, 196, 197, 198, 199,
	200, 491, 0, 202, 203, 204, 205, 206, 208, 210,
	211, 212, 213, 214, 216, 218, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 227, 0,
	228, 229, 233, 235, 236, 237, 238, 239, 240, 243,
	0, 245, 247, 0, 248, 251, 0, 252, 253, 254,
	255, 256, 257, 258, 259, 495, 260, 0, 261, 262,
	264, 0, 267, 268, 269, 270, 271, 0, 272, 497,
	498, 273, 274, 276, 277, 278, 280, 281, 282, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 0, 292,
	293, 294, 296, 0, 297, 298, 301, 302, 303, 304,
	0, 306, 514, 0, 307, 308, 309, 0, 0, 310,
	311, 312, 313, 314, 315, 318, 515, 320, 321, 322,
	323, 324, 325, 326, 556, 328, 329, 330, 331, 332,
	333, 334, 518, 519, 335, 337, 338, 520, 522, 523,
	0, 353, 354, 355, 356, 357, 358, 359, 361, 0,
	363, 364, 365, 524, 366, 367, 368, 369, 0, 370,
	371, 372, 373, 374, 376, 379, 380, 381, 382, 0,
	385, 386, 387, 388, 389, 390, 391, 393, 394, 395,
	397, 398, 399, 557, 400, 401, 402, 403, 527, 405,
	406, 558, 408, 409, 411, 412, 413, 414, 415, 416,
	573, 0, 418, 528, 419, 420, 421, 422, 423, 0,
	425, 426, 427, 428, 429, 430, 433, 434, 435, 437,
	438, 530, 439, 440, 0, 442, 443, 0, 445, 446,
	447, 448, 449, 0, 574, 450, 532, 451, 533, 452,
	453, 454, 455, 456, 457, 458, 460, 0, 0, 462,
	463, 464, 466, 467, 468, 469, 472, 473, 474, 475,
	476, 0, 477, 479, 481, 559, 536, 537, 538, 539,
	540, 542, 543, 544, 545, 482, 483, 499, 350, 344,
	300, 342, 343, 347, 348, 351, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 193, 0, 0, 242,
	1812, 494, 0, 0, 339, 0, 392, 396, 0, 485,
	0, 0, 0, 0, 250, 0, 0, 0, 0, 0,
	0, 0, 461, 0, 0, 0, 0, 181, 575, 484,
	555, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 383, 317, 0, 534,
	410, 188, 234, 221, 263, 305, 417, 0, 0, 295,
	465, 230, 319, 0, 209, 352, 0, 441, 316, 0,
	424, 444, 0, 336, 215, 375, 431, 432, 0, 0,
	0, 0, 0, 219, 220, 341, 201, 349, 546, 512,
	404, 362, 360, 0, 327, 384, 541, 0, 0, 249,
	0, 244, 340, 480, 207, 459, 378, 345, 299, 407,
	436, 246, 231, 232, 275, 377, 265, 217, 470, 509,
	513, 511, 507, 504, 508, 505, 506, 510, 266, 503,
	0, 478, 487, 521, 501, 529, 486, 526, 496, 241,
	525, 490, 489, 535, 516, 517, 471, 531, 502, 500,
	493, 492, 488, 0, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 177, 0, 178, 179, 180, 182,
	183, 184, 0, 185, 186, 187, 190, 191, 192, 194,
	554, 195, 196, 197, 198, 199, 200, 491, 0, 202,
	203, 204, 205, 206, 208, 210, 211, 212, 213, 214,
	216, 218, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 224, 225, 226, 227, 0, 228, 229, 233, 235,
	236, 237, 238, 239, 240, 243, 0, 245, 247, 0,
	248, 251, 0, 252, 253, 254, 255, 256, 257, 258,
	259, 495, 260, 0, 261, 262, 264, 0, 267, 268,
	269, 270, 271, 0, 272, 497, 498, 273, 274, 276,
	277, 278, 280, 281, 282, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 0, 292, 293, 294, 296, 0,
	297, 298, 301, 302, 303, 304, 0, 306, 514, 0,
	307, 308, 309, 0, 0, 310, 311, 312, 313, 314,
	315, 318, 515, 320, 321, 322, 323, 324, 325, 326,
	556, 328, 329, 330, 331, 332, 333, 334, 518, 519,
	335, 337, 338, 520, 522, 523, 0, 353, 354, 355,
	356, 357, 358, 359, 361, 0, 363, 364, 365, 524,
	366, 367, 368, 369, 0, 370, 371, 372, 373, 374,
	376, 379, 380, 381, 382, 0, 385, 386, 387, 388,
	389, 390, 391, 393, 394, 395, 397, 398, 399, 557,
	400, 401, 402, 403, 527, 405, 406, 558, 408, 409,
	411, 412, 413, 414, 415, 416, 573, 0, 418, 528,
	419, 420, 421, 422, 423, 0, 425, 426, 427, 428,
	429, 430, 433, 434, 435, 437, 438, 530, 439, 440,
	0, 442, 443, 0, 445, 446, 447, 448, 449, 0,
	574, 450, 532, 451, 533, 452, 453, 454, 455, 456,
	457, 458, 460, 0, 0, 462, 463, 464, 466, 467,
	468, 469, 472, 473, 474, 475, 476, 0, 477, 479,
	481, 559, 536, 537, 538, 539, 540, 542, 543, 544,
	545, 482, 483, 499, 350, 344, 300, 342, 343, 347,
	348, 351, 163, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 193, 0, 0, 242, 1758, 494, 0, 0,
	339, 0, 392, 396, 0, 485, 0, 0, 0, 0,
	250, 0, 0, 0, 0, 0, 0, 0, 461, 0,
	0, 0, 0, 181, 575, 484, 555, 0, 0, 0,
	346, 0, 0, 0, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 383, 317, 0, 534, 410, 188, 234, 221,
	263, 305, 417, 0, 0, 295, 465, 230, 319, 0,
	209, 352, 0, 441, 316, 0, 424, 444, 0, 336,
	215, 375, 431, 432, 0, 0, 0, 0, 0, 219,
	220, 341, 201, 349, 546, 512, 404, 362, 360, 0,
	327, 384, 541, 0, 0, 249, 0, 244, 340, 480,
	207, 459, 378, 345, 299, 407, 436, 246, 231, 232,
	275, 377, 265, 217, 470, 509, 513, 511, 507, 504,
	508, 505, 506, 510, 266, 503, 0, 478, 487, 521,
	501, 529, 486, 526, 496, 241, 525, 490, 489, 535,
	516, 517, 471, 531, 502, 500, 493, 492, 488, 0,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	177, 0, 178, 179, 180, 182, 183, 184, 0, 185,
	186, 187, 190, 191, 192, 194, 554, 195, 196, 197,
	198, 199, 200, 491, 0, 202, 203, 204, 205, 206,
	208, 210, 211, 212, 213, 214, 216, 218, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	227, 0, 228, 229, 233, 235, 236, 237, 238, 239,
	240, 243, 0, 245, 247, 0, 248, 251, 0, 252,
	253, 254, 255, 256, 257, 258, 259, 495, 260, 0,
	261, 262, 264, 0, 267, 268, 269, 270, 271, 0,
	272, 497, 498, 273, 274, 276, 277, 278, 280, 281,
	282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
	0, 292, 293, 294, 296, 0, 297, 298, 301, 302,
	303, 304, 0, 306, 514, 0, 307, 308, 309, 0,
	0, 310, 311, 312, 313, 314, 315, 318, 515, 320,
	321, 322, 323, 324, 325, 326, 556, 328, 329, 330,
	331, 332, 333, 334, 518, 519, 335, 337, 338, 520,
	522, 523, 0, 353, 354, 355, 356, 357, 358, 359,
	361, 0, 363, 364, 365, 524, 366, 367, 368, 369,
	0, 370, 371, 372, 373, 374, 376, 379, 380, 381,
	382, 0, 385, 386, 387, 388, 389, 390, 391, 393,
	394, 395, 397, 398, 399, 557, 400, 401, 402, 403,
	527, 405, 406, 558, 408, 409, 411, 412, 413, 414,
	415, 416, 573, 0, 418, 528, 419, 420, 421, 422,
	423, 0, 425, 426, 427, 428, 429, 430, 433, 434,
	435, 437, 438, 530, 439, 440, 0, 442, 443, 0,
	445, 446, 447, 448, 449, 0, 574, 450, 532, 451,
	533, 452, 453, 454, 455, 456, 457, 458, 460, 0,
	0, 462, 463, 464, 466, 467, 468, 469, 472, 473,
	474, 475, 476, 0, 477, 479, 481, 559, 536, 537,
	538, 539, 540, 542, 543, 544, 545, 482, 483, 499,
	350, 344, 300, 342, 343, 347, 348, 351, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 193, 0,
	0, 242, 1067, 494, 0, 0, 339, 0, 392, 396,
	0, 485, 0, 0, 0, 0, 250, 0, 0, 0,
	0, 0, 0, 0, 461, 0, 0, 0, 0, 181,
	575, 484, 555, 0, 0, 0, 346, 0, 0, 0,
	0, 0, 0, 0, 189, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 383, 317,
	0, 534, 410, 188, 234, 221, 263, 305, 417, 0,
	0, 295, 465, 230, 319, 0, 209, 352, 0, 441,
	316, 0, 424, 444, 0, 336, 215, 375, 431, 432,
	0, 0, 0, 0, 0, 219, 220, 341, 201, 349,
	546, 512, 404, 362, 360, 0, 327, 384, 541, 0,
	0, 249, 0, 244, 340, 480, 207, 459, 378, 345,
	299, 407, 436, 246, 231, 232, 275, 377, 265, 217,
	470, 509, 513, 511, 507, 504, 508, 505, 506, 510,
	266, 503, 0, 478, 487, 521, 501, 529, 486, 526,
	496, 241, 525, 490, 489, 535, 516, 517, 471, 531,
	502, 500, 493, 492, 488, 0, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 177, 0, 178, 179,
	180, 182, 183, 184, 0, 185, 186, 187, 190, 191,
	192, 194, 554, 195, 196, 197, 198, 199, 200, 491,
	0, 202, 203, 204, 205, 206, 208, 210, 211, 212,
	213, 214, 216, 218, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 224, 225, 226, 227, 0, 228, 229,
	233, 235, 236, 237, 238, 239, 240, 243, 0, 245,
	247, 0, 248, 251, 0, 252, 253, 254, 255, 256,
	257, 258, 259, 495, 260, 0, 261, 262, 264, 0,
	267, 268, 269, 270, 271, 0, 272, 497, 498, 273,
	274, 276, 277, 278, 280, 281, 282, 283, 284, 285,
	286, 287, 288, 289, 290, 291, 0, 292, 293, 294,
	296, 0, 297, 298, 301, 302, 303, 304, 0, 306,
	514, 0, 307, 308, 309, 0, 0, 310, 311, 312,
	313, 314, 315, 318, 515, 320, 321, 322, 323, 324,
	325, 326, 556, 328, 329, 330, 331, 332, 333, 334,
	518, 519, 335, 337, 338, 520, 522, 523, 0, 353,
	354, 355, 356, 357, 358, 359, 361, 0, 363, 364,
	365, 524, 366, 367, 368, 369, 0, 370, 371, 372,
	373, 374, 376, 379, 380, 381, 382, 0, 385, 386,
	387, 388, 389, 390, 391, 393, 394, 395, 397, 398,
	399, 557, 400, 401, 402, 403, 527, 405, 406, 558,
	408, 409, 411, 412, 413, 414, 415, 416, 573, 0,
	418, 528, 419, 420, 421, 422, 423, 0, 425, 426,
	427, 428, 429, 430, 433, 434, 435, 437, 438, 530,
	439, 440, 0, 442, 443, 0, 445, 446, 447, 448,
	449, 0, 574, 450, 532, 451, 533, 452, 453, 454,
	455, 456, 457, 458, 460, 0, 0, 462, 463, 464,
	466, 467, 468, 469, 472, 473, 474, 475, 476, 0,
	477, 479, 481, 559, 536, 537, 538, 539, 540, 542,
	543, 544, 545, 482, 483, 499, 350, 344, 300, 342,
	343, 347, 348, 351, 163, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 193, 0, 0, 242, 913, 494,
	0, 0, 339, 0, 392, 396, 0, 485, 0, 0,
	0, 0, 250, 0, 0, 0, 0, 0, 0, 0,
	461, 0, 0, 0, 0, 181, 575, 484, 555, 0,
	0, 0, 346, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 383, 317, 0, 534, 410, 188,
	234, 221, 263, 305, 417, 0, 0, 295, 465, 230,
	319, 0, 209, 352, 0, 441, 316, 0, 424, 444,
	0, 336, 215, 375, 431, 432, 0, 0, 0, 0,
	0, 219, 220, 341, 201, 349, 546, 512, 404, 362,
	360, 0, 327, 384, 541, 0, 0, 249, 0, 244,
	340, 480, 207, 459, 378, 345, 299, 407, 436, 246,
	231, 232, 275, 377, 265, 217, 470, 509, 513, 511,
	507, 504, 508, 505, 506, 510, 266, 503, 0, 478,
	487, 521, 501, 529, 486, 526, 496, 241, 525, 490,
	489, 535, 516, 517, 471, 531, 502, 500, 493, 492,
	488, 0, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 177, 0, 178, 179, 180, 182, 183, 184,
	0, 185, 186, 187, 190, 191, 192, 194, 554, 195,
	196, 197, 198, 199, 200, 491, 0, 202, 203, 204,
	205, 206, 208, 210, 211, 212, 213, 214, 216, 218,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 224,
	225, 226, 227, 0, 228, 229, 233, 235, 236, 237,
	238, 239, 240, 243, 0, 245, 247, 0, 248, 251,
	0, 252, 253, 254, 255, 256, 257, 258, 259, 495,
	260, 0, 261, 262, 264, 0, 267, 268, 269, 270,
	271, 0, 272, 497, 498, 273, 274, 276, 277, 278,
	280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 0, 292, 293, 294, 296, 0, 297, 298,
	301, 302, 303, 304, 0, 306, 514, 0, 307, 308,
	309, 0, 0, 310, 311, 312, 313, 314, 315, 318,
	515, 320, 321, 322, 323, 324, 325, 326, 556, 328,
	329, 330, 331, 332, 333, 334, 518, 519, 335, 337,
	338, 520, 522, 523, 0, 353, 354, 355, 356, 357,
	358, 359, 361, 0, 363, 364, 365, 524, 366, 367,
	368, 369, 0, 370, 371, 372, 373, 374, 376, 379,
	380, 381, 382, 0, 385, 386, 387, 388, 389, 390,
	391, 393, 394, 395, 397, 398, 399, 557, 400, 401,
	402, 403, 527, 405, 406, 558, 408, 409, 411, 412,
	413, 414, 415, 416, 573, 0, 418, 528, 419, 420,
	421, 422, 423, 0, 425, 426, 427, 428, 429, 430,
	433, 434, 435, 437, 438, 530, 439, 440, 0, 442,
	443, 0, 445, 446, 447, 448, 449, 0, 574, 450,
	532, 451, 533, 452, 453, 454, 455, 456, 457, 458,
	460, 0, 0, 462, 463, 464, 466, 467, 468, 469,
	472, 473, 474, 475, 476, 0, 477, 479, 481, 559,
	536, 537, 538, 539, 540, 542, 543, 544, 545, 482,
	483, 499, 350, 344, 300, 342, 343, 347, 348, 351,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	193, 0, 0, 242, 878, 494, 0, 0, 339, 0,
	392, 396, 0, 485, 0, 0, 0, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 461, 0, 0, 0,
	0, 181, 575, 484, 555, 0, 0, 0, 346, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	383, 317, 0, 534, 410, 188, 234, 221, 263, 305,
	417, 0, 0, 295, 465, 230, 319, 0, 209, 352,
	0, 441, 316, 0, 424, 444, 0, 336, 215, 375,
	431, 432, 0, 0, 0, 0, 0, 219, 220, 341,
	201, 349, 546, 512, 404, 362, 360, 0, 327, 384,
	541, 0, 0, 249, 0, 244, 340, 480, 207, 459,
	378, 345, 299, 407, 436, 246, 231, 232, 275, 377,
	265, 217, 470, 509, 513, 511, 507, 504, 508, 505,
	506, 510, 266, 503, 0, 478, 487, 521, 501, 529,
	486, 526, 496, 241, 525, 490, 489, 535, 516, 517,
	471, 531, 502, 500, 493, 492, 488, 0, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 177, 0,
	178, 179, 180, 182, 183, 184, 0, 185, 186, 187,
	190, 191, 192, 194, 554, 195, 196, 197, 198, 199,
	200, 491, 0, 202, 203, 204, 205, 206, 208, 210,
	211, 212, 213, 214, 216, 218, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 227, 0,
	228, 229, 233, 235, 236, 237, 238, 239, 240, 243,
	0, 245, 247, 0, 248, 251, 0, 252, 253, 254,
	255, 256, 257, 258, 259, 495, 260, 0, 261, 262,
	264, 0, 267, 268, 269, 270, 271, 0, 272, 497,
	498, 273, 274, 276, 277, 278, 280, 281, 282, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 0, 292,
	293, 294, 296, 0, 297, 298, 301, 302, 303, 304,
	0, 306, 514, 0, 307, 308, 309, 0, 0, 310,
	311, 312, 313, 314, 315, 318, 515, 320, 321, 322,
	323, 324, 325, 326, 556, 328, 329, 330, 331, 332,
	333, 334, 518, 519, 335, 337, 338, 520, 522, 523,
	0, 353, 354, 355, 356, 357, 358, 359, 361, 0,
	363, 364, 365, 524, 366, 367, 368, 369, 0, 370,
	371, 372, 373, 374, 376, 379, 380, 381, 382, 0,
	385, 386, 387, 388, 389, 390, 391, 393, 394, 395,
	397, 398, 399, 557, 400, 401, 402, 403, 527, 405,
	406, 558, 408, 409, 411, 412, 413, 414, 415, 416,
	573, 0, 418, 528, 419, 420, 421, 422, 423, 0,
	425, 426, 427, 428, 429, 430, 433, 434, 435, 437,
	438, 530, 439, 440, 0, 442, 443, 0, 445, 446,
	447, 448, 449, 0, 574, 450, 532, 451, 533, 452,
	453, 454, 455, 456, 457, 458, 460, 0, 0, 462,
	463, 464, 466, 467, 468, 469, 472, 473, 474, 475,
	476, 0, 477, 479, 481, 559, 536, 537, 538, 539,
	540, 542, 543, 544, 545, 482, 483, 499, 350, 344,
	300, 342, 343, 347, 348, 351, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 193, 0, 0, 242,
	874, 494, 0, 0, 339, 0, 392, 396, 0, 485,
	0, 0, 0, 0, 250, 0, 0, 0, 0, 0,
	0, 0, 461, 0, 0, 0, 0, 181, 575, 484,
	555, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 383, 317, 0, 534,
	410, 188, 234, 221, 263, 305, 417, 0, 0, 295,
	465, 230, 319, 0, 209, 352, 0, 441, 316, 0,
	424, 444, 0, 336, 215, 375, 431, 432, 0, 0,
	0, 0, 0, 219, 220, 341, 201, 349, 546, 512,
	404, 362, 360, 0, 327, 384, 541, 0, 0, 249,
	0, 244, 340, 480, 207, 459, 378, 345, 299, 407,
	436, 246, 231, 232, 275, 377, 265, 217, 470, 509,
	513, 511, 507, 504, 508, 505, 506, 510, 266, 503,
	0, 478, 487, 521, 501, 529, 486, 526, 496, 241,
	525, 490, 489, 535, 516, 517, 471, 531, 502, 500,
	493, 492, 488, 0, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 177, 0, 178, 179, 180, 182,
	183, 184, 0, 185, 186, 187, 190, 191, 192, 194,
	554, 195, 196, 197, 198, 199, 200, 491, 0, 202,
	203, 204, 205, 206, 208, 210, 211, 212, 213, 214,
	216, 218, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 224, 225, 226, 227, 0, 228, 229, 233, 235,
	236, 237, 238, 239, 240, 243, 0, 245, 247, 0,
	248, 251, 0, 252, 253, 254, 255, 256, 257, 258,
	259, 495, 260, 0, 261, 262, 264, 0, 267, 268,
	269, 270, 271, 0, 272, 497, 498, 273, 274, 276,
	277, 278, 280, 281, 282, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 0, 292, 293, 294, 296, 0,
	297, 298, 301, 302, 303, 304, 0, 306, 514, 0,
	307, 308, 309, 0, 0, 310, 311, 312, 313, 314,
	315, 318, 515, 320, 321, 322, 323, 324, 325, 326,
	556, 328, 329, 330, 331, 332, 333, 334, 518, 519,
	335, 337, 338, 520, 522, 523, 0, 353, 354, 355,
	356, 357, 358, 359, 361, 0, 363, 364, 365, 524,
	366, 367, 368, 369, 0, 370, 371, 372, 373, 374,
	376, 379, 380, 381, 382, 0, 385, 386, 387, 388,
	389, 390, 391, 393, 394, 395, 397, 398, 399, 557,
	400, 401, 402, 403, 527, 405, 406, 558, 408, 409,
	411, 412, 413, 414, 415, 416, 573, 0, 418, 528,
	419, 420, 421, 422, 423, 0, 425, 426, 427, 428,
	429, 430, 433, 434, 435, 437, 438, 530, 439, 440,
	0, 442, 443, 0, 445, 446, 447, 448, 449, 0,
	574, 450, 532, 451, 533, 452, 453, 454, 455, 456,
	457, 458, 460, 0, 0, 462, 463, 464, 466, 467,
	468, 469, 472, 473, 474, 475, 476, 0, 477, 479,
	481, 559, 536, 537, 538, 539, 540, 542, 543, 544,
	545, 482, 483, 499, 350, 344, 300, 342, 343, 347,
	348, 351, 163, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 867, 193, 0, 0, 242, 279, 494, 0, 0,
	339, 0, 392, 396, 0, 485, 0, 0, 0, 0,
	250, 0, 0, 0, 0, 0, 0, 0, 461, 0,
	0, 0, 0, 181, 575, 484, 555, 0, 0, 0,
	346, 0, 0, 0, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 383, 317, 0, 534, 410, 188, 234, 221,
	263, 305, 0, 0, 0, 295, 465, 230, 319, 0,
	209, 352, 0, 441, 316, 0, 424, 444, 0, 336,
	215, 375, 431, 432, 0, 0, 0, 0, 0, 219,
	220, 341, 201, 349, 546, 512, 404, 362, 360, 0,
	327, 384, 541, 0, 0, 249, 0, 244, 340, 480,
	207, 459, 378, 345, 299, 407, 436, 246, 231, 232,
	275, 377, 265, 217, 470, 509, 513, 511, 507, 504,
	508, 505, 506, 510, 266, 503, 0, 478, 487, 521,
	501, 529, 486, 526, 496, 241, 525, 490, 489, 535,
	516, 517, 471, 531, 502, 500, 493, 492, 488, 0,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	177, 0, 178, 179, 180, 182, 183, 184, 0, 185,
	186, 187, 190, 191, 192, 194, 554, 195, 196, 197,
	198, 199, 200, 491, 0, 202, 203, 204, 205, 206,
	208, 210, 211, 212, 213, 214, 216, 218, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	227, 0, 228, 229, 233, 235, 236, 237, 238, 239,
	240, 243, 0, 245, 247, 0, 248, 251, 0, 252,
	253, 254, 255, 256, 257, 258, 259, 495, 260, 0,
	261, 262, 264, 0, 267, 268, 269, 270, 271, 0,
	272, 497, 498, 273, 274, 276, 277, 278, 280, 281,
	282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
	0, 292, 293, 294, 296, 0, 297, 298, 301, 302,
	303, 304, 0, 306, 514, 0, 307, 308, 309, 0,
	0, 310, 311, 312, 313, 314, 315, 318, 515, 320,
	321, 322, 323, 324, 325, 326, 556, 328, 329, 330,
	331, 332, 333, 334, 518, 519, 335, 337, 338, 520,
	522, 523, 0, 353, 354, 355, 356, 357, 358, 359,
	361, 0, 363, 364, 365, 524, 366, 367, 368, 369,
	0, 370, 371, 372, 373, 374, 376, 379, 380, 381,
	382, 0, 385, 386, 387, 388, 389, 390, 391, 393,
	394, 395, 397, 398, 399, 557, 400, 401, 402, 403,
	527, 405, 406, 558, 408, 409, 411, 412, 413, 414,
	415, 416, 573, 0, 418, 528, 419, 420, 421, 422,
	423, 0, 425, 426, 427, 428, 429, 430, 433, 434,
	435, 437, 438, 530, 439, 440, 0, 442, 443, 0,
	445, 446, 447, 448, 449, 0, 574, 450, 532, 451,
	533, 452, 453, 454, 455, 456, 457, 458, 460, 0,
	0, 462, 463, 464, 466, 467, 468, 469, 472, 473,
	474, 475, 476, 0, 477, 479, 481, 559, 536, 537,
	538, 539, 540, 542, 543, 544, 545, 482, 483, 499,
	350, 344, 300, 342, 343, 347, 348, 351, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 193, 0,
	0, 242, 279, 494, 0, 0, 339, 0, 392, 396,
	0, 485, 0, 0, 0, 0, 250, 0, 0, 0,
	0, 0, 0, 0, 461, 0, 0, 0, 0, 181,
	156, 484, 555, 0, 0, 0, 346, 0, 0, 0,
	0, 0, 0, 0, 189, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 383, 317,
	0, 534, 410, 188, 234, 221, 263, 305, 417, 0,
	0, 295, 465, 230, 319, 0, 209, 352, 0, 441,
	316, 0, 424, 444, 0, 336, 215, 375, 431, 432,
	0, 0, 0, 0, 0, 219, 220, 341, 201, 349,
	546, 512, 404, 362, 360, 0, 327, 384, 541, 0,
	0, 249, 0, 244, 340, 480, 207, 459, 378, 345,
	299, 407, 436, 246, 231, 232, 275, 377, 265, 217,
	470, 509, 513, 511, 507, 504, 508, 505, 506, 510,
	266, 503, 0, 478, 487, 521, 501, 529, 486, 526,
	496, 241, 525, 490, 489, 535, 516, 517, 471, 531,
	502, 500, 493, 492, 488, 0, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 177, 0, 178, 179,
	180, 182, 183, 184, 0, 185, 186, 187, 190, 191,
	192, 194, 157, 195, 196, 197, 198, 199, 200, 491,
	0, 202, 203, 204, 205, 206, 208, 210, 211, 212,
	213, 214, 216, 218, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 224, 225, 226, 227, 0, 228, 229,
	233, 235, 236, 237, 238, 239, 240, 243, 0, 245,
	247, 0, 248, 251, 0, 252, 253, 254, 255, 256,
	257, 258, 259, 495, 260, 0, 261, 262, 264, 0,
	267, 268, 269, 270, 271, 0, 272, 497, 498, 273,
	274, 276, 277, 278, 280, 281, 282, 283, 284, 285,
	286, 287, 288, 289, 290, 291, 0, 292, 293, 294,
	296, 0, 297, 298, 301, 302, 303, 304, 0, 306,
	514, 0, 307, 308, 309, 0, 0, 310, 311, 312,
	313, 314, 315, 318, 515, 320, 321, 322, 323, 324,
	325, 326, 159, 328, 329, 330, 331, 332, 333, 334,
	518, 519, 335, 337, 338, 520, 522, 523, 0, 353,
	354, 355, 356, 357, 358, 359, 361, 0, 363, 364,
	365, 524, 366, 367, 368, 369, 0, 370, 371, 372,
	373, 374, 376, 379, 380, 381, 382, 0, 385, 386,
	387, 388, 389, 390, 391, 393, 394, 395, 397, 398,
	399, 160, 400, 401, 402, 403, 527, 405, 406, 158,
	408, 409, 411, 412, 413, 414, 415, 416, 780, 0,
	418, 528, 419, 420, 421, 422, 423, 0, 425, 426,
	427, 428, 429, 430, 433, 434, 435, 437, 438, 530,
	439, 440, 0, 442, 443, 0, 445, 446, 447, 448,
	449, 0, 152, 450, 532, 451, 533, 452, 453, 454,
	455, 456, 457, 458, 460, 0, 0, 462, 463, 464,
	466, 467, 468, 469, 472, 473, 474, 475, 476, 0,
	477, 479, 481, 161, 536, 537, 538, 539, 540, 542,
	543, 544, 545, 482, 483, 499, 350, 344, 300, 342,
	343, 347, 348, 351, 163, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 193, 0, 0, 242, 730, 494,
	0, 0, 339, 0, 392, 396, 0, 485, 0, 0,
	0, 0, 250, 0, 0, 0, 0, 0, 0, 0,
	461, 0, 0, 0, 0, 181, 575, 484, 555, 0,
	0, 0, 346, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 383, 317, 0, 534, 410, 188,
	234, 221, 263, 305, 417, 0, 0, 295, 465, 230,
	319, 0, 209, 352, 0, 441, 316, 0, 424, 444,
	0, 336, 215, 375, 431, 432, 0, 0, 0, 0,
	0, 219, 220, 341, 201, 349, 546, 512, 404, 362,
	360, 0, 327, 384, 541, 0, 0, 249, 0, 244,
	340, 480, 207, 459, 378, 345, 299, 407, 436, 246,
	231, 232, 275, 377, 265, 217, 470, 509, 513, 511,
	507, 504, 508, 505, 506, 510, 266, 503, 0, 478,
	487, 521, 501, 529, 486, 526, 496, 241, 525, 490,
	489, 535, 516, 517, 471, 531, 502, 500, 493, 492,
	488, 0, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 177, 0, 178, 179, 180, 182, 183, 184,
	0, 185, 186, 187, 190, 191, 192, 194, 554, 195,
	196, 197, 198, 199, 200, 491, 0, 202, 203, 204,
	205, 206, 208, 210, 211, 212, 213, 214, 216, 218,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 224,
	225, 226, 227, 0, 228, 229, 233, 235, 236, 237,
	238, 239, 240, 243, 0, 245, 247, 0, 248, 251,
	0, 252, 253, 254, 255, 256, 257, 258, 259, 495,
	260, 0, 261, 262, 264, 0, 267, 268, 269, 270,
	271, 0, 272, 497, 498, 273, 274, 276, 277, 278,
	280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 0, 292, 293, 294, 296, 0, 297, 298,
	301, 302, 303, 304, 0, 306, 514, 0, 307, 308,
	309, 0, 0, 310, 311, 312, 313, 314, 315, 318,
	515, 320, 321, 322, 323, 324, 325, 326, 556, 328,
	329, 330, 331, 332, 333, 334, 518, 519, 335, 337,
	338, 520, 522, 523, 0, 353, 354, 355, 356, 357,
	358, 359, 361, 0, 363, 364, 365, 524, 366, 367,
	368, 369, 0, 370, 371, 372, 373, 374, 376, 379,
	380, 381, 382, 0, 385, 386, 387, 388, 389, 390,
	391, 393, 394, 395, 397, 398, 399, 557, 400, 401,
	402, 403, 527, 405, 406, 558, 408, 409, 411, 412,
	413, 414, 415, 416, 573, 0, 418, 528, 419, 420,
	421, 422, 423, 0, 425, 426, 427, 428, 429, 430,
	433, 434, 435, 437, 438, 530, 439, 440, 0, 442,
	443, 0, 445, 446, 447, 448, 449, 0, 574, 450,
	532, 451, 533, 452, 453, 454, 455, 456, 457, 458,
	460, 0, 0, 462, 463, 464, 466, 467, 468, 469,
	472, 473, 474, 475, 476, 0, 477, 479, 481, 559,
	536, 537, 538, 539, 540, 542, 543, 544, 545, 482,
	483, 499, 350, 344, 300, 342, 343, 347, 348, 351,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	193, 0, 0, 242, 726, 494, 0, 0, 339, 0,
	392, 396, 0, 485, 0, 0, 0, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 461, 0, 0, 0,
	0, 181, 575, 484, 555, 0, 0, 0, 346, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	383, 317, 0, 534, 410, 188, 234, 221, 263, 305,
	417, 0, 0, 295, 465, 230, 319, 0, 209, 352,
	0, 441, 316, 0, 424, 444, 0, 336, 215, 375,
	431, 432, 0, 0, 0, 0, 0, 219, 220, 341,
	201, 349, 546, 512, 404, 362, 360, 0, 327, 384,
	541, 0, 0, 249, 0, 244, 340, 480, 207, 459,
	378, 345, 299, 407, 436, 246, 231, 232, 275, 377,
	265, 217, 470, 509, 513, 511, 507, 504, 508, 505,
	506, 510, 266, 503, 0, 478, 487, 521, 501, 529,
	486, 526, 496, 241, 525, 490, 489, 535, 516, 517,
	471, 531, 502, 500, 493, 492, 488, 0, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 177, 0,
	178, 179, 180, 182, 183, 184, 0, 185, 186, 187,
	190, 191, 192, 194, 554, 195, 196, 197, 198, 199,
	200, 491, 0, 202, 203, 204, 205, 206, 208, 210,
	211, 212, 213, 214, 216, 218, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 227, 0,
	228, 229, 233, 235, 236, 237, 238, 239, 240, 243,
	0, 245, 247, 0, 248, 251, 0, 252, 253, 254,
	255, 256, 257, 258, 259, 495, 260, 0, 261, 262,
	264, 0, 267, 268, 269, 270, 271, 0, 272, 497,
	498, 273, 274, 276, 277, 278, 280, 281, 282, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 0, 292,
	293, 294, 296, 0, 297, 298, 301, 302, 303, 304,
	0, 306, 514, 0, 307, 308, 309, 0, 0, 310,
	311, 312, 313, 314, 315, 318, 515, 320, 321, 322,
	323, 324, 325, 326, 556, 328, 329, 330, 331, 332,
	333, 334, 518, 519, 335, 337, 338, 520, 522, 523,
	0, 353, 354, 355, 356, 357, 358, 359, 361, 0,
	363, 364, 365, 524, 366, 367, 368, 369, 0, 370,
	371, 372, 373, 374, 376, 379, 380, 381, 382, 0,
	385, 386, 387, 388, 389, 390, 391, 393, 394, 395,
	397, 398, 399, 557, 400, 401, 402, 403, 527, 405,
	406, 558, 408, 409, 411, 412, 413, 414, 415, 416,
	573, 0, 418, 528, 419, 420, 421, 422, 423, 0,
	425, 426, 427, 428, 429, 430, 433, 434, 435, 437,
	438, 530, 439, 440, 0, 442, 443, 0, 445, 446,
	447, 448, 449, 0, 574, 450, 532, 451, 533, 452,
	453, 454, 455, 456, 457, 458, 460, 0, 0, 462,
	463, 464, 466, 467, 468, 469, 472, 473, 474, 475,
	476, 0, 477, 479, 481, 559, 536, 537, 538, 539,
	540, 542, 543, 544, 545, 482, 483, 499, 350, 344,
	300, 342, 343, 347, 348, 351, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 193, 0, 0, 242,
	723, 494, 0, 0, 339, 0, 392, 396, 0, 485,
	0, 0, 0, 0, 250, 0, 0, 0, 0, 0,
	0, 0, 461, 0, 0, 0, 0, 181, 575, 484,
	555, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 383, 317, 0, 534,
	410, 188, 234, 221, 263, 305, 417, 0, 0, 295,
	465, 230, 319, 0, 209, 352, 0, 441, 316, 0,
	424, 444, 0, 336, 215, 375, 431, 432, 0, 0,
	0, 0, 0, 219, 220, 341, 201, 349, 546, 512,
	404, 362, 360, 0, 327, 384, 541, 0, 0, 249,
	0, 244, 340, 480, 207, 459, 378, 345, 299, 407,
	436, 246, 231, 232, 275, 377, 265, 217, 470, 509,
	513, 511, 507, 504, 508, 505, 506, 510, 266, 503,
	0, 478, 487, 521, 501, 529, 486, 526, 496, 241,
	525, 490, 489, 535, 516, 517, 471, 531, 502, 500,
	493, 492, 488, 0, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 177, 0, 178, 179, 180, 182,
	183, 184, 0, 185, 186, 187, 190, 191, 192, 194,
	554, 195, 196, 197, 198, 199, 200, 491, 0, 202,
	203, 204, 205, 206, 208, 210, 211, 212, 213, 214,
	216, 218, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 224, 225, 226, 227, 0, 228, 229, 233, 235,
	236, 237, 238, 239, 240, 243, 0, 245, 247, 0,
	248, 251, 0, 252, 253, 254, 255, 256, 257, 258,
	259, 495, 260, 0, 261, 262, 264, 0, 267, 268,
	269, 270, 271, 0, 272, 497, 498, 273, 274, 276,
	277, 278, 280, 281, 282, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 0, 292, 293, 294, 296, 0,
	297, 298, 301, 302, 303, 304, 0, 306, 514, 0,
	307, 308, 309, 0, 0, 310, 311, 312, 313, 314,
	315, 318, 515, 320, 321, 322, 323, 324, 325, 326,
	556, 328, 329, 330, 331, 332, 333, 334, 518, 519,
	335, 337, 338, 520, 522, 523, 0, 353, 354, 355,
	356, 357, 358, 359, 361, 0, 363, 364, 365, 524,
	366, 367, 368, 369, 0, 370, 371, 372, 373, 374,
	376, 379, 380, 381, 382, 0, 385, 386, 387, 388,
	389, 390, 391, 393, 394, 395, 397, 398, 399, 557,
	400, 401, 402, 403, 527, 405, 406, 558, 408, 409,
	411, 412, 413, 414, 415, 416, 573, 0, 418, 528,
	419, 420, 421, 422, 423, 0, 425, 426, 427, 428,
	429, 430, 433, 434, 435, 437, 438, 530, 439, 440,
	0, 442, 443, 0, 445, 446, 447, 448, 449, 0,
	574, 450, 532, 451, 533, 452, 453, 454, 455, 456,
	457, 458, 460, 0, 0, 462, 463, 464, 466, 467,
	468, 469, 472, 473, 474, 475, 476, 0, 477, 479,
	481, 559, 536, 537, 538, 539, 540, 542, 543, 544,
	545, 482, 483, 499, 350, 344, 300, 342, 343, 347,
	348, 351, 163, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 193, 0, 0, 242, 705, 494, 0, 0,
	339, 0, 392, 396, 0, 485, 0, 0, 0, 0,
	250, 0, 0, 0, 0, 0, 0, 0, 461, 0,
	0, 0, 0, 181, 575, 484, 555, 0, 0, 0,
	346, 0, 0, 0, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 383, 317, 0, 534, 410, 188, 234, 221,
	263, 305, 417, 0, 0, 295, 465, 230, 319, 0,
	209, 352, 0, 441, 316, 0, 424, 444, 0, 336,
	215, 375, 431, 432, 0, 0, 0, 0, 0, 219,
	220, 341, 201, 349, 546, 512, 404, 362, 360, 0,
	327, 384, 541, 0, 0, 249, 0, 244, 340, 480,
	207, 459, 378, 345, 299, 407, 436, 246, 231, 232,
	275, 377, 265, 217, 470, 509, 513, 511, 507, 504,
	508, 505, 506, 510, 266, 503, 0, 478, 487, 521,
	501, 529, 486, 526, 496, 241, 525, 490, 489, 535,
	516, 517, 471, 531, 502, 500, 493, 492, 488, 0,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	177, 0, 178, 179, 180, 182, 183, 184, 0, 185,
	186, 187, 190, 191, 192, 194, 554, 195, 196, 197,
	198, 199, 200, 491, 0, 202, 203, 204, 205, 206,
	208, 210, 211, 212, 213, 214, 216, 218, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	227, 0, 228, 229, 233, 235, 236, 237, 238, 239,
	240, 243, 0, 245, 247, 0, 248, 251, 0, 252,
	253, 254, 255, 256, 257, 258, 259, 495, 260, 0,
	261, 262, 264, 0, 267, 268, 269, 270, 271, 0,
	272, 497, 498, 273, 274, 276, 277, 278, 280, 281,
	282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
	0, 292, 293, 294, 296, 0, 297, 298, 301, 302,
	303, 304, 0, 306, 514, 0, 307, 308, 309, 0,
	0, 310, 311, 312, 313, 314, 315, 318, 515, 320,
	321, 322, 323, 324, 325, 326, 556, 328, 329, 330,
	331, 332, 333, 334, 518, 519, 335, 337, 338, 520,
	522, 523, 0, 353, 354, 355, 356, 357, 358, 359,
	361, 0, 363, 364, 365, 524, 366, 367, 368, 369,
	0, 370, 371, 372, 373, 374, 376, 379, 380, 381,
	382, 0, 385, 386, 387, 388, 389, 390, 391, 393,
	394, 395, 397, 398, 399, 557, 400, 401, 402, 403,
	527, 405, 406, 558, 408, 409, 411, 412, 413, 414,
	415, 416, 573, 0, 418, 528, 419, 420, 421, 422,
	423, 0, 425, 426, 427, 428, 429, 430, 433, 434,
	435, 437, 438, 530, 439, 440, 0, 442, 443, 0,
	445, 446, 447, 448, 449, 0, 574, 450, 532, 451,
	533, 452, 453, 454, 455, 456, 457, 458, 460, 0,
	0, 462, 463, 464, 466, 467, 468, 469, 472, 473,
	474, 475, 476, 0, 477, 479, 481, 559, 536, 537,
	538, 539, 540, 542, 543, 544, 545, 482, 483, 499,
	350, 344, 300, 342, 343, 347, 348, 351, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 193, 0,
	0, 242, 651, 494, 0, 0, 339, 0, 392, 396,
	0, 485, 0, 0, 0, 0, 250, 0, 0, 0,
	0, 0, 0, 0, 461, 0, 0, 0, 0, 181,
	575, 484, 555, 0, 0, 0, 346, 0, 0, 0,
	0, 0, 0, 0, 189, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 383, 317,
	0, 534, 410, 188, 234, 221, 263, 305, 417, 0,
	0, 295, 465, 230, 319, 0, 209, 352, 0, 441,
	316, 0, 424, 444, 0, 336, 215, 375, 431, 432,
	0, 0, 0, 0, 0, 219, 220, 341, 201, 349,
	546, 512, 404, 362, 360, 0, 327, 384, 541, 0,
	0, 249, 0, 244, 340, 480, 207, 459, 378, 345,
	299, 407, 436, 246, 231, 232, 275, 377, 265, 217,
	470, 509, 513, 511, 507, 504, 508, 505, 506, 510,
	266, 503, 0, 478, 487, 521, 501, 529, 486, 526,
	496, 241, 525, 490, 489, 535, 516, 517, 471, 531,
	502, 500, 493, 492, 488, 0, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 177, 0, 178, 179,
	180, 182, 183, 184, 0, 185, 186, 187, 190, 191,
	192, 194, 554, 195, 196, 197, 198, 199, 200, 491,
	0, 202, 203, 204, 205, 206, 208, 210, 211, 212,
	213, 214, 216, 218, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 224, 225, 226, 227, 0, 228, 229,
	233, 235, 236, 237, 238, 239, 240, 243, 0, 245,
	247, 0, 248, 251, 0, 252, 253, 254, 255, 256,
	257, 258, 259, 495, 260, 0, 261, 262, 264, 0,
	267, 268, 269, 270, 271, 0, 272, 497, 498, 273,
	274, 276, 277, 278, 280, 281, 282, 283, 284, 285,
	286, 287, 288, 289, 290, 291, 0, 292, 293, 294,
	296, 0, 297, 298, 301, 302, 303, 304, 0, 306,
	514, 0, 307, 308, 309, 0, 0, 310, 311, 312,
	313, 314, 315, 318, 515, 320, 321, 322, 323, 324,
	325, 326, 556, 328, 329, 330, 331, 332, 333, 334,
	518, 519, 335, 337, 338, 520, 522, 523, 0, 353,
	354, 355, 356, 357, 358, 359, 361, 0, 363, 364,
	365, 524, 366, 367, 368, 369, 0, 370, 371, 372,
	373, 374, 376, 379, 380, 381, 382, 0, 385, 386,
	387, 388, 389, 390, 391, 393, 394, 395, 397, 398,
	399, 557, 400, 401, 402, 403, 527, 405, 406, 558,
	408, 409, 411, 412, 413, 414, 415, 416, 573, 0,
	418, 528, 419, 420, 421, 422, 423, 0, 425, 426,
	427, 428, 429, 430, 433, 434, 435, 437, 438, 530,
	439, 440, 0, 442, 443, 0, 445, 446, 447, 448,
	449, 0, 574, 450, 532, 451, 533, 452, 453, 454,
	455, 456, 457, 458, 460, 0, 0, 462, 463, 464,
	466, 467, 468, 469, 472, 473, 474, 475, 476, 0,
	477, 479, 481, 559, 536, 537, 538, 539, 540, 542,
	543, 544, 545, 482, 483, 499, 350, 344, 300, 342,
	343, 347, 348, 351, 163, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 193, 0, 0, 242, 649, 494,
	0, 0, 339, 0, 392, 396, 0, 485, 0, 0,
	0, 0, 250, 0, 0, 0, 0, 0, 0, 0,
	461, 0, 0, 0, 0, 181, 575, 484, 555, 0,
	0, 0, 346, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 383, 317, 0, 534, 410, 188,
	234, 221, 263, 305, 417, 0, 0, 295, 465, 230,
	319, 0, 209, 352, 0, 441, 316, 0, 424, 444,
	0, 336, 215, 375, 431, 432, 0, 0, 0, 0,
	0, 219, 220, 341, 201, 349, 546, 512, 404, 362,
	360, 0, 327, 384, 541, 0, 0, 249, 0, 244,
	340, 480, 207, 459, 378, 345, 299, 407, 436, 246,
	231, 232, 275, 377, 265, 217, 470, 509, 513, 511,
	507, 504, 508, 505, 506, 510, 266, 503, 0, 478,
	487, 521, 501, 529, 486, 526, 496, 241, 525, 490,
	489, 535, 516, 517, 471, 531, 502, 500, 493, 492,
	488, 0, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 177, 0, 178, 179, 180, 182, 183, 184,
	0, 185, 186, 187, 190, 191, 192, 194, 554, 195,
	196, 197, 198, 199, 200, 491, 0, 202, 203, 204,
	205, 206, 208, 210, 211, 212, 213, 214, 216, 218,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 224,
	225, 226, 227, 0, 228, 229, 233, 235, 236, 237,
	238, 239, 240, 243, 0, 245, 247, 0, 248, 251,
	0, 252, 253, 254, 255, 256, 257, 258, 259, 495,
	260, 0, 261, 262, 264, 0, 267, 268, 269, 270,
	271, 0, 272, 497, 498, 273, 274, 276, 277, 278,
	280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 0, 292, 293, 294, 296, 0, 297, 298,
	301, 302, 303, 304, 0, 306, 514, 0, 307, 308,
	309, 0, 0, 310, 311, 312, 313, 314, 315, 318,
	515, 320, 321, 322, 323, 324, 325, 326, 556, 328,
	329, 330, 331, 332, 333, 334, 518, 519, 335, 337,
	338, 520, 522, 523, 0, 353, 354, 355, 356, 357,
	358, 359, 361, 0, 363, 364, 365, 524, 366, 367,
	368, 369, 0, 370, 371, 372, 373, 374, 376, 379,
	380, 381, 382, 0, 385, 386, 387, 388, 389, 390,
	391, 393, 394, 395, 397, 398, 399, 557, 400, 401,
	402, 403, 527, 405, 406, 558, 408, 409, 411, 412,
	413, 414, 415, 416, 573, 0, 418, 528, 419, 420,
	421, 422, 423, 0, 425, 426, 427, 428, 429, 430,
	433, 434, 435, 437, 438, 530, 439, 440, 0, 442,
	443, 0, 445, 446, 447, 448, 449, 0, 574, 450,
	532, 451, 533, 452, 453, 454, 455, 456, 457, 458,
	460, 0, 0, 462, 463, 464, 466, 467, 468, 469,
	472, 473, 474, 475, 476, 0, 477, 479, 481, 559,
	536, 537, 538, 539, 540, 542, 543, 544, 545, 482,
	483, 499, 350, 344, 300, 342, 343, 347, 348, 351,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	193, 0, 0, 242, 635, 494, 0, 0, 339, 0,
	392, 396, 0, 485, 0, 0, 0, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 461, 0, 0, 0,
	0, 181, 575, 484, 555, 0, 0, 0, 346, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	383, 317, 0, 534, 410, 188, 234, 221, 263, 305,
	417, 0, 0, 295, 465, 230, 319, 0, 209, 352,
	0, 441, 316, 0, 424, 444, 0, 336, 215, 375,
	431, 432, 0, 0, 0, 0, 0, 219, 220, 341,
	201, 349, 546, 512, 404, 362, 360, 0, 327, 384,
	541, 0, 0, 249, 0, 244, 340, 480, 207, 459,
	378, 345, 299, 407, 436, 246, 231, 232, 275, 377,
	265, 217, 470, 509, 513, 511, 507, 504, 508, 505,
	506, 510, 266, 503, 0, 478, 487, 521, 501, 529,
	486, 526, 496, 241, 525, 490, 489, 535, 516, 517,
	471, 531, 502, 500, 493, 492, 488, 0, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 177, 0,
	178, 179, 180, 182, 183, 184, 0, 185, 186, 187,
	190, 191, 192, 194, 554, 195, 196, 197, 198, 199,
	200, 491, 0, 202, 203, 204, 205, 206, 208, 210,
	211, 212, 213, 214, 216, 218, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 227, 0,
	228, 229, 233, 235, 236, 237, 238, 239, 240, 243,
	0, 245, 247, 0, 248, 251, 0, 252, 253, 254,
	255, 256, 257, 258, 259, 495, 260, 0, 261, 262,
	264, 0, 267, 268, 269, 270, 271, 0, 272, 497,
	498, 273, 274, 276, 277, 278, 280, 281, 282, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 0, 292,
	293, 294, 296, 0, 297, 298, 301, 302, 303, 304,
	0, 306, 514, 0, 307, 308, 309, 0, 0, 310,
	311, 312, 313, 314, 315, 318, 515, 320, 321, 322,
	323, 324, 325, 326, 556, 328, 329, 330, 331, 332,
	333, 334, 518, 519, 335, 337, 338, 520, 522, 523,
	0, 353, 354, 355, 356, 357, 358, 359, 361, 0,
	363, 364, 365, 524, 366, 367, 368, 369, 0, 370,
	371, 372, 373, 374, 376, 379, 380, 381, 382, 0,
	385, 386, 387, 388, 389, 390, 391, 393, 394, 395,
	397, 398, 399, 557, 400, 401, 402, 403, 527, 405,
	406, 558, 408, 409, 411, 412, 413, 414, 415, 416,
	573, 0, 418, 528, 419, 420, 421, 422, 423, 0,
	425, 426, 427, 428, 429, 430, 433, 434, 435, 437,
	438, 530, 439, 440, 0, 442, 443, 0, 445, 446,
	447, 448, 449, 0, 574, 450, 532, 451, 533, 452,
	453, 454, 455, 456, 457, 458, 460, 0, 0, 462,
	463, 464, 466, 467, 468, 469, 472, 473, 474, 475,
	476, 0, 477, 479, 481, 559, 536, 537, 538, 539,
	540, 542, 543, 544, 545, 482, 483, 499, 350, 344,
	300, 342, 343, 347, 348, 351, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 193, 0, 0, 242,
	631, 494, 0, 0, 339, 0, 392, 396, 0, 485,
	0, 0, 0, 0, 250, 0, 0, 0, 0, 0,
	0, 0, 461, 0, 0, 0, 0, 181, 575, 484,
	555, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 383, 317, 0, 534,
	410, 188, 234, 221, 263, 305, 417, 0, 0, 295,
	465, 230, 319, 0, 209, 352, 0, 441, 316, 0,
	424, 444, 0, 336, 215, 375, 431, 432, 0, 0,
	0, 0, 0, 219, 220, 341, 201, 349, 546, 512,
	404, 362, 360, 0, 327, 384, 541, 0, 0, 249,
	0, 244, 340, 480, 207, 459, 378, 345, 299, 407,
	436, 246, 231, 232, 275, 377, 265, 217, 470, 509,
	513, 511, 507, 504, 508, 505, 506, 510, 266, 503,
	0, 478, 487, 521, 501, 529, 486, 526, 496, 241,
	525, 490, 489, 535, 516, 517, 471, 531, 502, 500,
	493, 492, 488, 0, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 177, 0, 178, 179, 180, 182,
	183, 184, 0, 185, 186, 187, 190, 191, 192, 194,
	554, 195, 196, 197, 198, 199, 200, 491, 0, 202,
	203, 204, 205, 206, 208, 210, 211, 212, 213, 214,
	216, 218, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 224, 225, 226, 227, 0, 228, 229, 233, 235,
	236, 237, 238, 239, 240, 243, 0, 245, 247, 0,
	248, 251, 0, 252, 253, 254, 255, 256, 257, 258,
	259, 495, 260, 0, 261, 262, 264, 0, 267, 268,
	269, 270, 271, 0, 272, 497, 498, 273, 274, 276,
	277, 278, 280, 281, 282, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 0, 292, 293, 294, 296, 0,
	297, 298, 301, 302, 303, 304, 0, 306, 514, 0,
	307, 308, 309, 0, 0, 310, 311, 312, 313, 314,
	315, 318, 515, 320, 321, 322, 323, 324, 325, 326,
	556, 328, 329, 330, 331, 332, 333, 334, 518, 519,
	335, 337, 338, 520, 522, 523, 0, 353, 354, 355,
	356, 357, 358, 359, 361, 0, 363, 364, 365, 524,
	366, 367, 368, 369, 0, 370, 371, 372, 373, 374,
	376, 379, 380, 381, 382, 0, 385, 386, 387, 388,
	389, 390, 391, 393, 394, 395, 397, 398, 399, 557,
	400, 401, 402, 403, 527, 405, 406, 558, 408, 409,
	411, 412, 413, 414, 415, 416, 573, 0, 418, 528,
	419, 420, 421, 422, 423, 0, 425, 426, 427, 428,
	429, 430, 433, 434, 435, 437, 438, 530, 439, 440,
	0, 442, 443, 0, 445, 446, 447, 448, 449, 0,
	574, 450, 532, 451, 533, 452, 453, 454, 455, 456,
	457, 458, 460, 0, 0, 462, 463, 464, 466, 467,
	468, 469, 472, 473, 474, 475, 476, 0, 477, 479,
	481, 559, 536, 537, 538, 539, 540, 542, 543, 544,
	545, 482, 483, 499, 350, 344, 300, 342, 343, 347,
	348, 351, 163, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 193, 0, 0, 242, 629, 494, 0, 0,
	339, 0, 392, 396, 0, 485, 0, 0, 0, 0,
	250, 0, 0, 0, 0, 0, 0, 0, 461, 0,
	0, 0, 0, 181, 575, 484, 555, 0, 0, 0,
	346, 0, 0, 0, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 383, 317, 0, 534, 410, 188, 234, 221,
	263, 305, 417, 0, 0, 295, 465, 230, 319, 0,
	209, 352, 0, 441, 316, 0, 424, 444, 0, 336,
	215, 375, 431, 432, 0, 0, 0, 0, 0, 219,
	220, 341, 201, 349, 546, 512, 404, 362, 360, 0,
	327, 384, 541, 0, 0, 249, 0, 244, 340, 480,
	207, 459, 378, 345, 299, 407, 436, 246, 231, 232,
	275, 377, 265, 217, 470, 509, 513, 511, 507, 504,
	508, 505, 506, 510, 266, 503, 0, 478, 487, 521,
	501, 529, 486, 526, 496, 241, 525, 490, 489, 535,
	516, 517, 471, 531, 502, 500, 493, 492, 488, 0,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	177, 0, 178, 179, 180, 182, 183, 184, 0, 185,
	186, 187, 190, 191, 192, 194, 554, 195, 196, 197,
	198, 199, 200, 491, 0, 202, 203, 204, 205, 206,
	208, 210, 211, 212, 213, 214, 216, 218, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 224, 225, 226,
	227, 0, 228, 229, 233, 235, 236, 237, 238, 239,
	240, 243, 0, 245, 247, 0, 248, 251, 0, 252,
	253, 254, 255, 256, 257, 258, 259, 495, 260, 0,
	261, 262, 264, 0, 267, 268, 269, 270, 271, 0,
	272, 497, 498, 273, 274, 276, 277, 278, 280, 281,
	282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
	0, 292, 293, 294, 296, 0, 297, 298, 301, 302,
	303, 304, 0, 306, 514, 0, 307, 308, 309, 0,
	0, 310, 311, 312, 313, 314, 315, 318, 515, 320,
	321, 322, 323, 324, 325, 326, 556, 328, 329, 330,
	331, 332, 333, 334, 518, 519, 335, 337, 338, 520,
	522, 523, 0, 353, 354, 355, 356, 357, 358, 359,
	361, 0, 363, 364, 365, 524, 366, 367, 368, 369,
	0, 370, 371, 372, 373, 374, 376, 379, 380, 381,
	382, 0, 385, 386, 387, 388, 389, 390, 391, 393,
	394, 395, 397, 398, 399, 557, 400, 401, 402, 403,
	527, 405, 406, 558, 408, 409, 411, 412, 413, 414,
	415, 416, 573, 0, 418, 528, 419, 420, 421, 422,
	423, 0, 425, 426, 427, 428, 429, 430, 433, 434,
	435, 437, 438, 530, 439, 440, 0, 442, 443, 0,
	445, 446, 447, 448, 449, 0, 574, 450, 532, 451,
	533, 452, 453, 454, 455, 456, 457, 458, 460, 0,
	0, 462, 463, 464, 466, 467, 468, 469, 472, 473,
	474, 475, 476, 0, 477, 479, 481, 559, 536, 537,
	538, 539, 540, 542, 543, 544, 545, 482, 483, 499,
	350, 344, 300, 342, 343, 347, 348, 351, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 193, 0,
	0, 242, 606, 494, 0, 0, 339, 0, 392, 396,
	0, 485, 0, 0, 0, 0, 250, 0, 0, 0,
	0, 0, 0, 0, 461, 0, 0, 0, 0, 181,
	575, 484, 555, 0, 0, 0, 346, 0, 0, 0,
	0, 0, 0, 0, 189, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 383, 317,
	0, 534, 410, 188, 234, 221, 263, 305, 417, 0,
	0, 295, 465, 230, 319, 0, 209, 352, 0, 441,
	316, 0, 424, 444, 0, 336, 215, 375, 431, 432,
	0, 0, 0, 0, 0, 219, 220, 341, 201, 349,
	546, 512, 404, 362, 360, 0, 327, 384, 541, 0,
	0, 249, 0, 244, 340, 480, 207, 459, 378, 345,
	299, 407, 436, 246, 231, 232, 275, 377, 265, 217,
	470, 509, 513, 511, 507, 504, 508, 505, 506, 510,
	266, 503, 0, 478, 487, 521, 501, 529, 486, 526,
	496, 241, 525, 490, 489, 535, 516, 517, 471, 531,
	502, 500, 493, 492, 488, 0, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 177, 0, 178, 179,
	180, 182, 183, 184, 0, 185, 186, 187, 190, 191,
	192, 194, 554, 195, 196, 197, 198, 199, 200, 491,
	0, 202, 203, 204, 205, 206, 208, 210, 211, 212,
	213, 214, 216, 218, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 224, 225, 226, 227, 0, 228, 229,
	233, 235, 236, 237, 238, 239, 240, 243, 0, 245,
	247, 0, 248, 251, 0, 252, 253, 254, 255, 256,
	257, 258, 259, 495, 260, 0, 261, 262, 264, 0,
	267, 268, 269, 270, 271, 0, 272, 497, 498, 273,
	274, 276, 277, 278, 280, 281, 282, 283, 284, 285,
	286, 287, 288, 289, 290, 291, 0, 292, 293, 294,
	296, 0, 297, 298, 301, 302, 303, 304, 0, 306,
	514, 0, 307, 308, 309, 0, 0, 310, 311, 312,
	313, 314, 315, 318, 515, 320, 321, 322, 323, 324,
	325, 326, 556, 328, 329, 330, 331, 332, 333, 334,
	518, 519, 335, 337, 338, 520, 522, 523, 0, 353,
	354, 355, 356, 357, 358, 359, 361, 0, 363, 364,
	365, 524, 366, 367, 368, 369, 0, 370, 371, 372,
	373, 374, 376, 379, 380, 381, 382, 0, 385, 386,
	387, 388, 389, 390, 391, 393, 394, 395, 397, 398,
	399, 557, 400, 401, 402, 403, 527, 405, 406, 558,
	408, 409, 411, 412, 413, 414, 415, 416, 573, 0,
	418, 528, 419, 420, 421, 422, 423, 0, 425, 426,
	427, 428, 429, 430, 433, 434, 435, 437, 438, 530,
	439, 440, 0, 442, 443, 0, 445, 446, 447, 448,
	449, 0, 574, 450, 532, 451, 533, 452, 453, 454,
	455, 456, 457, 458, 460, 0, 0, 462, 463, 464,
	466, 467, 468, 469, 472, 473, 474, 475, 476, 0,
	477, 479, 481, 559, 536, 537, 538, 539, 540, 542,
	543, 544, 545, 482, 483, 499, 350, 344, 300, 342,
	343, 347, 348, 351, 163, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 193, 0, 0, 242, 279, 494,
	0, 0, 339, 0, 392, 396, 0, 485, 0, 0,
	0, 0, 250, 0, 0, 0, 0, 0, 0, 0,
	461, 0, 0, 0, 0, 181, 575, 484, 555, 0,
	0, 0, 346, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 578, 317, 0, 534, 410, 188,
	234, 221, 263, 305, 417, 0, 0, 295, 465, 230,
	319, 0, 209, 352, 0, 441, 316, 0, 424, 444,
	0, 336, 215, 375, 431, 432, 0, 0, 0, 0,
	0, 219, 220, 341, 201, 349, 546, 512, 404, 362,
	360, 0, 327, 384, 541, 0, 0, 249, 0, 244,
	340, 480, 207, 459, 378, 345, 299, 407, 436, 246,
	231, 232, 275, 377, 265, 217, 470, 509, 513, 511,
	507, 504, 508, 505, 506, 510, 266, 503, 0, 478,
	487, 521, 501, 529, 486, 526, 496, 241, 525, 490,
	489, 535, 516, 517, 471, 531, 502, 500, 493, 492,
	488, 0, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 177, 0, 178, 179, 180, 182, 183, 184,
	0, 185, 186, 187, 190, 191, 192, 194, 554, 195,
	196, 197, 198, 199, 200, 491, 0, 202, 203, 204,
	205, 206, 208, 210, 211, 212, 213, 214, 216, 218,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 224,
	225, 226, 227, 0, 228, 229, 233, 235, 236, 237,
	238, 239, 240, 243, 0, 245, 247, 0, 248, 251,
	0, 252, 253, 254, 255, 256, 257, 258, 259, 495,
	260, 0, 261, 262, 264, 0, 267, 268, 269, 270,
	271, 0, 272, 497, 498, 273, 274, 276, 277, 278,
	280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 0, 292, 293, 294, 296, 0, 297, 298,
	301, 302, 303, 304, 0, 306, 514, 0, 307, 308,
	309, 0, 0, 310, 311, 312, 313, 314, 315, 318,
	515, 320, 321, 322, 323, 324, 325, 326, 556, 328,
	329, 330, 331, 332, 333, 334, 518, 519, 335, 337,
	338, 520, 522, 523, 0, 353, 354, 355, 356, 357,
	358, 359, 361, 0, 363, 364, 365, 524, 366, 367,
	368, 369, 0, 370, 371, 372, 373, 374, 376, 379,
	380, 381, 382, 0, 385, 386, 387, 388, 389, 390,
	391, 393, 394, 395, 397, 398, 399, 557, 400, 401,
	402, 403, 527, 405, 406, 558, 408, 409, 411, 412,
	413, 414, 415, 416, 573, 0, 418, 528, 419, 420,
	421, 422, 423, 0, 425, 426, 427, 428, 429, 430,
	433, 434, 435, 437, 438, 530, 439, 440, 0, 442,
	443, 0, 445, 446, 447, 448, 449, 0, 574, 450,
	532, 451, 533, 452, 453, 454, 455, 456, 457, 458,
	460, 0, 0, 462, 463, 464, 466, 467, 468, 469,
	472, 473, 474, 475, 476, 0, 477, 479, 481, 559,
	536, 537, 538, 539, 540, 542, 543, 544, 545, 482,
	483, 499, 350, 344, 300, 342, 343, 347, 348, 351,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	193, 0, 0, 242, 279, 494, 0, 0, 339, 0,
	392, 396, 0, 485, 0, 0, 0, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 461, 0, 0, 0,
	0, 181, 156, 484, 150, 0, 0, 0, 346, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	383, 317, 0, 534, 410, 188, 234, 221, 263, 305,
	417, 0, 0, 295, 465, 230, 319, 0, 209, 352,
	0, 441, 316, 0, 424, 444, 0, 336, 215, 375,
	431, 432, 0, 0, 0, 0, 0, 219, 220, 341,
	201, 349, 546, 512, 404, 362, 360, 0, 327, 384,
	541, 0, 0, 249, 0, 244, 340, 480, 207, 459,
	378, 345, 299, 407, 436, 246, 231, 232, 275, 377,
	265, 217, 470, 509, 513, 511, 507, 504, 508, 505,
	506, 510, 266, 503, 0, 478, 487, 521, 501, 529,
	486, 526, 496, 241, 525, 490, 489, 535, 516, 517,
	471, 531, 502, 500, 493, 492, 488, 0, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 177, 0,
	178, 179, 180, 182, 183, 184, 0, 185, 186, 187,
	190, 191, 192, 194, 157, 195, 196, 197, 198, 199,
	200, 491, 0, 202, 203, 204, 205, 206, 208, 210,
	211, 212, 213, 214, 216, 218, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 224, 225, 226, 227, 0,
	228, 229, 233, 235, 236, 237, 238, 239, 240, 243,
	0, 245, 247, 0, 248, 251, 0, 252, 253, 254,
	255, 256, 257, 258, 259, 495, 260, 0, 261, 262,
	264, 0, 267, 268, 269, 270, 271, 0, 272, 497,
	498, 273, 274, 276, 277, 278, 280, 281, 282, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 0, 292,
	293, 294, 296, 0, 297, 298, 301, 302, 303, 304,
	0, 306, 514, 0, 307, 308, 309, 0, 0, 310,
	311, 312, 313, 314, 315, 318, 515, 320, 321, 322,
	323, 324, 325, 326, 159, 328, 329, 330, 331, 332,
	333, 334, 518, 519, 335, 337, 338, 520, 522, 523,
	0, 353, 354, 355, 356, 357, 358, 359, 361, 0,
	363, 364, 365, 524, 366, 367, 368, 369, 0, 370,
	371, 372, 373, 374, 376, 379, 380, 381, 382, 0,
	385, 386, 387, 388, 389, 390, 391, 393, 394, 395,
	397, 398, 399, 160, 400, 401, 402, 403, 527, 405,
	406, 158, 408, 409, 411, 412, 413, 414, 415, 416,
	151, 0, 418, 528, 419, 420, 421, 422, 423, 0,
	425, 426, 427, 428, 429, 430, 433, 434, 435, 437,
	438, 530, 439, 440, 0, 442, 443, 0, 445, 446,
	447, 448, 449, 0, 152, 450, 532, 451, 533, 452,
	453, 454, 455, 456, 457, 458, 460, 0, 0, 462,
	463, 464, 466, 467, 468, 469, 472, 473, 474, 475,
	476, 0, 477, 479, 481, 161, 536, 537, 538, 539,
	540, 542, 543, 544, 545, 482, 483, 499, 350, 344,
	300, 342, 343, 347, 348, 351, 758, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 193, 665, 0, 242,
	279, 0, 0, 0, 339, 0, 392, 396, 0, 0,
	0, 0, 0, 0, 250, 0, 670, 2165, 676, 0,
	682, 0, 461, 0, 672, 673, 678, 181, 757, 484,
	555, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 674, 671, 675,
	681, 669, 679, 666, 677, 0, 383, 317, 0, 0,
	410, 188, 234, 221, 263, 305, 417, 0, 0, 295,
	465, 230, 319, 0, 209, 352, 0, 441, 316, 0,
	424, 444, 0, 336, 215, 375, 431, 432, 663, 668,
	0, 684, 0, 219, 220, 341, 201, 349, 0, 0,
	404, 362, 360, 0, 327, 384, 0, 0, 0, 249,
	0, 244, 340, 480, 207, 459, 378, 345, 299, 407,
	436, 246, 231, 232, 275, 377, 265, 217, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 266, 0,
	0, 478, 760, 750, 742, 743, 744, 745, 746, 747,
	0, 762, 763, 764, 765, 766, 471, 756, 0, 741,
	748, 749, 751, 2168, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 177, 0, 178, 179, 180, 182,
	183, 184, 662, 185, 186, 187, 190, 191, 192, 194,
	554, 195, 196, 197, 198, 199, 200, 0, 664, 202,
	203, 204, 205, 206, 208, 210, 211, 212, 213, 214,
	216, 218, 0, 0, 0, 667, 0, 0, 0, 222,
	223, 224, 225, 226, 227, 0, 228, 229, 233, 235,
	236, 237, 238, 239, 240, 243, 0, 245, 247, 0,
	248, 251, 0, 252, 253, 254, 255, 256, 257, 258,
	259, 0, 260, 0, 261, 262, 264, 0, 267, 268,
	269, 270, 271, 0, 272, 0, 0, 273, 274, 276,
	277, 278, 280, 281, 282, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 0, 292, 293, 294, 296, 0,
	297, 298, 301, 302, 303, 304, 0, 306, 0, 0,
	307, 308, 309, 0, 0, 310, 311, 312, 313, 314,
	315, 318, 0, 320, 321, 322, 323, 324, 325, 326,
	556, 328, 329, 330, 331, 332, 333, 334, 0, 0,
	335, 337, 338, 0, 2166, 0, 680, 353, 354, 355,
	356, 357, 358, 359, 361, 0, 363, 364, 365, 0,
	366, 367, 368, 369, 0, 370, 371, 372, 373, 374,
	376, 379, 380, 381, 382, 0, 385, 386, 387, 388,
	389, 390, 391, 393, 394, 395, 397, 398, 399, 557,
	400, 401, 402, 403, 0, 405, 406, 558, 408, 409,
	411, 412, 413, 414, 415, 416, 573, 0, 418, 2171,
	419, 420, 421, 422, 423, 0, 425, 426, 427, 428,
	429, 430, 433, 434, 435, 437, 438, 0, 439, 440,
	0, 442, 443, 683, 445, 446, 447, 448, 449, 0,
	574, 450, 0, 451, 0, 452, 453, 454, 455, 456,
	457, 458, 460, 0, 0, 462, 463, 464, 466, 467,
	468, 469, 472, 473, 474, 475, 476, 0, 477, 479,
	481, 559, 0, 0, 758, 0, 0, 0, 0, 0,
	0, 482, 483, 2167, 350, 344, 300, 342, 343, 347,
	348, 351, 176, 0, 193, 665, 0, 242, 279, 0,
	0, 0, 339, 0, 392, 396, 0, 0, 0, 0,
	0, 0, 250, 0, 670, 0, 676, 2534, 682, 0,
	461, 0, 672, 673, 678, 181, 757, 484, 555, 0,
	0, 0, 346, 0, 0, 0, 0, 2533, 0, 0,
	189, 0, 0, 0, 0, 674, 671, 675, 681, 669,
	679, 666, 677, 0, 383, 317, 0, 0, 410, 188,
	234, 221, 263, 305, 417, 0, 0, 295, 465, 230,
	319, 0, 209, 352, 0, 441, 316, 0, 424, 444,
	0, 336, 215, 375, 431, 432, 663, 668, 0, 684,
	0, 219, 220, 341, 201, 349, 0, 0, 404, 362,
	360, 0, 327, 384, 0, 0, 0, 249, 0, 244,
	340, 480, 207, 459, 378, 345, 299, 407, 436, 246,
	231, 232, 275, 377, 265, 217, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 478,
	760, 750, 742, 743, 744, 745, 746, 747, 0, 762,
	763, 764, 765, 766, 471, 756, 0, 741, 748, 749,
	751, 0, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 177, 0, 178, 179, 180, 182, 183, 184,
	662, 185, 186, 187, 190, 191, 192, 194, 554, 195,
	196, 197, 198, 199, 200, 0, 664, 202, 203, 204,
	205, 206, 208, 210, 211, 212, 213, 214, 216, 218,
	0, 0, 0, 667, 0, 0, 0, 222, 223, 224,
	225, 226, 227, 0, 228, 229, 233, 235, 236, 237,
	238, 239, 240, 243, 0, 245, 247, 0, 248, 251,
	0, 252, 253, 254, 255, 256, 257, 258, 259, 0,
	260, 0, 261, 262, 264, 0, 267, 268, 269, 270,
	271, 0, 272, 0, 0, 273, 274, 276, 277, 278,
	280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 0, 292, 293, 294, 296, 0, 297, 298,
	301, 302, 303, 304, 0, 306, 0, 0, 307, 308,
	309, 0, 0, 310, 311, 312, 313, 314, 315, 318,
	0, 320, 321, 322, 323, 324, 325, 326, 556, 328,
	329, 330, 331, 332, 333, 334, 0, 0, 335, 337,
	338, 0, 0, 0, 680, 353, 354, 355, 356, 357,
	358, 359, 361, 0, 363, 364, 365, 0, 366, 367,
	368, 369, 0, 370, 371, 372, 373, 374, 376, 379,
	380, 381, 382, 0, 385, 386, 387, 388, 389, 390,
	391, 393, 394, 395, 397, 398, 399, 557, 400, 401,
	402, 403, 0, 405, 406, 558, 408, 409, 411, 412,
	413, 414, 415, 416, 573, 0, 418, 2171, 419, 420,
	421, 422, 423, 0, 425, 426, 427, 428, 429, 430,
	433, 434, 435, 437, 438, 0, 439, 440, 0, 442,
	443, 683, 445, 446, 447, 448, 449, 0, 574, 450,
	0, 451, 0, 452, 453, 454, 455, 456, 457, 458,
	460, 0, 0, 462, 463, 464, 466, 467, 468, 469,
	472, 473, 474, 475, 476, 0, 477, 479, 481, 559,
	0, 0, 758, 0, 0, 0, 0, 0, 0, 482,
	483, 0, 350, 344, 300, 342, 343, 347, 348, 351,
	176, 0, 193, 665, 0, 242, 279, 0, 0, 0,
	339, 0, 392, 396, 0, 0, 0, 0, 0, 0,
	250, 0, 670, 0, 676, 0, 682, 0, 461, 0,
	672, 673, 678, 181, 757, 484, 555, 0, 0, 0,
	346, 0, 0, 0, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 674, 671, 675, 681, 669, 679, 666,
	677, 0, 383, 317, 0, 0, 410, 188, 234, 221,
	263, 305, 417, 0, 0, 295, 465, 230, 319, 0,
	209, 352, 0, 441, 316, 0, 424, 444, 0, 336,
	215, 375, 431, 432, 663, 668, 0, 684, 0, 219,
	220, 341, 201, 349, 0, 0, 404, 362, 360, 3825,
	327, 384, 0, 0, 0, 249, 0, 244, 340, 480,
	207, 459, 378, 345, 299, 407, 436, 246, 231, 232,
	275, 377, 265, 217, 470, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 266, 0, 0, 478, 760, 750,
	742, 743, 744, 745, 746, 747, 0, 762, 763, 764,
	765, 766, 471, 756, 0, 741, 748, 749, 751, 0,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	177, 0, 178, 179, 180, 182, 183, 184, 662, 185,
	186, 187, 190, 191, 192, 194, 554, 195, 196, 197,
	198, 199, 200, 0, 664, 202, 203, 204, 205, 206,
	208, 210, 211, 212, 213, 214, 216, 218, 0, 0,
	0, 667, 0, 0, 0, 222, 223, 224, 225, 226,
	227, 0, 228, 229, 233, 235, 236, 237, 238, 239,
	240, 243, 0, 245, 247, 0, 248, 251, 0, 252,
	253, 254, 255, 256, 257, 258, 259, 0, 260, 0,
	261, 262, 264, 0, 267, 268, 269, 270, 271, 0,
	272, 0, 0, 273, 274, 276, 277, 278, 280, 281,
	282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
	0, 292, 293, 294, 296, 0, 297, 298, 301, 302,
	303, 304, 0, 306, 0, 0, 307, 308, 309, 0,
	0, 310, 311, 312, 313, 314, 315, 318, 0, 320,
	321, 322, 323, 324, 325, 326, 556, 328, 329, 330,
	331, 332, 333, 334, 0, 0, 335, 337, 338, 0,
	0, 0, 680, 353, 354, 355, 356, 357, 358, 359,
	361, 0, 363, 364, 365, 0, 366, 367, 368, 369,
	0, 370, 371, 372, 373, 374, 376, 379, 380, 381,
	382, 0, 385, 386, 387, 388, 389, 390, 391, 393,
	394, 395, 397, 398, 399, 557, 400, 401, 402, 403,
	0, 405, 406, 558, 408, 409, 411, 412, 413, 414,
	415, 416, 573, 0, 418, 0, 419, 420, 421, 422,
	423, 0, 425, 426, 427, 428, 429, 430, 433, 434,
	435, 437, 438, 0, 439, 440, 0, 442, 443, 683,
	445, 446, 447, 448, 449, 0, 574, 450, 0, 451,
	0, 452, 453, 454, 455, 456, 457, 458, 460, 0,
	0, 462, 463, 464, 466, 467, 468, 469, 472, 473,
	474, 475, 476, 0, 477, 479, 481, 559, 0, 0,
	758, 0, 0, 0, 0, 0, 0, 482, 483, 0,
	350, 344, 300, 342, 343, 347, 348, 351, 176, 0,
	193, 665, 0, 242, 279, 0, 0, 0, 339, 0,
	392, 396, 0, 0, 0, 0, 0, 0, 250, 0,
	670, 0, 676, 0, 682, 0, 461, 0, 672, 673,
	678, 181, 757, 484, 555, 0, 0, 0, 346, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 674, 671, 675, 681, 669, 679, 666, 677, 0,
	383, 317, 0, 0, 410, 188, 234, 221, 263, 305,
	417, 0, 0, 295, 465, 230, 319, 0, 209, 352,
	0, 441, 316, 0, 424, 444, 0, 336, 215, 375,
	431, 432, 663, 668, 0, 684, 0, 219, 220, 341,
	201, 349, 0, 0, 404, 362, 360, 3564, 327, 384,
	0, 0, 0, 249, 0, 244, 340, 480, 207, 459,
	378, 345, 299, 407, 436, 246, 231, 232, 275, 377,
	265, 217, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 266, 0, 0, 478, 760, 750, 742, 743,
	744, 745, 746, 747, 0, 762, 763, 764, 765, 766,
	471, 756, 0, 741, 748, 749, 751, 0, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 177, 0,
	178, 179, 180, 182, 183, 184, 662, 185, 186, 187,
	190, 191, 192, 194, 554, 195, 196, 197, 198, 199,
	200, 0, 664, 202, 203, 204, 205, 206, 208, 210,
	211, 212, 213, 214, 216, 218, 0, 0, 0, 667,
	0, 0, 0, 222, 223, 224, 225, 226, 227, 0,
	228, 229, 233, 235, 236, 237, 238, 239, 240, 243,
	0, 245, 247, 0, 248, 251, 0, 252, 253, 254,
	255, 256, 257, 258, 259, 0, 260, 0, 261, 262,
	264, 0, 267, 268, 269, 270, 271, 0, 272, 0,
	0, 273, 274, 276, 277, 278, 280, 281, 282, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 0, 292,
	293, 294, 296, 0, 297, 298, 301, 302, 303, 304,
	0, 306, 0, 0, 307, 308, 309, 0, 0, 310,
	311, 312, 313, 314, 315, 318, 0, 320, 321, 322,
	323, 324, 325, 326, 556, 328, 329, 330, 331, 332,
	333, 334, 0, 0, 335, 337, 338, 0, 0, 0,
	680, 353, 354, 355, 356, 357, 358, 359, 361, 0,
	363, 364, 365, 0, 366, 367, 368, 369, 0, 370,
	371, 372, 373, 374, 376, 379, 380, 381, 382, 0,
	385, 386, 387, 388, 389, 390, 391, 393, 394, 395,
	397, 398, 399, 557, 400, 401, 402, 403, 0, 405,
	406, 558, 408, 409, 411, 412, 413, 414, 415, 416,
	573, 0, 418, 0, 419, 420, 421, 422, 423, 0,
	425, 426, 427, 428, 429, 430, 433, 434, 435, 437,
	438, 0, 439, 440, 0, 442, 443, 683, 445, 446,
	447, 448, 449, 0, 574, 450, 0, 451, 0, 452,
	453, 454, 455, 456, 457, 458, 460, 0, 0, 462,
	463, 464, 466, 467, 468, 469, 472, 473, 474, 475,
	476, 0, 477, 479, 481, 559, 0, 0, 758, 0,
	0, 0, 0, 0, 0, 482, 483, 0, 350, 344,
	300, 342, 343, 347, 348, 351, 176, 0, 193, 665,
	0, 242, 279, 0, 0, 0, 339, 0, 392, 396,
	0, 0, 0, 0, 0, 0, 250, 0, 670, 0,
	676, 0, 682, 0, 461, 0, 672, 673, 678, 181,
	757, 484, 555, 0, 0, 0, 346, 0, 0, 0,
	0, 0, 0, 0, 189, 0, 0, 0, 0, 674,
	671, 675, 681, 669, 679, 666, 677, 0, 383, 317,
	0, 0, 410, 188, 234, 221, 263, 305, 417, 0,
	0, 295, 465, 230, 319, 0, 209, 352, 0, 441,
	316, 0, 424, 444, 0, 336, 215, 375, 431, 432,
	663, 668, 0, 684, 0, 219, 220, 341, 201, 349,
	0, 0, 404, 362, 360, 0, 327, 384, 0, 0,
	0, 249, 0, 244, 340, 480, 207, 459, 378, 345,
	299, 407, 436, 246, 231, 232, 275, 377, 265, 217,
	470, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 0, 0, 478, 760, 750, 742, 743, 744, 745,
	746, 747, 0, 762, 763, 764, 765, 766, 471, 756,
	0, 741, 748, 749, 751, 0, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 177, 0, 178, 179,
	180, 182, 183, 184, 662, 185, 186, 187, 190, 191,
	192, 194, 554, 195, 196, 197, 198, 199, 200, 0,
	664, 202, 203, 204, 205, 206, 208, 210, 211, 212,
	213, 214, 216, 218, 0, 0, 0, 667, 0, 0,
	0, 222, 223, 224, 225, 226, 227, 0, 228, 229,
	233, 235, 236, 237, 238, 239, 240, 243, 0, 245,
	247, 0, 248, 251, 0, 252, 253, 254, 255, 256,
	257, 258, 259, 0, 260, 0, 261, 262, 264, 0,
	267, 268, 269, 270, 271, 0, 272, 0, 0, 273,
	274, 276, 277, 278, 280, 281, 282, 283, 284, 285,
	286, 287, 288, 289, 290, 291, 0, 292, 293, 294,
	296, 0, 297, 298, 301, 302, 303, 304, 0, 306,
	0, 0, 307, 308, 309, 0, 0, 310, 311, 312,
	313, 314, 315, 318, 0, 320, 321, 322, 323, 324,
	325, 326, 556, 328, 329, 330, 331, 332, 333, 334,
	3417, 0, 335, 337, 338, 0, 0, 0, 680, 353,
	354, 355, 356, 357, 358, 359, 361, 0, 363, 364,
	365, 0, 366, 367, 368, 369, 0, 370, 371, 372,
	373, 374, 376, 379, 380, 381, 382, 0, 385, 386,
	387, 388, 389, 390, 391, 393, 394, 395, 397, 398,
	399, 557, 400, 401, 402, 403, 0, 405, 406, 558,
	408, 409, 411, 412, 413, 414, 415, 416, 573, 0,
	418, 0, 419, 420, 421, 422, 423, 0, 425, 426,
	427, 428, 429, 430, 433, 434, 435, 437, 438, 0,
	439, 440, 0, 442, 443, 683, 445, 446, 447, 448,
	449, 0, 574, 450, 0, 451, 0, 452, 453, 454,
	455, 456, 457, 458, 460, 0, 0, 462, 463, 464,
	466, 467, 468, 469, 472, 473, 474, 475, 476, 0,
	477, 479, 481, 559, 0, 0, 758, 0, 0, 0,
	0, 0, 0, 482, 483, 0, 350, 344, 300, 342,
	343, 347, 348, 351, 176, 0, 193, 665, 0, 242,
	279, 0, 0, 0, 339, 0, 392, 396, 0, 0,
	0, 0, 0, 0, 250, 0, 670, 0, 676, 0,
	682, 0, 461, 0, 672, 673, 678, 181, 757, 484,
	555, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 674, 671, 675,
	681, 669, 679, 666, 677, 0, 383, 317, 0, 0,
	410, 188, 234, 221, 263, 305, 417, 0, 0, 295,
	465, 230, 319, 0, 209, 352, 0, 441, 316, 0,
	424, 444, 0, 336, 215, 375, 431, 432, 663, 668,
	0, 684, 0, 219, 220, 341, 201, 349, 0, 0,
	404, 362, 360, 0, 327, 384, 0, 0, 0, 249,
	0, 244, 340, 480, 207, 459, 378, 345, 299, 407,
	436, 246, 231, 232, 275, 377, 265, 217, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 266, 0,
	0, 478, 760, 750, 742, 743, 744, 745, 746, 747,
	0, 762, 763, 764, 765, 766, 471, 756, 0, 741,
	748, 749, 751, 0, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 177, 0, 178, 179, 180, 182,
	183, 184, 662, 185, 186, 187, 190, 191, 192, 194,
	554, 195, 196, 197, 198, 199, 200, 0, 664, 202,
	203, 204, 205, 206, 208, 210, 211, 212, 213, 214,
	216, 218, 0, 0, 0, 667, 0, 0, 0, 222,
	223, 224, 225, 226, 227, 0, 228, 229, 233, 235,
	236, 237, 238, 239, 240, 243, 0, 245, 247, 0,
	248, 251, 0, 252, 253, 254, 255, 256, 257, 258,
	259, 0, 260, 0, 261, 262, 264, 0, 267, 268,
	269, 270, 271, 0, 272, 0, 0, 273, 274, 276,
	277, 278, 280, 281, 282, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 0, 292, 293, 294, 296, 0,
	297, 298, 301, 302, 303, 304, 0, 306, 0, 0,
	307, 308, 309, 0, 0, 310, 311, 312, 313, 314,
	315, 318, 0, 320, 321, 322, 323, 324, 325, 326,
	556, 328, 329, 330, 331, 332, 333, 334, 0, 0,
	335, 337, 338, 0, 0, 0, 680, 353, 354, 355,
	356, 357, 358, 359, 361, 0, 363, 364, 365, 0,
	366, 367, 368, 369, 0, 370, 371, 372, 373, 374,
	376, 379, 380, 381, 382, 0, 385, 386, 387, 388,
	389, 390, 391, 393, 394, 395, 397, 398, 399, 557,
	400, 401, 402, 403, 0, 405, 406, 558, 408, 409,
	411, 412, 413, 414, 415, 416, 573, 0, 418, 2171,
	419, 420, 421, 422, 423, 0, 425, 426, 427, 428,
	429, 430, 433, 434, 435, 437, 438, 0, 439, 440,
	0, 442, 443, 683, 445, 446, 447, 448, 449, 0,
	574, 450, 0, 451, 0, 452, 453, 454, 455, 456,
	457, 458, 460, 0, 0, 462, 463, 464, 466, 467,
	468, 469, 472, 473, 474, 475, 476, 0, 477, 479,
	481, 559, 0, 0, 758, 0, 0, 0, 0, 0,
	0, 482, 483, 0, 350, 344, 300, 342, 343, 347,
	348, 351, 176, 0, 193, 665, 0, 242, 279, 0,
	0, 0, 339, 0, 392, 396, 0, 0, 0, 0,
	0, 0, 250, 0, 670, 0, 676, 0, 682, 0,
	461, 0, 672, 673, 678, 181, 757, 484, 555, 0,
	0, 0, 346, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 674, 671, 675, 681, 669,
	679, 666, 677, 0, 383, 317, 0, 0, 410, 188,
	234, 221, 263, 305, 417, 0, 0, 295, 465, 230,
	319, 0, 209, 352, 0, 441, 316, 0, 424, 444,
	0, 336, 215, 375, 431, 432, 663, 668, 0, 684,
	0, 219, 220, 341, 201, 349, 0, 0, 404, 362,
	360, 0, 327, 384, 0, 0, 0, 249, 0, 244,
	340, 480, 207, 459, 378, 345, 299, 407, 436, 246,
	231, 232, 275, 377, 265, 217, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 478,
	760, 750, 742, 743, 744, 745, 746, 747, 0, 762,
	763, 764, 765, 766, 471, 756, 0, 741, 748, 749,
	751, 0, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 175, 177, 0, 178, 179, 180, 182, 183, 184,
	662, 185, 186, 187, 190, 191, 192, 194, 554, 195,
	196, 197, 198, 199, 200, 0, 664, 202, 203, 204,
	205, 206, 208, 210, 211, 212, 213, 214, 216, 218,
	0, 0, 0, 667, 0, 0, 0, 222, 223, 224,
	225, 226, 227, 0, 228, 229, 233, 235, 236, 237,
	238, 239, 240, 243, 0, 245, 247, 0, 248, 251,
	0, 252, 253, 254, 255, 256, 257, 258, 259, 0,
	260, 0, 261, 262, 264, 0, 267, 268, 269, 270,
	271, 0, 272, 0, 0, 273, 274, 276, 277, 278,
	280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 0, 292, 293, 294, 296, 0, 297, 298,
	301, 302, 303, 304, 0, 306, 0, 0, 307, 308,
	309, 0, 0, 310, 311, 312, 313, 314, 315, 318,
	0, 320, 321, 322, 323, 324, 325, 326, 556, 328,
	329, 330, 331, 332, 333, 334, 3042, 0, 335, 337,
	338, 0, 0, 0, 680, 353, 354, 355, 356, 357,
	358, 359, 361, 0, 363, 364, 365, 0, 366, 367,
	368, 369, 0, 370, 371, 372, 373, 374, 376, 379,
	380, 381, 382, 0, 385, 386, 387, 388, 389, 390,
	391, 393, 394, 395, 397, 398, 399, 557, 400, 401,
	402, 403, 0, 405, 406, 558, 408, 409, 411, 412,
	413, 414, 415, 416, 573, 0, 418, 0, 419, 420,
	421, 422, 423, 0, 425, 426, 427, 428, 429, 430,
	433, 434, 435, 437, 438, 0, 439, 440, 0, 442,
	443, 683, 445, 446, 447, 448, 449, 0, 574, 450,
	0, 451, 0, 452, 453, 454, 455, 456, 457, 458,
	460, 0, 0, 462, 463, 464, 466, 467, 468, 469,
	472, 473, 474, 475, 476, 0, 477, 479, 481, 559,
	0, 0, 758, 0, 0, 0, 0, 0, 0, 482,
	483, 0, 350, 344, 300, 342, 343, 347, 348, 351,
	176, 0, 193, 665, 0, 242, 279, 0, 0, 0,
	339, 0, 392, 396, 0, 0, 0, 0, 0, 0,
	250, 0, 670, 0, 676, 0, 682, 0, 461, 0,
	672, 673, 678, 181, 757, 484, 555, 0, 0, 0,
	346, 0, 0, 0, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 674, 671, 675, 681, 669, 679, 666,
	677, 0, 383, 317, 0, 0, 410, 188, 234, 221,
	263, 305, 417, 0, 0, 295, 465, 230, 319, 0,
	209, 352, 0, 441, 316, 0, 424, 444, 0, 336,
	215, 375, 431, 432, 663, 668, 0, 684, 0, 219,
	220, 341, 201, 349, 0, 0, 404, 362, 360, 0,
	327, 384, 0, 0, 0, 249, 0, 244, 340, 480,
	207, 459, 378, 345, 299, 407, 436, 246, 231, 232,
	275, 377, 265, 217, 470, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 266, 0, 0, 478, 760, 750,
	742, 743, 744, 745, 746, 747, 0, 762, 763, 764,
	765, 766, 471, 756, 0, 741, 748, 749, 751, 0,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	177, 0, 178, 179, 180, 182, 183, 184, 662, 185,
	186, 187, 190, 191, 192, 194, 554, 195, 196, 197,
	198, 199, 200, 0, 664, 202, 203, 204, 205, 206,
	208, 210, 211, 212, 213, 214, 216, 218, 0, 0,
	0, 667, 0, 0, 0, 222, 223, 224, 225, 226,
	227, 0, 228, 229, 233, 235, 236, 237, 238, 239,
	240, 243, 0, 245, 247, 0, 248, 251, 0, 252,
	253, 254, 255, 256, 257, 258, 259, 0, 260, 0,
	261, 262, 264, 0, 267, 268, 269, 270, 271, 0,
	272, 0, 0, 273, 274, 276, 277, 278, 280, 281,
	282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
	0, 292, 293, 294, 296, 0, 297, 298, 301, 302,
	303, 304, 0, 306, 0, 0, 307, 308, 309, 0,
	0, 310, 311, 312, 313, 314, 315, 318, 0, 320,
	321, 322, 323, 324, 325, 326, 556, 328, 329, 330,
	331, 332, 333, 334, 0, 0, 335, 337, 338, 0,
	0, 0, 680, 353, 354, 355, 356, 357, 358, 359,
	361, 0, 363, 364, 365, 0, 366, 367, 368, 369,
	0, 370, 371, 372, 373, 374, 376, 379, 380, 381,
	382, 0, 385, 386, 387, 388, 389, 390, 391, 393,
	394, 395, 397, 398, 399, 557, 400, 401, 402, 403,
	0, 405, 406, 558, 408, 409, 411, 412, 413, 414,
	415, 416, 573, 0, 418, 0, 419, 420, 421, 422,
	423, 0, 425, 426, 427, 428, 429, 430, 433, 434,
	435, 437, 438, 0, 439, 440, 0, 442, 443, 683,
	445, 446, 447, 448, 449, 0, 574, 450, 0, 451,
	0, 452, 453, 454, 455, 456, 457, 458, 460, 0,
	0, 462, 463, 464, 466, 467, 468, 469, 472, 473,
	474, 475, 476, 0, 477, 479, 481, 559, 0, 0,
	758, 0, 0, 0, 0, 0, 0, 482, 483, 0,
	350, 344, 300, 342, 343, 347, 348, 351, 176, 0,
	193, 665, 0, 242, 768, 0, 0, 0, 339, 0,
	392, 396, 0, 0, 0, 0, 0, 0, 250, 0,
	670, 0, 676, 0, 682, 0, 461, 0, 672, 673,
	678, 181, 757, 484, 555, 0, 0, 0, 346, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 674, 671, 675, 681, 669, 679, 666, 677, 0,
	383, 317, 0, 0, 410, 188, 234, 221, 263, 305,
	417, 0, 0, 295, 465, 230, 319, 0, 209, 352,
	0, 441, 316, 0, 424, 444, 0, 336, 215, 375,
	431, 432, 663, 668, 0, 684, 0, 219, 220, 341,
	201, 349, 0, 0, 404, 362, 360, 0, 327, 384,
	0, 0, 0, 249, 0, 244, 340, 480, 207, 459,
	378, 345, 299, 407, 436, 246, 231, 232, 275, 377,
	265, 217, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 266, 0, 0, 478, 760, 750, 742, 743,
	744, 745, 746, 747, 0, 762, 763, 764, 765, 766,
	471, 756, 0, 741, 748, 749, 751, 0, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 177, 0,
	178, 179, 180, 182, 183, 184, 662, 185, 186, 187,
	190, 191, 192, 194, 554, 195, 196, 197, 198, 199,
	200, 0, 664, 202, 203, 204, 205, 206, 208, 210,
	211, 212, 213, 214, 216, 218, 0, 0, 0, 667,
	0, 0, 0, 222, 223, 224, 225, 226, 227, 0,
	228, 229, 233, 235, 236, 237, 238, 239, 240, 243,
	0, 245, 247, 0, 248, 251, 0, 252, 253, 254,
	255, 256, 257, 258, 259, 0, 260, 0, 261, 262,
	264, 0, 267, 268, 269, 270, 271, 0, 272, 0,
	0, 273, 274, 276, 277, 278, 280, 281, 282, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 0, 292,
	293, 294, 296, 0, 297, 298, 301, 302, 303, 304,
	0, 306, 0, 0, 307, 308, 309, 0, 0, 310,
	311, 312, 313, 314, 315, 318, 0, 320, 321, 322,
	323, 324, 325, 326, 556, 328, 329, 330, 331, 332,
	333, 334, 0, 0, 335, 337, 338, 0, 0, 0,
	680, 353, 354, 355, 356, 357, 358, 359, 361, 0,
	363, 364, 365, 0, 366, 367, 368, 369, 0, 370,
	371, 372, 373, 374, 376, 379, 380, 381, 382, 0,
	385, 386, 387, 388, 389, 390, 391, 393, 394, 395,
	397, 398, 399, 557, 400, 401, 402, 403, 0, 405,
	406, 558, 408, 409, 411, 412, 413, 414, 415, 416,
	573, 0, 418, 0, 419, 420, 421, 422, 423, 0,
	425, 426, 427, 428, 429, 430, 433, 434, 435, 437,
	438, 0, 439, 440, 0, 442, 443, 683, 445, 446,
	447, 448, 449, 0, 574, 450, 0, 451, 0, 452,
	453, 454, 455, 456, 457, 458, 460, 0, 0, 462,
	463, 464, 466, 467, 468, 469, 472, 473, 474, 475,
	476, 0, 477, 479, 481, 559, 0, 0, 758, 0,
	0, 0, 0, 0, 0, 482, 483, 0, 350, 344,
	300, 342, 343, 347, 348, 351, 176, 0, 193, 665,
	0, 242, 732, 0, 0, 0, 339, 0, 392, 396,
	0, 0, 0, 0, 0, 0, 250, 0, 670, 0,
	676, 0, 682, 0, 461, 0, 672, 673, 678, 181,
	757, 484, 555, 0, 0, 0, 346, 0, 0, 0,
	0, 0, 0, 0, 189, 0, 0, 0, 0, 674,
	671, 675, 681, 669, 679, 666, 677, 0, 383, 317,
	0, 0, 410, 188, 234, 221, 263, 305, 417, 0,
	0, 295, 465, 230, 319, 0, 209, 352, 0, 441,
	316, 0, 424, 444, 0, 336, 215, 375, 431, 432,
	663, 668, 0, 684, 0, 219, 220, 341, 201, 349,
	0, 0, 404, 362, 360, 0, 327, 384, 0, 0,
	0, 249, 0, 244, 340, 480, 207, 459, 378, 345,
	299, 407, 436, 246, 231, 232, 275, 377, 265, 217,
	470, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 0, 0, 478, 760, 750, 742, 743, 744, 745,
	746, 747, 0, 762, 763, 764, 765, 766, 471, 756,
	0, 741, 748, 749, 751, 0, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 177, 0, 178, 179,
	180, 182, 183, 184, 662, 185, 186, 187, 190, 191,
	192, 194, 554, 195, 196, 197, 198, 199, 200, 0,
	664, 202, 203, 204, 205, 206, 208, 210, 211, 212,
	213, 214, 216, 218, 0, 0, 0, 667, 0, 0,
	0, 222, 223, 224, 225, 226, 227, 0, 228, 229,
	233, 235, 236, 237, 238, 239, 240, 243, 0, 245,
	247, 0, 248, 251, 0, 252, 253, 254, 255, 256,
	257, 258, 259, 0, 260, 0, 261, 262, 264, 0,
	267, 268, 269, 270, 271, 0, 272, 0, 0, 273,
	274, 276, 277, 278, 280, 281, 282, 283, 284, 285,
	286, 287, 288, 289, 290, 291, 0, 292, 293, 294,
	296, 0, 297, 298, 301, 302, 303, 304, 0, 306,
	0, 0, 307, 308, 309, 0, 0, 310, 311, 312,
	313, 314, 315, 318, 0, 320, 321, 322, 323, 324,
	325, 326, 556, 328, 329, 330, 331, 332, 333, 334,
	0, 0, 335, 337, 338, 0, 0, 0, 680, 353,
	354, 355, 356, 357, 358, 359, 361, 0, 363, 364,
	365, 0, 366, 367, 368, 369, 0, 370, 371, 372,
	373, 374, 376, 379, 380, 381, 382, 0, 385, 386,
	387, 388, 389, 390, 391, 393, 394, 395, 397, 398,
	399, 557, 400, 401, 402, 403, 0, 405, 406, 558,
	408, 409, 411, 412, 413, 414, 415, 416, 573, 0,
	418, 0, 419, 420, 421, 422, 423, 0, 425, 426,
	427, 428, 429, 430, 433, 434, 435, 437, 438, 0,
	439, 440, 0, 442, 443, 683, 445, 446, 447, 448,
	449, 0, 574, 450, 0, 451, 0, 452, 453, 454,
	455, 456, 457, 458, 460, 0, 0, 462, 463, 464,
	466, 467, 468, 469, 472, 473, 474, 475, 476, 0,
	477, 479, 481, 559, 0, 0, 758, 0, 0, 0,
	0, 0, 0, 482, 483, 0, 350, 344, 300, 342,
	343, 347, 348, 351, 176, 0, 193, 665, 0, 242,
	279, 0, 0, 0, 339, 0, 392, 396, 0, 0,
	0, 0, 0, 0, 250, 0, 670, 0, 676, 0,
	682, 0, 461, 0, 672, 673, 678, 181, 0, 484,
	555, 0, 0, 0, 346, 0, 0, 0, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 674, 671, 675,
	681, 669, 679, 666, 677, 0, 383, 317, 0, 0,
	410, 188, 234, 221, 263, 305, 417, 0, 0, 295,
	465, 230, 319, 0, 209, 352, 0, 441, 316, 0,
	424, 444, 0, 336, 215, 375, 431, 432, 663, 668,
	0, 684, 0, 219, 220, 341, 201, 349, 0, 0,
	404, 362, 360, 0, 327, 384, 0, 0, 0, 249,
	0, 244, 340, 480, 207, 459, 378, 345, 299, 407,
	436, 246, 231, 232, 275, 377, 265, 217, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 266, 0,
	0, 478, 0, 0, 0, 0, 0, 0, 0, 241,
	0, 0, 0, 0, 0, 0, 471, 0, 0, 0,
	0, 0, 0, 0, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 177, 0, 178, 179, 180, 182,
	183, 184, 662, 185, 186, 187, 190, 191, 192, 194,
	554, 195, 196, 197, 198, 199, 200, 0, 664, 202,
	203, 204, 205, 206, 208, 210, 211, 212, 213, 214,
	216, 218, 0, 0, 0, 667, 0, 0, 0, 222,
	223, 224, 225, 226, 227, 0, 228, 229, 233, 235,
	236, 237, 238, 239, 240, 243, 0, 245, 247, 0,
	248, 251, 0, 252, 253, 254, 255, 256, 257, 258,
	259, 0, 260, 0, 261, 262, 264, 0, 267, 268,
	269, 270, 271, 0, 272, 0, 0, 273, 274, 276,
	277, 278, 280, 281, 282, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 0, 292, 293, 294, 296, 0,
	297, 298, 301, 302, 303, 304, 0, 306, 0, 0,
	307, 308, 309, 0, 0, 310, 311, 312, 313, 314,
	315, 318, 0, 320, 321, 322, 323, 324, 325, 326,
	556, 328, 329, 330, 331, 332, 333, 334, 0, 0,
	335, 337, 338, 0, 0, 0, 680, 353, 354, 355,
	356, 357, 358, 359, 361, 0, 363, 364, 365, 0,
	366, 367, 368, 369, 0, 370, 371, 372, 373, 374,
	376, 379, 380, 381, 382, 0, 385, 386, 387, 388,
	389, 390, 391, 393, 394, 395, 397, 398, 399, 557,
	400, 401, 402, 403, 0, 405, 406, 558, 408, 409,
	411, 412, 413, 414, 415, 416, 573, 0, 418, 0,
	419, 420, 421, 422, 423, 0, 425, 426, 427, 428,
	429, 430, 433, 434, 435, 437, 438, 0, 439, 440,
	0, 442, 443, 683, 445, 446, 447, 448, 449, 0,
	574, 450, 0, 451, 0, 452, 453, 454, 455, 456,
	457, 458, 460, 0, 0, 462, 463, 464, 466, 467,
	468, 469, 472, 473, 474, 475, 476, 0, 477, 479,
	481, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 482, 483, 0, 350, 344, 300, 342, 343, 347,
	348, 351,
}

var yyPact = [...]int32{
	621, -1000, -22, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1949, 569, 4077, 8162, 5249, 2009, 55096,
	41434, -1000, 2020, 925, 2466, 36374, -24, 54590, 42446, 261,
	621, 2153, 36374, 2215, 2152, 925, 42446, -1000, 1172, 1260,
	1200, 2488, 54084, 42446, 23190, 42446, 1985, 53578, 53072, 1567,
	52566, 1186, 2006, -1000, -1000, 854, 742, -1000, -1000, 35868,
	40928, 52060, 51554, 522, 1565, 31348, 42446, 42446, 42446, 42446,
	31348, 27805, 1218, 1379, 51048, 31348, 42446, 31348, 42446, 42446,
	42446, 42446, 42446, 658, 27805, 28818, 42446, 42446, 1981, 42446,
	42446, -1000, 50542, 50036, 49530, 59994, 59506, 2603, 1184, -1000,
	-1000, -1000, 513, 1560, -1000, -1000, -1000, 1980, 1175, 649,
	-1000, 1215, -1000, -1000, -1000, -1000, -1000, -1000, 512, -1000,
	49024, 40422, 1332, -1000, -1000, 561, 2340, 2695, 2695, 2486,
	30336, 427, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2337,
	1222, 1471, 22, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 130, 129, 2020, 12960, 12960, -1000, 2147, -1000, -3,
	-1000, 8, 30842, -1000, -1000, -1000, 343, -26, 42446, -1000,
	340, -1000, -26, 15021, -1000, 42446, 1970, 48518, 36374, 36374,
	119, -1000, 136, 48012, 42446, 509, 47506, 2601, 31348, 31348,
	42446, 632, 31348, 967, 1469, -1000, 2516, 2613, 13, 160,
	-1000, 20, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 636, 1170, 585, 2515,
	798, 2513, 1672, 47000, 596, 2512, 1816, 493, -1000, -1000,
	-1000, -1000, 5255, 2581, 2437, 4223, 2578, 2432, 7780, 2575,
	7966, 2567, 39916, 39410, 1669, 1072, 339, -1000, 8, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1070, 1069, 1068, 1246, 1066,
	339, 1065, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 42446, 42446, 42446, 2144, 2566, 1064, 1063, 1062, 1061,
	537, 1060, 2124, 2120, 42446, 1059, 1057, 1749, 1056, 1053,
	1077, 1383, 1668, 2565, 250, -1000, 2564, 280, -1000, 2118,
	2561, 267, 2560, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	9, -1000, -1000, -1000, -1000, -1000, 321, 1520, 318, 318,
	318, -1000, -1000, -1000, -1000, -1000, 51, 48, -1000, -1000,
	1510, 304, 1510, 1510, -1000, 1531, 1510, 267, 2558, 46494,
	1797, -1000, 1665, -1000, 1067, -1000, -1000, -1000, 2601, -1000,
	1489, -1000, 2647, 29324, 256, 2695, -1000, 1207, 915, -1000,
	1365, 1818, 18112, 17597, 42446, 364, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1412, -1000, 1206, -1000, -1000,
	-1000, 2150, -123, -1000, 9319, -1000, -1000, 15021, 15021, 15021,
	15021, -1000, -1000, -1000, 11929, -1000, -1000, 8, 301, 128,
	-1000, -1000, 300, -1000, 259, 8, -1000, -1000, -1000, -1000,
	-1000, -1000, 15021, -1000, 295, -1000, 292, 241, 284, -1000,
	8, -1000, 8799, 15021, -1000, 42446, 15021, 42446, -26, 2661,
	42446, -32, 7341, 671, 2650, 29830, -1000, 42446, 2054, 2053,
	2325, 2211, 42446, 481, 2509, 136, 42446, 4030, 2508, 45988,
	-1000, 276, 276, 1348, 42446, 274, 875, -1000, 27805, 2599,
	2556, 59018, -1000, 10, 10368, -1000, 10368, 23190, -1000, 294,
	42446, 42446, 42446, 42446, -1000, 42446, 2554, -1000, -1000, -1000,
	2553, 42446, 285, 2507, 482, 2695, 2552, 27299, 2505, 45482,
	-109, -1000, 871, -1000, 1118, 1112, 32849, 778, 639, 1847,
	1081, 2115, 1090, 813, 42446, 1402, 42446, 1819, 2315, 145,
	1288, 994, -1000, 273, 36374, 805, -109, -1000, 2314, 1111,
	42446, 794, -109, 2313, 4030, -1000, 1435, 59018, 552, -1000,
	2190, -1000, 552, 552, 2189, 1163, 798, 798, -1000, 42446,
	-109, 861, 42446, 7954, 2551, 2418, 7805, 2549, 42446, 2312,
	-1000, 108, 8, 2311, 2307, 2306, 1885, -1000, 1940, 2465,
	1047, 1842, 2304, -1000, 2302, 1052, 2052, 2051, 42446, 42446,
	2301, 2300, 2299, 2298, 2297, 409, -1000, 2420, 2295, 42446,
	42446, 1049, 2293, 2291, 27299, 2290, 2288, 42446, 42446, 42446,
	42446, 1596, 1595, 1594, -1000, 7510, -1000, -1000, 42446, 42446,
	-1000, -1000, -1000, 42446, 42446, -1000, 42446, 42446, 59018, -1000,
	59018, -1000, 21, 15021, -1000, 2681, -1000, -1000, -1000, -1000,
	2681, -1000, 2342, 2287, 2681, -1000, 265, -1000, 2681, -1000,
	-1000, 1510, 1510, -1000, -1000, 59018, 250, 2547, 27299, 2546,
	-1000, -1000, -1000, -1000, -1000, 42446, 2647, 662, -1000, -1000,
	1443, -1000, -1000, 1011, -1000, -1000, -1000, -1000, -30, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2685, 2682,
	-1000, -1000, -30, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2213,
	42446, 12960, 59018, 15021, 15021, 15021, 15021, 15021, 15021, 15021,
	15021, 15021, 15021, 15021, 15021, 15021, 15021, 2397, -1000, -1000,
	15021, 2444, 15021, 42446, 2331, 15021, 2286, 229, 2283, 10368,
	-1000, 259, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 745, 745, 7205, 546, 8,
	7130, -31, 6, 261, 8, -1000, -1000, -1000, 13476, 15021,
	23190, 8, 2359, 7341, -1000, 14506, 12445, 2213, 15021, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 6891, -232, 106, -35,
	-1000, 2055, -37, 15021, -1000, 15021, 15021, 2397, 15021, 15021,
	42446, 2331, 2286, 229, 2283, 259, 2111, -1000, 1907, 26287,
	1997, 42446, 289, -1000, 271, 42446, -1000, -1000, 2201, 21166,
	21166, 1841, 1841, -1000, -1000, -48, -1000, 33355, 42446, 1815,
	2542, 2478, 258, -1000, 4030, 1428, 2541, 2110, 2504, -1000,
	8174, 34367, 8036, 1144, -1000, -1000, 1814, 1488, 160, -1000,
	32360, 42446, 468, -1000, -1000, -1000, -1000, -1000, -1000, 1254,
	42446, -1000, 10368, -1000, -56, -1000, 260, -1000, 42446, 243,
	160, 160, 160, 160, 160, -1000, 42446, 1197, 42446, 955,
	33355, 1813, 2540, 1309, -1000, -1000, 42446, 911, -1000, -1000,
	2538, 2635, 2503, 136, 6971, 42446, 42446, 42446, -1000, 42446,
	42446, -1000, 2501, 44976, -1000, 59018, 42446, -1000, 240, 2065,
	444, 442, 2029, 38904, 42446, 44470, 43964, 42446, 706, -1000,
	-1000, 1173, 42446, -1000, 10368, 42446, 35362, 744, 705, 42446,
	1205, 34856, 42446, 1204, -1000, 42446, 977, -1000, -1000, 27805,
	-1000, 1944, 1199, 10880, 5114, 42446, 42446, 42446, 7793, 42446,
	42446, -1000, -1000, -1000, -1000, -1000, -1000, 552, -1000, -1000,
	-1000, 42446, 42446, 552, 552, 7490, 42446, 42446, 7464, -109,
	858, 42446, 764, -109, 847, 36374, 1000, 42446, -1000, 42446,
	42446, 42446, 42446, 42446, -1000, 2412, 43458, 15021, 2406, -1000,
	42446, -1000, 236, 2403, 42446, 42446, 27805, 2278, 42446, 42446,
	1048, 2109, 42446, 42446, 42446, 42446, 42446, -1000, -1000, -1000,
	42446, 1043, 1030, 2275, 27805, 27805, 903, 42446, 42446, 1028,
	1027, 1026, 1023, 42446, 42446, 2695, 2596, 2695, 2273, 42446,
	42446, 31348, 234, 59018, 31348, 24250, 31348, 31348, 1747, 59018,
	-1000, -1000, -1000, -1000, -1000, -1000, 250, -1000, 280, -1000,
	2496, 2108, -1000, 267, -1000, -58, 105, 103, 2336, 2333,
	102, 15021, 99, -1000, -1000, 267, -1000, 42446, 900, 1745,
	2483, 1443, -1000, -1000, 797, 1085, -1000, 18627, -1000, -1000,
	-1000, -1000, 2196, 21166, -1000, -1000, -1000, -47, -47, -14,
	-14, -14, -1000, 348, 348, 348, 348, 348, 348, 7205,
	1165, -1000, 2400, 1582, 15021, 15021, 2282, 229, 2272, 1376,
	-1000, 2233, -1000, 546, 16566, 16566, -1000, -1000, -1000, 11929,
	15021, -1000, -1000, -1000, 15021, -122, -147, -1000, -1000, -60,
	98, 1555, -1000, 15021, -1000, -61, -1000, -1000, -39, 15021,
	15021, 15021, -1000, 7341, 2669, -1000, 2196, -63, -1000, 15021,
	-1000, -1000, 222, -1000, 2003, -1000, 7341, 1921, 1919, 1590,
	-1000, -1000, -64, -1000, -1000, -1000, -1000, 2201, 29830, 15021,
	-66, -1000, 8, 1921, 15536, -68, 2330, 37386, 37386, 22684,
	-1000, 20660, 37386, 37386, 37386, 195, 2212, 217, 216, 8,
	-1000, 2138, 1965, -1000, 1965, 42446, -1000, 94, -42, -1000,
	-1000, -1000, -1000, 42446, 149, 42446, 42446, 2633, 145, 42446,
	42446, 36374, 2537, 56090, 1194, 8036, -1000, 2695, 30336, 1738,
	-1000, -1000, 2104, -1000, -1000, -1000, -1000, 945, 1290, -1000,
	1203, 552, 552, 42446, -1000, 42446, 42952, -1000, -74, -1000,
	-1000, 678, 58042, 55602, -1000, 1139, -1000, -1000, -1000, 9,
	-1000, 60482, 1194, 2399, 2134, -1000, -1000, -1000, 1811, -1000,
	-1000, 1144, -1000, 88, -237, 2188, -76, -1000, -1000, -1000,
	245, 136, 42446, 2599, 917, 944, 1464, -1000, 1609, -1000,
	-1000, 10368, 11392, 86, -45, -1000, 59018, 2695, -1000, -1000,
	-1000, -1000, -1000, 560, -1000, 42446, 30336, 30336, -1000, 798,
	399, 955, -1000, 42446, 862, 42446, 85, 42446, 42446, 1394,
	596, 42446, 1730, 925, 2536, 2018, -1000, -1000, 2271, 2267,
	1798, 1574, 2535, -1000, 2499, 715, 906, 15021, 215, -1000,
	2454, 1257, 559, 212, 200, 42446, 1226, 1969, -1000, 2532,
	2496, 2531, 2496, -1000, -1000, -1000, 38398, -1000, -77, -1000,
	18, -1000, -1000, -1000, -1000, 42446, 42446, 42446, 42446, -1000,
	941, -1000, -1000, -1000, -1000, 934, -1000, 1196, -1000, -1000,
	-1000, -1000, -1000, 1256, 923, -78, -1000, -1000, 10368, 10368,
	10368, 2695, -1000, -109, -1000, 815, 1410, -1000, -1000, -109,
	2263, 1398, -1000, -1000, -1000, -1000, -1000, -1000, -109, 2262,
	4030, -1000, 2261, -109, 836, 42446, 42446, 6563, 42446, 42446,
	42446, 4311, 2260, 409, 955, -1000, -1000, -1000, -1000, -1000,
	2259, -1000, 2496, 2530, 7341, -1000, 860, 15021, -1000, -1000,
	-1000, -1000, 42446, 1017, 1013, 2254, 42446, -1000, -1000, -1000,
	-1000, -1000, -1000, 2251, 2248, 42446, -1000, -1000, 42446, -1000,
	-1000, 2247, 2245, 2244, 2243, -1000, 2242, 2240, 2695, 2497,
	-1000, -1000, 30336, -1000, -1000, -1000, 59018, -1000, -1000, -1000,
	42446, 42446, 197, -1000, -1000, 59018, -1000, -1000, -1000, -1000,
	42446, -1000, -1000, -1000, 370, -1000, -1000, 370, -79, -1000,
	-1000, 250, 42446, 27299, -1000, 1259, 256, -1000, -1000, -1000,
	-1000, -1000, 15021, -68, -1000, 15021, 1131, 1035, 16566, 16566,
	-1000, 15021, 15021, 15021, 844, -1000, 16566, 16566, 531, -80,
	698, 8, 6830, -1000, -1000, 131, -1000, -1000, 1335, -1000,
	15021, 6738, -1000, -1000, 83, 13991, -1000, -71, -71, 15021,
	15021, -1000, -1000, 190, 7341, 925, -1000, -1000, 12960, 541,
	925, 577, 42446, 8, 1921, -1000, 7341, 254, 42446, -1000,
	7341, 1810, 21166, 2083, 2071, 21166, 2074, 2059, 2059, 2059,
	-1000, -1000, -1000, 42446, 194, -1000, 37386, 37386, 37386, 37386,
	28311, 81, 2330, -1000, -1000, -1000, -1000, 1776, 191, 20154,
	15021, 8, 15021, 798, -1000, -1000, -1000, 2046, -1000, 1241,
	33355, -1000, 1107, 33861, 149, 425, 925, -1000, -81, 4030,
	2029, 42446, 8036, 187, 2103, -1000, 9, -1000, -1000, 1476,
	15021, -1000, -1000, -93, -1000, -105, 583, 2398, 1287, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1462, 845, -1000,
	55602, 15021, 15021, 58042, -1000, 58042, -1000, -1000, -7, 13,
	-1000, 42446, 1144, 42446, 2122, -1000, -1000, 2187, 55602, 55602,
	-1000, 2699, 11392, 2478, 185, 27805, 2599, -1000, 42446, -1000,
	-1000, 42446, 1573, -1000, 2495, 440, 184, 16566, 42446, 1616,
	-1000, 1330, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 181, 2685, 2682, -1000, 42446, 2473, 78, -108, -1000,
	-1000, 42446, -1000, -1000, -1000, -1000, -1000, 173, -1000, -1000,
	13, -1000, -1000, -1000, 1241, 149, 210, 1662, 482, 399,
	27299, 2483, 42446, 2478, 42446, 42446, 42446, -1000, 1991, -1000,
	-1000, -1000, 42446, 2528, 1419, -1000, 37892, -1000, 2029, 6600,
	42446, 1482, -1000, 2450, 42446, 42446, -1000, 42446, 21672, -1000,
	-1000, 1591, 1223, 145, 1301, 1315, 582, -1000, -1000, 798,
	823, 1482, 42446, -1000, 42446, -1000, -1000, -1000, -1000, -1000,
	10368, 11392, 10368, -1000, -1000, -1000, -1000, -1000, -1000, 879,
	42446, -1000, -1000, 10880, -1000, -1000, -1000, -1000, -1000, 42446,
	42446, 42446, 757, 2183, 42446, 750, 2180, 42446, 42446, 42446,
	42446, -1000, 2239, -109, 833, 1396, -1000, 2238, -109, 832,
	42446, -1000, 42446, -1000, 42446, -1000, 5903, 1482, -1000, 2237,
	2235, 42446, 1009, 42446, 42446, -1000, 409, 42446, 42446, 42446,
	42446, 42446, 2695, 1466, 2525, -1000, 2632, 2032, 2030, -1000,
	58530, 1214, 2496, -1000, -1000, -1000, -1000, -1000, 898, -1000,
	1391, 7341, 856, 15021, 15021, 428, 302, 568, 856, 765,
	15021, 59018, 16566, 16566, 16566, 16566, 16566, 16566, 16566, 16566,
	16566, 16566, 16566, 16566, 309, 309, 15021, -1000, 15021, -1000,
	-1000, -1000, 7341, 15021, -1000, 15021, -1000, 73, 72, 15021,
	69, 7341, 7341, -1000, 65, -123, 1877, 21672, 1831, -1000,
	-1000, 1907, -1000, -1000, 15021, -1000, 42446, 2330, 21166, 21166,
	2128, 2070, 21166, -1000, -1000, -1000, -1000, 170, 42446, -1000,
	-1000, -1000, -1000, 37386, -1000, 31348, 1755, 169, -151, 6036,
	5793, 162, 798, 1578, -1000, 1107, 168, -1000, 1295, 2018,
	-1000, 2175, -82, -1000, -1000, -1000, 2489, 1798, 33355, 42446,
	1807, 2480, 2478, -1000, 165, 2102, 1194, 60482, 2395, -1000,
	7341, 2695, 1729, 59018, 1235, -1000, -1000, -1000, 7341, 7341,
	-1000, -1000, 550, -6, 1078, -1000, -201, 42446, 55602, -1000,
	-92, -1000, 245, -1000, 2628, 42446, -1000, 1161, -1000, -1000,
	-1000, 2481, 2481, 15021, 958, 136, 2627, -1000, 2468, -1000,
	-1000, 23190, -1000, -1000, 42446, -1000, 2695, -1000, 1197, 10368,
	10, 893, 1798, 33355, 1799, 42446, 1306, -1000, 892, -1000,
	2626, 700, -1000, -1000, -1000, 2229, -1000, 42446, 399, -1000,
	36880, -1000, -1000, -1000, -97, -1000, 787, -1000, 1325, 1248,
	-1000, -1000, -98, 1482, -102, -103, -1000, 2487, 498, 2467,
	15021, 2384, 2593, 2584, -1000, -1000, 1616, 2375, 2625, 517,
	-1000, -1000, -1000, -1000, 1616, -1000, 1836, 59018, 552, 517,
	2496, 2496, -1000, -1000, 192, -1000, -1000, -1000, -1000, 2231,
	2228, 42446, 27805, -1000, 42446, 27805, -1000, -1000, -1000, 2224,
	42446, 42446, 42446, 749, 2174, 42446, 42446, 42446, -1000, -1000,
	2496, -1000, 42446, 42446, -1000, 2223, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2496, -1000, 2695, 2695, -1000, 59018, 42446,
	42446, -110, -152, 42446, -1000, 42446, -1000, 856, 856, 15021,
	15021, 15021, 856, -1000, -111, -111, -20, -20, -20, -1000,
	309, 309, 309, 309, 309, 309, 856, 856, 7341, -1000,
	-1000, -1000, -1000, 1978, 1895, -117, -1000, 42446, 1587, 7341,
	-1000, -1000, -1000, 2128, -1000, 163, 15021, 21166, -1000, 42446,
	-118, -1000, -121, -1000, 2618, 1801, 19648, 16051, 15021, -1000,
	-1000, 1540, 1966, -1000, 2518, 2518, 1979, -1000, 1824, 10368,
	162, 2695, 2018, 42446, 1424, 1424, 1703, 42446, -1000, 33861,
	1609, 407, 1107, 59, 149, 42446, -1000, 883, 2615, 21672,
	36374, -1000, -125, -1000, 58042, -1000, 1234, 1413, -1000, 533,
	-1000, -1000, -1000, 506, 1701, 620, 2207, -128, -1000, 925,
	-131, 2599, -1000, 2374, 2025, 160, 2025, 4819, 1180, 329,
	-1000, 58, -1000, -1000, -136, -1000, 42446, 888, 54, 42446,
	399, 1389, 42446, 925, -1000, 42446, 159, 158, 157, -1000,
	-1000, -1000, -1000, 1482, 1273, -1000, -1000, -1000, -1000, -1000,
	1273, 1073, 1273, 21672, 23720, -1000, 42446, 42446, -1000, 4707,
	-1000, 2524, 2523, -1000, -1000, 155, -1000, -1000, -1000, 2681,
	2681, 2614, 2473, -1000, -1000, -1000, -1000, 11392, 42446, 42446,
	1145, 225, -1000, 1145, 189, 42446, -1000, -1000, 2222, 42446,
	27805, -1000, -1000, 2221, -1000, 1482, -1000, -1000, 42446, -1000,
	-1000, -1000, 45, -1000, -1000, -1000, 57554, 59018, -1000, -1000,
	856, 856, 856, 43, 1968, 1982, 1963, -1000, 2196, 21672,
	-1000, 925, -1000, 42446, 7341, -1000, -153, -1000, 195, 31348,
	-1000, 154, 42446, 2172, 19142, 1598, -154, -1000, 275, 16566,
	1313, 1604, -1000, -1000, 1902, 15021, 1891, -1000, 1909, -1000,
	-1000, -1000, 2613, 2613, -1000, -1000, 2613, 2613, 1726, 2695,
	-156, -1000, 17081, 2196, -1000, 1703, -160, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2095, 145, 436, 150, -1000, -1000, 2018, 1241, 1107, 149,
	419, 391, 378, 925, -164, 2029, 60482, 8036, -1000, -1000,
	-1000, -46, -1000, -1000, 59018, -1000, 2349, 1352, 620, -1000,
	1227, -1000, -1000, -1000, 42446, -1000, 2480, 2478, -1000, 1255,
	-1000, -1000, 1153, 2097, 1212, 142, 15021, -1000, -1000, 10368,
	399, 42446, 1241, 149, -1000, 1655, 399, 2483, -1000, 31854,
	15021, 15021, 1609, 2481, 147, 2481, 42446, 2481, -1000, -1000,
	146, 1948, 145, -1000, 2467, -1000, -1000, 15021, 1284, 2026,
	-1000, -1000, -1000, -1000, -1000, 747, 27805, -1000, 739, -1000,
	42446, 1145, 188, 42446, -1000, -1000, 41, 39, 36, -1000,
	-1000, 42446, 1946, 1942, 29830, -1000, -1000, -1000, -167, -1000,
	-1000, -1000, 42446, -168, -1000, 57066, -1000, 1598, 2172, -1000,
	-1000, 16051, -170, 10368, 958, 1756, 42446, 42446, 1887, 7341,
	1898, 2170, 2695, 2695, 2695, 2695, 25781, 2373, 25275, -1000,
	-1000, 10368, -1000, -1000, -1000, -1000, -1000, 26793, -1000, 2095,
	42446, -1000, 700, 1425, -1000, -1000, 22178, 1609, 1703, 1107,
	2018, 1798, -1000, 417, 371, 2480, 1265, 144, -1000, 1194,
	-1000, -1000, 1323, 143, 901, -1000, -1000, 2613, -1000, -1000,
	1515, -1000, -1000, 2611, 714, -1000, 1247, -1000, 2100, 2099,
	1930, -1000, -1000, -1000, -1000, 4030, 4441, -1000, -1000, 399,
	884, 1798, 42446, -1000, -1000, -175, -1000, 2681, -178, -179,
	2025, 42446, 2025, 136, 2025, 23190, 227, -1000, -1000, 1948,
	-1000, 4147, 142, -1000, 15021, 42446, -1000, 42446, -1000, -1000,
	709, -1000, -1000, -1000, -1000, 186, 2167, 2157, 213, 2609,
	-186, -1000, 42446, 1922, 1775, -1000, -1000, 19142, -1000, 1796,
	15021, -1000, -1000, -1000, -1000, 1864, 1962, -1000, -1000, 1859,
	490, 1881, -1000, -1000, -1000, -1000, -201, -1000, 24769, -201,
	-1000, -1000, -190, -1000, -1000, 700, -1000, -1000, 1454, -193,
	-1000, 498, 2467, 15021, 2095, 2018, 1703, 1107, -1000, -1000,
	-1000, 2495, 141, 21672, -1000, 1190, 15021, -1000, -1000, -1000,
	42446, 1340, 925, 42446, -1000, -1000, 1925, -1000, 1932, 1487,
	1487, 290, 741, -1000, 42446, 872, 399, -1000, 31854, -1000,
	-1000, 2219, -1000, -196, -1000, 1180, 2196, 30, -1000, 1960,
	227, -1000, -1000, 7341, 1145, 1145, 42446, 42446, 42446, 42446,
	-1000, -1000, 42446, -1000, -1000, 1922, -1000, 16566, 16566, 2371,
	-1000, 16566, -1000, 1755, 140, -191, -1000, 2608, -1000, 29830,
	-1000, -1000, 1907, 42446, 1988, 139, -1000, -1000, -201, -1000,
	-1000, 26793, -1000, -1000, 1769, 1767, -1000, 22178, 42446, 42446,
	732, 700, 1703, 2095, 2018, 2478, 21672, -197, 31348, -1000,
	-1000, 469, -1000, -1000, 932, 2480, -1000, -1000, 1494, -1000,
	-1000, 2377, -1000, -1000, -1000, 399, 42446, -1000, -1000, 138,
	1482, -1000, 1482, 2097, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1145, 2045, 183, 182, -1000, -1000, 958, 958, -1000,
	958, 1795, 41940, 15021, 10368, -203, 1586, -198, -1000, 15021,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2467, -1000, 2095,
	700, 1703, 700, -200, -1000, 1265, 137, -1000, 2349, -1000,
	-1000, 136, 136, -1000, 399, 15021, -1000, 1482, -1000, 2429,
	42446, 42446, 42446, 42446, -204, -1000, 56578, 1760, -1000, -1000,
	1987, 1929, -208, 42446, 700, -1000, 2095, 2196, -1000, 21672,
	2495, 9856, 1321, -1000, -1000, -1000, -215, 1482, 2463, -1000,
	-1000, -1000, -216, 1844, 41940, 1774, 853, 2694, -1000, -1000,
	-1000, 1907, -1000, -1000, -1000, 700, -1000, -1000, 2478, -230,
	-1000, -1000, -1000, -1000, -1000, 1190, -1000, 2429, -1000, 26,
	2091, 15021, -1000, -1000, -1000, -1000, -1000, -1000, 1688, -1000,
	-1000, 1689, 1759, 1759, 2688, 1894, 1559, -1000, 700, -1000,
	9856, 31348, 2013, -1000, 1692, 7341, -1000, -1000, 1631, 1658,
	1644, 1689, 1844, -1000, 135, 42446, 1987, 2196, -1000, 134,
	42446, -1000, 1844, 1636, 1625, -1000, 1654, -1000, 1650, 1657,
	1649, 1631, -1000, 41940, 1794, -1000, -1000, 9856, -1000, -1000,
	2090, 2089, 2086, -1000, -1000, 1647, -1000, 1642, -1000, 1844,
	-233, 133, -236, 1708, 1618, 1613, -1000, -1000, -1000, -1000,
	41940, -1000, 1844, -1000, 1611, 1608, -243, 2085, -1000, -1000,
	-1000, 1685, -1000,
}

var yyPgo = [...]int16{
	0, 3045, 3043, 2388, 127, 0, 28, 4305, 3042, 257,
	203, 245, 126, 443, 210, 3041, 261, 258, 2609, 620,
	535, 113, 3040, 3039, 3039, 3038, 262, 212, 184, 3036,
	168, 3035, 3031, 157, 3030, 3028, 269, 26, 4640, 807,
	1488, 15, 3027, 3026, 3025, 3024, 3023, 234, 3022, 193,
	3021, 3020, 3019, 233, 186, 228, 226, 3018, 204, 232,
	116, 139, 240, 2748, 3015, 254, 84, 122, 264, 3014,
	3013, 3011, 3010, 3009, 3008, 3007, 3005, 3004, 3002, 88,
	180, 189, 200, 275, 128, 218, 134, 3001, 2998, 2995,
	3246, 77, 2987, 104, 2986, 236, 235, 79, 206, 238,
	4734, 271, 2985, 2984, 2981, 2979, 2975, 158, 155, 2974,
	2973, 2972, 2970, 30, 36, 2969, 2968, 192, 188, 225,
	2966, 229, 160, 6, 32, 144, 132, 2961, 2959, 2958,
	2957, 21, 83, 18, 2955, 2954, 62, 46, 2953, 253,
	2953, 2953, 2953, 2953, 2950, 222, 2947, 2946, 2945, 131,
	2944, 2943, 2942, 40, 2942, 52, 59, 2941, 35, 135,
	237, 142, 2940, 256, 34, 196, 2415, 190, 2939, 266,
	255, 259, 239, 161, 10, 2939, 153, 279, 2938, 2937,
	2936, 2936, 267, 223, 195, 191, 133, 146, 2933, 272,
	2931, 281, 2930, 2929, 2927, 2926, 231, 215, 60, 2924,
	182, 2923, 72, 2917, 2916, 81, 230, 25, 53, 2913,
	38, 82, 37, 69, 2912, 65, 227, 2, 20, 12,
	2911, 181, 2909, 31, 2908, 7, 1, 2907, 4, 13,
	5, 17, 2905, 2903, 143, 2902, 102, 2901, 179, 175,
	138, 2900, 130, 2899, 121, 43, 89, 2897, 2896, 2895,
	119, 22, 2894, 111, 2893, 150, 208, 2892, 2891, 2890,
	19, 41, 107, 55, 61, 48, 29, 87, 54, 2888,
	2887, 49, 95, 2886, 162, 47, 11, 94, 211, 99,
	2885, 27, 24, 16, 301, 85, 250, 246, 2882, 33,
	205, 263, 2881, 2879, 260, 129, 251, 68, 174, 2877,
	166, 2876, 39, 2873, 70, 2873, 148, 57, 44, 2872,
	45, 169, 2872, 103, 112, 2871, 217, 617, 5414, 2868,
	109, 2867, 270, 66, 2866, 164, 149, 2865, 242, 243,
	2863, 2862, 140, 136, 114, 2860, 124, 2859, 2858, 2857,
	2856, 2855, 2854, 2852, 2851, 2850, 2849, 2848, 2841, 2831,
	2827, 2826, 2820, 2819, 2817, 2816, 2815, 2814, 2812, 177,
	187, 2801, 2800, 2782, 247, 244, 194, 209, 268, 170,
	183, 213, 2773, 2772, 163, 2771, 2767, 167, 64, 2766,
	202, 176, 154, 2765, 1758, 224, 2764, 2763, 2763, 2762,
	9, 265, 2761, 178, 173, 86, 221, 2760, 80, 2757,
	2756, 214, 2754, 2751, 58, 2747, 2746, 171, 220, 2745,
	2742, 2741, 2733, 2732, 2731, 3, 71, 23, 8, 2728,
	2727, 42, 2726, 2723, 241, 198, 2720, 2714, 2713, 2713,
	2709, 2468, 2706, 252, 14, 2704, 2704,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 17, 17, 282, 282, 317, 317, 317, 24,
	24, 25, 25, 26, 26, 27, 27, 37, 37, 37,
	5, 5, 5, 6, 6, 6, 6, 6, 8, 8,
	7, 12, 12, 13, 13, 318, 318, 23, 23, 15,
	15, 429, 429, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 14, 14, 16, 16, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 39, 39, 39, 39, 39,
	39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
	39, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 41, 41, 41, 41, 41,
	41, 60, 62, 61, 61, 61, 42, 42, 55, 55,
	59, 59, 58, 58, 58, 58, 56, 56, 43, 197,
	390, 390, 86, 86, 86, 86, 86, 86, 53, 53,
	54, 54, 54, 44, 45, 45, 48, 48, 47, 46,
	46, 49, 49, 49, 52, 52, 50, 50, 51, 84,
	84, 67, 68, 68, 68, 68, 68, 63, 63, 63,
	65, 66, 80, 80, 81, 81, 69, 69, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 76,
	76, 72, 72, 64, 64, 64, 64, 64, 64, 73,
	74, 77, 78, 75, 75, 75, 75, 82, 82, 82,
	83, 83, 71, 71, 90, 90, 92, 92, 93, 93,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 91, 91, 85, 87, 88, 89, 96, 96,
	95, 95, 97, 97, 98, 100, 100, 99, 99, 101,
	101, 101, 101, 168, 168, 167, 167, 170, 170, 170,
	170, 171, 171, 172, 172, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 320, 320, 321, 321,
	321, 322, 322, 322, 183, 183, 183, 183, 183, 183,
	184, 184, 184, 184, 185, 185, 186, 186, 187, 187,
	187, 188, 188, 189, 189, 191, 192, 192, 192, 193,
	193, 193, 194, 194, 194, 195, 195, 174, 174, 175,
	121, 121, 121, 144, 177, 177, 176, 176, 176, 176,
	178, 178, 179, 179, 180, 180, 181, 181, 182, 182,
	196, 196, 205, 205, 201, 201, 202, 203, 203, 204,
	204, 395, 199, 199, 198, 198, 200, 211, 211, 213,
	213, 212, 212, 212, 212, 214, 214, 215, 215, 206,
	206, 207, 207, 208, 208, 208, 209, 209, 210, 210,
	210, 210, 210, 216, 221, 220, 220, 224, 224, 222,
	222, 223, 226, 226, 227, 227, 227, 227, 227, 227,
	227, 227, 228, 228, 228, 228, 225, 225, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 230, 230, 230,
	230, 230, 231, 231, 232, 232, 233, 233, 217, 217,
	218, 218, 218, 218, 218, 218, 219, 219, 102, 319,
	319, 112, 112, 112, 112, 112, 133, 133, 113, 113,
	117, 103, 114, 114, 119, 119, 118, 115, 115, 104,
	190, 190, 105, 116, 116, 106, 106, 138, 138, 139,
	139, 145, 145, 145, 146, 146, 147, 147, 149, 149,
	150, 150, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 151, 151, 156,
	157, 157, 157, 157, 157, 157, 152, 152, 158, 164,
	164, 164, 164, 159, 159, 159, 159, 161, 161, 294,
	294, 294, 294, 294, 294, 294, 294, 293, 293, 293,
	292, 292, 292, 292, 292, 163, 163, 431, 431, 162,
	162, 430, 430, 378, 378, 140, 140, 141, 141, 142,
	142, 143, 143, 125, 125, 125, 125, 125, 134, 134,
	135, 135, 126, 126, 128, 129, 130, 130, 130, 130,
	130, 123, 120, 120, 120, 127, 127, 127, 154, 154,
	155, 155, 131, 131, 131, 132, 132, 124, 124, 136,
	136, 136, 137, 137, 137, 122, 122, 107, 107, 107,
	107, 107, 107, 296, 296, 296, 296, 296, 296, 296,
	296, 234, 234, 235, 235, 238, 238, 238, 241, 249,
	249, 249, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 298, 298, 299, 299, 300, 300, 301, 301,
	236, 236, 237, 237, 242, 242, 243, 243, 244, 244,
	244, 244, 245, 248, 248, 302, 302, 303, 303, 304,
	10, 32, 239, 253, 253, 254, 254, 254, 254, 257,
	257, 257, 257, 260, 260, 260, 306, 306, 309, 309,
	311, 311, 311, 311, 307, 307, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 432, 432, 28, 28, 28, 305, 305, 308,
	308, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	240, 240, 256, 256, 256, 256, 256, 256, 256, 258,
	258, 247, 247, 246, 246, 262, 262, 261, 261, 261,
	261, 266, 266, 266, 266, 266, 263, 264, 265, 265,
	265, 265, 265, 267, 267, 268, 268, 269, 270, 270,
	271, 271, 271, 297, 297, 275, 275, 275, 275, 276,
	276, 277, 277, 278, 108, 108, 259, 259, 279, 279,
	281, 281, 280, 280, 283, 283, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 284, 284, 289,
	289, 285, 285, 11, 382, 382, 382, 382, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 287,
	287, 287, 288, 290, 290, 433, 433, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 335,
	335, 335, 384, 384, 384, 387, 387, 387, 387, 386,
	386, 388, 388, 336, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 36, 328, 330,
	57, 57, 57, 57, 329, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	251, 251, 252, 252, 252, 252, 252, 252, 272, 273,
	273, 274, 274, 274, 274, 331, 331, 331, 331, 391,
	391, 392, 392, 393, 393, 393, 394, 394, 394, 394,
	394, 396, 396, 396, 396, 396, 397, 79, 79, 79,
	398, 398, 399, 399, 401, 401, 401, 401, 401, 403,
	403, 400, 400, 404, 404, 404, 334, 422, 422, 405,
	405, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 389, 389,
	332, 332, 406, 406, 406, 408, 408, 407, 407, 407,
	407, 407, 413, 413, 414, 414, 416, 411, 411, 412,
	412, 419, 409, 409, 435, 435, 410, 410, 417, 417,
	434, 434, 415, 415, 415, 418, 418, 418, 418, 420,
	420, 333, 333, 333, 333, 153, 153, 421, 421, 421,
	421, 339, 339, 339, 339, 340, 341, 341, 341, 341,
	341, 341, 341, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 344,
	344, 359, 359, 436, 436, 345, 345, 346, 346, 360,
	360, 362, 362, 362, 362, 347, 361, 361, 363, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 372, 372, 349, 350, 350, 366, 366, 366,
	366, 365, 365, 364, 364, 371, 371, 351, 351, 352,
	352, 352, 367, 367, 368, 368, 369, 369, 353, 353,
	353, 353, 354, 354, 355, 356, 356, 370, 370, 373,
	373, 373, 373, 374, 374, 381, 375, 376, 376, 377,
	343, 343, 343, 343, 343, 357, 357, 358, 358, 379,
	379, 380, 380, 337, 337, 338, 324, 324, 325, 323,
	323, 323, 326, 326, 327, 327, 327, 327, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 383,
	383, 383, 383, 166, 166, 169, 169, 160, 160, 423,
	423, 423, 423, 423, 423, 423, 423, 423, 426, 426,
	426, 165, 165, 9, 9, 9, 9, 428, 428, 424,
	424, 424, 425, 425, 425, 425, 425, 427, 427, 427,
	427, 295, 295, 295, 295, 295, 295, 313, 313, 29,
	29, 30, 31, 31, 33, 33, 33, 33, 34, 34,
	35, 35, 35, 35, 314, 315, 315, 316, 316,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 2,
	0, 3, 0, 2, 0, 1, 0, 2, 2, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 3, 1, 2, 3, 0, 1,
	3, 1, 0, 3, 3, 4, 4, 4, 4, 3,
	2, 1, 1, 2, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 3, 2,
	4, 2, 3, 5, 4, 6, 3, 5, 4, 6,
	3, 5, 3, 3, 2, 6, 7, 6, 7, 3,
	4, 4, 6, 5, 7, 1, 3, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 1, 2, 4, 1, 1, 1, 2, 2,
	2, 2, 1, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 1, 2, 1, 2,
	1, 0, 2, 2, 3, 5, 0, 2, 4, 1,
	1, 2, 3, 5, 6, 8, 6, 6, 1, 3,
	1, 3, 3, 5, 1, 0, 1, 2, 4, 2,
	0, 3, 3, 2, 1, 3, 4, 3, 5, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 3, 3, 0, 2, 3, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 2, 2, 1, 3, 3, 2, 4,
	1, 5, 2, 5, 2, 5, 2, 3, 3, 0,
	1, 0, 3, 0, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 0, 0, 0, 0, 1,
	1, 3, 1, 1, 1, 3, 3, 1, 2, 6,
	6, 2, 1, 1, 0, 1, 3, 3, 2, 1,
	1, 2, 0, 1, 3, 2, 2, 3, 1, 4,
	2, 3, 2, 3, 2, 3, 1, 1, 2, 2,
	4, 1, 2, 3, 3, 4, 5, 4, 5, 4,
	2, 2, 2, 1, 1, 0, 5, 2, 2, 2,
	3, 1, 0, 1, 3, 9, 1, 2, 0, 7,
	7, 0, 10, 6, 0, 4, 5, 2, 0, 1,
	2, 4, 0, 1, 1, 0, 5, 2, 4, 1,
	2, 0, 1, 0, 1, 5, 1, 0, 2, 0,
	2, 6, 2, 0, 1, 3, 2, 4, 0, 1,
	3, 2, 1, 0, 1, 3, 3, 2, 0, 2,
	2, 2, 3, 3, 4, 1, 3, 3, 2, 7,
	12, 1, 3, 2, 3, 3, 1, 2, 2, 2,
	2, 1, 2, 13, 2, 2, 0, 2, 0, 1,
	3, 3, 2, 1, 1, 1, 1, 1, 1, 2,
	2, 1, 3, 3, 6, 0, 3, 0, 2, 3,
	2, 3, 4, 4, 3, 3, 0, 5, 2, 5,
	2, 0, 4, 2, 1, 0, 1, 0, 1, 3,
	3, 6, 7, 5, 7, 9, 2, 0, 7, 1,
	3, 1, 4, 4, 7, 2, 1, 1, 1, 3,
	2, 8, 1, 3, 3, 5, 2, 1, 3, 7,
	2, 0, 10, 1, 2, 9, 11, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 3, 0, 1, 3,
	2, 0, 1, 1, 3, 3, 1, 1, 3, 3,
	3, 3, 4, 4, 3, 3, 2, 1, 3, 2,
	1, 1, 1, 1, 3, 0, 1, 3, 1, 1,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 2,
	2, 1, 3, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 0, 2,
	0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
	0, 1, 0, 4, 4, 4, 5, 5, 2, 5,
	3, 5, 2, 0, 3, 1, 2, 5, 5, 8,
	3, 4, 8, 5, 0, 4, 3, 0, 1, 3,
	1, 3, 2, 2, 4, 4, 5, 2, 0, 1,
	1, 0, 2, 2, 0, 2, 0, 13, 16, 12,
	15, 14, 17, 1, 1, 2, 2, 2, 2, 1,
	0, 1, 0, 1, 3, 1, 1, 1, 3, 3,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 1, 0, 2, 2, 1, 0,
	3, 0, 1, 3, 1, 1, 2, 4, 6, 6,
	10, 1, 2, 1, 3, 4, 0, 1, 3, 2,
	1, 1, 6, 2, 0, 3, 1, 1, 2, 1,
	2, 2, 2, 2, 3, 0, 1, 2, 1, 2,
	1, 3, 2, 3, 1, 2, 2, 2, 1, 2,
	3, 1, 2, 2, 2, 2, 3, 3, 3, 1,
	3, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	0, 2, 1, 4, 4, 5, 2, 5, 5, 7,
	3, 1, 5, 9, 3, 9, 4, 11, 10, 2,
	0, 1, 3, 3, 6, 4, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 3, 3, 4, 0, 1, 0, 6, 1, 3,
	3, 3, 5, 2, 0, 3, 4, 4, 0, 2,
	0, 4, 0, 3, 16, 19, 1, 0, 2, 0,
	4, 0, 1, 3, 2, 0, 4, 6, 4, 6,
	4, 4, 6, 4, 6, 5, 7, 5, 7, 4,
	6, 10, 13, 10, 13, 11, 14, 1, 3, 1,
	0, 1, 3, 1, 1, 1, 1, 1, 2, 5,
	3, 6, 4, 6, 6, 9, 5, 7, 6, 6,
	5, 5, 5, 5, 9, 4, 5, 7, 6, 4,
	8, 4, 2, 4, 3, 6, 4, 3, 3, 3,
	2, 2, 3, 4, 4, 3, 3, 3, 3, 3,
	3, 4, 4, 3, 2, 3, 2, 2, 3, 4,
	3, 2, 2, 3, 4, 4, 4, 5, 1, 4,
	4, 4, 3, 3, 2, 1, 0, 6, 4, 6,
	4, 6, 8, 4, 6, 4, 6, 5, 7, 2,
	3, 3, 2, 5, 1, 1, 2, 3, 2, 1,
	1, 2, 1, 2, 1, 1, 1, 2, 1, 2,
	1, 1, 1, 3, 3, 3, 3, 2, 2, 2,
	3, 5, 5, 5, 2, 6, 6, 6, 6, 6,
	8, 8, 6, 6, 7, 9, 9, 8, 10, 6,
	6, 6, 6, 6, 6, 6, 8, 6, 8, 6,
	8, 7, 9, 6, 8, 7, 9, 8, 10, 8,
	10, 9, 11, 8, 10, 9, 11, 8, 8, 7,
	6, 6, 6, 6, 8, 8, 8, 8, 6, 9,
	0, 2, 2, 1, 2, 2, 2, 2, 3, 1,
	3, 3, 1, 5, 3, 9, 12, 7, 7, 3,
	2, 1, 3, 1, 3, 3, 3, 3, 2, 2,
	1, 1, 1, 1, 2, 1, 1, 1, 4, 5,
	1, 0, 1, 2, 2, 2, 2, 1, 1, 1,
	3, 3, 5, 1, 4, 0, 2, 3, 0, 1,
	1, 4, 5, 1, 1, 1, 1, 3, 3, 2,
	2, 1, 2, 2, 2, 2, 1, 2, 2, 1,
	17, 21, 1, 1, 2, 1, 3, 1, 1, 1,
	3, 1, 2, 0, 1, 2, 4, 1, 1, 1,
	1, 1, 3, 0, 1, 0, 1, 1, 4, 0,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 2,
	0, 9, 11, 12, 14, 3, 0, 3, 4, 4,
	0, 6, 4, 9, 7, 6, 4, 6, 6, 5,
	7, 9, 6, 6, 5, 4, 4, 3, 6, 6,
	6, 6, 4, 7, 5, 8, 7, 8, 6, 5,
	8, 1, 0, 1, 0, 4, 6, 5, 8, 2,
	0, 2, 2, 2, 1, 5, 2, 0, 2, 6,
	6, 6, 10, 6, 6, 6, 9, 9, 6, 6,
	9, 6, 1, 1, 7, 7, 6, 2, 2, 2,
	2, 1, 2, 1, 0, 1, 2, 10, 13, 5,
	4, 4, 2, 0, 2, 2, 1, 0, 11, 14,
	12, 15, 8, 11, 8, 7, 9, 1, 1, 3,
	3, 5, 6, 1, 3, 1, 3, 1, 3, 3,
	7, 9, 9, 8, 6, 1, 0, 1, 3, 3,
	1, 5, 3, 8, 11, 6, 1, 0, 5, 2,
	3, 0, 2, 0, 1, 1, 1, 1, 1, 3,
	3, 2, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 3, 2, 2, 1, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 2, 0, 2,
	0, 4, 1, 3, 1, 2, 2, 2, 1, 1,
	1, 1, 1, 3, 3, 1, 3, 1, 3,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -97, -102, -103, -104, -105,
	-106, -107, -108, -109, -110, -111, -331, -332, -333, -337,
	-338, -339, -340, -341, -342, -343, -344, -345, -346, -347,
	-348, -349, -350, -351, -352, -353, -354, -355, -356, -335,
	-336, -99, -100, -188, 112, 26, 22, 27, 395, 94,
	402, -101, -187, 532, 63, 67, -195, 36, 519, 87,
	541, 97, 98, 99, 100, 532, -146, 116, -296, -259,
	-26, 33, 415, 262, 62, 465, 455, 226, 277, 285,
	423, 104, -324, 454, 452, 58, 290, 474, 472, 67,
	308, 420, 481, 85, 285, 200, 226, 237, 248, 262,
	287, 71, -431, 62, 376, 386, 388, 410, 415, 423,
	444, 413, 461, 269, 407, 104, 450, 439, 455, 465,
	277, 385, -291, -294, -293, 465, 262, 308, 104, 67,
	420, 481, 85, 285, 226, 237, 439, 455, 195, 269,
	277, -431, 388, 415, 423, 376, 413, 461, 85, -384,
	58, 424, 458, -385, -383, -166, 56, 218, 415, 348,
	407, 489, -5, 4, -18, -19, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 201, 22, 202, 204, 205,
	206, 55, 207, 208, 209, 211, 212, 213, 89, 70,
	214, 215, 216, 24, 217, 219, 220, 221, 222, 223,
	224, 124, 227, 228, 229, 230, 231, 142, 232, 102,
	233, 234, 235, 236, 237, 112, 238, 155, 239, 121,
	122, 91, 247, 248, 249, 250, 251, 252, 254, 255,
	99, 150, 151, 256, 90, 257, 258, 259, 260, 261,
	262, 177, 27, 263, 139, 265, 149, 266, 268, 137,
	42, 269, 271, 272, 273, 274, 275, 276, 277, 278,
	280, 282, 283, 92, 284, 154, 166, 286, 287, 288,
	289, 290, 292, 295, 296, 152, 297, 298, 299, 28,
	300, 301, 302, 303, 304, 305, 306, 307, 308, 309,
	310, 311, 313, 314, 315, 97, 316, 318, 319, 146,
	504, 320, 321, 322, 323, 93, 325, 328, 329, 330,
	333, 334, 335, 336, 337, 338, 106, 85, 339, 100,
	341, 342, 343, 344, 345, 346, 347, 132, 349, 350,
	351, 352, 353, 354, 355, 358, 111, 359, 360, 32,
	140, 123, 505, 506, 503, 145, 62, 507, 508, 125,
	502, 509, 103, 365, 366, 367, 368, 369, 370, 371,
	130, 372, 129, 374, 375, 376, 378, 379, 380, 381,
	383, 384, 385, 386, 387, 113, 388, 153, 144, 389,
	390, 391, 392, 84, 133, 394, 395, 396, 397, 398,
	399, 400, 34, 401, 402, 403, 35, 404, 405, 406,
	408, 409, 410, 411, 128, 413, 414, 147, 416, 417,
	88, 418, 419, 420, 421, 422, 423, 94, 426, 428,
	429, 430, 431, 432, 108, 434, 435, 436, 437, 438,
	439, 114, 115, 440, 441, 442, 148, 443, 444, 446,
	447, 105, 449, 450, 109, 452, 453, 454, 455, 456,
	459, 461, 463, 464, 465, 466, 467, 468, 469, 143,
	470, 50, 473, 474, 475, 98, 476, 477, 478, 479,
	156, 184, 480, 481, 482, 483, 484, 486, 169, 487,
	141, 488, 499, 500, 57, 37, 174, 170, 190, 180,
	179, 225, 189, 188, 29, 279, 176, 293, 294, 501,
	187, 172, 186, 167, 161, 163, 164, 160, 162, 157,
	165, 159, 127, 158, 326, 340, 182, 183, 356, 357,
	361, 171, 362, 363, 377, 178, 175, 412, 427, 173,
	445, 185, 460, 462, 87, 181, 490, 491, 492, 493,
	494, 134, 495, 496, 497, 498, 126, -387, -386, 56,
	458, 424, -166, 21, 218, 58, 348, 407, 415, 489,
	-101, -99, -100, -187, -179, -180, 21, 41, -320, -318,
	-321, -5, 66, 424, 458, 56, 542, -189, 84, -191,
	-7, -5, -189, 532, -3, 73, -322, -320, 64, 73,
	-98, -97, -318, 67, 481, 84, 420, 308, 287, 386,
	461, 118, 200, 34, -17, -5, 28, -14, -5, -91,
	-93, -5, 11, -94, 535, 536, 537, 538, 539, 540,
	526, 527, 528, 18, 19, 20, -14, 88, -14, 28,
	-7, 28, 247, 67, -7, 28, 337, 85, 454, 452,
	454, 452, -320, 28, 21, -318, 28, 21, -318, 28,
	-318, 28, 481, 67, 247, -329, -390, -63, -5, 4,
	-18, -20, 210, 116, 226, 25, 81, 243, 117, 79,
	44, 76, 52, 53, 75, 77, 46, 82, 54, 80,
	364, 78, 48, 451, 119, -14, -14, -7, -14, -328,
	-390, -11, -382, -9, 242, 246, 425, 4, -18, -19,
	-20, 322, 222, 280, -7, 28, -328, -7, -328, -7,
	-7, -7, -7, -7, 461, -11, -11, 337, -7, -14,
	88, -14, -7, 28, -16, -14, 28, -12, -7, -7,
	28, -163, 28, -67, -68, -69, -70, -76, -72, -75,
	-63, 187, 172, 173, 174, 175, 176, 177, 188, 189,
	171, 190, -77, -78, -73, -74, 185, 56, 4, -18,
	170, -64, 179, 180, 181, 182, 183, -163, 28, 25,
	337, 481, 247, 67, 88, 341, 461, 322, 481, -384,
	424, -384, 220, 210, -424, 432, -425, 319, 390, 253,
	31, 64, 61, 528, 534, 57, -62, 7, -62, -426,
	-62, 40, -165, -9, -62, 507, 57, 319, 210, 533,
	533, -168, -167, -170, -38, 537, -40, 535, 536, 31,
	-90, -42, -41, 13, 532, -44, -43, -100, 29, 135,
	-50, -51, 294, 11, 62, -5, -60, 6, -62, 49,
	43, 47, 38, -86, 412, 12, -390, -167, 74, 537,
	-55, -58, 534, 530, -318, 532, 532, 542, -189, -23,
	532, -84, -38, -319, -318, 94, -5, 23, -322, -322,
	533, -153, 532, -318, 28, -318, 481, -318, 28, -27,
	25, -390, -390, -7, 461, -390, -296, 474, 210, -326,
	31, -378, 23, -80, 534, -314, 532, 534, -314, 23,
	369, 258, 453, 232, -314, 64, 31, -28, 36, 519,
	31, 141, -318, 28, -367, 465, 31, 131, 28, 481,
	-284, -287, 399, -286, 208, 257, 197, 22, 27, 478,
	94, 224, 265, 259, 310, 355, 123, 31, 366, 402,
	401, 154, -30, 508, 29, 45, -284, -288, 399, 208,
	29, 45, -284, 399, -307, -310, 355, 23, 214, 91,
	306, 336, 339, 343, 365, 420, 437, 403, 474, 29,
	-284, 399, 29, -318, 28, 21, -320, 28, 141, 399,
	-36, 532, -55, 399, 399, 399, 399, -290, 27, 94,
	197, 478, 399, -36, 399, -7, -14, -14, 74, 29,
	399, 399, 399, 399, 399, -368, -30, 480, 399, 74,
	74, -7, 399, 399, 131, 399, 399, 369, 258, 453,
	232, 399, 197, 27, 98, -372, 197, 27, 29, 542,
	-317, 24, 35, 29, 542, -317, 74, 29, 542, -317,
	29, -81, -80, 532, -71, 532, 178, -81, -81, -81,
	532, -82, 519, 520, 532, -82, -83, 184, 532, -83,
	-83, 179, 180, -83, -317, 29, -16, 28, 131, 28,
	141, 369, 258, 453, 232, -27, 220, 23, -165, 40,
	542, -425, -62, 328, 66, 488, 253, 121, -169, 40,
	-160, -164, -159, 49, 43, 74, -165, 6, 535, 536,
	-61, -60, -169, 40, -5, -423, -62, 4, -159, 40,
	58, 49, 43, 74, 505, -428, 261, 235, 328, -182,
	73, 542, 14, 535, 536, 537, 538, 539, 540, 526,
	527, 528, 18, 19, 20, 30, 33, 52, 53, 54,
	46, 517, 44, 39, 55, -90, 37, 45, 48, 23,
	-8, 62, 4, -22, 192, 193, 194, 195, 196, 197,
	198, 199, 200, 21, 201, 22, 202, 203, 120, 511,
	95, 204, 205, 206, 60, 207, 208, 209, 210, 211,
	212, 213, 174, 116, 170, 190, 512, 89, 70, 214,
	215, 216, 24, 217, 38, 513, 218, 219, 220, 514,
	221, 222, 223, 224, 225, 226, 515, 124, 227, 228,
	229, 230, 231, 25, 142, 232, 102, 233, 118, 234,
	235, 236, 237, 112, 238, 81, 155, 239, 121, 240,
	241, 242, 243, 244, 245, 246, 122, 91, 247, 248,
	250, 189, 188, 251, 40, 252, 253, 254, 255, 99,
	150, 151, 256, 90, 96, 257, 258, 259, 260, 41,
	110, 261, 262, 177, 27, 263, 264, 139, 265, 149,
	266, 267, 268, 137, 42, 269, 271, 272, 273, 274,
	29, 275, 276, 277, 278, 279, 43, 280, 283, 92,
	176, 284, 154, 285, 166, 286, 117, 79, 287, 288,
	289, 290, 292, 293, 294, 295, 296, 152, 297, 299,
	28, 300, 301, 302, 303, 304, 305, 306, 307, 308,
	309, 310, 311, 312, 313, 76, 501, 314, 315, 97,
	316, 187, 172, 186, 318, 319, 75, 167, 161, 163,
	164, 160, 162, 157, 165, 159, 127, 158, 146, 504,
	320, 321, 322, 323, 93, 324, 327, 325, 326, 77,
	328, 329, 330, 58, 331, 332, 333, 334, 335, 336,
	337, 338, 106, 85, 339, 100, 340, 341, 343, 344,
	346, 347, 348, 182, 82, 183, 132, 349, 350, 351,
	352, 353, 354, 355, 356, 357, 358, 31, 111, 359,
	360, 47, 361, 32, 171, 140, 123, 505, 506, 503,
	145, 66, 507, 508, 125, 502, 362, 80, 363, 103,
	365, 366, 367, 368, 369, 370, 371, 130, 372, 129,
	373, 374, 375, 376, 377, 378, 379, 380, 381, 382,
	383, 384, 385, 386, 387, 113, 388, 153, 144, 389,
	390, 175, 391, 392, 84, 133, 393, 394, 395, 396,
	397, 398, 399, 400, 34, 401, 402, 403, 35, 404,
	405, 406, 78, 407, 408, 409, 410, 411, 412, 128,
	413, 414, 147, 415, 416, 417, 88, 419, 63, 420,
	421, 422, 423, 424, 425, 94, 427, 426, 428, 429,
	430, 431, 173, 432, 433, 108, 434, 435, 436, 437,
	438, 439, 114, 115, 440, 441, 442, 148, 443, 444,
	445, 446, 59, 447, 105, 448, 67, 449, 451, 450,
	109, 452, 453, 454, 455, 107, 456, 56, 185, 457,
	458, 459, 460, 461, 462, 49, 463, 464, 465, 466,
	467, 468, 469, 143, 470, 472, 50, 473, 474, 475,
	98, 104, 83, 476, 477, 478, 479, 156, 87, 181,
	191, 119, 480, 481, 482, 483, 51, 484, 487, 141,
	488, 489, 490, 491, 492, 493, 494, 134, 495, 496,
	497, 498, 126, 500, 57, -38, -38, -38, -38, -56,
	-38, -84, -100, 87, -55, -100, -100, -49, 530, 532,
	532, -55, -45, -38, -87, 532, 532, -182, 532, -58,
	-65, 537, -6, 4, -18, -19, -20, -21, 21, 203,
	120, 30, 511, 135, 23, 95, 60, 512, 38, 513,
	514, 39, 515, 118, 26, 240, 241, 242, 244, 245,
	246, 40, 253, 96, 41, 110, 264, 267, 270, 43,
	281, 131, 285, 64, 291, 71, 72, 45, 312, 317,
	73, 324, 327, 68, 331, 332, 31, 47, 69, 74,
	66, 33, 510, 373, 382, 393, 101, 63, 425, 433,
	59, 448, 67, 107, 61, 457, 49, 471, 472, 104,
	83, 191, 51, 65, 485, 36, -38, -59, -318, -84,
	-191, 23, -12, 542, 533, 30, 33, 52, 46, 44,
	39, 55, 37, 45, 48, 62, -112, -97, 103, 532,
	40, 23, -114, -119, -118, 532, -5, -5, -190, 83,
	83, 61, -138, 64, 61, -13, -5, 532, 123, 371,
	31, -153, -318, -359, -307, 355, 31, -17, 28, -5,
	-391, 532, -391, -406, 212, 199, 316, -7, -373, -375,
	532, 481, 84, -382, -327, -107, -108, -332, -333, 26,
	29, -67, 534, -65, -315, -316, -6, -91, 532, 268,
	389, -14, -14, -14, -14, -14, 29, -360, 29, -7,
	532, 371, 31, -369, -368, -62, 29, -370, -382, 104,
	31, -325, 28, -318, 542, 61, -433, 118, 515, 371,
	371, -239, 28, 515, -240, -5, 118, -256, 514, 472,
	382, 285, 271, -433, 118, -433, 118, 118, 169, 336,
	474, 195, 450, -272, 532, 74, 461, 202, 401, 413,
	412, 461, 413, 412, -318, 310, 154, -14, 123, 61,
	-272, 299, 412, 532, -320, 450, 61, 371, -318, 450,
	61, -310, 91, 339, 343, -68, -159, -432, 70, -159,
	-159, 70, 347, -28, -28, -318, 61, -433, -318, -284,
	399, 29, 45, -284, 399, 29, -7, 61, 533, 61,
	61, 61, 61, 118, 40, 31, 118, 40, 31, -379,
	118, -380, 514, 31, 118, 61, 61, 399, 83, 83,
	-318, -7, 61, 61, 61, 61, 61, -30, -62, 47,
	61, -318, -318, 399, 61, 61, -370, 61, 61, -14,
	-14, -14, -14, 61, 209, 156, 156, 156, -361, -292,
	-291, 200, 513, 262, 287, 62, 386, 410, 459, 465,
	-294, 248, 407, 444, 450, 308, -16, -14, -12, -7,
	-14, -7, -67, -163, -81, -84, -60, -60, 56, 56,
	-60, 532, -60, -83, -83, -163, -317, 29, -370, 29,
	-318, 458, -425, -427, 390, 400, 422, 542, -60, 6,
	-60, 6, -171, 64, -318, -170, -67, -38, -38, -38,
	-38, -38, -38, -38, -38, -38, -38, -38, -38, -38,
	-38, 47, 31, -38, 46, 44, 37, 45, 48, -38,
	-14, 56, 58, -38, -96, 59, 60, -95, -100, 532,
	61, -6, -58, 533, 542, -84, -52, 531, -49, -84,
	-91, -48, -47, 51, -88, -84, 533, 533, -53, 191,
	21, 41, -54, -38, -66, -63, -171, -84, 531, 543,
	533, 533, -192, 85, 31, 533, -38, -120, 74, -133,
	104, 105, -113, -117, -5, 87, -5, -171, 542, 528,
	-115, -118, -56, -121, 65, -172, -173, -320, -100, 86,
	-183, 532, -196, -206, -216, -197, 128, 126, 127, -5,
	-86, -173, -139, 113, -139, 542, 533, -234, -235, -238,
	-239, -241, -240, 46, -14, 123, 29, -283, 36, 532,
	29, 74, 31, 405, -398, -399, -401, 23, 322, 459,
	485, -402, 216, 442, 301, 435, 483, 278, 419, 325,
	31, 238, 128, 446, -389, 367, 94, -336, -392, 533,
	-393, -394, -396, -66, -79, 45, 362, 501, 191, -63,
	-67, 427, -398, 405, -408, -407, 97, 99, 98, 463,
	123, 199, -314, 537, -374, 510, -376, -381, -377, -394,
	4, -318, 481, -326, -296, -26, -17, -5, -253, -65,
	533, 542, 528, -199, -198, -200, -5, 532, -314, -314,
	-314, -314, -314, -14, -362, 415, 480, 64, 24, -7,
	-364, -365, -366, 296, 355, 479, -234, 123, 29, 285,
	-7, 423, 29, 23, 31, -153, -286, -7, -7, -7,
	-318, -318, 31, -239, 28, -67, -7, 532, -260, -278,
	32, 83, 504, 504, -279, 83, -5, -60, -7, 28,
	-5, 28, -7, -7, 506, 224, 341, -7, -273, -274,
	-6, -7, -7, 21, 104, 461, 413, 461, 413, -7,
	328, -7, 21, 104, -7, 328, -318, 412, -382, -35,
	111, 79, 40, 83, 328, -31, -33, -304, 94, 197,
	27, -10, -6, -284, -287, 399, -7, -7, -318, -284,
	399, -7, -7, -159, -14, -14, -159, -159, -284, 399,
	-307, -7, -7, -284, 399, 61, -433, -318, 450, 61,
	-433, -320, 399, -364, -365, -7, -7, -7, -7, -7,
	-7, 47, -7, 28, -38, 47, -7, 532, 47, -7,
	-7, -11, 61, -7, -7, 399, 74, -7, -7, -7,
	-7, -7, -7, 399, 399, 61, -11, -11, 423, -7,
	-7, 399, 399, 399, 399, -7, -7, -62, -25, 28,
	-62, -363, 61, -7, -14, -329, 532, -67, -328, -330,
	222, 280, -91, -328, -328, 131, -67, -317, -317, -317,
	74, -317, 533, 533, 533, 57, 57, 533, -84, 533,
	-317, -16, 423, 131, -323, 36, -424, 469, 230, 390,
	-160, -174, 65, -172, 47, 42, -38, -38, -96, 59,
	-95, 61, 42, 57, -39, -40, 535, 536, -39, -84,
	-38, -56, -38, 531, 531, 542, 533, 533, -46, -47,
	264, -38, -89, 533, -85, 542, -54, -53, -53, 16,
	17, -174, 533, -59, -38, 532, 85, -122, 101, 102,
	156, 533, 542, -56, -121, -119, -38, 533, 542, -122,
	-38, 121, 542, 81, -184, 75, 82, 79, 77, 78,
	76, -177, -176, 23, -5, -177, -100, -196, -206, -216,
	-100, -183, -173, -177, -177, -177, -205, 519, 64, 532,
	532, -55, 74, -145, -62, 114, 115, -145, -5, 533,
	542, -318, -236, 532, -318, -318, 23, -272, -13, -318,
	-320, 29, -397, 67, 47, -79, -63, -404, -334, 213,
	404, -401, -403, -62, -165, -400, 131, 74, 419, 255,
	318, 325, -159, -159, -14, -5, -385, 424, 458, 533,
	542, 40, 528, -66, -79, -396, -79, 362, -80, -63,
	-404, 74, 33, 123, -408, 533, 533, 510, 542, 70,
	533, 542, 528, -153, -318, 210, -326, -254, 118, -255,
	-257, 39, 31, 47, 472, 382, 514, 40, 393, 289,
	253, 312, -316, -295, -79, -21, -92, -159, -62, 356,
	-93, 62, 535, 536, 533, 542, -67, -357, -358, -62,
	-314, 64, -7, -165, -165, -28, -302, 508, -366, -371,
	-7, 296, 479, -371, 533, -318, -318, 247, -367, -7,
	131, -97, 29, -297, 83, 61, 61, -244, 131, 40,
	-27, 283, 29, 31, -301, -300, 440, -256, 271, -38,
	532, -251, 41, 31, 308, 532, -278, 532, 532, -7,
	-290, 27, 94, 402, 197, -309, -162, -30, -311, 403,
	94, -251, 29, -317, 29, -317, -34, -5, 40, 533,
	542, 528, 534, -7, -7, -7, -7, 419, 419, 328,
	308, 419, 533, 542, -304, -304, -10, -32, -62, 61,
	-433, 118, 94, 365, 61, 94, 365, 61, 61, 61,
	-433, -7, -7, -284, 399, -7, -7, -7, -284, 399,
	61, -30, 61, -317, 29, -380, -38, -251, -7, 399,
	399, 61, -318, 61, 61, -7, -7, 61, 61, 61,
	61, 61, 61, -62, 31, -165, -67, -14, -14, -57,
	532, -67, -14, -82, -82, 533, -317, -7, -370, 247,
	355, -38, -38, 42, 42, -39, -39, -38, -38, -38,
	30, 14, 535, 536, 537, 538, 539, 540, 526, 527,
	528, 18, 19, 20, -39, -39, 30, 533, 42, 533,
	-49, 267, -38, 107, 533, 191, -54, -85, -85, 542,
	-85, -38, -38, 531, -98, -167, -127, 532, 74, -97,
	-97, 103, -117, -122, 528, -118, 123, -173, 75, 75,
	-173, -184, 75, -185, 80, -185, -185, -5, 532, -177,
	-177, -177, -177, 533, 125, 532, -40, 134, -221, -38,
	-38, -28, -147, -430, 83, -267, 311, -238, -249, -268,
	-269, 371, -237, -242, -243, -240, -5, -236, 532, 123,
	371, -97, 533, -359, -279, -7, -398, 532, 74, 207,
	-38, 542, 542, 465, 47, 255, 318, -393, -38, -38,
	-79, -79, 539, -80, -318, -407, -13, 74, 70, -381,
	-374, -377, 4, -295, -283, 532, -382, -7, -14, 253,
	47, -260, 504, 532, -39, -318, -306, 202, 70, 254,
	300, 532, -200, -211, 39, 533, 542, -14, -360, 532,
	-80, -267, -236, 532, 371, 141, -369, -302, -370, -323,
	-325, -283, -7, -7, -7, 87, -239, 29, -299, -298,
	231, -5, 40, 533, -13, -252, 31, 253, 312, 355,
	41, -7, -13, -251, -13, -247, -246, -131, -5, -197,
	532, 31, 276, 299, 247, -310, 289, 31, 276, 439,
	-272, -300, -298, -272, 289, -311, 94, 465, -28, 439,
	-5, -7, -274, -295, -6, 419, -7, -33, -7, -7,
	-7, 450, 70, -7, 450, 70, -7, -7, -7, -7,
	61, 61, -433, 94, 365, 61, 61, -433, -7, -7,
	-7, 533, 61, 61, -7, 399, -7, -7, -30, -7,
	-7, -7, -7, -7, -62, 212, 199, 29, 23, 83,
	83, -67, 356, 322, -317, 423, 247, -38, -38, 30,
	30, 42, -38, -67, -39, -39, -39, -39, -39, -39,
	-39, -39, -39, -39, -39, -39, -38, -38, -38, -54,
	533, 533, 533, 533, 110, -155, -131, 118, -133, -38,
	-144, -7, -173, -173, -186, 83, 74, 75, -173, 532,
	-12, -176, -201, -202, -197, -212, 130, 532, 542, -232,
	-231, 516, -116, -125, -134, -135, 51, -149, -150, 532,
	-28, 151, -268, 532, 305, 272, -297, 70, 533, 542,
	-253, 36, -244, -234, -14, 123, -421, 36, -283, 532,
	74, -404, -204, -395, -66, -63, 47, -422, -62, 131,
	-67, 314, 465, 539, -413, 394, -318, -374, 533, 23,
	-13, -326, -255, 31, -313, 36, -313, -38, -153, 23,
	40, -91, -14, -62, -303, -304, 423, -244, -234, 123,
	-7, 285, 423, 23, -276, 450, 36, 45, 64, -239,
	-302, -5, 40, -251, 533, 253, 477, 300, 254, 310,
	533, 533, 533, 542, 36, -132, -124, 39, -132, -38,
	47, 28, 28, -306, 47, 23, -161, -61, 40, 535,
	536, -306, -67, -159, -161, -317, -317, 528, 61, 61,
	-7, -285, -382, -7, -285, 61, -7, -7, -7, 450,
	70, -7, -7, -7, -317, -251, -7, -7, 61, -317,
	-62, -62, -67, -7, -7, 533, 542, 542, -7, -7,
	-38, -38, -38, -85, -193, 88, 98, 111, 533, 542,
	-7, 156, -186, 532, -38, -173, -12, 533, 533, 542,
	-203, 23, 124, -40, -213, 70, -214, -215, -39, 40,
	-38, 167, -122, -125, -126, 30, -126, 106, 31, -148,
	116, 117, 150, 47, 155, 152, 153, 42, 154, 149,
	-151, -156, -6, -149, -62, -297, -15, -318, -250, 228,
	231, 234, 252, 299, 289, 309, 439, 440, 21, -250,
	-37, 36, 169, -5, -242, 508, -268, 533, -236, -318,
	514, 217, 58, 23, -155, -320, 542, 533, -79, 314,
	267, -405, -4, -334, 465, 465, -409, 131, -414, -416,
	-411, 349, 503, -420, 64, 533, -97, 533, -277, 83,
	-314, -277, 533, -261, 338, 299, 532, 533, 533, 542,
	-7, 423, 533, -318, -302, 247, -7, -97, -7, 532,
	532, 532, -253, -262, 304, -262, 393, -262, -246, -91,
	62, -282, -14, -14, 533, 29, 29, 532, 23, -211,
	-295, -7, -7, -289, 360, 94, 542, -289, 94, -7,
	61, -7, -285, 61, -7, 533, -67, 356, -67, 533,
	-194, 91, 90, 89, 94, -174, -131, -97, -12, 533,
	-205, -202, 532, -207, -208, -5, -213, 70, -40, 133,
	156, 542, 533, 23, -39, -220, 23, 149, 107, -38,
	107, 106, -378, -378, -378, -378, 153, 31, 47, -62,
	533, 542, -157, -164, -159, 537, 40, 532, -174, -37,
	542, 533, -275, 74, -272, 506, 532, -253, -297, -267,
	-268, -236, 507, 514, 514, -97, 533, -279, -395, -398,
	541, -67, -417, 51, -435, 263, -416, -412, 67, 412,
	-251, -318, -421, -283, 308, -258, 355, -266, -263, -264,
	74, 79, 370, 430, -308, 532, -38, -304, -302, -7,
	-267, -236, 141, -302, -323, -248, -245, -9, -84, -84,
	-313, 532, -313, -318, -313, 532, -136, 95, 96, -272,
	-132, -38, 299, -29, 83, 450, -382, 450, -7, -289,
	94, -7, 533, 533, 533, -13, 92, 92, -114, 533,
	-198, 533, 542, -67, 131, -213, -215, 542, -6, -224,
	130, -5, -7, -128, -129, 110, 98, 99, -130, 110,
	97, 70, -62, -62, -62, -62, -13, 537, 47, -13,
	537, -156, -152, -158, -164, -275, -318, -276, 229, -270,
	-271, -5, -197, 532, -37, -268, -297, -244, 507, 507,
	-421, -281, 304, 532, -404, 274, 532, -410, 412, 438,
	-378, 131, 23, 450, 310, -264, 74, -263, 74, 98,
	99, -307, 533, -302, 423, -244, -7, 533, 542, -60,
	533, 533, -277, -13, -277, -153, -277, -91, -137, 518,
	-136, 533, -308, -38, -7, -7, 450, 94, 70, 70,
	-174, -178, 23, 533, -208, -209, -210, 4, 40, 31,
	47, 129, 125, -40, 124, -222, -223, -221, 111, 94,
	111, -123, 103, 532, 40, 87, 108, 109, -13, 537,
	533, 542, -276, 27, 99, 381, 533, 542, -124, -124,
	-38, -275, -297, -37, -268, -260, 532, -155, -434, 287,
	386, -38, -419, -5, 263, -97, -7, -265, 355, 35,
	24, 94, -265, 533, 441, -7, 423, -302, -245, 61,
	-251, 533, -251, -261, -174, 533, 92, 93, -137, -289,
	-289, -7, -5, -13, -13, -5, -210, -39, -39, 47,
	-39, -212, 532, 542, 23, -114, -133, -113, 87, 532,
	-158, 128, 128, -271, -282, -14, -282, 533, -276, -37,
	-275, -297, -283, -280, -131, 533, -390, 533, 412, -421,
	196, 47, 40, -302, -7, 532, -266, -251, -289, 61,
	83, 94, 94, 124, -217, -218, -5, 132, -223, -6,
	156, 533, -84, -124, -275, -276, -37, -276, 533, 542,
	-281, 532, -417, -153, -153, -302, -84, -251, -41, -5,
	-5, -5, -207, 533, 542, 131, -67, -233, 129, -123,
	-123, 103, 533, -282, -276, -275, -174, -131, -260, -415,
	-418, -60, 6, -62, -6, 274, 533, 40, 533, -225,
	-226, 40, -227, 137, 47, 49, 43, 50, 139, -218,
	125, -219, -231, 29, 129, 7, -133, -276, -283, 533,
	542, -434, -41, 533, 74, -38, 135, 140, -229, 169,
	36, -219, -219, 7, 124, 23, 156, -276, -418, -390,
	83, 137, -230, 146, 145, 141, 135, 141, 135, 142,
	143, -229, -225, 532, -7, -123, -174, 532, -5, -228,
	-226, 144, 144, 141, 141, 135, 141, 135, 141, -230,
	-217, 124, -415, 74, 74, 74, 141, 141, -228, 533,
	532, 533, 139, 137, 147, 147, -217, -226, 148, 148,
	533, 74, 137,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 1252, 1253, 0, 1485, -2, 1548, 1548, 0, 0,
	0, 1257, 1311, 0, 1343, 0, 1262, 0, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 1484, 0, 0,
	0, 0, 43, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1613, 1614, 0, 0, -2, 1786, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1547, 0, 0, 0, 0, 0, 1928, 0, 1924,
	1925, 1926, 0, 0, 1930, 1931, 1932, 0, 0, 0,
	1531, 0, 1534, 1535, 1536, 1537, 1538, 1539, 0, 1909,
	241, 352, 386, 1914, 2268, 0, 469, 125, 342, -2,
	333, 419, 2283, 60, 61, 62, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
	211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
	221, 222, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 258, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 280, 281, 282,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
	303, 304, 305, 306, 307, 308, 309, 310, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	334, 335, 336, 337, 338, 339, 340, 341, 343, 344,
	345, 346, 347, 348, 349, 350, 351, 353, 354, 355,
	356, 357, 358, 359, 360, 361, 362, 363, 364, 365,
	366, 367, 368, 369, 370, 371, 372, 373, 374, 375,
	376, 377, 378, 379, 380, 381, 382, 383, 384, 385,
	387, 388, 389, 390, 391, 392, 393, 394, 395, 396,
	397, 398, 399, 400, 401, 402, 403, 404, 405, 406,
	407, 408, 409, 410, 411, 412, 413, 414, 415, 416,
	417, 418, 420, 421, 422, 423, 424, 425, 426, 427,
	428, 429, 430, 431, 432, 433, 434, 435, 436, 437,
	438, 439, 440, 441, 442, 443, 444, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455, 456, 457,
	458, 459, 460, 461, 462, 463, 464, 465, 466, 467,
	468, 470, 471, 472, 473, 474, 475, 476, 477, 478,
	479, 480, 481, 482, 483, 484, 485, 1923, 1915, 469,
	386, 352, 1919, 1920, 125, 241, 259, 333, 342, 419,
	1258, 0, 0, 0, 1264, 0, 1342, 1344, 1261, 1286,
	1287, 75, 0, 352, 386, 469, 0, 1308, 316, 1313,
	78, 70, 1309, 0, 2, 0, 0, 1291, 0, 0,
	0, 1254, 2126, 0, 0, 0, 0, 56, 0, 0,
	0, 0, 0, -2, 0, -2, 210, 1554, 92, 0,
	1242, 0, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235,
	1236, 1237, 1238, 1239, 1240, 1241, 2147, 0, 0, 210,
	1716, 210, 0, 0, 2213, 210, 0, 0, 1615, 1616,
	1617, 1618, 0, 210, 0, 0, 210, 0, 0, 210,
	0, 210, 0, 0, 0, 0, 0, 1140, 0, -2,
	-2, 1179, 486, 487, 488, 489, 490, 491, 492, 493,
	494, 495, 496, 497, 498, 499, 500, 501, 502, 503,
	504, 505, 506, 507, 508, 0, 0, 0, 0, 0,
	0, 0, 1823, 1824, 1825, 1826, 1827, 2303, 2304, 2305,
	2306, 0, 0, 0, 0, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 210, 48, 94, 210, 48, 71, 0,
	210, 48, 210, 1545, 1171, 1172, 1173, 1174, 1175, 1176,
	1185, 1188, 1189, 1190, 1191, 1192, 1223, 172, 1185, 1185,
	1185, 1198, 1199, 1200, 1201, 1202, 1219, 1219, 1177, 1178,
	1221, 1210, 1221, 1221, 1205, 0, 1221, 48, 210, 0,
	0, 1927, 0, 1929, 0, 1529, 1530, 1533, 56, 1910,
	352, 1911, 127, 0, 1912, 0, 2309, 0, 0, 2315,
	0, 0, 0, 0, 0, 0, 2271, 1122, 2272, 2273,
	2298, 2299, 2274, 2301, 2302, 0, 1916, 0, 1918, 1255,
	1256, 1349, 1263, 1265, 1269, 1270, 1039, 0, 0, 0,
	0, 1101, 1102, 1136, 0, 1105, 1106, 1107, 432, 0,
	1112, 1113, 436, 1224, 279, 1126, 1115, 1116, 1117, 1118,
	1119, 1120, 1155, 1245, 465, 1121, 0, 1349, 0, 1288,
	76, 1128, 0, 1131, 1289, 0, 0, 0, 1310, 0,
	0, 0, 1169, 0, 1449, 0, 1292, 0, 1471, 0,
	0, 0, 0, 0, 210, 2126, 0, 2162, 210, 43,
	55, 0, 0, 0, 0, 0, 0, 1619, 0, 2132,
	0, 0, 1553, 93, 0, 2145, 0, 0, 2146, 0,
	0, 0, 0, 0, 2152, 0, 0, 2170, 1714, 1715,
	0, 0, 0, 210, 2217, 0, 0, 0, 0, 0,
	1796, 1809, 1896, 1817, 0, 0, 0, 1896, 1896, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1888, 0, 0, 0, 1798, 1800, 0, 0,
	0, 0, 1801, 0, 2165, 1694, 0, 0, 0, 1698,
	1713, 1701, 0, 0, 0, 0, 1716, -2, 1711, 0,
	1803, 1896, 0, 0, 210, 0, 0, 210, 0, 0,
	1944, 0, 1141, 0, 0, 0, 0, 2136, 0, 0,
	0, 0, 0, 1938, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2210, 2211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2177, 1548, 2192, 2193, 0, 0,
	1898, 46, 47, 0, 0, 1900, 0, 0, 0, 1903,
	0, 1186, 1185, 0, 1193, 0, 1194, 1195, 1196, 1197,
	0, 1214, 0, 0, 0, 1216, 1212, 1220, 0, 1203,
	1204, 1221, 1221, 1208, 1905, 0, 48, 210, 0, 0,
	1532, 1933, 1934, 1935, 1936, 0, 0, 0, 2275, 2276,
	0, 2311, 2278, 0, 2313, 2314, 2316, 2269, 2279, 2281,
	2285, 2287, 2288, 1519, 1520, 1521, 1522, 1523, 0, 0,
	1526, 1123, 2280, 2282, 2284, 2270, 2289, 2290, 2291, 2292,
	2293, 2294, 2295, 2296, 2297, 2277, 2307, 2308, 1917, 1272,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 602, 856, 774, 1059, 1061,
	801, 0, 748, 641, 609, 0, -2, 753, 943, 0,
	1268, 853, 68, 69, 587, 588, 589, 590, 591, 592,
	593, 594, 595, 596, 597, 598, 599, 600, 601, 603,
	604, 605, 606, 607, 608, 610, 611, 612, 613, 614,
	615, 616, 618, 619, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 638, 639, 640, 642, 643, 644, 645, 646,
	647, 648, 649, 650, 651, 652, 653, 654, 655, 656,
	657, 658, 659, 660, 661, 662, 663, 664, 665, 666,
	667, 668, 669, 670, 671, 672, 673, 674, 675, 676,
	677, 678, 679, 680, 681, 682, 683, 684, 685, 686,
	687, 688, 689, 690, 691, 692, 693, 694, 695, 696,
	697, 698, 699, 700, 701, 702, 703, 704, 705, 706,
	707, 708, 709, 710, 711, 712, 713, 714, 715, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 749, 750, 751, 752, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 802, 803, 804, 805, 806, 807, 808, 809, 810,
	811, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 854, 855, 857, 858, 859, 860, 861, 862,
	863, 864, 865, 866, 867, 868, 869, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 896, 897, 898, 899, 900, 901, 902,
	903, 904, 905, 906, 907, 908, 909, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 930, 931, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 941, 942,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
	1034, 1035, 1036, 1037, 1038, 1040, 1041, 1057, 1074, 1103,
	1169, 0, 1107, 473, 1108, 1109, 1110, 1111, 0, 0,
	0, -2, 0, 1154, 1246, 0, 0, 1272, 0, 1129,
	1132, 1133, 1180, 63, 64, 65, 66, 67, 509, 510,
	511, 512, 513, 514, 515, 516, 517, 518, 519, 520,
	521, 522, 523, 524, 525, 526, 527, 528, 529, 530,
	531, 532, 533, 534, 535, 536, 537, 538, 539, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 1130, 0, 0, 0,
	1314, 1318, 0, 0, 1325, 0, 0, 0, 0, 0,
	0, 0, 1248, 0, 0, 0, 1584, 1451, 0, 0,
	0, 0, 1272, 1462, 0, 0, 1136, 1293, 1332, 0,
	0, 1480, 1480, 1477, 1478, 0, 73, 1622, 0, 0,
	0, 1795, 0, 2159, 2161, 0, 0, 0, 210, 42,
	2041, 0, 2041, 0, 2082, 2083, 0, 0, 0, 2144,
	0, 0, 0, 2263, 2262, 2264, 2265, 2266, 2267, -2,
	43, 1674, 0, 1182, 0, 2345, 2347, 1243, 1363, 0,
	0, 0, 0, 0, 0, 2154, 0, 2167, 0, 2204,
	1622, 0, 0, 0, 2216, 2212, 0, 0, 2227, 2228,
	0, 0, 210, 2126, 0, 0, 0, 0, 1895, 0,
	0, 1828, 210, 0, 1852, 0, 0, 1731, 0, 1685,
	0, 0, -2, 0, 0, 0, 0, 0, 0, 1860,
	1861, 0, 0, 1881, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1874, 0, 0, 1876, 1877, 0,
	1882, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1695, 1699, 1704, 1705, 1696, 1697, 0, 1712, 1702,
	1703, 0, 0, 0, 0, 0, 0, 0, 0, 1805,
	1896, 0, 0, 1807, 1896, 0, 2204, 0, 1937, 0,
	0, 0, 0, 0, 1894, 0, 0, 0, 0, 2139,
	0, 2250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2209, 2214, 2215,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 0, 2175, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1540, 1541, 1542, 1543, 1544, 1928, 48, 95, 48, 72,
	48, 0, 1546, 48, 1187, 0, 0, 0, 0, 0,
	0, 0, 0, 1206, 1207, 48, 1907, 0, 0, 0,
	2261, 0, 2310, 2312, 0, 0, 2320, 0, 1124, 1524,
	1125, 1525, 1328, 0, 1348, 1266, 1042, 1043, 1044, 1045,
	1046, 1047, 1048, -2, -2, -2, -2, -2, -2, 1055,
	1056, 1058, 0, -2, 0, 0, 1248, 0, 0, -2,
	1070, 0, 1072, 1073, 0, 0, 1249, 1079, 1250, 0,
	0, 1267, 1137, 1136, 0, 0, 0, 1163, 1164, 0,
	0, 1160, 1156, 0, 1247, 0, 1167, 1142, 1244, 0,
	0, 0, 1148, 1150, 0, -2, 1328, 0, 1134, 1131,
	1290, 1326, 0, 1316, 0, 77, 1170, 1606, 0, 0,
	1456, 1457, 0, 1458, 1136, 1455, 1450, 1332, 0, 0,
	0, 1467, 1466, 1606, 0, 1470, 1273, 1335, 1335, 0,
	1278, 0, 1335, 1335, 1335, 1353, 338, 485, 450, 75,
	1139, 0, 0, 1479, 0, 0, 2125, 0, 1621, 1623,
	1625, 1626, 1627, 0, 1651, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2055, 2040, 2042, 0, 0, 0,
	2047, 2048, 0, 2063, 2064, 2065, 2066, 0, 0, 2071,
	0, 0, 0, 0, 2076, 0, 0, 2079, 0, 2020,
	2021, 2023, 0, 0, 2030, 2031, 2032, 2033, 2035, -2,
	2037, 0, 2055, 0, 0, 2085, 2087, 2088, 2089, 2091,
	2084, 0, 2143, 0, 0, 0, 0, 2233, 2237, 2235,
	1177, 2126, 0, 2131, 0, 0, 0, -2, 2135, 1183,
	2344, 0, 0, 0, 1362, 1364, 0, 2246, 2158, 2148,
	2149, 2150, 2151, 0, 2169, 0, 0, 0, 2174, 1716,
	1666, 2203, 2201, 0, 0, 0, 0, 0, 0, 0,
	2213, 0, 0, 0, 0, 1774, 1818, 1965, 0, 0,
	0, 56, 0, 1830, 210, 1649, 0, 0, 0, 2000,
	0, 0, 0, 0, 0, 0, 1550, 0, 2000, 210,
	48, 210, 48, 1854, 1857, 1859, 0, 1880, 0, 2009,
	2012, 1858, 1862, 1865, 1866, 0, 0, 0, 0, 1870,
	0, 1867, 1868, 1869, 1873, 0, 1875, 0, 1878, 1883,
	2340, 2341, 2342, 0, 0, 0, 2332, 2334, 353, 101,
	173, 0, 1670, 1797, 1810, 1896, 0, 1973, 1892, 1799,
	0, 0, 1967, 1700, 1706, 1707, 1708, 1710, 1802, 0,
	2166, 1969, 0, 1804, 1896, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -2, 1945, 1946, 1947, 1948, 1949,
	0, 2137, 48, 210, 1893, 2138, 0, 0, 2000, 2142,
	1952, 1953, 0, 0, 0, 0, 0, 1959, 1960, 1961,
	1962, 1963, 1964, 0, 0, 0, 1990, 1991, 0, 1992,
	1993, 0, 0, 0, 0, 1998, 0, 0, 0, 0,
	2244, 2176, 0, 2179, 2180, 2181, 0, 2183, 2184, 2185,
	129, 191, 0, 2188, 2189, 0, 2191, 1897, 1899, 1901,
	0, 1904, 1184, 1222, 1219, 1217, 1218, 1219, 0, 1209,
	1906, 48, 0, 0, 2255, 0, 1913, 2317, 2318, 2319,
	2286, 1259, 0, 1271, 1060, 0, -2, -2, 0, 0,
	1080, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	-2, 1104, 1170, 1161, 1162, 0, 1114, 1225, 0, 1157,
	0, 0, 1138, 1166, 0, 0, 1244, 1244, 1244, 0,
	0, 1260, 1345, 0, 1130, 0, 1317, 1448, 0, 1587,
	0, 0, 0, 1460, 1606, 1463, 1464, 0, 0, 1469,
	1330, 150, 0, 0, 0, 0, 0, 1305, 1305, 1305,
	1303, 1275, 1334, 0, 1339, 1276, 1335, 1335, 1335, 1335,
	1335, 1278, 0, 1280, 1282, 1284, 1350, 0, 0, 0,
	0, -2, 0, 1716, 1481, 1482, 1483, -2, 74, 1764,
	0, 1631, 1766, 0, 1651, 0, 0, 1794, 0, 2162,
	1789, 0, 2041, 0, 0, 2036, 1185, 2017, 2053, 0,
	0, 2043, 2044, 2049, 2045, 2046, 0, 0, 0, 2069,
	2070, 2072, 2073, 2074, 2075, 2077, 2078, 352, 386, 2019,
	0, 0, 0, 0, 2029, 0, 2028, 2034, 1185, 0,
	2018, 0, 0, 0, 0, 2229, 2230, 0, 0, 0,
	2236, 0, 0, 1795, 0, 0, 2134, 1673, 0, 1676,
	1677, 0, 0, 1722, 1685, 0, 0, 0, 0, 0,
	1679, 0, 2346, 2348, 2321, 2322, 2323, 2324, 2325, 2326,
	1226, 279, 1230, 1231, 2156, 0, 1368, 0, 2245, 2247,
	2153, 0, 2171, 2172, 2173, 2170, 2194, 0, 2202, 2197,
	2205, 2198, 2200, 2199, 1764, 1651, 0, 0, 2217, 1666,
	0, 2261, 0, 1795, 0, 0, 0, 1889, 0, 1661,
	1890, 1891, 0, 0, 1645, 1648, 0, 1730, 1789, 0,
	0, 1734, 1683, 0, 0, 0, 2000, 0, 0, 1788,
	1832, 0, 0, 0, 0, 1845, 0, 1851, 1688, -2,
	0, 1853, 0, 1849, 0, 1856, 1879, 2338, 2339, 2008,
	0, 0, 0, 1863, 1871, 1864, 1872, 1884, 1885, 0,
	0, 1886, 2331, 0, 2335, 2336, 2337, 1669, 1671, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1971, 0, 1806, 1896, 0, 1975, 0, 1808, 1896,
	0, 2195, 0, 2140, 0, 2249, 0, 2252, 1954, 0,
	0, 0, 0, 0, 0, 1989, 0, 0, 0, 0,
	0, 0, 0, 2240, 0, 2178, 0, 0, 0, 1939,
	0, 0, 48, 1213, 1215, 1211, 1908, 2225, 0, 2259,
	0, 1327, -2, 0, 0, 0, 0, -2, -2, 1071,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1087, 1088, 0, 1251, 0, 1168,
	1165, 1153, 1159, 0, 1143, 0, 1149, 0, 0, 0,
	0, 1151, 1152, 1135, 0, 1605, 0, 0, 0, 1452,
	1453, 0, 1459, 1461, 0, 1468, 0, 1274, 0, 0,
	0, 0, 0, 1300, 1304, 1301, 1302, 1337, 0, 1277,
	1281, 1283, 1285, 1294, 1352, 0, 0, 480, 0, 1435,
	0, 1491, 1716, 0, 1551, 1766, 0, 1624, 1628, 1774,
	1765, 0, 0, 1652, 1654, 1655, 1674, 0, 1622, 0,
	0, 2130, 1795, 2160, 0, 0, 2055, 0, 0, 2058,
	2056, 0, 0, 0, 0, 2067, 2068, 2022, 2024, 2025,
	2026, 2027, 0, 0, 2093, 2086, 2090, 0, 0, 2234,
	0, 2238, 0, 2239, 0, 0, 2263, 0, 1678, 1680,
	1721, 2328, 2328, 0, 1726, 2126, 0, 1686, 0, 1681,
	1682, 0, 1365, 1366, 0, 2157, 0, 2155, 2168, 0,
	2206, 0, 0, 1622, 0, 0, 0, 2222, 0, 2253,
	0, 1780, 1773, 1977, 1983, 0, 1829, 0, 1666, 1644,
	0, 1646, 1647, 2000, 0, 2001, 0, 2003, 0, 0,
	1684, 1783, 0, 1736, 0, 0, 1741, 0, 1598, 1598,
	0, 0, 1836, 1846, 1549, 1692, 0, 0, 0, 0,
	1840, 1842, 1843, 1841, 0, 1689, 0, 0, 0, 0,
	48, 48, 2010, 2011, 2014, 1887, 2343, 2333, 1966, 0,
	0, 0, 0, 1974, 0, 0, 1968, 1979, 1970, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1951, 1950,
	48, 2000, 0, 0, 1957, 0, 1987, 1988, 2224, 1994,
	1995, 1996, 1997, 48, 2243, 0, 0, 51, 0, 0,
	0, 0, 0, 0, 1902, 0, 2260, -2, -2, 0,
	0, 0, -2, 1086, 1089, 1090, 1091, 1092, 1093, 1094,
	-2, -2, -2, -2, -2, -2, -2, -2, 1158, 1244,
	1144, 1146, 1147, 1321, 0, 0, 1590, 0, 0, 1465,
	1331, 1333, 1295, 0, 1297, 0, 0, 0, 1299, 0,
	0, 1279, 0, 1354, 1358, 0, 0, 0, 0, 1394,
	1434, 0, 1606, 1473, 1573, 1573, 0, 1475, 1488, 0,
	1491, 0, 1774, 0, 0, 0, 59, 0, 1650, 0,
	1656, 0, 1766, 0, 1651, 0, 2121, 0, 0, 0,
	0, 2015, 0, 1359, 0, 1181, 0, -2, 2050, 0,
	2051, 2061, 2038, 0, 2103, 0, 2120, 0, 2231, 0,
	0, 2133, 1675, 0, 1782, 0, 1782, 0, 1750, 0,
	1687, 0, 1367, 2248, 0, 1667, 0, 0, 0, 0,
	1666, 0, 0, 0, 2258, 0, 0, 0, 0, 1831,
	1674, 1642, 1643, 1732, 1746, 2002, 2006, 2004, 2005, 2007,
	1746, 0, 1746, 0, 0, 1592, 45, 0, 1593, 0,
	1833, 0, 0, 1693, 1834, 0, 1838, 1527, 1528, 0,
	0, 0, 1368, 1691, 1839, 1848, 1855, 0, 0, 0,
	1820, 0, 1821, 1820, 0, 0, 1981, 1972, 0, 0,
	0, 1985, 1976, 0, 2141, 2251, 1955, 1956, 0, 1999,
	2241, 2242, 0, 2186, 2187, 1940, 0, 0, 2190, 2226,
	-2, -2, -2, 0, 1324, 0, 0, 1583, 1328, 0,
	1586, 0, 1296, 0, 1307, 1298, 0, 1338, 1353, 0,
	1356, 0, 0, 1371, 0, 119, 0, 1375, 0, 0,
	1396, 1433, 1472, 1474, 0, 0, 0, 1568, 0, 1490,
	1492, 1493, 1554, 1554, 1496, 1497, 1554, 1554, 0, 0,
	0, 1507, 1515, 1328, 1486, 59, 0, 79, 1629, 1632,
	1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1630,
	1778, 0, 0, 0, 1653, 1674, 1774, 1764, 1766, 1651,
	0, 0, 0, 0, 0, 1789, 0, 2041, 1361, 2062,
	2054, 0, 2059, 2060, 0, 2039, 2109, 2105, 2092, 2094,
	0, 2097, 2098, 2000, 0, 2232, 2130, 1795, 1723, 0,
	2327, 1724, 1740, 1755, 0, 1720, 0, 1227, 1665, 0,
	1666, 0, 1764, 1651, 2207, 0, 1666, 2261, 1779, 0,
	0, 0, 1672, 2328, 0, 2328, 0, 2328, 1742, 1743,
	279, 1601, 44, 1597, 1598, 1837, 1847, 0, 0, 2330,
	2013, 1978, 1984, 1811, 1819, 0, 0, 1813, 0, 1980,
	0, 1820, 0, 0, 1958, 2182, 0, 0, 0, 1145,
	1315, 0, 0, 0, 0, 1585, 1591, 1454, 0, 1336,
	1351, 1355, 0, 0, 1381, 0, 1372, 0, 1373, 1369,
	1370, 0, 0, 0, 1378, 1398, 0, 0, 0, 1572,
	0, 1570, 0, 0, 0, 0, 0, 0, 0, 1506,
	1489, 0, 1509, 1510, 1511, 1512, 1513, 0, 1476, 1778,
	0, 1763, 1780, 0, 57, 58, 0, 1657, 59, 1766,
	1774, 0, 2127, 0, 0, 2130, 1791, 0, 1360, 2055,
	2057, 2052, 0, 0, 0, 2104, 2095, 1554, 2099, 2100,
	0, 2119, 2122, 0, 0, 1725, 0, 1727, 1751, 1752,
	0, 1747, 1748, 1749, 1728, 0, 0, 1668, 2218, 1666,
	0, 0, 0, 2223, 2254, 0, 1663, 0, 0, 0,
	1782, 0, 1782, 2126, 1782, 0, 1604, 1599, 1600, 1601,
	1594, 0, 1720, 1850, 0, 0, 1822, 0, 1982, 1815,
	0, 1986, 1941, 1943, 1942, 0, 0, 0, 1328, 1341,
	0, 1379, 0, 1383, 0, 1374, 1376, 0, 1377, 0,
	0, 1395, 1432, 1563, 1564, 0, 0, 1575, 1565, 0,
	0, 0, 1494, 1495, 1498, 1499, 1500, 1501, 0, 1504,
	1505, 1508, 0, 1516, 1518, 1780, 80, 1609, 0, 0,
	1768, 1598, 1598, 0, 1778, 1774, 59, 1766, 2128, 2129,
	2123, 1685, 0, 0, 2016, 0, 0, 2102, 2106, 2107,
	0, 0, 0, 0, 1739, 1753, 0, 1754, 0, 0,
	0, 0, 0, 2220, 0, 0, 1666, 1658, 0, 1662,
	1659, 0, 2000, 0, 2000, 1750, 1328, 0, 1595, 0,
	1604, 1835, 1844, 2329, 1820, 1820, 0, 0, 0, 0,
	1582, 1306, 0, 1357, 1382, 1385, 1386, 0, 0, 0,
	1391, 0, 1384, 0, 0, 1397, 1399, 0, 1566, 0,
	1567, 1576, 0, 0, 0, 0, 1569, 1571, 1502, 1503,
	1514, 0, 1607, 1775, 0, 0, 1767, 0, 45, 45,
	0, 1780, 59, 1778, 1774, 1795, 0, 0, 0, 2110,
	2111, 0, 2096, 2101, 0, 2130, 1781, 1756, 0, 1759,
	1760, 0, 1757, 1719, 1729, 1666, 0, 2208, 1664, 0,
	1733, 1745, 1735, 1755, 2000, 1744, 1602, 1603, 1596, 1812,
	1814, 1820, 0, 0, 0, 1340, 1387, 1388, 1389, 1390,
	1392, 0, 0, 0, 0, 1574, 0, 0, 1580, 0,
	1517, 1776, 1777, 1769, 1770, 44, 1771, 1598, 1611, 1778,
	1780, 59, 1780, 0, 1792, 1791, 0, 2108, 2109, 2124,
	1758, 2126, 2126, 2219, 1666, 0, 2000, 1738, 1816, 0,
	0, 0, 0, 0, 0, 1438, 0, -2, 1400, 1401,
	0, 0, 0, 45, 1780, 1610, 1778, 1328, 1790, 0,
	1685, 2114, 0, 1761, 1762, 2221, 0, 1737, 0, 1323,
	1319, 1320, 0, 1417, 0, 0, 1447, 0, 1436, 1577,
	1578, 0, 1581, 1772, 1608, 1780, 1784, 1793, 1795, 0,
	2112, 2115, 2116, 2117, 2118, 0, 1660, 0, 1380, 0,
	0, 0, 1403, 1404, 1405, 1406, 1407, 1408, 1411, 1439,
	1440, 1426, 1447, 1447, 0, 0, 0, 1612, 1780, 2080,
	0, 0, 0, 1393, 0, 1402, 1409, 1410, 1431, 0,
	0, 1426, 1417, 1446, 0, 0, 0, 1328, 2113, 0,
	0, 1416, 1415, 0, 0, 1418, 0, 1420, 0, 0,
	0, 1431, 1443, 0, 0, 1579, 1785, 2114, 1322, 1441,
	0, 1428, 1430, 1419, 1421, 0, 1424, 0, 1425, 1415,
	0, 0, 0, 0, 0, 0, 1422, 1423, 1442, 1444,
	0, 2081, 1412, 1413, 0, 0, 0, 0, 1427, 1429,
	1445, 0, 1414,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 539, 3, 3,
	532, 533, 537, 535, 542, 536, 534, 538, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 543, 541,
	526, 528, 527, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 530, 3, 531, 540,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 525, 57868, 529, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:470
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:485
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:493
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:508
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:519
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:520
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:521
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:522
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:523
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:524
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:525
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:526
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:527
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:528
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:529
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:530
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:531
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:532
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:533
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:534
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:535
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:536
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:537
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:538
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:539
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:540
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:541
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:542
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:543
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:544
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:545
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:546
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:547
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:548
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:549
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:550
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:551
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:552
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:553
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:554
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:556
		{
			yyVAL.stmt = nil
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:567
		{
			yyVAL.str = yyDollar[1].str
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:568
		{
			yyVAL.str = ""
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:572
		{
			yyVAL.list = yyDollar[1].list
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:573
		{
			yyVAL.list = nil
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:577
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:578
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:579
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:583
		{
			yyVAL.ival = 1
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:584
		{
			yyVAL.ival = 0
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:588
		{
			yyVAL.ival = 1
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:589
		{
			yyVAL.ival = 0
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:593
		{
			yyVAL.ival = 1
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:594
		{
			yyVAL.ival = 0
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:598
		{
			yyVAL.bval = true
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:599
		{
			yyVAL.bval = false
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:603
		{
			yyVAL.list = yyDollar[2].list
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:604
		{
			yyVAL.list = nil
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:605
		{
			yyVAL.list = nil
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:614
		{
			yyVAL.str = yyDollar[1].str
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:615
		{
			yyVAL.str = yyDollar[1].str
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:616
		{
			yyVAL.str = yyDollar[1].str
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:620
		{
			yyVAL.str = yyDollar[1].str
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:621
		{
			yyVAL.str = yyDollar[1].str
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:622
		{
			yyVAL.str = yyDollar[1].str
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:623
		{
			yyVAL.str = yyDollar[1].str
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:624
		{
			yyVAL.str = yyDollar[1].str
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:627
		{
			yyVAL.str = yyDollar[1].str
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:628
		{
			yyVAL.str = yyDollar[1].str
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:631
		{
			yyVAL.str = yyDollar[1].str
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:636
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:640
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:649
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:653
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:661
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:668
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:697
		{
			yyVAL.list = yyDollar[2].list
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:698
		{
			yyVAL.list = nil
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:703
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:707
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:720
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:726
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:732
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:738
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:744
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:751
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:758
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:764
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:770
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:779
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:783
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:795
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:799
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:809
		{
			yyVAL.str = "abort"
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:810
		{
			yyVAL.str = "absent"
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:811
		{
			yyVAL.str = "absolute"
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:812
		{
			yyVAL.str = "access"
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:813
		{
			yyVAL.str = "action"
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:814
		{
			yyVAL.str = "add"
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:815
		{
			yyVAL.str = "admin"
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:816
		{
			yyVAL.str = "after"
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:817
		{
			yyVAL.str = "aggregate"
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:818
		{
			yyVAL.str = "also"
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:819
		{
			yyVAL.str = "alter"
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:820
		{
			yyVAL.str = "always"
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:821
		{
			yyVAL.str = "asensitive"
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:822
		{
			yyVAL.str = "assertion"
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:823
		{
			yyVAL.str = "assignment"
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:824
		{
			yyVAL.str = "at"
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:825
		{
			yyVAL.str = "atomic"
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:826
		{
			yyVAL.str = "attach"
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:827
		{
			yyVAL.str = "attribute"
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:828
		{
			yyVAL.str = "backward"
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:829
		{
			yyVAL.str = "before"
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:830
		{
			yyVAL.str = "begin"
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:831
		{
			yyVAL.str = "breadth"
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:832
		{
			yyVAL.str = "by"
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:833
		{
			yyVAL.str = "cache"
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:834
		{
			yyVAL.str = "call"
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:835
		{
			yyVAL.str = "called"
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:836
		{
			yyVAL.str = "cascade"
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:837
		{
			yyVAL.str = "cascaded"
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:838
		{
			yyVAL.str = "catalog"
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:839
		{
			yyVAL.str = "chain"
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:840
		{
			yyVAL.str = "characteristics"
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:841
		{
			yyVAL.str = "checkpoint"
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:842
		{
			yyVAL.str = "class"
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:843
		{
			yyVAL.str = "close"
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:844
		{
			yyVAL.str = "cluster"
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:845
		{
			yyVAL.str = "columns"
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:846
		{
			yyVAL.str = "comment"
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:847
		{
			yyVAL.str = "comments"
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:848
		{
			yyVAL.str = "commit"
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:849
		{
			yyVAL.str = "committed"
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:850
		{
			yyVAL.str = "compression"
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:851
		{
			yyVAL.str = "conditional"
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:852
		{
			yyVAL.str = "configuration"
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:853
		{
			yyVAL.str = "conflict"
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:854
		{
			yyVAL.str = "connection"
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:855
		{
			yyVAL.str = "constraints"
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:856
		{
			yyVAL.str = "content"
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:857
		{
			yyVAL.str = "continue"
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:858
		{
			yyVAL.str = "conversion"
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:859
		{
			yyVAL.str = "copy"
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:860
		{
			yyVAL.str = "cost"
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:861
		{
			yyVAL.str = "csv"
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:862
		{
			yyVAL.str = "cube"
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:863
		{
			yyVAL.str = "current"
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:864
		{
			yyVAL.str = "cursor"
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:865
		{
			yyVAL.str = "cycle"
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:866
		{
			yyVAL.str = "data"
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:867
		{
			yyVAL.str = "database"
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:868
		{
			yyVAL.str = "day"
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:869
		{
			yyVAL.str = "deallocate"
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:870
		{
			yyVAL.str = "declare"
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:871
		{
			yyVAL.str = "defaults"
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:872
		{
			yyVAL.str = "deferred"
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:873
		{
			yyVAL.str = "definer"
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:874
		{
			yyVAL.str = "delete"
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:875
		{
			yyVAL.str = "delimiter"
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:876
		{
			yyVAL.str = "delimiters"
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:877
		{
			yyVAL.str = "depends"
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:878
		{
			yyVAL.str = "depth"
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:879
		{
			yyVAL.str = "detach"
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:880
		{
			yyVAL.str = "dictionary"
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:881
		{
			yyVAL.str = "disable"
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:882
		{
			yyVAL.str = "discard"
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:883
		{
			yyVAL.str = "document"
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:884
		{
			yyVAL.str = "domain"
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:885
		{
			yyVAL.str = "double"
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:886
		{
			yyVAL.str = "drop"
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:887
		{
			yyVAL.str = "each"
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:888
		{
			yyVAL.str = "empty"
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:889
		{
			yyVAL.str = "enable"
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:890
		{
			yyVAL.str = "encoding"
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:891
		{
			yyVAL.str = "encrypted"
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:892
		{
			yyVAL.str = "enum"
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:893
		{
			yyVAL.str = "error"
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:894
		{
			yyVAL.str = "escape"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:895
		{
			yyVAL.str = "event"
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:896
		{
			yyVAL.str = "exclude"
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:897
		{
			yyVAL.str = "excluding"
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:898
		{
			yyVAL.str = "exclusive"
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:899
		{
			yyVAL.str = "execute"
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:900
		{
			yyVAL.str = "explain"
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:901
		{
			yyVAL.str = "expression"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:902
		{
			yyVAL.str = "extension"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:903
		{
			yyVAL.str = "external"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:904
		{
			yyVAL.str = "family"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:905
		{
			yyVAL.str = "filter"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:906
		{
			yyVAL.str = "finalize"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:907
		{
			yyVAL.str = "first"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:908
		{
			yyVAL.str = "following"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:909
		{
			yyVAL.str = "force"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:910
		{
			yyVAL.str = "format"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:911
		{
			yyVAL.str = "forward"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:912
		{
			yyVAL.str = "function"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:913
		{
			yyVAL.str = "functions"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:914
		{
			yyVAL.str = "generated"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:915
		{
			yyVAL.str = "global"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:916
		{
			yyVAL.str = "granted"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:917
		{
			yyVAL.str = "groups"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:918
		{
			yyVAL.str = "handler"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:919
		{
			yyVAL.str = "header"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:920
		{
			yyVAL.str = "hold"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:921
		{
			yyVAL.str = "hour"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:922
		{
			yyVAL.str = "identity"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:923
		{
			yyVAL.str = "if"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:924
		{
			yyVAL.str = "immediate"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:925
		{
			yyVAL.str = "immutable"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:926
		{
			yyVAL.str = "implicit"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:927
		{
			yyVAL.str = "import"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:928
		{
			yyVAL.str = "include"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:929
		{
			yyVAL.str = "including"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:930
		{
			yyVAL.str = "increment"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:931
		{
			yyVAL.str = "indent"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:932
		{
			yyVAL.str = "index"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:933
		{
			yyVAL.str = "indexes"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:934
		{
			yyVAL.str = "inherit"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:935
		{
			yyVAL.str = "inherits"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:936
		{
			yyVAL.str = "inline"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:937
		{
			yyVAL.str = "input"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:938
		{
			yyVAL.str = "insensitive"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:939
		{
			yyVAL.str = "insert"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:940
		{
			yyVAL.str = "instead"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:941
		{
			yyVAL.str = "invoker"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:942
		{
			yyVAL.str = "isolation"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:943
		{
			yyVAL.str = "keep"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:944
		{
			yyVAL.str = "key"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:945
		{
			yyVAL.str = "keys"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:946
		{
			yyVAL.str = "label"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:947
		{
			yyVAL.str = "language"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:948
		{
			yyVAL.str = "large"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:949
		{
			yyVAL.str = "last"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:950
		{
			yyVAL.str = "leakproof"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:951
		{
			yyVAL.str = "level"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:952
		{
			yyVAL.str = "listen"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:953
		{
			yyVAL.str = "load"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:954
		{
			yyVAL.str = "local"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:955
		{
			yyVAL.str = "location"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:956
		{
			yyVAL.str = "lock"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:957
		{
			yyVAL.str = "locked"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:958
		{
			yyVAL.str = "logged"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:959
		{
			yyVAL.str = "mapping"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:960
		{
			yyVAL.str = "match"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:961
		{
			yyVAL.str = "matched"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:962
		{
			yyVAL.str = "materialized"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:963
		{
			yyVAL.str = "maxvalue"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:964
		{
			yyVAL.str = "merge"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:965
		{
			yyVAL.str = "method"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:966
		{
			yyVAL.str = "minute"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:967
		{
			yyVAL.str = "minvalue"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:968
		{
			yyVAL.str = "mode"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:969
		{
			yyVAL.str = "month"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:970
		{
			yyVAL.str = "move"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:971
		{
			yyVAL.str = "name"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:972
		{
			yyVAL.str = "names"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:973
		{
			yyVAL.str = "nested"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:974
		{
			yyVAL.str = "new"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:975
		{
			yyVAL.str = "next"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:976
		{
			yyVAL.str = "nfc"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:977
		{
			yyVAL.str = "nfd"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:978
		{
			yyVAL.str = "nfkc"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:979
		{
			yyVAL.str = "nfkd"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:980
		{
			yyVAL.str = "no"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:981
		{
			yyVAL.str = "normalized"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:982
		{
			yyVAL.str = "nothing"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:983
		{
			yyVAL.str = "notify"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:984
		{
			yyVAL.str = "nowait"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:985
		{
			yyVAL.str = "nulls"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:986
		{
			yyVAL.str = "object"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:987
		{
			yyVAL.str = "of"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:988
		{
			yyVAL.str = "off"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:989
		{
			yyVAL.str = "oids"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:990
		{
			yyVAL.str = "old"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:991
		{
			yyVAL.str = "omit"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:992
		{
			yyVAL.str = "operator"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:993
		{
			yyVAL.str = "option"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:994
		{
			yyVAL.str = "options"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:995
		{
			yyVAL.str = "ordinality"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:996
		{
			yyVAL.str = "others"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:997
		{
			yyVAL.str = "over"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:998
		{
			yyVAL.str = "overriding"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:999
		{
			yyVAL.str = "owned"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1000
		{
			yyVAL.str = "owner"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1001
		{
			yyVAL.str = "parallel"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1002
		{
			yyVAL.str = "parameter"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1003
		{
			yyVAL.str = "parser"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1004
		{
			yyVAL.str = "partial"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1005
		{
			yyVAL.str = "partition"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1006
		{
			yyVAL.str = "passing"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1007
		{
			yyVAL.str = "password"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1008
		{
			yyVAL.str = "path"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1009
		{
			yyVAL.str = "plan"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1010
		{
			yyVAL.str = "plans"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1011
		{
			yyVAL.str = "policy"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1012
		{
			yyVAL.str = "preceding"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1013
		{
			yyVAL.str = "prepare"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1014
		{
			yyVAL.str = "prepared"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1015
		{
			yyVAL.str = "preserve"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1016
		{
			yyVAL.str = "prior"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1017
		{
			yyVAL.str = "privileges"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1018
		{
			yyVAL.str = "procedural"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1019
		{
			yyVAL.str = "procedure"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1020
		{
			yyVAL.str = "procedures"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1021
		{
			yyVAL.str = "program"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1022
		{
			yyVAL.str = "publication"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1023
		{
			yyVAL.str = "quote"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1024
		{
			yyVAL.str = "quotes"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1025
		{
			yyVAL.str = "range"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1026
		{
			yyVAL.str = "read"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1027
		{
			yyVAL.str = "reassign"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1028
		{
			yyVAL.str = "recheck"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1029
		{
			yyVAL.str = "recursive"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1030
		{
			yyVAL.str = "ref"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1031
		{
			yyVAL.str = "referencing"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1032
		{
			yyVAL.str = "refresh"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1033
		{
			yyVAL.str = "reindex"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1034
		{
			yyVAL.str = "relative"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1035
		{
			yyVAL.str = "release"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1036
		{
			yyVAL.str = "rename"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1037
		{
			yyVAL.str = "repeatable"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1038
		{
			yyVAL.str = "replace"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1039
		{
			yyVAL.str = "replica"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1040
		{
			yyVAL.str = "reset"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1041
		{
			yyVAL.str = "restart"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1042
		{
			yyVAL.str = "restrict"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1043
		{
			yyVAL.str = "return"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1044
		{
			yyVAL.str = "returns"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1045
		{
			yyVAL.str = "revoke"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1046
		{
			yyVAL.str = "role"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1047
		{
			yyVAL.str = "rollback"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1048
		{
			yyVAL.str = "rollup"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.str = "routine"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.str = "routines"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.str = "rows"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1052
		{
			yyVAL.str = "rule"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "savepoint"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "scalar"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "schema"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "schemas"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "scroll"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "search"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "second"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "security"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "sequence"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "sequences"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "serializable"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "server"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "session"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "set"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "sets"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "share"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "show"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "simple"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "skip"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "snapshot"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "source"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "sql"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "stable"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "standalone"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "start"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "statement"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "statistics"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "stdin"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "stdout"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "storage"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "stored"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "strict"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "string"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "strip"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "subscription"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "support"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "sysid"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "system"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "tables"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "tablespace"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "target"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "temp"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "template"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "temporary"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "text"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "ties"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "transaction"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "transform"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "trigger"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "truncate"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "trusted"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "type"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "types"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "uescape"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "unbounded"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "uncommitted"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "unconditional"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "unencrypted"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "unknown"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "unlisten"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "unlogged"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "until"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "update"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "vacuum"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "valid"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "validate"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "validator"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "value"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "varying"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "version"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "view"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "views"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "volatile"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "whitespace"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "within"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "without"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "work"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "wrapper"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "write"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "xml"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "year"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "yes"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "zone"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "between"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "bigint"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "bit"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "boolean"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "char"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "character"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "coalesce"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "dec"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "decimal"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "exists"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "extract"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "float"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "greatest"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "grouping"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "inout"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "int"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "integer"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "interval"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "json"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.str = "json_array"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1169
		{
			yyVAL.str = "json_arrayagg"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.str = "json_exists"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "json_object"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "json_objectagg"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "json_query"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.str = "json_scalar"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.str = "json_serialize"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			yyVAL.str = "json_table"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1177
		{
			yyVAL.str = "json_value"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = "least"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = "merge_action"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "national"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "nchar"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "none"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "normalize"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "nullif"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "numeric"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "out"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "overlay"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "position"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "precision"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "real"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "row"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "setof"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "smallint"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1194
		{
			yyVAL.str = "substring"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "time"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "timestamp"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "treat"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.str = "trim"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.str = "values"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.str = "varchar"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.str = "xmlattributes"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "xmlconcat"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "xmlelement"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = "xmlexists"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = "xmlforest"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1207
		{
			yyVAL.str = "xmlparse"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1208
		{
			yyVAL.str = "xmlpi"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1209
		{
			yyVAL.str = "xmlroot"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1210
		{
			yyVAL.str = "xmlserialize"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1211
		{
			yyVAL.str = "xmltable"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "authorization"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "binary"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "collation"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "concurrently"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "cross"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "current_schema"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "freeze"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "full"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "ilike"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "inner"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.str = "is"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1236
		{
			yyVAL.str = "isnull"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.str = "join"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1238
		{
			yyVAL.str = "left"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1239
		{
			yyVAL.str = "like"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1240
		{
			yyVAL.str = "natural"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.str = "notnull"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1242
		{
			yyVAL.str = "outer"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1243
		{
			yyVAL.str = "overlaps"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1244
		{
			yyVAL.str = "right"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.str = "similar"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1246
		{
			yyVAL.str = "tablesample"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1247
		{
			yyVAL.str = "verbose"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "all"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.str = "analyse"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.str = "analyze"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "and"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "any"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "array"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "as"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "asc"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "asymmetric"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "both"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "case"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "cast"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.str = "check"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1270
		{
			yyVAL.str = "collate"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "column"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "constraint"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "create"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "current_catalog"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "current_date"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "current_role"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "current_time"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "current_timestamp"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.str = "current_user"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1280
		{
			yyVAL.str = "default"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1281
		{
			yyVAL.str = "deferrable"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1282
		{
			yyVAL.str = "desc"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1283
		{
			yyVAL.str = "distinct"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1284
		{
			yyVAL.str = "do"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1285
		{
			yyVAL.str = "else"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1286
		{
			yyVAL.str = "end"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1287
		{
			yyVAL.str = "except"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1288
		{
			yyVAL.str = "false"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1289
		{
			yyVAL.str = "fetch"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1290
		{
			yyVAL.str = "for"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1291
		{
			yyVAL.str = "foreign"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1292
		{
			yyVAL.str = "from"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1293
		{
			yyVAL.str = "grant"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1294
		{
			yyVAL.str = "group"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1295
		{
			yyVAL.str = "having"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1296
		{
			yyVAL.str = "in"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1297
		{
			yyVAL.str = "initially"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1298
		{
			yyVAL.str = "intersect"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1299
		{
			yyVAL.str = "into"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1300
		{
			yyVAL.str = "lateral"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.str = "leading"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.str = "limit"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "localtime"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "localtimestamp"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "not"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "null"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "offset"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "on"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "only"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "or"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.str = "order"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1312
		{
			yyVAL.str = "placing"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			yyVAL.str = "primary"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1314
		{
			yyVAL.str = "references"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.str = "returning"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1316
		{
			yyVAL.str = "select"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1317
		{
			yyVAL.str = "session_user"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1318
		{
			yyVAL.str = "some"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1319
		{
			yyVAL.str = "symmetric"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1320
		{
			yyVAL.str = "system_user"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1321
		{
			yyVAL.str = "table"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1322
		{
			yyVAL.str = "then"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1323
		{
			yyVAL.str = "to"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1324
		{
			yyVAL.str = "trailing"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1325
		{
			yyVAL.str = "true"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1326
		{
			yyVAL.str = "union"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1327
		{
			yyVAL.str = "unique"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1328
		{
			yyVAL.str = "user"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1329
		{
			yyVAL.str = "using"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1330
		{
			yyVAL.str = "variadic"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1331
		{
			yyVAL.str = "when"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1332
		{
			yyVAL.str = "where"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1333
		{
			yyVAL.str = "window"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1334
		{
			yyVAL.str = "with"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1347
		{
			yyVAL.str = "abort"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1348
		{
			yyVAL.str = "absent"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1349
		{
			yyVAL.str = "absolute"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1350
		{
			yyVAL.str = "access"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1351
		{
			yyVAL.str = "action"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1352
		{
			yyVAL.str = "add"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1353
		{
			yyVAL.str = "admin"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1354
		{
			yyVAL.str = "after"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1355
		{
			yyVAL.str = "aggregate"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1356
		{
			yyVAL.str = "all"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1357
		{
			yyVAL.str = "also"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "alter"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "always"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "analyse"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1361
		{
			yyVAL.str = "analyze"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1362
		{
			yyVAL.str = "and"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.str = "any"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1364
		{
			yyVAL.str = "asc"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1365
		{
			yyVAL.str = "asensitive"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1366
		{
			yyVAL.str = "assertion"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1367
		{
			yyVAL.str = "assignment"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1368
		{
			yyVAL.str = "asymmetric"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1369
		{
			yyVAL.str = "at"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1370
		{
			yyVAL.str = "atomic"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.str = "attach"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1372
		{
			yyVAL.str = "attribute"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1373
		{
			yyVAL.str = "authorization"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1374
		{
			yyVAL.str = "backward"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1375
		{
			yyVAL.str = "before"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1376
		{
			yyVAL.str = "begin"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1377
		{
			yyVAL.str = "between"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.str = "bigint"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1379
		{
			yyVAL.str = "binary"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1380
		{
			yyVAL.str = "bit"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1381
		{
			yyVAL.str = "boolean"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1382
		{
			yyVAL.str = "both"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1383
		{
			yyVAL.str = "breadth"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1384
		{
			yyVAL.str = "by"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1385
		{
			yyVAL.str = "cache"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1386
		{
			yyVAL.str = "call"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1387
		{
			yyVAL.str = "called"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1388
		{
			yyVAL.str = "cascade"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1389
		{
			yyVAL.str = "cascaded"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1390
		{
			yyVAL.str = "case"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1391
		{
			yyVAL.str = "cast"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1392
		{
			yyVAL.str = "catalog"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "chain"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.str = "characteristics"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.str = "check"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1396
		{
			yyVAL.str = "checkpoint"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.str = "class"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.str = "close"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1399
		{
			yyVAL.str = "cluster"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1400
		{
			yyVAL.str = "coalesce"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1401
		{
			yyVAL.str = "collate"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.str = "collation"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1403
		{
			yyVAL.str = "column"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1404
		{
			yyVAL.str = "columns"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1405
		{
			yyVAL.str = "comment"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1406
		{
			yyVAL.str = "comments"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1407
		{
			yyVAL.str = "commit"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1408
		{
			yyVAL.str = "committed"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1409
		{
			yyVAL.str = "compression"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1410
		{
			yyVAL.str = "concurrently"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1411
		{
			yyVAL.str = "conditional"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1412
		{
			yyVAL.str = "configuration"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1413
		{
			yyVAL.str = "conflict"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1414
		{
			yyVAL.str = "connection"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1415
		{
			yyVAL.str = "constraint"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1416
		{
			yyVAL.str = "constraints"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1417
		{
			yyVAL.str = "content"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "continue"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1419
		{
			yyVAL.str = "conversion"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "copy"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "cost"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "cross"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "csv"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "cube"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "current"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "current_catalog"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "current_date"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "current_role"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "current_schema"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "current_time"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "current_timestamp"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "current_user"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "cursor"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "cycle"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "data"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = "database"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1437
		{
			yyVAL.str = "deallocate"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1438
		{
			yyVAL.str = "dec"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1439
		{
			yyVAL.str = "decimal"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1440
		{
			yyVAL.str = "declare"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1441
		{
			yyVAL.str = "default"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1442
		{
			yyVAL.str = "defaults"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1443
		{
			yyVAL.str = "deferrable"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1444
		{
			yyVAL.str = "deferred"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1445
		{
			yyVAL.str = "definer"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1446
		{
			yyVAL.str = "delete"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1447
		{
			yyVAL.str = "delimiter"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1448
		{
			yyVAL.str = "delimiters"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1449
		{
			yyVAL.str = "depends"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "depth"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "desc"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "detach"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "dictionary"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "disable"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1455
		{
			yyVAL.str = "discard"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1456
		{
			yyVAL.str = "distinct"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1457
		{
			yyVAL.str = "do"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.str = "document"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1459
		{
			yyVAL.str = "domain"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1460
		{
			yyVAL.str = "double"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1461
		{
			yyVAL.str = "drop"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1462
		{
			yyVAL.str = "each"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.str = "else"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = "empty"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1465
		{
			yyVAL.str = "enable"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1466
		{
			yyVAL.str = "encoding"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.str = "encrypted"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1468
		{
			yyVAL.str = "end"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "enum"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1470
		{
			yyVAL.str = "error"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.str = "escape"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1472
		{
			yyVAL.str = "event"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.str = "exclude"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.str = "excluding"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1475
		{
			yyVAL.str = "exclusive"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1476
		{
			yyVAL.str = "execute"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.str = "exists"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "explain"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1479
		{
			yyVAL.str = "expression"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.str = "extension"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1481
		{
			yyVAL.str = "external"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "extract"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "false"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "family"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "finalize"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "first"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.str = "float"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1488
		{
			yyVAL.str = "following"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = "force"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = "foreign"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.str = "format"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1492
		{
			yyVAL.str = "forward"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			yyVAL.str = "freeze"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "full"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "function"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "functions"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.str = "generated"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1498
		{
			yyVAL.str = "global"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1499
		{
			yyVAL.str = "granted"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = "greatest"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "grouping"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "groups"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "handler"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "header"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "hold"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "identity"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "if"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "ilike"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "immediate"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "immutable"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "implicit"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "import"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "in"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "include"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "including"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "increment"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "indent"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "index"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "indexes"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "inherit"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "inherits"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "initially"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "inline"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "inner"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "inout"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "input"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "insensitive"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "insert"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "instead"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "int"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "integer"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "interval"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "invoker"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "is"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "isolation"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "join"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "json"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "json_array"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "json_arrayagg"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "json_exists"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "json_object"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "json_objectagg"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "json_query"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "json_scalar"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "json_serialize"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "json_table"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "json_value"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "keep"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "key"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "keys"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "label"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "language"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "large"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "last"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "lateral"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "leading"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "leakproof"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "least"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "left"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "level"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "like"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "listen"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "load"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "local"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "localtime"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "localtimestamp"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "location"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "lock"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "locked"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "logged"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "mapping"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "match"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "matched"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "materialized"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "maxvalue"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "merge"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "merge_action"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1578
		{
			yyVAL.str = "method"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1579
		{
			yyVAL.str = "minvalue"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1580
		{
			yyVAL.str = "mode"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1581
		{
			yyVAL.str = "move"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1582
		{
			yyVAL.str = "name"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1583
		{
			yyVAL.str = "names"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1584
		{
			yyVAL.str = "national"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1585
		{
			yyVAL.str = "natural"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1586
		{
			yyVAL.str = "nchar"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1587
		{
			yyVAL.str = "nested"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1588
		{
			yyVAL.str = "new"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1589
		{
			yyVAL.str = "next"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1590
		{
			yyVAL.str = "nfc"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "nfd"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "nfkc"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			yyVAL.str = "nfkd"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1594
		{
			yyVAL.str = "no"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.str = "none"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "normalize"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "normalized"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "not"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "nothing"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "notify"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "nowait"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "null"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "nullif"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "nulls"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "numeric"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "object"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "of"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "off"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "oids"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "old"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "omit"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "only"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "operator"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "option"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "options"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "or"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "ordinality"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "others"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "out"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "outer"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "overlay"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "overriding"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "owned"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "owner"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "parallel"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "parameter"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "parser"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "partial"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "partition"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "passing"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "password"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "path"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "placing"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "plan"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "plans"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "policy"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "position"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "preceding"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "prepare"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "prepared"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "preserve"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "primary"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "prior"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "privileges"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "procedural"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "procedure"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "procedures"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "program"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "publication"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "quote"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "quotes"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "range"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "read"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "real"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "reassign"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "recheck"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "recursive"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "ref"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "references"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "referencing"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "refresh"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "reindex"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "relative"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "release"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "rename"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "repeatable"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "replace"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "replica"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "reset"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "restart"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "restrict"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "return"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "returns"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "revoke"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "right"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "role"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "rollback"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "rollup"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "routine"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "routines"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "row"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "rows"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "rule"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "savepoint"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "scalar"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "schema"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "schemas"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "scroll"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "search"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "security"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "select"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "sequence"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "sequences"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "serializable"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "server"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "session"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "session_user"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "set"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "setof"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "sets"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "share"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "show"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "similar"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "simple"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "skip"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "smallint"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "snapshot"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "some"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "source"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "sql"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "stable"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "standalone"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "start"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "statement"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "statistics"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "stdin"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "stdout"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "storage"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "stored"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "strict"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "string"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "strip"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "subscription"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "substring"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "support"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "symmetric"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "sysid"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "system"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "system_user"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "table"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "tables"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "tablesample"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "tablespace"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "target"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "temp"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "template"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "temporary"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "text"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "then"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "ties"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "time"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "timestamp"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "trailing"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "transaction"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "transform"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "treat"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "trigger"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "trim"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "true"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "truncate"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "trusted"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "type"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "types"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "uescape"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.str = "unbounded"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1756
		{
			yyVAL.str = "uncommitted"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1757
		{
			yyVAL.str = "unconditional"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1758
		{
			yyVAL.str = "unencrypted"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.str = "unique"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.str = "unknown"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1761
		{
			yyVAL.str = "unlisten"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1762
		{
			yyVAL.str = "unlogged"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.str = "until"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1764
		{
			yyVAL.str = "update"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1765
		{
			yyVAL.str = "user"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1766
		{
			yyVAL.str = "using"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1767
		{
			yyVAL.str = "vacuum"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1768
		{
			yyVAL.str = "valid"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.str = "validate"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1770
		{
			yyVAL.str = "validator"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.str = "value"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1772
		{
			yyVAL.str = "values"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1773
		{
			yyVAL.str = "varchar"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1774
		{
			yyVAL.str = "variadic"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			yyVAL.str = "verbose"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1776
		{
			yyVAL.str = "version"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1777
		{
			yyVAL.str = "view"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1778
		{
			yyVAL.str = "views"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1779
		{
			yyVAL.str = "volatile"
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1780
		{
			yyVAL.str = "when"
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.str = "whitespace"
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1782
		{
			yyVAL.str = "work"
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1783
		{
			yyVAL.str = "wrapper"
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1784
		{
			yyVAL.str = "write"
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1785
		{
			yyVAL.str = "xml"
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1786
		{
			yyVAL.str = "xmlattributes"
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1787
		{
			yyVAL.str = "xmlconcat"
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1788
		{
			yyVAL.str = "xmlelement"
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1789
		{
			yyVAL.str = "xmlexists"
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1790
		{
			yyVAL.str = "xmlforest"
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1791
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1792
		{
			yyVAL.str = "xmlparse"
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1793
		{
			yyVAL.str = "xmlpi"
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1794
		{
			yyVAL.str = "xmlroot"
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1795
		{
			yyVAL.str = "xmlserialize"
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1796
		{
			yyVAL.str = "xmltable"
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1797
		{
			yyVAL.str = "yes"
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1798
		{
			yyVAL.str = "zone"
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1813
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1040:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1815
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1041:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1820
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1042:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1825
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1043:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1829
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1044:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1834
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1045:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1839
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1046:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1844
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1047:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1849
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1048:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1854
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1049:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1859
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1050:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1864
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1051:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1869
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1052:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1874
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1053:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1879
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1054:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1884
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1055:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1889
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1056:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1893
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1057:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1897
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1058:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1901
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1059:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1905
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1060:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1909
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1061:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1913
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1062:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1917
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1063:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1922
		{
			// Create like_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1064:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1930
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1065:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1935
		{
			// Create like_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1066:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1943
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1067:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1948
		{
			// Create like_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1068:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:1956
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1069:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1961
		{
			// Create like_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1969
		{
			// Pass the NodeList directly to NewCollateClause
			nodeList := yyDollar[3].list
			collateClause := ast.NewCollateClause(nodeList)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1071:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1977
		{
			// Create timezone function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1983
		{
			// Create timezone function call with no argument
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1989
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1074:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1993
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1075:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:1997
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1076:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2002
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1077:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2007
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1078:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2012
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1079:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2017
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1080:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2022
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1081:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2027
		{
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1082:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2032
		{
			// Create similar_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1083:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2040
		{
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1084:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2045
		{
			// Create similar_escape function call
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2054
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2056
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1087:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2060
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1088:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2065
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1089:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2070
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1090:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2075
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1091:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2080
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2085
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1093:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2090
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1094:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2095
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1095:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2100
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1096:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2105
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1097:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2110
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1098:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2115
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1099:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2120
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2125
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2131
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2132
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2134
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2143
		{
			parenExpr := ast.NewParenExpr(yyDollar[2].node, 0)
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewA_Indirection(parenExpr, yyDollar[4].list, 0)
			} else {
				yyVAL.node = parenExpr
			}
		}
	case 1105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2151
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2152
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2154
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2158
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2163
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2167
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2171
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2175
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2181
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2187
		{
			// TODO: Fix GROUPING function implementation
			// Current implementation is simplified and needs proper expr_list handling
			// The expr_list should be properly converted to NodeList and assigned to Args
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     nil, // We'll need to convert expr_list properly
			}
			yyVAL.node = grouping
		}
	case 1115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2201
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2205
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2209
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2213
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2217
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2221
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2226
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2229
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2232
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2233
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2234
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2239
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2243
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2253
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2257
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2263
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2264
		{
			yyVAL.node = nil
		}
	case 1132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2268
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2272
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2276
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2280
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2285
		{
			yyVAL.list = nil
		}
	case 1137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2287
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2299
		{
			// For now, just return the func_application
			// Note: In full implementation, would apply within_group_clause, filter_clause, over_clause
			yyVAL.node = yyDollar[1].node
		}
	case 1139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2308
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2312
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2316
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2327
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2331
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1144:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2337
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1145:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:2343
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1146:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2351
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1147:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2357
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2365
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2369
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2376
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2380
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2384
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1153:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2391
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2396
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2397
		{
			yyVAL.node = nil
		}
	case 1156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2401
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2403
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2411
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2417
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2418
		{
			yyVAL.node = nil
		}
	case 1161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2423
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2427
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2431
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2436
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2438
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2445
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2446
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1168:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2450
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2458
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2462
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2471
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2476
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2477
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2478
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2479
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2480
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2483
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2484
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2485
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2488
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2491
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2495
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2499
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2506
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2510
		{
			yyVAL.list = nil
		}
	case 1186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2516
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2522
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2533
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2537
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2541
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2545
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2549
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2553
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2557
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2561
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2565
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2569
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2573
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2579
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2583
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2589
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2593
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2599
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2607
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2615
		{
			yyVAL.str = "varchar"
		}
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2619
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2627
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2635
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1209:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2645
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2656
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1211:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2670
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2682
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1213:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2694
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2704
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1215:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2714
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2724
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2735
		{
			yyVAL.ival = 1
		}
	case 1218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2736
		{
			yyVAL.ival = 0
		}
	case 1219:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2737
		{
			yyVAL.ival = 0
		}
	case 1220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2740
		{
			yyVAL.ival = 1
		}
	case 1221:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2741
		{
			yyVAL.ival = 0
		}
	case 1222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2745
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1223:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2755
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2762
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2766
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2773
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1227:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2777
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2782
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2783
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2786
		{
			yyVAL.str = "+"
		}
	case 1231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2787
		{
			yyVAL.str = "-"
		}
	case 1232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2788
		{
			yyVAL.str = "*"
		}
	case 1233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2789
		{
			yyVAL.str = "/"
		}
	case 1234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2790
		{
			yyVAL.str = "%"
		}
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2791
		{
			yyVAL.str = "^"
		}
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2792
		{
			yyVAL.str = "<"
		}
	case 1237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2793
		{
			yyVAL.str = ">"
		}
	case 1238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2794
		{
			yyVAL.str = "="
		}
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2795
		{
			yyVAL.str = "<="
		}
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2796
		{
			yyVAL.str = ">="
		}
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2797
		{
			yyVAL.str = "<>"
		}
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2801
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2805
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1244:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2813
		{
			yyVAL.list = nil
		}
	case 1245:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2816
		{
			yyVAL.node = nil
		}
	case 1246:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2819
		{
			yyVAL.node = nil
		}
	case 1247:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2822
		{
			yyVAL.node = nil
		}
	case 1248:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2825
		{
			yyVAL.ival = 0
		}
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2826
		{
			yyVAL.ival = 0
		}
	case 1250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2830
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2835
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2850
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2851
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2855
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2860
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2861
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2869
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2871
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1259:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2885
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			yyVAL.stmt = selectStmt
		}
	case 1260:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2897
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			yyVAL.stmt = selectStmt
		}
	case 1261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2909
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2919
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2930
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1264:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2931
		{
			yyVAL.list = nil
		}
	case 1265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2935
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2936
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2941
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2945
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2950
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2955
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2966
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2967
		{
			yyVAL.list = nil
		}
	case 1273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2971
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2972
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2981
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2989
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3000
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3011
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3015
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3021
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			if yyDollar[2].alias != nil {
				rangeFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeFunc
		}
	case 1281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3029
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeFunc
		}
	case 1282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3038
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3046
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3055
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3063
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3075
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3081
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3088
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3094
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3100
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3110
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3114
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3120
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3137
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3141
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1296:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3150
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3176
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3202
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3210
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3220
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3221
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3222
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3223
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3228
		{
			yyVAL.ival = 1
		}
	case 1305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3229
		{
			yyVAL.ival = 0
		}
	case 1306:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3239
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3250
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3261
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3265
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3269
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3275
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3276
		{
			yyVAL.with = nil
		}
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3281
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3285
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1315:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3293
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3321
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3322
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3323
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1319:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3328
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1320:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3334
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3340
		{
			yyVAL.node = nil
		}
	case 1322:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:3347
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1323:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3356
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3364
		{
			yyVAL.node = nil
		}
	case 1325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3375
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = []*ast.NodeList{exprList}
			yyVAL.stmt = selectStmt
		}
	case 1326:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3383
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists = append(selectStmt.ValuesLists, exprList)
			yyVAL.stmt = selectStmt
		}
	case 1327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3397
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3398
		{
			yyVAL.node = nil
		}
	case 1329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3402
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3410
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1331:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3412
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3416
		{
			yyVAL.node = nil
		}
	case 1333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3420
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3428
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3429
		{
			yyVAL.alias = nil
		}
	case 1336:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3434
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3439
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3443
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3448
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3456
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3460
		{
			yyVAL.alias = nil
		}
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3468
		{
			yyVAL.ival = 1
		}
	case 1343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3469
		{
			yyVAL.ival = 0
		}
	case 1344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3473
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1345:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3474
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3478
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3479
		{
			yyVAL.list = nil
		}
	case 1348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3489
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].rangevar, nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3492
		{
			yyVAL.into = nil
		}
	case 1350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3503
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1351:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3512
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3522
		{
			yyVAL.ival = 1
		}
	case 1353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3523
		{
			yyVAL.ival = 0
		}
	case 1354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3529
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3533
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3540
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1357:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3549
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3550
		{
			yyVAL.list = nil
		}
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3560
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3564
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3576
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3589
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3590
		{
			yyVAL.list = nil
		}
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3596
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3600
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3609
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3620
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3625
		{
			yyVAL.node = nil
		}
	case 1369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3630
		{
			yyVAL.str = "BY REF"
		}
	case 1370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3631
		{
			yyVAL.str = "BY VALUE"
		}
	case 1371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3637
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3641
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3645
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3649
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3657
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3661
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3669
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3674
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1379:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3683
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1380:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:3691
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3702
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3706
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3715
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3720
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3725
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3735
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3739
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3748
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3752
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3756
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3760
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3764
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1393:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:3777
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3801
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3812
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3813
		{
			yyVAL.node = nil
		}
	case 1397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3818
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3819
		{
			yyVAL.node = nil
		}
	case 1399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3823
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3824
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3829
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3837
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3845
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3856
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3857
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3858
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3859
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3860
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3861
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3862
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3863
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3868
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3872
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1414:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3876
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3880
		{
			yyVAL.node = nil
		}
	case 1416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3885
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3886
		{
			yyVAL.node = nil
		}
	case 1418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3891
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3892
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3893
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3894
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1422:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3895
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3896
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3897
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3898
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3899
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1427:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3904
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3905
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1429:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3906
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3907
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1431:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3908
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3914
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3934
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3944
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3945
		{
			yyVAL.node = nil
		}
	case 1436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3950
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3951
		{
			yyVAL.node = nil
		}
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3957
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3961
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3970
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1441:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3979
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1442:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3993
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1443:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4007
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1444:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4018
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1445:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4027
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4038
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4039
		{
			yyVAL.node = nil
		}
	case 1448:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4055
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4067
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4071
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4080
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1452:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4086
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1453:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4093
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1454:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4100
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4108
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4117
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4118
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4123
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4127
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4135
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1461:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4147
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4160
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4164
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4175
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1465:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4181
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4201
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4207
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4208
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1469:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4218
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4230
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1471:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4234
		{
			yyVAL.list = nil
		}
	case 1472:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4249
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4266
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4270
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1475:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4281
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1476:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:4305
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4341
		{
			yyVAL.ival = 1
		}
	case 1478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4342
		{
			yyVAL.ival = 0
		}
	case 1479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4346
		{
			yyVAL.ival = 1
		}
	case 1480:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4347
		{
			yyVAL.ival = 0
		}
	case 1481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4351
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4352
		{
			yyVAL.str = ""
		}
	case 1483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4353
		{
			yyVAL.str = ""
		}
	case 1484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4358
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4361
		{
			yyVAL.node = nil
		}
	case 1486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4366
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4369
		{
			yyVAL.node = nil
		}
	case 1488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4373
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4374
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4379
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1491:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4387
		{
			yyVAL.list = nil
		}
	case 1492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4394
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4398
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4402
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4406
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4410
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4414
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4418
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4422
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4426
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4430
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4434
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1503:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4438
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4442
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4446
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4450
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4458
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4462
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4469
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4475
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4476
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4477
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4478
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4479
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4480
		{
			yyVAL.node = nil
		}
	case 1516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4485
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4489
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4495
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4499
		{
			yyVAL.str = "true"
		}
	case 1520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4500
		{
			yyVAL.str = "false"
		}
	case 1521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4501
		{
			yyVAL.str = "on"
		}
	case 1522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4502
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4506
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4507
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4509
		{
			f := ast.NewFloat(yyDollar[2].str)
			f.FVal = "-" + f.FVal
			yyVAL.node = f
		}
	case 1526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4514
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4518
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4519
		{
			yyVAL.node = nil
		}
	case 1529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4523
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4524
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4525
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4526
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4527
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4528
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4529
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4530
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4534
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4535
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4536
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4540
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4541
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4542
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4543
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4544
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4549
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4554
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4566
		{
			yyVAL.ival = 1
		}
	case 1550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4567
		{
			yyVAL.ival = 0
		}
	case 1553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4583
		{
			yyVAL.node = nil
		}
	case 1554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4585
		{
			yyVAL.node = nil
		}
	case 1555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4593
		{
			yyVAL.ival = 1
		}
	case 1556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4594
		{
			yyVAL.ival = 0
		}
	case 1557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4598
		{
			yyVAL.ival = 1
		}
	case 1558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4599
		{
			yyVAL.ival = 0
		}
	case 1559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4603
		{
			yyVAL.ival = 1
		}
	case 1560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4604
		{
			yyVAL.ival = 0
		}
	case 1561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4608
		{
			yyVAL.ival = 1
		}
	case 1562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4609
		{
			yyVAL.ival = 0
		}
	case 1563:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4618
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1564:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4624
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4630
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1566:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4636
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1567:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4642
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4650
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1569:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4651
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4655
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1571:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4656
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4660
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1573:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4661
		{
			yyVAL.node = nil
		}
	case 1574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4666
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4681
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4690
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1577:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4697
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1578:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4704
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1579:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4717
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4730
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4739
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1582:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4754
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1583:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4764
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4772
		{
			yyVAL.onconflict = nil
		}
	case 1585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4783
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4792
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1587:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4799
		{
			yyVAL.node = nil
		}
	case 1588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4810
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4814
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4821
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4825
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4832
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4837
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4842
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1595:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4850
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1596:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4861
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4875
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4876
		{
			yyVAL.list = nil
		}
	case 1599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4880
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4881
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4882
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4886
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4887
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4888
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4893
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4897
		{
			yyVAL.list = nil
		}
	case 1607:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:4918
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1608:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:4934
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1609:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:4951
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1610:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:4967
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1611:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:4984
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1612:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:5001
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5019
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5020
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5021
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5022
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5023
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5024
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5025
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5026
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5030
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5031
		{
			yyVAL.list = nil
		}
	case 1623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5036
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5041
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5048
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5049
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5050
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5055
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5062
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5066
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5070
		{
			yyVAL.ival = 0
		}
	case 1632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5076
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5077
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5078
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5079
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5080
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5081
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5082
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5083
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5084
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5085
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5090
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5091
		{
			yyVAL.str = "default"
		}
	case 1644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5095
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5096
		{
			yyVAL.str = ""
		}
	case 1646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5100
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5101
		{
			yyVAL.str = "default"
		}
	case 1648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5105
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5106
		{
			yyVAL.str = ""
		}
	case 1650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5111
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5112
		{
			yyVAL.list = nil
		}
	case 1652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5117
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5123
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5130
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5131
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5136
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 1657:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5142
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 1658:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5153
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 1659:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5182
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 1660:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5191
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 1661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5201
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 1662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5210
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 1663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5217
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5221
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1665:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5229
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5230
		{
			yyVAL.list = nil
		}
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5235
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5239
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5247
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5253
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5258
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1672:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5263
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			colDef.Constraints = yyDollar[6].list
			yyVAL.node = colDef
		}
	case 1673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5275
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5280
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5287
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5292
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5293
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5295
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5308
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5313
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5318
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 1682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5323
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 1683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5331
		{
			yyVAL.bval = true
		}
	case 1684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5332
		{
			yyVAL.bval = false
		}
	case 1685:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5333
		{
			yyVAL.bval = true
		}
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5337
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 1687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5338
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5343
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5345
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5350
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5354
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5358
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 1693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5368
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 1694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5374
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5375
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5380
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 1697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5384
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5388
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 1699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5392
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 1700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5396
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5400
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 1702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5404
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 1703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5408
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 1704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5412
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 1705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5416
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 1706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5420
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 1707:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5424
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 1708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5428
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5432
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5436
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5440
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 1712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5446
		{
		}
	case 1713:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5447
		{
		}
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5451
		{
		}
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5452
		{
		}
	case 1716:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5453
		{
		}
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5458
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 1718:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5465
		{
			yyVAL.bval = false
		}
	case 1719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5469
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5470
		{
			yyVAL.list = nil
		}
	case 1721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5475
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5479
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 1723:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5483
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 1724:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5492
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 1725:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5498
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 1726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5504
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 1727:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5510
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 1728:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5527
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 1729:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5534
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 1730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5544
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5549
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1732:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5554
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 1733:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5562
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 1734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5573
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 1735:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:5584
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 1736:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5594
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 1737:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:5605
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 1738:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5626
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 1739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5640
		{
			yyVAL.bval = true
		}
	case 1740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5641
		{
			yyVAL.bval = false
		}
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5647
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5653
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5661
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 1744:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5666
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 1745:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5674
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1746:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5678
		{
			yyVAL.list = nil
		}
	case 1747:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5685
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 1748:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5689
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 1749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5693
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 1750:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5697
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5704
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5714
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 1753:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5724
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 1754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5731
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 1755:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5738
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 1756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5753
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 1757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5766
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 1758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5773
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5780
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5787
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1761:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5794
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 1762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5801
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 1763:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5810
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1764:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5811
		{
			yyVAL.list = nil
		}
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5815
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 1766:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5816
		{
			yyVAL.partspec = nil
		}
	case 1767:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5821
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 1768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5829
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5834
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5842
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 1771:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5849
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 1772:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5856
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 1773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5865
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1774:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5866
		{
			yyVAL.str = ""
		}
	case 1775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5870
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 1776:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5871
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 1777:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5872
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 1778:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5873
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 1779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5877
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1780:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5878
		{
			yyVAL.str = ""
		}
	case 1781:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5882
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1782:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5883
		{
			yyVAL.str = ""
		}
	case 1783:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5887
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1784:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:5900
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 1785:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:5915
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5931
		{
			yyVAL.bval = true
		}
	case 1787:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5932
		{
			yyVAL.bval = false
		}
	case 1788:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5936
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1789:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5937
		{
			yyVAL.str = "btree"
		}
	case 1790:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5941
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1791:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5942
		{
			yyVAL.list = nil
		}
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5947
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1793:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5952
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1794:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5960
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1795:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5961
		{
			yyVAL.list = nil
		}
	case 1796:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5973
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1797:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5979
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1798:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5986
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 1799:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5992
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1800:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5999
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 1801:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6008
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 1802:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6014
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1803:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6021
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 1804:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6027
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1805:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6034
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 1806:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6040
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1807:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6047
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1808:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6053
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1809:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6060
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1810:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6069
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1811:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6079
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 1812:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6086
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 1813:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6094
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 1814:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6101
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 1815:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:6109
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 1816:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6116
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 1817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6127
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1818:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6132
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6140
		{
			yyVAL.bval = true
		}
	case 1820:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6141
		{
			yyVAL.bval = false
		}
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6146
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].rolespec)
		}
	case 1822:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6151
		{
			yyDollar[1].list.Append(yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 1823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6159
		{
			roleSpec := yyDollar[1].rolespec

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 1824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6190
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.rolespec = roleSpec
		}
	case 1825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6213
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6220
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 1827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6227
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 1828:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6238
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1829:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6245
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1830:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6252
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1831:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6259
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1832:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6266
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 1833:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6271
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 1834:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6276
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 1835:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6281
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 1836:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6286
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 1837:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6291
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1838:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6298
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 1839:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6303
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 1840:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6310
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 1841:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6315
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 1842:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6320
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 1843:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6325
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 1844:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6330
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 1845:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6340
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 1846:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6345
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1847:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6352
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1848:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6359
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1849:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6367
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1850:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6378
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 1851:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6388
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 1852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6393
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 1853:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6398
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 1854:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6409
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 1855:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6414
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1856:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6422
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1857:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6430
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 1858:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6435
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 1859:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6440
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 1860:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6445
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 1861:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6450
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 1862:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6455
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 1863:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6460
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 1864:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6465
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 1865:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6470
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 1866:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6475
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 1867:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6480
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 1868:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6485
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 1869:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6490
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 1870:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6495
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 1871:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6500
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 1872:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6505
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 1873:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6510
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 1874:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6515
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 1875:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6520
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 1876:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6525
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 1877:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6531
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 1878:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6536
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].rolespec
			yyVAL.node = cmd
		}
	case 1879:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6543
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 1880:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6548
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 1881:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6553
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 1882:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6558
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 1883:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6563
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 1884:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6568
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 1885:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6573
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 1886:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6578
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 1887:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6583
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 1888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6587
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 1889:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6595
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1890:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6603
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1891:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6610
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1892:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6621
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1893:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6630
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1894:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6631
		{
			yyVAL.node = nil
		}
	case 1895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6635
		{
		}
	case 1896:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6636
		{
		}
	case 1897:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6647
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1898:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6660
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1899:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6673
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1900:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6686
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1901:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6699
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1902:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6714
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1903:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6729
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1904:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6742
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1905:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6755
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1906:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6768
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1907:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6781
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 1908:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6794
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 1909:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6810
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 1910:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6816
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 1911:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6822
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 1912:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6831
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 1913:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6835
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 1914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6838
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 1915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6842
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 1916:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6844
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 1917:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6848
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 1918:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6852
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 1919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6859
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 1920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6863
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 1921:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6869
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 1922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6870
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 1923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6874
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 1924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6879
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 1925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6880
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 1926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6881
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 1927:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6882
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 1928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6883
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 1929:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6884
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 1930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6885
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 1931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6886
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 1932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6887
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 1933:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6888
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 1934:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6889
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 1935:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6890
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 1936:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6891
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 1937:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6904
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1938:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6909
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 1939:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6923
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode: ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:  yyDollar[1].list,
				Objargs:  yyDollar[2].list,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 1940:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6935
		{
			yylex.Error("Use NONE to denote the missing argument of a unary operator.")
			return 1
		}
	case 1941:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6940
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, yyDollar[4].typnam)
		}
	case 1942:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6942
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[4].typnam)
		}
	case 1943:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6944
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, nil)
		}
	case 1944:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6948
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 1945:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6962
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1946:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6973
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1947:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6984
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1948:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6995
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1949:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7006
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1950:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7017
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1951:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7029
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1952:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7040
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1953:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7051
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1954:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7062
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1955:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7073
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1956:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7090
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1957:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7107
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1958:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7119
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1959:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7131
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1960:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7142
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1961:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7153
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1962:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7164
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1963:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7175
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1964:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7186
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1965:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7197
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1966:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7208
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1967:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7219
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1968:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7230
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1969:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7241
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1970:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7252
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1971:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7263
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1972:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7274
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1973:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7285
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1974:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7296
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1975:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7307
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1976:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7318
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1977:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7329
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1978:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7342
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1979:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7355
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1980:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7368
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1981:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7381
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1982:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7394
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1983:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7407
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1984:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7419
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1985:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7431
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1986:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7444
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 1987:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7457
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1988:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7469
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1989:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7481
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1990:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7492
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1991:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7503
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1992:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7514
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1993:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7525
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1994:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7536
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1995:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7547
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1996:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7558
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1997:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7569
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1998:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7580
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 1999:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7591
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2000:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7617
		{
			yyVAL.ival = 0
		}
	case 2001:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7619
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 2002:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7633
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 2003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7634
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 2004:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7635
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 2005:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7636
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 2006:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7637
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 2007:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7638
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 2008:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7642
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7647
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2010:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7652
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2011:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7660
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7664
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2013:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7668
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 2014:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7672
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 2015:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7686
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].ival != 0,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 2016:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:7700
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].ival != 0,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 2017:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7716
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].ival != 0,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2018:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7731
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].ival != 0,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2019:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7746
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2020:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7747
		{
			yyVAL.list = nil
		}
	case 2021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7752
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2022:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7756
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7764
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2024:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7768
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2025:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7773
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2026:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7781
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2027:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7790
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2028:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7799
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2029:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7808
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7817
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7828
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7829
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7830
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2034:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7831
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7832
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7836
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7840
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2038:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7842
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				// TODO: Add %TYPE indicator
			}
		}
	case 2039:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7852
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				Setof: true,
			}
		}
	case 2040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7864
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2041:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7865
		{
			yyVAL.list = nil
		}
	case 2042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7870
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2043:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7876
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2044:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7884
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2045:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7888
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2046:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7892
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7896
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7900
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7907
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2050:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7913
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2051:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7923
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2052:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7929
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7937
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2054:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7941
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2055:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7953
		{
			yyVAL.node = nil
		}
	case 2056:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7960
		{
			yyVAL.stmt = &ast.ReturnStmt{
				ReturnVal: yyDollar[2].node,
			}
		}
	case 2057:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7969
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2058:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7979
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7985
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7986
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2061:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7991
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 2062:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7995
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7999
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8003
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 2065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8007
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 2066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8011
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 2067:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8015
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2068:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8019
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2069:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8023
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2070:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8027
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2071:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8031
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 2072:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8035
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 2073:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8039
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 2074:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8043
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 2075:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8047
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 2076:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8051
		{
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 2077:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8055
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 2078:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8062
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8066
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2080:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:8082
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].ival != 0,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2081:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:8114
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].ival != 0,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2082:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8145
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2083:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8146
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2084:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8147
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2085:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8152
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2086:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8154
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8194
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2088:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8201
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2089:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8208
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2090:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8215
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2091:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8222
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2092:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8231
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2093:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8232
		{
			yyVAL.list = nil
		}
	case 2094:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8236
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2095:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8241
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2096:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8249
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2097:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8260
		{
			yyVAL.bval = true
		}
	case 2098:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8261
		{
			yyVAL.bval = false
		}
	case 2099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8265
		{
			yyVAL.bval = true
		}
	case 2100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8266
		{
			yyVAL.bval = false
		}
	case 2101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8270
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8275
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2103:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8279
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8291
		{
			yyVAL.bval = true
		}
	case 2107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8292
		{
			yyVAL.bval = false
		}
	case 2108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8296
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8297
		{
			yyVAL.node = nil
		}
	case 2112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8306
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8311
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2114:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8315
		{
			yyVAL.list = nil
		}
	case 2115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8320
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8323
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8324
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8325
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8329
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2120:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8330
		{
			yyVAL.rangevar = nil
		}
	case 2121:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8343
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2122:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8359
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2123:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:8375
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2124:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:8391
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8408
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8409
		{
			yyVAL.list = nil
		}
	case 2127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8413
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8414
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8415
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8416
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2131:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8427
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = yyDollar[5].rolespec
			n.SchemaElts = yyDollar[6].list
			yyVAL.stmt = n
		}
	case 2132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8434
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = nil
			n.SchemaElts = yyDollar[4].list
			yyVAL.stmt = n
		}
	case 2133:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8441
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = yyDollar[8].rolespec
			n.SchemaElts = yyDollar[9].list
			yyVAL.stmt = n
		}
	case 2134:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8448
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = nil
			n.SchemaElts = yyDollar[7].list
			yyVAL.stmt = n
		}
	case 2135:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8464
		{
			n := ast.NewCreateDomainStmt(yyDollar[3].list, yyDollar[5].typnam)
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			n.Constraints = constraints
			n.CollClause = collClause
			yyVAL.stmt = n
		}
	case 2136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8482
		{
			n := ast.NewAlterDomainStmt('T', yyDollar[3].list)
			n.Def = yyDollar[4].node
			yyVAL.stmt = n
		}
	case 2137:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8488
		{
			n := ast.NewAlterDomainStmt('N', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2138:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8493
		{
			n := ast.NewAlterDomainStmt('O', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2139:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8498
		{
			n := ast.NewAlterDomainStmt('C', yyDollar[3].list)
			n.Def = yyDollar[5].node
			yyVAL.stmt = n
		}
	case 2140:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8504
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[6].str
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			yyVAL.stmt = n
		}
	case 2141:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8512
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[8].str
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			yyVAL.stmt = n
		}
	case 2142:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8520
		{
			n := ast.NewAlterDomainStmt('V', yyDollar[3].list)
			n.Name = yyDollar[6].str
			yyVAL.stmt = n
		}
	case 2143:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8535
		{
			// Extract actual arguments from aggr_args which returns [args, position_indicator]
			var args *ast.NodeList
			if yyDollar[5].list != nil && yyDollar[5].list.Len() > 0 {
				// First element contains the actual arguments (or nil for *)
				if firstElem, ok := yyDollar[5].list.Items[0].(*ast.NodeList); ok {
					args = firstElem
				} else if yyDollar[5].list.Items[0] == nil {
					// Special case for COUNT(*) - create a list with a single nil element
					args = ast.NewNodeList(nil)
				}
			}
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, false, yyDollar[4].list, args, yyDollar[6].list, false, yyDollar[2].ival != 0)
			yyVAL.stmt = n
		}
	case 2144:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8551
		{
			// old-style (pre-8.2) syntax for CREATE AGGREGATE
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, true, yyDollar[4].list, nil, yyDollar[5].list, false, yyDollar[2].ival != 0)
			yyVAL.stmt = n
		}
	case 2145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8557
		{
			n := ast.NewDefineStmt(ast.OBJECT_OPERATOR, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8562
		{
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8567
		{
			// Shell type (identified by lack of definition)
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, nil, false, false)
			yyVAL.stmt = n
		}
	case 2148:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8573
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSPARSER, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2149:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8578
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSDICTIONARY, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2150:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8583
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSTEMPLATE, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2151:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8588
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSCONFIGURATION, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8593
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2153:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8598
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, yyDollar[7].list, true, false)
			yyVAL.stmt = n
		}
	case 2154:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8603
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, ast.NewNodeList(yyDollar[5].list), false, false)
			yyVAL.stmt = n
		}
	case 2155:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8608
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, ast.NewNodeList(yyDollar[8].list), true, false)
			yyVAL.stmt = n
		}
	case 2156:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8613
		{
			typevar, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(fmt.Sprintf("invalid type name: %v", err))
				return 1
			}

			n := ast.NewCompositeTypeStmt(typevar, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2157:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8624
		{
			n := ast.NewCreateEnumStmt(yyDollar[3].list, yyDollar[7].list)
			yyVAL.stmt = n
		}
	case 2158:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8629
		{
			n := ast.NewCreateRangeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2159:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8643
		{
			n := ast.NewCreateSeqStmt(yyDollar[4].rangevar, yyDollar[5].list, 0, false, false)
			yyVAL.stmt = n
		}
	case 2160:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8648
		{
			n := ast.NewCreateSeqStmt(yyDollar[7].rangevar, yyDollar[8].list, 0, false, true)
			yyVAL.stmt = n
		}
	case 2161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8655
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8656
		{
			yyVAL.list = nil
		}
	case 2163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8659
		{
		}
	case 2164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8660
		{
		}
	case 2165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8671
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[3].rangevar, yyDollar[4].list, false, false)
		}
	case 2166:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8675
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[5].rangevar, yyDollar[6].list, false, true)
		}
	case 2167:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8688
		{
			n := ast.NewCreateExtensionStmt(yyDollar[3].str, false, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2168:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8693
		{
			n := ast.NewCreateExtensionStmt(yyDollar[6].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8701
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8710
		{
			yyVAL.list = nil
		}
	case 2171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8717
		{
			yyVAL.defelt = ast.NewDefElem("schema", ast.NewString(yyDollar[2].str))
		}
	case 2172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8721
		{
			yyVAL.defelt = ast.NewDefElem("version", ast.NewString(yyDollar[2].str))
		}
	case 2173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8725
		{
			yylex.Error("CREATE EXTENSION ... FROM is no longer supported")
			return 1
		}
	case 2174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8730
		{
			yyVAL.defelt = ast.NewDefElem("cascade", ast.NewBoolean(true))
		}
	case 2175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8743
		{
			n := ast.NewAlterExtensionStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8751
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8760
		{
			yyVAL.list = nil
		}
	case 2178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8767
		{
			yyVAL.defelt = ast.NewDefElem("to", ast.NewString(yyDollar[2].str))
		}
	case 2179:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8780
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), ast.NewString(yyDollar[6].str))
		}
	case 2180:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8784
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), yyDollar[6].list)
		}
	case 2181:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8788
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_AGGREGATE), yyDollar[6].objwithargs)
		}
	case 2182:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8792
		{
			// CAST takes two TypeNames as a NodeList
			list := ast.NewNodeList(yyDollar[7].typnam)
			list.Append(yyDollar[9].typnam)
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_CAST), list)
		}
	case 2183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8799
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_DOMAIN), yyDollar[6].typnam)
		}
	case 2184:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8803
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_FUNCTION), yyDollar[6].objwithargs)
		}
	case 2185:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8807
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPERATOR), yyDollar[6].objwithargs)
		}
	case 2186:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8811
		{
			// OPERATOR CLASS takes method name + class name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then class name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPCLASS), list)
		}
	case 2187:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8820
		{
			// OPERATOR FAMILY takes method name + family name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then family name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPFAMILY), list)
		}
	case 2188:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8829
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_PROCEDURE), yyDollar[6].objwithargs)
		}
	case 2189:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8833
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_ROUTINE), yyDollar[6].objwithargs)
		}
	case 2190:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8837
		{
			list := ast.NewNodeList(yyDollar[7].typnam, ast.NewString(yyDollar[9].str))
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TRANSFORM), list)
		}
	case 2191:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8842
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TYPE), yyDollar[6].typnam)
		}
	case 2192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8847
		{
			yyVAL.ival = 1
		}
	case 2193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8848
		{
			yyVAL.ival = 0
		}
	case 2194:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8858
		{
			yyVAL.stmt = ast.NewCreateFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2195:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8864
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2196:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8868
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, nil)
		}
	case 2197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8874
		{
			yyVAL.defelt = ast.NewDefElem("handler", yyDollar[2].list)
		}
	case 2198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8875
		{
			yyVAL.defelt = ast.NewDefElem("handler", nil)
		}
	case 2199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8876
		{
			yyVAL.defelt = ast.NewDefElem("validator", yyDollar[2].list)
		}
	case 2200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8877
		{
			yyVAL.defelt = ast.NewDefElem("validator", nil)
		}
	case 2201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8881
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8882
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8886
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2204:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8887
		{
			yyVAL.list = nil
		}
	case 2205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8891
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8892
		{
			result := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				result.Append(item)
			}
			yyVAL.list = result
		}
	case 2207:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:8909
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].str, yyDollar[9].str, yyDollar[10].list, false)
		}
	case 2208:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:8914
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[6].str, yyDollar[7].str, yyDollar[8].str, yyDollar[12].str, yyDollar[13].list, true)
		}
	case 2209:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8920
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].list, true)
		}
	case 2210:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8924
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, nil, true)
		}
	case 2211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8928
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, "", yyDollar[4].list, false)
		}
	case 2212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8934
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2213:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8935
		{
			yyVAL.str = ""
		}
	case 2214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8939
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8940
		{
			yyVAL.str = ""
		}
	case 2216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8944
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2217:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8945
		{
			yyVAL.str = ""
		}
	case 2218:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8958
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[6].list, yyDollar[8].list, yyDollar[10].str, yyDollar[11].list, nil, false)
		}
	case 2219:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:8964
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[9].list, yyDollar[11].list, yyDollar[13].str, yyDollar[14].list, nil, true)
		}
	case 2220:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:8970
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[8].list, ast.NewNodeList(yyDollar[7].rangevar), yyDollar[11].str, yyDollar[12].list, yyDollar[9].partboundspec, false)
		}
	case 2221:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:8976
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[11].list, ast.NewNodeList(yyDollar[10].rangevar), yyDollar[14].str, yyDollar[15].list, yyDollar[12].partboundspec, true)
		}
	case 2222:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8988
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list, false)
		}
	case 2223:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8992
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[8].rolespec, yyDollar[10].str, yyDollar[11].list, true)
		}
	case 2224:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8998
		{
			yyVAL.stmt = ast.NewAlterUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list)
		}
	case 2225:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9004
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, false)
		}
	case 2226:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9008
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[7].rolespec, yyDollar[9].str, true)
		}
	case 2227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9014
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9015
		{
			yyVAL.rolespec = ast.NewRoleSpec(ast.ROLESPEC_CURRENT_USER, "")
		}
	case 2229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9020
		{
			// For aggregates like COUNT(*)
			// Return a list with [nil, -1] matching PostgreSQL's list_make2(NIL, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(nil, ast.NewInteger(-1))
		}
	case 2230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9026
		{
			// Regular aggregate arguments
			// Return a list with [args, -1] matching PostgreSQL's list_make2($2, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(yyDollar[2].list, ast.NewInteger(-1))
		}
	case 2231:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9032
		{
			// Ordered-set aggregate without direct arguments
			// Return a list with [args, 0] matching PostgreSQL's list_make2($4, makeInteger(0))
			yyVAL.list = ast.NewNodeList(yyDollar[4].list, ast.NewInteger(0))
		}
	case 2232:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9038
		{
			// Hypothetical-set aggregate
			// This is the only case requiring consistency checking in PostgreSQL
			result, err := makeOrderedSetArgs(yyDollar[2].list, yyDollar[5].list)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.list = result
		}
	case 2233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9052
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9056
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9064
		{
			yyVAL.node = yyDollar[1].funparam
		}
	case 2236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9071
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9078
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9082
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9090
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2240:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9097
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			n.NewValIsAfter = true
			yyVAL.stmt = n
		}
	case 2241:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9105
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = false
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2242:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9114
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = true
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2243:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9123
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.OldVal = yyDollar[6].str
			n.NewVal = yyDollar[8].str
			n.SkipIfNewValExists = false
			yyVAL.stmt = n
		}
	case 2244:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9131
		{
			// Following PostgreSQL's approach - DROP VALUE is parsed but not implemented
			// PostgreSQL throws an error saying "dropping an enum value is not implemented"
			yylex.Error("dropping an enum value is not implemented")
			return 1
		}
	case 2245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9147
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2246:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9149
		{
			yyVAL.list = nil
		}
	case 2247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9154
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9156
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9161
		{
			if constraint, ok := yyDollar[3].node.(*ast.Constraint); ok {
				constraint.Conname = yyDollar[2].str
				yyVAL.node = constraint
			} else {
				yyVAL.node = yyDollar[3].node
			}
		}
	case 2250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9170
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2251:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9175
		{
			n := ast.NewConstraint(ast.CONSTR_CHECK)
			n.RawExpr = yyDollar[3].node
			n.CookedExpr = "" // Empty string, not nil
			// Process constraint attributes from $5
			processConstraintAttributeSpec(yyDollar[5].ival, n)
			// PostgreSQL: n->initially_valid = !n->skip_validation
			n.InitiallyValid = !n.SkipValidation
			yyVAL.node = n
		}
	case 2252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9186
		{
			n := ast.NewConstraint(ast.CONSTR_NOTNULL)
			// In PostgreSQL, domain NOT NULL constraints have keys = list_make1(makeString("value"))
			n.Keys = ast.NewNodeList(ast.NewString("value"))
			// Process constraint attributes from $3
			processConstraintAttributeSpec(yyDollar[3].ival, n)
			// PostgreSQL sets initially_valid = true for NOT NULL (no NOT VALID support yet)
			n.InitiallyValid = true
			yyVAL.node = n
		}
	case 2253:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9206
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[7].stmt, yyDollar[5].into, ast.OBJECT_MATVIEW, false, false)
			/* cram additional flags into the IntoClause */
			yyDollar[5].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[5].into.SkipData = !yyDollar[8].bval
			yyVAL.stmt = ctas
		}
	case 2254:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9214
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[10].stmt, yyDollar[8].into, ast.OBJECT_MATVIEW, false, true)
			/* cram additional flags into the IntoClause */
			yyDollar[8].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[8].into.SkipData = !yyDollar[11].bval
			yyVAL.stmt = ctas
		}
	case 2255:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9225
		{
			n := ast.NewRefreshMatViewStmt(yyDollar[4].bval, !yyDollar[6].bval, yyDollar[5].rangevar)
			yyVAL.stmt = n
		}
	case 2256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9231
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 2257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9232
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 2258:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9237
		{
			yyVAL.into = &ast.IntoClause{
				Rel:            yyDollar[1].rangevar,
				ColNames:       yyDollar[2].list,
				AccessMethod:   yyDollar[3].str,
				Options:        yyDollar[4].list,
				TableSpaceName: yyDollar[5].str,
			}
		}
	case 2259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9249
		{
			yyVAL.bval = true
		}
	case 2260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9250
		{
			yyVAL.bval = false
		}
	case 2261:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9251
		{
			yyVAL.bval = true
		}
	case 2262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9256
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].stmt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9265
		{
			yyVAL.list = nil
		}
	case 2268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9276
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9278
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9282
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9287
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9292
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9297
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9305
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9310
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9315
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9319
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9330
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9338
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9342
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9346
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9350
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9357
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9361
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9368
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9374
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9381
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9382
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9386
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9387
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9388
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9389
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9390
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9391
		{
			yyVAL.node = ast.NewString("true")
		}
	case 2295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9392
		{
			yyVAL.node = ast.NewString("false")
		}
	case 2296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9393
		{
			yyVAL.node = ast.NewString("on")
		}
	case 2297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9394
		{
			yyVAL.node = ast.NewString("off")
		}
	case 2298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9398
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9399
		{
			yyVAL.str = "default"
		}
	case 2300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9400
		{
			yyVAL.str = ""
		}
	case 2301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9404
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9405
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9409
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9410
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9411
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9412
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9416
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9417
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9422
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9428
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9433
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9441
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9445
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9449
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9453
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9457
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9463
		{
			yyVAL.str = "read uncommitted"
		}
	case 2318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9464
		{
			yyVAL.str = "read committed"
		}
	case 2319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9465
		{
			yyVAL.str = "repeatable read"
		}
	case 2320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9466
		{
			yyVAL.str = "serializable"
		}
	case 2321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9470
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9471
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9472
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9475
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9476
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9477
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9481
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9482
		{
			yyVAL.list = nil
		}
	case 2329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9486
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9487
		{
			yyVAL.node = nil
		}
	case 2331:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9491
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9496
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9501
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9509
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9513
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9519
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9525
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9531
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9532
		{
			yyVAL.str = ""
		}
	case 2340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9536
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9537
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9538
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9539
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9543
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9548
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9553
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9560
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9561
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	}
	goto yystack /* stack new state and value */
}
