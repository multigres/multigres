// Code generated by goyacc -o postgres.go postgres.y. DO NOT EDIT.

//line postgres.y:10
package parser

import __yyfmt__ "fmt"

//line postgres.y:10

import (
	"fmt"
	"github.com/multigres/parser/go/parser/ast"
	"strings"
)

// Parser state for handling complex grammar constructs
var parserState struct {
	// Future parser state variables can be added here
}

// SelectLimit - Private struct for the result of opt_select_limit production
// Mirrors PostgreSQL's SelectLimit from gram.y:126-132
type selectLimit struct {
	limitOffset ast.Node
	limitCount  ast.Node
	limitOption ast.LimitOption
}

// LexerInterface - implements the lexer interface expected by goyacc
// Note: The actual Lexer struct is defined in lexer.go
type LexerInterface interface {
	Lex(lval *yySymType) int
	Error(s string)
}

// yySymType is the union type for semantic values
// This will be expanded as we add more grammar rules

//line postgres.y:43
type yySymType struct {
	yys int
	// Basic types
	ival    int
	str     string
	keyword string
	bval    bool
	byt     byte
	rune    rune

	// AST nodes
	node        ast.Node
	stmt        ast.Stmt
	stmtList    []ast.Stmt
	list        *ast.NodeList
	groupClause *ast.GroupClause
	selectLimit *selectLimit

	// Specific AST node types
	into          *ast.IntoClause
	onconflict    *ast.OnConflictClause
	windef        *ast.WindowDef
	createStmt    *ast.CreateStmt
	indexStmt     *ast.IndexStmt
	alterStmt     *ast.AlterTableStmt
	dropStmt      *ast.DropStmt
	columnDef     *ast.ColumnDef
	constraint    *ast.Constraint
	indexElem     *ast.IndexElem
	alterCmd      *ast.AlterTableCmd
	with          *ast.WithClause
	rangevar      *ast.RangeVar
	objType       ast.ObjectType
	dropBehav     ast.DropBehavior
	setquant      ast.SetQuantifier
	typnam        *ast.TypeName
	partspec      *ast.PartitionSpec
	partboundspec *ast.PartitionBoundSpec
	oncommit      ast.OnCommitAction
	defelt        *ast.DefElem
	target        *ast.ResTarget            // For select targets, insert columns
	alias         *ast.Alias                // For table and column aliases
	jtype         ast.JoinType              // For join type specifications
	jexpr         *ast.JoinExpr             // For joined table expressions
	keyaction     *ast.KeyAction            // For foreign key actions
	keyactions    *ast.KeyActions           // For foreign key action sets
	funparam      *ast.FunctionParameter    // For function parameters
	funparammode  ast.FunctionParameterMode // For parameter modes (IN/OUT/INOUT/VARIADIC)
	vsetstmt      *ast.VariableSetStmt      // For SET/RESET statements
	rolespec      *ast.RoleSpec
	objwithargs   *ast.ObjectWithArgs
	statelem      *ast.StatsElem

	// Location tracking
	location int
}

const IDENT = 57346
const UIDENT = 57347
const FCONST = 57348
const SCONST = 57349
const USCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ALL = 57363
const ALTER = 57364
const AS = 57365
const CASCADE = 57366
const CONCURRENTLY = 57367
const CREATE = 57368
const DROP = 57369
const IF_P = 57370
const EXISTS = 57371
const AND = 57372
const NOT = 57373
const NULLS_P = 57374
const OR = 57375
const REPLACE = 57376
const RESTRICT = 57377
const WITH = 57378
const BETWEEN = 57379
const CASE = 57380
const COLLATE = 57381
const DEFAULT = 57382
const DISTINCT = 57383
const ESCAPE = 57384
const FALSE_P = 57385
const ILIKE = 57386
const IN_P = 57387
const LIKE = 57388
const NULL_P = 57389
const SIMILAR = 57390
const TRUE_P = 57391
const UNKNOWN = 57392
const WHEN = 57393
const IS = 57394
const ISNULL = 57395
const NOTNULL = 57396
const AT = 57397
const TIME = 57398
const ZONE = 57399
const LOCAL = 57400
const SYMMETRIC = 57401
const ASYMMETRIC = 57402
const TO = 57403
const OPERATOR = 57404
const SELECT = 57405
const FROM = 57406
const WHERE = 57407
const ONLY = 57408
const TABLE = 57409
const LIMIT = 57410
const OFFSET = 57411
const BY = 57412
const GROUP_P = 57413
const HAVING = 57414
const INTO = 57415
const ON = 57416
const JOIN = 57417
const INNER_P = 57418
const LEFT = 57419
const RIGHT = 57420
const FULL = 57421
const OUTER_P = 57422
const CROSS = 57423
const NATURAL = 57424
const USING = 57425
const RECURSIVE = 57426
const MATERIALIZED = 57427
const LATERAL = 57428
const VALUES = 57429
const SEARCH = 57430
const BREADTH = 57431
const DEPTH = 57432
const CYCLE = 57433
const FIRST_P = 57434
const LAST_P = 57435
const SET = 57436
const ASC = 57437
const DESC = 57438
const INSERT = 57439
const UPDATE = 57440
const DELETE_P = 57441
const MERGE = 57442
const RETURNING = 57443
const CONFLICT = 57444
const OVERRIDING = 57445
const USER = 57446
const SYSTEM_P = 57447
const MATCHED = 57448
const THEN = 57449
const SOURCE = 57450
const TARGET = 57451
const DO = 57452
const NOTHING = 57453
const COPY = 57454
const PROGRAM = 57455
const STDIN = 57456
const STDOUT = 57457
const BINARY = 57458
const FREEZE = 57459
const CONSTRAINT = 57460
const VERBOSE = 57461
const ANALYZE = 57462
const CURRENT_P = 57463
const CURSOR = 57464
const OF = 57465
const COLUMNS = 57466
const ORDINALITY = 57467
const XMLTABLE = 57468
const JSON_TABLE = 57469
const ROWS = 57470
const PATH = 57471
const PASSING = 57472
const FOR = 57473
const NESTED = 57474
const REF_P = 57475
const XMLNAMESPACES = 57476
const ARRAY = 57477
const ERROR = 57478
const ERROR_P = 57479
const EMPTY = 57480
const EMPTY_P = 57481
const OBJECT_P = 57482
const WRAPPER = 57483
const CONDITIONAL = 57484
const UNCONDITIONAL = 57485
const QUOTES = 57486
const OMIT = 57487
const KEEP = 57488
const SCALAR = 57489
const STRING_P = 57490
const ENCODING = 57491
const DELIMITER = 57492
const DELIMITERS = 57493
const HEADER_P = 57494
const QUOTE = 57495
const FORCE = 57496
const CSV = 57497
const VALUE_P = 57498
const JSON_QUERY = 57499
const JSON_VALUE = 57500
const JSON_SERIALIZE = 57501
const JSON_OBJECT = 57502
const JSON_ARRAY = 57503
const JSON_OBJECTAGG = 57504
const JSON_ARRAYAGG = 57505
const JSON_EXISTS = 57506
const JSON_SCALAR = 57507
const FORMAT = 57508
const JSON = 57509
const UTF8 = 57510
const WITHOUT = 57511
const BIT = 57512
const NUMERIC = 57513
const INTEGER = 57514
const SMALLINT = 57515
const BIGINT = 57516
const REAL = 57517
const FLOAT_P = 57518
const DOUBLE_P = 57519
const PRECISION = 57520
const CHARACTER = 57521
const CHAR_P = 57522
const VARCHAR = 57523
const NATIONAL = 57524
const NCHAR = 57525
const VARYING = 57526
const TIMESTAMP = 57527
const INTERVAL = 57528
const INT_P = 57529
const DECIMAL_P = 57530
const DEC = 57531
const BOOLEAN_P = 57532
const VARIADIC = 57533
const ABORT_P = 57534
const ABSENT = 57535
const ABSOLUTE_P = 57536
const ACCESS = 57537
const ACTION = 57538
const ADD_P = 57539
const ADMIN = 57540
const AFTER = 57541
const AGGREGATE = 57542
const ALSO = 57543
const ALWAYS = 57544
const ANALYSE = 57545
const ASENSITIVE = 57546
const ASSERTION = 57547
const ASSIGNMENT = 57548
const ATOMIC = 57549
const ATTACH = 57550
const ATTRIBUTE = 57551
const AUTHORIZATION = 57552
const BACKWARD = 57553
const BEFORE = 57554
const BEGIN_P = 57555
const CACHE = 57556
const CALL = 57557
const CALLED = 57558
const CASCADED = 57559
const CATALOG_P = 57560
const CHAIN = 57561
const CHARACTERISTICS = 57562
const CHECKPOINT = 57563
const CLASS = 57564
const CLOSE = 57565
const CLUSTER = 57566
const COALESCE = 57567
const COLLATION = 57568
const COMMENT = 57569
const COMMENTS = 57570
const COMMIT = 57571
const COMMITTED = 57572
const COMPRESSION = 57573
const CONFIGURATION = 57574
const CONNECTION = 57575
const CONSTRAINTS = 57576
const CONTENT_P = 57577
const CONTINUE_P = 57578
const CONVERSION_P = 57579
const COST = 57580
const CUBE = 57581
const CURRENT_CATALOG = 57582
const CURRENT_DATE = 57583
const CURRENT_ROLE = 57584
const CURRENT_SCHEMA = 57585
const CURRENT_TIME = 57586
const CURRENT_TIMESTAMP = 57587
const CURRENT_USER = 57588
const DATA_P = 57589
const DATABASE = 57590
const DAY_P = 57591
const DEALLOCATE = 57592
const DECLARE = 57593
const DEFAULTS = 57594
const DEFERRABLE = 57595
const DEFERRED = 57596
const DEFINER = 57597
const DEPENDS = 57598
const DETACH = 57599
const DICTIONARY = 57600
const DISABLE_P = 57601
const DISCARD = 57602
const DOCUMENT_P = 57603
const DOMAIN_P = 57604
const EACH = 57605
const ELSE = 57606
const ENABLE_P = 57607
const ENCRYPTED = 57608
const END_P = 57609
const ENUM_P = 57610
const EVENT = 57611
const EXCEPT = 57612
const EXCLUDE = 57613
const EXCLUDING = 57614
const EXCLUSIVE = 57615
const EXECUTE = 57616
const EXPLAIN = 57617
const EXPRESSION = 57618
const EXTENSION = 57619
const EXTERNAL = 57620
const EXTRACT = 57621
const FAMILY = 57622
const FETCH = 57623
const FILTER = 57624
const FINALIZE = 57625
const FOLLOWING = 57626
const FOREIGN = 57627
const FORWARD = 57628
const FUNCTION = 57629
const FUNCTIONS = 57630
const GENERATED = 57631
const GLOBAL = 57632
const GRANT = 57633
const GRANTED = 57634
const GREATEST = 57635
const GROUPING = 57636
const GROUPS = 57637
const HANDLER = 57638
const HOLD = 57639
const HOUR_P = 57640
const IDENTITY_P = 57641
const IMMEDIATE = 57642
const IMMUTABLE = 57643
const IMPLICIT_P = 57644
const IMPORT_P = 57645
const INCLUDE = 57646
const INCLUDING = 57647
const INCREMENT = 57648
const INDENT = 57649
const INDEX = 57650
const INDEXES = 57651
const INHERIT = 57652
const INHERITS = 57653
const INITIALLY = 57654
const INLINE_P = 57655
const INPUT_P = 57656
const INSENSITIVE = 57657
const INSTEAD = 57658
const INTERSECT = 57659
const INVOKER = 57660
const ISOLATION = 57661
const KEYS = 57662
const LABEL = 57663
const LANGUAGE = 57664
const LARGE_P = 57665
const LATERAL_P = 57666
const LEAKPROOF = 57667
const LEAST = 57668
const LEADING = 57669
const LEVEL = 57670
const LISTEN = 57671
const LOAD = 57672
const LOCALTIME = 57673
const LOCALTIMESTAMP = 57674
const LOCATION = 57675
const LOCK_P = 57676
const LOCKED = 57677
const LOGGED = 57678
const MAPPING = 57679
const MATCH = 57680
const MAXVALUE = 57681
const MERGE_ACTION = 57682
const METHOD = 57683
const MINUTE_P = 57684
const MINVALUE = 57685
const MODE = 57686
const MONTH_P = 57687
const MOVE = 57688
const NAME_P = 57689
const NAMES = 57690
const NEW = 57691
const NEXT = 57692
const NFC = 57693
const NFD = 57694
const NFKC = 57695
const NFKD = 57696
const NO = 57697
const NONE = 57698
const NORMALIZE = 57699
const NORMALIZED = 57700
const NOTIFY = 57701
const NOWAIT = 57702
const NULLIF = 57703
const OUT_P = 57704
const OVERLAY = 57705
const OVERLAPS = 57706
const OWNED = 57707
const OWNER = 57708
const PARALLEL = 57709
const PARAMETER = 57710
const PARSER = 57711
const PARTIAL = 57712
const PARTITION = 57713
const PASSWORD = 57714
const PLACING = 57715
const PLAN = 57716
const PLANS = 57717
const POLICY = 57718
const POSITION = 57719
const PRECEDING = 57720
const PREPARE = 57721
const PREPARED = 57722
const PRESERVE = 57723
const PRIMARY = 57724
const PRIOR = 57725
const PRIVILEGES = 57726
const PROCEDURAL = 57727
const PROCEDURE = 57728
const PROCEDURES = 57729
const PUBLICATION = 57730
const RANGE = 57731
const READ = 57732
const REASSIGN = 57733
const RECHECK = 57734
const REFERENCES = 57735
const REFERENCING = 57736
const REFRESH = 57737
const REINDEX = 57738
const RELATIVE_P = 57739
const RELEASE = 57740
const RENAME = 57741
const REPEATABLE = 57742
const REPLICA = 57743
const RESET = 57744
const RESTART = 57745
const RETURN = 57746
const RETURNS = 57747
const REVOKE = 57748
const ROLE = 57749
const ROLLBACK = 57750
const ROLLUP = 57751
const ROUTINE = 57752
const ROUTINES = 57753
const ROW = 57754
const RULE = 57755
const SAVEPOINT = 57756
const SCHEMA = 57757
const SCHEMAS = 57758
const SCROLL = 57759
const SECOND_P = 57760
const SECURITY = 57761
const SEQUENCE = 57762
const SEQUENCES = 57763
const SERIALIZABLE = 57764
const SERVER = 57765
const SESSION = 57766
const SESSION_USER = 57767
const SETS = 57768
const SETOF = 57769
const SHARE = 57770
const SHOW = 57771
const SIMPLE = 57772
const SKIP = 57773
const SNAPSHOT = 57774
const SOME = 57775
const SQL_P = 57776
const STABLE = 57777
const STANDALONE_P = 57778
const START = 57779
const STATEMENT = 57780
const STATISTICS = 57781
const STORAGE = 57782
const STORED = 57783
const STRICT_P = 57784
const STRIP_P = 57785
const SUBSCRIPTION = 57786
const SUBSTRING = 57787
const SUPPORT = 57788
const SYSID = 57789
const SYSTEM_USER = 57790
const TABLES = 57791
const TABLESPACE = 57792
const TABLESAMPLE = 57793
const TEMP = 57794
const TEMPLATE = 57795
const TEMPORARY = 57796
const TEXT_P = 57797
const TIES = 57798
const TRAILING = 57799
const TRANSACTION = 57800
const TRANSFORM = 57801
const TREAT = 57802
const TRIGGER = 57803
const TRIM = 57804
const TRUNCATE = 57805
const TRUSTED = 57806
const TYPE_P = 57807
const TYPES_P = 57808
const UESCAPE = 57809
const UNBOUNDED = 57810
const UNCOMMITTED = 57811
const UNENCRYPTED = 57812
const UNION = 57813
const UNIQUE = 57814
const UNLISTEN = 57815
const UNLOGGED = 57816
const UNTIL = 57817
const VACUUM = 57818
const VALID = 57819
const VALIDATE = 57820
const VALIDATOR = 57821
const VERSION_P = 57822
const VIEW = 57823
const VIEWS = 57824
const VOLATILE = 57825
const WHITESPACE_P = 57826
const WINDOW = 57827
const WITHIN = 57828
const WORK = 57829
const WRITE = 57830
const XML_P = 57831
const XMLATTRIBUTES = 57832
const XMLCONCAT = 57833
const XMLELEMENT = 57834
const XMLEXISTS = 57835
const XMLFOREST = 57836
const XMLPARSE = 57837
const XMLPI = 57838
const XMLROOT = 57839
const XMLSERIALIZE = 57840
const YEAR_P = 57841
const YES_P = 57842
const INOUT = 57843
const OTHERS = 57844
const OLD = 57845
const KEY = 57846
const OFF = 57847
const OIDS = 57848
const OPTION = 57849
const OPTIONS = 57850
const OVER = 57851
const ORDER = 57852
const ANY = 57853
const BOTH = 57854
const CAST = 57855
const CHECK = 57856
const COLUMN = 57857
const FORMAT_LA = 57858
const NOT_LA = 57859
const NULLS_LA = 57860
const WITH_LA = 57861
const WITHOUT_LA = 57862
const MODE_TYPE_NAME = 57863
const MODE_PLPGSQL_EXPR = 57864
const MODE_PLPGSQL_ASSIGN1 = 57865
const MODE_PLPGSQL_ASSIGN2 = 57866
const MODE_PLPGSQL_ASSIGN3 = 57867
const UMINUS = 57868

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"ALTER",
	"AS",
	"CASCADE",
	"CONCURRENTLY",
	"CREATE",
	"DROP",
	"IF_P",
	"EXISTS",
	"AND",
	"NOT",
	"NULLS_P",
	"OR",
	"REPLACE",
	"RESTRICT",
	"WITH",
	"BETWEEN",
	"CASE",
	"COLLATE",
	"DEFAULT",
	"DISTINCT",
	"ESCAPE",
	"FALSE_P",
	"ILIKE",
	"IN_P",
	"LIKE",
	"NULL_P",
	"SIMILAR",
	"TRUE_P",
	"UNKNOWN",
	"WHEN",
	"IS",
	"ISNULL",
	"NOTNULL",
	"AT",
	"TIME",
	"ZONE",
	"LOCAL",
	"SYMMETRIC",
	"ASYMMETRIC",
	"TO",
	"OPERATOR",
	"SELECT",
	"FROM",
	"WHERE",
	"ONLY",
	"TABLE",
	"LIMIT",
	"OFFSET",
	"BY",
	"GROUP_P",
	"HAVING",
	"INTO",
	"ON",
	"JOIN",
	"INNER_P",
	"LEFT",
	"RIGHT",
	"FULL",
	"OUTER_P",
	"CROSS",
	"NATURAL",
	"USING",
	"RECURSIVE",
	"MATERIALIZED",
	"LATERAL",
	"VALUES",
	"SEARCH",
	"BREADTH",
	"DEPTH",
	"CYCLE",
	"FIRST_P",
	"LAST_P",
	"SET",
	"ASC",
	"DESC",
	"INSERT",
	"UPDATE",
	"DELETE_P",
	"MERGE",
	"RETURNING",
	"CONFLICT",
	"OVERRIDING",
	"USER",
	"SYSTEM_P",
	"MATCHED",
	"THEN",
	"SOURCE",
	"TARGET",
	"DO",
	"NOTHING",
	"COPY",
	"PROGRAM",
	"STDIN",
	"STDOUT",
	"BINARY",
	"FREEZE",
	"CONSTRAINT",
	"VERBOSE",
	"ANALYZE",
	"CURRENT_P",
	"CURSOR",
	"OF",
	"COLUMNS",
	"ORDINALITY",
	"XMLTABLE",
	"JSON_TABLE",
	"ROWS",
	"PATH",
	"PASSING",
	"FOR",
	"NESTED",
	"REF_P",
	"XMLNAMESPACES",
	"ARRAY",
	"ERROR",
	"ERROR_P",
	"EMPTY",
	"EMPTY_P",
	"OBJECT_P",
	"WRAPPER",
	"CONDITIONAL",
	"UNCONDITIONAL",
	"QUOTES",
	"OMIT",
	"KEEP",
	"SCALAR",
	"STRING_P",
	"ENCODING",
	"DELIMITER",
	"DELIMITERS",
	"HEADER_P",
	"QUOTE",
	"FORCE",
	"CSV",
	"VALUE_P",
	"JSON_QUERY",
	"JSON_VALUE",
	"JSON_SERIALIZE",
	"JSON_OBJECT",
	"JSON_ARRAY",
	"JSON_OBJECTAGG",
	"JSON_ARRAYAGG",
	"JSON_EXISTS",
	"JSON_SCALAR",
	"FORMAT",
	"JSON",
	"UTF8",
	"WITHOUT",
	"BIT",
	"NUMERIC",
	"INTEGER",
	"SMALLINT",
	"BIGINT",
	"REAL",
	"FLOAT_P",
	"DOUBLE_P",
	"PRECISION",
	"CHARACTER",
	"CHAR_P",
	"VARCHAR",
	"NATIONAL",
	"NCHAR",
	"VARYING",
	"TIMESTAMP",
	"INTERVAL",
	"INT_P",
	"DECIMAL_P",
	"DEC",
	"BOOLEAN_P",
	"VARIADIC",
	"ABORT_P",
	"ABSENT",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALSO",
	"ALWAYS",
	"ANALYSE",
	"ASENSITIVE",
	"ASSERTION",
	"ASSIGNMENT",
	"ATOMIC",
	"ATTACH",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"CACHE",
	"CALL",
	"CALLED",
	"CASCADED",
	"CATALOG_P",
	"CHAIN",
	"CHARACTERISTICS",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATION",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPRESSION",
	"CONFIGURATION",
	"CONNECTION",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COST",
	"CUBE",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DEPENDS",
	"DETACH",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DOCUMENT_P",
	"DOMAIN_P",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXPLAIN",
	"EXPRESSION",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FINALIZE",
	"FOLLOWING",
	"FOREIGN",
	"FORWARD",
	"FUNCTION",
	"FUNCTIONS",
	"GENERATED",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUPING",
	"GROUPS",
	"HANDLER",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INDENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INPUT_P",
	"INSENSITIVE",
	"INSTEAD",
	"INTERSECT",
	"INVOKER",
	"ISOLATION",
	"KEYS",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LATERAL_P",
	"LEAKPROOF",
	"LEAST",
	"LEADING",
	"LEVEL",
	"LISTEN",
	"LOAD",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MAXVALUE",
	"MERGE_ACTION",
	"METHOD",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NEW",
	"NEXT",
	"NFC",
	"NFD",
	"NFKC",
	"NFKD",
	"NO",
	"NONE",
	"NORMALIZE",
	"NORMALIZED",
	"NOTIFY",
	"NOWAIT",
	"NULLIF",
	"OUT_P",
	"OVERLAY",
	"OVERLAPS",
	"OWNED",
	"OWNER",
	"PARALLEL",
	"PARAMETER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"PLAN",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PREPARE",
	"PREPARED",
	"PRESERVE",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROCEDURES",
	"PUBLICATION",
	"RANGE",
	"READ",
	"REASSIGN",
	"RECHECK",
	"REFERENCES",
	"REFERENCING",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RETURN",
	"RETURNS",
	"REVOKE",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROUTINE",
	"ROUTINES",
	"ROW",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCHEMAS",
	"SCROLL",
	"SECOND_P",
	"SECURITY",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMPLE",
	"SKIP",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STORAGE",
	"STORED",
	"STRICT_P",
	"STRIP_P",
	"SUBSCRIPTION",
	"SUBSTRING",
	"SUPPORT",
	"SYSID",
	"SYSTEM_USER",
	"TABLES",
	"TABLESPACE",
	"TABLESAMPLE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"TIES",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UESCAPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHITESPACE_P",
	"WINDOW",
	"WITHIN",
	"WORK",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"INOUT",
	"OTHERS",
	"OLD",
	"KEY",
	"OFF",
	"OIDS",
	"OPTION",
	"OPTIONS",
	"OVER",
	"ORDER",
	"ANY",
	"BOTH",
	"CAST",
	"CHECK",
	"COLUMN",
	"FORMAT_LA",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"WITHOUT_LA",
	"MODE_TYPE_NAME",
	"MODE_PLPGSQL_EXPR",
	"MODE_PLPGSQL_ASSIGN1",
	"MODE_PLPGSQL_ASSIGN2",
	"MODE_PLPGSQL_ASSIGN3",
	"'<'",
	"'>'",
	"'='",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"','",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line postgres.y:11076

// Lex implements the lexer interface for goyacc
func (l *Lexer) Lex(lval *yySymType) int {
	token := l.NextToken()
	if token == nil {
		return EOF // EOF = 0, exactly what yacc expects
	}

	// Set location and always populate both semantic value fields
	lval.location = token.Position
	lval.str = token.Value.Str
	lval.ival = token.Value.Ival

	// Simply return the token type - no complex switch needed!
	// All parser constants, keywords, operators, etc. work directly
	return token.Type
}

// Error implements the error interface for goyacc
func (l *Lexer) Error(s string) {
	l.RecordError(fmt.Errorf("parse error at position %d: %s", l.GetPosition(), s))
}

// ParseSQL parses SQL input and returns the AST
func ParseSQL(input string) ([]ast.Stmt, error) {
	lexer := NewLexer(input)
	yyParse(lexer)

	if lexer.HasErrors() {
		return nil, lexer.GetErrors()[0]
	}

	return lexer.GetParseTree(), nil
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 61,
	541, 61,
	-2, 1407,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 62,
	68, 1329,
	69, 1329,
	131, 1329,
	281, 1329,
	510, 1329,
	-2, 1324,
	-1, 65,
	67, 1714,
	84, 1714,
	85, 2353,
	237, 2538,
	308, 1881,
	420, 1714,
	481, 1714,
	-2, 74,
	-1, 71,
	68, 1328,
	69, 1328,
	131, 1328,
	281, 1328,
	510, 1328,
	-2, 1330,
	-1, 81,
	1, 61,
	541, 61,
	-2, 1407,
	-1, 117,
	85, 2352,
	-2, 1713,
	-1, 190,
	61, 279,
	64, 279,
	528, 279,
	534, 279,
	-2, 2396,
	-1, 591,
	68, 1313,
	69, 1313,
	131, 1313,
	281, 1313,
	-2, 1331,
	-1, 594,
	68, 1314,
	69, 1314,
	131, 1314,
	281, 1314,
	-2, 1334,
	-1, 642,
	84, 1714,
	481, 1714,
	-2, 73,
	-1, 644,
	210, 62,
	-2, 2359,
	-1, 711,
	16, 1246,
	17, 1246,
	532, 1246,
	-2, 80,
	-1, 712,
	16, 1247,
	17, 1247,
	532, 1247,
	-2, 81,
	-1, 874,
	68, 1313,
	69, 1313,
	131, 1313,
	281, 1313,
	-2, 1335,
	-1, 1055,
	6, 1810,
	12, 1810,
	535, 1810,
	536, 1810,
	-2, 1803,
	-1, 1244,
	128, 2636,
	412, 2636,
	-2, 1059,
	-1, 1275,
	21, 1220,
	433, 1220,
	511, 1220,
	-2, 821,
	-1, 1277,
	21, 1222,
	433, 1222,
	511, 1222,
	-2, 768,
	-1, 1282,
	1, 637,
	26, 637,
	36, 637,
	64, 637,
	65, 637,
	68, 637,
	69, 637,
	71, 637,
	72, 637,
	73, 637,
	74, 637,
	101, 637,
	131, 637,
	281, 637,
	485, 637,
	510, 637,
	533, 637,
	541, 637,
	542, 637,
	-2, 1319,
	-1, 1287,
	21, 1297,
	433, 1297,
	511, 1297,
	-2, 1293,
	-1, 1744,
	68, 1329,
	69, 1329,
	131, 1329,
	281, 1329,
	510, 1329,
	-2, 1149,
	-1, 1754,
	532, 1183,
	-2, 1169,
	-1, 1924,
	118, 74,
	308, 1881,
	461, 74,
	-2, 1714,
	-1, 1973,
	537, 95,
	-2, 2222,
	-1, 1999,
	532, 1883,
	-2, 203,
	-1, 2196,
	36, 2641,
	66, 2641,
	-2, 485,
	-1, 2197,
	36, 2642,
	66, 2642,
	-2, 358,
	-1, 2203,
	128, 2639,
	412, 2639,
	-2, 1157,
	-1, 2204,
	128, 2640,
	412, 2640,
	-2, 1158,
	-1, 2232,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1072,
	-1, 2233,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1073,
	-1, 2234,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1074,
	-1, 2235,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1075,
	-1, 2236,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1076,
	-1, 2237,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1077,
	-1, 2241,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1084,
	-1, 2247,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1088,
	-1, 2292,
	364, 1210,
	-2, 1213,
	-1, 2308,
	532, 1182,
	-2, 1250,
	-1, 2412,
	40, 1254,
	510, 1254,
	528, 1254,
	533, 1254,
	542, 1254,
	-2, 1250,
	-1, 2442,
	210, 62,
	-2, 2359,
	-1, 2501,
	537, 96,
	-2, 2222,
	-1, 2604,
	508, 2299,
	-2, 2292,
	-1, 2727,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1086,
	-1, 2728,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1090,
	-1, 2734,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1092,
	-1, 2773,
	364, 1209,
	-2, 1212,
	-1, 2830,
	68, 1329,
	69, 1329,
	131, 1329,
	281, 1329,
	510, 1329,
	-2, 1429,
	-1, 2841,
	532, 1183,
	-2, 96,
	-1, 2847,
	151, 1646,
	-2, 1581,
	-1, 3031,
	6, 1810,
	12, 1810,
	535, 1810,
	536, 1810,
	-2, 1784,
	-1, 3148,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1085,
	-1, 3151,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1094,
	-1, 3154,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1089,
	-1, 3159,
	52, 0,
	53, 0,
	54, 0,
	-2, 1107,
	-1, 3181,
	21, 1219,
	433, 1219,
	511, 1219,
	-2, 1294,
	-1, 3185,
	364, 1211,
	-2, 1214,
	-1, 3489,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1087,
	-1, 3490,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1091,
	-1, 3494,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1093,
	-1, 3495,
	52, 0,
	53, 0,
	54, 0,
	-2, 1108,
	-1, 3498,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1109,
	-1, 3506,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1137,
	-1, 3507,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1138,
	-1, 3508,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1139,
	-1, 3509,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1140,
	-1, 3510,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1141,
	-1, 3511,
	18, 0,
	19, 0,
	20, 0,
	526, 0,
	527, 0,
	528, 0,
	-2, 1142,
	-1, 3512,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1111,
	-1, 3590,
	541, 61,
	-2, 1407,
	-1, 3732,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1095,
	-1, 3733,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1110,
	-1, 3734,
	37, 0,
	44, 0,
	45, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 1112,
	-1, 4241,
	37, 0,
	44, 0,
	46, 0,
	48, 0,
	517, 0,
	-2, 443,
	-1, 4412,
	7, 1531,
	-2, 280,
}

const yyPrivate = 57344

const yyLast = 75003

var yyAct = [...]int16{
	617, 4409, 4472, 4537, 4459, 4518, 4471, 741, 4502, 4460,
	4483, 893, 2572, 3337, 4271, 3553, 4410, 2722, 683, 2370,
	2322, 4040, 1739, 3963, 4240, 3529, 4021, 4001, 4170, 3579,
	4266, 3908, 4153, 4339, 3548, 4159, 3631, 2325, 3665, 1875,
	4256, 2720, 1194, 3856, 2975, 3806, 3936, 1043, 3445, 4069,
	3937, 3964, 4307, 3190, 3528, 4239, 942, 3934, 4222, 4047,
	3001, 1289, 3015, 4042, 917, 964, 1897, 3251, 4041, 2213,
	193, 193, 2867, 3788, 3764, 4095, 713, 607, 3761, 5,
	2451, 648, 4092, 3664, 607, 3880, 2338, 2348, 607, 3835,
	61, 2567, 2307, 1743, 644, 647, 652, 647, 2010, 647,
	2698, 3852, 1002, 3247, 2958, 2377, 2524, 3586, 2443, 647,
	2961, 3546, 3098, 2836, 3451, 2852, 2673, 1770, 2935, 592,
	3446, 607, 607, 607, 607, 3317, 3888, 710, 647, 647,
	3387, 647, 710, 3794, 3341, 2868, 3455, 710, 3255, 710,
	2340, 3771, 4, 780, 758, 2365, 760, 2400, 60, 647,
	3560, 647, 1923, 18, 647, 1922, 17, 651, 599, 73,
	1921, 12, 1920, 11, 2209, 597, 627, 3556, 3726, 3096,
	3537, 1203, 745, 2363, 2360, 2921, 2413, 3486, 2490, 2797,
	2649, 2427, 193, 193, 2822, 2566, 2539, 2305, 3310, 962,
	1030, 708, 3030, 3009, 3371, 2993, 742, 2491, 2452, 2418,
	1944, 742, 1958, 742, 2431, 1954, 2432, 2403, 1144, 752,
	1950, 2430, 2362, 4267, 3225, 1896, 2326, 604, 879, 2814,
	1877, 2407, 752, 752, 623, 2339, 626, 2785, 1983, 60,
	2939, 3144, 1749, 2898, 18, 2520, 2746, 17, 2825, 2571,
	73, 982, 12, 839, 11, 1154, 2078, 1994, 1075, 606,
	2469, 1970, 2417, 950, 1930, 989, 930, 2405, 1199, 184,
	2379, 694, 2843, 1070, 2343, 2347, 1008, 2346, 752, 2345,
	1876, 2301, 2336, 2294, 1850, 2257, 2258, 1741, 2267, 2938,
	2192, 2202, 1250, 2264, 1193, 837, 707, 743, 968, 2468,
	1241, 777, 2467, 1009, 91, 1011, 2355, 889, 89, 643,
	591, 2218, 1224, 880, 1222, 1242, 784, 154, 153, 1969,
	1254, 1763, 787, 112, 615, 1225, 1223, 866, 868, 1159,
	867, 1191, 1068, 1951, 172, 1134, 71, 613, 843, 1903,
	72, 4568, 4407, 786, 786, 622, 1135, 3163, 1134, 2907,
	4444, 3173, 3174, 3175, 1045, 4406, 3973, 910, 2723, 1135,
	4247, 1287, 3398, 4090, 1257, 1134, 4559, 3765, 1269, 1270,
	1271, 2074, 2906, 744, 856, 4492, 1135, 4557, 3912, 3163,
	1860, 2908, 4491, 1861, 4470, 1287, 4444, 1866, 1257, 1858,
	4468, 4492, 2331, 4122, 1863, 1867, 1862, 4452, 1864, 1856,
	4443, 133, 1865, 1280, 1281, 1859, 1856, 3910, 1888, 4444,
	595, 4423, 1868, 1858, 594, 908, 3491, 618, 4416, 4398,
	4424, 4381, 1047, 4337, 1004, 1004, 4336, 2802, 4105, 1859,
	3746, 4324, 1856, 2212, 922, 1856, 1868, 3877, 4286, 4280,
	2358, 4253, 4230, 767, 768, 2214, 2215, 4287, 4281, 4229,
	2947, 4228, 4227, 4207, 4206, 4203, 4201, 4121, 4228, 4119,
	855, 4228, 1856, 1856, 4204, 4202, 4122, 4015, 1137, 3702,
	4000, 3990, 3972, 3959, 820, 1287, 3746, 2984, 1257, 2715,
	3991, 3971, 1137, 4386, 1210, 3861, 1200, 850, 3851, 3841,
	3823, 3755, 916, 3754, 3862, 3745, 3719, 2358, 2908, 3822,
	3756, 1866, 1137, 1858, 3746, 3720, 2769, 593, 1863, 1867,
	1862, 2312, 1864, 3166, 3167, 3168, 3169, 2770, 3661, 1859,
	1212, 3660, 3659, 1215, 3653, 3601, 1868, 3662, 3571, 1214,
	2358, 2358, 3514, 2358, 2908, 3483, 4385, 3572, 1213, 3200,
	2219, 1856, 3264, 3179, 1856, 1046, 849, 851, 853, 857,
	3127, 2358, 1856, 593, 1216, 3054, 3041, 2910, 2889, 1856,
	842, 2807, 3372, 2801, 3055, 3042, 2911, 2890, 2792, 1255,
	2808, 2773, 2802, 2771, 2686, 2768, 2358, 1856, 3395, 4360,
	1856, 1856, 1856, 1856, 2445, 2784, 1856, 1262, 1263, 1264,
	1265, 2359, 2318, 2446, 2314, 1857, 2812, 4127, 4105, 4103,
	2358, 1137, 3458, 1856, 1856, 3721, 3706, 3399, 3551, 1256,
	1981, 907, 907, 3320, 3274, 3273, 3184, 3138, 2947, 607,
	3397, 2850, 2715, 2498, 2284, 2211, 840, 2190, 2182, 928,
	907, 612, 607, 4019, 937, 607, 607, 1048, 81, 3169,
	607, 607, 1927, 607, 1265, 710, 710, 3596, 1146, 710,
	1927, 920, 916, 3043, 924, 3284, 1200, 78, 923, 3044,
	647, 647, 916, 1927, 2005, 3666, 967, 1049, 845, 924,
	1050, 844, 877, 923, 1051, 972, 1146, 66, 967, 1936,
	2651, 65, 67, 847, 75, 607, 1898, 1146, 76, 1927,
	2008, 78, 4497, 4328, 653, 75, 1052, 841, 4319, 76,
	647, 664, 665, 666, 4238, 1257, 4109, 4102, 80, 952,
	953, 4101, 3261, 956, 4100, 607, 607, 4093, 75, 80,
	4060, 3163, 76, 932, 875, 3173, 3174, 3175, 1891, 924,
	1858, 943, 3858, 923, 1055, 1155, 1156, 3493, 3949, 1155,
	1156, 3929, 80, 3865, 4274, 2719, 1859, 3842, 1157, 69,
	3813, 1053, 1153, 88, 3725, 78, 3526, 3524, 3523, 1873,
	3522, 3520, 3319, 3328, 3235, 647, 647, 64, 1054, 3195,
	3400, 3010, 3181, 2997, 3210, 623, 623, 1042, 2966, 2946,
	2953, 1948, 75, 2905, 2849, 2782, 76, 2772, 3163, 2693,
	2358, 4275, 3173, 3174, 3175, 2691, 1287, 2688, 2687, 1257,
	1937, 2313, 980, 2358, 3492, 1056, 80, 4272, 2358, 2277,
	2065, 3458, 1751, 2103, 941, 1750, 2521, 74, 974, 877,
	876, 1257, 1871, 4558, 1858, 3205, 3458, 3155, 4533, 4529,
	918, 2006, 874, 647, 943, 2331, 4426, 4393, 4366, 2721,
	1859, 4359, 4296, 2891, 4237, 1750, 1858, 1868, 3192, 1183,
	4048, 4200, 4175, 1132, 4172, 3458, 1064, 4108, 1207, 3170,
	3171, 3172, 4107, 2011, 2011, 3682, 1141, 1276, 3164, 3165,
	3166, 3167, 3168, 3169, 4078, 1006, 1266, 1267, 1268, 4074,
	907, 921, 907, 1137, 907, 1260, 1261, 1262, 1263, 1264,
	1265, 966, 2853, 4005, 3962, 907, 907, 907, 907, 907,
	3164, 3165, 3166, 3167, 3168, 3169, 907, 3926, 3925, 1260,
	1261, 1262, 1263, 1264, 1265, 2985, 3924, 3902, 862, 863,
	2837, 2912, 3826, 752, 3327, 907, 3886, 1257, 3885, 2278,
	1137, 2498, 752, 752, 3884, 907, 595, 607, 907, 3875,
	594, 3872, 1947, 1935, 3562, 2009, 1765, 1879, 3750, 1880,
	1000, 959, 929, 3582, 1889, 2985, 3566, 969, 607, 3550,
	3262, 1902, 3542, 1097, 3457, 3859, 973, 3360, 979, 2007,
	939, 940, 3323, 3141, 1034, 958, 1892, 1040, 3307, 1058,
	3299, 1276, 3296, 652, 3269, 1217, 647, 647, 647, 647,
	1765, 647, 1931, 3237, 3230, 1287, 597, 2712, 1257, 1260,
	1261, 1262, 1263, 1264, 1265, 607, 3122, 3020, 2003, 607,
	1769, 3019, 3216, 1894, 1973, 1201, 1202, 3014, 2331, 856,
	1150, 1151, 1152, 1858, 1870, 1992, 3150, 2011, 856, 856,
	931, 1852, 2840, 607, 2839, 647, 2795, 1145, 1256, 1859,
	2781, 2780, 2763, 607, 651, 2761, 1868, 2269, 752, 607,
	68, 2670, 2617, 2518, 1769, 969, 1769, 70, 883, 2870,
	2454, 2372, 2275, 619, 1934, 74, 1158, 2166, 607, 2030,
	1913, 607, 1904, 1761, 1759, 1081, 1753, 1752, 1751, 752,
	1161, 1146, 1148, 1069, 752, 1855, 1195, 1195, 927, 1211,
	688, 1184, 2447, 2332, 3437, 1178, 1096, 607, 1155, 1156,
	2038, 1973, 1973, 1973, 2001, 1181, 983, 3163, 4485, 3818,
	4013, 3173, 3174, 3175, 3061, 2080, 4012, 3432, 3122, 607,
	607, 3260, 3163, 3178, 1169, 1982, 3173, 3174, 3175, 3709,
	647, 647, 647, 647, 647, 846, 2027, 1890, 3162, 593,
	79, 847, 647, 647, 1914, 1162, 1163, 2779, 3071, 1166,
	647, 1926, 2959, 74, 915, 2599, 924, 907, 2595, 2053,
	923, 3163, 2273, 4168, 74, 3173, 3174, 3175, 4224, 86,
	1991, 3063, 1746, 3811, 79, 2652, 2653, 1031, 1205, 4167,
	4011, 1754, 1984, 2031, 858, 1201, 1202, 74, 4004, 607,
	3306, 2523, 2535, 1226, 857, 1234, 1185, 1233, 1988, 2522,
	752, 1252, 1253, 857, 857, 3837, 1209, 2188, 4486, 661,
	662, 663, 4436, 1758, 3727, 1187, 1229, 2080, 655, 656,
	657, 658, 659, 660, 2119, 2120, 1260, 1261, 1262, 1263,
	1264, 1265, 3209, 3170, 3171, 3172, 4273, 2437, 79, 1760,
	3641, 1917, 3164, 3165, 3166, 3167, 3168, 3169, 969, 907,
	2160, 1872, 1229, 1853, 2000, 2002, 907, 907, 752, 607,
	1900, 1204, 1204, 1974, 1204, 3017, 607, 907, 3817, 647,
	969, 907, 907, 907, 907, 907, 907, 907, 907, 907,
	907, 907, 907, 907, 907, 907, 907, 2043, 907, 1928,
	2153, 2046, 2047, 1905, 1932, 2470, 994, 2098, 2054, 1095,
	3170, 3171, 3172, 1977, 2077, 947, 2050, 2051, 2274, 3164,
	3165, 3166, 3167, 3168, 3169, 831, 824, 704, 3848, 1133,
	1260, 1261, 1262, 1263, 1264, 1265, 78, 969, 2157, 2117,
	786, 2892, 629, 3023, 1287, 1918, 4034, 1257, 2056, 1098,
	115, 2060, 1260, 1261, 1262, 1263, 1264, 1265, 1952, 631,
	1974, 1974, 1974, 75, 2471, 786, 1762, 76, 2470, 3838,
	3161, 3012, 1858, 1978, 2159, 3149, 1955, 3611, 2042, 629,
	3160, 1963, 1769, 2963, 2465, 1998, 2929, 80, 1859, 1287,
	1098, 3654, 1257, 2925, 92, 1868, 631, 2173, 1287, 2091,
	3831, 1257, 3830, 3213, 1287, 3595, 3408, 1257, 2602, 2102,
	3024, 1269, 1270, 1271, 3275, 1985, 2108, 1858, 1031, 115,
	2092, 2093, 2094, 990, 2464, 1045, 1858, 2471, 2702, 2733,
	1866, 2945, 1858, 1859, 1965, 637, 1076, 1863, 1867, 1862,
	1868, 1864, 1859, 2151, 2419, 2421, 2420, 2177, 1859, 1868,
	1287, 2548, 3847, 1257, 2222, 1868, 2145, 2135, 1260, 1261,
	1262, 1263, 1264, 1265, 3642, 2014, 2099, 955, 637, 2104,
	2158, 829, 1204, 2546, 766, 66, 1204, 1204, 1858, 65,
	67, 2726, 1997, 1230, 2534, 679, 2176, 3482, 2472, 78,
	2020, 2019, 3135, 1047, 1859, 2170, 1177, 1955, 693, 2547,
	692, 1868, 3632, 1077, 2168, 2169, 691, 4400, 690, 4221,
	3447, 1985, 1123, 3026, 4184, 1762, 75, 4087, 1228, 1230,
	76, 2545, 1175, 4086, 3804, 3693, 978, 3425, 2496, 1260,
	1261, 1262, 1263, 1264, 1265, 3422, 2598, 4314, 1121, 2018,
	80, 2036, 2032, 2199, 4177, 3010, 4467, 69, 2205, 3410,
	638, 2472, 976, 3108, 2122, 1955, 1231, 4399, 1985, 4466,
	1287, 3844, 838, 1257, 2191, 64, 2964, 1269, 1270, 1271,
	4178, 3843, 1996, 2189, 2161, 3816, 2217, 2216, 1985, 2162,
	2221, 1985, 116, 2165, 2272, 4317, 1866, 2167, 1858, 1985,
	2207, 4197, 1231, 1863, 1867, 1862, 3864, 1864, 4044, 984,
	4225, 1865, 1280, 1281, 1859, 3554, 1078, 3629, 2079, 3623,
	3480, 1868, 1985, 2696, 1995, 3655, 1046, 2646, 2478, 1985,
	3416, 843, 1985, 1985, 3053, 3050, 3049, 2183, 2185, 3170,
	3171, 3172, 1232, 1174, 2878, 2931, 2991, 634, 3164, 3165,
	3166, 3167, 3168, 3169, 3170, 3171, 3172, 1188, 1916, 1120,
	4027, 116, 2201, 3164, 3165, 3166, 3167, 3168, 3169, 2179,
	4435, 2208, 2271, 975, 2015, 4384, 4344, 2701, 1232, 2180,
	2557, 2203, 2203, 2029, 3891, 2017, 2016, 3094, 2627, 1287,
	3407, 1092, 1257, 3170, 3171, 3172, 1269, 1270, 1271, 2869,
	3459, 2181, 3164, 3165, 3166, 3167, 3168, 3169, 1860, 2643,
	1118, 1861, 3091, 2658, 1115, 1866, 2657, 1858, 1048, 2114,
	2079, 4223, 1863, 1867, 1862, 2113, 1864, 1176, 3025, 3031,
	1865, 1280, 1281, 1859, 2013, 2656, 1126, 2655, 2927, 2640,
	1868, 3795, 632, 1122, 3796, 3448, 635, 3797, 1049, 2930,
	2639, 1050, 2084, 1112, 114, 1051, 113, 977, 1090, 4283,
	1111, 1094, 1093, 1088, 1082, 3798, 630, 1898, 1080, 843,
	3598, 1073, 1072, 1071, 1067, 2703, 960, 1052, 2504, 2107,
	2106, 907, 907, 652, 907, 2462, 2105, 4112, 636, 3338,
	907, 152, 907, 3253, 3737, 2034, 1987, 1986, 3434, 3067,
	3064, 4402, 3800, 630, 997, 1738, 4343, 2897, 3909, 3157,
	2745, 4039, 3799, 2049, 1239, 1055, 2536, 828, 1074, 639,
	2422, 636, 3801, 114, 641, 113, 2039, 3857, 2926, 79,
	2924, 4284, 1053, 3378, 1031, 682, 3131, 4310, 2923, 2929,
	823, 677, 74, 118, 651, 960, 2925, 2714, 4309, 1054,
	2463, 3378, 1962, 842, 3051, 2564, 2555, 3093, 68, 2111,
	2550, 1091, 2881, 1221, 2290, 70, 1186, 3478, 2434, 1915,
	2928, 830, 753, 3497, 2285, 2289, 3496, 2291, 1260, 1261,
	1262, 1263, 1264, 1265, 860, 2310, 1056, 907, 3339, 647,
	2870, 907, 907, 907, 907, 3277, 3825, 1079, 3449, 4045,
	4342, 2879, 4401, 2327, 3594, 2329, 1125, 4311, 2642, 1879,
	3606, 2023, 3248, 2352, 2352, 4185, 3658, 2920, 2489, 840,
	1276, 1992, 647, 1260, 1261, 1262, 1263, 1264, 1265, 1266,
	1267, 1268, 1260, 1261, 1262, 1263, 1264, 1265, 1260, 1261,
	1262, 1263, 1264, 1265, 3132, 4313, 2200, 607, 3568, 4037,
	1244, 4180, 3802, 3803, 4113, 3052, 2442, 3016, 3278, 4046,
	1908, 633, 4346, 2983, 2880, 4171, 2453, 3889, 4067, 4083,
	1765, 2028, 2039, 1907, 647, 2038, 2914, 3657, 1992, 3313,
	3405, 3567, 79, 3392, 1260, 1261, 1262, 1263, 1264, 1265,
	841, 842, 2071, 597, 3452, 74, 3628, 2492, 647, 3031,
	4515, 4514, 607, 4182, 2483, 4028, 4181, 3643, 951, 2476,
	2297, 4051, 869, 2288, 4465, 1117, 2978, 607, 607, 1114,
	3635, 1992, 1116, 3656, 4174, 3314, 2625, 2406, 869, 871,
	4340, 2526, 838, 2530, 1769, 2023, 2406, 3187, 1746, 4302,
	1104, 2415, 4024, 754, 1189, 3868, 826, 2482, 4111, 2519,
	869, 871, 2932, 607, 2540, 3379, 4345, 840, 3481, 3092,
	2502, 2503, 2295, 1089, 4066, 607, 2276, 2022, 1769, 3435,
	3068, 3065, 1240, 3379, 2040, 2969, 1276, 1909, 2041, 647,
	647, 3304, 705, 1220, 2493, 1266, 1267, 1268, 2931, 607,
	674, 865, 2309, 607, 1260, 1261, 1262, 1263, 1264, 1265,
	689, 755, 2497, 1005, 3372, 907, 4157, 1100, 1124, 1219,
	3471, 2933, 836, 4285, 3380, 836, 2917, 961, 1769, 861,
	1138, 3271, 1179, 3470, 1142, 2424, 4388, 1130, 841, 2334,
	1160, 1149, 3380, 752, 1045, 3768, 3312, 1769, 2438, 2354,
	2128, 2404, 2499, 1164, 1165, 4510, 3564, 180, 4415, 2590,
	4504, 3807, 2473, 3362, 3748, 3969, 2800, 3381, 2747, 2488,
	1167, 2132, 2131, 3977, 2750, 4567, 647, 710, 4308, 2751,
	710, 652, 710, 710, 4566, 3381, 2752, 2672, 3970, 2677,
	2678, 2927, 4563, 4562, 4540, 2749, 2505, 2335, 4520, 4519,
	752, 2022, 2930, 4539, 2514, 1276, 2282, 907, 1127, 2516,
	4555, 1762, 1047, 647, 1266, 1267, 1268, 2330, 4554, 1762,
	1103, 4542, 2357, 1260, 1261, 1262, 1263, 1264, 1265, 3453,
	2040, 907, 752, 752, 2041, 870, 825, 4541, 3393, 907,
	2425, 708, 651, 2601, 742, 2130, 742, 742, 2636, 2977,
	4500, 870, 907, 4057, 3329, 4501, 1101, 1173, 4545, 2440,
	2352, 3394, 2676, 2439, 4546, 2441, 2455, 2456, 2457, 2458,
	2459, 1066, 706, 870, 3634, 986, 3005, 2501, 3311, 2444,
	673, 2926, 1106, 907, 907, 2776, 3987, 2635, 1105, 907,
	2637, 2638, 4570, 4503, 3808, 4517, 3363, 3303, 2129, 752,
	2692, 2748, 3988, 4543, 4093, 907, 907, 1129, 3549, 4544,
	907, 4561, 4522, 4560, 2718, 2583, 652, 2507, 4521, 907,
	3833, 2586, 2587, 2928, 3592, 907, 2596, 2193, 1172, 597,
	2600, 993, 2713, 4257, 2650, 1046, 907, 3003, 2573, 832,
	834, 4524, 2579, 907, 907, 907, 2724, 4523, 4525, 4526,
	1004, 2981, 2972, 907, 2876, 2671, 2697, 2679, 3784, 2588,
	4259, 2680, 2593, 3780, 2448, 2574, 865, 2791, 2506, 4258,
	1980, 1227, 1879, 907, 1113, 957, 4260, 651, 907, 4130,
	4486, 2824, 2824, 710, 4369, 2352, 2824, 2824, 2824, 4448,
	4368, 4509, 4482, 2604, 4262, 856, 2603, 2762, 3236, 2848,
	597, 4549, 4408, 2759, 4264, 3759, 3626, 607, 3986, 607,
	607, 2621, 2764, 1889, 607, 607, 3578, 2739, 1102, 2737,
	1190, 3218, 1099, 2735, 2903, 2736, 2738, 1048, 3002, 2474,
	2558, 1171, 3777, 3778, 992, 2423, 2368, 647, 2025, 2885,
	193, 1248, 2072, 2644, 2645, 1003, 2527, 4270, 2069, 3530,
	2081, 2071, 2004, 1195, 1107, 2356, 4268, 1049, 4261, 3743,
	1050, 2783, 3527, 2669, 1051, 3786, 3779, 850, 3782, 3783,
	3785, 3781, 3744, 3980, 4473, 597, 1898, 4478, 607, 4136,
	4137, 4476, 4140, 4477, 4479, 3978, 1052, 4276, 4277, 3775,
	1204, 4135, 4508, 2323, 2324, 4139, 1204, 1204, 752, 1931,
	3981, 2799, 2700, 2798, 2695, 2070, 4275, 2704, 2562, 4191,
	2857, 3346, 2707, 4190, 4191, 607, 607, 2205, 2661, 2171,
	2664, 2706, 4451, 4190, 1055, 2705, 3559, 4269, 2900, 2073,
	2786, 3954, 2717, 2915, 2716, 907, 2214, 2215, 2893, 1973,
	3032, 1053, 2654, 2263, 2979, 3142, 3143, 2561, 196, 2718,
	936, 2563, 3951, 3347, 4117, 2860, 2809, 4116, 1054, 907,
	3953, 3952, 3742, 1769, 3774, 2732, 2742, 2743, 1204, 2730,
	857, 4475, 827, 4480, 2845, 2846, 2798, 3039, 4275, 2560,
	752, 752, 82, 83, 84, 85, 773, 3348, 3349, 3350,
	668, 4365, 3367, 2328, 856, 1056, 2990, 2317, 2992, 2796,
	2973, 2766, 678, 179, 1740, 2937, 4516, 2775, 4404, 2976,
	2832, 3853, 4085, 2525, 3097, 2787, 2788, 3618, 3475, 2821,
	3474, 3246, 2086, 2965, 2833, 2834, 2835, 2793, 1204, 2085,
	4405, 3033, 3224, 2820, 2818, 2819, 2817, 2740, 2865, 2988,
	2710, 2710, 2805, 2804, 1933, 2803, 1883, 1882, 2829, 2831,
	2828, 2316, 2827, 3, 3226, 2521, 2841, 3540, 907, 3221,
	2847, 2902, 2753, 2758, 3220, 2882, 2883, 2894, 2896, 607,
	2948, 2902, 2918, 4569, 4553, 4552, 856, 856, 2038, 2871,
	2874, 751, 4551, 4498, 4002, 1769, 1769, 1769, 2996, 4043,
	4189, 4187, 3583, 3355, 751, 751, 3270, 2877, 2684, 2886,
	3056, 3057, 3289, 2628, 2895, 2374, 2321, 2012, 1966, 2936,
	1961, 1139, 2901, 1109, 1108, 647, 647, 2904, 1086, 998,
	919, 3089, 1255, 625, 621, 647, 3487, 2259, 2260, 2261,
	2262, 3145, 2298, 4333, 2741, 620, 186, 4249, 4248, 2995,
	751, 2934, 4141, 2844, 752, 2844, 3967, 3948, 2957, 3694,
	3570, 3488, 3426, 907, 3423, 3290, 607, 3029, 2909, 2960,
	2048, 2045, 2955, 2956, 907, 873, 907, 907, 2873, 857,
	907, 907, 907, 2970, 907, 871, 2187, 2723, 3101, 3134,
	3102, 3103, 2709, 752, 3604, 907, 2994, 3603, 1974, 2952,
	2989, 3193, 2987, 2337, 3645, 4429, 907, 907, 3018, 3140,
	2282, 3840, 907, 3646, 907, 3011, 3004, 583, 3644, 3133,
	1887, 2858, 2708, 1886, 752, 3022, 3156, 907, 2838, 2744,
	3191, 2219, 3647, 624, 4428, 907, 4322, 3917, 3914, 3712,
	907, 907, 3689, 3684, 3083, 2940, 3683, 3444, 3443, 907,
	1204, 1204, 2951, 2327, 3062, 3436, 3136, 3431, 3344, 1879,
	3058, 857, 857, 2352, 3114, 3113, 2352, 3112, 3111, 3110,
	3109, 3105, 3104, 3072, 3229, 3095, 3084, 2824, 2824, 2824,
	2824, 2824, 3082, 3070, 3069, 3066, 3000, 2999, 2998, 856,
	907, 907, 2729, 907, 2731, 2266, 2164, 3118, 2666, 2641,
	2622, 1992, 597, 1204, 3258, 2960, 3123, 3182, 2265, 2266,
	2725, 2248, 2121, 3087, 3075, 2118, 2116, 2115, 3080, 2101,
	2163, 907, 2097, 2096, 2095, 627, 2090, 2089, 2083, 2082,
	3211, 3212, 898, 62, 2815, 2820, 2818, 2819, 2817, 2068,
	2813, 2816, 907, 907, 2067, 2066, 4022, 2064, 2037, 2033,
	2026, 1884, 607, 3130, 1889, 2690, 3198, 3199, 3201, 3539,
	2815, 2820, 2818, 2819, 2817, 2689, 2813, 2816, 3538, 3060,
	859, 2224, 2295, 2225, 647, 3117, 1762, 848, 4356, 4148,
	907, 607, 3304, 3673, 3125, 3298, 3263, 3126, 2842, 2815,
	2820, 2818, 2819, 2817, 1184, 2813, 2816, 850, 2453, 3305,
	3669, 2245, 3589, 3276, 647, 2864, 596, 598, 2243, 2246,
	2242, 2765, 2244, 2618, 62, 2615, 4390, 3266, 3268, 62,
	3259, 2611, 3197, 4389, 2718, 607, 3636, 2500, 2059, 3342,
	3158, 1039, 1033, 2406, 3215, 2352, 2492, 2100, 3730, 2075,
	2281, 3099, 3357, 602, 752, 3335, 4469, 3617, 2074, 3257,
	2280, 2406, 2406, 3186, 850, 119, 4495, 1992, 3731, 3194,
	3115, 3373, 3666, 603, 857, 1889, 3318, 3207, 1889, 3214,
	1889, 3389, 3206, 3204, 4494, 3297, 2371, 2353, 2353, 3217,
	2937, 3295, 3580, 3227, 3228, 3411, 3223, 854, 3219, 1004,
	2699, 3222, 4032, 4031, 3456, 1134, 3388, 3663, 3574, 752,
	642, 1740, 3901, 3116, 3240, 2540, 1135, 3415, 2183, 2185,
	3007, 1955, 2513, 3249, 2481, 3231, 3232, 3233, 3234, 2375,
	3325, 3352, 3396, 2493, 3333, 3265, 3331, 1957, 1949, 1899,
	1893, 3384, 1001, 3326, 991, 3243, 985, 981, 3152, 3153,
	963, 3292, 4403, 3772, 3351, 3900, 3472, 2404, 3279, 3361,
	909, 850, 3287, 3369, 3086, 2718, 916, 2159, 3390, 3036,
	3034, 2353, 3006, 3176, 3177, 3282, 3293, 3283, 2974, 1769,
	3291, 1769, 3315, 3401, 3404, 2861, 2479, 2475, 2373, 2369,
	2174, 2172, 1769, 3285, 2936, 2062, 2058, 912, 1967, 907,
	1953, 913, 652, 911, 1945, 1943, 3316, 1925, 1168, 1143,
	907, 907, 1140, 1136, 1131, 1119, 907, 907, 3322, 1087,
	1060, 2937, 3414, 907, 1057, 907, 907, 907, 907, 907,
	907, 907, 907, 907, 907, 907, 907, 3334, 3332, 907,
	3368, 3330, 1038, 3353, 1032, 907, 3356, 3671, 3359, 3670,
	907, 2282, 2663, 3518, 907, 1924, 3324, 907, 951, 822,
	4361, 907, 4252, 651, 4194, 4183, 965, 4104, 3881, 3903,
	3389, 3819, 3758, 3674, 3630, 3616, 3607, 907, 3402, 3403,
	3406, 2352, 2352, 3485, 3473, 2352, 2856, 2486, 2282, 3413,
	2480, 916, 1180, 1979, 3531, 1874, 2824, 1854, 710, 2250,
	2186, 3418, 2789, 2790, 2184, 4023, 916, 2711, 3294, 2254,
	916, 2252, 4507, 916, 4487, 2249, 4320, 2251, 2253, 850,
	2940, 1992, 647, 4063, 2484, 2936, 1762, 2982, 2044, 3245,
	1218, 2178, 852, 3409, 1208, 3590, 3839, 4300, 3834, 3597,
	2650, 3300, 4026, 3836, 3581, 4176, 3832, 3308, 1906, 3463,
	607, 3827, 2872, 2384, 2875, 2378, 3569, 3390, 3462, 3476,
	1889, 2862, 3288, 2401, 2397, 3433, 578, 579, 907, 185,
	3438, 2076, 2429, 2754, 2754, 3565, 1912, 1911, 1204, 647,
	3575, 3846, 3845, 3605, 4050, 3547, 3602, 3450, 1992, 2487,
	2626, 3343, 3345, 2980, 640, 2485, 1955, 996, 710, 1128,
	3499, 3584, 2112, 4062, 3340, 751, 3364, 2665, 2461, 2183,
	2185, 2133, 2950, 2949, 751, 751, 2492, 38, 37, 36,
	35, 907, 3587, 34, 2353, 33, 3615, 3573, 32, 31,
	1992, 58, 57, 3650, 3543, 2263, 56, 55, 54, 53,
	52, 51, 3525, 2406, 3521, 50, 49, 3624, 3197, 48,
	47, 2940, 907, 46, 45, 44, 43, 42, 41, 40,
	1769, 39, 3633, 30, 29, 28, 27, 26, 3612, 3613,
	25, 24, 23, 3376, 22, 3622, 3383, 21, 3385, 20,
	3544, 752, 19, 59, 16, 1919, 103, 934, 1929, 3027,
	3621, 195, 1768, 3008, 3370, 3576, 155, 2134, 3652, 1035,
	4379, 2538, 4158, 2493, 3252, 90, 3535, 3536, 4038, 1204,
	3541, 2922, 3593, 2919, 3377, 3396, 3250, 3638, 907, 4068,
	3386, 2681, 3469, 2682, 3256, 2683, 2364, 3254, 2685, 2255,
	751, 2361, 3600, 4447, 3667, 3649, 1768, 3610, 1768, 3552,
	2694, 4474, 596, 4129, 4265, 3975, 3563, 2353, 907, 2353,
	3609, 3763, 907, 907, 907, 4255, 3585, 3757, 3545, 2450,
	752, 751, 3625, 752, 77, 3699, 751, 3950, 3741, 2315,
	1881, 63, 601, 3637, 1204, 600, 4251, 878, 3028, 3992,
	4152, 3787, 3500, 3501, 3502, 3503, 3504, 3505, 3506, 3507,
	3508, 3509, 3510, 3511, 3639, 752, 3686, 3561, 3776, 3688,
	907, 2352, 3244, 3648, 87, 3533, 1885, 3558, 3557, 4138,
	907, 907, 907, 4134, 4133, 3208, 2320, 3555, 712, 2259,
	2260, 2261, 2262, 712, 750, 2333, 2256, 607, 712, 1869,
	712, 3809, 2650, 3258, 15, 3789, 14, 750, 750, 607,
	13, 3675, 2650, 3389, 607, 3677, 3672, 10, 812, 812,
	9, 3679, 8, 7, 3676, 6, 3942, 3940, 3941, 3939,
	1249, 2270, 654, 1284, 2206, 872, 1247, 864, 4110, 3517,
	3792, 2778, 3736, 3933, 1757, 2296, 806, 805, 790, 792,
	808, 3591, 751, 750, 807, 791, 3705, 607, 1147, 789,
	788, 814, 3121, 2286, 902, 901, 3342, 3820, 2293, 1769,
	3678, 3739, 710, 3812, 2774, 647, 1755, 896, 3873, 3879,
	3716, 897, 892, 1238, 1235, 3729, 2559, 3038, 3059, 2565,
	4084, 2662, 1291, 3389, 652, 1286, 647, 647, 3620, 2,
	3390, 1, 0, 0, 0, 0, 0, 0, 0, 0,
	751, 0, 0, 0, 3896, 0, 3753, 3850, 3388, 0,
	0, 0, 0, 3814, 3740, 0, 0, 0, 3608, 0,
	3773, 0, 3805, 0, 652, 710, 742, 3749, 3099, 0,
	3870, 3810, 3921, 0, 3790, 3854, 0, 3849, 3257, 3911,
	0, 0, 0, 3770, 3821, 651, 3829, 0, 3935, 3882,
	907, 3793, 3867, 3828, 0, 3769, 0, 0, 60, 0,
	0, 0, 0, 18, 2718, 3894, 17, 3389, 0, 73,
	3390, 12, 0, 11, 0, 0, 0, 710, 3887, 0,
	3965, 0, 907, 3955, 0, 651, 3752, 907, 0, 742,
	3874, 752, 3956, 907, 3876, 0, 0, 709, 1744, 2754,
	2754, 0, 1747, 1748, 0, 3919, 3890, 3099, 3892, 0,
	3099, 0, 0, 3893, 1768, 0, 0, 0, 0, 0,
	2937, 3905, 0, 3904, 2754, 2754, 1204, 3916, 3998, 3824,
	0, 0, 0, 0, 0, 1204, 1204, 62, 3714, 3715,
	3920, 3923, 3711, 3918, 0, 0, 0, 0, 3957, 0,
	0, 0, 3993, 0, 3390, 0, 0, 0, 3999, 3966,
	3035, 607, 3037, 0, 3547, 3982, 3983, 0, 0, 3984,
	3985, 0, 0, 3703, 3704, 0, 3947, 4007, 3707, 3708,
	907, 0, 0, 0, 0, 0, 752, 0, 3961, 3960,
	0, 4036, 0, 0, 710, 0, 0, 0, 2352, 0,
	4035, 0, 4009, 0, 0, 0, 907, 907, 3238, 0,
	0, 0, 607, 0, 3958, 0, 0, 3930, 3932, 4014,
	0, 0, 4029, 907, 2936, 0, 4003, 0, 0, 0,
	0, 0, 3791, 0, 0, 3587, 0, 4008, 0, 0,
	4006, 0, 3085, 0, 4025, 0, 0, 907, 4016, 4018,
	4017, 4010, 0, 0, 793, 793, 0, 0, 4061, 1769,
	0, 0, 0, 0, 907, 0, 0, 4089, 0, 907,
	0, 0, 1889, 0, 4052, 1879, 0, 2353, 4033, 0,
	2353, 752, 856, 2453, 4064, 4065, 4079, 0, 4053, 4055,
	0, 4059, 907, 0, 4058, 0, 0, 4131, 2754, 4071,
	4072, 0, 4056, 4081, 0, 0, 4128, 1889, 0, 1889,
	0, 4073, 0, 4075, 4118, 4077, 4080, 0, 0, 0,
	4097, 4098, 0, 4094, 3789, 3128, 4160, 4020, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3994, 0, 0, 0, 0, 0, 0, 4155, 0, 0,
	2940, 0, 712, 712, 597, 0, 0, 0, 4156, 0,
	4154, 0, 4114, 4120, 4169, 0, 4126, 4125, 0, 0,
	1769, 712, 647, 4163, 4165, 0, 0, 4070, 3099, 0,
	0, 0, 0, 0, 0, 4151, 712, 712, 1769, 0,
	712, 4166, 0, 0, 752, 1889, 4164, 0, 0, 652,
	0, 0, 0, 0, 0, 0, 907, 0, 1204, 0,
	0, 4173, 4179, 4161, 0, 0, 0, 0, 0, 4096,
	0, 4096, 4096, 0, 3935, 4186, 907, 0, 907, 907,
	0, 4188, 907, 907, 907, 4192, 0, 4198, 0, 0,
	812, 4214, 0, 3965, 3974, 0, 0, 0, 907, 2353,
	2353, 907, 0, 4211, 3989, 0, 4250, 857, 0, 0,
	651, 0, 4123, 4217, 0, 0, 0, 0, 0, 1889,
	4215, 0, 0, 4226, 0, 0, 4234, 0, 4233, 4196,
	4213, 4232, 0, 907, 0, 2353, 2268, 0, 4245, 4246,
	856, 0, 0, 3389, 4254, 4208, 907, 4210, 0, 4212,
	4301, 0, 710, 710, 0, 0, 0, 0, 4298, 4303,
	4304, 4291, 4282, 4295, 0, 1204, 0, 0, 0, 4288,
	4289, 4235, 4236, 0, 0, 0, 0, 0, 0, 4292,
	0, 4293, 0, 2754, 2754, 2754, 2754, 2754, 2754, 2754,
	2754, 2754, 2754, 2754, 2754, 0, 0, 4297, 710, 0,
	4327, 0, 0, 0, 4294, 4334, 0, 0, 907, 0,
	2038, 0, 907, 4315, 4312, 0, 742, 742, 4349, 1889,
	1889, 4330, 4331, 4352, 4321, 4326, 0, 4329, 907, 907,
	3390, 0, 907, 4305, 0, 0, 4341, 0, 750, 0,
	1879, 4323, 0, 4325, 2327, 0, 0, 750, 750, 4347,
	4348, 752, 0, 0, 4338, 0, 0, 0, 4160, 647,
	647, 0, 742, 4363, 0, 0, 4353, 3389, 4358, 710,
	0, 712, 0, 712, 4318, 712, 0, 4371, 4372, 4362,
	0, 4364, 0, 0, 4367, 4378, 712, 712, 712, 712,
	712, 4376, 4380, 4370, 4154, 0, 0, 712, 4374, 0,
	4142, 4143, 4144, 4145, 647, 4387, 0, 0, 4375, 4377,
	0, 0, 0, 0, 0, 857, 712, 0, 4394, 0,
	4115, 0, 0, 0, 2353, 1767, 712, 0, 752, 712,
	4411, 907, 0, 4382, 4396, 2353, 2353, 907, 0, 2353,
	0, 0, 0, 0, 4414, 4161, 0, 4070, 0, 0,
	0, 0, 2353, 0, 3390, 4146, 0, 4149, 0, 812,
	4395, 4413, 0, 750, 907, 0, 812, 0, 0, 1767,
	0, 1767, 0, 4419, 907, 4335, 4439, 4440, 4441, 3965,
	4425, 4427, 4418, 4420, 0, 4422, 4438, 0, 0, 647,
	0, 4391, 0, 4421, 750, 3389, 0, 0, 4437, 750,
	4449, 4450, 4442, 0, 3479, 0, 1768, 4453, 1769, 4464,
	4456, 0, 0, 0, 0, 4411, 4430, 4431, 4458, 4455,
	4457, 0, 0, 0, 856, 0, 4454, 4434, 0, 0,
	4417, 4481, 4484, 0, 0, 0, 793, 0, 0, 0,
	1768, 0, 4488, 4209, 907, 0, 4205, 812, 4490, 4493,
	0, 4496, 0, 0, 0, 0, 0, 4433, 0, 0,
	0, 0, 4489, 0, 710, 4505, 4506, 4432, 0, 0,
	2353, 0, 4512, 1769, 0, 4464, 0, 0, 0, 0,
	0, 0, 3390, 4528, 4527, 710, 710, 4536, 0, 0,
	1768, 4538, 4534, 4535, 0, 4531, 0, 4511, 0, 4532,
	4411, 4548, 0, 4547, 0, 751, 0, 0, 4550, 1768,
	0, 0, 0, 0, 0, 750, 4464, 4278, 0, 0,
	4538, 4556, 0, 0, 0, 1045, 0, 0, 4513, 4411,
	4564, 0, 0, 4565, 0, 0, 0, 0, 0, 1769,
	0, 0, 0, 812, 0, 812, 0, 0, 712, 742,
	742, 0, 0, 0, 0, 0, 0, 0, 4446, 0,
	0, 0, 751, 0, 0, 0, 0, 0, 3760, 2754,
	812, 0, 0, 750, 0, 0, 0, 0, 0, 0,
	1769, 0, 0, 0, 0, 4354, 4355, 0, 0, 4357,
	0, 0, 2279, 1047, 751, 751, 0, 0, 0, 857,
	0, 0, 1287, 0, 0, 1257, 0, 0, 0, 1269,
	1270, 1271, 0, 0, 0, 0, 0, 4350, 4351, 0,
	0, 1860, 0, 0, 1861, 0, 0, 0, 1866, 0,
	1858, 0, 0, 0, 0, 1863, 1867, 1862, 0, 1864,
	712, 0, 0, 1865, 1280, 1281, 1859, 712, 712, 0,
	0, 0, 0, 1868, 0, 2353, 0, 0, 712, 812,
	0, 751, 712, 712, 712, 712, 712, 712, 712, 712,
	712, 712, 712, 712, 712, 712, 712, 712, 0, 712,
	0, 0, 0, 0, 0, 0, 0, 1767, 0, 0,
	0, 3680, 3681, 0, 0, 0, 0, 2353, 0, 0,
	0, 0, 0, 0, 0, 793, 0, 0, 0, 0,
	0, 0, 793, 0, 0, 0, 1046, 0, 0, 1287,
	2268, 3698, 1257, 0, 0, 598, 1269, 1270, 1271, 0,
	0, 0, 0, 0, 0, 2341, 2341, 0, 1860, 0,
	0, 1861, 0, 0, 4463, 1866, 0, 1858, 3713, 0,
	0, 0, 1863, 1867, 1862, 0, 1864, 0, 0, 0,
	1865, 1280, 1281, 1859, 0, 0, 0, 0, 0, 0,
	1868, 0, 0, 0, 0, 0, 0, 2353, 0, 0,
	3968, 0, 0, 0, 0, 2754, 0, 0, 0, 0,
	0, 3397, 1287, 793, 0, 1257, 0, 0, 0, 1269,
	1270, 1271, 4461, 0, 0, 0, 0, 0, 1048, 0,
	4463, 1860, 0, 0, 1861, 0, 0, 0, 1866, 0,
	1858, 0, 0, 0, 0, 1863, 1867, 1862, 0, 1864,
	0, 0, 0, 1865, 1280, 1281, 1859, 0, 1049, 0,
	0, 1050, 0, 1868, 0, 1051, 0, 0, 0, 0,
	0, 4463, 0, 0, 0, 0, 0, 1898, 0, 0,
	751, 2353, 0, 0, 0, 0, 0, 1052, 4461, 0,
	0, 2353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 793,
	0, 793, 0, 1287, 0, 0, 1257, 0, 0, 0,
	1269, 1270, 1271, 0, 0, 1055, 0, 0, 0, 4461,
	0, 0, 1860, 0, 0, 1861, 793, 0, 0, 1866,
	0, 1858, 1053, 0, 0, 1768, 1863, 1867, 1862, 0,
	1864, 0, 0, 0, 1865, 1280, 1281, 1859, 1287, 1054,
	0, 1257, 751, 751, 1868, 1269, 1270, 1271, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1860, 0, 0,
	1861, 0, 0, 0, 1866, 0, 1858, 0, 0, 0,
	0, 1863, 1867, 1862, 0, 1864, 1056, 0, 0, 1865,
	1280, 1281, 1859, 0, 0, 0, 0, 0, 0, 1868,
	2754, 0, 2353, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 793, 0, 0, 0, 0,
	0, 0, 1015, 0, 0, 0, 0, 1016, 0, 0,
	0, 1025, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1768, 1768, 1768,
	0, 1744, 0, 0, 1287, 0, 0, 1257, 0, 0,
	0, 1269, 1270, 1271, 0, 0, 3976, 0, 0, 0,
	0, 0, 2341, 1860, 0, 0, 1861, 0, 0, 0,
	1866, 0, 1858, 0, 1018, 0, 0, 1863, 1867, 1862,
	0, 1864, 0, 0, 0, 1865, 1280, 1281, 1859, 2268,
	0, 0, 0, 0, 0, 1868, 751, 0, 1276, 0,
	0, 0, 0, 1024, 0, 0, 0, 1266, 1267, 1268,
	2353, 0, 1744, 2760, 4383, 0, 1260, 1261, 1262, 1263,
	1264, 1265, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1029, 751, 4263, 0, 0, 0,
	0, 0, 712, 712, 0, 712, 0, 0, 0, 0,
	0, 712, 0, 712, 0, 0, 1287, 0, 0, 1257,
	0, 0, 0, 1269, 1270, 1271, 751, 0, 0, 0,
	0, 0, 0, 0, 0, 1860, 0, 1014, 1861, 0,
	0, 0, 1866, 0, 1858, 2826, 0, 2830, 1037, 1863,
	1867, 1862, 0, 1864, 0, 0, 0, 1865, 1280, 1281,
	1859, 0, 0, 0, 1019, 0, 0, 1868, 0, 0,
	0, 0, 0, 0, 0, 1276, 0, 0, 0, 0,
	0, 0, 0, 0, 1266, 1267, 1268, 0, 0, 0,
	0, 4373, 0, 1260, 1261, 1262, 1263, 1264, 1265, 1021,
	0, 0, 0, 0, 0, 1020, 0, 0, 712, 0,
	0, 0, 712, 712, 712, 712, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2754, 2754, 0, 0,
	2754, 0, 0, 0, 712, 712, 0, 2353, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1276, 0,
	1022, 0, 0, 0, 0, 0, 812, 1266, 1267, 1268,
	0, 0, 0, 0, 4231, 812, 1260, 1261, 1262, 1263,
	1264, 1265, 0, 0, 0, 0, 0, 0, 0, 1767,
	0, 0, 0, 62, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1023, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1026, 0, 0, 0,
	0, 0, 0, 1767, 0, 0, 0, 0, 712, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 812, 0, 0, 0, 0, 0, 0, 0, 1036,
	0, 1028, 1027, 0, 812, 0, 751, 0, 0, 1276,
	0, 0, 2353, 605, 0, 0, 0, 0, 1266, 1267,
	1268, 2353, 0, 1767, 0, 4216, 0, 1260, 1261, 1262,
	1263, 1264, 1265, 0, 0, 0, 0, 0, 750, 0,
	0, 0, 1767, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1276, 0, 0, 0, 0, 0,
	0, 751, 0, 1266, 1267, 1268, 0, 0, 0, 0,
	4193, 0, 1260, 1261, 1262, 1263, 1264, 1265, 1017, 0,
	0, 1287, 0, 0, 1257, 0, 712, 0, 1269, 1270,
	1271, 0, 0, 0, 0, 750, 0, 0, 0, 0,
	1860, 628, 0, 1861, 0, 0, 0, 1866, 1031, 1858,
	0, 0, 0, 0, 1863, 1867, 1862, 2308, 1864, 0,
	0, 0, 1865, 1280, 1281, 1859, 0, 750, 750, 0,
	0, 1768, 1868, 1768, 0, 697, 700, 702, 0, 0,
	0, 0, 0, 0, 1768, 0, 0, 0, 712, 2353,
	812, 712, 0, 712, 712, 0, 812, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1276, 0, 0, 0, 0, 0, 0, 0, 712, 1266,
	1267, 1268, 0, 0, 0, 0, 0, 0, 1260, 1261,
	1262, 1263, 1264, 1265, 750, 0, 0, 0, 0, 0,
	0, 0, 712, 0, 0, 0, 0, 0, 0, 0,
	712, 1015, 0, 0, 0, 0, 1016, 0, 0, 0,
	1025, 0, 0, 712, 1744, 0, 0, 0, 0, 0,
	0, 712, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 712, 712, 0, 0, 62, 0,
	712, 0, 2412, 62, 62, 0, 0, 0, 0, 0,
	0, 2412, 0, 0, 0, 2341, 712, 712, 2341, 0,
	0, 712, 1276, 1018, 0, 0, 0, 0, 0, 0,
	712, 1266, 1267, 1268, 0, 0, 712, 0, 3927, 0,
	1260, 1261, 1262, 1263, 1264, 1265, 0, 712, 0, 0,
	0, 0, 1024, 0, 712, 712, 712, 0, 0, 62,
	0, 0, 0, 0, 712, 0, 0, 0, 0, 0,
	781, 886, 0, 1287, 0, 0, 1257, 793, 0, 0,
	1269, 1270, 1271, 1029, 712, 0, 0, 0, 0, 712,
	793, 0, 1860, 0, 712, 1861, 712, 0, 0, 1866,
	0, 1858, 0, 0, 0, 0, 1863, 1867, 1862, 0,
	1864, 0, 0, 0, 1865, 1280, 1281, 1859, 0, 0,
	0, 0, 0, 0, 1868, 0, 1014, 0, 812, 0,
	0, 0, 0, 750, 0, 0, 0, 1012, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 685, 616,
	616, 0, 1768, 1019, 0, 0, 0, 812, 812, 0,
	0, 0, 0, 0, 0, 0, 812, 0, 0, 0,
	671, 0, 675, 751, 0, 0, 680, 681, 0, 0,
	686, 687, 0, 0, 0, 0, 1013, 2341, 1021, 0,
	0, 0, 0, 0, 1020, 0, 0, 0, 1767, 812,
	739, 0, 0, 0, 0, 812, 756, 0, 759, 0,
	761, 762, 763, 764, 765, 750, 750, 0, 770, 0,
	0, 0, 775, 0, 0, 0, 782, 0, 1015, 0,
	0, 0, 0, 1016, 0, 0, 793, 1025, 0, 1022,
	0, 0, 793, 646, 0, 667, 712, 669, 0, 0,
	0, 0, 751, 0, 0, 751, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	712, 0, 0, 0, 0, 0, 737, 738, 0, 740,
	0, 0, 0, 0, 1023, 0, 0, 751, 0, 0,
	0, 0, 0, 0, 0, 1026, 0, 771, 0, 774,
	1018, 0, 778, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1767, 1767, 1767, 0, 0, 0, 0, 1276, 2575, 1024,
	1028, 1027, 0, 0, 0, 0, 1266, 1267, 1268, 0,
	0, 0, 0, 3899, 0, 1260, 1261, 1262, 1263, 1264,
	1265, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1029, 0, 925, 0, 0, 0, 0, 0, 0, 712,
	0, 0, 0, 0, 0, 935, 0, 0, 0, 750,
	0, 0, 0, 944, 946, 0, 948, 0, 0, 0,
	0, 1768, 0, 0, 0, 0, 0, 0, 0, 0,
	2308, 2308, 2308, 1014, 0, 0, 0, 1017, 0, 0,
	0, 0, 0, 0, 1012, 0, 0, 0, 750, 0,
	0, 0, 812, 2341, 2341, 0, 0, 2341, 987, 0,
	1019, 812, 0, 0, 0, 0, 0, 1031, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 750,
	0, 0, 0, 0, 0, 0, 0, 0, 1061, 0,
	0, 0, 0, 1013, 712, 1021, 0, 0, 0, 0,
	0, 1020, 0, 0, 2866, 712, 0, 712, 712, 0,
	0, 712, 712, 712, 0, 712, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 712, 0, 0, 0,
	0, 0, 0, 2412, 2866, 0, 0, 712, 712, 0,
	0, 0, 2899, 712, 0, 712, 1022, 0, 0, 0,
	0, 0, 0, 751, 0, 0, 0, 0, 712, 0,
	0, 0, 0, 0, 0, 0, 712, 0, 0, 0,
	0, 712, 712, 0, 0, 2866, 0, 0, 0, 0,
	712, 793, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1023, 0, 0, 712, 0, 0, 712, 0, 0,
	0, 0, 1026, 0, 0, 0, 0, 0, 0, 1276,
	0, 0, 0, 0, 0, 0, 0, 0, 1266, 1267,
	1268, 712, 712, 0, 712, 3878, 0, 1260, 1261, 1262,
	1263, 1264, 1265, 0, 0, 1010, 0, 1028, 1027, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 751, 0,
	0, 0, 712, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 812, 712, 712, 812, 0, 812, 0, 0,
	1015, 0, 0, 0, 0, 1016, 0, 0, 0, 1025,
	812, 812, 0, 0, 812, 0, 0, 0, 0, 750,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1851, 712, 0, 0, 1017, 616, 0, 0, 0, 0,
	0, 1768, 0, 0, 0, 0, 0, 812, 0, 0,
	0, 1895, 0, 0, 0, 0, 0, 954, 0, 0,
	0, 0, 0, 751, 1031, 0, 0, 0, 0, 0,
	0, 0, 1018, 0, 750, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 712, 712, 0, 0,
	0, 0, 0, 2341, 0, 0, 0, 0, 1960, 0,
	995, 1024, 1964, 999, 0, 0, 0, 1976, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 793, 0,
	0, 0, 712, 0, 0, 0, 2021, 793, 0, 0,
	0, 0, 1029, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2035, 62, 1767, 812, 1767, 0, 970, 971,
	0, 0, 1768, 0, 0, 0, 0, 1767, 0, 0,
	62, 2052, 0, 0, 2055, 0, 0, 0, 0, 0,
	1768, 0, 0, 0, 1083, 1014, 751, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 0, 1110, 1007, 0,
	2087, 0, 0, 0, 1976, 1976, 1976, 0, 0, 0,
	0, 0, 1019, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2109, 2110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 812, 0, 0, 0, 0, 0,
	0, 0, 2308, 0, 0, 0, 0, 1021, 0, 0,
	712, 0, 0, 1020, 0, 0, 0, 0, 0, 0,
	0, 712, 712, 1084, 1085, 0, 0, 712, 712, 0,
	0, 0, 0, 0, 712, 812, 712, 712, 712, 712,
	712, 712, 712, 712, 712, 712, 712, 712, 0, 0,
	712, 0, 2175, 0, 0, 0, 712, 0, 1022, 0,
	0, 712, 0, 0, 0, 712, 0, 0, 712, 0,
	0, 62, 712, 1272, 0, 0, 0, 0, 0, 0,
	0, 712, 0, 0, 0, 0, 0, 0, 712, 0,
	0, 778, 712, 712, 0, 0, 712, 0, 0, 0,
	0, 0, 0, 1023, 0, 0, 0, 0, 2412, 712,
	0, 2866, 0, 2866, 1026, 0, 0, 0, 0, 616,
	0, 0, 2210, 0, 0, 1272, 2412, 2412, 0, 2220,
	2866, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 812, 62, 0, 0, 0, 1910, 812, 1287, 1028,
	1027, 1257, 0, 751, 0, 1269, 1270, 1271, 0, 0,
	0, 0, 812, 793, 0, 0, 0, 1860, 0, 0,
	1861, 0, 0, 0, 1866, 0, 1858, 1946, 0, 712,
	0, 1863, 1867, 1862, 0, 1864, 0, 0, 0, 1865,
	1280, 1281, 1859, 0, 0, 1767, 0, 0, 0, 1868,
	2341, 0, 0, 0, 0, 0, 0, 0, 0, 712,
	0, 0, 0, 0, 0, 0, 750, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1017, 712, 0, 0,
	751, 0, 712, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1938, 1939, 1940, 1941, 0, 1942,
	0, 0, 0, 0, 0, 0, 1031, 2063, 0, 0,
	0, 2866, 0, 712, 0, 0, 1744, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2088, 0,
	812, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2024, 0, 750, 0, 0, 750, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1768, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 812, 0, 0, 0, 0, 0, 0, 2154, 712,
	750, 2156, 0, 0, 0, 0, 0, 0, 0, 0,
	793, 0, 0, 0, 0, 812, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 712,
	0, 0, 0, 712, 712, 712, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1768, 0, 0, 0, 0,
	0, 793, 0, 0, 0, 0, 0, 0, 2123, 2124,
	2125, 2126, 2127, 0, 0, 92, 0, 0, 0, 0,
	778, 2152, 119, 0, 0, 0, 0, 0, 2155, 0,
	0, 712, 712, 0, 2308, 0, 0, 0, 2308, 0,
	115, 712, 712, 712, 95, 0, 0, 0, 1272, 0,
	0, 0, 0, 0, 1767, 1272, 0, 0, 0, 0,
	0, 1768, 0, 1272, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 712, 0, 0, 0, 0, 812,
	0, 0, 0, 0, 0, 0, 102, 1015, 1045, 0,
	0, 0, 1016, 0, 0, 0, 1025, 0, 0, 0,
	0, 1287, 1768, 0, 1257, 0, 0, 3588, 1269, 1270,
	1271, 0, 0, 793, 0, 0, 0, 0, 0, 0,
	1860, 0, 0, 1861, 0, 0, 62, 1866, 2412, 1858,
	0, 0, 0, 712, 1863, 1867, 1862, 0, 1864, 0,
	0, 0, 1865, 1280, 1281, 1859, 0, 2223, 0, 0,
	0, 0, 1868, 0, 712, 0, 1047, 0, 0, 1018,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 812, 0, 0, 107, 0, 0,
	0, 0, 0, 0, 0, 1015, 750, 0, 1024, 0,
	1016, 0, 0, 0, 1025, 0, 712, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 812, 812, 0, 0, 0, 0, 0, 1029,
	0, 712, 0, 0, 933, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 712, 0,
	0, 0, 0, 0, 94, 0, 793, 0, 712, 0,
	0, 104, 0, 712, 0, 0, 0, 1018, 712, 99,
	0, 0, 1014, 0, 712, 0, 0, 100, 0, 0,
	0, 0, 116, 0, 1276, 0, 0, 0, 0, 1046,
	0, 750, 0, 1266, 1267, 1268, 1024, 793, 0, 1019,
	3855, 0, 1260, 1261, 1262, 1263, 1264, 1265, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 793, 0, 0, 812, 0, 0, 1029, 0, 0,
	0, 0, 812, 0, 1021, 0, 0, 0, 0, 0,
	1020, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 712, 0, 0, 1767, 0, 0, 0, 106, 0,
	1014, 0, 0, 0, 0, 712, 0, 0, 0, 712,
	109, 1048, 0, 0, 0, 1022, 750, 712, 712, 0,
	0, 0, 0, 0, 0, 0, 0, 1019, 0, 0,
	0, 0, 0, 0, 712, 0, 0, 93, 0, 0,
	0, 1049, 0, 0, 1050, 101, 0, 0, 1051, 0,
	2436, 0, 0, 0, 812, 0, 812, 812, 712, 0,
	1044, 108, 1021, 0, 0, 2866, 110, 0, 1020, 0,
	1052, 1026, 105, 0, 114, 712, 113, 97, 0, 0,
	712, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 118, 0, 117, 812, 0, 0,
	0, 0, 0, 712, 2589, 1767, 1028, 1027, 1055, 0,
	0, 0, 0, 1022, 0, 0, 0, 0, 0, 0,
	2511, 2512, 0, 1767, 0, 1053, 0, 0, 0, 750,
	0, 0, 0, 0, 0, 111, 0, 712, 0, 0,
	0, 0, 1054, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2556, 0, 1023, 0,
	2866, 0, 0, 0, 0, 0, 0, 0, 2578, 1026,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1056,
	0, 0, 0, 1017, 0, 1272, 1272, 1272, 1272, 1272,
	0, 0, 2597, 0, 1272, 0, 0, 0, 793, 793,
	0, 0, 3081, 0, 1028, 1027, 0, 0, 1272, 0,
	0, 0, 0, 1031, 0, 0, 0, 712, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 712, 0, 712,
	712, 0, 0, 712, 712, 712, 0, 1276, 0, 0,
	0, 0, 0, 0, 0, 0, 1266, 1267, 1268, 712,
	0, 0, 712, 3738, 0, 1260, 1261, 1262, 1263, 1264,
	1265, 0, 0, 1015, 0, 0, 0, 0, 1016, 0,
	0, 1017, 1025, 0, 1287, 0, 0, 1257, 0, 0,
	0, 1269, 1270, 1271, 712, 0, 0, 0, 0, 0,
	3588, 1272, 0, 1860, 712, 0, 1861, 712, 793, 0,
	1866, 1031, 1858, 712, 712, 0, 0, 1863, 1867, 1862,
	0, 1864, 0, 0, 0, 1865, 1280, 1281, 1859, 0,
	0, 0, 0, 0, 0, 1868, 750, 0, 0, 0,
	0, 0, 0, 0, 0, 1018, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 712,
	812, 0, 0, 0, 0, 0, 2435, 0, 0, 712,
	0, 0, 0, 712, 1024, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2449, 0, 0, 2223, 0, 712,
	712, 0, 0, 712, 0, 0, 2466, 0, 0, 0,
	793, 0, 793, 793, 2477, 1029, 0, 0, 0, 0,
	0, 0, 0, 750, 0, 0, 0, 0, 0, 712,
	2367, 0, 0, 0, 0, 0, 0, 0, 712, 0,
	712, 0, 0, 2508, 2509, 2510, 0, 0, 0, 0,
	0, 0, 0, 793, 2517, 0, 0, 0, 1014, 0,
	0, 0, 2528, 0, 2532, 2533, 0, 0, 0, 0,
	2537, 0, 0, 2541, 2542, 881, 881, 2549, 0, 2551,
	2554, 0, 2460, 0, 0, 1019, 0, 0, 0, 0,
	0, 0, 0, 2576, 2577, 0, 0, 2581, 2582, 0,
	0, 0, 712, 1767, 0, 0, 2495, 0, 712, 0,
	2851, 0, 2854, 2855, 2591, 2592, 0, 2859, 0, 0,
	1021, 0, 0, 0, 0, 2605, 1020, 2606, 2607, 2608,
	2609, 2610, 0, 0, 2612, 712, 0, 0, 2616, 0,
	0, 0, 2619, 2620, 0, 712, 2623, 2624, 0, 0,
	2629, 2630, 0, 812, 0, 0, 2631, 2632, 2633, 0,
	0, 0, 2634, 0, 0, 0, 712, 0, 1767, 0,
	0, 1022, 0, 0, 0, 0, 0, 0, 0, 2647,
	0, 2916, 2648, 0, 0, 0, 0, 2584, 2585, 2659,
	2660, 0, 0, 0, 0, 2667, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 712, 1023, 0, 2967, 2968,
	0, 0, 0, 0, 0, 0, 0, 1026, 0, 0,
	0, 0, 0, 0, 1767, 712, 0, 0, 0, 0,
	0, 0, 1976, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 712, 712, 0, 0,
	3076, 0, 1028, 1027, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2668, 1767, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1272, 1272,
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
	1272, 1272, 1272, 1272, 0, 0, 0, 0, 0, 1272,
	0, 778, 0, 0, 0, 0, 793, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1017,
	0, 0, 0, 0, 1236, 0, 1243, 0, 1251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1733,
	1734, 1735, 1736, 1737, 0, 0, 0, 0, 1272, 1031,
	1742, 0, 3100, 0, 0, 0, 0, 0, 0, 0,
	0, 1272, 0, 0, 0, 0, 0, 0, 0, 1756,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1849,
	1276, 0, 0, 0, 0, 0, 0, 0, 0, 1266,
	1267, 1268, 0, 0, 0, 0, 3735, 0, 1260, 1261,
	1262, 1263, 1264, 1265, 0, 0, 0, 1287, 0, 0,
	1257, 0, 0, 0, 1269, 1270, 1271, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1860, 0, 0, 1861,
	0, 0, 0, 1866, 0, 1858, 0, 0, 0, 3139,
	1863, 1867, 1862, 0, 1864, 0, 0, 0, 1865, 1280,
	1281, 1859, 0, 0, 1287, 0, 0, 1257, 1868, 0,
	0, 1269, 1270, 1271, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1860, 0, 2913, 1861, 0, 0, 793,
	1866, 0, 1858, 0, 0, 0, 0, 1863, 1867, 1862,
	0, 1864, 0, 0, 3559, 1865, 1280, 1281, 1859, 0,
	0, 0, 0, 2954, 0, 1868, 0, 0, 0, 0,
	0, 2962, 0, 2962, 0, 2884, 0, 0, 0, 2971,
	1287, 0, 0, 1257, 0, 0, 0, 1269, 1270, 1271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1860,
	0, 0, 1861, 0, 0, 0, 1866, 0, 1858, 0,
	0, 0, 0, 1863, 1867, 1862, 0, 1864, 0, 0,
	0, 1865, 1280, 1281, 1859, 0, 3021, 0, 0, 0,
	0, 1868, 1287, 0, 0, 1257, 0, 0, 0, 1269,
	1270, 1271, 0, 0, 0, 0, 3045, 3046, 3047, 3048,
	0, 1860, 0, 0, 1861, 0, 0, 0, 1866, 0,
	1858, 0, 0, 0, 0, 1863, 1867, 1862, 0, 1864,
	0, 0, 0, 1865, 1280, 1281, 1859, 0, 0, 0,
	0, 0, 0, 1868, 0, 3286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3073, 3074, 0, 3077,
	3078, 3079, 1287, 0, 0, 1257, 0, 0, 0, 1269,
	1270, 1271, 0, 0, 3309, 0, 1272, 0, 0, 0,
	0, 1860, 0, 3090, 1861, 0, 0, 0, 1866, 0,
	1858, 0, 0, 0, 0, 1863, 1867, 1862, 0, 1864,
	0, 0, 3106, 1865, 1280, 1281, 1859, 3107, 0, 0,
	0, 0, 0, 1868, 0, 0, 0, 0, 1960, 0,
	1733, 1734, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 881, 0, 0, 0, 2226, 2227, 2228, 2229, 2230,
	2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240,
	2241, 0, 2247, 0, 0, 0, 0, 3129, 0, 0,
	1287, 0, 0, 1257, 0, 0, 0, 1269, 1270, 1271,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1860,
	0, 0, 1861, 0, 0, 0, 1866, 0, 1858, 1272,
	1272, 0, 0, 1863, 1867, 1862, 1272, 1864, 0, 0,
	0, 1865, 1280, 1281, 1859, 0, 0, 0, 0, 0,
	0, 1868, 0, 3119, 3120, 0, 0, 0, 0, 0,
	0, 0, 0, 3124, 0, 0, 0, 0, 0, 1272,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1272,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1287, 0, 0, 1257, 0, 1272, 0, 1269, 1270,
	1271, 0, 0, 0, 0, 0, 0, 0, 1272, 0,
	1860, 0, 1272, 1861, 0, 0, 0, 1866, 0, 1858,
	0, 0, 0, 0, 1863, 1867, 1862, 0, 1864, 0,
	0, 0, 1865, 1280, 1281, 1859, 0, 1287, 0, 0,
	1257, 0, 1868, 0, 1269, 1270, 1271, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1860, 0, 0, 1861,
	0, 0, 3267, 1866, 0, 1858, 0, 0, 0, 0,
	1863, 1867, 1862, 1276, 1864, 0, 0, 0, 1865, 1280,
	1281, 1859, 1266, 1267, 1268, 0, 0, 0, 1868, 3724,
	0, 1260, 1261, 1262, 1263, 1264, 1265, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2962, 0, 0, 0, 0,
	1276, 3301, 0, 0, 0, 0, 0, 0, 0, 1266,
	1267, 1268, 0, 3189, 0, 0, 0, 0, 1260, 1261,
	1262, 1263, 1264, 1265, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3599, 0, 0, 0, 3336, 0, 0,
	0, 0, 0, 0, 2962, 3554, 1276, 0, 1272, 0,
	0, 0, 0, 0, 0, 1266, 1267, 1268, 0, 0,
	3365, 3366, 3302, 0, 1260, 1261, 1262, 1263, 1264, 1265,
	0, 0, 0, 0, 0, 1272, 0, 3382, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3321, 0, 0, 0, 0, 3412, 1276, 0,
	0, 0, 0, 0, 0, 0, 0, 1266, 1267, 1268,
	0, 0, 0, 3417, 3513, 0, 1260, 1261, 1262, 1263,
	1264, 1265, 3419, 3420, 3421, 0, 0, 3424, 0, 0,
	3427, 3428, 3429, 3430, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3439, 0, 3440, 0, 3441, 0, 0,
	1272, 0, 0, 0, 0, 0, 3454, 0, 0, 0,
	0, 0, 0, 0, 0, 3460, 3461, 0, 1276, 0,
	3464, 3465, 3466, 3467, 3468, 0, 0, 1266, 1267, 1268,
	0, 0, 0, 0, 3442, 0, 1260, 1261, 1262, 1263,
	1264, 1265, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1272, 1272,
	1272, 0, 0, 1272, 0, 0, 1272, 0, 0, 0,
	0, 1272, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2306, 0, 0, 0, 0, 0,
	0, 0, 1272, 0, 0, 0, 0, 0, 0, 0,
	1272, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1272, 1272, 1276, 0, 0, 0,
	0, 0, 0, 0, 0, 1266, 1267, 1268, 0, 3534,
	0, 0, 3375, 0, 1260, 1261, 1262, 1263, 1264, 1265,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1272, 1272, 0, 0, 0, 0, 0,
	2210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1287, 3815, 0, 1257, 0, 0, 0, 1269, 1270,
	1271, 2319, 0, 0, 1272, 2239, 2240, 2241, 2247, 0,
	1860, 0, 1272, 1272, 0, 0, 0, 1866, 0, 1858,
	0, 0, 0, 0, 1863, 1867, 1862, 1276, 1864, 0,
	0, 0, 1865, 1280, 1281, 1859, 1266, 1267, 1268, 0,
	3866, 0, 1868, 3354, 0, 1260, 1261, 1262, 1263, 1264,
	1265, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3627, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3577, 0, 0, 1276, 0, 0, 0, 0, 0, 0,
	0, 0, 1266, 1267, 1268, 0, 0, 0, 0, 0,
	0, 1260, 1261, 1262, 1263, 1264, 1265, 1287, 0, 0,
	1257, 0, 0, 0, 1269, 1270, 1271, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1860, 0, 0, 1861,
	0, 0, 0, 1866, 0, 1858, 0, 3619, 0, 0,
	1863, 1867, 1862, 0, 1864, 0, 0, 0, 1865, 1280,
	1281, 1859, 0, 0, 0, 0, 0, 0, 1868, 0,
	0, 1287, 0, 3685, 1257, 0, 3687, 0, 1269, 1270,
	1271, 0, 3690, 3691, 3692, 0, 0, 3695, 3696, 3697,
	1860, 0, 0, 1861, 3700, 3701, 0, 1866, 0, 1858,
	0, 0, 0, 0, 1863, 1867, 1862, 0, 1864, 0,
	0, 0, 1865, 1280, 1281, 1859, 0, 0, 0, 0,
	0, 0, 1868, 0, 0, 3717, 3718, 0, 0, 3722,
	0, 3723, 0, 0, 0, 0, 1272, 0, 0, 2614,
	0, 1272, 1272, 0, 0, 0, 1272, 1272, 0, 0,
	1272, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1272, 0, 0, 1272, 1272, 1287,
	0, 1272, 1257, 0, 4030, 0, 1269, 1270, 1271, 0,
	0, 3747, 0, 0, 1272, 0, 0, 0, 1860, 0,
	0, 1861, 0, 0, 0, 1866, 0, 1858, 0, 0,
	0, 0, 1863, 1867, 1862, 0, 1864, 0, 0, 0,
	1865, 1280, 1281, 1859, 0, 0, 0, 0, 0, 0,
	1868, 0, 0, 0, 0, 4076, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1243, 0, 2962, 0, 0,
	0, 0, 0, 1742, 0, 0, 1272, 0, 0, 3860,
	0, 0, 0, 0, 3863, 0, 1251, 0, 0, 0,
	3869, 0, 0, 3871, 0, 0, 0, 0, 0, 0,
	0, 0, 1272, 0, 0, 1287, 0, 0, 1257, 0,
	0, 0, 1269, 1270, 1271, 0, 0, 2727, 2728, 0,
	0, 0, 0, 2734, 1860, 0, 0, 1861, 0, 0,
	1272, 1866, 0, 1858, 0, 0, 0, 0, 1863, 1867,
	1862, 0, 1864, 0, 3906, 3907, 1865, 1280, 1281, 1859,
	3913, 0, 0, 0, 3915, 0, 1868, 0, 0, 2767,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2777, 0, 1272, 3928, 0, 0, 0, 2306, 2306, 2306,
	0, 0, 0, 3883, 0, 0, 0, 2794, 0, 0,
	1272, 0, 0, 0, 1272, 1272, 1272, 0, 0, 0,
	0, 0, 0, 0, 3897, 3898, 0, 2806, 0, 0,
	0, 0, 2810, 1272, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1276, 0, 1272,
	0, 0, 0, 0, 0, 0, 1266, 1267, 1268, 0,
	0, 0, 0, 0, 0, 1260, 1261, 1262, 1263, 1264,
	1265, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2962, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4054, 0, 0, 0, 0,
	0, 0, 0, 1276, 0, 0, 0, 0, 0, 0,
	0, 0, 1266, 1267, 1268, 0, 0, 0, 0, 3185,
	0, 1260, 1261, 1262, 1263, 1264, 1265, 0, 0, 0,
	2140, 0, 0, 0, 0, 160, 0, 0, 0, 2986,
	0, 0, 0, 0, 0, 4088, 0, 0, 4091, 0,
	0, 0, 0, 163, 0, 0, 0, 1276, 0, 0,
	0, 0, 0, 3013, 0, 0, 1266, 1267, 1268, 0,
	1272, 2311, 0, 0, 0, 1260, 1261, 1262, 1263, 1264,
	1265, 1015, 1045, 0, 0, 0, 1016, 0, 0, 0,
	1025, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4132, 0,
	0, 1272, 0, 0, 0, 0, 0, 0, 0, 0,
	1015, 0, 0, 0, 0, 1016, 0, 0, 0, 1025,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1047, 0, 0, 1018, 0, 1276, 0, 0, 0, 0,
	0, 0, 3088, 169, 1266, 1267, 1268, 0, 2136, 0,
	0, 2283, 0, 1260, 1261, 1262, 1263, 1264, 1265, 0,
	0, 1272, 1024, 0, 0, 0, 0, 0, 4199, 0,
	0, 0, 1018, 0, 165, 1015, 0, 0, 0, 0,
	1016, 0, 0, 0, 1025, 166, 0, 0, 0, 0,
	0, 0, 0, 1029, 1272, 0, 2146, 4219, 4220, 0,
	0, 1024, 0, 0, 0, 0, 0, 0, 0, 0,
	2138, 1272, 0, 0, 0, 0, 0, 170, 0, 0,
	0, 0, 0, 0, 0, 171, 0, 0, 0, 0,
	0, 0, 1029, 164, 0, 2139, 1014, 0, 0, 0,
	4195, 0, 0, 0, 0, 0, 0, 1018, 3146, 0,
	3147, 3148, 0, 1046, 3151, 0, 2150, 0, 3154, 0,
	0, 1276, 0, 1019, 0, 0, 0, 0, 0, 3159,
	1266, 1267, 1268, 0, 0, 1014, 1024, 0, 0, 1260,
	1261, 1262, 1263, 1264, 1265, 0, 3180, 0, 0, 0,
	0, 0, 0, 0, 0, 4306, 0, 0, 1021, 0,
	0, 3188, 1019, 0, 1020, 0, 0, 1029, 4316, 2306,
	0, 0, 0, 0, 3202, 3203, 0, 0, 0, 0,
	0, 0, 0, 881, 0, 0, 0, 0, 0, 0,
	1272, 0, 4332, 152, 2141, 0, 173, 1021, 0, 0,
	0, 0, 0, 1020, 0, 1048, 0, 0, 0, 1022,
	1014, 0, 0, 0, 0, 2147, 1272, 0, 2142, 0,
	0, 0, 0, 174, 0, 3241, 0, 3242, 161, 0,
	0, 175, 0, 0, 0, 1049, 0, 1019, 1050, 0,
	0, 0, 1051, 0, 0, 0, 0, 167, 1022, 0,
	0, 0, 2148, 0, 1044, 3272, 0, 0, 2149, 0,
	0, 1015, 1272, 168, 1052, 1026, 1016, 2143, 0, 0,
	1025, 1272, 1021, 2144, 1015, 0, 3280, 3281, 1020, 1016,
	0, 0, 0, 1025, 0, 0, 0, 1015, 4392, 162,
	0, 0, 1016, 1023, 0, 0, 1025, 0, 1041, 0,
	1028, 1027, 1055, 0, 1026, 0, 0, 0, 0, 0,
	0, 0, 2380, 0, 0, 0, 0, 0, 0, 1053,
	2393, 2137, 0, 1022, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1018, 0, 0, 1054, 2594, 0, 1028,
	1027, 0, 0, 0, 0, 0, 1018, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1018,
	0, 0, 1024, 0, 0, 0, 0, 0, 1023, 0,
	0, 0, 0, 1056, 0, 1024, 0, 1017, 0, 1026,
	0, 0, 4397, 2399, 0, 0, 0, 0, 1024, 0,
	0, 0, 0, 1029, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1029, 1031, 0, 0,
	0, 0, 2580, 0, 1028, 1027, 1017, 2395, 0, 1029,
	0, 0, 0, 0, 2380, 0, 0, 0, 0, 0,
	0, 0, 2393, 0, 0, 134, 1014, 0, 0, 0,
	120, 0, 0, 0, 132, 0, 1031, 0, 0, 1014,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 0,
	0, 0, 1014, 1019, 0, 0, 0, 0, 0, 0,
	0, 1272, 0, 0, 0, 0, 1019, 146, 0, 0,
	4530, 0, 0, 0, 0, 0, 0, 0, 0, 1019,
	0, 1017, 0, 0, 0, 2399, 0, 0, 1021, 0,
	0, 0, 0, 0, 1020, 2385, 0, 0, 0, 0,
	0, 1021, 0, 0, 0, 0, 0, 1020, 0, 0,
	0, 1031, 0, 3484, 1021, 0, 0, 2394, 0, 2395,
	1020, 0, 0, 0, 3489, 3490, 0, 0, 0, 0,
	3494, 3495, 0, 0, 0, 0, 0, 3498, 0, 1022,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1022, 3512, 0, 0, 0, 2390, 0, 3515,
	0, 0, 0, 126, 3516, 1022, 0, 0, 3519, 0,
	0, 2306, 0, 0, 0, 2306, 0, 0, 0, 0,
	2387, 0, 0, 0, 1023, 0, 0, 0, 0, 127,
	0, 3532, 0, 0, 0, 1026, 0, 1023, 0, 0,
	128, 2381, 160, 0, 2392, 0, 0, 2385, 1026, 0,
	1023, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	163, 1026, 0, 0, 0, 130, 0, 0, 2061, 2394,
	1028, 1027, 144, 0, 0, 0, 0, 0, 0, 159,
	151, 2057, 0, 1028, 1027, 0, 2398, 0, 125, 0,
	131, 0, 0, 0, 1059, 0, 1028, 1027, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2390,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 70, 3614, 0, 2416, 0, 0, 0, 0, 0,
	0, 0, 2387, 0, 0, 0, 0, 0, 2391, 0,
	0, 0, 0, 0, 0, 0, 0, 1017, 0, 0,
	0, 0, 0, 2381, 2388, 0, 2392, 0, 0, 0,
	1017, 2386, 0, 0, 0, 2396, 0, 0, 0, 0,
	169, 0, 0, 1017, 0, 3640, 0, 1031, 2382, 135,
	0, 0, 0, 0, 0, 0, 0, 0, 152, 136,
	1031, 137, 0, 0, 0, 0, 0, 0, 2398, 0,
	0, 165, 2389, 1031, 2383, 0, 3668, 0, 0, 0,
	145, 0, 166, 138, 0, 0, 142, 0, 139, 0,
	0, 0, 0, 122, 0, 0, 140, 0, 0, 0,
	0, 0, 0, 70, 0, 0, 2376, 157, 0, 0,
	0, 0, 148, 0, 170, 0, 0, 141, 0, 0,
	2391, 0, 171, 147, 0, 0, 0, 0, 149, 0,
	164, 0, 0, 0, 143, 0, 2388, 0, 150, 0,
	0, 0, 3710, 2386, 0, 0, 0, 2396, 0, 0,
	0, 0, 0, 158, 123, 0, 0, 0, 0, 0,
	2382, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3728, 0, 0, 0, 3732, 3733, 3734, 0,
	0, 0, 0, 0, 2389, 0, 2383, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 0, 0, 3751, 0, 0, 0, 0, 0,
	152, 0, 0, 173, 0, 0, 3767, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	174, 0, 0, 0, 0, 161, 0, 0, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	168, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3938, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3979, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4049, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4082, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4099, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1742, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4218, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3938, 0, 0, 0, 0, 0, 4244, 4244, 4244, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3241, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3938, 0, 0, 0, 4244, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3241, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1766, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4244, 0,
	0, 0, 0, 1771, 207, 1777, 224, 717, 1787, 273,
	310, 525, 1774, 1819, 370, 1824, 423, 427, 1848, 516,
	1781, 1784, 1794, 1797, 281, 1802, 722, 1810, 728, 1820,
	734, 1839, 492, 1845, 724, 725, 730, 212, 611, 515,
	586, 1833, 1779, 1837, 377, 1830, 1806, 1846, 1823, 1835,
	1816, 1821, 220, 1808, 1809, 1813, 1822, 726, 723, 727,
	733, 721, 731, 718, 729, 1843, 414, 348, 4499, 565,
	441, 219, 265, 252, 294, 336, 448, 1778, 1796, 326,
	496, 261, 350, 1829, 240, 383, 1842, 472, 347, 1836,
	455, 475, 1798, 367, 246, 406, 462, 463, 715, 720,
	1786, 736, 1773, 250, 251, 372, 232, 380, 577, 543,
	435, 393, 391, 1804, 358, 415, 572, 1776, 0, 280,
	0, 275, 371, 511, 238, 490, 409, 376, 330, 438,
	467, 277, 262, 263, 306, 408, 296, 248, 501, 540,
	544, 542, 538, 535, 539, 536, 537, 541, 297, 534,
	0, 509, 518, 552, 532, 560, 517, 557, 527, 272,
	556, 521, 520, 566, 547, 548, 502, 562, 533, 531,
	524, 523, 519, 1844, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 208, 1772, 209, 210, 211, 213,
	214, 215, 714, 216, 217, 218, 221, 222, 223, 225,
	585, 226, 227, 228, 229, 230, 231, 522, 716, 233,
	234, 235, 236, 237, 239, 241, 242, 243, 244, 245,
	247, 249, 1788, 1789, 1790, 719, 1791, 1792, 1793, 253,
	254, 255, 256, 257, 258, 1795, 259, 260, 264, 266,
	267, 268, 269, 270, 271, 274, 1799, 276, 278, 1800,
	279, 282, 1801, 283, 284, 285, 286, 287, 288, 289,
	290, 526, 291, 1803, 292, 293, 295, 1805, 298, 299,
	300, 301, 302, 1807, 303, 528, 529, 304, 305, 307,
	308, 309, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 1811, 323, 324, 325, 327, 1812,
	328, 329, 332, 333, 334, 335, 1814, 337, 545, 1815,
	338, 339, 340, 1817, 1818, 341, 342, 343, 344, 345,
	346, 349, 546, 351, 352, 353, 354, 355, 356, 357,
	587, 359, 360, 361, 362, 363, 364, 365, 549, 550,
	366, 368, 369, 551, 553, 554, 732, 384, 385, 386,
	387, 388, 389, 390, 392, 1826, 394, 395, 396, 555,
	397, 398, 399, 400, 1827, 401, 402, 403, 404, 405,
	407, 410, 411, 412, 413, 1828, 416, 417, 418, 419,
	420, 421, 422, 424, 425, 426, 428, 429, 430, 588,
	431, 432, 433, 434, 558, 436, 437, 589, 439, 440,
	442, 443, 444, 445, 446, 447, 609, 1831, 449, 559,
	450, 451, 452, 453, 454, 1832, 456, 457, 458, 459,
	460, 461, 464, 465, 466, 468, 469, 561, 470, 471,
	1834, 473, 474, 735, 476, 477, 478, 479, 480, 1838,
	610, 481, 563, 482, 564, 483, 484, 485, 486, 487,
	488, 489, 491, 1840, 1841, 493, 494, 495, 497, 498,
	499, 500, 503, 504, 505, 506, 507, 1847, 508, 510,
	512, 590, 567, 568, 569, 570, 571, 573, 574, 575,
	576, 513, 514, 530, 381, 375, 331, 373, 374, 378,
	379, 382, 1825, 1775, 1780, 1782, 1783, 1785, 0, 0,
	0, 0, 0, 0, 0, 0, 1290, 0, 0, 0,
	0, 0, 0, 1287, 0, 0, 1257, 0, 0, 1764,
	1269, 1270, 1271, 1301, 1303, 1285, 1330, 1351, 0, 1402,
	1448, 1418, 1273, 1535, 1541, 1274, 1602, 1606, 0, 1282,
	1332, 1258, 1382, 1397, 1412, 1424, 1277, 1283, 1275, 1539,
	1278, 1683, 1694, 1714, 1279, 1280, 1281, 1259, 1675, 1732,
	1501, 1660, 1312, 0, 1288, 1626, 0, 0, 1549, 1664,
	0, 0, 1326, 0, 0, 0, 0, 1474, 1463, 1497,
	1610, 1435, 1555, 1363, 1522, 1700, 1592, 1511, 0, 1706,
	1624, 1325, 1391, 1375, 1427, 1492, 1633, 1308, 1392, 1467,
	1698, 1387, 1513, 0, 1354, 1557, 1699, 1662, 1510, 1673,
	1643, 1668, 1398, 1536, 1361, 1583, 1650, 1651, 1321, 1434,
	1356, 1709, 1306, 1366, 1374, 1544, 1345, 1552, 1730, 1484,
	1617, 1567, 1565, 0, 1524, 1593, 1725, 0, 0, 1411,
	0, 1405, 1543, 1717, 1352, 1691, 1586, 1548, 1486, 1620,
	1655, 1407, 1388, 1389, 1445, 1585, 1430, 1364, 1705, 1481,
	1485, 1483, 1479, 1476, 1480, 1477, 1478, 1482, 1432, 1475,
	0, 0, 1322, 1542, 1470, 1640, 1320, 1589, 1428, 1401,
	0, 0, 0, 1707, 1521, 1523, 0, 1676, 1471, 1469,
	1380, 1379, 1323, 1708, 1292, 1293, 1294, 1295, 1296, 1297,
	1298, 1299, 1300, 1302, 1304, 1305, 1309, 1310, 1311, 1313,
	1314, 1315, 1316, 1317, 1318, 1319, 1327, 1328, 1329, 1331,
	1334, 1335, 1336, 1338, 1339, 1340, 1341, 1342, 1343, 1346,
	1347, 1348, 1349, 1350, 1353, 1355, 1357, 1358, 1359, 1360,
	1362, 1365, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1376,
	1377, 0, 1378, 1381, 1383, 1384, 1385, 1386, 1390, 1393,
	1394, 1395, 1396, 1399, 1400, 1403, 1404, 1406, 1408, 1409,
	1410, 1413, 0, 1414, 1415, 1416, 1417, 1419, 1420, 1421,
	1422, 1423, 1425, 0, 0, 1426, 1429, 1431, 1433, 1436,
	1437, 1438, 1439, 0, 1440, 1441, 1442, 1443, 1444, 1446,
	0, 1447, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456,
	1457, 1458, 1459, 1460, 1461, 1462, 1465, 1466, 1468, 0,
	1472, 1473, 1488, 1489, 1490, 1491, 1493, 1495, 1496, 1494,
	1498, 1499, 1500, 1502, 1503, 1504, 1505, 1506, 1507, 1508,
	1509, 1512, 1514, 1515, 0, 1516, 1517, 0, 1518, 1519,
	1520, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533,
	1534, 1537, 1538, 1540, 1554, 1556, 0, 1558, 1559, 1560,
	1561, 1562, 1563, 1564, 1566, 1568, 1569, 1570, 1571, 1572,
	1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
	1584, 1587, 1588, 1590, 1591, 1594, 1595, 1596, 1597, 1598,
	1599, 1600, 1601, 1603, 1604, 1605, 1607, 1608, 1609, 1611,
	1612, 1613, 1614, 1615, 1616, 1618, 1619, 1621, 1622, 1623,
	0, 1625, 1627, 1628, 1629, 1630, 1631, 1632, 1635, 1634,
	1636, 1637, 1638, 1639, 1641, 1642, 1644, 1645, 1646, 1647,
	1648, 1649, 1652, 1653, 1654, 1656, 1657, 1658, 1659, 1661,
	1663, 1665, 1667, 1666, 1669, 1670, 1671, 1672, 1674, 1677,
	1678, 1679, 1680, 1681, 1682, 1684, 1685, 1686, 1687, 1688,
	1689, 1690, 1692, 0, 1693, 1695, 1696, 1697, 1701, 1702,
	1703, 1704, 1710, 1711, 1712, 1713, 1715, 0, 0, 1716,
	1718, 1719, 1720, 1721, 1722, 1723, 1724, 1726, 1727, 1728,
	1729, 0, 1731, 1464, 1553, 1547, 1487, 1545, 1546, 1550,
	1551, 0, 0, 1307, 1324, 1333, 1337, 1344, 0, 1276,
	0, 0, 0, 0, 0, 0, 0, 0, 1266, 1267,
	1268, 0, 0, 0, 0, 0, 0, 1260, 1261, 1262,
	1263, 1264, 1265, 1766, 0, 4462, 850, 0, 0, 0,
	0, 916, 0, 0, 0, 0, 0, 0, 0, 0,
	1771, 207, 1777, 224, 717, 1787, 273, 310, 525, 1774,
	1819, 370, 1824, 423, 427, 1848, 516, 1781, 1784, 1794,
	1797, 281, 1802, 722, 1810, 728, 1820, 734, 1839, 492,
	1845, 724, 725, 730, 212, 611, 515, 586, 1833, 1779,
	1837, 377, 1830, 1806, 1846, 1823, 1835, 1816, 1821, 220,
	1808, 1809, 1813, 1822, 726, 723, 727, 733, 721, 731,
	718, 729, 1843, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 1778, 1796, 326, 496, 261, 350,
	1829, 240, 383, 1842, 472, 347, 1836, 455, 475, 1798,
	367, 246, 406, 462, 463, 715, 720, 1786, 736, 1773,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	1804, 358, 415, 572, 1776, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	1844, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 1772, 209, 210, 211, 213, 214, 215, 714,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 716, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 1788,
	1789, 1790, 719, 1791, 1792, 1793, 253, 254, 255, 256,
	257, 258, 1795, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 1799, 276, 278, 1800, 279, 282, 1801,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	1803, 292, 293, 295, 1805, 298, 299, 300, 301, 302,
	1807, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 1811, 323, 324, 325, 327, 1812, 328, 329, 332,
	333, 334, 335, 1814, 337, 545, 1815, 338, 339, 340,
	1817, 1818, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 732, 384, 385, 386, 387, 388, 389,
	390, 392, 1826, 394, 395, 396, 555, 397, 398, 399,
	400, 1827, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 1828, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 1831, 449, 559, 450, 451, 452,
	453, 454, 1832, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 1834, 473, 474,
	735, 476, 477, 478, 479, 480, 1838, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	1840, 1841, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 1847, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 1825,
	1775, 1780, 1782, 1783, 1785, 1766, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1771, 207, 1777, 224, 717, 1787, 273, 310,
	525, 1774, 1819, 370, 1824, 423, 427, 1848, 516, 1781,
	1784, 1794, 1797, 281, 1802, 722, 1810, 728, 1820, 734,
	1839, 492, 1845, 724, 725, 730, 212, 611, 515, 586,
	1833, 1779, 1837, 377, 1830, 1806, 1846, 1823, 1835, 1816,
	1821, 220, 1808, 1809, 1813, 1822, 726, 723, 727, 733,
	721, 731, 718, 729, 1843, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 1778, 1796, 326, 496,
	261, 350, 1829, 240, 383, 1842, 472, 347, 1836, 455,
	475, 1798, 367, 246, 406, 462, 463, 715, 720, 1786,
	736, 1773, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 1804, 358, 415, 572, 1776, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 1844, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 1772, 209, 210, 211, 213, 214,
	215, 714, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 716, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 1788, 1789, 1790, 719, 1791, 1792, 1793, 253, 254,
	255, 256, 257, 258, 1795, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 1799, 276, 278, 1800, 279,
	282, 1801, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 1803, 292, 293, 295, 1805, 298, 299, 300,
	301, 302, 1807, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 1811, 323, 324, 325, 327, 1812, 328,
	329, 332, 333, 334, 335, 1814, 337, 545, 1815, 338,
	339, 340, 1817, 1818, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 732, 384, 385, 386, 387,
	388, 389, 390, 392, 1826, 394, 395, 396, 555, 397,
	398, 399, 400, 1827, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 1828, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 1831, 449, 559, 450,
	451, 452, 453, 454, 1832, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 1834,
	473, 474, 735, 476, 477, 478, 479, 480, 1838, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 1840, 1841, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 1847, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 1825, 1775, 1780, 1782, 1783, 1785, 1766, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1771, 207, 1777, 224, 717, 1787,
	2570, 310, 525, 1774, 1819, 370, 1824, 423, 427, 1848,
	516, 1781, 1784, 1794, 1797, 281, 1802, 722, 1810, 728,
	1820, 734, 1839, 492, 1845, 724, 725, 730, 212, 611,
	515, 586, 1833, 1779, 1837, 377, 1830, 1806, 1846, 1823,
	1835, 1816, 1821, 220, 1808, 1809, 1813, 1822, 726, 723,
	727, 733, 721, 731, 718, 729, 1843, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 2568, 1778, 1796,
	326, 496, 261, 350, 1829, 240, 383, 1842, 472, 347,
	1836, 455, 475, 1798, 367, 246, 406, 462, 463, 715,
	720, 1786, 736, 1773, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 1804, 358, 415, 572, 1776, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 1844, 197, 198, 199, 200, 201,
	2569, 203, 204, 205, 206, 208, 1772, 209, 210, 211,
	213, 214, 215, 714, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 716,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 1788, 1789, 1790, 719, 1791, 1792, 1793,
	253, 254, 255, 256, 257, 258, 1795, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 1799, 276, 278,
	1800, 279, 282, 1801, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 1803, 292, 293, 295, 1805, 298,
	299, 300, 301, 302, 1807, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 1811, 323, 324, 325, 327,
	1812, 328, 329, 332, 333, 334, 335, 1814, 337, 545,
	1815, 338, 339, 340, 1817, 1818, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 732, 384, 385,
	386, 387, 388, 389, 390, 392, 1826, 394, 395, 396,
	555, 397, 398, 399, 400, 1827, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 1828, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 1831, 449,
	559, 450, 451, 452, 453, 454, 1832, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 1834, 473, 474, 735, 476, 477, 478, 479, 480,
	1838, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 1840, 1841, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 1847, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 1825, 1775, 1780, 1782, 1783, 1785, 811,
	0, 1200, 850, 0, 0, 0, 653, 916, 0, 0,
	0, 0, 0, 664, 665, 666, 1771, 207, 1777, 224,
	717, 1787, 273, 310, 0, 1774, 1819, 370, 1824, 423,
	427, 1848, 0, 1781, 1784, 1794, 1797, 281, 1802, 722,
	1810, 728, 1820, 734, 1839, 492, 1845, 724, 725, 730,
	212, 810, 515, 586, 1833, 1779, 1837, 2942, 1830, 1806,
	1846, 1823, 1835, 1816, 1821, 220, 1808, 1809, 1813, 1822,
	726, 723, 727, 733, 721, 731, 718, 729, 1843, 414,
	348, 0, 0, 441, 219, 265, 252, 294, 336, 448,
	1778, 1796, 326, 496, 261, 350, 1829, 240, 383, 1842,
	472, 347, 1836, 455, 475, 1798, 367, 246, 406, 462,
	463, 715, 720, 1786, 736, 1773, 250, 251, 372, 232,
	380, 0, 0, 435, 393, 391, 1804, 358, 415, 0,
	1776, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 297, 0, 0, 509, 813, 803, 795, 796, 797,
	798, 799, 800, 0, 815, 816, 817, 818, 819, 502,
	809, 0, 794, 801, 802, 804, 1844, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 1772, 209,
	210, 211, 213, 214, 215, 714, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	0, 716, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 1788, 1789, 1790, 719, 1791,
	1792, 1793, 253, 254, 255, 256, 257, 258, 1795, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 1799,
	276, 278, 1800, 279, 282, 1801, 283, 284, 285, 286,
	287, 288, 289, 290, 0, 291, 1803, 292, 293, 295,
	1805, 298, 299, 300, 301, 302, 1807, 303, 0, 0,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 1811, 323, 324,
	325, 327, 1812, 328, 329, 332, 333, 334, 335, 1814,
	337, 0, 1815, 338, 339, 340, 1817, 1818, 341, 342,
	343, 344, 345, 346, 349, 0, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 2941, 0, 366, 368, 369, 0, 0, 0, 732,
	384, 385, 386, 387, 388, 389, 390, 392, 1826, 394,
	395, 396, 0, 397, 398, 399, 400, 1827, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 1828, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 0, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	1831, 449, 2414, 450, 451, 452, 453, 454, 1832, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	0, 470, 471, 1834, 473, 474, 735, 476, 477, 478,
	479, 480, 1838, 610, 481, 0, 482, 0, 483, 484,
	485, 486, 487, 488, 489, 491, 1840, 1841, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	1847, 508, 510, 512, 590, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 513, 514, 0, 381, 375, 331,
	373, 374, 378, 379, 382, 1825, 1775, 1780, 1782, 1783,
	1785, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 661, 662, 663, 0, 0, 0, 0, 0, 0,
	2943, 2944, 657, 658, 659, 660, 711, 0, 909, 850,
	0, 0, 0, 904, 916, 894, 0, 0, 0, 0,
	0, 0, 0, 2303, 207, 0, 224, 717, 0, 273,
	310, 899, 0, 887, 370, 0, 423, 427, 0, 516,
	914, 0, 891, 2304, 281, 912, 722, 0, 728, 913,
	734, 911, 492, 0, 724, 725, 730, 212, 611, 515,
	586, 0, 0, 0, 905, 0, 0, 0, 0, 0,
	0, 0, 220, 0, 0, 0, 0, 726, 723, 727,
	733, 721, 731, 718, 729, 0, 414, 348, 0, 565,
	441, 219, 265, 252, 294, 336, 448, 0, 0, 326,
	496, 261, 350, 0, 240, 383, 0, 472, 347, 0,
	455, 475, 0, 367, 246, 406, 462, 463, 715, 720,
	0, 736, 0, 250, 251, 372, 232, 380, 577, 543,
	435, 393, 391, 0, 358, 415, 572, 900, 0, 280,
	0, 275, 371, 511, 238, 490, 409, 376, 330, 438,
	467, 277, 262, 263, 306, 408, 296, 248, 501, 540,
	544, 542, 538, 535, 539, 536, 537, 541, 297, 534,
	0, 509, 518, 552, 532, 560, 517, 557, 527, 272,
	556, 521, 520, 566, 547, 548, 502, 562, 533, 531,
	524, 523, 519, 2302, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 208, 0, 209, 210, 211, 213,
	214, 215, 714, 216, 217, 218, 221, 222, 223, 225,
	585, 226, 227, 228, 229, 230, 231, 522, 716, 233,
	234, 235, 236, 237, 239, 241, 242, 243, 244, 245,
	247, 249, 0, 0, 0, 719, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 0, 259, 260, 264, 266,
	267, 268, 269, 270, 271, 274, 0, 276, 278, 0,
	279, 282, 0, 283, 284, 285, 286, 287, 288, 289,
	290, 526, 291, 0, 292, 293, 295, 0, 298, 299,
	300, 301, 302, 0, 303, 528, 903, 304, 305, 307,
	308, 309, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 0, 323, 324, 325, 327, 0,
	328, 329, 332, 333, 334, 335, 0, 337, 545, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 345,
	346, 349, 546, 351, 352, 353, 354, 355, 356, 357,
	587, 359, 360, 361, 362, 363, 364, 365, 549, 550,
	366, 368, 369, 551, 553, 554, 732, 384, 385, 386,
	387, 388, 389, 390, 392, 0, 394, 395, 396, 555,
	397, 398, 399, 400, 0, 401, 402, 403, 404, 405,
	407, 410, 411, 412, 413, 0, 416, 417, 418, 419,
	420, 421, 422, 424, 425, 426, 428, 429, 430, 588,
	431, 432, 433, 434, 906, 436, 437, 589, 439, 440,
	442, 443, 444, 445, 446, 447, 609, 0, 449, 559,
	450, 451, 452, 453, 454, 0, 456, 457, 458, 459,
	460, 461, 464, 465, 466, 468, 469, 561, 470, 471,
	0, 473, 474, 735, 476, 477, 478, 479, 480, 0,
	610, 481, 563, 482, 564, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 890, 493, 494, 495, 497, 498,
	499, 500, 503, 504, 505, 506, 507, 0, 508, 510,
	512, 590, 567, 568, 569, 570, 571, 573, 574, 575,
	576, 513, 514, 530, 381, 375, 331, 373, 374, 378,
	379, 382, 0, 0, 0, 0, 0, 0, 0, 888,
	0, 0, 711, 0, 909, 850, 0, 0, 0, 904,
	916, 894, 0, 0, 895, 2299, 0, 884, 885, 2300,
	207, 0, 224, 717, 0, 273, 310, 899, 0, 887,
	370, 0, 423, 427, 78, 516, 914, 0, 891, 0,
	281, 912, 722, 0, 728, 913, 734, 911, 492, 0,
	724, 725, 730, 212, 611, 515, 586, 0, 0, 0,
	905, 75, 0, 0, 0, 76, 0, 0, 220, 0,
	0, 0, 0, 726, 723, 727, 733, 721, 731, 718,
	729, 0, 414, 348, 0, 1745, 441, 219, 265, 252,
	294, 336, 448, 0, 0, 326, 496, 261, 350, 0,
	240, 383, 0, 472, 347, 0, 455, 475, 0, 367,
	246, 406, 462, 463, 715, 720, 0, 736, 0, 250,
	251, 372, 232, 380, 577, 543, 435, 393, 391, 0,
	358, 415, 572, 900, 0, 280, 0, 275, 371, 511,
	238, 490, 409, 376, 330, 438, 467, 277, 262, 263,
	306, 408, 296, 248, 501, 540, 544, 542, 538, 535,
	539, 536, 537, 541, 297, 534, 0, 509, 518, 552,
	532, 560, 517, 557, 527, 272, 556, 521, 520, 566,
	547, 548, 502, 562, 533, 531, 524, 523, 519, 0,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	208, 0, 209, 210, 211, 213, 214, 215, 714, 216,
	217, 218, 221, 222, 223, 225, 585, 226, 227, 228,
	229, 230, 231, 522, 716, 233, 234, 235, 236, 237,
	239, 241, 242, 243, 244, 245, 247, 249, 0, 0,
	0, 719, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 0, 259, 260, 264, 266, 267, 268, 269, 270,
	271, 274, 0, 276, 278, 0, 279, 282, 0, 283,
	284, 285, 286, 287, 288, 289, 290, 526, 291, 0,
	292, 293, 295, 0, 298, 299, 300, 301, 302, 0,
	303, 528, 903, 304, 305, 307, 308, 309, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	0, 323, 324, 325, 327, 0, 328, 329, 332, 333,
	334, 335, 0, 337, 545, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 345, 346, 349, 546, 351,
	352, 353, 354, 355, 356, 357, 587, 359, 360, 361,
	362, 363, 364, 365, 549, 550, 366, 368, 369, 551,
	553, 554, 732, 384, 385, 386, 387, 388, 389, 390,
	392, 0, 394, 395, 396, 555, 397, 398, 399, 400,
	0, 401, 402, 403, 404, 405, 407, 410, 411, 412,
	413, 0, 416, 417, 418, 419, 420, 421, 422, 424,
	425, 426, 428, 429, 430, 588, 431, 432, 433, 434,
	906, 436, 437, 589, 439, 440, 442, 443, 444, 445,
	446, 447, 609, 0, 449, 559, 450, 451, 452, 453,
	454, 0, 456, 457, 458, 459, 460, 461, 464, 465,
	466, 468, 469, 561, 470, 471, 0, 473, 474, 735,
	476, 477, 478, 479, 480, 0, 610, 481, 563, 482,
	564, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	890, 493, 494, 495, 497, 498, 499, 500, 503, 504,
	505, 506, 507, 0, 508, 510, 512, 590, 567, 568,
	569, 570, 571, 573, 574, 575, 576, 513, 514, 530,
	381, 375, 331, 373, 374, 378, 379, 382, 0, 0,
	0, 0, 0, 0, 0, 888, 0, 79, 711, 0,
	909, 850, 0, 0, 0, 904, 916, 894, 0, 0,
	895, 4106, 0, 884, 885, 0, 207, 0, 224, 717,
	0, 273, 310, 899, 0, 887, 370, 0, 423, 427,
	78, 516, 914, 0, 891, 0, 281, 912, 722, 0,
	728, 913, 734, 911, 492, 0, 724, 725, 730, 212,
	611, 515, 586, 0, 0, 0, 905, 75, 0, 0,
	0, 76, 0, 0, 220, 0, 0, 0, 0, 726,
	723, 727, 733, 721, 731, 718, 729, 0, 414, 348,
	0, 1745, 441, 219, 265, 252, 294, 336, 448, 0,
	0, 326, 496, 261, 350, 0, 240, 383, 0, 472,
	347, 0, 455, 475, 0, 367, 246, 406, 462, 463,
	715, 720, 0, 736, 0, 250, 251, 372, 232, 380,
	577, 543, 435, 393, 391, 0, 358, 415, 572, 900,
	0, 280, 0, 275, 371, 511, 238, 490, 409, 376,
	330, 438, 467, 277, 262, 263, 306, 408, 296, 248,
	501, 540, 544, 542, 538, 535, 539, 536, 537, 541,
	297, 534, 0, 509, 518, 552, 532, 560, 517, 557,
	527, 272, 556, 521, 520, 566, 547, 548, 502, 562,
	533, 531, 524, 523, 519, 0, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 208, 0, 209, 210,
	211, 213, 214, 215, 714, 216, 217, 218, 221, 222,
	223, 225, 585, 226, 227, 228, 229, 230, 231, 522,
	716, 233, 234, 235, 236, 237, 239, 241, 242, 243,
	244, 245, 247, 249, 0, 0, 0, 719, 0, 0,
	0, 253, 254, 255, 256, 257, 258, 0, 259, 260,
	264, 266, 267, 268, 269, 270, 271, 274, 0, 276,
	278, 0, 279, 282, 0, 283, 284, 285, 286, 287,
	288, 289, 290, 526, 291, 0, 292, 293, 295, 0,
	298, 299, 300, 301, 302, 0, 303, 528, 903, 304,
	305, 307, 308, 309, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 322, 0, 323, 324, 325,
	327, 0, 328, 329, 332, 333, 334, 335, 0, 337,
	545, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 345, 346, 349, 546, 351, 352, 353, 354, 355,
	356, 357, 587, 359, 360, 361, 362, 363, 364, 365,
	549, 550, 366, 368, 369, 551, 553, 554, 732, 384,
	385, 386, 387, 388, 389, 390, 392, 0, 394, 395,
	396, 555, 397, 398, 399, 400, 0, 401, 402, 403,
	404, 405, 407, 410, 411, 412, 413, 0, 416, 417,
	418, 419, 420, 421, 422, 424, 425, 426, 428, 429,
	430, 588, 431, 432, 433, 434, 906, 436, 437, 589,
	439, 440, 442, 443, 444, 445, 446, 447, 609, 0,
	449, 559, 450, 451, 452, 453, 454, 0, 456, 457,
	458, 459, 460, 461, 464, 465, 466, 468, 469, 561,
	470, 471, 0, 473, 474, 735, 476, 477, 478, 479,
	480, 0, 610, 481, 563, 482, 564, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 890, 493, 494, 495,
	497, 498, 499, 500, 503, 504, 505, 506, 507, 0,
	508, 510, 512, 590, 567, 568, 569, 570, 571, 573,
	574, 575, 576, 513, 514, 530, 381, 375, 331, 373,
	374, 378, 379, 382, 0, 0, 0, 0, 0, 0,
	0, 888, 0, 79, 711, 0, 909, 850, 0, 0,
	0, 904, 916, 894, 0, 0, 895, 0, 0, 884,
	885, 0, 207, 0, 224, 717, 0, 273, 310, 899,
	0, 887, 370, 0, 423, 427, 0, 516, 914, 0,
	891, 0, 281, 912, 722, 0, 728, 913, 734, 911,
	492, 0, 724, 725, 730, 212, 611, 515, 586, 0,
	0, 0, 905, 0, 0, 0, 0, 0, 0, 0,
	220, 0, 0, 0, 0, 726, 723, 727, 733, 721,
	731, 718, 729, 0, 414, 348, 0, 565, 441, 219,
	265, 252, 294, 336, 448, 0, 0, 326, 496, 261,
	350, 0, 240, 383, 0, 472, 347, 0, 455, 475,
	0, 367, 246, 406, 462, 463, 715, 720, 0, 736,
	0, 250, 251, 372, 232, 380, 577, 543, 435, 393,
	391, 0, 358, 415, 572, 900, 0, 280, 0, 275,
	371, 511, 238, 490, 409, 376, 330, 438, 467, 277,
	262, 263, 306, 408, 296, 248, 501, 540, 544, 542,
	538, 535, 539, 536, 537, 541, 297, 534, 0, 509,
	518, 552, 532, 560, 517, 557, 527, 272, 556, 521,
	520, 566, 547, 548, 502, 562, 533, 531, 524, 523,
	519, 0, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 208, 0, 209, 210, 211, 213, 214, 215,
	714, 216, 217, 218, 221, 222, 223, 225, 585, 226,
	227, 228, 229, 230, 231, 522, 716, 233, 234, 235,
	236, 237, 239, 241, 242, 243, 244, 245, 247, 249,
	0, 0, 0, 719, 0, 0, 0, 253, 254, 255,
	256, 257, 258, 0, 259, 260, 264, 266, 267, 268,
	269, 270, 271, 274, 0, 276, 278, 0, 279, 282,
	0, 283, 284, 285, 286, 287, 288, 289, 290, 526,
	291, 0, 292, 293, 295, 0, 298, 299, 300, 301,
	302, 0, 303, 528, 903, 304, 305, 307, 308, 309,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 322, 0, 323, 324, 325, 327, 0, 328, 329,
	332, 333, 334, 335, 0, 337, 545, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 345, 346, 349,
	546, 351, 352, 353, 354, 355, 356, 357, 587, 359,
	360, 361, 362, 363, 364, 365, 549, 550, 366, 368,
	369, 551, 553, 554, 732, 384, 385, 386, 387, 388,
	389, 390, 392, 0, 394, 395, 396, 555, 397, 398,
	399, 400, 0, 401, 402, 403, 404, 405, 407, 410,
	411, 412, 413, 0, 416, 417, 418, 419, 420, 421,
	422, 424, 425, 426, 428, 429, 430, 588, 431, 432,
	433, 434, 906, 436, 437, 589, 439, 440, 442, 443,
	444, 445, 446, 447, 609, 0, 449, 559, 450, 451,
	452, 453, 454, 0, 456, 457, 458, 459, 460, 461,
	464, 465, 466, 468, 469, 561, 470, 471, 0, 473,
	474, 735, 476, 477, 478, 479, 480, 0, 610, 481,
	563, 482, 564, 483, 484, 485, 486, 487, 488, 489,
	491, 0, 890, 493, 494, 495, 497, 498, 499, 500,
	503, 504, 505, 506, 507, 0, 508, 510, 512, 590,
	567, 568, 569, 570, 571, 573, 574, 575, 576, 513,
	514, 530, 381, 375, 331, 373, 374, 378, 379, 382,
	0, 0, 0, 0, 0, 0, 0, 888, 0, 0,
	711, 0, 909, 850, 0, 0, 0, 904, 916, 894,
	0, 0, 895, 0, 0, 884, 885, 882, 207, 0,
	224, 717, 0, 273, 310, 899, 0, 887, 370, 0,
	423, 427, 0, 516, 914, 0, 891, 0, 281, 912,
	722, 0, 728, 913, 734, 911, 492, 0, 724, 725,
	730, 212, 611, 515, 586, 0, 0, 0, 905, 0,
	0, 0, 0, 0, 0, 0, 220, 0, 0, 0,
	0, 726, 723, 727, 733, 721, 731, 718, 729, 0,
	414, 348, 0, 565, 441, 219, 265, 252, 294, 336,
	448, 0, 0, 326, 496, 261, 350, 0, 240, 383,
	0, 472, 347, 0, 455, 475, 0, 367, 246, 406,
	462, 463, 715, 720, 0, 736, 0, 250, 251, 372,
	232, 380, 577, 543, 435, 393, 391, 0, 358, 415,
	572, 900, 0, 280, 0, 275, 371, 511, 238, 490,
	409, 376, 330, 438, 467, 277, 262, 263, 306, 408,
	296, 248, 501, 540, 544, 542, 538, 535, 539, 536,
	537, 541, 297, 534, 0, 509, 518, 552, 532, 560,
	517, 557, 527, 272, 556, 521, 520, 566, 547, 548,
	502, 562, 533, 531, 524, 523, 519, 0, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 208, 0,
	209, 210, 211, 213, 214, 215, 714, 216, 217, 218,
	221, 222, 223, 225, 585, 226, 227, 228, 229, 230,
	231, 522, 716, 233, 234, 235, 236, 237, 239, 241,
	242, 243, 244, 245, 247, 249, 0, 0, 0, 719,
	0, 0, 0, 253, 254, 255, 256, 257, 258, 0,
	259, 260, 264, 266, 267, 268, 269, 270, 271, 274,
	0, 276, 278, 0, 279, 282, 0, 283, 284, 285,
	286, 287, 288, 289, 290, 526, 291, 0, 292, 293,
	295, 0, 298, 299, 300, 301, 302, 0, 303, 528,
	903, 304, 305, 307, 308, 309, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 0, 323,
	324, 325, 327, 0, 328, 329, 332, 333, 334, 335,
	0, 337, 545, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 345, 346, 349, 546, 351, 352, 353,
	354, 355, 356, 357, 587, 359, 360, 361, 362, 363,
	364, 365, 549, 550, 366, 368, 369, 551, 553, 554,
	732, 384, 385, 386, 387, 388, 389, 390, 392, 0,
	394, 395, 396, 555, 397, 398, 399, 400, 0, 401,
	402, 403, 404, 405, 407, 410, 411, 412, 413, 0,
	416, 417, 418, 419, 420, 421, 422, 424, 425, 426,
	428, 429, 430, 588, 431, 432, 433, 434, 906, 436,
	437, 589, 439, 440, 442, 443, 444, 445, 446, 447,
	609, 0, 449, 559, 450, 451, 452, 453, 454, 0,
	456, 457, 458, 459, 460, 461, 464, 465, 466, 468,
	469, 561, 470, 471, 0, 473, 474, 735, 476, 477,
	478, 479, 480, 0, 610, 481, 563, 482, 564, 483,
	484, 485, 486, 487, 488, 489, 491, 0, 890, 493,
	494, 495, 497, 498, 499, 500, 503, 504, 505, 506,
	507, 0, 508, 510, 512, 590, 567, 568, 569, 570,
	571, 573, 574, 575, 576, 513, 514, 530, 381, 375,
	331, 373, 374, 378, 379, 382, 0, 0, 0, 0,
	0, 0, 0, 888, 0, 711, 0, 909, 850, 0,
	0, 0, 904, 916, 894, 0, 1750, 2287, 895, 0,
	0, 884, 885, 207, 0, 224, 717, 0, 273, 310,
	899, 0, 887, 370, 0, 423, 427, 0, 516, 914,
	0, 891, 0, 281, 912, 722, 0, 728, 913, 734,
	911, 492, 0, 724, 725, 730, 212, 611, 515, 586,
	0, 0, 0, 905, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 726, 723, 727, 733,
	721, 731, 718, 729, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 715, 720, 0,
	736, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 900, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 3196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 714, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 716, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 719, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 903, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 732, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 906, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 735, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 890, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 0, 0, 0, 0, 0, 0, 0, 888, 0,
	711, 0, 909, 850, 0, 0, 0, 904, 916, 894,
	0, 0, 0, 895, 0, 0, 884, 885, 207, 0,
	224, 717, 0, 273, 310, 899, 0, 887, 370, 0,
	423, 427, 0, 516, 914, 0, 891, 0, 281, 912,
	722, 0, 728, 913, 734, 911, 492, 0, 724, 725,
	730, 212, 611, 515, 586, 0, 0, 0, 905, 0,
	0, 0, 0, 0, 0, 0, 220, 0, 0, 0,
	0, 726, 723, 727, 733, 721, 731, 718, 729, 0,
	414, 348, 0, 565, 441, 219, 265, 252, 294, 336,
	448, 0, 0, 326, 496, 261, 350, 0, 240, 383,
	0, 472, 347, 0, 455, 475, 0, 367, 246, 406,
	462, 463, 715, 720, 0, 736, 0, 250, 251, 372,
	232, 380, 577, 543, 435, 393, 391, 0, 358, 415,
	572, 900, 0, 280, 0, 275, 371, 511, 238, 490,
	409, 376, 330, 438, 467, 277, 262, 263, 306, 408,
	296, 248, 501, 540, 544, 542, 538, 535, 539, 536,
	537, 541, 297, 534, 0, 509, 518, 552, 532, 560,
	517, 557, 527, 272, 556, 521, 520, 566, 547, 548,
	502, 562, 533, 531, 524, 523, 519, 0, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 208, 0,
	209, 210, 211, 213, 214, 215, 714, 216, 217, 218,
	221, 222, 223, 225, 585, 226, 227, 228, 229, 230,
	231, 522, 716, 233, 234, 235, 236, 237, 239, 241,
	242, 243, 244, 245, 247, 249, 0, 0, 0, 719,
	0, 0, 0, 253, 254, 255, 256, 257, 258, 0,
	259, 260, 264, 266, 267, 268, 269, 270, 271, 274,
	0, 276, 278, 0, 279, 282, 0, 283, 284, 285,
	286, 287, 288, 289, 290, 526, 291, 0, 292, 293,
	295, 0, 298, 299, 300, 301, 302, 0, 303, 528,
	903, 304, 305, 307, 308, 309, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 0, 323,
	324, 325, 327, 0, 328, 329, 332, 333, 334, 335,
	0, 337, 545, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 345, 346, 349, 546, 351, 352, 353,
	354, 355, 356, 357, 587, 359, 360, 361, 362, 363,
	364, 365, 549, 550, 366, 368, 369, 551, 553, 554,
	732, 384, 385, 386, 387, 388, 389, 390, 392, 0,
	394, 395, 396, 555, 397, 398, 399, 400, 0, 401,
	402, 403, 404, 405, 407, 410, 411, 412, 413, 0,
	416, 417, 418, 419, 420, 421, 422, 424, 425, 426,
	428, 429, 430, 588, 431, 432, 433, 434, 906, 436,
	437, 589, 439, 440, 442, 443, 444, 445, 446, 447,
	609, 0, 449, 559, 450, 451, 452, 453, 454, 0,
	456, 457, 458, 459, 460, 461, 464, 465, 466, 468,
	469, 561, 470, 471, 0, 473, 474, 735, 476, 477,
	478, 479, 480, 0, 610, 481, 563, 482, 564, 483,
	484, 485, 486, 487, 488, 489, 491, 0, 890, 493,
	494, 495, 497, 498, 499, 500, 503, 504, 505, 506,
	507, 0, 508, 510, 512, 590, 567, 568, 569, 570,
	571, 573, 574, 575, 576, 513, 514, 530, 381, 375,
	331, 373, 374, 378, 379, 382, 0, 0, 0, 0,
	0, 0, 0, 888, 0, 711, 0, 909, 850, 0,
	0, 0, 904, 916, 894, 0, 0, 0, 895, 3183,
	0, 884, 885, 207, 0, 224, 717, 0, 273, 310,
	899, 0, 887, 370, 0, 423, 427, 0, 516, 914,
	0, 891, 0, 281, 912, 722, 0, 728, 913, 734,
	911, 492, 0, 724, 725, 730, 212, 611, 515, 586,
	0, 0, 0, 905, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 726, 723, 727, 733,
	721, 731, 718, 729, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 715, 720, 0,
	736, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 900, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 714, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 716, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 719, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 903, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 732, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 906, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 735, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 890, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 0, 0, 0, 0, 0, 0, 0, 888, 0,
	711, 0, 909, 850, 0, 0, 0, 904, 916, 894,
	0, 0, 0, 895, 3137, 0, 884, 885, 207, 0,
	224, 717, 0, 273, 310, 899, 0, 887, 370, 0,
	423, 427, 0, 516, 914, 0, 891, 0, 281, 912,
	722, 0, 728, 913, 734, 911, 492, 0, 724, 725,
	730, 212, 611, 515, 586, 0, 0, 0, 905, 0,
	0, 0, 0, 0, 0, 0, 220, 0, 0, 0,
	0, 726, 723, 727, 733, 721, 731, 718, 729, 0,
	414, 348, 0, 565, 441, 219, 265, 252, 294, 336,
	448, 0, 0, 326, 496, 261, 350, 0, 240, 383,
	0, 472, 347, 0, 455, 475, 0, 367, 246, 406,
	462, 463, 715, 720, 0, 736, 0, 250, 251, 372,
	232, 380, 577, 543, 435, 393, 391, 0, 358, 415,
	572, 900, 0, 280, 0, 275, 371, 511, 238, 490,
	409, 376, 330, 438, 467, 277, 262, 263, 306, 408,
	296, 248, 501, 540, 544, 542, 538, 535, 539, 536,
	537, 541, 297, 534, 0, 509, 518, 552, 532, 560,
	517, 557, 527, 272, 556, 521, 520, 566, 547, 548,
	502, 562, 533, 531, 524, 523, 519, 0, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 208, 0,
	209, 210, 211, 213, 214, 215, 714, 216, 217, 218,
	221, 222, 223, 225, 585, 226, 227, 228, 229, 230,
	231, 522, 716, 233, 234, 235, 236, 237, 239, 241,
	242, 243, 244, 245, 247, 249, 0, 0, 0, 719,
	0, 0, 0, 253, 254, 255, 256, 257, 258, 0,
	259, 260, 264, 266, 267, 268, 269, 270, 271, 274,
	0, 276, 278, 0, 279, 282, 0, 283, 284, 285,
	286, 287, 288, 289, 290, 526, 291, 0, 292, 293,
	295, 0, 298, 299, 300, 301, 302, 0, 303, 528,
	903, 304, 305, 307, 308, 309, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 0, 323,
	324, 325, 327, 0, 328, 329, 332, 333, 334, 335,
	0, 337, 545, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 345, 346, 349, 546, 351, 352, 353,
	354, 355, 356, 357, 587, 359, 360, 361, 362, 363,
	364, 365, 549, 550, 366, 368, 369, 551, 553, 554,
	732, 384, 385, 386, 387, 388, 389, 390, 392, 0,
	394, 395, 396, 555, 397, 398, 399, 400, 0, 401,
	402, 403, 404, 405, 407, 410, 411, 412, 413, 0,
	416, 417, 418, 419, 420, 421, 422, 424, 425, 426,
	428, 429, 430, 588, 431, 432, 433, 434, 906, 436,
	437, 589, 439, 440, 442, 443, 444, 445, 446, 447,
	609, 0, 449, 559, 450, 451, 452, 453, 454, 0,
	456, 457, 458, 459, 460, 461, 464, 465, 466, 468,
	469, 561, 470, 471, 0, 473, 474, 735, 476, 477,
	478, 479, 480, 0, 610, 481, 563, 482, 564, 483,
	484, 485, 486, 487, 488, 489, 491, 0, 890, 493,
	494, 495, 497, 498, 499, 500, 503, 504, 505, 506,
	507, 0, 508, 510, 512, 590, 567, 568, 569, 570,
	571, 573, 574, 575, 576, 513, 514, 530, 381, 375,
	331, 373, 374, 378, 379, 382, 0, 0, 0, 0,
	0, 0, 0, 888, 0, 0, 711, 0, 909, 850,
	0, 0, 0, 904, 916, 894, 0, 0, 895, 2292,
	0, 884, 885, 1237, 207, 0, 224, 717, 0, 273,
	310, 899, 0, 887, 370, 0, 423, 427, 0, 516,
	914, 0, 891, 0, 281, 912, 722, 0, 728, 913,
	734, 911, 492, 0, 724, 725, 730, 212, 611, 515,
	586, 0, 0, 0, 905, 0, 0, 0, 0, 0,
	0, 0, 220, 0, 0, 0, 0, 726, 723, 727,
	733, 721, 731, 718, 729, 0, 414, 348, 0, 565,
	441, 219, 265, 252, 294, 336, 448, 0, 0, 326,
	496, 261, 350, 0, 240, 383, 0, 472, 347, 0,
	455, 475, 0, 367, 246, 406, 462, 463, 715, 720,
	0, 736, 0, 250, 251, 372, 232, 380, 577, 543,
	435, 393, 391, 0, 358, 415, 572, 900, 0, 280,
	0, 275, 371, 511, 238, 490, 409, 376, 330, 438,
	467, 277, 262, 263, 306, 408, 296, 248, 501, 540,
	544, 542, 538, 535, 539, 536, 537, 541, 297, 534,
	0, 509, 518, 552, 532, 560, 517, 557, 527, 272,
	556, 521, 520, 566, 547, 548, 502, 562, 533, 531,
	524, 523, 519, 0, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 208, 0, 209, 210, 211, 213,
	214, 215, 714, 216, 217, 218, 221, 222, 223, 225,
	585, 226, 227, 228, 229, 230, 231, 522, 716, 233,
	234, 235, 236, 237, 239, 241, 242, 243, 244, 245,
	247, 249, 0, 0, 0, 719, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 0, 259, 260, 264, 266,
	267, 268, 269, 270, 271, 274, 0, 276, 278, 0,
	279, 282, 0, 283, 284, 285, 286, 287, 288, 289,
	290, 526, 291, 0, 292, 293, 295, 0, 298, 299,
	300, 301, 302, 0, 303, 528, 903, 304, 305, 307,
	308, 309, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 0, 323, 324, 325, 327, 0,
	328, 329, 332, 333, 334, 335, 0, 337, 545, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 345,
	346, 349, 546, 351, 352, 353, 354, 355, 356, 357,
	587, 359, 360, 361, 362, 363, 364, 365, 549, 550,
	366, 368, 369, 551, 553, 554, 732, 384, 385, 386,
	387, 388, 389, 390, 392, 0, 394, 395, 396, 555,
	397, 398, 399, 400, 0, 401, 402, 403, 404, 405,
	407, 410, 411, 412, 413, 0, 416, 417, 418, 419,
	420, 421, 422, 424, 425, 426, 428, 429, 430, 588,
	431, 432, 433, 434, 906, 436, 437, 589, 439, 440,
	442, 443, 444, 445, 446, 447, 609, 0, 449, 559,
	450, 451, 452, 453, 454, 0, 456, 457, 458, 459,
	460, 461, 464, 465, 466, 468, 469, 561, 470, 471,
	0, 473, 474, 735, 476, 477, 478, 479, 480, 0,
	610, 481, 563, 482, 564, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 890, 493, 494, 495, 497, 498,
	499, 500, 503, 504, 505, 506, 507, 0, 508, 510,
	512, 590, 567, 568, 569, 570, 571, 573, 574, 575,
	576, 513, 514, 530, 381, 375, 331, 373, 374, 378,
	379, 382, 0, 0, 0, 0, 0, 0, 0, 888,
	0, 711, 0, 909, 850, 0, 0, 0, 904, 916,
	894, 0, 0, 0, 895, 0, 0, 884, 885, 207,
	0, 224, 717, 0, 273, 310, 899, 0, 887, 370,
	0, 423, 427, 0, 516, 914, 0, 891, 0, 281,
	912, 722, 0, 728, 913, 734, 911, 492, 0, 724,
	725, 730, 212, 611, 515, 586, 0, 0, 0, 905,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 726, 723, 727, 733, 721, 731, 718, 729,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 715, 720, 0, 736, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 900, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 714, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 716, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	719, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 903, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 732, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 906,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 735, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 890,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 0, 0, 0,
	0, 0, 0, 0, 888, 0, 711, 0, 909, 850,
	0, 0, 0, 904, 916, 894, 0, 0, 0, 895,
	0, 0, 884, 885, 207, 0, 224, 717, 0, 273,
	310, 899, 0, 887, 370, 0, 423, 427, 0, 516,
	914, 0, 891, 0, 281, 912, 722, 0, 728, 913,
	734, 911, 492, 0, 724, 725, 730, 212, 611, 515,
	586, 0, 0, 0, 905, 0, 0, 0, 0, 0,
	0, 0, 220, 0, 0, 0, 0, 726, 723, 727,
	733, 721, 731, 718, 729, 0, 414, 348, 0, 565,
	441, 219, 265, 252, 294, 336, 448, 0, 0, 326,
	496, 261, 350, 0, 240, 383, 0, 472, 347, 0,
	455, 475, 0, 367, 246, 406, 462, 463, 715, 720,
	0, 736, 0, 4243, 251, 372, 232, 380, 577, 543,
	435, 393, 391, 0, 358, 415, 572, 900, 0, 280,
	0, 275, 371, 511, 238, 490, 409, 376, 330, 438,
	467, 277, 262, 263, 306, 408, 296, 248, 501, 540,
	544, 542, 538, 535, 539, 536, 537, 541, 297, 534,
	0, 509, 518, 552, 532, 560, 517, 557, 527, 272,
	556, 521, 520, 566, 547, 548, 502, 562, 533, 531,
	524, 523, 519, 0, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 208, 0, 209, 210, 211, 213,
	214, 215, 714, 216, 217, 218, 221, 222, 223, 225,
	585, 226, 227, 228, 229, 230, 231, 522, 716, 233,
	234, 235, 236, 237, 239, 241, 242, 243, 244, 245,
	247, 249, 0, 0, 0, 719, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 0, 259, 260, 264, 266,
	267, 268, 269, 270, 271, 274, 0, 276, 278, 0,
	279, 282, 0, 283, 284, 285, 286, 287, 288, 289,
	290, 526, 291, 0, 292, 293, 295, 0, 298, 299,
	300, 301, 302, 0, 303, 528, 903, 304, 305, 307,
	308, 309, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 0, 323, 324, 325, 327, 0,
	328, 329, 332, 333, 334, 335, 0, 337, 545, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 345,
	346, 349, 546, 351, 352, 353, 354, 355, 356, 357,
	587, 359, 360, 361, 362, 363, 364, 365, 549, 550,
	366, 368, 369, 551, 553, 554, 732, 384, 385, 386,
	387, 388, 389, 390, 392, 0, 394, 395, 396, 555,
	397, 398, 399, 400, 0, 401, 402, 403, 404, 405,
	407, 410, 411, 412, 413, 0, 416, 417, 418, 419,
	420, 421, 422, 424, 425, 426, 428, 429, 430, 588,
	431, 432, 433, 434, 906, 436, 437, 589, 439, 440,
	442, 443, 444, 445, 446, 447, 609, 0, 449, 559,
	450, 451, 452, 453, 454, 0, 456, 457, 458, 459,
	460, 461, 464, 465, 466, 468, 469, 561, 470, 471,
	0, 473, 474, 735, 476, 477, 478, 479, 480, 0,
	610, 481, 563, 482, 564, 483, 484, 485, 486, 487,
	4242, 489, 491, 0, 890, 493, 494, 495, 497, 498,
	499, 500, 503, 504, 505, 506, 507, 0, 508, 510,
	512, 590, 567, 568, 569, 570, 571, 573, 574, 575,
	576, 513, 514, 530, 381, 375, 331, 373, 374, 378,
	379, 382, 0, 0, 0, 0, 0, 0, 0, 888,
	0, 711, 0, 909, 850, 0, 0, 0, 904, 916,
	894, 0, 0, 0, 895, 0, 0, 884, 885, 207,
	0, 224, 717, 0, 273, 310, 899, 0, 887, 370,
	0, 423, 427, 0, 516, 914, 0, 891, 0, 281,
	912, 722, 0, 728, 913, 734, 911, 492, 0, 724,
	725, 730, 212, 611, 515, 586, 0, 0, 0, 905,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 726, 723, 727, 733, 721, 731, 718, 729,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 715, 720, 0, 736, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 900, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 714, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 716, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 3944, 0, 0, 0,
	719, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 3946, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 732, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 3945, 433, 434, 906,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 735, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 890,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 0, 0, 0,
	0, 0, 0, 0, 888, 0, 711, 0, 909, 850,
	0, 0, 0, 904, 916, 894, 0, 0, 0, 3943,
	0, 0, 884, 885, 207, 0, 224, 717, 0, 273,
	310, 899, 0, 887, 370, 0, 423, 427, 0, 4241,
	914, 0, 891, 0, 281, 912, 722, 0, 728, 913,
	734, 911, 492, 0, 724, 725, 730, 212, 611, 515,
	586, 0, 0, 0, 905, 0, 0, 0, 0, 0,
	0, 0, 220, 0, 0, 0, 0, 726, 723, 727,
	733, 721, 731, 718, 729, 0, 414, 348, 0, 565,
	441, 219, 265, 252, 294, 336, 448, 0, 0, 326,
	496, 261, 350, 0, 240, 383, 0, 472, 347, 0,
	455, 475, 0, 367, 246, 406, 462, 463, 715, 720,
	0, 736, 0, 4243, 251, 372, 232, 380, 577, 543,
	435, 393, 391, 0, 358, 415, 572, 900, 0, 280,
	0, 275, 371, 511, 238, 490, 409, 376, 330, 438,
	467, 277, 262, 263, 306, 408, 296, 248, 501, 540,
	544, 542, 538, 535, 539, 536, 537, 541, 297, 534,
	0, 509, 518, 552, 532, 560, 517, 557, 527, 272,
	556, 521, 520, 566, 547, 548, 502, 562, 533, 531,
	524, 523, 519, 0, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 208, 0, 209, 210, 211, 213,
	214, 215, 714, 216, 217, 218, 221, 222, 223, 225,
	585, 226, 227, 228, 229, 230, 231, 522, 716, 233,
	234, 235, 236, 237, 239, 241, 242, 243, 244, 245,
	247, 249, 0, 0, 0, 719, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 0, 259, 260, 264, 266,
	267, 268, 269, 270, 271, 274, 0, 276, 278, 0,
	279, 282, 0, 283, 284, 285, 286, 287, 288, 289,
	290, 526, 291, 0, 292, 293, 295, 0, 298, 299,
	300, 301, 302, 0, 303, 528, 903, 304, 305, 307,
	308, 309, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 0, 323, 324, 325, 327, 0,
	328, 329, 332, 333, 334, 335, 0, 337, 545, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 345,
	346, 349, 546, 351, 352, 353, 354, 355, 356, 357,
	587, 359, 360, 361, 362, 363, 364, 365, 549, 550,
	366, 368, 369, 551, 553, 554, 732, 384, 385, 386,
	387, 388, 389, 390, 392, 0, 394, 395, 396, 555,
	397, 398, 399, 400, 0, 401, 402, 403, 404, 405,
	407, 410, 411, 412, 413, 0, 416, 417, 418, 419,
	420, 421, 422, 424, 425, 426, 428, 429, 430, 588,
	431, 432, 433, 434, 906, 436, 437, 589, 439, 440,
	442, 443, 444, 445, 446, 447, 609, 0, 449, 559,
	450, 451, 452, 453, 454, 0, 456, 457, 458, 459,
	460, 461, 464, 465, 466, 468, 469, 561, 470, 471,
	0, 473, 474, 735, 476, 477, 478, 479, 480, 0,
	610, 481, 563, 482, 564, 483, 484, 485, 486, 487,
	4242, 489, 491, 0, 890, 493, 494, 495, 497, 498,
	499, 500, 503, 504, 505, 506, 507, 0, 508, 510,
	512, 590, 567, 568, 569, 570, 571, 573, 574, 575,
	576, 513, 514, 530, 381, 375, 331, 373, 374, 378,
	379, 382, 0, 0, 0, 0, 0, 0, 0, 888,
	0, 711, 0, 909, 850, 0, 0, 0, 904, 916,
	894, 0, 0, 0, 895, 0, 0, 884, 885, 207,
	0, 224, 717, 0, 273, 310, 899, 0, 887, 370,
	0, 423, 427, 0, 516, 914, 0, 891, 0, 281,
	912, 722, 0, 728, 913, 734, 911, 492, 0, 724,
	725, 730, 212, 611, 515, 586, 0, 0, 0, 905,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 726, 723, 727, 733, 721, 731, 718, 729,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 715, 720, 0, 736, 0, 2811, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 900, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 714, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 716, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	719, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 903, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 732, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 906,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 735, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 890,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 0, 0, 0,
	0, 0, 0, 0, 888, 0, 711, 0, 2204, 850,
	0, 0, 0, 904, 916, 894, 0, 0, 0, 895,
	0, 0, 884, 885, 207, 0, 224, 717, 0, 273,
	310, 899, 0, 887, 370, 0, 423, 427, 0, 516,
	914, 0, 891, 0, 281, 912, 722, 0, 728, 913,
	734, 911, 492, 0, 724, 725, 730, 212, 611, 515,
	586, 0, 0, 0, 905, 0, 0, 0, 0, 0,
	0, 0, 220, 0, 0, 0, 0, 726, 723, 727,
	733, 721, 731, 718, 729, 0, 414, 348, 0, 565,
	441, 219, 265, 252, 294, 336, 448, 0, 0, 326,
	496, 261, 350, 0, 240, 383, 0, 472, 347, 0,
	455, 475, 0, 367, 246, 406, 462, 463, 715, 720,
	0, 736, 0, 250, 251, 372, 232, 380, 577, 543,
	435, 393, 391, 0, 358, 415, 572, 900, 0, 280,
	0, 275, 371, 511, 238, 490, 409, 376, 330, 438,
	467, 277, 262, 263, 306, 408, 296, 248, 501, 540,
	544, 542, 538, 535, 539, 536, 537, 541, 297, 534,
	0, 509, 518, 552, 532, 560, 517, 557, 527, 272,
	556, 521, 520, 566, 547, 548, 502, 562, 533, 531,
	524, 523, 519, 0, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 208, 0, 209, 210, 211, 213,
	214, 215, 714, 216, 217, 218, 221, 222, 223, 225,
	585, 226, 227, 228, 229, 230, 231, 522, 716, 233,
	234, 235, 236, 237, 239, 241, 242, 243, 244, 245,
	247, 249, 0, 0, 0, 719, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 0, 259, 260, 264, 266,
	267, 268, 269, 270, 271, 274, 0, 276, 278, 0,
	279, 282, 0, 283, 284, 285, 286, 287, 288, 289,
	290, 526, 291, 0, 292, 293, 295, 0, 298, 299,
	300, 301, 302, 0, 303, 528, 903, 304, 305, 307,
	308, 309, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 0, 323, 324, 325, 327, 0,
	328, 329, 332, 333, 334, 335, 0, 337, 545, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 345,
	346, 349, 546, 351, 352, 353, 354, 355, 356, 357,
	587, 359, 360, 361, 362, 363, 364, 365, 549, 550,
	366, 368, 369, 551, 553, 554, 732, 384, 385, 386,
	387, 388, 389, 390, 392, 0, 394, 395, 396, 555,
	397, 398, 399, 400, 0, 401, 402, 403, 404, 405,
	407, 410, 411, 412, 413, 0, 416, 417, 418, 419,
	420, 421, 422, 424, 425, 426, 428, 429, 430, 588,
	431, 432, 433, 434, 906, 436, 437, 589, 439, 440,
	442, 443, 444, 445, 446, 447, 609, 0, 449, 559,
	450, 451, 452, 453, 454, 0, 456, 457, 458, 459,
	460, 461, 464, 465, 466, 468, 469, 561, 470, 471,
	0, 473, 474, 735, 476, 477, 478, 479, 480, 0,
	610, 481, 563, 482, 564, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 890, 493, 494, 495, 497, 498,
	499, 500, 503, 504, 505, 506, 507, 0, 508, 510,
	512, 590, 567, 568, 569, 570, 571, 573, 574, 575,
	576, 513, 514, 530, 381, 375, 331, 373, 374, 378,
	379, 382, 0, 0, 0, 0, 0, 0, 0, 888,
	0, 711, 0, 909, 850, 0, 0, 0, 904, 916,
	894, 0, 0, 0, 895, 0, 0, 884, 885, 207,
	0, 224, 717, 0, 273, 310, 899, 0, 887, 370,
	0, 423, 427, 0, 516, 914, 0, 891, 0, 281,
	912, 722, 0, 728, 913, 734, 911, 492, 0, 724,
	725, 730, 212, 611, 515, 586, 0, 0, 0, 905,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 726, 723, 727, 733, 721, 731, 718, 729,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 715, 720, 0, 736, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 900, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 714, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 716, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	719, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 903, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 732, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 906,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 735, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 890,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 0, 0, 0,
	0, 0, 0, 0, 888, 0, 711, 0, 909, 850,
	0, 0, 0, 0, 916, 894, 0, 0, 0, 895,
	0, 0, 1245, 1246, 207, 0, 224, 717, 0, 273,
	310, 899, 0, 0, 370, 0, 423, 427, 0, 516,
	914, 0, 3766, 0, 281, 912, 722, 0, 728, 913,
	734, 911, 492, 0, 724, 725, 730, 212, 611, 515,
	586, 0, 0, 0, 377, 0, 0, 0, 0, 0,
	0, 0, 220, 0, 0, 0, 0, 726, 723, 727,
	733, 721, 731, 718, 729, 0, 414, 348, 0, 565,
	441, 219, 265, 252, 294, 336, 448, 0, 0, 326,
	496, 261, 350, 0, 240, 383, 0, 472, 347, 0,
	455, 475, 0, 367, 246, 406, 462, 463, 715, 720,
	0, 736, 0, 250, 251, 372, 232, 380, 577, 543,
	435, 393, 391, 0, 358, 415, 572, 900, 0, 280,
	0, 275, 371, 511, 238, 490, 409, 376, 330, 438,
	467, 277, 262, 263, 306, 408, 296, 248, 501, 540,
	544, 542, 538, 535, 539, 536, 537, 541, 297, 534,
	0, 509, 518, 552, 532, 560, 517, 557, 527, 272,
	556, 521, 520, 566, 547, 548, 502, 562, 533, 531,
	524, 523, 519, 0, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 208, 0, 209, 210, 211, 213,
	214, 215, 714, 216, 217, 218, 221, 222, 223, 225,
	585, 226, 227, 228, 229, 230, 231, 522, 716, 233,
	234, 235, 236, 237, 239, 241, 242, 243, 244, 245,
	247, 249, 0, 0, 0, 719, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 0, 259, 260, 264, 266,
	267, 268, 269, 270, 271, 274, 0, 276, 278, 0,
	279, 282, 0, 283, 284, 285, 286, 287, 288, 289,
	290, 526, 291, 0, 292, 293, 295, 0, 298, 299,
	300, 301, 302, 0, 303, 528, 903, 304, 305, 307,
	308, 309, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 0, 323, 324, 325, 327, 0,
	328, 329, 332, 333, 334, 335, 0, 337, 545, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 345,
	346, 349, 546, 351, 352, 353, 354, 355, 356, 357,
	587, 359, 360, 361, 362, 363, 364, 365, 549, 550,
	366, 368, 369, 551, 553, 554, 732, 384, 385, 386,
	387, 388, 389, 390, 392, 0, 394, 395, 396, 555,
	397, 398, 399, 400, 0, 401, 402, 403, 404, 405,
	407, 410, 411, 412, 413, 0, 416, 417, 418, 419,
	420, 421, 422, 424, 425, 426, 428, 429, 430, 588,
	431, 432, 433, 434, 2757, 436, 437, 589, 439, 440,
	442, 443, 444, 445, 446, 447, 609, 0, 449, 559,
	450, 451, 452, 453, 454, 0, 456, 457, 458, 459,
	460, 461, 464, 465, 466, 468, 469, 561, 470, 471,
	0, 473, 474, 735, 476, 477, 478, 479, 480, 0,
	610, 481, 563, 482, 564, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 0, 493, 494, 495, 497, 498,
	499, 500, 503, 504, 505, 506, 507, 0, 508, 510,
	512, 590, 567, 568, 569, 570, 571, 573, 574, 575,
	576, 513, 514, 530, 381, 375, 331, 373, 374, 378,
	379, 382, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 711, 0, 909, 850, 0, 0, 0, 0, 916,
	894, 0, 0, 0, 2198, 0, 0, 2755, 2756, 207,
	0, 224, 717, 0, 273, 310, 899, 0, 0, 370,
	0, 423, 427, 0, 516, 914, 0, 0, 0, 281,
	912, 722, 0, 728, 913, 734, 911, 492, 0, 724,
	725, 730, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 726, 723, 727, 733, 721, 731, 718, 729,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 715, 720, 0, 736, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 900, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 714, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 716, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	719, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 903, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 732, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 2757,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 735, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 749, 0, 1200, 850,
	0, 0, 0, 0, 916, 0, 0, 0, 0, 2198,
	0, 0, 2755, 2756, 207, 0, 224, 717, 0, 273,
	310, 525, 0, 0, 370, 0, 423, 427, 0, 516,
	0, 0, 3996, 0, 281, 1197, 722, 0, 728, 0,
	734, 1196, 492, 0, 724, 725, 730, 212, 611, 515,
	586, 0, 0, 0, 377, 0, 0, 0, 0, 0,
	0, 0, 220, 0, 0, 0, 1198, 726, 723, 727,
	733, 721, 731, 718, 729, 0, 414, 348, 0, 565,
	441, 219, 265, 252, 294, 336, 448, 0, 0, 326,
	496, 261, 350, 0, 240, 383, 0, 472, 347, 0,
	455, 475, 0, 367, 246, 406, 462, 463, 715, 720,
	0, 736, 0, 250, 251, 372, 232, 380, 577, 543,
	435, 393, 391, 0, 358, 415, 572, 0, 0, 280,
	0, 275, 371, 511, 238, 490, 409, 376, 330, 438,
	467, 277, 262, 263, 306, 408, 296, 248, 501, 540,
	544, 542, 538, 535, 539, 536, 537, 541, 297, 534,
	0, 509, 518, 552, 532, 560, 517, 557, 527, 272,
	556, 521, 520, 566, 547, 548, 502, 562, 533, 531,
	524, 523, 519, 0, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 208, 0, 209, 210, 211, 213,
	214, 215, 714, 216, 217, 218, 221, 222, 223, 225,
	585, 226, 227, 228, 229, 230, 231, 522, 716, 233,
	234, 235, 236, 237, 239, 241, 242, 243, 244, 245,
	247, 249, 0, 0, 0, 719, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 0, 259, 260, 264, 266,
	267, 268, 269, 270, 271, 274, 0, 276, 278, 0,
	279, 282, 0, 283, 284, 285, 286, 287, 288, 289,
	290, 526, 291, 0, 292, 293, 295, 0, 298, 299,
	300, 301, 302, 0, 303, 528, 529, 304, 305, 307,
	308, 309, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 0, 323, 324, 325, 327, 0,
	328, 329, 332, 333, 334, 335, 0, 337, 545, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 345,
	346, 349, 546, 351, 352, 353, 354, 355, 356, 357,
	587, 359, 360, 361, 362, 363, 364, 365, 549, 550,
	366, 368, 369, 551, 553, 554, 732, 384, 385, 386,
	387, 388, 389, 390, 392, 0, 394, 395, 396, 555,
	397, 398, 399, 400, 0, 401, 402, 403, 404, 405,
	407, 410, 411, 412, 413, 0, 416, 417, 418, 419,
	420, 421, 422, 424, 425, 426, 428, 429, 430, 588,
	431, 432, 433, 434, 558, 436, 437, 589, 439, 440,
	442, 443, 444, 445, 446, 447, 609, 0, 449, 559,
	450, 451, 452, 453, 454, 0, 456, 457, 458, 459,
	460, 461, 464, 465, 466, 468, 469, 561, 470, 471,
	0, 473, 474, 735, 476, 477, 478, 479, 480, 0,
	610, 481, 563, 482, 564, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 0, 493, 494, 495, 497, 498,
	499, 500, 503, 504, 505, 506, 507, 0, 508, 510,
	512, 590, 567, 568, 569, 570, 571, 573, 574, 575,
	576, 513, 514, 530, 381, 375, 331, 373, 374, 378,
	379, 382, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 711, 0, 909, 850, 0, 0, 0, 0,
	916, 894, 0, 0, 3997, 0, 0, 1201, 1202, 3995,
	207, 0, 224, 717, 0, 273, 310, 899, 0, 0,
	370, 0, 423, 427, 0, 516, 914, 0, 0, 0,
	281, 912, 722, 0, 728, 913, 734, 911, 492, 0,
	724, 725, 730, 212, 611, 515, 586, 0, 0, 0,
	377, 0, 0, 0, 0, 0, 0, 0, 220, 0,
	0, 0, 0, 726, 723, 727, 733, 721, 731, 718,
	729, 0, 414, 348, 0, 565, 441, 219, 265, 252,
	294, 336, 448, 0, 0, 326, 496, 261, 350, 0,
	240, 383, 0, 472, 347, 0, 455, 475, 0, 367,
	246, 406, 462, 463, 715, 720, 0, 736, 0, 250,
	251, 372, 232, 380, 577, 543, 2197, 393, 391, 0,
	358, 415, 572, 900, 0, 280, 0, 275, 371, 511,
	238, 490, 409, 376, 330, 438, 467, 277, 262, 263,
	306, 408, 296, 248, 501, 540, 544, 542, 538, 535,
	539, 536, 537, 541, 297, 534, 0, 509, 518, 552,
	532, 560, 517, 557, 527, 272, 556, 521, 520, 566,
	547, 548, 502, 562, 533, 531, 524, 523, 519, 0,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	208, 0, 209, 210, 211, 213, 214, 215, 714, 216,
	217, 218, 221, 222, 223, 225, 585, 226, 227, 228,
	229, 230, 231, 522, 716, 233, 234, 235, 236, 237,
	239, 241, 242, 243, 244, 245, 247, 249, 0, 0,
	0, 719, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 0, 259, 260, 264, 266, 267, 268, 269, 270,
	271, 274, 0, 276, 278, 0, 279, 282, 0, 283,
	284, 285, 286, 287, 288, 289, 290, 526, 291, 0,
	292, 293, 295, 0, 298, 299, 300, 301, 302, 0,
	303, 528, 903, 304, 305, 307, 308, 309, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	0, 323, 324, 325, 327, 0, 328, 329, 332, 333,
	334, 335, 0, 337, 545, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 345, 346, 349, 546, 351,
	352, 353, 354, 355, 356, 357, 587, 359, 360, 361,
	362, 363, 364, 365, 549, 550, 366, 368, 369, 551,
	553, 554, 732, 384, 385, 386, 387, 388, 389, 390,
	392, 0, 394, 395, 396, 555, 397, 398, 399, 400,
	0, 401, 402, 403, 404, 405, 407, 410, 411, 412,
	413, 0, 416, 417, 418, 419, 420, 421, 422, 424,
	425, 426, 428, 429, 430, 588, 431, 432, 433, 434,
	2196, 436, 437, 589, 439, 440, 442, 443, 444, 445,
	446, 447, 609, 0, 449, 559, 450, 451, 452, 453,
	454, 0, 456, 457, 458, 459, 460, 461, 464, 465,
	466, 468, 469, 561, 470, 471, 0, 473, 474, 735,
	476, 477, 478, 479, 480, 0, 610, 481, 563, 482,
	564, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	0, 493, 494, 495, 497, 498, 499, 500, 503, 504,
	505, 506, 507, 0, 508, 510, 512, 590, 567, 568,
	569, 570, 571, 573, 574, 575, 576, 513, 514, 530,
	381, 375, 331, 373, 374, 378, 379, 382, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 711, 0, 909,
	850, 0, 0, 0, 904, 916, 894, 0, 0, 0,
	2198, 0, 0, 2194, 2195, 207, 0, 224, 717, 0,
	273, 310, 899, 0, 887, 370, 0, 423, 427, 0,
	0, 914, 0, 891, 0, 281, 912, 0, 0, 0,
	913, 0, 911, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 905, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 726, 723,
	727, 733, 721, 731, 718, 729, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 715,
	720, 0, 736, 0, 4243, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 900, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 714, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 716,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 719, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 903, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 732, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 906, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 735, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 4242, 489, 491, 0, 890, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 749, 0, 1200, 850, 0, 0, 0, 0,
	916, 0, 0, 0, 0, 895, 0, 0, 884, 885,
	207, 0, 224, 717, 0, 273, 310, 525, 0, 0,
	370, 0, 423, 427, 0, 516, 0, 0, 1206, 0,
	281, 1197, 722, 0, 728, 0, 734, 1196, 492, 0,
	724, 725, 730, 212, 611, 515, 586, 0, 0, 0,
	377, 0, 0, 0, 0, 0, 0, 0, 220, 0,
	0, 0, 1198, 726, 723, 727, 733, 721, 731, 718,
	729, 0, 414, 348, 0, 565, 441, 219, 265, 252,
	294, 336, 448, 0, 0, 326, 496, 261, 350, 0,
	240, 383, 0, 472, 347, 0, 455, 475, 0, 367,
	246, 406, 462, 463, 715, 720, 0, 736, 0, 250,
	251, 372, 232, 380, 577, 543, 435, 393, 391, 0,
	358, 415, 572, 0, 0, 280, 0, 275, 371, 511,
	238, 490, 409, 376, 330, 438, 467, 277, 262, 263,
	306, 408, 296, 248, 501, 540, 544, 542, 538, 535,
	539, 536, 537, 541, 297, 534, 0, 509, 518, 552,
	532, 560, 517, 557, 527, 272, 556, 521, 520, 566,
	547, 548, 502, 562, 533, 531, 524, 523, 519, 0,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	208, 0, 209, 210, 211, 213, 214, 215, 714, 216,
	217, 218, 221, 222, 223, 225, 585, 226, 227, 228,
	229, 230, 231, 522, 716, 233, 234, 235, 236, 237,
	239, 241, 242, 243, 244, 245, 247, 249, 0, 0,
	0, 719, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 0, 259, 260, 264, 266, 267, 268, 269, 270,
	271, 274, 0, 276, 278, 0, 279, 282, 0, 283,
	284, 285, 286, 287, 288, 289, 290, 526, 291, 0,
	292, 293, 295, 0, 298, 299, 300, 301, 302, 0,
	303, 528, 529, 304, 305, 307, 308, 309, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	0, 323, 324, 325, 327, 0, 328, 329, 332, 333,
	334, 335, 0, 337, 545, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 345, 346, 349, 546, 351,
	352, 353, 354, 355, 356, 357, 587, 359, 360, 361,
	362, 363, 364, 365, 549, 550, 366, 368, 369, 551,
	553, 554, 732, 384, 385, 386, 387, 388, 389, 390,
	392, 0, 394, 395, 396, 555, 397, 398, 399, 400,
	0, 401, 402, 403, 404, 405, 407, 410, 411, 412,
	413, 0, 416, 417, 418, 419, 420, 421, 422, 424,
	425, 426, 428, 429, 430, 588, 431, 432, 433, 434,
	558, 436, 437, 589, 439, 440, 442, 443, 444, 445,
	446, 447, 609, 0, 449, 559, 450, 451, 452, 453,
	454, 0, 456, 457, 458, 459, 460, 461, 464, 465,
	466, 468, 469, 561, 470, 471, 0, 473, 474, 735,
	476, 477, 478, 479, 480, 0, 610, 481, 563, 482,
	564, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	0, 493, 494, 495, 497, 498, 499, 500, 503, 504,
	505, 506, 507, 0, 508, 510, 512, 590, 567, 568,
	569, 570, 571, 573, 574, 575, 576, 513, 514, 530,
	381, 375, 331, 373, 374, 378, 379, 382, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 749, 0, 1200,
	850, 0, 0, 0, 0, 916, 0, 0, 0, 0,
	0, 0, 0, 1201, 1202, 207, 0, 224, 717, 0,
	273, 310, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 1192, 0, 281, 1197, 722, 0, 728,
	0, 734, 1196, 492, 0, 724, 725, 730, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 1198, 726, 723,
	727, 733, 721, 731, 718, 729, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 715,
	720, 0, 736, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 714, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 716,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 719, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 732, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 735, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 749, 0, 1200, 850, 0, 0, 0, 0,
	916, 0, 0, 0, 0, 0, 0, 0, 1201, 1202,
	207, 0, 224, 717, 0, 273, 310, 525, 0, 0,
	370, 0, 423, 427, 0, 516, 0, 0, 0, 0,
	281, 1197, 722, 0, 728, 0, 734, 1196, 492, 0,
	724, 725, 730, 212, 611, 515, 586, 0, 0, 0,
	377, 0, 0, 0, 0, 0, 0, 0, 220, 0,
	0, 0, 1198, 726, 723, 727, 733, 721, 731, 718,
	729, 0, 414, 348, 0, 565, 441, 219, 265, 252,
	294, 336, 448, 0, 0, 326, 496, 261, 350, 0,
	240, 383, 0, 472, 347, 0, 455, 475, 0, 367,
	246, 406, 462, 463, 715, 720, 0, 736, 0, 250,
	251, 372, 232, 380, 577, 543, 435, 393, 391, 0,
	358, 415, 572, 0, 0, 280, 0, 275, 371, 511,
	238, 490, 409, 376, 330, 438, 467, 277, 262, 263,
	306, 408, 296, 248, 501, 540, 544, 542, 538, 535,
	539, 536, 537, 541, 297, 534, 0, 509, 518, 552,
	532, 560, 517, 557, 527, 272, 556, 521, 520, 566,
	547, 548, 502, 562, 533, 531, 524, 523, 519, 0,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	208, 0, 209, 210, 211, 213, 214, 215, 714, 216,
	217, 218, 221, 222, 223, 225, 585, 226, 227, 228,
	229, 230, 231, 522, 716, 233, 234, 235, 236, 237,
	239, 241, 242, 243, 244, 245, 247, 249, 0, 0,
	0, 719, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 0, 259, 260, 264, 266, 267, 268, 269, 270,
	271, 274, 0, 276, 278, 0, 279, 282, 0, 283,
	284, 285, 286, 287, 288, 289, 290, 526, 291, 0,
	292, 293, 295, 0, 298, 299, 300, 301, 302, 0,
	303, 528, 529, 304, 305, 307, 308, 309, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	0, 323, 324, 325, 327, 0, 328, 329, 332, 333,
	334, 335, 0, 337, 545, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 345, 346, 349, 546, 351,
	352, 353, 354, 355, 356, 357, 587, 359, 360, 361,
	362, 363, 364, 365, 549, 550, 366, 368, 369, 551,
	553, 554, 732, 384, 385, 386, 387, 388, 389, 390,
	392, 0, 394, 395, 396, 555, 397, 398, 399, 400,
	0, 401, 402, 403, 404, 405, 407, 410, 411, 412,
	413, 0, 416, 417, 418, 419, 420, 421, 422, 424,
	425, 426, 428, 429, 430, 588, 431, 432, 433, 434,
	558, 436, 437, 589, 439, 440, 442, 443, 444, 445,
	446, 447, 609, 0, 449, 559, 450, 451, 452, 453,
	454, 0, 456, 457, 458, 459, 460, 461, 464, 465,
	466, 468, 469, 561, 470, 471, 0, 473, 474, 735,
	476, 477, 478, 479, 480, 0, 610, 481, 563, 482,
	564, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	0, 493, 494, 495, 497, 498, 499, 500, 503, 504,
	505, 506, 507, 0, 508, 510, 512, 590, 567, 568,
	569, 570, 571, 573, 574, 575, 576, 513, 514, 530,
	381, 375, 331, 373, 374, 378, 379, 382, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 711, 0, 909,
	850, 0, 0, 0, 0, 916, 894, 0, 0, 0,
	0, 0, 0, 1201, 1202, 207, 0, 224, 717, 0,
	273, 310, 899, 0, 0, 370, 0, 423, 427, 0,
	516, 914, 0, 0, 0, 281, 912, 722, 0, 728,
	913, 734, 911, 492, 0, 724, 725, 730, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 726, 723,
	727, 733, 721, 731, 718, 729, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 715,
	720, 0, 736, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 900, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 714, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 716,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 719, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 903, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 732, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 2757, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 735, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 711, 0, 909, 850, 0, 0, 0,
	0, 916, 894, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 717, 2198, 273, 310, 899, 0,
	0, 370, 0, 423, 427, 0, 516, 914, 0, 0,
	0, 281, 912, 722, 0, 728, 913, 734, 911, 492,
	0, 724, 725, 730, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 3762,
	0, 0, 0, 0, 726, 723, 727, 733, 721, 731,
	718, 729, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 715, 720, 0, 736, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 900, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 714,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 716, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 719, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 903, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 732, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 2757, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	735, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 711,
	0, 909, 850, 0, 0, 0, 0, 916, 894, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	717, 2198, 273, 310, 899, 0, 0, 370, 0, 423,
	427, 0, 516, 914, 0, 0, 0, 281, 912, 722,
	0, 728, 913, 734, 911, 492, 0, 724, 725, 730,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	726, 723, 727, 733, 721, 731, 718, 729, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 715, 720, 0, 736, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 3239,
	900, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 714, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 716, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 719, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 903,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 732,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 2757, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 735, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 711, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 717, 2198, 273, 310,
	525, 0, 0, 370, 0, 423, 427, 78, 516, 0,
	0, 0, 0, 281, 0, 722, 0, 728, 0, 734,
	0, 492, 0, 724, 725, 730, 212, 611, 515, 586,
	0, 0, 0, 377, 75, 0, 0, 608, 76, 0,
	0, 220, 0, 0, 0, 0, 726, 723, 727, 733,
	721, 731, 718, 729, 0, 414, 348, 2342, 1745, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 715, 720, 0,
	736, 0, 250, 251, 372, 232, 380, 2350, 2351, 2349,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 714, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 716, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 719, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 732, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 735, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 711, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 717, 2344, 273, 310, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 722, 0, 728, 0, 734, 0, 492, 0, 724,
	725, 730, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 608, 0, 0, 0, 220, 0, 0,
	0, 0, 726, 723, 727, 733, 721, 731, 718, 729,
	0, 414, 348, 2342, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 715, 720, 0, 736, 0, 250, 251,
	372, 232, 380, 2350, 2351, 2349, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 714, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 716, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	719, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 732, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 735, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 711, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 717, 2344,
	273, 310, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 722, 0, 728,
	0, 734, 0, 492, 0, 724, 725, 730, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 726, 723,
	727, 733, 721, 731, 718, 729, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 715,
	720, 0, 736, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 714, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 716,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 719, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 732, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 735, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 711, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 717, 3391, 273, 310, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 722, 0, 728, 0, 734, 0, 492,
	0, 724, 725, 730, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 726, 723, 727, 733, 721, 731,
	718, 729, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 715, 720, 0, 736, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 714,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 716, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 719, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 732, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	735, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 711,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	717, 4162, 273, 310, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 722,
	0, 728, 0, 734, 0, 492, 0, 724, 725, 730,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	726, 723, 727, 733, 721, 731, 718, 729, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 715, 720, 0, 736, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 714, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 716, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 719, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 732,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 735, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 711, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 717, 3922, 273, 310,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 722, 0, 728, 0, 734,
	0, 492, 0, 724, 725, 730, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 726, 723, 727, 733,
	721, 731, 718, 729, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 715, 720, 0,
	736, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 714, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 716, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 719, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 732, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 735, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 711, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 717, 2494, 273, 310, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 722, 0, 728, 0, 734, 0, 492, 0, 724,
	725, 730, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 726, 723, 727, 733, 721, 731, 718, 729,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 715, 720, 0, 736, 0, 250, 251,
	372, 232, 380, 2350, 2351, 2349, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 714, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 716, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	719, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 732, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 735, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 653, 0, 0, 0, 0, 0,
	0, 664, 665, 666, 0, 207, 0, 224, 0, 74,
	273, 310, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 661,
	662, 663, 0, 0, 0, 0, 0, 194, 655, 656,
	657, 658, 659, 660, 653, 0, 0, 0, 0, 0,
	0, 664, 665, 666, 0, 207, 0, 224, 0, 0,
	273, 310, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 3895, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 661,
	662, 663, 0, 0, 0, 0, 0, 194, 655, 656,
	657, 658, 659, 660, 653, 0, 0, 0, 0, 0,
	0, 664, 665, 666, 0, 207, 0, 224, 0, 0,
	273, 310, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 2674, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 2675, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 661,
	662, 663, 0, 0, 0, 0, 0, 194, 655, 656,
	657, 658, 659, 660, 653, 0, 0, 0, 0, 0,
	0, 664, 665, 666, 0, 207, 0, 224, 0, 0,
	273, 310, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 649, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 650, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 194, 0, 0, 661,
	662, 663, 0, 0, 0, 0, 0, 0, 655, 656,
	657, 658, 659, 660, 207, 0, 224, 0, 0, 273,
	310, 525, 0, 0, 370, 0, 423, 427, 0, 516,
	0, 0, 0, 0, 281, 0, 0, 0, 0, 0,
	0, 0, 492, 0, 0, 0, 0, 212, 611, 515,
	586, 0, 0, 0, 377, 0, 0, 0, 0, 0,
	0, 0, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 414, 348, 0, 565,
	441, 219, 265, 252, 294, 336, 448, 0, 0, 326,
	496, 261, 350, 0, 240, 383, 0, 472, 347, 0,
	455, 475, 0, 367, 246, 406, 462, 463, 0, 0,
	0, 0, 0, 250, 251, 372, 232, 380, 577, 543,
	435, 393, 391, 0, 358, 415, 572, 0, 0, 280,
	0, 275, 371, 511, 238, 490, 409, 376, 330, 438,
	467, 277, 262, 263, 306, 408, 296, 248, 501, 540,
	544, 542, 538, 535, 539, 536, 537, 541, 297, 534,
	0, 509, 518, 552, 532, 560, 517, 557, 527, 272,
	556, 521, 520, 566, 547, 548, 502, 562, 533, 531,
	524, 523, 519, 0, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 208, 0, 209, 210, 211, 213,
	214, 215, 0, 216, 217, 218, 221, 222, 223, 225,
	585, 226, 227, 228, 229, 230, 231, 522, 0, 233,
	234, 235, 236, 237, 239, 241, 242, 243, 244, 245,
	247, 249, 0, 0, 0, 0, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 0, 259, 260, 264, 266,
	267, 268, 269, 270, 271, 274, 0, 276, 278, 0,
	279, 282, 0, 283, 284, 285, 286, 287, 288, 289,
	290, 526, 291, 0, 292, 293, 295, 0, 298, 299,
	300, 301, 302, 0, 303, 528, 529, 304, 305, 307,
	308, 309, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 0, 323, 324, 325, 327, 0,
	328, 329, 332, 333, 334, 335, 0, 337, 545, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 345,
	346, 349, 546, 351, 352, 353, 354, 355, 356, 357,
	587, 359, 360, 361, 362, 363, 364, 365, 549, 550,
	366, 368, 369, 551, 553, 554, 0, 384, 385, 386,
	387, 388, 389, 390, 392, 0, 394, 395, 396, 555,
	397, 398, 399, 400, 0, 401, 402, 403, 404, 405,
	407, 410, 411, 412, 413, 0, 416, 417, 418, 419,
	420, 421, 422, 424, 425, 426, 428, 429, 430, 588,
	431, 432, 433, 434, 558, 436, 437, 589, 439, 440,
	442, 443, 444, 445, 446, 447, 609, 0, 449, 559,
	450, 451, 452, 453, 454, 0, 456, 457, 458, 459,
	460, 461, 464, 465, 466, 468, 469, 561, 470, 471,
	0, 473, 474, 0, 476, 477, 478, 479, 480, 0,
	610, 481, 563, 482, 564, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 0, 493, 494, 495, 497, 498,
	499, 500, 503, 504, 505, 506, 507, 0, 508, 510,
	512, 590, 567, 568, 569, 570, 571, 573, 574, 575,
	576, 513, 514, 530, 381, 375, 331, 373, 374, 378,
	379, 382, 194, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 0, 224, 0, 0, 273, 310, 525, 0, 4279,
	370, 0, 423, 427, 0, 516, 0, 0, 0, 0,
	281, 0, 0, 0, 0, 0, 0, 0, 492, 0,
	0, 0, 0, 212, 611, 515, 586, 0, 0, 0,
	377, 0, 0, 0, 0, 0, 0, 0, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 414, 348, 0, 565, 441, 219, 265, 252,
	294, 336, 448, 0, 0, 326, 496, 261, 350, 0,
	240, 383, 0, 472, 347, 0, 455, 475, 0, 367,
	246, 406, 462, 463, 0, 0, 0, 0, 0, 250,
	251, 372, 232, 380, 577, 543, 435, 393, 391, 0,
	358, 415, 572, 0, 0, 280, 0, 275, 371, 511,
	238, 490, 409, 376, 330, 438, 467, 277, 262, 263,
	306, 408, 296, 248, 501, 540, 544, 542, 538, 535,
	539, 536, 537, 541, 297, 534, 0, 509, 518, 552,
	532, 560, 517, 557, 527, 272, 556, 521, 520, 566,
	547, 548, 502, 562, 533, 531, 524, 523, 519, 0,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	208, 0, 209, 210, 211, 213, 214, 215, 0, 216,
	217, 218, 221, 222, 223, 225, 585, 226, 227, 228,
	229, 230, 231, 522, 0, 233, 234, 235, 236, 237,
	239, 241, 242, 243, 244, 245, 247, 249, 0, 0,
	0, 0, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 0, 259, 260, 264, 266, 267, 268, 269, 270,
	271, 274, 0, 276, 278, 0, 279, 282, 0, 283,
	284, 285, 286, 287, 288, 289, 290, 526, 291, 0,
	292, 293, 295, 0, 298, 299, 300, 301, 302, 0,
	303, 528, 529, 304, 305, 307, 308, 309, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	0, 323, 324, 325, 327, 0, 328, 329, 332, 333,
	334, 335, 0, 337, 545, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 345, 346, 349, 546, 351,
	352, 353, 354, 355, 356, 357, 587, 359, 360, 361,
	362, 363, 364, 365, 549, 550, 366, 368, 369, 551,
	553, 554, 0, 384, 385, 386, 387, 388, 389, 390,
	392, 0, 394, 395, 396, 555, 397, 398, 399, 400,
	0, 401, 402, 403, 404, 405, 407, 410, 411, 412,
	413, 0, 416, 417, 418, 419, 420, 421, 422, 424,
	425, 426, 428, 429, 430, 588, 431, 432, 433, 434,
	558, 436, 437, 589, 439, 440, 442, 443, 444, 445,
	446, 447, 609, 0, 449, 559, 450, 451, 452, 453,
	454, 0, 456, 457, 458, 459, 460, 461, 464, 465,
	466, 468, 469, 561, 470, 471, 0, 473, 474, 0,
	476, 477, 478, 479, 480, 0, 610, 481, 563, 482,
	564, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	0, 493, 494, 495, 497, 498, 499, 500, 503, 504,
	505, 506, 507, 0, 508, 510, 512, 590, 567, 568,
	569, 570, 571, 573, 574, 575, 576, 513, 514, 530,
	381, 375, 331, 373, 374, 378, 379, 382, 194, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 0, 224, 0,
	0, 273, 310, 525, 0, 4150, 370, 0, 423, 427,
	0, 516, 0, 0, 0, 0, 281, 0, 0, 0,
	0, 0, 0, 0, 492, 0, 0, 0, 0, 212,
	611, 515, 586, 0, 0, 0, 377, 0, 0, 0,
	0, 0, 0, 0, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 414, 348,
	0, 565, 441, 219, 265, 252, 294, 336, 448, 0,
	0, 326, 496, 261, 350, 0, 240, 383, 0, 472,
	347, 0, 455, 475, 0, 367, 246, 406, 462, 463,
	0, 0, 0, 0, 0, 250, 251, 372, 232, 380,
	577, 543, 435, 393, 391, 0, 358, 415, 572, 0,
	0, 280, 0, 275, 371, 511, 238, 490, 409, 376,
	330, 438, 467, 277, 262, 263, 306, 408, 296, 248,
	501, 540, 544, 542, 538, 535, 539, 536, 537, 541,
	297, 534, 0, 509, 518, 552, 532, 560, 517, 557,
	527, 272, 556, 521, 520, 566, 547, 548, 502, 562,
	533, 531, 524, 523, 519, 0, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 208, 0, 209, 210,
	211, 213, 214, 215, 0, 216, 217, 218, 221, 222,
	223, 225, 585, 226, 227, 228, 229, 230, 231, 522,
	0, 233, 234, 235, 236, 237, 239, 241, 242, 243,
	244, 245, 247, 249, 0, 0, 0, 0, 0, 0,
	0, 253, 254, 255, 256, 257, 258, 0, 259, 260,
	264, 266, 267, 268, 269, 270, 271, 274, 0, 276,
	278, 0, 279, 282, 0, 283, 284, 285, 286, 287,
	288, 289, 290, 526, 291, 0, 292, 293, 295, 0,
	298, 299, 300, 301, 302, 0, 303, 528, 529, 304,
	305, 307, 308, 309, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 322, 0, 323, 324, 325,
	327, 0, 328, 329, 332, 333, 334, 335, 0, 337,
	545, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 345, 346, 349, 546, 351, 352, 353, 354, 355,
	356, 357, 587, 359, 360, 361, 362, 363, 364, 365,
	549, 550, 366, 368, 369, 551, 553, 554, 0, 384,
	385, 386, 387, 388, 389, 390, 392, 0, 394, 395,
	396, 555, 397, 398, 399, 400, 0, 401, 402, 403,
	404, 405, 407, 410, 411, 412, 413, 0, 416, 417,
	418, 419, 420, 421, 422, 424, 425, 426, 428, 429,
	430, 588, 431, 432, 433, 434, 558, 436, 437, 589,
	439, 440, 442, 443, 444, 445, 446, 447, 609, 0,
	449, 559, 450, 451, 452, 453, 454, 0, 456, 457,
	458, 459, 460, 461, 464, 465, 466, 468, 469, 561,
	470, 471, 0, 473, 474, 0, 476, 477, 478, 479,
	480, 0, 610, 481, 563, 482, 564, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 0, 493, 494, 495,
	497, 498, 499, 500, 503, 504, 505, 506, 507, 0,
	508, 510, 512, 590, 567, 568, 569, 570, 571, 573,
	574, 575, 576, 513, 514, 530, 381, 375, 331, 373,
	374, 378, 379, 382, 194, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 0, 224, 0, 0, 273, 310, 525,
	0, 4147, 370, 0, 423, 427, 78, 516, 0, 0,
	0, 0, 281, 0, 0, 0, 0, 0, 0, 0,
	492, 0, 0, 0, 0, 212, 611, 515, 586, 0,
	0, 0, 377, 75, 0, 0, 0, 76, 0, 0,
	220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 414, 348, 0, 1745, 441, 219,
	265, 252, 294, 336, 448, 0, 0, 326, 496, 261,
	350, 0, 240, 383, 0, 472, 347, 0, 455, 475,
	0, 367, 246, 406, 462, 463, 0, 0, 0, 0,
	0, 250, 251, 372, 232, 380, 577, 543, 435, 393,
	391, 0, 358, 415, 572, 0, 0, 280, 0, 275,
	371, 511, 238, 490, 409, 376, 330, 438, 467, 277,
	262, 263, 306, 408, 296, 248, 501, 540, 544, 542,
	538, 535, 539, 536, 537, 541, 297, 534, 0, 509,
	518, 552, 532, 560, 517, 557, 527, 272, 556, 521,
	520, 566, 547, 548, 502, 562, 533, 531, 524, 523,
	519, 0, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 208, 0, 209, 210, 211, 213, 214, 215,
	0, 216, 217, 218, 221, 222, 223, 225, 585, 226,
	227, 228, 229, 230, 231, 522, 0, 233, 234, 235,
	236, 237, 239, 241, 242, 243, 244, 245, 247, 249,
	0, 0, 0, 0, 0, 0, 0, 253, 254, 255,
	256, 257, 258, 0, 259, 260, 264, 266, 267, 268,
	269, 270, 271, 274, 0, 276, 278, 0, 279, 282,
	0, 283, 284, 285, 286, 287, 288, 289, 290, 526,
	291, 0, 292, 293, 295, 0, 298, 299, 300, 301,
	302, 0, 303, 528, 529, 304, 305, 307, 308, 309,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 322, 0, 323, 324, 325, 327, 0, 328, 329,
	332, 333, 334, 335, 0, 337, 545, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 345, 346, 349,
	546, 351, 352, 353, 354, 355, 356, 357, 587, 359,
	360, 361, 362, 363, 364, 365, 549, 550, 366, 368,
	369, 551, 553, 554, 0, 384, 385, 386, 387, 388,
	389, 390, 392, 0, 394, 395, 396, 555, 397, 398,
	399, 400, 0, 401, 402, 403, 404, 405, 407, 410,
	411, 412, 413, 0, 416, 417, 418, 419, 420, 421,
	422, 424, 425, 426, 428, 429, 430, 588, 431, 432,
	433, 434, 558, 436, 437, 589, 439, 440, 442, 443,
	444, 445, 446, 447, 609, 0, 449, 559, 450, 451,
	452, 453, 454, 0, 456, 457, 458, 459, 460, 461,
	464, 465, 466, 468, 469, 561, 470, 471, 0, 473,
	474, 0, 476, 477, 478, 479, 480, 0, 610, 481,
	563, 482, 564, 483, 484, 485, 486, 487, 488, 489,
	491, 0, 0, 493, 494, 495, 497, 498, 499, 500,
	503, 504, 505, 506, 507, 0, 508, 510, 512, 590,
	567, 568, 569, 570, 571, 573, 574, 575, 576, 513,
	514, 530, 381, 375, 331, 373, 374, 378, 379, 382,
	749, 0, 0, 850, 0, 0, 0, 0, 0, 79,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 0,
	224, 717, 74, 273, 310, 525, 0, 0, 370, 0,
	423, 427, 0, 516, 0, 0, 0, 0, 281, 1197,
	722, 0, 728, 0, 734, 1196, 492, 0, 724, 725,
	730, 212, 611, 515, 586, 0, 0, 0, 377, 0,
	0, 0, 0, 0, 0, 0, 220, 0, 0, 0,
	1198, 726, 723, 727, 733, 721, 731, 718, 729, 0,
	414, 348, 0, 565, 441, 219, 265, 252, 294, 336,
	448, 0, 0, 326, 496, 261, 350, 0, 240, 383,
	0, 472, 347, 0, 455, 475, 0, 367, 246, 406,
	462, 463, 715, 720, 0, 736, 0, 250, 251, 372,
	232, 380, 577, 543, 435, 393, 391, 0, 358, 415,
	572, 0, 0, 280, 0, 275, 371, 511, 238, 490,
	409, 376, 330, 438, 467, 277, 262, 263, 306, 408,
	296, 248, 501, 540, 544, 542, 538, 535, 539, 536,
	537, 541, 297, 534, 0, 509, 518, 552, 532, 560,
	517, 557, 527, 272, 556, 521, 520, 566, 547, 548,
	502, 562, 533, 531, 524, 523, 519, 0, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 208, 0,
	209, 210, 211, 213, 214, 215, 714, 216, 217, 218,
	221, 222, 223, 225, 585, 226, 227, 228, 229, 230,
	231, 522, 716, 233, 234, 235, 236, 237, 239, 241,
	242, 243, 244, 245, 247, 249, 0, 0, 0, 719,
	0, 0, 0, 253, 254, 255, 256, 257, 258, 0,
	259, 260, 264, 266, 267, 268, 269, 270, 271, 274,
	0, 276, 278, 0, 279, 282, 0, 283, 284, 285,
	286, 287, 288, 289, 290, 526, 291, 0, 292, 293,
	295, 0, 298, 299, 300, 301, 302, 0, 303, 528,
	529, 304, 305, 307, 308, 309, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 0, 323,
	324, 325, 327, 0, 328, 329, 332, 333, 334, 335,
	0, 337, 545, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 345, 346, 349, 546, 351, 352, 353,
	354, 355, 356, 357, 587, 359, 360, 361, 362, 363,
	364, 365, 549, 550, 366, 368, 369, 551, 553, 554,
	732, 384, 385, 386, 387, 388, 389, 390, 392, 0,
	394, 395, 396, 555, 397, 398, 399, 400, 0, 401,
	402, 403, 404, 405, 407, 410, 411, 412, 413, 0,
	416, 417, 418, 419, 420, 421, 422, 424, 425, 426,
	428, 429, 430, 588, 431, 432, 433, 434, 558, 436,
	437, 589, 439, 440, 442, 443, 444, 445, 446, 447,
	609, 0, 449, 559, 450, 451, 452, 453, 454, 0,
	456, 457, 458, 459, 460, 461, 464, 465, 466, 468,
	469, 561, 470, 471, 0, 473, 474, 735, 476, 477,
	478, 479, 480, 0, 610, 481, 563, 482, 564, 483,
	484, 485, 486, 487, 488, 489, 491, 0, 0, 493,
	494, 495, 497, 498, 499, 500, 503, 504, 505, 506,
	507, 0, 508, 510, 512, 590, 567, 568, 569, 570,
	571, 573, 574, 575, 576, 513, 514, 530, 381, 375,
	331, 373, 374, 378, 379, 382, 749, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 0, 224, 717, 0, 273,
	310, 525, 0, 0, 370, 0, 423, 427, 0, 516,
	0, 0, 0, 0, 281, 0, 722, 0, 728, 0,
	734, 0, 492, 0, 724, 725, 730, 212, 611, 515,
	586, 0, 0, 0, 377, 0, 0, 0, 0, 0,
	0, 0, 220, 0, 0, 0, 0, 726, 723, 727,
	733, 721, 731, 718, 729, 0, 414, 348, 0, 565,
	441, 219, 265, 252, 294, 336, 448, 0, 0, 326,
	496, 261, 350, 0, 240, 383, 1956, 472, 347, 0,
	455, 475, 0, 367, 246, 406, 462, 463, 715, 720,
	0, 736, 0, 250, 251, 372, 232, 380, 577, 543,
	435, 393, 391, 0, 358, 415, 572, 0, 0, 280,
	0, 275, 371, 511, 238, 490, 409, 376, 330, 438,
	467, 277, 262, 263, 306, 408, 296, 248, 501, 540,
	544, 542, 538, 535, 539, 536, 537, 541, 297, 534,
	0, 509, 518, 552, 532, 560, 517, 557, 527, 272,
	556, 521, 520, 566, 547, 548, 502, 562, 533, 531,
	524, 523, 519, 0, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 208, 0, 209, 210, 211, 213,
	214, 215, 714, 216, 217, 218, 221, 222, 223, 225,
	585, 226, 227, 228, 229, 230, 231, 522, 716, 233,
	234, 235, 236, 237, 239, 241, 242, 243, 244, 245,
	247, 249, 0, 0, 746, 719, 0, 0, 747, 253,
	254, 255, 256, 257, 258, 0, 259, 260, 264, 266,
	267, 268, 269, 270, 271, 274, 0, 276, 278, 0,
	279, 282, 0, 283, 284, 285, 286, 287, 288, 289,
	290, 526, 291, 0, 292, 293, 295, 0, 298, 299,
	300, 301, 302, 0, 303, 528, 529, 304, 305, 307,
	308, 309, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 0, 323, 324, 325, 327, 0,
	328, 329, 332, 333, 334, 335, 0, 337, 545, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 345,
	346, 349, 546, 351, 352, 353, 354, 355, 356, 357,
	587, 359, 360, 361, 362, 363, 364, 365, 549, 550,
	366, 368, 369, 551, 553, 554, 732, 384, 385, 386,
	387, 388, 389, 390, 392, 0, 394, 395, 396, 555,
	397, 398, 399, 400, 0, 401, 402, 403, 404, 405,
	407, 410, 411, 412, 413, 0, 416, 417, 418, 419,
	420, 421, 422, 424, 425, 426, 428, 429, 430, 588,
	431, 432, 433, 434, 558, 436, 437, 589, 439, 440,
	442, 443, 444, 445, 446, 447, 609, 748, 449, 559,
	450, 451, 452, 453, 454, 0, 456, 457, 458, 459,
	460, 461, 464, 465, 466, 468, 469, 561, 470, 471,
	0, 473, 474, 735, 476, 477, 478, 479, 480, 0,
	610, 481, 563, 482, 564, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 0, 493, 494, 495, 497, 498,
	499, 500, 503, 504, 505, 506, 507, 0, 508, 510,
	512, 590, 567, 568, 569, 570, 571, 573, 574, 575,
	576, 513, 514, 530, 381, 375, 331, 373, 374, 378,
	379, 382, 194, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 0, 224, 0, 0, 273, 310, 525, 0, 0,
	370, 0, 423, 427, 0, 516, 0, 0, 0, 0,
	281, 0, 0, 0, 0, 0, 0, 0, 492, 0,
	0, 0, 0, 212, 611, 515, 586, 0, 0, 0,
	377, 0, 0, 0, 608, 1971, 0, 0, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 414, 348, 0, 565, 441, 219, 265, 252,
	294, 336, 448, 0, 0, 326, 496, 261, 350, 0,
	240, 383, 0, 472, 347, 0, 455, 475, 0, 367,
	246, 406, 462, 463, 0, 0, 0, 0, 0, 250,
	251, 372, 232, 380, 577, 543, 435, 393, 391, 0,
	358, 415, 572, 0, 0, 280, 0, 275, 371, 511,
	238, 490, 409, 376, 330, 438, 467, 277, 262, 263,
	306, 408, 296, 248, 501, 540, 544, 542, 538, 535,
	539, 536, 537, 541, 297, 534, 0, 509, 518, 552,
	532, 560, 517, 557, 527, 272, 556, 521, 520, 566,
	547, 548, 502, 562, 533, 531, 524, 523, 519, 0,
	197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
	208, 0, 209, 210, 211, 213, 214, 215, 0, 216,
	217, 218, 221, 222, 223, 225, 585, 226, 227, 228,
	229, 230, 231, 522, 0, 233, 234, 235, 236, 237,
	239, 241, 242, 243, 244, 245, 247, 249, 0, 0,
	0, 1975, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 0, 259, 260, 264, 266, 267, 268, 269, 270,
	271, 274, 0, 276, 278, 0, 279, 282, 0, 283,
	284, 285, 286, 287, 288, 289, 290, 526, 291, 0,
	292, 293, 295, 0, 298, 299, 300, 301, 302, 0,
	303, 528, 529, 304, 305, 307, 308, 309, 311, 312,
	313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
	0, 323, 324, 325, 327, 0, 328, 329, 332, 333,
	334, 335, 0, 337, 545, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 345, 346, 349, 546, 351,
	352, 353, 354, 355, 356, 357, 587, 359, 360, 361,
	362, 363, 364, 365, 549, 550, 366, 368, 369, 551,
	553, 554, 0, 384, 385, 386, 387, 388, 389, 390,
	392, 0, 394, 395, 396, 555, 397, 398, 399, 400,
	0, 401, 402, 403, 404, 405, 407, 410, 411, 412,
	413, 0, 416, 417, 418, 419, 420, 421, 422, 424,
	425, 426, 428, 429, 430, 588, 431, 432, 433, 434,
	558, 436, 437, 589, 439, 440, 442, 443, 444, 445,
	446, 447, 609, 0, 449, 559, 450, 451, 452, 453,
	454, 0, 456, 457, 458, 459, 460, 461, 464, 465,
	466, 468, 469, 561, 470, 471, 0, 1972, 474, 0,
	476, 477, 478, 479, 480, 0, 610, 481, 563, 482,
	564, 483, 484, 485, 486, 487, 488, 489, 491, 0,
	0, 493, 494, 495, 497, 498, 499, 500, 503, 504,
	505, 506, 507, 0, 508, 510, 512, 590, 567, 568,
	569, 570, 571, 573, 574, 575, 576, 513, 514, 530,
	381, 375, 331, 373, 374, 378, 379, 382, 749, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 0, 224, 717,
	969, 273, 310, 525, 0, 0, 370, 0, 423, 427,
	0, 516, 0, 0, 0, 0, 281, 0, 722, 0,
	728, 0, 734, 0, 492, 0, 724, 725, 730, 212,
	611, 515, 586, 0, 0, 0, 377, 0, 0, 0,
	0, 0, 0, 0, 220, 0, 0, 0, 0, 726,
	723, 727, 733, 721, 731, 718, 729, 0, 414, 348,
	0, 565, 441, 219, 265, 252, 294, 336, 448, 0,
	0, 326, 496, 261, 350, 0, 240, 383, 0, 472,
	347, 0, 455, 475, 0, 367, 246, 406, 462, 463,
	715, 720, 0, 736, 0, 250, 251, 372, 232, 380,
	577, 543, 435, 393, 391, 0, 358, 415, 572, 0,
	0, 280, 0, 275, 371, 511, 238, 490, 409, 376,
	330, 438, 467, 277, 262, 263, 306, 408, 296, 248,
	501, 540, 544, 542, 538, 535, 539, 536, 537, 541,
	297, 534, 0, 509, 518, 552, 532, 560, 517, 557,
	527, 272, 556, 521, 520, 566, 547, 548, 502, 562,
	533, 531, 524, 523, 519, 0, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 208, 0, 209, 210,
	211, 213, 214, 215, 714, 216, 217, 218, 221, 222,
	223, 225, 585, 226, 227, 228, 229, 230, 231, 522,
	716, 233, 234, 235, 236, 237, 239, 241, 242, 243,
	244, 245, 247, 249, 0, 0, 746, 719, 0, 0,
	747, 253, 254, 255, 256, 257, 258, 0, 259, 260,
	264, 266, 267, 268, 269, 270, 271, 274, 0, 276,
	278, 0, 279, 282, 0, 283, 284, 285, 286, 287,
	288, 289, 290, 526, 291, 0, 292, 293, 295, 0,
	298, 299, 300, 301, 302, 0, 303, 528, 529, 304,
	305, 307, 308, 309, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 322, 0, 323, 324, 325,
	327, 0, 328, 329, 332, 333, 334, 335, 0, 337,
	545, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 345, 346, 349, 546, 351, 352, 353, 354, 355,
	356, 357, 587, 359, 360, 361, 362, 363, 364, 365,
	549, 550, 366, 368, 369, 551, 553, 554, 732, 384,
	385, 386, 387, 388, 389, 390, 392, 0, 394, 395,
	396, 555, 397, 398, 399, 400, 0, 401, 402, 403,
	404, 405, 407, 410, 411, 412, 413, 0, 416, 417,
	418, 419, 420, 421, 422, 424, 425, 426, 428, 429,
	430, 588, 431, 432, 433, 434, 558, 436, 437, 589,
	439, 440, 442, 443, 444, 445, 446, 447, 609, 748,
	449, 559, 450, 451, 452, 453, 454, 0, 456, 457,
	458, 459, 460, 461, 464, 465, 466, 468, 469, 561,
	470, 471, 0, 473, 474, 735, 476, 477, 478, 479,
	480, 0, 610, 481, 563, 482, 564, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 0, 493, 494, 495,
	497, 498, 499, 500, 503, 504, 505, 506, 507, 0,
	508, 510, 512, 590, 567, 568, 569, 570, 571, 573,
	574, 575, 576, 513, 514, 530, 381, 375, 331, 373,
	374, 378, 379, 382, 194, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 2823, 224, 0, 0, 273, 310, 525,
	0, 0, 370, 0, 423, 427, 0, 516, 0, 0,
	0, 0, 281, 0, 0, 0, 0, 0, 0, 0,
	492, 0, 0, 0, 0, 212, 611, 515, 586, 0,
	0, 0, 377, 0, 0, 0, 0, 0, 0, 0,
	220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 414, 348, 0, 565, 441, 219,
	265, 252, 294, 336, 448, 0, 0, 326, 496, 261,
	350, 0, 240, 383, 0, 472, 347, 0, 455, 475,
	0, 367, 246, 406, 462, 463, 0, 0, 0, 0,
	0, 250, 251, 372, 232, 380, 577, 543, 435, 393,
	391, 0, 358, 415, 572, 0, 0, 280, 0, 275,
	371, 511, 238, 490, 409, 376, 330, 438, 467, 277,
	262, 263, 306, 408, 296, 248, 501, 540, 544, 542,
	538, 535, 539, 536, 537, 541, 297, 534, 0, 509,
	518, 552, 532, 560, 517, 557, 527, 272, 556, 521,
	520, 566, 547, 548, 502, 562, 533, 531, 524, 523,
	519, 0, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 208, 0, 209, 210, 211, 213, 214, 215,
	0, 216, 217, 218, 221, 222, 223, 225, 585, 226,
	227, 228, 229, 230, 231, 522, 0, 233, 234, 235,
	236, 237, 239, 241, 242, 243, 244, 245, 247, 249,
	0, 0, 0, 0, 0, 0, 0, 253, 254, 255,
	256, 257, 258, 0, 259, 260, 264, 266, 267, 268,
	269, 270, 271, 274, 0, 276, 278, 0, 279, 282,
	0, 283, 284, 285, 286, 287, 288, 289, 290, 526,
	291, 0, 292, 293, 295, 0, 298, 299, 300, 301,
	302, 0, 303, 528, 529, 304, 305, 307, 308, 309,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 322, 0, 323, 324, 325, 327, 0, 328, 329,
	332, 333, 334, 335, 0, 337, 545, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 345, 346, 349,
	546, 351, 352, 353, 354, 355, 356, 357, 587, 359,
	360, 361, 362, 363, 364, 365, 549, 550, 366, 368,
	369, 551, 553, 554, 0, 384, 385, 386, 387, 388,
	389, 390, 392, 0, 394, 395, 396, 555, 397, 398,
	399, 400, 0, 401, 402, 403, 404, 405, 407, 410,
	411, 412, 413, 0, 416, 417, 418, 419, 420, 421,
	422, 424, 425, 426, 428, 429, 430, 588, 431, 432,
	433, 434, 558, 436, 437, 589, 439, 440, 442, 443,
	444, 445, 446, 447, 609, 0, 449, 559, 450, 451,
	452, 453, 454, 0, 456, 457, 458, 459, 460, 461,
	464, 465, 466, 468, 469, 561, 470, 471, 0, 473,
	474, 0, 476, 477, 478, 479, 480, 0, 610, 481,
	563, 482, 564, 483, 484, 485, 486, 487, 488, 489,
	491, 0, 0, 493, 494, 495, 497, 498, 499, 500,
	503, 504, 505, 506, 507, 0, 508, 510, 512, 590,
	567, 568, 569, 570, 571, 573, 574, 575, 576, 513,
	514, 530, 381, 375, 331, 373, 374, 378, 379, 382,
	0, 749, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 717, 877, 273, 310, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 722, 0, 728, 0, 734, 0, 492, 0, 724,
	725, 730, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 726, 723, 727, 733, 721, 731, 718, 729,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 715, 720, 0, 736, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 714, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 716, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 746,
	719, 0, 0, 747, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 769, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 732, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 748, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 735, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 749, 0, 0,
	850, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 717, 0,
	273, 310, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 1182, 0, 281, 0, 722, 0, 728,
	0, 734, 0, 492, 0, 724, 725, 730, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 726, 723,
	727, 733, 721, 731, 718, 729, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 715,
	720, 0, 736, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 714, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 716,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 719, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 732, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 735, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 0, 0, 273, 310, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	0, 1878, 273, 310, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 749, 0, 0, 850, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 717, 3192, 273, 310,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 722, 0, 728, 0, 734,
	0, 492, 0, 724, 725, 730, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 726, 723, 727, 733,
	721, 731, 718, 729, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 715, 720, 0,
	736, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 714, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 716, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 719, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 732, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 735, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 0, 0, 273, 310, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 711, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 717, 926,
	273, 310, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 722, 0, 728,
	0, 734, 0, 492, 0, 724, 725, 730, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 726, 723,
	727, 733, 721, 731, 718, 729, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 715,
	720, 0, 736, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 714, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 716,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 719, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 732, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 735, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 749, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 717, 0, 273, 310, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 722, 0, 728, 0, 734, 0, 492,
	0, 724, 725, 730, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 726, 723, 727, 733, 721, 731,
	718, 729, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 715, 720, 0, 736, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 714,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 716, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 719, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 732, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	735, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 2433,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	717, 0, 273, 310, 0, 0, 0, 370, 0, 423,
	427, 0, 0, 0, 0, 0, 0, 281, 0, 722,
	2408, 728, 0, 734, 0, 492, 0, 724, 725, 730,
	212, 810, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	726, 723, 727, 733, 721, 731, 718, 729, 0, 414,
	348, 0, 0, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 715, 720, 0, 736, 0, 250, 251, 372, 232,
	380, 0, 0, 435, 393, 391, 0, 358, 415, 0,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 297, 0, 0, 509, 813, 803, 795, 796, 797,
	798, 799, 800, 0, 815, 816, 817, 818, 819, 502,
	809, 0, 794, 801, 802, 804, 2411, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 714, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	0, 716, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 719, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 0, 0,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 0, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 0, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 0, 0, 366, 368, 369, 0, 2409, 0, 732,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 0, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 0, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 2414, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	0, 470, 471, 0, 473, 474, 735, 476, 477, 478,
	479, 480, 0, 610, 481, 0, 482, 0, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 0, 0, 0, 194, 0,
	0, 0, 0, 0, 513, 514, 2410, 381, 375, 331,
	373, 374, 378, 379, 382, 2428, 207, 0, 224, 0,
	0, 273, 1989, 525, 0, 0, 370, 0, 423, 427,
	0, 516, 0, 0, 0, 0, 281, 0, 0, 0,
	0, 0, 2426, 0, 492, 0, 0, 0, 0, 212,
	611, 515, 586, 0, 0, 0, 377, 0, 0, 0,
	0, 0, 0, 0, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 414, 348,
	0, 565, 441, 219, 265, 252, 294, 336, 448, 0,
	0, 326, 496, 261, 350, 0, 240, 383, 0, 472,
	347, 0, 455, 475, 0, 367, 246, 406, 462, 463,
	0, 0, 1993, 0, 0, 250, 251, 372, 232, 380,
	577, 543, 435, 393, 391, 0, 358, 415, 572, 0,
	0, 280, 0, 275, 371, 511, 238, 490, 409, 376,
	330, 438, 467, 277, 262, 263, 306, 408, 296, 248,
	501, 540, 544, 542, 538, 535, 539, 536, 537, 541,
	297, 534, 0, 509, 518, 552, 532, 560, 517, 557,
	527, 272, 556, 521, 520, 566, 547, 548, 502, 562,
	533, 531, 524, 523, 519, 0, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 208, 0, 209, 210,
	211, 213, 214, 215, 0, 216, 217, 218, 221, 222,
	223, 225, 585, 226, 227, 228, 229, 230, 231, 522,
	0, 233, 234, 235, 236, 237, 239, 241, 242, 243,
	244, 245, 247, 249, 0, 0, 0, 0, 0, 0,
	0, 253, 254, 255, 256, 257, 258, 0, 259, 260,
	264, 266, 267, 268, 269, 270, 271, 274, 0, 276,
	278, 0, 279, 282, 0, 1999, 284, 285, 286, 287,
	288, 289, 290, 526, 291, 0, 292, 293, 295, 1998,
	298, 299, 300, 301, 302, 0, 303, 528, 529, 304,
	305, 307, 308, 309, 311, 312, 313, 314, 315, 316,
	317, 318, 319, 320, 321, 322, 0, 323, 324, 325,
	327, 0, 328, 329, 332, 333, 334, 335, 0, 337,
	545, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 345, 346, 349, 546, 351, 352, 353, 354, 355,
	356, 357, 587, 359, 360, 361, 362, 363, 364, 365,
	549, 550, 366, 368, 369, 551, 553, 554, 0, 384,
	385, 386, 387, 388, 389, 390, 392, 0, 394, 395,
	396, 555, 397, 398, 399, 400, 1997, 401, 402, 403,
	404, 405, 407, 410, 411, 412, 413, 0, 416, 417,
	418, 419, 420, 421, 422, 424, 425, 426, 428, 429,
	430, 588, 431, 432, 433, 434, 558, 436, 437, 589,
	439, 440, 442, 443, 444, 445, 446, 447, 609, 0,
	449, 559, 450, 451, 452, 453, 454, 0, 456, 457,
	458, 459, 460, 461, 464, 465, 466, 468, 469, 561,
	470, 471, 0, 473, 474, 0, 476, 477, 478, 479,
	480, 0, 610, 481, 563, 482, 564, 483, 484, 485,
	486, 487, 488, 489, 491, 0, 1996, 493, 494, 495,
	497, 498, 499, 500, 503, 504, 505, 506, 507, 0,
	508, 510, 512, 590, 567, 568, 569, 570, 571, 573,
	574, 575, 576, 513, 514, 530, 381, 375, 331, 373,
	374, 378, 379, 382, 194, 0, 0, 0, 1995, 1990,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 0, 224, 0, 0, 273, 310, 525,
	0, 0, 370, 0, 423, 427, 0, 516, 0, 0,
	0, 0, 281, 0, 0, 0, 2366, 0, 0, 0,
	492, 0, 0, 0, 0, 212, 611, 515, 586, 0,
	0, 0, 377, 0, 0, 0, 0, 0, 0, 0,
	220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 414, 348, 0, 565, 441, 219,
	265, 252, 294, 336, 448, 0, 0, 326, 496, 261,
	350, 0, 240, 383, 0, 472, 347, 0, 455, 475,
	0, 367, 246, 406, 462, 463, 0, 0, 1993, 0,
	0, 250, 251, 372, 232, 380, 577, 543, 435, 393,
	391, 0, 358, 415, 572, 0, 0, 280, 0, 275,
	371, 511, 238, 490, 409, 376, 330, 438, 467, 277,
	262, 263, 306, 408, 296, 248, 501, 540, 544, 542,
	538, 535, 539, 536, 537, 541, 297, 534, 0, 509,
	518, 552, 532, 560, 517, 557, 527, 272, 556, 521,
	520, 566, 547, 548, 502, 562, 533, 531, 524, 523,
	519, 0, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 208, 0, 209, 210, 211, 213, 214, 215,
	0, 216, 217, 218, 221, 222, 223, 225, 585, 226,
	227, 228, 229, 230, 231, 522, 0, 233, 234, 235,
	236, 237, 239, 241, 242, 243, 244, 245, 247, 249,
	0, 0, 0, 0, 0, 0, 0, 253, 254, 255,
	256, 257, 258, 0, 259, 260, 264, 266, 267, 268,
	269, 270, 271, 274, 0, 276, 278, 0, 279, 282,
	0, 1999, 284, 285, 286, 287, 288, 289, 290, 526,
	291, 0, 292, 293, 295, 1998, 298, 299, 300, 301,
	302, 0, 303, 528, 529, 304, 305, 307, 308, 309,
	311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 322, 0, 323, 324, 325, 327, 0, 328, 329,
	332, 333, 334, 335, 0, 337, 545, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 345, 346, 349,
	546, 351, 352, 353, 354, 355, 356, 357, 587, 359,
	360, 361, 362, 363, 364, 365, 549, 550, 366, 368,
	369, 551, 553, 554, 0, 384, 385, 386, 387, 388,
	389, 390, 392, 0, 394, 395, 396, 555, 397, 398,
	399, 400, 1997, 401, 402, 403, 404, 405, 407, 410,
	411, 412, 413, 0, 416, 417, 418, 419, 420, 421,
	422, 424, 425, 426, 428, 429, 430, 588, 431, 432,
	433, 434, 558, 436, 437, 589, 439, 440, 442, 443,
	444, 445, 446, 447, 609, 0, 449, 559, 450, 451,
	452, 453, 454, 0, 456, 457, 458, 459, 460, 461,
	464, 465, 466, 468, 469, 561, 470, 471, 0, 473,
	474, 0, 476, 477, 478, 479, 480, 0, 610, 481,
	563, 482, 564, 483, 484, 485, 486, 487, 488, 489,
	491, 0, 1996, 493, 494, 495, 497, 498, 499, 500,
	503, 504, 505, 506, 507, 0, 508, 510, 512, 590,
	567, 568, 569, 570, 571, 573, 574, 575, 576, 513,
	514, 530, 381, 375, 331, 373, 374, 378, 379, 382,
	194, 0, 0, 0, 1995, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 0,
	224, 0, 0, 273, 310, 525, 0, 0, 370, 0,
	423, 427, 0, 516, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 0, 0, 0, 492, 0, 0, 0,
	0, 212, 611, 515, 586, 0, 0, 0, 377, 0,
	0, 0, 0, 0, 0, 0, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	414, 348, 0, 565, 441, 219, 265, 252, 294, 336,
	448, 0, 0, 326, 496, 261, 350, 0, 240, 383,
	0, 472, 347, 0, 455, 475, 0, 367, 246, 406,
	462, 463, 0, 0, 1993, 0, 0, 250, 251, 372,
	232, 380, 577, 543, 435, 393, 391, 0, 358, 415,
	572, 0, 0, 280, 0, 275, 371, 511, 238, 490,
	409, 376, 330, 438, 467, 277, 262, 263, 306, 408,
	296, 248, 501, 540, 544, 542, 538, 535, 539, 536,
	537, 541, 297, 534, 0, 509, 518, 552, 532, 560,
	517, 557, 527, 272, 556, 521, 520, 566, 547, 548,
	502, 562, 533, 531, 524, 523, 519, 0, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 208, 0,
	209, 210, 211, 213, 214, 215, 0, 216, 217, 218,
	221, 222, 223, 225, 585, 226, 227, 228, 229, 230,
	231, 522, 0, 233, 234, 235, 236, 237, 239, 241,
	242, 243, 244, 245, 247, 249, 0, 0, 0, 0,
	0, 0, 0, 253, 254, 255, 256, 257, 258, 0,
	259, 260, 264, 266, 267, 268, 269, 270, 271, 274,
	0, 276, 278, 0, 279, 282, 0, 1999, 284, 285,
	286, 287, 288, 289, 290, 526, 291, 0, 292, 293,
	295, 1998, 298, 299, 300, 301, 302, 0, 303, 528,
	529, 304, 305, 307, 308, 309, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 0, 323,
	324, 325, 327, 0, 328, 329, 332, 333, 334, 335,
	0, 337, 545, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 345, 346, 349, 546, 351, 352, 353,
	354, 355, 356, 357, 587, 359, 360, 361, 362, 363,
	364, 365, 549, 550, 366, 368, 369, 551, 553, 554,
	0, 384, 385, 386, 387, 388, 389, 390, 392, 0,
	394, 395, 396, 555, 397, 398, 399, 400, 1997, 401,
	402, 403, 404, 405, 407, 410, 411, 412, 413, 0,
	416, 417, 418, 419, 420, 421, 422, 424, 425, 426,
	428, 429, 430, 588, 431, 432, 433, 434, 558, 436,
	437, 589, 439, 440, 442, 443, 444, 445, 446, 447,
	609, 0, 449, 559, 450, 451, 452, 453, 454, 0,
	456, 457, 458, 459, 460, 461, 464, 465, 466, 468,
	469, 561, 470, 471, 0, 473, 474, 0, 476, 477,
	478, 479, 480, 0, 610, 481, 563, 482, 564, 483,
	484, 485, 486, 487, 488, 489, 491, 0, 1996, 493,
	494, 495, 497, 498, 499, 500, 503, 504, 505, 506,
	507, 0, 508, 510, 512, 590, 567, 568, 569, 570,
	571, 573, 574, 575, 576, 513, 514, 530, 381, 375,
	331, 373, 374, 378, 379, 382, 811, 0, 0, 0,
	1995, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 0, 224, 717, 0, 273,
	310, 0, 0, 0, 370, 0, 423, 427, 0, 0,
	0, 0, 0, 0, 281, 0, 722, 2408, 728, 0,
	734, 0, 492, 0, 724, 725, 730, 212, 810, 515,
	586, 0, 0, 0, 377, 0, 0, 0, 0, 0,
	0, 0, 220, 0, 0, 0, 0, 726, 723, 727,
	733, 721, 731, 718, 729, 0, 414, 348, 0, 0,
	441, 219, 265, 252, 294, 336, 448, 0, 0, 326,
	496, 261, 350, 0, 240, 383, 0, 472, 347, 0,
	455, 475, 0, 367, 246, 406, 462, 463, 715, 720,
	0, 736, 0, 250, 251, 372, 232, 380, 0, 0,
	435, 393, 391, 0, 358, 415, 0, 0, 0, 280,
	0, 275, 371, 511, 238, 490, 409, 376, 330, 438,
	467, 277, 262, 263, 306, 408, 296, 248, 501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 297, 0,
	0, 509, 813, 803, 795, 796, 797, 798, 799, 800,
	0, 815, 816, 817, 818, 819, 502, 809, 0, 794,
	801, 802, 804, 2411, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 208, 0, 209, 210, 211, 213,
	214, 215, 714, 216, 217, 218, 221, 222, 223, 225,
	585, 226, 227, 228, 229, 230, 231, 0, 716, 233,
	234, 235, 236, 237, 239, 241, 242, 243, 244, 245,
	247, 249, 0, 0, 0, 719, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 0, 259, 260, 264, 266,
	267, 268, 269, 270, 271, 274, 0, 276, 278, 0,
	279, 282, 0, 283, 284, 285, 286, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 295, 0, 298, 299,
	300, 301, 302, 0, 303, 0, 0, 304, 305, 307,
	308, 309, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 0, 323, 324, 325, 327, 0,
	328, 329, 332, 333, 334, 335, 0, 337, 0, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 345,
	346, 349, 0, 351, 352, 353, 354, 355, 356, 357,
	587, 359, 360, 361, 362, 363, 364, 365, 0, 0,
	366, 368, 369, 0, 2409, 0, 732, 384, 385, 386,
	387, 388, 389, 390, 392, 0, 394, 395, 396, 0,
	397, 398, 399, 400, 0, 401, 402, 403, 404, 405,
	407, 410, 411, 412, 413, 0, 416, 417, 418, 419,
	420, 421, 422, 424, 425, 426, 428, 429, 430, 588,
	431, 432, 433, 434, 0, 436, 437, 589, 439, 440,
	442, 443, 444, 445, 446, 447, 609, 0, 449, 2414,
	450, 451, 452, 453, 454, 0, 456, 457, 458, 459,
	460, 461, 464, 465, 466, 468, 469, 0, 470, 471,
	0, 473, 474, 735, 476, 477, 478, 479, 480, 0,
	610, 481, 0, 482, 0, 483, 484, 485, 486, 487,
	488, 489, 491, 0, 0, 493, 494, 495, 497, 498,
	499, 500, 503, 504, 505, 506, 507, 0, 508, 510,
	512, 590, 0, 0, 0, 194, 0, 0, 0, 0,
	0, 513, 514, 2410, 381, 375, 331, 373, 374, 378,
	379, 382, 1968, 207, 0, 224, 0, 0, 273, 310,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 2402, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 608, 1971, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 1975, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	1972, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 0, 0, 273, 310, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 608, 1971, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	1975, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 1972, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2552, 207, 0, 224, 0, 0,
	273, 310, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 2553, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2543, 207, 0, 224, 0, 0, 273, 310, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 2544, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 696, 207, 0, 224,
	0, 0, 273, 695, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 608, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 0, 0, 273, 310,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 608, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 0, 0, 273, 310, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 3651, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 2823, 224, 0, 0,
	273, 310, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 0, 0, 273, 310, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 3374,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	0, 0, 273, 310, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 3358, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 0, 0, 273, 310,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 3040, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 916,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 0, 0, 273, 310, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 0, 0,
	273, 1065, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 608,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1063, 207, 0, 224, 0, 0, 273, 1062, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	0, 0, 273, 310, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 187, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 836, 216, 217, 218, 221,
	222, 223, 225, 188, 226, 835, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 190, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 191, 431, 432, 433, 434, 558, 436, 437,
	189, 439, 440, 442, 443, 444, 445, 446, 447, 833,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 183, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 192, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 699, 207, 0, 224, 0, 0, 273, 698,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 207,
	0, 224, 0, 0, 273, 310, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 580, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 582, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 581, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 0, 0,
	273, 310, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 4412, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 0, 0, 273, 310, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	0, 0, 273, 310, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 187, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 188, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 190, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 191, 431, 432, 433, 434, 558, 436, 437,
	189, 439, 440, 442, 443, 444, 445, 446, 447, 2887,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 2888, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 192, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 0, 0, 273, 2613,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 0, 0, 273, 2531, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 0, 0,
	273, 2529, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 0, 0, 273, 2515, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	0, 0, 273, 1959, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 0, 0, 273, 1901,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 0, 0, 273, 1170, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 0, 0,
	273, 988, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 0, 0, 273, 949, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	0, 0, 273, 945, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 938, 224, 0, 0, 273, 310,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 0, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 0, 0, 273, 310, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 187, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 188, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 190, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 191, 431, 432, 433, 434, 558,
	436, 437, 189, 439, 440, 442, 443, 444, 445, 446,
	447, 833, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 183, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 192, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 0, 0,
	273, 783, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 0, 0, 273, 779, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	0, 0, 273, 776, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 0, 0, 273, 772,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 0, 0, 273, 757, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 0, 0,
	273, 703, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 0, 0, 273, 701, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	0, 0, 273, 684, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 0, 0, 273, 676,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 611, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 558, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 610,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 0, 0, 273, 672, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 435, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 0, 0,
	273, 670, 525, 0, 0, 370, 0, 423, 427, 0,
	516, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 212, 611,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 348, 0,
	565, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 0,
	0, 0, 0, 0, 250, 251, 372, 232, 380, 577,
	543, 435, 393, 391, 0, 358, 415, 572, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	540, 544, 542, 538, 535, 539, 536, 537, 541, 297,
	534, 0, 509, 518, 552, 532, 560, 517, 557, 527,
	272, 556, 521, 520, 566, 547, 548, 502, 562, 533,
	531, 524, 523, 519, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 0, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 522, 0,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 526, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 528, 529, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 545,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 546, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 549,
	550, 366, 368, 369, 551, 553, 554, 0, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	555, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 558, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	559, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 561, 470,
	471, 0, 473, 474, 0, 476, 477, 478, 479, 480,
	0, 610, 481, 563, 482, 564, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 567, 568, 569, 570, 571, 573, 574,
	575, 576, 513, 514, 530, 381, 375, 331, 373, 374,
	378, 379, 382, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 224, 0, 0, 273, 645, 525, 0,
	0, 370, 0, 423, 427, 0, 516, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 492,
	0, 0, 0, 0, 212, 611, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 348, 0, 565, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 0, 0, 0, 0, 0,
	250, 251, 372, 232, 380, 577, 543, 435, 393, 391,
	0, 358, 415, 572, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 540, 544, 542, 538,
	535, 539, 536, 537, 541, 297, 534, 0, 509, 518,
	552, 532, 560, 517, 557, 527, 272, 556, 521, 520,
	566, 547, 548, 502, 562, 533, 531, 524, 523, 519,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 0,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 522, 0, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 526, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 528, 529, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 545, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 546,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 549, 550, 366, 368, 369,
	551, 553, 554, 0, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 555, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 558, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 559, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 561, 470, 471, 0, 473, 474,
	0, 476, 477, 478, 479, 480, 0, 610, 481, 563,
	482, 564, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 567,
	568, 569, 570, 571, 573, 574, 575, 576, 513, 514,
	530, 381, 375, 331, 373, 374, 378, 379, 382, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 224,
	0, 0, 273, 310, 525, 0, 0, 370, 0, 423,
	427, 0, 516, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	212, 611, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 614,
	348, 0, 565, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 0, 0, 0, 0, 0, 250, 251, 372, 232,
	380, 577, 543, 435, 393, 391, 0, 358, 415, 572,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 540, 544, 542, 538, 535, 539, 536, 537,
	541, 297, 534, 0, 509, 518, 552, 532, 560, 517,
	557, 527, 272, 556, 521, 520, 566, 547, 548, 502,
	562, 533, 531, 524, 523, 519, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 0, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	522, 0, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 526, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 528, 529,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 545, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 546, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 549, 550, 366, 368, 369, 551, 553, 554, 0,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 555, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 558, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 559, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	561, 470, 471, 0, 473, 474, 0, 476, 477, 478,
	479, 480, 0, 610, 481, 563, 482, 564, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 567, 568, 569, 570, 571,
	573, 574, 575, 576, 513, 514, 530, 381, 375, 331,
	373, 374, 378, 379, 382, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 224, 0, 0, 273, 310,
	525, 0, 0, 370, 0, 423, 427, 0, 516, 0,
	0, 0, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 212, 187, 515, 181,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 348, 0, 565, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 0, 0, 0,
	0, 0, 250, 251, 372, 232, 380, 577, 543, 435,
	393, 391, 0, 358, 415, 572, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 540, 544,
	542, 538, 535, 539, 536, 537, 541, 297, 534, 0,
	509, 518, 552, 532, 560, 517, 557, 527, 272, 556,
	521, 520, 566, 547, 548, 502, 562, 533, 531, 524,
	523, 519, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 0, 216, 217, 218, 221, 222, 223, 225, 188,
	226, 227, 228, 229, 230, 231, 522, 0, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	526, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 528, 529, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 545, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 546, 351, 352, 353, 354, 355, 356, 357, 190,
	359, 360, 361, 362, 363, 364, 365, 549, 550, 366,
	368, 369, 551, 553, 554, 0, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 555, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 191, 431,
	432, 433, 434, 558, 436, 437, 189, 439, 440, 442,
	443, 444, 445, 446, 447, 182, 0, 449, 559, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 561, 470, 471, 0,
	473, 474, 0, 476, 477, 478, 479, 480, 0, 183,
	481, 563, 482, 564, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	192, 567, 568, 569, 570, 571, 573, 574, 575, 576,
	513, 514, 530, 381, 375, 331, 373, 374, 378, 379,
	382, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 224, 0, 0, 273, 310, 525, 0, 0, 370,
	0, 423, 427, 0, 516, 0, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	0, 0, 212, 611, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 348, 0, 565, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 0, 0, 0, 0, 0, 250, 251,
	372, 232, 380, 577, 543, 0, 393, 391, 0, 358,
	415, 572, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 540, 544, 542, 538, 535, 539,
	536, 537, 541, 297, 534, 0, 509, 518, 552, 532,
	560, 517, 557, 527, 272, 556, 521, 520, 566, 547,
	548, 502, 562, 533, 531, 524, 523, 519, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 0, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 522, 0, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 526, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	528, 529, 0, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 545, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 546, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 549, 550, 366, 368, 369, 551, 553,
	554, 0, 384, 385, 386, 387, 388, 389, 0, 392,
	0, 394, 395, 396, 555, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 0, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 558,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 559, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 561, 470, 471, 0, 473, 474, 0, 476,
	477, 478, 479, 480, 0, 610, 481, 563, 482, 564,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 567, 568, 569,
	570, 571, 573, 574, 575, 576, 513, 514, 530, 381,
	375, 331, 373, 374, 378, 379, 382, 811, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 224, 717, 0,
	273, 310, 0, 0, 0, 370, 0, 423, 427, 0,
	0, 0, 0, 0, 0, 281, 0, 722, 2408, 728,
	0, 734, 0, 492, 0, 724, 725, 730, 212, 810,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 726, 723,
	727, 733, 721, 731, 718, 729, 0, 414, 348, 0,
	0, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 715,
	720, 0, 736, 0, 250, 251, 372, 232, 380, 0,
	0, 435, 393, 391, 0, 358, 415, 0, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	0, 0, 509, 813, 803, 795, 796, 797, 798, 799,
	800, 0, 815, 816, 817, 818, 819, 502, 809, 0,
	794, 801, 802, 804, 2411, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 714, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 0, 716,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 719, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 0, 0, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 0,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 0, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 0,
	0, 366, 368, 369, 0, 2409, 0, 732, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	0, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 0, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	2414, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 0, 470,
	471, 0, 473, 474, 735, 476, 477, 478, 479, 480,
	0, 610, 481, 0, 482, 0, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 0, 0, 811, 0, 0, 0, 0,
	0, 0, 513, 514, 2410, 381, 375, 331, 373, 374,
	378, 379, 382, 207, 0, 224, 717, 0, 273, 310,
	0, 0, 0, 370, 0, 423, 427, 0, 0, 0,
	0, 0, 0, 281, 0, 722, 0, 728, 2864, 734,
	0, 492, 0, 724, 725, 730, 212, 810, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 2863, 0,
	0, 220, 0, 0, 0, 0, 726, 723, 727, 733,
	721, 731, 718, 729, 0, 414, 348, 0, 0, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 715, 720, 0,
	736, 0, 250, 251, 372, 232, 380, 0, 0, 435,
	393, 391, 0, 358, 415, 0, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 0, 0,
	509, 813, 803, 795, 796, 797, 798, 799, 800, 0,
	815, 816, 817, 818, 819, 502, 809, 0, 794, 801,
	802, 804, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 714, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 0, 716, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 719, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 0, 0, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 0, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 0, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 0, 0, 366,
	368, 369, 0, 0, 0, 732, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 0, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 0, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 2414, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 0, 470, 471, 0,
	473, 474, 735, 476, 477, 478, 479, 480, 0, 610,
	481, 0, 482, 0, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 0, 0, 811, 0, 0, 0, 0, 0, 0,
	513, 514, 0, 381, 375, 331, 373, 374, 378, 379,
	382, 207, 0, 224, 717, 0, 273, 310, 0, 0,
	0, 370, 0, 423, 427, 0, 0, 0, 0, 0,
	0, 281, 0, 722, 0, 728, 0, 734, 0, 492,
	0, 724, 725, 730, 212, 810, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 726, 723, 727, 733, 721, 731,
	718, 729, 0, 414, 348, 0, 0, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 715, 720, 0, 736, 0,
	250, 251, 372, 232, 380, 0, 0, 435, 393, 391,
	4445, 358, 415, 0, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 297, 0, 0, 509, 813,
	803, 795, 796, 797, 798, 799, 800, 0, 815, 816,
	817, 818, 819, 502, 809, 0, 794, 801, 802, 804,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 714,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 0, 716, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 719, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 0, 0, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 0, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 0,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 0, 0, 366, 368, 369,
	0, 0, 0, 732, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 0, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 0, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 0, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 0, 470, 471, 0, 473, 474,
	735, 476, 477, 478, 479, 480, 0, 610, 481, 0,
	482, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 0,
	0, 811, 0, 0, 0, 0, 0, 0, 513, 514,
	0, 381, 375, 331, 373, 374, 378, 379, 382, 207,
	0, 224, 717, 0, 273, 310, 0, 0, 0, 370,
	0, 423, 427, 0, 0, 0, 0, 0, 0, 281,
	0, 722, 0, 728, 0, 734, 0, 492, 0, 724,
	725, 730, 212, 810, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 726, 723, 727, 733, 721, 731, 718, 729,
	0, 414, 348, 0, 0, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 715, 720, 0, 736, 0, 250, 251,
	372, 232, 380, 0, 0, 435, 393, 391, 4124, 358,
	415, 0, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 0, 0, 509, 813, 803, 795,
	796, 797, 798, 799, 800, 0, 815, 816, 817, 818,
	819, 502, 809, 0, 794, 801, 802, 804, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 714, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 0, 716, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	719, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	0, 0, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 0, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 0, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 0, 0, 366, 368, 369, 0, 0,
	0, 732, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 0, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 0,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 0, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 0, 470, 471, 0, 473, 474, 735, 476,
	477, 478, 479, 480, 0, 610, 481, 0, 482, 0,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 0, 0, 811,
	0, 0, 0, 0, 0, 0, 513, 514, 0, 381,
	375, 331, 373, 374, 378, 379, 382, 207, 0, 224,
	717, 0, 273, 310, 0, 0, 0, 370, 0, 423,
	427, 0, 0, 0, 0, 0, 0, 281, 0, 722,
	0, 728, 0, 734, 0, 492, 0, 724, 725, 730,
	212, 810, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	726, 723, 727, 733, 721, 731, 718, 729, 0, 414,
	348, 0, 0, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 715, 720, 0, 736, 0, 250, 251, 372, 232,
	380, 0, 0, 435, 393, 391, 0, 358, 415, 0,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 297, 0, 0, 509, 813, 803, 795, 796, 797,
	798, 799, 800, 0, 815, 816, 817, 818, 819, 502,
	809, 0, 794, 801, 802, 804, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 714, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	0, 716, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 719, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 0, 0,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 0, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 0, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 3931, 0, 366, 368, 369, 0, 0, 0, 732,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 0, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 0, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 0, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	0, 470, 471, 0, 473, 474, 735, 476, 477, 478,
	479, 480, 0, 610, 481, 0, 482, 0, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 0, 0, 811, 0, 0,
	0, 0, 0, 0, 513, 514, 0, 381, 375, 331,
	373, 374, 378, 379, 382, 207, 0, 224, 717, 0,
	273, 310, 0, 0, 0, 370, 0, 423, 427, 0,
	0, 0, 0, 0, 0, 281, 0, 722, 0, 728,
	0, 734, 0, 492, 0, 724, 725, 730, 212, 810,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 726, 723,
	727, 733, 721, 731, 718, 729, 0, 414, 348, 0,
	0, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 715,
	720, 0, 736, 0, 250, 251, 372, 232, 380, 0,
	0, 435, 393, 391, 0, 358, 415, 0, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	0, 0, 509, 813, 803, 795, 796, 797, 798, 799,
	800, 0, 815, 816, 817, 818, 819, 502, 809, 0,
	794, 801, 802, 804, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 714, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 0, 716,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 719, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 0, 0, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 0,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 0, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 0,
	0, 366, 368, 369, 0, 0, 0, 732, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	0, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 0, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	2414, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 0, 470,
	471, 0, 473, 474, 735, 476, 477, 478, 479, 480,
	0, 610, 481, 0, 482, 0, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 0, 0, 811, 0, 0, 0, 0,
	0, 0, 513, 514, 0, 381, 375, 331, 373, 374,
	378, 379, 382, 207, 0, 224, 717, 0, 273, 310,
	0, 0, 0, 370, 0, 423, 427, 0, 0, 0,
	0, 0, 0, 281, 0, 722, 0, 728, 0, 734,
	0, 492, 0, 724, 725, 730, 212, 810, 515, 586,
	0, 0, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 726, 723, 727, 733,
	721, 731, 718, 729, 0, 414, 348, 0, 0, 441,
	219, 265, 252, 294, 336, 448, 0, 0, 326, 496,
	261, 350, 0, 240, 383, 0, 472, 347, 0, 455,
	475, 0, 367, 246, 406, 462, 463, 715, 720, 0,
	736, 0, 250, 251, 372, 232, 380, 0, 0, 435,
	393, 391, 0, 358, 415, 0, 0, 0, 280, 0,
	275, 371, 511, 238, 490, 409, 376, 330, 438, 467,
	277, 262, 263, 306, 408, 296, 248, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 0, 0,
	509, 813, 803, 795, 796, 797, 798, 799, 800, 0,
	815, 816, 817, 818, 819, 502, 809, 0, 794, 801,
	802, 804, 0, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 208, 0, 209, 210, 211, 213, 214,
	215, 714, 216, 217, 218, 221, 222, 223, 225, 585,
	226, 227, 228, 229, 230, 231, 0, 716, 233, 234,
	235, 236, 237, 239, 241, 242, 243, 244, 245, 247,
	249, 0, 0, 0, 719, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 0, 259, 260, 264, 266, 267,
	268, 269, 270, 271, 274, 0, 276, 278, 0, 279,
	282, 0, 283, 284, 285, 286, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 295, 0, 298, 299, 300,
	301, 302, 0, 303, 0, 0, 304, 305, 307, 308,
	309, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 0, 323, 324, 325, 327, 0, 328,
	329, 332, 333, 334, 335, 0, 337, 0, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 345, 346,
	349, 0, 351, 352, 353, 354, 355, 356, 357, 587,
	359, 360, 361, 362, 363, 364, 365, 3477, 0, 366,
	368, 369, 0, 0, 0, 732, 384, 385, 386, 387,
	388, 389, 390, 392, 0, 394, 395, 396, 0, 397,
	398, 399, 400, 0, 401, 402, 403, 404, 405, 407,
	410, 411, 412, 413, 0, 416, 417, 418, 419, 420,
	421, 422, 424, 425, 426, 428, 429, 430, 588, 431,
	432, 433, 434, 0, 436, 437, 589, 439, 440, 442,
	443, 444, 445, 446, 447, 609, 0, 449, 0, 450,
	451, 452, 453, 454, 0, 456, 457, 458, 459, 460,
	461, 464, 465, 466, 468, 469, 0, 470, 471, 0,
	473, 474, 735, 476, 477, 478, 479, 480, 0, 610,
	481, 0, 482, 0, 483, 484, 485, 486, 487, 488,
	489, 491, 0, 0, 493, 494, 495, 497, 498, 499,
	500, 503, 504, 505, 506, 507, 0, 508, 510, 512,
	590, 0, 0, 811, 0, 0, 0, 0, 0, 0,
	513, 514, 0, 381, 375, 331, 373, 374, 378, 379,
	382, 207, 0, 224, 717, 0, 273, 310, 0, 0,
	0, 370, 0, 423, 427, 0, 0, 0, 0, 0,
	0, 281, 0, 722, 0, 728, 0, 734, 0, 492,
	0, 724, 725, 730, 212, 810, 515, 586, 0, 0,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 726, 723, 727, 733, 721, 731,
	718, 729, 0, 414, 348, 0, 0, 441, 219, 265,
	252, 294, 336, 448, 0, 0, 326, 496, 261, 350,
	0, 240, 383, 0, 472, 347, 0, 455, 475, 0,
	367, 246, 406, 462, 463, 715, 720, 0, 736, 0,
	250, 251, 372, 232, 380, 0, 0, 435, 393, 391,
	0, 358, 415, 0, 0, 0, 280, 0, 275, 371,
	511, 238, 490, 409, 376, 330, 438, 467, 277, 262,
	263, 306, 408, 296, 248, 501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 297, 0, 0, 509, 813,
	803, 795, 796, 797, 798, 799, 800, 0, 815, 816,
	817, 818, 819, 502, 809, 0, 794, 801, 802, 804,
	0, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 208, 0, 209, 210, 211, 213, 214, 215, 714,
	216, 217, 218, 221, 222, 223, 225, 585, 226, 227,
	228, 229, 230, 231, 0, 716, 233, 234, 235, 236,
	237, 239, 241, 242, 243, 244, 245, 247, 249, 0,
	0, 0, 719, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 0, 259, 260, 264, 266, 267, 268, 269,
	270, 271, 274, 0, 276, 278, 0, 279, 282, 0,
	283, 284, 285, 286, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 295, 0, 298, 299, 300, 301, 302,
	0, 303, 0, 0, 304, 305, 307, 308, 309, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 0, 323, 324, 325, 327, 0, 328, 329, 332,
	333, 334, 335, 0, 337, 0, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 345, 346, 349, 0,
	351, 352, 353, 354, 355, 356, 357, 587, 359, 360,
	361, 362, 363, 364, 365, 0, 0, 366, 368, 369,
	0, 0, 0, 732, 384, 385, 386, 387, 388, 389,
	390, 392, 0, 394, 395, 396, 0, 397, 398, 399,
	400, 0, 401, 402, 403, 404, 405, 407, 410, 411,
	412, 413, 0, 416, 417, 418, 419, 420, 421, 422,
	424, 425, 426, 428, 429, 430, 588, 431, 432, 433,
	434, 0, 436, 437, 589, 439, 440, 442, 443, 444,
	445, 446, 447, 609, 0, 449, 0, 450, 451, 452,
	453, 454, 0, 456, 457, 458, 459, 460, 461, 464,
	465, 466, 468, 469, 0, 470, 471, 0, 473, 474,
	735, 476, 477, 478, 479, 480, 0, 610, 481, 0,
	482, 0, 483, 484, 485, 486, 487, 488, 489, 491,
	0, 0, 493, 494, 495, 497, 498, 499, 500, 503,
	504, 505, 506, 507, 0, 508, 510, 512, 590, 0,
	0, 811, 0, 0, 0, 0, 0, 0, 513, 514,
	0, 381, 375, 331, 373, 374, 378, 379, 382, 207,
	0, 224, 717, 0, 273, 821, 0, 0, 0, 370,
	0, 423, 427, 0, 0, 0, 0, 0, 0, 281,
	0, 722, 0, 728, 0, 734, 0, 492, 0, 724,
	725, 730, 212, 810, 515, 586, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 726, 723, 727, 733, 721, 731, 718, 729,
	0, 414, 348, 0, 0, 441, 219, 265, 252, 294,
	336, 448, 0, 0, 326, 496, 261, 350, 0, 240,
	383, 0, 472, 347, 0, 455, 475, 0, 367, 246,
	406, 462, 463, 715, 720, 0, 736, 0, 250, 251,
	372, 232, 380, 0, 0, 435, 393, 391, 0, 358,
	415, 0, 0, 0, 280, 0, 275, 371, 511, 238,
	490, 409, 376, 330, 438, 467, 277, 262, 263, 306,
	408, 296, 248, 501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 0, 0, 509, 813, 803, 795,
	796, 797, 798, 799, 800, 0, 815, 816, 817, 818,
	819, 502, 809, 0, 794, 801, 802, 804, 0, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 208,
	0, 209, 210, 211, 213, 214, 215, 714, 216, 217,
	218, 221, 222, 223, 225, 585, 226, 227, 228, 229,
	230, 231, 0, 716, 233, 234, 235, 236, 237, 239,
	241, 242, 243, 244, 245, 247, 249, 0, 0, 0,
	719, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	0, 259, 260, 264, 266, 267, 268, 269, 270, 271,
	274, 0, 276, 278, 0, 279, 282, 0, 283, 284,
	285, 286, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 295, 0, 298, 299, 300, 301, 302, 0, 303,
	0, 0, 304, 305, 307, 308, 309, 311, 312, 313,
	314, 315, 316, 317, 318, 319, 320, 321, 322, 0,
	323, 324, 325, 327, 0, 328, 329, 332, 333, 334,
	335, 0, 337, 0, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 345, 346, 349, 0, 351, 352,
	353, 354, 355, 356, 357, 587, 359, 360, 361, 362,
	363, 364, 365, 0, 0, 366, 368, 369, 0, 0,
	0, 732, 384, 385, 386, 387, 388, 389, 390, 392,
	0, 394, 395, 396, 0, 397, 398, 399, 400, 0,
	401, 402, 403, 404, 405, 407, 410, 411, 412, 413,
	0, 416, 417, 418, 419, 420, 421, 422, 424, 425,
	426, 428, 429, 430, 588, 431, 432, 433, 434, 0,
	436, 437, 589, 439, 440, 442, 443, 444, 445, 446,
	447, 609, 0, 449, 0, 450, 451, 452, 453, 454,
	0, 456, 457, 458, 459, 460, 461, 464, 465, 466,
	468, 469, 0, 470, 471, 0, 473, 474, 735, 476,
	477, 478, 479, 480, 0, 610, 481, 0, 482, 0,
	483, 484, 485, 486, 487, 488, 489, 491, 0, 0,
	493, 494, 495, 497, 498, 499, 500, 503, 504, 505,
	506, 507, 0, 508, 510, 512, 590, 0, 0, 811,
	0, 0, 0, 0, 0, 0, 513, 514, 0, 381,
	375, 331, 373, 374, 378, 379, 382, 207, 0, 224,
	717, 0, 273, 785, 0, 0, 0, 370, 0, 423,
	427, 0, 0, 0, 0, 0, 0, 281, 0, 722,
	0, 728, 0, 734, 0, 492, 0, 724, 725, 730,
	212, 810, 515, 586, 0, 0, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	726, 723, 727, 733, 721, 731, 718, 729, 0, 414,
	348, 0, 0, 441, 219, 265, 252, 294, 336, 448,
	0, 0, 326, 496, 261, 350, 0, 240, 383, 0,
	472, 347, 0, 455, 475, 0, 367, 246, 406, 462,
	463, 715, 720, 0, 736, 0, 250, 251, 372, 232,
	380, 0, 0, 435, 393, 391, 0, 358, 415, 0,
	0, 0, 280, 0, 275, 371, 511, 238, 490, 409,
	376, 330, 438, 467, 277, 262, 263, 306, 408, 296,
	248, 501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 297, 0, 0, 509, 813, 803, 795, 796, 797,
	798, 799, 800, 0, 815, 816, 817, 818, 819, 502,
	809, 0, 794, 801, 802, 804, 0, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 208, 0, 209,
	210, 211, 213, 214, 215, 714, 216, 217, 218, 221,
	222, 223, 225, 585, 226, 227, 228, 229, 230, 231,
	0, 716, 233, 234, 235, 236, 237, 239, 241, 242,
	243, 244, 245, 247, 249, 0, 0, 0, 719, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 0, 259,
	260, 264, 266, 267, 268, 269, 270, 271, 274, 0,
	276, 278, 0, 279, 282, 0, 283, 284, 285, 286,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 295,
	0, 298, 299, 300, 301, 302, 0, 303, 0, 0,
	304, 305, 307, 308, 309, 311, 312, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 322, 0, 323, 324,
	325, 327, 0, 328, 329, 332, 333, 334, 335, 0,
	337, 0, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 345, 346, 349, 0, 351, 352, 353, 354,
	355, 356, 357, 587, 359, 360, 361, 362, 363, 364,
	365, 0, 0, 366, 368, 369, 0, 0, 0, 732,
	384, 385, 386, 387, 388, 389, 390, 392, 0, 394,
	395, 396, 0, 397, 398, 399, 400, 0, 401, 402,
	403, 404, 405, 407, 410, 411, 412, 413, 0, 416,
	417, 418, 419, 420, 421, 422, 424, 425, 426, 428,
	429, 430, 588, 431, 432, 433, 434, 0, 436, 437,
	589, 439, 440, 442, 443, 444, 445, 446, 447, 609,
	0, 449, 0, 450, 451, 452, 453, 454, 0, 456,
	457, 458, 459, 460, 461, 464, 465, 466, 468, 469,
	0, 470, 471, 0, 473, 474, 735, 476, 477, 478,
	479, 480, 0, 610, 481, 0, 482, 0, 483, 484,
	485, 486, 487, 488, 489, 491, 0, 0, 493, 494,
	495, 497, 498, 499, 500, 503, 504, 505, 506, 507,
	0, 508, 510, 512, 590, 0, 0, 811, 0, 0,
	0, 0, 0, 0, 513, 514, 0, 381, 375, 331,
	373, 374, 378, 379, 382, 207, 0, 224, 717, 0,
	273, 310, 0, 0, 0, 370, 0, 423, 427, 0,
	0, 0, 0, 0, 0, 281, 0, 722, 0, 728,
	0, 734, 0, 492, 0, 724, 725, 730, 212, 0,
	515, 586, 0, 0, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 726, 723,
	727, 733, 721, 731, 718, 729, 0, 414, 348, 0,
	0, 441, 219, 265, 252, 294, 336, 448, 0, 0,
	326, 496, 261, 350, 0, 240, 383, 0, 472, 347,
	0, 455, 475, 0, 367, 246, 406, 462, 463, 715,
	720, 0, 736, 0, 250, 251, 372, 232, 380, 0,
	0, 435, 393, 391, 0, 358, 415, 0, 0, 0,
	280, 0, 275, 371, 511, 238, 490, 409, 376, 330,
	438, 467, 277, 262, 263, 306, 408, 296, 248, 501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	0, 0, 509, 0, 0, 0, 0, 0, 0, 0,
	272, 0, 0, 0, 0, 0, 0, 502, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 208, 0, 209, 210, 211,
	213, 214, 215, 714, 216, 217, 218, 221, 222, 223,
	225, 585, 226, 227, 228, 229, 230, 231, 0, 716,
	233, 234, 235, 236, 237, 239, 241, 242, 243, 244,
	245, 247, 249, 0, 0, 0, 719, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 0, 259, 260, 264,
	266, 267, 268, 269, 270, 271, 274, 0, 276, 278,
	0, 279, 282, 0, 283, 284, 285, 286, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 295, 0, 298,
	299, 300, 301, 302, 0, 303, 0, 0, 304, 305,
	307, 308, 309, 311, 312, 313, 314, 315, 316, 317,
	318, 319, 320, 321, 322, 0, 323, 324, 325, 327,
	0, 328, 329, 332, 333, 334, 335, 0, 337, 0,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	345, 346, 349, 0, 351, 352, 353, 354, 355, 356,
	357, 587, 359, 360, 361, 362, 363, 364, 365, 0,
	0, 366, 368, 369, 0, 0, 0, 732, 384, 385,
	386, 387, 388, 389, 390, 392, 0, 394, 395, 396,
	0, 397, 398, 399, 400, 0, 401, 402, 403, 404,
	405, 407, 410, 411, 412, 413, 0, 416, 417, 418,
	419, 420, 421, 422, 424, 425, 426, 428, 429, 430,
	588, 431, 432, 433, 434, 0, 436, 437, 589, 439,
	440, 442, 443, 444, 445, 446, 447, 609, 0, 449,
	0, 450, 451, 452, 453, 454, 0, 456, 457, 458,
	459, 460, 461, 464, 465, 466, 468, 469, 0, 470,
	471, 0, 473, 474, 735, 476, 477, 478, 479, 480,
	0, 610, 481, 0, 482, 0, 483, 484, 485, 486,
	487, 488, 489, 491, 0, 0, 493, 494, 495, 497,
	498, 499, 500, 503, 504, 505, 506, 507, 0, 508,
	510, 512, 590, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 514, 0, 381, 375, 331, 373, 374,
	378, 379, 382,
}

var yyPact = [...]int32{
	1433, -1000, 87, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2445, 627, 6922, 10153, 10325, 2478, 68601,
	53927, -1000, 619, 622, 611, 2972, 48361, 79, 68095, 54939,
	521, 1433, 2611, 48361, 2719, 2610, 611, 54939, -1000, 1292,
	1623, 1330, 3016, 67589, 54939, 34213, 54939, 2462, 67083, 66577,
	1993, 66071, 1474, 2477, 1004, 54939, 54939, 1464, 65565, 54939,
	54939, 548, 1833, -1000, -1000, 1034, 1026, -1000, -1000, -1000,
	47855, 53421, 65059, 64553, 826, 1985, 42323, 54939, 54939, 54939,
	54939, 42323, 38274, 1520, 1791, 64047, 42323, 54939, 42323, 54939,
	54939, 54939, 54939, 54939, 993, 38274, 39287, 54939, 63541, 2458,
	54939, 54939, -1000, 63035, 62529, 62023, 74005, 73517, 3174, 1473,
	-1000, -1000, -1000, 825, 1949, -1000, -1000, -1000, 2444, 1446,
	990, -1000, 1519, -1000, -1000, -1000, -1000, -1000, -1000, 824,
	-1000, 61517, 52915, 1570, -1000, -1000, 597, 2870, 3252, 3252,
	2997, 41311, 667, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2863, 1535, 1879, 139, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1930, 2655, 619, -1000, -1000, 277, 276, 622,
	16230, 16230, -1000, 2606, -1000, 104, -1000, 114, 41817, -1000,
	-1000, -1000, 546, 77, 54939, -1000, 488, -1000, 77, 19837,
	-1000, 54939, 2416, 61011, 48361, 48361, 271, -1000, 292, 60505,
	54939, 814, 59999, 3173, 42323, 42323, 54939, 986, 42323, 2204,
	1376, -1000, 1272, 1877, -1000, 3059, 3183, 122, 513, 54939,
	54939, -1000, 131, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 785, 1274, 728,
	3056, 1060, 3055, 2094, 59493, 938, 3053, 2263, 805, 54939,
	1408, 2605, 54939, 488, 3051, -1000, 2274, 1840, 73029, 54939,
	-1000, -1000, -1000, -1000, 5886, 3155, 2937, 5020, 3153, 2936,
	9679, 3135, 10045, 3131, 52409, 51903, 2090, 1345, 541, -1000,
	114, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1344, 1343, 1342,
	1389, 1339, 541, 1335, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 54939, 54939, 54939, 2604, 3130, 1334, 1634,
	1333, 1332, 890, 1983, 2600, 2599, 54939, 1331, 1324, 2203,
	1590, 1586, 3126, 1260, 1679, 2070, 3125, 301, -1000, 3124,
	331, -1000, 2597, 3123, 314, 3120, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 134, -1000, -1000, -1000, -1000, -1000, 540,
	1923, 539, 539, 539, -1000, -1000, -1000, -1000, -1000, 210,
	206, -1000, -1000, 1916, 538, 1916, 1916, -1000, 1934, 1916,
	314, 3119, 58987, 2260, -1000, 2076, -1000, 1244, -1000, -1000,
	-1000, 3173, -1000, 1872, -1000, 3209, 39793, 297, 3252, -1000,
	1508, 1139, -1000, 1761, 2259, 26533, 26018, 54939, 470, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1818, -1000,
	1505, -1000, 1952, 2195, 2200, 1108, 2666, 1914, -1000, 19322,
	1692, 22927, 2278, 19837, -1000, 1930, -1000, -1000, 2609, 57,
	-1000, 12072, -1000, -1000, 19837, 19837, 19837, 19837, 19837, 1411,
	3019, -1000, -1000, -1000, -1000, 15714, -1000, -1000, 114, 523,
	275, -1000, -1000, 536, -1000, 535, 534, 114, -1000, -1000,
	-1000, -1000, -1000, -1000, 19837, 717, -1000, 532, 486, 531,
	-1000, 114, -1000, 11552, 19837, -1000, 54939, 19837, 54939, 77,
	3214, 54939, 52, 9384, 709, 3212, 40299, -1000, 54939, 2524,
	2523, 2840, 2709, 54939, 595, 3049, 292, 54939, 2081, 3048,
	58481, -1000, 530, 530, 1731, 54939, 528, 73029, 1517, 1147,
	-1000, 38274, 3169, 3118, 73029, -1000, 119, 13121, -1000, 13121,
	2965, 2521, 32623, -1000, 401, 54939, 54939, 54939, 54939, -1000,
	54939, 3116, -1000, -1000, -1000, 3115, 54939, 400, 3047, 849,
	3252, 3111, 37262, 3046, 57975, 2596, 1489, 38274, 54939, 949,
	2594, 3109, -1000, 45831, 513, 3252, 3210, 2199, 58, -1000,
	1054, -1000, 1396, 1395, 43824, 976, 880, 2294, 485, 2593,
	1243, 1058, 54939, 1727, 54939, 2275, 2839, 322, 1642, 1241,
	-1000, 527, 48361, 1072, 58, -1000, 2838, 1394, 54939, 1071,
	58, 2837, 2081, -1000, 1851, 73029, 640, -1000, 2651, -1000,
	640, 640, 2650, 1436, 1060, 1060, -1000, 54939, 58, 1088,
	54939, 10032, 3107, 2933, 10019, 3106, 54939, 2836, -1000, 267,
	114, 2834, 2833, 2828, 2347, -1000, 2371, 2958, 1176, 2292,
	2818, -1000, 2817, 1323, 2506, 2499, 54939, 54939, 2816, 2815,
	37768, 46337, 46337, 2813, 2812, 2811, 659, -1000, 2940, 2808,
	415, 3252, 1368, 1362, 1361, -1000, -1000, 513, 54939, 54939,
	1430, 2806, 2805, 37262, 2804, 322, 322, 2801, 1095, 54939,
	54939, 54939, 54939, 54939, 2049, 1976, 1975, -1000, 9588, -1000,
	-1000, 54939, 54939, -1000, -1000, -1000, 54939, 54939, -1000, 54939,
	54939, 73029, -1000, 73029, -1000, 145, 19837, -1000, 3219, -1000,
	-1000, -1000, -1000, 3219, -1000, 2814, 2790, 3219, -1000, 525,
	-1000, 3219, -1000, -1000, 1916, 1916, -1000, -1000, 73029, 301,
	3102, 37262, 3101, -1000, -1000, -1000, -1000, -1000, 54939, 3209,
	1008, -1000, -1000, 1708, -1000, -1000, 1249, -1000, -1000, -1000,
	-1000, 76, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3238, 3234, -1000, -1000, 76, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1144, 2670, -1000,
	693, -1000, 1125, -1000, -1000, 75, 9384, -1000, 24988, -1000,
	-1000, -1000, 1504, 9384, -1000, 22412, 22412, 1210, 54939, 73,
	-1000, 340, 1952, 2195, 2717, 54939, 16230, 73029, 54939, 2865,
	19837, 19837, 19837, 19837, 19837, 19837, 19837, 19837, 19837, 19837,
	19837, 19837, 19837, 19837, 19837, 19837, 2914, 19837, 2800, 3208,
	-1000, -1000, 2799, 505, 1131, 13121, -1000, -1000, 520, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 903, 903, 681, 1529, 1529, 387, 523,
	2959, 114, 9258, 72, 129, 521, 114, -1000, -1000, -1000,
	16746, 19837, 32623, 18806, 114, 2871, 9384, 1698, 2621, 14682,
	2717, 19837, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9160,
	-42, 258, 51, -1000, 2526, 49, 19837, -1000, 54939, 2865,
	19837, 19837, 19837, 19837, 2800, 3208, 2799, 505, 520, 2592,
	-1000, 2349, 36250, 2466, 54939, 466, -1000, 555, 54939, -1000,
	-1000, 2688, 29587, 29587, 2302, 2302, -1000, -1000, 48, -1000,
	44330, 54939, 2273, 3100, 2990, 519, -1000, 2081, 1705, 3099,
	2591, 3038, -1000, 10181, 45342, 10069, 1327, -1000, -1000, 2272,
	1896, 513, -1000, 43335, 1516, 54939, 54939, 746, -1000, -1000,
	-1000, -1000, -1000, -1000, 1341, 54939, -1000, 13121, -1000, 41,
	-1000, 554, 2193, 54939, -1000, 54939, 518, 513, 513, 513,
	513, 513, -1000, 54939, 1340, 54939, 1052, 44330, 2266, 3098,
	1694, -1000, -1000, 54939, 1175, -1000, -1000, 3097, 3207, 3033,
	292, 13121, 3257, -1000, 3204, 1821, 31611, 54939, 1059, 379,
	-1000, 48361, 2932, 189, 292, -1000, 104, -1000, 1360, 73029,
	3252, 6308, 54939, 54939, 54939, -1000, 54939, 54939, -1000, 3031,
	57469, -1000, 73029, 54939, -1000, 511, 2532, 685, 677, 2490,
	51397, 54939, 56963, 56457, 54939, 958, -1000, -1000, 1445, 54939,
	-1000, 13121, 54939, 47349, 1040, 1018, 54939, 1502, 46843, 54939,
	1498, -1000, 54939, 1238, -1000, -1000, 38274, -1000, 2428, 1497,
	13633, 5609, 54939, 54939, 54939, 9793, 54939, 54939, -1000, -1000,
	-1000, -1000, -1000, -1000, 640, -1000, -1000, -1000, 54939, 54939,
	640, 640, 7005, 54939, 54939, 9718, 58, 1087, 54939, 1066,
	58, 1084, 48361, 989, 54939, -1000, 54939, 54939, 54939, 54939,
	54939, -1000, 2924, 55951, 19837, 2918, -1000, 54939, -1000, 510,
	2916, 54939, 54939, 38274, 2789, 54939, 54939, 1597, 2589, 54939,
	54939, -1000, 71, 71, 71, 54939, 54939, 54939, -1000, -1000,
	-1000, 54939, -1000, 54939, -1000, 3003, 54939, 54939, -1000, 1321,
	1310, 2788, -1000, 1477, -1000, 38274, 38274, 1174, 54939, -1000,
	-1000, 54939, 630, 2408, 1308, 1306, 1287, 1284, 54939, 54939,
	3252, 3164, 3252, 2787, 54939, 54939, 42323, 509, 73029, 42323,
	33683, 42323, 42323, 2186, 73029, -1000, -1000, -1000, -1000, -1000,
	-1000, 301, -1000, 331, -1000, 3021, 2584, -1000, 314, -1000,
	31, 255, 254, 2858, 2848, 252, 19837, 246, -1000, -1000,
	314, -1000, 54939, 1170, 2185, 3004, 1708, -1000, -1000, 1178,
	1355, -1000, 27048, -1000, -1000, -1000, -1000, -1000, 2387, -1000,
	19837, 1504, 2706, -1000, 3241, 3241, 455, -1000, 15714, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1482, 70,
	-1000, 19837, 673, 311, -1000, -1000, -1000, -1000, 2672, 29587,
	-1000, -1000, -1000, -1000, 2803, -1000, 40, 40, 94, 94,
	94, -1000, 454, 454, 454, 454, 454, 454, 681, 1529,
	9000, 1419, 19837, 19837, 2781, 2785, 505, 1367, 19837, -1000,
	2336, -1000, -1000, -1000, 2715, -1000, -1000, 1422, 2092, -1000,
	-1000, -1000, -1000, 1999, 23957, 23957, -1000, -1000, -1000, 15714,
	503, -1000, -1000, -1000, -1000, 32623, -1000, 500, 19837, -1000,
	-1000, 2920, -1000, -1000, 19837, 34, -35, -1000, -1000, 30,
	244, 28, -1000, 1981, -1000, 19837, 628, 499, 498, -1000,
	242, 33, 19837, 19837, 19837, -1000, 9384, 3226, -1000, 2672,
	25, -1000, 19837, -1000, -1000, 494, -1000, 2474, -1000, 9384,
	2362, 2359, 1970, -1000, -1000, 20, -1000, -1000, -1000, -1000,
	2688, 40299, 19837, 18, -1000, 114, 2362, 21897, 44, 2809,
	49373, 49373, 32117, -1000, 29081, 49373, 49373, 49373, 391, 2714,
	492, 490, 114, -1000, 2864, 2420, -1000, 2420, 54939, -1000,
	241, 69, -1000, -1000, -1000, -1000, 54939, 350, 54939, 54939,
	3203, 322, 54939, 54939, 48361, 3096, 70101, 1456, 10069, -1000,
	3252, 41311, 2183, -1000, -1000, 2583, -1000, -1000, -1000, -1000,
	1195, 1616, -1000, 1507, 640, 640, 54939, -1000, 54939, 55445,
	-1000, 15, -1000, -1000, 793, 72053, 69613, -1000, 1415, -1000,
	-1000, -1000, 134, -1000, 74493, 1456, 2908, 2598, -1000, -1000,
	-1000, 2261, -1000, -1000, 1327, -1000, 240, -171, 2648, 14,
	-1000, -1000, -1000, 383, 54939, 1650, 292, 54939, 3169, 1255,
	1297, 1876, -1000, 1769, -1000, -1000, 13121, 14145, 946, -1000,
	236, 66, -1000, 73029, 3252, -1000, -1000, -1000, -1000, -1000,
	706, -1000, 54939, 41311, 41311, -1000, 1060, 634, 1052, -1000,
	54939, 1067, 54939, 235, 54939, 54939, 1798, 938, 54939, 2181,
	611, 3089, 2486, 1935, 2990, 2180, 3263, 1637, -1000, -1000,
	403, -1000, 114, -1000, 19837, 488, 3003, -1000, 46337, 292,
	1201, 189, 2681, 2681, 54939, 230, 2777, -1000, -1000, 2776,
	2775, 2257, 1953, 3083, -1000, 3029, 1085, 1080, 19837, 475,
	-1000, 1619, 723, 469, 465, 54939, 1296, 2406, -1000, 3081,
	3021, 3080, 3021, -1000, -1000, -1000, 50891, -1000, 13, -1000,
	115, -1000, -1000, -1000, -1000, 54939, 54939, 54939, 54939, -1000,
	1187, -1000, -1000, -1000, -1000, 1186, -1000, 1496, -1000, -1000,
	-1000, -1000, -1000, 1617, 1185, 12, -1000, -1000, 13121, 13121,
	13121, 3252, -1000, 58, -1000, 1043, 1676, -1000, -1000, 58,
	2774, 1675, -1000, -1000, -1000, -1000, -1000, -1000, 58, 2773,
	2081, -1000, 2772, 58, 1077, 54939, 54939, 7551, 54939, 54939,
	54939, 7103, 2771, 659, 1052, -1000, -1000, -1000, -1000, -1000,
	2765, -1000, 3021, 3075, 9384, -1000, 1074, 19837, -1000, -1000,
	-1000, -1000, 54939, 1283, 1630, 2764, 2491, 38274, 54939, -1000,
	-1000, -1000, -1000, -1000, -1000, 378, -1000, 378, 378, 2761,
	2760, 54939, -1000, -1000, -1000, -1000, 54939, -1000, -1000, -1000,
	-1000, -1000, 3219, 3219, 1094, 2759, 2758, 2757, 2756, -1000,
	2754, 2753, 3252, 3022, -1000, -1000, 41311, -1000, -1000, -1000,
	73029, -1000, -1000, -1000, 54939, 54939, 464, -1000, -1000, 73029,
	-1000, -1000, -1000, -1000, 54939, -1000, -1000, -1000, 569, -1000,
	-1000, 569, 7, -1000, -1000, 301, 54939, 37262, -1000, 1559,
	297, -1000, -1000, -1000, -1000, -1000, -1000, 2703, -1000, 1016,
	-1000, -1000, 18291, 65, -1000, 54939, -1000, 311, -1000, 431,
	-1000, 2413, 2620, 19837, 44, 19837, 19837, 1313, 974, 19837,
	23957, 23957, -1000, 19837, 775, -1000, -1000, -1000, -1000, 2712,
	-1000, -1000, 1421, 2092, 19837, -1000, -1000, 888, 878, -1000,
	-1000, -1000, -1000, 1098, -1000, 23957, 23957, 455, 1083, 0,
	-1000, 15714, 229, 17776, 64, -1000, 114, 9106, -1000, -1000,
	305, -1000, -1000, -1000, 1740, -1000, 19837, 8576, -1000, 40805,
	2686, 619, -1000, 226, 17261, -1000, 619, -13, -13, 19837,
	19837, 2620, -1000, 284, 9384, 611, -1000, -1000, 16230, 690,
	611, 1280, 54939, 114, 2362, -1000, 9384, 474, 54939, -1000,
	9384, 2258, 29587, 2549, 2544, 29587, 2517, 2534, 2534, 2534,
	-1000, -1000, -1000, 54939, 452, -1000, 49373, 49373, 49373, 49373,
	38780, 221, 2809, -1000, -1000, -1000, -1000, 2233, 451, 28575,
	19837, 114, 19837, 1060, -1000, -1000, -1000, 2498, -1000, 1571,
	44330, -1000, 1392, 44836, 350, 579, 611, -1000, -1, 2081,
	2490, 54939, 10069, 442, 2582, -1000, 134, -1000, -1000, 1884,
	19837, -1000, -1000, 63, -1000, 62, 929, 2906, 1610, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1875, 1110, -1000,
	69613, 19837, 19837, 72053, -1000, 72053, -1000, -1000, 106, 122,
	-1000, 54939, 1327, 54939, 2588, -1000, -1000, 2645, 69613, 69613,
	-1000, 3244, 14145, 440, 54939, 2990, 438, 38274, 3169, -1000,
	54939, -1000, -1000, 54939, 2004, -1000, 3019, 676, 436, 23957,
	54939, 2036, -1000, 1695, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 431, 3238, 3234, 73029, -1000, 54939, 2977, 219,
	61, -1000, -1000, 54939, -1000, -1000, -1000, -1000, -1000, 430,
	-1000, -1000, 122, -1000, -1000, -1000, 1571, 350, 382, 2073,
	849, 634, 37262, 3004, 54939, 2990, 54939, 1472, 54939, -1000,
	2747, 2450, -1000, 54939, 29587, 31611, 8530, 2579, -1000, -1000,
	2681, 50385, 2681, -1000, 425, -1000, 378, 2087, 3252, 54939,
	54939, -1000, 2465, -1000, -1000, -1000, 54939, 3074, 1843, -1000,
	49879, -1000, 2490, 8439, 54939, 1772, 54939, 54939, -1000, 54939,
	30093, -1000, -1000, 1922, 321, 322, 1661, 1566, 921, -1000,
	-1000, 1060, 1090, 1772, 54939, -1000, 54939, -1000, -1000, -1000,
	-1000, -1000, 13121, 14145, 13121, -1000, -1000, -1000, -1000, -1000,
	-1000, 1181, 54939, -1000, -1000, 13633, -1000, -1000, -1000, -1000,
	-1000, 54939, 54939, 54939, 1065, 2644, 54939, 1057, 2642, 54939,
	54939, 54939, 54939, -1000, 2746, 58, 1046, 1674, -1000, 2744,
	58, 1023, 54939, -1000, 54939, -1000, 54939, -1000, 8341, 1772,
	-1000, 2737, 2736, 1428, 1902, 54939, 3008, 422, 50, -1000,
	1271, -1000, -1000, -1000, 54939, 54939, -1000, 659, 630, 54939,
	54939, 54939, 54939, 54939, 3252, 1881, 3067, -1000, 3201, 2497,
	2495, -1000, 72541, 1515, 3021, -1000, -1000, -1000, -1000, -1000,
	1167, -1000, 1781, -1000, 1011, -1000, -8, -1000, 19837, -1000,
	-1000, 32623, -1000, -1000, 2614, 2641, 9384, 797, 1358, 19837,
	19837, 364, 764, 697, 1358, 19837, 19837, -1000, -1000, 1373,
	1526, 1523, 19837, 73029, 23957, 23957, 23957, 23957, 23957, 23957,
	23957, 23957, 23957, 23957, 23957, 23957, 355, 355, 19837, -1000,
	8271, -1000, -11, -1000, 19837, -1000, -1000, -1000, 9384, 19837,
	-1000, -1000, 69107, 19837, 218, -1000, 19837, -1000, 217, 215,
	19837, 214, 9384, 9384, 2614, -1000, 213, 57, 2312, 30093,
	2291, -1000, -1000, 2349, -1000, -1000, 19837, -1000, 54939, 2809,
	29587, 29587, 2835, 2542, 29587, -1000, -1000, -1000, -1000, 420,
	54939, -1000, -1000, -1000, -1000, 49373, -1000, 42323, 2138, 417,
	56, 8219, 8153, 402, 1060, 1965, -1000, 1392, 414, -1000,
	1646, 2486, -1000, 2640, -15, -1000, -1000, -1000, 3012, 2257,
	44330, 54939, 2253, 2996, 2990, -1000, 411, 2578, 1456, 74493,
	2905, -1000, 9384, 3252, 2153, 73029, 1560, -1000, -1000, -1000,
	9384, 9384, -1000, -1000, 920, 98, 1346, -1000, 24, 54939,
	69613, -1000, -18, -1000, 383, -1000, 2683, 1567, 3193, 54939,
	-1000, 1326, -1000, -1000, -1000, 3003, 3003, 19837, 1137, 292,
	3192, -1000, 2957, -1000, -1000, 2494, -1000, -1000, 54939, -1000,
	3252, -1000, 1340, 13121, 119, 1166, 2257, 44330, 2243, 54939,
	1681, -1000, 1164, -1000, 3191, 1032, -1000, 42323, -1000, -1000,
	1960, -1000, 2931, 2491, 38274, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 44, -1000, -1000, 31611, -1000, -1000, -1000, -1000,
	19837, -1000, 943, 1690, 2704, -1000, -1000, 2718, -1000, 54939,
	634, -1000, 48867, -1000, -1000, -1000, -19, -1000, 1118, -1000,
	1693, 1576, -1000, -21, 1772, -22, -25, -1000, 3011, 616,
	2973, 19837, 2903, 3161, 3159, -1000, -1000, 2036, 2886, 3190,
	630, -1000, -1000, -1000, -1000, 2036, -1000, 4532, 73029, 640,
	630, 3021, 3021, -1000, -1000, 327, -1000, -1000, -1000, -1000,
	2735, 2732, 54939, 38274, -1000, 54939, 38274, -1000, -1000, -1000,
	2731, 54939, 54939, 54939, 1055, 2639, 54939, 54939, 54939, -1000,
	-1000, 3021, -1000, 54939, 54939, -83, -1000, 3219, 3219, 73029,
	54, -1000, 3219, 3219, -1000, -1000, 605, 19837, 38274, 2728,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3021, -1000,
	3252, 3252, -1000, 73029, 54939, 54939, -47, 53, 54939, -1000,
	54939, -1000, -1000, -1000, 8106, 211, 719, 19837, 2967, 1358,
	1358, 19837, 19837, 19837, 1358, 1373, -1000, -1000, 1358, -1000,
	-34, -34, 89, 89, 89, -1000, 355, 355, 355, 355,
	355, 355, 1358, -1000, -1000, 7573, 9384, 1393, -1000, 7030,
	-1000, 619, -1000, -1000, -1000, 719, 2434, 2321, -48, -1000,
	54939, 1968, 9384, -1000, -1000, -1000, 2835, -1000, 406, 19837,
	29587, -1000, 54939, -50, -1000, -52, -1000, 3189, 2241, 28069,
	23442, 19837, -1000, -1000, 1938, 2435, -1000, 3063, 3063, 2418,
	-1000, 2276, 13121, 402, 3252, 2486, 54939, 1483, 1483, 2085,
	54939, -1000, 44836, 1769, 655, 1392, 207, 350, 54939, -1000,
	1041, 3188, 30093, 48361, -1000, -53, -1000, 72053, -1000, 1552,
	645, -1000, 917, -1000, -1000, -1000, 915, 2149, 846, 2697,
	-54, -1000, 204, 1117, 1107, 953, 54939, 611, -55, 3169,
	-1000, 2885, 2488, 2488, 6697, 1459, 423, -1000, 54939, -1000,
	-1000, -58, -1000, 54939, 1153, 200, 54939, 634, 1768, 54939,
	611, -1000, 54939, 399, 1472, 54939, 397, 3008, 50, 363,
	5742, 42323, 3185, 3185, 54939, 392, 386, 384, -1000, -1000,
	-1000, -1000, 1772, 1633, -1000, -1000, -1000, -1000, -1000, 1633,
	1261, 1633, 30093, 33153, -1000, 54939, 54939, -1000, 5490, -1000,
	3066, 3023, -1000, -1000, 375, -1000, 3186, 2977, -1000, -1000,
	-1000, -1000, 14145, 54939, 54939, 1418, 303, 1418, 274, 54939,
	-1000, -1000, 2727, 54939, 38274, -1000, -1000, 2726, -1000, 1772,
	-1000, -1000, 1428, 32623, 31105, -1000, 1902, 374, 366, 365,
	5185, -1000, 54939, -1000, -1000, -1000, 198, -1000, -1000, -1000,
	71565, 73029, -1000, -1000, -1000, -1000, -1000, 54939, 9384, 20867,
	-1000, -1000, 1358, 1358, 1358, -1000, 619, 2637, -1000, 195,
	-1000, 2421, 2431, 2397, -1000, 2672, 30093, -1000, 611, -1000,
	54939, 9384, -1000, -70, -1000, 391, 42323, -1000, 352, 54939,
	2636, 27563, 1992, -71, -1000, 323, 23957, 5073, 1984, -1000,
	-1000, 2338, 19837, 2326, -1000, 2354, -1000, -1000, -1000, 3183,
	3183, -1000, -1000, 3183, 3183, 2215, 3252, -72, -1000, 24472,
	2672, -1000, 2085, -73, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2570, 322, 672, 351,
	-1000, -1000, 2486, 1571, 1392, 350, 663, 592, 586, 611,
	-76, 2490, 74493, 10069, -1000, -1000, -1000, 82, -1000, -1000,
	73029, -1000, 2845, 1749, 846, -1000, 1563, -1000, -1000, -1000,
	54939, -1000, -1000, 3007, 3006, -1000, -1000, 54939, 847, -1000,
	2996, 2990, -1000, 1611, -1000, 1426, 2575, 1499, 308, 19837,
	1701, -1000, 13121, 634, 54939, 1571, 350, -1000, 2072, 634,
	3004, -1000, 177, 42323, -1000, 3256, -1000, 29587, -1000, 3185,
	-1000, 1732, -1000, -1000, 42829, 19837, 19837, 1769, 3003, 337,
	3003, 54939, 3003, -1000, -1000, 332, 2401, 322, -1000, 2973,
	-1000, -1000, 19837, 1640, 2489, -1000, -1000, -1000, -1000, -1000,
	1053, -1000, 1047, -1000, 54939, 1418, 259, 54939, -1000, 576,
	2133, -1000, 73029, -1000, 73029, 73029, 19837, -1000, -1000, -1000,
	171, 168, 164, 47, -1000, 3184, 46, -1000, 9384, -1000,
	-1000, -1000, -1000, 15198, 320, 315, 270, 1629, 19837, -1000,
	-1000, 54939, 2425, 2422, 40299, -1000, -1000, -1000, -84, -1000,
	-1000, -1000, 54939, -86, -1000, 71077, -1000, 1992, 2636, -1000,
	-1000, 23442, 45, 13121, 1137, 2209, 54939, 54939, 2341, 9384,
	2345, 2632, 3252, 3252, 3252, 3252, 35744, 2882, 35238, -1000,
	-1000, 13121, -1000, -1000, -1000, -1000, -1000, 36756, -1000, 2570,
	-1000, 1032, 1847, -1000, -1000, 30599, 1769, 2085, 1392, 2486,
	2257, -1000, 662, 646, 2996, 1631, 312, -1000, 1456, -1000,
	-1000, 1720, 310, 1112, -1000, -1000, 3183, -1000, -1000, 1790,
	-1000, 1689, 1686, -1000, -1000, -1000, 3182, 1044, -1000, 1575,
	-1000, 2577, 2576, 2375, -1000, -1000, -1000, -1000, 2081, 4957,
	3181, 54939, -1000, -1000, 634, 1148, 2257, 54939, -1000, -1000,
	-1000, 309, -87, -1000, 44, -1000, -1000, -1000, -88, -1000,
	3219, -89, -90, 2488, 54939, 2488, 292, 2488, 32623, 311,
	2401, -1000, 4912, 308, -1000, 19837, 54939, 54939, -1000, -1000,
	1039, -1000, 1299, 1070, 1299, -91, -1000, -94, -101, 4811,
	-1000, -1000, -1000, 54939, 306, 20867, -1000, 19837, 19837, 302,
	161, 21382, 21382, 21382, 29, 256, 2628, 2627, 283, 3179,
	-102, -1000, 54939, 2289, 2229, -1000, -1000, 27563, -1000, 2240,
	19837, -1000, -1000, -1000, -1000, 2305, 2393, -1000, -1000, 2296,
	694, 2339, -1000, -1000, -1000, -1000, 24, -1000, 34732, 24,
	-1000, -1000, -104, -1000, -1000, 1032, -1000, 1702, -105, -1000,
	616, 2973, 19837, 2570, 2486, 2085, 1392, -1000, -1000, -1000,
	3019, 300, 30093, -1000, 1472, 19837, -1000, -1000, -1000, 54939,
	1746, 42323, 42323, 611, 54939, -1000, -1000, 2370, -1000, 2385,
	1783, 1783, 1382, 1076, 1428, -1000, -1000, 54939, 1142, 634,
	155, -1000, 3249, -1000, 42829, -1000, -1000, 2725, -1000, -112,
	-1000, 1459, 2672, 150, -1000, 311, -1000, -1000, 9384, 1418,
	1418, 54939, -1000, -1000, -1000, 2623, -1000, 42323, 73029, -1000,
	-1000, -1000, -1000, -1000, -1000, -117, -120, 20867, -1000, 1729,
	-1000, 25503, 1492, 1234, 1648, 1729, 1729, 54939, 54939, 54939,
	-1000, -1000, 54939, -1000, -1000, 2289, -1000, 23957, 23957, 2881,
	-1000, 23957, -1000, 2138, 299, 27, -1000, 3177, -1000, 40299,
	-1000, -1000, 2349, 54939, 2464, 296, -1000, -1000, 24, -1000,
	-1000, 36756, -1000, -1000, 2222, 2216, -1000, 30599, 54939, 54939,
	4738, 1032, 2085, 2570, 2486, 2990, 30093, -122, 42323, 4621,
	-1000, -1000, 1233, -16, -69, 2996, -1000, -1000, 1900, -1000,
	-1000, 2926, -1000, -1000, -1000, -83, 634, 54939, -1000, -1000,
	-1000, -1000, 295, 1772, -1000, 1772, 2575, -1000, -1000, -1000,
	-1000, -1000, 1418, 54939, -1000, -1000, -1000, -1000, -124, -1000,
	1416, 3062, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2507,
	251, 238, -1000, -1000, 1137, 1137, -1000, 1137, 2238, 54433,
	19837, 13121, -160, 1962, -125, -1000, 19837, -1000, -1000, -1000,
	-1000, -1000, -1000, 2973, -1000, 2570, 1032, 2085, 1032, -132,
	-1000, 1631, 294, -1000, 2845, 2723, 2691, -1000, -1000, 292,
	292, -1000, 634, 19837, -1000, 1772, -1000, -1000, -1000, 1228,
	-1000, -1000, 700, 20352, 3094, 54939, 54939, 54939, 54939, -143,
	-1000, 70589, 2220, -1000, -1000, 2451, 2379, -146, 54939, 1032,
	-1000, 2570, 2672, -1000, 30093, 3019, 12609, 1710, 1105, 1092,
	-1000, -1000, -1000, -153, 1772, -1000, -1000, -1000, 2956, -1000,
	-1000, -1000, -159, 2394, 54433, 2227, 1069, 3247, -1000, -1000,
	-1000, 2349, -1000, -1000, -1000, 1032, -1000, -1000, 2990, -161,
	-1000, -1000, -1000, -1000, -1000, 1472, 2988, 2970, -1000, 3094,
	-1000, 149, 2569, 19837, -1000, -1000, -1000, -1000, -1000, -1000,
	2075, -1000, -1000, 2084, 2211, 2211, 3245, 2328, 1959, -1000,
	1032, -1000, 12609, 42323, 1684, 1683, 2483, -1000, 2118, 9384,
	-1000, -1000, 2013, 2137, 2166, 2084, 2394, -1000, 287, 54939,
	2451, 2672, -1000, 286, 42323, 42323, 54939, -1000, 2394, 2019,
	2010, -1000, 2056, -1000, 2040, 2128, 2083, 2013, -1000, 54433,
	2237, -1000, -1000, 12609, -1000, -1000, -1000, -1000, 2568, 2561,
	2560, -1000, -1000, 2037, -1000, 2029, -1000, 2394, -166, 281,
	-177, 2134, 2006, 2005, -1000, -1000, -1000, -1000, 54433, -1000,
	2394, -1000, 1996, 1987, -202, 2559, -1000, -1000, -1000, 2115,
	-1000,
}

var yyPgo = [...]int16{
	0, 3671, 3669, 2613, 142, 0, 12, 5750, 3665, 172,
	239, 287, 143, 398, 5828, 164, 291, 299, 3431, 2508,
	76, 117, 3662, 256, 3662, 3661, 294, 253, 241, 3660,
	190, 3659, 3658, 180, 185, 3657, 3656, 322, 45, 231,
	3655, 304, 316, 317, 320, 3654, 290, 305, 281, 280,
	3653, 7164, 357, 1048, 11, 3652, 3651, 3647, 3646, 3644,
	273, 3638, 232, 3635, 3634, 3633, 271, 3633, 187, 263,
	277, 3632, 424, 274, 405, 171, 347, 3777, 3631, 311,
	92, 176, 312, 3630, 3629, 3628, 3625, 3624, 3620, 3619,
	3618, 3617, 3616, 221, 233, 208, 245, 319, 93, 297,
	119, 1144, 3615, 3614, 168, 3613, 3612, 57, 53, 3611,
	3609, 3608, 55, 24, 33, 315, 302, 3607, 3606, 318,
	3605, 3604, 5751, 81, 279, 3603, 61, 3602, 278, 283,
	69, 41, 3601, 276, 275, 236, 46, 227, 3600, 50,
	177, 282, 3599, 3598, 3597, 3596, 79, 226, 90, 2882,
	330, 326, 3595, 3593, 3592, 3590, 3587, 162, 160, 3580,
	3576, 3574, 3569, 37, 39, 3565, 3557, 216, 220, 270,
	3556, 272, 179, 14, 38, 167, 141, 3555, 3554, 3553,
	3549, 25, 83, 20, 3548, 3547, 3546, 296, 3546, 3546,
	3546, 3546, 3545, 262, 3544, 3542, 3538, 150, 3537, 3521,
	3520, 56, 3520, 54, 73, 3519, 32, 230, 284, 3518,
	306, 42, 258, 2696, 218, 3517, 321, 303, 301, 86,
	225, 17, 195, 184, 238, 3516, 3515, 3512, 3512, 310,
	264, 219, 214, 170, 158, 3511, 327, 3510, 314, 3509,
	3508, 3507, 3504, 269, 87, 80, 3499, 198, 3498, 111,
	3497, 3496, 113, 267, 23, 51, 3495, 40, 125, 34,
	78, 3491, 74, 265, 1, 16, 10, 3485, 213, 3484,
	30, 3483, 6, 2, 3481, 3, 8, 5, 15, 3479,
	3473, 174, 3471, 115, 3467, 212, 173, 145, 3466, 138,
	3464, 60, 49, 130, 3460, 3459, 3456, 133, 62, 3454,
	108, 3453, 175, 247, 3451, 3448, 3445, 22, 43, 126,
	68, 63, 52, 21, 103, 67, 3444, 3442, 35, 98,
	3441, 186, 27, 36, 101, 235, 106, 3440, 28, 18,
	19, 266, 112, 295, 293, 3439, 31, 248, 308, 3437,
	3436, 307, 118, 298, 44, 194, 3434, 193, 3433, 104,
	3430, 91, 58, 188, 66, 59, 3429, 47, 192, 3429,
	102, 288, 3428, 254, 1309, 5433, 3427, 140, 249, 335,
	100, 3426, 202, 189, 3425, 7, 286, 116, 3424, 155,
	152, 135, 3423, 147, 3422, 3419, 3417, 3414, 3412, 3411,
	3410, 3407, 3406, 3405, 3404, 3403, 3401, 3399, 3398, 3397,
	3396, 3395, 3394, 3393, 3390, 3389, 3386, 3385, 3381, 3380,
	3379, 3378, 3377, 3376, 3372, 3371, 3369, 3368, 3365, 3363,
	3360, 3359, 3358, 3357, 3353, 3352, 215, 200, 3351, 3348,
	3347, 292, 289, 250, 255, 323, 210, 205, 110, 3344,
	3343, 134, 3342, 3339, 3337, 3335, 313, 3334, 324, 3333,
	3332, 3331, 3330, 169, 136, 3329, 85, 178, 309, 48,
	3327, 3326, 197, 251, 120, 114, 3324, 3323, 3322, 3321,
	3317, 181, 3316, 3312, 204, 65, 3311, 246, 211, 363,
	3309, 2117, 259, 3307, 3306, 3306, 3304, 64, 329, 3303,
	207, 206, 107, 257, 3301, 105, 3295, 3294, 260, 3293,
	3292, 72, 3291, 3288, 199, 252, 3286, 3285, 3283, 3282,
	3279, 3278, 4, 89, 26, 9, 3277, 3276, 29, 3275,
	3274, 285, 243, 3272, 3271, 3270, 82, 75, 3270, 3269,
	3268, 228, 13, 3245, 3245,
}

var yyR1 = [...]int16{
	0, 1, 2, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 17, 17, 329, 329, 364, 364, 364, 24,
	24, 25, 25, 26, 26, 27, 27, 38, 38, 38,
	5, 5, 5, 6, 6, 6, 6, 6, 8, 8,
	7, 12, 12, 13, 13, 365, 365, 23, 23, 15,
	15, 528, 528, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 14, 14, 16, 16, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 54, 54, 54,
	54, 54, 54, 74, 76, 75, 75, 75, 55, 55,
	69, 69, 73, 73, 72, 72, 72, 72, 70, 70,
	56, 244, 487, 487, 101, 101, 101, 101, 101, 101,
	101, 66, 66, 68, 68, 68, 57, 58, 58, 61,
	61, 60, 59, 59, 62, 62, 62, 65, 65, 99,
	99, 99, 63, 63, 64, 132, 132, 132, 125, 125,
	125, 125, 125, 125, 134, 134, 134, 134, 133, 133,
	133, 133, 133, 135, 135, 135, 135, 135, 98, 98,
	81, 82, 82, 82, 82, 82, 77, 77, 77, 79,
	80, 94, 94, 95, 95, 83, 83, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 90, 90,
	86, 86, 78, 78, 78, 78, 78, 78, 87, 88,
	91, 92, 89, 89, 89, 89, 96, 96, 96, 97,
	97, 85, 85, 122, 122, 124, 124, 126, 126, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 123, 123, 100, 100, 103, 103, 102, 102, 129,
	129, 128, 128, 146, 146, 147, 149, 149, 150, 150,
	148, 148, 148, 148, 148, 148, 148, 148, 115, 115,
	116, 116, 117, 117, 119, 120, 120, 120, 120, 118,
	118, 121, 121, 121, 151, 151, 151, 151, 215, 215,
	214, 214, 217, 217, 217, 217, 218, 218, 219, 219,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 367, 367, 368, 368, 368, 369, 369, 369, 230,
	230, 230, 230, 230, 230, 231, 231, 231, 231, 232,
	232, 233, 233, 234, 234, 234, 235, 235, 236, 236,
	238, 239, 239, 239, 240, 240, 240, 241, 241, 241,
	242, 242, 221, 221, 171, 171, 171, 192, 224, 224,
	223, 223, 223, 223, 225, 225, 226, 226, 227, 227,
	228, 228, 229, 229, 243, 243, 252, 252, 248, 248,
	249, 250, 250, 251, 251, 492, 246, 246, 245, 245,
	247, 258, 258, 260, 260, 259, 259, 259, 259, 261,
	261, 262, 262, 253, 253, 254, 254, 255, 255, 255,
	256, 256, 257, 257, 257, 257, 257, 263, 268, 267,
	267, 271, 271, 269, 269, 270, 273, 273, 274, 274,
	274, 274, 274, 274, 274, 274, 275, 275, 275, 275,
	272, 272, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 277, 277, 277, 277, 277, 278, 278, 279, 279,
	280, 280, 264, 264, 265, 265, 265, 265, 265, 265,
	266, 266, 152, 366, 366, 162, 162, 162, 162, 162,
	183, 183, 163, 163, 167, 153, 164, 164, 169, 169,
	168, 165, 165, 154, 237, 237, 155, 166, 166, 156,
	156, 186, 186, 187, 187, 193, 193, 193, 194, 194,
	195, 195, 197, 197, 198, 198, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 199, 199, 204, 205, 205, 205, 205, 205, 205,
	200, 200, 206, 211, 211, 211, 211, 207, 207, 207,
	207, 33, 33, 341, 341, 341, 341, 341, 341, 341,
	341, 340, 340, 340, 339, 339, 339, 339, 339, 210,
	210, 448, 448, 209, 209, 529, 529, 475, 475, 188,
	188, 189, 189, 190, 190, 191, 191, 175, 175, 175,
	175, 175, 184, 184, 185, 185, 176, 176, 178, 179,
	180, 180, 180, 180, 180, 173, 170, 170, 170, 177,
	177, 177, 202, 202, 203, 203, 181, 181, 181, 182,
	182, 174, 174, 130, 130, 130, 131, 131, 131, 172,
	172, 157, 157, 157, 157, 157, 157, 343, 343, 343,
	343, 343, 343, 343, 343, 281, 281, 282, 282, 285,
	285, 285, 288, 296, 296, 296, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 345, 345, 346, 346,
	347, 347, 348, 348, 283, 283, 284, 284, 289, 289,
	290, 290, 291, 291, 291, 291, 292, 295, 295, 349,
	349, 350, 350, 351, 10, 32, 286, 300, 300, 301,
	301, 301, 301, 304, 304, 304, 304, 307, 307, 307,
	353, 353, 356, 356, 358, 358, 358, 358, 354, 354,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 530, 530, 28, 28,
	28, 352, 352, 355, 355, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 287, 287, 303, 303, 303, 303,
	303, 303, 303, 305, 305, 294, 294, 293, 293, 309,
	309, 308, 308, 308, 308, 313, 313, 313, 313, 313,
	310, 311, 312, 312, 312, 312, 312, 314, 314, 315,
	315, 316, 317, 317, 318, 318, 318, 344, 344, 322,
	322, 322, 322, 323, 323, 324, 324, 325, 158, 158,
	306, 306, 326, 326, 328, 328, 327, 327, 330, 330,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 331, 331, 336, 336, 332, 332, 11, 479, 479,
	479, 479, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 334, 334, 334, 335, 337, 337, 531,
	531, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 382, 382, 382, 481, 481, 481, 484,
	484, 484, 484, 483, 483, 485, 485, 383, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 37, 375, 377, 71, 71, 71, 71, 376, 67,
	67, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 298, 298, 299, 299,
	299, 299, 299, 299, 319, 320, 320, 321, 321, 321,
	321, 378, 378, 378, 378, 488, 488, 489, 489, 490,
	490, 490, 491, 491, 491, 491, 491, 493, 493, 493,
	493, 493, 494, 93, 93, 93, 495, 495, 496, 496,
	498, 498, 498, 498, 498, 500, 500, 497, 497, 501,
	501, 501, 381, 519, 519, 502, 502, 499, 499, 499,
	499, 499, 499, 499, 499, 499, 499, 499, 499, 499,
	499, 499, 499, 499, 486, 486, 379, 379, 503, 503,
	503, 505, 505, 504, 504, 504, 504, 504, 510, 510,
	511, 511, 513, 508, 508, 509, 509, 516, 506, 506,
	533, 533, 507, 507, 514, 514, 532, 532, 512, 512,
	512, 515, 515, 515, 515, 517, 517, 380, 380, 380,
	380, 201, 201, 518, 518, 518, 518, 386, 386, 386,
	386, 387, 388, 388, 388, 388, 388, 388, 388, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 391, 391, 426, 426, 534,
	534, 392, 392, 393, 393, 427, 427, 429, 429, 429,
	429, 394, 428, 428, 430, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 443, 443,
	416, 417, 417, 433, 433, 433, 433, 432, 432, 431,
	431, 438, 438, 418, 418, 419, 419, 419, 434, 434,
	435, 435, 436, 436, 420, 420, 420, 420, 421, 421,
	422, 423, 423, 437, 437, 470, 470, 470, 470, 471,
	471, 478, 472, 473, 473, 474, 390, 390, 390, 390,
	390, 424, 424, 425, 425, 476, 476, 477, 477, 384,
	384, 385, 371, 371, 372, 370, 370, 370, 373, 373,
	374, 374, 374, 374, 482, 482, 482, 482, 482, 482,
	482, 482, 482, 482, 482, 480, 480, 480, 480, 213,
	213, 216, 216, 208, 208, 520, 520, 520, 520, 520,
	520, 520, 520, 520, 523, 523, 523, 212, 212, 9,
	9, 9, 9, 525, 525, 521, 521, 521, 522, 522,
	522, 522, 522, 524, 524, 524, 524, 342, 342, 342,
	342, 342, 342, 360, 360, 29, 29, 30, 31, 31,
	34, 34, 34, 34, 35, 35, 36, 36, 36, 36,
	361, 362, 362, 363, 363, 396, 396, 397, 442, 442,
	442, 442, 439, 439, 441, 440, 440, 398, 444, 444,
	399, 399, 400, 401, 445, 445, 449, 449, 450, 450,
	450, 450, 450, 451, 451, 452, 452, 453, 453, 454,
	454, 402, 455, 455, 403, 403, 404, 404, 457, 457,
	462, 462, 462, 405, 405, 405, 406, 406, 406, 406,
	458, 458, 463, 463, 463, 463, 463, 463, 463, 222,
	222, 407, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 409, 409, 409, 456, 456, 456, 410, 466, 466,
	459, 459, 464, 464, 464, 464, 464, 446, 446, 526,
	526, 526, 527, 527, 411, 412, 412, 460, 460, 465,
	465, 413, 414, 461, 461, 461, 461, 415, 415, 447,
	447, 467, 467, 468, 468, 469, 469, 40, 40, 40,
	39, 39, 136, 136, 139, 139, 139, 139, 139, 142,
	143, 144, 145, 140, 140, 137, 138, 138, 141, 141,
	104, 104, 105, 105, 107, 109, 109, 109, 108, 110,
	110, 106, 106, 111, 111, 111, 111, 112, 112, 113,
	113, 113, 113, 113, 114, 114, 114, 114, 114, 42,
	42, 42, 42, 41, 41, 43, 43, 43, 43, 43,
	43, 44, 44, 45, 45, 46, 47, 47, 47, 48,
	48, 49, 49, 50, 50,
}

var yyR2 = [...]int8{
	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 2,
	0, 3, 0, 2, 0, 1, 0, 2, 2, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 3, 1, 2, 3, 0, 1,
	3, 1, 0, 3, 3, 4, 4, 4, 4, 3,
	2, 1, 1, 2, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 5, 3, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	3, 3, 2, 2, 3, 5, 4, 6, 3, 5,
	4, 6, 4, 6, 5, 7, 3, 2, 4, 2,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 3, 4, 4, 6, 3, 3, 4,
	3, 4, 4, 5, 4, 5, 1, 1, 3, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 2, 4, 1, 1, 1,
	2, 2, 2, 2, 1, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 2,
	1, 2, 1, 0, 2, 2, 3, 5, 0, 2,
	4, 1, 1, 2, 3, 4, 5, 6, 8, 6,
	6, 1, 3, 1, 3, 3, 5, 1, 0, 1,
	2, 4, 2, 0, 3, 3, 2, 1, 3, 4,
	3, 5, 4, 3, 5, 1, 1, 1, 1, 4,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 3, 2, 3, 2, 0, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 3, 3, 0, 2, 3, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 2, 2, 1, 3, 3, 2, 4, 1,
	5, 2, 5, 2, 5, 2, 3, 3, 0, 1,
	0, 3, 0, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 0, 5, 0, 5, 0, 0,
	1, 1, 3, 1, 1, 1, 3, 3, 1, 1,
	1, 2, 4, 4, 2, 3, 5, 5, 1, 3,
	1, 0, 1, 2, 3, 2, 4, 2, 3, 2,
	0, 1, 2, 0, 9, 9, 2, 1, 1, 0,
	1, 3, 3, 2, 1, 1, 2, 0, 1, 3,
	2, 2, 3, 1, 4, 2, 3, 2, 3, 2,
	3, 1, 1, 2, 2, 4, 1, 2, 3, 3,
	4, 5, 4, 5, 4, 2, 2, 2, 1, 1,
	0, 5, 2, 2, 2, 3, 1, 0, 1, 3,
	9, 1, 2, 0, 7, 7, 0, 10, 6, 0,
	4, 5, 2, 0, 2, 4, 0, 1, 1, 0,
	5, 2, 4, 1, 2, 0, 1, 0, 1, 5,
	1, 0, 2, 0, 2, 6, 2, 0, 1, 3,
	2, 4, 0, 1, 3, 2, 1, 0, 1, 3,
	3, 2, 0, 2, 2, 2, 3, 3, 4, 1,
	3, 3, 2, 7, 12, 1, 3, 2, 3, 3,
	1, 2, 2, 2, 2, 1, 2, 13, 2, 2,
	0, 2, 0, 1, 3, 3, 2, 1, 1, 1,
	1, 1, 1, 2, 2, 1, 3, 3, 6, 0,
	3, 0, 2, 3, 2, 3, 4, 4, 3, 3,
	0, 5, 2, 5, 2, 0, 4, 2, 1, 0,
	1, 0, 1, 3, 3, 6, 7, 5, 7, 9,
	2, 0, 7, 1, 3, 1, 4, 4, 7, 2,
	1, 1, 1, 3, 2, 8, 1, 3, 3, 5,
	2, 1, 3, 7, 2, 0, 10, 1, 2, 9,
	11, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	3, 0, 1, 3, 2, 0, 1, 1, 3, 3,
	1, 1, 3, 3, 3, 3, 4, 4, 3, 3,
	2, 1, 3, 2, 1, 1, 1, 1, 3, 0,
	1, 3, 1, 1, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 2, 2, 1, 3, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 0, 2, 0, 1, 0, 1, 0, 1,
	0, 1, 0, 1, 0, 1, 0, 4, 4, 4,
	5, 5, 2, 5, 3, 5, 2, 0, 3, 1,
	2, 5, 5, 8, 3, 4, 8, 5, 0, 4,
	3, 0, 1, 3, 1, 3, 2, 2, 4, 4,
	5, 2, 0, 1, 1, 0, 2, 2, 0, 2,
	0, 13, 16, 12, 15, 14, 17, 1, 1, 2,
	2, 2, 2, 1, 0, 1, 0, 1, 3, 1,
	1, 1, 3, 3, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 0,
	2, 2, 1, 0, 3, 0, 1, 3, 1, 1,
	2, 4, 6, 6, 10, 1, 2, 1, 3, 4,
	0, 1, 3, 2, 1, 1, 6, 2, 0, 3,
	1, 1, 2, 1, 2, 2, 2, 2, 3, 0,
	1, 2, 1, 2, 1, 3, 2, 3, 1, 2,
	2, 2, 1, 2, 3, 1, 2, 2, 2, 2,
	3, 3, 3, 1, 3, 1, 1, 0, 1, 1,
	0, 1, 0, 3, 0, 2, 1, 4, 4, 5,
	2, 5, 5, 7, 3, 1, 5, 9, 3, 9,
	4, 11, 10, 2, 0, 1, 3, 3, 6, 4,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 3, 3, 4, 0, 1,
	0, 6, 1, 3, 3, 3, 5, 2, 0, 3,
	4, 4, 0, 2, 0, 4, 0, 3, 16, 19,
	1, 0, 2, 0, 4, 0, 1, 3, 2, 0,
	4, 6, 4, 6, 4, 4, 6, 4, 6, 5,
	7, 5, 7, 4, 6, 10, 13, 10, 13, 11,
	14, 1, 3, 1, 0, 1, 3, 1, 1, 1,
	1, 1, 2, 5, 3, 6, 4, 6, 6, 9,
	5, 7, 6, 6, 5, 5, 5, 5, 9, 4,
	5, 7, 6, 4, 8, 4, 2, 4, 3, 6,
	4, 3, 3, 3, 2, 2, 3, 4, 4, 3,
	3, 3, 3, 3, 3, 4, 4, 3, 2, 3,
	2, 2, 3, 4, 3, 2, 2, 3, 4, 4,
	4, 5, 1, 4, 4, 4, 3, 3, 2, 1,
	0, 6, 4, 6, 4, 6, 8, 4, 6, 4,
	6, 5, 7, 2, 3, 3, 2, 5, 1, 1,
	2, 3, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 2, 1, 2, 1, 1, 1, 3, 3, 3,
	3, 2, 2, 2, 3, 5, 5, 5, 2, 1,
	3, 6, 6, 6, 6, 6, 8, 8, 6, 6,
	7, 9, 9, 8, 10, 6, 6, 6, 6, 6,
	6, 6, 8, 6, 8, 6, 8, 7, 9, 6,
	8, 7, 9, 8, 10, 8, 10, 9, 11, 8,
	10, 9, 11, 8, 8, 7, 6, 6, 6, 6,
	8, 8, 8, 8, 6, 9, 0, 2, 2, 1,
	2, 2, 2, 2, 3, 1, 3, 3, 1, 5,
	3, 9, 12, 7, 7, 3, 2, 1, 3, 1,
	3, 3, 3, 3, 2, 2, 1, 1, 1, 1,
	2, 1, 1, 1, 4, 5, 1, 0, 1, 2,
	2, 2, 2, 1, 1, 1, 3, 3, 5, 1,
	4, 0, 2, 3, 0, 1, 1, 4, 5, 1,
	1, 1, 1, 3, 3, 2, 2, 1, 2, 2,
	2, 2, 1, 2, 2, 1, 17, 21, 1, 1,
	2, 1, 3, 1, 1, 1, 3, 1, 2, 0,
	1, 2, 4, 1, 1, 1, 1, 1, 3, 0,
	1, 0, 1, 1, 4, 0, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 2, 0, 9, 11, 12,
	14, 3, 0, 3, 4, 4, 0, 6, 4, 9,
	7, 6, 4, 6, 6, 5, 7, 9, 6, 6,
	5, 4, 4, 3, 6, 6, 6, 6, 4, 7,
	5, 8, 7, 8, 6, 5, 8, 1, 0, 1,
	0, 4, 6, 5, 8, 2, 0, 2, 2, 2,
	1, 5, 2, 0, 2, 6, 6, 6, 10, 6,
	6, 6, 9, 9, 6, 6, 9, 6, 1, 1,
	7, 7, 6, 2, 2, 2, 2, 1, 2, 1,
	0, 1, 2, 10, 13, 5, 4, 4, 2, 0,
	2, 2, 1, 0, 11, 14, 12, 15, 8, 11,
	8, 7, 9, 1, 1, 3, 3, 5, 6, 1,
	3, 1, 3, 1, 3, 3, 7, 9, 9, 8,
	6, 1, 0, 1, 3, 3, 1, 5, 3, 8,
	11, 6, 1, 0, 5, 2, 3, 0, 2, 0,
	1, 1, 1, 1, 1, 3, 3, 2, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 3, 2,
	2, 1, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 2, 0, 2, 0, 4, 1, 3,
	1, 2, 2, 2, 1, 1, 1, 1, 1, 3,
	3, 1, 3, 1, 3, 11, 13, 5, 1, 2,
	2, 1, 1, 3, 5, 1, 3, 7, 2, 0,
	5, 5, 10, 8, 2, 0, 2, 0, 1, 1,
	1, 1, 1, 2, 0, 2, 0, 4, 0, 5,
	0, 8, 1, 1, 8, 11, 6, 8, 1, 3,
	1, 1, 3, 4, 7, 6, 5, 5, 5, 5,
	1, 3, 4, 4, 4, 3, 4, 3, 1, 4,
	0, 8, 5, 5, 6, 7, 7, 7, 4, 4,
	5, 11, 10, 10, 2, 2, 0, 13, 2, 0,
	1, 3, 5, 5, 3, 6, 2, 1, 0, 2,
	4, 0, 1, 3, 6, 8, 8, 1, 3, 5,
	5, 10, 10, 11, 11, 5, 5, 6, 10, 1,
	0, 2, 0, 1, 0, 2, 2, 1, 1, 0,
	4, 0, 1, 3, 1, 1, 1, 1, 1, 2,
	4, 4, 5, 2, 0, 3, 1, 3, 4, 3,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 3, 3, 3, 0, 1, 4, 2,
	2, 2, 2, 2, 3, 2, 2, 3, 0, 2,
	2, 1, 1, 1, 0, 2, 4, 5, 6, 4,
	5, 2, 3, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -146, -152, -153, -154, -155,
	-156, -157, -158, -159, -160, -161, -378, -379, -380, -384,
	-385, -386, -387, -388, -389, -390, -391, -392, -393, -394,
	-395, -416, -417, -418, -419, -420, -421, -422, -423, -396,
	-397, -398, -399, -400, -401, -402, -403, -404, -405, -406,
	-407, -408, -409, -410, -411, -412, -413, -414, -415, -382,
	-383, -148, -149, -235, 112, 26, 22, 27, 395, 94,
	402, -151, -150, -234, 532, 63, 67, -242, 36, 519,
	87, 541, 97, 98, 99, 100, 532, -194, 116, -343,
	-306, -26, 33, 415, 262, 62, 465, 455, 226, 277,
	285, 423, 104, -371, 269, 450, 376, 195, 439, 388,
	444, 513, -446, 454, 452, 58, 290, 474, 472, 40,
	67, 308, 420, 481, 85, 285, 200, 226, 237, 248,
	262, 287, 71, -448, 62, 376, 386, 388, 410, 415,
	423, 444, 413, 461, 269, 407, 104, 450, 439, 455,
	465, 277, 385, -338, -341, -340, 465, 262, 308, 104,
	67, 420, 481, 85, 285, 226, 237, 439, 455, 195,
	269, 277, -448, 388, 415, 423, 376, 413, 461, 85,
	-481, 58, 424, 458, -482, -480, -213, 56, 218, 415,
	348, 407, 489, -5, 4, -18, -19, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 201, 22, 202, 204,
	205, 206, 55, 207, 208, 209, 211, 212, 213, 89,
	70, 214, 215, 216, 24, 217, 219, 220, 221, 222,
	223, 224, 124, 227, 228, 229, 230, 231, 142, 232,
	102, 233, 234, 235, 236, 237, 112, 238, 155, 239,
	121, 122, 91, 247, 248, 249, 250, 251, 252, 254,
	255, 99, 150, 151, 256, 90, 257, 258, 259, 260,
	261, 262, 177, 27, 263, 139, 265, 149, 266, 268,
	137, 42, 269, 271, 272, 273, 274, 275, 276, 277,
	278, 280, 282, 283, 92, 284, 154, 166, 286, 287,
	288, 289, 290, 292, 295, 296, 152, 297, 298, 299,
	28, 300, 301, 302, 303, 304, 305, 306, 307, 308,
	309, 310, 311, 313, 314, 315, 97, 316, 318, 319,
	146, 504, 320, 321, 322, 323, 93, 325, 328, 329,
	330, 333, 334, 335, 336, 337, 338, 106, 85, 339,
	100, 341, 342, 343, 344, 345, 346, 347, 132, 349,
	350, 351, 352, 353, 354, 355, 358, 111, 359, 360,
	32, 140, 123, 505, 506, 503, 145, 62, 507, 508,
	125, 502, 509, 103, 365, 366, 367, 368, 369, 370,
	371, 130, 372, 129, 374, 375, 376, 378, 379, 380,
	381, 383, 384, 385, 386, 387, 113, 388, 153, 144,
	389, 390, 391, 392, 84, 133, 394, 395, 396, 397,
	398, 399, 400, 34, 401, 402, 403, 35, 404, 405,
	406, 408, 409, 410, 411, 128, 413, 414, 147, 416,
	417, 88, 418, 419, 420, 421, 422, 423, 94, 426,
	428, 429, 430, 431, 432, 108, 434, 435, 436, 437,
	438, 439, 114, 115, 440, 441, 442, 148, 443, 444,
	446, 447, 105, 449, 450, 109, 452, 453, 454, 455,
	456, 459, 461, 463, 464, 465, 466, 467, 468, 469,
	143, 470, 50, 473, 474, 475, 98, 476, 477, 478,
	479, 156, 184, 480, 481, 482, 483, 484, 486, 169,
	487, 141, 488, 499, 500, 57, 37, 174, 170, 190,
	180, 179, 225, 189, 188, 29, 279, 176, 293, 294,
	501, 187, 172, 186, 167, 161, 163, 164, 160, 162,
	157, 165, 159, 127, 158, 326, 340, 182, 183, 356,
	357, 361, 171, 362, 363, 377, 178, 175, 412, 427,
	173, 445, 185, 460, 462, 87, 181, 490, 491, 492,
	493, 494, 134, 495, 496, 497, 498, 126, -484, -483,
	56, 458, 424, -213, 21, 218, 58, 348, 407, 415,
	489, -137, -100, 510, -150, -151, -149, -148, -149, -234,
	-226, -227, 21, 41, -367, -365, -368, -5, 66, 424,
	458, 56, 542, -236, 84, -238, -7, -5, -236, 532,
	-3, 73, -369, -367, 64, 73, -147, -146, -365, 67,
	481, 84, 420, 308, 287, 386, 461, 118, 200, 459,
	-447, 464, 34, -17, -5, 28, -14, -5, -123, 222,
	280, -126, -5, 11, -127, 535, 536, 537, 538, 539,
	540, 526, 527, 528, 18, 19, 20, -14, 88, -14,
	28, -7, 28, 247, 67, -7, 28, 337, 85, 461,
	-7, -7, 341, -329, 28, -14, -7, -7, 532, 237,
	454, 452, 454, 452, -367, 28, 21, -365, 28, 21,
	-365, 28, -365, 28, 481, 67, 247, -376, -487, -77,
	-5, 4, -18, -20, 210, 116, 226, 25, 81, 243,
	117, 79, 44, 76, 52, 53, 75, 77, 46, 82,
	54, 80, 364, 78, 48, 451, 119, -14, -14, -7,
	-14, -375, -487, -11, -479, -9, 242, 246, 425, 4,
	-18, -19, -20, 322, 222, 280, -7, 28, -375, -7,
	-375, -7, -7, -7, -7, -7, 461, -11, -11, 337,
	-7, -14, 28, 88, -14, -7, 28, -16, -14, 28,
	-12, -7, -7, 28, -210, 28, -81, -82, -83, -84,
	-90, -86, -89, -77, 187, 172, 173, 174, 175, 176,
	177, 188, 189, 171, 190, -91, -92, -87, -88, 185,
	56, 4, -18, 170, -78, 179, 180, 181, 182, 183,
	-210, 28, 25, 337, 481, 247, 67, 88, 341, 461,
	322, 481, -481, 424, -481, 220, 210, -521, 432, -522,
	319, 390, 253, 31, 64, 61, 528, 534, 57, -76,
	7, -76, -523, -76, 40, -212, -9, -76, 507, 57,
	319, 210, -115, -42, -117, 131, -43, -44, -119, 68,
	281, 69, -120, 70, -137, -100, 533, 533, -215, -214,
	-217, -51, 537, -53, 535, 536, -122, 31, 517, -99,
	472, 40, -55, -54, 13, 532, -57, -56, -149, 29,
	135, -63, -64, 294, 11, 62, 412, -5, -74, 6,
	-76, 49, 43, 47, 38, -101, 12, -487, -214, 74,
	537, -69, -72, 534, 530, -365, 532, 532, 542, -236,
	-23, 532, -98, -51, -366, -365, 94, -5, 23, -369,
	-369, 533, -201, 532, -365, 28, -365, 481, -365, 28,
	-27, 25, -487, -487, -7, 461, -487, 131, -448, -343,
	474, 210, -373, 31, -475, 23, -94, 534, -361, 532,
	-14, -14, 534, -361, 23, 369, 258, 453, 232, -361,
	64, 31, -28, 36, 519, 31, 141, -365, 28, -434,
	465, 31, 131, 28, 481, -7, -444, 366, 74, -7,
	-23, 31, -360, 131, 36, 233, -81, -14, -331, -334,
	399, -333, 208, 257, 197, 22, 27, 478, 94, 224,
	265, 259, 310, 355, 123, 31, 366, 402, 401, 154,
	-30, 508, 29, 45, -331, -335, 399, 208, 29, 45,
	-331, 399, -354, -357, 355, 23, 214, 91, 306, 336,
	339, 343, 365, 420, 437, 403, 474, 29, -331, 399,
	29, -365, 28, 21, -367, 28, 141, 399, -37, 532,
	-69, 399, 399, 399, 399, -337, 27, 94, 197, 478,
	399, -37, 399, -7, -14, -14, 74, 29, 399, 399,
	94, 197, 27, 399, 399, 399, -435, -30, 480, 399,
	94, 233, 395, 197, 27, 265, 259, 431, 74, 74,
	-7, 399, 399, 131, 399, 94, 402, 399, 94, 29,
	369, 258, 453, 232, 399, 197, 27, 98, -443, 197,
	27, 29, 542, -364, 24, 35, 29, 542, -364, 74,
	29, 542, -364, 29, -95, -94, 532, -85, 532, 178,
	-95, -95, -95, 532, -96, 519, 520, 532, -96, -97,
	184, 532, -97, -97, 179, 180, -97, -364, 29, -16,
	28, 131, 28, 141, 369, 258, 453, 232, -27, 220,
	23, -212, 40, 542, -522, -76, 328, 66, 488, 253,
	121, -216, 40, -208, -211, -207, 49, 43, 74, -212,
	6, 535, 536, -75, -74, -216, 40, -5, -520, -76,
	4, -207, 40, 58, 49, 43, 74, 505, -525, 261,
	235, 328, -41, -42, -116, -115, -119, 131, 390, 98,
	355, 428, 504, -44, -43, -45, -51, 21, -50, 92,
	350, -46, -47, -51, -53, 535, 536, -118, 123, -138,
	-141, -51, -115, -42, -229, 73, 542, 14, 39, 55,
	535, 536, 537, 538, 539, 540, 526, 527, 528, 18,
	19, 20, -122, 30, 33, 46, 517, 44, 48, 52,
	53, 54, 37, 45, -125, 23, -8, 11, 62, -126,
	4, -22, 192, 193, 194, 195, 196, 197, 198, 199,
	200, 21, 201, 22, 202, 203, 120, 511, 95, 204,
	205, 206, 60, 207, 208, 209, 210, 211, 212, 213,
	174, 116, 170, 190, 512, 89, 70, 214, 215, 216,
	24, 217, 38, 513, 218, 219, 220, 514, 221, 222,
	223, 224, 225, 226, 515, 124, 227, 228, 229, 230,
	231, 25, 142, 232, 102, 233, 118, 234, 235, 236,
	237, 112, 238, 81, 155, 239, 121, 240, 241, 242,
	243, 244, 245, 246, 122, 91, 247, 248, 250, 189,
	188, 251, 40, 252, 253, 254, 255, 99, 150, 151,
	256, 90, 96, 257, 258, 259, 260, 41, 110, 261,
	262, 177, 27, 263, 264, 139, 265, 149, 266, 267,
	268, 137, 42, 269, 271, 272, 273, 274, 29, 275,
	276, 277, 278, 279, 43, 280, 283, 92, 176, 284,
	154, 285, 166, 286, 117, 79, 287, 288, 289, 290,
	292, 293, 294, 295, 296, 152, 297, 299, 28, 300,
	301, 302, 303, 304, 305, 306, 307, 308, 309, 310,
	311, 312, 313, 76, 501, 314, 315, 97, 316, 187,
	172, 186, 318, 319, 75, 167, 161, 163, 164, 160,
	162, 157, 165, 159, 127, 158, 146, 504, 320, 321,
	322, 323, 93, 324, 327, 325, 326, 77, 328, 329,
	330, 58, 331, 332, 333, 334, 335, 336, 337, 338,
	106, 85, 339, 100, 340, 341, 343, 344, 346, 347,
	348, 182, 82, 183, 132, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 358, 31, 111, 359, 360, 47,
	361, 32, 171, 140, 123, 505, 506, 503, 145, 66,
	507, 508, 125, 502, 362, 80, 363, 103, 365, 366,
	367, 368, 369, 370, 371, 130, 372, 129, 373, 374,
	375, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	385, 386, 387, 113, 388, 153, 144, 389, 390, 175,
	391, 392, 84, 133, 393, 394, 395, 396, 397, 398,
	399, 400, 34, 401, 402, 403, 35, 404, 405, 406,
	78, 407, 408, 409, 410, 411, 412, 128, 413, 414,
	147, 415, 416, 417, 88, 419, 63, 420, 421, 422,
	423, 424, 425, 94, 427, 426, 428, 429, 430, 431,
	173, 432, 433, 108, 434, 435, 436, 437, 438, 439,
	114, 115, 440, 441, 442, 148, 443, 444, 445, 446,
	59, 447, 105, 448, 67, 449, 451, 450, 109, 452,
	453, 454, 455, 107, 456, 56, 185, 457, 458, 459,
	460, 461, 462, 49, 463, 464, 465, 466, 467, 468,
	469, 143, 470, 472, 50, 473, 474, 475, 98, 104,
	83, 476, 477, 478, 479, 156, 87, 181, 191, 119,
	480, 481, 482, 483, 51, 484, 487, 141, 488, 489,
	490, 491, 492, 493, 494, 134, 495, 496, 497, 498,
	126, 500, 57, -51, -51, -51, -51, -51, 364, -307,
	32, -70, -51, -98, -149, 87, -69, -149, -149, -62,
	530, 532, 532, 532, -69, -58, -51, -103, 486, 532,
	-229, 532, -72, -79, 537, -6, 4, -18, -19, -20,
	-21, 21, 203, 120, 30, 511, 135, 23, 95, 60,
	512, 38, 513, 514, 39, 515, 118, 26, 240, 241,
	242, 244, 245, 246, 40, 253, 96, 41, 110, 264,
	267, 270, 43, 281, 131, 285, 64, 291, 71, 72,
	45, 312, 317, 73, 324, 327, 68, 331, 332, 31,
	47, 69, 74, 66, 33, 510, 373, 382, 393, 101,
	63, 425, 433, 59, 448, 67, 107, 61, 457, 49,
	471, 472, 104, 83, 191, 51, 65, 485, 36, -51,
	-73, -365, -98, -238, 23, -12, 542, 533, 39, 55,
	30, 33, 46, 44, 48, 52, 37, 45, 62, -162,
	-146, 103, 532, 40, 23, -164, -169, -168, 532, -5,
	-5, -237, 83, 83, 61, -186, 64, 61, -13, -5,
	532, 123, 371, 31, -201, -365, -426, -354, 355, 31,
	-17, 28, -5, -488, 532, -488, -503, 212, 199, 316,
	-7, -470, -472, 532, -81, 322, 481, 84, -479, -374,
	-157, -158, -379, -380, 26, 29, -81, 534, -79, -362,
	-363, -6, -446, 83, -123, 532, 268, 389, -14, -14,
	-14, -14, -14, 29, -427, 29, -7, 532, 371, 31,
	-436, -435, -76, 29, -437, -479, 104, 31, -372, 28,
	-365, 74, 333, -479, -365, 465, 74, 29, 21, -458,
	-463, 67, 449, -5, -368, 243, -365, -361, -76, 23,
	131, 542, 61, -531, 118, 515, 371, 371, -286, 28,
	515, -287, -5, 118, -303, 514, 472, 382, 285, 271,
	-531, 118, -531, 118, 118, 169, 336, 474, 195, 450,
	-319, 532, 74, 461, 202, 401, 413, 412, 461, 413,
	412, -365, 310, 154, -14, 123, 61, -319, 299, 412,
	532, -367, 450, 61, 371, -365, 450, 61, -357, 91,
	339, 343, -82, -207, -530, 70, -207, -207, 70, 347,
	-28, -28, -365, 61, -531, -365, -331, 399, 29, 45,
	-331, 399, 29, -7, 61, 533, 61, 61, 61, 61,
	118, 40, 31, 118, 40, 31, -476, 118, -477, 514,
	31, 118, 61, 61, 399, 83, 83, -365, -7, 61,
	61, -361, -458, -458, -458, 61, 61, 61, -30, -76,
	47, 61, -361, 388, -76, 388, 388, 388, -361, -365,
	-365, 399, -442, 265, 259, 61, 61, -437, 61, -319,
	-319, 61, 439, -14, -14, -14, -14, -14, 61, 209,
	156, 156, 156, -428, -339, -338, 200, 513, 262, 287,
	62, 386, 410, 459, 465, -341, 248, 407, 444, 450,
	308, -16, -14, -12, -7, -14, -7, -81, -210, -95,
	-98, -74, -74, 56, 56, -74, 532, -74, -97, -97,
	-210, -364, 29, -437, 29, -365, 458, -522, -524, 390,
	400, 422, 542, -74, 6, -74, 6, 66, 504, 428,
	542, -47, -49, -53, 535, 536, 412, 128, 532, -49,
	412, 128, -48, -74, 6, -48, -121, 360, 431, -15,
	-365, 542, 83, -130, 95, 96, -41, -116, -218, 64,
	-365, -217, -81, -14, 56, 58, -51, -51, -51, -51,
	-51, -51, -51, -51, -51, -51, -51, -51, -51, -51,
	-51, -51, 46, 44, 48, 37, 45, -51, 61, 47,
	31, 49, 43, 50, 41, 261, 358, -134, -133, 351,
	352, 353, 354, 167, -129, 59, 60, -128, -149, 532,
	-132, 511, 433, 21, -6, 532, -99, 412, 532, -149,
	41, 31, -72, 533, 542, -98, -65, 531, -62, -98,
	-123, -98, 533, -61, -60, 51, -102, 282, 71, 533,
	537, -66, 191, 21, 41, -68, -51, -80, -77, -218,
	-98, 531, 543, 533, 533, -239, 85, 31, 533, -51,
	-170, 74, -183, 104, 105, -163, -167, -5, 87, -5,
	-218, 542, 528, -165, -168, -70, -171, 65, -219, -220,
	-367, -149, 86, -230, 532, -243, -253, -263, -244, 128,
	126, 127, -5, -101, -220, -187, 113, -187, 542, 533,
	-281, -282, -285, -286, -288, -287, 46, -14, 123, 29,
	-330, 36, 532, 29, 74, 31, 405, -495, -496, -498,
	23, 322, 459, 485, -499, 216, 442, 301, 435, 483,
	278, 419, 325, 31, 238, 128, 446, -486, 367, 94,
	-383, -489, 533, -490, -491, -493, -80, -93, 45, 362,
	501, 191, -77, -81, 427, -495, 405, -505, -504, 97,
	99, 98, 463, 123, 199, -361, 537, -471, 510, -473,
	-478, -474, -491, 4, 322, -7, -365, 481, -373, -343,
	-26, -17, -5, -300, -79, 533, 542, 528, 131, -7,
	-246, -245, -247, -5, 532, -361, -361, -361, -361, -361,
	-14, -429, 415, 480, 64, 24, -7, -431, -432, -433,
	296, 355, 479, -281, 123, 29, 285, -7, 423, 29,
	23, 31, -201, -6, 7, -445, 23, -455, 308, 67,
	-457, -462, -5, -244, 532, -14, 449, -360, 542, -367,
	45, -69, -201, -201, 388, -81, -76, -333, -7, -7,
	-7, -365, -365, 31, -286, 28, -81, -7, 532, -307,
	-325, 83, 504, 504, -326, 83, -5, -74, -7, 28,
	-5, 28, -7, -7, 506, 224, 341, -7, -320, -321,
	-6, -7, -7, 21, 104, 461, 413, 461, 413, -7,
	328, -7, 21, 104, -7, 328, -365, 412, -479, -36,
	111, 79, 40, 83, 328, -31, -34, -351, 94, 197,
	27, -10, -6, -331, -334, 399, -7, -7, -365, -331,
	399, -7, -7, -207, -14, -14, -207, -207, -331, 399,
	-354, -7, -7, -331, 399, 61, -531, -365, 450, 61,
	-531, -367, 399, -431, -432, -7, -7, -7, -7, -7,
	-7, 47, -7, 28, -51, 47, -7, 532, 47, -7,
	-7, -11, 61, -7, -7, 399, -452, 61, 74, -7,
	-7, -7, -7, -7, -7, -12, -360, -12, -12, 399,
	399, 61, 401, 202, -11, -11, 423, -7, -7, -33,
	-75, 40, 535, 536, 94, 399, 399, 399, 399, -7,
	-7, -76, -25, 28, -76, -430, 61, -7, -14, -376,
	532, -81, -375, -377, 222, 280, -123, -375, -375, 131,
	-81, -364, -364, -364, 74, -364, 533, 533, 533, 57,
	57, 533, -98, 533, -364, -16, 423, 131, -370, 36,
	-521, 469, 230, 390, -208, 98, -46, -49, 66, 36,
	-74, 6, 532, -98, 335, 542, -141, -124, -126, 62,
	-131, 518, -221, 65, -219, 57, 42, -51, -51, 61,
	-129, 59, -128, 42, -51, 47, 49, 43, 50, 41,
	261, 358, -134, -133, 64, 358, -135, 36, 169, 156,
	135, 140, 147, -52, -53, 535, 536, 412, -52, -98,
	-149, 532, -123, 532, -98, 41, -70, -51, 531, 531,
	542, 533, 533, 533, -59, -60, 264, -51, -109, 509,
	532, 532, 533, -100, 542, -137, -68, -66, -66, 16,
	17, -221, 533, -73, -51, 532, 85, -172, 101, 102,
	156, 533, 542, -70, -171, -169, -51, 533, 542, -172,
	-51, 121, 542, 81, -231, 75, 82, 79, 77, 78,
	76, -224, -223, 23, -5, -224, -149, -243, -253, -263,
	-149, -230, -220, -224, -224, -224, -252, 519, 64, 532,
	532, -69, 74, -193, -76, 114, 115, -193, -5, 533,
	542, -365, -283, 532, -365, -365, 23, -319, -13, -365,
	-367, 29, -494, 67, 47, -93, -77, -501, -381, 213,
	404, -498, -500, -76, -212, -497, 131, 74, 419, 255,
	318, 325, -207, -207, -14, -5, -482, 424, 458, 533,
	542, 40, 528, -80, -93, -493, -93, 362, -94, -77,
	-501, 74, 33, 123, -505, 533, 533, 510, 542, 70,
	533, 542, 528, -7, 296, -201, -365, 210, -373, -301,
	118, -302, -304, 39, 31, 47, 472, 382, 514, 40,
	393, 289, 253, 312, -363, -342, -93, -21, -124, -207,
	-76, 356, 62, 535, 536, 465, 533, 542, -81, -424,
	-425, -76, -361, 64, -7, -212, -212, -28, -349, 508,
	-433, -438, -7, 296, 479, -438, 533, -365, -365, 247,
	-434, -7, 131, -146, 29, -344, 83, 274, 51, -330,
	-449, 131, 4, 296, 64, 542, -51, -23, -360, -463,
	-201, 415, -201, -222, 65, -222, -12, 533, 61, 61,
	61, -291, 131, 40, -27, 283, 29, 31, -348, -347,
	440, -303, 271, -51, 532, -298, 308, 532, -325, 532,
	532, -7, -337, 27, 94, 402, 197, -356, -209, -30,
	-358, 403, 94, -298, 29, -364, 29, -364, -35, -5,
	40, 533, 542, 528, 534, -7, -7, -7, -7, 419,
	419, 328, 308, 419, 533, 542, -351, -351, -10, -32,
	-76, 61, -531, 118, 94, 365, 61, 94, 365, 61,
	61, 61, -531, -7, -7, -331, 399, -7, -7, -7,
	-331, 399, 61, -30, 61, -364, 29, -477, -51, -298,
	-7, 399, 399, 197, 27, 61, -453, 83, -332, -479,
	-365, -360, -360, -360, 61, 61, -7, -7, 439, 61,
	61, 61, 61, 61, 61, -76, 31, -212, -81, -14,
	-14, -71, 532, -81, -14, -96, -96, 533, -364, -7,
	-437, 247, 355, 66, 36, 456, -98, 533, 542, -365,
	-131, 532, 92, 93, -39, 71, -51, -51, -51, 42,
	42, -51, -52, -52, -51, 42, 64, 358, -135, -51,
	472, 472, 30, 14, 535, 536, 537, 538, 539, 540,
	526, 527, 528, 18, 19, 20, -52, -52, 30, 533,
	-51, 533, -98, 533, 542, 533, -62, 267, -51, 107,
	-108, -5, 532, 65, -137, 533, 191, -68, -100, -100,
	542, -100, -51, -51, -39, 531, -147, -214, -177, 532,
	74, -146, -146, 103, -167, -172, 528, -168, 123, -220,
	75, 75, -220, -231, 75, -232, 80, -232, -232, -5,
	532, -224, -224, -224, -224, 533, 125, 532, -53, 134,
	-268, -51, -51, -28, -195, -529, 83, -314, 311, -285,
	-296, -315, -316, 371, -284, -289, -290, -287, -5, -283,
	532, 123, 371, -146, 533, -426, -326, -7, -495, 532,
	74, 207, -51, 542, 542, 465, 47, 255, 318, -490,
	-51, -51, -93, -93, 539, -94, -365, -504, -13, 74,
	70, -478, -471, -474, 4, -342, 532, -438, -330, 532,
	-479, -7, -14, 253, 47, -307, 504, 532, -52, -365,
	-353, 202, 70, 254, 300, -81, -247, -258, 39, 533,
	542, -14, -427, 532, -94, -314, -283, 532, 371, 141,
	-436, -349, -437, -370, -372, -330, -7, -532, 287, 386,
	-439, -441, -5, -451, 61, -450, 21, 63, 97, 98,
	99, -438, -219, -462, 533, 74, -222, -5, 243, -222,
	532, -360, 36, 169, -76, -7, -7, 87, -286, 29,
	-346, -345, 231, -5, 40, 533, -13, -299, 31, 253,
	312, 355, -7, -13, -298, -13, -294, -293, -181, -5,
	-244, 532, 31, 276, 299, 247, -357, 289, 31, 276,
	439, -319, -347, -345, -319, 289, -358, 94, 465, -28,
	439, -5, -7, -321, -342, -6, 419, -7, -34, -7,
	-7, -7, 450, 70, -7, 450, 70, -7, -7, -7,
	-7, 61, 61, -531, 94, 365, 61, 61, -531, -7,
	-7, -7, 533, 61, 61, -459, -464, 62, 287, 440,
	-460, -465, 62, 287, -7, -454, 36, 532, 542, 399,
	-7, -7, -30, -33, -7, -7, -7, -7, -7, -76,
	212, 199, 29, 23, 83, 83, -81, 356, 322, -364,
	423, 247, 456, 533, -51, -123, -140, 72, 70, -51,
	-51, 42, 30, 30, -51, -51, 320, 320, -51, -81,
	-52, -52, -52, -52, -52, -52, -52, -52, -52, -52,
	-52, -52, -51, 533, 533, -51, -51, -110, -5, -51,
	533, -68, 533, 533, 533, -140, 533, 110, -203, -181,
	118, -183, -51, -192, -7, -220, -220, -233, 83, 74,
	75, -220, 532, -12, -223, -248, -249, -244, -259, 130,
	532, 542, -279, -278, 516, -166, -175, -184, -185, 51,
	-197, -198, 532, -28, 151, -315, 532, 305, 272, -344,
	70, 533, 542, -300, 36, -291, -281, -14, 123, -518,
	36, -330, 532, 74, -501, -251, -492, -80, -77, 47,
	-519, -76, 131, -81, 314, 465, 539, -510, 394, -365,
	-471, 533, -461, 64, 61, -467, 313, 23, -13, -373,
	-302, 31, -360, -360, -51, -201, 23, 40, 83, -14,
	-76, -350, -351, 423, -291, -281, 123, -7, 285, 423,
	23, -323, 450, -487, 274, 30, 45, -453, -332, -457,
	-51, 287, 501, 287, 64, 36, 45, 64, -286, -349,
	-5, 40, -298, 533, 253, 477, 300, 254, 310, 533,
	533, 533, 542, 36, -182, -174, 39, -182, -51, 47,
	28, 28, -353, 47, 23, -33, -353, -81, -207, -33,
	-364, -364, 528, 61, 61, -7, -332, -7, -332, 61,
	-7, -7, -7, 450, 70, -7, -7, -7, -364, -298,
	-7, -7, 542, -74, -74, -81, 542, -74, -74, 514,
	-51, -479, 61, -364, -76, -76, -81, -7, -7, 533,
	542, 542, -7, -7, 533, 533, -104, 485, -51, -40,
	21, 41, -51, -51, -51, 533, -106, 371, 533, -100,
	-104, -240, 88, 98, 111, 533, 542, -7, 156, -233,
	532, -51, -220, -12, 533, 533, 542, -250, 23, 124,
	-53, -260, 70, -261, -262, -52, 40, -51, 167, -172,
	-175, -176, 30, -176, 106, 31, -196, 116, 117, 150,
	47, 155, 152, 153, 42, 154, 149, -199, -204, -6,
	-197, -76, -344, -15, -297, 228, 231, 234, 252, 299,
	289, 309, 439, 440, 21, -297, -38, 36, 169, -5,
	-289, 508, -315, 533, -283, -365, 514, 217, 58, 23,
	-203, -367, 542, 533, -93, 314, 267, -502, -4, -381,
	465, 465, -506, 131, -511, -513, -508, 349, 503, -517,
	64, 533, 533, 434, 434, -468, -469, 479, 355, -438,
	-146, 533, -324, 83, -324, 533, -308, 338, 299, 532,
	-7, 533, 542, -7, 423, 533, -365, -349, 247, -7,
	-146, -7, 532, -532, -441, 532, -454, 64, 533, -375,
	-456, 23, -456, -14, 532, 532, 532, -300, -309, 304,
	-309, 393, -309, -293, -123, 62, -329, -14, -14, 533,
	29, 29, 532, 23, -258, -342, -7, -7, -336, 360,
	94, -336, 94, -7, 61, -7, -332, 61, -464, -123,
	-377, -375, 532, -465, 532, 532, 532, 533, -7, 533,
	-81, 356, -81, -105, -107, -5, -136, -139, -51, -142,
	-144, -143, -145, 532, 239, 409, 294, -100, 70, 533,
	-241, 91, 90, 89, 94, -221, -181, -146, -12, 533,
	-252, -249, 532, -254, -255, -5, -260, 70, -53, 133,
	156, 542, 533, 23, -52, -267, 23, 149, 107, -51,
	107, 106, -475, -475, -475, -475, 153, 31, 47, -76,
	533, 542, -205, -211, -207, 537, 40, 532, -221, -38,
	533, -322, 74, -319, 506, 532, -300, -344, -314, -315,
	-283, 507, 514, 514, -146, 533, -326, -492, -495, 541,
	-81, -514, 51, -533, 263, -513, -509, 67, 412, -298,
	-365, 36, 36, -438, 479, -518, -330, 308, -305, 355,
	-313, -310, -311, 74, 79, 370, 430, -355, 532, -51,
	-466, 280, -351, -349, -7, -314, -283, 141, -349, -370,
	533, -487, -440, 7, -219, -456, 302, 206, -295, -292,
	-9, -98, -98, -360, 532, -360, -365, -360, 532, -130,
	-319, -182, -51, 299, -29, 83, 450, 450, -7, -336,
	94, -7, -526, 131, -526, -527, -81, -527, -527, -51,
	533, 533, 533, 542, 23, 542, 533, 532, 532, 426,
	-111, 389, 128, 295, -98, -13, 92, 92, -164, 533,
	-245, 533, 542, -81, 131, -260, -262, 542, -6, -271,
	130, -5, -7, -178, -179, 110, 98, 99, -180, 110,
	97, 70, -76, -76, -76, -76, -13, 537, 47, -13,
	537, -204, -200, -206, -211, -322, -323, 229, -317, -318,
	-5, -244, 532, -38, -315, -344, -291, 507, 507, -518,
	-328, 304, 532, -501, 274, 532, -507, 412, 438, -475,
	131, 287, 287, 23, 450, 310, -311, 74, -310, 74,
	98, 99, -354, 533, 23, -14, -349, 423, -291, -7,
	532, 533, 542, 533, 542, -74, 533, 533, -324, -13,
	-324, -201, -324, -123, -131, -130, 533, -355, -51, -7,
	-7, 450, -352, 392, 88, 510, -352, 533, 542, 533,
	533, 533, -107, -108, -139, -98, -98, 532, 533, -112,
	-113, 37, 468, 121, -51, -112, -112, 94, 70, 70,
	-221, -225, 23, 533, -255, -256, -257, 4, 40, 31,
	47, 129, 125, -53, 124, -269, -270, -268, 111, 94,
	111, -173, 103, 532, 40, 87, 108, 109, -13, 537,
	533, 542, -323, 27, 99, 381, 533, 542, -174, -174,
	-51, -322, -344, -38, -315, -307, 532, -203, -532, -51,
	-516, -5, 263, -375, -375, -146, -7, -312, 355, 35,
	24, 94, -312, 533, 441, -459, -7, 423, -349, 533,
	7, -292, 61, -298, 533, -298, -308, -221, 533, -131,
	-336, -336, -7, 70, -375, -81, 533, 533, -136, -114,
	271, -113, 378, 284, 412, 378, 284, -114, -114, -5,
	-13, -13, -5, -257, -52, -52, 47, -52, -259, 532,
	542, 23, -164, -183, -163, 87, 532, -206, 128, 128,
	-318, -329, -329, 533, -323, -38, -322, -344, -330, -327,
	-181, 533, -487, 533, 412, 542, 542, -518, 196, 47,
	40, -349, -7, 532, -313, -298, -336, -14, 533, 121,
	71, 456, 355, 30, 61, 83, 94, 94, 124, -264,
	-265, -5, 132, -270, -6, 156, 533, -98, -174, -322,
	-323, -38, -323, 533, 542, -328, 532, -514, 61, 64,
	-201, -201, -349, -98, -298, 412, 502, -113, -54, -5,
	-5, -5, -254, 533, 542, 131, -81, -280, 129, -173,
	-173, 103, 533, -329, -323, -322, -221, -181, -307, -512,
	-515, -74, 6, -76, -6, 274, 434, 434, 533, 40,
	533, -272, -273, 40, -274, 137, 47, 49, 43, 50,
	139, -265, 125, -266, -278, 29, 129, 7, -183, -323,
	-330, 533, 542, -532, 36, 36, -54, 533, 74, -51,
	135, 140, -276, 169, 36, -266, -266, 7, 124, 23,
	156, -323, -515, -487, 287, 287, 83, 137, -277, 146,
	145, 141, 135, 141, 135, 142, 143, -276, -272, 532,
	-7, -173, -221, 532, -375, -375, -5, -275, -273, 144,
	144, 141, 141, 135, 141, 135, 141, -277, -264, 124,
	-512, 74, 74, 74, 141, 141, -275, 533, 532, 533,
	139, 137, 147, 147, -264, -273, 148, 148, 533, 74,
	137,
}

var yyDef = [...]int16{
	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 1323, -2, 0, 1579, -2, 1642, 1642, 0, 0,
	0, -2, 1314, 1406, 0, 1437, 0, 1357, 0, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 1578, 0,
	0, 2560, 0, 63, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 65, 0,
	0, 0, 0, 1707, 1708, 0, 0, -2, 1880, 2537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1641, 0, 0, 0, 0, 0, 2022, 0,
	2018, 2019, 2020, 0, 0, 2024, 2025, 2026, 0, 0,
	0, 1625, 0, 1628, 1629, 1630, 1631, 1632, 1633, 0,
	2003, 261, 372, 406, 2008, 2364, 0, 489, 145, 362,
	-2, 353, 439, 2379, 80, 81, 82, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 146, 147, 148, 149,
	150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
	210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
	220, 221, 222, 223, 224, 225, 226, 227, 228, 229,
	230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 257, 258, 259,
	260, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 280, 281,
	282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
	292, 293, 294, 295, 296, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	322, 323, 324, 325, 326, 327, 328, 329, 330, 331,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	352, 354, 355, 356, 357, 358, 359, 360, 361, 363,
	364, 365, 366, 367, 368, 369, 370, 371, 373, 374,
	375, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	385, 386, 387, 388, 389, 390, 391, 392, 393, 394,
	395, 396, 397, 398, 399, 400, 401, 402, 403, 404,
	405, 407, 408, 409, 410, 411, 412, 413, 414, 415,
	416, 417, 418, 419, 420, 421, 422, 423, 424, 425,
	426, 427, 428, 429, 430, 431, 432, 433, 434, 435,
	436, 437, 438, 440, 441, 442, 443, 444, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	457, 458, 459, 460, 461, 462, 463, 464, 465, 466,
	467, 468, 469, 470, 471, 472, 473, 474, 475, 476,
	477, 478, 479, 480, 481, 482, 483, 484, 485, 486,
	487, 488, 490, 491, 492, 493, 494, 495, 496, 497,
	498, 499, 500, 501, 502, 503, 504, 505, 2017, 2009,
	489, 406, 372, 2013, 2014, 145, 261, 279, 353, 362,
	439, -2, 0, 0, -2, 1328, 1329, 0, 1329, 0,
	1359, 0, 1436, 1438, 1356, 1381, 1382, 95, 0, 372,
	406, 489, 0, 1403, 336, 1408, 98, 90, 1404, 0,
	2, 0, 0, 1386, 0, 0, 0, 1325, 2222, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 0, 0,
	1642, 2559, -2, 0, -2, 230, 1648, 112, 0, 149,
	211, 1311, 0, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
	1304, 1305, 1306, 1307, 1308, 1309, 1310, 2243, 0, 0,
	230, 1810, 230, 0, 0, 2309, 230, 0, 0, 0,
	2459, 0, 0, 98, 230, 64, 2424, 0, 0, 0,
	1709, 1710, 1711, 1712, 0, 230, 0, 0, 230, 0,
	0, 230, 0, 230, 0, 0, 0, 0, 0, 1182,
	0, -2, -2, 1248, 506, 507, 508, 509, 510, 511,
	512, 513, 514, 515, 516, 517, 518, 519, 520, 521,
	522, 523, 524, 525, 526, 527, 528, 0, 0, 0,
	0, 0, 0, 0, 1917, 1918, 1919, 1920, 1921, 2399,
	2400, 2401, 2402, 0, 0, 0, 0, 230, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 266,
	0, 0, 230, 0, 0, 0, 230, 68, 114, 230,
	68, 91, 0, 230, 68, 230, 1639, 1240, 1241, 1242,
	1243, 1244, 1245, 1254, 1257, 1258, 1259, 1260, 1261, 1292,
	192, 1254, 1254, 1254, 1267, 1268, 1269, 1270, 1271, 1288,
	1288, 1246, 1247, 1290, 1279, 1290, 1290, 1274, 0, 1290,
	68, 230, 0, 0, 2021, 0, 2023, 0, 1623, 1624,
	1627, 76, 2004, 372, 2005, 147, 0, 2006, 0, 2405,
	0, 0, 2411, 0, 0, 0, 0, 0, 0, 2367,
	1164, 2368, 2369, 2394, 2395, 2370, 2397, 2398, 0, 2010,
	0, 2012, 2624, 1341, 1338, 0, 2621, 2622, 1342, 0,
	0, 0, 1350, 0, -2, 0, 1326, 1327, 1443, 1358,
	1360, 1364, 1365, 1059, 0, 0, 0, 0, 0, 0,
	1779, 1126, 1143, 1144, 1178, 0, 1147, 1148, 1149, 452,
	0, 1154, 1155, 456, 1293, 299, 485, 1168, 1157, 1158,
	1159, 1160, 1161, 1162, 1198, 1316, 1163, 0, 1443, 0,
	1383, 96, 1170, 0, 1173, 1384, 0, 0, 0, 1405,
	0, 0, 0, 1238, 0, 1543, 0, 1387, 0, 1565,
	0, 0, 0, 0, 0, 230, 2222, 0, 2258, 230,
	63, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	1713, 0, 2228, 0, 0, 1647, 113, 0, 2241, 0,
	2538, 0, 0, 2242, 0, 0, 0, 0, 0, 2248,
	0, 0, 2266, 1808, 1809, 0, 0, 0, 230, 2313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2493, 0, 0, 0, 0, 0, 1890, 1903,
	1990, 1911, 0, 0, 0, 1990, 1990, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1982, 0, 0, 0, 1892, 1894, 0, 0, 0, 0,
	1895, 0, 2261, 1788, 0, 0, 0, 1792, 1807, 1795,
	0, 0, 0, 0, 1810, -2, 1805, 0, 1897, 1990,
	0, 0, 230, 0, 0, 230, 0, 0, 2038, 0,
	1183, 0, 0, 0, 0, 2232, 0, 0, 0, 0,
	0, 2032, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2306, 2307, 0, 0,
	0, 0, 0, 0, 0, 2518, 2519, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2273, 1642, 2288,
	2289, 0, 0, 1992, 66, 67, 0, 0, 1994, 0,
	0, 0, 1997, 0, 1255, 1254, 0, 1262, 0, 1263,
	1264, 1265, 1266, 0, 1283, 0, 0, 0, 1285, 1281,
	1289, 0, 1272, 1273, 1290, 1290, 1277, 1999, 0, 68,
	230, 0, 0, 1626, 2027, 2028, 2029, 2030, 0, 0,
	0, 2371, 2372, 0, 2407, 2374, 0, 2409, 2410, 2412,
	2365, 2375, 2377, 2381, 2383, 2384, 1613, 1614, 1615, 1616,
	1617, 0, 0, 1620, 1165, 2376, 2378, 2380, 2366, 2385,
	2386, 2387, 2388, 2389, 2390, 2391, 2392, 2393, 2373, 2403,
	2404, 2011, 1332, 2623, 1333, 1340, 1343, 0, 0, 1345,
	0, 1347, 0, 2619, 2620, 2625, 2633, 2634, 0, 2643,
	2644, 2631, 0, 2635, -2, 0, 0, 1353, 0, 2585,
	2586, 1695, 2624, 1341, 1367, 0, 0, 0, 661, 629,
	1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308,
	1309, 1310, 0, 622, 876, -2, 0, -2, 963, 794,
	1097, 1099, -2, 773, 0, 0, 1363, -2, 873, 1218,
	88, 89, 607, 608, 609, 610, 611, 612, 613, 614,
	615, 616, 617, 618, 619, 620, 621, 623, 624, 625,
	626, 627, 628, 630, 631, 632, 633, 634, 635, 636,
	638, 639, 640, 641, 642, 643, 644, 645, 646, 647,
	648, 649, 650, 651, 652, 653, 654, 655, 656, 657,
	658, 659, 660, 662, 663, 664, 665, 666, 667, 668,
	669, 670, 671, 672, 673, 674, 675, 676, 677, 678,
	679, 680, 681, 682, 683, 684, 685, 686, 687, 688,
	689, 690, 691, 692, 693, 694, 695, 696, 697, 698,
	699, 700, 701, 702, 703, 704, 705, 706, 707, 708,
	709, 710, 711, 712, 713, 714, 715, 716, 717, 718,
	719, 720, 721, 722, 723, 724, 725, 726, 727, 728,
	729, 730, 731, 732, 733, 734, 735, 736, 737, 738,
	739, 740, 741, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 769,
	770, 771, 772, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 793, 795, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 817, 818, 819, 820, 822,
	823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 837, 838, 839, 840, 841, 842,
	843, 844, 845, 846, 847, 848, 849, 850, 851, 852,
	853, 854, 855, 856, 857, 858, 859, 860, 861, 862,
	863, 864, 865, 866, 867, 868, 869, 870, 871, 872,
	874, 875, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 952, 953, 954,
	955, 956, 957, 958, 959, 960, 961, 962, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 990, 991, 992, 993, 994, 995,
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
	1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
	1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 1058, 1064, 1065, 1079, 1082, 1083, 0, 0,
	0, 1145, 1238, 0, -2, 493, 1150, 1151, 1152, 1153,
	0, 0, 0, 0, -2, 0, 1197, 1318, 0, 0,
	1367, 0, 1171, 1174, 1175, 1249, 83, 84, 85, 86,
	87, 529, 530, 531, 532, 533, 534, 535, 536, 537,
	538, 539, 540, 541, 542, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 583, 584, 585, 586, 587,
	588, 589, 590, 591, 592, 593, 594, 595, 596, 597,
	598, 599, 600, 601, 602, 603, 604, 605, 606, 1172,
	0, 0, 0, 1409, 1413, 0, 0, 1420, 0, 0,
	0, 0, 1220, 1222, 0, 0, 1319, 0, 0, 1678,
	1545, 0, 0, 0, 0, 1367, 1556, 0, 0, 1178,
	1388, 1426, 0, 0, 1574, 1574, 1571, 1572, 0, 93,
	1716, 0, 0, 0, 1889, 0, 2255, 2257, 0, 0,
	0, 230, 62, 2137, 0, 2137, 0, 2178, 2179, 0,
	0, 0, 2240, 0, 0, 0, 0, 0, 2359, 2358,
	2360, 2361, 2362, 2363, -2, 63, 1768, 0, 1251, 0,
	2441, 2443, 0, 0, 1312, 1457, 0, 0, 0, 0,
	0, 0, 2250, 0, 2263, 0, 2300, 1716, 0, 0,
	0, 2312, 2308, 0, 0, 2323, 2324, 0, 0, 230,
	2222, 0, 0, 2458, 2465, 0, 0, 0, 0, 2424,
	2500, 0, 398, -2, 2222, 2508, 0, 2423, 0, 0,
	0, 0, 0, 0, 0, 1989, 0, 0, 1922, 230,
	0, 1946, 0, 0, 1825, 0, 1779, 0, 0, -2,
	0, 0, 0, 0, 0, 0, 1954, 1955, 0, 0,
	1975, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1968, 0, 0, 1970, 1971, 0, 1976, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1789, 1793,
	1798, 1799, 1790, 1791, 0, 1806, 1796, 1797, 0, 0,
	0, 0, 0, 0, 0, 0, 1899, 1990, 0, 0,
	1901, 1990, 0, 2300, 0, 2031, 0, 0, 0, 0,
	0, 1988, 0, 0, 0, 0, 2235, 0, 2346, 0,
	0, 0, 0, 0, 0, 0, 0, 2476, 0, 0,
	0, 2496, 2498, 2497, 2499, 0, 0, 0, 2305, 2310,
	2311, 0, 2512, 0, 2513, 2424, 0, 0, 2520, 0,
	0, 0, 2447, 2448, 2451, 0, 0, 0, 0, 2460,
	2461, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 2271, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1634, 1635, 1636, 1637, 1638,
	2022, 68, 115, 68, 92, 68, 0, 1640, 68, 1256,
	0, 0, 0, 0, 0, 0, 0, 0, 1275, 1276,
	68, 2001, 0, 0, 0, 2357, 0, 2406, 2408, 0,
	0, 2416, 0, 1166, 1618, 1167, 1619, 1339, 0, 1348,
	0, 0, 0, 2636, 0, 0, -2, -2, 0, 2632,
	2641, 2642, 2637, -2, -2, 2638, 1344, 1351, 0, 1349,
	99, 0, 0, 1698, 1693, 1694, 1336, 1337, 1423, 0,
	1442, 1361, 1060, 1061, 0, 1063, 1066, 1067, 1068, 1069,
	1070, 1071, -2, -2, -2, -2, -2, -2, 1078, 1080,
	1081, -2, 1221, 1223, 0, 1319, 0, -2, 0, 1096,
	0, 1101, 1103, 1105, 0, 1118, 1120, 0, 1237, 1224,
	1225, 1226, 1227, 1228, 0, 0, 1320, 1113, 1321, 0,
	0, 1215, 1216, 1217, 1362, 0, 1100, 0, 0, 1117,
	1777, 0, 1179, 1178, 0, 0, 0, 1206, 1207, 0,
	0, 0, -2, 1203, 1199, 0, 2597, 0, 0, 1184,
	0, 1314, 0, 0, 0, 1191, 1193, 0, -2, 1423,
	0, 1176, 1173, 1385, 1421, 0, 1411, 0, 97, 1239,
	1700, 0, 0, 1550, 1551, 0, 1552, 1178, 1549, 1544,
	1426, 0, 0, 0, 1561, 1560, 1700, 0, 1564, 1368,
	1429, 1429, 0, 1373, 0, 1429, 1429, 1429, 1447, 358,
	505, 470, 95, 1181, 0, 0, 1573, 0, 0, 2221,
	0, 1715, 1717, 1719, 1720, 1721, 0, 1745, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2151, 2136, 2138,
	0, 0, 0, 2143, 2144, 0, 2159, 2160, 2161, 2162,
	0, 0, 2167, 0, 0, 0, 0, 2172, 0, 0,
	2175, 0, 2116, 2117, 2119, 0, 0, 2126, 2127, 2128,
	2129, 2131, -2, 2133, 0, 2151, 0, 0, 2181, 2183,
	2184, 2185, 2187, 2180, 0, 2239, 0, 0, 0, 0,
	2329, 2333, 2331, 1246, 0, 2557, 2222, 0, 2227, 0,
	0, 0, -2, 2231, 1252, 2440, 0, 0, 0, 2544,
	0, 1456, 1458, 0, 2342, 2254, 2244, 2245, 2246, 2247,
	0, 2265, 0, 0, 0, 2270, 1810, 1760, 2299, 2297,
	0, 0, 0, 0, 0, 0, 0, 2309, 0, 0,
	0, 0, 1868, 0, 1889, 2467, 0, 0, 2482, 2483,
	0, 2488, 2490, 2491, 0, 98, 2424, 2495, 0, 2222,
	0, -2, 2510, 2510, 0, 0, 0, 1912, 2061, 0,
	0, 0, 76, 0, 1924, 230, 1743, 0, 0, 0,
	2096, 0, 0, 0, 0, 0, 1644, 0, 2096, 230,
	68, 230, 68, 1948, 1951, 1953, 0, 1974, 0, 2105,
	2108, 1952, 1956, 1959, 1960, 0, 0, 0, 0, 1964,
	0, 1961, 1962, 1963, 1967, 0, 1969, 0, 1972, 1977,
	2436, 2437, 2438, 0, 0, 0, 2428, 2430, 373, 121,
	193, 0, 1764, 1891, 1904, 1990, 0, 2069, 1986, 1893,
	0, 0, 2063, 1794, 1800, 1801, 1802, 1804, 1896, 0,
	2262, 2065, 0, 1898, 1990, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -2, 2041, 2042, 2043, 2044, 2045,
	0, 2233, 68, 230, 1987, 2234, 0, 0, 2096, 2238,
	2048, 2049, 0, 0, 0, 0, 2478, 0, 0, 2055,
	2056, 2057, 2058, 2059, 2060, 2424, 2514, 2424, 2424, 0,
	0, 0, 2449, 2450, 2086, 2087, 0, 2088, 2089, 2486,
	1621, 1622, 0, 0, 0, 0, 0, 0, 0, 2094,
	0, 0, 0, 0, 2340, 2272, 0, 2275, 2276, 2277,
	0, 2279, 2280, 2281, 149, 211, 0, 2284, 2285, 0,
	2287, 1991, 1993, 1995, 0, 1998, 1253, 1291, 1288, 1286,
	1287, 1288, 0, 1278, 2000, 68, 0, 0, 2351, 0,
	2007, 2413, 2414, 2415, 2382, 1346, 2626, 0, 2629, 0,
	2639, 2640, 0, 0, 1352, 0, 2587, 1698, 1295, 0,
	2589, 0, 2571, 0, 1366, 0, 0, -2, -2, 0,
	0, 0, 1114, 0, -2, 1098, 1102, 1104, 1106, 0,
	1119, 1122, 0, 1237, 0, 1121, 1124, 0, 0, 1229,
	1230, 1231, 1232, 0, 1127, 0, 0, 485, 0, 0,
	1115, 0, 0, 0, 0, 1778, 1146, 1239, 1204, 1205,
	0, 1156, 1294, -2, 0, 1200, 0, 0, 1180, 0,
	0, 0, 1185, 0, 0, 1313, 1314, 1314, 1314, 0,
	0, 2571, 1439, 0, 1172, 0, 1412, 1542, 0, 1681,
	0, 0, 0, 1554, 1700, 1557, 1558, 0, 0, 1563,
	1424, 170, 0, 0, 0, 0, 0, 1400, 1400, 1400,
	1398, 1370, 1428, 0, 1433, 1371, 1429, 1429, 1429, 1429,
	-2, 1373, 0, 1375, 1377, 1379, 1444, 0, 0, 0,
	0, -2, 0, 1810, 1575, 1576, 1577, -2, 94, 1858,
	0, 1725, 1860, 0, 1745, 0, 0, 1888, 0, 2258,
	1883, 0, 2137, 0, 0, 2132, 1254, 2113, 2149, 0,
	0, 2139, 2140, 2145, 2141, 2142, 0, 0, 0, 2165,
	2166, 2168, 2169, 2170, 2171, 2173, 2174, 372, 406, 2115,
	0, 0, 0, 0, 2125, 0, 2124, 2130, 1254, 0,
	2114, 0, 0, 0, 0, 2325, 2326, 0, 0, 0,
	2332, 0, 0, 0, 0, 1889, 0, 0, 2230, 1767,
	0, 1770, 1771, 0, 0, 1816, 1779, 0, 0, 0,
	0, 0, 1773, 0, 2442, 2444, 2417, 2418, 2419, 2420,
	2421, 2422, 299, 1299, 1300, 0, 2252, 0, 1462, 0,
	2341, 2343, 2249, 0, 2267, 2268, 2269, 2266, 2290, 0,
	2298, 2293, 2301, 2294, 2296, 2295, 1858, 1745, 0, 0,
	2313, 1760, 0, 2357, 0, 1889, 0, 0, 0, 2457,
	2474, 0, 2464, 0, 0, 0, 0, 0, 2494, 2501,
	2510, 0, 2510, 2505, 0, 2507, 2424, 0, 0, 0,
	0, 1983, 0, 1755, 1984, 1985, 0, 0, 1739, 1742,
	0, 1824, 1883, 0, 0, 1828, 0, 0, 2096, 0,
	0, 1882, 1926, 0, 0, 0, 0, 1939, 0, 1945,
	1782, -2, 0, 1947, 0, 1943, 0, 1950, 1973, 2434,
	2435, 2104, 0, 0, 0, 1957, 1965, 1958, 1966, 1978,
	1979, 0, 0, 1980, 2427, 0, 2431, 2432, 2433, 1763,
	1765, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2067, 0, 1900, 1990, 0, 2071, 0,
	1902, 1990, 0, 2291, 0, 2236, 0, 2345, 0, 2348,
	2050, 0, 0, 0, 0, 0, 2480, 0, 2475, 1915,
	0, 2517, 2515, 2516, 0, 0, 2085, 0, 0, 0,
	0, 0, 0, 0, 0, 2336, 0, 2274, 0, 0,
	0, 2033, 0, 0, 68, 1282, 1284, 1280, 2002, 2321,
	0, 2355, 0, 2627, 0, 2630, 0, 1213, 0, 100,
	2588, 0, 1696, 1697, 2584, 0, 1422, 1062, -2, 0,
	0, -2, 0, 0, -2, 0, 0, 1123, 1125, -2,
	1234, 1236, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1129, 1130, 0, 1322,
	0, -2, 0, 1210, 0, -2, 1208, 1196, 1202, 0,
	2595, 2596, 2600, 0, 0, 1186, 0, 1192, 0, 0,
	0, 0, 1194, 1195, 2584, 1177, 0, 1699, 0, 0,
	0, 1546, 1547, 0, 1553, 1555, 0, 1562, 0, 1369,
	0, 0, 0, 0, 0, 1395, 1399, 1396, 1397, 1431,
	0, 1372, 1376, 1378, 1380, 1389, 1446, 0, 0, 500,
	0, 1529, 0, 1585, 1810, 0, 1645, 1860, 0, 1718,
	1722, 1868, 1859, 0, 0, 1746, 1748, 1749, 1768, 0,
	1716, 0, 0, 2226, 1889, 2256, 0, 0, 2151, 0,
	0, 2154, 2152, 0, 0, 0, 0, 2163, 2164, 2118,
	2120, 2121, 2122, 2123, 0, 0, 2189, 2182, 2186, 0,
	0, 2330, 0, 2334, 0, 2335, 0, 2562, 0, 0,
	2359, 0, 1772, 1774, 1815, 2424, 2424, 0, 1820, 2222,
	0, 1780, 0, 1775, 1776, 0, 1459, 1460, 0, 2253,
	0, 2251, 2264, 0, 2302, 0, 0, 1716, 0, 0,
	0, 2318, 0, 2349, 0, 1874, 1867, 0, 2206, 2207,
	0, 2452, 0, 2478, 0, 2466, 2468, 2469, 2470, 2471,
	2472, 2481, 2484, 2489, 2492, 0, 2502, 2503, 2504, 2506,
	0, 2511, 0, 0, 0, 2073, 2079, 0, 1923, 0,
	1760, 1738, 0, 1740, 1741, 2096, 0, 2097, 0, 2099,
	0, 0, 1877, 0, 1830, 0, 0, 1835, 0, 1692,
	1692, 0, 0, 1930, 1940, 1643, 1786, 0, 0, 0,
	0, 1934, 1936, 1937, 1935, 0, 1783, 0, 0, 0,
	0, 68, 68, 2106, 2107, 2110, 1981, 2439, 2429, 2062,
	0, 0, 0, 0, 2070, 0, 0, 2064, 2075, 2066,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2047,
	2046, 68, 2096, 0, 0, 2545, 2530, 0, 0, 0,
	2546, 2547, 0, 0, 2053, 2463, 0, 0, 0, 0,
	2083, 2084, 2320, 2487, 2090, 2091, 2092, 2093, 68, 2339,
	0, 0, 71, 0, 0, 0, 0, 0, 0, 1996,
	0, 2356, 2628, 1212, 1239, 0, 2591, 0, 2569, -2,
	-2, 0, 0, 0, -2, -2, 1233, 1235, -2, 1128,
	1131, 1132, 1133, 1134, 1135, 1136, -2, -2, -2, -2,
	-2, -2, -2, 1116, 1209, 1239, 1201, 2602, 2599, 0,
	1315, 1314, 1187, 1189, 1190, 2591, 1416, 0, 0, 1684,
	0, 0, 1559, 1425, 1427, 1390, 0, 1392, 0, 0,
	0, 1394, 0, 0, 1374, 0, 1448, 1452, 0, 0,
	0, 0, 1488, 1528, 0, 1700, 1567, 1667, 1667, 0,
	1569, 1582, 0, 1585, 0, 1868, 0, 0, 0, 79,
	0, 1744, 0, 1750, 0, 1860, 0, 1745, 0, 2217,
	0, 0, 0, 0, 2111, 0, 1453, 0, 1250, 0,
	-2, 2146, 0, 2147, 2157, 2134, 0, 2199, 0, 2216,
	0, 2327, 0, 0, 0, 2564, 0, 0, 0, 2229,
	1769, 0, 1876, 1876, 0, 1844, 0, 1781, 0, 1461,
	2344, 0, 1761, 0, 0, 0, 0, 1760, 0, 0,
	0, 2354, 0, 0, 0, 0, 0, 2480, 2473, 0,
	0, 0, 2526, 2526, 0, 0, 0, 0, 1925, 1768,
	1736, 1737, 1826, 1840, 2098, 2102, 2100, 2101, 2103, 1840,
	0, 1840, 0, 0, 1686, 65, 0, 1687, 0, 1927,
	0, 0, 1787, 1928, 0, 1932, 0, 1462, 1785, 1933,
	1942, 1949, 0, 0, 0, 1914, 0, 1914, 0, 0,
	2077, 2068, 0, 0, 0, 2081, 2072, 0, 2237, 2347,
	2051, 2052, 0, 0, 0, 2536, 0, 0, 0, 0,
	0, 1916, 0, 2095, 2337, 2338, 0, 2282, 2283, 2034,
	0, 0, 2286, 2322, 1214, 1296, 1354, 0, 2583, 0,
	2567, 2568, -2, -2, -2, 1211, 1314, 0, 1317, 0,
	1355, 1419, 0, 0, 1677, 1423, 0, 1680, 0, 1391,
	0, 1402, 1393, 0, 1432, 1447, 0, 1450, 0, 0,
	1465, 0, 139, 0, 1469, 0, 0, 1490, 1527, 1566,
	1568, 0, 0, 0, 1662, 0, 1584, 1586, 1587, 1648,
	1648, 1590, 1591, 1648, 1648, 0, 0, 0, 1601, 1609,
	1423, 1580, 79, 0, 1723, 1726, 1727, 1728, 1729, 1730,
	1731, 1732, 1733, 1734, 1735, 1724, 1872, 0, 0, 0,
	1747, 1768, 1868, 1858, 1860, 1745, 0, 0, 0, 0,
	0, 1883, 0, 2137, 1455, 2158, 2150, 0, 2155, 2156,
	0, 2135, 2205, 2201, 2188, 2190, 0, 2193, 2194, 2096,
	0, 2328, 2552, 0, 0, 2558, 2563, 0, 0, 2561,
	2226, 1889, 1817, 0, 1818, 1834, 1849, 0, 1814, 0,
	2529, 1759, 0, 1760, 0, 1858, 1745, 2303, 0, 1760,
	2357, 1873, 0, 0, 2453, 0, 2462, 0, 2509, 2526,
	2523, 0, 2522, 2551, 0, 0, 0, 1766, 2424, 0,
	2424, 0, 2424, 1836, 1837, 299, 1695, 64, 1691, 1692,
	1931, 1941, 0, 0, 2426, 2109, 2074, 2080, 1905, 1913,
	0, 1907, 0, 2076, 0, 1914, 0, 0, 2531, 2541,
	2541, 2534, 0, 2548, 0, 0, 0, 2477, 2054, 2278,
	0, 0, 0, 2590, 2592, 0, 2570, 2572, 2574, 2575,
	2576, 2577, 2578, 0, 169, 355, 456, 2606, 0, 1188,
	1410, 0, 0, 0, 0, 1679, 1685, 1548, 0, 1430,
	1445, 1449, 0, 0, 1475, 0, 1466, 0, 1467, 1463,
	1464, 0, 0, 0, 1472, 1492, 0, 0, 0, 1666,
	0, 1664, 0, 0, 0, 0, 0, 0, 0, 1600,
	1583, 0, 1603, 1604, 1605, 1606, 1607, 0, 1570, 1872,
	1857, 1874, 0, 77, 78, 0, 1751, 79, 1860, 1868,
	0, 2223, 0, 0, 2226, 1885, 0, 1454, 2151, 2153,
	2148, 0, 0, 0, 2200, 2191, 1648, 2195, 2196, 0,
	2215, 0, 0, 2565, 2566, 2218, 0, 0, 1819, 0,
	1821, 1845, 1846, 0, 1841, 1842, 1843, 1822, 0, 0,
	0, 0, 1762, 2314, 1760, 0, 0, 0, 2319, 2350,
	2445, 0, 0, 2455, 2485, 2521, 2524, 2525, 0, 1757,
	0, 0, 0, 1876, 0, 1876, 2222, 1876, 0, 1698,
	1695, 1688, 0, 1814, 1944, 0, 0, 0, 2078, 1909,
	0, 2082, 1812, 0, 1812, 0, 2542, 0, 0, 0,
	2035, 2037, 2036, 0, 0, 0, 2579, 0, 0, 0,
	0, 0, 0, 0, 2601, 0, 0, 0, 1423, 1435,
	0, 1473, 0, 1477, 0, 1468, 1470, 0, 1471, 0,
	0, 1489, 1526, 1657, 1658, 0, 0, 1669, 1659, 0,
	0, 0, 1588, 1589, 1592, 1593, 1594, 1595, 0, 1598,
	1599, 1602, 0, 1610, 1612, 1874, 1703, 0, 0, 1862,
	1692, 1692, 0, 1872, 1868, 79, 1860, 2224, 2225, 2219,
	1779, 0, 0, 2112, 0, 0, 2198, 2202, 2203, 0,
	0, 0, 0, 0, 0, 1833, 1847, 0, 1848, 0,
	0, 0, 0, 0, 0, 2528, 2316, 0, 0, 1760,
	0, 2454, 0, 1752, 0, 1756, 1753, 0, 2096, 0,
	2096, 1844, 1423, 0, 1689, 1698, 1929, 1938, 2425, 1914,
	1914, 0, 2532, 1811, 2539, 0, 2533, 0, 0, 2549,
	2550, 2479, 2593, 2594, 2573, 0, 0, 0, 2598, 2618,
	2607, -2, 414, 170, 0, 2618, 2618, 0, 0, 0,
	1676, 1401, 0, 1451, 1476, 1479, 1480, 0, 0, 0,
	1485, 0, 1478, 0, 0, 1491, 1493, 0, 1660, 0,
	1661, 1670, 0, 0, 0, 0, 1663, 1665, 1596, 1597,
	1608, 0, 1701, 1869, 0, 0, 1861, 0, 65, 65,
	0, 1874, 79, 1872, 1868, 1889, 0, 0, 0, 0,
	2192, 2197, 0, 2555, 2556, 2226, 1875, 1850, 0, 1853,
	1854, 0, 1851, 1813, 1823, 2527, 1760, 0, 2304, 2446,
	2456, 1758, 0, 1827, 1839, 1829, 1849, 2096, 1838, 1690,
	1906, 1908, 1914, 0, 2535, 2543, 2581, 2580, 0, 2603,
	0, 0, 2609, 2610, 2611, 2612, 2613, 2604, 2605, 0,
	0, 0, 1434, 1481, 1482, 1483, 1484, 1486, 0, 0,
	0, 0, 1668, 0, 0, 1674, 0, 1611, 1870, 1871,
	1863, 1864, 1865, 1692, 1705, 1872, 1874, 79, 1874, 0,
	1886, 1885, 0, 2204, 2205, 0, 0, 2220, 1852, 2222,
	2222, 2315, 1760, 0, 2096, 1832, 1910, 2540, 2582, 0,
	2615, 2616, 0, 0, 0, 0, 0, 0, 0, 0,
	1532, 0, -2, 1494, 1495, 0, 0, 0, 65, 1874,
	1704, 1872, 1423, 1884, 0, 1779, 2210, 0, 0, 0,
	1855, 1856, 2317, 0, 1831, 2614, 2617, 2608, 0, 1418,
	1414, 1415, 0, 1511, 0, 0, 1541, 0, 1530, 1671,
	1672, 0, 1675, 1866, 1702, 1874, 1878, 1887, 1889, 0,
	2208, 2211, 2212, 2213, 2214, 0, 0, 0, 1754, 0,
	1474, 0, 0, 0, 1497, 1498, 1499, 1500, 1501, 1502,
	1505, 1533, 1534, 1520, 1541, 1541, 0, 0, 0, 1706,
	1874, 2176, 0, 0, 0, 0, 0, 1487, 0, 1496,
	1503, 1504, 1525, 0, 0, 1520, 1511, 1540, 0, 0,
	0, 1423, 2209, 0, 0, 0, 0, 1510, 1509, 0,
	0, 1512, 0, 1514, 0, 0, 0, 1525, 1537, 0,
	0, 1673, 1879, 2210, 2553, 2554, 1417, 1535, 0, 1522,
	1524, 1513, 1515, 0, 1518, 0, 1519, 1509, 0, 0,
	0, 0, 0, 0, 1516, 1517, 1536, 1538, 0, 2177,
	1506, 1507, 0, 0, 0, 0, 1521, 1523, 1539, 0,
	1508,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 539, 3, 3,
	532, 533, 537, 535, 542, 536, 534, 538, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 543, 541,
	526, 528, 527, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 530, 3, 531, 540,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}

var yyTok3 = [...]uint16{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 468, 57811, 469, 57812, 470, 57813, 471, 57814, 472,
	57815, 473, 57816, 474, 57817, 475, 57818, 476, 57819, 477,
	57820, 478, 57821, 479, 57822, 480, 57823, 481, 57824, 482,
	57825, 483, 57826, 484, 57827, 485, 57828, 486, 57829, 487,
	57830, 488, 57831, 489, 57832, 490, 57833, 491, 57834, 492,
	57835, 493, 57836, 494, 57837, 495, 57838, 496, 57839, 497,
	57840, 498, 57841, 499, 57842, 500, 57843, 501, 57844, 502,
	57845, 503, 57846, 504, 57847, 505, 57848, 506, 57849, 507,
	57850, 508, 57851, 509, 57852, 510, 57853, 511, 57854, 512,
	57855, 513, 57856, 514, 57857, 515, 57858, 516, 57859, 517,
	57860, 518, 57861, 519, 57862, 520, 57863, 521, 57864, 522,
	57865, 523, 57866, 524, 57867, 525, 57868, 529, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:521
		{
			yyVAL.stmtList = yyDollar[1].stmtList
			// In the actual implementation, we'll set this as the parse result
			if l, ok := yylex.(interface{ SetParseTree([]ast.Stmt) }); ok {
				l.SetParseTree(yyDollar[1].stmtList)
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:536
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmtList = append(yyDollar[1].stmtList, yyDollar[3].stmt)
			} else {
				yyVAL.stmtList = yyDollar[1].stmtList
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:544
		{
			if yyDollar[1].stmt != nil {
				yyVAL.stmtList = []ast.Stmt{yyDollar[1].stmt}
			} else {
				yyVAL.stmtList = []ast.Stmt{}
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:559
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:570
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:571
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:572
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:573
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:574
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:575
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:576
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:577
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:578
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:579
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:580
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:581
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:582
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:583
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:584
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:585
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:586
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:587
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:588
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:589
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:590
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:591
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:592
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:593
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:594
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:595
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:596
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:597
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:598
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:599
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:600
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:601
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:602
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:603
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:604
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:605
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:606
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:607
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:608
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:609
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:610
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:611
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:612
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:613
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:614
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:615
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:616
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:617
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:618
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:619
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:620
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:621
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:622
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:623
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:624
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:625
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:627
		{
			yyVAL.stmt = nil
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:638
		{
			yyVAL.str = yyDollar[1].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:639
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:643
		{
			yyVAL.list = yyDollar[1].list
		}
	case 65:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:644
		{
			yyVAL.list = nil
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:648
		{
			yyVAL.dropBehav = ast.DropCascade
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:649
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:650
		{
			yyVAL.dropBehav = ast.DropRestrict
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:654
		{
			yyVAL.ival = 1
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:655
		{
			yyVAL.ival = 0
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:659
		{
			yyVAL.ival = 1
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:660
		{
			yyVAL.ival = 0
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:664
		{
			yyVAL.bval = true
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:665
		{
			yyVAL.bval = false
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:669
		{
			yyVAL.bval = true
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:670
		{
			yyVAL.bval = false
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:674
		{
			yyVAL.list = yyDollar[2].list
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:675
		{
			yyVAL.list = nil
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:676
		{
			yyVAL.list = nil
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:685
		{
			yyVAL.str = yyDollar[1].str
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:686
		{
			yyVAL.str = yyDollar[1].str
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:687
		{
			yyVAL.str = yyDollar[1].str
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:691
		{
			yyVAL.str = yyDollar[1].str
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:692
		{
			yyVAL.str = yyDollar[1].str
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:693
		{
			yyVAL.str = yyDollar[1].str
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:694
		{
			yyVAL.str = yyDollar[1].str
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:695
		{
			yyVAL.str = yyDollar[1].str
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:698
		{
			yyVAL.str = yyDollar[1].str
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:699
		{
			yyVAL.str = yyDollar[1].str
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:702
		{
			yyVAL.str = yyDollar[1].str
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:707
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:711
		{
			list := yyDollar[1].list
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = list
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:720
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:724
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:732
		{
			yyVAL.rangevar = &ast.RangeVar{
				RelName: yyDollar[1].str,
				Inh:     true, // inheritance enabled by default
			}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:739
		{
			// Handle complex qualified names like "schema.table.field" or "catalog.schema.table"
			// This creates a RangeVar from indirection - for now we'll handle 2-part names only
			// Full indirection support would require more complex parsing
			if len(yyDollar[2].list.Items) == 1 {
				if str, ok := yyDollar[2].list.Items[0].(*ast.String); ok {
					yyVAL.rangevar = &ast.RangeVar{
						SchemaName: yyDollar[1].str,
						RelName:    str.SVal,
						Inh:        true, // inheritance enabled by default
					}
				} else {
					// Complex indirection - return a simpler form for now
					yyVAL.rangevar = &ast.RangeVar{
						RelName: yyDollar[1].str,
						Inh:     true, // inheritance enabled by default
					}
				}
			} else {
				// Multiple indirection elements - return simple form
				yyVAL.rangevar = &ast.RangeVar{
					RelName: yyDollar[1].str,
					Inh:     true, // inheritance enabled by default
				}
			}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:768
		{
			yyVAL.list = yyDollar[2].list
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:769
		{
			yyVAL.list = nil
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:774
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].rangevar)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:778
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].rangevar)
			yyVAL.list = list
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:791
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:797
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:803
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:809
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:815
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:822
		{
			// GLOBAL is deprecated but still accepted
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_TEMP
			yyVAL.node = rangeVar
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:829
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_UNLOGGED
			yyVAL.node = rangeVar
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:835
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:841
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.RelPersistence = ast.RELPERSISTENCE_PERMANENT
			yyVAL.node = rangeVar
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:850
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:854
		{
			// Create a NodeList with the first ColId followed by all attrs
			nodes := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				nodes.Append(item)
			}
			yyVAL.list = nodes
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:866
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:870
		{
			list := yyDollar[1].list
			list.Append(yyDollar[3].list)
			yyVAL.list = list
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:880
		{
			yyVAL.str = "abort"
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:881
		{
			yyVAL.str = "absent"
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:882
		{
			yyVAL.str = "absolute"
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:883
		{
			yyVAL.str = "access"
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:884
		{
			yyVAL.str = "action"
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:885
		{
			yyVAL.str = "add"
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:886
		{
			yyVAL.str = "admin"
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:887
		{
			yyVAL.str = "after"
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:888
		{
			yyVAL.str = "aggregate"
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:889
		{
			yyVAL.str = "also"
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:890
		{
			yyVAL.str = "alter"
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:891
		{
			yyVAL.str = "always"
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:892
		{
			yyVAL.str = "asensitive"
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:893
		{
			yyVAL.str = "assertion"
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:894
		{
			yyVAL.str = "assignment"
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:895
		{
			yyVAL.str = "at"
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:896
		{
			yyVAL.str = "atomic"
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:897
		{
			yyVAL.str = "attach"
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:898
		{
			yyVAL.str = "attribute"
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:899
		{
			yyVAL.str = "backward"
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:900
		{
			yyVAL.str = "before"
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:901
		{
			yyVAL.str = "begin"
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:902
		{
			yyVAL.str = "breadth"
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:903
		{
			yyVAL.str = "by"
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:904
		{
			yyVAL.str = "cache"
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:905
		{
			yyVAL.str = "call"
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:906
		{
			yyVAL.str = "called"
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:907
		{
			yyVAL.str = "cascade"
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:908
		{
			yyVAL.str = "cascaded"
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:909
		{
			yyVAL.str = "catalog"
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:910
		{
			yyVAL.str = "chain"
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:911
		{
			yyVAL.str = "characteristics"
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:912
		{
			yyVAL.str = "checkpoint"
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:913
		{
			yyVAL.str = "class"
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:914
		{
			yyVAL.str = "close"
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:915
		{
			yyVAL.str = "cluster"
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:916
		{
			yyVAL.str = "columns"
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:917
		{
			yyVAL.str = "comment"
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:918
		{
			yyVAL.str = "comments"
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:919
		{
			yyVAL.str = "commit"
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:920
		{
			yyVAL.str = "committed"
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:921
		{
			yyVAL.str = "compression"
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:922
		{
			yyVAL.str = "conditional"
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:923
		{
			yyVAL.str = "configuration"
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:924
		{
			yyVAL.str = "conflict"
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:925
		{
			yyVAL.str = "connection"
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:926
		{
			yyVAL.str = "constraints"
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:927
		{
			yyVAL.str = "content"
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:928
		{
			yyVAL.str = "continue"
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:929
		{
			yyVAL.str = "conversion"
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:930
		{
			yyVAL.str = "copy"
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:931
		{
			yyVAL.str = "cost"
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:932
		{
			yyVAL.str = "csv"
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:933
		{
			yyVAL.str = "cube"
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:934
		{
			yyVAL.str = "current"
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:935
		{
			yyVAL.str = "cursor"
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:936
		{
			yyVAL.str = "cycle"
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:937
		{
			yyVAL.str = "data"
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:938
		{
			yyVAL.str = "database"
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:939
		{
			yyVAL.str = "day"
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:940
		{
			yyVAL.str = "deallocate"
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:941
		{
			yyVAL.str = "declare"
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:942
		{
			yyVAL.str = "defaults"
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:943
		{
			yyVAL.str = "deferred"
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:944
		{
			yyVAL.str = "definer"
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:945
		{
			yyVAL.str = "delete"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:946
		{
			yyVAL.str = "delimiter"
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:947
		{
			yyVAL.str = "delimiters"
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:948
		{
			yyVAL.str = "depends"
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:949
		{
			yyVAL.str = "depth"
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:950
		{
			yyVAL.str = "detach"
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:951
		{
			yyVAL.str = "dictionary"
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:952
		{
			yyVAL.str = "disable"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:953
		{
			yyVAL.str = "discard"
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:954
		{
			yyVAL.str = "document"
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:955
		{
			yyVAL.str = "domain"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:956
		{
			yyVAL.str = "double"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:957
		{
			yyVAL.str = "drop"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:958
		{
			yyVAL.str = "each"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:959
		{
			yyVAL.str = "empty"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:960
		{
			yyVAL.str = "enable"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:961
		{
			yyVAL.str = "encoding"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:962
		{
			yyVAL.str = "encrypted"
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:963
		{
			yyVAL.str = "enum"
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:964
		{
			yyVAL.str = "error"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:965
		{
			yyVAL.str = "escape"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:966
		{
			yyVAL.str = "event"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:967
		{
			yyVAL.str = "exclude"
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:968
		{
			yyVAL.str = "excluding"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:969
		{
			yyVAL.str = "exclusive"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:970
		{
			yyVAL.str = "execute"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:971
		{
			yyVAL.str = "explain"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:972
		{
			yyVAL.str = "expression"
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:973
		{
			yyVAL.str = "extension"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:974
		{
			yyVAL.str = "external"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:975
		{
			yyVAL.str = "family"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:976
		{
			yyVAL.str = "filter"
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:977
		{
			yyVAL.str = "finalize"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:978
		{
			yyVAL.str = "first"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:979
		{
			yyVAL.str = "following"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:980
		{
			yyVAL.str = "force"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:981
		{
			yyVAL.str = "format"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:982
		{
			yyVAL.str = "forward"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:983
		{
			yyVAL.str = "function"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:984
		{
			yyVAL.str = "functions"
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:985
		{
			yyVAL.str = "generated"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:986
		{
			yyVAL.str = "global"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:987
		{
			yyVAL.str = "granted"
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:988
		{
			yyVAL.str = "groups"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:989
		{
			yyVAL.str = "handler"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:990
		{
			yyVAL.str = "header"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:991
		{
			yyVAL.str = "hold"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:992
		{
			yyVAL.str = "hour"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:993
		{
			yyVAL.str = "identity"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:994
		{
			yyVAL.str = "if"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:995
		{
			yyVAL.str = "immediate"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:996
		{
			yyVAL.str = "immutable"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:997
		{
			yyVAL.str = "implicit"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:998
		{
			yyVAL.str = "import"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:999
		{
			yyVAL.str = "include"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1000
		{
			yyVAL.str = "including"
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1001
		{
			yyVAL.str = "increment"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1002
		{
			yyVAL.str = "indent"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1003
		{
			yyVAL.str = "index"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1004
		{
			yyVAL.str = "indexes"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1005
		{
			yyVAL.str = "inherit"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1006
		{
			yyVAL.str = "inherits"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1007
		{
			yyVAL.str = "inline"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1008
		{
			yyVAL.str = "input"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1009
		{
			yyVAL.str = "insensitive"
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1010
		{
			yyVAL.str = "insert"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1011
		{
			yyVAL.str = "instead"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1012
		{
			yyVAL.str = "invoker"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1013
		{
			yyVAL.str = "isolation"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1014
		{
			yyVAL.str = "keep"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1015
		{
			yyVAL.str = "key"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1016
		{
			yyVAL.str = "keys"
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1017
		{
			yyVAL.str = "label"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1018
		{
			yyVAL.str = "language"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1019
		{
			yyVAL.str = "large"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1020
		{
			yyVAL.str = "last"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1021
		{
			yyVAL.str = "leakproof"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1022
		{
			yyVAL.str = "level"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1023
		{
			yyVAL.str = "listen"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1024
		{
			yyVAL.str = "load"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1025
		{
			yyVAL.str = "local"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1026
		{
			yyVAL.str = "location"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1027
		{
			yyVAL.str = "lock"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1028
		{
			yyVAL.str = "locked"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1029
		{
			yyVAL.str = "logged"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1030
		{
			yyVAL.str = "mapping"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1031
		{
			yyVAL.str = "match"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1032
		{
			yyVAL.str = "matched"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1033
		{
			yyVAL.str = "materialized"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1034
		{
			yyVAL.str = "maxvalue"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1035
		{
			yyVAL.str = "merge"
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1036
		{
			yyVAL.str = "method"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1037
		{
			yyVAL.str = "minute"
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1038
		{
			yyVAL.str = "minvalue"
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1039
		{
			yyVAL.str = "mode"
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1040
		{
			yyVAL.str = "month"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1041
		{
			yyVAL.str = "move"
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1042
		{
			yyVAL.str = "name"
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1043
		{
			yyVAL.str = "names"
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1044
		{
			yyVAL.str = "nested"
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1045
		{
			yyVAL.str = "new"
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1046
		{
			yyVAL.str = "next"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1047
		{
			yyVAL.str = "nfc"
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1048
		{
			yyVAL.str = "nfd"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1049
		{
			yyVAL.str = "nfkc"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1050
		{
			yyVAL.str = "nfkd"
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1051
		{
			yyVAL.str = "no"
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1052
		{
			yyVAL.str = "normalized"
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1053
		{
			yyVAL.str = "nothing"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1054
		{
			yyVAL.str = "notify"
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1055
		{
			yyVAL.str = "nowait"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1056
		{
			yyVAL.str = "nulls"
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1057
		{
			yyVAL.str = "object"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1058
		{
			yyVAL.str = "of"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1059
		{
			yyVAL.str = "off"
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1060
		{
			yyVAL.str = "oids"
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1061
		{
			yyVAL.str = "old"
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1062
		{
			yyVAL.str = "omit"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1063
		{
			yyVAL.str = "operator"
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1064
		{
			yyVAL.str = "option"
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1065
		{
			yyVAL.str = "options"
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1066
		{
			yyVAL.str = "ordinality"
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1067
		{
			yyVAL.str = "others"
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1068
		{
			yyVAL.str = "over"
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1069
		{
			yyVAL.str = "overriding"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1070
		{
			yyVAL.str = "owned"
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1071
		{
			yyVAL.str = "owner"
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1072
		{
			yyVAL.str = "parallel"
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1073
		{
			yyVAL.str = "parameter"
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1074
		{
			yyVAL.str = "parser"
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1075
		{
			yyVAL.str = "partial"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1076
		{
			yyVAL.str = "partition"
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1077
		{
			yyVAL.str = "passing"
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1078
		{
			yyVAL.str = "password"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1079
		{
			yyVAL.str = "path"
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1080
		{
			yyVAL.str = "plan"
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1081
		{
			yyVAL.str = "plans"
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1082
		{
			yyVAL.str = "policy"
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1083
		{
			yyVAL.str = "preceding"
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1084
		{
			yyVAL.str = "prepare"
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1085
		{
			yyVAL.str = "prepared"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1086
		{
			yyVAL.str = "preserve"
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1087
		{
			yyVAL.str = "prior"
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1088
		{
			yyVAL.str = "privileges"
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1089
		{
			yyVAL.str = "procedural"
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1090
		{
			yyVAL.str = "procedure"
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1091
		{
			yyVAL.str = "procedures"
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1092
		{
			yyVAL.str = "program"
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1093
		{
			yyVAL.str = "publication"
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1094
		{
			yyVAL.str = "quote"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1095
		{
			yyVAL.str = "quotes"
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1096
		{
			yyVAL.str = "range"
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1097
		{
			yyVAL.str = "read"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1098
		{
			yyVAL.str = "reassign"
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1099
		{
			yyVAL.str = "recheck"
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1100
		{
			yyVAL.str = "recursive"
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1101
		{
			yyVAL.str = "ref"
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1102
		{
			yyVAL.str = "referencing"
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1103
		{
			yyVAL.str = "refresh"
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1104
		{
			yyVAL.str = "reindex"
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1105
		{
			yyVAL.str = "relative"
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1106
		{
			yyVAL.str = "release"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1107
		{
			yyVAL.str = "rename"
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1108
		{
			yyVAL.str = "repeatable"
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1109
		{
			yyVAL.str = "replace"
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1110
		{
			yyVAL.str = "replica"
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1111
		{
			yyVAL.str = "reset"
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1112
		{
			yyVAL.str = "restart"
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1113
		{
			yyVAL.str = "restrict"
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1114
		{
			yyVAL.str = "return"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1115
		{
			yyVAL.str = "returns"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1116
		{
			yyVAL.str = "revoke"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1117
		{
			yyVAL.str = "role"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1118
		{
			yyVAL.str = "rollback"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1119
		{
			yyVAL.str = "rollup"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1120
		{
			yyVAL.str = "routine"
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1121
		{
			yyVAL.str = "routines"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1122
		{
			yyVAL.str = "rows"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1123
		{
			yyVAL.str = "rule"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1124
		{
			yyVAL.str = "savepoint"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1125
		{
			yyVAL.str = "scalar"
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1126
		{
			yyVAL.str = "schema"
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1127
		{
			yyVAL.str = "schemas"
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1128
		{
			yyVAL.str = "scroll"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1129
		{
			yyVAL.str = "search"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1130
		{
			yyVAL.str = "second"
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1131
		{
			yyVAL.str = "security"
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1132
		{
			yyVAL.str = "sequence"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1133
		{
			yyVAL.str = "sequences"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1134
		{
			yyVAL.str = "serializable"
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1135
		{
			yyVAL.str = "server"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1136
		{
			yyVAL.str = "session"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1137
		{
			yyVAL.str = "set"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1138
		{
			yyVAL.str = "sets"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1139
		{
			yyVAL.str = "share"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1140
		{
			yyVAL.str = "show"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1141
		{
			yyVAL.str = "simple"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1142
		{
			yyVAL.str = "skip"
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1143
		{
			yyVAL.str = "snapshot"
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1144
		{
			yyVAL.str = "source"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1145
		{
			yyVAL.str = "sql"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1146
		{
			yyVAL.str = "stable"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1147
		{
			yyVAL.str = "standalone"
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1148
		{
			yyVAL.str = "start"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1149
		{
			yyVAL.str = "statement"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1150
		{
			yyVAL.str = "statistics"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1151
		{
			yyVAL.str = "stdin"
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1152
		{
			yyVAL.str = "stdout"
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1153
		{
			yyVAL.str = "storage"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1154
		{
			yyVAL.str = "stored"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1155
		{
			yyVAL.str = "strict"
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1156
		{
			yyVAL.str = "string"
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1157
		{
			yyVAL.str = "strip"
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1158
		{
			yyVAL.str = "subscription"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1159
		{
			yyVAL.str = "support"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1160
		{
			yyVAL.str = "sysid"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1161
		{
			yyVAL.str = "system"
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1162
		{
			yyVAL.str = "tables"
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1163
		{
			yyVAL.str = "tablespace"
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1164
		{
			yyVAL.str = "target"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1165
		{
			yyVAL.str = "temp"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1166
		{
			yyVAL.str = "template"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1167
		{
			yyVAL.str = "temporary"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1168
		{
			yyVAL.str = "text"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1169
		{
			yyVAL.str = "ties"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1170
		{
			yyVAL.str = "transaction"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1171
		{
			yyVAL.str = "transform"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1172
		{
			yyVAL.str = "trigger"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1173
		{
			yyVAL.str = "truncate"
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1174
		{
			yyVAL.str = "trusted"
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1175
		{
			yyVAL.str = "type"
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1176
		{
			yyVAL.str = "types"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1177
		{
			yyVAL.str = "uescape"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1178
		{
			yyVAL.str = "unbounded"
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1179
		{
			yyVAL.str = "uncommitted"
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1180
		{
			yyVAL.str = "unconditional"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1181
		{
			yyVAL.str = "unencrypted"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1182
		{
			yyVAL.str = "unknown"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1183
		{
			yyVAL.str = "unlisten"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1184
		{
			yyVAL.str = "unlogged"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1185
		{
			yyVAL.str = "until"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1186
		{
			yyVAL.str = "update"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1187
		{
			yyVAL.str = "vacuum"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1188
		{
			yyVAL.str = "valid"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1189
		{
			yyVAL.str = "validate"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1190
		{
			yyVAL.str = "validator"
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1191
		{
			yyVAL.str = "value"
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1192
		{
			yyVAL.str = "varying"
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1193
		{
			yyVAL.str = "version"
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1194
		{
			yyVAL.str = "view"
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1195
		{
			yyVAL.str = "views"
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1196
		{
			yyVAL.str = "volatile"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1197
		{
			yyVAL.str = "whitespace"
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1198
		{
			yyVAL.str = "within"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1199
		{
			yyVAL.str = "without"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1200
		{
			yyVAL.str = "work"
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1201
		{
			yyVAL.str = "wrapper"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1202
		{
			yyVAL.str = "write"
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1203
		{
			yyVAL.str = "xml"
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1204
		{
			yyVAL.str = "year"
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1205
		{
			yyVAL.str = "yes"
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1206
		{
			yyVAL.str = "zone"
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1220
		{
			yyVAL.str = "between"
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1221
		{
			yyVAL.str = "bigint"
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1222
		{
			yyVAL.str = "bit"
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1223
		{
			yyVAL.str = "boolean"
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1224
		{
			yyVAL.str = "char"
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1225
		{
			yyVAL.str = "character"
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1226
		{
			yyVAL.str = "coalesce"
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1227
		{
			yyVAL.str = "dec"
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1228
		{
			yyVAL.str = "decimal"
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1229
		{
			yyVAL.str = "exists"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1230
		{
			yyVAL.str = "extract"
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1231
		{
			yyVAL.str = "float"
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1232
		{
			yyVAL.str = "greatest"
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1233
		{
			yyVAL.str = "grouping"
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1234
		{
			yyVAL.str = "inout"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1235
		{
			yyVAL.str = "int"
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1236
		{
			yyVAL.str = "integer"
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1237
		{
			yyVAL.str = "interval"
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1238
		{
			yyVAL.str = "json"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1239
		{
			yyVAL.str = "json_array"
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1240
		{
			yyVAL.str = "json_arrayagg"
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1241
		{
			yyVAL.str = "json_exists"
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1242
		{
			yyVAL.str = "json_object"
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1243
		{
			yyVAL.str = "json_objectagg"
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1244
		{
			yyVAL.str = "json_query"
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1245
		{
			yyVAL.str = "json_scalar"
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1246
		{
			yyVAL.str = "json_serialize"
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1247
		{
			yyVAL.str = "json_table"
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1248
		{
			yyVAL.str = "json_value"
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1249
		{
			yyVAL.str = "least"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1250
		{
			yyVAL.str = "merge_action"
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1251
		{
			yyVAL.str = "national"
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1252
		{
			yyVAL.str = "nchar"
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1253
		{
			yyVAL.str = "none"
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1254
		{
			yyVAL.str = "normalize"
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1255
		{
			yyVAL.str = "nullif"
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1256
		{
			yyVAL.str = "numeric"
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1257
		{
			yyVAL.str = "out"
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1258
		{
			yyVAL.str = "overlay"
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1259
		{
			yyVAL.str = "position"
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1260
		{
			yyVAL.str = "precision"
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1261
		{
			yyVAL.str = "real"
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1262
		{
			yyVAL.str = "row"
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1263
		{
			yyVAL.str = "setof"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1264
		{
			yyVAL.str = "smallint"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1265
		{
			yyVAL.str = "substring"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1266
		{
			yyVAL.str = "time"
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1267
		{
			yyVAL.str = "timestamp"
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1268
		{
			yyVAL.str = "treat"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1269
		{
			yyVAL.str = "trim"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1270
		{
			yyVAL.str = "values"
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1271
		{
			yyVAL.str = "varchar"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1272
		{
			yyVAL.str = "xmlattributes"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1273
		{
			yyVAL.str = "xmlconcat"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1274
		{
			yyVAL.str = "xmlelement"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1275
		{
			yyVAL.str = "xmlexists"
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1276
		{
			yyVAL.str = "xmlforest"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1277
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1278
		{
			yyVAL.str = "xmlparse"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1279
		{
			yyVAL.str = "xmlpi"
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1280
		{
			yyVAL.str = "xmlroot"
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1281
		{
			yyVAL.str = "xmlserialize"
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1282
		{
			yyVAL.str = "xmltable"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1296
		{
			yyVAL.str = "authorization"
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1297
		{
			yyVAL.str = "binary"
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1298
		{
			yyVAL.str = "collation"
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1299
		{
			yyVAL.str = "concurrently"
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1300
		{
			yyVAL.str = "cross"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1301
		{
			yyVAL.str = "current_schema"
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1302
		{
			yyVAL.str = "freeze"
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1303
		{
			yyVAL.str = "full"
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1304
		{
			yyVAL.str = "ilike"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1305
		{
			yyVAL.str = "inner"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1306
		{
			yyVAL.str = "is"
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1307
		{
			yyVAL.str = "isnull"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1308
		{
			yyVAL.str = "join"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1309
		{
			yyVAL.str = "left"
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1310
		{
			yyVAL.str = "like"
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1311
		{
			yyVAL.str = "natural"
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1312
		{
			yyVAL.str = "notnull"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1313
		{
			yyVAL.str = "outer"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1314
		{
			yyVAL.str = "overlaps"
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1315
		{
			yyVAL.str = "right"
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1316
		{
			yyVAL.str = "similar"
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1317
		{
			yyVAL.str = "tablesample"
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1318
		{
			yyVAL.str = "verbose"
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1328
		{
			yyVAL.str = "all"
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1329
		{
			yyVAL.str = "analyse"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1330
		{
			yyVAL.str = "analyze"
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1331
		{
			yyVAL.str = "and"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1332
		{
			yyVAL.str = "any"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1333
		{
			yyVAL.str = "array"
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1334
		{
			yyVAL.str = "as"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1335
		{
			yyVAL.str = "asc"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1336
		{
			yyVAL.str = "asymmetric"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1337
		{
			yyVAL.str = "both"
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1338
		{
			yyVAL.str = "case"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1339
		{
			yyVAL.str = "cast"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1340
		{
			yyVAL.str = "check"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1341
		{
			yyVAL.str = "collate"
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1342
		{
			yyVAL.str = "column"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1343
		{
			yyVAL.str = "constraint"
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1344
		{
			yyVAL.str = "create"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1345
		{
			yyVAL.str = "current_catalog"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1346
		{
			yyVAL.str = "current_date"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1347
		{
			yyVAL.str = "current_role"
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1348
		{
			yyVAL.str = "current_time"
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1349
		{
			yyVAL.str = "current_timestamp"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1350
		{
			yyVAL.str = "current_user"
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1351
		{
			yyVAL.str = "default"
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1352
		{
			yyVAL.str = "deferrable"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1353
		{
			yyVAL.str = "desc"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1354
		{
			yyVAL.str = "distinct"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1355
		{
			yyVAL.str = "do"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1356
		{
			yyVAL.str = "else"
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1357
		{
			yyVAL.str = "end"
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1358
		{
			yyVAL.str = "except"
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1359
		{
			yyVAL.str = "false"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1360
		{
			yyVAL.str = "fetch"
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1361
		{
			yyVAL.str = "for"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1362
		{
			yyVAL.str = "foreign"
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1363
		{
			yyVAL.str = "from"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1364
		{
			yyVAL.str = "grant"
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1365
		{
			yyVAL.str = "group"
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1366
		{
			yyVAL.str = "having"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1367
		{
			yyVAL.str = "in"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1368
		{
			yyVAL.str = "initially"
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1369
		{
			yyVAL.str = "intersect"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1370
		{
			yyVAL.str = "into"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1371
		{
			yyVAL.str = "lateral"
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1372
		{
			yyVAL.str = "leading"
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1373
		{
			yyVAL.str = "limit"
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1374
		{
			yyVAL.str = "localtime"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1375
		{
			yyVAL.str = "localtimestamp"
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1376
		{
			yyVAL.str = "not"
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1377
		{
			yyVAL.str = "null"
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1378
		{
			yyVAL.str = "offset"
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1379
		{
			yyVAL.str = "on"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1380
		{
			yyVAL.str = "only"
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1381
		{
			yyVAL.str = "or"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1382
		{
			yyVAL.str = "order"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1383
		{
			yyVAL.str = "placing"
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1384
		{
			yyVAL.str = "primary"
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1385
		{
			yyVAL.str = "references"
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1386
		{
			yyVAL.str = "returning"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1387
		{
			yyVAL.str = "select"
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1388
		{
			yyVAL.str = "session_user"
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1389
		{
			yyVAL.str = "some"
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1390
		{
			yyVAL.str = "symmetric"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1391
		{
			yyVAL.str = "system_user"
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1392
		{
			yyVAL.str = "table"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1393
		{
			yyVAL.str = "then"
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1394
		{
			yyVAL.str = "to"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1395
		{
			yyVAL.str = "trailing"
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1396
		{
			yyVAL.str = "true"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1397
		{
			yyVAL.str = "union"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1398
		{
			yyVAL.str = "unique"
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1399
		{
			yyVAL.str = "user"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1400
		{
			yyVAL.str = "using"
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1401
		{
			yyVAL.str = "variadic"
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1402
		{
			yyVAL.str = "when"
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1403
		{
			yyVAL.str = "where"
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1404
		{
			yyVAL.str = "window"
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1405
		{
			yyVAL.str = "with"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1418
		{
			yyVAL.str = "abort"
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1419
		{
			yyVAL.str = "absent"
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1420
		{
			yyVAL.str = "absolute"
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1421
		{
			yyVAL.str = "access"
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1422
		{
			yyVAL.str = "action"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1423
		{
			yyVAL.str = "add"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1424
		{
			yyVAL.str = "admin"
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1425
		{
			yyVAL.str = "after"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1426
		{
			yyVAL.str = "aggregate"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1427
		{
			yyVAL.str = "all"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1428
		{
			yyVAL.str = "also"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1429
		{
			yyVAL.str = "alter"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1430
		{
			yyVAL.str = "always"
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1431
		{
			yyVAL.str = "analyse"
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1432
		{
			yyVAL.str = "analyze"
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1433
		{
			yyVAL.str = "and"
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1434
		{
			yyVAL.str = "any"
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1435
		{
			yyVAL.str = "asc"
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1436
		{
			yyVAL.str = "asensitive"
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1437
		{
			yyVAL.str = "assertion"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1438
		{
			yyVAL.str = "assignment"
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1439
		{
			yyVAL.str = "asymmetric"
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1440
		{
			yyVAL.str = "at"
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1441
		{
			yyVAL.str = "atomic"
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1442
		{
			yyVAL.str = "attach"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1443
		{
			yyVAL.str = "attribute"
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1444
		{
			yyVAL.str = "authorization"
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1445
		{
			yyVAL.str = "backward"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1446
		{
			yyVAL.str = "before"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1447
		{
			yyVAL.str = "begin"
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1448
		{
			yyVAL.str = "between"
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1449
		{
			yyVAL.str = "bigint"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1450
		{
			yyVAL.str = "binary"
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1451
		{
			yyVAL.str = "bit"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1452
		{
			yyVAL.str = "boolean"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1453
		{
			yyVAL.str = "both"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1454
		{
			yyVAL.str = "breadth"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1455
		{
			yyVAL.str = "by"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1456
		{
			yyVAL.str = "cache"
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1457
		{
			yyVAL.str = "call"
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1458
		{
			yyVAL.str = "called"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1459
		{
			yyVAL.str = "cascade"
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1460
		{
			yyVAL.str = "cascaded"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1461
		{
			yyVAL.str = "case"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1462
		{
			yyVAL.str = "cast"
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1463
		{
			yyVAL.str = "catalog"
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1464
		{
			yyVAL.str = "chain"
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1465
		{
			yyVAL.str = "characteristics"
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1466
		{
			yyVAL.str = "check"
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1467
		{
			yyVAL.str = "checkpoint"
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1468
		{
			yyVAL.str = "class"
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1469
		{
			yyVAL.str = "close"
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1470
		{
			yyVAL.str = "cluster"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1471
		{
			yyVAL.str = "coalesce"
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1472
		{
			yyVAL.str = "collate"
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1473
		{
			yyVAL.str = "collation"
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1474
		{
			yyVAL.str = "column"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1475
		{
			yyVAL.str = "columns"
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1476
		{
			yyVAL.str = "comment"
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1477
		{
			yyVAL.str = "comments"
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1478
		{
			yyVAL.str = "commit"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1479
		{
			yyVAL.str = "committed"
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1480
		{
			yyVAL.str = "compression"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1481
		{
			yyVAL.str = "concurrently"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1482
		{
			yyVAL.str = "conditional"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1483
		{
			yyVAL.str = "configuration"
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1484
		{
			yyVAL.str = "conflict"
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1485
		{
			yyVAL.str = "connection"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1486
		{
			yyVAL.str = "constraint"
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1487
		{
			yyVAL.str = "constraints"
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1488
		{
			yyVAL.str = "content"
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1489
		{
			yyVAL.str = "continue"
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1490
		{
			yyVAL.str = "conversion"
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1491
		{
			yyVAL.str = "copy"
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1492
		{
			yyVAL.str = "cost"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1493
		{
			yyVAL.str = "cross"
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1494
		{
			yyVAL.str = "csv"
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1495
		{
			yyVAL.str = "cube"
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1496
		{
			yyVAL.str = "current"
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1497
		{
			yyVAL.str = "current_catalog"
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1498
		{
			yyVAL.str = "current_date"
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1499
		{
			yyVAL.str = "current_role"
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1500
		{
			yyVAL.str = "current_schema"
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1501
		{
			yyVAL.str = "current_time"
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1502
		{
			yyVAL.str = "current_timestamp"
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1503
		{
			yyVAL.str = "current_user"
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1504
		{
			yyVAL.str = "cursor"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1505
		{
			yyVAL.str = "cycle"
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1506
		{
			yyVAL.str = "data"
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1507
		{
			yyVAL.str = "database"
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1508
		{
			yyVAL.str = "deallocate"
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1509
		{
			yyVAL.str = "dec"
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1510
		{
			yyVAL.str = "decimal"
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1511
		{
			yyVAL.str = "declare"
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1512
		{
			yyVAL.str = "default"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1513
		{
			yyVAL.str = "defaults"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1514
		{
			yyVAL.str = "deferrable"
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1515
		{
			yyVAL.str = "deferred"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1516
		{
			yyVAL.str = "definer"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1517
		{
			yyVAL.str = "delete"
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1518
		{
			yyVAL.str = "delimiter"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1519
		{
			yyVAL.str = "delimiters"
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1520
		{
			yyVAL.str = "depends"
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1521
		{
			yyVAL.str = "depth"
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1522
		{
			yyVAL.str = "desc"
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1523
		{
			yyVAL.str = "detach"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1524
		{
			yyVAL.str = "dictionary"
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1525
		{
			yyVAL.str = "disable"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1526
		{
			yyVAL.str = "discard"
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1527
		{
			yyVAL.str = "distinct"
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1528
		{
			yyVAL.str = "do"
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1529
		{
			yyVAL.str = "document"
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1530
		{
			yyVAL.str = "domain"
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1531
		{
			yyVAL.str = "double"
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1532
		{
			yyVAL.str = "drop"
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1533
		{
			yyVAL.str = "each"
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1534
		{
			yyVAL.str = "else"
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1535
		{
			yyVAL.str = "empty"
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1536
		{
			yyVAL.str = "enable"
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1537
		{
			yyVAL.str = "encoding"
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1538
		{
			yyVAL.str = "encrypted"
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1539
		{
			yyVAL.str = "end"
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1540
		{
			yyVAL.str = "enum"
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1541
		{
			yyVAL.str = "error"
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1542
		{
			yyVAL.str = "escape"
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1543
		{
			yyVAL.str = "event"
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1544
		{
			yyVAL.str = "exclude"
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1545
		{
			yyVAL.str = "excluding"
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1546
		{
			yyVAL.str = "exclusive"
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1547
		{
			yyVAL.str = "execute"
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1548
		{
			yyVAL.str = "exists"
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1549
		{
			yyVAL.str = "explain"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1550
		{
			yyVAL.str = "expression"
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1551
		{
			yyVAL.str = "extension"
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1552
		{
			yyVAL.str = "external"
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1553
		{
			yyVAL.str = "extract"
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1554
		{
			yyVAL.str = "false"
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1555
		{
			yyVAL.str = "family"
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1556
		{
			yyVAL.str = "finalize"
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1557
		{
			yyVAL.str = "first"
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1558
		{
			yyVAL.str = "float"
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1559
		{
			yyVAL.str = "following"
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1560
		{
			yyVAL.str = "force"
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1561
		{
			yyVAL.str = "foreign"
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1562
		{
			yyVAL.str = "format"
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1563
		{
			yyVAL.str = "forward"
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1564
		{
			yyVAL.str = "freeze"
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1565
		{
			yyVAL.str = "full"
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1566
		{
			yyVAL.str = "function"
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1567
		{
			yyVAL.str = "functions"
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1568
		{
			yyVAL.str = "generated"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1569
		{
			yyVAL.str = "global"
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1570
		{
			yyVAL.str = "granted"
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1571
		{
			yyVAL.str = "greatest"
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1572
		{
			yyVAL.str = "grouping"
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1573
		{
			yyVAL.str = "groups"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1574
		{
			yyVAL.str = "handler"
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1575
		{
			yyVAL.str = "header"
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1576
		{
			yyVAL.str = "hold"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1577
		{
			yyVAL.str = "identity"
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1578
		{
			yyVAL.str = "if"
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1579
		{
			yyVAL.str = "ilike"
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1580
		{
			yyVAL.str = "immediate"
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1581
		{
			yyVAL.str = "immutable"
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1582
		{
			yyVAL.str = "implicit"
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1583
		{
			yyVAL.str = "import"
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1584
		{
			yyVAL.str = "in"
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1585
		{
			yyVAL.str = "include"
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1586
		{
			yyVAL.str = "including"
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1587
		{
			yyVAL.str = "increment"
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1588
		{
			yyVAL.str = "indent"
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1589
		{
			yyVAL.str = "index"
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1590
		{
			yyVAL.str = "indexes"
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1591
		{
			yyVAL.str = "inherit"
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1592
		{
			yyVAL.str = "inherits"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1593
		{
			yyVAL.str = "initially"
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1594
		{
			yyVAL.str = "inline"
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1595
		{
			yyVAL.str = "inner"
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1596
		{
			yyVAL.str = "inout"
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1597
		{
			yyVAL.str = "input"
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1598
		{
			yyVAL.str = "insensitive"
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1599
		{
			yyVAL.str = "insert"
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1600
		{
			yyVAL.str = "instead"
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1601
		{
			yyVAL.str = "int"
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1602
		{
			yyVAL.str = "integer"
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1603
		{
			yyVAL.str = "interval"
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1604
		{
			yyVAL.str = "invoker"
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1605
		{
			yyVAL.str = "is"
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1606
		{
			yyVAL.str = "isolation"
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1607
		{
			yyVAL.str = "join"
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1608
		{
			yyVAL.str = "json"
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1609
		{
			yyVAL.str = "json_array"
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1610
		{
			yyVAL.str = "json_arrayagg"
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1611
		{
			yyVAL.str = "json_exists"
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1612
		{
			yyVAL.str = "json_object"
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1613
		{
			yyVAL.str = "json_objectagg"
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1614
		{
			yyVAL.str = "json_query"
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1615
		{
			yyVAL.str = "json_scalar"
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1616
		{
			yyVAL.str = "json_serialize"
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1617
		{
			yyVAL.str = "json_table"
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1618
		{
			yyVAL.str = "json_value"
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1619
		{
			yyVAL.str = "keep"
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1620
		{
			yyVAL.str = "key"
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1621
		{
			yyVAL.str = "keys"
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1622
		{
			yyVAL.str = "label"
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1623
		{
			yyVAL.str = "language"
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1624
		{
			yyVAL.str = "large"
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1625
		{
			yyVAL.str = "last"
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1626
		{
			yyVAL.str = "lateral"
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1627
		{
			yyVAL.str = "leading"
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1628
		{
			yyVAL.str = "leakproof"
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1629
		{
			yyVAL.str = "least"
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1630
		{
			yyVAL.str = "left"
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1631
		{
			yyVAL.str = "level"
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1632
		{
			yyVAL.str = "like"
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1633
		{
			yyVAL.str = "listen"
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1634
		{
			yyVAL.str = "load"
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1635
		{
			yyVAL.str = "local"
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1636
		{
			yyVAL.str = "localtime"
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1637
		{
			yyVAL.str = "localtimestamp"
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1638
		{
			yyVAL.str = "location"
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1639
		{
			yyVAL.str = "lock"
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1640
		{
			yyVAL.str = "locked"
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1641
		{
			yyVAL.str = "logged"
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1642
		{
			yyVAL.str = "mapping"
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1643
		{
			yyVAL.str = "match"
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1644
		{
			yyVAL.str = "matched"
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1645
		{
			yyVAL.str = "materialized"
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1646
		{
			yyVAL.str = "maxvalue"
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1647
		{
			yyVAL.str = "merge"
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1648
		{
			yyVAL.str = "merge_action"
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1649
		{
			yyVAL.str = "method"
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1650
		{
			yyVAL.str = "minvalue"
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1651
		{
			yyVAL.str = "mode"
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1652
		{
			yyVAL.str = "move"
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1653
		{
			yyVAL.str = "name"
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1654
		{
			yyVAL.str = "names"
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1655
		{
			yyVAL.str = "national"
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1656
		{
			yyVAL.str = "natural"
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1657
		{
			yyVAL.str = "nchar"
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1658
		{
			yyVAL.str = "nested"
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1659
		{
			yyVAL.str = "new"
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1660
		{
			yyVAL.str = "next"
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1661
		{
			yyVAL.str = "nfc"
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1662
		{
			yyVAL.str = "nfd"
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1663
		{
			yyVAL.str = "nfkc"
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1664
		{
			yyVAL.str = "nfkd"
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1665
		{
			yyVAL.str = "no"
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1666
		{
			yyVAL.str = "none"
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1667
		{
			yyVAL.str = "normalize"
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1668
		{
			yyVAL.str = "normalized"
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1669
		{
			yyVAL.str = "not"
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1670
		{
			yyVAL.str = "nothing"
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1671
		{
			yyVAL.str = "notify"
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1672
		{
			yyVAL.str = "nowait"
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1673
		{
			yyVAL.str = "null"
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1674
		{
			yyVAL.str = "nullif"
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1675
		{
			yyVAL.str = "nulls"
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1676
		{
			yyVAL.str = "numeric"
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1677
		{
			yyVAL.str = "object"
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1678
		{
			yyVAL.str = "of"
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1679
		{
			yyVAL.str = "off"
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1680
		{
			yyVAL.str = "oids"
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1681
		{
			yyVAL.str = "old"
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1682
		{
			yyVAL.str = "omit"
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1683
		{
			yyVAL.str = "only"
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1684
		{
			yyVAL.str = "operator"
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1685
		{
			yyVAL.str = "option"
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1686
		{
			yyVAL.str = "options"
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1687
		{
			yyVAL.str = "or"
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1688
		{
			yyVAL.str = "ordinality"
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1689
		{
			yyVAL.str = "others"
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1690
		{
			yyVAL.str = "out"
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1691
		{
			yyVAL.str = "outer"
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1692
		{
			yyVAL.str = "overlay"
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1693
		{
			yyVAL.str = "overriding"
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1694
		{
			yyVAL.str = "owned"
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1695
		{
			yyVAL.str = "owner"
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1696
		{
			yyVAL.str = "parallel"
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1697
		{
			yyVAL.str = "parameter"
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1698
		{
			yyVAL.str = "parser"
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1699
		{
			yyVAL.str = "partial"
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1700
		{
			yyVAL.str = "partition"
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1701
		{
			yyVAL.str = "passing"
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1702
		{
			yyVAL.str = "password"
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1703
		{
			yyVAL.str = "path"
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1704
		{
			yyVAL.str = "placing"
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1705
		{
			yyVAL.str = "plan"
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1706
		{
			yyVAL.str = "plans"
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1707
		{
			yyVAL.str = "policy"
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1708
		{
			yyVAL.str = "position"
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1709
		{
			yyVAL.str = "preceding"
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1710
		{
			yyVAL.str = "prepare"
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1711
		{
			yyVAL.str = "prepared"
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1712
		{
			yyVAL.str = "preserve"
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1713
		{
			yyVAL.str = "primary"
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1714
		{
			yyVAL.str = "prior"
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1715
		{
			yyVAL.str = "privileges"
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1716
		{
			yyVAL.str = "procedural"
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1717
		{
			yyVAL.str = "procedure"
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1718
		{
			yyVAL.str = "procedures"
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1719
		{
			yyVAL.str = "program"
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1720
		{
			yyVAL.str = "publication"
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1721
		{
			yyVAL.str = "quote"
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1722
		{
			yyVAL.str = "quotes"
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1723
		{
			yyVAL.str = "range"
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1724
		{
			yyVAL.str = "read"
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1725
		{
			yyVAL.str = "real"
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1726
		{
			yyVAL.str = "reassign"
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1727
		{
			yyVAL.str = "recheck"
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1728
		{
			yyVAL.str = "recursive"
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1729
		{
			yyVAL.str = "ref"
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1730
		{
			yyVAL.str = "references"
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1731
		{
			yyVAL.str = "referencing"
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1732
		{
			yyVAL.str = "refresh"
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1733
		{
			yyVAL.str = "reindex"
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1734
		{
			yyVAL.str = "relative"
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1735
		{
			yyVAL.str = "release"
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1736
		{
			yyVAL.str = "rename"
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1737
		{
			yyVAL.str = "repeatable"
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1738
		{
			yyVAL.str = "replace"
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1739
		{
			yyVAL.str = "replica"
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1740
		{
			yyVAL.str = "reset"
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1741
		{
			yyVAL.str = "restart"
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1742
		{
			yyVAL.str = "restrict"
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1743
		{
			yyVAL.str = "return"
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1744
		{
			yyVAL.str = "returns"
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1745
		{
			yyVAL.str = "revoke"
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1746
		{
			yyVAL.str = "right"
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1747
		{
			yyVAL.str = "role"
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1748
		{
			yyVAL.str = "rollback"
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1749
		{
			yyVAL.str = "rollup"
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1750
		{
			yyVAL.str = "routine"
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1751
		{
			yyVAL.str = "routines"
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1752
		{
			yyVAL.str = "row"
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1753
		{
			yyVAL.str = "rows"
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1754
		{
			yyVAL.str = "rule"
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1755
		{
			yyVAL.str = "savepoint"
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1756
		{
			yyVAL.str = "scalar"
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1757
		{
			yyVAL.str = "schema"
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1758
		{
			yyVAL.str = "schemas"
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1759
		{
			yyVAL.str = "scroll"
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1760
		{
			yyVAL.str = "search"
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1761
		{
			yyVAL.str = "security"
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1762
		{
			yyVAL.str = "select"
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1763
		{
			yyVAL.str = "sequence"
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1764
		{
			yyVAL.str = "sequences"
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1765
		{
			yyVAL.str = "serializable"
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1766
		{
			yyVAL.str = "server"
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1767
		{
			yyVAL.str = "session"
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1768
		{
			yyVAL.str = "session_user"
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1769
		{
			yyVAL.str = "set"
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1770
		{
			yyVAL.str = "setof"
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1771
		{
			yyVAL.str = "sets"
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1772
		{
			yyVAL.str = "share"
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1773
		{
			yyVAL.str = "show"
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1774
		{
			yyVAL.str = "similar"
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1775
		{
			yyVAL.str = "simple"
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1776
		{
			yyVAL.str = "skip"
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1777
		{
			yyVAL.str = "smallint"
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1778
		{
			yyVAL.str = "snapshot"
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1779
		{
			yyVAL.str = "some"
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1780
		{
			yyVAL.str = "source"
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1781
		{
			yyVAL.str = "sql"
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1782
		{
			yyVAL.str = "stable"
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1783
		{
			yyVAL.str = "standalone"
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1784
		{
			yyVAL.str = "start"
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1785
		{
			yyVAL.str = "statement"
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1786
		{
			yyVAL.str = "statistics"
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1787
		{
			yyVAL.str = "stdin"
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1788
		{
			yyVAL.str = "stdout"
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1789
		{
			yyVAL.str = "storage"
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1790
		{
			yyVAL.str = "stored"
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1791
		{
			yyVAL.str = "strict"
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1792
		{
			yyVAL.str = "string"
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1793
		{
			yyVAL.str = "strip"
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1794
		{
			yyVAL.str = "subscription"
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1795
		{
			yyVAL.str = "substring"
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1796
		{
			yyVAL.str = "support"
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1797
		{
			yyVAL.str = "symmetric"
		}
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1798
		{
			yyVAL.str = "sysid"
		}
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1799
		{
			yyVAL.str = "system"
		}
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1800
		{
			yyVAL.str = "system_user"
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1801
		{
			yyVAL.str = "table"
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1802
		{
			yyVAL.str = "tables"
		}
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1803
		{
			yyVAL.str = "tablesample"
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1804
		{
			yyVAL.str = "tablespace"
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1805
		{
			yyVAL.str = "target"
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1806
		{
			yyVAL.str = "temp"
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1807
		{
			yyVAL.str = "template"
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1808
		{
			yyVAL.str = "temporary"
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1809
		{
			yyVAL.str = "text"
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1810
		{
			yyVAL.str = "then"
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1811
		{
			yyVAL.str = "ties"
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1812
		{
			yyVAL.str = "time"
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1813
		{
			yyVAL.str = "timestamp"
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1814
		{
			yyVAL.str = "trailing"
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1815
		{
			yyVAL.str = "transaction"
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1816
		{
			yyVAL.str = "transform"
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1817
		{
			yyVAL.str = "treat"
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1818
		{
			yyVAL.str = "trigger"
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1819
		{
			yyVAL.str = "trim"
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1820
		{
			yyVAL.str = "true"
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1821
		{
			yyVAL.str = "truncate"
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1822
		{
			yyVAL.str = "trusted"
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1823
		{
			yyVAL.str = "type"
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1824
		{
			yyVAL.str = "types"
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1825
		{
			yyVAL.str = "uescape"
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1826
		{
			yyVAL.str = "unbounded"
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1827
		{
			yyVAL.str = "uncommitted"
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1828
		{
			yyVAL.str = "unconditional"
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1829
		{
			yyVAL.str = "unencrypted"
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1830
		{
			yyVAL.str = "unique"
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1831
		{
			yyVAL.str = "unknown"
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1832
		{
			yyVAL.str = "unlisten"
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1833
		{
			yyVAL.str = "unlogged"
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1834
		{
			yyVAL.str = "until"
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1835
		{
			yyVAL.str = "update"
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1836
		{
			yyVAL.str = "user"
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1837
		{
			yyVAL.str = "using"
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1838
		{
			yyVAL.str = "vacuum"
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1839
		{
			yyVAL.str = "valid"
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1840
		{
			yyVAL.str = "validate"
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1841
		{
			yyVAL.str = "validator"
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1842
		{
			yyVAL.str = "value"
		}
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1843
		{
			yyVAL.str = "values"
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1844
		{
			yyVAL.str = "varchar"
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1845
		{
			yyVAL.str = "variadic"
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1846
		{
			yyVAL.str = "verbose"
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1847
		{
			yyVAL.str = "version"
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1848
		{
			yyVAL.str = "view"
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1849
		{
			yyVAL.str = "views"
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1850
		{
			yyVAL.str = "volatile"
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1851
		{
			yyVAL.str = "when"
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1852
		{
			yyVAL.str = "whitespace"
		}
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1853
		{
			yyVAL.str = "work"
		}
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1854
		{
			yyVAL.str = "wrapper"
		}
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1855
		{
			yyVAL.str = "write"
		}
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1856
		{
			yyVAL.str = "xml"
		}
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1857
		{
			yyVAL.str = "xmlattributes"
		}
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1858
		{
			yyVAL.str = "xmlconcat"
		}
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1859
		{
			yyVAL.str = "xmlelement"
		}
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1860
		{
			yyVAL.str = "xmlexists"
		}
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1861
		{
			yyVAL.str = "xmlforest"
		}
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1862
		{
			yyVAL.str = "xmlnamespaces"
		}
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1863
		{
			yyVAL.str = "xmlparse"
		}
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1864
		{
			yyVAL.str = "xmlpi"
		}
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1865
		{
			yyVAL.str = "xmlroot"
		}
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1866
		{
			yyVAL.str = "xmlserialize"
		}
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1867
		{
			yyVAL.str = "xmltable"
		}
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1868
		{
			yyVAL.str = "yes"
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1869
		{
			yyVAL.str = "zone"
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:1884
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1060:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1886
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1061:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1890
		{
			collateClause := ast.NewCollateClause(yyDollar[3].list)
			collateClause.Arg = yyDollar[1].node
			yyVAL.node = collateClause
		}
	case 1062:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:1896
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[1].node), 0)
		}
	case 1063:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1901
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("timezone"))
			yyVAL.node = ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[1].node), 0)
		}
	case 1064:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1906
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1065:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1911
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1066:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1916
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1067:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1921
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1068:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1926
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1069:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1931
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1936
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1071:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1941
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1946
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1951
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1074:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1956
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1961
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1966
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1077:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1971
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1078:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1976
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[2].list, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1079:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1980
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, yyDollar[1].list, nil, yyDollar[2].node, 0)
		}
	case 1080:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1984
		{
			yyVAL.node = ast.NewBoolExpr(ast.AND_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1081:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:1988
		{
			yyVAL.node = ast.NewBoolExpr(ast.OR_EXPR, ast.NewNodeList(yyDollar[1].node, yyDollar[3].node))
		}
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1992
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1083:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:1996
		{
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(yyDollar[2].node))
		}
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2000
		{
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1085:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2005
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1086:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2012
		{
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1087:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2017
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_LIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1088:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2024
		{
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1089:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2029
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[3].node, yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1090:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2036
		{
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1091:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2041
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("like_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("!~~*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_ILIKE, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1092:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2048
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1093:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2055
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
			name := ast.NewNodeList(ast.NewString("~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1094:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2062
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1095:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2069
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("similar_to_escape"))
			escapeFunc := ast.NewFuncCall(funcName, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
			name := ast.NewNodeList(ast.NewString("!~"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_SIMILAR, name, yyDollar[1].node, escapeFunc, 0)
		}
	case 1096:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2076
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1097:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2080
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NULL)
		}
	case 1098:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2084
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1099:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2088
		{
			yyVAL.node = ast.NewNullTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_NULL)
		}
	case 1100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2092
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("overlaps"))
			leftList := yyDollar[1].list
			rightList := yyDollar[3].list
			combinedList := ast.NewNodeList()
			combinedList.Items = append(leftList.Items, rightList.Items...)
			yyVAL.node = ast.NewFuncCall(funcName, combinedList, 0)
		}
	case 1101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2101
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_TRUE)
		}
	case 1102:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2105
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_TRUE)
		}
	case 1103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2109
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_FALSE)
		}
	case 1104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2113
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_FALSE)
		}
	case 1105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2117
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_UNKNOWN)
		}
	case 1106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2121
		{
			yyVAL.node = ast.NewBooleanTest(yyDollar[1].node.(ast.Expression), ast.IS_NOT_UNKNOWN)
		}
	case 1107:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2125
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_DISTINCT, name, yyDollar[1].node, yyDollar[5].node, 0)
		}
	case 1108:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2130
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_DISTINCT, name, yyDollar[1].node, yyDollar[6].node, 0)
		}
	case 1109:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2135
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1110:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2140
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1111:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2145
		{
			name := ast.NewNodeList(ast.NewString("BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[4].node, yyDollar[6].node), 0)
		}
	case 1112:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:2150
		{
			name := ast.NewNodeList(ast.NewString("NOT BETWEEN SYMMETRIC"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_NOT_BETWEEN_SYM, name, yyDollar[1].node, ast.NewNodeList(yyDollar[5].node, yyDollar[7].node), 0)
		}
	case 1113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2155
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2160
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_IN, name, yyDollar[1].node, yyDollar[4].node, 0)
		}
	case 1115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2165
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			sublink := ast.NewSubLink(subLinkType, yyDollar[4].stmt)
			sublink.Testexpr = yyDollar[1].node
			sublink.OperName = operName
			yyVAL.node = sublink
		}
	case 1116:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2174
		{
			subLinkType := ast.SubLinkType(yyDollar[3].ival)
			operName := yyDollar[2].list
			if subLinkType == ast.ANY_SUBLINK {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ANY, operName, yyDollar[1].node, yyDollar[5].node, 0)
			} else {
				yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP_ALL, operName, yyDollar[1].node, yyDollar[5].node, 0)
			}
		}
	case 1117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2184
		{
			yylex.Error("UNIQUE predicate is not yet implemented")
		}
	case 1118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2188
		{
			args := []ast.Expression{yyDollar[1].node.(ast.Expression)}
			yyVAL.node = ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
		}
	case 1119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2193
		{
			args := []ast.Expression{yyDollar[1].node.(ast.Expression)}
			xmlExpr := ast.NewXmlExpr(ast.IS_DOCUMENT, "", nil, nil, args, ast.XMLOPTION_DOCUMENT, false, 0, 0, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(xmlExpr))
		}
	case 1120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2199
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2205
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[3].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			yyVAL.node = ast.NewFuncCall(funcName, args, 0)
		}
	case 1122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2212
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			args := ast.NewNodeList(yyDollar[1].node)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1123:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2219
		{
			funcName := ast.NewNodeList(ast.NewString("pg_catalog"), ast.NewString("is_normalized"))
			normalFormConst := ast.NewA_Const(ast.NewString(yyDollar[4].str), 0)
			args := ast.NewNodeList(yyDollar[1].node, normalFormConst)
			isNormFunc := ast.NewFuncCall(funcName, args, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(isNormFunc))
		}
	case 1124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2227
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[3].ival)
			uniqueKeys := yyDollar[4].bval
			yyVAL.node = ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
		}
	case 1125:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2244
		{
			format := ast.NewJsonFormat(ast.JS_FORMAT_DEFAULT, ast.JS_ENC_DEFAULT, 0)
			itemType := ast.JsonValueType(yyDollar[4].ival)
			uniqueKeys := yyDollar[5].bval
			jsonPredicate := ast.NewJsonIsPredicate(yyDollar[1].node, format, itemType, uniqueKeys, 0)
			yyVAL.node = ast.NewBoolExpr(ast.NOT_EXPR, ast.NewNodeList(jsonPredicate))
		}
	case 1126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2263
		{
			yyVAL.node = ast.NewSetToDefault(0, 0, 0)
		}
	case 1127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2268
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2270
		{
			yyVAL.node = ast.NewTypeCast(yyDollar[1].node, yyDollar[3].typnam, 0)
		}
	case 1129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2274
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2279
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, nil, yyDollar[2].node, 0)
		}
	case 1131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2284
		{
			name := ast.NewNodeList(ast.NewString("+"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2289
		{
			name := ast.NewNodeList(ast.NewString("-"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2294
		{
			name := ast.NewNodeList(ast.NewString("*"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2299
		{
			name := ast.NewNodeList(ast.NewString("/"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2304
		{
			name := ast.NewNodeList(ast.NewString("%"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2309
		{
			name := ast.NewNodeList(ast.NewString("^"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2314
		{
			name := ast.NewNodeList(ast.NewString("<"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2319
		{
			name := ast.NewNodeList(ast.NewString(">"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2324
		{
			name := ast.NewNodeList(ast.NewString("="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2329
		{
			name := ast.NewNodeList(ast.NewString("<="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2334
		{
			name := ast.NewNodeList(ast.NewString(">="))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2339
		{
			name := ast.NewNodeList(ast.NewString("<>"))
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, name, yyDollar[1].node, yyDollar[3].node, 0)
		}
	case 1143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2345
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2346
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2348
		{
			p := ast.NewParamRef(yyDollar[1].ival, 0)
			if yyDollar[2].list != nil {
				yyVAL.node = ast.NewA_Indirection(p, yyDollar[2].list, 0)
			} else {
				yyVAL.node = p
			}
		}
	case 1146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2357
		{
			if yyDollar[4].list != nil {
				yyVAL.node = ast.NewParenExpr(ast.NewA_Indirection(yyDollar[2].node, yyDollar[4].list, 0), 0)
			} else {
				yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
			}
		}
	case 1147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2364
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2365
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2367
		{
			yyVAL.node = ast.NewExprSublink(yyDollar[1].stmt)
		}
	case 1150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2371
		{
			sublink := ast.NewExprSublink(yyDollar[1].stmt)
			yyVAL.node = ast.NewA_Indirection(sublink, yyDollar[2].list, 0)
		}
	case 1151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2376
		{
			yyVAL.node = ast.NewExistsSublink(yyDollar[2].stmt)
		}
	case 1152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2380
		{
			yyVAL.node = ast.NewArraySublink(yyDollar[2].stmt)
		}
	case 1153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2384
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2388
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_EXPLICIT_CALL
			yyVAL.node = rowExpr
		}
	case 1155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2394
		{
			rowExpr := ast.NewRowConstructor(yyDollar[1].node.(*ast.NodeList))
			rowExpr.RowFormat = ast.COERCE_IMPLICIT_CAST
			yyVAL.node = rowExpr
		}
	case 1156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2400
		{
			exprList := yyDollar[3].list
			grouping := &ast.GroupingFunc{
				BaseExpr: ast.BaseExpr{BaseNode: ast.BaseNode{Tag: ast.T_GroupingFunc}},
				Args:     exprList,
			}
			yyVAL.node = grouping
		}
	case 1157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2412
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), 0)
		}
	case 1158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2416
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), 0)
		}
	case 1159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2420
		{
			yyVAL.node = ast.NewA_Const(ast.NewString(yyDollar[1].str), 0)
		}
	case 1160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2424
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(true), 0)
		}
	case 1161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2428
		{
			yyVAL.node = ast.NewA_Const(ast.NewBoolean(false), 0)
		}
	case 1162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2432
		{
			yyVAL.node = ast.NewA_ConstNull(0)
		}
	case 1163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2437
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2440
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2443
		{
			yyVAL.ival = yyDollar[1].ival
		}
	case 1166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2444
		{
			yyVAL.ival = yyDollar[2].ival
		}
	case 1167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2445
		{
			yyVAL.ival = -yyDollar[2].ival
		}
	case 1168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2450
		{
			yyVAL.node = ast.NewColumnRef(ast.NewString(yyDollar[1].str))
		}
	case 1169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2454
		{
			// Create all fields: first ColId followed by indirection items
			allFields := []ast.Node{ast.NewString(yyDollar[1].str)}
			allFields = append(allFields, yyDollar[2].list.Items...)
			yyVAL.node = ast.NewColumnRef(allFields...)
		}
	case 1170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2464
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2468
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2474
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2475
		{
			yyVAL.node = nil
		}
	case 1174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2479
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2483
		{
			yyVAL.node = &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}}
		}
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2487
		{
			yyVAL.node = ast.NewA_Indices(yyDollar[2].node, 0)
		}
	case 1177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2491
		{
			yyVAL.node = ast.NewA_IndicesSlice(yyDollar[2].node, yyDollar[4].node, 0)
		}
	case 1178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2496
		{
			yyVAL.list = nil
		}
	case 1179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2498
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2510
		{
			funcCall := yyDollar[1].node.(*ast.FuncCall)

			// Apply within_group_clause if present
			if yyDollar[2].list != nil {
				// WITHIN GROUP (ORDER BY ...) - store the sort list
				funcCall.AggOrder = yyDollar[2].list
				funcCall.AggWithinGroup = true
			}

			// Apply filter_clause if present
			if yyDollar[3].node != nil {
				// FILTER (WHERE condition) - store the filter expression
				funcCall.AggFilter = yyDollar[3].node
			}

			// Apply over_clause if present (window functions)
			if yyDollar[4].windef != nil {
				funcCall.Over = yyDollar[4].windef
			}

			yyVAL.node = funcCall
		}
	case 1181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2537
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2541
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2545
		{
			// PostgreSQL uses check_func_name here
			// We implement the logic inline - prepend ColId to indirection list
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[2].list.Items...)
			result := ast.NewNodeList(items...)
			yyVAL.list = result
		}
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2556
		{
			yyVAL.node = ast.NewFuncCall(yyDollar[1].list, nil, 0)
		}
	case 1185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2560
		{
			// Special case for aggregates like COUNT(*) - set AggStar to true
			funcCall := ast.NewFuncCall(yyDollar[1].list, nil, 0)
			funcCall.AggStar = true
			yyVAL.node = funcCall
		}
	case 1186:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2567
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[3].list, 0)
			// Note: In full implementation, would set agg_order from $4
			yyVAL.node = funcCall
		}
	case 1187:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2573
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, ast.NewNodeList(yyDollar[4].node), 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1188:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:2579
		{
			yyDollar[3].list.Append(yyDollar[6].node)
			args := yyDollar[3].list
			funcCall := ast.NewFuncCall(yyDollar[1].list, args, 0)
			// Note: In full implementation, would set func_variadic = true and agg_order from $7
			yyVAL.node = funcCall
		}
	case 1189:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2587
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would mark as aggregate and set agg_order from $5
			yyVAL.node = funcCall
		}
	case 1190:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:2593
		{
			funcCall := ast.NewFuncCall(yyDollar[1].list, yyDollar[4].list, 0)
			// Note: In full implementation, would set agg_distinct = true and agg_order from $5
			yyVAL.node = funcCall
		}
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2601
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2605
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2612
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2616
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2620
		{
			yyVAL.node = ast.NewNamedArgExpr(yyDollar[3].node.(ast.Expression), yyDollar[1].str, -1, 0)
		}
	case 1196:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2627
		{
			yyVAL.node = ast.NewCaseExpr(0, yyDollar[2].node, yyDollar[3].list, yyDollar[4].node)
		}
	case 1197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2632
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1198:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2633
		{
			yyVAL.node = nil
		}
	case 1199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2637
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2639
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2647
		{
			yyVAL.node = ast.NewCaseWhen(yyDollar[2].node, yyDollar[4].node)
		}
	case 1202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2653
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2654
		{
			yyVAL.node = nil
		}
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2659
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2663
		{
			yyVAL.node = ast.NewArrayConstructor(yyDollar[2].list)
		}
	case 1206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2667
		{
			yyVAL.node = ast.NewArrayConstructor(ast.NewNodeList())
		}
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2672
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2674
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1209:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2681
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2682
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1211:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2684
		{
			nodeList := yyDollar[2].list
			nodeList.Append(yyDollar[4].node)
			yyVAL.list = nodeList
		}
	case 1212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2691
		{
			yyVAL.node = yyDollar[3].list
		}
	case 1213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2692
		{
			yyVAL.node = ast.NewNodeList()
		}
	case 1214:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2696
		{
			yyDollar[2].list.Append(yyDollar[4].node)
			yyVAL.node = yyDollar[2].list
		}
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2702
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2703
		{
			yyVAL.ival = int(ast.ANY_SUBLINK)
		}
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2704
		{
			yyVAL.ival = int(ast.ALL_SUBLINK)
		}
	case 1218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2709
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2713
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2717
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~"))
		}
	case 1221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2721
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~"))
		}
	case 1222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2725
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("~~*"))
		}
	case 1223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2729
		{
			yyVAL.list = ast.NewNodeList(ast.NewString("!~~*"))
		}
	case 1224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2735
		{
			yyVAL.str = "NFC"
		}
	case 1225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2736
		{
			yyVAL.str = "NFD"
		}
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2737
		{
			yyVAL.str = "NFKC"
		}
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2738
		{
			yyVAL.str = "NFKD"
		}
	case 1228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2742
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2743
		{
			yyVAL.ival = int(ast.JS_TYPE_ANY)
		}
	case 1230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2744
		{
			yyVAL.ival = int(ast.JS_TYPE_ARRAY)
		}
	case 1231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2745
		{
			yyVAL.ival = int(ast.JS_TYPE_OBJECT)
		}
	case 1232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2746
		{
			yyVAL.ival = int(ast.JS_TYPE_SCALAR)
		}
	case 1233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2750
		{
			yyVAL.bval = true
		}
	case 1234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2751
		{
			yyVAL.bval = true
		}
	case 1235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2752
		{
			yyVAL.bval = false
		}
	case 1236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2753
		{
			yyVAL.bval = false
		}
	case 1237:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2754
		{
			yyVAL.bval = false
		}
	case 1238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2759
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2763
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2772
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2777
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2778
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2779
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2780
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2781
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2784
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2785
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2786
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2789
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2792
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2796
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[2].str))
		}
	case 1252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2800
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2807
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1254:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:2811
		{
			yyVAL.list = nil
		}
	case 1255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2817
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2823
		{
			// Create qualified type name from name + attrs
			name := ast.NewString(yyDollar[1].str)
			names := &ast.NodeList{Items: append([]ast.Node{name}, yyDollar[2].list.Items...)}
			typeName := makeTypeNameFromNodeList(names)
			// Note: In full implementation, would set type modifiers
			yyVAL.typnam = typeName
		}
	case 1257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2834
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2838
		{
			yyVAL.typnam = makeTypeNameFromString("int4")
		}
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2842
		{
			yyVAL.typnam = makeTypeNameFromString("int2")
		}
	case 1260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2846
		{
			yyVAL.typnam = makeTypeNameFromString("int8")
		}
	case 1261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2850
		{
			yyVAL.typnam = makeTypeNameFromString("float4")
		}
	case 1262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2854
		{
			yyVAL.typnam = yyDollar[2].typnam
		}
	case 1263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2858
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2862
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2866
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2870
		{
			yyVAL.typnam = makeTypeNameFromString("numeric")
		}
	case 1267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2874
		{
			yyVAL.typnam = makeTypeNameFromString("bool")
		}
	case 1268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2880
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2884
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2890
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2894
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 1272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2900
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2908
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2916
		{
			yyVAL.str = "varchar"
		}
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2920
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:2928
		{
			if yyDollar[3].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2936
		{
			if yyDollar[2].ival != 0 {
				yyVAL.str = "varchar"
			} else {
				yyVAL.str = "bpchar"
			}
		}
	case 1278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:2946
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// Set typmods with the length parameter, similar to PostgreSQL's approach
			lengthConst := ast.NewInteger(int(yyDollar[3].ival))
			typeName.Typmods = ast.NewNodeList()
			typeName.Typmods.Append(lengthConst)
			yyVAL.typnam = typeName
		}
	case 1279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:2957
		{
			typeName := makeTypeNameFromString(yyDollar[1].str)
			// char defaults to char(1), varchar to no limit
			if yyDollar[1].str == "bpchar" {
				// CHAR defaults to CHAR(1)
				lengthConst := ast.NewInteger(1)
				typeName.Typmods = ast.NewNodeList()
				typeName.Typmods.Append(lengthConst)
			}
			yyVAL.typnam = typeName
		}
	case 1280:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2971
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:2983
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "varbit"
			} else {
				typeName = "bit"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1282:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:2995
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3005
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timestamptz"
			} else {
				typeName = "timestamp"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1284:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3015
		{
			var typeName string
			if yyDollar[5].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3025
		{
			var typeName string
			if yyDollar[2].ival != 0 {
				typeName = "timetz"
			} else {
				typeName = "time"
			}
			yyVAL.typnam = makeTypeNameFromString(typeName)
		}
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3036
		{
			yyVAL.ival = 1
		}
	case 1287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3037
		{
			yyVAL.ival = 0
		}
	case 1288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3038
		{
			yyVAL.ival = 0
		}
	case 1289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3041
		{
			yyVAL.ival = 1
		}
	case 1290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3042
		{
			yyVAL.ival = 0
		}
	case 1291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3046
		{
			if yyDollar[2].ival < 1 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else if yyDollar[2].ival <= 7 {
				yyVAL.typnam = makeTypeNameFromString("float4")
			} else {
				yyVAL.typnam = makeTypeNameFromString("float8")
			}
		}
	case 1292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3056
		{
			yyVAL.typnam = makeTypeNameFromString("float8")
		}
	case 1293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3063
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3067
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3074
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3078
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3083
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3084
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3087
		{
			yyVAL.str = "+"
		}
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3088
		{
			yyVAL.str = "-"
		}
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3089
		{
			yyVAL.str = "*"
		}
	case 1302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3090
		{
			yyVAL.str = "/"
		}
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3091
		{
			yyVAL.str = "%"
		}
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3092
		{
			yyVAL.str = "^"
		}
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3093
		{
			yyVAL.str = "<"
		}
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3094
		{
			yyVAL.str = ">"
		}
	case 1307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3095
		{
			yyVAL.str = "="
		}
	case 1308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3096
		{
			yyVAL.str = "<="
		}
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3097
		{
			yyVAL.str = ">="
		}
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3098
		{
			yyVAL.str = "<>"
		}
	case 1311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3102
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3106
		{
			items := []ast.Node{ast.NewString(yyDollar[1].str)}
			items = append(items, yyDollar[3].list.Items...)
			yyVAL.list = ast.NewNodeList(items...)
		}
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3115
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3116
		{
			yyVAL.list = nil
		}
	case 1315:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3121
		{
			// WITHIN GROUP (ORDER BY ...) for ordered-set aggregates
			yyVAL.list = yyDollar[4].list
		}
	case 1316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3125
		{
			yyVAL.list = nil
		}
	case 1317:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3130
		{
			// FILTER (WHERE condition) for aggregate filtering
			yyVAL.node = yyDollar[4].node
		}
	case 1318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3134
		{
			yyVAL.node = nil
		}
	case 1319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3138
		{
			yyVAL.ival = 0
		}
	case 1320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3139
		{
			yyVAL.ival = 0
		}
	case 1321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3143
		{
			subLink := ast.NewSubLink(ast.ANY_SUBLINK, yyDollar[1].stmt.(*ast.SelectStmt))
			yyVAL.node = subLink
		}
	case 1322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3148
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3163
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3164
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3168
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3173
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3174
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 1328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3183
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3184
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3193
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3195
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			// Use NodeList directly for SortClause
			selectStmt.SortClause = yyDollar[2].list
			yyVAL.stmt = selectStmt
		}
	case 1332:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3202
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			selectStmt.LockingClause = yyDollar[3].list // Set the locking clause
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3214
		{
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			selectStmt.SortClause = yyDollar[2].list
			if yyDollar[3].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[3].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[3].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[3].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3226
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			yyVAL.stmt = selectStmt
		}
	case 1335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3232
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			yyVAL.stmt = selectStmt
		}
	case 1336:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3239
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			selectStmt.LockingClause = yyDollar[4].list // Set the locking clause
			if yyDollar[5].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[5].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[5].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[5].selectLimit.limitOption
			}
			yyVAL.stmt = selectStmt
		}
	case 1337:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3252
		{
			selectStmt := yyDollar[2].stmt.(*ast.SelectStmt)
			selectStmt.WithClause = yyDollar[1].with
			selectStmt.SortClause = yyDollar[3].list
			if yyDollar[4].selectLimit != nil {
				selectStmt.LimitOffset = yyDollar[4].selectLimit.limitOffset
				selectStmt.LimitCount = yyDollar[4].selectLimit.limitCount
				selectStmt.LimitOption = yyDollar[4].selectLimit.limitOption
			}
			selectStmt.LockingClause = yyDollar[5].list // Set the locking clause
			yyVAL.stmt = selectStmt
		}
	case 1338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3271
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3272
		{
			yyVAL.list = nil
		}
	case 1340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3276
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3277
		{
			yyVAL.list = nil
		}
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3282
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3286
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3294
		{
			lockingClause := &ast.LockingClause{
				BaseNode:   ast.BaseNode{Tag: ast.T_LockingClause},
				Strength:   ast.LockClauseStrength(yyDollar[1].ival),
				LockedRels: yyDollar[2].list, // Store as *NodeList directly
				WaitPolicy: ast.LockWaitPolicy(yyDollar[3].ival),
			}
			yyVAL.node = lockingClause
		}
	case 1345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3306
		{
			yyVAL.ival = int(ast.LCS_FORUPDATE)
		}
	case 1346:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3307
		{
			yyVAL.ival = int(ast.LCS_FORNOKEYUPDATE)
		}
	case 1347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3308
		{
			yyVAL.ival = int(ast.LCS_FORSHARE)
		}
	case 1348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3309
		{
			yyVAL.ival = int(ast.LCS_FORKEYSHARE)
		}
	case 1349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3313
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3314
		{
			yyVAL.list = nil
		}
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3319
		{
			yyVAL.ival = int(ast.LockWaitError)
		}
	case 1352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3320
		{
			yyVAL.ival = int(ast.LockWaitSkip)
		}
	case 1353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3321
		{
			yyVAL.ival = int(ast.LockWaitBlock)
		}
	case 1354:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3332
		{
			selectStmt := ast.NewSelectStmt()
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1355:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3351
		{
			selectStmt := ast.NewSelectStmt()
			selectStmt.DistinctClause = yyDollar[2].list
			if yyDollar[3].list != nil {
				selectStmt.TargetList = yyDollar[3].list
			}
			selectStmt.IntoClause = yyDollar[4].into
			selectStmt.FromClause = yyDollar[5].list
			selectStmt.WhereClause = yyDollar[6].node
			if yyDollar[7].groupClause != nil {
				selectStmt.GroupClause = yyDollar[7].groupClause.List
				selectStmt.GroupDistinct = yyDollar[7].groupClause.Distinct
			}
			selectStmt.HavingClause = yyDollar[8].node
			selectStmt.WindowClause = yyDollar[9].list
			yyVAL.stmt = selectStmt
		}
	case 1356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3369
		{
			// TABLE relation_expr is equivalent to SELECT * FROM relation_expr
			selectStmt := ast.NewSelectStmt()
			// Create a ResTarget for *
			starTarget := ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
			selectStmt.TargetList = ast.NewNodeList(starTarget)
			selectStmt.FromClause = ast.NewNodeList(yyDollar[2].rangevar)
			yyVAL.stmt = selectStmt
		}
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3379
		{
			// VALUES clause is a SelectStmt with ValuesLists
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3390
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3391
		{
			yyVAL.list = nil
		}
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3395
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3396
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3401
		{
			yyVAL.target = ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
		}
	case 1363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3405
		{
			// Implicit alias (no AS keyword)
			yyVAL.target = ast.NewResTarget(yyDollar[2].str, yyDollar[1].node)
		}
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3410
		{
			// No alias - use default naming
			yyVAL.target = ast.NewResTarget("", yyDollar[1].node)
		}
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3415
		{
			// SELECT * - all columns
			yyVAL.target = ast.NewResTarget("", ast.NewColumnRef(ast.NewA_Star(0)))
		}
	case 1366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3426
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3427
		{
			yyVAL.list = nil
		}
	case 1368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3431
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3432
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3441
		{
			rangeVar := yyDollar[1].rangevar
			if yyDollar[2].alias != nil {
				rangeVar.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeVar
		}
	case 1371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3449
		{
			/* Subquery in FROM clause */
			subquery := yyDollar[1].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[2].alias != nil {
				alias = yyDollar[2].alias
			}
			rangeSubselect := ast.NewRangeSubselect(false, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3460
		{
			/* LATERAL subquery in FROM clause */
			subquery := yyDollar[2].stmt.(*ast.SelectStmt)
			var alias *ast.Alias
			if yyDollar[3].alias != nil {
				alias = yyDollar[3].alias
			}
			rangeSubselect := ast.NewRangeSubselect(true, subquery, alias)
			yyVAL.node = rangeSubselect
		}
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3471
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3475
		{
			joinExpr := yyDollar[2].node.(*ast.JoinExpr)
			joinExpr.Alias = yyDollar[4].alias
			yyVAL.node = joinExpr
		}
	case 1375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3481
		{
			rangeFunc := yyDollar[1].node.(*ast.RangeFunction)
			if yyDollar[2].alias != nil {
				rangeFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeFunc
		}
	case 1376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3489
		{
			rangeFunc := yyDollar[2].node.(*ast.RangeFunction)
			rangeFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeFunc
		}
	case 1377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3498
		{
			rangeTableFunc := yyDollar[1].node.(*ast.RangeTableFunc)
			if yyDollar[2].alias != nil {
				rangeTableFunc.Alias = yyDollar[2].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3506
		{
			rangeTableFunc := yyDollar[2].node.(*ast.RangeTableFunc)
			rangeTableFunc.Lateral = true
			if yyDollar[3].alias != nil {
				rangeTableFunc.Alias = yyDollar[3].alias
			}
			yyVAL.node = rangeTableFunc
		}
	case 1379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3515
		{
			jsonTable := yyDollar[1].node.(*ast.JsonTable)
			if yyDollar[2].alias != nil {
				jsonTable.Alias = yyDollar[2].alias
			}
			yyVAL.node = jsonTable
		}
	case 1380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3523
		{
			jsonTable := yyDollar[2].node.(*ast.JsonTable)
			jsonTable.Lateral = true
			if yyDollar[3].alias != nil {
				jsonTable.Alias = yyDollar[3].alias
			}
			yyVAL.node = jsonTable
		}
	case 1381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3535
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, implicitly
			yyVAL.rangevar = rangeVar
		}
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3541
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3548
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Inh = true // inheritance query, explicitly
			yyVAL.rangevar = rangeVar
		}
	case 1384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3554
		{
			rangeVar := yyDollar[2].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1385:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3560
		{
			rangeVar := yyDollar[3].rangevar
			rangeVar.Inh = false // no inheritance
			yyVAL.rangevar = rangeVar
		}
	case 1386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3570
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3574
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3580
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3597
		{
			yyVAL.node = ast.NewParenExpr(yyDollar[2].node, 0)
		}
	case 1390:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3601
		{
			/* CROSS JOIN is same as unqualified inner join */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewJoinExpr(ast.JOIN_INNER, left, right, nil)
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1391:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3610
		{
			left := yyDollar[1].node
			right := yyDollar[4].node
			joinType := ast.JoinType(yyDollar[2].ival)
			joinQual := yyDollar[5].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(joinType, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(joinType, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1392:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3636
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[3].node
			joinQual := yyDollar[4].node

			var join *ast.JoinExpr

			/* Check if join_qual is a USING clause (NodeList) or ON clause (Expression) */
			if nodeList, ok := joinQual.(*ast.NodeList); ok && nodeList.Len() == 2 {
				/* USING clause: [name_list, alias_or_null] */
				nameList := nodeList.Items[0].(*ast.NodeList)
				var alias *ast.Alias
				if nodeList.Items[1] != nil {
					alias = nodeList.Items[1].(*ast.Alias)
				}
				join = ast.NewUsingJoinExpr(ast.JOIN_INNER, left, right, nameList)
				join.JoinUsingAlias = alias
			} else {
				/* ON clause */
				join = ast.NewJoinExpr(ast.JOIN_INNER, left, right, joinQual.(ast.Expression))
			}
			join.IsNatural = false
			yyVAL.node = join
		}
	case 1393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3662
		{
			left := yyDollar[1].node
			right := yyDollar[5].node
			joinType := ast.JoinType(yyDollar[3].ival)
			join := ast.NewNaturalJoinExpr(joinType, left, right)
			yyVAL.node = join
		}
	case 1394:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3670
		{
			/* letting join_type reduce to empty doesn't work */
			left := yyDollar[1].node
			right := yyDollar[4].node
			join := ast.NewNaturalJoinExpr(ast.JOIN_INNER, left, right)
			yyVAL.node = join
		}
	case 1395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3680
		{
			yyVAL.ival = int(ast.JOIN_FULL)
		}
	case 1396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3681
		{
			yyVAL.ival = int(ast.JOIN_LEFT)
		}
	case 1397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3682
		{
			yyVAL.ival = int(ast.JOIN_RIGHT)
		}
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3683
		{
			yyVAL.ival = int(ast.JOIN_INNER)
		}
	case 1399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3688
		{
			yyVAL.ival = 1
		}
	case 1400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3689
		{
			yyVAL.ival = 0
		}
	case 1401:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3699
		{
			/* Create a two-element list: [name_list, alias_or_null] following PostgreSQL */
			nameList := yyDollar[3].list
			var aliasNode ast.Node = nil
			if yyDollar[5].alias != nil {
				aliasNode = yyDollar[5].alias
			}
			usingList := ast.NewNodeList(nameList, aliasNode)
			yyVAL.node = usingList
		}
	case 1402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3710
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3721
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3725
		{
			yyVAL.with = ast.NewWithClause(yyDollar[2].list, false, 0)
		}
	case 1405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3729
		{
			yyVAL.with = ast.NewWithClause(yyDollar[3].list, true, 0)
		}
	case 1406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3735
		{
			yyVAL.with = yyDollar[1].with
		}
	case 1407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3736
		{
			yyVAL.with = nil
		}
	case 1408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3741
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3745
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1410:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:3753
		{
			ctename := yyDollar[1].str
			query := yyDollar[6].stmt
			cte := ast.NewCommonTableExpr(ctename, query)

			// Set column names if provided
			if yyDollar[2].list != nil {
				cte.Aliascolnames = yyDollar[2].list
			}

			// Set materialized option
			cte.Ctematerialized = ast.CTEMaterialized(yyDollar[4].ival)

			// Set search clause if provided
			if yyDollar[8].node != nil {
				cte.SearchClause = yyDollar[8].node.(*ast.CTESearchClause)
			}

			// Set cycle clause if provided
			if yyDollar[9].node != nil {
				cte.CycleClause = yyDollar[9].node.(*ast.CTECycleClause)
			}

			yyVAL.node = cte
		}
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3781
		{
			yyVAL.ival = int(ast.CTEMaterializeAlways)
		}
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3782
		{
			yyVAL.ival = int(ast.CTEMaterializeNever)
		}
	case 1413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3783
		{
			yyVAL.ival = int(ast.CTEMaterializeDefault)
		}
	case 1414:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3788
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, false, seqColumn)
		}
	case 1415:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:3794
		{
			searchColList := yyDollar[5].list
			seqColumn := yyDollar[7].str
			yyVAL.node = ast.NewCTESearchClause(searchColList, true, seqColumn)
		}
	case 1416:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3800
		{
			yyVAL.node = nil
		}
	case 1417:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:3807
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			markValue := yyDollar[6].node.(ast.Expression)
			markDefault := yyDollar[8].node.(ast.Expression)
			pathColumn := yyDollar[10].str
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, markValue, markDefault, pathColumn)
		}
	case 1418:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3816
		{
			cycleColList := yyDollar[2].list
			markColumn := yyDollar[4].str
			pathColumn := yyDollar[6].str
			// For simple CYCLE clause, use nil for mark values to avoid TO/DEFAULT in deparsing
			yyVAL.node = ast.NewCTECycleClause(cycleColList, markColumn, nil, nil, pathColumn)
		}
	case 1419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3824
		{
			yyVAL.node = nil
		}
	case 1420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3835
		{
			/* Create a SelectStmt with VALUES clause following PostgreSQL */
			selectStmt := ast.NewSelectStmt()
			exprList := yyDollar[3].list
			selectStmt.ValuesLists = ast.NewNodeList(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1421:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3843
		{
			/* Add additional VALUES row to existing SelectStmt */
			selectStmt := yyDollar[1].stmt.(*ast.SelectStmt)
			exprList := yyDollar[4].list
			selectStmt.ValuesLists.Append(exprList)
			yyVAL.stmt = selectStmt
		}
	case 1422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3857
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3858
		{
			yyVAL.node = nil
		}
	case 1424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3866
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1425:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3868
		{
			cursorExpr := ast.NewCurrentOfExpr(0, yyDollar[4].str) // cvarno filled in by parse analysis
			yyVAL.node = cursorExpr
		}
	case 1426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3872
		{
			yyVAL.node = nil
		}
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3876
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3884
		{
			yyVAL.alias = yyDollar[1].alias
		}
	case 1429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3885
		{
			yyVAL.alias = nil
		}
	case 1430:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3890
		{
			nameList := yyDollar[4].list
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nameList)
		}
	case 1431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3895
		{
			yyVAL.alias = ast.NewAlias(yyDollar[2].str, nil)
		}
	case 1432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:3899
		{
			nameList := yyDollar[3].list
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nameList)
		}
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3904
		{
			yyVAL.alias = ast.NewAlias(yyDollar[1].str, nil)
		}
	case 1434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3912
		{
			alias := ast.NewAlias(yyDollar[2].str, nil)
			yyVAL.alias = alias
		}
	case 1435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3916
		{
			yyVAL.alias = nil
		}
	case 1436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3924
		{
			yyVAL.ival = 1
		}
	case 1437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3925
		{
			yyVAL.ival = 0
		}
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3929
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1439:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:3930
		{
			yyVAL.list = yyDollar[4].list
		}
	case 1440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3934
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3935
		{
			yyVAL.list = nil
		}
	case 1442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3945
		{
			yyVAL.into = ast.NewIntoClause(yyDollar[2].rangevar, nil, "", nil, ast.ONCOMMIT_NOOP, "", nil, false, 0)
		}
	case 1443:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3948
		{
			yyVAL.into = nil
		}
	case 1444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3959
		{
			hasOrdinality := yyDollar[2].ival == 1
			// For a simple function, create a NodeList containing a single NodeList with the function
			funcList := ast.NewNodeList(yyDollar[1].node)
			functions := ast.NewNodeList(funcList)
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, false, functions, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1445:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:3968
		{
			hasOrdinality := yyDollar[6].ival == 1
			// rowsfrom_list is already a NodeList containing NodeLists
			rangeFunc := ast.NewRangeFunction(false, hasOrdinality, true, yyDollar[4].list, nil, nil)
			yyVAL.node = rangeFunc
		}
	case 1446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3978
		{
			yyVAL.ival = 1
		}
	case 1447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:3979
		{
			yyVAL.ival = 0
		}
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:3985
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].list)
		}
	case 1449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:3989
		{
			yyDollar[1].list.Append(yyDollar[3].list)
			yyVAL.list = yyDollar[1].list
		}
	case 1450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:3996
		{
			funcList := ast.NewNodeList(yyDollar[1].node)
			if yyDollar[2].list != nil {
				funcList.Append(yyDollar[2].list)
			}
			yyVAL.list = funcList
		}
	case 1451:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4005
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1452:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4006
		{
			yyVAL.list = nil
		}
	case 1453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4016
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 1454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4020
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 1455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4032
		{
			yyVAL.funparam = &ast.FunctionParameter{
				BaseNode: ast.BaseNode{Tag: ast.T_FunctionParameter},
				Name:     yyDollar[1].str,
				ArgType:  yyDollar[2].typnam,
				Mode:     ast.FUNC_PARAM_TABLE,
				DefExpr:  nil,
			}
		}
	case 1456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4045
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4046
		{
			yyVAL.list = nil
		}
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4052
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4056
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4065
		{
			columnDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			// Note: opt_collate_clause support can be added when needed
			// PostgreSQL sets: n->collClause = (CollateClause *) $3;
			yyVAL.node = columnDef
		}
	case 1461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4076
		{
			// Pass the NodeList directly to NewCollateClause
			nameList := yyDollar[2].list
			yyVAL.node = ast.NewCollateClause(nameList)
		}
	case 1462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4081
		{
			yyVAL.node = nil
		}
	case 1463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4086
		{
			yyVAL.str = "BY REF"
		}
	case 1464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4087
		{
			yyVAL.str = "BY VALUE"
		}
	case 1465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4093
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4097
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4101
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4105
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4113
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4117
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4125
		{
			target := ast.NewResTarget(yyDollar[3].str, yyDollar[1].node)
			yyVAL.node = target
		}
	case 1472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4130
		{
			target := ast.NewResTarget("", yyDollar[2].node)
			yyVAL.node = target
		}
	case 1473:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4139
		{
			// XMLTABLE(xpath_expr PASSING doc_expr COLUMNS ...)
			// $3 is xpath_expr (should be RowExpr), $4 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[4].node.(ast.Expression), yyDollar[3].node.(ast.Expression), nil, yyDollar[6].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1474:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:4147
		{
			// XMLTABLE(XMLNAMESPACES(...), xpath_expr PASSING doc_expr COLUMNS ...)
			// $8 is xpath_expr (should be RowExpr), $9 is doc_expr (should be DocExpr)
			rangeTableFunc := ast.NewRangeTableFunc(false, yyDollar[9].node.(ast.Expression), yyDollar[8].node.(ast.Expression), yyDollar[5].list, yyDollar[11].list, nil, 0)
			yyVAL.node = rangeTableFunc
		}
	case 1475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4158
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4162
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4171
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4176
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, nil, true, false, nil, nil, 0)
			yyVAL.node = rangeTableFuncCol
		}
	case 1479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4181
		{
			rangeTableFuncCol := ast.NewRangeTableFuncCol(yyDollar[1].str, yyDollar[2].typnam, false, false, nil, nil, 0)
			// TODO: Process column options from $3
			yyVAL.node = rangeTableFuncCol
		}
	case 1480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4191
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4195
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4204
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4208
		{
			yyVAL.node = ast.NewDefElem("default", yyDollar[2].node)
		}
	case 1484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4212
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(true))
		}
	case 1485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4216
		{
			yyVAL.node = ast.NewDefElem("is_not_null", ast.NewBoolean(false))
		}
	case 1486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4220
		{
			yyVAL.node = ast.NewDefElem("path", yyDollar[2].node)
		}
	case 1487:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:4233
		{
			// Extract path name from optional path name node
			var pathName string
			if yyDollar[6].node != nil {
				if strNode, ok := yyDollar[6].node.(*ast.String); ok {
					pathName = strNode.SVal
				}
			}

			// Create JsonTablePathSpec from the a_expr (path expression) and optional path name
			pathSpec := ast.NewJsonTablePathSpec(yyDollar[5].node, pathName, 0)

			// Create JsonTable with context item and path spec
			jsonTable := ast.NewJsonTable(yyDollar[3].node.(*ast.JsonValueExpr), pathSpec)
			if yyDollar[10].list != nil {
				jsonTable.Columns = yyDollar[10].list
			}
			yyVAL.node = jsonTable
		}
	case 1488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4257
		{
			var format *ast.JsonFormat
			if yyDollar[2].node != nil {
				format = yyDollar[2].node.(*ast.JsonFormat)
			}
			yyVAL.node = ast.NewJsonValueExpr(yyDollar[1].node, format)
		}
	case 1489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4268
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1490:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4269
		{
			yyVAL.node = nil
		}
	case 1491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4274
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4275
		{
			yyVAL.node = nil
		}
	case 1493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4279
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4280
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4285
		{
			jsonArg := ast.NewJsonArgument(yyDollar[1].node.(*ast.JsonValueExpr), yyDollar[3].str)
			yyVAL.node = jsonArg
		}
	case 1496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4293
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JSON_BEHAVIOR_DEFAULT,
				Expr:     yyDollar[2].node,
			}
		}
	case 1497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4301
		{
			yyVAL.node = &ast.JsonBehavior{
				BaseNode: ast.BaseNode{Tag: ast.T_JsonBehavior},
				Btype:    ast.JsonBehaviorType(yyDollar[1].ival),
				Expr:     nil,
			}
		}
	case 1498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4312
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_ERROR)
		}
	case 1499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4313
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_NULL)
		}
	case 1500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4314
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_TRUE)
		}
	case 1501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4315
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_FALSE)
		}
	case 1502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4316
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_UNKNOWN)
		}
	case 1503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4317
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_ARRAY)
		}
	case 1504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4318
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY_OBJECT)
		}
	case 1505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4319
		{
			yyVAL.ival = int(ast.JSON_BEHAVIOR_EMPTY)
		}
	case 1506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4324
		{
			// Return a list with ON EMPTY behavior and nil for ON ERROR
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, nil}}
		}
	case 1507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4328
		{
			// Return a list with nil for ON EMPTY and ON ERROR behavior
			yyVAL.node = &ast.NodeList{Items: []ast.Node{nil, yyDollar[1].node}}
		}
	case 1508:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4332
		{
			// Return a list with both ON EMPTY and ON ERROR behaviors
			yyVAL.node = &ast.NodeList{Items: []ast.Node{yyDollar[1].node, yyDollar[4].node}}
		}
	case 1509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4336
		{
			yyVAL.node = nil
		}
	case 1510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4341
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4342
		{
			yyVAL.node = nil
		}
	case 1512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4347
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4348
		{
			yyVAL.ival = int(ast.JSW_NONE)
		}
	case 1514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4349
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4350
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4351
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1517:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4352
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4353
		{
			yyVAL.ival = int(ast.JSW_CONDITIONAL)
		}
	case 1519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4354
		{
			yyVAL.ival = int(ast.JSW_UNCONDITIONAL)
		}
	case 1520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4355
		{
			yyVAL.ival = int(ast.JSW_UNSPEC)
		}
	case 1521:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4360
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4361
		{
			yyVAL.ival = int(ast.JS_QUOTES_KEEP)
		}
	case 1523:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4362
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4363
		{
			yyVAL.ival = int(ast.JS_QUOTES_OMIT)
		}
	case 1525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4364
		{
			yyVAL.ival = int(ast.JS_QUOTES_UNSPEC)
		}
	case 1526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4370
		{
			// Parse the encoding name and map to JsonEncoding constant
			var encoding ast.JsonEncoding
			switch yyDollar[4].str {
			case "utf8":
				encoding = ast.JS_ENC_UTF8
			case "utf16":
				encoding = ast.JS_ENC_UTF16
			case "utf32":
				encoding = ast.JS_ENC_UTF32
			default:
				encoding = ast.JS_ENC_DEFAULT
			}
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   encoding,
			}
		}
	case 1527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4390
		{
			yyVAL.node = &ast.JsonFormat{
				BaseNode:   ast.BaseNode{Tag: ast.T_JsonFormat},
				FormatType: ast.JS_FORMAT_JSON,
				Encoding:   ast.JS_ENC_DEFAULT,
			}
		}
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4400
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4401
		{
			yyVAL.node = nil
		}
	case 1530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4406
		{
			yyVAL.node = ast.NewString("path")
		}
	case 1531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4407
		{
			yyVAL.node = nil
		}
	case 1532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4413
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4417
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4426
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FOR_ORDINALITY, yyDollar[1].str)
			yyVAL.node = jsonTableCol
		}
	case 1535:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:4435
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_REGULAR, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[3].node != nil {
				strNode := yyDollar[3].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1536:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4449
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_FORMATTED, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			if yyDollar[3].node != nil {
				jsonTableCol.Format = yyDollar[3].node.(*ast.JsonFormat)
			}
			yyVAL.node = jsonTableCol
		}
	case 1537:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4463
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_EXISTS, yyDollar[1].str)
			jsonTableCol.TypeName = yyDollar[2].typnam
			if yyDollar[4].node != nil {
				strNode := yyDollar[4].node.(*ast.String)
				jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			}
			yyVAL.node = jsonTableCol
		}
	case 1538:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4474
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, "")
			jsonTableCol.Columns = yyDollar[6].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1539:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4483
		{
			jsonTableCol := ast.NewJsonTableColumn(ast.JTC_NESTED, yyDollar[5].str)
			jsonTableCol.Columns = yyDollar[8].list
			strNode := ast.NewString(yyDollar[3].str)
			jsonTableCol.Pathspec = ast.NewJsonTablePathSpec(strNode, "", 0)
			yyVAL.node = jsonTableCol
		}
	case 1540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4494
		{
			yyVAL.node = ast.NewString(yyDollar[2].str)
		}
	case 1541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4495
		{
			yyVAL.node = nil
		}
	case 1542:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4511
		{
			insertStmt := yyDollar[5].node.(*ast.InsertStmt)
			insertStmt.Relation = yyDollar[4].rangevar
			insertStmt.WithClause = yyDollar[1].with
			insertStmt.OnConflictClause = yyDollar[6].onconflict
			insertStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = insertStmt
		}
	case 1543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4523
		{
			yyVAL.rangevar = yyDollar[1].rangevar
		}
	case 1544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4527
		{
			rangeVar := yyDollar[1].rangevar
			rangeVar.Alias = ast.NewAlias(yyDollar[3].str, nil)
			yyVAL.rangevar = rangeVar
		}
	case 1545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4536
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.SelectStmt = yyDollar[1].stmt
			yyVAL.node = insertStmt
		}
	case 1546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4542
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Override = ast.OverridingKind(yyDollar[2].ival)
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1547:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4549
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.SelectStmt = yyDollar[4].stmt
			yyVAL.node = insertStmt
		}
	case 1548:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4556
		{
			insertStmt := ast.NewInsertStmt(nil)
			insertStmt.Cols = yyDollar[2].list
			insertStmt.Override = ast.OverridingKind(yyDollar[5].ival)
			insertStmt.SelectStmt = yyDollar[7].stmt
			yyVAL.node = insertStmt
		}
	case 1549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4564
		{
			insertStmt := ast.NewInsertStmt(nil)
			// For DEFAULT VALUES, SelectStmt should be nil
			insertStmt.SelectStmt = nil
			yyVAL.node = insertStmt
		}
	case 1550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4573
		{
			yyVAL.ival = int(ast.OVERRIDING_USER_VALUE)
		}
	case 1551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4574
		{
			yyVAL.ival = int(ast.OVERRIDING_SYSTEM_VALUE)
		}
	case 1552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4579
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4583
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4591
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1555:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:4603
		{
			updateStmt := ast.NewUpdateStmt(yyDollar[3].rangevar)
			updateStmt.WithClause = yyDollar[1].with
			updateStmt.TargetList = yyDollar[5].list
			updateStmt.FromClause = yyDollar[6].list
			updateStmt.WhereClause = yyDollar[7].node
			updateStmt.ReturningList = yyDollar[8].list
			yyVAL.stmt = updateStmt
		}
	case 1556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4616
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4620
		{
			// Concatenate the lists - equivalent to PostgreSQL's list_concat
			for _, item := range yyDollar[3].list.Items {
				yyDollar[1].list.Append(item)
			}
			yyVAL.list = yyDollar[1].list
		}
	case 1558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4631
		{
			target := yyDollar[1].target
			target.Val = yyDollar[3].node
			yyVAL.list = ast.NewNodeList(target)
		}
	case 1559:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:4637
		{
			// Multi-column assignment: (col1, col2) = (val1, val2)
			// Create MultiAssignRef nodes for each target, matching PostgreSQL exactly
			targetList := yyDollar[2].list
			ncolumns := len(targetList.Items)

			// Create a MultiAssignRef source for each target
			for i, item := range targetList.Items {
				resCol := item.(*ast.ResTarget)
				multiAssignRef := ast.NewMultiAssignRef(yyDollar[5].node, i+1, ncolumns, 0)
				resCol.Val = multiAssignRef
			}

			// Return the entire target list
			yyVAL.list = targetList
		}
	case 1560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4657
		{
			yyVAL.target = ast.NewResTarget(yyDollar[1].str, yyDollar[2].list)
		}
	case 1561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4663
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].target)
		}
	case 1562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4664
		{
			yyDollar[1].list.Append(yyDollar[3].target)
			yyVAL.list = yyDollar[1].list
		}
	case 1563:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:4674
		{
			deleteStmt := ast.NewDeleteStmt(yyDollar[4].rangevar)
			deleteStmt.WithClause = yyDollar[1].with
			deleteStmt.UsingClause = yyDollar[5].list
			deleteStmt.WhereClause = yyDollar[6].node
			deleteStmt.ReturningList = yyDollar[7].list
			yyVAL.stmt = deleteStmt
		}
	case 1564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4686
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4690
		{
			yyVAL.list = nil
		}
	case 1566:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:4705
		{
			mergeStmt := &ast.MergeStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_MergeStmt},
			}
			mergeStmt.WithClause = yyDollar[1].with
			mergeStmt.Relation = yyDollar[4].rangevar
			mergeStmt.SourceRelation = yyDollar[6].node
			mergeStmt.JoinCondition = yyDollar[8].node
			mergeStmt.MergeWhenClauses = yyDollar[9].list
			mergeStmt.ReturningList = yyDollar[10].list
			yyVAL.stmt = mergeStmt
		}
	case 1567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4722
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4726
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1569:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:4737
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Query:     yyDollar[3].stmt,
				IsFrom:    false,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Initialize Options as empty NodeList
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[9].list != nil {
				nodeList := yyDollar[9].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			yyVAL.stmt = copyStmt
		}
	case 1570:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:4761
		{
			copyStmt := &ast.CopyStmt{
				BaseNode:  ast.BaseNode{Tag: ast.T_CopyStmt},
				Relation:  yyDollar[3].rangevar,
				IsFrom:    yyDollar[5].ival != 0,
				IsProgram: yyDollar[6].ival != 0,
				Filename:  yyDollar[7].str,
			}
			// Assign column list directly as NodeList
			copyStmt.Attlist = yyDollar[4].list

			// Initialize Options as empty NodeList and add options
			copyStmt.Options = ast.NewNodeList()
			if yyDollar[2].node != nil {
				copyStmt.Options.Append(yyDollar[2].node)
			}
			if yyDollar[8].node != nil {
				copyStmt.Options.Append(yyDollar[8].node)
			}
			if yyDollar[10].list != nil {
				nodeList := yyDollar[10].list
				for _, node := range nodeList.Items {
					copyStmt.Options.Append(node)
				}
			}
			if yyDollar[11].node != nil {
				copyStmt.WhereClause = yyDollar[11].node
			}
			yyVAL.stmt = copyStmt
		}
	case 1571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4797
		{
			yyVAL.ival = 1
		}
	case 1572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4798
		{
			yyVAL.ival = 0
		}
	case 1573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4802
		{
			yyVAL.ival = 1
		}
	case 1574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4803
		{
			yyVAL.ival = 0
		}
	case 1575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4807
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4808
		{
			yyVAL.str = ""
		}
	case 1577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4809
		{
			yyVAL.str = ""
		}
	case 1578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4814
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4817
		{
			yyVAL.node = nil
		}
	case 1580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4822
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4825
		{
			yyVAL.node = nil
		}
	case 1582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4829
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4830
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4835
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].node)
			} else {
				yyDollar[1].list.Append(yyDollar[2].node)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 1585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4843
		{
			yyVAL.list = nil
		}
	case 1586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4850
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("binary"))
		}
	case 1587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4854
		{
			yyVAL.node = ast.NewDefElem("freeze", ast.NewString("true"))
		}
	case 1588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4858
		{
			yyVAL.node = ast.NewDefElem("delimiter", ast.NewString(yyDollar[3].str))
		}
	case 1589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4862
		{
			yyVAL.node = ast.NewDefElem("null", ast.NewString(yyDollar[3].str))
		}
	case 1590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4866
		{
			yyVAL.node = ast.NewDefElem("format", ast.NewString("csv"))
		}
	case 1591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4870
		{
			yyVAL.node = ast.NewDefElem("header", ast.NewString("true"))
		}
	case 1592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4874
		{
			yyVAL.node = ast.NewDefElem("quote", ast.NewString(yyDollar[3].str))
		}
	case 1593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4878
		{
			yyVAL.node = ast.NewDefElem("escape", ast.NewString(yyDollar[3].str))
		}
	case 1594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4882
		{
			yyVAL.node = ast.NewDefElem("force_quote", yyDollar[3].list)
		}
	case 1595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4886
		{
			yyVAL.node = ast.NewDefElem("force_quote", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4890
		{
			yyVAL.node = ast.NewDefElem("force_not_null", yyDollar[4].list)
		}
	case 1597:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:4894
		{
			yyVAL.node = ast.NewDefElem("force_not_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4898
		{
			yyVAL.node = ast.NewDefElem("force_null", yyDollar[3].list)
		}
	case 1599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4902
		{
			yyVAL.node = ast.NewDefElem("force_null", &ast.A_Star{BaseNode: ast.BaseNode{Tag: ast.T_A_Star}})
		}
	case 1600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4906
		{
			yyVAL.node = ast.NewDefElem("encoding", ast.NewString(yyDollar[2].str))
		}
	case 1601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4914
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4918
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4925
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4931
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4932
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4933
		{
			yyVAL.node = ast.NewA_Star(0)
		}
	case 1607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4934
		{
			yyVAL.node = ast.NewString("default")
		}
	case 1608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4935
		{
			yyVAL.node = yyDollar[2].list
		}
	case 1609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:4936
		{
			yyVAL.node = nil
		}
	case 1610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4941
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4945
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4951
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4955
		{
			yyVAL.str = "true"
		}
	case 1614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4956
		{
			yyVAL.str = "false"
		}
	case 1615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4957
		{
			yyVAL.str = "on"
		}
	case 1616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4958
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4962
		{
			yyVAL.node = ast.NewFloat(yyDollar[1].str)
		}
	case 1618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4963
		{
			yyVAL.node = ast.NewFloat(yyDollar[2].str)
		}
	case 1619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4965
		{
			f := ast.NewFloat(yyDollar[2].str)
			f.FVal = "-" + f.FVal
			yyVAL.node = f
		}
	case 1620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4970
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4974
		{
			yyVAL.node = ast.NewInteger(yyDollar[1].ival)
		}
	case 1622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4975
		{
			yyVAL.node = nil
		}
	case 1623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4979
		{
			yyVAL.objType = ast.OBJECT_ACCESS_METHOD
		}
	case 1624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4980
		{
			yyVAL.objType = ast.OBJECT_EVENT_TRIGGER
		}
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4981
		{
			yyVAL.objType = ast.OBJECT_EXTENSION
		}
	case 1626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:4982
		{
			yyVAL.objType = ast.OBJECT_FDW
		}
	case 1627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:4983
		{
			yyVAL.objType = ast.OBJECT_LANGUAGE
		}
	case 1628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4984
		{
			yyVAL.objType = ast.OBJECT_PUBLICATION
		}
	case 1629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4985
		{
			yyVAL.objType = ast.OBJECT_SCHEMA
		}
	case 1630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4986
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_SERVER
		}
	case 1631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4990
		{
			yyVAL.objType = ast.OBJECT_POLICY
		}
	case 1632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4991
		{
			yyVAL.objType = ast.OBJECT_RULE
		}
	case 1633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4992
		{
			yyVAL.objType = ast.OBJECT_TRIGGER
		}
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4996
		{
			yyVAL.objType = yyDollar[1].objType
		}
	case 1635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4997
		{
			yyVAL.objType = ast.OBJECT_DATABASE
		}
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4998
		{
			yyVAL.objType = ast.OBJECT_ROLE
		}
	case 1637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:4999
		{
			yyVAL.objType = ast.OBJECT_SUBSCRIPTION
		}
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5000
		{
			yyVAL.objType = ast.OBJECT_TABLESPACE
		}
	case 1639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5005
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].typnam)
		}
	case 1640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5010
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 1641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5017
		{
			yyVAL.bval = true
		}
	case 1642:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5018
		{
			yyVAL.bval = false
		}
	case 1643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5022
		{
			yyVAL.ival = 1
		}
	case 1644:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5023
		{
			yyVAL.ival = 0
		}
	case 1647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5039
		{
			yyVAL.node = nil
		}
	case 1648:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5041
		{
			yyVAL.node = nil
		}
	case 1649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5049
		{
			yyVAL.ival = 1
		}
	case 1650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5050
		{
			yyVAL.ival = 0
		}
	case 1651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5054
		{
			yyVAL.ival = 1
		}
	case 1652:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5055
		{
			yyVAL.ival = 0
		}
	case 1653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5059
		{
			yyVAL.ival = 1
		}
	case 1654:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5060
		{
			yyVAL.ival = 0
		}
	case 1655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5064
		{
			yyVAL.ival = 1
		}
	case 1656:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5065
		{
			yyVAL.ival = 0
		}
	case 1657:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5074
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1658:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5080
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1659:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5086
		{
			yyDollar[4].node.(*ast.MergeWhenClause).MatchKind = ast.MergeMatchKind(yyDollar[1].ival)
			yyDollar[4].node.(*ast.MergeWhenClause).Condition = yyDollar[2].node
			yyVAL.node = yyDollar[4].node
		}
	case 1660:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5092
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1661:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5098
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MergeMatchKind(yyDollar[1].ival), ast.CMD_NOTHING)
			mergeWhen.Condition = yyDollar[2].node
			yyVAL.node = mergeWhen
		}
	case 1662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5106
		{
			yyVAL.ival = int(ast.MERGE_WHEN_MATCHED)
		}
	case 1663:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5107
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_SOURCE)
		}
	case 1664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5111
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1665:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5112
		{
			yyVAL.ival = int(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET)
		}
	case 1666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5116
		{
			yyVAL.node = yyDollar[2].node
		}
	case 1667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5117
		{
			yyVAL.node = nil
		}
	case 1668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5122
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_UPDATE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			yyVAL.node = mergeWhen
		}
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5137
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_MATCHED, ast.CMD_DELETE)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5146
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			mergeWhen.Values = yyDollar[2].list
			yyVAL.node = mergeWhen
		}
	case 1671:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5153
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[3].ival)
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1672:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5160
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[5].list
			yyVAL.node = mergeWhen
		}
	case 1673:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5173
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OverridingKind(yyDollar[6].ival)
			if yyDollar[3].list != nil {
				nodeList := yyDollar[3].list
				for _, node := range nodeList.Items {
					mergeWhen.TargetList = append(mergeWhen.TargetList, node.(*ast.ResTarget))
				}
			}
			mergeWhen.Values = yyDollar[8].list
			yyVAL.node = mergeWhen
		}
	case 1674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5186
		{
			mergeWhen := ast.NewMergeWhenClause(ast.MERGE_WHEN_NOT_MATCHED_BY_TARGET, ast.CMD_INSERT)
			mergeWhen.Override = ast.OVERRIDING_NOT_SET
			yyVAL.node = mergeWhen
		}
	case 1675:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5195
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1676:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:5210
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_UPDATE)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			onConflict.TargetList = yyDollar[7].list
			onConflict.WhereClause = yyDollar[8].node
			yyVAL.onconflict = onConflict
		}
	case 1677:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5220
		{
			onConflict := ast.NewOnConflictClause(ast.ONCONFLICT_NOTHING)
			if yyDollar[3].node != nil {
				onConflict.Infer = yyDollar[3].node.(*ast.InferClause)
			}
			yyVAL.onconflict = onConflict
		}
	case 1678:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5228
		{
			yyVAL.onconflict = nil
		}
	case 1679:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5239
		{
			// Create InferClause for column-based conflict detection
			infer := ast.NewInferClause()
			// Assign IndexElems directly as NodeList
			infer.IndexElems = yyDollar[2].list
			infer.WhereClause = yyDollar[4].node
			yyVAL.node = infer
		}
	case 1680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5248
		{
			// Create InferClause for constraint-based conflict detection
			infer := ast.NewInferClause()
			infer.Conname = yyDollar[3].str
			yyVAL.node = infer
		}
	case 1681:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5255
		{
			yyVAL.node = nil
		}
	case 1682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5266
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 1683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5270
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5277
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5281
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5288
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Name = yyDollar[1].str
		}
	case 1687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5293
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[1].node
		}
	case 1688:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5298
		{
			yyVAL.node = yyDollar[4].node
			yyVAL.node.(*ast.IndexElem).Expr = yyDollar[2].node
		}
	case 1689:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5306
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Ordering = ast.SortByDir(yyDollar[3].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[4].ival)
			yyVAL.node = indexElem
		}
	case 1690:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5317
		{
			indexElem := &ast.IndexElem{
				BaseNode: ast.BaseNode{Tag: ast.T_IndexElem},
			}
			indexElem.Collation = yyDollar[1].list
			indexElem.Opclass = yyDollar[2].list
			indexElem.Opclassopts = yyDollar[3].list
			indexElem.Ordering = ast.SortByDir(yyDollar[4].ival)
			indexElem.NullsOrdering = ast.SortByNulls(yyDollar[5].ival)
			yyVAL.node = indexElem
		}
	case 1691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5331
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5332
		{
			yyVAL.list = nil
		}
	case 1693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5336
		{
			yyVAL.ival = int(ast.SORTBY_ASC)
		}
	case 1694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5337
		{
			yyVAL.ival = int(ast.SORTBY_DESC)
		}
	case 1695:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5338
		{
			yyVAL.ival = int(ast.SORTBY_DEFAULT)
		}
	case 1696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5342
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_FIRST)
		}
	case 1697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5343
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_LAST)
		}
	case 1698:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5344
		{
			yyVAL.ival = int(ast.SORTBY_NULLS_DEFAULT)
		}
	case 1699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5349
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1700:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5353
		{
			yyVAL.list = nil
		}
	case 1701:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:5374
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[6].list
			createStmt.InhRelations = yyDollar[8].list
			createStmt.PartSpec = yyDollar[9].partspec
			createStmt.AccessMethod = yyDollar[10].str
			createStmt.Options = yyDollar[11].list
			createStmt.OnCommit = yyDollar[12].oncommit
			createStmt.TableSpaceName = yyDollar[13].str
			yyVAL.stmt = createStmt
		}
	case 1702:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:5390
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.TableElts = yyDollar[9].list
			createStmt.InhRelations = yyDollar[11].list
			createStmt.PartSpec = yyDollar[12].partspec
			createStmt.AccessMethod = yyDollar[13].str
			createStmt.Options = yyDollar[14].list
			createStmt.OnCommit = yyDollar[15].oncommit
			createStmt.TableSpaceName = yyDollar[16].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1703:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:5407
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[6].list)
			createStmt.TableElts = yyDollar[7].list
			createStmt.PartSpec = yyDollar[8].partspec
			createStmt.AccessMethod = yyDollar[9].str
			createStmt.Options = yyDollar[10].list
			createStmt.OnCommit = yyDollar[11].oncommit
			createStmt.TableSpaceName = yyDollar[12].str
			yyVAL.stmt = createStmt
		}
	case 1704:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:5423
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.OfTypename = makeTypeNameFromNodeList(yyDollar[9].list)
			createStmt.TableElts = yyDollar[10].list
			createStmt.PartSpec = yyDollar[11].partspec
			createStmt.AccessMethod = yyDollar[12].str
			createStmt.Options = yyDollar[13].list
			createStmt.OnCommit = yyDollar[14].oncommit
			createStmt.TableSpaceName = yyDollar[15].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1705:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:5440
		{
			rangeVar := yyDollar[4].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[7].rangevar)
			createStmt.TableElts = yyDollar[8].list
			createStmt.PartBound = yyDollar[9].partboundspec
			createStmt.PartSpec = yyDollar[10].partspec
			createStmt.AccessMethod = yyDollar[11].str
			createStmt.Options = yyDollar[12].list
			createStmt.OnCommit = yyDollar[13].oncommit
			createStmt.TableSpaceName = yyDollar[14].str
			yyVAL.stmt = createStmt
		}
	case 1706:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:5457
		{
			rangeVar := yyDollar[7].rangevar
			rangeVar.RelPersistence = yyDollar[2].rune
			createStmt := ast.NewCreateStmt(rangeVar)
			createStmt.InhRelations = ast.NewNodeList(yyDollar[10].rangevar)
			createStmt.TableElts = yyDollar[11].list
			createStmt.PartBound = yyDollar[12].partboundspec
			createStmt.PartSpec = yyDollar[13].partspec
			createStmt.AccessMethod = yyDollar[14].str
			createStmt.Options = yyDollar[15].list
			createStmt.OnCommit = yyDollar[16].oncommit
			createStmt.TableSpaceName = yyDollar[17].str
			createStmt.IfNotExists = true
			yyVAL.stmt = createStmt
		}
	case 1707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5475
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5476
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5477
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5478
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5479
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5480
		{
			yyVAL.rune = ast.RELPERSISTENCE_TEMP
		}
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5481
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 1714:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5482
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5486
		{
			yyVAL.list = yyDollar[1].list
		}
	case 1716:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5487
		{
			yyVAL.list = nil
		}
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5492
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1718:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5497
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5504
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5505
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5506
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5511
		{
			yyVAL.node = ast.NewTableLikeClause(yyDollar[2].rangevar, ast.TableLikeOption(yyDollar[3].ival))
		}
	case 1723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5518
		{
			yyVAL.ival = yyDollar[1].ival | yyDollar[3].ival
		}
	case 1724:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5522
		{
			yyVAL.ival = yyDollar[1].ival & ^yyDollar[3].ival
		}
	case 1725:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5526
		{
			yyVAL.ival = 0
		}
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5532
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMMENTS)
		}
	case 1727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5533
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_COMPRESSION)
		}
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5534
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_CONSTRAINTS)
		}
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5535
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_DEFAULTS)
		}
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5536
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_IDENTITY)
		}
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5537
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_GENERATED)
		}
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5538
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_INDEXES)
		}
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5539
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STATISTICS)
		}
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5540
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_STORAGE)
		}
	case 1735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5541
		{
			yyVAL.ival = int(ast.CREATE_TABLE_LIKE_ALL)
		}
	case 1736:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5546
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5547
		{
			yyVAL.str = "default"
		}
	case 1738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5551
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5552
		{
			yyVAL.str = ""
		}
	case 1740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5556
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5557
		{
			yyVAL.str = "default"
		}
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5561
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1743:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5562
		{
			yyVAL.str = ""
		}
	case 1744:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5567
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1745:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5568
		{
			yyVAL.list = nil
		}
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5573
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5579
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5586
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5587
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5592
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[2].list
			yyVAL.node = colDef
		}
	case 1751:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5598
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, nil, 0)
			colDef.Constraints = yyDollar[4].list
			yyVAL.node = colDef
		}
	case 1752:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5609
		{
			hashSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_HASH)
			hashSpec.IsDefault = false

			// Parse hash partition bounds (modulus and remainder)
			hashOptions := yyDollar[5].list
			for _, optNode := range hashOptions.Items {
				if defElem, ok := optNode.(*ast.DefElem); ok {
					if defElem.Defname == "modulus" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Modulus = integerVal.IVal
							}
						}
					} else if defElem.Defname == "remainder" {
						if intVal, ok := defElem.Arg.(*ast.A_Const); ok && intVal.Isnull == false {
							if integerVal, ok := intVal.Val.(*ast.Integer); ok {
								hashSpec.Remainder = integerVal.IVal
							}
						}
					}
				}
			}

			yyVAL.partboundspec = hashSpec
		}
	case 1753:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5638
		{
			listSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			listSpec.IsDefault = false
			listSpec.ListDatums = yyDollar[5].list
			yyVAL.partboundspec = listSpec
		}
	case 1754:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:5647
		{
			rangeSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_RANGE)
			rangeSpec.IsDefault = false
			rangeSpec.LowDatums = yyDollar[5].list
			rangeSpec.HighDatums = yyDollar[9].list
			yyVAL.partboundspec = rangeSpec
		}
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5657
		{
			defaultSpec := ast.NewPartitionBoundSpec(ast.PARTITION_STRATEGY_LIST)
			defaultSpec.IsDefault = true
			yyVAL.partboundspec = defaultSpec
		}
	case 1756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5666
		{
			yyVAL.node = ast.NewDefElem(yyDollar[1].str, ast.NewA_Const(ast.NewInteger(yyDollar[2].ival), 0))
		}
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5673
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 1758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5677
		{
			nodeList := yyDollar[1].list
			nodeList.Append(yyDollar[3].node)
			yyVAL.list = nodeList
		}
	case 1759:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5685
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1760:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5686
		{
			yyVAL.list = nil
		}
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5691
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5695
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1763:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5703
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[2].node)
		}
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5709
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5714
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 1766:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:5719
		{
			colDef := ast.NewColumnDef(yyDollar[1].str, yyDollar[2].typnam, 0)
			colDef.StorageName = yyDollar[3].str
			colDef.Compression = yyDollar[4].str
			colDef.Fdwoptions = yyDollar[5].list
			colDef.Constraints = yyDollar[6].list
			yyVAL.node = colDef
		}
	case 1767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5731
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1768:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5736
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 1769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5743
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5748
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5749
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5751
		{
			/*
			 * Note: the CollateClause is momentarily included in
			 * the list built by ColQualList, but we split it out
			 * again in SplitColQualList.
			 */
			collateClause := ast.NewCollateClause(yyDollar[2].list)
			yyVAL.node = collateClause
		}
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5764
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1774:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5769
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_NOT_DEFERRABLE)
			yyVAL.node = constraint
		}
	case 1775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5774
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_DEFERRED)
			yyVAL.node = constraint
		}
	case 1776:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5779
		{
			constraint := ast.NewConstraint(ast.CONSTR_ATTR_IMMEDIATE)
			yyVAL.node = constraint
		}
	case 1777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5787
		{
			yyVAL.bval = true
		}
	case 1778:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5788
		{
			yyVAL.bval = false
		}
	case 1779:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5789
		{
			yyVAL.bval = true
		}
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5793
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_ALWAYS
		}
	case 1781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5794
		{
			yyVAL.byt = ast.ATTRIBUTE_IDENTITY_BY_DEFAULT
		}
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5799
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5801
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5806
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1785:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5810
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5814
		{
			// SeqOptElem already returns a DefElem, so we can use it directly
			// Check for invalid options as per PostgreSQL
			defElem := yyDollar[2].defelt
			if defElem.Defname == "as" || defElem.Defname == "restart" || defElem.Defname == "owned_by" {
				yylex.Error("sequence option not supported here")
			}
			yyVAL.defelt = yyDollar[2].defelt
		}
	case 1787:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5824
		{
			yyVAL.defelt = ast.NewDefElem("generated", ast.NewInteger(int(yyDollar[3].byt)))
		}
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5830
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 1789:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5831
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 1790:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5836
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].typnam)
		}
	case 1791:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5840
		{
			yyVAL.defelt = ast.NewDefElem("cache", yyDollar[2].node)
		}
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5844
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(true))
		}
	case 1793:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5848
		{
			yyVAL.defelt = ast.NewDefElem("cycle", ast.NewBoolean(false))
		}
	case 1794:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5852
		{
			yyVAL.defelt = ast.NewDefElem("increment", yyDollar[3].node)
		}
	case 1795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5856
		{
			yyVAL.defelt = ast.NewDefElem("logged", nil)
		}
	case 1796:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5860
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", yyDollar[2].node)
		}
	case 1797:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5864
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", yyDollar[2].node)
		}
	case 1798:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5868
		{
			yyVAL.defelt = ast.NewDefElem("maxvalue", nil)
		}
	case 1799:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5872
		{
			yyVAL.defelt = ast.NewDefElem("minvalue", nil)
		}
	case 1800:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5876
		{
			yyVAL.defelt = ast.NewDefElem("owned_by", yyDollar[3].list)
		}
	case 1801:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5880
		{
			yyVAL.defelt = ast.NewDefElem("sequence_name", yyDollar[3].list)
		}
	case 1802:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5884
		{
			yyVAL.defelt = ast.NewDefElem("start", yyDollar[3].node)
		}
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5888
		{
			yyVAL.defelt = ast.NewDefElem("restart", nil)
		}
	case 1804:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5892
		{
			yyVAL.defelt = ast.NewDefElem("restart", yyDollar[3].node)
		}
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5896
		{
			yyVAL.defelt = ast.NewDefElem("unlogged", nil)
		}
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5902
		{
		}
	case 1807:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5903
		{
		}
	case 1808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5907
		{
		}
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5908
		{
		}
	case 1810:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5909
		{
		}
	case 1811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5914
		{
			// RECHECK no longer does anything in opclass definitions,
			// but we still accept it to ease porting of old database dumps.
			// When this is used, we should emit a notice.
			// For now, just return true to indicate RECHECK was present
			yyVAL.bval = true
		}
	case 1812:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5921
		{
			yyVAL.bval = false
		}
	case 1813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:5925
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1814:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:5926
		{
			yyVAL.list = nil
		}
	case 1815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5931
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NOTNULL)
		}
	case 1816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:5935
		{
			yyVAL.node = ast.NewConstraint(ast.CONSTR_NULL)
		}
	case 1817:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5939
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Keys = nil // Will be filled by the parser
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Options = yyDollar[3].list
			constraint.Indexspace = yyDollar[4].str
			yyVAL.node = constraint
		}
	case 1818:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:5948
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = nil // Will be filled by the parser
			yyVAL.node = constraint
		}
	case 1819:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5954
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			yyVAL.node = constraint
		}
	case 1820:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:5960
		{
			constraint := ast.NewConstraint(ast.CONSTR_DEFAULT)
			constraint.RawExpr = yyDollar[2].node
			yyVAL.node = constraint
		}
	case 1821:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5966
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Pktable = yyDollar[2].rangevar
			constraint.PkAttrs = yyDollar[3].list
			constraint.FkMatchtype = yyDollar[4].byt
			if actions := yyDollar[5].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			yyVAL.node = constraint
		}
	case 1822:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:5983
		{
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.Options = yyDollar[5].list
			yyVAL.node = constraint
		}
	case 1823:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:5990
		{
			constraint := ast.NewConstraint(ast.CONSTR_GENERATED)
			constraint.GeneratedWhen = yyDollar[2].byt
			constraint.RawExpr = yyDollar[5].node
			yyVAL.node = constraint
		}
	case 1824:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6000
		{
			constraint := yyDollar[3].node.(*ast.Constraint)
			constraint.Conname = yyDollar[2].str
			yyVAL.node = constraint
		}
	case 1825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6005
		{
			yyVAL.node = yyDollar[1].node
		}
	case 1826:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6010
		{
			constraint := ast.NewConstraint(ast.CONSTR_CHECK)
			constraint.RawExpr = yyDollar[3].node
			processConstraintAttributeSpec(yyDollar[5].ival, constraint)
			yyVAL.node = constraint
		}
	case 1827:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6018
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.NullsNotDistinct = !yyDollar[2].bval
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 1828:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6029
		{
			constraint := ast.NewConstraint(ast.CONSTR_UNIQUE)
			constraint.Indexname = yyDollar[2].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[3].ival, constraint)
			yyVAL.node = constraint
		}
	case 1829:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6040
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Keys = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			processConstraintAttributeSpec(yyDollar[9].ival, constraint)
			yyVAL.node = constraint
		}
	case 1830:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6050
		{
			constraint := ast.NewConstraint(ast.CONSTR_PRIMARY)
			constraint.Indexname = yyDollar[3].str
			// Clear lists for existing index
			constraint.Keys = nil
			constraint.Including = nil
			processConstraintAttributeSpec(yyDollar[4].ival, constraint)
			yyVAL.node = constraint
		}
	case 1831:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:6061
		{
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.FkAttrs = yyDollar[4].list
			constraint.Pktable = yyDollar[7].rangevar
			constraint.PkAttrs = yyDollar[8].list
			constraint.FkMatchtype = yyDollar[9].byt
			if actions := yyDollar[10].keyactions; actions != nil {
				constraint.FkUpdAction = actions.UpdateAction.Action
				constraint.FkDelAction = actions.DeleteAction.Action
				// Copy column list for SET NULL/SET DEFAULT on DELETE
				if actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETNULL ||
					actions.DeleteAction.Action == ast.FKCONSTR_ACTION_SETDEFAULT {
					constraint.FkDelSetCols = actions.DeleteAction.Cols
				}
			}
			processConstraintAttributeSpec(yyDollar[11].ival, constraint)
			yyVAL.node = constraint
		}
	case 1832:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6082
		{
			constraint := ast.NewConstraint(ast.CONSTR_EXCLUSION)
			constraint.AccessMethod = yyDollar[2].str
			constraint.Exclusions = yyDollar[4].list
			constraint.Including = yyDollar[6].list
			constraint.Options = yyDollar[7].list
			constraint.Indexspace = yyDollar[8].str
			constraint.WhereClause = yyDollar[9].node
			processConstraintAttributeSpec(yyDollar[10].ival, constraint)
			yyVAL.node = constraint
		}
	case 1833:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6096
		{
			yyVAL.bval = true
		}
	case 1834:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6097
		{
			yyVAL.bval = false
		}
	case 1835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6103
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 1836:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6109
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1837:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6117
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[3].list)
		}
	case 1838:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6122
		{
			// Create a NodeList with index_elem and operator (matching PostgreSQL's list_make2 approach)
			yyVAL.node = ast.NewNodeList(yyDollar[1].node, yyDollar[5].list)
		}
	case 1839:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6130
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1840:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6134
		{
			yyVAL.list = nil
		}
	case 1841:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6141
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_FULL
		}
	case 1842:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6145
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_PARTIAL
		}
	case 1843:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6149
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 1844:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6153
		{
			yyVAL.byt = ast.FKCONSTR_MATCH_SIMPLE
		}
	case 1845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6160
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 1846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6170
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 1847:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6180
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[1].keyaction
			n.DeleteAction = yyDollar[2].keyaction
			yyVAL.keyactions = n
		}
	case 1848:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6187
		{
			n := &ast.KeyActions{}
			n.UpdateAction = yyDollar[2].keyaction
			n.DeleteAction = yyDollar[1].keyaction
			yyVAL.keyactions = n
		}
	case 1849:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6194
		{
			n := &ast.KeyActions{}
			n.UpdateAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			n.DeleteAction = &ast.KeyAction{
				Action: ast.FKCONSTR_ACTION_NOACTION,
				Cols:   nil,
			}
			yyVAL.keyactions = n
		}
	case 1850:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6209
		{
			// Check for unsupported column lists on UPDATE actions
			keyAction := yyDollar[3].keyaction
			if keyAction.Cols != nil {
				if len(keyAction.Cols.Items) > 0 {
					yylex.Error("column list with SET NULL/SET DEFAULT is only supported for ON DELETE actions")
				}
			}
			yyVAL.keyaction = keyAction
		}
	case 1851:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6222
		{
			yyVAL.keyaction = yyDollar[3].keyaction
		}
	case 1852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6229
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_NOACTION
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6236
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_RESTRICT
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6243
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_CASCADE
			n.Cols = nil
			yyVAL.keyaction = n
		}
	case 1855:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6250
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETNULL
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 1856:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6257
		{
			n := &ast.KeyAction{}
			n.Action = ast.FKCONSTR_ACTION_SETDEFAULT
			n.Cols = yyDollar[3].list
			yyVAL.keyaction = n
		}
	case 1857:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6266
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1858:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6267
		{
			yyVAL.list = nil
		}
	case 1859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6271
		{
			yyVAL.partspec = yyDollar[1].partspec
		}
	case 1860:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6272
		{
			yyVAL.partspec = nil
		}
	case 1861:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6277
		{
			partitionSpec := ast.NewPartitionSpec(ast.PartitionStrategy(yyDollar[3].str), yyDollar[5].list)
			yyVAL.partspec = partitionSpec
		}
	case 1862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6285
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1863:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6290
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1864:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6298
		{
			partElem := ast.NewPartitionElem(yyDollar[1].str, nil, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 1865:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6305
		{
			partElem := ast.NewPartitionElem("", yyDollar[1].node, 0)
			partElem.Collation = yyDollar[2].list
			partElem.Opclass = yyDollar[3].list
			yyVAL.node = partElem
		}
	case 1866:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6312
		{
			partElem := ast.NewPartitionElem("", yyDollar[2].node, 0)
			partElem.Collation = yyDollar[4].list
			partElem.Opclass = yyDollar[5].list
			yyVAL.node = partElem
		}
	case 1867:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6321
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1868:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6322
		{
			yyVAL.str = ""
		}
	case 1869:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6326
		{
			yyVAL.oncommit = ast.ONCOMMIT_DROP
		}
	case 1870:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6327
		{
			yyVAL.oncommit = ast.ONCOMMIT_DELETE_ROWS
		}
	case 1871:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6328
		{
			yyVAL.oncommit = ast.ONCOMMIT_PRESERVE_ROWS
		}
	case 1872:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6329
		{
			yyVAL.oncommit = ast.ONCOMMIT_NOOP
		}
	case 1873:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6333
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1874:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6334
		{
			yyVAL.str = ""
		}
	case 1875:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6338
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1876:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6339
		{
			yyVAL.str = ""
		}
	case 1877:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6343
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1878:
		yyDollar = yyS[yypt-16 : yypt+1]
//line postgres.y:6356
		{
			indexStmt := ast.NewIndexStmt(yyDollar[5].str, yyDollar[7].rangevar, yyDollar[10].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.AccessMethod = yyDollar[8].str
			indexStmt.IndexIncludingParams = yyDollar[12].list
			indexStmt.NullsNotDistinct = !yyDollar[13].bval
			indexStmt.Options = yyDollar[14].list
			indexStmt.TableSpace = yyDollar[15].str
			indexStmt.WhereClause = yyDollar[16].node
			yyVAL.stmt = indexStmt
		}
	case 1879:
		yyDollar = yyS[yypt-19 : yypt+1]
//line postgres.y:6371
		{
			indexStmt := ast.NewIndexStmt(yyDollar[8].str, yyDollar[10].rangevar, yyDollar[13].list)
			indexStmt.Unique = yyDollar[2].bval
			indexStmt.Concurrent = yyDollar[4].bval
			indexStmt.IfNotExists = true
			indexStmt.AccessMethod = yyDollar[11].str
			indexStmt.IndexIncludingParams = yyDollar[15].list
			indexStmt.NullsNotDistinct = !yyDollar[16].bval
			indexStmt.Options = yyDollar[17].list
			indexStmt.TableSpace = yyDollar[18].str
			indexStmt.WhereClause = yyDollar[19].node
			yyVAL.stmt = indexStmt
		}
	case 1880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6387
		{
			yyVAL.bval = true
		}
	case 1881:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6388
		{
			yyVAL.bval = false
		}
	case 1882:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6392
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1883:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6393
		{
			yyVAL.str = "btree"
		}
	case 1884:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6397
		{
			yyVAL.list = yyDollar[3].list
		}
	case 1885:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6398
		{
			yyVAL.list = nil
		}
	case 1886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6403
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1887:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6408
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1888:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6416
		{
			yyVAL.list = yyDollar[2].list
		}
	case 1889:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6417
		{
			yyVAL.list = nil
		}
	case 1890:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6429
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1891:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6435
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1892:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6442
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 1893:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6448
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_INDEX
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1894:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6455
		{
			// Index partition attachment - dedicated rule
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_INDEX
			yyVAL.stmt = alterStmt
		}
	case 1895:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6464
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			yyVAL.stmt = alterStmt
		}
	case 1896:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6470
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_SEQUENCE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1897:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6477
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, yyDollar[4].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			yyVAL.stmt = alterStmt
		}
	case 1898:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6483
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, yyDollar[6].list)
			alterStmt.Objtype = ast.OBJECT_VIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1899:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6490
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			yyVAL.stmt = alterStmt
		}
	case 1900:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6496
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_MATVIEW
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1901:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6503
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[4].rangevar, yyDollar[5].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1902:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6509
		{
			alterStmt := ast.NewAlterTableStmt(yyDollar[6].rangevar, yyDollar[7].list)
			alterStmt.Objtype = ast.OBJECT_FOREIGN_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1903:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6516
		{
			// Partition commands - dedicated rule for partition-only operations
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[4].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[3].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			yyVAL.stmt = alterStmt
		}
	case 1904:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6525
		{
			// Partition commands with IF EXISTS
			cmdList := ast.NewNodeList()
			cmdList.Append(yyDollar[6].node.(*ast.AlterTableCmd))
			alterStmt := ast.NewAlterTableStmt(yyDollar[5].rangevar, cmdList)
			alterStmt.Objtype = ast.OBJECT_TABLE
			alterStmt.MissingOk = true
			yyVAL.stmt = alterStmt
		}
	case 1905:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6535
		{
			// Bulk tablespace move for tables
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 1906:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6542
		{
			// Bulk tablespace move for tables owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_TABLE, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 1907:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:6550
		{
			// Bulk tablespace move for indexes
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[9].str)
			moveStmt.Nowait = yyDollar[10].bval
			yyVAL.stmt = moveStmt
		}
	case 1908:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:6557
		{
			// Bulk tablespace move for indexes owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[6].str, ast.OBJECT_INDEX, yyDollar[12].str)
			moveStmt.Roles = yyDollar[9].list
			moveStmt.Nowait = yyDollar[13].bval
			yyVAL.stmt = moveStmt
		}
	case 1909:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:6565
		{
			// Bulk tablespace move for materialized views
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[10].str)
			moveStmt.Nowait = yyDollar[11].bval
			yyVAL.stmt = moveStmt
		}
	case 1910:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:6572
		{
			// Bulk tablespace move for materialized views owned by specific roles
			moveStmt := ast.NewAlterTableMoveAllStmt(yyDollar[7].str, ast.OBJECT_MATVIEW, yyDollar[13].str)
			moveStmt.Roles = yyDollar[10].list
			moveStmt.Nowait = yyDollar[14].bval
			yyVAL.stmt = moveStmt
		}
	case 1911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6583
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 1912:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6588
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 1913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6596
		{
			yyVAL.bval = true
		}
	case 1914:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:6597
		{
			yyVAL.bval = false
		}
	case 1915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6602
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].rolespec)
		}
	case 1916:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6607
		{
			yyDollar[1].list.Append(yyDollar[3].rolespec)
			yyVAL.list = yyDollar[1].list
		}
	case 1917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6615
		{
			roleSpec := yyDollar[1].rolespec

			switch roleSpec.Roletype {
			case ast.ROLESPEC_CSTRING:
				yyVAL.str = roleSpec.Rolename
			case ast.ROLESPEC_PUBLIC:
				// PostgreSQL throws an error for "public" role name
				yylex.Error(`role name "public" is reserved`)
				return 1
			case ast.ROLESPEC_SESSION_USER:
				// PostgreSQL throws an error: SESSION_USER cannot be used as a role name here
				yylex.Error(`SESSION_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_USER:
				// PostgreSQL throws an error: CURRENT_USER cannot be used as a role name here
				yylex.Error(`CURRENT_USER cannot be used as a role name here`)
				return 1
			case ast.ROLESPEC_CURRENT_ROLE:
				// PostgreSQL throws an error: CURRENT_ROLE cannot be used as a role name here
				yylex.Error(`CURRENT_ROLE cannot be used as a role name here`)
				return 1
			default:
				yylex.Error(`invalid role specification`)
				return 1
			}
		}
	case 1918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6646
		{
			// Handle special role names: "public" and "none"
			var roleSpec *ast.RoleSpec

			if yyDollar[1].str == "public" {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_PUBLIC,
				}
			} else if yyDollar[1].str == "none" {
				// PostgreSQL throws an error for "none" - role name "none" is reserved
				yylex.Error(`role name "none" is reserved`)
				return 1
			} else {
				roleSpec = &ast.RoleSpec{
					BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
					Roletype: ast.ROLESPEC_CSTRING,
					Rolename: yyDollar[1].str,
				}
			}
			yyVAL.rolespec = roleSpec
		}
	case 1919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6669
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_ROLE,
			}
		}
	case 1920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6676
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_CURRENT_USER,
			}
		}
	case 1921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:6683
		{
			yyVAL.rolespec = &ast.RoleSpec{
				BaseNode: ast.BaseNode{Tag: ast.T_RoleSpec},
				Roletype: ast.ROLESPEC_SESSION_USER,
			}
		}
	case 1922:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6694
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[2].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1923:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6701
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[5].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1924:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6708
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[3].node)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1925:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6715
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddColumn, "", yyDollar[6].node)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1926:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6722
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ColumnDefault, yyDollar[3].str, yyDollar[4].node)
		}
	case 1927:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6727
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropNotNull, yyDollar[3].str, nil)
		}
	case 1928:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6732
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetNotNull, yyDollar[3].str, nil)
		}
	case 1929:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6737
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetExpression, yyDollar[3].str, yyDollar[8].node)
		}
	case 1930:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6742
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
		}
	case 1931:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6747
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropExpression, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1932:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6754
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStatistics, yyDollar[3].str, yyDollar[6].node)
		}
	case 1933:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6759
		{
			cmd := ast.NewAlterTableCmd(ast.AT_SetStatistics, "", yyDollar[6].node)
			cmd.Num = int16(yyDollar[3].ival)
			yyVAL.node = cmd
		}
	case 1934:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6766
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 1935:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6771
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetOptions, yyDollar[3].str, yyDollar[5].list)
		}
	case 1936:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6776
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetStorage, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 1937:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6781
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetCompression, yyDollar[3].str, ast.NewString(yyDollar[5].str))
		}
	case 1938:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:6786
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AddIdentity, yyDollar[3].str, nil)
			constraint := ast.NewConstraint(ast.CONSTR_IDENTITY)
			constraint.GeneratedWhen = yyDollar[6].byt
			constraint.Options = yyDollar[9].list
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 1939:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6796
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetIdentity, yyDollar[3].str, yyDollar[4].list)
		}
	case 1940:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:6801
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1941:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:6808
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropIdentity, yyDollar[3].str, nil)
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1942:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6815
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1943:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6823
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropColumn, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1944:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:6834
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterColumnType, yyDollar[3].str, nil)
			def := ast.NewColumnDef("", yyDollar[6].typnam, 0)
			def.Collclause = yyDollar[7].node.(*ast.CollateClause)
			def.RawDefault = yyDollar[8].node
			cmd.Def = def
			yyVAL.node = cmd
		}
	case 1945:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6844
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AlterColumnGenericOptions, yyDollar[3].str, yyDollar[4].list)
		}
	case 1946:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6849
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddConstraint, "", yyDollar[2].node)
		}
	case 1947:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6854
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AlterConstraint, "", nil)
			constraint := ast.NewConstraint(ast.CONSTR_FOREIGN)
			constraint.Conname = yyDollar[3].str
			constraint.Deferrable = (yyDollar[4].ival & ast.CAS_DEFERRABLE) != 0
			constraint.Initdeferred = (yyDollar[4].ival & ast.CAS_INITIALLY_DEFERRED) != 0
			cmd.Def = constraint
			yyVAL.node = cmd
		}
	case 1948:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6865
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ValidateConstraint, yyDollar[3].str, nil)
		}
	case 1949:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:6870
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[5].str, nil)
			cmd.Behavior = yyDollar[6].dropBehav
			cmd.MissingOk = true
			yyVAL.node = cmd
		}
	case 1950:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6878
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DropConstraint, yyDollar[3].str, nil)
			cmd.Behavior = yyDollar[4].dropBehav
			cmd.MissingOk = false
			yyVAL.node = cmd
		}
	case 1951:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6886
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOids, "", nil)
		}
	case 1952:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6891
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ClusterOn, yyDollar[3].str, nil)
		}
	case 1953:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6896
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropCluster, "", nil)
		}
	case 1954:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6901
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetLogged, "", nil)
		}
	case 1955:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6906
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetUnLogged, "", nil)
		}
	case 1956:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6911
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrig, yyDollar[3].str, nil)
		}
	case 1957:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6916
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysTrig, yyDollar[4].str, nil)
		}
	case 1958:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6921
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaTrig, yyDollar[4].str, nil)
		}
	case 1959:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6926
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigAll, "", nil)
		}
	case 1960:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6931
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableTrigUser, "", nil)
		}
	case 1961:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6936
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrig, yyDollar[3].str, nil)
		}
	case 1962:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6941
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigAll, "", nil)
		}
	case 1963:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6946
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableTrigUser, "", nil)
		}
	case 1964:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6951
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRule, yyDollar[3].str, nil)
		}
	case 1965:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6956
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableAlwaysRule, yyDollar[4].str, nil)
		}
	case 1966:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6961
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableReplicaRule, yyDollar[4].str, nil)
		}
	case 1967:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6966
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRule, yyDollar[3].str, nil)
		}
	case 1968:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6971
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddInherit, "", yyDollar[2].rangevar)
		}
	case 1969:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6976
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropInherit, "", yyDollar[3].rangevar)
		}
	case 1970:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6981
		{
			typeName := makeTypeNameFromNodeList(yyDollar[2].list)
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_AddOf, "", typeName)
		}
	case 1971:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:6987
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DropOf, "", nil)
		}
	case 1972:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:6992
		{
			cmd := ast.NewAlterTableCmd(ast.AT_ChangeOwner, "", nil)
			cmd.Newowner = yyDollar[3].rolespec
			yyVAL.node = cmd
		}
	case 1973:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:6999
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetAccessMethod, yyDollar[4].str, nil)
		}
	case 1974:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7004
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetTableSpace, yyDollar[3].str, nil)
		}
	case 1975:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7009
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_SetRelOptions, "", yyDollar[2].list)
		}
	case 1976:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7014
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ResetRelOptions, "", yyDollar[2].list)
		}
	case 1977:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7019
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ReplicaIdentity, "", yyDollar[3].node)
		}
	case 1978:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7024
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_EnableRowSecurity, "", nil)
		}
	case 1979:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7029
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_DisableRowSecurity, "", nil)
		}
	case 1980:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7034
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_ForceRowSecurity, "", nil)
		}
	case 1981:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7039
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_NoForceRowSecurity, "", nil)
		}
	case 1982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7043
		{
			yyVAL.node = ast.NewAlterTableCmd(ast.AT_GenericOptions, "", yyDollar[1].list)
		}
	case 1983:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7051
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, yyDollar[4].partboundspec, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1984:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7059
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, yyDollar[4].bval, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1985:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7066
		{
			cmd := ast.NewAlterTableCmd(ast.AT_DetachPartitionFinalize, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1986:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7077
		{
			cmd := ast.NewAlterTableCmd(ast.AT_AttachPartition, "", nil)
			partitionCmd := ast.NewPartitionCmd(yyDollar[3].rangevar, nil, false, 0)
			cmd.Def = partitionCmd
			yyVAL.node = cmd
		}
	case 1987:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7086
		{
			yyVAL.node = yyDollar[3].node
		}
	case 1988:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7087
		{
			yyVAL.node = nil
		}
	case 1989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7091
		{
		}
	case 1990:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:7092
		{
		}
	case 1991:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7103
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1992:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7116
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1993:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7129
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1994:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7142
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1995:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7155
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[5].list
			objects.Append(ast.NewString(yyDollar[3].str))
			n.Objects = objects
			n.Behavior = yyDollar[6].dropBehav
			n.MissingOk = false
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1996:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7170
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = yyDollar[2].objType
			objects := yyDollar[7].list
			objects.Append(ast.NewString(yyDollar[5].str))
			n.Objects = objects
			n.Behavior = yyDollar[8].dropBehav
			n.MissingOk = true
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1997:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7185
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1998:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7198
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_TYPE
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 1999:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:7211
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = false
			n.Objects = yyDollar[3].list
			n.Behavior = yyDollar[4].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2000:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7224
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_DOMAIN
			n.MissingOk = true
			n.Objects = yyDollar[5].list
			n.Behavior = yyDollar[6].dropBehav
			n.Concurrent = false
			yyVAL.stmt = n
		}
	case 2001:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7237
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = false
			n.Objects = yyDollar[4].list
			n.Behavior = yyDollar[5].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2002:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7250
		{
			n := &ast.DropStmt{
				BaseNode: ast.BaseNode{Tag: ast.T_DropStmt},
			}

			n.RemoveType = ast.OBJECT_INDEX
			n.MissingOk = true
			n.Objects = yyDollar[6].list
			n.Behavior = yyDollar[7].dropBehav
			n.Concurrent = true
			yyVAL.stmt = n
		}
	case 2003:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7266
		{
			stmt := yyDollar[2].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2004:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7272
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = true
			yyVAL.stmt = stmt
		}
	case 2005:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7278
		{
			stmt := yyDollar[3].vsetstmt
			stmt.IsLocal = false
			yyVAL.stmt = stmt
		}
	case 2006:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7287
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "TRANSACTION", yyDollar[2].list, false)
		}
	case 2007:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7291
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_MULTI, "SESSION CHARACTERISTICS AS TRANSACTION", yyDollar[5].list, false)
		}
	case 2008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7294
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7298
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2010:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7300
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "timezone", nil, false)
		}
	case 2011:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7304
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "transaction_isolation", nil, false)
		}
	case 2012:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7308
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, "session_authorization", nil, false)
		}
	case 2013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7315
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET, yyDollar[1].str, nil, false)
		}
	case 2014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7319
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_RESET_ALL, "", nil, false)
		}
	case 2015:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7325
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7326
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2017:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7330
		{
			yyVAL.stmt = ast.Stmt(yyDollar[2].vsetstmt)
		}
	case 2018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7335
		{
			yyVAL.objType = ast.OBJECT_TABLE
		}
	case 2019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7336
		{
			yyVAL.objType = ast.OBJECT_SEQUENCE
		}
	case 2020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7337
		{
			yyVAL.objType = ast.OBJECT_VIEW
		}
	case 2021:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7338
		{
			yyVAL.objType = ast.OBJECT_MATVIEW
		}
	case 2022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7339
		{
			yyVAL.objType = ast.OBJECT_INDEX
		}
	case 2023:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7340
		{
			yyVAL.objType = ast.OBJECT_FOREIGN_TABLE
		}
	case 2024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7341
		{
			yyVAL.objType = ast.OBJECT_COLLATION
		}
	case 2025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7342
		{
			yyVAL.objType = ast.OBJECT_CONVERSION
		}
	case 2026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7343
		{
			yyVAL.objType = ast.OBJECT_STATISTIC_EXT
		}
	case 2027:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7344
		{
			yyVAL.objType = ast.OBJECT_TSPARSER
		}
	case 2028:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7345
		{
			yyVAL.objType = ast.OBJECT_TSDICTIONARY
		}
	case 2029:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7346
		{
			yyVAL.objType = ast.OBJECT_TSTEMPLATE
		}
	case 2030:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7347
		{
			yyVAL.objType = ast.OBJECT_TSCONFIGURATION
		}
	case 2031:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7360
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2032:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7365
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2033:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7379
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode: ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:  yyDollar[1].list,
				Objargs:  yyDollar[2].list,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2034:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7391
		{
			yylex.Error("Use NONE to denote the missing argument of a unary operator.")
			return 1
		}
	case 2035:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7396
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, yyDollar[4].typnam)
		}
	case 2036:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7398
		{
			yyVAL.list = ast.NewNodeList(nil, yyDollar[4].typnam)
		}
	case 2037:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:7400
		{
			yyVAL.list = ast.NewNodeList(yyDollar[2].typnam, nil)
		}
	case 2038:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:7404
		{
			objWithArgs := &ast.ObjectWithArgs{
				BaseNode:        ast.BaseNode{Tag: ast.T_ObjectWithArgs},
				Objname:         yyDollar[1].list,
				Objargs:         yyDollar[2].list,
				ObjfuncArgs:     yyDollar[2].list,
				ArgsUnspecified: false,
			}
			yyVAL.objwithargs = objWithArgs
		}
	case 2039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:7417
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].objwithargs)
		}
	case 2040:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:7419
		{
			yyDollar[1].list.Append(yyDollar[3].objwithargs)
			yyVAL.list = yyDollar[1].list
		}
	case 2041:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7423
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_AGGREGATE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2042:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7434
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_COLLATION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2043:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7445
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_CONVERSION,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2044:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7456
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DATABASE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2045:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7467
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMAIN,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2046:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7478
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_DOMCONSTRAINT,
				Object:     yyDollar[3].list,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2047:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7490
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FDW,
				Object:     ast.NewString(yyDollar[5].str),
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2048:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7501
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FUNCTION,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2049:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7512
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2050:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7523
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_LANGUAGE,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2051:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7534
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPCLASS,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2052:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7551
		{
			/* lcons equivalent - create NodeList with string name prepended to qualified_name list */
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[6].str))
			for _, item := range yyDollar[4].list.Items {
				list.Append(item)
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_OPFAMILY,
				Object:     list,
				Newname:    yyDollar[9].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2053:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7568
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2054:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7580
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_POLICY,
				Relation:   yyDollar[7].rangevar,
				Subname:    yyDollar[5].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2055:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7592
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PROCEDURE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2056:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7603
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_PUBLICATION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2057:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7614
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROUTINE,
				Object:     yyDollar[3].objwithargs,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2058:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7625
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SCHEMA,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2059:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7636
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_SERVER,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2060:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7647
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SUBSCRIPTION,
				Object:     ast.NewString(yyDollar[3].str),
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2061:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7658
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2062:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7669
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2063:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7680
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2064:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7691
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_SEQUENCE,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2065:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7702
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2066:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7713
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_VIEW,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2067:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7724
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2068:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7735
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_MATVIEW,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2069:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7746
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[3].rangevar,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2070:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7757
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_INDEX,
				Relation:   yyDollar[5].rangevar,
				Newname:    yyDollar[8].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2071:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7768
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[4].rangevar,
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2072:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7779
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_FOREIGN_TABLE,
				Relation:   yyDollar[6].rangevar,
				Newname:    yyDollar[9].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2073:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7790
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2074:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7803
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_TABLE,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2075:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7816
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[3].rangevar,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2076:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7829
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_VIEW,
				Relation:     yyDollar[5].rangevar,
				Subname:      yyDollar[8].str,
				Newname:      yyDollar[10].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2077:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7842
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2078:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7855
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_MATVIEW,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2079:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7868
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[3].rangevar,
				Subname:    yyDollar[6].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2080:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:7880
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABCONSTRAINT,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[8].str,
				Newname:    yyDollar[10].str,
				MissingOk:  true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2081:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:7892
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[4].rangevar,
				Subname:      yyDollar[7].str,
				Newname:      yyDollar[9].str,
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2082:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:7905
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_COLUMN,
				RelationType: ast.OBJECT_FOREIGN_TABLE,
				Relation:     yyDollar[6].rangevar,
				Subname:      yyDollar[9].str,
				Newname:      yyDollar[11].str,
				MissingOk:    true,
			}
			yyVAL.stmt = renameStmt
		}
	case 2083:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7918
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_RULE,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2084:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7930
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TRIGGER,
				Relation:   yyDollar[5].rangevar,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2085:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:7942
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_EVENT_TRIGGER,
				Object:     ast.NewString(yyDollar[4].str),
				Newname:    yyDollar[7].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2086:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7953
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2087:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7964
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_ROLE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2088:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7975
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TABLESPACE,
				Subname:    yyDollar[3].str,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2089:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:7986
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_STATISTIC_EXT,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2090:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:7997
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSPARSER,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2091:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8008
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSDICTIONARY,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2092:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8019
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSTEMPLATE,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2093:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:8030
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TSCONFIGURATION,
				Object:     yyDollar[5].list,
				Newname:    yyDollar[8].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2094:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8041
		{
			renameStmt := &ast.RenameStmt{
				BaseNode:   ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType: ast.OBJECT_TYPE,
				Object:     yyDollar[3].list,
				Newname:    yyDollar[6].str,
				MissingOk:  false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2095:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8052
		{
			rv, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(err.Error())
			}
			renameStmt := &ast.RenameStmt{
				BaseNode:     ast.BaseNode{Tag: ast.T_RenameStmt},
				RenameType:   ast.OBJECT_ATTRIBUTE,
				RelationType: ast.OBJECT_TYPE,
				Relation:     rv,
				Subname:      yyDollar[6].str,
				Newname:      yyDollar[8].str,
				Behavior:     ast.DropBehavior(yyDollar[9].dropBehav),
				MissingOk:    false,
			}
			yyVAL.stmt = renameStmt
		}
	case 2096:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8078
		{
			yyVAL.ival = 0
		}
	case 2097:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8080
		{
			// Combine constraint attribute bits
			newspec := yyDollar[1].ival | yyDollar[2].ival

			// Check for conflicts (NOT DEFERRABLE + INITIALLY DEFERRED)
			if (newspec & (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED)) == (ast.CAS_NOT_DEFERRABLE | ast.CAS_INITIALLY_DEFERRED) {
				// This would be an error in real PostgreSQL parser
			}

			yyVAL.ival = newspec
		}
	case 2098:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8094
		{
			yyVAL.ival = ast.CAS_NOT_DEFERRABLE
		}
	case 2099:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8095
		{
			yyVAL.ival = ast.CAS_DEFERRABLE
		}
	case 2100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8096
		{
			yyVAL.ival = ast.CAS_INITIALLY_IMMEDIATE
		}
	case 2101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8097
		{
			yyVAL.ival = ast.CAS_INITIALLY_DEFERRED
		}
	case 2102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8098
		{
			yyVAL.ival = ast.CAS_NOT_VALID
		}
	case 2103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8099
		{
			yyVAL.ival = ast.CAS_NO_INHERIT
		}
	case 2104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8103
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8108
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8113
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8121
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8125
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2109:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8129
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, yyDollar[5].node, ast.DEFELEM_UNSPEC)
		}
	case 2110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8133
		{
			yyVAL.defelt = ast.NewDefElemExtended(yyDollar[1].str, yyDollar[3].str, nil, ast.DEFELEM_UNSPEC)
		}
	case 2111:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8147
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  yyDollar[7].typnam,
				Options:     yyDollar[8].list,
				SQLBody:     yyDollar[9].node,
			}
			yyVAL.stmt = stmt
		}
	case 2112:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:8161
		{
			// Handle RETURNS TABLE variant
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil, // TODO: Handle table return type
				Options:     yyDollar[11].list,
				SQLBody:     yyDollar[12].node,
			}
			// TODO: Process table_func_column_list into appropriate return type
			yyVAL.stmt = stmt
		}
	case 2113:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8177
		{
			// No explicit return type (for procedures disguised as functions)
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: false,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2114:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8192
		{
			stmt := &ast.CreateFunctionStmt{
				IsProcedure: true,
				Replace:     yyDollar[2].bval,
				FuncName:    yyDollar[4].list,
				Parameters:  yyDollar[5].list,
				ReturnType:  nil,
				Options:     yyDollar[6].list,
				SQLBody:     yyDollar[7].node,
			}
			yyVAL.stmt = stmt
		}
	case 2115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8207
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8208
		{
			yyVAL.list = nil
		}
	case 2117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8213
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].funparam)
		}
	case 2118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8217
		{
			yyDollar[1].list.Append(yyDollar[3].funparam)
			yyVAL.list = yyDollar[1].list
		}
	case 2119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8225
		{
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8229
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8234
		{
			yyDollar[1].funparam.DefExpr = yyDollar[3].node
			yyVAL.funparam = yyDollar[1].funparam
		}
	case 2122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8242
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    yyDollar[2].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8251
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[2].funparammode,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[3].typnam,
			}
			yyVAL.funparam = param
		}
	case 2124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8260
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    yyDollar[1].str,
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8269
		{
			param := &ast.FunctionParameter{
				Mode:    yyDollar[1].funparammode,
				Name:    "",
				ArgType: yyDollar[2].typnam,
			}
			yyVAL.funparam = param
		}
	case 2126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8278
		{
			param := &ast.FunctionParameter{
				Mode:    ast.FUNC_PARAM_DEFAULT,
				Name:    "",
				ArgType: yyDollar[1].typnam,
			}
			yyVAL.funparam = param
		}
	case 2127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8289
		{
			yyVAL.funparammode = ast.FUNC_PARAM_IN
		}
	case 2128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8290
		{
			yyVAL.funparammode = ast.FUNC_PARAM_OUT
		}
	case 2129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8291
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8292
		{
			yyVAL.funparammode = ast.FUNC_PARAM_INOUT
		}
	case 2131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8293
		{
			yyVAL.funparammode = ast.FUNC_PARAM_VARIADIC
		}
	case 2132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8297
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8301
		{
			yyVAL.typnam = yyDollar[1].typnam
		}
	case 2134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8303
		{
			// Handle %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				// TODO: Add %TYPE indicator
			}
		}
	case 2135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8313
		{
			// Handle SETOF %TYPE reference
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[2].str))
			yyVAL.typnam = &ast.TypeName{
				Names: list,
				Setof: true,
			}
		}
	case 2136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8325
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8326
		{
			yyVAL.list = nil
		}
	case 2138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8331
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].defelt)
			yyVAL.list = list
		}
	case 2139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8337
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8345
		{
			yyVAL.defelt = ast.NewDefElem("as", yyDollar[2].node)
		}
	case 2141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8349
		{
			yyVAL.defelt = ast.NewDefElem("language", ast.NewString(yyDollar[2].str))
		}
	case 2142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8353
		{
			yyVAL.defelt = ast.NewDefElem("transform", yyDollar[2].list)
		}
	case 2143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8357
		{
			yyVAL.defelt = ast.NewDefElem("window", ast.NewBoolean(true))
		}
	case 2144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8361
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8368
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			yyVAL.node = list
		}
	case 2146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8374
		{
			list := ast.NewNodeList()
			list.Append(ast.NewString(yyDollar[1].str))
			list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.node = list
		}
	case 2147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8384
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[3].typnam)
			yyVAL.list = list
		}
	case 2148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8390
		{
			yyDollar[1].list.Append(yyDollar[5].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8398
		{
			yyVAL.node = yyDollar[1].stmt
		}
	case 2150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8402
		{
			/*
			 * A compound statement is stored as a single-item list
			 * containing the list of statements as its member.  That
			 * way, the parse analysis code can tell apart an empty
			 * body from no body at all.
			 */
			list := ast.NewNodeList()
			list.Append(yyDollar[3].list)
			yyVAL.node = list
		}
	case 2151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8414
		{
			yyVAL.node = nil
		}
	case 2152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8421
		{
			yyVAL.stmt = &ast.ReturnStmt{
				ReturnVal: yyDollar[2].node,
			}
		}
	case 2153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8430
		{
			/* As in stmtmulti, discard empty statements */
			if yyDollar[2].stmt != nil {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8440
		{
			yyVAL.list = ast.NewNodeList()
		}
	case 2155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8446
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8447
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 2157:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8452
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(false))
		}
	case 2158:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8456
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8460
		{
			yyVAL.defelt = ast.NewDefElem("strict", ast.NewBoolean(true))
		}
	case 2160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8464
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("immutable"))
		}
	case 2161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8468
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("stable"))
		}
	case 2162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8472
		{
			yyVAL.defelt = ast.NewDefElem("volatility", ast.NewString("volatile"))
		}
	case 2163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8476
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8480
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8484
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(true))
		}
	case 2166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8488
		{
			yyVAL.defelt = ast.NewDefElem("security", ast.NewBoolean(false))
		}
	case 2167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8492
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(true))
		}
	case 2168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8496
		{
			yyVAL.defelt = ast.NewDefElem("leakproof", ast.NewBoolean(false))
		}
	case 2169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8500
		{
			yyVAL.defelt = ast.NewDefElem("cost", yyDollar[2].node)
		}
	case 2170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8504
		{
			yyVAL.defelt = ast.NewDefElem("rows", yyDollar[2].node)
		}
	case 2171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8508
		{
			yyVAL.defelt = ast.NewDefElem("support", yyDollar[2].list)
		}
	case 2172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8512
		{
			yyVAL.defelt = ast.NewDefElem("set", yyDollar[1].vsetstmt)
		}
	case 2173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8516
		{
			yyVAL.defelt = ast.NewDefElem("parallel", ast.NewString(yyDollar[2].str))
		}
	case 2174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8523
		{
			yyVAL.vsetstmt = yyDollar[2].vsetstmt
		}
	case 2175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8527
		{
			yyVAL.vsetstmt = yyDollar[1].stmt.(*ast.VariableSetStmt)
		}
	case 2176:
		yyDollar = yyS[yypt-17 : yypt+1]
//line postgres.y:8543
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[6].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: false,
				Trigname:     yyDollar[4].str,
				Relation:     yyDollar[8].rangevar,
				Funcname:     yyDollar[14].list,
				Args:         yyDollar[16].list,
				Row:          yyDollar[10].bval,
				Timing:       int16(yyDollar[5].ival),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[11].node,
				Transitions:  yyDollar[9].list,
				Deferrable:   false,
				Initdeferred: false,
				Constrrel:    nil,
			}
			yyVAL.stmt = stmt
		}
	case 2177:
		yyDollar = yyS[yypt-21 : yypt+1]
//line postgres.y:8575
		{
			// Extract events and columns from TriggerEvents list [events, columns]
			eventsList := yyDollar[7].list
			events := eventsList.Items[0].(*ast.Integer).IVal
			var columns *ast.NodeList
			if eventsList.Items[1] != nil {
				columns = eventsList.Items[1].(*ast.NodeList)
			}

			stmt := &ast.CreateTriggerStmt{
				Replace:      yyDollar[2].bval,
				IsConstraint: true,
				Trigname:     yyDollar[5].str,
				Relation:     yyDollar[9].rangevar,
				Funcname:     yyDollar[18].list,
				Args:         yyDollar[20].list,
				Row:          true,
				Timing:       int16(ast.TRIGGER_TIMING_AFTER),
				Events:       int16(events),
				Columns:      columns,
				WhenClause:   yyDollar[15].node,
				Transitions:  nil,
				Deferrable:   true, // Default for constraint triggers
				Initdeferred: false,
				Constrrel:    yyDollar[10].rangevar,
			}
			yyVAL.stmt = stmt
		}
	case 2178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8606
		{
			yyVAL.ival = ast.TRIGGER_TIMING_BEFORE
		}
	case 2179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8607
		{
			yyVAL.ival = ast.TRIGGER_TIMING_AFTER
		}
	case 2180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8608
		{
			yyVAL.ival = ast.TRIGGER_TIMING_INSTEAD
		}
	case 2181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8613
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8615
		{
			// Extract event types and column lists from both sides
			events1 := yyDollar[1].list.Items[0].(*ast.Integer).IVal
			events2 := yyDollar[3].list.Items[0].(*ast.Integer).IVal
			columns1 := yyDollar[1].list.Items[1]
			columns2 := yyDollar[3].list.Items[1]

			// Check for duplicate events
			if events1&events2 != 0 {
				// TODO: Generate parse error for duplicate trigger events
			}

			// Create combined result [events1|events2, combined_columns]
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(events1 | events2))

			// Concatenate column lists (if any)
			if columns1 != nil && columns2 != nil {
				// Both have columns - concatenate
				combinedCols := columns1.(*ast.NodeList)
				if columns2List, ok := columns2.(*ast.NodeList); ok {
					for _, item := range columns2List.Items {
						combinedCols.Append(item)
					}
				}
				list.Append(combinedCols)
			} else if columns1 != nil {
				list.Append(columns1)
			} else if columns2 != nil {
				list.Append(columns2)
			} else {
				list.Append(nil)
			}

			yyVAL.list = list
		}
	case 2183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8655
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_INSERT)))
			list.Append(nil) // No columns for INSERT
			yyVAL.list = list
		}
	case 2184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8662
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_DELETE)))
			list.Append(nil) // No columns for DELETE
			yyVAL.list = list
		}
	case 2185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8669
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(nil) // No columns for UPDATE
			yyVAL.list = list
		}
	case 2186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8676
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_UPDATE)))
			list.Append(yyDollar[3].list) // Column list for UPDATE OF
			yyVAL.list = list
		}
	case 2187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8683
		{
			list := ast.NewNodeList()
			list.Append(ast.NewInteger(int(ast.TRIGGER_TYPE_TRUNCATE)))
			list.Append(nil) // No columns for TRUNCATE
			yyVAL.list = list
		}
	case 2188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8692
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2189:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8693
		{
			yyVAL.list = nil
		}
	case 2190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8697
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8702
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2192:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8710
		{
			trans := &ast.TriggerTransition{
				Name:    yyDollar[4].str,
				IsNew:   yyDollar[1].bval,
				IsTable: yyDollar[2].bval,
			}
			yyVAL.node = trans
		}
	case 2193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8721
		{
			yyVAL.bval = true
		}
	case 2194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8722
		{
			yyVAL.bval = false
		}
	case 2195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8726
		{
			yyVAL.bval = true
		}
	case 2196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8727
		{
			yyVAL.bval = false
		}
	case 2197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8731
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8736
		{
			yyVAL.bval = yyDollar[3].bval
		}
	case 2199:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8740
		{
			// If ROW/STATEMENT not specified, default to STATEMENT
			yyVAL.bval = false
		}
	case 2202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8752
		{
			yyVAL.bval = true
		}
	case 2203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8753
		{
			yyVAL.bval = false
		}
	case 2204:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8757
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2205:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8758
		{
			yyVAL.node = nil
		}
	case 2208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8767
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8772
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2210:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8776
		{
			yyVAL.list = nil
		}
	case 2211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8781
		{
			yyVAL.node = ast.NewString(fmt.Sprintf("%d", yyDollar[1].ival))
		}
	case 2212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8784
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8785
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:8786
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:8790
		{
			yyVAL.rangevar = yyDollar[2].rangevar
		}
	case 2216:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8791
		{
			yyVAL.rangevar = nil
		}
	case 2217:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8804
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[4].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[5].list,
				Query:           yyDollar[8].stmt,
				Replace:         false,
				Options:         yyDollar[6].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[9].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2218:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:8820
		{
			// Apply OptTemp persistence to the view RangeVar
			view := yyDollar[6].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[10].stmt,
				Replace:         true,
				Options:         yyDollar[8].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[11].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2219:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:8836
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[5].rangevar
			view.RelPersistence = rune(yyDollar[2].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[7].list,
				Query:           yyDollar[11].stmt,
				Replace:         false,
				Options:         yyDollar[9].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[12].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2220:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:8852
		{
			// RECURSIVE VIEW requires explicit column list
			view := yyDollar[7].rangevar
			view.RelPersistence = rune(yyDollar[4].rune)
			stmt := &ast.ViewStmt{
				View:            view,
				Aliases:         yyDollar[9].list,
				Query:           yyDollar[13].stmt,
				Replace:         true,
				Options:         yyDollar[11].list,
				WithCheckOption: ast.ViewCheckOption(yyDollar[14].ival),
			}
			yyVAL.stmt = stmt
		}
	case 2221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8869
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8870
		{
			yyVAL.list = nil
		}
	case 2223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:8874
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8875
		{
			yyVAL.ival = int(ast.CASCADED_CHECK_OPTION)
		}
	case 2225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8876
		{
			yyVAL.ival = int(ast.LOCAL_CHECK_OPTION)
		}
	case 2226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:8877
		{
			yyVAL.ival = int(ast.NO_CHECK_OPTION)
		}
	case 2227:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8888
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = yyDollar[5].rolespec
			n.SchemaElts = yyDollar[6].list
			yyVAL.stmt = n
		}
	case 2228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8895
		{
			n := ast.NewCreateSchemaStmt(yyDollar[3].str, false)
			n.Authrole = nil
			n.SchemaElts = yyDollar[4].list
			yyVAL.stmt = n
		}
	case 2229:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8902
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = yyDollar[8].rolespec
			n.SchemaElts = yyDollar[9].list
			yyVAL.stmt = n
		}
	case 2230:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8909
		{
			n := ast.NewCreateSchemaStmt(yyDollar[6].str, true)
			n.Authrole = nil
			n.SchemaElts = yyDollar[7].list
			yyVAL.stmt = n
		}
	case 2231:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8925
		{
			n := ast.NewCreateDomainStmt(yyDollar[3].list, yyDollar[5].typnam)
			// Use SplitColQualList to separate constraints and collate clause
			constraints, collClause := SplitColQualList(yyDollar[6].list)
			n.Constraints = constraints
			n.CollClause = collClause
			yyVAL.stmt = n
		}
	case 2232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:8943
		{
			n := ast.NewAlterDomainStmt('T', yyDollar[3].list)
			n.Def = yyDollar[4].node
			yyVAL.stmt = n
		}
	case 2233:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8949
		{
			n := ast.NewAlterDomainStmt('N', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2234:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8954
		{
			n := ast.NewAlterDomainStmt('O', yyDollar[3].list)
			yyVAL.stmt = n
		}
	case 2235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:8959
		{
			n := ast.NewAlterDomainStmt('C', yyDollar[3].list)
			n.Def = yyDollar[5].node
			yyVAL.stmt = n
		}
	case 2236:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:8965
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[6].str
			n.Behavior = yyDollar[7].dropBehav
			n.MissingOk = false
			yyVAL.stmt = n
		}
	case 2237:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:8973
		{
			n := ast.NewAlterDomainStmt('X', yyDollar[3].list)
			n.Name = yyDollar[8].str
			n.Behavior = yyDollar[9].dropBehav
			n.MissingOk = true
			yyVAL.stmt = n
		}
	case 2238:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8981
		{
			n := ast.NewAlterDomainStmt('V', yyDollar[3].list)
			n.Name = yyDollar[6].str
			yyVAL.stmt = n
		}
	case 2239:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:8996
		{
			// Extract actual arguments from aggr_args which returns [args, position_indicator]
			var args *ast.NodeList
			if yyDollar[5].list != nil && yyDollar[5].list.Len() > 0 {
				// First element contains the actual arguments (or nil for *)
				if firstElem, ok := yyDollar[5].list.Items[0].(*ast.NodeList); ok {
					args = firstElem
				} else if yyDollar[5].list.Items[0] == nil {
					// Special case for COUNT(*) - create a list with a single nil element
					args = ast.NewNodeList(nil)
				}
			}
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, false, yyDollar[4].list, args, yyDollar[6].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2240:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9012
		{
			// old-style (pre-8.2) syntax for CREATE AGGREGATE
			n := ast.NewDefineStmt(ast.OBJECT_AGGREGATE, true, yyDollar[4].list, nil, yyDollar[5].list, false, yyDollar[2].bval)
			yyVAL.stmt = n
		}
	case 2241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9018
		{
			n := ast.NewDefineStmt(ast.OBJECT_OPERATOR, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9023
		{
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9028
		{
			// Shell type (identified by lack of definition)
			n := ast.NewDefineStmt(ast.OBJECT_TYPE, false, yyDollar[3].list, nil, nil, false, false)
			yyVAL.stmt = n
		}
	case 2244:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9034
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSPARSER, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2245:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9039
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSDICTIONARY, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2246:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9044
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSTEMPLATE, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2247:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9049
		{
			n := ast.NewDefineStmt(ast.OBJECT_TSCONFIGURATION, false, yyDollar[5].list, nil, yyDollar[6].list, false, false)
			yyVAL.stmt = n
		}
	case 2248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9054
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, yyDollar[4].list, false, false)
			yyVAL.stmt = n
		}
	case 2249:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9059
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, yyDollar[7].list, true, false)
			yyVAL.stmt = n
		}
	case 2250:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9064
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[3].list, nil, ast.NewNodeList(yyDollar[5].list), false, false)
			yyVAL.stmt = n
		}
	case 2251:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9069
		{
			n := ast.NewDefineStmt(ast.OBJECT_COLLATION, false, yyDollar[6].list, nil, ast.NewNodeList(yyDollar[8].list), true, false)
			yyVAL.stmt = n
		}
	case 2252:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9074
		{
			typevar, err := makeRangeVarFromAnyName(yyDollar[3].list, 0)
			if err != nil {
				yylex.Error(fmt.Sprintf("invalid type name: %v", err))
				return 1
			}

			n := ast.NewCompositeTypeStmt(typevar, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2253:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9085
		{
			n := ast.NewCreateEnumStmt(yyDollar[3].list, yyDollar[7].list)
			yyVAL.stmt = n
		}
	case 2254:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9090
		{
			n := ast.NewCreateRangeStmt(yyDollar[3].list, yyDollar[6].list)
			yyVAL.stmt = n
		}
	case 2255:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9104
		{
			n := ast.NewCreateSeqStmt(yyDollar[4].rangevar, yyDollar[5].list, 0, false, false)
			yyVAL.stmt = n
		}
	case 2256:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9109
		{
			n := ast.NewCreateSeqStmt(yyDollar[7].rangevar, yyDollar[8].list, 0, false, true)
			yyVAL.stmt = n
		}
	case 2257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9116
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2258:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9117
		{
			yyVAL.list = nil
		}
	case 2259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9120
		{
		}
	case 2260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9121
		{
		}
	case 2261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9132
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[3].rangevar, yyDollar[4].list, false, false)
		}
	case 2262:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9136
		{
			yyVAL.stmt = ast.NewAlterSeqStmt(yyDollar[5].rangevar, yyDollar[6].list, false, true)
		}
	case 2263:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9149
		{
			n := ast.NewCreateExtensionStmt(yyDollar[3].str, false, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2264:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9154
		{
			n := ast.NewCreateExtensionStmt(yyDollar[6].str, true, yyDollar[8].list)
			yyVAL.stmt = n
		}
	case 2265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9162
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9171
		{
			yyVAL.list = nil
		}
	case 2267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9178
		{
			yyVAL.defelt = ast.NewDefElem("schema", ast.NewString(yyDollar[2].str))
		}
	case 2268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9182
		{
			yyVAL.defelt = ast.NewDefElem("version", ast.NewString(yyDollar[2].str))
		}
	case 2269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9186
		{
			yylex.Error("CREATE EXTENSION ... FROM is no longer supported")
			return 1
		}
	case 2270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9191
		{
			yyVAL.defelt = ast.NewDefElem("cascade", ast.NewBoolean(true))
		}
	case 2271:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9204
		{
			n := ast.NewAlterExtensionStmt(yyDollar[3].str, yyDollar[5].list)
			yyVAL.stmt = n
		}
	case 2272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9212
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].defelt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].defelt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2273:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9221
		{
			yyVAL.list = nil
		}
	case 2274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9228
		{
			yyVAL.defelt = ast.NewDefElem("to", ast.NewString(yyDollar[2].str))
		}
	case 2275:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9241
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), ast.NewString(yyDollar[6].str))
		}
	case 2276:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9245
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(yyDollar[5].objType), yyDollar[6].list)
		}
	case 2277:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9249
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_AGGREGATE), yyDollar[6].objwithargs)
		}
	case 2278:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9253
		{
			// CAST takes two TypeNames as a NodeList
			list := ast.NewNodeList(yyDollar[7].typnam)
			list.Append(yyDollar[9].typnam)
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_CAST), list)
		}
	case 2279:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9260
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_DOMAIN), yyDollar[6].typnam)
		}
	case 2280:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9264
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_FUNCTION), yyDollar[6].objwithargs)
		}
	case 2281:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9268
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPERATOR), yyDollar[6].objwithargs)
		}
	case 2282:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9272
		{
			// OPERATOR CLASS takes method name + class name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then class name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPCLASS), list)
		}
	case 2283:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9281
		{
			// OPERATOR FAMILY takes method name + family name as NodeList
			list := ast.NewNodeList(ast.NewString(yyDollar[9].str)) // method first
			for _, item := range yyDollar[7].list.Items {
				list.Append(item) // then family name parts
			}
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_OPFAMILY), list)
		}
	case 2284:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9290
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_PROCEDURE), yyDollar[6].objwithargs)
		}
	case 2285:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9294
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_ROUTINE), yyDollar[6].objwithargs)
		}
	case 2286:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9298
		{
			list := ast.NewNodeList(yyDollar[7].typnam, ast.NewString(yyDollar[9].str))
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TRANSFORM), list)
		}
	case 2287:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9303
		{
			yyVAL.stmt = ast.NewAlterExtensionContentsStmt(yyDollar[3].str, yyDollar[4].ival != 0, int(ast.OBJECT_TYPE), yyDollar[6].typnam)
		}
	case 2288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9308
		{
			yyVAL.ival = 1
		}
	case 2289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9309
		{
			yyVAL.ival = 0
		}
	case 2290:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9319
		{
			yyVAL.stmt = ast.NewCreateFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2291:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9325
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, yyDollar[7].list)
		}
	case 2292:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9329
		{
			yyVAL.stmt = ast.NewAlterFdwStmt(yyDollar[5].str, yyDollar[6].list, nil)
		}
	case 2293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9335
		{
			yyVAL.defelt = ast.NewDefElem("handler", yyDollar[2].list)
		}
	case 2294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9336
		{
			yyVAL.defelt = ast.NewDefElem("handler", nil)
		}
	case 2295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9337
		{
			yyVAL.defelt = ast.NewDefElem("validator", yyDollar[2].list)
		}
	case 2296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9338
		{
			yyVAL.defelt = ast.NewDefElem("validator", nil)
		}
	case 2297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9342
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9343
		{
			yyDollar[1].list.Append(yyDollar[2].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9347
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9348
		{
			yyVAL.list = nil
		}
	case 2301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9352
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9353
		{
			result := ast.NewNodeList(ast.NewString(yyDollar[1].str))
			for _, item := range yyDollar[2].list.Items {
				result.Append(item)
			}
			yyVAL.list = result
		}
	case 2303:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:9370
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].str, yyDollar[9].str, yyDollar[10].list, false)
		}
	case 2304:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:9375
		{
			yyVAL.stmt = ast.NewCreateForeignServerStmt(yyDollar[6].str, yyDollar[7].str, yyDollar[8].str, yyDollar[12].str, yyDollar[13].list, true)
		}
	case 2305:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9381
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, yyDollar[5].list, true)
		}
	case 2306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9385
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, yyDollar[4].str, nil, true)
		}
	case 2307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9389
		{
			yyVAL.stmt = ast.NewAlterForeignServerStmt(yyDollar[3].str, "", yyDollar[4].list, false)
		}
	case 2308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9395
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9396
		{
			yyVAL.str = ""
		}
	case 2310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9400
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9401
		{
			yyVAL.str = ""
		}
	case 2312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9405
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9406
		{
			yyVAL.str = ""
		}
	case 2314:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9419
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[6].list, yyDollar[8].list, yyDollar[10].str, yyDollar[11].list, nil, false)
		}
	case 2315:
		yyDollar = yyS[yypt-14 : yypt+1]
//line postgres.y:9425
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[9].list, yyDollar[11].list, yyDollar[13].str, yyDollar[14].list, nil, true)
		}
	case 2316:
		yyDollar = yyS[yypt-12 : yypt+1]
//line postgres.y:9431
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[4].rangevar, yyDollar[8].list, ast.NewNodeList(yyDollar[7].rangevar), yyDollar[11].str, yyDollar[12].list, yyDollar[9].partboundspec, false)
		}
	case 2317:
		yyDollar = yyS[yypt-15 : yypt+1]
//line postgres.y:9437
		{
			yyVAL.stmt = ast.NewCreateForeignTableStmt(yyDollar[7].rangevar, yyDollar[11].list, ast.NewNodeList(yyDollar[10].rangevar), yyDollar[14].str, yyDollar[15].list, yyDollar[12].partboundspec, true)
		}
	case 2318:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9449
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list, false)
		}
	case 2319:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9453
		{
			yyVAL.stmt = ast.NewCreateUserMappingStmt(yyDollar[8].rolespec, yyDollar[10].str, yyDollar[11].list, true)
		}
	case 2320:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9459
		{
			yyVAL.stmt = ast.NewAlterUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, yyDollar[8].list)
		}
	case 2321:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9465
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[5].rolespec, yyDollar[7].str, false)
		}
	case 2322:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9469
		{
			yyVAL.stmt = ast.NewDropUserMappingStmt(yyDollar[7].rolespec, yyDollar[9].str, true)
		}
	case 2323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9475
		{
			yyVAL.rolespec = yyDollar[1].rolespec
		}
	case 2324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9476
		{
			yyVAL.rolespec = ast.NewRoleSpec(ast.ROLESPEC_CURRENT_USER, "")
		}
	case 2325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9481
		{
			// For aggregates like COUNT(*)
			// Return a list with [nil, -1] matching PostgreSQL's list_make2(NIL, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(nil, ast.NewInteger(-1))
		}
	case 2326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9487
		{
			// Regular aggregate arguments
			// Return a list with [args, -1] matching PostgreSQL's list_make2($2, makeInteger(-1))
			yyVAL.list = ast.NewNodeList(yyDollar[2].list, ast.NewInteger(-1))
		}
	case 2327:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9493
		{
			// Ordered-set aggregate without direct arguments
			// Return a list with [args, 0] matching PostgreSQL's list_make2($4, makeInteger(0))
			yyVAL.list = ast.NewNodeList(yyDollar[4].list, ast.NewInteger(0))
		}
	case 2328:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9499
		{
			// Hypothetical-set aggregate
			// This is the only case requiring consistency checking in PostgreSQL
			result, err := makeOrderedSetArgs(yyDollar[2].list, yyDollar[5].list)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.list = result
		}
	case 2329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9513
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9517
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9525
		{
			yyVAL.node = yyDollar[1].funparam
		}
	case 2332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9532
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9539
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].defelt)
		}
	case 2334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9543
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9551
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2336:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:9558
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			n.NewValIsAfter = true
			yyVAL.stmt = n
		}
	case 2337:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9566
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = false
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2338:
		yyDollar = yyS[yypt-9 : yypt+1]
//line postgres.y:9575
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.NewVal = yyDollar[7].str
			n.NewValNeighbor = yyDollar[9].str
			n.NewValIsAfter = true
			n.SkipIfNewValExists = yyDollar[6].ival != 0
			yyVAL.stmt = n
		}
	case 2339:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9584
		{
			n := ast.NewAlterEnumStmt(yyDollar[3].list)
			n.OldVal = yyDollar[6].str
			n.NewVal = yyDollar[8].str
			n.SkipIfNewValExists = false
			yyVAL.stmt = n
		}
	case 2340:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9592
		{
			// Following PostgreSQL's approach - DROP VALUE is parsed but not implemented
			// PostgreSQL throws an error saying "dropping an enum value is not implemented"
			yylex.Error("dropping an enum value is not implemented")
			return 1
		}
	case 2341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9608
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9610
		{
			yyVAL.list = nil
		}
	case 2343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9615
		{
			yyVAL.list = ast.NewNodeList(ast.NewString(yyDollar[1].str))
		}
	case 2344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9617
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9622
		{
			if constraint, ok := yyDollar[3].node.(*ast.Constraint); ok {
				constraint.Conname = yyDollar[2].str
				yyVAL.node = constraint
			} else {
				yyVAL.node = yyDollar[3].node
			}
		}
	case 2346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9631
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2347:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9636
		{
			n := ast.NewConstraint(ast.CONSTR_CHECK)
			n.RawExpr = yyDollar[3].node
			n.CookedExpr = "" // Empty string, not nil
			// Process constraint attributes from $5
			processConstraintAttributeSpec(yyDollar[5].ival, n)
			// PostgreSQL: n->initially_valid = !n->skip_validation
			n.InitiallyValid = !n.SkipValidation
			yyVAL.node = n
		}
	case 2348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9647
		{
			n := ast.NewConstraint(ast.CONSTR_NOTNULL)
			// In PostgreSQL, domain NOT NULL constraints have keys = list_make1(makeString("value"))
			n.Keys = ast.NewNodeList(ast.NewString("value"))
			// Process constraint attributes from $3
			processConstraintAttributeSpec(yyDollar[3].ival, n)
			// PostgreSQL sets initially_valid = true for NOT NULL (no NOT VALID support yet)
			n.InitiallyValid = true
			yyVAL.node = n
		}
	case 2349:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:9667
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[7].stmt, yyDollar[5].into, ast.OBJECT_MATVIEW, false, false)
			/* cram additional flags into the IntoClause */
			yyDollar[5].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[5].into.SkipData = !yyDollar[8].bval
			yyVAL.stmt = ctas
		}
	case 2350:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:9675
		{
			ctas := ast.NewCreateTableAsStmt(yyDollar[10].stmt, yyDollar[8].into, ast.OBJECT_MATVIEW, false, true)
			/* cram additional flags into the IntoClause */
			yyDollar[8].into.Rel.RelPersistence = yyDollar[2].rune
			yyDollar[8].into.SkipData = !yyDollar[11].bval
			yyVAL.stmt = ctas
		}
	case 2351:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:9686
		{
			n := ast.NewRefreshMatViewStmt(yyDollar[4].bval, !yyDollar[6].bval, yyDollar[5].rangevar)
			yyVAL.stmt = n
		}
	case 2352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9692
		{
			yyVAL.rune = ast.RELPERSISTENCE_UNLOGGED
		}
	case 2353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9693
		{
			yyVAL.rune = ast.RELPERSISTENCE_PERMANENT
		}
	case 2354:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:9698
		{
			yyVAL.into = &ast.IntoClause{
				Rel:            yyDollar[1].rangevar,
				ColNames:       yyDollar[2].list,
				AccessMethod:   yyDollar[3].str,
				Options:        yyDollar[4].list,
				TableSpaceName: yyDollar[5].str,
			}
		}
	case 2355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9710
		{
			yyVAL.bval = true
		}
	case 2356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9711
		{
			yyVAL.bval = false
		}
	case 2357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9712
		{
			yyVAL.bval = true
		}
	case 2358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9717
		{
			if yyDollar[1].list == nil {
				yyVAL.list = ast.NewNodeList(yyDollar[2].stmt)
			} else {
				yyDollar[1].list.Append(yyDollar[2].stmt)
				yyVAL.list = yyDollar[1].list
			}
		}
	case 2359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9726
		{
			yyVAL.list = nil
		}
	case 2364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9737
		{
			yyVAL.vsetstmt = yyDollar[1].vsetstmt
		}
	case 2365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9739
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_CURRENT, yyDollar[1].str, nil, false)
		}
	case 2366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9743
		{
			args := ast.NewNodeList(yyDollar[3].node)
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "timezone", args, false)
		}
	case 2367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9748
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "catalog", args, false)
		}
	case 2368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9753
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "search_path", args, false)
		}
	case 2369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9758
		{
			var args *ast.NodeList
			if yyDollar[2].str != "" {
				args = ast.NewNodeList(ast.NewString(yyDollar[2].str))
			}
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "client_encoding", args, false)
		}
	case 2370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9766
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[2].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "role", args, false)
		}
	case 2371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9771
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "session_authorization", args, false)
		}
	case 2372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9776
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, "session_authorization", nil, false)
		}
	case 2373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9780
		{
			var value string
			if yyDollar[3].ival == int(ast.XMLOPTION_DOCUMENT) {
				value = "document"
			} else {
				value = "content"
			}
			args := ast.NewNodeList(ast.NewString(value))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "xmloption", args, false)
		}
	case 2374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9791
		{
			args := ast.NewNodeList(ast.NewString(yyDollar[3].str))
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, "transaction_snapshot", args, false)
		}
	case 2375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9799
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9803
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_VALUE, yyDollar[1].str, yyDollar[3].list, false)
		}
	case 2377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9807
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9811
		{
			yyVAL.vsetstmt = ast.NewVariableSetStmt(ast.VAR_SET_DEFAULT, yyDollar[1].str, nil, false)
		}
	case 2379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9818
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9822
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 2381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9829
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9835
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9842
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9843
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9847
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9848
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9849
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9850
		{
			yyVAL.node = ast.NewString("default")
		}
	case 2389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9851
		{
			yyVAL.node = ast.NewString("local")
		}
	case 2390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9852
		{
			yyVAL.node = ast.NewString("true")
		}
	case 2391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9853
		{
			yyVAL.node = ast.NewString("false")
		}
	case 2392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9854
		{
			yyVAL.node = ast.NewString("on")
		}
	case 2393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9855
		{
			yyVAL.node = ast.NewString("off")
		}
	case 2394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9859
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9860
		{
			yyVAL.str = "default"
		}
	case 2396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9861
		{
			yyVAL.str = ""
		}
	case 2397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9865
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9866
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9870
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9871
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9872
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9873
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9877
		{
			yyVAL.ival = int(ast.XMLOPTION_DOCUMENT)
		}
	case 2404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9878
		{
			yyVAL.ival = int(ast.XMLOPTION_CONTENT)
		}
	case 2405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9883
		{
			list := ast.NewNodeList()
			list.Append(yyDollar[1].node)
			yyVAL.list = list
		}
	case 2406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9889
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9894
		{
			yyDollar[1].list.Append(yyDollar[2].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9902
		{
			yyVAL.node = ast.NewDefElem("transaction_isolation", ast.NewString(yyDollar[3].str))
		}
	case 2409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9906
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(true))
		}
	case 2410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9910
		{
			yyVAL.node = ast.NewDefElem("transaction_read_only", ast.NewBoolean(false))
		}
	case 2411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9914
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(true))
		}
	case 2412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9918
		{
			yyVAL.node = ast.NewDefElem("transaction_deferrable", ast.NewBoolean(false))
		}
	case 2413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9924
		{
			yyVAL.str = "read uncommitted"
		}
	case 2414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9925
		{
			yyVAL.str = "read committed"
		}
	case 2415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9926
		{
			yyVAL.str = "repeatable read"
		}
	case 2416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9927
		{
			yyVAL.str = "serializable"
		}
	case 2417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9931
		{
			yyVAL.node = yyDollar[1].typnam
		}
	case 2418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9932
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9933
		{
			yyVAL.node = yyDollar[1].list
		}
	case 2420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9936
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9937
		{
			yyVAL.node = ast.NewString(yyDollar[1].str)
		}
	case 2422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9938
		{
			yyVAL.node = ast.NewString("none")
		}
	case 2423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9942
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9943
		{
			yyVAL.list = nil
		}
	case 2425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9947
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:9948
		{
			yyVAL.node = nil
		}
	case 2427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:9952
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9957
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:9962
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9970
		{
			yyVAL.defelt = yyDollar[1].defelt
		}
	case 2431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9974
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_SET
			yyVAL.defelt = elem
		}
	case 2432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9980
		{
			elem := yyDollar[2].defelt
			elem.Defaction = ast.DEFELEM_ADD
			yyVAL.defelt = elem
		}
	case 2433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:9986
		{
			yyVAL.defelt = ast.NewDefElemExtended("", yyDollar[2].str, nil, ast.DEFELEM_DROP)
		}
	case 2434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9992
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9993
		{
			yyVAL.str = ""
		}
	case 2436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9997
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_NOTHING, "")
		}
	case 2437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9998
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_FULL, "")
		}
	case 2438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:9999
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_DEFAULT, "")
		}
	case 2439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10000
		{
			yyVAL.node = ast.NewReplicaIdentityStmt(ast.REPLICA_IDENTITY_INDEX, yyDollar[3].str)
		}
	case 2440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10004
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10009
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10014
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10021
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, nil)
		}
	case 2444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10022
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[3].node)
		}
	case 2445:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10033
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[9].list, nil)
		}
	case 2446:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:10037
		{
			yyVAL.stmt = ast.NewCreateEventTrigStmt(yyDollar[4].str, yyDollar[6].str, yyDollar[11].list, yyDollar[8].list)
		}
	case 2447:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10043
		{
			yyVAL.stmt = ast.NewAlterEventTrigStmt(yyDollar[4].str, ast.TriggerFires(yyDollar[5].ival))
		}
	case 2448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10049
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_ORIGIN)
		}
	case 2449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10050
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ON_REPLICA)
		}
	case 2450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10051
		{
			yyVAL.ival = int(ast.TRIGGER_FIRES_ALWAYS)
		}
	case 2451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10052
		{
			yyVAL.ival = int(ast.TRIGGER_DISABLED)
		}
	case 2452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10057
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].defelt)
		}
	case 2453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10062
		{
			yyDollar[1].list.Append(yyDollar[3].defelt)
			yyVAL.list = yyDollar[1].list
		}
	case 2454:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10070
		{
			yyVAL.defelt = ast.NewDefElem(yyDollar[1].str, yyDollar[4].list)
		}
	case 2455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10077
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(ast.NewString(yyDollar[1].str))
		}
	case 2456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10082
		{
			yyDollar[1].list.Append(ast.NewString(yyDollar[3].str))
			yyVAL.list = yyDollar[1].list
		}
	case 2457:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10096
		{
			yyVAL.stmt = ast.NewCreateTableSpaceStmt(yyDollar[3].str, yyDollar[4].rolespec, yyDollar[6].str, yyDollar[7].list)
		}
	case 2458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10102
		{
			yyVAL.rolespec = yyDollar[2].rolespec
		}
	case 2459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10103
		{
			yyVAL.rolespec = nil
		}
	case 2460:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10108
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, false)
		}
	case 2461:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10112
		{
			yyVAL.stmt = ast.NewAlterTableSpaceStmt(yyDollar[3].str, yyDollar[5].list, true)
		}
	case 2462:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10127
		{
			yyVAL.stmt = ast.NewCreatePolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].bval, yyDollar[7].str, yyDollar[8].list, yyDollar[9].node, yyDollar[10].node)
		}
	case 2463:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10135
		{
			yyVAL.stmt = ast.NewAlterPolicyStmt(yyDollar[3].str, yyDollar[5].rangevar, yyDollar[6].list, yyDollar[7].node, yyDollar[8].node)
		}
	case 2464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10142
		{
			// Check for "permissive" or "restrictive" (case-insensitive)
			if strings.EqualFold(yyDollar[2].str, "permissive") {
				yyVAL.bval = true
			} else if strings.EqualFold(yyDollar[2].str, "restrictive") {
				yyVAL.bval = false
			} else {
				// Parser will error on invalid value
				yylex.Error("unrecognized row security option")
				return 1
			}
		}
	case 2465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10154
		{
			yyVAL.bval = true
		}
	case 2466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10158
		{
			yyVAL.str = yyDollar[2].str
		}
	case 2467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10159
		{
			yyVAL.str = "all"
		}
	case 2468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10163
		{
			yyVAL.str = "all"
		}
	case 2469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10164
		{
			yyVAL.str = "select"
		}
	case 2470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10165
		{
			yyVAL.str = "insert"
		}
	case 2471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10166
		{
			yyVAL.str = "update"
		}
	case 2472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10167
		{
			yyVAL.str = "delete"
		}
	case 2473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10171
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10172
		{
			// Default to PUBLIC when no TO clause is specified
			publicRole := ast.NewRoleSpec(ast.ROLESPEC_PUBLIC, "")
			yyVAL.list = ast.NewNodeList(publicRole)
		}
	case 2475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10180
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10181
		{
			yyVAL.list = nil
		}
	case 2477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10185
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10186
		{
			yyVAL.node = nil
		}
	case 2479:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10190
		{
			yyVAL.node = yyDollar[4].node
		}
	case 2480:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10191
		{
			yyVAL.node = nil
		}
	case 2481:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10202
		{
			yyVAL.stmt = ast.NewCreateAmStmt(yyDollar[4].str, ast.AmType(yyDollar[6].ival), yyDollar[8].list)
		}
	case 2482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10208
		{
			yyVAL.ival = int(ast.AMTYPE_INDEX)
		}
	case 2483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10209
		{
			yyVAL.ival = int(ast.AMTYPE_TABLE)
		}
	case 2484:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10220
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[3].list, yyDollar[4].list, yyDollar[6].list, yyDollar[8].list, "", false, false)
		}
	case 2485:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10224
		{
			yyVAL.stmt = ast.NewCreateStatsStmt(yyDollar[6].list, yyDollar[7].list, yyDollar[9].list, yyDollar[11].list, "", false, true)
		}
	case 2486:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10231
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[3].list, yyDollar[6].node, false)
		}
	case 2487:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10235
		{
			yyVAL.stmt = ast.NewAlterStatsStmt(yyDollar[5].list, yyDollar[8].node, true)
		}
	case 2488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10241
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].statelem)
		}
	case 2489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10242
		{
			yyDollar[1].list.Append(yyDollar[3].statelem)
			yyVAL.list = yyDollar[1].list
		}
	case 2490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10246
		{
			yyVAL.statelem = ast.NewStatsElem(yyDollar[1].str)
		}
	case 2491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10247
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[1].node)
		}
	case 2492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10248
		{
			yyVAL.statelem = ast.NewStatsElemExpr(yyDollar[2].node)
		}
	case 2493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10259
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, false, yyDollar[4].list)
		}
	case 2494:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10263
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, nil, true, yyDollar[7].list)
		}
	case 2495:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10267
		{
			yyVAL.stmt = ast.NewCreatePublicationStmt(yyDollar[3].str, yyDollar[5].list, false, yyDollar[6].list)
		}
	case 2496:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10274
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, yyDollar[5].list, nil, ast.AP_SetOptions)
		}
	case 2497:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10278
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_AddObjects)
		}
	case 2498:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10282
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_SetObjects)
		}
	case 2499:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10286
		{
			yyVAL.stmt = ast.NewAlterPublicationStmt(yyDollar[3].str, nil, yyDollar[5].list, ast.AP_DropObjects)
		}
	case 2500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10292
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[1].node)
		}
	case 2501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10293
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10298
		{
			pubTable := ast.NewPublicationTable(yyDollar[2].rangevar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_TABLE, pubTable)
		}
	case 2503:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10303
		{
			yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_TABLES_IN_SCHEMA, yyDollar[4].str)
		}
	case 2504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10307
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA)
		}
	case 2505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10311
		{
			// If either a row filter or column list is specified, create a PublicationTable object
			if yyDollar[2].list != nil || yyDollar[3].node != nil {
				// Create a simple RangeVar from the ColId
				rangeVar := ast.NewRangeVar(yyDollar[1].str, "", "")
				pubTable := ast.NewPublicationTable(rangeVar, yyDollar[3].node, yyDollar[2].list)
				yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
			} else {
				yyVAL.node = ast.NewPublicationObjSpecName(ast.PUBLICATIONOBJ_CONTINUATION, yyDollar[1].str)
			}
		}
	case 2506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10323
		{
			rangeVar := makeRangeVarFromQualifiedName(yyDollar[1].str, yyDollar[2].list, -1)
			pubTable := ast.NewPublicationTable(rangeVar, yyDollar[4].node, yyDollar[3].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10329
		{
			pubTable := ast.NewPublicationTable(yyDollar[1].rangevar, yyDollar[3].node, yyDollar[2].list)
			yyVAL.node = ast.NewPublicationObjSpecTable(ast.PUBLICATIONOBJ_CONTINUATION, pubTable)
		}
	case 2508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10334
		{
			yyVAL.node = ast.NewPublicationObjSpec(ast.PUBLICATIONOBJ_CONTINUATION)
		}
	case 2509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10340
		{
			yyVAL.node = yyDollar[3].node
		}
	case 2510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10341
		{
			yyVAL.node = nil
		}
	case 2511:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10352
		{
			yyVAL.stmt = ast.NewCreateSubscriptionStmt(yyDollar[3].str, yyDollar[5].str, yyDollar[7].list, yyDollar[8].list)
		}
	case 2512:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10359
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_OPTIONS, "", nil, yyDollar[5].list)
		}
	case 2513:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10363
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_CONNECTION, yyDollar[5].str, nil, nil)
		}
	case 2514:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10367
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_REFRESH, "", nil, yyDollar[6].list)
		}
	case 2515:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10371
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ADD_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2516:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10375
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_DROP_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2517:
		yyDollar = yyS[yypt-7 : yypt+1]
//line postgres.y:10379
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SET_PUBLICATION, "", yyDollar[6].list, yyDollar[7].list)
		}
	case 2518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10383
		{
			enableOpt := ast.NewNodeList()
			enableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(true)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, enableOpt)
		}
	case 2519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10389
		{
			disableOpt := ast.NewNodeList()
			disableOpt.Append(ast.NewDefElem("enabled", ast.NewBoolean(false)))
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_ENABLED, "", nil, disableOpt)
		}
	case 2520:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10395
		{
			yyVAL.stmt = ast.NewAlterSubscriptionStmt(yyDollar[3].str, ast.ALTER_SUBSCRIPTION_SKIP, "", nil, yyDollar[5].list)
		}
	case 2521:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10408
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, yyDollar[10].objwithargs, ast.CoercionContext(yyDollar[11].ival), false)
		}
	case 2522:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10412
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), false)
		}
	case 2523:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10416
		{
			yyVAL.stmt = ast.NewCreateCastStmt(yyDollar[4].typnam, yyDollar[6].typnam, nil, ast.CoercionContext(yyDollar[10].ival), true)
		}
	case 2524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10422
		{
			yyVAL.ival = int(ast.COERCION_IMPLICIT)
		}
	case 2525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10423
		{
			yyVAL.ival = int(ast.COERCION_ASSIGNMENT)
		}
	case 2526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10424
		{
			yyVAL.ival = int(ast.COERCION_EXPLICIT)
		}
	case 2527:
		yyDollar = yyS[yypt-13 : yypt+1]
//line postgres.y:10436
		{
			yyVAL.stmt = ast.NewCreateOpClassStmt(yyDollar[4].list, yyDollar[11].list, yyDollar[10].str, yyDollar[8].typnam, yyDollar[13].list, yyDollar[5].bval)
		}
	case 2528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10442
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10443
		{
			yyVAL.list = nil
		}
	case 2530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10447
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10448
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2532:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10453
		{
			// Create ObjectWithArgs for simple operator
			owa := ast.NewObjectWithArgs(yyDollar[3].list, nil, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, yyDollar[4].list)
		}
	case 2533:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10459
		{
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, yyDollar[3].objwithargs, yyDollar[4].list)
		}
	case 2534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10463
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[3].objwithargs, nil)
		}
	case 2535:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10467
		{
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, yyDollar[6].objwithargs, yyDollar[4].list)
		}
	case 2536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10471
		{
			yyVAL.node = ast.NewOpClassItemStorage(yyDollar[2].typnam)
		}
	case 2537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10477
		{
			yyVAL.bval = true
		}
	case 2538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10478
		{
			yyVAL.bval = false
		}
	case 2539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10482
		{
			yyVAL.list = nil
		}
	case 2540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10483
		{
			yyVAL.list = yyDollar[4].list
		}
	case 2541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10484
		{
			yyVAL.list = nil
		}
	case 2542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10488
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].typnam)
		}
	case 2543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10489
		{
			yyDollar[1].list.Append(yyDollar[3].typnam)
			yyVAL.list = yyDollar[1].list
		}
	case 2544:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10500
		{
			yyVAL.stmt = ast.NewCreateOpFamilyStmt(yyDollar[4].list, yyDollar[6].str)
		}
	case 2545:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10513
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, false, yyDollar[8].list)
		}
	case 2546:
		yyDollar = yyS[yypt-8 : yypt+1]
//line postgres.y:10517
		{
			yyVAL.stmt = ast.NewAlterOpFamilyStmt(yyDollar[4].list, yyDollar[6].str, true, yyDollar[8].list)
		}
	case 2547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10523
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10524
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2549:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10529
		{
			// Create ObjectWithArgs for operator with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemOperator(yyDollar[2].ival, owa, nil)
		}
	case 2550:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10535
		{
			// Create ObjectWithArgs for function with args
			owa := ast.NewObjectWithArgs(nil, yyDollar[4].list, false, -1)
			yyVAL.node = ast.NewOpClassItemFunction(yyDollar[2].ival, owa, nil)
		}
	case 2551:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10550
		{
			yyVAL.stmt = ast.NewCreateConversionStmt(yyDollar[4].list, yyDollar[6].str, yyDollar[8].str, yyDollar[10].list, yyDollar[2].bval)
		}
	case 2552:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10563
		{
			yyVAL.stmt = ast.NewCreateTransformStmt(yyDollar[2].bval, yyDollar[5].typnam, yyDollar[7].str, linitial(yyDollar[9].list), lsecond(yyDollar[9].list))
		}
	case 2553:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10570
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs)  // fromsql
			yyVAL.list.Append(yyDollar[11].objwithargs) // tosql
		}
	case 2554:
		yyDollar = yyS[yypt-11 : yypt+1]
//line postgres.y:10576
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[11].objwithargs) // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs)  // tosql
		}
	case 2555:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10582
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(yyDollar[5].objwithargs) // fromsql
			yyVAL.list.Append(nil)                     // tosql
		}
	case 2556:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10588
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Append(nil)                     // fromsql
			yyVAL.list.Append(yyDollar[5].objwithargs) // tosql
		}
	case 2557:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10603
		{
			// Parameterless CREATE LANGUAGE is now treated as CREATE EXTENSION
			yyVAL.stmt = ast.NewCreateExtensionStmt(yyDollar[6].str, yyDollar[2].bval, nil)
		}
	case 2558:
		yyDollar = yyS[yypt-10 : yypt+1]
//line postgres.y:10609
		{
			yyVAL.stmt = ast.NewCreatePLangStmt(yyDollar[2].bval, yyDollar[6].str, yyDollar[8].list, yyDollar[9].list, yyDollar[10].list, yyDollar[3].bval)
		}
	case 2559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10615
		{
			yyVAL.bval = true
		}
	case 2560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10616
		{
			yyVAL.bval = false
		}
	case 2561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10621
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10622
		{
			yyVAL.list = nil
		}
	case 2563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10626
		{
			yyVAL.list = yyDollar[1].list
		}
	case 2564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10627
		{
			yyVAL.list = nil
		}
	case 2565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10631
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10632
		{
			yyVAL.list = nil
		}
	case 2567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10635
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_ALL
		}
	case 2568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10636
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DISTINCT
		}
	case 2569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10637
		{
			yyVAL.setquant = ast.SET_QUANTIFIER_DEFAULT
		}
	case 2570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10642
		{
			yyVAL.groupClause = &ast.GroupClause{
				Distinct: yyDollar[3].setquant == ast.SET_QUANTIFIER_DISTINCT,
				List:     yyDollar[4].list,
			}
		}
	case 2571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10649
		{
			yyVAL.groupClause = nil
		}
	case 2572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10655
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10656
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10660
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10661
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10662
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10663
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10664
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10669
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_EMPTY, ast.NewNodeList(), 0)
		}
	case 2580:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10676
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_ROLLUP, yyDollar[3].list, 0)
		}
	case 2581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10683
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_CUBE, yyDollar[3].list, 0)
		}
	case 2582:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10690
		{
			yyVAL.node = ast.NewGroupingSet(ast.GROUPING_SET_SETS, yyDollar[4].list, 0)
		}
	case 2583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10699
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10700
		{
			yyVAL.node = nil
		}
	case 2585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10707
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10711
		{
			yyVAL.list = ast.NewNodeList(yyDollar[1].node)
		}
	case 2587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10712
		{
			yyDollar[1].list.Append(yyDollar[3].node)
			yyVAL.list = yyDollar[1].list
		}
	case 2588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10717
		{
			sortBy := ast.NewSortBy(yyDollar[1].node, ast.SORTBY_USING, ast.SortByNulls(yyDollar[4].ival), 0)
			// Use qual_all_Op (NodeList) directly for UseOp
			sortBy.UseOp = yyDollar[3].list
			yyVAL.node = sortBy
		}
	case 2589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10724
		{
			yyVAL.node = ast.NewSortBy(yyDollar[1].node, ast.SortByDir(yyDollar[2].ival), ast.SortByNulls(yyDollar[3].ival), 0)
		}
	case 2590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10735
		{
			yyVAL.list = yyDollar[2].list
		}
	case 2591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10737
		{
			yyVAL.list = nil
		}
	case 2592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10742
		{
			yyVAL.list = ast.NewNodeList()
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[1].windef)
		}
	case 2593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10747
		{
			yyVAL.list = yyDollar[1].list
			yyVAL.list.Items = append(yyVAL.list.Items, yyDollar[3].windef)
		}
	case 2594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10755
		{
			n := yyDollar[3].windef
			n.Name = yyDollar[1].str
			yyVAL.windef = n
		}
	case 2595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10764
		{
			yyVAL.windef = yyDollar[2].windef
		}
	case 2596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10766
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			yyVAL.windef = n
		}
	case 2597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10773
		{
			yyVAL.windef = nil
		}
	case 2598:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10778
		{
			n := ast.NewWindowDef("", -1)
			n.Refname = yyDollar[2].str
			n.PartitionClause = yyDollar[3].list
			n.OrderClause = yyDollar[4].list

			n.FrameOptions = yyDollar[5].windef.FrameOptions
			n.StartOffset = yyDollar[5].windef.StartOffset
			n.EndOffset = yyDollar[5].windef.EndOffset
			yyVAL.windef = n
		}
	case 2599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10792
		{
			yyVAL.str = yyDollar[1].str
		}
	case 2600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10793
		{
			yyVAL.str = ""
		}
	case 2601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10797
		{
			yyVAL.list = yyDollar[3].list
		}
	case 2602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10798
		{
			yyVAL.list = nil
		}
	case 2603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10803
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_RANGE
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10810
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_ROWS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10817
		{
			n := yyDollar[2].windef
			n.FrameOptions |= ast.FRAMEOPTION_NONDEFAULT | ast.FRAMEOPTION_GROUPS
			n.FrameOptions |= yyDollar[3].ival
			yyVAL.windef = n
		}
	case 2606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10824
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_DEFAULTS
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10835
		{
			n := yyDollar[1].windef
			// reject invalid cases - these would be runtime errors in PostgreSQL
			if (n.FrameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (n.FrameOptions & ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 {
				yylex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			n.FrameOptions |= ast.FRAMEOPTION_END_CURRENT_ROW
			yyVAL.windef = n
		}
	case 2608:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10849
		{
			n1 := yyDollar[2].windef
			n2 := yyDollar[4].windef

			// form merged options
			frameOptions := n1.FrameOptions
			// shift converts START_ options to END_ options
			frameOptions |= (n2.FrameOptions << 1)
			frameOptions |= ast.FRAMEOPTION_BETWEEN

			// reject invalid cases
			if (frameOptions & ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING) != 0 {
				yylex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			} else if (frameOptions & ast.FRAMEOPTION_END_UNBOUNDED_PRECEDING) != 0 {
				yylex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_CURRENT_ROW) != 0 &&
				(frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 {
				yylex.Error("frame starting from current row cannot have preceding rows")
				return 1
			} else if (frameOptions&ast.FRAMEOPTION_START_OFFSET_FOLLOWING) != 0 &&
				((frameOptions&ast.FRAMEOPTION_END_OFFSET_PRECEDING) != 0 ||
					(frameOptions&ast.FRAMEOPTION_END_CURRENT_ROW) != 0) {
				yylex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			n1.FrameOptions = frameOptions
			n1.EndOffset = n2.StartOffset
			yyVAL.windef = n1
		}
	case 2609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10884
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_PRECEDING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10892
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_UNBOUNDED_FOLLOWING
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10900
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_CURRENT_ROW
			n.StartOffset = nil
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10908
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_PRECEDING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10916
		{
			n := ast.NewWindowDef("", -1)
			n.FrameOptions = ast.FRAMEOPTION_START_OFFSET_FOLLOWING
			n.StartOffset = yyDollar[1].node
			n.EndOffset = nil
			yyVAL.windef = n
		}
	case 2614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10926
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_CURRENT_ROW
		}
	case 2615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10927
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_GROUP
		}
	case 2616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10928
		{
			yyVAL.ival = ast.FRAMEOPTION_EXCLUDE_TIES
		}
	case 2617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:10929
		{
			yyVAL.ival = 0
		}
	case 2618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10930
		{
			yyVAL.ival = 0
		}
	case 2619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10939
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[2].node
		}
	case 2620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10944
		{
			yyVAL.selectLimit = yyDollar[2].selectLimit
			yyVAL.selectLimit.limitOffset = yyDollar[1].node
		}
	case 2621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10949
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10953
		{
			n := &selectLimit{}
			n.limitOffset = yyDollar[1].node
			n.limitCount = nil
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:10963
		{
			yyVAL.selectLimit = yyDollar[1].selectLimit
		}
	case 2624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line postgres.y:10964
		{
			yyVAL.selectLimit = nil
		}
	case 2625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:10969
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[2].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2626:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:10977
		{
			// Disabled because it was too confusing - PostgreSQL error
			yylex.Error("LIMIT #,# syntax is not supported. Use separate LIMIT and OFFSET clauses.")
			return 1
		}
	case 2627:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:10984
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2628:
		yyDollar = yyS[yypt-6 : yypt+1]
//line postgres.y:10992
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = yyDollar[3].node
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2629:
		yyDollar = yyS[yypt-4 : yypt+1]
//line postgres.y:11000
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_COUNT
			yyVAL.selectLimit = n
		}
	case 2630:
		yyDollar = yyS[yypt-5 : yypt+1]
//line postgres.y:11008
		{
			n := &selectLimit{}
			n.limitOffset = nil
			n.limitCount = ast.NewA_Const(ast.NewInteger(1), -1)
			n.limitOption = ast.LIMIT_OPTION_WITH_TIES
			yyVAL.selectLimit = n
		}
	case 2631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11019
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line postgres.y:11022
		{
			yyVAL.node = yyDollar[2].node
		}
	case 2633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11026
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11028
		{
			/* LIMIT ALL is represented as a NULL constant */
			yyVAL.node = ast.NewA_Const(ast.NewNull(), -1)
		}
	case 2635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11035
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11048
		{
			yyVAL.node = yyDollar[1].node
		}
	case 2637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11050
		{
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("+")}}, nil, yyDollar[2].node, -1)
		}
	case 2638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line postgres.y:11054
		{
			// Create a unary minus expression
			yyVAL.node = ast.NewA_Expr(ast.AEXPR_OP, &ast.NodeList{Items: []ast.Node{ast.NewString("-")}}, nil, yyDollar[2].node, -1)
		}
	case 2639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11061
		{
			yyVAL.node = ast.NewA_Const(ast.NewInteger(yyDollar[1].ival), -1)
		}
	case 2640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11062
		{
			yyVAL.node = ast.NewA_Const(ast.NewFloat(yyDollar[1].str), -1)
		}
	case 2641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11067
		{
			yyVAL.ival = 0
		}
	case 2642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11068
		{
			yyVAL.ival = 0
		}
	case 2643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11072
		{
			yyVAL.ival = 0
		}
	case 2644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line postgres.y:11073
		{
			yyVAL.ival = 0
		}
	}
	goto yystack /* stack new state and value */
}
